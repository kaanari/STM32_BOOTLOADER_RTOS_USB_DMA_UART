
RTOS_USBFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b040  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a9c  0801b310  0801b310  0002b310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bdac  0801bdac  0002bdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801bdb4  0801bdb4  0002bdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801bdb8  0801bdb8  0002bdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  0801bdbc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007148  24000098  0801be54  00030098  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240071e0  0801be54  000371e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003448d  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006d0b  00000000  00000000  00064553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002388  00000000  00000000  0006b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002100  00000000  00000000  0006d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d1e1  00000000  00000000  0006f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003743f  00000000  00000000  000ac8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e250  00000000  00000000  000e3d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00241f58  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009ea4  00000000  00000000  00241fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000098 	.word	0x24000098
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801b2f8 	.word	0x0801b2f8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400009c 	.word	0x2400009c
 800030c:	0801b2f8 	.word	0x0801b2f8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003f4:	f000 b974 	b.w	80006e0 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	4604      	mov	r4, r0
 8000418:	468e      	mov	lr, r1
 800041a:	2b00      	cmp	r3, #0
 800041c:	d14d      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041e:	428a      	cmp	r2, r1
 8000420:	4694      	mov	ip, r2
 8000422:	d969      	bls.n	80004f8 <__udivmoddi4+0xe8>
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	b152      	cbz	r2, 8000440 <__udivmoddi4+0x30>
 800042a:	fa01 f302 	lsl.w	r3, r1, r2
 800042e:	f1c2 0120 	rsb	r1, r2, #32
 8000432:	fa20 f101 	lsr.w	r1, r0, r1
 8000436:	fa0c fc02 	lsl.w	ip, ip, r2
 800043a:	ea41 0e03 	orr.w	lr, r1, r3
 800043e:	4094      	lsls	r4, r2
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	0c21      	lsrs	r1, r4, #16
 8000446:	fbbe f6f8 	udiv	r6, lr, r8
 800044a:	fa1f f78c 	uxth.w	r7, ip
 800044e:	fb08 e316 	mls	r3, r8, r6, lr
 8000452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000456:	fb06 f107 	mul.w	r1, r6, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000466:	f080 811f 	bcs.w	80006a8 <__udivmoddi4+0x298>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 811c 	bls.w	80006a8 <__udivmoddi4+0x298>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f0f8 	udiv	r0, r3, r8
 800047c:	fb08 3310 	mls	r3, r8, r0, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb00 f707 	mul.w	r7, r0, r7
 8000488:	42a7      	cmp	r7, r4
 800048a:	d90a      	bls.n	80004a2 <__udivmoddi4+0x92>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000494:	f080 810a 	bcs.w	80006ac <__udivmoddi4+0x29c>
 8000498:	42a7      	cmp	r7, r4
 800049a:	f240 8107 	bls.w	80006ac <__udivmoddi4+0x29c>
 800049e:	4464      	add	r4, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a6:	1be4      	subs	r4, r4, r7
 80004a8:	2600      	movs	r6, #0
 80004aa:	b11d      	cbz	r5, 80004b4 <__udivmoddi4+0xa4>
 80004ac:	40d4      	lsrs	r4, r2
 80004ae:	2300      	movs	r3, #0
 80004b0:	e9c5 4300 	strd	r4, r3, [r5]
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d909      	bls.n	80004d2 <__udivmoddi4+0xc2>
 80004be:	2d00      	cmp	r5, #0
 80004c0:	f000 80ef 	beq.w	80006a2 <__udivmoddi4+0x292>
 80004c4:	2600      	movs	r6, #0
 80004c6:	e9c5 0100 	strd	r0, r1, [r5]
 80004ca:	4630      	mov	r0, r6
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	fab3 f683 	clz	r6, r3
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d14a      	bne.n	8000570 <__udivmoddi4+0x160>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d302      	bcc.n	80004e4 <__udivmoddi4+0xd4>
 80004de:	4282      	cmp	r2, r0
 80004e0:	f200 80f9 	bhi.w	80006d6 <__udivmoddi4+0x2c6>
 80004e4:	1a84      	subs	r4, r0, r2
 80004e6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ea:	2001      	movs	r0, #1
 80004ec:	469e      	mov	lr, r3
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	d0e0      	beq.n	80004b4 <__udivmoddi4+0xa4>
 80004f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004f6:	e7dd      	b.n	80004b4 <__udivmoddi4+0xa4>
 80004f8:	b902      	cbnz	r2, 80004fc <__udivmoddi4+0xec>
 80004fa:	deff      	udf	#255	; 0xff
 80004fc:	fab2 f282 	clz	r2, r2
 8000500:	2a00      	cmp	r2, #0
 8000502:	f040 8092 	bne.w	800062a <__udivmoddi4+0x21a>
 8000506:	eba1 010c 	sub.w	r1, r1, ip
 800050a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800050e:	fa1f fe8c 	uxth.w	lr, ip
 8000512:	2601      	movs	r6, #1
 8000514:	0c20      	lsrs	r0, r4, #16
 8000516:	fbb1 f3f7 	udiv	r3, r1, r7
 800051a:	fb07 1113 	mls	r1, r7, r3, r1
 800051e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000522:	fb0e f003 	mul.w	r0, lr, r3
 8000526:	4288      	cmp	r0, r1
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x12c>
 800052a:	eb1c 0101 	adds.w	r1, ip, r1
 800052e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x12a>
 8000534:	4288      	cmp	r0, r1
 8000536:	f200 80cb 	bhi.w	80006d0 <__udivmoddi4+0x2c0>
 800053a:	4643      	mov	r3, r8
 800053c:	1a09      	subs	r1, r1, r0
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb1 f0f7 	udiv	r0, r1, r7
 8000544:	fb07 1110 	mls	r1, r7, r0, r1
 8000548:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800054c:	fb0e fe00 	mul.w	lr, lr, r0
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x156>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x154>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 80bb 	bhi.w	80006da <__udivmoddi4+0x2ca>
 8000564:	4608      	mov	r0, r1
 8000566:	eba4 040e 	sub.w	r4, r4, lr
 800056a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800056e:	e79c      	b.n	80004aa <__udivmoddi4+0x9a>
 8000570:	f1c6 0720 	rsb	r7, r6, #32
 8000574:	40b3      	lsls	r3, r6
 8000576:	fa22 fc07 	lsr.w	ip, r2, r7
 800057a:	ea4c 0c03 	orr.w	ip, ip, r3
 800057e:	fa20 f407 	lsr.w	r4, r0, r7
 8000582:	fa01 f306 	lsl.w	r3, r1, r6
 8000586:	431c      	orrs	r4, r3
 8000588:	40f9      	lsrs	r1, r7
 800058a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800058e:	fa00 f306 	lsl.w	r3, r0, r6
 8000592:	fbb1 f8f9 	udiv	r8, r1, r9
 8000596:	0c20      	lsrs	r0, r4, #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fb09 1118 	mls	r1, r9, r8, r1
 80005a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005a4:	fb08 f00e 	mul.w	r0, r8, lr
 80005a8:	4288      	cmp	r0, r1
 80005aa:	fa02 f206 	lsl.w	r2, r2, r6
 80005ae:	d90b      	bls.n	80005c8 <__udivmoddi4+0x1b8>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80005b8:	f080 8088 	bcs.w	80006cc <__udivmoddi4+0x2bc>
 80005bc:	4288      	cmp	r0, r1
 80005be:	f240 8085 	bls.w	80006cc <__udivmoddi4+0x2bc>
 80005c2:	f1a8 0802 	sub.w	r8, r8, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1a09      	subs	r1, r1, r0
 80005ca:	b2a4      	uxth	r4, r4
 80005cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80005d0:	fb09 1110 	mls	r1, r9, r0, r1
 80005d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005dc:	458e      	cmp	lr, r1
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x1e2>
 80005e0:	eb1c 0101 	adds.w	r1, ip, r1
 80005e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005e8:	d26c      	bcs.n	80006c4 <__udivmoddi4+0x2b4>
 80005ea:	458e      	cmp	lr, r1
 80005ec:	d96a      	bls.n	80006c4 <__udivmoddi4+0x2b4>
 80005ee:	3802      	subs	r0, #2
 80005f0:	4461      	add	r1, ip
 80005f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005f6:	fba0 9402 	umull	r9, r4, r0, r2
 80005fa:	eba1 010e 	sub.w	r1, r1, lr
 80005fe:	42a1      	cmp	r1, r4
 8000600:	46c8      	mov	r8, r9
 8000602:	46a6      	mov	lr, r4
 8000604:	d356      	bcc.n	80006b4 <__udivmoddi4+0x2a4>
 8000606:	d053      	beq.n	80006b0 <__udivmoddi4+0x2a0>
 8000608:	b15d      	cbz	r5, 8000622 <__udivmoddi4+0x212>
 800060a:	ebb3 0208 	subs.w	r2, r3, r8
 800060e:	eb61 010e 	sbc.w	r1, r1, lr
 8000612:	fa01 f707 	lsl.w	r7, r1, r7
 8000616:	fa22 f306 	lsr.w	r3, r2, r6
 800061a:	40f1      	lsrs	r1, r6
 800061c:	431f      	orrs	r7, r3
 800061e:	e9c5 7100 	strd	r7, r1, [r5]
 8000622:	2600      	movs	r6, #0
 8000624:	4631      	mov	r1, r6
 8000626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	40d8      	lsrs	r0, r3
 8000630:	fa0c fc02 	lsl.w	ip, ip, r2
 8000634:	fa21 f303 	lsr.w	r3, r1, r3
 8000638:	4091      	lsls	r1, r2
 800063a:	4301      	orrs	r1, r0
 800063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000640:	fa1f fe8c 	uxth.w	lr, ip
 8000644:	fbb3 f0f7 	udiv	r0, r3, r7
 8000648:	fb07 3610 	mls	r6, r7, r0, r3
 800064c:	0c0b      	lsrs	r3, r1, #16
 800064e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000652:	fb00 f60e 	mul.w	r6, r0, lr
 8000656:	429e      	cmp	r6, r3
 8000658:	fa04 f402 	lsl.w	r4, r4, r2
 800065c:	d908      	bls.n	8000670 <__udivmoddi4+0x260>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000666:	d22f      	bcs.n	80006c8 <__udivmoddi4+0x2b8>
 8000668:	429e      	cmp	r6, r3
 800066a:	d92d      	bls.n	80006c8 <__udivmoddi4+0x2b8>
 800066c:	3802      	subs	r0, #2
 800066e:	4463      	add	r3, ip
 8000670:	1b9b      	subs	r3, r3, r6
 8000672:	b289      	uxth	r1, r1
 8000674:	fbb3 f6f7 	udiv	r6, r3, r7
 8000678:	fb07 3316 	mls	r3, r7, r6, r3
 800067c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000680:	fb06 f30e 	mul.w	r3, r6, lr
 8000684:	428b      	cmp	r3, r1
 8000686:	d908      	bls.n	800069a <__udivmoddi4+0x28a>
 8000688:	eb1c 0101 	adds.w	r1, ip, r1
 800068c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000690:	d216      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000692:	428b      	cmp	r3, r1
 8000694:	d914      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000696:	3e02      	subs	r6, #2
 8000698:	4461      	add	r1, ip
 800069a:	1ac9      	subs	r1, r1, r3
 800069c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006a0:	e738      	b.n	8000514 <__udivmoddi4+0x104>
 80006a2:	462e      	mov	r6, r5
 80006a4:	4628      	mov	r0, r5
 80006a6:	e705      	b.n	80004b4 <__udivmoddi4+0xa4>
 80006a8:	4606      	mov	r6, r0
 80006aa:	e6e3      	b.n	8000474 <__udivmoddi4+0x64>
 80006ac:	4618      	mov	r0, r3
 80006ae:	e6f8      	b.n	80004a2 <__udivmoddi4+0x92>
 80006b0:	454b      	cmp	r3, r9
 80006b2:	d2a9      	bcs.n	8000608 <__udivmoddi4+0x1f8>
 80006b4:	ebb9 0802 	subs.w	r8, r9, r2
 80006b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006bc:	3801      	subs	r0, #1
 80006be:	e7a3      	b.n	8000608 <__udivmoddi4+0x1f8>
 80006c0:	4646      	mov	r6, r8
 80006c2:	e7ea      	b.n	800069a <__udivmoddi4+0x28a>
 80006c4:	4620      	mov	r0, r4
 80006c6:	e794      	b.n	80005f2 <__udivmoddi4+0x1e2>
 80006c8:	4640      	mov	r0, r8
 80006ca:	e7d1      	b.n	8000670 <__udivmoddi4+0x260>
 80006cc:	46d0      	mov	r8, sl
 80006ce:	e77b      	b.n	80005c8 <__udivmoddi4+0x1b8>
 80006d0:	3b02      	subs	r3, #2
 80006d2:	4461      	add	r1, ip
 80006d4:	e732      	b.n	800053c <__udivmoddi4+0x12c>
 80006d6:	4630      	mov	r0, r6
 80006d8:	e709      	b.n	80004ee <__udivmoddi4+0xde>
 80006da:	4464      	add	r4, ip
 80006dc:	3802      	subs	r0, #2
 80006de:	e742      	b.n	8000566 <__udivmoddi4+0x156>

080006e0 <__aeabi_idiv0>:
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop

080006e4 <scan_all_files>:
FRESULT fresult;

UINT br, bw;  // File read/write count

FRESULT scan_all_files (char* path)        /* Start node to be scanned (***also used as work area***) */
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b098      	sub	sp, #96	; 0x60
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	DIR dir;
	UINT i;

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	6879      	ldr	r1, [r7, #4]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f014 fdae 	bl	8015254 <f_opendir>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <scan_all_files+0xe0>)
 80006fe:	701a      	strb	r2, [r3, #0]

    if (fresult == FR_OK) {
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <scan_all_files+0xe0>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d156      	bne.n	80007b6 <scan_all_files+0xd2>
            for (;;) {
            	fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	492e      	ldr	r1, [pc, #184]	; (80007c8 <scan_all_files+0xe4>)
 800070e:	4618      	mov	r0, r3
 8000710:	f014 fe94 	bl	801543c <f_readdir>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <scan_all_files+0xe0>)
 800071a:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800071c:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <scan_all_files+0xe0>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d143      	bne.n	80007ac <scan_all_files+0xc8>
 8000724:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <scan_all_files+0xe4>)
 8000726:	7e9b      	ldrb	r3, [r3, #26]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d03f      	beq.n	80007ac <scan_all_files+0xc8>
                if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <scan_all_files+0xe4>)
 800072e:	7b1b      	ldrb	r3, [r3, #12]
 8000730:	f003 0310 	and.w	r3, r3, #16
 8000734:	2b00      	cmp	r3, #0
 8000736:	d02e      	beq.n	8000796 <scan_all_files+0xb2>
                	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000738:	4924      	ldr	r1, [pc, #144]	; (80007cc <scan_all_files+0xe8>)
 800073a:	4825      	ldr	r0, [pc, #148]	; (80007d0 <scan_all_files+0xec>)
 800073c:	f7ff fde8 	bl	8000310 <strcmp>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d02d      	beq.n	80007a2 <scan_all_files+0xbe>
                	if (!(strcmp("System Volume Information", fno.fname))) continue;
 8000746:	4921      	ldr	r1, [pc, #132]	; (80007cc <scan_all_files+0xe8>)
 8000748:	4822      	ldr	r0, [pc, #136]	; (80007d4 <scan_all_files+0xf0>)
 800074a:	f7ff fde1 	bl	8000310 <strcmp>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d028      	beq.n	80007a6 <scan_all_files+0xc2>
                	i = strlen(path);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff fde5 	bl	8000324 <strlen>
 800075a:	65f8      	str	r0, [r7, #92]	; 0x5c
                    sprintf(&path[i], "/%s", fno.fname);
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000760:	4413      	add	r3, r2
 8000762:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <scan_all_files+0xe8>)
 8000764:	491c      	ldr	r1, [pc, #112]	; (80007d8 <scan_all_files+0xf4>)
 8000766:	4618      	mov	r0, r3
 8000768:	f019 fd3a 	bl	801a1e0 <siprintf>
                    printf("%s\r\n",path);
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	481b      	ldr	r0, [pc, #108]	; (80007dc <scan_all_files+0xf8>)
 8000770:	f019 fc98 	bl	801a0a4 <iprintf>
                    fresult = scan_all_files(path);                    /* Enter the directory */
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ffb5 	bl	80006e4 <scan_all_files>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <scan_all_files+0xe0>)
 8000780:	701a      	strb	r2, [r3, #0]
                    if (fresult != FR_OK) break;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <scan_all_files+0xe0>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d10f      	bne.n	80007aa <scan_all_files+0xc6>
                    path[i] = 0;
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800078e:	4413      	add	r3, r2
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	e7b8      	b.n	8000708 <scan_all_files+0x24>
                } else {                                       /* It is a file. */
                	printf("%s/%s\r\n", path, fno.fname);
 8000796:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <scan_all_files+0xe8>)
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	4811      	ldr	r0, [pc, #68]	; (80007e0 <scan_all_files+0xfc>)
 800079c:	f019 fc82 	bl	801a0a4 <iprintf>
 80007a0:	e7b2      	b.n	8000708 <scan_all_files+0x24>
                	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80007a2:	bf00      	nop
 80007a4:	e7b0      	b.n	8000708 <scan_all_files+0x24>
                	if (!(strcmp("System Volume Information", fno.fname))) continue;
 80007a6:	bf00      	nop
            	fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80007a8:	e7ae      	b.n	8000708 <scan_all_files+0x24>
                    if (fresult != FR_OK) break;
 80007aa:	bf00      	nop
                }
            }
            f_closedir(&dir);
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4618      	mov	r0, r3
 80007b2:	f014 fe18 	bl	80153e6 <f_closedir>
        }


    return fresult;
 80007b6:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <scan_all_files+0xe0>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3760      	adds	r7, #96	; 0x60
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	240001d8 	.word	0x240001d8
 80007c8:	240000b8 	.word	0x240000b8
 80007cc:	240000d2 	.word	0x240000d2
 80007d0:	0801b310 	.word	0x0801b310
 80007d4:	0801b31c 	.word	0x0801b31c
 80007d8:	0801b338 	.word	0x0801b338
 80007dc:	0801b33c 	.word	0x0801b33c
 80007e0:	0801b344 	.word	0x0801b344

080007e4 <create_file>:

FRESULT create_file (char *name)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	uint8_t filename_position = find_filename_argument(name);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 fa1f 	bl	8000c30 <find_filename_argument>
 80007f2:	4603      	mov	r3, r0
 80007f4:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	name = name + filename_position;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	607b      	str	r3, [r7, #4]

	fresult = f_stat (name, &fno);
 80007fe:	4922      	ldr	r1, [pc, #136]	; (8000888 <create_file+0xa4>)
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f014 fe78 	bl	80154f6 <f_stat>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <create_file+0xa8>)
 800080c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <create_file+0xa8>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d104      	bne.n	8000820 <create_file+0x3c>
	{
		printf("File '%s' already exists!\r\n",name);
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	481d      	ldr	r0, [pc, #116]	; (8000890 <create_file+0xac>)
 800081a:	f019 fc43 	bl	801a0a4 <iprintf>
 800081e:	e02c      	b.n	800087a <create_file+0x96>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000820:	220b      	movs	r2, #11
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	481b      	ldr	r0, [pc, #108]	; (8000894 <create_file+0xb0>)
 8000826:	f013 fb63 	bl	8013ef0 <f_open>
 800082a:	4603      	mov	r3, r0
 800082c:	461a      	mov	r2, r3
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <create_file+0xa8>)
 8000830:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <create_file+0xa8>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d009      	beq.n	800084e <create_file+0x6a>
		{
			printf("Error(%d) when creating the file '%s'\r\n", fresult, name);
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <create_file+0xa8>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4619      	mov	r1, r3
 8000842:	4815      	ldr	r0, [pc, #84]	; (8000898 <create_file+0xb4>)
 8000844:	f019 fc2e 	bl	801a0a4 <iprintf>
		    return fresult;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <create_file+0xa8>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	e017      	b.n	800087e <create_file+0x9a>
		}
		else
		{
			printf("'%s' is created successfully\r\n",name);
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <create_file+0xb8>)
 8000852:	f019 fc27 	bl	801a0a4 <iprintf>
		}

		fresult = f_close(&USBHFile);
 8000856:	480f      	ldr	r0, [pc, #60]	; (8000894 <create_file+0xb0>)
 8000858:	f014 fb53 	bl	8014f02 <f_close>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <create_file+0xa8>)
 8000862:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <create_file+0xa8>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d006      	beq.n	800087a <create_file+0x96>
		{
			printf("Error(%d) when closing the file '%s'\r\n", fresult, name);
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <create_file+0xa8>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	4619      	mov	r1, r3
 8000874:	480a      	ldr	r0, [pc, #40]	; (80008a0 <create_file+0xbc>)
 8000876:	f019 fc15 	bl	801a0a4 <iprintf>
		}
	}
    return fresult;
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <create_file+0xa8>)
 800087c:	781b      	ldrb	r3, [r3, #0]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	240000b8 	.word	0x240000b8
 800088c:	240001d8 	.word	0x240001d8
 8000890:	0801b34c 	.word	0x0801b34c
 8000894:	24001ba0 	.word	0x24001ba0
 8000898:	0801b368 	.word	0x0801b368
 800089c:	0801b390 	.word	0x0801b390
 80008a0:	0801b3b0 	.word	0x0801b3b0

080008a4 <remove_file>:

FRESULT remove_file (char *name)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/

	uint8_t filename_position = find_filename_argument(name);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 f9bf 	bl	8000c30 <find_filename_argument>
 80008b2:	4603      	mov	r3, r0
 80008b4:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	name = name + filename_position;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	4413      	add	r3, r2
 80008bc:	607b      	str	r3, [r7, #4]

	fresult = f_stat (name, &fno);
 80008be:	4917      	ldr	r1, [pc, #92]	; (800091c <remove_file+0x78>)
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f014 fe18 	bl	80154f6 <f_stat>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <remove_file+0x7c>)
 80008cc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <remove_file+0x7c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d004      	beq.n	80008e0 <remove_file+0x3c>
	{
		printf("File '%s' does not exists!\r\n", name);
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	4812      	ldr	r0, [pc, #72]	; (8000924 <remove_file+0x80>)
 80008da:	f019 fbe3 	bl	801a0a4 <iprintf>
 80008de:	e016      	b.n	800090e <remove_file+0x6a>
	}
	else
	{
		fresult = f_unlink (name);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f014 fe62 	bl	80155aa <f_unlink>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <remove_file+0x7c>)
 80008ec:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK)
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <remove_file+0x7c>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d104      	bne.n	8000900 <remove_file+0x5c>
		{
			printf("'%s' has been removed successfully.\r\n", name);
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <remove_file+0x84>)
 80008fa:	f019 fbd3 	bl	801a0a4 <iprintf>
 80008fe:	e006      	b.n	800090e <remove_file+0x6a>
		}
		else
		{
			printf("Error(%d) when removing '%s'!\r\n",fresult, name);
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <remove_file+0x7c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	4619      	mov	r1, r3
 8000908:	4808      	ldr	r0, [pc, #32]	; (800092c <remove_file+0x88>)
 800090a:	f019 fbcb 	bl	801a0a4 <iprintf>
		}
	}
	return fresult;
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <remove_file+0x7c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	240000b8 	.word	0x240000b8
 8000920:	240001d8 	.word	0x240001d8
 8000924:	0801b3d8 	.word	0x0801b3d8
 8000928:	0801b3f8 	.word	0x0801b3f8
 800092c:	0801b420 	.word	0x0801b420

08000930 <create_dir>:

FRESULT create_dir (char *name)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	uint8_t filename_position = find_filename_argument(name);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 f979 	bl	8000c30 <find_filename_argument>
 800093e:	4603      	mov	r3, r0
 8000940:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	name = name + filename_position;
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	4413      	add	r3, r2
 8000948:	607b      	str	r3, [r7, #4]

    fresult = f_mkdir(name);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f014 ff4c 	bl	80157e8 <f_mkdir>
 8000950:	4603      	mov	r3, r0
 8000952:	461a      	mov	r2, r3
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <create_dir+0x54>)
 8000956:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <create_dir+0x54>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d104      	bne.n	800096a <create_dir+0x3a>
    {
    	printf("'%s' has been created successfully.\r\n", name);
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	4809      	ldr	r0, [pc, #36]	; (8000988 <create_dir+0x58>)
 8000964:	f019 fb9e 	bl	801a0a4 <iprintf>
 8000968:	e006      	b.n	8000978 <create_dir+0x48>
    }
    else
    {
    	printf("Error(%d) when creating directory '%s'\r\n", fresult,name);
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <create_dir+0x54>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <create_dir+0x5c>)
 8000974:	f019 fb96 	bl	801a0a4 <iprintf>
    }
    return fresult;
 8000978:	4b02      	ldr	r3, [pc, #8]	; (8000984 <create_dir+0x54>)
 800097a:	781b      	ldrb	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	240001d8 	.word	0x240001d8
 8000988:	0801b440 	.word	0x0801b440
 800098c:	0801b468 	.word	0x0801b468

08000990 <write_file>:

FRESULT write_file(char *filename, char* data, BYTE mode)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	4613      	mov	r3, r2
 800099c:	71fb      	strb	r3, [r7, #7]

	fresult = f_open(&USBHFile, filename, mode);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	68f9      	ldr	r1, [r7, #12]
 80009a4:	4826      	ldr	r0, [pc, #152]	; (8000a40 <write_file+0xb0>)
 80009a6:	f013 faa3 	bl	8013ef0 <f_open>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <write_file+0xb4>)
 80009b0:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 80009b2:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <write_file+0xb4>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d009      	beq.n	80009ce <write_file+0x3e>
		printf("Error(%d) when opening file '%s'.\r\n", fresult, filename);
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <write_file+0xb4>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	4619      	mov	r1, r3
 80009c2:	4821      	ldr	r0, [pc, #132]	; (8000a48 <write_file+0xb8>)
 80009c4:	f019 fb6e 	bl	801a0a4 <iprintf>
		return fresult;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <write_file+0xb4>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	e033      	b.n	8000a36 <write_file+0xa6>
	}

	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 80009ce:	68b8      	ldr	r0, [r7, #8]
 80009d0:	f7ff fca8 	bl	8000324 <strlen>
 80009d4:	4602      	mov	r2, r0
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <write_file+0xbc>)
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	4819      	ldr	r0, [pc, #100]	; (8000a40 <write_file+0xb0>)
 80009dc:	f013 ff48 	bl	8014870 <f_write>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <write_file+0xb4>)
 80009e6:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <write_file+0xb4>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d009      	beq.n	8000a04 <write_file+0x74>
	{
		printf("Error(%d) when opening file '%s'.\r\n", fresult, filename);
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <write_file+0xb4>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	4619      	mov	r1, r3
 80009f8:	4813      	ldr	r0, [pc, #76]	; (8000a48 <write_file+0xb8>)
 80009fa:	f019 fb53 	bl	801a0a4 <iprintf>
		return fresult;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <write_file+0xb4>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	e018      	b.n	8000a36 <write_file+0xa6>
	}

	/* Close file */
	fresult = f_close(&USBHFile);
 8000a04:	480e      	ldr	r0, [pc, #56]	; (8000a40 <write_file+0xb0>)
 8000a06:	f014 fa7c 	bl	8014f02 <f_close>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <write_file+0xb4>)
 8000a10:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <write_file+0xb4>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d007      	beq.n	8000a2a <write_file+0x9a>
	{
		printf("Error(%d) when opening file '%s'.\r\n", fresult, filename);
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <write_file+0xb4>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4809      	ldr	r0, [pc, #36]	; (8000a48 <write_file+0xb8>)
 8000a24:	f019 fb3e 	bl	801a0a4 <iprintf>
 8000a28:	e003      	b.n	8000a32 <write_file+0xa2>
	}
	else
	{
		printf("File '%s' is written successfully.\r\n", filename);
 8000a2a:	68f9      	ldr	r1, [r7, #12]
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <write_file+0xc0>)
 8000a2e:	f019 fb39 	bl	801a0a4 <iprintf>
	}

	return fresult;
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <write_file+0xb4>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24001ba0 	.word	0x24001ba0
 8000a44:	240001d8 	.word	0x240001d8
 8000a48:	0801b494 	.word	0x0801b494
 8000a4c:	240001e0 	.word	0x240001e0
 8000a50:	0801b4b8 	.word	0x0801b4b8

08000a54 <read_file>:

FRESULT read_file (char *filename)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	uint8_t filename_position = find_filename_argument(filename);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 f8e7 	bl	8000c30 <find_filename_argument>
 8000a62:	4603      	mov	r3, r0
 8000a64:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	filename = filename + filename_position;
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	607b      	str	r3, [r7, #4]


	/**** check whether the file exists or not ****/
	fresult = f_stat (filename, &fno);
 8000a6e:	4938      	ldr	r1, [pc, #224]	; (8000b50 <read_file+0xfc>)
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f014 fd40 	bl	80154f6 <f_stat>
 8000a76:	4603      	mov	r3, r0
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <read_file+0x100>)
 8000a7c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000a7e:	4b35      	ldr	r3, [pc, #212]	; (8000b54 <read_file+0x100>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d006      	beq.n	8000a94 <read_file+0x40>
	{
		printf("File '%s' does not exists\r\n", filename);
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	4833      	ldr	r0, [pc, #204]	; (8000b58 <read_file+0x104>)
 8000a8a:	f019 fb0b 	bl	801a0a4 <iprintf>
	    return fresult;
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <read_file+0x100>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	e059      	b.n	8000b48 <read_file+0xf4>
	}

	/* Open file to read */
	fresult = f_open(&USBHFile, filename, FA_READ);
 8000a94:	2201      	movs	r2, #1
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	4830      	ldr	r0, [pc, #192]	; (8000b5c <read_file+0x108>)
 8000a9a:	f013 fa29 	bl	8013ef0 <f_open>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <read_file+0x100>)
 8000aa4:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK)
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <read_file+0x100>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d009      	beq.n	8000ac2 <read_file+0x6e>
	{
		printf("Error(%d) when opening file '%s'\r\n", fresult, filename);
 8000aae:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <read_file+0x100>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	482a      	ldr	r0, [pc, #168]	; (8000b60 <read_file+0x10c>)
 8000ab8:	f019 faf4 	bl	801a0a4 <iprintf>
		return fresult;
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <read_file+0x100>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	e042      	b.n	8000b48 <read_file+0xf4>
	}

	char *buffer = malloc(f_size(&USBHFile)+1);
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <read_file+0x108>)
 8000ac4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	3301      	adds	r3, #1
 8000acc:	4618      	mov	r0, r3
 8000ace:	f019 f9e3 	bl	8019e98 <malloc>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&USBHFile, buffer, f_size(&USBHFile), &br);
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <read_file+0x108>)
 8000ad8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <read_file+0x110>)
 8000ade:	68b9      	ldr	r1, [r7, #8]
 8000ae0:	481e      	ldr	r0, [pc, #120]	; (8000b5c <read_file+0x108>)
 8000ae2:	f013 fcfe 	bl	80144e2 <f_read>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <read_file+0x100>)
 8000aec:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <read_file+0x100>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d009      	beq.n	8000b0a <read_file+0xb6>
	{
		printf("Error(%d) when reading file '%s'\r\n", fresult, filename);
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <read_file+0x100>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4619      	mov	r1, r3
 8000afe:	481a      	ldr	r0, [pc, #104]	; (8000b68 <read_file+0x114>)
 8000b00:	f019 fad0 	bl	801a0a4 <iprintf>
	    return fresult;
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <read_file+0x100>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	e01e      	b.n	8000b48 <read_file+0xf4>
	}

	buffer[f_size(&USBHFile)] = '\0';
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <read_file+0x108>)
 8000b0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4413      	add	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]


	printf("%s\r\n", buffer);
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	4814      	ldr	r0, [pc, #80]	; (8000b6c <read_file+0x118>)
 8000b1c:	f019 fac2 	bl	801a0a4 <iprintf>
	/* Close file */
	fresult = f_close(&USBHFile);
 8000b20:	480e      	ldr	r0, [pc, #56]	; (8000b5c <read_file+0x108>)
 8000b22:	f014 f9ee 	bl	8014f02 <f_close>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <read_file+0x100>)
 8000b2c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <read_file+0x100>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <read_file+0xf0>
	{
		printf("Error(%d) when closing file '%s'\r\n", fresult, filename);
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <read_file+0x100>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480c      	ldr	r0, [pc, #48]	; (8000b70 <read_file+0x11c>)
 8000b40:	f019 fab0 	bl	801a0a4 <iprintf>
	}

	return fresult;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <read_file+0x100>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	240000b8 	.word	0x240000b8
 8000b54:	240001d8 	.word	0x240001d8
 8000b58:	0801b4e0 	.word	0x0801b4e0
 8000b5c:	24001ba0 	.word	0x24001ba0
 8000b60:	0801b4fc 	.word	0x0801b4fc
 8000b64:	240001dc 	.word	0x240001dc
 8000b68:	0801b520 	.word	0x0801b520
 8000b6c:	0801b33c 	.word	0x0801b33c
 8000b70:	0801b544 	.word	0x0801b544

08000b74 <echo>:


/* HIGH LEVEL FUNCTIONS */
FRESULT echo(char *arguments){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	uint8_t argument_position = find_filename_argument(arguments);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f857 	bl	8000c30 <find_filename_argument>
 8000b82:	4603      	mov	r3, r0
 8000b84:	77fb      	strb	r3, [r7, #31]
		return FR_INVALID_NAME;
	}

	char *data_field_start_ptr, *data_field_end_ptr, *file_name_ptr;

	data_field_start_ptr = strchr(arguments, '"');
 8000b86:	2122      	movs	r1, #34	; 0x22
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f019 fb49 	bl	801a220 <strchr>
 8000b8e:	61b8      	str	r0, [r7, #24]
	if(!data_field_start_ptr){
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d104      	bne.n	8000ba0 <echo+0x2c>
		printf("Specify the text to be written in the file!\r\n");
 8000b96:	4822      	ldr	r0, [pc, #136]	; (8000c20 <echo+0xac>)
 8000b98:	f019 fb0a 	bl	801a1b0 <puts>
		return FR_INVALID_NAME;
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	e03a      	b.n	8000c16 <echo+0xa2>
	}

	data_field_end_ptr = strchr(data_field_start_ptr+1, '"');
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	2122      	movs	r1, #34	; 0x22
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f019 fb3a 	bl	801a220 <strchr>
 8000bac:	6178      	str	r0, [r7, #20]


	if(!data_field_end_ptr){
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d104      	bne.n	8000bbe <echo+0x4a>
		printf("Specify the text to be written in the file!\r\n");
 8000bb4:	481a      	ldr	r0, [pc, #104]	; (8000c20 <echo+0xac>)
 8000bb6:	f019 fafb 	bl	801a1b0 <puts>
		return FR_INVALID_NAME;
 8000bba:	2306      	movs	r3, #6
 8000bbc:	e02b      	b.n	8000c16 <echo+0xa2>
	}
	data_field_start_ptr++;
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
	*data_field_end_ptr = '\0';
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]

	file_name_ptr = strstr(data_field_end_ptr+1, ">>");
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4915      	ldr	r1, [pc, #84]	; (8000c24 <echo+0xb0>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f019 fb46 	bl	801a262 <strstr>
 8000bd6:	6138      	str	r0, [r7, #16]
	if(!file_name_ptr){
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d104      	bne.n	8000be8 <echo+0x74>
		printf("Specify the filename to be written in the file!\r\n");
 8000bde:	4812      	ldr	r0, [pc, #72]	; (8000c28 <echo+0xb4>)
 8000be0:	f019 fae6 	bl	801a1b0 <puts>
		return FR_INVALID_NAME;
 8000be4:	2306      	movs	r3, #6
 8000be6:	e016      	b.n	8000c16 <echo+0xa2>
	}

	uint8_t filename_position = find_filename_argument(file_name_ptr+2);
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	3302      	adds	r3, #2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f81f 	bl	8000c30 <find_filename_argument>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Specify the filename to be written in the file!\r\n");
		return FR_INVALID_NAME;
	}

	file_name_ptr = file_name_ptr + filename_position + 2;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]

	fresult = write_file(file_name_ptr, data_field_start_ptr, FA_OPEN_ALWAYS | FA_WRITE);
 8000c00:	2212      	movs	r2, #18
 8000c02:	69b9      	ldr	r1, [r7, #24]
 8000c04:	6938      	ldr	r0, [r7, #16]
 8000c06:	f7ff fec3 	bl	8000990 <write_file>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <echo+0xb8>)
 8000c10:	701a      	strb	r2, [r3, #0]
	return fresult;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <echo+0xb8>)
 8000c14:	781b      	ldrb	r3, [r3, #0]

}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3720      	adds	r7, #32
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	0801b568 	.word	0x0801b568
 8000c24:	0801b598 	.word	0x0801b598
 8000c28:	0801b59c 	.word	0x0801b59c
 8000c2c:	240001d8 	.word	0x240001d8

08000c30 <find_filename_argument>:

int8_t find_filename_argument(char* command)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	char* args_start = command;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	613b      	str	r3, [r7, #16]
	uint8_t len = strlen(args_start);
 8000c3c:	6938      	ldr	r0, [r7, #16]
 8000c3e:	f7ff fb71 	bl	8000324 <strlen>
 8000c42:	4603      	mov	r3, r0
 8000c44:	73fb      	strb	r3, [r7, #15]

	int8_t i = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	75fb      	strb	r3, [r7, #23]

	if(len == 0){
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <find_filename_argument+0x26>
		return ARG_ERR;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c54:	e019      	b.n	8000c8a <find_filename_argument+0x5a>
	}

	for(i = 0; i <= len; i ++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	75fb      	strb	r3, [r7, #23]
 8000c5a:	e00f      	b.n	8000c7c <find_filename_argument+0x4c>
	{
		if(args_start[i] != ' ')
 8000c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4413      	add	r3, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b20      	cmp	r3, #32
 8000c68:	d002      	beq.n	8000c70 <find_filename_argument+0x40>
		{
			return i;
 8000c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c6e:	e00c      	b.n	8000c8a <find_filename_argument+0x5a>
	for(i = 0; i <= len; i ++)
 8000c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	3301      	adds	r3, #1
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	75fb      	strb	r3, [r7, #23]
 8000c7c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	ddea      	ble.n	8000c5c <find_filename_argument+0x2c>
			break;
		}
	}

	return ARG_ERR;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <vApplicationGetIdleTaskMemory+0x30>)
 8000caa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	240001e4 	.word	0x240001e4
 8000cc4:	24000238 	.word	0x24000238

08000cc8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <vApplicationGetTimerTaskMemory+0x2c>)
 8000cd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <vApplicationGetTimerTaskMemory+0x30>)
 8000cde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	24000438 	.word	0x24000438
 8000cf8:	2400048c 	.word	0x2400048c

08000cfc <_write>:

uint8_t UART_TX_BUFFER[UART_TX_BUFFER_LENGTH];
uint8_t UART_RX_BUFFER[UART_RX_BUFFER_LENGTH];

int _write(int file, uint8_t *data, int len)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]

   /* Lock Semaphore to ensure print buffer is used just by one thread. */
   osSemaphoreWait(UART_TX_SemaphoreHandle, osWaitForever);
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <_write+0x4c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d10:	4618      	mov	r0, r3
 8000d12:	f015 fa11 	bl	8016138 <osSemaphoreWait>

   memcpy(UART_TX_BUFFER, data, len);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	68b9      	ldr	r1, [r7, #8]
 8000d1c:	480b      	ldr	r0, [pc, #44]	; (8000d4c <_write+0x50>)
 8000d1e:	f019 f8cb 	bl	8019eb8 <memcpy>

   HAL_StatusTypeDef status =
      HAL_UART_Transmit_DMA(&huart3, (uint8_t*)UART_TX_BUFFER, len);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	4908      	ldr	r1, [pc, #32]	; (8000d4c <_write+0x50>)
 8000d2a:	4809      	ldr	r0, [pc, #36]	; (8000d50 <_write+0x54>)
 8000d2c:	f008 fd08 	bl	8009740 <HAL_UART_Transmit_DMA>
 8000d30:	4603      	mov	r3, r0
 8000d32:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <_write+0x42>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	e000      	b.n	8000d40 <_write+0x44>
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	24000a1c 	.word	0x24000a1c
 8000d4c:	24000a20 	.word	0x24000a20
 8000d50:	2400088c 	.word	0x2400088c

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b5b0      	push	{r4, r5, r7, lr}
 8000d56:	b09a      	sub	sp, #104	; 0x68
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5a:	f001 f94b 	bl	8001ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5e:	f000 f86f 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d62:	f000 f951 	bl	8001008 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000d66:	f00b fda5 	bl	800c8b4 <MX_FATFS_Init>
  MX_DMA_Init();
 8000d6a:	f000 f925 	bl	8000fb8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000d6e:	f000 f8d7 	bl	8000f20 <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of UART_TX_Semaphore */
  osSemaphoreDef(UART_TX_Semaphore);
 8000d72:	2300      	movs	r3, #0
 8000d74:	663b      	str	r3, [r7, #96]	; 0x60
 8000d76:	2300      	movs	r3, #0
 8000d78:	667b      	str	r3, [r7, #100]	; 0x64
  UART_TX_SemaphoreHandle = osSemaphoreCreate(osSemaphore(UART_TX_Semaphore), 1);
 8000d7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4618      	mov	r0, r3
 8000d82:	f015 f9a6 	bl	80160d2 <osSemaphoreCreate>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a24      	ldr	r2, [pc, #144]	; (8000e1c <main+0xc8>)
 8000d8a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer1 */
  osTimerDef(Timer1, Timer1_Callback);
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <main+0xcc>)
 8000d8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d90:	2300      	movs	r3, #0
 8000d92:	65fb      	str	r3, [r7, #92]	; 0x5c
  Timer1Handle = osTimerCreate(osTimer(Timer1), osTimerPeriodic, NULL);
 8000d94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f015 f8b5 	bl	8015f0c <osTimerCreate>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <main+0xd0>)
 8000da6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <main+0xd4>)
 8000daa:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000dae:	461d      	mov	r5, r3
 8000db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000db8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000dbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f015 f841 	bl	8015e4a <osThreadCreate>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <main+0xd8>)
 8000dcc:	6013      	str	r3, [r2, #0]

  /* definition and creation of USBFileSystemTa */
  osThreadDef(USBFileSystemTa, USBFileSystemTask_Start, osPriorityNormal, 0, 128);
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <main+0xdc>)
 8000dd0:	f107 0420 	add.w	r4, r7, #32
 8000dd4:	461d      	mov	r5, r3
 8000dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USBFileSystemTaHandle = osThreadCreate(osThread(USBFileSystemTa), NULL);
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f015 f82e 	bl	8015e4a <osThreadCreate>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <main+0xe0>)
 8000df2:	6013      	str	r3, [r2, #0]

  /* definition and creation of ConsoleTask */
  osThreadDef(ConsoleTask, ConsoleTask_Start, osPriorityNormal, 0, 1024);
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <main+0xe4>)
 8000df6:	1d3c      	adds	r4, r7, #4
 8000df8:	461d      	mov	r5, r3
 8000dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ConsoleTaskHandle = osThreadCreate(osThread(ConsoleTask), NULL);
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f015 f81d 	bl	8015e4a <osThreadCreate>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <main+0xe8>)
 8000e14:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e16:	f015 f811 	bl	8015e3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <main+0xc6>
 8000e1c:	24000a1c 	.word	0x24000a1c
 8000e20:	08001a29 	.word	0x08001a29
 8000e24:	24000a18 	.word	0x24000a18
 8000e28:	0801b5f8 	.word	0x0801b5f8
 8000e2c:	24000a0c 	.word	0x24000a0c
 8000e30:	0801b614 	.word	0x0801b614
 8000e34:	24000a10 	.word	0x24000a10
 8000e38:	0801b630 	.word	0x0801b630
 8000e3c:	24000a14 	.word	0x24000a14

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b09c      	sub	sp, #112	; 0x70
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	224c      	movs	r2, #76	; 0x4c
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f019 f840 	bl	8019ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2220      	movs	r2, #32
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f019 f83a 	bl	8019ed4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e60:	2002      	movs	r0, #2
 8000e62:	f005 fe47 	bl	8006af4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e66:	2300      	movs	r3, #0
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <SystemClock_Config+0xdc>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a2b      	ldr	r2, [pc, #172]	; (8000f1c <SystemClock_Config+0xdc>)
 8000e70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <SystemClock_Config+0xdc>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e82:	bf00      	nop
 8000e84:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <SystemClock_Config+0xdc>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e90:	d1f8      	bne.n	8000e84 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e92:	2321      	movs	r3, #33	; 0x21
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000eac:	f240 1313 	movw	r3, #275	; 0x113
 8000eb0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f005 fe5a 	bl	8006b88 <HAL_RCC_OscConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000eda:	f000 fdc1 	bl	8001a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ede:	233f      	movs	r3, #63	; 0x3f
 8000ee0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000eea:	2308      	movs	r3, #8
 8000eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000eee:	2340      	movs	r3, #64	; 0x40
 8000ef0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ef2:	2340      	movs	r3, #64	; 0x40
 8000ef4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000efc:	2340      	movs	r3, #64	; 0x40
 8000efe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2103      	movs	r1, #3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f006 f9ed 	bl	80072e4 <HAL_RCC_ClockConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f10:	f000 fda6 	bl	8001a60 <Error_Handler>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3770      	adds	r7, #112	; 0x70
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	58024800 	.word	0x58024800

08000f20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <MX_USART3_UART_Init+0x94>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f68:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f6a:	f008 fb99 	bl	80096a0 <HAL_UART_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f74:	f000 fd74 	bl	8001a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f7c:	f00a fb88 	bl	800b690 <HAL_UARTEx_SetTxFifoThreshold>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f86:	f000 fd6b 	bl	8001a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f8e:	f00a fbbd 	bl	800b70c <HAL_UARTEx_SetRxFifoThreshold>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f98:	f000 fd62 	bl	8001a60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f9e:	f00a fb3e 	bl	800b61e <HAL_UARTEx_DisableFifoMode>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa8:	f000 fd5a 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2400088c 	.word	0x2400088c
 8000fb4:	40004800 	.word	0x40004800

08000fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_DMA_Init+0x4c>)
 8000fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc4:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <MX_DMA_Init+0x4c>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <MX_DMA_Init+0x4c>)
 8000fd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2105      	movs	r1, #5
 8000fe0:	200b      	movs	r0, #11
 8000fe2:	f001 f93f 	bl	8002264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fe6:	200b      	movs	r0, #11
 8000fe8:	f001 f956 	bl	8002298 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2105      	movs	r1, #5
 8000ff0:	200c      	movs	r0, #12
 8000ff2:	f001 f937 	bl	8002264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ff6:	200c      	movs	r0, #12
 8000ff8:	f001 f94e 	bl	8002298 <HAL_NVIC_EnableIRQ>

}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	58024400 	.word	0x58024400

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	; 0x30
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	4b83      	ldr	r3, [pc, #524]	; (800122c <MX_GPIO_Init+0x224>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	4a81      	ldr	r2, [pc, #516]	; (800122c <MX_GPIO_Init+0x224>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102e:	4b7f      	ldr	r3, [pc, #508]	; (800122c <MX_GPIO_Init+0x224>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
 800103a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103c:	4b7b      	ldr	r3, [pc, #492]	; (800122c <MX_GPIO_Init+0x224>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	4a7a      	ldr	r2, [pc, #488]	; (800122c <MX_GPIO_Init+0x224>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104c:	4b77      	ldr	r3, [pc, #476]	; (800122c <MX_GPIO_Init+0x224>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b74      	ldr	r3, [pc, #464]	; (800122c <MX_GPIO_Init+0x224>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	4a72      	ldr	r2, [pc, #456]	; (800122c <MX_GPIO_Init+0x224>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106a:	4b70      	ldr	r3, [pc, #448]	; (800122c <MX_GPIO_Init+0x224>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b6c      	ldr	r3, [pc, #432]	; (800122c <MX_GPIO_Init+0x224>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	4a6b      	ldr	r2, [pc, #428]	; (800122c <MX_GPIO_Init+0x224>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001088:	4b68      	ldr	r3, [pc, #416]	; (800122c <MX_GPIO_Init+0x224>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	4b65      	ldr	r3, [pc, #404]	; (800122c <MX_GPIO_Init+0x224>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	4a63      	ldr	r2, [pc, #396]	; (800122c <MX_GPIO_Init+0x224>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a6:	4b61      	ldr	r3, [pc, #388]	; (800122c <MX_GPIO_Init+0x224>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b4:	4b5d      	ldr	r3, [pc, #372]	; (800122c <MX_GPIO_Init+0x224>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	4a5c      	ldr	r2, [pc, #368]	; (800122c <MX_GPIO_Init+0x224>)
 80010bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c4:	4b59      	ldr	r3, [pc, #356]	; (800122c <MX_GPIO_Init+0x224>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d2:	4b56      	ldr	r3, [pc, #344]	; (800122c <MX_GPIO_Init+0x224>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	4a54      	ldr	r2, [pc, #336]	; (800122c <MX_GPIO_Init+0x224>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e2:	4b52      	ldr	r3, [pc, #328]	; (800122c <MX_GPIO_Init+0x224>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f244 0101 	movw	r1, #16385	; 0x4001
 80010f6:	484e      	ldr	r0, [pc, #312]	; (8001230 <MX_GPIO_Init+0x228>)
 80010f8:	f004 f8be 	bl	8005278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001102:	484c      	ldr	r0, [pc, #304]	; (8001234 <MX_GPIO_Init+0x22c>)
 8001104:	f004 f8b8 	bl	8005278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, USB_VBUS_Pin|LED_YELLOW_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2103      	movs	r1, #3
 800110c:	484a      	ldr	r0, [pc, #296]	; (8001238 <MX_GPIO_Init+0x230>)
 800110e:	f004 f8b3 	bl	8005278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	4845      	ldr	r0, [pc, #276]	; (800123c <MX_GPIO_Init+0x234>)
 8001128:	f003 fefe 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800112c:	2332      	movs	r3, #50	; 0x32
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800113c:	230b      	movs	r3, #11
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	483d      	ldr	r0, [pc, #244]	; (800123c <MX_GPIO_Init+0x234>)
 8001148:	f003 feee 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800114c:	2386      	movs	r3, #134	; 0x86
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800115c:	230b      	movs	r3, #11
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4619      	mov	r1, r3
 8001166:	4836      	ldr	r0, [pc, #216]	; (8001240 <MX_GPIO_Init+0x238>)
 8001168:	f003 fede 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800116c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	482a      	ldr	r0, [pc, #168]	; (8001230 <MX_GPIO_Init+0x228>)
 8001186:	f003 fecf 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800119c:	230b      	movs	r3, #11
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <MX_GPIO_Init+0x228>)
 80011a8:	f003 febe 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80011ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	481b      	ldr	r0, [pc, #108]	; (8001234 <MX_GPIO_Init+0x22c>)
 80011c6:	f003 feaf 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4819      	ldr	r0, [pc, #100]	; (8001244 <MX_GPIO_Init+0x23c>)
 80011e0:	f003 fea2 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011f6:	230b      	movs	r3, #11
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4810      	ldr	r0, [pc, #64]	; (8001244 <MX_GPIO_Init+0x23c>)
 8001202:	f003 fe91 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_VBUS_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin|LED_YELLOW_Pin;
 8001206:	2303      	movs	r3, #3
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_GPIO_Init+0x230>)
 800121e:	f003 fe83 	bl	8004f28 <HAL_GPIO_Init>

}
 8001222:	bf00      	nop
 8001224:	3730      	adds	r7, #48	; 0x30
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	58024400 	.word	0x58024400
 8001230:	58020400 	.word	0x58020400
 8001234:	58020c00 	.word	0x58020c00
 8001238:	58021000 	.word	0x58021000
 800123c:	58020800 	.word	0x58020800
 8001240:	58020000 	.word	0x58020000
 8001244:	58021800 	.word	0x58021800

08001248 <HAL_UART_TxCpltCallback>:
static size_t current_RX_buffer_position = 0;

char received_command[UART_RX_BUFFER_LENGTH];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

	/* Release Semaphore to execute next print operation */
	osSemaphoreRelease(UART_TX_SemaphoreHandle);
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_UART_TxCpltCallback+0x24>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f014 ffbd 	bl	80161d4 <osSemaphoreRelease>
	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);
 800125a:	2101      	movs	r1, #1
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <HAL_UART_TxCpltCallback+0x28>)
 800125e:	f004 f824 	bl	80052aa <HAL_GPIO_TogglePin>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	24000a1c 	.word	0x24000a1c
 8001270:	58020400 	.word	0x58020400

08001274 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);
 8001280:	2101      	movs	r1, #1
 8001282:	4883      	ldr	r0, [pc, #524]	; (8001490 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001284:	f004 f811 	bl	80052aa <HAL_GPIO_TogglePin>


	current_RX_buffer_position = Size;
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	4a82      	ldr	r2, [pc, #520]	; (8001494 <HAL_UARTEx_RxEventCallback+0x220>)
 800128c:	6013      	str	r3, [r2, #0]


	if(current_RX_buffer_position > old_RX_buffer_position){
 800128e:	4b81      	ldr	r3, [pc, #516]	; (8001494 <HAL_UARTEx_RxEventCallback+0x220>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b81      	ldr	r3, [pc, #516]	; (8001498 <HAL_UARTEx_RxEventCallback+0x224>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d917      	bls.n	80012ca <HAL_UARTEx_RxEventCallback+0x56>
	  memcpy(received_command, UART_RX_BUFFER+old_RX_buffer_position, current_RX_buffer_position - old_RX_buffer_position -1);
 800129a:	4b7f      	ldr	r3, [pc, #508]	; (8001498 <HAL_UARTEx_RxEventCallback+0x224>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a7f      	ldr	r2, [pc, #508]	; (800149c <HAL_UARTEx_RxEventCallback+0x228>)
 80012a0:	1899      	adds	r1, r3, r2
 80012a2:	4b7c      	ldr	r3, [pc, #496]	; (8001494 <HAL_UARTEx_RxEventCallback+0x220>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b7c      	ldr	r3, [pc, #496]	; (8001498 <HAL_UARTEx_RxEventCallback+0x224>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	3b01      	subs	r3, #1
 80012ae:	461a      	mov	r2, r3
 80012b0:	487b      	ldr	r0, [pc, #492]	; (80014a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80012b2:	f018 fe01 	bl	8019eb8 <memcpy>

	  received_command[current_RX_buffer_position - old_RX_buffer_position -1] = '\0';
 80012b6:	4b77      	ldr	r3, [pc, #476]	; (8001494 <HAL_UARTEx_RxEventCallback+0x220>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b77      	ldr	r3, [pc, #476]	; (8001498 <HAL_UARTEx_RxEventCallback+0x224>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	3b01      	subs	r3, #1
 80012c2:	4a77      	ldr	r2, [pc, #476]	; (80014a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80012c4:	2100      	movs	r1, #0
 80012c6:	54d1      	strb	r1, [r2, r3]
 80012c8:	e01f      	b.n	800130a <HAL_UARTEx_RxEventCallback+0x96>
	}else{
	  memcpy(received_command, UART_RX_BUFFER+old_RX_buffer_position, UART_RX_BUFFER_LENGTH-old_RX_buffer_position);
 80012ca:	4b73      	ldr	r3, [pc, #460]	; (8001498 <HAL_UARTEx_RxEventCallback+0x224>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a73      	ldr	r2, [pc, #460]	; (800149c <HAL_UARTEx_RxEventCallback+0x228>)
 80012d0:	1899      	adds	r1, r3, r2
 80012d2:	4b71      	ldr	r3, [pc, #452]	; (8001498 <HAL_UARTEx_RxEventCallback+0x224>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f1c3 0342 	rsb	r3, r3, #66	; 0x42
 80012da:	461a      	mov	r2, r3
 80012dc:	4870      	ldr	r0, [pc, #448]	; (80014a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80012de:	f018 fdeb 	bl	8019eb8 <memcpy>

	  memcpy(received_command+UART_RX_BUFFER_LENGTH-old_RX_buffer_position, UART_RX_BUFFER, Size-1);
 80012e2:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <HAL_UARTEx_RxEventCallback+0x224>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f1c3 0342 	rsb	r3, r3, #66	; 0x42
 80012ea:	4a6d      	ldr	r2, [pc, #436]	; (80014a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80012ec:	1898      	adds	r0, r3, r2
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	461a      	mov	r2, r3
 80012f4:	4969      	ldr	r1, [pc, #420]	; (800149c <HAL_UARTEx_RxEventCallback+0x228>)
 80012f6:	f018 fddf 	bl	8019eb8 <memcpy>

	  received_command[UART_RX_BUFFER_LENGTH-old_RX_buffer_position + Size - 1] = '\0';
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	4b66      	ldr	r3, [pc, #408]	; (8001498 <HAL_UARTEx_RxEventCallback+0x224>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	3341      	adds	r3, #65	; 0x41
 8001304:	4a66      	ldr	r2, [pc, #408]	; (80014a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 8001306:	2100      	movs	r1, #0
 8001308:	54d1      	strb	r1, [r2, r3]
               * [   6   ]            | First block (len = N - old_pos) |
               * [   7   ]            |                                 |
               * [ N - 1 ]            |---------------------------------|
               */

	old_RX_buffer_position = current_RX_buffer_position;
 800130a:	4b62      	ldr	r3, [pc, #392]	; (8001494 <HAL_UARTEx_RxEventCallback+0x220>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a62      	ldr	r2, [pc, #392]	; (8001498 <HAL_UARTEx_RxEventCallback+0x224>)
 8001310:	6013      	str	r3, [r2, #0]


	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_RX_BUFFER, UART_RX_BUFFER_LENGTH);
 8001312:	2242      	movs	r2, #66	; 0x42
 8001314:	4961      	ldr	r1, [pc, #388]	; (800149c <HAL_UARTEx_RxEventCallback+0x228>)
 8001316:	4863      	ldr	r0, [pc, #396]	; (80014a4 <HAL_UARTEx_RxEventCallback+0x230>)
 8001318:	f00a fa36 	bl	800b788 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800131c:	4b62      	ldr	r3, [pc, #392]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a62      	ldr	r2, [pc, #392]	; (80014ac <HAL_UARTEx_RxEventCallback+0x238>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d04a      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a61      	ldr	r2, [pc, #388]	; (80014b0 <HAL_UARTEx_RxEventCallback+0x23c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d045      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 8001330:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a5f      	ldr	r2, [pc, #380]	; (80014b4 <HAL_UARTEx_RxEventCallback+0x240>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d040      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 800133a:	4b5b      	ldr	r3, [pc, #364]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a5e      	ldr	r2, [pc, #376]	; (80014b8 <HAL_UARTEx_RxEventCallback+0x244>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d03b      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a5c      	ldr	r2, [pc, #368]	; (80014bc <HAL_UARTEx_RxEventCallback+0x248>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d036      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 800134e:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a5b      	ldr	r2, [pc, #364]	; (80014c0 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d031      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 8001358:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a59      	ldr	r2, [pc, #356]	; (80014c4 <HAL_UARTEx_RxEventCallback+0x250>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d02c      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 8001362:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a58      	ldr	r2, [pc, #352]	; (80014c8 <HAL_UARTEx_RxEventCallback+0x254>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d027      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 800136c:	4b4e      	ldr	r3, [pc, #312]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a56      	ldr	r2, [pc, #344]	; (80014cc <HAL_UARTEx_RxEventCallback+0x258>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d022      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 8001376:	4b4c      	ldr	r3, [pc, #304]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a55      	ldr	r2, [pc, #340]	; (80014d0 <HAL_UARTEx_RxEventCallback+0x25c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d01d      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 8001380:	4b49      	ldr	r3, [pc, #292]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a53      	ldr	r2, [pc, #332]	; (80014d4 <HAL_UARTEx_RxEventCallback+0x260>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d018      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 800138a:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a52      	ldr	r2, [pc, #328]	; (80014d8 <HAL_UARTEx_RxEventCallback+0x264>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d013      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 8001394:	4b44      	ldr	r3, [pc, #272]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a50      	ldr	r2, [pc, #320]	; (80014dc <HAL_UARTEx_RxEventCallback+0x268>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00e      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 800139e:	4b42      	ldr	r3, [pc, #264]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a4f      	ldr	r2, [pc, #316]	; (80014e0 <HAL_UARTEx_RxEventCallback+0x26c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d009      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 80013a8:	4b3f      	ldr	r3, [pc, #252]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a4d      	ldr	r2, [pc, #308]	; (80014e4 <HAL_UARTEx_RxEventCallback+0x270>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d004      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x148>
 80013b2:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a4c      	ldr	r2, [pc, #304]	; (80014e8 <HAL_UARTEx_RxEventCallback+0x274>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d108      	bne.n	80013ce <HAL_UARTEx_RxEventCallback+0x15a>
 80013bc:	4b3a      	ldr	r3, [pc, #232]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0208 	bic.w	r2, r2, #8
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e007      	b.n	80013de <HAL_UARTEx_RxEventCallback+0x16a>
 80013ce:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0204 	bic.w	r2, r2, #4
 80013dc:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_TC);
 80013de:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a32      	ldr	r2, [pc, #200]	; (80014ac <HAL_UARTEx_RxEventCallback+0x238>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d04a      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a30      	ldr	r2, [pc, #192]	; (80014b0 <HAL_UARTEx_RxEventCallback+0x23c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d045      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 80013f2:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a2f      	ldr	r2, [pc, #188]	; (80014b4 <HAL_UARTEx_RxEventCallback+0x240>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d040      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <HAL_UARTEx_RxEventCallback+0x244>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d03b      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a2c      	ldr	r2, [pc, #176]	; (80014bc <HAL_UARTEx_RxEventCallback+0x248>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d036      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a2a      	ldr	r2, [pc, #168]	; (80014c0 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d031      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a29      	ldr	r2, [pc, #164]	; (80014c4 <HAL_UARTEx_RxEventCallback+0x250>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d02c      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a27      	ldr	r2, [pc, #156]	; (80014c8 <HAL_UARTEx_RxEventCallback+0x254>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d027      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a26      	ldr	r2, [pc, #152]	; (80014cc <HAL_UARTEx_RxEventCallback+0x258>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d022      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a24      	ldr	r2, [pc, #144]	; (80014d0 <HAL_UARTEx_RxEventCallback+0x25c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d01d      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <HAL_UARTEx_RxEventCallback+0x260>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d018      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <HAL_UARTEx_RxEventCallback+0x264>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a20      	ldr	r2, [pc, #128]	; (80014dc <HAL_UARTEx_RxEventCallback+0x268>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d00e      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <HAL_UARTEx_RxEventCallback+0x26c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d009      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_UARTEx_RxEventCallback+0x270>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d004      	beq.n	800147e <HAL_UARTEx_RxEventCallback+0x20a>
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_UARTEx_RxEventCallback+0x274>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d136      	bne.n	80014ec <HAL_UARTEx_RxEventCallback+0x278>
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0210 	bic.w	r2, r2, #16
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e035      	b.n	80014fc <HAL_UARTEx_RxEventCallback+0x288>
 8001490:	58020400 	.word	0x58020400
 8001494:	24000aac 	.word	0x24000aac
 8001498:	24000aa8 	.word	0x24000aa8
 800149c:	24000a64 	.word	0x24000a64
 80014a0:	24000ab0 	.word	0x24000ab0
 80014a4:	2400088c 	.word	0x2400088c
 80014a8:	24000994 	.word	0x24000994
 80014ac:	40020010 	.word	0x40020010
 80014b0:	40020028 	.word	0x40020028
 80014b4:	40020040 	.word	0x40020040
 80014b8:	40020058 	.word	0x40020058
 80014bc:	40020070 	.word	0x40020070
 80014c0:	40020088 	.word	0x40020088
 80014c4:	400200a0 	.word	0x400200a0
 80014c8:	400200b8 	.word	0x400200b8
 80014cc:	40020410 	.word	0x40020410
 80014d0:	40020428 	.word	0x40020428
 80014d4:	40020440 	.word	0x40020440
 80014d8:	40020458 	.word	0x40020458
 80014dc:	40020470 	.word	0x40020470
 80014e0:	40020488 	.word	0x40020488
 80014e4:	400204a0 	.word	0x400204a0
 80014e8:	400204b8 	.word	0x400204b8
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0202 	bic.w	r2, r2, #2
 80014fa:	601a      	str	r2, [r3, #0]

	/* xHigherPriorityTaskWoken must be initialised to pdFALSE.  If calling
	vTaskNotifyGiveFromISR() unblocks the handling task, and the priority of
	the handling task is higher than the priority of the currently running task,
	then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
	xHigherPriorityTaskWoken = pdFALSE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]

	/* Unblock the handling task so the task can perform any processing necessitated
	by the interrupt.  xHandlingTask is the task's handle, which was obtained
	when the task was created. */
	vTaskNotifyGiveFromISR(ConsoleTaskHandle, &xHigherPriorityTaskWoken );
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f107 020c 	add.w	r2, r7, #12
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f017 f820 	bl	8018550 <vTaskNotifyGiveFromISR>

	/* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
	The macro used to do this is dependent on the port and may be called
	portEND_SWITCHING_ISR. */
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <HAL_UARTEx_RxEventCallback+0x2b2>
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f3bf 8f4f 	dsb	sy
 8001522:	f3bf 8f6f 	isb	sy

}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	24000994 	.word	0x24000994
 8001534:	24000a14 	.word	0x24000a14
 8001538:	e000ed04 	.word	0xe000ed04

0800153c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001544:	f018 f91a 	bl	801977c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  /* USRT RX INITIATE */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_RX_BUFFER, UART_RX_BUFFER_LENGTH);
 8001548:	2242      	movs	r2, #66	; 0x42
 800154a:	4966      	ldr	r1, [pc, #408]	; (80016e4 <StartDefaultTask+0x1a8>)
 800154c:	4866      	ldr	r0, [pc, #408]	; (80016e8 <StartDefaultTask+0x1ac>)
 800154e:	f00a f91b 	bl	800b788 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001552:	4b66      	ldr	r3, [pc, #408]	; (80016ec <StartDefaultTask+0x1b0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a66      	ldr	r2, [pc, #408]	; (80016f0 <StartDefaultTask+0x1b4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d04a      	beq.n	80015f2 <StartDefaultTask+0xb6>
 800155c:	4b63      	ldr	r3, [pc, #396]	; (80016ec <StartDefaultTask+0x1b0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a64      	ldr	r2, [pc, #400]	; (80016f4 <StartDefaultTask+0x1b8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d045      	beq.n	80015f2 <StartDefaultTask+0xb6>
 8001566:	4b61      	ldr	r3, [pc, #388]	; (80016ec <StartDefaultTask+0x1b0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a63      	ldr	r2, [pc, #396]	; (80016f8 <StartDefaultTask+0x1bc>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d040      	beq.n	80015f2 <StartDefaultTask+0xb6>
 8001570:	4b5e      	ldr	r3, [pc, #376]	; (80016ec <StartDefaultTask+0x1b0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a61      	ldr	r2, [pc, #388]	; (80016fc <StartDefaultTask+0x1c0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d03b      	beq.n	80015f2 <StartDefaultTask+0xb6>
 800157a:	4b5c      	ldr	r3, [pc, #368]	; (80016ec <StartDefaultTask+0x1b0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a60      	ldr	r2, [pc, #384]	; (8001700 <StartDefaultTask+0x1c4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d036      	beq.n	80015f2 <StartDefaultTask+0xb6>
 8001584:	4b59      	ldr	r3, [pc, #356]	; (80016ec <StartDefaultTask+0x1b0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a5e      	ldr	r2, [pc, #376]	; (8001704 <StartDefaultTask+0x1c8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d031      	beq.n	80015f2 <StartDefaultTask+0xb6>
 800158e:	4b57      	ldr	r3, [pc, #348]	; (80016ec <StartDefaultTask+0x1b0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a5d      	ldr	r2, [pc, #372]	; (8001708 <StartDefaultTask+0x1cc>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d02c      	beq.n	80015f2 <StartDefaultTask+0xb6>
 8001598:	4b54      	ldr	r3, [pc, #336]	; (80016ec <StartDefaultTask+0x1b0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a5b      	ldr	r2, [pc, #364]	; (800170c <StartDefaultTask+0x1d0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d027      	beq.n	80015f2 <StartDefaultTask+0xb6>
 80015a2:	4b52      	ldr	r3, [pc, #328]	; (80016ec <StartDefaultTask+0x1b0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a5a      	ldr	r2, [pc, #360]	; (8001710 <StartDefaultTask+0x1d4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d022      	beq.n	80015f2 <StartDefaultTask+0xb6>
 80015ac:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <StartDefaultTask+0x1b0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a58      	ldr	r2, [pc, #352]	; (8001714 <StartDefaultTask+0x1d8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d01d      	beq.n	80015f2 <StartDefaultTask+0xb6>
 80015b6:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <StartDefaultTask+0x1b0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a57      	ldr	r2, [pc, #348]	; (8001718 <StartDefaultTask+0x1dc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d018      	beq.n	80015f2 <StartDefaultTask+0xb6>
 80015c0:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <StartDefaultTask+0x1b0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a55      	ldr	r2, [pc, #340]	; (800171c <StartDefaultTask+0x1e0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <StartDefaultTask+0xb6>
 80015ca:	4b48      	ldr	r3, [pc, #288]	; (80016ec <StartDefaultTask+0x1b0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a54      	ldr	r2, [pc, #336]	; (8001720 <StartDefaultTask+0x1e4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d00e      	beq.n	80015f2 <StartDefaultTask+0xb6>
 80015d4:	4b45      	ldr	r3, [pc, #276]	; (80016ec <StartDefaultTask+0x1b0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a52      	ldr	r2, [pc, #328]	; (8001724 <StartDefaultTask+0x1e8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d009      	beq.n	80015f2 <StartDefaultTask+0xb6>
 80015de:	4b43      	ldr	r3, [pc, #268]	; (80016ec <StartDefaultTask+0x1b0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a51      	ldr	r2, [pc, #324]	; (8001728 <StartDefaultTask+0x1ec>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d004      	beq.n	80015f2 <StartDefaultTask+0xb6>
 80015e8:	4b40      	ldr	r3, [pc, #256]	; (80016ec <StartDefaultTask+0x1b0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a4f      	ldr	r2, [pc, #316]	; (800172c <StartDefaultTask+0x1f0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d108      	bne.n	8001604 <StartDefaultTask+0xc8>
 80015f2:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <StartDefaultTask+0x1b0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <StartDefaultTask+0x1b0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0208 	bic.w	r2, r2, #8
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e007      	b.n	8001614 <StartDefaultTask+0xd8>
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <StartDefaultTask+0x1b0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b38      	ldr	r3, [pc, #224]	; (80016ec <StartDefaultTask+0x1b0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0204 	bic.w	r2, r2, #4
 8001612:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_TC);
 8001614:	4b35      	ldr	r3, [pc, #212]	; (80016ec <StartDefaultTask+0x1b0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a35      	ldr	r2, [pc, #212]	; (80016f0 <StartDefaultTask+0x1b4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d04a      	beq.n	80016b4 <StartDefaultTask+0x178>
 800161e:	4b33      	ldr	r3, [pc, #204]	; (80016ec <StartDefaultTask+0x1b0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a34      	ldr	r2, [pc, #208]	; (80016f4 <StartDefaultTask+0x1b8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d045      	beq.n	80016b4 <StartDefaultTask+0x178>
 8001628:	4b30      	ldr	r3, [pc, #192]	; (80016ec <StartDefaultTask+0x1b0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <StartDefaultTask+0x1bc>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d040      	beq.n	80016b4 <StartDefaultTask+0x178>
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <StartDefaultTask+0x1b0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a31      	ldr	r2, [pc, #196]	; (80016fc <StartDefaultTask+0x1c0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d03b      	beq.n	80016b4 <StartDefaultTask+0x178>
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <StartDefaultTask+0x1b0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a2f      	ldr	r2, [pc, #188]	; (8001700 <StartDefaultTask+0x1c4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d036      	beq.n	80016b4 <StartDefaultTask+0x178>
 8001646:	4b29      	ldr	r3, [pc, #164]	; (80016ec <StartDefaultTask+0x1b0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a2e      	ldr	r2, [pc, #184]	; (8001704 <StartDefaultTask+0x1c8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d031      	beq.n	80016b4 <StartDefaultTask+0x178>
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <StartDefaultTask+0x1b0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a2c      	ldr	r2, [pc, #176]	; (8001708 <StartDefaultTask+0x1cc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d02c      	beq.n	80016b4 <StartDefaultTask+0x178>
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <StartDefaultTask+0x1b0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a2b      	ldr	r2, [pc, #172]	; (800170c <StartDefaultTask+0x1d0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d027      	beq.n	80016b4 <StartDefaultTask+0x178>
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <StartDefaultTask+0x1b0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a29      	ldr	r2, [pc, #164]	; (8001710 <StartDefaultTask+0x1d4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d022      	beq.n	80016b4 <StartDefaultTask+0x178>
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <StartDefaultTask+0x1b0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a28      	ldr	r2, [pc, #160]	; (8001714 <StartDefaultTask+0x1d8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d01d      	beq.n	80016b4 <StartDefaultTask+0x178>
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <StartDefaultTask+0x1b0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a26      	ldr	r2, [pc, #152]	; (8001718 <StartDefaultTask+0x1dc>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d018      	beq.n	80016b4 <StartDefaultTask+0x178>
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <StartDefaultTask+0x1b0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a25      	ldr	r2, [pc, #148]	; (800171c <StartDefaultTask+0x1e0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d013      	beq.n	80016b4 <StartDefaultTask+0x178>
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <StartDefaultTask+0x1b0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a23      	ldr	r2, [pc, #140]	; (8001720 <StartDefaultTask+0x1e4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00e      	beq.n	80016b4 <StartDefaultTask+0x178>
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <StartDefaultTask+0x1b0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a22      	ldr	r2, [pc, #136]	; (8001724 <StartDefaultTask+0x1e8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d009      	beq.n	80016b4 <StartDefaultTask+0x178>
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <StartDefaultTask+0x1b0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a20      	ldr	r2, [pc, #128]	; (8001728 <StartDefaultTask+0x1ec>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d004      	beq.n	80016b4 <StartDefaultTask+0x178>
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <StartDefaultTask+0x1b0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a1f      	ldr	r2, [pc, #124]	; (800172c <StartDefaultTask+0x1f0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d108      	bne.n	80016c6 <StartDefaultTask+0x18a>
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <StartDefaultTask+0x1b0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <StartDefaultTask+0x1b0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0210 	bic.w	r2, r2, #16
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e007      	b.n	80016d6 <StartDefaultTask+0x19a>
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <StartDefaultTask+0x1b0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <StartDefaultTask+0x1b0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0202 	bic.w	r2, r2, #2
 80016d4:	601a      	str	r2, [r3, #0]

  int count = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    //printf("Hello World! %d\r\n", count++);
    osDelay(2000);
 80016da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016de:	f014 fc00 	bl	8015ee2 <osDelay>
 80016e2:	e7fa      	b.n	80016da <StartDefaultTask+0x19e>
 80016e4:	24000a64 	.word	0x24000a64
 80016e8:	2400088c 	.word	0x2400088c
 80016ec:	24000994 	.word	0x24000994
 80016f0:	40020010 	.word	0x40020010
 80016f4:	40020028 	.word	0x40020028
 80016f8:	40020040 	.word	0x40020040
 80016fc:	40020058 	.word	0x40020058
 8001700:	40020070 	.word	0x40020070
 8001704:	40020088 	.word	0x40020088
 8001708:	400200a0 	.word	0x400200a0
 800170c:	400200b8 	.word	0x400200b8
 8001710:	40020410 	.word	0x40020410
 8001714:	40020428 	.word	0x40020428
 8001718:	40020440 	.word	0x40020440
 800171c:	40020458 	.word	0x40020458
 8001720:	40020470 	.word	0x40020470
 8001724:	40020488 	.word	0x40020488
 8001728:	400204a0 	.word	0x400204a0
 800172c:	400204b8 	.word	0x400204b8

08001730 <USBFileSystemTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_USBFileSystemTask_Start */
void USBFileSystemTask_Start(void const * argument)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBFileSystemTask_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001738:	2001      	movs	r0, #1
 800173a:	f014 fbd2 	bl	8015ee2 <osDelay>
 800173e:	e7fb      	b.n	8001738 <USBFileSystemTask_Start+0x8>

08001740 <ConsoleTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ConsoleTask_Start */
void ConsoleTask_Start(void const * argument)
{
 8001740:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001744:	b08a      	sub	sp, #40	; 0x28
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ConsoleTask_Start */
	// ToDo Add buffer full mechanism to UART TX.
	printf("======================\r\n");
 800174a:	489d      	ldr	r0, [pc, #628]	; (80019c0 <ConsoleTask_Start+0x280>)
 800174c:	f018 fd30 	bl	801a1b0 <puts>
	printf(" Terminal is ready...\r\n");
 8001750:	489c      	ldr	r0, [pc, #624]	; (80019c4 <ConsoleTask_Start+0x284>)
 8001752:	f018 fd2d 	bl	801a1b0 <puts>
	printf(" Waiting commands... \r\n");
 8001756:	489c      	ldr	r0, [pc, #624]	; (80019c8 <ConsoleTask_Start+0x288>)
 8001758:	f018 fd2a 	bl	801a1b0 <puts>
	printf("======================\r\n");
 800175c:	4898      	ldr	r0, [pc, #608]	; (80019c0 <ConsoleTask_Start+0x280>)
 800175e:	f018 fd27 	bl	801a1b0 <puts>

	uint8_t str_trim_start = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t str_trim_end = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	FRESULT fr;
	UINT SZ_STR = 100;
 800176e:	2364      	movs	r3, #100	; 0x64
 8001770:	61fb      	str	r3, [r7, #28]
	TCHAR str[SZ_STR];
 8001772:	69f9      	ldr	r1, [r7, #28]
 8001774:	460b      	mov	r3, r1
 8001776:	3b01      	subs	r3, #1
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	2300      	movs	r3, #0
 800177c:	4688      	mov	r8, r1
 800177e:	4699      	mov	r9, r3
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800178c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001790:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001794:	2300      	movs	r3, #0
 8001796:	460c      	mov	r4, r1
 8001798:	461d      	mov	r5, r3
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	00eb      	lsls	r3, r5, #3
 80017a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017a8:	00e2      	lsls	r2, r4, #3
 80017aa:	1dcb      	adds	r3, r1, #7
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	ebad 0d03 	sub.w	sp, sp, r3
 80017b4:	466b      	mov	r3, sp
 80017b6:	3300      	adds	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]

	char* trimmed_command = NULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Infinite loop */
  for(;;)
  {

	ulTaskNotifyTake(pdTRUE,          /* Clear the notification value before exiting. */
 80017be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c2:	2001      	movs	r0, #1
 80017c4:	f016 fe7c 	bl	80184c0 <ulTaskNotifyTake>
	                 portMAX_DELAY ); /* Block indefinitely. */


	for(str_trim_start = 0; str_trim_start <= strlen(received_command); str_trim_start ++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80017ce:	e010      	b.n	80017f2 <ConsoleTask_Start+0xb2>
	{
		if(received_command[str_trim_start] != ' ')
 80017d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017d4:	4a7d      	ldr	r2, [pc, #500]	; (80019cc <ConsoleTask_Start+0x28c>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	2b20      	cmp	r3, #32
 80017da:	d005      	beq.n	80017e8 <ConsoleTask_Start+0xa8>
		{
			trimmed_command = received_command + str_trim_start;
 80017dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017e0:	4a7a      	ldr	r2, [pc, #488]	; (80019cc <ConsoleTask_Start+0x28c>)
 80017e2:	4413      	add	r3, r2
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80017e6:	e00c      	b.n	8001802 <ConsoleTask_Start+0xc2>
	for(str_trim_start = 0; str_trim_start <= strlen(received_command); str_trim_start ++)
 80017e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017ec:	3301      	adds	r3, #1
 80017ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80017f2:	f897 4022 	ldrb.w	r4, [r7, #34]	; 0x22
 80017f6:	4875      	ldr	r0, [pc, #468]	; (80019cc <ConsoleTask_Start+0x28c>)
 80017f8:	f7fe fd94 	bl	8000324 <strlen>
 80017fc:	4603      	mov	r3, r0
 80017fe:	429c      	cmp	r4, r3
 8001800:	d9e6      	bls.n	80017d0 <ConsoleTask_Start+0x90>
		}
	}

	for(str_trim_end = strlen(trimmed_command)-1; str_trim_end >= 0; str_trim_end--)
 8001802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001804:	f7fe fd8e 	bl	8000324 <strlen>
 8001808:	4603      	mov	r3, r0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	3b01      	subs	r3, #1
 800180e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	{
		if(trimmed_command[str_trim_end] != ' ')
 8001812:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b20      	cmp	r3, #32
 800181e:	d011      	beq.n	8001844 <ConsoleTask_Start+0x104>
		{
			trimmed_command[str_trim_end+1] = '\0';
 8001820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001824:	3301      	adds	r3, #1
 8001826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001828:	4413      	add	r3, r2
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
			break;
 800182e:	bf00      	nop
		}
	}

	printf("CMD$: %s \r\n", trimmed_command);
 8001830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001832:	4867      	ldr	r0, [pc, #412]	; (80019d0 <ConsoleTask_Start+0x290>)
 8001834:	f018 fc36 	bl	801a0a4 <iprintf>

	if(strlen(trimmed_command) > 0)
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80bb 	beq.w	80019b8 <ConsoleTask_Start+0x278>
 8001842:	e005      	b.n	8001850 <ConsoleTask_Start+0x110>
	for(str_trim_end = strlen(trimmed_command)-1; str_trim_end >= 0; str_trim_end--)
 8001844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001848:	3b01      	subs	r3, #1
 800184a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(trimmed_command[str_trim_end] != ' ')
 800184e:	e7e0      	b.n	8001812 <ConsoleTask_Start+0xd2>
	{

		if(!strncmp(trimmed_command , "mount" , 5))
 8001850:	2205      	movs	r2, #5
 8001852:	4960      	ldr	r1, [pc, #384]	; (80019d4 <ConsoleTask_Start+0x294>)
 8001854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001856:	f018 fcf0 	bl	801a23a <strncmp>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d11b      	bne.n	8001898 <ConsoleTask_Start+0x158>
		{

			if(Appli_state != APPLICATION_READY){
 8001860:	4b5d      	ldr	r3, [pc, #372]	; (80019d8 <ConsoleTask_Start+0x298>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d003      	beq.n	8001870 <ConsoleTask_Start+0x130>
				printf("USB is not connected!\r\n");
 8001868:	485c      	ldr	r0, [pc, #368]	; (80019dc <ConsoleTask_Start+0x29c>)
 800186a:	f018 fca1 	bl	801a1b0 <puts>
				continue;
 800186e:	e0a6      	b.n	80019be <ConsoleTask_Start+0x27e>
			}


			printf("Mounting the USB...\r\n");
 8001870:	485b      	ldr	r0, [pc, #364]	; (80019e0 <ConsoleTask_Start+0x2a0>)
 8001872:	f018 fc9d 	bl	801a1b0 <puts>

			if(f_mount(&USBHFatFS, (TCHAR const*)USBHPath, 0) != FR_OK)
 8001876:	2200      	movs	r2, #0
 8001878:	495a      	ldr	r1, [pc, #360]	; (80019e4 <ConsoleTask_Start+0x2a4>)
 800187a:	485b      	ldr	r0, [pc, #364]	; (80019e8 <ConsoleTask_Start+0x2a8>)
 800187c:	f012 fad4 	bl	8013e28 <f_mount>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d004      	beq.n	8001890 <ConsoleTask_Start+0x150>
			{
				printf("Mounting error!\r\n");
 8001886:	4859      	ldr	r0, [pc, #356]	; (80019ec <ConsoleTask_Start+0x2ac>)
 8001888:	f018 fc92 	bl	801a1b0 <puts>
				Error_Handler();
 800188c:	f000 f8e8 	bl	8001a60 <Error_Handler>
			}

			printf("Mounting the USB is done.\r\n");
 8001890:	4857      	ldr	r0, [pc, #348]	; (80019f0 <ConsoleTask_Start+0x2b0>)
 8001892:	f018 fc8d 	bl	801a1b0 <puts>
 8001896:	e08f      	b.n	80019b8 <ConsoleTask_Start+0x278>
		}
		else if(!strncmp(trimmed_command , "unmount" , 7))
 8001898:	2207      	movs	r2, #7
 800189a:	4956      	ldr	r1, [pc, #344]	; (80019f4 <ConsoleTask_Start+0x2b4>)
 800189c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800189e:	f018 fccc 	bl	801a23a <strncmp>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d113      	bne.n	80018d0 <ConsoleTask_Start+0x190>
		{
			printf("Unmounting the USB...\r\n");
 80018a8:	4853      	ldr	r0, [pc, #332]	; (80019f8 <ConsoleTask_Start+0x2b8>)
 80018aa:	f018 fc81 	bl	801a1b0 <puts>

			if(f_mount(NULL, (TCHAR const*)USBHPath, 0) != FR_OK)
 80018ae:	2200      	movs	r2, #0
 80018b0:	494c      	ldr	r1, [pc, #304]	; (80019e4 <ConsoleTask_Start+0x2a4>)
 80018b2:	2000      	movs	r0, #0
 80018b4:	f012 fab8 	bl	8013e28 <f_mount>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d004      	beq.n	80018c8 <ConsoleTask_Start+0x188>
			{
				printf("Unmounting error!\r\n");
 80018be:	484f      	ldr	r0, [pc, #316]	; (80019fc <ConsoleTask_Start+0x2bc>)
 80018c0:	f018 fc76 	bl	801a1b0 <puts>
				Error_Handler();
 80018c4:	f000 f8cc 	bl	8001a60 <Error_Handler>
			}

			printf("Unmounting the USB is done.\r\n");
 80018c8:	484d      	ldr	r0, [pc, #308]	; (8001a00 <ConsoleTask_Start+0x2c0>)
 80018ca:	f018 fc71 	bl	801a1b0 <puts>
 80018ce:	e073      	b.n	80019b8 <ConsoleTask_Start+0x278>

		}
		else if(!strncmp(trimmed_command , "pwd" , 3))
 80018d0:	2203      	movs	r2, #3
 80018d2:	494c      	ldr	r1, [pc, #304]	; (8001a04 <ConsoleTask_Start+0x2c4>)
 80018d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018d6:	f018 fcb0 	bl	801a23a <strncmp>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10a      	bne.n	80018f6 <ConsoleTask_Start+0x1b6>
		{
			fr = f_getcwd(str, SZ_STR);  /* Get current directory path */
 80018e0:	69f9      	ldr	r1, [r7, #28]
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f013 fb3c 	bl	8014f60 <f_getcwd>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
			printf("%s\r\n", str);
 80018ec:	6979      	ldr	r1, [r7, #20]
 80018ee:	4846      	ldr	r0, [pc, #280]	; (8001a08 <ConsoleTask_Start+0x2c8>)
 80018f0:	f018 fbd8 	bl	801a0a4 <iprintf>
 80018f4:	e060      	b.n	80019b8 <ConsoleTask_Start+0x278>
		}
		else if(!strncmp(trimmed_command , "ls" , 2)){
 80018f6:	2202      	movs	r2, #2
 80018f8:	4944      	ldr	r1, [pc, #272]	; (8001a0c <ConsoleTask_Start+0x2cc>)
 80018fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018fc:	f018 fc9d 	bl	801a23a <strncmp>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d113      	bne.n	800192e <ConsoleTask_Start+0x1ee>
			char *buf = malloc(30*sizeof(char));
 8001906:	201e      	movs	r0, #30
 8001908:	f018 fac6 	bl	8019e98 <malloc>
 800190c:	4603      	mov	r3, r0
 800190e:	613b      	str	r3, [r7, #16]
			strcpy(buf, "/");
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	493f      	ldr	r1, [pc, #252]	; (8001a10 <ConsoleTask_Start+0x2d0>)
 8001914:	461a      	mov	r2, r3
 8001916:	460b      	mov	r3, r1
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	8013      	strh	r3, [r2, #0]
			fr = scan_all_files(buf);
 800191c:	6938      	ldr	r0, [r7, #16]
 800191e:	f7fe fee1 	bl	80006e4 <scan_all_files>
 8001922:	4603      	mov	r3, r0
 8001924:	73fb      	strb	r3, [r7, #15]
			free(buf);
 8001926:	6938      	ldr	r0, [r7, #16]
 8001928:	f018 fabe 	bl	8019ea8 <free>
 800192c:	e044      	b.n	80019b8 <ConsoleTask_Start+0x278>
		}
		else if(!strncmp(trimmed_command , "touch" , 5))
 800192e:	2205      	movs	r2, #5
 8001930:	4938      	ldr	r1, [pc, #224]	; (8001a14 <ConsoleTask_Start+0x2d4>)
 8001932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001934:	f018 fc81 	bl	801a23a <strncmp>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d105      	bne.n	800194a <ConsoleTask_Start+0x20a>
		{
			create_file(trimmed_command + 5);
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	3305      	adds	r3, #5
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe ff4e 	bl	80007e4 <create_file>
 8001948:	e036      	b.n	80019b8 <ConsoleTask_Start+0x278>
		}
		else if(!strncmp(trimmed_command , "rm" , 2))
 800194a:	2202      	movs	r2, #2
 800194c:	4932      	ldr	r1, [pc, #200]	; (8001a18 <ConsoleTask_Start+0x2d8>)
 800194e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001950:	f018 fc73 	bl	801a23a <strncmp>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d105      	bne.n	8001966 <ConsoleTask_Start+0x226>
		{
			remove_file(trimmed_command+2);
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	3302      	adds	r3, #2
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe ffa0 	bl	80008a4 <remove_file>
 8001964:	e028      	b.n	80019b8 <ConsoleTask_Start+0x278>
		}
		else if(!strncmp(trimmed_command , "mkdir" , 5))
 8001966:	2205      	movs	r2, #5
 8001968:	492c      	ldr	r1, [pc, #176]	; (8001a1c <ConsoleTask_Start+0x2dc>)
 800196a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800196c:	f018 fc65 	bl	801a23a <strncmp>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <ConsoleTask_Start+0x242>
		{
			create_dir(trimmed_command+5);
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	3305      	adds	r3, #5
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe ffd8 	bl	8000930 <create_dir>
 8001980:	e01a      	b.n	80019b8 <ConsoleTask_Start+0x278>
		}else if(!strncmp(trimmed_command , "echo" , 4))
 8001982:	2204      	movs	r2, #4
 8001984:	4926      	ldr	r1, [pc, #152]	; (8001a20 <ConsoleTask_Start+0x2e0>)
 8001986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001988:	f018 fc57 	bl	801a23a <strncmp>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d105      	bne.n	800199e <ConsoleTask_Start+0x25e>
		{
			echo(trimmed_command+4);
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	3304      	adds	r3, #4
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f8ec 	bl	8000b74 <echo>
 800199c:	e00c      	b.n	80019b8 <ConsoleTask_Start+0x278>
		}else if(!strncmp(trimmed_command , "cat" , 3))
 800199e:	2203      	movs	r2, #3
 80019a0:	4920      	ldr	r1, [pc, #128]	; (8001a24 <ConsoleTask_Start+0x2e4>)
 80019a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019a4:	f018 fc49 	bl	801a23a <strncmp>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d104      	bne.n	80019b8 <ConsoleTask_Start+0x278>
		{
			read_file(trimmed_command+3);
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	3303      	adds	r3, #3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f84e 	bl	8000a54 <read_file>

	}

	//if received_command

    osDelay(1);
 80019b8:	2001      	movs	r0, #1
 80019ba:	f014 fa92 	bl	8015ee2 <osDelay>
	ulTaskNotifyTake(pdTRUE,          /* Clear the notification value before exiting. */
 80019be:	e6fe      	b.n	80017be <ConsoleTask_Start+0x7e>
 80019c0:	0801b64c 	.word	0x0801b64c
 80019c4:	0801b664 	.word	0x0801b664
 80019c8:	0801b67c 	.word	0x0801b67c
 80019cc:	24000ab0 	.word	0x24000ab0
 80019d0:	0801b694 	.word	0x0801b694
 80019d4:	0801b6a0 	.word	0x0801b6a0
 80019d8:	24006ec8 	.word	0x24006ec8
 80019dc:	0801b6a8 	.word	0x0801b6a8
 80019e0:	0801b6c0 	.word	0x0801b6c0
 80019e4:	24000b4c 	.word	0x24000b4c
 80019e8:	24000b50 	.word	0x24000b50
 80019ec:	0801b6d8 	.word	0x0801b6d8
 80019f0:	0801b6ec 	.word	0x0801b6ec
 80019f4:	0801b708 	.word	0x0801b708
 80019f8:	0801b710 	.word	0x0801b710
 80019fc:	0801b728 	.word	0x0801b728
 8001a00:	0801b73c 	.word	0x0801b73c
 8001a04:	0801b75c 	.word	0x0801b75c
 8001a08:	0801b760 	.word	0x0801b760
 8001a0c:	0801b768 	.word	0x0801b768
 8001a10:	0801b76c 	.word	0x0801b76c
 8001a14:	0801b770 	.word	0x0801b770
 8001a18:	0801b778 	.word	0x0801b778
 8001a1c:	0801b77c 	.word	0x0801b77c
 8001a20:	0801b784 	.word	0x0801b784
 8001a24:	0801b78c 	.word	0x0801b78c

08001a28 <Timer1_Callback>:
  /* USER CODE END ConsoleTask_Start */
}

/* Timer1_Callback function */
void Timer1_Callback(void const * argument)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer1_Callback */

  /* USER CODE END Timer1_Callback */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a4e:	f000 fb0d 	bl	800206c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40010000 	.word	0x40010000

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <Error_Handler+0x8>
	...

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_MspInit+0x38>)
 8001a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_MspInit+0x38>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_MspInit+0x38>)
 8001a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	210f      	movs	r1, #15
 8001a94:	f06f 0001 	mvn.w	r0, #1
 8001a98:	f000 fbe4 	bl	8002264 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	58024400 	.word	0x58024400

08001aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0b6      	sub	sp, #216	; 0xd8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	22b4      	movs	r2, #180	; 0xb4
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f018 fa03 	bl	8019ed4 <memset>
  if(huart->Instance==USART3)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a57      	ldr	r2, [pc, #348]	; (8001c30 <HAL_UART_MspInit+0x188>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	f040 80a6 	bne.w	8001c26 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ada:	2302      	movs	r3, #2
 8001adc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f005 ffc9 	bl	8007a80 <HAL_RCCEx_PeriphCLKConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001af4:	f7ff ffb4 	bl	8001a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001af8:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <HAL_UART_MspInit+0x18c>)
 8001afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001afe:	4a4d      	ldr	r2, [pc, #308]	; (8001c34 <HAL_UART_MspInit+0x18c>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b08:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <HAL_UART_MspInit+0x18c>)
 8001b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_UART_MspInit+0x18c>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1c:	4a45      	ldr	r2, [pc, #276]	; (8001c34 <HAL_UART_MspInit+0x18c>)
 8001b1e:	f043 0308 	orr.w	r3, r3, #8
 8001b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b26:	4b43      	ldr	r3, [pc, #268]	; (8001c34 <HAL_UART_MspInit+0x18c>)
 8001b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001b34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4837      	ldr	r0, [pc, #220]	; (8001c38 <HAL_UART_MspInit+0x190>)
 8001b5c:	f003 f9e4 	bl	8004f28 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001b62:	4a37      	ldr	r2, [pc, #220]	; (8001c40 <HAL_UART_MspInit+0x198>)
 8001b64:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001b68:	222e      	movs	r2, #46	; 0x2e
 8001b6a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001b6e:	2240      	movs	r2, #64	; 0x40
 8001b70:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b72:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b7e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001b9e:	4827      	ldr	r0, [pc, #156]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001ba0:	f000 fb88 	bl	80022b4 <HAL_DMA_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001baa:	f7ff ff59 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001bb2:	679a      	str	r2, [r3, #120]	; 0x78
 8001bb4:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <HAL_UART_MspInit+0x194>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001bbc:	4a22      	ldr	r2, [pc, #136]	; (8001c48 <HAL_UART_MspInit+0x1a0>)
 8001bbe:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001bc2:	222d      	movs	r2, #45	; 0x2d
 8001bc4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001bd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bec:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001bfa:	4812      	ldr	r0, [pc, #72]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001bfc:	f000 fb5a 	bl	80022b4 <HAL_DMA_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001c06:	f7ff ff2b 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001c0e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c10:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <HAL_UART_MspInit+0x19c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2105      	movs	r1, #5
 8001c1a:	2027      	movs	r0, #39	; 0x27
 8001c1c:	f000 fb22 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c20:	2027      	movs	r0, #39	; 0x27
 8001c22:	f000 fb39 	bl	8002298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	37d8      	adds	r7, #216	; 0xd8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40004800 	.word	0x40004800
 8001c34:	58024400 	.word	0x58024400
 8001c38:	58020c00 	.word	0x58020c00
 8001c3c:	2400091c 	.word	0x2400091c
 8001c40:	40020010 	.word	0x40020010
 8001c44:	24000994 	.word	0x24000994
 8001c48:	40020028 	.word	0x40020028

08001c4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08e      	sub	sp, #56	; 0x38
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b0f      	cmp	r3, #15
 8001c58:	d844      	bhi.n	8001ce4 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	2019      	movs	r0, #25
 8001c60:	f000 fb00 	bl	8002264 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c64:	2019      	movs	r0, #25
 8001c66:	f000 fb17 	bl	8002298 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001c6a:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <HAL_InitTick+0xb0>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c70:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <HAL_InitTick+0xb4>)
 8001c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c76:	4a22      	ldr	r2, [pc, #136]	; (8001d00 <HAL_InitTick+0xb4>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <HAL_InitTick+0xb4>)
 8001c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c8e:	f107 020c 	add.w	r2, r7, #12
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f005 feaf 	bl	80079fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001c9e:	f005 fe97 	bl	80079d0 <HAL_RCC_GetPCLK2Freq>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001caa:	4a16      	ldr	r2, [pc, #88]	; (8001d04 <HAL_InitTick+0xb8>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	0c9b      	lsrs	r3, r3, #18
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_InitTick+0xbc>)
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <HAL_InitTick+0xc0>)
 8001cba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_InitTick+0xbc>)
 8001cbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cc2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cc4:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_InitTick+0xbc>)
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_InitTick+0xbc>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_InitTick+0xbc>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001cd6:	480c      	ldr	r0, [pc, #48]	; (8001d08 <HAL_InitTick+0xbc>)
 8001cd8:	f007 f9ee 	bl	80090b8 <HAL_TIM_Base_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d107      	bne.n	8001cf2 <HAL_InitTick+0xa6>
 8001ce2:	e001      	b.n	8001ce8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e005      	b.n	8001cf4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ce8:	4807      	ldr	r0, [pc, #28]	; (8001d08 <HAL_InitTick+0xbc>)
 8001cea:	f007 fa47 	bl	800917c <HAL_TIM_Base_Start_IT>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	e000      	b.n	8001cf4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3738      	adds	r7, #56	; 0x38
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	24000008 	.word	0x24000008
 8001d00:	58024400 	.word	0x58024400
 8001d04:	431bde83 	.word	0x431bde83
 8001d08:	24000af4 	.word	0x24000af4
 8001d0c:	40010000 	.word	0x40010000

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <NMI_Handler+0x4>

08001d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <HardFault_Handler+0x4>

08001d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <MemManage_Handler+0x4>

08001d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <BusFault_Handler+0x4>

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <UsageFault_Handler+0x4>

08001d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Stream0_IRQHandler+0x10>)
 8001d42:	f001 fddf 	bl	8003904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2400091c 	.word	0x2400091c

08001d50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <DMA1_Stream1_IRQHandler+0x10>)
 8001d56:	f001 fdd5 	bl	8003904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	24000994 	.word	0x24000994

08001d64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <TIM1_UP_IRQHandler+0x10>)
 8001d6a:	f007 fa8d 	bl	8009288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	24000af4 	.word	0x24000af4

08001d78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <USART3_IRQHandler+0x10>)
 8001d7e:	f007 fd71 	bl	8009864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2400088c 	.word	0x2400088c

08001d8c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <OTG_HS_IRQHandler+0x10>)
 8001d92:	f003 fd0f 	bl	80057b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	24006ecc 	.word	0x24006ecc

08001da0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e00a      	b.n	8001dc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001db2:	f3af 8000 	nop.w
 8001db6:	4601      	mov	r1, r0
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	60ba      	str	r2, [r7, #8]
 8001dbe:	b2ca      	uxtb	r2, r1
 8001dc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbf0      	blt.n	8001db2 <_read+0x12>
	}

return len;
 8001dd0:	687b      	ldr	r3, [r7, #4]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_close>:
	}
	return len;
}

int _close(int file)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
	return -1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e02:	605a      	str	r2, [r3, #4]
	return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_isatty>:

int _isatty(int file)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
	return 1;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
	return 0;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e4c:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <_sbrk+0x5c>)
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <_sbrk+0x60>)
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <_sbrk+0x64>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <_sbrk+0x68>)
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d207      	bcs.n	8001e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e74:	f017 ffe6 	bl	8019e44 <__errno>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e82:	e009      	b.n	8001e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <_sbrk+0x64>)
 8001e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	24050000 	.word	0x24050000
 8001ea4:	00000400 	.word	0x00000400
 8001ea8:	24000b40 	.word	0x24000b40
 8001eac:	240071e0 	.word	0x240071e0

08001eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b32      	ldr	r3, [pc, #200]	; (8001f80 <SystemInit+0xd0>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	4a31      	ldr	r2, [pc, #196]	; (8001f80 <SystemInit+0xd0>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ec4:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <SystemInit+0xd4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	2b06      	cmp	r3, #6
 8001ece:	d807      	bhi.n	8001ee0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <SystemInit+0xd4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 030f 	bic.w	r3, r3, #15
 8001ed8:	4a2a      	ldr	r2, [pc, #168]	; (8001f84 <SystemInit+0xd4>)
 8001eda:	f043 0307 	orr.w	r3, r3, #7
 8001ede:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ee0:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <SystemInit+0xd8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a28      	ldr	r2, [pc, #160]	; (8001f88 <SystemInit+0xd8>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001eec:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <SystemInit+0xd8>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <SystemInit+0xd8>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4924      	ldr	r1, [pc, #144]	; (8001f88 <SystemInit+0xd8>)
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <SystemInit+0xdc>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <SystemInit+0xd4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <SystemInit+0xd4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 030f 	bic.w	r3, r3, #15
 8001f12:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <SystemInit+0xd4>)
 8001f14:	f043 0307 	orr.w	r3, r3, #7
 8001f18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <SystemInit+0xd8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <SystemInit+0xd8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f26:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <SystemInit+0xd8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <SystemInit+0xd8>)
 8001f2e:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <SystemInit+0xe0>)
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <SystemInit+0xd8>)
 8001f34:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <SystemInit+0xe4>)
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <SystemInit+0xd8>)
 8001f3a:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <SystemInit+0xe8>)
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <SystemInit+0xd8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f44:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <SystemInit+0xd8>)
 8001f46:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <SystemInit+0xe8>)
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <SystemInit+0xd8>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <SystemInit+0xd8>)
 8001f52:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <SystemInit+0xe8>)
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <SystemInit+0xd8>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <SystemInit+0xd8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <SystemInit+0xd8>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <SystemInit+0xd8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <SystemInit+0xec>)
 8001f70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00
 8001f84:	52002000 	.word	0x52002000
 8001f88:	58024400 	.word	0x58024400
 8001f8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f90:	02020200 	.word	0x02020200
 8001f94:	01ff0000 	.word	0x01ff0000
 8001f98:	01010280 	.word	0x01010280
 8001f9c:	52004000 	.word	0x52004000

08001fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fa4:	f7ff ff84 	bl	8001eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001faa:	490d      	ldr	r1, [pc, #52]	; (8001fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fc0:	4c0a      	ldr	r4, [pc, #40]	; (8001fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fce:	f017 ff3f 	bl	8019e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd2:	f7fe febf 	bl	8000d54 <main>
  bx  lr
 8001fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fd8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001fdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fe0:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8001fe4:	0801bdbc 	.word	0x0801bdbc
  ldr r2, =_sbss
 8001fe8:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8001fec:	240071e0 	.word	0x240071e0

08001ff0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC3_IRQHandler>
	...

08001ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffa:	2003      	movs	r0, #3
 8001ffc:	f000 f927 	bl	800224e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002000:	f005 fb26 	bl	8007650 <HAL_RCC_GetSysClockFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <HAL_Init+0x68>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	4913      	ldr	r1, [pc, #76]	; (8002060 <HAL_Init+0x6c>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <HAL_Init+0x68>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <HAL_Init+0x6c>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
 8002034:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <HAL_Init+0x70>)
 8002036:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002038:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <HAL_Init+0x74>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203e:	200f      	movs	r0, #15
 8002040:	f7ff fe04 	bl	8001c4c <HAL_InitTick>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e002      	b.n	8002054 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800204e:	f7ff fd0d 	bl	8001a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	58024400 	.word	0x58024400
 8002060:	0801b880 	.word	0x0801b880
 8002064:	24000004 	.word	0x24000004
 8002068:	24000000 	.word	0x24000000

0800206c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	2400000c 	.word	0x2400000c
 8002090:	24000b44 	.word	0x24000b44

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	24000b44 	.word	0x24000b44

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff ffee 	bl	8002094 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020c4:	d005      	beq.n	80020d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_Delay+0x44>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d2:	bf00      	nop
 80020d4:	f7ff ffde 	bl	8002094 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d8f7      	bhi.n	80020d4 <HAL_Delay+0x28>
  {
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2400000c 	.word	0x2400000c

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <__NVIC_SetPriorityGrouping+0x40>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 800211e:	4313      	orrs	r3, r2
 8002120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002122:	4a04      	ldr	r2, [pc, #16]	; (8002134 <__NVIC_SetPriorityGrouping+0x40>)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	60d3      	str	r3, [r2, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00
 8002138:	05fa0000 	.word	0x05fa0000

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4907      	ldr	r1, [pc, #28]	; (8002190 <__NVIC_EnableIRQ+0x38>)
 8002172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ff4c 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002272:	f7ff ff63 	bl	800213c <__NVIC_GetPriorityGrouping>
 8002276:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	6978      	ldr	r0, [r7, #20]
 800227e:	f7ff ffb3 	bl	80021e8 <NVIC_EncodePriority>
 8002282:	4602      	mov	r2, r0
 8002284:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff82 	bl	8002194 <__NVIC_SetPriority>
}
 8002290:	bf00      	nop
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ff56 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff feea 	bl	8002094 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e314      	b.n	80028f6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a66      	ldr	r2, [pc, #408]	; (800246c <HAL_DMA_Init+0x1b8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d04a      	beq.n	800236c <HAL_DMA_Init+0xb8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a65      	ldr	r2, [pc, #404]	; (8002470 <HAL_DMA_Init+0x1bc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d045      	beq.n	800236c <HAL_DMA_Init+0xb8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a63      	ldr	r2, [pc, #396]	; (8002474 <HAL_DMA_Init+0x1c0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d040      	beq.n	800236c <HAL_DMA_Init+0xb8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a62      	ldr	r2, [pc, #392]	; (8002478 <HAL_DMA_Init+0x1c4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d03b      	beq.n	800236c <HAL_DMA_Init+0xb8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a60      	ldr	r2, [pc, #384]	; (800247c <HAL_DMA_Init+0x1c8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d036      	beq.n	800236c <HAL_DMA_Init+0xb8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a5f      	ldr	r2, [pc, #380]	; (8002480 <HAL_DMA_Init+0x1cc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d031      	beq.n	800236c <HAL_DMA_Init+0xb8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a5d      	ldr	r2, [pc, #372]	; (8002484 <HAL_DMA_Init+0x1d0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d02c      	beq.n	800236c <HAL_DMA_Init+0xb8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a5c      	ldr	r2, [pc, #368]	; (8002488 <HAL_DMA_Init+0x1d4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d027      	beq.n	800236c <HAL_DMA_Init+0xb8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a5a      	ldr	r2, [pc, #360]	; (800248c <HAL_DMA_Init+0x1d8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d022      	beq.n	800236c <HAL_DMA_Init+0xb8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a59      	ldr	r2, [pc, #356]	; (8002490 <HAL_DMA_Init+0x1dc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d01d      	beq.n	800236c <HAL_DMA_Init+0xb8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a57      	ldr	r2, [pc, #348]	; (8002494 <HAL_DMA_Init+0x1e0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d018      	beq.n	800236c <HAL_DMA_Init+0xb8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a56      	ldr	r2, [pc, #344]	; (8002498 <HAL_DMA_Init+0x1e4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d013      	beq.n	800236c <HAL_DMA_Init+0xb8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a54      	ldr	r2, [pc, #336]	; (800249c <HAL_DMA_Init+0x1e8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00e      	beq.n	800236c <HAL_DMA_Init+0xb8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a53      	ldr	r2, [pc, #332]	; (80024a0 <HAL_DMA_Init+0x1ec>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d009      	beq.n	800236c <HAL_DMA_Init+0xb8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a51      	ldr	r2, [pc, #324]	; (80024a4 <HAL_DMA_Init+0x1f0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d004      	beq.n	800236c <HAL_DMA_Init+0xb8>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a50      	ldr	r2, [pc, #320]	; (80024a8 <HAL_DMA_Init+0x1f4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_DMA_Init+0xbc>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_DMA_Init+0xbe>
 8002370:	2300      	movs	r3, #0
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 813c 	beq.w	80025f0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a37      	ldr	r2, [pc, #220]	; (800246c <HAL_DMA_Init+0x1b8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d04a      	beq.n	8002428 <HAL_DMA_Init+0x174>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a36      	ldr	r2, [pc, #216]	; (8002470 <HAL_DMA_Init+0x1bc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d045      	beq.n	8002428 <HAL_DMA_Init+0x174>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a34      	ldr	r2, [pc, #208]	; (8002474 <HAL_DMA_Init+0x1c0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d040      	beq.n	8002428 <HAL_DMA_Init+0x174>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a33      	ldr	r2, [pc, #204]	; (8002478 <HAL_DMA_Init+0x1c4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d03b      	beq.n	8002428 <HAL_DMA_Init+0x174>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a31      	ldr	r2, [pc, #196]	; (800247c <HAL_DMA_Init+0x1c8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d036      	beq.n	8002428 <HAL_DMA_Init+0x174>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a30      	ldr	r2, [pc, #192]	; (8002480 <HAL_DMA_Init+0x1cc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d031      	beq.n	8002428 <HAL_DMA_Init+0x174>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a2e      	ldr	r2, [pc, #184]	; (8002484 <HAL_DMA_Init+0x1d0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02c      	beq.n	8002428 <HAL_DMA_Init+0x174>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2d      	ldr	r2, [pc, #180]	; (8002488 <HAL_DMA_Init+0x1d4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d027      	beq.n	8002428 <HAL_DMA_Init+0x174>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2b      	ldr	r2, [pc, #172]	; (800248c <HAL_DMA_Init+0x1d8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d022      	beq.n	8002428 <HAL_DMA_Init+0x174>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <HAL_DMA_Init+0x1dc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d01d      	beq.n	8002428 <HAL_DMA_Init+0x174>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a28      	ldr	r2, [pc, #160]	; (8002494 <HAL_DMA_Init+0x1e0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d018      	beq.n	8002428 <HAL_DMA_Init+0x174>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a27      	ldr	r2, [pc, #156]	; (8002498 <HAL_DMA_Init+0x1e4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d013      	beq.n	8002428 <HAL_DMA_Init+0x174>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a25      	ldr	r2, [pc, #148]	; (800249c <HAL_DMA_Init+0x1e8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00e      	beq.n	8002428 <HAL_DMA_Init+0x174>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <HAL_DMA_Init+0x1ec>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d009      	beq.n	8002428 <HAL_DMA_Init+0x174>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <HAL_DMA_Init+0x1f0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d004      	beq.n	8002428 <HAL_DMA_Init+0x174>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <HAL_DMA_Init+0x1f4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d108      	bne.n	800243a <HAL_DMA_Init+0x186>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e007      	b.n	800244a <HAL_DMA_Init+0x196>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800244a:	e02f      	b.n	80024ac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800244c:	f7ff fe22 	bl	8002094 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b05      	cmp	r3, #5
 8002458:	d928      	bls.n	80024ac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2220      	movs	r2, #32
 800245e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2203      	movs	r2, #3
 8002464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e244      	b.n	80028f6 <HAL_DMA_Init+0x642>
 800246c:	40020010 	.word	0x40020010
 8002470:	40020028 	.word	0x40020028
 8002474:	40020040 	.word	0x40020040
 8002478:	40020058 	.word	0x40020058
 800247c:	40020070 	.word	0x40020070
 8002480:	40020088 	.word	0x40020088
 8002484:	400200a0 	.word	0x400200a0
 8002488:	400200b8 	.word	0x400200b8
 800248c:	40020410 	.word	0x40020410
 8002490:	40020428 	.word	0x40020428
 8002494:	40020440 	.word	0x40020440
 8002498:	40020458 	.word	0x40020458
 800249c:	40020470 	.word	0x40020470
 80024a0:	40020488 	.word	0x40020488
 80024a4:	400204a0 	.word	0x400204a0
 80024a8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1c8      	bne.n	800244c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4b84      	ldr	r3, [pc, #528]	; (80026d8 <HAL_DMA_Init+0x424>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024de:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d107      	bne.n	8002510 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	4313      	orrs	r3, r2
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b28      	cmp	r3, #40	; 0x28
 8002516:	d903      	bls.n	8002520 <HAL_DMA_Init+0x26c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b2e      	cmp	r3, #46	; 0x2e
 800251e:	d91f      	bls.n	8002560 <HAL_DMA_Init+0x2ac>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b3e      	cmp	r3, #62	; 0x3e
 8002526:	d903      	bls.n	8002530 <HAL_DMA_Init+0x27c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b42      	cmp	r3, #66	; 0x42
 800252e:	d917      	bls.n	8002560 <HAL_DMA_Init+0x2ac>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b46      	cmp	r3, #70	; 0x46
 8002536:	d903      	bls.n	8002540 <HAL_DMA_Init+0x28c>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b48      	cmp	r3, #72	; 0x48
 800253e:	d90f      	bls.n	8002560 <HAL_DMA_Init+0x2ac>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b4e      	cmp	r3, #78	; 0x4e
 8002546:	d903      	bls.n	8002550 <HAL_DMA_Init+0x29c>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b52      	cmp	r3, #82	; 0x52
 800254e:	d907      	bls.n	8002560 <HAL_DMA_Init+0x2ac>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b73      	cmp	r3, #115	; 0x73
 8002556:	d905      	bls.n	8002564 <HAL_DMA_Init+0x2b0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b77      	cmp	r3, #119	; 0x77
 800255e:	d801      	bhi.n	8002564 <HAL_DMA_Init+0x2b0>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_DMA_Init+0x2b2>
 8002564:	2300      	movs	r3, #0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002570:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f023 0307 	bic.w	r3, r3, #7
 8002588:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	2b04      	cmp	r3, #4
 800259a:	d117      	bne.n	80025cc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00e      	beq.n	80025cc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f002 fb30 	bl	8004c14 <DMA_CheckFifoParam>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2240      	movs	r2, #64	; 0x40
 80025be:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e194      	b.n	80028f6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f002 fa6b 	bl	8004ab0 <DMA_CalcBaseAndBitshift>
 80025da:	4603      	mov	r3, r0
 80025dc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	223f      	movs	r2, #63	; 0x3f
 80025e8:	409a      	lsls	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	e0ca      	b.n	8002786 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a39      	ldr	r2, [pc, #228]	; (80026dc <HAL_DMA_Init+0x428>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d022      	beq.n	8002640 <HAL_DMA_Init+0x38c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a38      	ldr	r2, [pc, #224]	; (80026e0 <HAL_DMA_Init+0x42c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d01d      	beq.n	8002640 <HAL_DMA_Init+0x38c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a36      	ldr	r2, [pc, #216]	; (80026e4 <HAL_DMA_Init+0x430>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d018      	beq.n	8002640 <HAL_DMA_Init+0x38c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a35      	ldr	r2, [pc, #212]	; (80026e8 <HAL_DMA_Init+0x434>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d013      	beq.n	8002640 <HAL_DMA_Init+0x38c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a33      	ldr	r2, [pc, #204]	; (80026ec <HAL_DMA_Init+0x438>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00e      	beq.n	8002640 <HAL_DMA_Init+0x38c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a32      	ldr	r2, [pc, #200]	; (80026f0 <HAL_DMA_Init+0x43c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d009      	beq.n	8002640 <HAL_DMA_Init+0x38c>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a30      	ldr	r2, [pc, #192]	; (80026f4 <HAL_DMA_Init+0x440>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d004      	beq.n	8002640 <HAL_DMA_Init+0x38c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2f      	ldr	r2, [pc, #188]	; (80026f8 <HAL_DMA_Init+0x444>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_DMA_Init+0x390>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <HAL_DMA_Init+0x392>
 8002644:	2300      	movs	r3, #0
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8094 	beq.w	8002774 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a22      	ldr	r2, [pc, #136]	; (80026dc <HAL_DMA_Init+0x428>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d021      	beq.n	800269a <HAL_DMA_Init+0x3e6>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <HAL_DMA_Init+0x42c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d01c      	beq.n	800269a <HAL_DMA_Init+0x3e6>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1f      	ldr	r2, [pc, #124]	; (80026e4 <HAL_DMA_Init+0x430>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d017      	beq.n	800269a <HAL_DMA_Init+0x3e6>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <HAL_DMA_Init+0x434>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d012      	beq.n	800269a <HAL_DMA_Init+0x3e6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <HAL_DMA_Init+0x438>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_DMA_Init+0x3e6>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1b      	ldr	r2, [pc, #108]	; (80026f0 <HAL_DMA_Init+0x43c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d008      	beq.n	800269a <HAL_DMA_Init+0x3e6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a19      	ldr	r2, [pc, #100]	; (80026f4 <HAL_DMA_Init+0x440>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d003      	beq.n	800269a <HAL_DMA_Init+0x3e6>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <HAL_DMA_Init+0x444>)
 8002698:	4293      	cmp	r3, r2
 800269a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_DMA_Init+0x448>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b40      	cmp	r3, #64	; 0x40
 80026c2:	d01d      	beq.n	8002700 <HAL_DMA_Init+0x44c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b80      	cmp	r3, #128	; 0x80
 80026ca:	d102      	bne.n	80026d2 <HAL_DMA_Init+0x41e>
 80026cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026d0:	e017      	b.n	8002702 <HAL_DMA_Init+0x44e>
 80026d2:	2300      	movs	r3, #0
 80026d4:	e015      	b.n	8002702 <HAL_DMA_Init+0x44e>
 80026d6:	bf00      	nop
 80026d8:	fe10803f 	.word	0xfe10803f
 80026dc:	58025408 	.word	0x58025408
 80026e0:	5802541c 	.word	0x5802541c
 80026e4:	58025430 	.word	0x58025430
 80026e8:	58025444 	.word	0x58025444
 80026ec:	58025458 	.word	0x58025458
 80026f0:	5802546c 	.word	0x5802546c
 80026f4:	58025480 	.word	0x58025480
 80026f8:	58025494 	.word	0x58025494
 80026fc:	fffe000f 	.word	0xfffe000f
 8002700:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68d2      	ldr	r2, [r2, #12]
 8002706:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002708:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002710:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002718:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002720:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002728:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002730:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4b6e      	ldr	r3, [pc, #440]	; (8002900 <HAL_DMA_Init+0x64c>)
 8002748:	4413      	add	r3, r2
 800274a:	4a6e      	ldr	r2, [pc, #440]	; (8002904 <HAL_DMA_Init+0x650>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	009a      	lsls	r2, r3, #2
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f002 f9a9 	bl	8004ab0 <DMA_CalcBaseAndBitshift>
 800275e:	4603      	mov	r3, r0
 8002760:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2201      	movs	r2, #1
 800276c:	409a      	lsls	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	e008      	b.n	8002786 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2203      	movs	r2, #3
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0b7      	b.n	80028f6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5f      	ldr	r2, [pc, #380]	; (8002908 <HAL_DMA_Init+0x654>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d072      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5d      	ldr	r2, [pc, #372]	; (800290c <HAL_DMA_Init+0x658>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d06d      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a5c      	ldr	r2, [pc, #368]	; (8002910 <HAL_DMA_Init+0x65c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d068      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a5a      	ldr	r2, [pc, #360]	; (8002914 <HAL_DMA_Init+0x660>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d063      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a59      	ldr	r2, [pc, #356]	; (8002918 <HAL_DMA_Init+0x664>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d05e      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a57      	ldr	r2, [pc, #348]	; (800291c <HAL_DMA_Init+0x668>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d059      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a56      	ldr	r2, [pc, #344]	; (8002920 <HAL_DMA_Init+0x66c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d054      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a54      	ldr	r2, [pc, #336]	; (8002924 <HAL_DMA_Init+0x670>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d04f      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a53      	ldr	r2, [pc, #332]	; (8002928 <HAL_DMA_Init+0x674>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d04a      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a51      	ldr	r2, [pc, #324]	; (800292c <HAL_DMA_Init+0x678>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d045      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a50      	ldr	r2, [pc, #320]	; (8002930 <HAL_DMA_Init+0x67c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d040      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a4e      	ldr	r2, [pc, #312]	; (8002934 <HAL_DMA_Init+0x680>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d03b      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a4d      	ldr	r2, [pc, #308]	; (8002938 <HAL_DMA_Init+0x684>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d036      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a4b      	ldr	r2, [pc, #300]	; (800293c <HAL_DMA_Init+0x688>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d031      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a4a      	ldr	r2, [pc, #296]	; (8002940 <HAL_DMA_Init+0x68c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d02c      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a48      	ldr	r2, [pc, #288]	; (8002944 <HAL_DMA_Init+0x690>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d027      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a47      	ldr	r2, [pc, #284]	; (8002948 <HAL_DMA_Init+0x694>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d022      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a45      	ldr	r2, [pc, #276]	; (800294c <HAL_DMA_Init+0x698>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01d      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a44      	ldr	r2, [pc, #272]	; (8002950 <HAL_DMA_Init+0x69c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d018      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a42      	ldr	r2, [pc, #264]	; (8002954 <HAL_DMA_Init+0x6a0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a41      	ldr	r2, [pc, #260]	; (8002958 <HAL_DMA_Init+0x6a4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00e      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3f      	ldr	r2, [pc, #252]	; (800295c <HAL_DMA_Init+0x6a8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d009      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a3e      	ldr	r2, [pc, #248]	; (8002960 <HAL_DMA_Init+0x6ac>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d004      	beq.n	8002876 <HAL_DMA_Init+0x5c2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a3c      	ldr	r2, [pc, #240]	; (8002964 <HAL_DMA_Init+0x6b0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_DMA_Init+0x5c6>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_DMA_Init+0x5c8>
 800287a:	2300      	movs	r3, #0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d032      	beq.n	80028e6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f002 fa43 	bl	8004d0c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b80      	cmp	r3, #128	; 0x80
 800288c:	d102      	bne.n	8002894 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d010      	beq.n	80028d4 <HAL_DMA_Init+0x620>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d80c      	bhi.n	80028d4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f002 fac0 	bl	8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	e008      	b.n	80028e6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	a7fdabf8 	.word	0xa7fdabf8
 8002904:	cccccccd 	.word	0xcccccccd
 8002908:	40020010 	.word	0x40020010
 800290c:	40020028 	.word	0x40020028
 8002910:	40020040 	.word	0x40020040
 8002914:	40020058 	.word	0x40020058
 8002918:	40020070 	.word	0x40020070
 800291c:	40020088 	.word	0x40020088
 8002920:	400200a0 	.word	0x400200a0
 8002924:	400200b8 	.word	0x400200b8
 8002928:	40020410 	.word	0x40020410
 800292c:	40020428 	.word	0x40020428
 8002930:	40020440 	.word	0x40020440
 8002934:	40020458 	.word	0x40020458
 8002938:	40020470 	.word	0x40020470
 800293c:	40020488 	.word	0x40020488
 8002940:	400204a0 	.word	0x400204a0
 8002944:	400204b8 	.word	0x400204b8
 8002948:	58025408 	.word	0x58025408
 800294c:	5802541c 	.word	0x5802541c
 8002950:	58025430 	.word	0x58025430
 8002954:	58025444 	.word	0x58025444
 8002958:	58025458 	.word	0x58025458
 800295c:	5802546c 	.word	0x5802546c
 8002960:	58025480 	.word	0x58025480
 8002964:	58025494 	.word	0x58025494

08002968 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e226      	b.n	8002dd2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_DMA_Start_IT+0x2a>
 800298e:	2302      	movs	r3, #2
 8002990:	e21f      	b.n	8002dd2 <HAL_DMA_Start_IT+0x46a>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	f040 820a 	bne.w	8002dbc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a68      	ldr	r2, [pc, #416]	; (8002b5c <HAL_DMA_Start_IT+0x1f4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d04a      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a66      	ldr	r2, [pc, #408]	; (8002b60 <HAL_DMA_Start_IT+0x1f8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d045      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <HAL_DMA_Start_IT+0x1fc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d040      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a63      	ldr	r2, [pc, #396]	; (8002b68 <HAL_DMA_Start_IT+0x200>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d03b      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a62      	ldr	r2, [pc, #392]	; (8002b6c <HAL_DMA_Start_IT+0x204>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d036      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a60      	ldr	r2, [pc, #384]	; (8002b70 <HAL_DMA_Start_IT+0x208>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a5f      	ldr	r2, [pc, #380]	; (8002b74 <HAL_DMA_Start_IT+0x20c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d02c      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <HAL_DMA_Start_IT+0x210>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d027      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5c      	ldr	r2, [pc, #368]	; (8002b7c <HAL_DMA_Start_IT+0x214>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a5a      	ldr	r2, [pc, #360]	; (8002b80 <HAL_DMA_Start_IT+0x218>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a59      	ldr	r2, [pc, #356]	; (8002b84 <HAL_DMA_Start_IT+0x21c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d018      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a57      	ldr	r2, [pc, #348]	; (8002b88 <HAL_DMA_Start_IT+0x220>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a56      	ldr	r2, [pc, #344]	; (8002b8c <HAL_DMA_Start_IT+0x224>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <HAL_DMA_Start_IT+0x228>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a53      	ldr	r2, [pc, #332]	; (8002b94 <HAL_DMA_Start_IT+0x22c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a51      	ldr	r2, [pc, #324]	; (8002b98 <HAL_DMA_Start_IT+0x230>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <HAL_DMA_Start_IT+0x100>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e007      	b.n	8002a78 <HAL_DMA_Start_IT+0x110>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f001 fe6a 	bl	8004758 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a34      	ldr	r2, [pc, #208]	; (8002b5c <HAL_DMA_Start_IT+0x1f4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d04a      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a33      	ldr	r2, [pc, #204]	; (8002b60 <HAL_DMA_Start_IT+0x1f8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d045      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a31      	ldr	r2, [pc, #196]	; (8002b64 <HAL_DMA_Start_IT+0x1fc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d040      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a30      	ldr	r2, [pc, #192]	; (8002b68 <HAL_DMA_Start_IT+0x200>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d03b      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2e      	ldr	r2, [pc, #184]	; (8002b6c <HAL_DMA_Start_IT+0x204>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d036      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a2d      	ldr	r2, [pc, #180]	; (8002b70 <HAL_DMA_Start_IT+0x208>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d031      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2b      	ldr	r2, [pc, #172]	; (8002b74 <HAL_DMA_Start_IT+0x20c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d02c      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <HAL_DMA_Start_IT+0x210>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d027      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a28      	ldr	r2, [pc, #160]	; (8002b7c <HAL_DMA_Start_IT+0x214>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d022      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a27      	ldr	r2, [pc, #156]	; (8002b80 <HAL_DMA_Start_IT+0x218>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d01d      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <HAL_DMA_Start_IT+0x21c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d018      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <HAL_DMA_Start_IT+0x220>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d013      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <HAL_DMA_Start_IT+0x224>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d00e      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <HAL_DMA_Start_IT+0x228>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d009      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1f      	ldr	r2, [pc, #124]	; (8002b94 <HAL_DMA_Start_IT+0x22c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d004      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <HAL_DMA_Start_IT+0x230>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d101      	bne.n	8002b28 <HAL_DMA_Start_IT+0x1c0>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_DMA_Start_IT+0x1c2>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d036      	beq.n	8002b9c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 021e 	bic.w	r2, r3, #30
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0216 	orr.w	r2, r2, #22
 8002b40:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d03e      	beq.n	8002bc8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0208 	orr.w	r2, r2, #8
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	e035      	b.n	8002bc8 <HAL_DMA_Start_IT+0x260>
 8002b5c:	40020010 	.word	0x40020010
 8002b60:	40020028 	.word	0x40020028
 8002b64:	40020040 	.word	0x40020040
 8002b68:	40020058 	.word	0x40020058
 8002b6c:	40020070 	.word	0x40020070
 8002b70:	40020088 	.word	0x40020088
 8002b74:	400200a0 	.word	0x400200a0
 8002b78:	400200b8 	.word	0x400200b8
 8002b7c:	40020410 	.word	0x40020410
 8002b80:	40020428 	.word	0x40020428
 8002b84:	40020440 	.word	0x40020440
 8002b88:	40020458 	.word	0x40020458
 8002b8c:	40020470 	.word	0x40020470
 8002b90:	40020488 	.word	0x40020488
 8002b94:	400204a0 	.word	0x400204a0
 8002b98:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 020e 	bic.w	r2, r3, #14
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 020a 	orr.w	r2, r2, #10
 8002bae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0204 	orr.w	r2, r2, #4
 8002bc6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a83      	ldr	r2, [pc, #524]	; (8002ddc <HAL_DMA_Start_IT+0x474>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d072      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a82      	ldr	r2, [pc, #520]	; (8002de0 <HAL_DMA_Start_IT+0x478>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d06d      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a80      	ldr	r2, [pc, #512]	; (8002de4 <HAL_DMA_Start_IT+0x47c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d068      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7f      	ldr	r2, [pc, #508]	; (8002de8 <HAL_DMA_Start_IT+0x480>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d063      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a7d      	ldr	r2, [pc, #500]	; (8002dec <HAL_DMA_Start_IT+0x484>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d05e      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7c      	ldr	r2, [pc, #496]	; (8002df0 <HAL_DMA_Start_IT+0x488>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d059      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7a      	ldr	r2, [pc, #488]	; (8002df4 <HAL_DMA_Start_IT+0x48c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d054      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a79      	ldr	r2, [pc, #484]	; (8002df8 <HAL_DMA_Start_IT+0x490>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d04f      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a77      	ldr	r2, [pc, #476]	; (8002dfc <HAL_DMA_Start_IT+0x494>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d04a      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a76      	ldr	r2, [pc, #472]	; (8002e00 <HAL_DMA_Start_IT+0x498>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d045      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a74      	ldr	r2, [pc, #464]	; (8002e04 <HAL_DMA_Start_IT+0x49c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d040      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a73      	ldr	r2, [pc, #460]	; (8002e08 <HAL_DMA_Start_IT+0x4a0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d03b      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a71      	ldr	r2, [pc, #452]	; (8002e0c <HAL_DMA_Start_IT+0x4a4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d036      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a70      	ldr	r2, [pc, #448]	; (8002e10 <HAL_DMA_Start_IT+0x4a8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d031      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6e      	ldr	r2, [pc, #440]	; (8002e14 <HAL_DMA_Start_IT+0x4ac>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d02c      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6d      	ldr	r2, [pc, #436]	; (8002e18 <HAL_DMA_Start_IT+0x4b0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d027      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6b      	ldr	r2, [pc, #428]	; (8002e1c <HAL_DMA_Start_IT+0x4b4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d022      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6a      	ldr	r2, [pc, #424]	; (8002e20 <HAL_DMA_Start_IT+0x4b8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d01d      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a68      	ldr	r2, [pc, #416]	; (8002e24 <HAL_DMA_Start_IT+0x4bc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d018      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a67      	ldr	r2, [pc, #412]	; (8002e28 <HAL_DMA_Start_IT+0x4c0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d013      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a65      	ldr	r2, [pc, #404]	; (8002e2c <HAL_DMA_Start_IT+0x4c4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00e      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a64      	ldr	r2, [pc, #400]	; (8002e30 <HAL_DMA_Start_IT+0x4c8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a62      	ldr	r2, [pc, #392]	; (8002e34 <HAL_DMA_Start_IT+0x4cc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a61      	ldr	r2, [pc, #388]	; (8002e38 <HAL_DMA_Start_IT+0x4d0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d101      	bne.n	8002cbc <HAL_DMA_Start_IT+0x354>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_DMA_Start_IT+0x356>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01a      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cde:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a37      	ldr	r2, [pc, #220]	; (8002ddc <HAL_DMA_Start_IT+0x474>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d04a      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a36      	ldr	r2, [pc, #216]	; (8002de0 <HAL_DMA_Start_IT+0x478>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d045      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <HAL_DMA_Start_IT+0x47c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d040      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a33      	ldr	r2, [pc, #204]	; (8002de8 <HAL_DMA_Start_IT+0x480>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d03b      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a31      	ldr	r2, [pc, #196]	; (8002dec <HAL_DMA_Start_IT+0x484>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d036      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a30      	ldr	r2, [pc, #192]	; (8002df0 <HAL_DMA_Start_IT+0x488>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d031      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a2e      	ldr	r2, [pc, #184]	; (8002df4 <HAL_DMA_Start_IT+0x48c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02c      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2d      	ldr	r2, [pc, #180]	; (8002df8 <HAL_DMA_Start_IT+0x490>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d027      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a2b      	ldr	r2, [pc, #172]	; (8002dfc <HAL_DMA_Start_IT+0x494>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d022      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <HAL_DMA_Start_IT+0x498>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d01d      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a28      	ldr	r2, [pc, #160]	; (8002e04 <HAL_DMA_Start_IT+0x49c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d018      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <HAL_DMA_Start_IT+0x4a0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d013      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a25      	ldr	r2, [pc, #148]	; (8002e0c <HAL_DMA_Start_IT+0x4a4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00e      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a24      	ldr	r2, [pc, #144]	; (8002e10 <HAL_DMA_Start_IT+0x4a8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <HAL_DMA_Start_IT+0x4ac>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <HAL_DMA_Start_IT+0x4b0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d108      	bne.n	8002daa <HAL_DMA_Start_IT+0x442>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e012      	b.n	8002dd0 <HAL_DMA_Start_IT+0x468>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e009      	b.n	8002dd0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40020010 	.word	0x40020010
 8002de0:	40020028 	.word	0x40020028
 8002de4:	40020040 	.word	0x40020040
 8002de8:	40020058 	.word	0x40020058
 8002dec:	40020070 	.word	0x40020070
 8002df0:	40020088 	.word	0x40020088
 8002df4:	400200a0 	.word	0x400200a0
 8002df8:	400200b8 	.word	0x400200b8
 8002dfc:	40020410 	.word	0x40020410
 8002e00:	40020428 	.word	0x40020428
 8002e04:	40020440 	.word	0x40020440
 8002e08:	40020458 	.word	0x40020458
 8002e0c:	40020470 	.word	0x40020470
 8002e10:	40020488 	.word	0x40020488
 8002e14:	400204a0 	.word	0x400204a0
 8002e18:	400204b8 	.word	0x400204b8
 8002e1c:	58025408 	.word	0x58025408
 8002e20:	5802541c 	.word	0x5802541c
 8002e24:	58025430 	.word	0x58025430
 8002e28:	58025444 	.word	0x58025444
 8002e2c:	58025458 	.word	0x58025458
 8002e30:	5802546c 	.word	0x5802546c
 8002e34:	58025480 	.word	0x58025480
 8002e38:	58025494 	.word	0x58025494

08002e3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff f926 	bl	8002094 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e2dc      	b.n	800340e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d008      	beq.n	8002e72 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e2cd      	b.n	800340e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a76      	ldr	r2, [pc, #472]	; (8003050 <HAL_DMA_Abort+0x214>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d04a      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a74      	ldr	r2, [pc, #464]	; (8003054 <HAL_DMA_Abort+0x218>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d045      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a73      	ldr	r2, [pc, #460]	; (8003058 <HAL_DMA_Abort+0x21c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d040      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a71      	ldr	r2, [pc, #452]	; (800305c <HAL_DMA_Abort+0x220>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d03b      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a70      	ldr	r2, [pc, #448]	; (8003060 <HAL_DMA_Abort+0x224>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d036      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6e      	ldr	r2, [pc, #440]	; (8003064 <HAL_DMA_Abort+0x228>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d031      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6d      	ldr	r2, [pc, #436]	; (8003068 <HAL_DMA_Abort+0x22c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d02c      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a6b      	ldr	r2, [pc, #428]	; (800306c <HAL_DMA_Abort+0x230>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d027      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a6a      	ldr	r2, [pc, #424]	; (8003070 <HAL_DMA_Abort+0x234>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d022      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a68      	ldr	r2, [pc, #416]	; (8003074 <HAL_DMA_Abort+0x238>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d01d      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a67      	ldr	r2, [pc, #412]	; (8003078 <HAL_DMA_Abort+0x23c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d018      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a65      	ldr	r2, [pc, #404]	; (800307c <HAL_DMA_Abort+0x240>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a64      	ldr	r2, [pc, #400]	; (8003080 <HAL_DMA_Abort+0x244>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00e      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a62      	ldr	r2, [pc, #392]	; (8003084 <HAL_DMA_Abort+0x248>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d009      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a61      	ldr	r2, [pc, #388]	; (8003088 <HAL_DMA_Abort+0x24c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d004      	beq.n	8002f12 <HAL_DMA_Abort+0xd6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5f      	ldr	r2, [pc, #380]	; (800308c <HAL_DMA_Abort+0x250>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_DMA_Abort+0xda>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_DMA_Abort+0xdc>
 8002f16:	2300      	movs	r3, #0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 021e 	bic.w	r2, r2, #30
 8002f2a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f3a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e00a      	b.n	8002f5a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 020e 	bic.w	r2, r2, #14
 8002f52:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a3c      	ldr	r2, [pc, #240]	; (8003050 <HAL_DMA_Abort+0x214>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d072      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a3a      	ldr	r2, [pc, #232]	; (8003054 <HAL_DMA_Abort+0x218>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d06d      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a39      	ldr	r2, [pc, #228]	; (8003058 <HAL_DMA_Abort+0x21c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d068      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a37      	ldr	r2, [pc, #220]	; (800305c <HAL_DMA_Abort+0x220>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d063      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a36      	ldr	r2, [pc, #216]	; (8003060 <HAL_DMA_Abort+0x224>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d05e      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a34      	ldr	r2, [pc, #208]	; (8003064 <HAL_DMA_Abort+0x228>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d059      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a33      	ldr	r2, [pc, #204]	; (8003068 <HAL_DMA_Abort+0x22c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d054      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a31      	ldr	r2, [pc, #196]	; (800306c <HAL_DMA_Abort+0x230>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d04f      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a30      	ldr	r2, [pc, #192]	; (8003070 <HAL_DMA_Abort+0x234>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04a      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2e      	ldr	r2, [pc, #184]	; (8003074 <HAL_DMA_Abort+0x238>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d045      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <HAL_DMA_Abort+0x23c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d040      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2b      	ldr	r2, [pc, #172]	; (800307c <HAL_DMA_Abort+0x240>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d03b      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <HAL_DMA_Abort+0x244>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d036      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a28      	ldr	r2, [pc, #160]	; (8003084 <HAL_DMA_Abort+0x248>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d031      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a27      	ldr	r2, [pc, #156]	; (8003088 <HAL_DMA_Abort+0x24c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d02c      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <HAL_DMA_Abort+0x250>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d027      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a24      	ldr	r2, [pc, #144]	; (8003090 <HAL_DMA_Abort+0x254>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a22      	ldr	r2, [pc, #136]	; (8003094 <HAL_DMA_Abort+0x258>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01d      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a21      	ldr	r2, [pc, #132]	; (8003098 <HAL_DMA_Abort+0x25c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d018      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1f      	ldr	r2, [pc, #124]	; (800309c <HAL_DMA_Abort+0x260>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <HAL_DMA_Abort+0x264>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <HAL_DMA_Abort+0x268>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_DMA_Abort+0x26c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_DMA_Abort+0x20e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <HAL_DMA_Abort+0x270>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d132      	bne.n	80030b0 <HAL_DMA_Abort+0x274>
 800304a:	2301      	movs	r3, #1
 800304c:	e031      	b.n	80030b2 <HAL_DMA_Abort+0x276>
 800304e:	bf00      	nop
 8003050:	40020010 	.word	0x40020010
 8003054:	40020028 	.word	0x40020028
 8003058:	40020040 	.word	0x40020040
 800305c:	40020058 	.word	0x40020058
 8003060:	40020070 	.word	0x40020070
 8003064:	40020088 	.word	0x40020088
 8003068:	400200a0 	.word	0x400200a0
 800306c:	400200b8 	.word	0x400200b8
 8003070:	40020410 	.word	0x40020410
 8003074:	40020428 	.word	0x40020428
 8003078:	40020440 	.word	0x40020440
 800307c:	40020458 	.word	0x40020458
 8003080:	40020470 	.word	0x40020470
 8003084:	40020488 	.word	0x40020488
 8003088:	400204a0 	.word	0x400204a0
 800308c:	400204b8 	.word	0x400204b8
 8003090:	58025408 	.word	0x58025408
 8003094:	5802541c 	.word	0x5802541c
 8003098:	58025430 	.word	0x58025430
 800309c:	58025444 	.word	0x58025444
 80030a0:	58025458 	.word	0x58025458
 80030a4:	5802546c 	.word	0x5802546c
 80030a8:	58025480 	.word	0x58025480
 80030ac:	58025494 	.word	0x58025494
 80030b0:	2300      	movs	r3, #0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a6d      	ldr	r2, [pc, #436]	; (8003280 <HAL_DMA_Abort+0x444>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d04a      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6b      	ldr	r2, [pc, #428]	; (8003284 <HAL_DMA_Abort+0x448>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d045      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6a      	ldr	r2, [pc, #424]	; (8003288 <HAL_DMA_Abort+0x44c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d040      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a68      	ldr	r2, [pc, #416]	; (800328c <HAL_DMA_Abort+0x450>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d03b      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a67      	ldr	r2, [pc, #412]	; (8003290 <HAL_DMA_Abort+0x454>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d036      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a65      	ldr	r2, [pc, #404]	; (8003294 <HAL_DMA_Abort+0x458>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d031      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a64      	ldr	r2, [pc, #400]	; (8003298 <HAL_DMA_Abort+0x45c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d02c      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a62      	ldr	r2, [pc, #392]	; (800329c <HAL_DMA_Abort+0x460>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d027      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a61      	ldr	r2, [pc, #388]	; (80032a0 <HAL_DMA_Abort+0x464>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d022      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <HAL_DMA_Abort+0x468>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d01d      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a5e      	ldr	r2, [pc, #376]	; (80032a8 <HAL_DMA_Abort+0x46c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d018      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a5c      	ldr	r2, [pc, #368]	; (80032ac <HAL_DMA_Abort+0x470>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5b      	ldr	r2, [pc, #364]	; (80032b0 <HAL_DMA_Abort+0x474>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00e      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a59      	ldr	r2, [pc, #356]	; (80032b4 <HAL_DMA_Abort+0x478>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d009      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a58      	ldr	r2, [pc, #352]	; (80032b8 <HAL_DMA_Abort+0x47c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d004      	beq.n	8003166 <HAL_DMA_Abort+0x32a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a56      	ldr	r2, [pc, #344]	; (80032bc <HAL_DMA_Abort+0x480>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d108      	bne.n	8003178 <HAL_DMA_Abort+0x33c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e007      	b.n	8003188 <HAL_DMA_Abort+0x34c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003188:	e013      	b.n	80031b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800318a:	f7fe ff83 	bl	8002094 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b05      	cmp	r3, #5
 8003196:	d90c      	bls.n	80031b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2203      	movs	r2, #3
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e12d      	b.n	800340e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e5      	bne.n	800318a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a2f      	ldr	r2, [pc, #188]	; (8003280 <HAL_DMA_Abort+0x444>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d04a      	beq.n	800325e <HAL_DMA_Abort+0x422>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a2d      	ldr	r2, [pc, #180]	; (8003284 <HAL_DMA_Abort+0x448>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d045      	beq.n	800325e <HAL_DMA_Abort+0x422>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2c      	ldr	r2, [pc, #176]	; (8003288 <HAL_DMA_Abort+0x44c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d040      	beq.n	800325e <HAL_DMA_Abort+0x422>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2a      	ldr	r2, [pc, #168]	; (800328c <HAL_DMA_Abort+0x450>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d03b      	beq.n	800325e <HAL_DMA_Abort+0x422>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a29      	ldr	r2, [pc, #164]	; (8003290 <HAL_DMA_Abort+0x454>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d036      	beq.n	800325e <HAL_DMA_Abort+0x422>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a27      	ldr	r2, [pc, #156]	; (8003294 <HAL_DMA_Abort+0x458>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d031      	beq.n	800325e <HAL_DMA_Abort+0x422>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a26      	ldr	r2, [pc, #152]	; (8003298 <HAL_DMA_Abort+0x45c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d02c      	beq.n	800325e <HAL_DMA_Abort+0x422>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a24      	ldr	r2, [pc, #144]	; (800329c <HAL_DMA_Abort+0x460>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d027      	beq.n	800325e <HAL_DMA_Abort+0x422>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a23      	ldr	r2, [pc, #140]	; (80032a0 <HAL_DMA_Abort+0x464>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d022      	beq.n	800325e <HAL_DMA_Abort+0x422>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <HAL_DMA_Abort+0x468>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01d      	beq.n	800325e <HAL_DMA_Abort+0x422>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a20      	ldr	r2, [pc, #128]	; (80032a8 <HAL_DMA_Abort+0x46c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d018      	beq.n	800325e <HAL_DMA_Abort+0x422>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <HAL_DMA_Abort+0x470>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_DMA_Abort+0x422>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <HAL_DMA_Abort+0x474>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00e      	beq.n	800325e <HAL_DMA_Abort+0x422>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <HAL_DMA_Abort+0x478>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d009      	beq.n	800325e <HAL_DMA_Abort+0x422>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1a      	ldr	r2, [pc, #104]	; (80032b8 <HAL_DMA_Abort+0x47c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d004      	beq.n	800325e <HAL_DMA_Abort+0x422>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a18      	ldr	r2, [pc, #96]	; (80032bc <HAL_DMA_Abort+0x480>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_DMA_Abort+0x426>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_DMA_Abort+0x428>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d02b      	beq.n	80032c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	223f      	movs	r2, #63	; 0x3f
 8003278:	409a      	lsls	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	609a      	str	r2, [r3, #8]
 800327e:	e02a      	b.n	80032d6 <HAL_DMA_Abort+0x49a>
 8003280:	40020010 	.word	0x40020010
 8003284:	40020028 	.word	0x40020028
 8003288:	40020040 	.word	0x40020040
 800328c:	40020058 	.word	0x40020058
 8003290:	40020070 	.word	0x40020070
 8003294:	40020088 	.word	0x40020088
 8003298:	400200a0 	.word	0x400200a0
 800329c:	400200b8 	.word	0x400200b8
 80032a0:	40020410 	.word	0x40020410
 80032a4:	40020428 	.word	0x40020428
 80032a8:	40020440 	.word	0x40020440
 80032ac:	40020458 	.word	0x40020458
 80032b0:	40020470 	.word	0x40020470
 80032b4:	40020488 	.word	0x40020488
 80032b8:	400204a0 	.word	0x400204a0
 80032bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2201      	movs	r2, #1
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a4f      	ldr	r2, [pc, #316]	; (8003418 <HAL_DMA_Abort+0x5dc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d072      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a4d      	ldr	r2, [pc, #308]	; (800341c <HAL_DMA_Abort+0x5e0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d06d      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a4c      	ldr	r2, [pc, #304]	; (8003420 <HAL_DMA_Abort+0x5e4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d068      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <HAL_DMA_Abort+0x5e8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d063      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a49      	ldr	r2, [pc, #292]	; (8003428 <HAL_DMA_Abort+0x5ec>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d05e      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a47      	ldr	r2, [pc, #284]	; (800342c <HAL_DMA_Abort+0x5f0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d059      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a46      	ldr	r2, [pc, #280]	; (8003430 <HAL_DMA_Abort+0x5f4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d054      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a44      	ldr	r2, [pc, #272]	; (8003434 <HAL_DMA_Abort+0x5f8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d04f      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a43      	ldr	r2, [pc, #268]	; (8003438 <HAL_DMA_Abort+0x5fc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d04a      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a41      	ldr	r2, [pc, #260]	; (800343c <HAL_DMA_Abort+0x600>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d045      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a40      	ldr	r2, [pc, #256]	; (8003440 <HAL_DMA_Abort+0x604>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d040      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a3e      	ldr	r2, [pc, #248]	; (8003444 <HAL_DMA_Abort+0x608>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d03b      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a3d      	ldr	r2, [pc, #244]	; (8003448 <HAL_DMA_Abort+0x60c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d036      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a3b      	ldr	r2, [pc, #236]	; (800344c <HAL_DMA_Abort+0x610>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d031      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a3a      	ldr	r2, [pc, #232]	; (8003450 <HAL_DMA_Abort+0x614>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d02c      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a38      	ldr	r2, [pc, #224]	; (8003454 <HAL_DMA_Abort+0x618>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d027      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a37      	ldr	r2, [pc, #220]	; (8003458 <HAL_DMA_Abort+0x61c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d022      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a35      	ldr	r2, [pc, #212]	; (800345c <HAL_DMA_Abort+0x620>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01d      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a34      	ldr	r2, [pc, #208]	; (8003460 <HAL_DMA_Abort+0x624>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d018      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a32      	ldr	r2, [pc, #200]	; (8003464 <HAL_DMA_Abort+0x628>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a31      	ldr	r2, [pc, #196]	; (8003468 <HAL_DMA_Abort+0x62c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a2f      	ldr	r2, [pc, #188]	; (800346c <HAL_DMA_Abort+0x630>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d009      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2e      	ldr	r2, [pc, #184]	; (8003470 <HAL_DMA_Abort+0x634>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_DMA_Abort+0x58a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <HAL_DMA_Abort+0x638>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_DMA_Abort+0x58e>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_DMA_Abort+0x590>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80033d8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033f0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033fa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40020010 	.word	0x40020010
 800341c:	40020028 	.word	0x40020028
 8003420:	40020040 	.word	0x40020040
 8003424:	40020058 	.word	0x40020058
 8003428:	40020070 	.word	0x40020070
 800342c:	40020088 	.word	0x40020088
 8003430:	400200a0 	.word	0x400200a0
 8003434:	400200b8 	.word	0x400200b8
 8003438:	40020410 	.word	0x40020410
 800343c:	40020428 	.word	0x40020428
 8003440:	40020440 	.word	0x40020440
 8003444:	40020458 	.word	0x40020458
 8003448:	40020470 	.word	0x40020470
 800344c:	40020488 	.word	0x40020488
 8003450:	400204a0 	.word	0x400204a0
 8003454:	400204b8 	.word	0x400204b8
 8003458:	58025408 	.word	0x58025408
 800345c:	5802541c 	.word	0x5802541c
 8003460:	58025430 	.word	0x58025430
 8003464:	58025444 	.word	0x58025444
 8003468:	58025458 	.word	0x58025458
 800346c:	5802546c 	.word	0x5802546c
 8003470:	58025480 	.word	0x58025480
 8003474:	58025494 	.word	0x58025494

08003478 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e237      	b.n	80038fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d004      	beq.n	80034a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e22c      	b.n	80038fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a5c      	ldr	r2, [pc, #368]	; (8003618 <HAL_DMA_Abort_IT+0x1a0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d04a      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a5b      	ldr	r2, [pc, #364]	; (800361c <HAL_DMA_Abort_IT+0x1a4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d045      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a59      	ldr	r2, [pc, #356]	; (8003620 <HAL_DMA_Abort_IT+0x1a8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d040      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a58      	ldr	r2, [pc, #352]	; (8003624 <HAL_DMA_Abort_IT+0x1ac>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d03b      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a56      	ldr	r2, [pc, #344]	; (8003628 <HAL_DMA_Abort_IT+0x1b0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d036      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a55      	ldr	r2, [pc, #340]	; (800362c <HAL_DMA_Abort_IT+0x1b4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d031      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a53      	ldr	r2, [pc, #332]	; (8003630 <HAL_DMA_Abort_IT+0x1b8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d02c      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a52      	ldr	r2, [pc, #328]	; (8003634 <HAL_DMA_Abort_IT+0x1bc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d027      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a50      	ldr	r2, [pc, #320]	; (8003638 <HAL_DMA_Abort_IT+0x1c0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d022      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a4f      	ldr	r2, [pc, #316]	; (800363c <HAL_DMA_Abort_IT+0x1c4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d01d      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a4d      	ldr	r2, [pc, #308]	; (8003640 <HAL_DMA_Abort_IT+0x1c8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d018      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a4c      	ldr	r2, [pc, #304]	; (8003644 <HAL_DMA_Abort_IT+0x1cc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a4a      	ldr	r2, [pc, #296]	; (8003648 <HAL_DMA_Abort_IT+0x1d0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00e      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a49      	ldr	r2, [pc, #292]	; (800364c <HAL_DMA_Abort_IT+0x1d4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d009      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a47      	ldr	r2, [pc, #284]	; (8003650 <HAL_DMA_Abort_IT+0x1d8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_DMA_Abort_IT+0xc8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a46      	ldr	r2, [pc, #280]	; (8003654 <HAL_DMA_Abort_IT+0x1dc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d101      	bne.n	8003544 <HAL_DMA_Abort_IT+0xcc>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <HAL_DMA_Abort_IT+0xce>
 8003544:	2300      	movs	r3, #0
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8086 	beq.w	8003658 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2204      	movs	r2, #4
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a2f      	ldr	r2, [pc, #188]	; (8003618 <HAL_DMA_Abort_IT+0x1a0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d04a      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a2e      	ldr	r2, [pc, #184]	; (800361c <HAL_DMA_Abort_IT+0x1a4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d045      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2c      	ldr	r2, [pc, #176]	; (8003620 <HAL_DMA_Abort_IT+0x1a8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d040      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2b      	ldr	r2, [pc, #172]	; (8003624 <HAL_DMA_Abort_IT+0x1ac>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d03b      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a29      	ldr	r2, [pc, #164]	; (8003628 <HAL_DMA_Abort_IT+0x1b0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d036      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a28      	ldr	r2, [pc, #160]	; (800362c <HAL_DMA_Abort_IT+0x1b4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d031      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a26      	ldr	r2, [pc, #152]	; (8003630 <HAL_DMA_Abort_IT+0x1b8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d02c      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a25      	ldr	r2, [pc, #148]	; (8003634 <HAL_DMA_Abort_IT+0x1bc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d027      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a23      	ldr	r2, [pc, #140]	; (8003638 <HAL_DMA_Abort_IT+0x1c0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d022      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a22      	ldr	r2, [pc, #136]	; (800363c <HAL_DMA_Abort_IT+0x1c4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d01d      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a20      	ldr	r2, [pc, #128]	; (8003640 <HAL_DMA_Abort_IT+0x1c8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d018      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1f      	ldr	r2, [pc, #124]	; (8003644 <HAL_DMA_Abort_IT+0x1cc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <HAL_DMA_Abort_IT+0x1d0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00e      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1c      	ldr	r2, [pc, #112]	; (800364c <HAL_DMA_Abort_IT+0x1d4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d009      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1a      	ldr	r2, [pc, #104]	; (8003650 <HAL_DMA_Abort_IT+0x1d8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x17c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a19      	ldr	r2, [pc, #100]	; (8003654 <HAL_DMA_Abort_IT+0x1dc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d108      	bne.n	8003606 <HAL_DMA_Abort_IT+0x18e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e178      	b.n	80038f8 <HAL_DMA_Abort_IT+0x480>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e16f      	b.n	80038f8 <HAL_DMA_Abort_IT+0x480>
 8003618:	40020010 	.word	0x40020010
 800361c:	40020028 	.word	0x40020028
 8003620:	40020040 	.word	0x40020040
 8003624:	40020058 	.word	0x40020058
 8003628:	40020070 	.word	0x40020070
 800362c:	40020088 	.word	0x40020088
 8003630:	400200a0 	.word	0x400200a0
 8003634:	400200b8 	.word	0x400200b8
 8003638:	40020410 	.word	0x40020410
 800363c:	40020428 	.word	0x40020428
 8003640:	40020440 	.word	0x40020440
 8003644:	40020458 	.word	0x40020458
 8003648:	40020470 	.word	0x40020470
 800364c:	40020488 	.word	0x40020488
 8003650:	400204a0 	.word	0x400204a0
 8003654:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 020e 	bic.w	r2, r2, #14
 8003666:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6c      	ldr	r2, [pc, #432]	; (8003820 <HAL_DMA_Abort_IT+0x3a8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d04a      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6b      	ldr	r2, [pc, #428]	; (8003824 <HAL_DMA_Abort_IT+0x3ac>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d045      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a69      	ldr	r2, [pc, #420]	; (8003828 <HAL_DMA_Abort_IT+0x3b0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d040      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a68      	ldr	r2, [pc, #416]	; (800382c <HAL_DMA_Abort_IT+0x3b4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d03b      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a66      	ldr	r2, [pc, #408]	; (8003830 <HAL_DMA_Abort_IT+0x3b8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d036      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a65      	ldr	r2, [pc, #404]	; (8003834 <HAL_DMA_Abort_IT+0x3bc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d031      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a63      	ldr	r2, [pc, #396]	; (8003838 <HAL_DMA_Abort_IT+0x3c0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d02c      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a62      	ldr	r2, [pc, #392]	; (800383c <HAL_DMA_Abort_IT+0x3c4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d027      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a60      	ldr	r2, [pc, #384]	; (8003840 <HAL_DMA_Abort_IT+0x3c8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d022      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a5f      	ldr	r2, [pc, #380]	; (8003844 <HAL_DMA_Abort_IT+0x3cc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d01d      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a5d      	ldr	r2, [pc, #372]	; (8003848 <HAL_DMA_Abort_IT+0x3d0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d018      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a5c      	ldr	r2, [pc, #368]	; (800384c <HAL_DMA_Abort_IT+0x3d4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d013      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a5a      	ldr	r2, [pc, #360]	; (8003850 <HAL_DMA_Abort_IT+0x3d8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00e      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a59      	ldr	r2, [pc, #356]	; (8003854 <HAL_DMA_Abort_IT+0x3dc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d009      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a57      	ldr	r2, [pc, #348]	; (8003858 <HAL_DMA_Abort_IT+0x3e0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_DMA_Abort_IT+0x290>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a56      	ldr	r2, [pc, #344]	; (800385c <HAL_DMA_Abort_IT+0x3e4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d108      	bne.n	800371a <HAL_DMA_Abort_IT+0x2a2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e007      	b.n	800372a <HAL_DMA_Abort_IT+0x2b2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <HAL_DMA_Abort_IT+0x3a8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d072      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a3a      	ldr	r2, [pc, #232]	; (8003824 <HAL_DMA_Abort_IT+0x3ac>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d06d      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a39      	ldr	r2, [pc, #228]	; (8003828 <HAL_DMA_Abort_IT+0x3b0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d068      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a37      	ldr	r2, [pc, #220]	; (800382c <HAL_DMA_Abort_IT+0x3b4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d063      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a36      	ldr	r2, [pc, #216]	; (8003830 <HAL_DMA_Abort_IT+0x3b8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d05e      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a34      	ldr	r2, [pc, #208]	; (8003834 <HAL_DMA_Abort_IT+0x3bc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d059      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a33      	ldr	r2, [pc, #204]	; (8003838 <HAL_DMA_Abort_IT+0x3c0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d054      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a31      	ldr	r2, [pc, #196]	; (800383c <HAL_DMA_Abort_IT+0x3c4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d04f      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a30      	ldr	r2, [pc, #192]	; (8003840 <HAL_DMA_Abort_IT+0x3c8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d04a      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2e      	ldr	r2, [pc, #184]	; (8003844 <HAL_DMA_Abort_IT+0x3cc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d045      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2d      	ldr	r2, [pc, #180]	; (8003848 <HAL_DMA_Abort_IT+0x3d0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d040      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2b      	ldr	r2, [pc, #172]	; (800384c <HAL_DMA_Abort_IT+0x3d4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d03b      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2a      	ldr	r2, [pc, #168]	; (8003850 <HAL_DMA_Abort_IT+0x3d8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d036      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a28      	ldr	r2, [pc, #160]	; (8003854 <HAL_DMA_Abort_IT+0x3dc>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d031      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a27      	ldr	r2, [pc, #156]	; (8003858 <HAL_DMA_Abort_IT+0x3e0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d02c      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a25      	ldr	r2, [pc, #148]	; (800385c <HAL_DMA_Abort_IT+0x3e4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d027      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a24      	ldr	r2, [pc, #144]	; (8003860 <HAL_DMA_Abort_IT+0x3e8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d022      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a22      	ldr	r2, [pc, #136]	; (8003864 <HAL_DMA_Abort_IT+0x3ec>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01d      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a21      	ldr	r2, [pc, #132]	; (8003868 <HAL_DMA_Abort_IT+0x3f0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d018      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1f      	ldr	r2, [pc, #124]	; (800386c <HAL_DMA_Abort_IT+0x3f4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <HAL_DMA_Abort_IT+0x3f8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00e      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <HAL_DMA_Abort_IT+0x3fc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d009      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <HAL_DMA_Abort_IT+0x400>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d004      	beq.n	800381a <HAL_DMA_Abort_IT+0x3a2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a19      	ldr	r2, [pc, #100]	; (800387c <HAL_DMA_Abort_IT+0x404>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d132      	bne.n	8003880 <HAL_DMA_Abort_IT+0x408>
 800381a:	2301      	movs	r3, #1
 800381c:	e031      	b.n	8003882 <HAL_DMA_Abort_IT+0x40a>
 800381e:	bf00      	nop
 8003820:	40020010 	.word	0x40020010
 8003824:	40020028 	.word	0x40020028
 8003828:	40020040 	.word	0x40020040
 800382c:	40020058 	.word	0x40020058
 8003830:	40020070 	.word	0x40020070
 8003834:	40020088 	.word	0x40020088
 8003838:	400200a0 	.word	0x400200a0
 800383c:	400200b8 	.word	0x400200b8
 8003840:	40020410 	.word	0x40020410
 8003844:	40020428 	.word	0x40020428
 8003848:	40020440 	.word	0x40020440
 800384c:	40020458 	.word	0x40020458
 8003850:	40020470 	.word	0x40020470
 8003854:	40020488 	.word	0x40020488
 8003858:	400204a0 	.word	0x400204a0
 800385c:	400204b8 	.word	0x400204b8
 8003860:	58025408 	.word	0x58025408
 8003864:	5802541c 	.word	0x5802541c
 8003868:	58025430 	.word	0x58025430
 800386c:	58025444 	.word	0x58025444
 8003870:	58025458 	.word	0x58025458
 8003874:	5802546c 	.word	0x5802546c
 8003878:	58025480 	.word	0x58025480
 800387c:	58025494 	.word	0x58025494
 8003880:	2300      	movs	r3, #0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d028      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003894:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2201      	movs	r2, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00c      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop

08003904 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003910:	4b67      	ldr	r3, [pc, #412]	; (8003ab0 <HAL_DMA_IRQHandler+0x1ac>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a67      	ldr	r2, [pc, #412]	; (8003ab4 <HAL_DMA_IRQHandler+0x1b0>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	0a9b      	lsrs	r3, r3, #10
 800391c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a5f      	ldr	r2, [pc, #380]	; (8003ab8 <HAL_DMA_IRQHandler+0x1b4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d04a      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a5d      	ldr	r2, [pc, #372]	; (8003abc <HAL_DMA_IRQHandler+0x1b8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d045      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a5c      	ldr	r2, [pc, #368]	; (8003ac0 <HAL_DMA_IRQHandler+0x1bc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d040      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a5a      	ldr	r2, [pc, #360]	; (8003ac4 <HAL_DMA_IRQHandler+0x1c0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d03b      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a59      	ldr	r2, [pc, #356]	; (8003ac8 <HAL_DMA_IRQHandler+0x1c4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d036      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a57      	ldr	r2, [pc, #348]	; (8003acc <HAL_DMA_IRQHandler+0x1c8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d031      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a56      	ldr	r2, [pc, #344]	; (8003ad0 <HAL_DMA_IRQHandler+0x1cc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d02c      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a54      	ldr	r2, [pc, #336]	; (8003ad4 <HAL_DMA_IRQHandler+0x1d0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d027      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a53      	ldr	r2, [pc, #332]	; (8003ad8 <HAL_DMA_IRQHandler+0x1d4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d022      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a51      	ldr	r2, [pc, #324]	; (8003adc <HAL_DMA_IRQHandler+0x1d8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01d      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a50      	ldr	r2, [pc, #320]	; (8003ae0 <HAL_DMA_IRQHandler+0x1dc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d018      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a4e      	ldr	r2, [pc, #312]	; (8003ae4 <HAL_DMA_IRQHandler+0x1e0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a4d      	ldr	r2, [pc, #308]	; (8003ae8 <HAL_DMA_IRQHandler+0x1e4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00e      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a4b      	ldr	r2, [pc, #300]	; (8003aec <HAL_DMA_IRQHandler+0x1e8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d009      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a4a      	ldr	r2, [pc, #296]	; (8003af0 <HAL_DMA_IRQHandler+0x1ec>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d004      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xd2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a48      	ldr	r2, [pc, #288]	; (8003af4 <HAL_DMA_IRQHandler+0x1f0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_DMA_IRQHandler+0xd6>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_DMA_IRQHandler+0xd8>
 80039da:	2300      	movs	r3, #0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 842b 	beq.w	8004238 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	2208      	movs	r2, #8
 80039ec:	409a      	lsls	r2, r3
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80a2 	beq.w	8003b3c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2e      	ldr	r2, [pc, #184]	; (8003ab8 <HAL_DMA_IRQHandler+0x1b4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d04a      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2d      	ldr	r2, [pc, #180]	; (8003abc <HAL_DMA_IRQHandler+0x1b8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d045      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a2b      	ldr	r2, [pc, #172]	; (8003ac0 <HAL_DMA_IRQHandler+0x1bc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d040      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <HAL_DMA_IRQHandler+0x1c0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d03b      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a28      	ldr	r2, [pc, #160]	; (8003ac8 <HAL_DMA_IRQHandler+0x1c4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d036      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a27      	ldr	r2, [pc, #156]	; (8003acc <HAL_DMA_IRQHandler+0x1c8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d031      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a25      	ldr	r2, [pc, #148]	; (8003ad0 <HAL_DMA_IRQHandler+0x1cc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d02c      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a24      	ldr	r2, [pc, #144]	; (8003ad4 <HAL_DMA_IRQHandler+0x1d0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d027      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a22      	ldr	r2, [pc, #136]	; (8003ad8 <HAL_DMA_IRQHandler+0x1d4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d022      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a21      	ldr	r2, [pc, #132]	; (8003adc <HAL_DMA_IRQHandler+0x1d8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d01d      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1f      	ldr	r2, [pc, #124]	; (8003ae0 <HAL_DMA_IRQHandler+0x1dc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d018      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ae4 <HAL_DMA_IRQHandler+0x1e0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1c      	ldr	r2, [pc, #112]	; (8003ae8 <HAL_DMA_IRQHandler+0x1e4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00e      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <HAL_DMA_IRQHandler+0x1e8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d009      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a19      	ldr	r2, [pc, #100]	; (8003af0 <HAL_DMA_IRQHandler+0x1ec>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x194>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <HAL_DMA_IRQHandler+0x1f0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d12f      	bne.n	8003af8 <HAL_DMA_IRQHandler+0x1f4>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bf14      	ite	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	2300      	moveq	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	e02e      	b.n	8003b0c <HAL_DMA_IRQHandler+0x208>
 8003aae:	bf00      	nop
 8003ab0:	24000000 	.word	0x24000000
 8003ab4:	1b4e81b5 	.word	0x1b4e81b5
 8003ab8:	40020010 	.word	0x40020010
 8003abc:	40020028 	.word	0x40020028
 8003ac0:	40020040 	.word	0x40020040
 8003ac4:	40020058 	.word	0x40020058
 8003ac8:	40020070 	.word	0x40020070
 8003acc:	40020088 	.word	0x40020088
 8003ad0:	400200a0 	.word	0x400200a0
 8003ad4:	400200b8 	.word	0x400200b8
 8003ad8:	40020410 	.word	0x40020410
 8003adc:	40020428 	.word	0x40020428
 8003ae0:	40020440 	.word	0x40020440
 8003ae4:	40020458 	.word	0x40020458
 8003ae8:	40020470 	.word	0x40020470
 8003aec:	40020488 	.word	0x40020488
 8003af0:	400204a0 	.word	0x400204a0
 8003af4:	400204b8 	.word	0x400204b8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bf14      	ite	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	2300      	moveq	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d015      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0204 	bic.w	r2, r2, #4
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	2208      	movs	r2, #8
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	f043 0201 	orr.w	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d06e      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a69      	ldr	r2, [pc, #420]	; (8003cfc <HAL_DMA_IRQHandler+0x3f8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d04a      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a67      	ldr	r2, [pc, #412]	; (8003d00 <HAL_DMA_IRQHandler+0x3fc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d045      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a66      	ldr	r2, [pc, #408]	; (8003d04 <HAL_DMA_IRQHandler+0x400>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d040      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a64      	ldr	r2, [pc, #400]	; (8003d08 <HAL_DMA_IRQHandler+0x404>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d03b      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a63      	ldr	r2, [pc, #396]	; (8003d0c <HAL_DMA_IRQHandler+0x408>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d036      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a61      	ldr	r2, [pc, #388]	; (8003d10 <HAL_DMA_IRQHandler+0x40c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d031      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a60      	ldr	r2, [pc, #384]	; (8003d14 <HAL_DMA_IRQHandler+0x410>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d02c      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a5e      	ldr	r2, [pc, #376]	; (8003d18 <HAL_DMA_IRQHandler+0x414>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d027      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a5d      	ldr	r2, [pc, #372]	; (8003d1c <HAL_DMA_IRQHandler+0x418>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a5b      	ldr	r2, [pc, #364]	; (8003d20 <HAL_DMA_IRQHandler+0x41c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a5a      	ldr	r2, [pc, #360]	; (8003d24 <HAL_DMA_IRQHandler+0x420>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a58      	ldr	r2, [pc, #352]	; (8003d28 <HAL_DMA_IRQHandler+0x424>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a57      	ldr	r2, [pc, #348]	; (8003d2c <HAL_DMA_IRQHandler+0x428>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a55      	ldr	r2, [pc, #340]	; (8003d30 <HAL_DMA_IRQHandler+0x42c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a54      	ldr	r2, [pc, #336]	; (8003d34 <HAL_DMA_IRQHandler+0x430>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ee>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a52      	ldr	r2, [pc, #328]	; (8003d38 <HAL_DMA_IRQHandler+0x434>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10a      	bne.n	8003c08 <HAL_DMA_IRQHandler+0x304>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e003      	b.n	8003c10 <HAL_DMA_IRQHandler+0x30c>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00d      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	f043 0202 	orr.w	r2, r3, #2
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	2204      	movs	r2, #4
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 808f 	beq.w	8003d64 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a2c      	ldr	r2, [pc, #176]	; (8003cfc <HAL_DMA_IRQHandler+0x3f8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d04a      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a2a      	ldr	r2, [pc, #168]	; (8003d00 <HAL_DMA_IRQHandler+0x3fc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d045      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a29      	ldr	r2, [pc, #164]	; (8003d04 <HAL_DMA_IRQHandler+0x400>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d040      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a27      	ldr	r2, [pc, #156]	; (8003d08 <HAL_DMA_IRQHandler+0x404>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d03b      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a26      	ldr	r2, [pc, #152]	; (8003d0c <HAL_DMA_IRQHandler+0x408>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d036      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a24      	ldr	r2, [pc, #144]	; (8003d10 <HAL_DMA_IRQHandler+0x40c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d031      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a23      	ldr	r2, [pc, #140]	; (8003d14 <HAL_DMA_IRQHandler+0x410>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d02c      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <HAL_DMA_IRQHandler+0x414>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d027      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a20      	ldr	r2, [pc, #128]	; (8003d1c <HAL_DMA_IRQHandler+0x418>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d022      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <HAL_DMA_IRQHandler+0x41c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01d      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <HAL_DMA_IRQHandler+0x420>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d018      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <HAL_DMA_IRQHandler+0x424>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1a      	ldr	r2, [pc, #104]	; (8003d2c <HAL_DMA_IRQHandler+0x428>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <HAL_DMA_IRQHandler+0x42c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a17      	ldr	r2, [pc, #92]	; (8003d34 <HAL_DMA_IRQHandler+0x430>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x3e2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a15      	ldr	r2, [pc, #84]	; (8003d38 <HAL_DMA_IRQHandler+0x434>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d12a      	bne.n	8003d3c <HAL_DMA_IRQHandler+0x438>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e023      	b.n	8003d44 <HAL_DMA_IRQHandler+0x440>
 8003cfc:	40020010 	.word	0x40020010
 8003d00:	40020028 	.word	0x40020028
 8003d04:	40020040 	.word	0x40020040
 8003d08:	40020058 	.word	0x40020058
 8003d0c:	40020070 	.word	0x40020070
 8003d10:	40020088 	.word	0x40020088
 8003d14:	400200a0 	.word	0x400200a0
 8003d18:	400200b8 	.word	0x400200b8
 8003d1c:	40020410 	.word	0x40020410
 8003d20:	40020428 	.word	0x40020428
 8003d24:	40020440 	.word	0x40020440
 8003d28:	40020458 	.word	0x40020458
 8003d2c:	40020470 	.word	0x40020470
 8003d30:	40020488 	.word	0x40020488
 8003d34:	400204a0 	.word	0x400204a0
 8003d38:	400204b8 	.word	0x400204b8
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	2204      	movs	r2, #4
 8003d52:	409a      	lsls	r2, r3
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f043 0204 	orr.w	r2, r3, #4
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80a6 	beq.w	8003ec6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a85      	ldr	r2, [pc, #532]	; (8003f94 <HAL_DMA_IRQHandler+0x690>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d04a      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a83      	ldr	r2, [pc, #524]	; (8003f98 <HAL_DMA_IRQHandler+0x694>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d045      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a82      	ldr	r2, [pc, #520]	; (8003f9c <HAL_DMA_IRQHandler+0x698>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d040      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a80      	ldr	r2, [pc, #512]	; (8003fa0 <HAL_DMA_IRQHandler+0x69c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d03b      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7f      	ldr	r2, [pc, #508]	; (8003fa4 <HAL_DMA_IRQHandler+0x6a0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d036      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a7d      	ldr	r2, [pc, #500]	; (8003fa8 <HAL_DMA_IRQHandler+0x6a4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d031      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a7c      	ldr	r2, [pc, #496]	; (8003fac <HAL_DMA_IRQHandler+0x6a8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d02c      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a7a      	ldr	r2, [pc, #488]	; (8003fb0 <HAL_DMA_IRQHandler+0x6ac>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d027      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a79      	ldr	r2, [pc, #484]	; (8003fb4 <HAL_DMA_IRQHandler+0x6b0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a77      	ldr	r2, [pc, #476]	; (8003fb8 <HAL_DMA_IRQHandler+0x6b4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a76      	ldr	r2, [pc, #472]	; (8003fbc <HAL_DMA_IRQHandler+0x6b8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a74      	ldr	r2, [pc, #464]	; (8003fc0 <HAL_DMA_IRQHandler+0x6bc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a73      	ldr	r2, [pc, #460]	; (8003fc4 <HAL_DMA_IRQHandler+0x6c0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a71      	ldr	r2, [pc, #452]	; (8003fc8 <HAL_DMA_IRQHandler+0x6c4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a70      	ldr	r2, [pc, #448]	; (8003fcc <HAL_DMA_IRQHandler+0x6c8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x516>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a6e      	ldr	r2, [pc, #440]	; (8003fd0 <HAL_DMA_IRQHandler+0x6cc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d10a      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x52c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e009      	b.n	8003e44 <HAL_DMA_IRQHandler+0x540>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bf14      	ite	ne
 8003e3e:	2301      	movne	r3, #1
 8003e40:	2300      	moveq	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d03e      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2210      	movs	r2, #16
 8003e52:	409a      	lsls	r2, r3
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d018      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d108      	bne.n	8003e86 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d024      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
 8003e84:	e01f      	b.n	8003ec6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01b      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	4798      	blx	r3
 8003e96:	e016      	b.n	8003ec6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d107      	bne.n	8003eb6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0208 	bic.w	r2, r2, #8
 8003eb4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	2220      	movs	r2, #32
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8110 	beq.w	80040fc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a2c      	ldr	r2, [pc, #176]	; (8003f94 <HAL_DMA_IRQHandler+0x690>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d04a      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a2b      	ldr	r2, [pc, #172]	; (8003f98 <HAL_DMA_IRQHandler+0x694>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d045      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <HAL_DMA_IRQHandler+0x698>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d040      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a28      	ldr	r2, [pc, #160]	; (8003fa0 <HAL_DMA_IRQHandler+0x69c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d03b      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a26      	ldr	r2, [pc, #152]	; (8003fa4 <HAL_DMA_IRQHandler+0x6a0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d036      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a25      	ldr	r2, [pc, #148]	; (8003fa8 <HAL_DMA_IRQHandler+0x6a4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d031      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	; (8003fac <HAL_DMA_IRQHandler+0x6a8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d02c      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <HAL_DMA_IRQHandler+0x6ac>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d027      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a20      	ldr	r2, [pc, #128]	; (8003fb4 <HAL_DMA_IRQHandler+0x6b0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d022      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <HAL_DMA_IRQHandler+0x6b4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d01d      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <HAL_DMA_IRQHandler+0x6b8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d018      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <HAL_DMA_IRQHandler+0x6bc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d013      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <HAL_DMA_IRQHandler+0x6c0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00e      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a19      	ldr	r2, [pc, #100]	; (8003fc8 <HAL_DMA_IRQHandler+0x6c4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d009      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <HAL_DMA_IRQHandler+0x6c8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d004      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x678>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <HAL_DMA_IRQHandler+0x6cc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d12b      	bne.n	8003fd4 <HAL_DMA_IRQHandler+0x6d0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf14      	ite	ne
 8003f8a:	2301      	movne	r3, #1
 8003f8c:	2300      	moveq	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	e02a      	b.n	8003fe8 <HAL_DMA_IRQHandler+0x6e4>
 8003f92:	bf00      	nop
 8003f94:	40020010 	.word	0x40020010
 8003f98:	40020028 	.word	0x40020028
 8003f9c:	40020040 	.word	0x40020040
 8003fa0:	40020058 	.word	0x40020058
 8003fa4:	40020070 	.word	0x40020070
 8003fa8:	40020088 	.word	0x40020088
 8003fac:	400200a0 	.word	0x400200a0
 8003fb0:	400200b8 	.word	0x400200b8
 8003fb4:	40020410 	.word	0x40020410
 8003fb8:	40020428 	.word	0x40020428
 8003fbc:	40020440 	.word	0x40020440
 8003fc0:	40020458 	.word	0x40020458
 8003fc4:	40020470 	.word	0x40020470
 8003fc8:	40020488 	.word	0x40020488
 8003fcc:	400204a0 	.word	0x400204a0
 8003fd0:	400204b8 	.word	0x400204b8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bf14      	ite	ne
 8003fe2:	2301      	movne	r3, #1
 8003fe4:	2300      	moveq	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8087 	beq.w	80040fc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b04      	cmp	r3, #4
 8004008:	d139      	bne.n	800407e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0216 	bic.w	r2, r2, #22
 8004018:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004028:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <HAL_DMA_IRQHandler+0x736>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0208 	bic.w	r2, r2, #8
 8004048:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	223f      	movs	r2, #63	; 0x3f
 8004054:	409a      	lsls	r2, r3
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 834a 	beq.w	8004708 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
          }
          return;
 800407c:	e344      	b.n	8004708 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d018      	beq.n	80040be <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d108      	bne.n	80040ac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d02c      	beq.n	80040fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
 80040aa:	e027      	b.n	80040fc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d023      	beq.n	80040fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
 80040bc:	e01e      	b.n	80040fc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10f      	bne.n	80040ec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0210 	bic.w	r2, r2, #16
 80040da:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8306 	beq.w	8004712 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8088 	beq.w	8004224 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2204      	movs	r2, #4
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a7a      	ldr	r2, [pc, #488]	; (800430c <HAL_DMA_IRQHandler+0xa08>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d04a      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a79      	ldr	r2, [pc, #484]	; (8004310 <HAL_DMA_IRQHandler+0xa0c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d045      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a77      	ldr	r2, [pc, #476]	; (8004314 <HAL_DMA_IRQHandler+0xa10>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d040      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a76      	ldr	r2, [pc, #472]	; (8004318 <HAL_DMA_IRQHandler+0xa14>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d03b      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a74      	ldr	r2, [pc, #464]	; (800431c <HAL_DMA_IRQHandler+0xa18>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d036      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a73      	ldr	r2, [pc, #460]	; (8004320 <HAL_DMA_IRQHandler+0xa1c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d031      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a71      	ldr	r2, [pc, #452]	; (8004324 <HAL_DMA_IRQHandler+0xa20>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d02c      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a70      	ldr	r2, [pc, #448]	; (8004328 <HAL_DMA_IRQHandler+0xa24>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d027      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a6e      	ldr	r2, [pc, #440]	; (800432c <HAL_DMA_IRQHandler+0xa28>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d022      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a6d      	ldr	r2, [pc, #436]	; (8004330 <HAL_DMA_IRQHandler+0xa2c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d01d      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a6b      	ldr	r2, [pc, #428]	; (8004334 <HAL_DMA_IRQHandler+0xa30>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d018      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a6a      	ldr	r2, [pc, #424]	; (8004338 <HAL_DMA_IRQHandler+0xa34>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a68      	ldr	r2, [pc, #416]	; (800433c <HAL_DMA_IRQHandler+0xa38>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00e      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a67      	ldr	r2, [pc, #412]	; (8004340 <HAL_DMA_IRQHandler+0xa3c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a65      	ldr	r2, [pc, #404]	; (8004344 <HAL_DMA_IRQHandler+0xa40>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_DMA_IRQHandler+0x8b8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a64      	ldr	r2, [pc, #400]	; (8004348 <HAL_DMA_IRQHandler+0xa44>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d108      	bne.n	80041ce <HAL_DMA_IRQHandler+0x8ca>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e007      	b.n	80041de <HAL_DMA_IRQHandler+0x8da>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0201 	bic.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3301      	adds	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d307      	bcc.n	80041fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f2      	bne.n	80041de <HAL_DMA_IRQHandler+0x8da>
 80041f8:	e000      	b.n	80041fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80041fa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d004      	beq.n	8004214 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2203      	movs	r2, #3
 800420e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004212:	e003      	b.n	800421c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8272 	beq.w	8004712 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
 8004236:	e26c      	b.n	8004712 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a43      	ldr	r2, [pc, #268]	; (800434c <HAL_DMA_IRQHandler+0xa48>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d022      	beq.n	8004288 <HAL_DMA_IRQHandler+0x984>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a42      	ldr	r2, [pc, #264]	; (8004350 <HAL_DMA_IRQHandler+0xa4c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d01d      	beq.n	8004288 <HAL_DMA_IRQHandler+0x984>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a40      	ldr	r2, [pc, #256]	; (8004354 <HAL_DMA_IRQHandler+0xa50>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d018      	beq.n	8004288 <HAL_DMA_IRQHandler+0x984>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3f      	ldr	r2, [pc, #252]	; (8004358 <HAL_DMA_IRQHandler+0xa54>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d013      	beq.n	8004288 <HAL_DMA_IRQHandler+0x984>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a3d      	ldr	r2, [pc, #244]	; (800435c <HAL_DMA_IRQHandler+0xa58>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00e      	beq.n	8004288 <HAL_DMA_IRQHandler+0x984>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a3c      	ldr	r2, [pc, #240]	; (8004360 <HAL_DMA_IRQHandler+0xa5c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d009      	beq.n	8004288 <HAL_DMA_IRQHandler+0x984>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a3a      	ldr	r2, [pc, #232]	; (8004364 <HAL_DMA_IRQHandler+0xa60>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_DMA_IRQHandler+0x984>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a39      	ldr	r2, [pc, #228]	; (8004368 <HAL_DMA_IRQHandler+0xa64>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d101      	bne.n	800428c <HAL_DMA_IRQHandler+0x988>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <HAL_DMA_IRQHandler+0x98a>
 800428c:	2300      	movs	r3, #0
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 823f 	beq.w	8004712 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	2204      	movs	r2, #4
 80042a6:	409a      	lsls	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80cd 	beq.w	800444c <HAL_DMA_IRQHandler+0xb48>
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80c7 	beq.w	800444c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2204      	movs	r2, #4
 80042c8:	409a      	lsls	r2, r3
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d049      	beq.n	800436c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 8210 	beq.w	800470c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042f4:	e20a      	b.n	800470c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8206 	beq.w	800470c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004308:	e200      	b.n	800470c <HAL_DMA_IRQHandler+0xe08>
 800430a:	bf00      	nop
 800430c:	40020010 	.word	0x40020010
 8004310:	40020028 	.word	0x40020028
 8004314:	40020040 	.word	0x40020040
 8004318:	40020058 	.word	0x40020058
 800431c:	40020070 	.word	0x40020070
 8004320:	40020088 	.word	0x40020088
 8004324:	400200a0 	.word	0x400200a0
 8004328:	400200b8 	.word	0x400200b8
 800432c:	40020410 	.word	0x40020410
 8004330:	40020428 	.word	0x40020428
 8004334:	40020440 	.word	0x40020440
 8004338:	40020458 	.word	0x40020458
 800433c:	40020470 	.word	0x40020470
 8004340:	40020488 	.word	0x40020488
 8004344:	400204a0 	.word	0x400204a0
 8004348:	400204b8 	.word	0x400204b8
 800434c:	58025408 	.word	0x58025408
 8004350:	5802541c 	.word	0x5802541c
 8004354:	58025430 	.word	0x58025430
 8004358:	58025444 	.word	0x58025444
 800435c:	58025458 	.word	0x58025458
 8004360:	5802546c 	.word	0x5802546c
 8004364:	58025480 	.word	0x58025480
 8004368:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d160      	bne.n	8004438 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a7f      	ldr	r2, [pc, #508]	; (8004578 <HAL_DMA_IRQHandler+0xc74>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d04a      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a7d      	ldr	r2, [pc, #500]	; (800457c <HAL_DMA_IRQHandler+0xc78>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d045      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a7c      	ldr	r2, [pc, #496]	; (8004580 <HAL_DMA_IRQHandler+0xc7c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d040      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a7a      	ldr	r2, [pc, #488]	; (8004584 <HAL_DMA_IRQHandler+0xc80>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d03b      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a79      	ldr	r2, [pc, #484]	; (8004588 <HAL_DMA_IRQHandler+0xc84>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d036      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a77      	ldr	r2, [pc, #476]	; (800458c <HAL_DMA_IRQHandler+0xc88>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d031      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a76      	ldr	r2, [pc, #472]	; (8004590 <HAL_DMA_IRQHandler+0xc8c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d02c      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a74      	ldr	r2, [pc, #464]	; (8004594 <HAL_DMA_IRQHandler+0xc90>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d027      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a73      	ldr	r2, [pc, #460]	; (8004598 <HAL_DMA_IRQHandler+0xc94>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a71      	ldr	r2, [pc, #452]	; (800459c <HAL_DMA_IRQHandler+0xc98>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01d      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a70      	ldr	r2, [pc, #448]	; (80045a0 <HAL_DMA_IRQHandler+0xc9c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d018      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a6e      	ldr	r2, [pc, #440]	; (80045a4 <HAL_DMA_IRQHandler+0xca0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a6d      	ldr	r2, [pc, #436]	; (80045a8 <HAL_DMA_IRQHandler+0xca4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a6b      	ldr	r2, [pc, #428]	; (80045ac <HAL_DMA_IRQHandler+0xca8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d009      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a6a      	ldr	r2, [pc, #424]	; (80045b0 <HAL_DMA_IRQHandler+0xcac>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_DMA_IRQHandler+0xb12>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a68      	ldr	r2, [pc, #416]	; (80045b4 <HAL_DMA_IRQHandler+0xcb0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d108      	bne.n	8004428 <HAL_DMA_IRQHandler+0xb24>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0208 	bic.w	r2, r2, #8
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e007      	b.n	8004438 <HAL_DMA_IRQHandler+0xb34>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0204 	bic.w	r2, r2, #4
 8004436:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8165 	beq.w	800470c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800444a:	e15f      	b.n	800470c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2202      	movs	r2, #2
 8004456:	409a      	lsls	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80c5 	beq.w	80045ec <HAL_DMA_IRQHandler+0xce8>
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80bf 	beq.w	80045ec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2202      	movs	r2, #2
 8004478:	409a      	lsls	r2, r3
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d018      	beq.n	80044ba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 813a 	beq.w	8004710 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044a4:	e134      	b.n	8004710 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8130 	beq.w	8004710 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b8:	e12a      	b.n	8004710 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f040 8089 	bne.w	80045d8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2b      	ldr	r2, [pc, #172]	; (8004578 <HAL_DMA_IRQHandler+0xc74>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d04a      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a29      	ldr	r2, [pc, #164]	; (800457c <HAL_DMA_IRQHandler+0xc78>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d045      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a28      	ldr	r2, [pc, #160]	; (8004580 <HAL_DMA_IRQHandler+0xc7c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d040      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a26      	ldr	r2, [pc, #152]	; (8004584 <HAL_DMA_IRQHandler+0xc80>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d03b      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a25      	ldr	r2, [pc, #148]	; (8004588 <HAL_DMA_IRQHandler+0xc84>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d036      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a23      	ldr	r2, [pc, #140]	; (800458c <HAL_DMA_IRQHandler+0xc88>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d031      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a22      	ldr	r2, [pc, #136]	; (8004590 <HAL_DMA_IRQHandler+0xc8c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d02c      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a20      	ldr	r2, [pc, #128]	; (8004594 <HAL_DMA_IRQHandler+0xc90>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d027      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <HAL_DMA_IRQHandler+0xc94>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d022      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <HAL_DMA_IRQHandler+0xc98>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01d      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1c      	ldr	r2, [pc, #112]	; (80045a0 <HAL_DMA_IRQHandler+0xc9c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d018      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1a      	ldr	r2, [pc, #104]	; (80045a4 <HAL_DMA_IRQHandler+0xca0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a19      	ldr	r2, [pc, #100]	; (80045a8 <HAL_DMA_IRQHandler+0xca4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00e      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a17      	ldr	r2, [pc, #92]	; (80045ac <HAL_DMA_IRQHandler+0xca8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d009      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <HAL_DMA_IRQHandler+0xcac>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d004      	beq.n	8004566 <HAL_DMA_IRQHandler+0xc62>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <HAL_DMA_IRQHandler+0xcb0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d128      	bne.n	80045b8 <HAL_DMA_IRQHandler+0xcb4>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0214 	bic.w	r2, r2, #20
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e027      	b.n	80045c8 <HAL_DMA_IRQHandler+0xcc4>
 8004578:	40020010 	.word	0x40020010
 800457c:	40020028 	.word	0x40020028
 8004580:	40020040 	.word	0x40020040
 8004584:	40020058 	.word	0x40020058
 8004588:	40020070 	.word	0x40020070
 800458c:	40020088 	.word	0x40020088
 8004590:	400200a0 	.word	0x400200a0
 8004594:	400200b8 	.word	0x400200b8
 8004598:	40020410 	.word	0x40020410
 800459c:	40020428 	.word	0x40020428
 80045a0:	40020440 	.word	0x40020440
 80045a4:	40020458 	.word	0x40020458
 80045a8:	40020470 	.word	0x40020470
 80045ac:	40020488 	.word	0x40020488
 80045b0:	400204a0 	.word	0x400204a0
 80045b4:	400204b8 	.word	0x400204b8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 020a 	bic.w	r2, r2, #10
 80045c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8097 	beq.w	8004710 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ea:	e091      	b.n	8004710 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	2208      	movs	r2, #8
 80045f6:	409a      	lsls	r2, r3
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8088 	beq.w	8004712 <HAL_DMA_IRQHandler+0xe0e>
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8082 	beq.w	8004712 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a41      	ldr	r2, [pc, #260]	; (8004718 <HAL_DMA_IRQHandler+0xe14>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d04a      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a3f      	ldr	r2, [pc, #252]	; (800471c <HAL_DMA_IRQHandler+0xe18>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d045      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a3e      	ldr	r2, [pc, #248]	; (8004720 <HAL_DMA_IRQHandler+0xe1c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d040      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a3c      	ldr	r2, [pc, #240]	; (8004724 <HAL_DMA_IRQHandler+0xe20>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d03b      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a3b      	ldr	r2, [pc, #236]	; (8004728 <HAL_DMA_IRQHandler+0xe24>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d036      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a39      	ldr	r2, [pc, #228]	; (800472c <HAL_DMA_IRQHandler+0xe28>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d031      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a38      	ldr	r2, [pc, #224]	; (8004730 <HAL_DMA_IRQHandler+0xe2c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d02c      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a36      	ldr	r2, [pc, #216]	; (8004734 <HAL_DMA_IRQHandler+0xe30>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d027      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a35      	ldr	r2, [pc, #212]	; (8004738 <HAL_DMA_IRQHandler+0xe34>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d022      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a33      	ldr	r2, [pc, #204]	; (800473c <HAL_DMA_IRQHandler+0xe38>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d01d      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a32      	ldr	r2, [pc, #200]	; (8004740 <HAL_DMA_IRQHandler+0xe3c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d018      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a30      	ldr	r2, [pc, #192]	; (8004744 <HAL_DMA_IRQHandler+0xe40>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2f      	ldr	r2, [pc, #188]	; (8004748 <HAL_DMA_IRQHandler+0xe44>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00e      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a2d      	ldr	r2, [pc, #180]	; (800474c <HAL_DMA_IRQHandler+0xe48>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d009      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <HAL_DMA_IRQHandler+0xe4c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <HAL_DMA_IRQHandler+0xdaa>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a2a      	ldr	r2, [pc, #168]	; (8004754 <HAL_DMA_IRQHandler+0xe50>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d108      	bne.n	80046c0 <HAL_DMA_IRQHandler+0xdbc>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 021c 	bic.w	r2, r2, #28
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e007      	b.n	80046d0 <HAL_DMA_IRQHandler+0xdcc>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 020e 	bic.w	r2, r2, #14
 80046ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	2201      	movs	r2, #1
 80046da:	409a      	lsls	r2, r3
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	4798      	blx	r3
 8004706:	e004      	b.n	8004712 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004708:	bf00      	nop
 800470a:	e002      	b.n	8004712 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800470c:	bf00      	nop
 800470e:	e000      	b.n	8004712 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004710:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004712:	3728      	adds	r7, #40	; 0x28
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40020010 	.word	0x40020010
 800471c:	40020028 	.word	0x40020028
 8004720:	40020040 	.word	0x40020040
 8004724:	40020058 	.word	0x40020058
 8004728:	40020070 	.word	0x40020070
 800472c:	40020088 	.word	0x40020088
 8004730:	400200a0 	.word	0x400200a0
 8004734:	400200b8 	.word	0x400200b8
 8004738:	40020410 	.word	0x40020410
 800473c:	40020428 	.word	0x40020428
 8004740:	40020440 	.word	0x40020440
 8004744:	40020458 	.word	0x40020458
 8004748:	40020470 	.word	0x40020470
 800474c:	40020488 	.word	0x40020488
 8004750:	400204a0 	.word	0x400204a0
 8004754:	400204b8 	.word	0x400204b8

08004758 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a7f      	ldr	r2, [pc, #508]	; (8004974 <DMA_SetConfig+0x21c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d072      	beq.n	8004862 <DMA_SetConfig+0x10a>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a7d      	ldr	r2, [pc, #500]	; (8004978 <DMA_SetConfig+0x220>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d06d      	beq.n	8004862 <DMA_SetConfig+0x10a>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a7c      	ldr	r2, [pc, #496]	; (800497c <DMA_SetConfig+0x224>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d068      	beq.n	8004862 <DMA_SetConfig+0x10a>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a7a      	ldr	r2, [pc, #488]	; (8004980 <DMA_SetConfig+0x228>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d063      	beq.n	8004862 <DMA_SetConfig+0x10a>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a79      	ldr	r2, [pc, #484]	; (8004984 <DMA_SetConfig+0x22c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d05e      	beq.n	8004862 <DMA_SetConfig+0x10a>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a77      	ldr	r2, [pc, #476]	; (8004988 <DMA_SetConfig+0x230>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d059      	beq.n	8004862 <DMA_SetConfig+0x10a>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a76      	ldr	r2, [pc, #472]	; (800498c <DMA_SetConfig+0x234>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d054      	beq.n	8004862 <DMA_SetConfig+0x10a>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a74      	ldr	r2, [pc, #464]	; (8004990 <DMA_SetConfig+0x238>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d04f      	beq.n	8004862 <DMA_SetConfig+0x10a>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a73      	ldr	r2, [pc, #460]	; (8004994 <DMA_SetConfig+0x23c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d04a      	beq.n	8004862 <DMA_SetConfig+0x10a>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a71      	ldr	r2, [pc, #452]	; (8004998 <DMA_SetConfig+0x240>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d045      	beq.n	8004862 <DMA_SetConfig+0x10a>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a70      	ldr	r2, [pc, #448]	; (800499c <DMA_SetConfig+0x244>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d040      	beq.n	8004862 <DMA_SetConfig+0x10a>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a6e      	ldr	r2, [pc, #440]	; (80049a0 <DMA_SetConfig+0x248>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d03b      	beq.n	8004862 <DMA_SetConfig+0x10a>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a6d      	ldr	r2, [pc, #436]	; (80049a4 <DMA_SetConfig+0x24c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d036      	beq.n	8004862 <DMA_SetConfig+0x10a>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a6b      	ldr	r2, [pc, #428]	; (80049a8 <DMA_SetConfig+0x250>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d031      	beq.n	8004862 <DMA_SetConfig+0x10a>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a6a      	ldr	r2, [pc, #424]	; (80049ac <DMA_SetConfig+0x254>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d02c      	beq.n	8004862 <DMA_SetConfig+0x10a>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a68      	ldr	r2, [pc, #416]	; (80049b0 <DMA_SetConfig+0x258>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d027      	beq.n	8004862 <DMA_SetConfig+0x10a>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a67      	ldr	r2, [pc, #412]	; (80049b4 <DMA_SetConfig+0x25c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d022      	beq.n	8004862 <DMA_SetConfig+0x10a>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a65      	ldr	r2, [pc, #404]	; (80049b8 <DMA_SetConfig+0x260>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d01d      	beq.n	8004862 <DMA_SetConfig+0x10a>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a64      	ldr	r2, [pc, #400]	; (80049bc <DMA_SetConfig+0x264>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d018      	beq.n	8004862 <DMA_SetConfig+0x10a>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a62      	ldr	r2, [pc, #392]	; (80049c0 <DMA_SetConfig+0x268>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <DMA_SetConfig+0x10a>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a61      	ldr	r2, [pc, #388]	; (80049c4 <DMA_SetConfig+0x26c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00e      	beq.n	8004862 <DMA_SetConfig+0x10a>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5f      	ldr	r2, [pc, #380]	; (80049c8 <DMA_SetConfig+0x270>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d009      	beq.n	8004862 <DMA_SetConfig+0x10a>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a5e      	ldr	r2, [pc, #376]	; (80049cc <DMA_SetConfig+0x274>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <DMA_SetConfig+0x10a>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5c      	ldr	r2, [pc, #368]	; (80049d0 <DMA_SetConfig+0x278>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d101      	bne.n	8004866 <DMA_SetConfig+0x10e>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <DMA_SetConfig+0x110>
 8004866:	2300      	movs	r3, #0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00d      	beq.n	8004888 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004874:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d004      	beq.n	8004888 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004886:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a39      	ldr	r2, [pc, #228]	; (8004974 <DMA_SetConfig+0x21c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d04a      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a38      	ldr	r2, [pc, #224]	; (8004978 <DMA_SetConfig+0x220>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d045      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a36      	ldr	r2, [pc, #216]	; (800497c <DMA_SetConfig+0x224>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d040      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a35      	ldr	r2, [pc, #212]	; (8004980 <DMA_SetConfig+0x228>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d03b      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a33      	ldr	r2, [pc, #204]	; (8004984 <DMA_SetConfig+0x22c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d036      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a32      	ldr	r2, [pc, #200]	; (8004988 <DMA_SetConfig+0x230>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d031      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a30      	ldr	r2, [pc, #192]	; (800498c <DMA_SetConfig+0x234>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d02c      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2f      	ldr	r2, [pc, #188]	; (8004990 <DMA_SetConfig+0x238>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d027      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <DMA_SetConfig+0x23c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d022      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2c      	ldr	r2, [pc, #176]	; (8004998 <DMA_SetConfig+0x240>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d01d      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <DMA_SetConfig+0x244>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d018      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <DMA_SetConfig+0x248>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a27      	ldr	r2, [pc, #156]	; (80049a4 <DMA_SetConfig+0x24c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00e      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <DMA_SetConfig+0x250>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d009      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a24      	ldr	r2, [pc, #144]	; (80049ac <DMA_SetConfig+0x254>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <DMA_SetConfig+0x1d0>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a23      	ldr	r2, [pc, #140]	; (80049b0 <DMA_SetConfig+0x258>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d101      	bne.n	800492c <DMA_SetConfig+0x1d4>
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <DMA_SetConfig+0x1d6>
 800492c:	2300      	movs	r3, #0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d059      	beq.n	80049e6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	223f      	movs	r2, #63	; 0x3f
 800493c:	409a      	lsls	r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004950:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d138      	bne.n	80049d4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004972:	e086      	b.n	8004a82 <DMA_SetConfig+0x32a>
 8004974:	40020010 	.word	0x40020010
 8004978:	40020028 	.word	0x40020028
 800497c:	40020040 	.word	0x40020040
 8004980:	40020058 	.word	0x40020058
 8004984:	40020070 	.word	0x40020070
 8004988:	40020088 	.word	0x40020088
 800498c:	400200a0 	.word	0x400200a0
 8004990:	400200b8 	.word	0x400200b8
 8004994:	40020410 	.word	0x40020410
 8004998:	40020428 	.word	0x40020428
 800499c:	40020440 	.word	0x40020440
 80049a0:	40020458 	.word	0x40020458
 80049a4:	40020470 	.word	0x40020470
 80049a8:	40020488 	.word	0x40020488
 80049ac:	400204a0 	.word	0x400204a0
 80049b0:	400204b8 	.word	0x400204b8
 80049b4:	58025408 	.word	0x58025408
 80049b8:	5802541c 	.word	0x5802541c
 80049bc:	58025430 	.word	0x58025430
 80049c0:	58025444 	.word	0x58025444
 80049c4:	58025458 	.word	0x58025458
 80049c8:	5802546c 	.word	0x5802546c
 80049cc:	58025480 	.word	0x58025480
 80049d0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
}
 80049e4:	e04d      	b.n	8004a82 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a29      	ldr	r2, [pc, #164]	; (8004a90 <DMA_SetConfig+0x338>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <DMA_SetConfig+0x2de>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a27      	ldr	r2, [pc, #156]	; (8004a94 <DMA_SetConfig+0x33c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01d      	beq.n	8004a36 <DMA_SetConfig+0x2de>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a26      	ldr	r2, [pc, #152]	; (8004a98 <DMA_SetConfig+0x340>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <DMA_SetConfig+0x2de>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a24      	ldr	r2, [pc, #144]	; (8004a9c <DMA_SetConfig+0x344>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <DMA_SetConfig+0x2de>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a23      	ldr	r2, [pc, #140]	; (8004aa0 <DMA_SetConfig+0x348>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <DMA_SetConfig+0x2de>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a21      	ldr	r2, [pc, #132]	; (8004aa4 <DMA_SetConfig+0x34c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <DMA_SetConfig+0x2de>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a20      	ldr	r2, [pc, #128]	; (8004aa8 <DMA_SetConfig+0x350>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <DMA_SetConfig+0x2de>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1e      	ldr	r2, [pc, #120]	; (8004aac <DMA_SetConfig+0x354>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <DMA_SetConfig+0x2e2>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <DMA_SetConfig+0x2e4>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2201      	movs	r2, #1
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	d108      	bne.n	8004a72 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	60da      	str	r2, [r3, #12]
}
 8004a70:	e007      	b.n	8004a82 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	60da      	str	r2, [r3, #12]
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	58025408 	.word	0x58025408
 8004a94:	5802541c 	.word	0x5802541c
 8004a98:	58025430 	.word	0x58025430
 8004a9c:	58025444 	.word	0x58025444
 8004aa0:	58025458 	.word	0x58025458
 8004aa4:	5802546c 	.word	0x5802546c
 8004aa8:	58025480 	.word	0x58025480
 8004aac:	58025494 	.word	0x58025494

08004ab0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a42      	ldr	r2, [pc, #264]	; (8004bc8 <DMA_CalcBaseAndBitshift+0x118>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d04a      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a41      	ldr	r2, [pc, #260]	; (8004bcc <DMA_CalcBaseAndBitshift+0x11c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d045      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a3f      	ldr	r2, [pc, #252]	; (8004bd0 <DMA_CalcBaseAndBitshift+0x120>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d040      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a3e      	ldr	r2, [pc, #248]	; (8004bd4 <DMA_CalcBaseAndBitshift+0x124>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d03b      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a3c      	ldr	r2, [pc, #240]	; (8004bd8 <DMA_CalcBaseAndBitshift+0x128>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d036      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a3b      	ldr	r2, [pc, #236]	; (8004bdc <DMA_CalcBaseAndBitshift+0x12c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d031      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a39      	ldr	r2, [pc, #228]	; (8004be0 <DMA_CalcBaseAndBitshift+0x130>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d02c      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a38      	ldr	r2, [pc, #224]	; (8004be4 <DMA_CalcBaseAndBitshift+0x134>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d027      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a36      	ldr	r2, [pc, #216]	; (8004be8 <DMA_CalcBaseAndBitshift+0x138>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d022      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a35      	ldr	r2, [pc, #212]	; (8004bec <DMA_CalcBaseAndBitshift+0x13c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d01d      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a33      	ldr	r2, [pc, #204]	; (8004bf0 <DMA_CalcBaseAndBitshift+0x140>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d018      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a32      	ldr	r2, [pc, #200]	; (8004bf4 <DMA_CalcBaseAndBitshift+0x144>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d013      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a30      	ldr	r2, [pc, #192]	; (8004bf8 <DMA_CalcBaseAndBitshift+0x148>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00e      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a2f      	ldr	r2, [pc, #188]	; (8004bfc <DMA_CalcBaseAndBitshift+0x14c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d009      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a2d      	ldr	r2, [pc, #180]	; (8004c00 <DMA_CalcBaseAndBitshift+0x150>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xa8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a2c      	ldr	r2, [pc, #176]	; (8004c04 <DMA_CalcBaseAndBitshift+0x154>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d101      	bne.n	8004b5c <DMA_CalcBaseAndBitshift+0xac>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <DMA_CalcBaseAndBitshift+0xae>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d024      	beq.n	8004bac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	3b10      	subs	r3, #16
 8004b6a:	4a27      	ldr	r2, [pc, #156]	; (8004c08 <DMA_CalcBaseAndBitshift+0x158>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	4a24      	ldr	r2, [pc, #144]	; (8004c0c <DMA_CalcBaseAndBitshift+0x15c>)
 8004b7c:	5cd3      	ldrb	r3, [r2, r3]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d908      	bls.n	8004b9c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4b1f      	ldr	r3, [pc, #124]	; (8004c10 <DMA_CalcBaseAndBitshift+0x160>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	1d1a      	adds	r2, r3, #4
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	659a      	str	r2, [r3, #88]	; 0x58
 8004b9a:	e00d      	b.n	8004bb8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <DMA_CalcBaseAndBitshift+0x160>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8004baa:	e005      	b.n	8004bb8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	40020010 	.word	0x40020010
 8004bcc:	40020028 	.word	0x40020028
 8004bd0:	40020040 	.word	0x40020040
 8004bd4:	40020058 	.word	0x40020058
 8004bd8:	40020070 	.word	0x40020070
 8004bdc:	40020088 	.word	0x40020088
 8004be0:	400200a0 	.word	0x400200a0
 8004be4:	400200b8 	.word	0x400200b8
 8004be8:	40020410 	.word	0x40020410
 8004bec:	40020428 	.word	0x40020428
 8004bf0:	40020440 	.word	0x40020440
 8004bf4:	40020458 	.word	0x40020458
 8004bf8:	40020470 	.word	0x40020470
 8004bfc:	40020488 	.word	0x40020488
 8004c00:	400204a0 	.word	0x400204a0
 8004c04:	400204b8 	.word	0x400204b8
 8004c08:	aaaaaaab 	.word	0xaaaaaaab
 8004c0c:	0801b890 	.word	0x0801b890
 8004c10:	fffffc00 	.word	0xfffffc00

08004c14 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d120      	bne.n	8004c6a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d858      	bhi.n	8004ce2 <DMA_CheckFifoParam+0xce>
 8004c30:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <DMA_CheckFifoParam+0x24>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c5b 	.word	0x08004c5b
 8004c40:	08004c49 	.word	0x08004c49
 8004c44:	08004ce3 	.word	0x08004ce3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d048      	beq.n	8004ce6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c58:	e045      	b.n	8004ce6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c62:	d142      	bne.n	8004cea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c68:	e03f      	b.n	8004cea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c72:	d123      	bne.n	8004cbc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d838      	bhi.n	8004cee <DMA_CheckFifoParam+0xda>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <DMA_CheckFifoParam+0x70>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004c95 	.word	0x08004c95
 8004c88:	08004c9b 	.word	0x08004c9b
 8004c8c:	08004c95 	.word	0x08004c95
 8004c90:	08004cad 	.word	0x08004cad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
        break;
 8004c98:	e030      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d025      	beq.n	8004cf2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004caa:	e022      	b.n	8004cf2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb4:	d11f      	bne.n	8004cf6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cba:	e01c      	b.n	8004cf6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d902      	bls.n	8004cca <DMA_CheckFifoParam+0xb6>
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d003      	beq.n	8004cd0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004cc8:	e018      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cce:	e015      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00e      	beq.n	8004cfa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
    break;
 8004ce0:	e00b      	b.n	8004cfa <DMA_CheckFifoParam+0xe6>
        break;
 8004ce2:	bf00      	nop
 8004ce4:	e00a      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
        break;
 8004ce6:	bf00      	nop
 8004ce8:	e008      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
        break;
 8004cea:	bf00      	nop
 8004cec:	e006      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
        break;
 8004cee:	bf00      	nop
 8004cf0:	e004      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e002      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
        break;
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
    break;
 8004cfa:	bf00      	nop
    }
  }

  return status;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop

08004d0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a38      	ldr	r2, [pc, #224]	; (8004e00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d022      	beq.n	8004d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a36      	ldr	r2, [pc, #216]	; (8004e04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d01d      	beq.n	8004d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a35      	ldr	r2, [pc, #212]	; (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d018      	beq.n	8004d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a33      	ldr	r2, [pc, #204]	; (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d013      	beq.n	8004d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a32      	ldr	r2, [pc, #200]	; (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00e      	beq.n	8004d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a30      	ldr	r2, [pc, #192]	; (8004e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d009      	beq.n	8004d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2f      	ldr	r2, [pc, #188]	; (8004e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d004      	beq.n	8004d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2d      	ldr	r2, [pc, #180]	; (8004e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d101      	bne.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01a      	beq.n	8004daa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	3b08      	subs	r3, #8
 8004d7c:	4a28      	ldr	r2, [pc, #160]	; (8004e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4b26      	ldr	r3, [pc, #152]	; (8004e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	461a      	mov	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a24      	ldr	r2, [pc, #144]	; (8004e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	2201      	movs	r2, #1
 8004da2:	409a      	lsls	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004da8:	e024      	b.n	8004df4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	3b10      	subs	r3, #16
 8004db2:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4a1c      	ldr	r2, [pc, #112]	; (8004e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d806      	bhi.n	8004dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4a1b      	ldr	r2, [pc, #108]	; (8004e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d902      	bls.n	8004dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3308      	adds	r3, #8
 8004dd0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	461a      	mov	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004de4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	2201      	movs	r2, #1
 8004dee:	409a      	lsls	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	58025408 	.word	0x58025408
 8004e04:	5802541c 	.word	0x5802541c
 8004e08:	58025430 	.word	0x58025430
 8004e0c:	58025444 	.word	0x58025444
 8004e10:	58025458 	.word	0x58025458
 8004e14:	5802546c 	.word	0x5802546c
 8004e18:	58025480 	.word	0x58025480
 8004e1c:	58025494 	.word	0x58025494
 8004e20:	cccccccd 	.word	0xcccccccd
 8004e24:	16009600 	.word	0x16009600
 8004e28:	58025880 	.word	0x58025880
 8004e2c:	aaaaaaab 	.word	0xaaaaaaab
 8004e30:	400204b8 	.word	0x400204b8
 8004e34:	4002040f 	.word	0x4002040f
 8004e38:	10008200 	.word	0x10008200
 8004e3c:	40020880 	.word	0x40020880

08004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d04a      	beq.n	8004eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d847      	bhi.n	8004eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a25      	ldr	r2, [pc, #148]	; (8004ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d022      	beq.n	8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a24      	ldr	r2, [pc, #144]	; (8004efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d01d      	beq.n	8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d018      	beq.n	8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a21      	ldr	r2, [pc, #132]	; (8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1f      	ldr	r2, [pc, #124]	; (8004f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00e      	beq.n	8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d009      	beq.n	8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1c      	ldr	r2, [pc, #112]	; (8004f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1b      	ldr	r2, [pc, #108]	; (8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d101      	bne.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ec8:	671a      	str	r2, [r3, #112]	; 0x70
 8004eca:	e009      	b.n	8004ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ede:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	58025408 	.word	0x58025408
 8004efc:	5802541c 	.word	0x5802541c
 8004f00:	58025430 	.word	0x58025430
 8004f04:	58025444 	.word	0x58025444
 8004f08:	58025458 	.word	0x58025458
 8004f0c:	5802546c 	.word	0x5802546c
 8004f10:	58025480 	.word	0x58025480
 8004f14:	58025494 	.word	0x58025494
 8004f18:	1600963f 	.word	0x1600963f
 8004f1c:	58025940 	.word	0x58025940
 8004f20:	1000823f 	.word	0x1000823f
 8004f24:	40020940 	.word	0x40020940

08004f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b089      	sub	sp, #36	; 0x24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f36:	4b86      	ldr	r3, [pc, #536]	; (8005150 <HAL_GPIO_Init+0x228>)
 8004f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f3a:	e18c      	b.n	8005256 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	2101      	movs	r1, #1
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	fa01 f303 	lsl.w	r3, r1, r3
 8004f48:	4013      	ands	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 817e 	beq.w	8005250 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d005      	beq.n	8004f6c <HAL_GPIO_Init+0x44>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d130      	bne.n	8004fce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	2203      	movs	r2, #3
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4013      	ands	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	43db      	mvns	r3, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	091b      	lsrs	r3, r3, #4
 8004fb8:	f003 0201 	and.w	r2, r3, #1
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d017      	beq.n	800500a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	43db      	mvns	r3, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d123      	bne.n	800505e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	08da      	lsrs	r2, r3, #3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3208      	adds	r2, #8
 800501e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	220f      	movs	r2, #15
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	08da      	lsrs	r2, r3, #3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3208      	adds	r2, #8
 8005058:	69b9      	ldr	r1, [r7, #24]
 800505a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	2203      	movs	r2, #3
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43db      	mvns	r3, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4013      	ands	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f003 0203 	and.w	r2, r3, #3
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4313      	orrs	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80d8 	beq.w	8005250 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a0:	4b2c      	ldr	r3, [pc, #176]	; (8005154 <HAL_GPIO_Init+0x22c>)
 80050a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050a6:	4a2b      	ldr	r2, [pc, #172]	; (8005154 <HAL_GPIO_Init+0x22c>)
 80050a8:	f043 0302 	orr.w	r3, r3, #2
 80050ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050b0:	4b28      	ldr	r3, [pc, #160]	; (8005154 <HAL_GPIO_Init+0x22c>)
 80050b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050be:	4a26      	ldr	r2, [pc, #152]	; (8005158 <HAL_GPIO_Init+0x230>)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	089b      	lsrs	r3, r3, #2
 80050c4:	3302      	adds	r3, #2
 80050c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	220f      	movs	r2, #15
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43db      	mvns	r3, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4013      	ands	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a1d      	ldr	r2, [pc, #116]	; (800515c <HAL_GPIO_Init+0x234>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d04a      	beq.n	8005180 <HAL_GPIO_Init+0x258>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <HAL_GPIO_Init+0x238>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d02b      	beq.n	800514a <HAL_GPIO_Init+0x222>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1b      	ldr	r2, [pc, #108]	; (8005164 <HAL_GPIO_Init+0x23c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d025      	beq.n	8005146 <HAL_GPIO_Init+0x21e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1a      	ldr	r2, [pc, #104]	; (8005168 <HAL_GPIO_Init+0x240>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d01f      	beq.n	8005142 <HAL_GPIO_Init+0x21a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a19      	ldr	r2, [pc, #100]	; (800516c <HAL_GPIO_Init+0x244>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d019      	beq.n	800513e <HAL_GPIO_Init+0x216>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a18      	ldr	r2, [pc, #96]	; (8005170 <HAL_GPIO_Init+0x248>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <HAL_GPIO_Init+0x212>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a17      	ldr	r2, [pc, #92]	; (8005174 <HAL_GPIO_Init+0x24c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00d      	beq.n	8005136 <HAL_GPIO_Init+0x20e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a16      	ldr	r2, [pc, #88]	; (8005178 <HAL_GPIO_Init+0x250>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d007      	beq.n	8005132 <HAL_GPIO_Init+0x20a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a15      	ldr	r2, [pc, #84]	; (800517c <HAL_GPIO_Init+0x254>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d101      	bne.n	800512e <HAL_GPIO_Init+0x206>
 800512a:	2309      	movs	r3, #9
 800512c:	e029      	b.n	8005182 <HAL_GPIO_Init+0x25a>
 800512e:	230a      	movs	r3, #10
 8005130:	e027      	b.n	8005182 <HAL_GPIO_Init+0x25a>
 8005132:	2307      	movs	r3, #7
 8005134:	e025      	b.n	8005182 <HAL_GPIO_Init+0x25a>
 8005136:	2306      	movs	r3, #6
 8005138:	e023      	b.n	8005182 <HAL_GPIO_Init+0x25a>
 800513a:	2305      	movs	r3, #5
 800513c:	e021      	b.n	8005182 <HAL_GPIO_Init+0x25a>
 800513e:	2304      	movs	r3, #4
 8005140:	e01f      	b.n	8005182 <HAL_GPIO_Init+0x25a>
 8005142:	2303      	movs	r3, #3
 8005144:	e01d      	b.n	8005182 <HAL_GPIO_Init+0x25a>
 8005146:	2302      	movs	r3, #2
 8005148:	e01b      	b.n	8005182 <HAL_GPIO_Init+0x25a>
 800514a:	2301      	movs	r3, #1
 800514c:	e019      	b.n	8005182 <HAL_GPIO_Init+0x25a>
 800514e:	bf00      	nop
 8005150:	58000080 	.word	0x58000080
 8005154:	58024400 	.word	0x58024400
 8005158:	58000400 	.word	0x58000400
 800515c:	58020000 	.word	0x58020000
 8005160:	58020400 	.word	0x58020400
 8005164:	58020800 	.word	0x58020800
 8005168:	58020c00 	.word	0x58020c00
 800516c:	58021000 	.word	0x58021000
 8005170:	58021400 	.word	0x58021400
 8005174:	58021800 	.word	0x58021800
 8005178:	58021c00 	.word	0x58021c00
 800517c:	58022400 	.word	0x58022400
 8005180:	2300      	movs	r3, #0
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	f002 0203 	and.w	r2, r2, #3
 8005188:	0092      	lsls	r2, r2, #2
 800518a:	4093      	lsls	r3, r2
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005192:	4938      	ldr	r1, [pc, #224]	; (8005274 <HAL_GPIO_Init+0x34c>)
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	089b      	lsrs	r3, r3, #2
 8005198:	3302      	adds	r3, #2
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	43db      	mvns	r3, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4013      	ands	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	43db      	mvns	r3, r3
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	4013      	ands	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	43db      	mvns	r3, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4013      	ands	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	43db      	mvns	r3, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4013      	ands	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	3301      	adds	r3, #1
 8005254:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	f47f ae6b 	bne.w	8004f3c <HAL_GPIO_Init+0x14>
  }
}
 8005266:	bf00      	nop
 8005268:	bf00      	nop
 800526a:	3724      	adds	r7, #36	; 0x24
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	58000400 	.word	0x58000400

08005278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	807b      	strh	r3, [r7, #2]
 8005284:	4613      	mov	r3, r2
 8005286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005288:	787b      	ldrb	r3, [r7, #1]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800528e:	887a      	ldrh	r2, [r7, #2]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005294:	e003      	b.n	800529e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005296:	887b      	ldrh	r3, [r7, #2]
 8005298:	041a      	lsls	r2, r3, #16
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	619a      	str	r2, [r3, #24]
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	460b      	mov	r3, r1
 80052b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052bc:	887a      	ldrh	r2, [r7, #2]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4013      	ands	r3, r2
 80052c2:	041a      	lsls	r2, r3, #16
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	43d9      	mvns	r1, r3
 80052c8:	887b      	ldrh	r3, [r7, #2]
 80052ca:	400b      	ands	r3, r1
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	619a      	str	r2, [r3, #24]
}
 80052d2:	bf00      	nop
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80052de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e0:	b08f      	sub	sp, #60	; 0x3c
 80052e2:	af0a      	add	r7, sp, #40	; 0x28
 80052e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e054      	b.n	800539a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f014 fa96 	bl	801983c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2203      	movs	r2, #3
 8005314:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f006 fb53 	bl	800b9da <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	687e      	ldr	r6, [r7, #4]
 800533c:	466d      	mov	r5, sp
 800533e:	f106 0410 	add.w	r4, r6, #16
 8005342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800534a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800534e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005352:	1d33      	adds	r3, r6, #4
 8005354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005356:	6838      	ldr	r0, [r7, #0]
 8005358:	f006 fac0 	bl	800b8dc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2101      	movs	r1, #1
 8005362:	4618      	mov	r0, r3
 8005364:	f006 fb4a 	bl	800b9fc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	603b      	str	r3, [r7, #0]
 800536e:	687e      	ldr	r6, [r7, #4]
 8005370:	466d      	mov	r5, sp
 8005372:	f106 0410 	add.w	r4, r6, #16
 8005376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800537a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800537c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800537e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005382:	e885 0003 	stmia.w	r5, {r0, r1}
 8005386:	1d33      	adds	r3, r6, #4
 8005388:	cb0e      	ldmia	r3, {r1, r2, r3}
 800538a:	6838      	ldr	r0, [r7, #0]
 800538c:	f006 fcd2 	bl	800bd34 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053a2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80053a2:	b590      	push	{r4, r7, lr}
 80053a4:	b089      	sub	sp, #36	; 0x24
 80053a6:	af04      	add	r7, sp, #16
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	4608      	mov	r0, r1
 80053ac:	4611      	mov	r1, r2
 80053ae:	461a      	mov	r2, r3
 80053b0:	4603      	mov	r3, r0
 80053b2:	70fb      	strb	r3, [r7, #3]
 80053b4:	460b      	mov	r3, r1
 80053b6:	70bb      	strb	r3, [r7, #2]
 80053b8:	4613      	mov	r3, r2
 80053ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_HCD_HC_Init+0x28>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e076      	b.n	80054b8 <HAL_HCD_HC_Init+0x116>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80053d2:	78fb      	ldrb	r3, [r7, #3]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	212c      	movs	r1, #44	; 0x2c
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	4413      	add	r3, r2
 80053de:	333d      	adds	r3, #61	; 0x3d
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	212c      	movs	r1, #44	; 0x2c
 80053ea:	fb01 f303 	mul.w	r3, r1, r3
 80053ee:	4413      	add	r3, r2
 80053f0:	3338      	adds	r3, #56	; 0x38
 80053f2:	787a      	ldrb	r2, [r7, #1]
 80053f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80053f6:	78fb      	ldrb	r3, [r7, #3]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	212c      	movs	r1, #44	; 0x2c
 80053fc:	fb01 f303 	mul.w	r3, r1, r3
 8005400:	4413      	add	r3, r2
 8005402:	3340      	adds	r3, #64	; 0x40
 8005404:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005406:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	212c      	movs	r1, #44	; 0x2c
 800540e:	fb01 f303 	mul.w	r3, r1, r3
 8005412:	4413      	add	r3, r2
 8005414:	3339      	adds	r3, #57	; 0x39
 8005416:	78fa      	ldrb	r2, [r7, #3]
 8005418:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	212c      	movs	r1, #44	; 0x2c
 8005420:	fb01 f303 	mul.w	r3, r1, r3
 8005424:	4413      	add	r3, r2
 8005426:	333f      	adds	r3, #63	; 0x3f
 8005428:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800542c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	78ba      	ldrb	r2, [r7, #2]
 8005432:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005436:	b2d0      	uxtb	r0, r2
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	212c      	movs	r1, #44	; 0x2c
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	4413      	add	r3, r2
 8005442:	333a      	adds	r3, #58	; 0x3a
 8005444:	4602      	mov	r2, r0
 8005446:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005448:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800544c:	2b00      	cmp	r3, #0
 800544e:	da09      	bge.n	8005464 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	212c      	movs	r1, #44	; 0x2c
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	4413      	add	r3, r2
 800545c:	333b      	adds	r3, #59	; 0x3b
 800545e:	2201      	movs	r2, #1
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	e008      	b.n	8005476 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	212c      	movs	r1, #44	; 0x2c
 800546a:	fb01 f303 	mul.w	r3, r1, r3
 800546e:	4413      	add	r3, r2
 8005470:	333b      	adds	r3, #59	; 0x3b
 8005472:	2200      	movs	r2, #0
 8005474:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	212c      	movs	r1, #44	; 0x2c
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	4413      	add	r3, r2
 8005482:	333c      	adds	r3, #60	; 0x3c
 8005484:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005488:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	787c      	ldrb	r4, [r7, #1]
 8005490:	78ba      	ldrb	r2, [r7, #2]
 8005492:	78f9      	ldrb	r1, [r7, #3]
 8005494:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005496:	9302      	str	r3, [sp, #8]
 8005498:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	4623      	mov	r3, r4
 80054a6:	f006 fdc5 	bl	800c034 <USB_HC_Init>
 80054aa:	4603      	mov	r3, r0
 80054ac:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd90      	pop	{r4, r7, pc}

080054c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_HCD_HC_Halt+0x1e>
 80054da:	2302      	movs	r3, #2
 80054dc:	e00f      	b.n	80054fe <HAL_HCD_HC_Halt+0x3e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	4611      	mov	r1, r2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f007 f815 	bl	800c51e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	4608      	mov	r0, r1
 8005512:	4611      	mov	r1, r2
 8005514:	461a      	mov	r2, r3
 8005516:	4603      	mov	r3, r0
 8005518:	70fb      	strb	r3, [r7, #3]
 800551a:	460b      	mov	r3, r1
 800551c:	70bb      	strb	r3, [r7, #2]
 800551e:	4613      	mov	r3, r2
 8005520:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	212c      	movs	r1, #44	; 0x2c
 8005528:	fb01 f303 	mul.w	r3, r1, r3
 800552c:	4413      	add	r3, r2
 800552e:	333b      	adds	r3, #59	; 0x3b
 8005530:	78ba      	ldrb	r2, [r7, #2]
 8005532:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	212c      	movs	r1, #44	; 0x2c
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	4413      	add	r3, r2
 8005540:	333f      	adds	r3, #63	; 0x3f
 8005542:	787a      	ldrb	r2, [r7, #1]
 8005544:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005546:	7c3b      	ldrb	r3, [r7, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d112      	bne.n	8005572 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	212c      	movs	r1, #44	; 0x2c
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	4413      	add	r3, r2
 8005558:	3342      	adds	r3, #66	; 0x42
 800555a:	2203      	movs	r2, #3
 800555c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	212c      	movs	r1, #44	; 0x2c
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	4413      	add	r3, r2
 800556a:	333d      	adds	r3, #61	; 0x3d
 800556c:	7f3a      	ldrb	r2, [r7, #28]
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e008      	b.n	8005584 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	212c      	movs	r1, #44	; 0x2c
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	4413      	add	r3, r2
 800557e:	3342      	adds	r3, #66	; 0x42
 8005580:	2202      	movs	r2, #2
 8005582:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005584:	787b      	ldrb	r3, [r7, #1]
 8005586:	2b03      	cmp	r3, #3
 8005588:	f200 80c6 	bhi.w	8005718 <HAL_HCD_HC_SubmitRequest+0x210>
 800558c:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055a5 	.word	0x080055a5
 8005598:	08005705 	.word	0x08005705
 800559c:	08005609 	.word	0x08005609
 80055a0:	08005687 	.word	0x08005687
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80055a4:	7c3b      	ldrb	r3, [r7, #16]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	f040 80b8 	bne.w	800571c <HAL_HCD_HC_SubmitRequest+0x214>
 80055ac:	78bb      	ldrb	r3, [r7, #2]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f040 80b4 	bne.w	800571c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80055b4:	8b3b      	ldrh	r3, [r7, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d108      	bne.n	80055cc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	212c      	movs	r1, #44	; 0x2c
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	4413      	add	r3, r2
 80055c6:	3355      	adds	r3, #85	; 0x55
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	212c      	movs	r1, #44	; 0x2c
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	3355      	adds	r3, #85	; 0x55
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	212c      	movs	r1, #44	; 0x2c
 80055e6:	fb01 f303 	mul.w	r3, r1, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	3342      	adds	r3, #66	; 0x42
 80055ee:	2200      	movs	r2, #0
 80055f0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80055f2:	e093      	b.n	800571c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	212c      	movs	r1, #44	; 0x2c
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	4413      	add	r3, r2
 8005600:	3342      	adds	r3, #66	; 0x42
 8005602:	2202      	movs	r2, #2
 8005604:	701a      	strb	r2, [r3, #0]
      break;
 8005606:	e089      	b.n	800571c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005608:	78bb      	ldrb	r3, [r7, #2]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d11d      	bne.n	800564a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	212c      	movs	r1, #44	; 0x2c
 8005614:	fb01 f303 	mul.w	r3, r1, r3
 8005618:	4413      	add	r3, r2
 800561a:	3355      	adds	r3, #85	; 0x55
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	212c      	movs	r1, #44	; 0x2c
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	4413      	add	r3, r2
 800562e:	3342      	adds	r3, #66	; 0x42
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005634:	e073      	b.n	800571e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	212c      	movs	r1, #44	; 0x2c
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	4413      	add	r3, r2
 8005642:	3342      	adds	r3, #66	; 0x42
 8005644:	2202      	movs	r2, #2
 8005646:	701a      	strb	r2, [r3, #0]
      break;
 8005648:	e069      	b.n	800571e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	212c      	movs	r1, #44	; 0x2c
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	4413      	add	r3, r2
 8005656:	3354      	adds	r3, #84	; 0x54
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	212c      	movs	r1, #44	; 0x2c
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	4413      	add	r3, r2
 800566a:	3342      	adds	r3, #66	; 0x42
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
      break;
 8005670:	e055      	b.n	800571e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	212c      	movs	r1, #44	; 0x2c
 8005678:	fb01 f303 	mul.w	r3, r1, r3
 800567c:	4413      	add	r3, r2
 800567e:	3342      	adds	r3, #66	; 0x42
 8005680:	2202      	movs	r2, #2
 8005682:	701a      	strb	r2, [r3, #0]
      break;
 8005684:	e04b      	b.n	800571e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005686:	78bb      	ldrb	r3, [r7, #2]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d11d      	bne.n	80056c8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	212c      	movs	r1, #44	; 0x2c
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	3355      	adds	r3, #85	; 0x55
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	212c      	movs	r1, #44	; 0x2c
 80056a6:	fb01 f303 	mul.w	r3, r1, r3
 80056aa:	4413      	add	r3, r2
 80056ac:	3342      	adds	r3, #66	; 0x42
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80056b2:	e034      	b.n	800571e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	212c      	movs	r1, #44	; 0x2c
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	4413      	add	r3, r2
 80056c0:	3342      	adds	r3, #66	; 0x42
 80056c2:	2202      	movs	r2, #2
 80056c4:	701a      	strb	r2, [r3, #0]
      break;
 80056c6:	e02a      	b.n	800571e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	212c      	movs	r1, #44	; 0x2c
 80056ce:	fb01 f303 	mul.w	r3, r1, r3
 80056d2:	4413      	add	r3, r2
 80056d4:	3354      	adds	r3, #84	; 0x54
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	212c      	movs	r1, #44	; 0x2c
 80056e2:	fb01 f303 	mul.w	r3, r1, r3
 80056e6:	4413      	add	r3, r2
 80056e8:	3342      	adds	r3, #66	; 0x42
 80056ea:	2200      	movs	r2, #0
 80056ec:	701a      	strb	r2, [r3, #0]
      break;
 80056ee:	e016      	b.n	800571e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	212c      	movs	r1, #44	; 0x2c
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	3342      	adds	r3, #66	; 0x42
 80056fe:	2202      	movs	r2, #2
 8005700:	701a      	strb	r2, [r3, #0]
      break;
 8005702:	e00c      	b.n	800571e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	212c      	movs	r1, #44	; 0x2c
 800570a:	fb01 f303 	mul.w	r3, r1, r3
 800570e:	4413      	add	r3, r2
 8005710:	3342      	adds	r3, #66	; 0x42
 8005712:	2200      	movs	r2, #0
 8005714:	701a      	strb	r2, [r3, #0]
      break;
 8005716:	e002      	b.n	800571e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005718:	bf00      	nop
 800571a:	e000      	b.n	800571e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800571c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	212c      	movs	r1, #44	; 0x2c
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	4413      	add	r3, r2
 800572a:	3344      	adds	r3, #68	; 0x44
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	8b3a      	ldrh	r2, [r7, #24]
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	202c      	movs	r0, #44	; 0x2c
 8005738:	fb00 f303 	mul.w	r3, r0, r3
 800573c:	440b      	add	r3, r1
 800573e:	334c      	adds	r3, #76	; 0x4c
 8005740:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	212c      	movs	r1, #44	; 0x2c
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	4413      	add	r3, r2
 800574e:	3360      	adds	r3, #96	; 0x60
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	212c      	movs	r1, #44	; 0x2c
 800575a:	fb01 f303 	mul.w	r3, r1, r3
 800575e:	4413      	add	r3, r2
 8005760:	3350      	adds	r3, #80	; 0x50
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	212c      	movs	r1, #44	; 0x2c
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	3339      	adds	r3, #57	; 0x39
 8005774:	78fa      	ldrb	r2, [r7, #3]
 8005776:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	212c      	movs	r1, #44	; 0x2c
 800577e:	fb01 f303 	mul.w	r3, r1, r3
 8005782:	4413      	add	r3, r2
 8005784:	3361      	adds	r3, #97	; 0x61
 8005786:	2200      	movs	r2, #0
 8005788:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	222c      	movs	r2, #44	; 0x2c
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	3338      	adds	r3, #56	; 0x38
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	18d1      	adds	r1, r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	f006 fd68 	bl	800c278 <USB_HC_StartXfer>
 80057a8:	4603      	mov	r3, r0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop

080057b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f006 fa6f 	bl	800bcae <USB_GetMode>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	f040 80f6 	bne.w	80059c4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f006 fa53 	bl	800bc88 <USB_ReadInterrupts>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80ec 	beq.w	80059c2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f006 fa4a 	bl	800bc88 <USB_ReadInterrupts>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057fe:	d104      	bne.n	800580a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005808:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f006 fa3a 	bl	800bc88 <USB_ReadInterrupts>
 8005814:	4603      	mov	r3, r0
 8005816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800581a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581e:	d104      	bne.n	800582a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005828:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f006 fa2a 	bl	800bc88 <USB_ReadInterrupts>
 8005834:	4603      	mov	r3, r0
 8005836:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800583a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800583e:	d104      	bne.n	800584a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005848:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f006 fa1a 	bl	800bc88 <USB_ReadInterrupts>
 8005854:	4603      	mov	r3, r0
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b02      	cmp	r3, #2
 800585c:	d103      	bne.n	8005866 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2202      	movs	r2, #2
 8005864:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f006 fa0c 	bl	800bc88 <USB_ReadInterrupts>
 8005870:	4603      	mov	r3, r0
 8005872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800587a:	d11c      	bne.n	80058b6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005884:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10f      	bne.n	80058b6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005896:	2110      	movs	r1, #16
 8005898:	6938      	ldr	r0, [r7, #16]
 800589a:	f006 f8fb 	bl	800ba94 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800589e:	6938      	ldr	r0, [r7, #16]
 80058a0:	f006 f92c 	bl	800bafc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2101      	movs	r1, #1
 80058aa:	4618      	mov	r0, r3
 80058ac:	f006 fafc 	bl	800bea8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f014 f861 	bl	8019978 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f006 f9e4 	bl	800bc88 <USB_ReadInterrupts>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058ca:	d102      	bne.n	80058d2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 f89e 	bl	8006a0e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f006 f9d6 	bl	800bc88 <USB_ReadInterrupts>
 80058dc:	4603      	mov	r3, r0
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d106      	bne.n	80058f4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f014 f82a 	bl	8019940 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2208      	movs	r2, #8
 80058f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f006 f9c5 	bl	800bc88 <USB_ReadInterrupts>
 80058fe:	4603      	mov	r3, r0
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b10      	cmp	r3, #16
 8005906:	d101      	bne.n	800590c <HAL_HCD_IRQHandler+0x158>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <HAL_HCD_IRQHandler+0x15a>
 800590c:	2300      	movs	r3, #0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d012      	beq.n	8005938 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0210 	bic.w	r2, r2, #16
 8005920:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 ffa1 	bl	800686a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0210 	orr.w	r2, r2, #16
 8005936:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f006 f9a3 	bl	800bc88 <USB_ReadInterrupts>
 8005942:	4603      	mov	r3, r0
 8005944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005948:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800594c:	d13a      	bne.n	80059c4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f006 fdd2 	bl	800c4fc <USB_HC_ReadInterrupt>
 8005958:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e025      	b.n	80059ac <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d018      	beq.n	80059a6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800598a:	d106      	bne.n	800599a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	b2db      	uxtb	r3, r3
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f8ab 	bl	8005aee <HCD_HC_IN_IRQHandler>
 8005998:	e005      	b.n	80059a6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fbf9 	bl	8006198 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	3301      	adds	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d3d4      	bcc.n	8005960 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059be:	615a      	str	r2, [r3, #20]
 80059c0:	e000      	b.n	80059c4 <HAL_HCD_IRQHandler+0x210>
      return;
 80059c2:	bf00      	nop
    }
  }
}
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_HCD_Start+0x16>
 80059dc:	2302      	movs	r3, #2
 80059de:	e013      	b.n	8005a08 <HAL_HCD_Start+0x3e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2101      	movs	r1, #1
 80059ee:	4618      	mov	r0, r3
 80059f0:	f006 fabe 	bl	800bf70 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f005 ffdd 	bl	800b9b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_HCD_Stop+0x16>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e00d      	b.n	8005a42 <HAL_HCD_Stop+0x32>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f006 feac 	bl	800c790 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f006 fa60 	bl	800bf1c <USB_ResetPort>
 8005a5c:	4603      	mov	r3, r0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005a72:	78fb      	ldrb	r3, [r7, #3]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	212c      	movs	r1, #44	; 0x2c
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	3360      	adds	r3, #96	; 0x60
 8005a80:	781b      	ldrb	r3, [r3, #0]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	212c      	movs	r1, #44	; 0x2c
 8005aa0:	fb01 f303 	mul.w	r3, r1, r3
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3350      	adds	r3, #80	; 0x50
 8005aa8:	681b      	ldr	r3, [r3, #0]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f006 faa4 	bl	800c010 <USB_GetCurrentFrame>
 8005ac8:	4603      	mov	r3, r0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f006 fa7f 	bl	800bfe2 <USB_GetHostSpeed>
 8005ae4:	4603      	mov	r3, r0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b086      	sub	sp, #24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	460b      	mov	r3, r1
 8005af8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d11a      	bne.n	8005b54 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	212c      	movs	r1, #44	; 0x2c
 8005b36:	fb01 f303 	mul.w	r3, r1, r3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3361      	adds	r3, #97	; 0x61
 8005b3e:	2206      	movs	r2, #6
 8005b40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f006 fce6 	bl	800c51e <USB_HC_Halt>
 8005b52:	e0af      	b.n	8005cb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6a:	d11b      	bne.n	8005ba4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	212c      	movs	r1, #44	; 0x2c
 8005b86:	fb01 f303 	mul.w	r3, r1, r3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3361      	adds	r3, #97	; 0x61
 8005b8e:	2207      	movs	r2, #7
 8005b90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f006 fcbe 	bl	800c51e <USB_HC_Halt>
 8005ba2:	e087      	b.n	8005cb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d109      	bne.n	8005bce <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	2320      	movs	r3, #32
 8005bca:	6093      	str	r3, [r2, #8]
 8005bcc:	e072      	b.n	8005cb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d11a      	bne.n	8005c1a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	212c      	movs	r1, #44	; 0x2c
 8005bfc:	fb01 f303 	mul.w	r3, r1, r3
 8005c00:	4413      	add	r3, r2
 8005c02:	3361      	adds	r3, #97	; 0x61
 8005c04:	2205      	movs	r2, #5
 8005c06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	4611      	mov	r1, r2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f006 fc83 	bl	800c51e <USB_HC_Halt>
 8005c18:	e04c      	b.n	8005cb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c30:	d11b      	bne.n	8005c6a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	212c      	movs	r1, #44	; 0x2c
 8005c4c:	fb01 f303 	mul.w	r3, r1, r3
 8005c50:	4413      	add	r3, r2
 8005c52:	3361      	adds	r3, #97	; 0x61
 8005c54:	2208      	movs	r2, #8
 8005c56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	4611      	mov	r1, r2
 8005c62:	4618      	mov	r0, r3
 8005c64:	f006 fc5b 	bl	800c51e <USB_HC_Halt>
 8005c68:	e024      	b.n	8005cb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7c:	2b80      	cmp	r3, #128	; 0x80
 8005c7e:	d119      	bne.n	8005cb4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	2380      	movs	r3, #128	; 0x80
 8005c90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	212c      	movs	r1, #44	; 0x2c
 8005c98:	fb01 f303 	mul.w	r3, r1, r3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	3361      	adds	r3, #97	; 0x61
 8005ca0:	2206      	movs	r2, #6
 8005ca2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	4611      	mov	r1, r2
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f006 fc35 	bl	800c51e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cca:	d112      	bne.n	8005cf2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f006 fc21 	bl	800c51e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cee:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005cf0:	e24e      	b.n	8006190 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	f040 80df 	bne.w	8005ec8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d019      	beq.n	8005d46 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	212c      	movs	r1, #44	; 0x2c
 8005d18:	fb01 f303 	mul.w	r3, r1, r3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3348      	adds	r3, #72	; 0x48
 8005d20:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	0159      	lsls	r1, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	440b      	add	r3, r1
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005d34:	1ad2      	subs	r2, r2, r3
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	202c      	movs	r0, #44	; 0x2c
 8005d3c:	fb00 f303 	mul.w	r3, r0, r3
 8005d40:	440b      	add	r3, r1
 8005d42:	3350      	adds	r3, #80	; 0x50
 8005d44:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	212c      	movs	r1, #44	; 0x2c
 8005d4c:	fb01 f303 	mul.w	r3, r1, r3
 8005d50:	4413      	add	r3, r2
 8005d52:	3361      	adds	r3, #97	; 0x61
 8005d54:	2201      	movs	r2, #1
 8005d56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	212c      	movs	r1, #44	; 0x2c
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	4413      	add	r3, r2
 8005d64:	335c      	adds	r3, #92	; 0x5c
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d76:	461a      	mov	r2, r3
 8005d78:	2301      	movs	r3, #1
 8005d7a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	212c      	movs	r1, #44	; 0x2c
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	4413      	add	r3, r2
 8005d88:	333f      	adds	r3, #63	; 0x3f
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	212c      	movs	r1, #44	; 0x2c
 8005d96:	fb01 f303 	mul.w	r3, r1, r3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	333f      	adds	r3, #63	; 0x3f
 8005d9e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d111      	bne.n	8005dc8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f006 fbb5 	bl	800c51e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	2310      	movs	r3, #16
 8005dc4:	6093      	str	r3, [r2, #8]
 8005dc6:	e03a      	b.n	8005e3e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	212c      	movs	r1, #44	; 0x2c
 8005dce:	fb01 f303 	mul.w	r3, r1, r3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	333f      	adds	r3, #63	; 0x3f
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d009      	beq.n	8005df0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	212c      	movs	r1, #44	; 0x2c
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	4413      	add	r3, r2
 8005de8:	333f      	adds	r3, #63	; 0x3f
 8005dea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d126      	bne.n	8005e3e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e0e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	212c      	movs	r1, #44	; 0x2c
 8005e16:	fb01 f303 	mul.w	r3, r1, r3
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3360      	adds	r3, #96	; 0x60
 8005e1e:	2201      	movs	r2, #1
 8005e20:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	b2d9      	uxtb	r1, r3
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	202c      	movs	r0, #44	; 0x2c
 8005e2c:	fb00 f303 	mul.w	r3, r0, r3
 8005e30:	4413      	add	r3, r2
 8005e32:	3360      	adds	r3, #96	; 0x60
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f013 fdab 	bl	8019994 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d12b      	bne.n	8005e9e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	212c      	movs	r1, #44	; 0x2c
 8005e4c:	fb01 f303 	mul.w	r3, r1, r3
 8005e50:	4413      	add	r3, r2
 8005e52:	3348      	adds	r3, #72	; 0x48
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	202c      	movs	r0, #44	; 0x2c
 8005e5c:	fb00 f202 	mul.w	r2, r0, r2
 8005e60:	440a      	add	r2, r1
 8005e62:	3240      	adds	r2, #64	; 0x40
 8005e64:	8812      	ldrh	r2, [r2, #0]
 8005e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 818e 	beq.w	8006190 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	212c      	movs	r1, #44	; 0x2c
 8005e7a:	fb01 f303 	mul.w	r3, r1, r3
 8005e7e:	4413      	add	r3, r2
 8005e80:	3354      	adds	r3, #84	; 0x54
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	f083 0301 	eor.w	r3, r3, #1
 8005e88:	b2d8      	uxtb	r0, r3
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	212c      	movs	r1, #44	; 0x2c
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	4413      	add	r3, r2
 8005e96:	3354      	adds	r3, #84	; 0x54
 8005e98:	4602      	mov	r2, r0
 8005e9a:	701a      	strb	r2, [r3, #0]
}
 8005e9c:	e178      	b.n	8006190 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	212c      	movs	r1, #44	; 0x2c
 8005ea4:	fb01 f303 	mul.w	r3, r1, r3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3354      	adds	r3, #84	; 0x54
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	f083 0301 	eor.w	r3, r3, #1
 8005eb2:	b2d8      	uxtb	r0, r3
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	212c      	movs	r1, #44	; 0x2c
 8005eba:	fb01 f303 	mul.w	r3, r1, r3
 8005ebe:	4413      	add	r3, r2
 8005ec0:	3354      	adds	r3, #84	; 0x54
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	701a      	strb	r2, [r3, #0]
}
 8005ec6:	e163      	b.n	8006190 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	f040 80f6 	bne.w	80060cc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	212c      	movs	r1, #44	; 0x2c
 8005ee6:	fb01 f303 	mul.w	r3, r1, r3
 8005eea:	4413      	add	r3, r2
 8005eec:	3361      	adds	r3, #97	; 0x61
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d109      	bne.n	8005f08 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	212c      	movs	r1, #44	; 0x2c
 8005efa:	fb01 f303 	mul.w	r3, r1, r3
 8005efe:	4413      	add	r3, r2
 8005f00:	3360      	adds	r3, #96	; 0x60
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e0c9      	b.n	800609c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	212c      	movs	r1, #44	; 0x2c
 8005f0e:	fb01 f303 	mul.w	r3, r1, r3
 8005f12:	4413      	add	r3, r2
 8005f14:	3361      	adds	r3, #97	; 0x61
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b05      	cmp	r3, #5
 8005f1a:	d109      	bne.n	8005f30 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	212c      	movs	r1, #44	; 0x2c
 8005f22:	fb01 f303 	mul.w	r3, r1, r3
 8005f26:	4413      	add	r3, r2
 8005f28:	3360      	adds	r3, #96	; 0x60
 8005f2a:	2205      	movs	r2, #5
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	e0b5      	b.n	800609c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	212c      	movs	r1, #44	; 0x2c
 8005f36:	fb01 f303 	mul.w	r3, r1, r3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3361      	adds	r3, #97	; 0x61
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b06      	cmp	r3, #6
 8005f42:	d009      	beq.n	8005f58 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	212c      	movs	r1, #44	; 0x2c
 8005f4a:	fb01 f303 	mul.w	r3, r1, r3
 8005f4e:	4413      	add	r3, r2
 8005f50:	3361      	adds	r3, #97	; 0x61
 8005f52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d150      	bne.n	8005ffa <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	212c      	movs	r1, #44	; 0x2c
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	4413      	add	r3, r2
 8005f64:	335c      	adds	r3, #92	; 0x5c
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	202c      	movs	r0, #44	; 0x2c
 8005f70:	fb00 f303 	mul.w	r3, r0, r3
 8005f74:	440b      	add	r3, r1
 8005f76:	335c      	adds	r3, #92	; 0x5c
 8005f78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	212c      	movs	r1, #44	; 0x2c
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	4413      	add	r3, r2
 8005f86:	335c      	adds	r3, #92	; 0x5c
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d912      	bls.n	8005fb4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	212c      	movs	r1, #44	; 0x2c
 8005f94:	fb01 f303 	mul.w	r3, r1, r3
 8005f98:	4413      	add	r3, r2
 8005f9a:	335c      	adds	r3, #92	; 0x5c
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	212c      	movs	r1, #44	; 0x2c
 8005fa6:	fb01 f303 	mul.w	r3, r1, r3
 8005faa:	4413      	add	r3, r2
 8005fac:	3360      	adds	r3, #96	; 0x60
 8005fae:	2204      	movs	r2, #4
 8005fb0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005fb2:	e073      	b.n	800609c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	212c      	movs	r1, #44	; 0x2c
 8005fba:	fb01 f303 	mul.w	r3, r1, r3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	3360      	adds	r3, #96	; 0x60
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fdc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fe4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005ff8:	e050      	b.n	800609c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	212c      	movs	r1, #44	; 0x2c
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	4413      	add	r3, r2
 8006006:	3361      	adds	r3, #97	; 0x61
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d122      	bne.n	8006054 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	212c      	movs	r1, #44	; 0x2c
 8006014:	fb01 f303 	mul.w	r3, r1, r3
 8006018:	4413      	add	r3, r2
 800601a:	3360      	adds	r3, #96	; 0x60
 800601c:	2202      	movs	r2, #2
 800601e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4413      	add	r3, r2
 8006028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006036:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800603e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4413      	add	r3, r2
 8006048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604c:	461a      	mov	r2, r3
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	e023      	b.n	800609c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	212c      	movs	r1, #44	; 0x2c
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	4413      	add	r3, r2
 8006060:	3361      	adds	r3, #97	; 0x61
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b07      	cmp	r3, #7
 8006066:	d119      	bne.n	800609c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	212c      	movs	r1, #44	; 0x2c
 800606e:	fb01 f303 	mul.w	r3, r1, r3
 8006072:	4413      	add	r3, r2
 8006074:	335c      	adds	r3, #92	; 0x5c
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	202c      	movs	r0, #44	; 0x2c
 8006080:	fb00 f303 	mul.w	r3, r0, r3
 8006084:	440b      	add	r3, r1
 8006086:	335c      	adds	r3, #92	; 0x5c
 8006088:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	212c      	movs	r1, #44	; 0x2c
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	4413      	add	r3, r2
 8006096:	3360      	adds	r3, #96	; 0x60
 8006098:	2204      	movs	r2, #4
 800609a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a8:	461a      	mov	r2, r3
 80060aa:	2302      	movs	r3, #2
 80060ac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	b2d9      	uxtb	r1, r3
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	202c      	movs	r0, #44	; 0x2c
 80060b8:	fb00 f303 	mul.w	r3, r0, r3
 80060bc:	4413      	add	r3, r2
 80060be:	3360      	adds	r3, #96	; 0x60
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f013 fc65 	bl	8019994 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80060ca:	e061      	b.n	8006190 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b10      	cmp	r3, #16
 80060e0:	d156      	bne.n	8006190 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	212c      	movs	r1, #44	; 0x2c
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	4413      	add	r3, r2
 80060ee:	333f      	adds	r3, #63	; 0x3f
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d111      	bne.n	800611a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	212c      	movs	r1, #44	; 0x2c
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	4413      	add	r3, r2
 8006102:	335c      	adds	r3, #92	; 0x5c
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	4611      	mov	r1, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f006 fa03 	bl	800c51e <USB_HC_Halt>
 8006118:	e031      	b.n	800617e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	212c      	movs	r1, #44	; 0x2c
 8006120:	fb01 f303 	mul.w	r3, r1, r3
 8006124:	4413      	add	r3, r2
 8006126:	333f      	adds	r3, #63	; 0x3f
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	212c      	movs	r1, #44	; 0x2c
 8006134:	fb01 f303 	mul.w	r3, r1, r3
 8006138:	4413      	add	r3, r2
 800613a:	333f      	adds	r3, #63	; 0x3f
 800613c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800613e:	2b02      	cmp	r3, #2
 8006140:	d11d      	bne.n	800617e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	212c      	movs	r1, #44	; 0x2c
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	4413      	add	r3, r2
 800614e:	335c      	adds	r3, #92	; 0x5c
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d110      	bne.n	800617e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	212c      	movs	r1, #44	; 0x2c
 8006162:	fb01 f303 	mul.w	r3, r1, r3
 8006166:	4413      	add	r3, r2
 8006168:	3361      	adds	r3, #97	; 0x61
 800616a:	2203      	movs	r2, #3
 800616c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	4611      	mov	r1, r2
 8006178:	4618      	mov	r0, r3
 800617a:	f006 f9d0 	bl	800c51e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4413      	add	r3, r2
 8006186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618a:	461a      	mov	r2, r3
 800618c:	2310      	movs	r3, #16
 800618e:	6093      	str	r3, [r2, #8]
}
 8006190:	bf00      	nop
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80061ae:	78fb      	ldrb	r3, [r7, #3]
 80061b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d11a      	bne.n	80061fe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d4:	461a      	mov	r2, r3
 80061d6:	2304      	movs	r3, #4
 80061d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	212c      	movs	r1, #44	; 0x2c
 80061e0:	fb01 f303 	mul.w	r3, r1, r3
 80061e4:	4413      	add	r3, r2
 80061e6:	3361      	adds	r3, #97	; 0x61
 80061e8:	2206      	movs	r2, #6
 80061ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f006 f991 	bl	800c51e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80061fc:	e331      	b.n	8006862 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b20      	cmp	r3, #32
 8006212:	d12e      	bne.n	8006272 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	4413      	add	r3, r2
 800621c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006220:	461a      	mov	r2, r3
 8006222:	2320      	movs	r3, #32
 8006224:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	212c      	movs	r1, #44	; 0x2c
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	4413      	add	r3, r2
 8006232:	333d      	adds	r3, #61	; 0x3d
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b01      	cmp	r3, #1
 8006238:	f040 8313 	bne.w	8006862 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	212c      	movs	r1, #44	; 0x2c
 8006242:	fb01 f303 	mul.w	r3, r1, r3
 8006246:	4413      	add	r3, r2
 8006248:	333d      	adds	r3, #61	; 0x3d
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	212c      	movs	r1, #44	; 0x2c
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	4413      	add	r3, r2
 800625a:	3360      	adds	r3, #96	; 0x60
 800625c:	2202      	movs	r2, #2
 800625e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	4611      	mov	r1, r2
 800626a:	4618      	mov	r0, r3
 800626c:	f006 f957 	bl	800c51e <USB_HC_Halt>
}
 8006270:	e2f7      	b.n	8006862 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006288:	d112      	bne.n	80062b0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	4413      	add	r3, r2
 8006292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006296:	461a      	mov	r2, r3
 8006298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800629c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f006 f938 	bl	800c51e <USB_HC_Halt>
}
 80062ae:	e2d8      	b.n	8006862 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d140      	bne.n	8006348 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	212c      	movs	r1, #44	; 0x2c
 80062cc:	fb01 f303 	mul.w	r3, r1, r3
 80062d0:	4413      	add	r3, r2
 80062d2:	335c      	adds	r3, #92	; 0x5c
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d111      	bne.n	8006312 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	212c      	movs	r1, #44	; 0x2c
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	4413      	add	r3, r2
 80062fa:	333d      	adds	r3, #61	; 0x3d
 80062fc:	2201      	movs	r2, #1
 80062fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	4413      	add	r3, r2
 8006308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630c:	461a      	mov	r2, r3
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	461a      	mov	r2, r3
 8006320:	2301      	movs	r3, #1
 8006322:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	212c      	movs	r1, #44	; 0x2c
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	4413      	add	r3, r2
 8006330:	3361      	adds	r3, #97	; 0x61
 8006332:	2201      	movs	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	4611      	mov	r1, r2
 8006340:	4618      	mov	r0, r3
 8006342:	f006 f8ec 	bl	800c51e <USB_HC_Halt>
}
 8006346:	e28c      	b.n	8006862 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	4413      	add	r3, r2
 8006350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d12c      	bne.n	80063b8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	212c      	movs	r1, #44	; 0x2c
 8006364:	fb01 f303 	mul.w	r3, r1, r3
 8006368:	4413      	add	r3, r2
 800636a:	3361      	adds	r3, #97	; 0x61
 800636c:	2204      	movs	r2, #4
 800636e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	212c      	movs	r1, #44	; 0x2c
 8006376:	fb01 f303 	mul.w	r3, r1, r3
 800637a:	4413      	add	r3, r2
 800637c:	333d      	adds	r3, #61	; 0x3d
 800637e:	2201      	movs	r2, #1
 8006380:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	212c      	movs	r1, #44	; 0x2c
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	335c      	adds	r3, #92	; 0x5c
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f006 f8bd 	bl	800c51e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b0:	461a      	mov	r2, r3
 80063b2:	2340      	movs	r3, #64	; 0x40
 80063b4:	6093      	str	r3, [r2, #8]
}
 80063b6:	e254      	b.n	8006862 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d11a      	bne.n	8006404 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	461a      	mov	r2, r3
 80063dc:	2308      	movs	r3, #8
 80063de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	212c      	movs	r1, #44	; 0x2c
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	4413      	add	r3, r2
 80063ec:	3361      	adds	r3, #97	; 0x61
 80063ee:	2205      	movs	r2, #5
 80063f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	4611      	mov	r1, r2
 80063fc:	4618      	mov	r0, r3
 80063fe:	f006 f88e 	bl	800c51e <USB_HC_Halt>
}
 8006402:	e22e      	b.n	8006862 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	4413      	add	r3, r2
 800640c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b10      	cmp	r3, #16
 8006418:	d140      	bne.n	800649c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	212c      	movs	r1, #44	; 0x2c
 8006420:	fb01 f303 	mul.w	r3, r1, r3
 8006424:	4413      	add	r3, r2
 8006426:	335c      	adds	r3, #92	; 0x5c
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	212c      	movs	r1, #44	; 0x2c
 8006432:	fb01 f303 	mul.w	r3, r1, r3
 8006436:	4413      	add	r3, r2
 8006438:	3361      	adds	r3, #97	; 0x61
 800643a:	2203      	movs	r2, #3
 800643c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	212c      	movs	r1, #44	; 0x2c
 8006444:	fb01 f303 	mul.w	r3, r1, r3
 8006448:	4413      	add	r3, r2
 800644a:	333d      	adds	r3, #61	; 0x3d
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d112      	bne.n	8006478 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	212c      	movs	r1, #44	; 0x2c
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	4413      	add	r3, r2
 800645e:	333c      	adds	r3, #60	; 0x3c
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d108      	bne.n	8006478 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	212c      	movs	r1, #44	; 0x2c
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	4413      	add	r3, r2
 8006472:	333d      	adds	r3, #61	; 0x3d
 8006474:	2201      	movs	r2, #1
 8006476:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	4611      	mov	r1, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f006 f84b 	bl	800c51e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	4413      	add	r3, r2
 8006490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006494:	461a      	mov	r2, r3
 8006496:	2310      	movs	r3, #16
 8006498:	6093      	str	r3, [r2, #8]
}
 800649a:	e1e2      	b.n	8006862 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d164      	bne.n	800657c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d111      	bne.n	80064de <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	212c      	movs	r1, #44	; 0x2c
 80064c0:	fb01 f303 	mul.w	r3, r1, r3
 80064c4:	4413      	add	r3, r2
 80064c6:	3361      	adds	r3, #97	; 0x61
 80064c8:	2206      	movs	r2, #6
 80064ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	4611      	mov	r1, r2
 80064d6:	4618      	mov	r0, r3
 80064d8:	f006 f821 	bl	800c51e <USB_HC_Halt>
 80064dc:	e044      	b.n	8006568 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	212c      	movs	r1, #44	; 0x2c
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	4413      	add	r3, r2
 80064ea:	335c      	adds	r3, #92	; 0x5c
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	202c      	movs	r0, #44	; 0x2c
 80064f6:	fb00 f303 	mul.w	r3, r0, r3
 80064fa:	440b      	add	r3, r1
 80064fc:	335c      	adds	r3, #92	; 0x5c
 80064fe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	212c      	movs	r1, #44	; 0x2c
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	335c      	adds	r3, #92	; 0x5c
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b02      	cmp	r3, #2
 8006512:	d920      	bls.n	8006556 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	212c      	movs	r1, #44	; 0x2c
 800651a:	fb01 f303 	mul.w	r3, r1, r3
 800651e:	4413      	add	r3, r2
 8006520:	335c      	adds	r3, #92	; 0x5c
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	212c      	movs	r1, #44	; 0x2c
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	4413      	add	r3, r2
 8006532:	3360      	adds	r3, #96	; 0x60
 8006534:	2204      	movs	r2, #4
 8006536:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	b2d9      	uxtb	r1, r3
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	202c      	movs	r0, #44	; 0x2c
 8006542:	fb00 f303 	mul.w	r3, r0, r3
 8006546:	4413      	add	r3, r2
 8006548:	3360      	adds	r3, #96	; 0x60
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f013 fa20 	bl	8019994 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006554:	e008      	b.n	8006568 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	212c      	movs	r1, #44	; 0x2c
 800655c:	fb01 f303 	mul.w	r3, r1, r3
 8006560:	4413      	add	r3, r2
 8006562:	3360      	adds	r3, #96	; 0x60
 8006564:	2202      	movs	r2, #2
 8006566:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	4413      	add	r3, r2
 8006570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006574:	461a      	mov	r2, r3
 8006576:	2380      	movs	r3, #128	; 0x80
 8006578:	6093      	str	r3, [r2, #8]
}
 800657a:	e172      	b.n	8006862 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800658e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006592:	d11b      	bne.n	80065cc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	212c      	movs	r1, #44	; 0x2c
 800659a:	fb01 f303 	mul.w	r3, r1, r3
 800659e:	4413      	add	r3, r2
 80065a0:	3361      	adds	r3, #97	; 0x61
 80065a2:	2208      	movs	r2, #8
 80065a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	4611      	mov	r1, r2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f005 ffb4 	bl	800c51e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c2:	461a      	mov	r2, r3
 80065c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065c8:	6093      	str	r3, [r2, #8]
}
 80065ca:	e14a      	b.n	8006862 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b02      	cmp	r3, #2
 80065e0:	f040 813f 	bne.w	8006862 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	212c      	movs	r1, #44	; 0x2c
 80065ea:	fb01 f303 	mul.w	r3, r1, r3
 80065ee:	4413      	add	r3, r2
 80065f0:	3361      	adds	r3, #97	; 0x61
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d17d      	bne.n	80066f4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	212c      	movs	r1, #44	; 0x2c
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	4413      	add	r3, r2
 8006604:	3360      	adds	r3, #96	; 0x60
 8006606:	2201      	movs	r2, #1
 8006608:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	212c      	movs	r1, #44	; 0x2c
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	4413      	add	r3, r2
 8006616:	333f      	adds	r3, #63	; 0x3f
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d00a      	beq.n	8006634 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	212c      	movs	r1, #44	; 0x2c
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	4413      	add	r3, r2
 800662a:	333f      	adds	r3, #63	; 0x3f
 800662c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800662e:	2b03      	cmp	r3, #3
 8006630:	f040 8100 	bne.w	8006834 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d113      	bne.n	8006664 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	212c      	movs	r1, #44	; 0x2c
 8006642:	fb01 f303 	mul.w	r3, r1, r3
 8006646:	4413      	add	r3, r2
 8006648:	3355      	adds	r3, #85	; 0x55
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f083 0301 	eor.w	r3, r3, #1
 8006650:	b2d8      	uxtb	r0, r3
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	212c      	movs	r1, #44	; 0x2c
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	4413      	add	r3, r2
 800665e:	3355      	adds	r3, #85	; 0x55
 8006660:	4602      	mov	r2, r0
 8006662:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b01      	cmp	r3, #1
 800666a:	f040 80e3 	bne.w	8006834 <HCD_HC_OUT_IRQHandler+0x69c>
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	212c      	movs	r1, #44	; 0x2c
 8006674:	fb01 f303 	mul.w	r3, r1, r3
 8006678:	4413      	add	r3, r2
 800667a:	334c      	adds	r3, #76	; 0x4c
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80d8 	beq.w	8006834 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	212c      	movs	r1, #44	; 0x2c
 800668a:	fb01 f303 	mul.w	r3, r1, r3
 800668e:	4413      	add	r3, r2
 8006690:	334c      	adds	r3, #76	; 0x4c
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	202c      	movs	r0, #44	; 0x2c
 800669a:	fb00 f202 	mul.w	r2, r0, r2
 800669e:	440a      	add	r2, r1
 80066a0:	3240      	adds	r2, #64	; 0x40
 80066a2:	8812      	ldrh	r2, [r2, #0]
 80066a4:	4413      	add	r3, r2
 80066a6:	3b01      	subs	r3, #1
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	202c      	movs	r0, #44	; 0x2c
 80066ae:	fb00 f202 	mul.w	r2, r0, r2
 80066b2:	440a      	add	r2, r1
 80066b4:	3240      	adds	r2, #64	; 0x40
 80066b6:	8812      	ldrh	r2, [r2, #0]
 80066b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80b5 	beq.w	8006834 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	212c      	movs	r1, #44	; 0x2c
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	4413      	add	r3, r2
 80066d6:	3355      	adds	r3, #85	; 0x55
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f083 0301 	eor.w	r3, r3, #1
 80066de:	b2d8      	uxtb	r0, r3
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	212c      	movs	r1, #44	; 0x2c
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	4413      	add	r3, r2
 80066ec:	3355      	adds	r3, #85	; 0x55
 80066ee:	4602      	mov	r2, r0
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	e09f      	b.n	8006834 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	212c      	movs	r1, #44	; 0x2c
 80066fa:	fb01 f303 	mul.w	r3, r1, r3
 80066fe:	4413      	add	r3, r2
 8006700:	3361      	adds	r3, #97	; 0x61
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b03      	cmp	r3, #3
 8006706:	d109      	bne.n	800671c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	212c      	movs	r1, #44	; 0x2c
 800670e:	fb01 f303 	mul.w	r3, r1, r3
 8006712:	4413      	add	r3, r2
 8006714:	3360      	adds	r3, #96	; 0x60
 8006716:	2202      	movs	r2, #2
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	e08b      	b.n	8006834 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	212c      	movs	r1, #44	; 0x2c
 8006722:	fb01 f303 	mul.w	r3, r1, r3
 8006726:	4413      	add	r3, r2
 8006728:	3361      	adds	r3, #97	; 0x61
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b04      	cmp	r3, #4
 800672e:	d109      	bne.n	8006744 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	212c      	movs	r1, #44	; 0x2c
 8006736:	fb01 f303 	mul.w	r3, r1, r3
 800673a:	4413      	add	r3, r2
 800673c:	3360      	adds	r3, #96	; 0x60
 800673e:	2202      	movs	r2, #2
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	e077      	b.n	8006834 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	212c      	movs	r1, #44	; 0x2c
 800674a:	fb01 f303 	mul.w	r3, r1, r3
 800674e:	4413      	add	r3, r2
 8006750:	3361      	adds	r3, #97	; 0x61
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b05      	cmp	r3, #5
 8006756:	d109      	bne.n	800676c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	212c      	movs	r1, #44	; 0x2c
 800675e:	fb01 f303 	mul.w	r3, r1, r3
 8006762:	4413      	add	r3, r2
 8006764:	3360      	adds	r3, #96	; 0x60
 8006766:	2205      	movs	r2, #5
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	e063      	b.n	8006834 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	212c      	movs	r1, #44	; 0x2c
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	4413      	add	r3, r2
 8006778:	3361      	adds	r3, #97	; 0x61
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b06      	cmp	r3, #6
 800677e:	d009      	beq.n	8006794 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	212c      	movs	r1, #44	; 0x2c
 8006786:	fb01 f303 	mul.w	r3, r1, r3
 800678a:	4413      	add	r3, r2
 800678c:	3361      	adds	r3, #97	; 0x61
 800678e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006790:	2b08      	cmp	r3, #8
 8006792:	d14f      	bne.n	8006834 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	212c      	movs	r1, #44	; 0x2c
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	4413      	add	r3, r2
 80067a0:	335c      	adds	r3, #92	; 0x5c
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	202c      	movs	r0, #44	; 0x2c
 80067ac:	fb00 f303 	mul.w	r3, r0, r3
 80067b0:	440b      	add	r3, r1
 80067b2:	335c      	adds	r3, #92	; 0x5c
 80067b4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	212c      	movs	r1, #44	; 0x2c
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	4413      	add	r3, r2
 80067c2:	335c      	adds	r3, #92	; 0x5c
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d912      	bls.n	80067f0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	212c      	movs	r1, #44	; 0x2c
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	4413      	add	r3, r2
 80067d6:	335c      	adds	r3, #92	; 0x5c
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	212c      	movs	r1, #44	; 0x2c
 80067e2:	fb01 f303 	mul.w	r3, r1, r3
 80067e6:	4413      	add	r3, r2
 80067e8:	3360      	adds	r3, #96	; 0x60
 80067ea:	2204      	movs	r2, #4
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e021      	b.n	8006834 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	212c      	movs	r1, #44	; 0x2c
 80067f6:	fb01 f303 	mul.w	r3, r1, r3
 80067fa:	4413      	add	r3, r2
 80067fc:	3360      	adds	r3, #96	; 0x60
 80067fe:	2202      	movs	r2, #2
 8006800:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	4413      	add	r3, r2
 800680a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006818:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006820:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	4413      	add	r3, r2
 800682a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682e:	461a      	mov	r2, r3
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	4413      	add	r3, r2
 800683c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006840:	461a      	mov	r2, r3
 8006842:	2302      	movs	r3, #2
 8006844:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	b2d9      	uxtb	r1, r3
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	202c      	movs	r0, #44	; 0x2c
 8006850:	fb00 f303 	mul.w	r3, r0, r3
 8006854:	4413      	add	r3, r2
 8006856:	3360      	adds	r3, #96	; 0x60
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f013 f899 	bl	8019994 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006862:	bf00      	nop
 8006864:	3720      	adds	r7, #32
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b08a      	sub	sp, #40	; 0x28
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	0c5b      	lsrs	r3, r3, #17
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	091b      	lsrs	r3, r3, #4
 800689a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800689e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d004      	beq.n	80068b0 <HCD_RXQLVL_IRQHandler+0x46>
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b05      	cmp	r3, #5
 80068aa:	f000 80a9 	beq.w	8006a00 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80068ae:	e0aa      	b.n	8006a06 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 80a6 	beq.w	8006a04 <HCD_RXQLVL_IRQHandler+0x19a>
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	212c      	movs	r1, #44	; 0x2c
 80068be:	fb01 f303 	mul.w	r3, r1, r3
 80068c2:	4413      	add	r3, r2
 80068c4:	3344      	adds	r3, #68	; 0x44
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 809b 	beq.w	8006a04 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	212c      	movs	r1, #44	; 0x2c
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	4413      	add	r3, r2
 80068da:	3350      	adds	r3, #80	; 0x50
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	441a      	add	r2, r3
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	202c      	movs	r0, #44	; 0x2c
 80068e8:	fb00 f303 	mul.w	r3, r0, r3
 80068ec:	440b      	add	r3, r1
 80068ee:	334c      	adds	r3, #76	; 0x4c
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d87a      	bhi.n	80069ec <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	212c      	movs	r1, #44	; 0x2c
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	4413      	add	r3, r2
 8006906:	3344      	adds	r3, #68	; 0x44
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	b292      	uxth	r2, r2
 800690e:	4619      	mov	r1, r3
 8006910:	f005 f962 	bl	800bbd8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	212c      	movs	r1, #44	; 0x2c
 800691a:	fb01 f303 	mul.w	r3, r1, r3
 800691e:	4413      	add	r3, r2
 8006920:	3344      	adds	r3, #68	; 0x44
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	441a      	add	r2, r3
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	202c      	movs	r0, #44	; 0x2c
 800692e:	fb00 f303 	mul.w	r3, r0, r3
 8006932:	440b      	add	r3, r1
 8006934:	3344      	adds	r3, #68	; 0x44
 8006936:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	212c      	movs	r1, #44	; 0x2c
 800693e:	fb01 f303 	mul.w	r3, r1, r3
 8006942:	4413      	add	r3, r2
 8006944:	3350      	adds	r3, #80	; 0x50
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	441a      	add	r2, r3
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	202c      	movs	r0, #44	; 0x2c
 8006952:	fb00 f303 	mul.w	r3, r0, r3
 8006956:	440b      	add	r3, r1
 8006958:	3350      	adds	r3, #80	; 0x50
 800695a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	4413      	add	r3, r2
 8006964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	0cdb      	lsrs	r3, r3, #19
 800696c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006970:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	212c      	movs	r1, #44	; 0x2c
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	4413      	add	r3, r2
 800697e:	3340      	adds	r3, #64	; 0x40
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	4293      	cmp	r3, r2
 8006988:	d13c      	bne.n	8006a04 <HCD_RXQLVL_IRQHandler+0x19a>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d039      	beq.n	8006a04 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	4413      	add	r3, r2
 8006998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069a6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069ae:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069bc:	461a      	mov	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	212c      	movs	r1, #44	; 0x2c
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	4413      	add	r3, r2
 80069ce:	3354      	adds	r3, #84	; 0x54
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f083 0301 	eor.w	r3, r3, #1
 80069d6:	b2d8      	uxtb	r0, r3
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	212c      	movs	r1, #44	; 0x2c
 80069de:	fb01 f303 	mul.w	r3, r1, r3
 80069e2:	4413      	add	r3, r2
 80069e4:	3354      	adds	r3, #84	; 0x54
 80069e6:	4602      	mov	r2, r0
 80069e8:	701a      	strb	r2, [r3, #0]
      break;
 80069ea:	e00b      	b.n	8006a04 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	212c      	movs	r1, #44	; 0x2c
 80069f2:	fb01 f303 	mul.w	r3, r1, r3
 80069f6:	4413      	add	r3, r2
 80069f8:	3360      	adds	r3, #96	; 0x60
 80069fa:	2204      	movs	r2, #4
 80069fc:	701a      	strb	r2, [r3, #0]
      break;
 80069fe:	e001      	b.n	8006a04 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006a00:	bf00      	nop
 8006a02:	e000      	b.n	8006a06 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006a04:	bf00      	nop
  }
}
 8006a06:	bf00      	nop
 8006a08:	3728      	adds	r7, #40	; 0x28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b086      	sub	sp, #24
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a3a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d10b      	bne.n	8006a5e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d102      	bne.n	8006a56 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f012 ff83 	bl	801995c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f043 0302 	orr.w	r3, r3, #2
 8006a5c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d132      	bne.n	8006ace <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f043 0308 	orr.w	r3, r3, #8
 8006a6e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d126      	bne.n	8006ac8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d113      	bne.n	8006aaa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006a88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a8c:	d106      	bne.n	8006a9c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2102      	movs	r1, #2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f005 fa07 	bl	800bea8 <USB_InitFSLSPClkSel>
 8006a9a:	e011      	b.n	8006ac0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f005 fa00 	bl	800bea8 <USB_InitFSLSPClkSel>
 8006aa8:	e00a      	b.n	8006ac0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d106      	bne.n	8006ac0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006abe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f012 ff79 	bl	80199b8 <HAL_HCD_PortEnabled_Callback>
 8006ac6:	e002      	b.n	8006ace <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f012 ff83 	bl	80199d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b20      	cmp	r3, #32
 8006ad6:	d103      	bne.n	8006ae0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f043 0320 	orr.w	r3, r3, #32
 8006ade:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	6013      	str	r3, [r2, #0]
}
 8006aec:	bf00      	nop
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006afc:	4b19      	ldr	r3, [pc, #100]	; (8006b64 <HAL_PWREx_ConfigSupply+0x70>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d00a      	beq.n	8006b1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b08:	4b16      	ldr	r3, [pc, #88]	; (8006b64 <HAL_PWREx_ConfigSupply+0x70>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d001      	beq.n	8006b1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e01f      	b.n	8006b5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e01d      	b.n	8006b5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b1e:	4b11      	ldr	r3, [pc, #68]	; (8006b64 <HAL_PWREx_ConfigSupply+0x70>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f023 0207 	bic.w	r2, r3, #7
 8006b26:	490f      	ldr	r1, [pc, #60]	; (8006b64 <HAL_PWREx_ConfigSupply+0x70>)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b2e:	f7fb fab1 	bl	8002094 <HAL_GetTick>
 8006b32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b34:	e009      	b.n	8006b4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b36:	f7fb faad 	bl	8002094 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b44:	d901      	bls.n	8006b4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e007      	b.n	8006b5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b4a:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <HAL_PWREx_ConfigSupply+0x70>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b56:	d1ee      	bne.n	8006b36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	58024800 	.word	0x58024800

08006b68 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	4a04      	ldr	r2, [pc, #16]	; (8006b84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b76:	60d3      	str	r3, [r2, #12]
}
 8006b78:	bf00      	nop
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	58024800 	.word	0x58024800

08006b88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08c      	sub	sp, #48	; 0x30
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e39d      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 8087 	beq.w	8006cb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ba8:	4b88      	ldr	r3, [pc, #544]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bb2:	4b86      	ldr	r3, [pc, #536]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bba:	2b10      	cmp	r3, #16
 8006bbc:	d007      	beq.n	8006bce <HAL_RCC_OscConfig+0x46>
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	2b18      	cmp	r3, #24
 8006bc2:	d110      	bne.n	8006be6 <HAL_RCC_OscConfig+0x5e>
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d10b      	bne.n	8006be6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bce:	4b7f      	ldr	r3, [pc, #508]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d06c      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x12c>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d168      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e377      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bee:	d106      	bne.n	8006bfe <HAL_RCC_OscConfig+0x76>
 8006bf0:	4b76      	ldr	r3, [pc, #472]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a75      	ldr	r2, [pc, #468]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	e02e      	b.n	8006c5c <HAL_RCC_OscConfig+0xd4>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10c      	bne.n	8006c20 <HAL_RCC_OscConfig+0x98>
 8006c06:	4b71      	ldr	r3, [pc, #452]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a70      	ldr	r2, [pc, #448]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	4b6e      	ldr	r3, [pc, #440]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a6d      	ldr	r2, [pc, #436]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	e01d      	b.n	8006c5c <HAL_RCC_OscConfig+0xd4>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c28:	d10c      	bne.n	8006c44 <HAL_RCC_OscConfig+0xbc>
 8006c2a:	4b68      	ldr	r3, [pc, #416]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a67      	ldr	r2, [pc, #412]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	4b65      	ldr	r3, [pc, #404]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a64      	ldr	r2, [pc, #400]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	e00b      	b.n	8006c5c <HAL_RCC_OscConfig+0xd4>
 8006c44:	4b61      	ldr	r3, [pc, #388]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a60      	ldr	r2, [pc, #384]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c4e:	6013      	str	r3, [r2, #0]
 8006c50:	4b5e      	ldr	r3, [pc, #376]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a5d      	ldr	r2, [pc, #372]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d013      	beq.n	8006c8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c64:	f7fb fa16 	bl	8002094 <HAL_GetTick>
 8006c68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c6a:	e008      	b.n	8006c7e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c6c:	f7fb fa12 	bl	8002094 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b64      	cmp	r3, #100	; 0x64
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e32b      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c7e:	4b53      	ldr	r3, [pc, #332]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0f0      	beq.n	8006c6c <HAL_RCC_OscConfig+0xe4>
 8006c8a:	e014      	b.n	8006cb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8c:	f7fb fa02 	bl	8002094 <HAL_GetTick>
 8006c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c92:	e008      	b.n	8006ca6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c94:	f7fb f9fe 	bl	8002094 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b64      	cmp	r3, #100	; 0x64
 8006ca0:	d901      	bls.n	8006ca6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e317      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ca6:	4b49      	ldr	r3, [pc, #292]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1f0      	bne.n	8006c94 <HAL_RCC_OscConfig+0x10c>
 8006cb2:	e000      	b.n	8006cb6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 808c 	beq.w	8006ddc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cc4:	4b41      	ldr	r3, [pc, #260]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ccc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cce:	4b3f      	ldr	r3, [pc, #252]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <HAL_RCC_OscConfig+0x162>
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	2b18      	cmp	r3, #24
 8006cde:	d137      	bne.n	8006d50 <HAL_RCC_OscConfig+0x1c8>
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d132      	bne.n	8006d50 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cea:	4b38      	ldr	r3, [pc, #224]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <HAL_RCC_OscConfig+0x17a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e2e9      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d02:	4b32      	ldr	r3, [pc, #200]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f023 0219 	bic.w	r2, r3, #25
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	492f      	ldr	r1, [pc, #188]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d14:	f7fb f9be 	bl	8002094 <HAL_GetTick>
 8006d18:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d1c:	f7fb f9ba 	bl	8002094 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e2d3      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d2e:	4b27      	ldr	r3, [pc, #156]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0f0      	beq.n	8006d1c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d3a:	4b24      	ldr	r3, [pc, #144]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	061b      	lsls	r3, r3, #24
 8006d48:	4920      	ldr	r1, [pc, #128]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d4e:	e045      	b.n	8006ddc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d026      	beq.n	8006da6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d58:	4b1c      	ldr	r3, [pc, #112]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f023 0219 	bic.w	r2, r3, #25
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	4919      	ldr	r1, [pc, #100]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6a:	f7fb f993 	bl	8002094 <HAL_GetTick>
 8006d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d70:	e008      	b.n	8006d84 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d72:	f7fb f98f 	bl	8002094 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e2a8      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d84:	4b11      	ldr	r3, [pc, #68]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0f0      	beq.n	8006d72 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d90:	4b0e      	ldr	r3, [pc, #56]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	061b      	lsls	r3, r3, #24
 8006d9e:	490b      	ldr	r1, [pc, #44]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	604b      	str	r3, [r1, #4]
 8006da4:	e01a      	b.n	8006ddc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006da6:	4b09      	ldr	r3, [pc, #36]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a08      	ldr	r2, [pc, #32]	; (8006dcc <HAL_RCC_OscConfig+0x244>)
 8006dac:	f023 0301 	bic.w	r3, r3, #1
 8006db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db2:	f7fb f96f 	bl	8002094 <HAL_GetTick>
 8006db6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006db8:	e00a      	b.n	8006dd0 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dba:	f7fb f96b 	bl	8002094 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d903      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e284      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
 8006dcc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dd0:	4b96      	ldr	r3, [pc, #600]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1ee      	bne.n	8006dba <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0310 	and.w	r3, r3, #16
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d06a      	beq.n	8006ebe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006de8:	4b90      	ldr	r3, [pc, #576]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006df0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006df2:	4b8e      	ldr	r3, [pc, #568]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d007      	beq.n	8006e0e <HAL_RCC_OscConfig+0x286>
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b18      	cmp	r3, #24
 8006e02:	d11b      	bne.n	8006e3c <HAL_RCC_OscConfig+0x2b4>
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d116      	bne.n	8006e3c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e0e:	4b87      	ldr	r3, [pc, #540]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d005      	beq.n	8006e26 <HAL_RCC_OscConfig+0x29e>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	2b80      	cmp	r3, #128	; 0x80
 8006e20:	d001      	beq.n	8006e26 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e257      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e26:	4b81      	ldr	r3, [pc, #516]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	061b      	lsls	r3, r3, #24
 8006e34:	497d      	ldr	r1, [pc, #500]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e3a:	e040      	b.n	8006ebe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d023      	beq.n	8006e8c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e44:	4b79      	ldr	r3, [pc, #484]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a78      	ldr	r2, [pc, #480]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e50:	f7fb f920 	bl	8002094 <HAL_GetTick>
 8006e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e56:	e008      	b.n	8006e6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e58:	f7fb f91c 	bl	8002094 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e235      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e6a:	4b70      	ldr	r3, [pc, #448]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0f0      	beq.n	8006e58 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e76:	4b6d      	ldr	r3, [pc, #436]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	061b      	lsls	r3, r3, #24
 8006e84:	4969      	ldr	r1, [pc, #420]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60cb      	str	r3, [r1, #12]
 8006e8a:	e018      	b.n	8006ebe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e8c:	4b67      	ldr	r3, [pc, #412]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a66      	ldr	r2, [pc, #408]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fb f8fc 	bl	8002094 <HAL_GetTick>
 8006e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ea0:	f7fb f8f8 	bl	8002094 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e211      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006eb2:	4b5e      	ldr	r3, [pc, #376]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f0      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d036      	beq.n	8006f38 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d019      	beq.n	8006f06 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ed2:	4b56      	ldr	r3, [pc, #344]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed6:	4a55      	ldr	r2, [pc, #340]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006ed8:	f043 0301 	orr.w	r3, r3, #1
 8006edc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ede:	f7fb f8d9 	bl	8002094 <HAL_GetTick>
 8006ee2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ee6:	f7fb f8d5 	bl	8002094 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e1ee      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ef8:	4b4c      	ldr	r3, [pc, #304]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0f0      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x35e>
 8006f04:	e018      	b.n	8006f38 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f06:	4b49      	ldr	r3, [pc, #292]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0a:	4a48      	ldr	r2, [pc, #288]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006f0c:	f023 0301 	bic.w	r3, r3, #1
 8006f10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f12:	f7fb f8bf 	bl	8002094 <HAL_GetTick>
 8006f16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f18:	e008      	b.n	8006f2c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f1a:	f7fb f8bb 	bl	8002094 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e1d4      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f2c:	4b3f      	ldr	r3, [pc, #252]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1f0      	bne.n	8006f1a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0320 	and.w	r3, r3, #32
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d036      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d019      	beq.n	8006f80 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f4c:	4b37      	ldr	r3, [pc, #220]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a36      	ldr	r2, [pc, #216]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006f52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f58:	f7fb f89c 	bl	8002094 <HAL_GetTick>
 8006f5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f60:	f7fb f898 	bl	8002094 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e1b1      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f72:	4b2e      	ldr	r3, [pc, #184]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d0f0      	beq.n	8006f60 <HAL_RCC_OscConfig+0x3d8>
 8006f7e:	e018      	b.n	8006fb2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f80:	4b2a      	ldr	r3, [pc, #168]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a29      	ldr	r2, [pc, #164]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f8c:	f7fb f882 	bl	8002094 <HAL_GetTick>
 8006f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f94:	f7fb f87e 	bl	8002094 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e197      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fa6:	4b21      	ldr	r3, [pc, #132]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1f0      	bne.n	8006f94 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 8086 	beq.w	80070cc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fc0:	4b1b      	ldr	r3, [pc, #108]	; (8007030 <HAL_RCC_OscConfig+0x4a8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a1a      	ldr	r2, [pc, #104]	; (8007030 <HAL_RCC_OscConfig+0x4a8>)
 8006fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fcc:	f7fb f862 	bl	8002094 <HAL_GetTick>
 8006fd0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fd2:	e008      	b.n	8006fe6 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006fd4:	f7fb f85e 	bl	8002094 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b64      	cmp	r3, #100	; 0x64
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e177      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fe6:	4b12      	ldr	r3, [pc, #72]	; (8007030 <HAL_RCC_OscConfig+0x4a8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0f0      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d106      	bne.n	8007008 <HAL_RCC_OscConfig+0x480>
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffe:	4a0b      	ldr	r2, [pc, #44]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8007000:	f043 0301 	orr.w	r3, r3, #1
 8007004:	6713      	str	r3, [r2, #112]	; 0x70
 8007006:	e032      	b.n	800706e <HAL_RCC_OscConfig+0x4e6>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d111      	bne.n	8007034 <HAL_RCC_OscConfig+0x4ac>
 8007010:	4b06      	ldr	r3, [pc, #24]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8007012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007014:	4a05      	ldr	r2, [pc, #20]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8007016:	f023 0301 	bic.w	r3, r3, #1
 800701a:	6713      	str	r3, [r2, #112]	; 0x70
 800701c:	4b03      	ldr	r3, [pc, #12]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007020:	4a02      	ldr	r2, [pc, #8]	; (800702c <HAL_RCC_OscConfig+0x4a4>)
 8007022:	f023 0304 	bic.w	r3, r3, #4
 8007026:	6713      	str	r3, [r2, #112]	; 0x70
 8007028:	e021      	b.n	800706e <HAL_RCC_OscConfig+0x4e6>
 800702a:	bf00      	nop
 800702c:	58024400 	.word	0x58024400
 8007030:	58024800 	.word	0x58024800
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b05      	cmp	r3, #5
 800703a:	d10c      	bne.n	8007056 <HAL_RCC_OscConfig+0x4ce>
 800703c:	4b83      	ldr	r3, [pc, #524]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 800703e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007040:	4a82      	ldr	r2, [pc, #520]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 8007042:	f043 0304 	orr.w	r3, r3, #4
 8007046:	6713      	str	r3, [r2, #112]	; 0x70
 8007048:	4b80      	ldr	r3, [pc, #512]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 800704a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704c:	4a7f      	ldr	r2, [pc, #508]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 800704e:	f043 0301 	orr.w	r3, r3, #1
 8007052:	6713      	str	r3, [r2, #112]	; 0x70
 8007054:	e00b      	b.n	800706e <HAL_RCC_OscConfig+0x4e6>
 8007056:	4b7d      	ldr	r3, [pc, #500]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 8007058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705a:	4a7c      	ldr	r2, [pc, #496]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	6713      	str	r3, [r2, #112]	; 0x70
 8007062:	4b7a      	ldr	r3, [pc, #488]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	4a79      	ldr	r2, [pc, #484]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 8007068:	f023 0304 	bic.w	r3, r3, #4
 800706c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d015      	beq.n	80070a2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007076:	f7fb f80d 	bl	8002094 <HAL_GetTick>
 800707a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800707c:	e00a      	b.n	8007094 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800707e:	f7fb f809 	bl	8002094 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	f241 3288 	movw	r2, #5000	; 0x1388
 800708c:	4293      	cmp	r3, r2
 800708e:	d901      	bls.n	8007094 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e120      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007094:	4b6d      	ldr	r3, [pc, #436]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 8007096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0ee      	beq.n	800707e <HAL_RCC_OscConfig+0x4f6>
 80070a0:	e014      	b.n	80070cc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a2:	f7fa fff7 	bl	8002094 <HAL_GetTick>
 80070a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070a8:	e00a      	b.n	80070c0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070aa:	f7fa fff3 	bl	8002094 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e10a      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070c0:	4b62      	ldr	r3, [pc, #392]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80070c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1ee      	bne.n	80070aa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80ff 	beq.w	80072d4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80070d6:	4b5d      	ldr	r3, [pc, #372]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070de:	2b18      	cmp	r3, #24
 80070e0:	f000 80ba 	beq.w	8007258 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	f040 8095 	bne.w	8007218 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ee:	4b57      	ldr	r3, [pc, #348]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a56      	ldr	r2, [pc, #344]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80070f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fa:	f7fa ffcb 	bl	8002094 <HAL_GetTick>
 80070fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007102:	f7fa ffc7 	bl	8002094 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e0e0      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007114:	4b4d      	ldr	r3, [pc, #308]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1f0      	bne.n	8007102 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007120:	4b4a      	ldr	r3, [pc, #296]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 8007122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007124:	4b4a      	ldr	r3, [pc, #296]	; (8007250 <HAL_RCC_OscConfig+0x6c8>)
 8007126:	4013      	ands	r3, r2
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007130:	0112      	lsls	r2, r2, #4
 8007132:	430a      	orrs	r2, r1
 8007134:	4945      	ldr	r1, [pc, #276]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 8007136:	4313      	orrs	r3, r2
 8007138:	628b      	str	r3, [r1, #40]	; 0x28
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713e:	3b01      	subs	r3, #1
 8007140:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007148:	3b01      	subs	r3, #1
 800714a:	025b      	lsls	r3, r3, #9
 800714c:	b29b      	uxth	r3, r3
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	3b01      	subs	r3, #1
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007162:	3b01      	subs	r3, #1
 8007164:	061b      	lsls	r3, r3, #24
 8007166:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800716a:	4938      	ldr	r1, [pc, #224]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 800716c:	4313      	orrs	r3, r2
 800716e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007170:	4b36      	ldr	r3, [pc, #216]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	4a35      	ldr	r2, [pc, #212]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800717c:	4b33      	ldr	r3, [pc, #204]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 800717e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007180:	4b34      	ldr	r3, [pc, #208]	; (8007254 <HAL_RCC_OscConfig+0x6cc>)
 8007182:	4013      	ands	r3, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007188:	00d2      	lsls	r2, r2, #3
 800718a:	4930      	ldr	r1, [pc, #192]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 800718c:	4313      	orrs	r3, r2
 800718e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007190:	4b2e      	ldr	r3, [pc, #184]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	f023 020c 	bic.w	r2, r3, #12
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	492b      	ldr	r1, [pc, #172]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071a2:	4b2a      	ldr	r3, [pc, #168]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80071a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a6:	f023 0202 	bic.w	r2, r3, #2
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ae:	4927      	ldr	r1, [pc, #156]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071b4:	4b25      	ldr	r3, [pc, #148]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	4a24      	ldr	r2, [pc, #144]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80071ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c0:	4b22      	ldr	r3, [pc, #136]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	4a21      	ldr	r2, [pc, #132]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80071c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80071cc:	4b1f      	ldr	r3, [pc, #124]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80071ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d0:	4a1e      	ldr	r2, [pc, #120]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80071d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80071d8:	4b1c      	ldr	r3, [pc, #112]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	4a1b      	ldr	r2, [pc, #108]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80071de:	f043 0301 	orr.w	r3, r3, #1
 80071e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071e4:	4b19      	ldr	r3, [pc, #100]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a18      	ldr	r2, [pc, #96]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 80071ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f0:	f7fa ff50 	bl	8002094 <HAL_GetTick>
 80071f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071f8:	f7fa ff4c 	bl	8002094 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e065      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800720a:	4b10      	ldr	r3, [pc, #64]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f0      	beq.n	80071f8 <HAL_RCC_OscConfig+0x670>
 8007216:	e05d      	b.n	80072d4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007218:	4b0c      	ldr	r3, [pc, #48]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a0b      	ldr	r2, [pc, #44]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 800721e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007224:	f7fa ff36 	bl	8002094 <HAL_GetTick>
 8007228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800722a:	e008      	b.n	800723e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800722c:	f7fa ff32 	bl	8002094 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b02      	cmp	r3, #2
 8007238:	d901      	bls.n	800723e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e04b      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800723e:	4b03      	ldr	r3, [pc, #12]	; (800724c <HAL_RCC_OscConfig+0x6c4>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1f0      	bne.n	800722c <HAL_RCC_OscConfig+0x6a4>
 800724a:	e043      	b.n	80072d4 <HAL_RCC_OscConfig+0x74c>
 800724c:	58024400 	.word	0x58024400
 8007250:	fffffc0c 	.word	0xfffffc0c
 8007254:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007258:	4b21      	ldr	r3, [pc, #132]	; (80072e0 <HAL_RCC_OscConfig+0x758>)
 800725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800725e:	4b20      	ldr	r3, [pc, #128]	; (80072e0 <HAL_RCC_OscConfig+0x758>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007262:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	2b01      	cmp	r3, #1
 800726a:	d031      	beq.n	80072d0 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f003 0203 	and.w	r2, r3, #3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007276:	429a      	cmp	r2, r3
 8007278:	d12a      	bne.n	80072d0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	091b      	lsrs	r3, r3, #4
 800727e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007286:	429a      	cmp	r2, r3
 8007288:	d122      	bne.n	80072d0 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007296:	429a      	cmp	r2, r3
 8007298:	d11a      	bne.n	80072d0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	0a5b      	lsrs	r3, r3, #9
 800729e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d111      	bne.n	80072d0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	0c1b      	lsrs	r3, r3, #16
 80072b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d108      	bne.n	80072d0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	0e1b      	lsrs	r3, r3, #24
 80072c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d001      	beq.n	80072d4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e000      	b.n	80072d6 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3730      	adds	r7, #48	; 0x30
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	58024400 	.word	0x58024400

080072e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e19c      	b.n	8007632 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072f8:	4b8a      	ldr	r3, [pc, #552]	; (8007524 <HAL_RCC_ClockConfig+0x240>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d910      	bls.n	8007328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007306:	4b87      	ldr	r3, [pc, #540]	; (8007524 <HAL_RCC_ClockConfig+0x240>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f023 020f 	bic.w	r2, r3, #15
 800730e:	4985      	ldr	r1, [pc, #532]	; (8007524 <HAL_RCC_ClockConfig+0x240>)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007316:	4b83      	ldr	r3, [pc, #524]	; (8007524 <HAL_RCC_ClockConfig+0x240>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d001      	beq.n	8007328 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e184      	b.n	8007632 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d010      	beq.n	8007356 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	4b7b      	ldr	r3, [pc, #492]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007340:	429a      	cmp	r2, r3
 8007342:	d908      	bls.n	8007356 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007344:	4b78      	ldr	r3, [pc, #480]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	4975      	ldr	r1, [pc, #468]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 8007352:	4313      	orrs	r3, r2
 8007354:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d010      	beq.n	8007384 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	695a      	ldr	r2, [r3, #20]
 8007366:	4b70      	ldr	r3, [pc, #448]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800736e:	429a      	cmp	r2, r3
 8007370:	d908      	bls.n	8007384 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007372:	4b6d      	ldr	r3, [pc, #436]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	496a      	ldr	r1, [pc, #424]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 8007380:	4313      	orrs	r3, r2
 8007382:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	2b00      	cmp	r3, #0
 800738e:	d010      	beq.n	80073b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699a      	ldr	r2, [r3, #24]
 8007394:	4b64      	ldr	r3, [pc, #400]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800739c:	429a      	cmp	r2, r3
 800739e:	d908      	bls.n	80073b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073a0:	4b61      	ldr	r3, [pc, #388]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	495e      	ldr	r1, [pc, #376]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d010      	beq.n	80073e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69da      	ldr	r2, [r3, #28]
 80073c2:	4b59      	ldr	r3, [pc, #356]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d908      	bls.n	80073e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80073ce:	4b56      	ldr	r3, [pc, #344]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	4953      	ldr	r1, [pc, #332]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d010      	beq.n	800740e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	4b4d      	ldr	r3, [pc, #308]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	f003 030f 	and.w	r3, r3, #15
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d908      	bls.n	800740e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073fc:	4b4a      	ldr	r3, [pc, #296]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f023 020f 	bic.w	r2, r3, #15
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	4947      	ldr	r1, [pc, #284]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 800740a:	4313      	orrs	r3, r2
 800740c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d055      	beq.n	80074c6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800741a:	4b43      	ldr	r3, [pc, #268]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	4940      	ldr	r1, [pc, #256]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 8007428:	4313      	orrs	r3, r2
 800742a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d107      	bne.n	8007444 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007434:	4b3c      	ldr	r3, [pc, #240]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d121      	bne.n	8007484 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e0f6      	b.n	8007632 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	2b03      	cmp	r3, #3
 800744a:	d107      	bne.n	800745c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800744c:	4b36      	ldr	r3, [pc, #216]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d115      	bne.n	8007484 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0ea      	b.n	8007632 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d107      	bne.n	8007474 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007464:	4b30      	ldr	r3, [pc, #192]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746c:	2b00      	cmp	r3, #0
 800746e:	d109      	bne.n	8007484 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e0de      	b.n	8007632 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007474:	4b2c      	ldr	r3, [pc, #176]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e0d6      	b.n	8007632 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007484:	4b28      	ldr	r3, [pc, #160]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f023 0207 	bic.w	r2, r3, #7
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	4925      	ldr	r1, [pc, #148]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 8007492:	4313      	orrs	r3, r2
 8007494:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007496:	f7fa fdfd 	bl	8002094 <HAL_GetTick>
 800749a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800749c:	e00a      	b.n	80074b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800749e:	f7fa fdf9 	bl	8002094 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e0be      	b.n	8007632 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074b4:	4b1c      	ldr	r3, [pc, #112]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d1eb      	bne.n	800749e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d010      	beq.n	80074f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	429a      	cmp	r2, r3
 80074e0:	d208      	bcs.n	80074f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074e2:	4b11      	ldr	r3, [pc, #68]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	f023 020f 	bic.w	r2, r3, #15
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	490e      	ldr	r1, [pc, #56]	; (8007528 <HAL_RCC_ClockConfig+0x244>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074f4:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <HAL_RCC_ClockConfig+0x240>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d214      	bcs.n	800752c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007502:	4b08      	ldr	r3, [pc, #32]	; (8007524 <HAL_RCC_ClockConfig+0x240>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f023 020f 	bic.w	r2, r3, #15
 800750a:	4906      	ldr	r1, [pc, #24]	; (8007524 <HAL_RCC_ClockConfig+0x240>)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	4313      	orrs	r3, r2
 8007510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007512:	4b04      	ldr	r3, [pc, #16]	; (8007524 <HAL_RCC_ClockConfig+0x240>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 030f 	and.w	r3, r3, #15
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d005      	beq.n	800752c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e086      	b.n	8007632 <HAL_RCC_ClockConfig+0x34e>
 8007524:	52002000 	.word	0x52002000
 8007528:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d010      	beq.n	800755a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	4b3f      	ldr	r3, [pc, #252]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007544:	429a      	cmp	r2, r3
 8007546:	d208      	bcs.n	800755a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007548:	4b3c      	ldr	r3, [pc, #240]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	4939      	ldr	r1, [pc, #228]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 8007556:	4313      	orrs	r3, r2
 8007558:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0308 	and.w	r3, r3, #8
 8007562:	2b00      	cmp	r3, #0
 8007564:	d010      	beq.n	8007588 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695a      	ldr	r2, [r3, #20]
 800756a:	4b34      	ldr	r3, [pc, #208]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007572:	429a      	cmp	r2, r3
 8007574:	d208      	bcs.n	8007588 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007576:	4b31      	ldr	r3, [pc, #196]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	492e      	ldr	r1, [pc, #184]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 8007584:	4313      	orrs	r3, r2
 8007586:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0310 	and.w	r3, r3, #16
 8007590:	2b00      	cmp	r3, #0
 8007592:	d010      	beq.n	80075b6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	699a      	ldr	r2, [r3, #24]
 8007598:	4b28      	ldr	r3, [pc, #160]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d208      	bcs.n	80075b6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075a4:	4b25      	ldr	r3, [pc, #148]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	4922      	ldr	r1, [pc, #136]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0320 	and.w	r3, r3, #32
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d010      	beq.n	80075e4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	69da      	ldr	r2, [r3, #28]
 80075c6:	4b1d      	ldr	r3, [pc, #116]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d208      	bcs.n	80075e4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80075d2:	4b1a      	ldr	r3, [pc, #104]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	4917      	ldr	r1, [pc, #92]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80075e4:	f000 f834 	bl	8007650 <HAL_RCC_GetSysClockFreq>
 80075e8:	4602      	mov	r2, r0
 80075ea:	4b14      	ldr	r3, [pc, #80]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	0a1b      	lsrs	r3, r3, #8
 80075f0:	f003 030f 	and.w	r3, r3, #15
 80075f4:	4912      	ldr	r1, [pc, #72]	; (8007640 <HAL_RCC_ClockConfig+0x35c>)
 80075f6:	5ccb      	ldrb	r3, [r1, r3]
 80075f8:	f003 031f 	and.w	r3, r3, #31
 80075fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007600:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007602:	4b0e      	ldr	r3, [pc, #56]	; (800763c <HAL_RCC_ClockConfig+0x358>)
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	4a0d      	ldr	r2, [pc, #52]	; (8007640 <HAL_RCC_ClockConfig+0x35c>)
 800760c:	5cd3      	ldrb	r3, [r2, r3]
 800760e:	f003 031f 	and.w	r3, r3, #31
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	fa22 f303 	lsr.w	r3, r2, r3
 8007618:	4a0a      	ldr	r2, [pc, #40]	; (8007644 <HAL_RCC_ClockConfig+0x360>)
 800761a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800761c:	4a0a      	ldr	r2, [pc, #40]	; (8007648 <HAL_RCC_ClockConfig+0x364>)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007622:	4b0a      	ldr	r3, [pc, #40]	; (800764c <HAL_RCC_ClockConfig+0x368>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4618      	mov	r0, r3
 8007628:	f7fa fb10 	bl	8001c4c <HAL_InitTick>
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007630:	7bfb      	ldrb	r3, [r7, #15]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	58024400 	.word	0x58024400
 8007640:	0801b880 	.word	0x0801b880
 8007644:	24000004 	.word	0x24000004
 8007648:	24000000 	.word	0x24000000
 800764c:	24000008 	.word	0x24000008

08007650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007650:	b480      	push	{r7}
 8007652:	b089      	sub	sp, #36	; 0x24
 8007654:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007656:	4bb3      	ldr	r3, [pc, #716]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800765e:	2b18      	cmp	r3, #24
 8007660:	f200 8155 	bhi.w	800790e <HAL_RCC_GetSysClockFreq+0x2be>
 8007664:	a201      	add	r2, pc, #4	; (adr r2, 800766c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	080076d1 	.word	0x080076d1
 8007670:	0800790f 	.word	0x0800790f
 8007674:	0800790f 	.word	0x0800790f
 8007678:	0800790f 	.word	0x0800790f
 800767c:	0800790f 	.word	0x0800790f
 8007680:	0800790f 	.word	0x0800790f
 8007684:	0800790f 	.word	0x0800790f
 8007688:	0800790f 	.word	0x0800790f
 800768c:	080076f7 	.word	0x080076f7
 8007690:	0800790f 	.word	0x0800790f
 8007694:	0800790f 	.word	0x0800790f
 8007698:	0800790f 	.word	0x0800790f
 800769c:	0800790f 	.word	0x0800790f
 80076a0:	0800790f 	.word	0x0800790f
 80076a4:	0800790f 	.word	0x0800790f
 80076a8:	0800790f 	.word	0x0800790f
 80076ac:	080076fd 	.word	0x080076fd
 80076b0:	0800790f 	.word	0x0800790f
 80076b4:	0800790f 	.word	0x0800790f
 80076b8:	0800790f 	.word	0x0800790f
 80076bc:	0800790f 	.word	0x0800790f
 80076c0:	0800790f 	.word	0x0800790f
 80076c4:	0800790f 	.word	0x0800790f
 80076c8:	0800790f 	.word	0x0800790f
 80076cc:	08007703 	.word	0x08007703
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076d0:	4b94      	ldr	r3, [pc, #592]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0320 	and.w	r3, r3, #32
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d009      	beq.n	80076f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076dc:	4b91      	ldr	r3, [pc, #580]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	08db      	lsrs	r3, r3, #3
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	4a90      	ldr	r2, [pc, #576]	; (8007928 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076e8:	fa22 f303 	lsr.w	r3, r2, r3
 80076ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80076ee:	e111      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80076f0:	4b8d      	ldr	r3, [pc, #564]	; (8007928 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076f2:	61bb      	str	r3, [r7, #24]
    break;
 80076f4:	e10e      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80076f6:	4b8d      	ldr	r3, [pc, #564]	; (800792c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076f8:	61bb      	str	r3, [r7, #24]
    break;
 80076fa:	e10b      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80076fc:	4b8c      	ldr	r3, [pc, #560]	; (8007930 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80076fe:	61bb      	str	r3, [r7, #24]
    break;
 8007700:	e108      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007702:	4b88      	ldr	r3, [pc, #544]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800770c:	4b85      	ldr	r3, [pc, #532]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800770e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007710:	091b      	lsrs	r3, r3, #4
 8007712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007716:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007718:	4b82      	ldr	r3, [pc, #520]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007722:	4b80      	ldr	r3, [pc, #512]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007726:	08db      	lsrs	r3, r3, #3
 8007728:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	fb02 f303 	mul.w	r3, r2, r3
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 80e1 	beq.w	8007908 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b02      	cmp	r3, #2
 800774a:	f000 8083 	beq.w	8007854 <HAL_RCC_GetSysClockFreq+0x204>
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2b02      	cmp	r3, #2
 8007752:	f200 80a1 	bhi.w	8007898 <HAL_RCC_GetSysClockFreq+0x248>
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <HAL_RCC_GetSysClockFreq+0x114>
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d056      	beq.n	8007810 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007762:	e099      	b.n	8007898 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007764:	4b6f      	ldr	r3, [pc, #444]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b00      	cmp	r3, #0
 800776e:	d02d      	beq.n	80077cc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007770:	4b6c      	ldr	r3, [pc, #432]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	08db      	lsrs	r3, r3, #3
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	4a6b      	ldr	r2, [pc, #428]	; (8007928 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
 8007780:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779a:	4b62      	ldr	r3, [pc, #392]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007934 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80077ca:	e087      	b.n	80078dc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007938 <HAL_RCC_GetSysClockFreq+0x2e8>
 80077da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077de:	4b51      	ldr	r3, [pc, #324]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80077f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007934 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800780e:	e065      	b.n	80078dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800793c <HAL_RCC_GetSysClockFreq+0x2ec>
 800781e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007822:	4b40      	ldr	r3, [pc, #256]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782a:	ee07 3a90 	vmov	s15, r3
 800782e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007832:	ed97 6a02 	vldr	s12, [r7, #8]
 8007836:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007934 <HAL_RCC_GetSysClockFreq+0x2e4>
 800783a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007852:	e043      	b.n	80078dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007940 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007866:	4b2f      	ldr	r3, [pc, #188]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007876:	ed97 6a02 	vldr	s12, [r7, #8]
 800787a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007934 <HAL_RCC_GetSysClockFreq+0x2e4>
 800787e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800788a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007896:	e021      	b.n	80078dc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800793c <HAL_RCC_GetSysClockFreq+0x2ec>
 80078a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078aa:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80078be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007934 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078da:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80078dc:	4b11      	ldr	r3, [pc, #68]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e0:	0a5b      	lsrs	r3, r3, #9
 80078e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e6:	3301      	adds	r3, #1
 80078e8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80078f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007900:	ee17 3a90 	vmov	r3, s15
 8007904:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007906:	e005      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	61bb      	str	r3, [r7, #24]
    break;
 800790c:	e002      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800790e:	4b07      	ldr	r3, [pc, #28]	; (800792c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007910:	61bb      	str	r3, [r7, #24]
    break;
 8007912:	bf00      	nop
  }

  return sysclockfreq;
 8007914:	69bb      	ldr	r3, [r7, #24]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3724      	adds	r7, #36	; 0x24
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	58024400 	.word	0x58024400
 8007928:	03d09000 	.word	0x03d09000
 800792c:	003d0900 	.word	0x003d0900
 8007930:	007a1200 	.word	0x007a1200
 8007934:	46000000 	.word	0x46000000
 8007938:	4c742400 	.word	0x4c742400
 800793c:	4a742400 	.word	0x4a742400
 8007940:	4af42400 	.word	0x4af42400

08007944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800794a:	f7ff fe81 	bl	8007650 <HAL_RCC_GetSysClockFreq>
 800794e:	4602      	mov	r2, r0
 8007950:	4b10      	ldr	r3, [pc, #64]	; (8007994 <HAL_RCC_GetHCLKFreq+0x50>)
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	0a1b      	lsrs	r3, r3, #8
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	490f      	ldr	r1, [pc, #60]	; (8007998 <HAL_RCC_GetHCLKFreq+0x54>)
 800795c:	5ccb      	ldrb	r3, [r1, r3]
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	fa22 f303 	lsr.w	r3, r2, r3
 8007966:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007968:	4b0a      	ldr	r3, [pc, #40]	; (8007994 <HAL_RCC_GetHCLKFreq+0x50>)
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	f003 030f 	and.w	r3, r3, #15
 8007970:	4a09      	ldr	r2, [pc, #36]	; (8007998 <HAL_RCC_GetHCLKFreq+0x54>)
 8007972:	5cd3      	ldrb	r3, [r2, r3]
 8007974:	f003 031f 	and.w	r3, r3, #31
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	fa22 f303 	lsr.w	r3, r2, r3
 800797e:	4a07      	ldr	r2, [pc, #28]	; (800799c <HAL_RCC_GetHCLKFreq+0x58>)
 8007980:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007982:	4a07      	ldr	r2, [pc, #28]	; (80079a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007988:	4b04      	ldr	r3, [pc, #16]	; (800799c <HAL_RCC_GetHCLKFreq+0x58>)
 800798a:	681b      	ldr	r3, [r3, #0]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	58024400 	.word	0x58024400
 8007998:	0801b880 	.word	0x0801b880
 800799c:	24000004 	.word	0x24000004
 80079a0:	24000000 	.word	0x24000000

080079a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80079a8:	f7ff ffcc 	bl	8007944 <HAL_RCC_GetHCLKFreq>
 80079ac:	4602      	mov	r2, r0
 80079ae:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	091b      	lsrs	r3, r3, #4
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	4904      	ldr	r1, [pc, #16]	; (80079cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80079ba:	5ccb      	ldrb	r3, [r1, r3]
 80079bc:	f003 031f 	and.w	r3, r3, #31
 80079c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	58024400 	.word	0x58024400
 80079cc:	0801b880 	.word	0x0801b880

080079d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80079d4:	f7ff ffb6 	bl	8007944 <HAL_RCC_GetHCLKFreq>
 80079d8:	4602      	mov	r2, r0
 80079da:	4b06      	ldr	r3, [pc, #24]	; (80079f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	0a1b      	lsrs	r3, r3, #8
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	4904      	ldr	r1, [pc, #16]	; (80079f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079e6:	5ccb      	ldrb	r3, [r1, r3]
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	58024400 	.word	0x58024400
 80079f8:	0801b880 	.word	0x0801b880

080079fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	223f      	movs	r2, #63	; 0x3f
 8007a0a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a0c:	4b1a      	ldr	r3, [pc, #104]	; (8007a78 <HAL_RCC_GetClockConfig+0x7c>)
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	f003 0207 	and.w	r2, r3, #7
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007a18:	4b17      	ldr	r3, [pc, #92]	; (8007a78 <HAL_RCC_GetClockConfig+0x7c>)
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007a24:	4b14      	ldr	r3, [pc, #80]	; (8007a78 <HAL_RCC_GetClockConfig+0x7c>)
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	f003 020f 	and.w	r2, r3, #15
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007a30:	4b11      	ldr	r3, [pc, #68]	; (8007a78 <HAL_RCC_GetClockConfig+0x7c>)
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007a3c:	4b0e      	ldr	r3, [pc, #56]	; (8007a78 <HAL_RCC_GetClockConfig+0x7c>)
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007a48:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <HAL_RCC_GetClockConfig+0x7c>)
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007a54:	4b08      	ldr	r3, [pc, #32]	; (8007a78 <HAL_RCC_GetClockConfig+0x7c>)
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a60:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <HAL_RCC_GetClockConfig+0x80>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 020f 	and.w	r2, r3, #15
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	601a      	str	r2, [r3, #0]
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	58024400 	.word	0x58024400
 8007a7c:	52002000 	.word	0x52002000

08007a80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a88:	2300      	movs	r3, #0
 8007a8a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d03f      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007aa4:	d02a      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007aa6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007aaa:	d824      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ab0:	d018      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ab6:	d81e      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ac0:	d007      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007ac2:	e018      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac4:	4ba4      	ldr	r3, [pc, #656]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	4aa3      	ldr	r2, [pc, #652]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ace:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ad0:	e015      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	2102      	movs	r1, #2
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f001 f989 	bl	8008df0 <RCCEx_PLL2_Config>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ae2:	e00c      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3324      	adds	r3, #36	; 0x24
 8007ae8:	2102      	movs	r1, #2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f001 fa32 	bl	8008f54 <RCCEx_PLL3_Config>
 8007af0:	4603      	mov	r3, r0
 8007af2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007af4:	e003      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	75fb      	strb	r3, [r7, #23]
      break;
 8007afa:	e000      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d109      	bne.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b04:	4b94      	ldr	r3, [pc, #592]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b10:	4991      	ldr	r1, [pc, #580]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	650b      	str	r3, [r1, #80]	; 0x50
 8007b16:	e001      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d03d      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d826      	bhi.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007b30:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b36:	bf00      	nop
 8007b38:	08007b4d 	.word	0x08007b4d
 8007b3c:	08007b5b 	.word	0x08007b5b
 8007b40:	08007b6d 	.word	0x08007b6d
 8007b44:	08007b85 	.word	0x08007b85
 8007b48:	08007b85 	.word	0x08007b85
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4c:	4b82      	ldr	r3, [pc, #520]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	4a81      	ldr	r2, [pc, #516]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b58:	e015      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	2100      	movs	r1, #0
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 f945 	bl	8008df0 <RCCEx_PLL2_Config>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b6a:	e00c      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3324      	adds	r3, #36	; 0x24
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f001 f9ee 	bl	8008f54 <RCCEx_PLL3_Config>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b7c:	e003      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	75fb      	strb	r3, [r7, #23]
      break;
 8007b82:	e000      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d109      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b8c:	4b72      	ldr	r3, [pc, #456]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b90:	f023 0207 	bic.w	r2, r3, #7
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b98:	496f      	ldr	r1, [pc, #444]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	650b      	str	r3, [r1, #80]	; 0x50
 8007b9e:	e001      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d051      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007bb6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007bba:	d036      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007bbc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007bc0:	d830      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bc6:	d032      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007bc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bcc:	d82a      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007bce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bd2:	d02e      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007bd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bd8:	d824      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bde:	d018      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007be4:	d81e      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8007bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bee:	d007      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007bf0:	e018      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bf2:	4b59      	ldr	r3, [pc, #356]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf6:	4a58      	ldr	r2, [pc, #352]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bfe:	e019      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3304      	adds	r3, #4
 8007c04:	2100      	movs	r1, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 f8f2 	bl	8008df0 <RCCEx_PLL2_Config>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c10:	e010      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3324      	adds	r3, #36	; 0x24
 8007c16:	2100      	movs	r1, #0
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f001 f99b 	bl	8008f54 <RCCEx_PLL3_Config>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c22:	e007      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	75fb      	strb	r3, [r7, #23]
      break;
 8007c28:	e004      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007c2a:	bf00      	nop
 8007c2c:	e002      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007c2e:	bf00      	nop
 8007c30:	e000      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c3a:	4b47      	ldr	r3, [pc, #284]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c48:	4943      	ldr	r1, [pc, #268]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	658b      	str	r3, [r1, #88]	; 0x58
 8007c4e:	e001      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d051      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c66:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007c6a:	d036      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007c6c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007c70:	d830      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c76:	d032      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c7c:	d82a      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c82:	d02e      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007c84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c88:	d824      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c8e:	d018      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c94:	d81e      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007c9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c9e:	d007      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007ca0:	e018      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ca2:	4b2d      	ldr	r3, [pc, #180]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	4a2c      	ldr	r2, [pc, #176]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007cae:	e019      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f001 f89a 	bl	8008df0 <RCCEx_PLL2_Config>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007cc0:	e010      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3324      	adds	r3, #36	; 0x24
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 f943 	bl	8008f54 <RCCEx_PLL3_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007cd2:	e007      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd8:	e004      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007cda:	bf00      	nop
 8007cdc:	e002      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007cde:	bf00      	nop
 8007ce0:	e000      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10a      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007cea:	4b1b      	ldr	r3, [pc, #108]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007cf8:	4917      	ldr	r1, [pc, #92]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	658b      	str	r3, [r1, #88]	; 0x58
 8007cfe:	e001      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d035      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d14:	2b30      	cmp	r3, #48	; 0x30
 8007d16:	d01c      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007d18:	2b30      	cmp	r3, #48	; 0x30
 8007d1a:	d817      	bhi.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007d1c:	2b20      	cmp	r3, #32
 8007d1e:	d00c      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d813      	bhi.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d019      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007d28:	2b10      	cmp	r3, #16
 8007d2a:	d10f      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d30:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007d38:	e011      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	2102      	movs	r1, #2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f001 f855 	bl	8008df0 <RCCEx_PLL2_Config>
 8007d46:	4603      	mov	r3, r0
 8007d48:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007d4a:	e008      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d50:	e005      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8007d52:	bf00      	nop
 8007d54:	e003      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007d56:	bf00      	nop
 8007d58:	58024400 	.word	0x58024400
      break;
 8007d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d109      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007d64:	4ba3      	ldr	r3, [pc, #652]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d70:	49a0      	ldr	r1, [pc, #640]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d76:	e001      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d047      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d90:	d030      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007d92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d96:	d82a      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007d98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d9c:	d02c      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007da2:	d824      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007da8:	d018      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dae:	d81e      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db8:	d007      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007dba:	e018      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dbc:	4b8d      	ldr	r3, [pc, #564]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	4a8c      	ldr	r2, [pc, #560]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007dc8:	e017      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	2100      	movs	r1, #0
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f001 f80d 	bl	8008df0 <RCCEx_PLL2_Config>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007dda:	e00e      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3324      	adds	r3, #36	; 0x24
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 f8b6 	bl	8008f54 <RCCEx_PLL3_Config>
 8007de8:	4603      	mov	r3, r0
 8007dea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007dec:	e005      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	75fb      	strb	r3, [r7, #23]
      break;
 8007df2:	e002      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007df4:	bf00      	nop
 8007df6:	e000      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d109      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e00:	4b7c      	ldr	r3, [pc, #496]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e04:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0c:	4979      	ldr	r1, [pc, #484]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	650b      	str	r3, [r1, #80]	; 0x50
 8007e12:	e001      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d049      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e2c:	d02e      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e32:	d828      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007e34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e38:	d02a      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e3e:	d822      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007e40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e44:	d026      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e4a:	d81c      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e50:	d010      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e56:	d816      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01d      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e60:	d111      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3304      	adds	r3, #4
 8007e66:	2101      	movs	r1, #1
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 ffc1 	bl	8008df0 <RCCEx_PLL2_Config>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e72:	e012      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3324      	adds	r3, #36	; 0x24
 8007e78:	2101      	movs	r1, #1
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 f86a 	bl	8008f54 <RCCEx_PLL3_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e84:	e009      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	75fb      	strb	r3, [r7, #23]
      break;
 8007e8a:	e006      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e8c:	bf00      	nop
 8007e8e:	e004      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e90:	bf00      	nop
 8007e92:	e002      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e94:	bf00      	nop
 8007e96:	e000      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d109      	bne.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ea0:	4b54      	ldr	r3, [pc, #336]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eac:	4951      	ldr	r1, [pc, #324]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	650b      	str	r3, [r1, #80]	; 0x50
 8007eb2:	e001      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d04b      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ece:	d02e      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ed4:	d828      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eda:	d02a      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee0:	d822      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007ee2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ee6:	d026      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007eec:	d81c      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef2:	d010      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef8:	d816      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d01d      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f02:	d111      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3304      	adds	r3, #4
 8007f08:	2101      	movs	r1, #1
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 ff70 	bl	8008df0 <RCCEx_PLL2_Config>
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007f14:	e012      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3324      	adds	r3, #36	; 0x24
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 f819 	bl	8008f54 <RCCEx_PLL3_Config>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007f26:	e009      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f2c:	e006      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007f2e:	bf00      	nop
 8007f30:	e004      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007f32:	bf00      	nop
 8007f34:	e002      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007f36:	bf00      	nop
 8007f38:	e000      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f42:	4b2c      	ldr	r3, [pc, #176]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f50:	4928      	ldr	r1, [pc, #160]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	658b      	str	r3, [r1, #88]	; 0x58
 8007f56:	e001      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d02f      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f70:	d00e      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f76:	d814      	bhi.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d015      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f80:	d10f      	bne.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f82:	4b1c      	ldr	r3, [pc, #112]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f86:	4a1b      	ldr	r2, [pc, #108]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f8e:	e00c      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3304      	adds	r3, #4
 8007f94:	2101      	movs	r1, #1
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 ff2a 	bl	8008df0 <RCCEx_PLL2_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007fa0:	e003      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa6:	e000      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d109      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007fb0:	4b10      	ldr	r3, [pc, #64]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fbc:	490d      	ldr	r1, [pc, #52]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	650b      	str	r3, [r1, #80]	; 0x50
 8007fc2:	e001      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d034      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d81d      	bhi.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8007fdc:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe2:	bf00      	nop
 8007fe4:	0800801f 	.word	0x0800801f
 8007fe8:	08007ff9 	.word	0x08007ff9
 8007fec:	08008007 	.word	0x08008007
 8007ff0:	0800801f 	.word	0x0800801f
 8007ff4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ff8:	4bb1      	ldr	r3, [pc, #708]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	4ab0      	ldr	r2, [pc, #704]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008004:	e00c      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3304      	adds	r3, #4
 800800a:	2102      	movs	r1, #2
 800800c:	4618      	mov	r0, r3
 800800e:	f000 feef 	bl	8008df0 <RCCEx_PLL2_Config>
 8008012:	4603      	mov	r3, r0
 8008014:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008016:	e003      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	75fb      	strb	r3, [r7, #23]
      break;
 800801c:	e000      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800801e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008026:	4ba6      	ldr	r3, [pc, #664]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802a:	f023 0203 	bic.w	r2, r3, #3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008032:	49a3      	ldr	r1, [pc, #652]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008034:	4313      	orrs	r3, r2
 8008036:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008038:	e001      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 8086 	beq.w	8008158 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800804c:	4b9d      	ldr	r3, [pc, #628]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a9c      	ldr	r2, [pc, #624]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008058:	f7fa f81c 	bl	8002094 <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800805e:	e009      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008060:	f7fa f818 	bl	8002094 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b64      	cmp	r3, #100	; 0x64
 800806c:	d902      	bls.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	75fb      	strb	r3, [r7, #23]
        break;
 8008072:	e005      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008074:	4b93      	ldr	r3, [pc, #588]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0ef      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d166      	bne.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008086:	4b8e      	ldr	r3, [pc, #568]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008088:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008090:	4053      	eors	r3, r2
 8008092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008096:	2b00      	cmp	r3, #0
 8008098:	d013      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800809a:	4b89      	ldr	r3, [pc, #548]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800809c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080a4:	4b86      	ldr	r3, [pc, #536]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a8:	4a85      	ldr	r2, [pc, #532]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080b0:	4b83      	ldr	r3, [pc, #524]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b4:	4a82      	ldr	r2, [pc, #520]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80080bc:	4a80      	ldr	r2, [pc, #512]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080cc:	d115      	bne.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ce:	f7f9 ffe1 	bl	8002094 <HAL_GetTick>
 80080d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080d4:	e00b      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080d6:	f7f9 ffdd 	bl	8002094 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d902      	bls.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	75fb      	strb	r3, [r7, #23]
            break;
 80080ec:	e005      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080ee:	4b74      	ldr	r3, [pc, #464]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d0ed      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d126      	bne.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800810a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800810e:	d10d      	bne.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8008110:	4b6b      	ldr	r3, [pc, #428]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800811e:	0919      	lsrs	r1, r3, #4
 8008120:	4b69      	ldr	r3, [pc, #420]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008122:	400b      	ands	r3, r1
 8008124:	4966      	ldr	r1, [pc, #408]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008126:	4313      	orrs	r3, r2
 8008128:	610b      	str	r3, [r1, #16]
 800812a:	e005      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800812c:	4b64      	ldr	r3, [pc, #400]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	4a63      	ldr	r2, [pc, #396]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008132:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008136:	6113      	str	r3, [r2, #16]
 8008138:	4b61      	ldr	r3, [pc, #388]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800813a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008146:	495e      	ldr	r1, [pc, #376]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008148:	4313      	orrs	r3, r2
 800814a:	670b      	str	r3, [r1, #112]	; 0x70
 800814c:	e004      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800814e:	7dfb      	ldrb	r3, [r7, #23]
 8008150:	75bb      	strb	r3, [r7, #22]
 8008152:	e001      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	d07e      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008168:	2b28      	cmp	r3, #40	; 0x28
 800816a:	d867      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800816c:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800816e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008172:	bf00      	nop
 8008174:	08008243 	.word	0x08008243
 8008178:	0800823d 	.word	0x0800823d
 800817c:	0800823d 	.word	0x0800823d
 8008180:	0800823d 	.word	0x0800823d
 8008184:	0800823d 	.word	0x0800823d
 8008188:	0800823d 	.word	0x0800823d
 800818c:	0800823d 	.word	0x0800823d
 8008190:	0800823d 	.word	0x0800823d
 8008194:	08008219 	.word	0x08008219
 8008198:	0800823d 	.word	0x0800823d
 800819c:	0800823d 	.word	0x0800823d
 80081a0:	0800823d 	.word	0x0800823d
 80081a4:	0800823d 	.word	0x0800823d
 80081a8:	0800823d 	.word	0x0800823d
 80081ac:	0800823d 	.word	0x0800823d
 80081b0:	0800823d 	.word	0x0800823d
 80081b4:	0800822b 	.word	0x0800822b
 80081b8:	0800823d 	.word	0x0800823d
 80081bc:	0800823d 	.word	0x0800823d
 80081c0:	0800823d 	.word	0x0800823d
 80081c4:	0800823d 	.word	0x0800823d
 80081c8:	0800823d 	.word	0x0800823d
 80081cc:	0800823d 	.word	0x0800823d
 80081d0:	0800823d 	.word	0x0800823d
 80081d4:	08008243 	.word	0x08008243
 80081d8:	0800823d 	.word	0x0800823d
 80081dc:	0800823d 	.word	0x0800823d
 80081e0:	0800823d 	.word	0x0800823d
 80081e4:	0800823d 	.word	0x0800823d
 80081e8:	0800823d 	.word	0x0800823d
 80081ec:	0800823d 	.word	0x0800823d
 80081f0:	0800823d 	.word	0x0800823d
 80081f4:	08008243 	.word	0x08008243
 80081f8:	0800823d 	.word	0x0800823d
 80081fc:	0800823d 	.word	0x0800823d
 8008200:	0800823d 	.word	0x0800823d
 8008204:	0800823d 	.word	0x0800823d
 8008208:	0800823d 	.word	0x0800823d
 800820c:	0800823d 	.word	0x0800823d
 8008210:	0800823d 	.word	0x0800823d
 8008214:	08008243 	.word	0x08008243
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	2101      	movs	r1, #1
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fde6 	bl	8008df0 <RCCEx_PLL2_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008228:	e00c      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3324      	adds	r3, #36	; 0x24
 800822e:	2101      	movs	r1, #1
 8008230:	4618      	mov	r0, r3
 8008232:	f000 fe8f 	bl	8008f54 <RCCEx_PLL3_Config>
 8008236:	4603      	mov	r3, r0
 8008238:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800823a:	e003      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	75fb      	strb	r3, [r7, #23]
      break;
 8008240:	e000      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8008242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008244:	7dfb      	ldrb	r3, [r7, #23]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d109      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800824a:	4b1d      	ldr	r3, [pc, #116]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800824c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008256:	491a      	ldr	r1, [pc, #104]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008258:	4313      	orrs	r3, r2
 800825a:	654b      	str	r3, [r1, #84]	; 0x54
 800825c:	e001      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d03e      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008272:	2b05      	cmp	r3, #5
 8008274:	d820      	bhi.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8008276:	a201      	add	r2, pc, #4	; (adr r2, 800827c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	080082cd 	.word	0x080082cd
 8008280:	08008295 	.word	0x08008295
 8008284:	080082a7 	.word	0x080082a7
 8008288:	080082cd 	.word	0x080082cd
 800828c:	080082cd 	.word	0x080082cd
 8008290:	080082cd 	.word	0x080082cd
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3304      	adds	r3, #4
 8008298:	2101      	movs	r1, #1
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fda8 	bl	8008df0 <RCCEx_PLL2_Config>
 80082a0:	4603      	mov	r3, r0
 80082a2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80082a4:	e013      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3324      	adds	r3, #36	; 0x24
 80082aa:	2101      	movs	r1, #1
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fe51 	bl	8008f54 <RCCEx_PLL3_Config>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80082b6:	e00a      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	75fb      	strb	r3, [r7, #23]
      break;
 80082bc:	e007      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80082be:	bf00      	nop
 80082c0:	58024400 	.word	0x58024400
 80082c4:	58024800 	.word	0x58024800
 80082c8:	00ffffcf 	.word	0x00ffffcf
      break;
 80082cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d109      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80082d4:	4b9f      	ldr	r3, [pc, #636]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80082d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d8:	f023 0207 	bic.w	r2, r3, #7
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e0:	499c      	ldr	r1, [pc, #624]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	654b      	str	r3, [r1, #84]	; 0x54
 80082e6:	e001      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d039      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fe:	2b05      	cmp	r3, #5
 8008300:	d820      	bhi.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	0800834b 	.word	0x0800834b
 800830c:	08008321 	.word	0x08008321
 8008310:	08008333 	.word	0x08008333
 8008314:	0800834b 	.word	0x0800834b
 8008318:	0800834b 	.word	0x0800834b
 800831c:	0800834b 	.word	0x0800834b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3304      	adds	r3, #4
 8008324:	2101      	movs	r1, #1
 8008326:	4618      	mov	r0, r3
 8008328:	f000 fd62 	bl	8008df0 <RCCEx_PLL2_Config>
 800832c:	4603      	mov	r3, r0
 800832e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008330:	e00c      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3324      	adds	r3, #36	; 0x24
 8008336:	2101      	movs	r1, #1
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fe0b 	bl	8008f54 <RCCEx_PLL3_Config>
 800833e:	4603      	mov	r3, r0
 8008340:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008342:	e003      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	75fb      	strb	r3, [r7, #23]
      break;
 8008348:	e000      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800834a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800834c:	7dfb      	ldrb	r3, [r7, #23]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008352:	4b80      	ldr	r3, [pc, #512]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008356:	f023 0207 	bic.w	r2, r3, #7
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008360:	497c      	ldr	r1, [pc, #496]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008362:	4313      	orrs	r3, r2
 8008364:	658b      	str	r3, [r1, #88]	; 0x58
 8008366:	e001      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b00      	cmp	r3, #0
 8008376:	d04b      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800837e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008382:	d02e      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8008384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008388:	d828      	bhi.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800838a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838e:	d02a      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008394:	d822      	bhi.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008396:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800839a:	d026      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800839c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083a0:	d81c      	bhi.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80083a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083a6:	d010      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80083a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ac:	d816      	bhi.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d01d      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80083b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083b6:	d111      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3304      	adds	r3, #4
 80083bc:	2100      	movs	r1, #0
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fd16 	bl	8008df0 <RCCEx_PLL2_Config>
 80083c4:	4603      	mov	r3, r0
 80083c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80083c8:	e012      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3324      	adds	r3, #36	; 0x24
 80083ce:	2102      	movs	r1, #2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 fdbf 	bl	8008f54 <RCCEx_PLL3_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80083da:	e009      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	75fb      	strb	r3, [r7, #23]
      break;
 80083e0:	e006      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80083e2:	bf00      	nop
 80083e4:	e004      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80083e6:	bf00      	nop
 80083e8:	e002      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80083ea:	bf00      	nop
 80083ec:	e000      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80083ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10a      	bne.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083f6:	4b57      	ldr	r3, [pc, #348]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80083f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008404:	4953      	ldr	r1, [pc, #332]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008406:	4313      	orrs	r3, r2
 8008408:	654b      	str	r3, [r1, #84]	; 0x54
 800840a:	e001      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d04b      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008422:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008426:	d02e      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008428:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800842c:	d828      	bhi.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800842e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008432:	d02a      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008438:	d822      	bhi.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800843a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800843e:	d026      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008444:	d81c      	bhi.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800844a:	d010      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800844c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008450:	d816      	bhi.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d01d      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800845a:	d111      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3304      	adds	r3, #4
 8008460:	2100      	movs	r1, #0
 8008462:	4618      	mov	r0, r3
 8008464:	f000 fcc4 	bl	8008df0 <RCCEx_PLL2_Config>
 8008468:	4603      	mov	r3, r0
 800846a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800846c:	e012      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3324      	adds	r3, #36	; 0x24
 8008472:	2102      	movs	r1, #2
 8008474:	4618      	mov	r0, r3
 8008476:	f000 fd6d 	bl	8008f54 <RCCEx_PLL3_Config>
 800847a:	4603      	mov	r3, r0
 800847c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800847e:	e009      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	75fb      	strb	r3, [r7, #23]
      break;
 8008484:	e006      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008486:	bf00      	nop
 8008488:	e004      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800848a:	bf00      	nop
 800848c:	e002      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800848e:	bf00      	nop
 8008490:	e000      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008492:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10a      	bne.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800849a:	4b2e      	ldr	r3, [pc, #184]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800849c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084a8:	492a      	ldr	r1, [pc, #168]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	658b      	str	r3, [r1, #88]	; 0x58
 80084ae:	e001      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
 80084b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d04d      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80084ca:	d02e      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80084cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80084d0:	d828      	bhi.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80084d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d6:	d02a      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80084d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084dc:	d822      	bhi.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80084de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084e2:	d026      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80084e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084e8:	d81c      	bhi.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80084ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084ee:	d010      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80084f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084f4:	d816      	bhi.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d01d      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80084fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084fe:	d111      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3304      	adds	r3, #4
 8008504:	2100      	movs	r1, #0
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fc72 	bl	8008df0 <RCCEx_PLL2_Config>
 800850c:	4603      	mov	r3, r0
 800850e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008510:	e012      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3324      	adds	r3, #36	; 0x24
 8008516:	2102      	movs	r1, #2
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fd1b 	bl	8008f54 <RCCEx_PLL3_Config>
 800851e:	4603      	mov	r3, r0
 8008520:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008522:	e009      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	75fb      	strb	r3, [r7, #23]
      break;
 8008528:	e006      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800852a:	bf00      	nop
 800852c:	e004      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800852e:	bf00      	nop
 8008530:	e002      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008532:	bf00      	nop
 8008534:	e000      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10c      	bne.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800853e:	4b05      	ldr	r3, [pc, #20]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800854c:	4901      	ldr	r1, [pc, #4]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800854e:	4313      	orrs	r3, r2
 8008550:	658b      	str	r3, [r1, #88]	; 0x58
 8008552:	e003      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008554:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0308 	and.w	r3, r3, #8
 8008564:	2b00      	cmp	r3, #0
 8008566:	d018      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800856c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008570:	d10a      	bne.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3324      	adds	r3, #36	; 0x24
 8008576:	2102      	movs	r1, #2
 8008578:	4618      	mov	r0, r3
 800857a:	f000 fceb 	bl	8008f54 <RCCEx_PLL3_Config>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008588:	4b8a      	ldr	r3, [pc, #552]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800858a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008594:	4987      	ldr	r1, [pc, #540]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008596:	4313      	orrs	r3, r2
 8008598:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0310 	and.w	r3, r3, #16
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d01a      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b0:	d10a      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3324      	adds	r3, #36	; 0x24
 80085b6:	2102      	movs	r1, #2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fccb 	bl	8008f54 <RCCEx_PLL3_Config>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085c8:	4b7a      	ldr	r3, [pc, #488]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80085ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d6:	4977      	ldr	r1, [pc, #476]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80085d8:	4313      	orrs	r3, r2
 80085da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d034      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085f2:	d01d      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80085f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085f8:	d817      	bhi.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80085fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008602:	d009      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008604:	e011      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3304      	adds	r3, #4
 800860a:	2100      	movs	r1, #0
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fbef 	bl	8008df0 <RCCEx_PLL2_Config>
 8008612:	4603      	mov	r3, r0
 8008614:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008616:	e00c      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3324      	adds	r3, #36	; 0x24
 800861c:	2102      	movs	r1, #2
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fc98 	bl	8008f54 <RCCEx_PLL3_Config>
 8008624:	4603      	mov	r3, r0
 8008626:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008628:	e003      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	75fb      	strb	r3, [r7, #23]
      break;
 800862e:	e000      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008632:	7dfb      	ldrb	r3, [r7, #23]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10a      	bne.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008638:	4b5e      	ldr	r3, [pc, #376]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800863a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800863c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008646:	495b      	ldr	r1, [pc, #364]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008648:	4313      	orrs	r3, r2
 800864a:	658b      	str	r3, [r1, #88]	; 0x58
 800864c:	e001      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864e:	7dfb      	ldrb	r3, [r7, #23]
 8008650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d033      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008668:	d01c      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800866a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800866e:	d816      	bhi.n	800869e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008674:	d003      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800867a:	d007      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800867c:	e00f      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800867e:	4b4d      	ldr	r3, [pc, #308]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008682:	4a4c      	ldr	r2, [pc, #304]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008688:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800868a:	e00c      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3324      	adds	r3, #36	; 0x24
 8008690:	2101      	movs	r1, #1
 8008692:	4618      	mov	r0, r3
 8008694:	f000 fc5e 	bl	8008f54 <RCCEx_PLL3_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800869c:	e003      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	75fb      	strb	r3, [r7, #23]
      break;
 80086a2:	e000      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80086a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10a      	bne.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086ac:	4b41      	ldr	r3, [pc, #260]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80086ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086ba:	493e      	ldr	r1, [pc, #248]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	654b      	str	r3, [r1, #84]	; 0x54
 80086c0:	e001      	b.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d029      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80086da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086de:	d007      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80086e0:	e00f      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e2:	4b34      	ldr	r3, [pc, #208]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e6:	4a33      	ldr	r2, [pc, #204]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80086e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086ee:	e00b      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3304      	adds	r3, #4
 80086f4:	2102      	movs	r1, #2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 fb7a 	bl	8008df0 <RCCEx_PLL2_Config>
 80086fc:	4603      	mov	r3, r0
 80086fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008700:	e002      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	75fb      	strb	r3, [r7, #23]
      break;
 8008706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d109      	bne.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800870e:	4b29      	ldr	r3, [pc, #164]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008712:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800871a:	4926      	ldr	r1, [pc, #152]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800871c:	4313      	orrs	r3, r2
 800871e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008720:	e001      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00a      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3324      	adds	r3, #36	; 0x24
 8008736:	2102      	movs	r1, #2
 8008738:	4618      	mov	r0, r3
 800873a:	f000 fc0b 	bl	8008f54 <RCCEx_PLL3_Config>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d033      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875c:	d017      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800875e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008762:	d811      	bhi.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008768:	d013      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800876a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876e:	d80b      	bhi.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008770:	2b00      	cmp	r3, #0
 8008772:	d010      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8008774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008778:	d106      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800877a:	4b0e      	ldr	r3, [pc, #56]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877e:	4a0d      	ldr	r2, [pc, #52]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008784:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008786:	e007      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	75fb      	strb	r3, [r7, #23]
      break;
 800878c:	e004      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800878e:	bf00      	nop
 8008790:	e002      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8008792:	bf00      	nop
 8008794:	e000      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8008796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10c      	bne.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800879e:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80087a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087aa:	4902      	ldr	r1, [pc, #8]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	654b      	str	r3, [r1, #84]	; 0x54
 80087b0:	e004      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80087b2:	bf00      	nop
 80087b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
 80087ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d008      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80087c8:	4b29      	ldr	r3, [pc, #164]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d4:	4926      	ldr	r1, [pc, #152]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d008      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087e6:	4b22      	ldr	r3, [pc, #136]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087f2:	491f      	ldr	r1, [pc, #124]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00d      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008804:	4b1a      	ldr	r3, [pc, #104]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	4a19      	ldr	r2, [pc, #100]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800880a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800880e:	6113      	str	r3, [r2, #16]
 8008810:	4b17      	ldr	r3, [pc, #92]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008812:	691a      	ldr	r2, [r3, #16]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800881a:	4915      	ldr	r1, [pc, #84]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800881c:	4313      	orrs	r3, r2
 800881e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	da08      	bge.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008828:	4b11      	ldr	r3, [pc, #68]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800882a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800882c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008834:	490e      	ldr	r1, [pc, #56]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008836:	4313      	orrs	r3, r2
 8008838:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008846:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008854:	4906      	ldr	r1, [pc, #24]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008856:	4313      	orrs	r3, r2
 8008858:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800885a:	7dbb      	ldrb	r3, [r7, #22]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	e000      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	58024400 	.word	0x58024400

08008874 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008878:	f7ff f864 	bl	8007944 <HAL_RCC_GetHCLKFreq>
 800887c:	4602      	mov	r2, r0
 800887e:	4b06      	ldr	r3, [pc, #24]	; (8008898 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	091b      	lsrs	r3, r3, #4
 8008884:	f003 0307 	and.w	r3, r3, #7
 8008888:	4904      	ldr	r1, [pc, #16]	; (800889c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800888a:	5ccb      	ldrb	r3, [r1, r3]
 800888c:	f003 031f 	and.w	r3, r3, #31
 8008890:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008894:	4618      	mov	r0, r3
 8008896:	bd80      	pop	{r7, pc}
 8008898:	58024400 	.word	0x58024400
 800889c:	0801b880 	.word	0x0801b880

080088a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b089      	sub	sp, #36	; 0x24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088a8:	4ba1      	ldr	r3, [pc, #644]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80088b2:	4b9f      	ldr	r3, [pc, #636]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	0b1b      	lsrs	r3, r3, #12
 80088b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80088be:	4b9c      	ldr	r3, [pc, #624]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c2:	091b      	lsrs	r3, r3, #4
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80088ca:	4b99      	ldr	r3, [pc, #612]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ce:	08db      	lsrs	r3, r3, #3
 80088d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 8111 	beq.w	8008b10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	f000 8083 	beq.w	80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	f200 80a1 	bhi.w	8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d056      	beq.n	80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800890a:	e099      	b.n	8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800890c:	4b88      	ldr	r3, [pc, #544]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0320 	and.w	r3, r3, #32
 8008914:	2b00      	cmp	r3, #0
 8008916:	d02d      	beq.n	8008974 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008918:	4b85      	ldr	r3, [pc, #532]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	08db      	lsrs	r3, r3, #3
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	4a84      	ldr	r2, [pc, #528]	; (8008b34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008924:	fa22 f303 	lsr.w	r3, r2, r3
 8008928:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	ee07 3a90 	vmov	s15, r3
 8008930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	ee07 3a90 	vmov	s15, r3
 800893a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008942:	4b7b      	ldr	r3, [pc, #492]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008952:	ed97 6a03 	vldr	s12, [r7, #12]
 8008956:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800895a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800895e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800896a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800896e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008972:	e087      	b.n	8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008986:	4b6a      	ldr	r3, [pc, #424]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008996:	ed97 6a03 	vldr	s12, [r7, #12]
 800899a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800899e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089b6:	e065      	b.n	8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ca:	4b59      	ldr	r3, [pc, #356]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089da:	ed97 6a03 	vldr	s12, [r7, #12]
 80089de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089fa:	e043      	b.n	8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0e:	4b48      	ldr	r3, [pc, #288]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a3e:	e021      	b.n	8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a52:	4b37      	ldr	r3, [pc, #220]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008a84:	4b2a      	ldr	r3, [pc, #168]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a88:	0a5b      	lsrs	r3, r3, #9
 8008a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aaa:	ee17 2a90 	vmov	r2, s15
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008ab2:	4b1f      	ldr	r3, [pc, #124]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab6:	0c1b      	lsrs	r3, r3, #16
 8008ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008abc:	ee07 3a90 	vmov	s15, r3
 8008ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ad8:	ee17 2a90 	vmov	r2, s15
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008ae0:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae4:	0e1b      	lsrs	r3, r3, #24
 8008ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aea:	ee07 3a90 	vmov	s15, r3
 8008aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b06:	ee17 2a90 	vmov	r2, s15
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b0e:	e008      	b.n	8008b22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	609a      	str	r2, [r3, #8]
}
 8008b22:	bf00      	nop
 8008b24:	3724      	adds	r7, #36	; 0x24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	58024400 	.word	0x58024400
 8008b34:	03d09000 	.word	0x03d09000
 8008b38:	46000000 	.word	0x46000000
 8008b3c:	4c742400 	.word	0x4c742400
 8008b40:	4a742400 	.word	0x4a742400
 8008b44:	4af42400 	.word	0x4af42400

08008b48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b089      	sub	sp, #36	; 0x24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b50:	4ba1      	ldr	r3, [pc, #644]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b54:	f003 0303 	and.w	r3, r3, #3
 8008b58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008b5a:	4b9f      	ldr	r3, [pc, #636]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5e:	0d1b      	lsrs	r3, r3, #20
 8008b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b66:	4b9c      	ldr	r3, [pc, #624]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6a:	0a1b      	lsrs	r3, r3, #8
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008b72:	4b99      	ldr	r3, [pc, #612]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b76:	08db      	lsrs	r3, r3, #3
 8008b78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	fb02 f303 	mul.w	r3, r2, r3
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 8111 	beq.w	8008db8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	f000 8083 	beq.w	8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	f200 80a1 	bhi.w	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d056      	beq.n	8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008bb2:	e099      	b.n	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bb4:	4b88      	ldr	r3, [pc, #544]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0320 	and.w	r3, r3, #32
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d02d      	beq.n	8008c1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bc0:	4b85      	ldr	r3, [pc, #532]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	08db      	lsrs	r3, r3, #3
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	4a84      	ldr	r2, [pc, #528]	; (8008ddc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	ee07 3a90 	vmov	s15, r3
 8008bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bea:	4b7b      	ldr	r3, [pc, #492]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c1a:	e087      	b.n	8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2e:	4b6a      	ldr	r3, [pc, #424]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c5e:	e065      	b.n	8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c72:	4b59      	ldr	r3, [pc, #356]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ca2:	e043      	b.n	8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008dec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb6:	4b48      	ldr	r3, [pc, #288]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ce6:	e021      	b.n	8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfa:	4b37      	ldr	r3, [pc, #220]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008d2c:	4b2a      	ldr	r3, [pc, #168]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d30:	0a5b      	lsrs	r3, r3, #9
 8008d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d52:	ee17 2a90 	vmov	r2, s15
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008d5a:	4b1f      	ldr	r3, [pc, #124]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5e:	0c1b      	lsrs	r3, r3, #16
 8008d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d64:	ee07 3a90 	vmov	s15, r3
 8008d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d80:	ee17 2a90 	vmov	r2, s15
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008d88:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8c:	0e1b      	lsrs	r3, r3, #24
 8008d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d92:	ee07 3a90 	vmov	s15, r3
 8008d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dae:	ee17 2a90 	vmov	r2, s15
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008db6:	e008      	b.n	8008dca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	609a      	str	r2, [r3, #8]
}
 8008dca:	bf00      	nop
 8008dcc:	3724      	adds	r7, #36	; 0x24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	58024400 	.word	0x58024400
 8008ddc:	03d09000 	.word	0x03d09000
 8008de0:	46000000 	.word	0x46000000
 8008de4:	4c742400 	.word	0x4c742400
 8008de8:	4a742400 	.word	0x4a742400
 8008dec:	4af42400 	.word	0x4af42400

08008df0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dfe:	4b53      	ldr	r3, [pc, #332]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d101      	bne.n	8008e0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e099      	b.n	8008f42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e0e:	4b4f      	ldr	r3, [pc, #316]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a4e      	ldr	r2, [pc, #312]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e1a:	f7f9 f93b 	bl	8002094 <HAL_GetTick>
 8008e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e20:	e008      	b.n	8008e34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e22:	f7f9 f937 	bl	8002094 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d901      	bls.n	8008e34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e086      	b.n	8008f42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e34:	4b45      	ldr	r3, [pc, #276]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1f0      	bne.n	8008e22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e40:	4b42      	ldr	r3, [pc, #264]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	031b      	lsls	r3, r3, #12
 8008e4e:	493f      	ldr	r1, [pc, #252]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	628b      	str	r3, [r1, #40]	; 0x28
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	025b      	lsls	r3, r3, #9
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	041b      	lsls	r3, r3, #16
 8008e72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	061b      	lsls	r3, r3, #24
 8008e80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e84:	4931      	ldr	r1, [pc, #196]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e8a:	4b30      	ldr	r3, [pc, #192]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	492d      	ldr	r1, [pc, #180]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e9c:	4b2b      	ldr	r3, [pc, #172]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	f023 0220 	bic.w	r2, r3, #32
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	4928      	ldr	r1, [pc, #160]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008eae:	4b27      	ldr	r3, [pc, #156]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb2:	4a26      	ldr	r2, [pc, #152]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008eb4:	f023 0310 	bic.w	r3, r3, #16
 8008eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008eba:	4b24      	ldr	r3, [pc, #144]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008ebc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ebe:	4b24      	ldr	r3, [pc, #144]	; (8008f50 <RCCEx_PLL2_Config+0x160>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	69d2      	ldr	r2, [r2, #28]
 8008ec6:	00d2      	lsls	r2, r2, #3
 8008ec8:	4920      	ldr	r1, [pc, #128]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ece:	4b1f      	ldr	r3, [pc, #124]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed2:	4a1e      	ldr	r2, [pc, #120]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008ed4:	f043 0310 	orr.w	r3, r3, #16
 8008ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d106      	bne.n	8008eee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ee0:	4b1a      	ldr	r3, [pc, #104]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	4a19      	ldr	r2, [pc, #100]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008ee6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008eea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008eec:	e00f      	b.n	8008f0e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d106      	bne.n	8008f02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008ef4:	4b15      	ldr	r3, [pc, #84]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	4a14      	ldr	r2, [pc, #80]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008efe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f00:	e005      	b.n	8008f0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f02:	4b12      	ldr	r3, [pc, #72]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f06:	4a11      	ldr	r2, [pc, #68]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008f08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f0e:	4b0f      	ldr	r3, [pc, #60]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a0e      	ldr	r2, [pc, #56]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008f14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f1a:	f7f9 f8bb 	bl	8002094 <HAL_GetTick>
 8008f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f20:	e008      	b.n	8008f34 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008f22:	f7f9 f8b7 	bl	8002094 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d901      	bls.n	8008f34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e006      	b.n	8008f42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f34:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d0f0      	beq.n	8008f22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	ffff0007 	.word	0xffff0007

08008f54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f62:	4b53      	ldr	r3, [pc, #332]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f66:	f003 0303 	and.w	r3, r3, #3
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d101      	bne.n	8008f72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e099      	b.n	80090a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f72:	4b4f      	ldr	r3, [pc, #316]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a4e      	ldr	r2, [pc, #312]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f7e:	f7f9 f889 	bl	8002094 <HAL_GetTick>
 8008f82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f84:	e008      	b.n	8008f98 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f86:	f7f9 f885 	bl	8002094 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d901      	bls.n	8008f98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e086      	b.n	80090a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f98:	4b45      	ldr	r3, [pc, #276]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1f0      	bne.n	8008f86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008fa4:	4b42      	ldr	r3, [pc, #264]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	051b      	lsls	r3, r3, #20
 8008fb2:	493f      	ldr	r1, [pc, #252]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	628b      	str	r3, [r1, #40]	; 0x28
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	025b      	lsls	r3, r3, #9
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	431a      	orrs	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	041b      	lsls	r3, r3, #16
 8008fd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	061b      	lsls	r3, r3, #24
 8008fe4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008fe8:	4931      	ldr	r1, [pc, #196]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008fee:	4b30      	ldr	r3, [pc, #192]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	492d      	ldr	r1, [pc, #180]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009000:	4b2b      	ldr	r3, [pc, #172]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	4928      	ldr	r1, [pc, #160]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800900e:	4313      	orrs	r3, r2
 8009010:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009012:	4b27      	ldr	r3, [pc, #156]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	4a26      	ldr	r2, [pc, #152]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800901c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800901e:	4b24      	ldr	r3, [pc, #144]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009022:	4b24      	ldr	r3, [pc, #144]	; (80090b4 <RCCEx_PLL3_Config+0x160>)
 8009024:	4013      	ands	r3, r2
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	69d2      	ldr	r2, [r2, #28]
 800902a:	00d2      	lsls	r2, r2, #3
 800902c:	4920      	ldr	r1, [pc, #128]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800902e:	4313      	orrs	r3, r2
 8009030:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009032:	4b1f      	ldr	r3, [pc, #124]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009036:	4a1e      	ldr	r2, [pc, #120]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800903c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d106      	bne.n	8009052 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009044:	4b1a      	ldr	r3, [pc, #104]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009048:	4a19      	ldr	r2, [pc, #100]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800904a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800904e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009050:	e00f      	b.n	8009072 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d106      	bne.n	8009066 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009058:	4b15      	ldr	r3, [pc, #84]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	4a14      	ldr	r2, [pc, #80]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800905e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009062:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009064:	e005      	b.n	8009072 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009066:	4b12      	ldr	r3, [pc, #72]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906a:	4a11      	ldr	r2, [pc, #68]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800906c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009070:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009072:	4b0f      	ldr	r3, [pc, #60]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a0e      	ldr	r2, [pc, #56]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800907c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800907e:	f7f9 f809 	bl	8002094 <HAL_GetTick>
 8009082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009084:	e008      	b.n	8009098 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009086:	f7f9 f805 	bl	8002094 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	2b02      	cmp	r3, #2
 8009092:	d901      	bls.n	8009098 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e006      	b.n	80090a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009098:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d0f0      	beq.n	8009086 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	58024400 	.word	0x58024400
 80090b4:	ffff0007 	.word	0xffff0007

080090b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e049      	b.n	800915e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d106      	bne.n	80090e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f841 	bl	8009166 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2202      	movs	r2, #2
 80090e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	4619      	mov	r1, r3
 80090f6:	4610      	mov	r0, r2
 80090f8:	f000 fa0e 	bl	8009518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
	...

0800917c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b01      	cmp	r3, #1
 800918e:	d001      	beq.n	8009194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	e05e      	b.n	8009252 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68da      	ldr	r2, [r3, #12]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0201 	orr.w	r2, r2, #1
 80091aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a2b      	ldr	r2, [pc, #172]	; (8009260 <HAL_TIM_Base_Start_IT+0xe4>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d02c      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x94>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091be:	d027      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x94>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a27      	ldr	r2, [pc, #156]	; (8009264 <HAL_TIM_Base_Start_IT+0xe8>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d022      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x94>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a26      	ldr	r2, [pc, #152]	; (8009268 <HAL_TIM_Base_Start_IT+0xec>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d01d      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x94>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a24      	ldr	r2, [pc, #144]	; (800926c <HAL_TIM_Base_Start_IT+0xf0>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d018      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x94>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a23      	ldr	r2, [pc, #140]	; (8009270 <HAL_TIM_Base_Start_IT+0xf4>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d013      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x94>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a21      	ldr	r2, [pc, #132]	; (8009274 <HAL_TIM_Base_Start_IT+0xf8>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d00e      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x94>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a20      	ldr	r2, [pc, #128]	; (8009278 <HAL_TIM_Base_Start_IT+0xfc>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d009      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x94>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a1e      	ldr	r2, [pc, #120]	; (800927c <HAL_TIM_Base_Start_IT+0x100>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d004      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x94>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a1d      	ldr	r2, [pc, #116]	; (8009280 <HAL_TIM_Base_Start_IT+0x104>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d115      	bne.n	800923c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689a      	ldr	r2, [r3, #8]
 8009216:	4b1b      	ldr	r3, [pc, #108]	; (8009284 <HAL_TIM_Base_Start_IT+0x108>)
 8009218:	4013      	ands	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b06      	cmp	r3, #6
 8009220:	d015      	beq.n	800924e <HAL_TIM_Base_Start_IT+0xd2>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009228:	d011      	beq.n	800924e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0201 	orr.w	r2, r2, #1
 8009238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800923a:	e008      	b.n	800924e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0201 	orr.w	r2, r2, #1
 800924a:	601a      	str	r2, [r3, #0]
 800924c:	e000      	b.n	8009250 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800924e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	40010000 	.word	0x40010000
 8009264:	40000400 	.word	0x40000400
 8009268:	40000800 	.word	0x40000800
 800926c:	40000c00 	.word	0x40000c00
 8009270:	40010400 	.word	0x40010400
 8009274:	40001800 	.word	0x40001800
 8009278:	40014000 	.word	0x40014000
 800927c:	4000e000 	.word	0x4000e000
 8009280:	4000e400 	.word	0x4000e400
 8009284:	00010007 	.word	0x00010007

08009288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b02      	cmp	r3, #2
 800929c:	d122      	bne.n	80092e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	f003 0302 	and.w	r3, r3, #2
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d11b      	bne.n	80092e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f06f 0202 	mvn.w	r2, #2
 80092b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	f003 0303 	and.w	r3, r3, #3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f905 	bl	80094da <HAL_TIM_IC_CaptureCallback>
 80092d0:	e005      	b.n	80092de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f8f7 	bl	80094c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f908 	bl	80094ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f003 0304 	and.w	r3, r3, #4
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d122      	bne.n	8009338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b04      	cmp	r3, #4
 80092fe:	d11b      	bne.n	8009338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f06f 0204 	mvn.w	r2, #4
 8009308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2202      	movs	r2, #2
 800930e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f8db 	bl	80094da <HAL_TIM_IC_CaptureCallback>
 8009324:	e005      	b.n	8009332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f8cd 	bl	80094c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f8de 	bl	80094ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b08      	cmp	r3, #8
 8009344:	d122      	bne.n	800938c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f003 0308 	and.w	r3, r3, #8
 8009350:	2b08      	cmp	r3, #8
 8009352:	d11b      	bne.n	800938c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f06f 0208 	mvn.w	r2, #8
 800935c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2204      	movs	r2, #4
 8009362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f8b1 	bl	80094da <HAL_TIM_IC_CaptureCallback>
 8009378:	e005      	b.n	8009386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f8a3 	bl	80094c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f8b4 	bl	80094ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f003 0310 	and.w	r3, r3, #16
 8009396:	2b10      	cmp	r3, #16
 8009398:	d122      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f003 0310 	and.w	r3, r3, #16
 80093a4:	2b10      	cmp	r3, #16
 80093a6:	d11b      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f06f 0210 	mvn.w	r2, #16
 80093b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2208      	movs	r2, #8
 80093b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f887 	bl	80094da <HAL_TIM_IC_CaptureCallback>
 80093cc:	e005      	b.n	80093da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f879 	bl	80094c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f88a 	bl	80094ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d10e      	bne.n	800940c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d107      	bne.n	800940c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0201 	mvn.w	r2, #1
 8009404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7f8 fb18 	bl	8001a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009416:	2b80      	cmp	r3, #128	; 0x80
 8009418:	d10e      	bne.n	8009438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009424:	2b80      	cmp	r3, #128	; 0x80
 8009426:	d107      	bne.n	8009438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f920 	bl	8009678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009446:	d10e      	bne.n	8009466 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009452:	2b80      	cmp	r3, #128	; 0x80
 8009454:	d107      	bne.n	8009466 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800945e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f913 	bl	800968c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009470:	2b40      	cmp	r3, #64	; 0x40
 8009472:	d10e      	bne.n	8009492 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800947e:	2b40      	cmp	r3, #64	; 0x40
 8009480:	d107      	bne.n	8009492 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800948a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f838 	bl	8009502 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	f003 0320 	and.w	r3, r3, #32
 800949c:	2b20      	cmp	r3, #32
 800949e:	d10e      	bne.n	80094be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b20      	cmp	r3, #32
 80094ac:	d107      	bne.n	80094be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f06f 0220 	mvn.w	r2, #32
 80094b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f8d3 	bl	8009664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094be:	bf00      	nop
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094c6:	b480      	push	{r7}
 80094c8:	b083      	sub	sp, #12
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094ce:	bf00      	nop
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094da:	b480      	push	{r7}
 80094dc:	b083      	sub	sp, #12
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094e2:	bf00      	nop
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b083      	sub	sp, #12
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094f6:	bf00      	nop
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009502:	b480      	push	{r7}
 8009504:	b083      	sub	sp, #12
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800950a:	bf00      	nop
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
	...

08009518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a44      	ldr	r2, [pc, #272]	; (800963c <TIM_Base_SetConfig+0x124>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d013      	beq.n	8009558 <TIM_Base_SetConfig+0x40>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009536:	d00f      	beq.n	8009558 <TIM_Base_SetConfig+0x40>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a41      	ldr	r2, [pc, #260]	; (8009640 <TIM_Base_SetConfig+0x128>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00b      	beq.n	8009558 <TIM_Base_SetConfig+0x40>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a40      	ldr	r2, [pc, #256]	; (8009644 <TIM_Base_SetConfig+0x12c>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d007      	beq.n	8009558 <TIM_Base_SetConfig+0x40>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a3f      	ldr	r2, [pc, #252]	; (8009648 <TIM_Base_SetConfig+0x130>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d003      	beq.n	8009558 <TIM_Base_SetConfig+0x40>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a3e      	ldr	r2, [pc, #248]	; (800964c <TIM_Base_SetConfig+0x134>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d108      	bne.n	800956a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800955e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	4313      	orrs	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a33      	ldr	r2, [pc, #204]	; (800963c <TIM_Base_SetConfig+0x124>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d027      	beq.n	80095c2 <TIM_Base_SetConfig+0xaa>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009578:	d023      	beq.n	80095c2 <TIM_Base_SetConfig+0xaa>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a30      	ldr	r2, [pc, #192]	; (8009640 <TIM_Base_SetConfig+0x128>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d01f      	beq.n	80095c2 <TIM_Base_SetConfig+0xaa>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a2f      	ldr	r2, [pc, #188]	; (8009644 <TIM_Base_SetConfig+0x12c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d01b      	beq.n	80095c2 <TIM_Base_SetConfig+0xaa>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a2e      	ldr	r2, [pc, #184]	; (8009648 <TIM_Base_SetConfig+0x130>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d017      	beq.n	80095c2 <TIM_Base_SetConfig+0xaa>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a2d      	ldr	r2, [pc, #180]	; (800964c <TIM_Base_SetConfig+0x134>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d013      	beq.n	80095c2 <TIM_Base_SetConfig+0xaa>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a2c      	ldr	r2, [pc, #176]	; (8009650 <TIM_Base_SetConfig+0x138>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d00f      	beq.n	80095c2 <TIM_Base_SetConfig+0xaa>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a2b      	ldr	r2, [pc, #172]	; (8009654 <TIM_Base_SetConfig+0x13c>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d00b      	beq.n	80095c2 <TIM_Base_SetConfig+0xaa>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a2a      	ldr	r2, [pc, #168]	; (8009658 <TIM_Base_SetConfig+0x140>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d007      	beq.n	80095c2 <TIM_Base_SetConfig+0xaa>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a29      	ldr	r2, [pc, #164]	; (800965c <TIM_Base_SetConfig+0x144>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d003      	beq.n	80095c2 <TIM_Base_SetConfig+0xaa>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a28      	ldr	r2, [pc, #160]	; (8009660 <TIM_Base_SetConfig+0x148>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d108      	bne.n	80095d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	4313      	orrs	r3, r2
 80095e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a10      	ldr	r2, [pc, #64]	; (800963c <TIM_Base_SetConfig+0x124>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d00f      	beq.n	8009620 <TIM_Base_SetConfig+0x108>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a12      	ldr	r2, [pc, #72]	; (800964c <TIM_Base_SetConfig+0x134>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d00b      	beq.n	8009620 <TIM_Base_SetConfig+0x108>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a11      	ldr	r2, [pc, #68]	; (8009650 <TIM_Base_SetConfig+0x138>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d007      	beq.n	8009620 <TIM_Base_SetConfig+0x108>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a10      	ldr	r2, [pc, #64]	; (8009654 <TIM_Base_SetConfig+0x13c>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d003      	beq.n	8009620 <TIM_Base_SetConfig+0x108>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a0f      	ldr	r2, [pc, #60]	; (8009658 <TIM_Base_SetConfig+0x140>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d103      	bne.n	8009628 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	691a      	ldr	r2, [r3, #16]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	615a      	str	r2, [r3, #20]
}
 800962e:	bf00      	nop
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	40010000 	.word	0x40010000
 8009640:	40000400 	.word	0x40000400
 8009644:	40000800 	.word	0x40000800
 8009648:	40000c00 	.word	0x40000c00
 800964c:	40010400 	.word	0x40010400
 8009650:	40014000 	.word	0x40014000
 8009654:	40014400 	.word	0x40014400
 8009658:	40014800 	.word	0x40014800
 800965c:	4000e000 	.word	0x4000e000
 8009660:	4000e400 	.word	0x4000e400

08009664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e042      	b.n	8009738 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d106      	bne.n	80096ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7f8 f9ef 	bl	8001aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2224      	movs	r2, #36	; 0x24
 80096ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 0201 	bic.w	r2, r2, #1
 80096e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fc84 	bl	8009ff0 <UART_SetConfig>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e022      	b.n	8009738 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 fae4 	bl	800acc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800970e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800971e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f042 0201 	orr.w	r2, r2, #1
 800972e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f001 fb6b 	bl	800ae0c <UART_CheckIdleState>
 8009736:	4603      	mov	r3, r0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08a      	sub	sp, #40	; 0x28
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	4613      	mov	r3, r2
 800974c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009754:	2b20      	cmp	r3, #32
 8009756:	d17a      	bne.n	800984e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <HAL_UART_Transmit_DMA+0x24>
 800975e:	88fb      	ldrh	r3, [r7, #6]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e073      	b.n	8009850 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800976e:	2b01      	cmp	r3, #1
 8009770:	d101      	bne.n	8009776 <HAL_UART_Transmit_DMA+0x36>
 8009772:	2302      	movs	r3, #2
 8009774:	e06c      	b.n	8009850 <HAL_UART_Transmit_DMA+0x110>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	88fa      	ldrh	r2, [r7, #6]
 8009788:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	88fa      	ldrh	r2, [r7, #6]
 8009790:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2221      	movs	r2, #33	; 0x21
 80097a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d02c      	beq.n	8009806 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097b0:	4a29      	ldr	r2, [pc, #164]	; (8009858 <HAL_UART_Transmit_DMA+0x118>)
 80097b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097b8:	4a28      	ldr	r2, [pc, #160]	; (800985c <HAL_UART_Transmit_DMA+0x11c>)
 80097ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097c0:	4a27      	ldr	r2, [pc, #156]	; (8009860 <HAL_UART_Transmit_DMA+0x120>)
 80097c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097c8:	2200      	movs	r2, #0
 80097ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d4:	4619      	mov	r1, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3328      	adds	r3, #40	; 0x28
 80097dc:	461a      	mov	r2, r3
 80097de:	88fb      	ldrh	r3, [r7, #6]
 80097e0:	f7f9 f8c2 	bl	8002968 <HAL_DMA_Start_IT>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00d      	beq.n	8009806 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2210      	movs	r2, #16
 80097ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2220      	movs	r2, #32
 80097fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e024      	b.n	8009850 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2240      	movs	r2, #64	; 0x40
 800980c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3308      	adds	r3, #8
 800981c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	613b      	str	r3, [r7, #16]
   return(result);
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800982c:	627b      	str	r3, [r7, #36]	; 0x24
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3308      	adds	r3, #8
 8009834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009836:	623a      	str	r2, [r7, #32]
 8009838:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	69f9      	ldr	r1, [r7, #28]
 800983c:	6a3a      	ldr	r2, [r7, #32]
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	61bb      	str	r3, [r7, #24]
   return(result);
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e5      	bne.n	8009816 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	e000      	b.n	8009850 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800984e:	2302      	movs	r3, #2
  }
}
 8009850:	4618      	mov	r0, r3
 8009852:	3728      	adds	r7, #40	; 0x28
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	0800b2d5 	.word	0x0800b2d5
 800985c:	0800b36b 	.word	0x0800b36b
 8009860:	0800b4e1 	.word	0x0800b4e1

08009864 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b0ba      	sub	sp, #232	; 0xe8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800988a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800988e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009892:	4013      	ands	r3, r2
 8009894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800989c:	2b00      	cmp	r3, #0
 800989e:	d11b      	bne.n	80098d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098a4:	f003 0320 	and.w	r3, r3, #32
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d015      	beq.n	80098d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098b0:	f003 0320 	and.w	r3, r3, #32
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d105      	bne.n	80098c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d009      	beq.n	80098d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 835a 	beq.w	8009f82 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3
      }
      return;
 80098d6:	e354      	b.n	8009f82 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80098d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 811f 	beq.w	8009b20 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80098e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80098e6:	4b8b      	ldr	r3, [pc, #556]	; (8009b14 <HAL_UART_IRQHandler+0x2b0>)
 80098e8:	4013      	ands	r3, r2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d106      	bne.n	80098fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80098ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80098f2:	4b89      	ldr	r3, [pc, #548]	; (8009b18 <HAL_UART_IRQHandler+0x2b4>)
 80098f4:	4013      	ands	r3, r2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 8112 	beq.w	8009b20 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	d011      	beq.n	800992c <HAL_UART_IRQHandler+0xc8>
 8009908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800990c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00b      	beq.n	800992c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2201      	movs	r2, #1
 800991a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009922:	f043 0201 	orr.w	r2, r3, #1
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800992c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009930:	f003 0302 	and.w	r3, r3, #2
 8009934:	2b00      	cmp	r3, #0
 8009936:	d011      	beq.n	800995c <HAL_UART_IRQHandler+0xf8>
 8009938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00b      	beq.n	800995c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2202      	movs	r2, #2
 800994a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009952:	f043 0204 	orr.w	r2, r3, #4
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800995c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009960:	f003 0304 	and.w	r3, r3, #4
 8009964:	2b00      	cmp	r3, #0
 8009966:	d011      	beq.n	800998c <HAL_UART_IRQHandler+0x128>
 8009968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00b      	beq.n	800998c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2204      	movs	r2, #4
 800997a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009982:	f043 0202 	orr.w	r2, r3, #2
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800998c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009990:	f003 0308 	and.w	r3, r3, #8
 8009994:	2b00      	cmp	r3, #0
 8009996:	d017      	beq.n	80099c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800999c:	f003 0320 	and.w	r3, r3, #32
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d105      	bne.n	80099b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80099a8:	4b5a      	ldr	r3, [pc, #360]	; (8009b14 <HAL_UART_IRQHandler+0x2b0>)
 80099aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00b      	beq.n	80099c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2208      	movs	r2, #8
 80099b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099be:	f043 0208 	orr.w	r2, r3, #8
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d012      	beq.n	80099fa <HAL_UART_IRQHandler+0x196>
 80099d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00c      	beq.n	80099fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099f0:	f043 0220 	orr.w	r2, r3, #32
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 82c0 	beq.w	8009f86 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a0a:	f003 0320 	and.w	r3, r3, #32
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d013      	beq.n	8009a3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a16:	f003 0320 	and.w	r3, r3, #32
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d105      	bne.n	8009a2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d007      	beq.n	8009a3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4e:	2b40      	cmp	r3, #64	; 0x40
 8009a50:	d005      	beq.n	8009a5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d04f      	beq.n	8009afe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 fbd2 	bl	800b208 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6e:	2b40      	cmp	r3, #64	; 0x40
 8009a70:	d141      	bne.n	8009af6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3308      	adds	r3, #8
 8009a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a80:	e853 3f00 	ldrex	r3, [r3]
 8009a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3308      	adds	r3, #8
 8009a9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009a9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009aaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009aae:	e841 2300 	strex	r3, r2, [r1]
 8009ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1d9      	bne.n	8009a72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d013      	beq.n	8009aee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aca:	4a14      	ldr	r2, [pc, #80]	; (8009b1c <HAL_UART_IRQHandler+0x2b8>)
 8009acc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7f9 fcd0 	bl	8003478 <HAL_DMA_Abort_IT>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d017      	beq.n	8009b0e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009ae8:	4610      	mov	r0, r2
 8009aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aec:	e00f      	b.n	8009b0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fa74 	bl	8009fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009af4:	e00b      	b.n	8009b0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fa70 	bl	8009fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009afc:	e007      	b.n	8009b0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fa6c 	bl	8009fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009b0c:	e23b      	b.n	8009f86 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b0e:	bf00      	nop
    return;
 8009b10:	e239      	b.n	8009f86 <HAL_UART_IRQHandler+0x722>
 8009b12:	bf00      	nop
 8009b14:	10000001 	.word	0x10000001
 8009b18:	04000120 	.word	0x04000120
 8009b1c:	0800b561 	.word	0x0800b561

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	f040 81ce 	bne.w	8009ec6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b2e:	f003 0310 	and.w	r3, r3, #16
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 81c7 	beq.w	8009ec6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b3c:	f003 0310 	and.w	r3, r3, #16
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 81c0 	beq.w	8009ec6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2210      	movs	r2, #16
 8009b4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b58:	2b40      	cmp	r3, #64	; 0x40
 8009b5a:	f040 813b 	bne.w	8009dd4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a8b      	ldr	r2, [pc, #556]	; (8009d94 <HAL_UART_IRQHandler+0x530>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d059      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a89      	ldr	r2, [pc, #548]	; (8009d98 <HAL_UART_IRQHandler+0x534>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d053      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a87      	ldr	r2, [pc, #540]	; (8009d9c <HAL_UART_IRQHandler+0x538>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d04d      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a85      	ldr	r2, [pc, #532]	; (8009da0 <HAL_UART_IRQHandler+0x53c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d047      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a83      	ldr	r2, [pc, #524]	; (8009da4 <HAL_UART_IRQHandler+0x540>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d041      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a81      	ldr	r2, [pc, #516]	; (8009da8 <HAL_UART_IRQHandler+0x544>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d03b      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a7f      	ldr	r2, [pc, #508]	; (8009dac <HAL_UART_IRQHandler+0x548>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d035      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a7d      	ldr	r2, [pc, #500]	; (8009db0 <HAL_UART_IRQHandler+0x54c>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d02f      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a7b      	ldr	r2, [pc, #492]	; (8009db4 <HAL_UART_IRQHandler+0x550>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d029      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a79      	ldr	r2, [pc, #484]	; (8009db8 <HAL_UART_IRQHandler+0x554>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d023      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a77      	ldr	r2, [pc, #476]	; (8009dbc <HAL_UART_IRQHandler+0x558>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d01d      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a75      	ldr	r2, [pc, #468]	; (8009dc0 <HAL_UART_IRQHandler+0x55c>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d017      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a73      	ldr	r2, [pc, #460]	; (8009dc4 <HAL_UART_IRQHandler+0x560>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d011      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a71      	ldr	r2, [pc, #452]	; (8009dc8 <HAL_UART_IRQHandler+0x564>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d00b      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a6f      	ldr	r2, [pc, #444]	; (8009dcc <HAL_UART_IRQHandler+0x568>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d005      	beq.n	8009c1e <HAL_UART_IRQHandler+0x3ba>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a6d      	ldr	r2, [pc, #436]	; (8009dd0 <HAL_UART_IRQHandler+0x56c>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d105      	bne.n	8009c2a <HAL_UART_IRQHandler+0x3c6>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	e004      	b.n	8009c34 <HAL_UART_IRQHandler+0x3d0>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 81a4 	beq.w	8009f8a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	f080 819c 	bcs.w	8009f8a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c66:	f000 8086 	beq.w	8009d76 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c76:	e853 3f00 	ldrex	r3, [r3]
 8009c7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c98:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ca0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ca4:	e841 2300 	strex	r3, r2, [r1]
 8009ca8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1da      	bne.n	8009c6a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	3308      	adds	r3, #8
 8009cba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cbe:	e853 3f00 	ldrex	r3, [r3]
 8009cc2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cc6:	f023 0301 	bic.w	r3, r3, #1
 8009cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009cd8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009cdc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ce0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ce4:	e841 2300 	strex	r3, r2, [r1]
 8009ce8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009cea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1e1      	bne.n	8009cb4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cfa:	e853 3f00 	ldrex	r3, [r3]
 8009cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d1c:	e841 2300 	strex	r3, r2, [r1]
 8009d20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1e3      	bne.n	8009cf0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d3e:	e853 3f00 	ldrex	r3, [r3]
 8009d42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d46:	f023 0310 	bic.w	r3, r3, #16
 8009d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d58:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d5a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d60:	e841 2300 	strex	r3, r2, [r1]
 8009d64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e4      	bne.n	8009d36 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7f9 f863 	bl	8002e3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7f7 fa72 	bl	8001274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d90:	e0fb      	b.n	8009f8a <HAL_UART_IRQHandler+0x726>
 8009d92:	bf00      	nop
 8009d94:	40020010 	.word	0x40020010
 8009d98:	40020028 	.word	0x40020028
 8009d9c:	40020040 	.word	0x40020040
 8009da0:	40020058 	.word	0x40020058
 8009da4:	40020070 	.word	0x40020070
 8009da8:	40020088 	.word	0x40020088
 8009dac:	400200a0 	.word	0x400200a0
 8009db0:	400200b8 	.word	0x400200b8
 8009db4:	40020410 	.word	0x40020410
 8009db8:	40020428 	.word	0x40020428
 8009dbc:	40020440 	.word	0x40020440
 8009dc0:	40020458 	.word	0x40020458
 8009dc4:	40020470 	.word	0x40020470
 8009dc8:	40020488 	.word	0x40020488
 8009dcc:	400204a0 	.word	0x400204a0
 8009dd0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 80cc 	beq.w	8009f8e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009df6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 80c7 	beq.w	8009f8e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e08:	e853 3f00 	ldrex	r3, [r3]
 8009e0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e22:	647b      	str	r3, [r7, #68]	; 0x44
 8009e24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e2a:	e841 2300 	strex	r3, r2, [r1]
 8009e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1e4      	bne.n	8009e00 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	e853 3f00 	ldrex	r3, [r3]
 8009e44:	623b      	str	r3, [r7, #32]
   return(result);
 8009e46:	6a3a      	ldr	r2, [r7, #32]
 8009e48:	4b54      	ldr	r3, [pc, #336]	; (8009f9c <HAL_UART_IRQHandler+0x738>)
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3308      	adds	r3, #8
 8009e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e5a:	633a      	str	r2, [r7, #48]	; 0x30
 8009e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e3      	bne.n	8009e36 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	e853 3f00 	ldrex	r3, [r3]
 8009e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f023 0310 	bic.w	r3, r3, #16
 8009e96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ea4:	61fb      	str	r3, [r7, #28]
 8009ea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea8:	69b9      	ldr	r1, [r7, #24]
 8009eaa:	69fa      	ldr	r2, [r7, #28]
 8009eac:	e841 2300 	strex	r3, r2, [r1]
 8009eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1e4      	bne.n	8009e82 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7f7 f9d8 	bl	8001274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ec4:	e063      	b.n	8009f8e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00e      	beq.n	8009ef0 <HAL_UART_IRQHandler+0x68c>
 8009ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d008      	beq.n	8009ef0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 fb7a 	bl	800b5e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009eee:	e051      	b.n	8009f94 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d014      	beq.n	8009f26 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d105      	bne.n	8009f14 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d008      	beq.n	8009f26 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d03a      	beq.n	8009f92 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	4798      	blx	r3
    }
    return;
 8009f24:	e035      	b.n	8009f92 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d009      	beq.n	8009f46 <HAL_UART_IRQHandler+0x6e2>
 8009f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f001 fb24 	bl	800b58c <UART_EndTransmit_IT>
    return;
 8009f44:	e026      	b.n	8009f94 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d009      	beq.n	8009f66 <HAL_UART_IRQHandler+0x702>
 8009f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f001 fb53 	bl	800b60a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f64:	e016      	b.n	8009f94 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d010      	beq.n	8009f94 <HAL_UART_IRQHandler+0x730>
 8009f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	da0c      	bge.n	8009f94 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 fb3b 	bl	800b5f6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f80:	e008      	b.n	8009f94 <HAL_UART_IRQHandler+0x730>
      return;
 8009f82:	bf00      	nop
 8009f84:	e006      	b.n	8009f94 <HAL_UART_IRQHandler+0x730>
    return;
 8009f86:	bf00      	nop
 8009f88:	e004      	b.n	8009f94 <HAL_UART_IRQHandler+0x730>
      return;
 8009f8a:	bf00      	nop
 8009f8c:	e002      	b.n	8009f94 <HAL_UART_IRQHandler+0x730>
      return;
 8009f8e:	bf00      	nop
 8009f90:	e000      	b.n	8009f94 <HAL_UART_IRQHandler+0x730>
    return;
 8009f92:	bf00      	nop
  }
}
 8009f94:	37e8      	adds	r7, #232	; 0xe8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	effffffe 	.word	0xeffffffe

08009fa0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ff4:	b092      	sub	sp, #72	; 0x48
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	689a      	ldr	r2, [r3, #8]
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	431a      	orrs	r2, r3
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	431a      	orrs	r2, r3
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	4313      	orrs	r3, r2
 800a016:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	4bbe      	ldr	r3, [pc, #760]	; (800a318 <UART_SetConfig+0x328>)
 800a020:	4013      	ands	r3, r2
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	6812      	ldr	r2, [r2, #0]
 800a026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a028:	430b      	orrs	r3, r1
 800a02a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	68da      	ldr	r2, [r3, #12]
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	430a      	orrs	r2, r1
 800a040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4ab3      	ldr	r2, [pc, #716]	; (800a31c <UART_SetConfig+0x32c>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d004      	beq.n	800a05c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a058:	4313      	orrs	r3, r2
 800a05a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	689a      	ldr	r2, [r3, #8]
 800a062:	4baf      	ldr	r3, [pc, #700]	; (800a320 <UART_SetConfig+0x330>)
 800a064:	4013      	ands	r3, r2
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	6812      	ldr	r2, [r2, #0]
 800a06a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a06c:	430b      	orrs	r3, r1
 800a06e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a076:	f023 010f 	bic.w	r1, r3, #15
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	430a      	orrs	r2, r1
 800a084:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4aa6      	ldr	r2, [pc, #664]	; (800a324 <UART_SetConfig+0x334>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d177      	bne.n	800a180 <UART_SetConfig+0x190>
 800a090:	4ba5      	ldr	r3, [pc, #660]	; (800a328 <UART_SetConfig+0x338>)
 800a092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a094:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a098:	2b28      	cmp	r3, #40	; 0x28
 800a09a:	d86d      	bhi.n	800a178 <UART_SetConfig+0x188>
 800a09c:	a201      	add	r2, pc, #4	; (adr r2, 800a0a4 <UART_SetConfig+0xb4>)
 800a09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a2:	bf00      	nop
 800a0a4:	0800a149 	.word	0x0800a149
 800a0a8:	0800a179 	.word	0x0800a179
 800a0ac:	0800a179 	.word	0x0800a179
 800a0b0:	0800a179 	.word	0x0800a179
 800a0b4:	0800a179 	.word	0x0800a179
 800a0b8:	0800a179 	.word	0x0800a179
 800a0bc:	0800a179 	.word	0x0800a179
 800a0c0:	0800a179 	.word	0x0800a179
 800a0c4:	0800a151 	.word	0x0800a151
 800a0c8:	0800a179 	.word	0x0800a179
 800a0cc:	0800a179 	.word	0x0800a179
 800a0d0:	0800a179 	.word	0x0800a179
 800a0d4:	0800a179 	.word	0x0800a179
 800a0d8:	0800a179 	.word	0x0800a179
 800a0dc:	0800a179 	.word	0x0800a179
 800a0e0:	0800a179 	.word	0x0800a179
 800a0e4:	0800a159 	.word	0x0800a159
 800a0e8:	0800a179 	.word	0x0800a179
 800a0ec:	0800a179 	.word	0x0800a179
 800a0f0:	0800a179 	.word	0x0800a179
 800a0f4:	0800a179 	.word	0x0800a179
 800a0f8:	0800a179 	.word	0x0800a179
 800a0fc:	0800a179 	.word	0x0800a179
 800a100:	0800a179 	.word	0x0800a179
 800a104:	0800a161 	.word	0x0800a161
 800a108:	0800a179 	.word	0x0800a179
 800a10c:	0800a179 	.word	0x0800a179
 800a110:	0800a179 	.word	0x0800a179
 800a114:	0800a179 	.word	0x0800a179
 800a118:	0800a179 	.word	0x0800a179
 800a11c:	0800a179 	.word	0x0800a179
 800a120:	0800a179 	.word	0x0800a179
 800a124:	0800a169 	.word	0x0800a169
 800a128:	0800a179 	.word	0x0800a179
 800a12c:	0800a179 	.word	0x0800a179
 800a130:	0800a179 	.word	0x0800a179
 800a134:	0800a179 	.word	0x0800a179
 800a138:	0800a179 	.word	0x0800a179
 800a13c:	0800a179 	.word	0x0800a179
 800a140:	0800a179 	.word	0x0800a179
 800a144:	0800a171 	.word	0x0800a171
 800a148:	2301      	movs	r3, #1
 800a14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a14e:	e326      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a150:	2304      	movs	r3, #4
 800a152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a156:	e322      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a158:	2308      	movs	r3, #8
 800a15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a15e:	e31e      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a160:	2310      	movs	r3, #16
 800a162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a166:	e31a      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a168:	2320      	movs	r3, #32
 800a16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a16e:	e316      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a170:	2340      	movs	r3, #64	; 0x40
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a176:	e312      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a178:	2380      	movs	r3, #128	; 0x80
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a17e:	e30e      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a69      	ldr	r2, [pc, #420]	; (800a32c <UART_SetConfig+0x33c>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d130      	bne.n	800a1ec <UART_SetConfig+0x1fc>
 800a18a:	4b67      	ldr	r3, [pc, #412]	; (800a328 <UART_SetConfig+0x338>)
 800a18c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a18e:	f003 0307 	and.w	r3, r3, #7
 800a192:	2b05      	cmp	r3, #5
 800a194:	d826      	bhi.n	800a1e4 <UART_SetConfig+0x1f4>
 800a196:	a201      	add	r2, pc, #4	; (adr r2, 800a19c <UART_SetConfig+0x1ac>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a1b5 	.word	0x0800a1b5
 800a1a0:	0800a1bd 	.word	0x0800a1bd
 800a1a4:	0800a1c5 	.word	0x0800a1c5
 800a1a8:	0800a1cd 	.word	0x0800a1cd
 800a1ac:	0800a1d5 	.word	0x0800a1d5
 800a1b0:	0800a1dd 	.word	0x0800a1dd
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ba:	e2f0      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a1bc:	2304      	movs	r3, #4
 800a1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1c2:	e2ec      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a1c4:	2308      	movs	r3, #8
 800a1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ca:	e2e8      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a1cc:	2310      	movs	r3, #16
 800a1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1d2:	e2e4      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a1d4:	2320      	movs	r3, #32
 800a1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1da:	e2e0      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a1dc:	2340      	movs	r3, #64	; 0x40
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1e2:	e2dc      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a1e4:	2380      	movs	r3, #128	; 0x80
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ea:	e2d8      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a4f      	ldr	r2, [pc, #316]	; (800a330 <UART_SetConfig+0x340>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d130      	bne.n	800a258 <UART_SetConfig+0x268>
 800a1f6:	4b4c      	ldr	r3, [pc, #304]	; (800a328 <UART_SetConfig+0x338>)
 800a1f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1fa:	f003 0307 	and.w	r3, r3, #7
 800a1fe:	2b05      	cmp	r3, #5
 800a200:	d826      	bhi.n	800a250 <UART_SetConfig+0x260>
 800a202:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <UART_SetConfig+0x218>)
 800a204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a208:	0800a221 	.word	0x0800a221
 800a20c:	0800a229 	.word	0x0800a229
 800a210:	0800a231 	.word	0x0800a231
 800a214:	0800a239 	.word	0x0800a239
 800a218:	0800a241 	.word	0x0800a241
 800a21c:	0800a249 	.word	0x0800a249
 800a220:	2300      	movs	r3, #0
 800a222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a226:	e2ba      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a228:	2304      	movs	r3, #4
 800a22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a22e:	e2b6      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a230:	2308      	movs	r3, #8
 800a232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a236:	e2b2      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a238:	2310      	movs	r3, #16
 800a23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23e:	e2ae      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a240:	2320      	movs	r3, #32
 800a242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a246:	e2aa      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a248:	2340      	movs	r3, #64	; 0x40
 800a24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a24e:	e2a6      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a250:	2380      	movs	r3, #128	; 0x80
 800a252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a256:	e2a2      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a35      	ldr	r2, [pc, #212]	; (800a334 <UART_SetConfig+0x344>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d130      	bne.n	800a2c4 <UART_SetConfig+0x2d4>
 800a262:	4b31      	ldr	r3, [pc, #196]	; (800a328 <UART_SetConfig+0x338>)
 800a264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a266:	f003 0307 	and.w	r3, r3, #7
 800a26a:	2b05      	cmp	r3, #5
 800a26c:	d826      	bhi.n	800a2bc <UART_SetConfig+0x2cc>
 800a26e:	a201      	add	r2, pc, #4	; (adr r2, 800a274 <UART_SetConfig+0x284>)
 800a270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a274:	0800a28d 	.word	0x0800a28d
 800a278:	0800a295 	.word	0x0800a295
 800a27c:	0800a29d 	.word	0x0800a29d
 800a280:	0800a2a5 	.word	0x0800a2a5
 800a284:	0800a2ad 	.word	0x0800a2ad
 800a288:	0800a2b5 	.word	0x0800a2b5
 800a28c:	2300      	movs	r3, #0
 800a28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a292:	e284      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a294:	2304      	movs	r3, #4
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29a:	e280      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a29c:	2308      	movs	r3, #8
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a2:	e27c      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a2a4:	2310      	movs	r3, #16
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2aa:	e278      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a2ac:	2320      	movs	r3, #32
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b2:	e274      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a2b4:	2340      	movs	r3, #64	; 0x40
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ba:	e270      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a2bc:	2380      	movs	r3, #128	; 0x80
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2c2:	e26c      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a1b      	ldr	r2, [pc, #108]	; (800a338 <UART_SetConfig+0x348>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d142      	bne.n	800a354 <UART_SetConfig+0x364>
 800a2ce:	4b16      	ldr	r3, [pc, #88]	; (800a328 <UART_SetConfig+0x338>)
 800a2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d2:	f003 0307 	and.w	r3, r3, #7
 800a2d6:	2b05      	cmp	r3, #5
 800a2d8:	d838      	bhi.n	800a34c <UART_SetConfig+0x35c>
 800a2da:	a201      	add	r2, pc, #4	; (adr r2, 800a2e0 <UART_SetConfig+0x2f0>)
 800a2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e0:	0800a2f9 	.word	0x0800a2f9
 800a2e4:	0800a301 	.word	0x0800a301
 800a2e8:	0800a309 	.word	0x0800a309
 800a2ec:	0800a311 	.word	0x0800a311
 800a2f0:	0800a33d 	.word	0x0800a33d
 800a2f4:	0800a345 	.word	0x0800a345
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fe:	e24e      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a300:	2304      	movs	r3, #4
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a306:	e24a      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a308:	2308      	movs	r3, #8
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30e:	e246      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a310:	2310      	movs	r3, #16
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a316:	e242      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a318:	cfff69f3 	.word	0xcfff69f3
 800a31c:	58000c00 	.word	0x58000c00
 800a320:	11fff4ff 	.word	0x11fff4ff
 800a324:	40011000 	.word	0x40011000
 800a328:	58024400 	.word	0x58024400
 800a32c:	40004400 	.word	0x40004400
 800a330:	40004800 	.word	0x40004800
 800a334:	40004c00 	.word	0x40004c00
 800a338:	40005000 	.word	0x40005000
 800a33c:	2320      	movs	r3, #32
 800a33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a342:	e22c      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a344:	2340      	movs	r3, #64	; 0x40
 800a346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a34a:	e228      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a34c:	2380      	movs	r3, #128	; 0x80
 800a34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a352:	e224      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4ab1      	ldr	r2, [pc, #708]	; (800a620 <UART_SetConfig+0x630>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d176      	bne.n	800a44c <UART_SetConfig+0x45c>
 800a35e:	4bb1      	ldr	r3, [pc, #708]	; (800a624 <UART_SetConfig+0x634>)
 800a360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a366:	2b28      	cmp	r3, #40	; 0x28
 800a368:	d86c      	bhi.n	800a444 <UART_SetConfig+0x454>
 800a36a:	a201      	add	r2, pc, #4	; (adr r2, 800a370 <UART_SetConfig+0x380>)
 800a36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a370:	0800a415 	.word	0x0800a415
 800a374:	0800a445 	.word	0x0800a445
 800a378:	0800a445 	.word	0x0800a445
 800a37c:	0800a445 	.word	0x0800a445
 800a380:	0800a445 	.word	0x0800a445
 800a384:	0800a445 	.word	0x0800a445
 800a388:	0800a445 	.word	0x0800a445
 800a38c:	0800a445 	.word	0x0800a445
 800a390:	0800a41d 	.word	0x0800a41d
 800a394:	0800a445 	.word	0x0800a445
 800a398:	0800a445 	.word	0x0800a445
 800a39c:	0800a445 	.word	0x0800a445
 800a3a0:	0800a445 	.word	0x0800a445
 800a3a4:	0800a445 	.word	0x0800a445
 800a3a8:	0800a445 	.word	0x0800a445
 800a3ac:	0800a445 	.word	0x0800a445
 800a3b0:	0800a425 	.word	0x0800a425
 800a3b4:	0800a445 	.word	0x0800a445
 800a3b8:	0800a445 	.word	0x0800a445
 800a3bc:	0800a445 	.word	0x0800a445
 800a3c0:	0800a445 	.word	0x0800a445
 800a3c4:	0800a445 	.word	0x0800a445
 800a3c8:	0800a445 	.word	0x0800a445
 800a3cc:	0800a445 	.word	0x0800a445
 800a3d0:	0800a42d 	.word	0x0800a42d
 800a3d4:	0800a445 	.word	0x0800a445
 800a3d8:	0800a445 	.word	0x0800a445
 800a3dc:	0800a445 	.word	0x0800a445
 800a3e0:	0800a445 	.word	0x0800a445
 800a3e4:	0800a445 	.word	0x0800a445
 800a3e8:	0800a445 	.word	0x0800a445
 800a3ec:	0800a445 	.word	0x0800a445
 800a3f0:	0800a435 	.word	0x0800a435
 800a3f4:	0800a445 	.word	0x0800a445
 800a3f8:	0800a445 	.word	0x0800a445
 800a3fc:	0800a445 	.word	0x0800a445
 800a400:	0800a445 	.word	0x0800a445
 800a404:	0800a445 	.word	0x0800a445
 800a408:	0800a445 	.word	0x0800a445
 800a40c:	0800a445 	.word	0x0800a445
 800a410:	0800a43d 	.word	0x0800a43d
 800a414:	2301      	movs	r3, #1
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a41a:	e1c0      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a41c:	2304      	movs	r3, #4
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a422:	e1bc      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a424:	2308      	movs	r3, #8
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a42a:	e1b8      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a42c:	2310      	movs	r3, #16
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a432:	e1b4      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a434:	2320      	movs	r3, #32
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a43a:	e1b0      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a43c:	2340      	movs	r3, #64	; 0x40
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a442:	e1ac      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a444:	2380      	movs	r3, #128	; 0x80
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a44a:	e1a8      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a75      	ldr	r2, [pc, #468]	; (800a628 <UART_SetConfig+0x638>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d130      	bne.n	800a4b8 <UART_SetConfig+0x4c8>
 800a456:	4b73      	ldr	r3, [pc, #460]	; (800a624 <UART_SetConfig+0x634>)
 800a458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a45a:	f003 0307 	and.w	r3, r3, #7
 800a45e:	2b05      	cmp	r3, #5
 800a460:	d826      	bhi.n	800a4b0 <UART_SetConfig+0x4c0>
 800a462:	a201      	add	r2, pc, #4	; (adr r2, 800a468 <UART_SetConfig+0x478>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a481 	.word	0x0800a481
 800a46c:	0800a489 	.word	0x0800a489
 800a470:	0800a491 	.word	0x0800a491
 800a474:	0800a499 	.word	0x0800a499
 800a478:	0800a4a1 	.word	0x0800a4a1
 800a47c:	0800a4a9 	.word	0x0800a4a9
 800a480:	2300      	movs	r3, #0
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a486:	e18a      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a488:	2304      	movs	r3, #4
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a48e:	e186      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a490:	2308      	movs	r3, #8
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a496:	e182      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a498:	2310      	movs	r3, #16
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a49e:	e17e      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a4a0:	2320      	movs	r3, #32
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4a6:	e17a      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a4a8:	2340      	movs	r3, #64	; 0x40
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ae:	e176      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a4b0:	2380      	movs	r3, #128	; 0x80
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b6:	e172      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a5b      	ldr	r2, [pc, #364]	; (800a62c <UART_SetConfig+0x63c>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d130      	bne.n	800a524 <UART_SetConfig+0x534>
 800a4c2:	4b58      	ldr	r3, [pc, #352]	; (800a624 <UART_SetConfig+0x634>)
 800a4c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c6:	f003 0307 	and.w	r3, r3, #7
 800a4ca:	2b05      	cmp	r3, #5
 800a4cc:	d826      	bhi.n	800a51c <UART_SetConfig+0x52c>
 800a4ce:	a201      	add	r2, pc, #4	; (adr r2, 800a4d4 <UART_SetConfig+0x4e4>)
 800a4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d4:	0800a4ed 	.word	0x0800a4ed
 800a4d8:	0800a4f5 	.word	0x0800a4f5
 800a4dc:	0800a4fd 	.word	0x0800a4fd
 800a4e0:	0800a505 	.word	0x0800a505
 800a4e4:	0800a50d 	.word	0x0800a50d
 800a4e8:	0800a515 	.word	0x0800a515
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4f2:	e154      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a4f4:	2304      	movs	r3, #4
 800a4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4fa:	e150      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a4fc:	2308      	movs	r3, #8
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a502:	e14c      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a504:	2310      	movs	r3, #16
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a50a:	e148      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a50c:	2320      	movs	r3, #32
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a512:	e144      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a514:	2340      	movs	r3, #64	; 0x40
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a51a:	e140      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a51c:	2380      	movs	r3, #128	; 0x80
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a522:	e13c      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a41      	ldr	r2, [pc, #260]	; (800a630 <UART_SetConfig+0x640>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	f040 8082 	bne.w	800a634 <UART_SetConfig+0x644>
 800a530:	4b3c      	ldr	r3, [pc, #240]	; (800a624 <UART_SetConfig+0x634>)
 800a532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a538:	2b28      	cmp	r3, #40	; 0x28
 800a53a:	d86d      	bhi.n	800a618 <UART_SetConfig+0x628>
 800a53c:	a201      	add	r2, pc, #4	; (adr r2, 800a544 <UART_SetConfig+0x554>)
 800a53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a542:	bf00      	nop
 800a544:	0800a5e9 	.word	0x0800a5e9
 800a548:	0800a619 	.word	0x0800a619
 800a54c:	0800a619 	.word	0x0800a619
 800a550:	0800a619 	.word	0x0800a619
 800a554:	0800a619 	.word	0x0800a619
 800a558:	0800a619 	.word	0x0800a619
 800a55c:	0800a619 	.word	0x0800a619
 800a560:	0800a619 	.word	0x0800a619
 800a564:	0800a5f1 	.word	0x0800a5f1
 800a568:	0800a619 	.word	0x0800a619
 800a56c:	0800a619 	.word	0x0800a619
 800a570:	0800a619 	.word	0x0800a619
 800a574:	0800a619 	.word	0x0800a619
 800a578:	0800a619 	.word	0x0800a619
 800a57c:	0800a619 	.word	0x0800a619
 800a580:	0800a619 	.word	0x0800a619
 800a584:	0800a5f9 	.word	0x0800a5f9
 800a588:	0800a619 	.word	0x0800a619
 800a58c:	0800a619 	.word	0x0800a619
 800a590:	0800a619 	.word	0x0800a619
 800a594:	0800a619 	.word	0x0800a619
 800a598:	0800a619 	.word	0x0800a619
 800a59c:	0800a619 	.word	0x0800a619
 800a5a0:	0800a619 	.word	0x0800a619
 800a5a4:	0800a601 	.word	0x0800a601
 800a5a8:	0800a619 	.word	0x0800a619
 800a5ac:	0800a619 	.word	0x0800a619
 800a5b0:	0800a619 	.word	0x0800a619
 800a5b4:	0800a619 	.word	0x0800a619
 800a5b8:	0800a619 	.word	0x0800a619
 800a5bc:	0800a619 	.word	0x0800a619
 800a5c0:	0800a619 	.word	0x0800a619
 800a5c4:	0800a609 	.word	0x0800a609
 800a5c8:	0800a619 	.word	0x0800a619
 800a5cc:	0800a619 	.word	0x0800a619
 800a5d0:	0800a619 	.word	0x0800a619
 800a5d4:	0800a619 	.word	0x0800a619
 800a5d8:	0800a619 	.word	0x0800a619
 800a5dc:	0800a619 	.word	0x0800a619
 800a5e0:	0800a619 	.word	0x0800a619
 800a5e4:	0800a611 	.word	0x0800a611
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ee:	e0d6      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a5f0:	2304      	movs	r3, #4
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f6:	e0d2      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a5f8:	2308      	movs	r3, #8
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5fe:	e0ce      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a600:	2310      	movs	r3, #16
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a606:	e0ca      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a608:	2320      	movs	r3, #32
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a60e:	e0c6      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a610:	2340      	movs	r3, #64	; 0x40
 800a612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a616:	e0c2      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a618:	2380      	movs	r3, #128	; 0x80
 800a61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a61e:	e0be      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a620:	40011400 	.word	0x40011400
 800a624:	58024400 	.word	0x58024400
 800a628:	40007800 	.word	0x40007800
 800a62c:	40007c00 	.word	0x40007c00
 800a630:	40011800 	.word	0x40011800
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4aad      	ldr	r2, [pc, #692]	; (800a8f0 <UART_SetConfig+0x900>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d176      	bne.n	800a72c <UART_SetConfig+0x73c>
 800a63e:	4bad      	ldr	r3, [pc, #692]	; (800a8f4 <UART_SetConfig+0x904>)
 800a640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a646:	2b28      	cmp	r3, #40	; 0x28
 800a648:	d86c      	bhi.n	800a724 <UART_SetConfig+0x734>
 800a64a:	a201      	add	r2, pc, #4	; (adr r2, 800a650 <UART_SetConfig+0x660>)
 800a64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a650:	0800a6f5 	.word	0x0800a6f5
 800a654:	0800a725 	.word	0x0800a725
 800a658:	0800a725 	.word	0x0800a725
 800a65c:	0800a725 	.word	0x0800a725
 800a660:	0800a725 	.word	0x0800a725
 800a664:	0800a725 	.word	0x0800a725
 800a668:	0800a725 	.word	0x0800a725
 800a66c:	0800a725 	.word	0x0800a725
 800a670:	0800a6fd 	.word	0x0800a6fd
 800a674:	0800a725 	.word	0x0800a725
 800a678:	0800a725 	.word	0x0800a725
 800a67c:	0800a725 	.word	0x0800a725
 800a680:	0800a725 	.word	0x0800a725
 800a684:	0800a725 	.word	0x0800a725
 800a688:	0800a725 	.word	0x0800a725
 800a68c:	0800a725 	.word	0x0800a725
 800a690:	0800a705 	.word	0x0800a705
 800a694:	0800a725 	.word	0x0800a725
 800a698:	0800a725 	.word	0x0800a725
 800a69c:	0800a725 	.word	0x0800a725
 800a6a0:	0800a725 	.word	0x0800a725
 800a6a4:	0800a725 	.word	0x0800a725
 800a6a8:	0800a725 	.word	0x0800a725
 800a6ac:	0800a725 	.word	0x0800a725
 800a6b0:	0800a70d 	.word	0x0800a70d
 800a6b4:	0800a725 	.word	0x0800a725
 800a6b8:	0800a725 	.word	0x0800a725
 800a6bc:	0800a725 	.word	0x0800a725
 800a6c0:	0800a725 	.word	0x0800a725
 800a6c4:	0800a725 	.word	0x0800a725
 800a6c8:	0800a725 	.word	0x0800a725
 800a6cc:	0800a725 	.word	0x0800a725
 800a6d0:	0800a715 	.word	0x0800a715
 800a6d4:	0800a725 	.word	0x0800a725
 800a6d8:	0800a725 	.word	0x0800a725
 800a6dc:	0800a725 	.word	0x0800a725
 800a6e0:	0800a725 	.word	0x0800a725
 800a6e4:	0800a725 	.word	0x0800a725
 800a6e8:	0800a725 	.word	0x0800a725
 800a6ec:	0800a725 	.word	0x0800a725
 800a6f0:	0800a71d 	.word	0x0800a71d
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6fa:	e050      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a6fc:	2304      	movs	r3, #4
 800a6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a702:	e04c      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a704:	2308      	movs	r3, #8
 800a706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a70a:	e048      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a70c:	2310      	movs	r3, #16
 800a70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a712:	e044      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a714:	2320      	movs	r3, #32
 800a716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a71a:	e040      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a71c:	2340      	movs	r3, #64	; 0x40
 800a71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a722:	e03c      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a724:	2380      	movs	r3, #128	; 0x80
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72a:	e038      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a71      	ldr	r2, [pc, #452]	; (800a8f8 <UART_SetConfig+0x908>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d130      	bne.n	800a798 <UART_SetConfig+0x7a8>
 800a736:	4b6f      	ldr	r3, [pc, #444]	; (800a8f4 <UART_SetConfig+0x904>)
 800a738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a73a:	f003 0307 	and.w	r3, r3, #7
 800a73e:	2b05      	cmp	r3, #5
 800a740:	d826      	bhi.n	800a790 <UART_SetConfig+0x7a0>
 800a742:	a201      	add	r2, pc, #4	; (adr r2, 800a748 <UART_SetConfig+0x758>)
 800a744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a748:	0800a761 	.word	0x0800a761
 800a74c:	0800a769 	.word	0x0800a769
 800a750:	0800a771 	.word	0x0800a771
 800a754:	0800a779 	.word	0x0800a779
 800a758:	0800a781 	.word	0x0800a781
 800a75c:	0800a789 	.word	0x0800a789
 800a760:	2302      	movs	r3, #2
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a766:	e01a      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a768:	2304      	movs	r3, #4
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a76e:	e016      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a770:	2308      	movs	r3, #8
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a776:	e012      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a778:	2310      	movs	r3, #16
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a77e:	e00e      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a780:	2320      	movs	r3, #32
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a786:	e00a      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a788:	2340      	movs	r3, #64	; 0x40
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a78e:	e006      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a790:	2380      	movs	r3, #128	; 0x80
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a796:	e002      	b.n	800a79e <UART_SetConfig+0x7ae>
 800a798:	2380      	movs	r3, #128	; 0x80
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a55      	ldr	r2, [pc, #340]	; (800a8f8 <UART_SetConfig+0x908>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	f040 80f8 	bne.w	800a99a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a7ae:	2b20      	cmp	r3, #32
 800a7b0:	dc46      	bgt.n	800a840 <UART_SetConfig+0x850>
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	db75      	blt.n	800a8a2 <UART_SetConfig+0x8b2>
 800a7b6:	3b02      	subs	r3, #2
 800a7b8:	2b1e      	cmp	r3, #30
 800a7ba:	d872      	bhi.n	800a8a2 <UART_SetConfig+0x8b2>
 800a7bc:	a201      	add	r2, pc, #4	; (adr r2, 800a7c4 <UART_SetConfig+0x7d4>)
 800a7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c2:	bf00      	nop
 800a7c4:	0800a847 	.word	0x0800a847
 800a7c8:	0800a8a3 	.word	0x0800a8a3
 800a7cc:	0800a84f 	.word	0x0800a84f
 800a7d0:	0800a8a3 	.word	0x0800a8a3
 800a7d4:	0800a8a3 	.word	0x0800a8a3
 800a7d8:	0800a8a3 	.word	0x0800a8a3
 800a7dc:	0800a85f 	.word	0x0800a85f
 800a7e0:	0800a8a3 	.word	0x0800a8a3
 800a7e4:	0800a8a3 	.word	0x0800a8a3
 800a7e8:	0800a8a3 	.word	0x0800a8a3
 800a7ec:	0800a8a3 	.word	0x0800a8a3
 800a7f0:	0800a8a3 	.word	0x0800a8a3
 800a7f4:	0800a8a3 	.word	0x0800a8a3
 800a7f8:	0800a8a3 	.word	0x0800a8a3
 800a7fc:	0800a86f 	.word	0x0800a86f
 800a800:	0800a8a3 	.word	0x0800a8a3
 800a804:	0800a8a3 	.word	0x0800a8a3
 800a808:	0800a8a3 	.word	0x0800a8a3
 800a80c:	0800a8a3 	.word	0x0800a8a3
 800a810:	0800a8a3 	.word	0x0800a8a3
 800a814:	0800a8a3 	.word	0x0800a8a3
 800a818:	0800a8a3 	.word	0x0800a8a3
 800a81c:	0800a8a3 	.word	0x0800a8a3
 800a820:	0800a8a3 	.word	0x0800a8a3
 800a824:	0800a8a3 	.word	0x0800a8a3
 800a828:	0800a8a3 	.word	0x0800a8a3
 800a82c:	0800a8a3 	.word	0x0800a8a3
 800a830:	0800a8a3 	.word	0x0800a8a3
 800a834:	0800a8a3 	.word	0x0800a8a3
 800a838:	0800a8a3 	.word	0x0800a8a3
 800a83c:	0800a895 	.word	0x0800a895
 800a840:	2b40      	cmp	r3, #64	; 0x40
 800a842:	d02a      	beq.n	800a89a <UART_SetConfig+0x8aa>
 800a844:	e02d      	b.n	800a8a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a846:	f7fe f815 	bl	8008874 <HAL_RCCEx_GetD3PCLK1Freq>
 800a84a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a84c:	e02f      	b.n	800a8ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a84e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a852:	4618      	mov	r0, r3
 800a854:	f7fe f824 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a85c:	e027      	b.n	800a8ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a85e:	f107 0318 	add.w	r3, r7, #24
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe f970 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a86c:	e01f      	b.n	800a8ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a86e:	4b21      	ldr	r3, [pc, #132]	; (800a8f4 <UART_SetConfig+0x904>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 0320 	and.w	r3, r3, #32
 800a876:	2b00      	cmp	r3, #0
 800a878:	d009      	beq.n	800a88e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a87a:	4b1e      	ldr	r3, [pc, #120]	; (800a8f4 <UART_SetConfig+0x904>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	08db      	lsrs	r3, r3, #3
 800a880:	f003 0303 	and.w	r3, r3, #3
 800a884:	4a1d      	ldr	r2, [pc, #116]	; (800a8fc <UART_SetConfig+0x90c>)
 800a886:	fa22 f303 	lsr.w	r3, r2, r3
 800a88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a88c:	e00f      	b.n	800a8ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a88e:	4b1b      	ldr	r3, [pc, #108]	; (800a8fc <UART_SetConfig+0x90c>)
 800a890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a892:	e00c      	b.n	800a8ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a894:	4b1a      	ldr	r3, [pc, #104]	; (800a900 <UART_SetConfig+0x910>)
 800a896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a898:	e009      	b.n	800a8ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a89a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8a0:	e005      	b.n	800a8ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a8ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 81ee 	beq.w	800ac92 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	4a12      	ldr	r2, [pc, #72]	; (800a904 <UART_SetConfig+0x914>)
 800a8bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8c8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	685a      	ldr	r2, [r3, #4]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	005b      	lsls	r3, r3, #1
 800a8d2:	4413      	add	r3, r2
 800a8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d305      	bcc.n	800a8e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d910      	bls.n	800a908 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a8ec:	e1d1      	b.n	800ac92 <UART_SetConfig+0xca2>
 800a8ee:	bf00      	nop
 800a8f0:	40011c00 	.word	0x40011c00
 800a8f4:	58024400 	.word	0x58024400
 800a8f8:	58000c00 	.word	0x58000c00
 800a8fc:	03d09000 	.word	0x03d09000
 800a900:	003d0900 	.word	0x003d0900
 800a904:	0801b898 	.word	0x0801b898
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a90a:	2200      	movs	r2, #0
 800a90c:	60bb      	str	r3, [r7, #8]
 800a90e:	60fa      	str	r2, [r7, #12]
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	4ac0      	ldr	r2, [pc, #768]	; (800ac18 <UART_SetConfig+0xc28>)
 800a916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	2200      	movs	r2, #0
 800a91e:	603b      	str	r3, [r7, #0]
 800a920:	607a      	str	r2, [r7, #4]
 800a922:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a92a:	f7f5 fd59 	bl	80003e0 <__aeabi_uldivmod>
 800a92e:	4602      	mov	r2, r0
 800a930:	460b      	mov	r3, r1
 800a932:	4610      	mov	r0, r2
 800a934:	4619      	mov	r1, r3
 800a936:	f04f 0200 	mov.w	r2, #0
 800a93a:	f04f 0300 	mov.w	r3, #0
 800a93e:	020b      	lsls	r3, r1, #8
 800a940:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a944:	0202      	lsls	r2, r0, #8
 800a946:	6979      	ldr	r1, [r7, #20]
 800a948:	6849      	ldr	r1, [r1, #4]
 800a94a:	0849      	lsrs	r1, r1, #1
 800a94c:	2000      	movs	r0, #0
 800a94e:	460c      	mov	r4, r1
 800a950:	4605      	mov	r5, r0
 800a952:	eb12 0804 	adds.w	r8, r2, r4
 800a956:	eb43 0905 	adc.w	r9, r3, r5
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	469a      	mov	sl, r3
 800a962:	4693      	mov	fp, r2
 800a964:	4652      	mov	r2, sl
 800a966:	465b      	mov	r3, fp
 800a968:	4640      	mov	r0, r8
 800a96a:	4649      	mov	r1, r9
 800a96c:	f7f5 fd38 	bl	80003e0 <__aeabi_uldivmod>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4613      	mov	r3, r2
 800a976:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a97e:	d308      	bcc.n	800a992 <UART_SetConfig+0x9a2>
 800a980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a986:	d204      	bcs.n	800a992 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a98e:	60da      	str	r2, [r3, #12]
 800a990:	e17f      	b.n	800ac92 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a998:	e17b      	b.n	800ac92 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9a2:	f040 80bd 	bne.w	800ab20 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a9a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a9aa:	2b20      	cmp	r3, #32
 800a9ac:	dc48      	bgt.n	800aa40 <UART_SetConfig+0xa50>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	db7b      	blt.n	800aaaa <UART_SetConfig+0xaba>
 800a9b2:	2b20      	cmp	r3, #32
 800a9b4:	d879      	bhi.n	800aaaa <UART_SetConfig+0xaba>
 800a9b6:	a201      	add	r2, pc, #4	; (adr r2, 800a9bc <UART_SetConfig+0x9cc>)
 800a9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9bc:	0800aa47 	.word	0x0800aa47
 800a9c0:	0800aa4f 	.word	0x0800aa4f
 800a9c4:	0800aaab 	.word	0x0800aaab
 800a9c8:	0800aaab 	.word	0x0800aaab
 800a9cc:	0800aa57 	.word	0x0800aa57
 800a9d0:	0800aaab 	.word	0x0800aaab
 800a9d4:	0800aaab 	.word	0x0800aaab
 800a9d8:	0800aaab 	.word	0x0800aaab
 800a9dc:	0800aa67 	.word	0x0800aa67
 800a9e0:	0800aaab 	.word	0x0800aaab
 800a9e4:	0800aaab 	.word	0x0800aaab
 800a9e8:	0800aaab 	.word	0x0800aaab
 800a9ec:	0800aaab 	.word	0x0800aaab
 800a9f0:	0800aaab 	.word	0x0800aaab
 800a9f4:	0800aaab 	.word	0x0800aaab
 800a9f8:	0800aaab 	.word	0x0800aaab
 800a9fc:	0800aa77 	.word	0x0800aa77
 800aa00:	0800aaab 	.word	0x0800aaab
 800aa04:	0800aaab 	.word	0x0800aaab
 800aa08:	0800aaab 	.word	0x0800aaab
 800aa0c:	0800aaab 	.word	0x0800aaab
 800aa10:	0800aaab 	.word	0x0800aaab
 800aa14:	0800aaab 	.word	0x0800aaab
 800aa18:	0800aaab 	.word	0x0800aaab
 800aa1c:	0800aaab 	.word	0x0800aaab
 800aa20:	0800aaab 	.word	0x0800aaab
 800aa24:	0800aaab 	.word	0x0800aaab
 800aa28:	0800aaab 	.word	0x0800aaab
 800aa2c:	0800aaab 	.word	0x0800aaab
 800aa30:	0800aaab 	.word	0x0800aaab
 800aa34:	0800aaab 	.word	0x0800aaab
 800aa38:	0800aaab 	.word	0x0800aaab
 800aa3c:	0800aa9d 	.word	0x0800aa9d
 800aa40:	2b40      	cmp	r3, #64	; 0x40
 800aa42:	d02e      	beq.n	800aaa2 <UART_SetConfig+0xab2>
 800aa44:	e031      	b.n	800aaaa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa46:	f7fc ffad 	bl	80079a4 <HAL_RCC_GetPCLK1Freq>
 800aa4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa4c:	e033      	b.n	800aab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa4e:	f7fc ffbf 	bl	80079d0 <HAL_RCC_GetPCLK2Freq>
 800aa52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa54:	e02f      	b.n	800aab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fd ff20 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa64:	e027      	b.n	800aab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa66:	f107 0318 	add.w	r3, r7, #24
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe f86c 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa74:	e01f      	b.n	800aab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa76:	4b69      	ldr	r3, [pc, #420]	; (800ac1c <UART_SetConfig+0xc2c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 0320 	and.w	r3, r3, #32
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d009      	beq.n	800aa96 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa82:	4b66      	ldr	r3, [pc, #408]	; (800ac1c <UART_SetConfig+0xc2c>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	08db      	lsrs	r3, r3, #3
 800aa88:	f003 0303 	and.w	r3, r3, #3
 800aa8c:	4a64      	ldr	r2, [pc, #400]	; (800ac20 <UART_SetConfig+0xc30>)
 800aa8e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa94:	e00f      	b.n	800aab6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800aa96:	4b62      	ldr	r3, [pc, #392]	; (800ac20 <UART_SetConfig+0xc30>)
 800aa98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa9a:	e00c      	b.n	800aab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa9c:	4b61      	ldr	r3, [pc, #388]	; (800ac24 <UART_SetConfig+0xc34>)
 800aa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaa0:	e009      	b.n	800aab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaa8:	e005      	b.n	800aab6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 80ea 	beq.w	800ac92 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac2:	4a55      	ldr	r2, [pc, #340]	; (800ac18 <UART_SetConfig+0xc28>)
 800aac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aac8:	461a      	mov	r2, r3
 800aaca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aacc:	fbb3 f3f2 	udiv	r3, r3, r2
 800aad0:	005a      	lsls	r2, r3, #1
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	085b      	lsrs	r3, r3, #1
 800aad8:	441a      	add	r2, r3
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae6:	2b0f      	cmp	r3, #15
 800aae8:	d916      	bls.n	800ab18 <UART_SetConfig+0xb28>
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaf0:	d212      	bcs.n	800ab18 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	f023 030f 	bic.w	r3, r3, #15
 800aafa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafe:	085b      	lsrs	r3, r3, #1
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	f003 0307 	and.w	r3, r3, #7
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ab14:	60da      	str	r2, [r3, #12]
 800ab16:	e0bc      	b.n	800ac92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ab1e:	e0b8      	b.n	800ac92 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab24:	2b20      	cmp	r3, #32
 800ab26:	dc4b      	bgt.n	800abc0 <UART_SetConfig+0xbd0>
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f2c0 8087 	blt.w	800ac3c <UART_SetConfig+0xc4c>
 800ab2e:	2b20      	cmp	r3, #32
 800ab30:	f200 8084 	bhi.w	800ac3c <UART_SetConfig+0xc4c>
 800ab34:	a201      	add	r2, pc, #4	; (adr r2, 800ab3c <UART_SetConfig+0xb4c>)
 800ab36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3a:	bf00      	nop
 800ab3c:	0800abc7 	.word	0x0800abc7
 800ab40:	0800abcf 	.word	0x0800abcf
 800ab44:	0800ac3d 	.word	0x0800ac3d
 800ab48:	0800ac3d 	.word	0x0800ac3d
 800ab4c:	0800abd7 	.word	0x0800abd7
 800ab50:	0800ac3d 	.word	0x0800ac3d
 800ab54:	0800ac3d 	.word	0x0800ac3d
 800ab58:	0800ac3d 	.word	0x0800ac3d
 800ab5c:	0800abe7 	.word	0x0800abe7
 800ab60:	0800ac3d 	.word	0x0800ac3d
 800ab64:	0800ac3d 	.word	0x0800ac3d
 800ab68:	0800ac3d 	.word	0x0800ac3d
 800ab6c:	0800ac3d 	.word	0x0800ac3d
 800ab70:	0800ac3d 	.word	0x0800ac3d
 800ab74:	0800ac3d 	.word	0x0800ac3d
 800ab78:	0800ac3d 	.word	0x0800ac3d
 800ab7c:	0800abf7 	.word	0x0800abf7
 800ab80:	0800ac3d 	.word	0x0800ac3d
 800ab84:	0800ac3d 	.word	0x0800ac3d
 800ab88:	0800ac3d 	.word	0x0800ac3d
 800ab8c:	0800ac3d 	.word	0x0800ac3d
 800ab90:	0800ac3d 	.word	0x0800ac3d
 800ab94:	0800ac3d 	.word	0x0800ac3d
 800ab98:	0800ac3d 	.word	0x0800ac3d
 800ab9c:	0800ac3d 	.word	0x0800ac3d
 800aba0:	0800ac3d 	.word	0x0800ac3d
 800aba4:	0800ac3d 	.word	0x0800ac3d
 800aba8:	0800ac3d 	.word	0x0800ac3d
 800abac:	0800ac3d 	.word	0x0800ac3d
 800abb0:	0800ac3d 	.word	0x0800ac3d
 800abb4:	0800ac3d 	.word	0x0800ac3d
 800abb8:	0800ac3d 	.word	0x0800ac3d
 800abbc:	0800ac2f 	.word	0x0800ac2f
 800abc0:	2b40      	cmp	r3, #64	; 0x40
 800abc2:	d037      	beq.n	800ac34 <UART_SetConfig+0xc44>
 800abc4:	e03a      	b.n	800ac3c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abc6:	f7fc feed 	bl	80079a4 <HAL_RCC_GetPCLK1Freq>
 800abca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800abcc:	e03c      	b.n	800ac48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abce:	f7fc feff 	bl	80079d0 <HAL_RCC_GetPCLK2Freq>
 800abd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800abd4:	e038      	b.n	800ac48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fd fe60 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abe4:	e030      	b.n	800ac48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abe6:	f107 0318 	add.w	r3, r7, #24
 800abea:	4618      	mov	r0, r3
 800abec:	f7fd ffac 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abf4:	e028      	b.n	800ac48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abf6:	4b09      	ldr	r3, [pc, #36]	; (800ac1c <UART_SetConfig+0xc2c>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0320 	and.w	r3, r3, #32
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d012      	beq.n	800ac28 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac02:	4b06      	ldr	r3, [pc, #24]	; (800ac1c <UART_SetConfig+0xc2c>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	08db      	lsrs	r3, r3, #3
 800ac08:	f003 0303 	and.w	r3, r3, #3
 800ac0c:	4a04      	ldr	r2, [pc, #16]	; (800ac20 <UART_SetConfig+0xc30>)
 800ac0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac14:	e018      	b.n	800ac48 <UART_SetConfig+0xc58>
 800ac16:	bf00      	nop
 800ac18:	0801b898 	.word	0x0801b898
 800ac1c:	58024400 	.word	0x58024400
 800ac20:	03d09000 	.word	0x03d09000
 800ac24:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ac28:	4b24      	ldr	r3, [pc, #144]	; (800acbc <UART_SetConfig+0xccc>)
 800ac2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac2c:	e00c      	b.n	800ac48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac2e:	4b24      	ldr	r3, [pc, #144]	; (800acc0 <UART_SetConfig+0xcd0>)
 800ac30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac32:	e009      	b.n	800ac48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac3a:	e005      	b.n	800ac48 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ac46:	bf00      	nop
    }

    if (pclk != 0U)
 800ac48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d021      	beq.n	800ac92 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac52:	4a1c      	ldr	r2, [pc, #112]	; (800acc4 <UART_SetConfig+0xcd4>)
 800ac54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac5c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	085b      	lsrs	r3, r3, #1
 800ac66:	441a      	add	r2, r3
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac70:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac74:	2b0f      	cmp	r3, #15
 800ac76:	d909      	bls.n	800ac8c <UART_SetConfig+0xc9c>
 800ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac7e:	d205      	bcs.n	800ac8c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	60da      	str	r2, [r3, #12]
 800ac8a:	e002      	b.n	800ac92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	2200      	movs	r2, #0
 800aca6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	2200      	movs	r2, #0
 800acac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800acae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3748      	adds	r7, #72	; 0x48
 800acb6:	46bd      	mov	sp, r7
 800acb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acbc:	03d09000 	.word	0x03d09000
 800acc0:	003d0900 	.word	0x003d0900
 800acc4:	0801b898 	.word	0x0801b898

0800acc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00a      	beq.n	800acf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	430a      	orrs	r2, r1
 800acf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf6:	f003 0302 	and.w	r3, r3, #2
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00a      	beq.n	800ad14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	430a      	orrs	r2, r1
 800ad12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad18:	f003 0304 	and.w	r3, r3, #4
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00a      	beq.n	800ad36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	430a      	orrs	r2, r1
 800ad34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad3a:	f003 0308 	and.w	r3, r3, #8
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00a      	beq.n	800ad58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	430a      	orrs	r2, r1
 800ad56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad5c:	f003 0310 	and.w	r3, r3, #16
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00a      	beq.n	800ad7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	430a      	orrs	r2, r1
 800ad78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7e:	f003 0320 	and.w	r3, r3, #32
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00a      	beq.n	800ad9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	430a      	orrs	r2, r1
 800ad9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d01a      	beq.n	800adde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	430a      	orrs	r2, r1
 800adbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adc6:	d10a      	bne.n	800adde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	430a      	orrs	r2, r1
 800addc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00a      	beq.n	800ae00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	430a      	orrs	r2, r1
 800adfe:	605a      	str	r2, [r3, #4]
  }
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af02      	add	r7, sp, #8
 800ae12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae1c:	f7f7 f93a 	bl	8002094 <HAL_GetTick>
 800ae20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0308 	and.w	r3, r3, #8
 800ae2c:	2b08      	cmp	r3, #8
 800ae2e:	d10e      	bne.n	800ae4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f82f 	bl	800aea2 <UART_WaitOnFlagUntilTimeout>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	e025      	b.n	800ae9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0304 	and.w	r3, r3, #4
 800ae58:	2b04      	cmp	r3, #4
 800ae5a:	d10e      	bne.n	800ae7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f819 	bl	800aea2 <UART_WaitOnFlagUntilTimeout>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d001      	beq.n	800ae7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae76:	2303      	movs	r3, #3
 800ae78:	e00f      	b.n	800ae9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2220      	movs	r2, #32
 800ae7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2220      	movs	r2, #32
 800ae86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b09c      	sub	sp, #112	; 0x70
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	60f8      	str	r0, [r7, #12]
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	603b      	str	r3, [r7, #0]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeb2:	e0a9      	b.n	800b008 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aeb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeba:	f000 80a5 	beq.w	800b008 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aebe:	f7f7 f8e9 	bl	8002094 <HAL_GetTick>
 800aec2:	4602      	mov	r2, r0
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d302      	bcc.n	800aed4 <UART_WaitOnFlagUntilTimeout+0x32>
 800aece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d140      	bne.n	800af56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aedc:	e853 3f00 	ldrex	r3, [r3]
 800aee0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aee4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aee8:	667b      	str	r3, [r7, #100]	; 0x64
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	461a      	mov	r2, r3
 800aef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aef4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aef8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aefa:	e841 2300 	strex	r3, r2, [r1]
 800aefe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800af00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1e6      	bne.n	800aed4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	3308      	adds	r3, #8
 800af0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af10:	e853 3f00 	ldrex	r3, [r3]
 800af14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af18:	f023 0301 	bic.w	r3, r3, #1
 800af1c:	663b      	str	r3, [r7, #96]	; 0x60
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	3308      	adds	r3, #8
 800af24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af26:	64ba      	str	r2, [r7, #72]	; 0x48
 800af28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af2e:	e841 2300 	strex	r3, r2, [r1]
 800af32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800af34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1e5      	bne.n	800af06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2220      	movs	r2, #32
 800af3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2220      	movs	r2, #32
 800af46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800af52:	2303      	movs	r3, #3
 800af54:	e069      	b.n	800b02a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	2b00      	cmp	r3, #0
 800af62:	d051      	beq.n	800b008 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af72:	d149      	bne.n	800b008 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af86:	e853 3f00 	ldrex	r3, [r3]
 800af8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af92:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	461a      	mov	r2, r3
 800af9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af9c:	637b      	str	r3, [r7, #52]	; 0x34
 800af9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afa4:	e841 2300 	strex	r3, r2, [r1]
 800afa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800afaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1e6      	bne.n	800af7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3308      	adds	r3, #8
 800afb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	e853 3f00 	ldrex	r3, [r3]
 800afbe:	613b      	str	r3, [r7, #16]
   return(result);
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	f023 0301 	bic.w	r3, r3, #1
 800afc6:	66bb      	str	r3, [r7, #104]	; 0x68
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3308      	adds	r3, #8
 800afce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800afd0:	623a      	str	r2, [r7, #32]
 800afd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd4:	69f9      	ldr	r1, [r7, #28]
 800afd6:	6a3a      	ldr	r2, [r7, #32]
 800afd8:	e841 2300 	strex	r3, r2, [r1]
 800afdc:	61bb      	str	r3, [r7, #24]
   return(result);
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1e5      	bne.n	800afb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2220      	movs	r2, #32
 800afe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2220      	movs	r2, #32
 800aff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2220      	movs	r2, #32
 800aff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b004:	2303      	movs	r3, #3
 800b006:	e010      	b.n	800b02a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	69da      	ldr	r2, [r3, #28]
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	4013      	ands	r3, r2
 800b012:	68ba      	ldr	r2, [r7, #8]
 800b014:	429a      	cmp	r2, r3
 800b016:	bf0c      	ite	eq
 800b018:	2301      	moveq	r3, #1
 800b01a:	2300      	movne	r3, #0
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	461a      	mov	r2, r3
 800b020:	79fb      	ldrb	r3, [r7, #7]
 800b022:	429a      	cmp	r2, r3
 800b024:	f43f af46 	beq.w	800aeb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3770      	adds	r7, #112	; 0x70
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
	...

0800b034 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b096      	sub	sp, #88	; 0x58
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	4613      	mov	r3, r2
 800b040:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	88fa      	ldrh	r2, [r7, #6]
 800b04c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2222      	movs	r2, #34	; 0x22
 800b05c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b064:	2b00      	cmp	r3, #0
 800b066:	d02c      	beq.n	800b0c2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b06c:	4a42      	ldr	r2, [pc, #264]	; (800b178 <UART_Start_Receive_DMA+0x144>)
 800b06e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b074:	4a41      	ldr	r2, [pc, #260]	; (800b17c <UART_Start_Receive_DMA+0x148>)
 800b076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b07c:	4a40      	ldr	r2, [pc, #256]	; (800b180 <UART_Start_Receive_DMA+0x14c>)
 800b07e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b084:	2200      	movs	r2, #0
 800b086:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	3324      	adds	r3, #36	; 0x24
 800b092:	4619      	mov	r1, r3
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b098:	461a      	mov	r2, r3
 800b09a:	88fb      	ldrh	r3, [r7, #6]
 800b09c:	f7f7 fc64 	bl	8002968 <HAL_DMA_Start_IT>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00d      	beq.n	800b0c2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2210      	movs	r2, #16
 800b0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2220      	movs	r2, #32
 800b0ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e055      	b.n	800b16e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d018      	beq.n	800b104 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0e6:	657b      	str	r3, [r7, #84]	; 0x54
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0f2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0f8:	e841 2300 	strex	r3, r2, [r1]
 800b0fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1e6      	bne.n	800b0d2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3308      	adds	r3, #8
 800b10a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10e:	e853 3f00 	ldrex	r3, [r3]
 800b112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	f043 0301 	orr.w	r3, r3, #1
 800b11a:	653b      	str	r3, [r7, #80]	; 0x50
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3308      	adds	r3, #8
 800b122:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b124:	637a      	str	r2, [r7, #52]	; 0x34
 800b126:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b128:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b12a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b12c:	e841 2300 	strex	r3, r2, [r1]
 800b130:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1e5      	bne.n	800b104 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	3308      	adds	r3, #8
 800b13e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	e853 3f00 	ldrex	r3, [r3]
 800b146:	613b      	str	r3, [r7, #16]
   return(result);
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b14e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3308      	adds	r3, #8
 800b156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b158:	623a      	str	r2, [r7, #32]
 800b15a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15c:	69f9      	ldr	r1, [r7, #28]
 800b15e:	6a3a      	ldr	r2, [r7, #32]
 800b160:	e841 2300 	strex	r3, r2, [r1]
 800b164:	61bb      	str	r3, [r7, #24]
   return(result);
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1e5      	bne.n	800b138 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3758      	adds	r7, #88	; 0x58
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	0800b387 	.word	0x0800b387
 800b17c:	0800b4a9 	.word	0x0800b4a9
 800b180:	0800b4e1 	.word	0x0800b4e1

0800b184 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b184:	b480      	push	{r7}
 800b186:	b08f      	sub	sp, #60	; 0x3c
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b192:	6a3b      	ldr	r3, [r7, #32]
 800b194:	e853 3f00 	ldrex	r3, [r3]
 800b198:	61fb      	str	r3, [r7, #28]
   return(result);
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b1a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1b2:	e841 2300 	strex	r3, r2, [r1]
 800b1b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1e6      	bne.n	800b18c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3308      	adds	r3, #8
 800b1c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	e853 3f00 	ldrex	r3, [r3]
 800b1cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b1d4:	633b      	str	r3, [r7, #48]	; 0x30
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3308      	adds	r3, #8
 800b1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1de:	61ba      	str	r2, [r7, #24]
 800b1e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e2:	6979      	ldr	r1, [r7, #20]
 800b1e4:	69ba      	ldr	r2, [r7, #24]
 800b1e6:	e841 2300 	strex	r3, r2, [r1]
 800b1ea:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1e5      	bne.n	800b1be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800b1fa:	bf00      	nop
 800b1fc:	373c      	adds	r7, #60	; 0x3c
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
	...

0800b208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b208:	b480      	push	{r7}
 800b20a:	b095      	sub	sp, #84	; 0x54
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b218:	e853 3f00 	ldrex	r3, [r3]
 800b21c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b220:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b224:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	461a      	mov	r2, r3
 800b22c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b22e:	643b      	str	r3, [r7, #64]	; 0x40
 800b230:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b232:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b236:	e841 2300 	strex	r3, r2, [r1]
 800b23a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1e6      	bne.n	800b210 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3308      	adds	r3, #8
 800b248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	e853 3f00 	ldrex	r3, [r3]
 800b250:	61fb      	str	r3, [r7, #28]
   return(result);
 800b252:	69fa      	ldr	r2, [r7, #28]
 800b254:	4b1e      	ldr	r3, [pc, #120]	; (800b2d0 <UART_EndRxTransfer+0xc8>)
 800b256:	4013      	ands	r3, r2
 800b258:	64bb      	str	r3, [r7, #72]	; 0x48
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3308      	adds	r3, #8
 800b260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b262:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b264:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b26a:	e841 2300 	strex	r3, r2, [r1]
 800b26e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1e5      	bne.n	800b242 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d118      	bne.n	800b2b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	e853 3f00 	ldrex	r3, [r3]
 800b28a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	f023 0310 	bic.w	r3, r3, #16
 800b292:	647b      	str	r3, [r7, #68]	; 0x44
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	461a      	mov	r2, r3
 800b29a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b29c:	61bb      	str	r3, [r7, #24]
 800b29e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a0:	6979      	ldr	r1, [r7, #20]
 800b2a2:	69ba      	ldr	r2, [r7, #24]
 800b2a4:	e841 2300 	strex	r3, r2, [r1]
 800b2a8:	613b      	str	r3, [r7, #16]
   return(result);
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1e6      	bne.n	800b27e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2220      	movs	r2, #32
 800b2b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b2c4:	bf00      	nop
 800b2c6:	3754      	adds	r7, #84	; 0x54
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	effffffe 	.word	0xeffffffe

0800b2d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b090      	sub	sp, #64	; 0x40
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ea:	d037      	beq.n	800b35c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3308      	adds	r3, #8
 800b2fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	e853 3f00 	ldrex	r3, [r3]
 800b302:	623b      	str	r3, [r7, #32]
   return(result);
 800b304:	6a3b      	ldr	r3, [r7, #32]
 800b306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b30a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	3308      	adds	r3, #8
 800b312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b314:	633a      	str	r2, [r7, #48]	; 0x30
 800b316:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b31a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b31c:	e841 2300 	strex	r3, r2, [r1]
 800b320:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1e5      	bne.n	800b2f4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	e853 3f00 	ldrex	r3, [r3]
 800b334:	60fb      	str	r3, [r7, #12]
   return(result);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b33c:	637b      	str	r3, [r7, #52]	; 0x34
 800b33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	461a      	mov	r2, r3
 800b344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b346:	61fb      	str	r3, [r7, #28]
 800b348:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34a:	69b9      	ldr	r1, [r7, #24]
 800b34c:	69fa      	ldr	r2, [r7, #28]
 800b34e:	e841 2300 	strex	r3, r2, [r1]
 800b352:	617b      	str	r3, [r7, #20]
   return(result);
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1e6      	bne.n	800b328 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b35a:	e002      	b.n	800b362 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b35c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b35e:	f7f5 ff73 	bl	8001248 <HAL_UART_TxCpltCallback>
}
 800b362:	bf00      	nop
 800b364:	3740      	adds	r7, #64	; 0x40
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b084      	sub	sp, #16
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b376:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f7fe fe11 	bl	8009fa0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b37e:	bf00      	nop
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b09c      	sub	sp, #112	; 0x70
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b392:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	69db      	ldr	r3, [r3, #28]
 800b398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b39c:	d071      	beq.n	800b482 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b39e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ae:	e853 3f00 	ldrex	r3, [r3]
 800b3b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3cc:	e841 2300 	strex	r3, r2, [r1]
 800b3d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b3d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1e6      	bne.n	800b3a6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3308      	adds	r3, #8
 800b3de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e2:	e853 3f00 	ldrex	r3, [r3]
 800b3e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ea:	f023 0301 	bic.w	r3, r3, #1
 800b3ee:	667b      	str	r3, [r7, #100]	; 0x64
 800b3f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b3f8:	647a      	str	r2, [r7, #68]	; 0x44
 800b3fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b3fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b400:	e841 2300 	strex	r3, r2, [r1]
 800b404:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1e5      	bne.n	800b3d8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b40c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3308      	adds	r3, #8
 800b412:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b416:	e853 3f00 	ldrex	r3, [r3]
 800b41a:	623b      	str	r3, [r7, #32]
   return(result);
 800b41c:	6a3b      	ldr	r3, [r7, #32]
 800b41e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b422:	663b      	str	r3, [r7, #96]	; 0x60
 800b424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3308      	adds	r3, #8
 800b42a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b42c:	633a      	str	r2, [r7, #48]	; 0x30
 800b42e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b430:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b434:	e841 2300 	strex	r3, r2, [r1]
 800b438:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1e5      	bne.n	800b40c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b442:	2220      	movs	r2, #32
 800b444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b44a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d118      	bne.n	800b482 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	e853 3f00 	ldrex	r3, [r3]
 800b45c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f023 0310 	bic.w	r3, r3, #16
 800b464:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	461a      	mov	r2, r3
 800b46c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b46e:	61fb      	str	r3, [r7, #28]
 800b470:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b472:	69b9      	ldr	r1, [r7, #24]
 800b474:	69fa      	ldr	r2, [r7, #28]
 800b476:	e841 2300 	strex	r3, r2, [r1]
 800b47a:	617b      	str	r3, [r7, #20]
   return(result);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1e6      	bne.n	800b450 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b486:	2b01      	cmp	r3, #1
 800b488:	d107      	bne.n	800b49a <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b48c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b490:	4619      	mov	r1, r3
 800b492:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b494:	f7f5 feee 	bl	8001274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b498:	e002      	b.n	800b4a0 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800b49a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b49c:	f7fe fd8a 	bl	8009fb4 <HAL_UART_RxCpltCallback>
}
 800b4a0:	bf00      	nop
 800b4a2:	3770      	adds	r7, #112	; 0x70
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d109      	bne.n	800b4d2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b4c4:	085b      	lsrs	r3, r3, #1
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f7f5 fed2 	bl	8001274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4d0:	e002      	b.n	800b4d8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7fe fd78 	bl	8009fc8 <HAL_UART_RxHalfCpltCallback>
}
 800b4d8:	bf00      	nop
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b508:	2b80      	cmp	r3, #128	; 0x80
 800b50a:	d109      	bne.n	800b520 <UART_DMAError+0x40>
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	2b21      	cmp	r3, #33	; 0x21
 800b510:	d106      	bne.n	800b520 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	2200      	movs	r2, #0
 800b516:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b51a:	6978      	ldr	r0, [r7, #20]
 800b51c:	f7ff fe32 	bl	800b184 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52a:	2b40      	cmp	r3, #64	; 0x40
 800b52c:	d109      	bne.n	800b542 <UART_DMAError+0x62>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2b22      	cmp	r3, #34	; 0x22
 800b532:	d106      	bne.n	800b542 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2200      	movs	r2, #0
 800b538:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b53c:	6978      	ldr	r0, [r7, #20]
 800b53e:	f7ff fe63 	bl	800b208 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b548:	f043 0210 	orr.w	r2, r3, #16
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b552:	6978      	ldr	r0, [r7, #20]
 800b554:	f7fe fd42 	bl	8009fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b558:	bf00      	nop
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f7fe fd2c 	bl	8009fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b584:	bf00      	nop
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b088      	sub	sp, #32
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	e853 3f00 	ldrex	r3, [r3]
 800b5a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5a8:	61fb      	str	r3, [r7, #28]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	61bb      	str	r3, [r7, #24]
 800b5b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b6:	6979      	ldr	r1, [r7, #20]
 800b5b8:	69ba      	ldr	r2, [r7, #24]
 800b5ba:	e841 2300 	strex	r3, r2, [r1]
 800b5be:	613b      	str	r3, [r7, #16]
   return(result);
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1e6      	bne.n	800b594 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7f5 fe37 	bl	8001248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5da:	bf00      	nop
 800b5dc:	3720      	adds	r7, #32
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b083      	sub	sp, #12
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b5ea:	bf00      	nop
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b5fe:	bf00      	nop
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b083      	sub	sp, #12
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b612:	bf00      	nop
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b61e:	b480      	push	{r7}
 800b620:	b085      	sub	sp, #20
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d101      	bne.n	800b634 <HAL_UARTEx_DisableFifoMode+0x16>
 800b630:	2302      	movs	r3, #2
 800b632:	e027      	b.n	800b684 <HAL_UARTEx_DisableFifoMode+0x66>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2224      	movs	r2, #36	; 0x24
 800b640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f022 0201 	bic.w	r2, r2, #1
 800b65a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b662:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2220      	movs	r2, #32
 800b676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3714      	adds	r7, #20
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d101      	bne.n	800b6a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b6a4:	2302      	movs	r3, #2
 800b6a6:	e02d      	b.n	800b704 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2224      	movs	r2, #36	; 0x24
 800b6b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f022 0201 	bic.w	r2, r2, #1
 800b6ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 f8ab 	bl	800b840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2220      	movs	r2, #32
 800b6f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d101      	bne.n	800b724 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b720:	2302      	movs	r3, #2
 800b722:	e02d      	b.n	800b780 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2224      	movs	r2, #36	; 0x24
 800b730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f022 0201 	bic.w	r2, r2, #1
 800b74a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	430a      	orrs	r2, r1
 800b75e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 f86d 	bl	800b840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2220      	movs	r2, #32
 800b772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08c      	sub	sp, #48	; 0x30
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	4613      	mov	r3, r2
 800b794:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b79c:	2b20      	cmp	r3, #32
 800b79e:	d14a      	bne.n	800b836 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b7a6:	88fb      	ldrh	r3, [r7, #6]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e043      	b.n	800b838 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d101      	bne.n	800b7be <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	e03c      	b.n	800b838 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b7cc:	88fb      	ldrh	r3, [r7, #6]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	68b9      	ldr	r1, [r7, #8]
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f7ff fc2e 	bl	800b034 <UART_Start_Receive_DMA>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b7de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d124      	bne.n	800b830 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d11d      	bne.n	800b82a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2210      	movs	r2, #16
 800b7f4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	e853 3f00 	ldrex	r3, [r3]
 800b802:	617b      	str	r3, [r7, #20]
   return(result);
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f043 0310 	orr.w	r3, r3, #16
 800b80a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	461a      	mov	r2, r3
 800b812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b814:	627b      	str	r3, [r7, #36]	; 0x24
 800b816:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b818:	6a39      	ldr	r1, [r7, #32]
 800b81a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b81c:	e841 2300 	strex	r3, r2, [r1]
 800b820:	61fb      	str	r3, [r7, #28]
   return(result);
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1e6      	bne.n	800b7f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800b828:	e002      	b.n	800b830 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b834:	e000      	b.n	800b838 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800b836:	2302      	movs	r3, #2
  }
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3730      	adds	r7, #48	; 0x30
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d108      	bne.n	800b862 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b860:	e031      	b.n	800b8c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b862:	2310      	movs	r3, #16
 800b864:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b866:	2310      	movs	r3, #16
 800b868:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	0e5b      	lsrs	r3, r3, #25
 800b872:	b2db      	uxtb	r3, r3
 800b874:	f003 0307 	and.w	r3, r3, #7
 800b878:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	0f5b      	lsrs	r3, r3, #29
 800b882:	b2db      	uxtb	r3, r3
 800b884:	f003 0307 	and.w	r3, r3, #7
 800b888:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b88a:	7bbb      	ldrb	r3, [r7, #14]
 800b88c:	7b3a      	ldrb	r2, [r7, #12]
 800b88e:	4911      	ldr	r1, [pc, #68]	; (800b8d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b890:	5c8a      	ldrb	r2, [r1, r2]
 800b892:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b896:	7b3a      	ldrb	r2, [r7, #12]
 800b898:	490f      	ldr	r1, [pc, #60]	; (800b8d8 <UARTEx_SetNbDataToProcess+0x98>)
 800b89a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b89c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
 800b8aa:	7b7a      	ldrb	r2, [r7, #13]
 800b8ac:	4909      	ldr	r1, [pc, #36]	; (800b8d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b8ae:	5c8a      	ldrb	r2, [r1, r2]
 800b8b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8b4:	7b7a      	ldrb	r2, [r7, #13]
 800b8b6:	4908      	ldr	r1, [pc, #32]	; (800b8d8 <UARTEx_SetNbDataToProcess+0x98>)
 800b8b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b8c6:	bf00      	nop
 800b8c8:	3714      	adds	r7, #20
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop
 800b8d4:	0801b8b0 	.word	0x0801b8b0
 800b8d8:	0801b8b8 	.word	0x0801b8b8

0800b8dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8dc:	b084      	sub	sp, #16
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b084      	sub	sp, #16
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
 800b8e6:	f107 001c 	add.w	r0, r7, #28
 800b8ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d120      	bne.n	800b936 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	68da      	ldr	r2, [r3, #12]
 800b904:	4b2a      	ldr	r3, [pc, #168]	; (800b9b0 <USB_CoreInit+0xd4>)
 800b906:	4013      	ands	r3, r2
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d105      	bne.n	800b92a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f9ce 	bl	800bccc <USB_CoreReset>
 800b930:	4603      	mov	r3, r0
 800b932:	73fb      	strb	r3, [r7, #15]
 800b934:	e01a      	b.n	800b96c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 f9c2 	bl	800bccc <USB_CoreReset>
 800b948:	4603      	mov	r3, r0
 800b94a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b94c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b956:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	639a      	str	r2, [r3, #56]	; 0x38
 800b95e:	e005      	b.n	800b96c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b964:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d116      	bne.n	800b9a0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b976:	b29a      	uxth	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b980:	4b0c      	ldr	r3, [pc, #48]	; (800b9b4 <USB_CoreInit+0xd8>)
 800b982:	4313      	orrs	r3, r2
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	f043 0206 	orr.w	r2, r3, #6
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	f043 0220 	orr.w	r2, r3, #32
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9ac:	b004      	add	sp, #16
 800b9ae:	4770      	bx	lr
 800b9b0:	ffbdffbf 	.word	0xffbdffbf
 800b9b4:	03ee0000 	.word	0x03ee0000

0800b9b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	f043 0201 	orr.w	r2, r3, #1
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9da:	b480      	push	{r7}
 800b9dc:	b083      	sub	sp, #12
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f023 0201 	bic.w	r2, r3, #1
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	460b      	mov	r3, r1
 800ba06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba18:	78fb      	ldrb	r3, [r7, #3]
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d115      	bne.n	800ba4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba2a:	2001      	movs	r0, #1
 800ba2c:	f7f6 fb3e 	bl	80020ac <HAL_Delay>
      ms++;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3301      	adds	r3, #1
 800ba34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f939 	bl	800bcae <USB_GetMode>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d01e      	beq.n	800ba80 <USB_SetCurrentMode+0x84>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2b31      	cmp	r3, #49	; 0x31
 800ba46:	d9f0      	bls.n	800ba2a <USB_SetCurrentMode+0x2e>
 800ba48:	e01a      	b.n	800ba80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba4a:	78fb      	ldrb	r3, [r7, #3]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d115      	bne.n	800ba7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba5c:	2001      	movs	r0, #1
 800ba5e:	f7f6 fb25 	bl	80020ac <HAL_Delay>
      ms++;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	3301      	adds	r3, #1
 800ba66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f920 	bl	800bcae <USB_GetMode>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d005      	beq.n	800ba80 <USB_SetCurrentMode+0x84>
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2b31      	cmp	r3, #49	; 0x31
 800ba78:	d9f0      	bls.n	800ba5c <USB_SetCurrentMode+0x60>
 800ba7a:	e001      	b.n	800ba80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e005      	b.n	800ba8c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2b32      	cmp	r3, #50	; 0x32
 800ba84:	d101      	bne.n	800ba8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e000      	b.n	800ba8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	3301      	adds	r3, #1
 800baa6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	4a13      	ldr	r2, [pc, #76]	; (800baf8 <USB_FlushTxFifo+0x64>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d901      	bls.n	800bab4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bab0:	2303      	movs	r3, #3
 800bab2:	e01b      	b.n	800baec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	691b      	ldr	r3, [r3, #16]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	daf2      	bge.n	800baa2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800babc:	2300      	movs	r3, #0
 800babe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	019b      	lsls	r3, r3, #6
 800bac4:	f043 0220 	orr.w	r2, r3, #32
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	3301      	adds	r3, #1
 800bad0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4a08      	ldr	r2, [pc, #32]	; (800baf8 <USB_FlushTxFifo+0x64>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d901      	bls.n	800bade <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e006      	b.n	800baec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	f003 0320 	and.w	r3, r3, #32
 800bae6:	2b20      	cmp	r3, #32
 800bae8:	d0f0      	beq.n	800bacc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	00030d40 	.word	0x00030d40

0800bafc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb04:	2300      	movs	r3, #0
 800bb06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	4a11      	ldr	r2, [pc, #68]	; (800bb58 <USB_FlushRxFifo+0x5c>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d901      	bls.n	800bb1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bb16:	2303      	movs	r3, #3
 800bb18:	e018      	b.n	800bb4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	daf2      	bge.n	800bb08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bb22:	2300      	movs	r3, #0
 800bb24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2210      	movs	r2, #16
 800bb2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	4a08      	ldr	r2, [pc, #32]	; (800bb58 <USB_FlushRxFifo+0x5c>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d901      	bls.n	800bb3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	e006      	b.n	800bb4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	f003 0310 	and.w	r3, r3, #16
 800bb46:	2b10      	cmp	r3, #16
 800bb48:	d0f0      	beq.n	800bb2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr
 800bb58:	00030d40 	.word	0x00030d40

0800bb5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b089      	sub	sp, #36	; 0x24
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	4611      	mov	r1, r2
 800bb68:	461a      	mov	r2, r3
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	71fb      	strb	r3, [r7, #7]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bb7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d123      	bne.n	800bbca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bb82:	88bb      	ldrh	r3, [r7, #4]
 800bb84:	3303      	adds	r3, #3
 800bb86:	089b      	lsrs	r3, r3, #2
 800bb88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	61bb      	str	r3, [r7, #24]
 800bb8e:	e018      	b.n	800bbc2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bb90:	79fb      	ldrb	r3, [r7, #7]
 800bb92:	031a      	lsls	r2, r3, #12
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	4413      	add	r3, r2
 800bb98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	69fb      	ldr	r3, [r7, #28]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	3301      	adds	r3, #1
 800bba8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	3301      	adds	r3, #1
 800bbae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	61bb      	str	r3, [r7, #24]
 800bbc2:	69ba      	ldr	r2, [r7, #24]
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d3e2      	bcc.n	800bb90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3724      	adds	r7, #36	; 0x24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b08b      	sub	sp, #44	; 0x2c
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	089b      	lsrs	r3, r3, #2
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bbf6:	88fb      	ldrh	r3, [r7, #6]
 800bbf8:	f003 0303 	and.w	r3, r3, #3
 800bbfc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bbfe:	2300      	movs	r3, #0
 800bc00:	623b      	str	r3, [r7, #32]
 800bc02:	e014      	b.n	800bc2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0e:	601a      	str	r2, [r3, #0]
    pDest++;
 800bc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc12:	3301      	adds	r3, #1
 800bc14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc18:	3301      	adds	r3, #1
 800bc1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1e:	3301      	adds	r3, #1
 800bc20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc24:	3301      	adds	r3, #1
 800bc26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bc28:	6a3b      	ldr	r3, [r7, #32]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	623b      	str	r3, [r7, #32]
 800bc2e:	6a3a      	ldr	r2, [r7, #32]
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d3e6      	bcc.n	800bc04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bc36:	8bfb      	ldrh	r3, [r7, #30]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d01e      	beq.n	800bc7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc46:	461a      	mov	r2, r3
 800bc48:	f107 0310 	add.w	r3, r7, #16
 800bc4c:	6812      	ldr	r2, [r2, #0]
 800bc4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bc50:	693a      	ldr	r2, [r7, #16]
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	00db      	lsls	r3, r3, #3
 800bc58:	fa22 f303 	lsr.w	r3, r2, r3
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc60:	701a      	strb	r2, [r3, #0]
      i++;
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	3301      	adds	r3, #1
 800bc66:	623b      	str	r3, [r7, #32]
      pDest++;
 800bc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bc6e:	8bfb      	ldrh	r3, [r7, #30]
 800bc70:	3b01      	subs	r3, #1
 800bc72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bc74:	8bfb      	ldrh	r3, [r7, #30]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1ea      	bne.n	800bc50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	372c      	adds	r7, #44	; 0x2c
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	4013      	ands	r3, r2
 800bc9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bca0:	68fb      	ldr	r3, [r7, #12]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b083      	sub	sp, #12
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	f003 0301 	and.w	r3, r3, #1
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
	...

0800bccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	4a13      	ldr	r2, [pc, #76]	; (800bd30 <USB_CoreReset+0x64>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d901      	bls.n	800bcea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e01b      	b.n	800bd22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	daf2      	bge.n	800bcd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	f043 0201 	orr.w	r2, r3, #1
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	3301      	adds	r3, #1
 800bd06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	4a09      	ldr	r2, [pc, #36]	; (800bd30 <USB_CoreReset+0x64>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d901      	bls.n	800bd14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e006      	b.n	800bd22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	f003 0301 	and.w	r3, r3, #1
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d0f0      	beq.n	800bd02 <USB_CoreReset+0x36>

  return HAL_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	00030d40 	.word	0x00030d40

0800bd34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd34:	b084      	sub	sp, #16
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b086      	sub	sp, #24
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bd42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd54:	461a      	mov	r2, r3
 800bd56:	2300      	movs	r3, #0
 800bd58:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d018      	beq.n	800bdb0 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d10a      	bne.n	800bd9a <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd92:	f043 0304 	orr.w	r3, r3, #4
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	e014      	b.n	800bdc4 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bda8:	f023 0304 	bic.w	r3, r3, #4
 800bdac:	6013      	str	r3, [r2, #0]
 800bdae:	e009      	b.n	800bdc4 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdbe:	f023 0304 	bic.w	r3, r3, #4
 800bdc2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bdc4:	2110      	movs	r1, #16
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f7ff fe64 	bl	800ba94 <USB_FlushTxFifo>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d001      	beq.n	800bdd6 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f7ff fe90 	bl	800bafc <USB_FlushRxFifo>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bde6:	2300      	movs	r3, #0
 800bde8:	613b      	str	r3, [r7, #16]
 800bdea:	e015      	b.n	800be18 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdfe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	015a      	lsls	r2, r3, #5
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	4413      	add	r3, r2
 800be08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be0c:	461a      	mov	r2, r3
 800be0e:	2300      	movs	r3, #0
 800be10:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	3301      	adds	r3, #1
 800be16:	613b      	str	r3, [r7, #16]
 800be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d3e5      	bcc.n	800bdec <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be2c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00b      	beq.n	800be52 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be40:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a13      	ldr	r2, [pc, #76]	; (800be94 <USB_HostInit+0x160>)
 800be46:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a13      	ldr	r2, [pc, #76]	; (800be98 <USB_HostInit+0x164>)
 800be4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800be50:	e009      	b.n	800be66 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2280      	movs	r2, #128	; 0x80
 800be56:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a10      	ldr	r2, [pc, #64]	; (800be9c <USB_HostInit+0x168>)
 800be5c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a0f      	ldr	r2, [pc, #60]	; (800bea0 <USB_HostInit+0x16c>)
 800be62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d105      	bne.n	800be78 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	699b      	ldr	r3, [r3, #24]
 800be70:	f043 0210 	orr.w	r2, r3, #16
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	699a      	ldr	r2, [r3, #24]
 800be7c:	4b09      	ldr	r3, [pc, #36]	; (800bea4 <USB_HostInit+0x170>)
 800be7e:	4313      	orrs	r3, r2
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800be84:	7dfb      	ldrb	r3, [r7, #23]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be90:	b004      	add	sp, #16
 800be92:	4770      	bx	lr
 800be94:	01000200 	.word	0x01000200
 800be98:	00e00300 	.word	0x00e00300
 800be9c:	00600080 	.word	0x00600080
 800bea0:	004000e0 	.word	0x004000e0
 800bea4:	a3200008 	.word	0xa3200008

0800bea8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	460b      	mov	r3, r1
 800beb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bec6:	f023 0303 	bic.w	r3, r3, #3
 800beca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	78fb      	ldrb	r3, [r7, #3]
 800bed6:	f003 0303 	and.w	r3, r3, #3
 800beda:	68f9      	ldr	r1, [r7, #12]
 800bedc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bee0:	4313      	orrs	r3, r2
 800bee2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800bee4:	78fb      	ldrb	r3, [r7, #3]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d107      	bne.n	800befa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bef0:	461a      	mov	r2, r3
 800bef2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bef6:	6053      	str	r3, [r2, #4]
 800bef8:	e009      	b.n	800bf0e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800befa:	78fb      	ldrb	r3, [r7, #3]
 800befc:	2b02      	cmp	r3, #2
 800befe:	d106      	bne.n	800bf0e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf06:	461a      	mov	r2, r3
 800bf08:	f241 7370 	movw	r3, #6000	; 0x1770
 800bf0c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bf3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bf4c:	2064      	movs	r0, #100	; 0x64
 800bf4e:	f7f6 f8ad 	bl	80020ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bf60:	200a      	movs	r0, #10
 800bf62:	f7f6 f8a3 	bl	80020ac <HAL_Delay>

  return HAL_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bf80:	2300      	movs	r3, #0
 800bf82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bf94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d109      	bne.n	800bfb4 <USB_DriveVbus+0x44>
 800bfa0:	78fb      	ldrb	r3, [r7, #3]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d106      	bne.n	800bfb4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bfae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bfb2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bfba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfbe:	d109      	bne.n	800bfd4 <USB_DriveVbus+0x64>
 800bfc0:	78fb      	ldrb	r3, [r7, #3]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d106      	bne.n	800bfd4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bfce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfd2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3714      	adds	r7, #20
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	b085      	sub	sp, #20
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bfee:	2300      	movs	r3, #0
 800bff0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	0c5b      	lsrs	r3, r3, #17
 800c000:	f003 0303 	and.w	r3, r3, #3
}
 800c004:	4618      	mov	r0, r3
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	b29b      	uxth	r3, r3
}
 800c026:	4618      	mov	r0, r3
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
	...

0800c034 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b088      	sub	sp, #32
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	4608      	mov	r0, r1
 800c03e:	4611      	mov	r1, r2
 800c040:	461a      	mov	r2, r3
 800c042:	4603      	mov	r3, r0
 800c044:	70fb      	strb	r3, [r7, #3]
 800c046:	460b      	mov	r3, r1
 800c048:	70bb      	strb	r3, [r7, #2]
 800c04a:	4613      	mov	r3, r2
 800c04c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c04e:	2300      	movs	r3, #0
 800c050:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c056:	78fb      	ldrb	r3, [r7, #3]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c062:	461a      	mov	r2, r3
 800c064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c068:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c06a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c06e:	2b03      	cmp	r3, #3
 800c070:	d87e      	bhi.n	800c170 <USB_HC_Init+0x13c>
 800c072:	a201      	add	r2, pc, #4	; (adr r2, 800c078 <USB_HC_Init+0x44>)
 800c074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c078:	0800c089 	.word	0x0800c089
 800c07c:	0800c133 	.word	0x0800c133
 800c080:	0800c089 	.word	0x0800c089
 800c084:	0800c0f5 	.word	0x0800c0f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	015a      	lsls	r2, r3, #5
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	4413      	add	r3, r2
 800c090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c094:	461a      	mov	r2, r3
 800c096:	f240 439d 	movw	r3, #1181	; 0x49d
 800c09a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c09c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	da10      	bge.n	800c0c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c0a4:	78fb      	ldrb	r3, [r7, #3]
 800c0a6:	015a      	lsls	r2, r3, #5
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	78fa      	ldrb	r2, [r7, #3]
 800c0b4:	0151      	lsls	r1, r2, #5
 800c0b6:	693a      	ldr	r2, [r7, #16]
 800c0b8:	440a      	add	r2, r1
 800c0ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0c2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c0c4:	e057      	b.n	800c176 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d051      	beq.n	800c176 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c0d2:	78fb      	ldrb	r3, [r7, #3]
 800c0d4:	015a      	lsls	r2, r3, #5
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	4413      	add	r3, r2
 800c0da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	78fa      	ldrb	r2, [r7, #3]
 800c0e2:	0151      	lsls	r1, r2, #5
 800c0e4:	693a      	ldr	r2, [r7, #16]
 800c0e6:	440a      	add	r2, r1
 800c0e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c0f0:	60d3      	str	r3, [r2, #12]
      break;
 800c0f2:	e040      	b.n	800c176 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c0f4:	78fb      	ldrb	r3, [r7, #3]
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c100:	461a      	mov	r2, r3
 800c102:	f240 639d 	movw	r3, #1693	; 0x69d
 800c106:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c108:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	da34      	bge.n	800c17a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c110:	78fb      	ldrb	r3, [r7, #3]
 800c112:	015a      	lsls	r2, r3, #5
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	4413      	add	r3, r2
 800c118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	78fa      	ldrb	r2, [r7, #3]
 800c120:	0151      	lsls	r1, r2, #5
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	440a      	add	r2, r1
 800c126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c12a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c12e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c130:	e023      	b.n	800c17a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c132:	78fb      	ldrb	r3, [r7, #3]
 800c134:	015a      	lsls	r2, r3, #5
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	4413      	add	r3, r2
 800c13a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c13e:	461a      	mov	r2, r3
 800c140:	f240 2325 	movw	r3, #549	; 0x225
 800c144:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c146:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	da17      	bge.n	800c17e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c14e:	78fb      	ldrb	r3, [r7, #3]
 800c150:	015a      	lsls	r2, r3, #5
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	4413      	add	r3, r2
 800c156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	78fa      	ldrb	r2, [r7, #3]
 800c15e:	0151      	lsls	r1, r2, #5
 800c160:	693a      	ldr	r2, [r7, #16]
 800c162:	440a      	add	r2, r1
 800c164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c168:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c16c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c16e:	e006      	b.n	800c17e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	77fb      	strb	r3, [r7, #31]
      break;
 800c174:	e004      	b.n	800c180 <USB_HC_Init+0x14c>
      break;
 800c176:	bf00      	nop
 800c178:	e002      	b.n	800c180 <USB_HC_Init+0x14c>
      break;
 800c17a:	bf00      	nop
 800c17c:	e000      	b.n	800c180 <USB_HC_Init+0x14c>
      break;
 800c17e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c180:	78fb      	ldrb	r3, [r7, #3]
 800c182:	015a      	lsls	r2, r3, #5
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	4413      	add	r3, r2
 800c188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	78fa      	ldrb	r2, [r7, #3]
 800c190:	0151      	lsls	r1, r2, #5
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	440a      	add	r2, r1
 800c196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c19a:	f043 0302 	orr.w	r3, r3, #2
 800c19e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1a6:	699a      	ldr	r2, [r3, #24]
 800c1a8:	78fb      	ldrb	r3, [r7, #3]
 800c1aa:	f003 030f 	and.w	r3, r3, #15
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c1b4:	6939      	ldr	r1, [r7, #16]
 800c1b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	699b      	ldr	r3, [r3, #24]
 800c1c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c1ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	da03      	bge.n	800c1da <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c1d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1d6:	61bb      	str	r3, [r7, #24]
 800c1d8:	e001      	b.n	800c1de <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7ff feff 	bl	800bfe2 <USB_GetHostSpeed>
 800c1e4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c1e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1ea:	2b02      	cmp	r3, #2
 800c1ec:	d106      	bne.n	800c1fc <USB_HC_Init+0x1c8>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d003      	beq.n	800c1fc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c1f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c1f8:	617b      	str	r3, [r7, #20]
 800c1fa:	e001      	b.n	800c200 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c200:	787b      	ldrb	r3, [r7, #1]
 800c202:	059b      	lsls	r3, r3, #22
 800c204:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c208:	78bb      	ldrb	r3, [r7, #2]
 800c20a:	02db      	lsls	r3, r3, #11
 800c20c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c210:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c212:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c216:	049b      	lsls	r3, r3, #18
 800c218:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c21c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c21e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c220:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c224:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c22a:	78fb      	ldrb	r3, [r7, #3]
 800c22c:	0159      	lsls	r1, r3, #5
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	440b      	add	r3, r1
 800c232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c236:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c23c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c23e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c242:	2b03      	cmp	r3, #3
 800c244:	d003      	beq.n	800c24e <USB_HC_Init+0x21a>
 800c246:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d10f      	bne.n	800c26e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c24e:	78fb      	ldrb	r3, [r7, #3]
 800c250:	015a      	lsls	r2, r3, #5
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	4413      	add	r3, r2
 800c256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	78fa      	ldrb	r2, [r7, #3]
 800c25e:	0151      	lsls	r1, r2, #5
 800c260:	693a      	ldr	r2, [r7, #16]
 800c262:	440a      	add	r2, r1
 800c264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c26c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c26e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3720      	adds	r7, #32
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b08c      	sub	sp, #48	; 0x30
 800c27c:	af02      	add	r7, sp, #8
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	4613      	mov	r3, r2
 800c284:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	785b      	ldrb	r3, [r3, #1]
 800c28e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c290:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c294:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c29a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d02d      	beq.n	800c2fe <USB_HC_StartXfer+0x86>
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	791b      	ldrb	r3, [r3, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d129      	bne.n	800c2fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c2aa:	79fb      	ldrb	r3, [r7, #7]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d117      	bne.n	800c2e0 <USB_HC_StartXfer+0x68>
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	79db      	ldrb	r3, [r3, #7]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d003      	beq.n	800c2c0 <USB_HC_StartXfer+0x48>
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	79db      	ldrb	r3, [r3, #7]
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d10f      	bne.n	800c2e0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	015a      	lsls	r2, r3, #5
 800c2c4:	6a3b      	ldr	r3, [r7, #32]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	69fa      	ldr	r2, [r7, #28]
 800c2d0:	0151      	lsls	r1, r2, #5
 800c2d2:	6a3a      	ldr	r2, [r7, #32]
 800c2d4:	440a      	add	r2, r1
 800c2d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2de:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c2e0:	79fb      	ldrb	r3, [r7, #7]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10b      	bne.n	800c2fe <USB_HC_StartXfer+0x86>
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	795b      	ldrb	r3, [r3, #5]
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d107      	bne.n	800c2fe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	785b      	ldrb	r3, [r3, #1]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f000 fa0f 	bl	800c718 <USB_DoPing>
      return HAL_OK;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e0f8      	b.n	800c4f0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	695b      	ldr	r3, [r3, #20]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d018      	beq.n	800c338 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	695b      	ldr	r3, [r3, #20]
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	8912      	ldrh	r2, [r2, #8]
 800c30e:	4413      	add	r3, r2
 800c310:	3b01      	subs	r3, #1
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	8912      	ldrh	r2, [r2, #8]
 800c316:	fbb3 f3f2 	udiv	r3, r3, r2
 800c31a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c31c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c31e:	8b7b      	ldrh	r3, [r7, #26]
 800c320:	429a      	cmp	r2, r3
 800c322:	d90b      	bls.n	800c33c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c324:	8b7b      	ldrh	r3, [r7, #26]
 800c326:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c328:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	8912      	ldrh	r2, [r2, #8]
 800c32e:	fb03 f202 	mul.w	r2, r3, r2
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	611a      	str	r2, [r3, #16]
 800c336:	e001      	b.n	800c33c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c338:	2301      	movs	r3, #1
 800c33a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	78db      	ldrb	r3, [r3, #3]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d007      	beq.n	800c354 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c344:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	8912      	ldrh	r2, [r2, #8]
 800c34a:	fb03 f202 	mul.w	r2, r3, r2
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	611a      	str	r2, [r3, #16]
 800c352:	e003      	b.n	800c35c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	695a      	ldr	r2, [r3, #20]
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c364:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c366:	04d9      	lsls	r1, r3, #19
 800c368:	4b63      	ldr	r3, [pc, #396]	; (800c4f8 <USB_HC_StartXfer+0x280>)
 800c36a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c36c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	7a9b      	ldrb	r3, [r3, #10]
 800c372:	075b      	lsls	r3, r3, #29
 800c374:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c378:	69f9      	ldr	r1, [r7, #28]
 800c37a:	0148      	lsls	r0, r1, #5
 800c37c:	6a39      	ldr	r1, [r7, #32]
 800c37e:	4401      	add	r1, r0
 800c380:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c384:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c386:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c388:	79fb      	ldrb	r3, [r7, #7]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d009      	beq.n	800c3a2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	68d9      	ldr	r1, [r3, #12]
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	015a      	lsls	r2, r3, #5
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	4413      	add	r3, r2
 800c39a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c39e:	460a      	mov	r2, r1
 800c3a0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c3a2:	6a3b      	ldr	r3, [r7, #32]
 800c3a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	f003 0301 	and.w	r3, r3, #1
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	bf0c      	ite	eq
 800c3b2:	2301      	moveq	r3, #1
 800c3b4:	2300      	movne	r3, #0
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	015a      	lsls	r2, r3, #5
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	69fa      	ldr	r2, [r7, #28]
 800c3ca:	0151      	lsls	r1, r2, #5
 800c3cc:	6a3a      	ldr	r2, [r7, #32]
 800c3ce:	440a      	add	r2, r1
 800c3d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c3d8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	015a      	lsls	r2, r3, #5
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	7e7b      	ldrb	r3, [r7, #25]
 800c3ea:	075b      	lsls	r3, r3, #29
 800c3ec:	69f9      	ldr	r1, [r7, #28]
 800c3ee:	0148      	lsls	r0, r1, #5
 800c3f0:	6a39      	ldr	r1, [r7, #32]
 800c3f2:	4401      	add	r1, r0
 800c3f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	015a      	lsls	r2, r3, #5
 800c400:	6a3b      	ldr	r3, [r7, #32]
 800c402:	4413      	add	r3, r2
 800c404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c412:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	78db      	ldrb	r3, [r3, #3]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d004      	beq.n	800c426 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c422:	613b      	str	r3, [r7, #16]
 800c424:	e003      	b.n	800c42e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c42c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c434:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	015a      	lsls	r2, r3, #5
 800c43a:	6a3b      	ldr	r3, [r7, #32]
 800c43c:	4413      	add	r3, r2
 800c43e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c442:	461a      	mov	r2, r3
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c448:	79fb      	ldrb	r3, [r7, #7]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d001      	beq.n	800c452 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	e04e      	b.n	800c4f0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	78db      	ldrb	r3, [r3, #3]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d149      	bne.n	800c4ee <USB_HC_StartXfer+0x276>
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	695b      	ldr	r3, [r3, #20]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d045      	beq.n	800c4ee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	79db      	ldrb	r3, [r3, #7]
 800c466:	2b03      	cmp	r3, #3
 800c468:	d830      	bhi.n	800c4cc <USB_HC_StartXfer+0x254>
 800c46a:	a201      	add	r2, pc, #4	; (adr r2, 800c470 <USB_HC_StartXfer+0x1f8>)
 800c46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c470:	0800c481 	.word	0x0800c481
 800c474:	0800c4a5 	.word	0x0800c4a5
 800c478:	0800c481 	.word	0x0800c481
 800c47c:	0800c4a5 	.word	0x0800c4a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	695b      	ldr	r3, [r3, #20]
 800c484:	3303      	adds	r3, #3
 800c486:	089b      	lsrs	r3, r3, #2
 800c488:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c48a:	8afa      	ldrh	r2, [r7, #22]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c490:	b29b      	uxth	r3, r3
 800c492:	429a      	cmp	r2, r3
 800c494:	d91c      	bls.n	800c4d0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	f043 0220 	orr.w	r2, r3, #32
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	619a      	str	r2, [r3, #24]
        }
        break;
 800c4a2:	e015      	b.n	800c4d0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	695b      	ldr	r3, [r3, #20]
 800c4a8:	3303      	adds	r3, #3
 800c4aa:	089b      	lsrs	r3, r3, #2
 800c4ac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c4ae:	8afa      	ldrh	r2, [r7, #22]
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4b6:	691b      	ldr	r3, [r3, #16]
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d90a      	bls.n	800c4d4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	619a      	str	r2, [r3, #24]
        }
        break;
 800c4ca:	e003      	b.n	800c4d4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c4cc:	bf00      	nop
 800c4ce:	e002      	b.n	800c4d6 <USB_HC_StartXfer+0x25e>
        break;
 800c4d0:	bf00      	nop
 800c4d2:	e000      	b.n	800c4d6 <USB_HC_StartXfer+0x25e>
        break;
 800c4d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	68d9      	ldr	r1, [r3, #12]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	785a      	ldrb	r2, [r3, #1]
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	695b      	ldr	r3, [r3, #20]
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	9000      	str	r0, [sp, #0]
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f7ff fb37 	bl	800bb5c <USB_WritePacket>
  }

  return HAL_OK;
 800c4ee:	2300      	movs	r3, #0
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3728      	adds	r7, #40	; 0x28
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	1ff80000 	.word	0x1ff80000

0800c4fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c50e:	695b      	ldr	r3, [r3, #20]
 800c510:	b29b      	uxth	r3, r3
}
 800c512:	4618      	mov	r0, r3
 800c514:	3714      	adds	r7, #20
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr

0800c51e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c51e:	b480      	push	{r7}
 800c520:	b089      	sub	sp, #36	; 0x24
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
 800c526:	460b      	mov	r3, r1
 800c528:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c52e:	78fb      	ldrb	r3, [r7, #3]
 800c530:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c532:	2300      	movs	r3, #0
 800c534:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	015a      	lsls	r2, r3, #5
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	4413      	add	r3, r2
 800c53e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	0c9b      	lsrs	r3, r3, #18
 800c546:	f003 0303 	and.w	r3, r3, #3
 800c54a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	015a      	lsls	r2, r3, #5
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	4413      	add	r3, r2
 800c554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	0fdb      	lsrs	r3, r3, #31
 800c55c:	f003 0301 	and.w	r3, r3, #1
 800c560:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	f003 0320 	and.w	r3, r3, #32
 800c56a:	2b20      	cmp	r3, #32
 800c56c:	d104      	bne.n	800c578 <USB_HC_Halt+0x5a>
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c574:	2300      	movs	r3, #0
 800c576:	e0c8      	b.n	800c70a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d002      	beq.n	800c584 <USB_HC_Halt+0x66>
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2b02      	cmp	r3, #2
 800c582:	d163      	bne.n	800c64c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	015a      	lsls	r2, r3, #5
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	4413      	add	r3, r2
 800c58c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	69ba      	ldr	r2, [r7, #24]
 800c594:	0151      	lsls	r1, r2, #5
 800c596:	69fa      	ldr	r2, [r7, #28]
 800c598:	440a      	add	r2, r1
 800c59a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c59e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5a2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	f003 0320 	and.w	r3, r3, #32
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f040 80ab 	bne.w	800c708 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d133      	bne.n	800c626 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	015a      	lsls	r2, r3, #5
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	69ba      	ldr	r2, [r7, #24]
 800c5ce:	0151      	lsls	r1, r2, #5
 800c5d0:	69fa      	ldr	r2, [r7, #28]
 800c5d2:	440a      	add	r2, r1
 800c5d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	015a      	lsls	r2, r3, #5
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	69ba      	ldr	r2, [r7, #24]
 800c5ee:	0151      	lsls	r1, r2, #5
 800c5f0:	69fa      	ldr	r2, [r7, #28]
 800c5f2:	440a      	add	r2, r1
 800c5f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5fc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	3301      	adds	r3, #1
 800c602:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c60a:	d81d      	bhi.n	800c648 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	015a      	lsls	r2, r3, #5
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	4413      	add	r3, r2
 800c614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c61e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c622:	d0ec      	beq.n	800c5fe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c624:	e070      	b.n	800c708 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	015a      	lsls	r2, r3, #5
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	4413      	add	r3, r2
 800c62e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	69ba      	ldr	r2, [r7, #24]
 800c636:	0151      	lsls	r1, r2, #5
 800c638:	69fa      	ldr	r2, [r7, #28]
 800c63a:	440a      	add	r2, r1
 800c63c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c644:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c646:	e05f      	b.n	800c708 <USB_HC_Halt+0x1ea>
            break;
 800c648:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c64a:	e05d      	b.n	800c708 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	015a      	lsls	r2, r3, #5
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	4413      	add	r3, r2
 800c654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	69ba      	ldr	r2, [r7, #24]
 800c65c:	0151      	lsls	r1, r2, #5
 800c65e:	69fa      	ldr	r2, [r7, #28]
 800c660:	440a      	add	r2, r1
 800c662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c666:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c66a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d133      	bne.n	800c6e4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	015a      	lsls	r2, r3, #5
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	4413      	add	r3, r2
 800c684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	69ba      	ldr	r2, [r7, #24]
 800c68c:	0151      	lsls	r1, r2, #5
 800c68e:	69fa      	ldr	r2, [r7, #28]
 800c690:	440a      	add	r2, r1
 800c692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c69a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c69c:	69bb      	ldr	r3, [r7, #24]
 800c69e:	015a      	lsls	r2, r3, #5
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	4413      	add	r3, r2
 800c6a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	69ba      	ldr	r2, [r7, #24]
 800c6ac:	0151      	lsls	r1, r2, #5
 800c6ae:	69fa      	ldr	r2, [r7, #28]
 800c6b0:	440a      	add	r2, r1
 800c6b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6ba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6c8:	d81d      	bhi.n	800c706 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	015a      	lsls	r2, r3, #5
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6e0:	d0ec      	beq.n	800c6bc <USB_HC_Halt+0x19e>
 800c6e2:	e011      	b.n	800c708 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	015a      	lsls	r2, r3, #5
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	0151      	lsls	r1, r2, #5
 800c6f6:	69fa      	ldr	r2, [r7, #28]
 800c6f8:	440a      	add	r2, r1
 800c6fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c702:	6013      	str	r3, [r2, #0]
 800c704:	e000      	b.n	800c708 <USB_HC_Halt+0x1ea>
          break;
 800c706:	bf00      	nop
    }
  }

  return HAL_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3724      	adds	r7, #36	; 0x24
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
	...

0800c718 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c718:	b480      	push	{r7}
 800c71a:	b087      	sub	sp, #28
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c728:	78fb      	ldrb	r3, [r7, #3]
 800c72a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c72c:	2301      	movs	r3, #1
 800c72e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	04da      	lsls	r2, r3, #19
 800c734:	4b15      	ldr	r3, [pc, #84]	; (800c78c <USB_DoPing+0x74>)
 800c736:	4013      	ands	r3, r2
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	0151      	lsls	r1, r2, #5
 800c73c:	697a      	ldr	r2, [r7, #20]
 800c73e:	440a      	add	r2, r1
 800c740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c744:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c748:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	015a      	lsls	r2, r3, #5
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	4413      	add	r3, r2
 800c752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c760:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c768:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	015a      	lsls	r2, r3, #5
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	4413      	add	r3, r2
 800c772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c776:	461a      	mov	r2, r3
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	371c      	adds	r7, #28
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	1ff80000 	.word	0x1ff80000

0800c790 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b088      	sub	sp, #32
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c798:	2300      	movs	r3, #0
 800c79a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff f918 	bl	800b9da <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c7aa:	2110      	movs	r1, #16
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff f971 	bl	800ba94 <USB_FlushTxFifo>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d001      	beq.n	800c7bc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7ff f99d 	bl	800bafc <USB_FlushRxFifo>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d001      	beq.n	800c7cc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	61bb      	str	r3, [r7, #24]
 800c7d0:	e01f      	b.n	800c812 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	015a      	lsls	r2, r3, #5
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	4413      	add	r3, r2
 800c7da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	015a      	lsls	r2, r3, #5
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	4413      	add	r3, r2
 800c802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c806:	461a      	mov	r2, r3
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	3301      	adds	r3, #1
 800c810:	61bb      	str	r3, [r7, #24]
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	2b0f      	cmp	r3, #15
 800c816:	d9dc      	bls.n	800c7d2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c818:	2300      	movs	r3, #0
 800c81a:	61bb      	str	r3, [r7, #24]
 800c81c:	e034      	b.n	800c888 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	015a      	lsls	r2, r3, #5
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	4413      	add	r3, r2
 800c826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c834:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c83c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c844:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	015a      	lsls	r2, r3, #5
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	4413      	add	r3, r2
 800c84e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c852:	461a      	mov	r2, r3
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	3301      	adds	r3, #1
 800c85c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c864:	d80c      	bhi.n	800c880 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	015a      	lsls	r2, r3, #5
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	4413      	add	r3, r2
 800c86e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c87c:	d0ec      	beq.n	800c858 <USB_StopHost+0xc8>
 800c87e:	e000      	b.n	800c882 <USB_StopHost+0xf2>
        break;
 800c880:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	3301      	adds	r3, #1
 800c886:	61bb      	str	r3, [r7, #24]
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	2b0f      	cmp	r3, #15
 800c88c:	d9c7      	bls.n	800c81e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c894:	461a      	mov	r2, r3
 800c896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c89a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7ff f887 	bl	800b9b8 <USB_EnableGlobalInt>

  return ret;
 800c8aa:	7ffb      	ldrb	r3, [r7, #31]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3720      	adds	r7, #32
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800c8b8:	4904      	ldr	r1, [pc, #16]	; (800c8cc <MX_FATFS_Init+0x18>)
 800c8ba:	4805      	ldr	r0, [pc, #20]	; (800c8d0 <MX_FATFS_Init+0x1c>)
 800c8bc:	f009 f95c 	bl	8015b78 <FATFS_LinkDriver>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	4b03      	ldr	r3, [pc, #12]	; (800c8d4 <MX_FATFS_Init+0x20>)
 800c8c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c8c8:	bf00      	nop
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	24000b4c 	.word	0x24000b4c
 800c8d0:	0801b8c0 	.word	0x0801b8c0
 800c8d4:	24000b48 	.word	0x24000b48

0800c8d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c8dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	4603      	mov	r3, r0
 800c908:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800c90a:	2301      	movs	r3, #1
 800c90c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800c90e:	79fb      	ldrb	r3, [r7, #7]
 800c910:	4619      	mov	r1, r3
 800c912:	4808      	ldr	r0, [pc, #32]	; (800c934 <USBH_status+0x34>)
 800c914:	f000 fe73 	bl	800d5fe <USBH_MSC_UnitIsReady>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d002      	beq.n	800c924 <USBH_status+0x24>
  {
    res = RES_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	73fb      	strb	r3, [r7, #15]
 800c922:	e001      	b.n	800c928 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800c928:	7bfb      	ldrb	r3, [r7, #15]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	24006ae4 	.word	0x24006ae4

0800c938 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b094      	sub	sp, #80	; 0x50
 800c93c:	af02      	add	r7, sp, #8
 800c93e:	60b9      	str	r1, [r7, #8]
 800c940:	607a      	str	r2, [r7, #4]
 800c942:	603b      	str	r3, [r7, #0]
 800c944:	4603      	mov	r3, r0
 800c946:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c948:	2301      	movs	r3, #1
 800c94a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800c94e:	7bf9      	ldrb	r1, [r7, #15]
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	4813      	ldr	r0, [pc, #76]	; (800c9a8 <USBH_read+0x70>)
 800c95a:	f000 fe9a 	bl	800d692 <USBH_MSC_Read>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d103      	bne.n	800c96c <USBH_read+0x34>
  {
    res = RES_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c96a:	e017      	b.n	800c99c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800c96c:	f107 0210 	add.w	r2, r7, #16
 800c970:	7bfb      	ldrb	r3, [r7, #15]
 800c972:	4619      	mov	r1, r3
 800c974:	480c      	ldr	r0, [pc, #48]	; (800c9a8 <USBH_read+0x70>)
 800c976:	f000 fe68 	bl	800d64a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800c97a:	7f7b      	ldrb	r3, [r7, #29]
 800c97c:	2b3a      	cmp	r3, #58	; 0x3a
 800c97e:	d005      	beq.n	800c98c <USBH_read+0x54>
 800c980:	2b3a      	cmp	r3, #58	; 0x3a
 800c982:	dc07      	bgt.n	800c994 <USBH_read+0x5c>
 800c984:	2b04      	cmp	r3, #4
 800c986:	d001      	beq.n	800c98c <USBH_read+0x54>
 800c988:	2b28      	cmp	r3, #40	; 0x28
 800c98a:	d103      	bne.n	800c994 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800c98c:	2303      	movs	r3, #3
 800c98e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c992:	e003      	b.n	800c99c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c99a:	bf00      	nop
    }
  }

  return res;
 800c99c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3748      	adds	r7, #72	; 0x48
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	24006ae4 	.word	0x24006ae4

0800c9ac <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b094      	sub	sp, #80	; 0x50
 800c9b0:	af02      	add	r7, sp, #8
 800c9b2:	60b9      	str	r1, [r7, #8]
 800c9b4:	607a      	str	r2, [r7, #4]
 800c9b6:	603b      	str	r3, [r7, #0]
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800c9c2:	7bf9      	ldrb	r1, [r7, #15]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	4817      	ldr	r0, [pc, #92]	; (800ca2c <USBH_write+0x80>)
 800c9ce:	f000 fec9 	bl	800d764 <USBH_MSC_Write>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d103      	bne.n	800c9e0 <USBH_write+0x34>
  {
    res = RES_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c9de:	e01f      	b.n	800ca20 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800c9e0:	f107 0210 	add.w	r2, r7, #16
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	4810      	ldr	r0, [pc, #64]	; (800ca2c <USBH_write+0x80>)
 800c9ea:	f000 fe2e 	bl	800d64a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800c9ee:	7f7b      	ldrb	r3, [r7, #29]
 800c9f0:	2b3a      	cmp	r3, #58	; 0x3a
 800c9f2:	d00d      	beq.n	800ca10 <USBH_write+0x64>
 800c9f4:	2b3a      	cmp	r3, #58	; 0x3a
 800c9f6:	dc0f      	bgt.n	800ca18 <USBH_write+0x6c>
 800c9f8:	2b28      	cmp	r3, #40	; 0x28
 800c9fa:	d009      	beq.n	800ca10 <USBH_write+0x64>
 800c9fc:	2b28      	cmp	r3, #40	; 0x28
 800c9fe:	dc0b      	bgt.n	800ca18 <USBH_write+0x6c>
 800ca00:	2b04      	cmp	r3, #4
 800ca02:	d005      	beq.n	800ca10 <USBH_write+0x64>
 800ca04:	2b27      	cmp	r3, #39	; 0x27
 800ca06:	d107      	bne.n	800ca18 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800ca08:	2302      	movs	r3, #2
 800ca0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ca0e:	e007      	b.n	800ca20 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800ca10:	2303      	movs	r3, #3
 800ca12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ca16:	e003      	b.n	800ca20 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ca1e:	bf00      	nop
    }
  }

  return res;
 800ca20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3748      	adds	r7, #72	; 0x48
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	24006ae4 	.word	0x24006ae4

0800ca30 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b090      	sub	sp, #64	; 0x40
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	4603      	mov	r3, r0
 800ca38:	603a      	str	r2, [r7, #0]
 800ca3a:	71fb      	strb	r3, [r7, #7]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ca40:	2301      	movs	r3, #1
 800ca42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800ca46:	79bb      	ldrb	r3, [r7, #6]
 800ca48:	2b03      	cmp	r3, #3
 800ca4a:	d852      	bhi.n	800caf2 <USBH_ioctl+0xc2>
 800ca4c:	a201      	add	r2, pc, #4	; (adr r2, 800ca54 <USBH_ioctl+0x24>)
 800ca4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca52:	bf00      	nop
 800ca54:	0800ca65 	.word	0x0800ca65
 800ca58:	0800ca6d 	.word	0x0800ca6d
 800ca5c:	0800ca97 	.word	0x0800ca97
 800ca60:	0800cac3 	.word	0x0800cac3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800ca6a:	e045      	b.n	800caf8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800ca6c:	f107 0208 	add.w	r2, r7, #8
 800ca70:	79fb      	ldrb	r3, [r7, #7]
 800ca72:	4619      	mov	r1, r3
 800ca74:	4823      	ldr	r0, [pc, #140]	; (800cb04 <USBH_ioctl+0xd4>)
 800ca76:	f000 fde8 	bl	800d64a <USBH_MSC_GetLUNInfo>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d106      	bne.n	800ca8e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800ca86:	2300      	movs	r3, #0
 800ca88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800ca8c:	e034      	b.n	800caf8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800ca94:	e030      	b.n	800caf8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800ca96:	f107 0208 	add.w	r2, r7, #8
 800ca9a:	79fb      	ldrb	r3, [r7, #7]
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	4819      	ldr	r0, [pc, #100]	; (800cb04 <USBH_ioctl+0xd4>)
 800caa0:	f000 fdd3 	bl	800d64a <USBH_MSC_GetLUNInfo>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d107      	bne.n	800caba <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800caaa:	8a3b      	ldrh	r3, [r7, #16]
 800caac:	461a      	mov	r2, r3
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800cab8:	e01e      	b.n	800caf8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800cac0:	e01a      	b.n	800caf8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800cac2:	f107 0208 	add.w	r2, r7, #8
 800cac6:	79fb      	ldrb	r3, [r7, #7]
 800cac8:	4619      	mov	r1, r3
 800caca:	480e      	ldr	r0, [pc, #56]	; (800cb04 <USBH_ioctl+0xd4>)
 800cacc:	f000 fdbd 	bl	800d64a <USBH_MSC_GetLUNInfo>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d109      	bne.n	800caea <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800cad6:	8a3b      	ldrh	r3, [r7, #16]
 800cad8:	0a5b      	lsrs	r3, r3, #9
 800cada:	b29b      	uxth	r3, r3
 800cadc:	461a      	mov	r2, r3
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800cae2:	2300      	movs	r3, #0
 800cae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800cae8:	e006      	b.n	800caf8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800caea:	2301      	movs	r3, #1
 800caec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800caf0:	e002      	b.n	800caf8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800caf2:	2304      	movs	r3, #4
 800caf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800caf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3740      	adds	r7, #64	; 0x40
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	24006ae4 	.word	0x24006ae4

0800cb08 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800cb08:	b590      	push	{r4, r7, lr}
 800cb0a:	b089      	sub	sp, #36	; 0x24
 800cb0c:	af04      	add	r7, sp, #16
 800cb0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb16:	7919      	ldrb	r1, [r3, #4]
 800cb18:	2350      	movs	r3, #80	; 0x50
 800cb1a:	2206      	movs	r2, #6
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f001 fd5f 	bl	800e5e0 <USBH_FindInterface>
 800cb22:	4603      	mov	r3, r0
 800cb24:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800cb26:	7bfb      	ldrb	r3, [r7, #15]
 800cb28:	2bff      	cmp	r3, #255	; 0xff
 800cb2a:	d002      	beq.n	800cb32 <USBH_MSC_InterfaceInit+0x2a>
 800cb2c:	7bfb      	ldrb	r3, [r7, #15]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d901      	bls.n	800cb36 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cb32:	2302      	movs	r3, #2
 800cb34:	e106      	b.n	800cd44 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800cb36:	7bfb      	ldrb	r3, [r7, #15]
 800cb38:	4619      	mov	r1, r3
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f001 fd34 	bl	800e5a8 <USBH_SelectInterface>
 800cb40:	4603      	mov	r3, r0
 800cb42:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800cb44:	7bbb      	ldrb	r3, [r7, #14]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d001      	beq.n	800cb4e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800cb4a:	2302      	movs	r3, #2
 800cb4c:	e0fa      	b.n	800cd44 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800cb54:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cb58:	f00d f99e 	bl	8019e98 <malloc>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb66:	69db      	ldr	r3, [r3, #28]
 800cb68:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d101      	bne.n	800cb74 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800cb70:	2302      	movs	r3, #2
 800cb72:	e0e7      	b.n	800cd44 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800cb74:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb78:	2100      	movs	r1, #0
 800cb7a:	68b8      	ldr	r0, [r7, #8]
 800cb7c:	f00d f9aa 	bl	8019ed4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800cb80:	7bfb      	ldrb	r3, [r7, #15]
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	211a      	movs	r1, #26
 800cb86:	fb01 f303 	mul.w	r3, r1, r3
 800cb8a:	4413      	add	r3, r2
 800cb8c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	b25b      	sxtb	r3, r3
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	da16      	bge.n	800cbc6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	211a      	movs	r1, #26
 800cb9e:	fb01 f303 	mul.w	r3, r1, r3
 800cba2:	4413      	add	r3, r2
 800cba4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cba8:	781a      	ldrb	r2, [r3, #0]
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	211a      	movs	r1, #26
 800cbb4:	fb01 f303 	mul.w	r3, r1, r3
 800cbb8:	4413      	add	r3, r2
 800cbba:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cbbe:	881a      	ldrh	r2, [r3, #0]
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	815a      	strh	r2, [r3, #10]
 800cbc4:	e015      	b.n	800cbf2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800cbc6:	7bfb      	ldrb	r3, [r7, #15]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	211a      	movs	r1, #26
 800cbcc:	fb01 f303 	mul.w	r3, r1, r3
 800cbd0:	4413      	add	r3, r2
 800cbd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cbd6:	781a      	ldrb	r2, [r3, #0]
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cbdc:	7bfb      	ldrb	r3, [r7, #15]
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	211a      	movs	r1, #26
 800cbe2:	fb01 f303 	mul.w	r3, r1, r3
 800cbe6:	4413      	add	r3, r2
 800cbe8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cbec:	881a      	ldrh	r2, [r3, #0]
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800cbf2:	7bfb      	ldrb	r3, [r7, #15]
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	211a      	movs	r1, #26
 800cbf8:	fb01 f303 	mul.w	r3, r1, r3
 800cbfc:	4413      	add	r3, r2
 800cbfe:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	b25b      	sxtb	r3, r3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	da16      	bge.n	800cc38 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800cc0a:	7bfb      	ldrb	r3, [r7, #15]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	211a      	movs	r1, #26
 800cc10:	fb01 f303 	mul.w	r3, r1, r3
 800cc14:	4413      	add	r3, r2
 800cc16:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cc1a:	781a      	ldrb	r2, [r3, #0]
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	211a      	movs	r1, #26
 800cc26:	fb01 f303 	mul.w	r3, r1, r3
 800cc2a:	4413      	add	r3, r2
 800cc2c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cc30:	881a      	ldrh	r2, [r3, #0]
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	815a      	strh	r2, [r3, #10]
 800cc36:	e015      	b.n	800cc64 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	211a      	movs	r1, #26
 800cc3e:	fb01 f303 	mul.w	r3, r1, r3
 800cc42:	4413      	add	r3, r2
 800cc44:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cc48:	781a      	ldrb	r2, [r3, #0]
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cc4e:	7bfb      	ldrb	r3, [r7, #15]
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	211a      	movs	r1, #26
 800cc54:	fb01 f303 	mul.w	r3, r1, r3
 800cc58:	4413      	add	r3, r2
 800cc5a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cc5e:	881a      	ldrh	r2, [r3, #0]
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	2200      	movs	r2, #0
 800cc68:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	2200      	movs	r2, #0
 800cc74:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	799b      	ldrb	r3, [r3, #6]
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f003 f9d6 	bl	801002e <USBH_AllocPipe>
 800cc82:	4603      	mov	r3, r0
 800cc84:	461a      	mov	r2, r3
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	79db      	ldrb	r3, [r3, #7]
 800cc8e:	4619      	mov	r1, r3
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f003 f9cc 	bl	801002e <USBH_AllocPipe>
 800cc96:	4603      	mov	r3, r0
 800cc98:	461a      	mov	r2, r3
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fe04 	bl	800d8ac <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	799b      	ldrb	r3, [r3, #6]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d01e      	beq.n	800ccea <USBH_MSC_InterfaceInit+0x1e2>
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	891b      	ldrh	r3, [r3, #8]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d01a      	beq.n	800ccea <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	7959      	ldrb	r1, [r3, #5]
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	7998      	ldrb	r0, [r3, #6]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	8912      	ldrh	r2, [r2, #8]
 800cccc:	9202      	str	r2, [sp, #8]
 800ccce:	2202      	movs	r2, #2
 800ccd0:	9201      	str	r2, [sp, #4]
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	4623      	mov	r3, r4
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f003 f979 	bl	800ffd0 <USBH_OpenPipe>
 800ccde:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	79db      	ldrb	r3, [r3, #7]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d02c      	beq.n	800cd42 <USBH_MSC_InterfaceInit+0x23a>
 800cce8:	e001      	b.n	800ccee <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800ccea:	2303      	movs	r3, #3
 800ccec:	e02a      	b.n	800cd44 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	895b      	ldrh	r3, [r3, #10]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d025      	beq.n	800cd42 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	7919      	ldrb	r1, [r3, #4]
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	79d8      	ldrb	r0, [r3, #7]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cd0a:	68ba      	ldr	r2, [r7, #8]
 800cd0c:	8952      	ldrh	r2, [r2, #10]
 800cd0e:	9202      	str	r2, [sp, #8]
 800cd10:	2202      	movs	r2, #2
 800cd12:	9201      	str	r2, [sp, #4]
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	4623      	mov	r3, r4
 800cd18:	4602      	mov	r2, r0
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f003 f958 	bl	800ffd0 <USBH_OpenPipe>
 800cd20:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	791b      	ldrb	r3, [r3, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	4619      	mov	r1, r3
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f00c ffd6 	bl	8019cdc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	795b      	ldrb	r3, [r3, #5]
 800cd34:	2200      	movs	r2, #0
 800cd36:	4619      	mov	r1, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f00c ffcf 	bl	8019cdc <USBH_LL_SetToggle>

  return USBH_OK;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	e000      	b.n	800cd44 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800cd42:	2303      	movs	r3, #3
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3714      	adds	r7, #20
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd90      	pop	{r4, r7, pc}

0800cd4c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd5a:	69db      	ldr	r3, [r3, #28]
 800cd5c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	795b      	ldrb	r3, [r3, #5]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00e      	beq.n	800cd84 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	795b      	ldrb	r3, [r3, #5]
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f003 f94e 	bl	801000e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	795b      	ldrb	r3, [r3, #5]
 800cd76:	4619      	mov	r1, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f003 f979 	bl	8010070 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2200      	movs	r2, #0
 800cd82:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	791b      	ldrb	r3, [r3, #4]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d00e      	beq.n	800cdaa <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	791b      	ldrb	r3, [r3, #4]
 800cd90:	4619      	mov	r1, r3
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f003 f93b 	bl	801000e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	791b      	ldrb	r3, [r3, #4]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f003 f966 	bl	8010070 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2200      	movs	r2, #0
 800cda8:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdb0:	69db      	ldr	r3, [r3, #28]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00b      	beq.n	800cdce <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdbc:	69db      	ldr	r3, [r3, #28]
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f00d f872 	bl	8019ea8 <free>
    phost->pActiveClass->pData = 0U;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdca:	2200      	movs	r2, #0
 800cdcc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cdce:	2300      	movs	r3, #0
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cde6:	69db      	ldr	r3, [r3, #28]
 800cde8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800cdea:	2301      	movs	r3, #1
 800cdec:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	7b9b      	ldrb	r3, [r3, #14]
 800cdf2:	2b03      	cmp	r3, #3
 800cdf4:	d041      	beq.n	800ce7a <USBH_MSC_ClassRequest+0xa2>
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	dc4b      	bgt.n	800ce92 <USBH_MSC_ClassRequest+0xba>
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d001      	beq.n	800ce02 <USBH_MSC_ClassRequest+0x2a>
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d147      	bne.n	800ce92 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	4619      	mov	r1, r3
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 fd32 	bl	800d870 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
 800ce12:	2b03      	cmp	r3, #3
 800ce14:	d104      	bne.n	800ce20 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d137      	bne.n	800ce96 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	d804      	bhi.n	800ce38 <USBH_MSC_ClassRequest+0x60>
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	3301      	adds	r3, #1
 800ce34:	b2da      	uxtb	r2, r3
 800ce36:	e000      	b.n	800ce3a <USBH_MSC_ClassRequest+0x62>
 800ce38:	2202      	movs	r2, #2
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ce3e:	2300      	movs	r3, #0
 800ce40:	73bb      	strb	r3, [r7, #14]
 800ce42:	e014      	b.n	800ce6e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800ce44:	7bbb      	ldrb	r3, [r7, #14]
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	2134      	movs	r1, #52	; 0x34
 800ce4a:	fb01 f303 	mul.w	r3, r1, r3
 800ce4e:	4413      	add	r3, r2
 800ce50:	3392      	adds	r3, #146	; 0x92
 800ce52:	2202      	movs	r2, #2
 800ce54:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800ce56:	7bbb      	ldrb	r3, [r7, #14]
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	2134      	movs	r1, #52	; 0x34
 800ce5c:	fb01 f303 	mul.w	r3, r1, r3
 800ce60:	4413      	add	r3, r2
 800ce62:	33c1      	adds	r3, #193	; 0xc1
 800ce64:	2200      	movs	r2, #0
 800ce66:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ce68:	7bbb      	ldrb	r3, [r7, #14]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	73bb      	strb	r3, [r7, #14]
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	7bba      	ldrb	r2, [r7, #14]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d3e5      	bcc.n	800ce44 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800ce78:	e00d      	b.n	800ce96 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f002 fa96 	bl	800f3ae <USBH_ClrFeature>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d108      	bne.n	800ce9a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	7bda      	ldrb	r2, [r3, #15]
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	739a      	strb	r2, [r3, #14]
      }
      break;
 800ce90:	e003      	b.n	800ce9a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800ce92:	bf00      	nop
 800ce94:	e002      	b.n	800ce9c <USBH_MSC_ClassRequest+0xc4>
      break;
 800ce96:	bf00      	nop
 800ce98:	e000      	b.n	800ce9c <USBH_MSC_ClassRequest+0xc4>
      break;
 800ce9a:	bf00      	nop
  }

  return status;
 800ce9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
	...

0800cea8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ceb6:	69db      	ldr	r3, [r3, #28]
 800ceb8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ceba:	2301      	movs	r3, #1
 800cebc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800cebe:	2301      	movs	r3, #1
 800cec0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800cec2:	2301      	movs	r3, #1
 800cec4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	7b1b      	ldrb	r3, [r3, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d003      	beq.n	800ced6 <USBH_MSC_Process+0x2e>
 800cece:	2b01      	cmp	r3, #1
 800ced0:	f000 828d 	beq.w	800d3ee <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800ced4:	e28e      	b.n	800d3f4 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	429a      	cmp	r2, r3
 800cee4:	f080 8267 	bcs.w	800d3b6 <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ceee:	4619      	mov	r1, r3
 800cef0:	693a      	ldr	r2, [r7, #16]
 800cef2:	2334      	movs	r3, #52	; 0x34
 800cef4:	fb01 f303 	mul.w	r3, r1, r3
 800cef8:	4413      	add	r3, r2
 800cefa:	3391      	adds	r3, #145	; 0x91
 800cefc:	2201      	movs	r2, #1
 800cefe:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cf06:	4619      	mov	r1, r3
 800cf08:	693a      	ldr	r2, [r7, #16]
 800cf0a:	2334      	movs	r3, #52	; 0x34
 800cf0c:	fb01 f303 	mul.w	r3, r1, r3
 800cf10:	4413      	add	r3, r2
 800cf12:	3390      	adds	r3, #144	; 0x90
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b08      	cmp	r3, #8
 800cf18:	f200 8235 	bhi.w	800d386 <USBH_MSC_Process+0x4de>
 800cf1c:	a201      	add	r2, pc, #4	; (adr r2, 800cf24 <USBH_MSC_Process+0x7c>)
 800cf1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf22:	bf00      	nop
 800cf24:	0800cf49 	.word	0x0800cf49
 800cf28:	0800d387 	.word	0x0800d387
 800cf2c:	0800d011 	.word	0x0800d011
 800cf30:	0800d195 	.word	0x0800d195
 800cf34:	0800cf6f 	.word	0x0800cf6f
 800cf38:	0800d261 	.word	0x0800d261
 800cf3c:	0800d387 	.word	0x0800d387
 800cf40:	0800d387 	.word	0x0800d387
 800cf44:	0800d375 	.word	0x0800d375
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cf4e:	4619      	mov	r1, r3
 800cf50:	693a      	ldr	r2, [r7, #16]
 800cf52:	2334      	movs	r3, #52	; 0x34
 800cf54:	fb01 f303 	mul.w	r3, r1, r3
 800cf58:	4413      	add	r3, r2
 800cf5a:	3390      	adds	r3, #144	; 0x90
 800cf5c:	2204      	movs	r2, #4
 800cf5e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800cf6c:	e214      	b.n	800d398 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cf74:	b2d9      	uxtb	r1, r3
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	2334      	movs	r3, #52	; 0x34
 800cf80:	fb02 f303 	mul.w	r3, r2, r3
 800cf84:	3398      	adds	r3, #152	; 0x98
 800cf86:	693a      	ldr	r2, [r7, #16]
 800cf88:	4413      	add	r3, r2
 800cf8a:	3307      	adds	r3, #7
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f001 f836 	bl	800e000 <USBH_MSC_SCSI_Inquiry>
 800cf94:	4603      	mov	r3, r0
 800cf96:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d10b      	bne.n	800cfb6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	693a      	ldr	r2, [r7, #16]
 800cfa8:	2334      	movs	r3, #52	; 0x34
 800cfaa:	fb01 f303 	mul.w	r3, r1, r3
 800cfae:	4413      	add	r3, r2
 800cfb0:	3390      	adds	r3, #144	; 0x90
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800cfb6:	7bfb      	ldrb	r3, [r7, #15]
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	d10c      	bne.n	800cfd6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	693a      	ldr	r2, [r7, #16]
 800cfc6:	2334      	movs	r3, #52	; 0x34
 800cfc8:	fb01 f303 	mul.w	r3, r1, r3
 800cfcc:	4413      	add	r3, r2
 800cfce:	3390      	adds	r3, #144	; 0x90
 800cfd0:	2205      	movs	r2, #5
 800cfd2:	701a      	strb	r2, [r3, #0]
            break;
 800cfd4:	e1d9      	b.n	800d38a <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	2b04      	cmp	r3, #4
 800cfda:	f040 81d6 	bne.w	800d38a <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	693a      	ldr	r2, [r7, #16]
 800cfe8:	2334      	movs	r3, #52	; 0x34
 800cfea:	fb01 f303 	mul.w	r3, r1, r3
 800cfee:	4413      	add	r3, r2
 800cff0:	3390      	adds	r3, #144	; 0x90
 800cff2:	2201      	movs	r2, #1
 800cff4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cffc:	4619      	mov	r1, r3
 800cffe:	693a      	ldr	r2, [r7, #16]
 800d000:	2334      	movs	r3, #52	; 0x34
 800d002:	fb01 f303 	mul.w	r3, r1, r3
 800d006:	4413      	add	r3, r2
 800d008:	3391      	adds	r3, #145	; 0x91
 800d00a:	2202      	movs	r2, #2
 800d00c:	701a      	strb	r2, [r3, #0]
            break;
 800d00e:	e1bc      	b.n	800d38a <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d016:	b2db      	uxtb	r3, r3
 800d018:	4619      	mov	r1, r3
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 ff32 	bl	800de84 <USBH_MSC_SCSI_TestUnitReady>
 800d020:	4603      	mov	r3, r0
 800d022:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800d024:	7bbb      	ldrb	r3, [r7, #14]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d149      	bne.n	800d0be <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d030:	4619      	mov	r1, r3
 800d032:	693a      	ldr	r2, [r7, #16]
 800d034:	2334      	movs	r3, #52	; 0x34
 800d036:	fb01 f303 	mul.w	r3, r1, r3
 800d03a:	4413      	add	r3, r2
 800d03c:	3392      	adds	r3, #146	; 0x92
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00c      	beq.n	800d05e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d04a:	4619      	mov	r1, r3
 800d04c:	693a      	ldr	r2, [r7, #16]
 800d04e:	2334      	movs	r3, #52	; 0x34
 800d050:	fb01 f303 	mul.w	r3, r1, r3
 800d054:	4413      	add	r3, r2
 800d056:	33c1      	adds	r3, #193	; 0xc1
 800d058:	2201      	movs	r2, #1
 800d05a:	701a      	strb	r2, [r3, #0]
 800d05c:	e00b      	b.n	800d076 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d064:	4619      	mov	r1, r3
 800d066:	693a      	ldr	r2, [r7, #16]
 800d068:	2334      	movs	r3, #52	; 0x34
 800d06a:	fb01 f303 	mul.w	r3, r1, r3
 800d06e:	4413      	add	r3, r2
 800d070:	33c1      	adds	r3, #193	; 0xc1
 800d072:	2200      	movs	r2, #0
 800d074:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d07c:	4619      	mov	r1, r3
 800d07e:	693a      	ldr	r2, [r7, #16]
 800d080:	2334      	movs	r3, #52	; 0x34
 800d082:	fb01 f303 	mul.w	r3, r1, r3
 800d086:	4413      	add	r3, r2
 800d088:	3390      	adds	r3, #144	; 0x90
 800d08a:	2203      	movs	r2, #3
 800d08c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d094:	4619      	mov	r1, r3
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	2334      	movs	r3, #52	; 0x34
 800d09a:	fb01 f303 	mul.w	r3, r1, r3
 800d09e:	4413      	add	r3, r2
 800d0a0:	3391      	adds	r3, #145	; 0x91
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	693a      	ldr	r2, [r7, #16]
 800d0b0:	2334      	movs	r3, #52	; 0x34
 800d0b2:	fb01 f303 	mul.w	r3, r1, r3
 800d0b6:	4413      	add	r3, r2
 800d0b8:	3392      	adds	r3, #146	; 0x92
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800d0be:	7bbb      	ldrb	r3, [r7, #14]
 800d0c0:	2b02      	cmp	r3, #2
 800d0c2:	d14a      	bne.n	800d15a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	693a      	ldr	r2, [r7, #16]
 800d0ce:	2334      	movs	r3, #52	; 0x34
 800d0d0:	fb01 f303 	mul.w	r3, r1, r3
 800d0d4:	4413      	add	r3, r2
 800d0d6:	3392      	adds	r3, #146	; 0x92
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d00c      	beq.n	800d0f8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	693a      	ldr	r2, [r7, #16]
 800d0e8:	2334      	movs	r3, #52	; 0x34
 800d0ea:	fb01 f303 	mul.w	r3, r1, r3
 800d0ee:	4413      	add	r3, r2
 800d0f0:	33c1      	adds	r3, #193	; 0xc1
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	701a      	strb	r2, [r3, #0]
 800d0f6:	e00b      	b.n	800d110 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d0fe:	4619      	mov	r1, r3
 800d100:	693a      	ldr	r2, [r7, #16]
 800d102:	2334      	movs	r3, #52	; 0x34
 800d104:	fb01 f303 	mul.w	r3, r1, r3
 800d108:	4413      	add	r3, r2
 800d10a:	33c1      	adds	r3, #193	; 0xc1
 800d10c:	2200      	movs	r2, #0
 800d10e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d116:	4619      	mov	r1, r3
 800d118:	693a      	ldr	r2, [r7, #16]
 800d11a:	2334      	movs	r3, #52	; 0x34
 800d11c:	fb01 f303 	mul.w	r3, r1, r3
 800d120:	4413      	add	r3, r2
 800d122:	3390      	adds	r3, #144	; 0x90
 800d124:	2205      	movs	r2, #5
 800d126:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d12e:	4619      	mov	r1, r3
 800d130:	693a      	ldr	r2, [r7, #16]
 800d132:	2334      	movs	r3, #52	; 0x34
 800d134:	fb01 f303 	mul.w	r3, r1, r3
 800d138:	4413      	add	r3, r2
 800d13a:	3391      	adds	r3, #145	; 0x91
 800d13c:	2201      	movs	r2, #1
 800d13e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d146:	4619      	mov	r1, r3
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	2334      	movs	r3, #52	; 0x34
 800d14c:	fb01 f303 	mul.w	r3, r1, r3
 800d150:	4413      	add	r3, r2
 800d152:	3392      	adds	r3, #146	; 0x92
 800d154:	2202      	movs	r2, #2
 800d156:	701a      	strb	r2, [r3, #0]
            break;
 800d158:	e119      	b.n	800d38e <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800d15a:	7bbb      	ldrb	r3, [r7, #14]
 800d15c:	2b04      	cmp	r3, #4
 800d15e:	f040 8116 	bne.w	800d38e <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d168:	4619      	mov	r1, r3
 800d16a:	693a      	ldr	r2, [r7, #16]
 800d16c:	2334      	movs	r3, #52	; 0x34
 800d16e:	fb01 f303 	mul.w	r3, r1, r3
 800d172:	4413      	add	r3, r2
 800d174:	3390      	adds	r3, #144	; 0x90
 800d176:	2201      	movs	r2, #1
 800d178:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d180:	4619      	mov	r1, r3
 800d182:	693a      	ldr	r2, [r7, #16]
 800d184:	2334      	movs	r3, #52	; 0x34
 800d186:	fb01 f303 	mul.w	r3, r1, r3
 800d18a:	4413      	add	r3, r2
 800d18c:	3391      	adds	r3, #145	; 0x91
 800d18e:	2202      	movs	r2, #2
 800d190:	701a      	strb	r2, [r3, #0]
            break;
 800d192:	e0fc      	b.n	800d38e <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d19a:	b2d9      	uxtb	r1, r3
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	2334      	movs	r3, #52	; 0x34
 800d1a6:	fb02 f303 	mul.w	r3, r2, r3
 800d1aa:	3390      	adds	r3, #144	; 0x90
 800d1ac:	693a      	ldr	r2, [r7, #16]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	3304      	adds	r3, #4
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fea8 	bl	800df0a <USBH_MSC_SCSI_ReadCapacity>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800d1be:	7bfb      	ldrb	r3, [r7, #15]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d120      	bne.n	800d206 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	693a      	ldr	r2, [r7, #16]
 800d1ce:	2334      	movs	r3, #52	; 0x34
 800d1d0:	fb01 f303 	mul.w	r3, r1, r3
 800d1d4:	4413      	add	r3, r2
 800d1d6:	3390      	adds	r3, #144	; 0x90
 800d1d8:	2201      	movs	r2, #1
 800d1da:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	2334      	movs	r3, #52	; 0x34
 800d1e8:	fb01 f303 	mul.w	r3, r1, r3
 800d1ec:	4413      	add	r3, r2
 800d1ee:	3391      	adds	r3, #145	; 0x91
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800d204:	e0c5      	b.n	800d392 <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 800d206:	7bfb      	ldrb	r3, [r7, #15]
 800d208:	2b02      	cmp	r3, #2
 800d20a:	d10c      	bne.n	800d226 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d212:	4619      	mov	r1, r3
 800d214:	693a      	ldr	r2, [r7, #16]
 800d216:	2334      	movs	r3, #52	; 0x34
 800d218:	fb01 f303 	mul.w	r3, r1, r3
 800d21c:	4413      	add	r3, r2
 800d21e:	3390      	adds	r3, #144	; 0x90
 800d220:	2205      	movs	r2, #5
 800d222:	701a      	strb	r2, [r3, #0]
            break;
 800d224:	e0b5      	b.n	800d392 <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d226:	7bfb      	ldrb	r3, [r7, #15]
 800d228:	2b04      	cmp	r3, #4
 800d22a:	f040 80b2 	bne.w	800d392 <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d234:	4619      	mov	r1, r3
 800d236:	693a      	ldr	r2, [r7, #16]
 800d238:	2334      	movs	r3, #52	; 0x34
 800d23a:	fb01 f303 	mul.w	r3, r1, r3
 800d23e:	4413      	add	r3, r2
 800d240:	3390      	adds	r3, #144	; 0x90
 800d242:	2201      	movs	r2, #1
 800d244:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d24c:	4619      	mov	r1, r3
 800d24e:	693a      	ldr	r2, [r7, #16]
 800d250:	2334      	movs	r3, #52	; 0x34
 800d252:	fb01 f303 	mul.w	r3, r1, r3
 800d256:	4413      	add	r3, r2
 800d258:	3391      	adds	r3, #145	; 0x91
 800d25a:	2202      	movs	r2, #2
 800d25c:	701a      	strb	r2, [r3, #0]
            break;
 800d25e:	e098      	b.n	800d392 <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d266:	b2d9      	uxtb	r1, r3
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d26e:	461a      	mov	r2, r3
 800d270:	2334      	movs	r3, #52	; 0x34
 800d272:	fb02 f303 	mul.w	r3, r2, r3
 800d276:	3398      	adds	r3, #152	; 0x98
 800d278:	693a      	ldr	r2, [r7, #16]
 800d27a:	4413      	add	r3, r2
 800d27c:	3304      	adds	r3, #4
 800d27e:	461a      	mov	r2, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 ff62 	bl	800e14a <USBH_MSC_SCSI_RequestSense>
 800d286:	4603      	mov	r3, r0
 800d288:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800d28a:	7bfb      	ldrb	r3, [r7, #15]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d145      	bne.n	800d31c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d296:	4619      	mov	r1, r3
 800d298:	693a      	ldr	r2, [r7, #16]
 800d29a:	2334      	movs	r3, #52	; 0x34
 800d29c:	fb01 f303 	mul.w	r3, r1, r3
 800d2a0:	4413      	add	r3, r2
 800d2a2:	339c      	adds	r3, #156	; 0x9c
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2b06      	cmp	r3, #6
 800d2a8:	d00c      	beq.n	800d2c4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	2334      	movs	r3, #52	; 0x34
 800d2b6:	fb01 f303 	mul.w	r3, r1, r3
 800d2ba:	4413      	add	r3, r2
 800d2bc:	339c      	adds	r3, #156	; 0x9c
 800d2be:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	d117      	bne.n	800d2f4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	f242 720f 	movw	r2, #9999	; 0x270f
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d80c      	bhi.n	800d2f4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	693a      	ldr	r2, [r7, #16]
 800d2e4:	2334      	movs	r3, #52	; 0x34
 800d2e6:	fb01 f303 	mul.w	r3, r1, r3
 800d2ea:	4413      	add	r3, r2
 800d2ec:	3390      	adds	r3, #144	; 0x90
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	701a      	strb	r2, [r3, #0]
                  break;
 800d2f2:	e051      	b.n	800d398 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	693a      	ldr	r2, [r7, #16]
 800d2fe:	2334      	movs	r3, #52	; 0x34
 800d300:	fb01 f303 	mul.w	r3, r1, r3
 800d304:	4413      	add	r3, r2
 800d306:	3390      	adds	r3, #144	; 0x90
 800d308:	2201      	movs	r2, #1
 800d30a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d312:	3301      	adds	r3, #1
 800d314:	b29a      	uxth	r2, r3
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800d31c:	7bfb      	ldrb	r3, [r7, #15]
 800d31e:	2b02      	cmp	r3, #2
 800d320:	d10c      	bne.n	800d33c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d328:	4619      	mov	r1, r3
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	2334      	movs	r3, #52	; 0x34
 800d32e:	fb01 f303 	mul.w	r3, r1, r3
 800d332:	4413      	add	r3, r2
 800d334:	3390      	adds	r3, #144	; 0x90
 800d336:	2208      	movs	r2, #8
 800d338:	701a      	strb	r2, [r3, #0]
            break;
 800d33a:	e02c      	b.n	800d396 <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d33c:	7bfb      	ldrb	r3, [r7, #15]
 800d33e:	2b04      	cmp	r3, #4
 800d340:	d129      	bne.n	800d396 <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d348:	4619      	mov	r1, r3
 800d34a:	693a      	ldr	r2, [r7, #16]
 800d34c:	2334      	movs	r3, #52	; 0x34
 800d34e:	fb01 f303 	mul.w	r3, r1, r3
 800d352:	4413      	add	r3, r2
 800d354:	3390      	adds	r3, #144	; 0x90
 800d356:	2201      	movs	r2, #1
 800d358:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d360:	4619      	mov	r1, r3
 800d362:	693a      	ldr	r2, [r7, #16]
 800d364:	2334      	movs	r3, #52	; 0x34
 800d366:	fb01 f303 	mul.w	r3, r1, r3
 800d36a:	4413      	add	r3, r2
 800d36c:	3391      	adds	r3, #145	; 0x91
 800d36e:	2202      	movs	r2, #2
 800d370:	701a      	strb	r2, [r3, #0]
            break;
 800d372:	e010      	b.n	800d396 <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d37a:	3301      	adds	r3, #1
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800d384:	e008      	b.n	800d398 <USBH_MSC_Process+0x4f0>
            break;
 800d386:	bf00      	nop
 800d388:	e006      	b.n	800d398 <USBH_MSC_Process+0x4f0>
            break;
 800d38a:	bf00      	nop
 800d38c:	e004      	b.n	800d398 <USBH_MSC_Process+0x4f0>
            break;
 800d38e:	bf00      	nop
 800d390:	e002      	b.n	800d398 <USBH_MSC_Process+0x4f0>
            break;
 800d392:	bf00      	nop
 800d394:	e000      	b.n	800d398 <USBH_MSC_Process+0x4f0>
            break;
 800d396:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2204      	movs	r2, #4
 800d39c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	f008 ff6e 	bl	8016290 <osMessagePut>
      break;
 800d3b4:	e01e      	b.n	800d3f4 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2204      	movs	r2, #4
 800d3c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d3d8:	2200      	movs	r2, #0
 800d3da:	4619      	mov	r1, r3
 800d3dc:	f008 ff58 	bl	8016290 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3e6:	2102      	movs	r1, #2
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	4798      	blx	r3
      break;
 800d3ec:	e002      	b.n	800d3f4 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	75fb      	strb	r3, [r7, #23]
      break;
 800d3f2:	bf00      	nop
  }
  return error;
 800d3f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3718      	adds	r7, #24
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop

0800d400 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	370c      	adds	r7, #12
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr

0800d416 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b088      	sub	sp, #32
 800d41a:	af02      	add	r7, sp, #8
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	460b      	mov	r3, r1
 800d420:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d428:	69db      	ldr	r3, [r3, #28]
 800d42a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800d42c:	2301      	movs	r3, #1
 800d42e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800d430:	2301      	movs	r3, #1
 800d432:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800d434:	78fb      	ldrb	r3, [r7, #3]
 800d436:	693a      	ldr	r2, [r7, #16]
 800d438:	2134      	movs	r1, #52	; 0x34
 800d43a:	fb01 f303 	mul.w	r3, r1, r3
 800d43e:	4413      	add	r3, r2
 800d440:	3390      	adds	r3, #144	; 0x90
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	2b07      	cmp	r3, #7
 800d446:	d04b      	beq.n	800d4e0 <USBH_MSC_RdWrProcess+0xca>
 800d448:	2b07      	cmp	r3, #7
 800d44a:	f300 80d2 	bgt.w	800d5f2 <USBH_MSC_RdWrProcess+0x1dc>
 800d44e:	2b05      	cmp	r3, #5
 800d450:	f000 8089 	beq.w	800d566 <USBH_MSC_RdWrProcess+0x150>
 800d454:	2b06      	cmp	r3, #6
 800d456:	f040 80cc 	bne.w	800d5f2 <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800d45a:	78f9      	ldrb	r1, [r7, #3]
 800d45c:	2300      	movs	r3, #0
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	2300      	movs	r3, #0
 800d462:	2200      	movs	r2, #0
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 ff54 	bl	800e312 <USBH_MSC_SCSI_Read>
 800d46a:	4603      	mov	r3, r0
 800d46c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10b      	bne.n	800d48c <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d474:	78fb      	ldrb	r3, [r7, #3]
 800d476:	693a      	ldr	r2, [r7, #16]
 800d478:	2134      	movs	r1, #52	; 0x34
 800d47a:	fb01 f303 	mul.w	r3, r1, r3
 800d47e:	4413      	add	r3, r2
 800d480:	3390      	adds	r3, #144	; 0x90
 800d482:	2201      	movs	r2, #1
 800d484:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800d486:	2300      	movs	r3, #0
 800d488:	75fb      	strb	r3, [r7, #23]
 800d48a:	e01a      	b.n	800d4c2 <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 800d48c:	7bfb      	ldrb	r3, [r7, #15]
 800d48e:	2b02      	cmp	r3, #2
 800d490:	d109      	bne.n	800d4a6 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800d492:	78fb      	ldrb	r3, [r7, #3]
 800d494:	693a      	ldr	r2, [r7, #16]
 800d496:	2134      	movs	r1, #52	; 0x34
 800d498:	fb01 f303 	mul.w	r3, r1, r3
 800d49c:	4413      	add	r3, r2
 800d49e:	3390      	adds	r3, #144	; 0x90
 800d4a0:	2205      	movs	r2, #5
 800d4a2:	701a      	strb	r2, [r3, #0]
 800d4a4:	e00d      	b.n	800d4c2 <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d4a6:	7bfb      	ldrb	r3, [r7, #15]
 800d4a8:	2b04      	cmp	r3, #4
 800d4aa:	d10a      	bne.n	800d4c2 <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800d4ac:	78fb      	ldrb	r3, [r7, #3]
 800d4ae:	693a      	ldr	r2, [r7, #16]
 800d4b0:	2134      	movs	r1, #52	; 0x34
 800d4b2:	fb01 f303 	mul.w	r3, r1, r3
 800d4b6:	4413      	add	r3, r2
 800d4b8:	3390      	adds	r3, #144	; 0x90
 800d4ba:	2208      	movs	r2, #8
 800d4bc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800d4be:	2302      	movs	r3, #2
 800d4c0:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2204      	movs	r2, #4
 800d4c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	4619      	mov	r1, r3
 800d4da:	f008 fed9 	bl	8016290 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d4de:	e089      	b.n	800d5f4 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800d4e0:	78f9      	ldrb	r1, [r7, #3]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	9300      	str	r3, [sp, #0]
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 fea6 	bl	800e23c <USBH_MSC_SCSI_Write>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800d4f4:	7bfb      	ldrb	r3, [r7, #15]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d10b      	bne.n	800d512 <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d4fa:	78fb      	ldrb	r3, [r7, #3]
 800d4fc:	693a      	ldr	r2, [r7, #16]
 800d4fe:	2134      	movs	r1, #52	; 0x34
 800d500:	fb01 f303 	mul.w	r3, r1, r3
 800d504:	4413      	add	r3, r2
 800d506:	3390      	adds	r3, #144	; 0x90
 800d508:	2201      	movs	r2, #1
 800d50a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800d50c:	2300      	movs	r3, #0
 800d50e:	75fb      	strb	r3, [r7, #23]
 800d510:	e01a      	b.n	800d548 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 800d512:	7bfb      	ldrb	r3, [r7, #15]
 800d514:	2b02      	cmp	r3, #2
 800d516:	d109      	bne.n	800d52c <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800d518:	78fb      	ldrb	r3, [r7, #3]
 800d51a:	693a      	ldr	r2, [r7, #16]
 800d51c:	2134      	movs	r1, #52	; 0x34
 800d51e:	fb01 f303 	mul.w	r3, r1, r3
 800d522:	4413      	add	r3, r2
 800d524:	3390      	adds	r3, #144	; 0x90
 800d526:	2205      	movs	r2, #5
 800d528:	701a      	strb	r2, [r3, #0]
 800d52a:	e00d      	b.n	800d548 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d52c:	7bfb      	ldrb	r3, [r7, #15]
 800d52e:	2b04      	cmp	r3, #4
 800d530:	d10a      	bne.n	800d548 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800d532:	78fb      	ldrb	r3, [r7, #3]
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	2134      	movs	r1, #52	; 0x34
 800d538:	fb01 f303 	mul.w	r3, r1, r3
 800d53c:	4413      	add	r3, r2
 800d53e:	3390      	adds	r3, #144	; 0x90
 800d540:	2208      	movs	r2, #8
 800d542:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800d544:	2302      	movs	r3, #2
 800d546:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2204      	movs	r2, #4
 800d54c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d55c:	2200      	movs	r2, #0
 800d55e:	4619      	mov	r1, r3
 800d560:	f008 fe96 	bl	8016290 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d564:	e046      	b.n	800d5f4 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800d566:	78fb      	ldrb	r3, [r7, #3]
 800d568:	2234      	movs	r2, #52	; 0x34
 800d56a:	fb02 f303 	mul.w	r3, r2, r3
 800d56e:	3398      	adds	r3, #152	; 0x98
 800d570:	693a      	ldr	r2, [r7, #16]
 800d572:	4413      	add	r3, r2
 800d574:	1d1a      	adds	r2, r3, #4
 800d576:	78fb      	ldrb	r3, [r7, #3]
 800d578:	4619      	mov	r1, r3
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 fde5 	bl	800e14a <USBH_MSC_SCSI_RequestSense>
 800d580:	4603      	mov	r3, r0
 800d582:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800d584:	7bfb      	ldrb	r3, [r7, #15]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d113      	bne.n	800d5b2 <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d58a:	78fb      	ldrb	r3, [r7, #3]
 800d58c:	693a      	ldr	r2, [r7, #16]
 800d58e:	2134      	movs	r1, #52	; 0x34
 800d590:	fb01 f303 	mul.w	r3, r1, r3
 800d594:	4413      	add	r3, r2
 800d596:	3390      	adds	r3, #144	; 0x90
 800d598:	2201      	movs	r2, #1
 800d59a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800d59c:	78fb      	ldrb	r3, [r7, #3]
 800d59e:	693a      	ldr	r2, [r7, #16]
 800d5a0:	2134      	movs	r1, #52	; 0x34
 800d5a2:	fb01 f303 	mul.w	r3, r1, r3
 800d5a6:	4413      	add	r3, r2
 800d5a8:	3391      	adds	r3, #145	; 0x91
 800d5aa:	2202      	movs	r2, #2
 800d5ac:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800d5ae:	2302      	movs	r3, #2
 800d5b0:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800d5b2:	7bfb      	ldrb	r3, [r7, #15]
 800d5b4:	2b02      	cmp	r3, #2
 800d5b6:	d00d      	beq.n	800d5d4 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d5b8:	7bfb      	ldrb	r3, [r7, #15]
 800d5ba:	2b04      	cmp	r3, #4
 800d5bc:	d10a      	bne.n	800d5d4 <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800d5be:	78fb      	ldrb	r3, [r7, #3]
 800d5c0:	693a      	ldr	r2, [r7, #16]
 800d5c2:	2134      	movs	r1, #52	; 0x34
 800d5c4:	fb01 f303 	mul.w	r3, r1, r3
 800d5c8:	4413      	add	r3, r2
 800d5ca:	3390      	adds	r3, #144	; 0x90
 800d5cc:	2208      	movs	r2, #8
 800d5ce:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800d5d0:	2302      	movs	r3, #2
 800d5d2:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2204      	movs	r2, #4
 800d5d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	f008 fe50 	bl	8016290 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d5f0:	e000      	b.n	800d5f4 <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 800d5f2:	bf00      	nop

  }
  return error;
 800d5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3718      	adds	r7, #24
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d5fe:	b480      	push	{r7}
 800d600:	b085      	sub	sp, #20
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	460b      	mov	r3, r1
 800d608:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d610:	69db      	ldr	r3, [r3, #28]
 800d612:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	2b0b      	cmp	r3, #11
 800d61c:	d10c      	bne.n	800d638 <USBH_MSC_UnitIsReady+0x3a>
 800d61e:	78fb      	ldrb	r3, [r7, #3]
 800d620:	68ba      	ldr	r2, [r7, #8]
 800d622:	2134      	movs	r1, #52	; 0x34
 800d624:	fb01 f303 	mul.w	r3, r1, r3
 800d628:	4413      	add	r3, r2
 800d62a:	3391      	adds	r3, #145	; 0x91
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d102      	bne.n	800d638 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800d632:	2301      	movs	r3, #1
 800d634:	73fb      	strb	r3, [r7, #15]
 800d636:	e001      	b.n	800d63c <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800d638:	2300      	movs	r3, #0
 800d63a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3714      	adds	r7, #20
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr

0800d64a <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b086      	sub	sp, #24
 800d64e:	af00      	add	r7, sp, #0
 800d650:	60f8      	str	r0, [r7, #12]
 800d652:	460b      	mov	r3, r1
 800d654:	607a      	str	r2, [r7, #4]
 800d656:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d65e:	69db      	ldr	r3, [r3, #28]
 800d660:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	b2db      	uxtb	r3, r3
 800d668:	2b0b      	cmp	r3, #11
 800d66a:	d10d      	bne.n	800d688 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800d66c:	7afb      	ldrb	r3, [r7, #11]
 800d66e:	2234      	movs	r2, #52	; 0x34
 800d670:	fb02 f303 	mul.w	r3, r2, r3
 800d674:	3390      	adds	r3, #144	; 0x90
 800d676:	697a      	ldr	r2, [r7, #20]
 800d678:	4413      	add	r3, r2
 800d67a:	2234      	movs	r2, #52	; 0x34
 800d67c:	4619      	mov	r1, r3
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f00c fc1a 	bl	8019eb8 <memcpy>
    return USBH_OK;
 800d684:	2300      	movs	r3, #0
 800d686:	e000      	b.n	800d68a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800d688:	2302      	movs	r3, #2
  }
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3718      	adds	r7, #24
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b088      	sub	sp, #32
 800d696:	af02      	add	r7, sp, #8
 800d698:	60f8      	str	r0, [r7, #12]
 800d69a:	607a      	str	r2, [r7, #4]
 800d69c:	603b      	str	r3, [r7, #0]
 800d69e:	460b      	mov	r3, r1
 800d6a0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6a8:	69db      	ldr	r3, [r3, #28]
 800d6aa:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00e      	beq.n	800d6d6 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800d6be:	2b0b      	cmp	r3, #11
 800d6c0:	d109      	bne.n	800d6d6 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800d6c2:	7afb      	ldrb	r3, [r7, #11]
 800d6c4:	697a      	ldr	r2, [r7, #20]
 800d6c6:	2134      	movs	r1, #52	; 0x34
 800d6c8:	fb01 f303 	mul.w	r3, r1, r3
 800d6cc:	4413      	add	r3, r2
 800d6ce:	3390      	adds	r3, #144	; 0x90
 800d6d0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d001      	beq.n	800d6da <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800d6d6:	2302      	movs	r3, #2
 800d6d8:	e040      	b.n	800d75c <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	2206      	movs	r2, #6
 800d6de:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800d6e0:	7afb      	ldrb	r3, [r7, #11]
 800d6e2:	697a      	ldr	r2, [r7, #20]
 800d6e4:	2134      	movs	r1, #52	; 0x34
 800d6e6:	fb01 f303 	mul.w	r3, r1, r3
 800d6ea:	4413      	add	r3, r2
 800d6ec:	3390      	adds	r3, #144	; 0x90
 800d6ee:	2206      	movs	r2, #6
 800d6f0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800d6f2:	7afb      	ldrb	r3, [r7, #11]
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800d6fc:	7af9      	ldrb	r1, [r7, #11]
 800d6fe:	6a3b      	ldr	r3, [r7, #32]
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f000 fe03 	bl	800e312 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d712:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d714:	e016      	b.n	800d744 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	1ad2      	subs	r2, r2, r3
 800d720:	6a3b      	ldr	r3, [r7, #32]
 800d722:	f242 7110 	movw	r1, #10000	; 0x2710
 800d726:	fb01 f303 	mul.w	r3, r1, r3
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d805      	bhi.n	800d73a <USBH_MSC_Read+0xa8>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d734:	b2db      	uxtb	r3, r3
 800d736:	2b00      	cmp	r3, #0
 800d738:	d104      	bne.n	800d744 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	2201      	movs	r2, #1
 800d73e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800d740:	2302      	movs	r3, #2
 800d742:	e00b      	b.n	800d75c <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d744:	7afb      	ldrb	r3, [r7, #11]
 800d746:	4619      	mov	r1, r3
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f7ff fe64 	bl	800d416 <USBH_MSC_RdWrProcess>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b01      	cmp	r3, #1
 800d752:	d0e0      	beq.n	800d716 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	2201      	movs	r2, #1
 800d758:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800d75a:	2300      	movs	r3, #0
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3718      	adds	r7, #24
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b088      	sub	sp, #32
 800d768:	af02      	add	r7, sp, #8
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	607a      	str	r2, [r7, #4]
 800d76e:	603b      	str	r3, [r7, #0]
 800d770:	460b      	mov	r3, r1
 800d772:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d77a:	69db      	ldr	r3, [r3, #28]
 800d77c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d784:	b2db      	uxtb	r3, r3
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00e      	beq.n	800d7a8 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800d790:	2b0b      	cmp	r3, #11
 800d792:	d109      	bne.n	800d7a8 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800d794:	7afb      	ldrb	r3, [r7, #11]
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	2134      	movs	r1, #52	; 0x34
 800d79a:	fb01 f303 	mul.w	r3, r1, r3
 800d79e:	4413      	add	r3, r2
 800d7a0:	3390      	adds	r3, #144	; 0x90
 800d7a2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d001      	beq.n	800d7ac <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800d7a8:	2302      	movs	r3, #2
 800d7aa:	e040      	b.n	800d82e <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	2207      	movs	r2, #7
 800d7b0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800d7b2:	7afb      	ldrb	r3, [r7, #11]
 800d7b4:	697a      	ldr	r2, [r7, #20]
 800d7b6:	2134      	movs	r1, #52	; 0x34
 800d7b8:	fb01 f303 	mul.w	r3, r1, r3
 800d7bc:	4413      	add	r3, r2
 800d7be:	3390      	adds	r3, #144	; 0x90
 800d7c0:	2207      	movs	r2, #7
 800d7c2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800d7c4:	7afb      	ldrb	r3, [r7, #11]
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800d7ce:	7af9      	ldrb	r1, [r7, #11]
 800d7d0:	6a3b      	ldr	r3, [r7, #32]
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f000 fd2f 	bl	800e23c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d7e4:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d7e6:	e016      	b.n	800d816 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	1ad2      	subs	r2, r2, r3
 800d7f2:	6a3b      	ldr	r3, [r7, #32]
 800d7f4:	f242 7110 	movw	r1, #10000	; 0x2710
 800d7f8:	fb01 f303 	mul.w	r3, r1, r3
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d805      	bhi.n	800d80c <USBH_MSC_Write+0xa8>
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d806:	b2db      	uxtb	r3, r3
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d104      	bne.n	800d816 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	2201      	movs	r2, #1
 800d810:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800d812:	2302      	movs	r3, #2
 800d814:	e00b      	b.n	800d82e <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d816:	7afb      	ldrb	r3, [r7, #11]
 800d818:	4619      	mov	r1, r3
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f7ff fdfb 	bl	800d416 <USBH_MSC_RdWrProcess>
 800d820:	4603      	mov	r3, r0
 800d822:	2b01      	cmp	r3, #1
 800d824:	d0e0      	beq.n	800d7e8 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	2201      	movs	r2, #1
 800d82a:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b082      	sub	sp, #8
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2221      	movs	r2, #33	; 0x21
 800d842:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	22ff      	movs	r2, #255	; 0xff
 800d848:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800d85c:	2200      	movs	r2, #0
 800d85e:	2100      	movs	r1, #0
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f002 f873 	bl	800f94c <USBH_CtlReq>
 800d866:	4603      	mov	r3, r0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	22a1      	movs	r2, #161	; 0xa1
 800d87e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	22fe      	movs	r2, #254	; 0xfe
 800d884:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2201      	movs	r2, #1
 800d896:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800d898:	2201      	movs	r2, #1
 800d89a:	6839      	ldr	r1, [r7, #0]
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f002 f855 	bl	800f94c <USBH_CtlReq>
 800d8a2:	4603      	mov	r3, r0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d8ba:	69db      	ldr	r3, [r3, #28]
 800d8bc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	4a09      	ldr	r2, [pc, #36]	; (800d8e8 <USBH_MSC_BOT_Init+0x3c>)
 800d8c2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	4a09      	ldr	r2, [pc, #36]	; (800d8ec <USBH_MSC_BOT_Init+0x40>)
 800d8c8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3714      	adds	r7, #20
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr
 800d8e8:	43425355 	.word	0x43425355
 800d8ec:	20304050 	.word	0x20304050

0800d8f0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b088      	sub	sp, #32
 800d8f4:	af02      	add	r7, sp, #8
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800d900:	2301      	movs	r3, #1
 800d902:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800d904:	2301      	movs	r3, #1
 800d906:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d908:	2300      	movs	r3, #0
 800d90a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d912:	69db      	ldr	r3, [r3, #28]
 800d914:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800d916:	2300      	movs	r3, #0
 800d918:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d920:	3b01      	subs	r3, #1
 800d922:	2b0a      	cmp	r3, #10
 800d924:	f200 822a 	bhi.w	800dd7c <USBH_MSC_BOT_Process+0x48c>
 800d928:	a201      	add	r2, pc, #4	; (adr r2, 800d930 <USBH_MSC_BOT_Process+0x40>)
 800d92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d92e:	bf00      	nop
 800d930:	0800d95d 	.word	0x0800d95d
 800d934:	0800d985 	.word	0x0800d985
 800d938:	0800da43 	.word	0x0800da43
 800d93c:	0800da61 	.word	0x0800da61
 800d940:	0800db1d 	.word	0x0800db1d
 800d944:	0800db3f 	.word	0x0800db3f
 800d948:	0800dc2b 	.word	0x0800dc2b
 800d94c:	0800dc47 	.word	0x0800dc47
 800d950:	0800dcd1 	.word	0x0800dcd1
 800d954:	0800dd01 	.word	0x0800dd01
 800d958:	0800dd63 	.word	0x0800dd63
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	78fa      	ldrb	r2, [r7, #3]
 800d960:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	2202      	movs	r2, #2
 800d968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	795b      	ldrb	r3, [r3, #5]
 800d976:	2201      	movs	r2, #1
 800d978:	9200      	str	r2, [sp, #0]
 800d97a:	221f      	movs	r2, #31
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f002 fae4 	bl	800ff4a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800d982:	e20a      	b.n	800dd9a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	795b      	ldrb	r3, [r3, #5]
 800d988:	4619      	mov	r1, r3
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f00c f97c 	bl	8019c88 <USBH_LL_GetURBState>
 800d990:	4603      	mov	r3, r0
 800d992:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d994:	7d3b      	ldrb	r3, [r7, #20]
 800d996:	2b01      	cmp	r3, #1
 800d998:	d126      	bne.n	800d9e8 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00f      	beq.n	800d9c2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d9a8:	b25b      	sxtb	r3, r3
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	da04      	bge.n	800d9b8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	2203      	movs	r2, #3
 800d9b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d9b6:	e008      	b.n	800d9ca <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	2205      	movs	r2, #5
 800d9bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d9c0:	e003      	b.n	800d9ca <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	2207      	movs	r2, #7
 800d9c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2202      	movs	r2, #2
 800d9ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d9de:	2200      	movs	r2, #0
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	f008 fc55 	bl	8016290 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d9e6:	e1cb      	b.n	800dd80 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d9e8:	7d3b      	ldrb	r3, [r7, #20]
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	d112      	bne.n	800da14 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2202      	movs	r2, #2
 800d9fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800da0a:	2200      	movs	r2, #0
 800da0c:	4619      	mov	r1, r3
 800da0e:	f008 fc3f 	bl	8016290 <osMessagePut>
      break;
 800da12:	e1b5      	b.n	800dd80 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 800da14:	7d3b      	ldrb	r3, [r7, #20]
 800da16:	2b05      	cmp	r3, #5
 800da18:	f040 81b2 	bne.w	800dd80 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	220a      	movs	r2, #10
 800da20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2202      	movs	r2, #2
 800da28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800da38:	2200      	movs	r2, #0
 800da3a:	4619      	mov	r1, r3
 800da3c:	f008 fc28 	bl	8016290 <osMessagePut>
      break;
 800da40:	e19e      	b.n	800dd80 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	895a      	ldrh	r2, [r3, #10]
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	791b      	ldrb	r3, [r3, #4]
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f002 fa9f 	bl	800ff94 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	2204      	movs	r2, #4
 800da5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800da5e:	e19c      	b.n	800dd9a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	791b      	ldrb	r3, [r3, #4]
 800da64:	4619      	mov	r1, r3
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f00c f90e 	bl	8019c88 <USBH_LL_GetURBState>
 800da6c:	4603      	mov	r3, r0
 800da6e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800da70:	7d3b      	ldrb	r3, [r7, #20]
 800da72:	2b01      	cmp	r3, #1
 800da74:	d13b      	bne.n	800daee <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da7a:	693a      	ldr	r2, [r7, #16]
 800da7c:	8952      	ldrh	r2, [r2, #10]
 800da7e:	4293      	cmp	r3, r2
 800da80:	d910      	bls.n	800daa4 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da88:	693a      	ldr	r2, [r7, #16]
 800da8a:	8952      	ldrh	r2, [r2, #10]
 800da8c:	441a      	add	r2, r3
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da98:	693a      	ldr	r2, [r7, #16]
 800da9a:	8952      	ldrh	r2, [r2, #10]
 800da9c:	1a9a      	subs	r2, r3, r2
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	65da      	str	r2, [r3, #92]	; 0x5c
 800daa2:	e002      	b.n	800daaa <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	2200      	movs	r2, #0
 800daa8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00a      	beq.n	800dac8 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	895a      	ldrh	r2, [r3, #10]
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	791b      	ldrb	r3, [r3, #4]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f002 fa67 	bl	800ff94 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800dac6:	e15d      	b.n	800dd84 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	2207      	movs	r2, #7
 800dacc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2202      	movs	r2, #2
 800dad4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dae4:	2200      	movs	r2, #0
 800dae6:	4619      	mov	r1, r3
 800dae8:	f008 fbd2 	bl	8016290 <osMessagePut>
      break;
 800daec:	e14a      	b.n	800dd84 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 800daee:	7d3b      	ldrb	r3, [r7, #20]
 800daf0:	2b05      	cmp	r3, #5
 800daf2:	f040 8147 	bne.w	800dd84 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	2209      	movs	r2, #9
 800dafa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2202      	movs	r2, #2
 800db02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800db12:	2200      	movs	r2, #0
 800db14:	4619      	mov	r1, r3
 800db16:	f008 fbbb 	bl	8016290 <osMessagePut>
      break;
 800db1a:	e133      	b.n	800dd84 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	891a      	ldrh	r2, [r3, #8]
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	795b      	ldrb	r3, [r3, #5]
 800db2a:	2001      	movs	r0, #1
 800db2c:	9000      	str	r0, [sp, #0]
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f002 fa0b 	bl	800ff4a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	2206      	movs	r2, #6
 800db38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800db3c:	e12d      	b.n	800dd9a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	795b      	ldrb	r3, [r3, #5]
 800db42:	4619      	mov	r1, r3
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f00c f89f 	bl	8019c88 <USBH_LL_GetURBState>
 800db4a:	4603      	mov	r3, r0
 800db4c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800db4e:	7d3b      	ldrb	r3, [r7, #20]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d13d      	bne.n	800dbd0 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db58:	693a      	ldr	r2, [r7, #16]
 800db5a:	8912      	ldrh	r2, [r2, #8]
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d910      	bls.n	800db82 <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db66:	693a      	ldr	r2, [r7, #16]
 800db68:	8912      	ldrh	r2, [r2, #8]
 800db6a:	441a      	add	r2, r3
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db76:	693a      	ldr	r2, [r7, #16]
 800db78:	8912      	ldrh	r2, [r2, #8]
 800db7a:	1a9a      	subs	r2, r3, r2
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	65da      	str	r2, [r3, #92]	; 0x5c
 800db80:	e002      	b.n	800db88 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	2200      	movs	r2, #0
 800db86:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00c      	beq.n	800dbaa <USBH_MSC_BOT_Process+0x2ba>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	891a      	ldrh	r2, [r3, #8]
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	795b      	ldrb	r3, [r3, #5]
 800db9e:	2001      	movs	r0, #1
 800dba0:	9000      	str	r0, [sp, #0]
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f002 f9d1 	bl	800ff4a <USBH_BulkSendData>
 800dba8:	e003      	b.n	800dbb2 <USBH_MSC_BOT_Process+0x2c2>
                                  MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	2207      	movs	r2, #7
 800dbae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2202      	movs	r2, #2
 800dbb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	4619      	mov	r1, r3
 800dbca:	f008 fb61 	bl	8016290 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800dbce:	e0db      	b.n	800dd88 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dbd0:	7d3b      	ldrb	r3, [r7, #20]
 800dbd2:	2b02      	cmp	r3, #2
 800dbd4:	d112      	bne.n	800dbfc <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	2205      	movs	r2, #5
 800dbda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	f008 fb4b 	bl	8016290 <osMessagePut>
      break;
 800dbfa:	e0c5      	b.n	800dd88 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 800dbfc:	7d3b      	ldrb	r3, [r7, #20]
 800dbfe:	2b05      	cmp	r3, #5
 800dc00:	f040 80c2 	bne.w	800dd88 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	220a      	movs	r2, #10
 800dc08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2202      	movs	r2, #2
 800dc10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dc20:	2200      	movs	r2, #0
 800dc22:	4619      	mov	r1, r3
 800dc24:	f008 fb34 	bl	8016290 <osMessagePut>
      break;
 800dc28:	e0ae      	b.n	800dd88 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	791b      	ldrb	r3, [r3, #4]
 800dc34:	220d      	movs	r2, #13
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f002 f9ac 	bl	800ff94 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	2208      	movs	r2, #8
 800dc40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800dc44:	e0a9      	b.n	800dd9a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	791b      	ldrb	r3, [r3, #4]
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f00c f81b 	bl	8019c88 <USBH_LL_GetURBState>
 800dc52:	4603      	mov	r3, r0
 800dc54:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800dc56:	7d3b      	ldrb	r3, [r7, #20]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d123      	bne.n	800dca4 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	2201      	movs	r2, #1
 800dc68:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 f8c5 	bl	800ddfc <USBH_MSC_DecodeCSW>
 800dc72:	4603      	mov	r3, r0
 800dc74:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800dc76:	7d7b      	ldrb	r3, [r7, #21]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d102      	bne.n	800dc82 <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	75fb      	strb	r3, [r7, #23]
 800dc80:	e001      	b.n	800dc86 <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 800dc82:	2302      	movs	r3, #2
 800dc84:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2202      	movs	r2, #2
 800dc8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	f008 faf7 	bl	8016290 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800dca2:	e073      	b.n	800dd8c <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 800dca4:	7d3b      	ldrb	r3, [r7, #20]
 800dca6:	2b05      	cmp	r3, #5
 800dca8:	d170      	bne.n	800dd8c <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	2209      	movs	r2, #9
 800dcae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2202      	movs	r2, #2
 800dcb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	4619      	mov	r1, r3
 800dcca:	f008 fae1 	bl	8016290 <osMessagePut>
      break;
 800dcce:	e05d      	b.n	800dd8c <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800dcd0:	78fb      	ldrb	r3, [r7, #3]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f864 	bl	800dda4 <USBH_MSC_BOT_Abort>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800dce0:	7dbb      	ldrb	r3, [r7, #22]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d104      	bne.n	800dcf0 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	2207      	movs	r2, #7
 800dcea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800dcee:	e04f      	b.n	800dd90 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 800dcf0:	7dbb      	ldrb	r3, [r7, #22]
 800dcf2:	2b04      	cmp	r3, #4
 800dcf4:	d14c      	bne.n	800dd90 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	220b      	movs	r2, #11
 800dcfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800dcfe:	e047      	b.n	800dd90 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800dd00:	78fb      	ldrb	r3, [r7, #3]
 800dd02:	2201      	movs	r2, #1
 800dd04:	4619      	mov	r1, r3
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 f84c 	bl	800dda4 <USBH_MSC_BOT_Abort>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800dd10:	7dbb      	ldrb	r3, [r7, #22]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d11d      	bne.n	800dd52 <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	795b      	ldrb	r3, [r3, #5]
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f00c f80d 	bl	8019d3c <USBH_LL_GetToggle>
 800dd22:	4603      	mov	r3, r0
 800dd24:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	7959      	ldrb	r1, [r3, #5]
 800dd2a:	7bfb      	ldrb	r3, [r7, #15]
 800dd2c:	f1c3 0301 	rsb	r3, r3, #1
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	461a      	mov	r2, r3
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f00b ffd1 	bl	8019cdc <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	791b      	ldrb	r3, [r3, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	4619      	mov	r1, r3
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f00b ffca 	bl	8019cdc <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	2209      	movs	r2, #9
 800dd4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800dd50:	e020      	b.n	800dd94 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 800dd52:	7dbb      	ldrb	r3, [r7, #22]
 800dd54:	2b04      	cmp	r3, #4
 800dd56:	d11d      	bne.n	800dd94 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	220b      	movs	r2, #11
 800dd5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800dd60:	e018      	b.n	800dd94 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7ff fd67 	bl	800d836 <USBH_MSC_BOT_REQ_Reset>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800dd6c:	7dfb      	ldrb	r3, [r7, #23]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d112      	bne.n	800dd98 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	2201      	movs	r2, #1
 800dd76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800dd7a:	e00d      	b.n	800dd98 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 800dd7c:	bf00      	nop
 800dd7e:	e00c      	b.n	800dd9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800dd80:	bf00      	nop
 800dd82:	e00a      	b.n	800dd9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800dd84:	bf00      	nop
 800dd86:	e008      	b.n	800dd9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800dd88:	bf00      	nop
 800dd8a:	e006      	b.n	800dd9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800dd8c:	bf00      	nop
 800dd8e:	e004      	b.n	800dd9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800dd90:	bf00      	nop
 800dd92:	e002      	b.n	800dd9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800dd94:	bf00      	nop
 800dd96:	e000      	b.n	800dd9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800dd98:	bf00      	nop
  }
  return status;
 800dd9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3718      	adds	r7, #24
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	460b      	mov	r3, r1
 800ddae:	70fb      	strb	r3, [r7, #3]
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800ddb4:	2302      	movs	r3, #2
 800ddb6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ddbe:	69db      	ldr	r3, [r3, #28]
 800ddc0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800ddc2:	78bb      	ldrb	r3, [r7, #2]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <USBH_MSC_BOT_Abort+0x2a>
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d009      	beq.n	800dde0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800ddcc:	e011      	b.n	800ddf2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	79db      	ldrb	r3, [r3, #7]
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f001 faea 	bl	800f3ae <USBH_ClrFeature>
 800ddda:	4603      	mov	r3, r0
 800dddc:	73fb      	strb	r3, [r7, #15]
      break;
 800ddde:	e008      	b.n	800ddf2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	799b      	ldrb	r3, [r3, #6]
 800dde4:	4619      	mov	r1, r3
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f001 fae1 	bl	800f3ae <USBH_ClrFeature>
 800ddec:	4603      	mov	r3, r0
 800ddee:	73fb      	strb	r3, [r7, #15]
      break;
 800ddf0:	bf00      	nop
  }
  return status;
 800ddf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3710      	adds	r7, #16
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de0a:	69db      	ldr	r3, [r3, #28]
 800de0c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800de0e:	2301      	movs	r3, #1
 800de10:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	791b      	ldrb	r3, [r3, #4]
 800de16:	4619      	mov	r1, r3
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f00b fea3 	bl	8019b64 <USBH_LL_GetLastXferSize>
 800de1e:	4603      	mov	r3, r0
 800de20:	2b0d      	cmp	r3, #13
 800de22:	d002      	beq.n	800de2a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800de24:	2302      	movs	r3, #2
 800de26:	73fb      	strb	r3, [r7, #15]
 800de28:	e024      	b.n	800de74 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de2e:	4a14      	ldr	r2, [pc, #80]	; (800de80 <USBH_MSC_DecodeCSW+0x84>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d11d      	bne.n	800de70 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d119      	bne.n	800de74 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800de46:	2b00      	cmp	r3, #0
 800de48:	d102      	bne.n	800de50 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800de4a:	2300      	movs	r3, #0
 800de4c:	73fb      	strb	r3, [r7, #15]
 800de4e:	e011      	b.n	800de74 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800de56:	2b01      	cmp	r3, #1
 800de58:	d102      	bne.n	800de60 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800de5a:	2301      	movs	r3, #1
 800de5c:	73fb      	strb	r3, [r7, #15]
 800de5e:	e009      	b.n	800de74 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800de66:	2b02      	cmp	r3, #2
 800de68:	d104      	bne.n	800de74 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800de6a:	2302      	movs	r3, #2
 800de6c:	73fb      	strb	r3, [r7, #15]
 800de6e:	e001      	b.n	800de74 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800de70:	2302      	movs	r3, #2
 800de72:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800de74:	7bfb      	ldrb	r3, [r7, #15]
}
 800de76:	4618      	mov	r0, r3
 800de78:	3710      	adds	r7, #16
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	53425355 	.word	0x53425355

0800de84 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	460b      	mov	r3, r1
 800de8e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800de90:	2302      	movs	r3, #2
 800de92:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d002      	beq.n	800deae <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800dea8:	2b02      	cmp	r3, #2
 800deaa:	d021      	beq.n	800def0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800deac:	e028      	b.n	800df00 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	2200      	movs	r2, #0
 800deb2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2200      	movs	r2, #0
 800deb8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	220a      	movs	r2, #10
 800dec0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	3363      	adds	r3, #99	; 0x63
 800dec8:	2210      	movs	r2, #16
 800deca:	2100      	movs	r1, #0
 800decc:	4618      	mov	r0, r3
 800dece:	f00c f801 	bl	8019ed4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	2200      	movs	r2, #0
 800ded6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	2201      	movs	r2, #1
 800dede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	2202      	movs	r2, #2
 800dee6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800deea:	2301      	movs	r3, #1
 800deec:	73fb      	strb	r3, [r7, #15]
      break;
 800deee:	e007      	b.n	800df00 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800def0:	78fb      	ldrb	r3, [r7, #3]
 800def2:	4619      	mov	r1, r3
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7ff fcfb 	bl	800d8f0 <USBH_MSC_BOT_Process>
 800defa:	4603      	mov	r3, r0
 800defc:	73fb      	strb	r3, [r7, #15]
      break;
 800defe:	bf00      	nop
  }

  return error;
 800df00:	7bfb      	ldrb	r3, [r7, #15]
}
 800df02:	4618      	mov	r0, r3
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b086      	sub	sp, #24
 800df0e:	af00      	add	r7, sp, #0
 800df10:	60f8      	str	r0, [r7, #12]
 800df12:	460b      	mov	r3, r1
 800df14:	607a      	str	r2, [r7, #4]
 800df16:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800df18:	2301      	movs	r3, #1
 800df1a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df22:	69db      	ldr	r3, [r3, #28]
 800df24:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d002      	beq.n	800df36 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800df30:	2b02      	cmp	r3, #2
 800df32:	d027      	beq.n	800df84 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800df34:	e05f      	b.n	800dff6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	2208      	movs	r2, #8
 800df3a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	2280      	movs	r2, #128	; 0x80
 800df40:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	220a      	movs	r2, #10
 800df48:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	3363      	adds	r3, #99	; 0x63
 800df50:	2210      	movs	r2, #16
 800df52:	2100      	movs	r1, #0
 800df54:	4618      	mov	r0, r3
 800df56:	f00b ffbd 	bl	8019ed4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	2225      	movs	r2, #37	; 0x25
 800df5e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	2201      	movs	r2, #1
 800df66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	2202      	movs	r2, #2
 800df6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	f103 0210 	add.w	r2, r3, #16
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800df7e:	2301      	movs	r3, #1
 800df80:	75fb      	strb	r3, [r7, #23]
      break;
 800df82:	e038      	b.n	800dff6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800df84:	7afb      	ldrb	r3, [r7, #11]
 800df86:	4619      	mov	r1, r3
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f7ff fcb1 	bl	800d8f0 <USBH_MSC_BOT_Process>
 800df8e:	4603      	mov	r3, r0
 800df90:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800df92:	7dfb      	ldrb	r3, [r7, #23]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d12d      	bne.n	800dff4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df9e:	3303      	adds	r3, #3
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfaa:	3302      	adds	r3, #2
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	021b      	lsls	r3, r3, #8
 800dfb0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfb8:	3301      	adds	r3, #1
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800dfbe:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	061b      	lsls	r3, r3, #24
 800dfca:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfd6:	3307      	adds	r3, #7
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfe2:	3306      	adds	r3, #6
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	021b      	lsls	r3, r3, #8
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	4313      	orrs	r3, r2
 800dfee:	b29a      	uxth	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	809a      	strh	r2, [r3, #4]
      break;
 800dff4:	bf00      	nop
  }

  return error;
 800dff6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3718      	adds	r7, #24
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b086      	sub	sp, #24
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	460b      	mov	r3, r1
 800e00a:	607a      	str	r2, [r7, #4]
 800e00c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800e00e:	2302      	movs	r3, #2
 800e010:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e018:	69db      	ldr	r3, [r3, #28]
 800e01a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e022:	2b01      	cmp	r3, #1
 800e024:	d002      	beq.n	800e02c <USBH_MSC_SCSI_Inquiry+0x2c>
 800e026:	2b02      	cmp	r3, #2
 800e028:	d03d      	beq.n	800e0a6 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800e02a:	e089      	b.n	800e140 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	2224      	movs	r2, #36	; 0x24
 800e030:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	2280      	movs	r2, #128	; 0x80
 800e036:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	220a      	movs	r2, #10
 800e03e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	3363      	adds	r3, #99	; 0x63
 800e046:	220a      	movs	r2, #10
 800e048:	2100      	movs	r1, #0
 800e04a:	4618      	mov	r0, r3
 800e04c:	f00b ff42 	bl	8019ed4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	2212      	movs	r2, #18
 800e054:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800e058:	7afb      	ldrb	r3, [r7, #11]
 800e05a:	015b      	lsls	r3, r3, #5
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	2200      	movs	r2, #0
 800e068:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	2200      	movs	r2, #0
 800e070:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	2224      	movs	r2, #36	; 0x24
 800e078:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	2200      	movs	r2, #0
 800e080:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	2201      	movs	r2, #1
 800e088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	2202      	movs	r2, #2
 800e090:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	f103 0210 	add.w	r2, r3, #16
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	75fb      	strb	r3, [r7, #23]
      break;
 800e0a4:	e04c      	b.n	800e140 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e0a6:	7afb      	ldrb	r3, [r7, #11]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f7ff fc20 	bl	800d8f0 <USBH_MSC_BOT_Process>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800e0b4:	7dfb      	ldrb	r3, [r7, #23]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d141      	bne.n	800e13e <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800e0ba:	2222      	movs	r2, #34	; 0x22
 800e0bc:	2100      	movs	r1, #0
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f00b ff08 	bl	8019ed4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	f003 031f 	and.w	r3, r3, #31
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	095b      	lsrs	r3, r3, #5
 800e0e0:	b2da      	uxtb	r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	b25b      	sxtb	r3, r3
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	da03      	bge.n	800e0fe <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	709a      	strb	r2, [r3, #2]
 800e0fc:	e002      	b.n	800e104 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	1cd8      	adds	r0, r3, #3
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e10e:	3308      	adds	r3, #8
 800e110:	2208      	movs	r2, #8
 800e112:	4619      	mov	r1, r3
 800e114:	f00b fed0 	bl	8019eb8 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f103 000c 	add.w	r0, r3, #12
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e124:	3310      	adds	r3, #16
 800e126:	2210      	movs	r2, #16
 800e128:	4619      	mov	r1, r3
 800e12a:	f00b fec5 	bl	8019eb8 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	331d      	adds	r3, #29
 800e132:	693a      	ldr	r2, [r7, #16]
 800e134:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800e138:	3220      	adds	r2, #32
 800e13a:	6812      	ldr	r2, [r2, #0]
 800e13c:	601a      	str	r2, [r3, #0]
      break;
 800e13e:	bf00      	nop
  }

  return error;
 800e140:	7dfb      	ldrb	r3, [r7, #23]
}
 800e142:	4618      	mov	r0, r3
 800e144:	3718      	adds	r7, #24
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b086      	sub	sp, #24
 800e14e:	af00      	add	r7, sp, #0
 800e150:	60f8      	str	r0, [r7, #12]
 800e152:	460b      	mov	r3, r1
 800e154:	607a      	str	r2, [r7, #4]
 800e156:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e158:	2302      	movs	r3, #2
 800e15a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e162:	69db      	ldr	r3, [r3, #28]
 800e164:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d002      	beq.n	800e176 <USBH_MSC_SCSI_RequestSense+0x2c>
 800e170:	2b02      	cmp	r3, #2
 800e172:	d03d      	beq.n	800e1f0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800e174:	e05d      	b.n	800e232 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	220e      	movs	r2, #14
 800e17a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	2280      	movs	r2, #128	; 0x80
 800e180:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	220a      	movs	r2, #10
 800e188:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	3363      	adds	r3, #99	; 0x63
 800e190:	2210      	movs	r2, #16
 800e192:	2100      	movs	r1, #0
 800e194:	4618      	mov	r0, r3
 800e196:	f00b fe9d 	bl	8019ed4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	2203      	movs	r2, #3
 800e19e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800e1a2:	7afb      	ldrb	r3, [r7, #11]
 800e1a4:	015b      	lsls	r3, r3, #5
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	220e      	movs	r2, #14
 800e1c2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	2202      	movs	r2, #2
 800e1da:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	f103 0210 	add.w	r2, r3, #16
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	75fb      	strb	r3, [r7, #23]
      break;
 800e1ee:	e020      	b.n	800e232 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e1f0:	7afb      	ldrb	r3, [r7, #11]
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f7ff fb7b 	bl	800d8f0 <USBH_MSC_BOT_Process>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800e1fe:	7dfb      	ldrb	r3, [r7, #23]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d115      	bne.n	800e230 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e20a:	3302      	adds	r3, #2
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	f003 030f 	and.w	r3, r3, #15
 800e212:	b2da      	uxtb	r2, r3
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e21e:	7b1a      	ldrb	r2, [r3, #12]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e22a:	7b5a      	ldrb	r2, [r3, #13]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	709a      	strb	r2, [r3, #2]
      break;
 800e230:	bf00      	nop
  }

  return error;
 800e232:	7dfb      	ldrb	r3, [r7, #23]
}
 800e234:	4618      	mov	r0, r3
 800e236:	3718      	adds	r7, #24
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b086      	sub	sp, #24
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	607a      	str	r2, [r7, #4]
 800e246:	603b      	str	r3, [r7, #0]
 800e248:	460b      	mov	r3, r1
 800e24a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e24c:	2302      	movs	r3, #2
 800e24e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e256:	69db      	ldr	r3, [r3, #28]
 800e258:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e260:	2b01      	cmp	r3, #1
 800e262:	d002      	beq.n	800e26a <USBH_MSC_SCSI_Write+0x2e>
 800e264:	2b02      	cmp	r3, #2
 800e266:	d047      	beq.n	800e2f8 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800e268:	e04e      	b.n	800e308 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e270:	461a      	mov	r2, r3
 800e272:	6a3b      	ldr	r3, [r7, #32]
 800e274:	fb03 f202 	mul.w	r2, r3, r2
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	2200      	movs	r2, #0
 800e280:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	220a      	movs	r2, #10
 800e288:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	3363      	adds	r3, #99	; 0x63
 800e290:	2210      	movs	r2, #16
 800e292:	2100      	movs	r1, #0
 800e294:	4618      	mov	r0, r3
 800e296:	f00b fe1d 	bl	8019ed4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	222a      	movs	r2, #42	; 0x2a
 800e29e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800e2a2:	79fa      	ldrb	r2, [r7, #7]
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800e2aa:	79ba      	ldrb	r2, [r7, #6]
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800e2b2:	797a      	ldrb	r2, [r7, #5]
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800e2ba:	1d3b      	adds	r3, r7, #4
 800e2bc:	781a      	ldrb	r2, [r3, #0]
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800e2c4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800e2ce:	f107 0320 	add.w	r3, r7, #32
 800e2d2:	781a      	ldrb	r2, [r3, #0]
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	2202      	movs	r2, #2
 800e2e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	683a      	ldr	r2, [r7, #0]
 800e2ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	75fb      	strb	r3, [r7, #23]
      break;
 800e2f6:	e007      	b.n	800e308 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e2f8:	7afb      	ldrb	r3, [r7, #11]
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f7ff faf7 	bl	800d8f0 <USBH_MSC_BOT_Process>
 800e302:	4603      	mov	r3, r0
 800e304:	75fb      	strb	r3, [r7, #23]
      break;
 800e306:	bf00      	nop
  }

  return error;
 800e308:	7dfb      	ldrb	r3, [r7, #23]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3718      	adds	r7, #24
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800e312:	b580      	push	{r7, lr}
 800e314:	b086      	sub	sp, #24
 800e316:	af00      	add	r7, sp, #0
 800e318:	60f8      	str	r0, [r7, #12]
 800e31a:	607a      	str	r2, [r7, #4]
 800e31c:	603b      	str	r3, [r7, #0]
 800e31e:	460b      	mov	r3, r1
 800e320:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e322:	2302      	movs	r3, #2
 800e324:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e32c:	69db      	ldr	r3, [r3, #28]
 800e32e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e336:	2b01      	cmp	r3, #1
 800e338:	d002      	beq.n	800e340 <USBH_MSC_SCSI_Read+0x2e>
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	d047      	beq.n	800e3ce <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800e33e:	e04e      	b.n	800e3de <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e346:	461a      	mov	r2, r3
 800e348:	6a3b      	ldr	r3, [r7, #32]
 800e34a:	fb03 f202 	mul.w	r2, r3, r2
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	2280      	movs	r2, #128	; 0x80
 800e356:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	220a      	movs	r2, #10
 800e35e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	3363      	adds	r3, #99	; 0x63
 800e366:	2210      	movs	r2, #16
 800e368:	2100      	movs	r1, #0
 800e36a:	4618      	mov	r0, r3
 800e36c:	f00b fdb2 	bl	8019ed4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	2228      	movs	r2, #40	; 0x28
 800e374:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800e378:	79fa      	ldrb	r2, [r7, #7]
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800e380:	79ba      	ldrb	r2, [r7, #6]
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800e388:	797a      	ldrb	r2, [r7, #5]
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800e390:	1d3b      	adds	r3, r7, #4
 800e392:	781a      	ldrb	r2, [r3, #0]
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800e39a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800e3a4:	f107 0320 	add.w	r3, r7, #32
 800e3a8:	781a      	ldrb	r2, [r3, #0]
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	2202      	movs	r2, #2
 800e3bc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	683a      	ldr	r2, [r7, #0]
 800e3c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	75fb      	strb	r3, [r7, #23]
      break;
 800e3cc:	e007      	b.n	800e3de <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e3ce:	7afb      	ldrb	r3, [r7, #11]
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f7ff fa8c 	bl	800d8f0 <USBH_MSC_BOT_Process>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	75fb      	strb	r3, [r7, #23]
      break;
 800e3dc:	bf00      	nop
  }

  return error;
 800e3de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3718      	adds	r7, #24
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800e3e8:	b5b0      	push	{r4, r5, r7, lr}
 800e3ea:	b090      	sub	sp, #64	; 0x40
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d101      	bne.n	800e400 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e3fc:	2302      	movs	r3, #2
 800e3fe:	e04d      	b.n	800e49c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	79fa      	ldrb	r2, [r7, #7]
 800e404:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2200      	movs	r2, #0
 800e40c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2200      	movs	r2, #0
 800e414:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800e418:	68f8      	ldr	r0, [r7, #12]
 800e41a:	f000 f847 	bl	800e4ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2200      	movs	r2, #0
 800e42a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2200      	movs	r2, #0
 800e43a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d003      	beq.n	800e44c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	68ba      	ldr	r2, [r7, #8]
 800e448:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800e44c:	4b15      	ldr	r3, [pc, #84]	; (800e4a4 <USBH_Init+0xbc>)
 800e44e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800e458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e45c:	2100      	movs	r1, #0
 800e45e:	4618      	mov	r0, r3
 800e460:	f007 feee 	bl	8016240 <osMessageCreate>
 800e464:	4602      	mov	r2, r0
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800e46c:	4b0e      	ldr	r3, [pc, #56]	; (800e4a8 <USBH_Init+0xc0>)
 800e46e:	f107 0414 	add.w	r4, r7, #20
 800e472:	461d      	mov	r5, r3
 800e474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e478:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e47c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800e480:	f107 0314 	add.w	r3, r7, #20
 800e484:	68f9      	ldr	r1, [r7, #12]
 800e486:	4618      	mov	r0, r3
 800e488:	f007 fcdf 	bl	8015e4a <osThreadCreate>
 800e48c:	4602      	mov	r2, r0
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f00b faab 	bl	80199f0 <USBH_LL_Init>

  return USBH_OK;
 800e49a:	2300      	movs	r3, #0
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3740      	adds	r7, #64	; 0x40
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bdb0      	pop	{r4, r5, r7, pc}
 800e4a4:	0801b7a0 	.word	0x0801b7a0
 800e4a8:	0801b7b0 	.word	0x0801b7b0

0800e4ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b085      	sub	sp, #20
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	60fb      	str	r3, [r7, #12]
 800e4bc:	e009      	b.n	800e4d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	33e0      	adds	r3, #224	; 0xe0
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	4413      	add	r3, r2
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	60fb      	str	r3, [r7, #12]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2b0f      	cmp	r3, #15
 800e4d6:	d9f2      	bls.n	800e4be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e4d8:	2300      	movs	r3, #0
 800e4da:	60fb      	str	r3, [r7, #12]
 800e4dc:	e009      	b.n	800e4f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	60fb      	str	r3, [r7, #12]
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4f8:	d3f1      	bcc.n	800e4de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2201      	movs	r2, #1
 800e50a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2201      	movs	r2, #1
 800e518:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2240      	movs	r2, #64	; 0x40
 800e51e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2201      	movs	r2, #1
 800e532:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e546:	2300      	movs	r3, #0
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3714      	adds	r7, #20
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e55e:	2300      	movs	r3, #0
 800e560:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d016      	beq.n	800e596 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d10e      	bne.n	800e590 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e578:	1c59      	adds	r1, r3, #1
 800e57a:	687a      	ldr	r2, [r7, #4]
 800e57c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	33de      	adds	r3, #222	; 0xde
 800e584:	6839      	ldr	r1, [r7, #0]
 800e586:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e58a:	2300      	movs	r3, #0
 800e58c:	73fb      	strb	r3, [r7, #15]
 800e58e:	e004      	b.n	800e59a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e590:	2302      	movs	r3, #2
 800e592:	73fb      	strb	r3, [r7, #15]
 800e594:	e001      	b.n	800e59a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e596:	2302      	movs	r3, #2
 800e598:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3714      	adds	r7, #20
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e5be:	78fa      	ldrb	r2, [r7, #3]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d204      	bcs.n	800e5ce <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	78fa      	ldrb	r2, [r7, #3]
 800e5c8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e5cc:	e001      	b.n	800e5d2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e5ce:	2302      	movs	r3, #2
 800e5d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3714      	adds	r7, #20
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr

0800e5e0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b087      	sub	sp, #28
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	4608      	mov	r0, r1
 800e5ea:	4611      	mov	r1, r2
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	70fb      	strb	r3, [r7, #3]
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	70bb      	strb	r3, [r7, #2]
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e5fe:	2300      	movs	r3, #0
 800e600:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e608:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e60a:	e025      	b.n	800e658 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e60c:	7dfb      	ldrb	r3, [r7, #23]
 800e60e:	221a      	movs	r2, #26
 800e610:	fb02 f303 	mul.w	r3, r2, r3
 800e614:	3308      	adds	r3, #8
 800e616:	68fa      	ldr	r2, [r7, #12]
 800e618:	4413      	add	r3, r2
 800e61a:	3302      	adds	r3, #2
 800e61c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	795b      	ldrb	r3, [r3, #5]
 800e622:	78fa      	ldrb	r2, [r7, #3]
 800e624:	429a      	cmp	r2, r3
 800e626:	d002      	beq.n	800e62e <USBH_FindInterface+0x4e>
 800e628:	78fb      	ldrb	r3, [r7, #3]
 800e62a:	2bff      	cmp	r3, #255	; 0xff
 800e62c:	d111      	bne.n	800e652 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e632:	78ba      	ldrb	r2, [r7, #2]
 800e634:	429a      	cmp	r2, r3
 800e636:	d002      	beq.n	800e63e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e638:	78bb      	ldrb	r3, [r7, #2]
 800e63a:	2bff      	cmp	r3, #255	; 0xff
 800e63c:	d109      	bne.n	800e652 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e642:	787a      	ldrb	r2, [r7, #1]
 800e644:	429a      	cmp	r2, r3
 800e646:	d002      	beq.n	800e64e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e648:	787b      	ldrb	r3, [r7, #1]
 800e64a:	2bff      	cmp	r3, #255	; 0xff
 800e64c:	d101      	bne.n	800e652 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e64e:	7dfb      	ldrb	r3, [r7, #23]
 800e650:	e006      	b.n	800e660 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e652:	7dfb      	ldrb	r3, [r7, #23]
 800e654:	3301      	adds	r3, #1
 800e656:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e658:	7dfb      	ldrb	r3, [r7, #23]
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d9d6      	bls.n	800e60c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e65e:	23ff      	movs	r3, #255	; 0xff
}
 800e660:	4618      	mov	r0, r3
 800e662:	371c      	adds	r7, #28
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f00b f9fd 	bl	8019a74 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800e67a:	2101      	movs	r1, #1
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f00b fb16 	bl	8019cae <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b088      	sub	sp, #32
 800e690:	af04      	add	r7, sp, #16
 800e692:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e694:	2302      	movs	r3, #2
 800e696:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e698:	2300      	movs	r3, #0
 800e69a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d102      	bne.n	800e6ae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2203      	movs	r2, #3
 800e6ac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	2b0b      	cmp	r3, #11
 800e6b6:	f200 8247 	bhi.w	800eb48 <USBH_Process+0x4bc>
 800e6ba:	a201      	add	r2, pc, #4	; (adr r2, 800e6c0 <USBH_Process+0x34>)
 800e6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c0:	0800e6f1 	.word	0x0800e6f1
 800e6c4:	0800e73f 	.word	0x0800e73f
 800e6c8:	0800e7c3 	.word	0x0800e7c3
 800e6cc:	0800eac7 	.word	0x0800eac7
 800e6d0:	0800eb49 	.word	0x0800eb49
 800e6d4:	0800e883 	.word	0x0800e883
 800e6d8:	0800ea51 	.word	0x0800ea51
 800e6dc:	0800e8d5 	.word	0x0800e8d5
 800e6e0:	0800e911 	.word	0x0800e911
 800e6e4:	0800e94b 	.word	0x0800e94b
 800e6e8:	0800e9a9 	.word	0x0800e9a9
 800e6ec:	0800eaaf 	.word	0x0800eaaf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f000 8227 	beq.w	800eb4c <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2201      	movs	r2, #1
 800e702:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e704:	20c8      	movs	r0, #200	; 0xc8
 800e706:	f00b fb49 	bl	8019d9c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f00b fa0f 	bl	8019b2e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2200      	movs	r2, #0
 800e714:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2201      	movs	r2, #1
 800e724:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e734:	2200      	movs	r2, #0
 800e736:	4619      	mov	r1, r3
 800e738:	f007 fdaa 	bl	8016290 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e73c:	e206      	b.n	800eb4c <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e744:	2b01      	cmp	r3, #1
 800e746:	d107      	bne.n	800e758 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2202      	movs	r2, #2
 800e754:	701a      	strb	r2, [r3, #0]
 800e756:	e025      	b.n	800e7a4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e75e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e762:	d914      	bls.n	800e78e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e76a:	3301      	adds	r3, #1
 800e76c:	b2da      	uxtb	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e77a:	2b03      	cmp	r3, #3
 800e77c:	d903      	bls.n	800e786 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	220d      	movs	r2, #13
 800e782:	701a      	strb	r2, [r3, #0]
 800e784:	e00e      	b.n	800e7a4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2200      	movs	r2, #0
 800e78a:	701a      	strb	r2, [r3, #0]
 800e78c:	e00a      	b.n	800e7a4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e794:	f103 020a 	add.w	r2, r3, #10
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e79e:	200a      	movs	r0, #10
 800e7a0:	f00b fafc 	bl	8019d9c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	f007 fd68 	bl	8016290 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e7c0:	e1cb      	b.n	800eb5a <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d005      	beq.n	800e7d8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7d2:	2104      	movs	r1, #4
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e7d8:	2064      	movs	r0, #100	; 0x64
 800e7da:	f00b fadf 	bl	8019d9c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f00b f97e 	bl	8019ae0 <USBH_LL_GetSpeed>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2205      	movs	r2, #5
 800e7f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f001 fc19 	bl	801002e <USBH_AllocPipe>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	461a      	mov	r2, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e804:	2180      	movs	r1, #128	; 0x80
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f001 fc11 	bl	801002e <USBH_AllocPipe>
 800e80c:	4603      	mov	r3, r0
 800e80e:	461a      	mov	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	7919      	ldrb	r1, [r3, #4]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e828:	b292      	uxth	r2, r2
 800e82a:	9202      	str	r2, [sp, #8]
 800e82c:	2200      	movs	r2, #0
 800e82e:	9201      	str	r2, [sp, #4]
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	4603      	mov	r3, r0
 800e834:	2280      	movs	r2, #128	; 0x80
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f001 fbca 	bl	800ffd0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	7959      	ldrb	r1, [r3, #5]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e850:	b292      	uxth	r2, r2
 800e852:	9202      	str	r2, [sp, #8]
 800e854:	2200      	movs	r2, #0
 800e856:	9201      	str	r2, [sp, #4]
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	4603      	mov	r3, r0
 800e85c:	2200      	movs	r2, #0
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f001 fbb6 	bl	800ffd0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2201      	movs	r2, #1
 800e868:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e878:	2200      	movs	r2, #0
 800e87a:	4619      	mov	r1, r3
 800e87c:	f007 fd08 	bl	8016290 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e880:	e16b      	b.n	800eb5a <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f96e 	bl	800eb64 <USBH_HandleEnum>
 800e888:	4603      	mov	r3, r0
 800e88a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e88c:	7bbb      	ldrb	r3, [r7, #14]
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	2b00      	cmp	r3, #0
 800e892:	f040 815d 	bne.w	800eb50 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d103      	bne.n	800e8b0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2208      	movs	r2, #8
 800e8ac:	701a      	strb	r2, [r3, #0]
 800e8ae:	e002      	b.n	800e8b6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2207      	movs	r2, #7
 800e8b4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2205      	movs	r2, #5
 800e8ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	f007 fcdf 	bl	8016290 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e8d2:	e13d      	b.n	800eb50 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	f000 813a 	beq.w	800eb54 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e8e6:	2101      	movs	r1, #1
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2208      	movs	r2, #8
 800e8f0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2205      	movs	r2, #5
 800e8f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e906:	2200      	movs	r2, #0
 800e908:	4619      	mov	r1, r3
 800e90a:	f007 fcc1 	bl	8016290 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800e90e:	e121      	b.n	800eb54 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e916:	b29b      	uxth	r3, r3
 800e918:	4619      	mov	r1, r3
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 fd00 	bl	800f320 <USBH_SetCfg>
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d102      	bne.n	800e92c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2209      	movs	r2, #9
 800e92a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e940:	2200      	movs	r2, #0
 800e942:	4619      	mov	r1, r3
 800e944:	f007 fca4 	bl	8016290 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e948:	e107      	b.n	800eb5a <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e950:	f003 0320 	and.w	r3, r3, #32
 800e954:	2b00      	cmp	r3, #0
 800e956:	d015      	beq.n	800e984 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800e958:	2101      	movs	r1, #1
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f000 fd03 	bl	800f366 <USBH_SetFeature>
 800e960:	4603      	mov	r3, r0
 800e962:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e964:	7bbb      	ldrb	r3, [r7, #14]
 800e966:	b2db      	uxtb	r3, r3
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d103      	bne.n	800e974 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	220a      	movs	r2, #10
 800e970:	701a      	strb	r2, [r3, #0]
 800e972:	e00a      	b.n	800e98a <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800e974:	7bbb      	ldrb	r3, [r7, #14]
 800e976:	b2db      	uxtb	r3, r3
 800e978:	2b03      	cmp	r3, #3
 800e97a:	d106      	bne.n	800e98a <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	220a      	movs	r2, #10
 800e980:	701a      	strb	r2, [r3, #0]
 800e982:	e002      	b.n	800e98a <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	220a      	movs	r2, #10
 800e988:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2201      	movs	r2, #1
 800e98e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e99e:	2200      	movs	r2, #0
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	f007 fc75 	bl	8016290 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e9a6:	e0d8      	b.n	800eb5a <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d03f      	beq.n	800ea32 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	73fb      	strb	r3, [r7, #15]
 800e9be:	e016      	b.n	800e9ee <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e9c0:	7bfa      	ldrb	r2, [r7, #15]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	32de      	adds	r2, #222	; 0xde
 800e9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9ca:	791a      	ldrb	r2, [r3, #4]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d108      	bne.n	800e9e8 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e9d6:	7bfa      	ldrb	r2, [r7, #15]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	32de      	adds	r2, #222	; 0xde
 800e9dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e9e6:	e005      	b.n	800e9f4 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e9e8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	73fb      	strb	r3, [r7, #15]
 800e9ee:	7bfb      	ldrb	r3, [r7, #15]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d0e5      	beq.n	800e9c0 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d016      	beq.n	800ea2c <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	4798      	blx	r3
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d109      	bne.n	800ea24 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2206      	movs	r2, #6
 800ea14:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ea1c:	2103      	movs	r1, #3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	4798      	blx	r3
 800ea22:	e006      	b.n	800ea32 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	220d      	movs	r2, #13
 800ea28:	701a      	strb	r2, [r3, #0]
 800ea2a:	e002      	b.n	800ea32 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	220d      	movs	r2, #13
 800ea30:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2205      	movs	r2, #5
 800ea36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ea46:	2200      	movs	r2, #0
 800ea48:	4619      	mov	r1, r3
 800ea4a:	f007 fc21 	bl	8016290 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ea4e:	e084      	b.n	800eb5a <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d017      	beq.n	800ea8a <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea60:	691b      	ldr	r3, [r3, #16]
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	4798      	blx	r3
 800ea66:	4603      	mov	r3, r0
 800ea68:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ea6a:	7bbb      	ldrb	r3, [r7, #14]
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d103      	bne.n	800ea7a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	220b      	movs	r2, #11
 800ea76:	701a      	strb	r2, [r3, #0]
 800ea78:	e00a      	b.n	800ea90 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800ea7a:	7bbb      	ldrb	r3, [r7, #14]
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	2b02      	cmp	r3, #2
 800ea80:	d106      	bne.n	800ea90 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	220d      	movs	r2, #13
 800ea86:	701a      	strb	r2, [r3, #0]
 800ea88:	e002      	b.n	800ea90 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	220d      	movs	r2, #13
 800ea8e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2205      	movs	r2, #5
 800ea94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	f007 fbf2 	bl	8016290 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800eaac:	e055      	b.n	800eb5a <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d04f      	beq.n	800eb58 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eabe:	695b      	ldr	r3, [r3, #20]
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	4798      	blx	r3
      }
      break;
 800eac4:	e048      	b.n	800eb58 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7ff fcec 	bl	800e4ac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d009      	beq.n	800eaf2 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2200      	movs	r2, #0
 800eaee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d005      	beq.n	800eb08 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb02:	2105      	movs	r1, #5
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d107      	bne.n	800eb24 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f7ff fda5 	bl	800e66c <USBH_Start>
 800eb22:	e002      	b.n	800eb2a <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f00a ffa5 	bl	8019a74 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eb3e:	2200      	movs	r2, #0
 800eb40:	4619      	mov	r1, r3
 800eb42:	f007 fba5 	bl	8016290 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800eb46:	e008      	b.n	800eb5a <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800eb48:	bf00      	nop
 800eb4a:	e006      	b.n	800eb5a <USBH_Process+0x4ce>
      break;
 800eb4c:	bf00      	nop
 800eb4e:	e004      	b.n	800eb5a <USBH_Process+0x4ce>
      break;
 800eb50:	bf00      	nop
 800eb52:	e002      	b.n	800eb5a <USBH_Process+0x4ce>
    break;
 800eb54:	bf00      	nop
 800eb56:	e000      	b.n	800eb5a <USBH_Process+0x4ce>
      break;
 800eb58:	bf00      	nop
  }
  return USBH_OK;
 800eb5a:	2300      	movs	r3, #0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3710      	adds	r7, #16
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b088      	sub	sp, #32
 800eb68:	af04      	add	r7, sp, #16
 800eb6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800eb70:	2301      	movs	r3, #1
 800eb72:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	785b      	ldrb	r3, [r3, #1]
 800eb78:	2b07      	cmp	r3, #7
 800eb7a:	f200 8208 	bhi.w	800ef8e <USBH_HandleEnum+0x42a>
 800eb7e:	a201      	add	r2, pc, #4	; (adr r2, 800eb84 <USBH_HandleEnum+0x20>)
 800eb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb84:	0800eba5 	.word	0x0800eba5
 800eb88:	0800ec63 	.word	0x0800ec63
 800eb8c:	0800eccd 	.word	0x0800eccd
 800eb90:	0800ed5b 	.word	0x0800ed5b
 800eb94:	0800edc5 	.word	0x0800edc5
 800eb98:	0800ee35 	.word	0x0800ee35
 800eb9c:	0800eed1 	.word	0x0800eed1
 800eba0:	0800ef4f 	.word	0x0800ef4f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800eba4:	2108      	movs	r1, #8
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 faea 	bl	800f180 <USBH_Get_DevDesc>
 800ebac:	4603      	mov	r3, r0
 800ebae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ebb0:	7bbb      	ldrb	r3, [r7, #14]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d130      	bne.n	800ec18 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	7919      	ldrb	r1, [r3, #4]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ebda:	b292      	uxth	r2, r2
 800ebdc:	9202      	str	r2, [sp, #8]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	9201      	str	r2, [sp, #4]
 800ebe2:	9300      	str	r3, [sp, #0]
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2280      	movs	r2, #128	; 0x80
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f001 f9f1 	bl	800ffd0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	7959      	ldrb	r1, [r3, #5]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ec02:	b292      	uxth	r2, r2
 800ec04:	9202      	str	r2, [sp, #8]
 800ec06:	2200      	movs	r2, #0
 800ec08:	9201      	str	r2, [sp, #4]
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2200      	movs	r2, #0
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f001 f9dd 	bl	800ffd0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ec16:	e1bc      	b.n	800ef92 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ec18:	7bbb      	ldrb	r3, [r7, #14]
 800ec1a:	2b03      	cmp	r3, #3
 800ec1c:	f040 81b9 	bne.w	800ef92 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec26:	3301      	adds	r3, #1
 800ec28:	b2da      	uxtb	r2, r3
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec36:	2b03      	cmp	r3, #3
 800ec38:	d903      	bls.n	800ec42 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	220d      	movs	r2, #13
 800ec3e:	701a      	strb	r2, [r3, #0]
      break;
 800ec40:	e1a7      	b.n	800ef92 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	795b      	ldrb	r3, [r3, #5]
 800ec46:	4619      	mov	r1, r3
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f001 fa11 	bl	8010070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	791b      	ldrb	r3, [r3, #4]
 800ec52:	4619      	mov	r1, r3
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f001 fa0b 	bl	8010070 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	701a      	strb	r2, [r3, #0]
      break;
 800ec60:	e197      	b.n	800ef92 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ec62:	2112      	movs	r1, #18
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 fa8b 	bl	800f180 <USBH_Get_DevDesc>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ec6e:	7bbb      	ldrb	r3, [r7, #14]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d103      	bne.n	800ec7c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2202      	movs	r2, #2
 800ec78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ec7a:	e18c      	b.n	800ef96 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ec7c:	7bbb      	ldrb	r3, [r7, #14]
 800ec7e:	2b03      	cmp	r3, #3
 800ec80:	f040 8189 	bne.w	800ef96 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	b2da      	uxtb	r2, r3
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec9a:	2b03      	cmp	r3, #3
 800ec9c:	d903      	bls.n	800eca6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	220d      	movs	r2, #13
 800eca2:	701a      	strb	r2, [r3, #0]
      break;
 800eca4:	e177      	b.n	800ef96 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	795b      	ldrb	r3, [r3, #5]
 800ecaa:	4619      	mov	r1, r3
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f001 f9df 	bl	8010070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	791b      	ldrb	r3, [r3, #4]
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f001 f9d9 	bl	8010070 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	701a      	strb	r2, [r3, #0]
      break;
 800ecca:	e164      	b.n	800ef96 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800eccc:	2101      	movs	r1, #1
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 fb02 	bl	800f2d8 <USBH_SetAddress>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ecd8:	7bbb      	ldrb	r3, [r7, #14]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d132      	bne.n	800ed44 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ecde:	2002      	movs	r0, #2
 800ece0:	f00b f85c 	bl	8019d9c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2201      	movs	r2, #1
 800ece8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2203      	movs	r2, #3
 800ecf0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	7919      	ldrb	r1, [r3, #4]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ed06:	b292      	uxth	r2, r2
 800ed08:	9202      	str	r2, [sp, #8]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	9201      	str	r2, [sp, #4]
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	4603      	mov	r3, r0
 800ed12:	2280      	movs	r2, #128	; 0x80
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f001 f95b 	bl	800ffd0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	7959      	ldrb	r1, [r3, #5]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ed2e:	b292      	uxth	r2, r2
 800ed30:	9202      	str	r2, [sp, #8]
 800ed32:	2200      	movs	r2, #0
 800ed34:	9201      	str	r2, [sp, #4]
 800ed36:	9300      	str	r3, [sp, #0]
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f001 f947 	bl	800ffd0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ed42:	e12a      	b.n	800ef9a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ed44:	7bbb      	ldrb	r3, [r7, #14]
 800ed46:	2b03      	cmp	r3, #3
 800ed48:	f040 8127 	bne.w	800ef9a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	220d      	movs	r2, #13
 800ed50:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2200      	movs	r2, #0
 800ed56:	705a      	strb	r2, [r3, #1]
      break;
 800ed58:	e11f      	b.n	800ef9a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ed5a:	2109      	movs	r1, #9
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f000 fa37 	bl	800f1d0 <USBH_Get_CfgDesc>
 800ed62:	4603      	mov	r3, r0
 800ed64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ed66:	7bbb      	ldrb	r3, [r7, #14]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d103      	bne.n	800ed74 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2204      	movs	r2, #4
 800ed70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ed72:	e114      	b.n	800ef9e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ed74:	7bbb      	ldrb	r3, [r7, #14]
 800ed76:	2b03      	cmp	r3, #3
 800ed78:	f040 8111 	bne.w	800ef9e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ed82:	3301      	adds	r3, #1
 800ed84:	b2da      	uxtb	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ed92:	2b03      	cmp	r3, #3
 800ed94:	d903      	bls.n	800ed9e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	220d      	movs	r2, #13
 800ed9a:	701a      	strb	r2, [r3, #0]
      break;
 800ed9c:	e0ff      	b.n	800ef9e <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	795b      	ldrb	r3, [r3, #5]
 800eda2:	4619      	mov	r1, r3
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f001 f963 	bl	8010070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	791b      	ldrb	r3, [r3, #4]
 800edae:	4619      	mov	r1, r3
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f001 f95d 	bl	8010070 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	701a      	strb	r2, [r3, #0]
      break;
 800edc2:	e0ec      	b.n	800ef9e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800edca:	4619      	mov	r1, r3
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 f9ff 	bl	800f1d0 <USBH_Get_CfgDesc>
 800edd2:	4603      	mov	r3, r0
 800edd4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800edd6:	7bbb      	ldrb	r3, [r7, #14]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d103      	bne.n	800ede4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2205      	movs	r2, #5
 800ede0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ede2:	e0de      	b.n	800efa2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ede4:	7bbb      	ldrb	r3, [r7, #14]
 800ede6:	2b03      	cmp	r3, #3
 800ede8:	f040 80db 	bne.w	800efa2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800edf2:	3301      	adds	r3, #1
 800edf4:	b2da      	uxtb	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee02:	2b03      	cmp	r3, #3
 800ee04:	d903      	bls.n	800ee0e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	220d      	movs	r2, #13
 800ee0a:	701a      	strb	r2, [r3, #0]
      break;
 800ee0c:	e0c9      	b.n	800efa2 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	795b      	ldrb	r3, [r3, #5]
 800ee12:	4619      	mov	r1, r3
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f001 f92b 	bl	8010070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	791b      	ldrb	r3, [r3, #4]
 800ee1e:	4619      	mov	r1, r3
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f001 f925 	bl	8010070 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	701a      	strb	r2, [r3, #0]
      break;
 800ee32:	e0b6      	b.n	800efa2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d036      	beq.n	800eeac <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ee4a:	23ff      	movs	r3, #255	; 0xff
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 f9e3 	bl	800f218 <USBH_Get_StringDesc>
 800ee52:	4603      	mov	r3, r0
 800ee54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ee56:	7bbb      	ldrb	r3, [r7, #14]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d111      	bne.n	800ee80 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2206      	movs	r2, #6
 800ee60:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2205      	movs	r2, #5
 800ee66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ee76:	2200      	movs	r2, #0
 800ee78:	4619      	mov	r1, r3
 800ee7a:	f007 fa09 	bl	8016290 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ee7e:	e092      	b.n	800efa6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ee80:	7bbb      	ldrb	r3, [r7, #14]
 800ee82:	2b03      	cmp	r3, #3
 800ee84:	f040 808f 	bne.w	800efa6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2206      	movs	r2, #6
 800ee8c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2205      	movs	r2, #5
 800ee92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eea2:	2200      	movs	r2, #0
 800eea4:	4619      	mov	r1, r3
 800eea6:	f007 f9f3 	bl	8016290 <osMessagePut>
      break;
 800eeaa:	e07c      	b.n	800efa6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2206      	movs	r2, #6
 800eeb0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2205      	movs	r2, #5
 800eeb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eec6:	2200      	movs	r2, #0
 800eec8:	4619      	mov	r1, r3
 800eeca:	f007 f9e1 	bl	8016290 <osMessagePut>
      break;
 800eece:	e06a      	b.n	800efa6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d027      	beq.n	800ef2a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800eee6:	23ff      	movs	r3, #255	; 0xff
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f995 	bl	800f218 <USBH_Get_StringDesc>
 800eeee:	4603      	mov	r3, r0
 800eef0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800eef2:	7bbb      	ldrb	r3, [r7, #14]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d103      	bne.n	800ef00 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2207      	movs	r2, #7
 800eefc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800eefe:	e054      	b.n	800efaa <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ef00:	7bbb      	ldrb	r3, [r7, #14]
 800ef02:	2b03      	cmp	r3, #3
 800ef04:	d151      	bne.n	800efaa <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2207      	movs	r2, #7
 800ef0a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2205      	movs	r2, #5
 800ef10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ef20:	2200      	movs	r2, #0
 800ef22:	4619      	mov	r1, r3
 800ef24:	f007 f9b4 	bl	8016290 <osMessagePut>
      break;
 800ef28:	e03f      	b.n	800efaa <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2207      	movs	r2, #7
 800ef2e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2205      	movs	r2, #5
 800ef34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ef44:	2200      	movs	r2, #0
 800ef46:	4619      	mov	r1, r3
 800ef48:	f007 f9a2 	bl	8016290 <osMessagePut>
      break;
 800ef4c:	e02d      	b.n	800efaa <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d017      	beq.n	800ef88 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ef64:	23ff      	movs	r3, #255	; 0xff
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 f956 	bl	800f218 <USBH_Get_StringDesc>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ef70:	7bbb      	ldrb	r3, [r7, #14]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d102      	bne.n	800ef7c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ef76:	2300      	movs	r3, #0
 800ef78:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ef7a:	e018      	b.n	800efae <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ef7c:	7bbb      	ldrb	r3, [r7, #14]
 800ef7e:	2b03      	cmp	r3, #3
 800ef80:	d115      	bne.n	800efae <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800ef82:	2300      	movs	r3, #0
 800ef84:	73fb      	strb	r3, [r7, #15]
      break;
 800ef86:	e012      	b.n	800efae <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ef8c:	e00f      	b.n	800efae <USBH_HandleEnum+0x44a>

    default:
      break;
 800ef8e:	bf00      	nop
 800ef90:	e00e      	b.n	800efb0 <USBH_HandleEnum+0x44c>
      break;
 800ef92:	bf00      	nop
 800ef94:	e00c      	b.n	800efb0 <USBH_HandleEnum+0x44c>
      break;
 800ef96:	bf00      	nop
 800ef98:	e00a      	b.n	800efb0 <USBH_HandleEnum+0x44c>
      break;
 800ef9a:	bf00      	nop
 800ef9c:	e008      	b.n	800efb0 <USBH_HandleEnum+0x44c>
      break;
 800ef9e:	bf00      	nop
 800efa0:	e006      	b.n	800efb0 <USBH_HandleEnum+0x44c>
      break;
 800efa2:	bf00      	nop
 800efa4:	e004      	b.n	800efb0 <USBH_HandleEnum+0x44c>
      break;
 800efa6:	bf00      	nop
 800efa8:	e002      	b.n	800efb0 <USBH_HandleEnum+0x44c>
      break;
 800efaa:	bf00      	nop
 800efac:	e000      	b.n	800efb0 <USBH_HandleEnum+0x44c>
      break;
 800efae:	bf00      	nop
  }
  return Status;
 800efb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop

0800efbc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	683a      	ldr	r2, [r7, #0]
 800efca:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800efce:	bf00      	nop
 800efd0:	370c      	adds	r7, #12
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr

0800efda <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	b082      	sub	sp, #8
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800efe8:	1c5a      	adds	r2, r3, #1
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 f804 	bl	800effe <USBH_HandleSof>
}
 800eff6:	bf00      	nop
 800eff8:	3708      	adds	r7, #8
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}

0800effe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800effe:	b580      	push	{r7, lr}
 800f000:	b082      	sub	sp, #8
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	b2db      	uxtb	r3, r3
 800f00c:	2b0b      	cmp	r3, #11
 800f00e:	d10a      	bne.n	800f026 <USBH_HandleSof+0x28>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f016:	2b00      	cmp	r3, #0
 800f018:	d005      	beq.n	800f026 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f020:	699b      	ldr	r3, [r3, #24]
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	4798      	blx	r3
  }
}
 800f026:	bf00      	nop
 800f028:	3708      	adds	r7, #8
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}

0800f02e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f02e:	b580      	push	{r7, lr}
 800f030:	b082      	sub	sp, #8
 800f032:	af00      	add	r7, sp, #0
 800f034:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2201      	movs	r2, #1
 800f03a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2201      	movs	r2, #1
 800f042:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f052:	2200      	movs	r2, #0
 800f054:	4619      	mov	r1, r3
 800f056:	f007 f91b 	bl	8016290 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800f05a:	bf00      	nop
}
 800f05c:	3708      	adds	r7, #8
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}

0800f062 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f062:	b480      	push	{r7}
 800f064:	b083      	sub	sp, #12
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f072:	bf00      	nop
}
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b082      	sub	sp, #8
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2201      	movs	r2, #1
 800f08a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2200      	movs	r2, #0
 800f09a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	f007 f8eb 	bl	8016290 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f0ba:	2300      	movs	r3, #0
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f00a fce0 	bl	8019aaa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	791b      	ldrb	r3, [r3, #4]
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f000 ffbd 	bl	8010070 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	795b      	ldrb	r3, [r3, #5]
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 ffb7 	bl	8010070 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2201      	movs	r2, #1
 800f106:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f116:	2200      	movs	r2, #0
 800f118:	4619      	mov	r1, r3
 800f11a:	f007 f8b9 	bl	8016290 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f11e:	2300      	movs	r3, #0
}
 800f120:	4618      	mov	r0, r3
 800f122:	3708      	adds	r7, #8
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b086      	sub	sp, #24
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800f136:	f107 030c 	add.w	r3, r7, #12
 800f13a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f13e:	4618      	mov	r0, r3
 800f140:	f007 f8e6 	bl	8016310 <osMessageGet>
    if (event.status == osEventMessage)
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2b10      	cmp	r3, #16
 800f148:	d1f2      	bne.n	800f130 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f7ff fa9e 	bl	800e68c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f150:	e7ee      	b.n	800f130 <USBH_Process_OS+0x8>

0800f152 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b082      	sub	sp, #8
 800f156:	af00      	add	r7, sp, #0
 800f158:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2201      	movs	r2, #1
 800f15e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f16e:	2200      	movs	r2, #0
 800f170:	4619      	mov	r1, r3
 800f172:	f007 f88d 	bl	8016290 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800f176:	2300      	movs	r3, #0
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3708      	adds	r7, #8
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b086      	sub	sp, #24
 800f184:	af02      	add	r7, sp, #8
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	460b      	mov	r3, r1
 800f18a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800f192:	78fb      	ldrb	r3, [r7, #3]
 800f194:	b29b      	uxth	r3, r3
 800f196:	9300      	str	r3, [sp, #0]
 800f198:	4613      	mov	r3, r2
 800f19a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f19e:	2100      	movs	r1, #0
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 f864 	bl	800f26e <USBH_GetDescriptor>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800f1aa:	7bfb      	ldrb	r3, [r7, #15]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d10a      	bne.n	800f1c6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f1bc:	78fa      	ldrb	r2, [r7, #3]
 800f1be:	b292      	uxth	r2, r2
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	f000 f919 	bl	800f3f8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3710      	adds	r7, #16
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b086      	sub	sp, #24
 800f1d4:	af02      	add	r7, sp, #8
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	460b      	mov	r3, r1
 800f1da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	331c      	adds	r3, #28
 800f1e0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f1e2:	887b      	ldrh	r3, [r7, #2]
 800f1e4:	9300      	str	r3, [sp, #0]
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 f83d 	bl	800f26e <USBH_GetDescriptor>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800f1f8:	7bfb      	ldrb	r3, [r7, #15]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d107      	bne.n	800f20e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800f1fe:	887b      	ldrh	r3, [r7, #2]
 800f200:	461a      	mov	r2, r3
 800f202:	68b9      	ldr	r1, [r7, #8]
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f000 f987 	bl	800f518 <USBH_ParseCfgDesc>
 800f20a:	4603      	mov	r3, r0
 800f20c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f210:	4618      	mov	r0, r3
 800f212:	3710      	adds	r7, #16
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b088      	sub	sp, #32
 800f21c:	af02      	add	r7, sp, #8
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	607a      	str	r2, [r7, #4]
 800f222:	461a      	mov	r2, r3
 800f224:	460b      	mov	r3, r1
 800f226:	72fb      	strb	r3, [r7, #11]
 800f228:	4613      	mov	r3, r2
 800f22a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800f22c:	7afb      	ldrb	r3, [r7, #11]
 800f22e:	b29b      	uxth	r3, r3
 800f230:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f234:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800f23c:	893b      	ldrh	r3, [r7, #8]
 800f23e:	9300      	str	r3, [sp, #0]
 800f240:	460b      	mov	r3, r1
 800f242:	2100      	movs	r1, #0
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f000 f812 	bl	800f26e <USBH_GetDescriptor>
 800f24a:	4603      	mov	r3, r0
 800f24c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800f24e:	7dfb      	ldrb	r3, [r7, #23]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d107      	bne.n	800f264 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f25a:	893a      	ldrh	r2, [r7, #8]
 800f25c:	6879      	ldr	r1, [r7, #4]
 800f25e:	4618      	mov	r0, r3
 800f260:	f000 fb26 	bl	800f8b0 <USBH_ParseStringDesc>
  }

  return status;
 800f264:	7dfb      	ldrb	r3, [r7, #23]
}
 800f266:	4618      	mov	r0, r3
 800f268:	3718      	adds	r7, #24
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f26e:	b580      	push	{r7, lr}
 800f270:	b084      	sub	sp, #16
 800f272:	af00      	add	r7, sp, #0
 800f274:	60f8      	str	r0, [r7, #12]
 800f276:	607b      	str	r3, [r7, #4]
 800f278:	460b      	mov	r3, r1
 800f27a:	72fb      	strb	r3, [r7, #11]
 800f27c:	4613      	mov	r3, r2
 800f27e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	789b      	ldrb	r3, [r3, #2]
 800f284:	2b01      	cmp	r3, #1
 800f286:	d11c      	bne.n	800f2c2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f288:	7afb      	ldrb	r3, [r7, #11]
 800f28a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f28e:	b2da      	uxtb	r2, r3
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2206      	movs	r2, #6
 800f298:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	893a      	ldrh	r2, [r7, #8]
 800f29e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f2a0:	893b      	ldrh	r3, [r7, #8]
 800f2a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f2a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2aa:	d104      	bne.n	800f2b6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f240 4209 	movw	r2, #1033	; 0x409
 800f2b2:	829a      	strh	r2, [r3, #20]
 800f2b4:	e002      	b.n	800f2bc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	8b3a      	ldrh	r2, [r7, #24]
 800f2c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f2c2:	8b3b      	ldrh	r3, [r7, #24]
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	6879      	ldr	r1, [r7, #4]
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f000 fb3f 	bl	800f94c <USBH_CtlReq>
 800f2ce:	4603      	mov	r3, r0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3710      	adds	r7, #16
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	789b      	ldrb	r3, [r3, #2]
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d10f      	bne.n	800f30c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2205      	movs	r2, #5
 800f2f6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f2f8:	78fb      	ldrb	r3, [r7, #3]
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2200      	movs	r2, #0
 800f304:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2200      	movs	r2, #0
 800f30a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f30c:	2200      	movs	r2, #0
 800f30e:	2100      	movs	r1, #0
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 fb1b 	bl	800f94c <USBH_CtlReq>
 800f316:	4603      	mov	r3, r0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3708      	adds	r7, #8
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	460b      	mov	r3, r1
 800f32a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	789b      	ldrb	r3, [r3, #2]
 800f330:	2b01      	cmp	r3, #1
 800f332:	d10e      	bne.n	800f352 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2209      	movs	r2, #9
 800f33e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	887a      	ldrh	r2, [r7, #2]
 800f344:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2200      	movs	r2, #0
 800f34a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f352:	2200      	movs	r2, #0
 800f354:	2100      	movs	r1, #0
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 faf8 	bl	800f94c <USBH_CtlReq>
 800f35c:	4603      	mov	r3, r0
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3708      	adds	r7, #8
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}

0800f366 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f366:	b580      	push	{r7, lr}
 800f368:	b082      	sub	sp, #8
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
 800f36e:	460b      	mov	r3, r1
 800f370:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	789b      	ldrb	r3, [r3, #2]
 800f376:	2b01      	cmp	r3, #1
 800f378:	d10f      	bne.n	800f39a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2200      	movs	r2, #0
 800f37e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2203      	movs	r2, #3
 800f384:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f386:	78fb      	ldrb	r3, [r7, #3]
 800f388:	b29a      	uxth	r2, r3
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2200      	movs	r2, #0
 800f398:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f39a:	2200      	movs	r2, #0
 800f39c:	2100      	movs	r1, #0
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f000 fad4 	bl	800f94c <USBH_CtlReq>
 800f3a4:	4603      	mov	r3, r0
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3708      	adds	r7, #8
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}

0800f3ae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b082      	sub	sp, #8
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6078      	str	r0, [r7, #4]
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	789b      	ldrb	r3, [r3, #2]
 800f3be:	2b01      	cmp	r3, #1
 800f3c0:	d10f      	bne.n	800f3e2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2202      	movs	r2, #2
 800f3c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f3d4:	78fb      	ldrb	r3, [r7, #3]
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f000 fab0 	bl	800f94c <USBH_CtlReq>
 800f3ec:	4603      	mov	r3, r0
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3708      	adds	r7, #8
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
	...

0800f3f8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	4613      	mov	r3, r2
 800f404:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	781a      	ldrb	r2, [r3, #0]
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	785a      	ldrb	r2, [r3, #1]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	3302      	adds	r3, #2
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	b29a      	uxth	r2, r3
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	3303      	adds	r3, #3
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	b29b      	uxth	r3, r3
 800f426:	021b      	lsls	r3, r3, #8
 800f428:	b29b      	uxth	r3, r3
 800f42a:	4313      	orrs	r3, r2
 800f42c:	b29a      	uxth	r2, r3
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	791a      	ldrb	r2, [r3, #4]
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	795a      	ldrb	r2, [r3, #5]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	799a      	ldrb	r2, [r3, #6]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	79da      	ldrb	r2, [r3, #7]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	79db      	ldrb	r3, [r3, #7]
 800f456:	2b20      	cmp	r3, #32
 800f458:	dc0e      	bgt.n	800f478 <USBH_ParseDevDesc+0x80>
 800f45a:	2b08      	cmp	r3, #8
 800f45c:	db13      	blt.n	800f486 <USBH_ParseDevDesc+0x8e>
 800f45e:	3b08      	subs	r3, #8
 800f460:	2201      	movs	r2, #1
 800f462:	409a      	lsls	r2, r3
 800f464:	4b2b      	ldr	r3, [pc, #172]	; (800f514 <USBH_ParseDevDesc+0x11c>)
 800f466:	4013      	ands	r3, r2
 800f468:	2b00      	cmp	r3, #0
 800f46a:	bf14      	ite	ne
 800f46c:	2301      	movne	r3, #1
 800f46e:	2300      	moveq	r3, #0
 800f470:	b2db      	uxtb	r3, r3
 800f472:	2b00      	cmp	r3, #0
 800f474:	d102      	bne.n	800f47c <USBH_ParseDevDesc+0x84>
 800f476:	e006      	b.n	800f486 <USBH_ParseDevDesc+0x8e>
 800f478:	2b40      	cmp	r3, #64	; 0x40
 800f47a:	d104      	bne.n	800f486 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	79da      	ldrb	r2, [r3, #7]
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	71da      	strb	r2, [r3, #7]
      break;
 800f484:	e003      	b.n	800f48e <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2240      	movs	r2, #64	; 0x40
 800f48a:	71da      	strb	r2, [r3, #7]
      break;
 800f48c:	bf00      	nop
  }

  if (length > 8U)
 800f48e:	88fb      	ldrh	r3, [r7, #6]
 800f490:	2b08      	cmp	r3, #8
 800f492:	d939      	bls.n	800f508 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	3308      	adds	r3, #8
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	3309      	adds	r3, #9
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	021b      	lsls	r3, r3, #8
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	b29a      	uxth	r2, r3
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	330a      	adds	r3, #10
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	330b      	adds	r3, #11
 800f4bc:	781b      	ldrb	r3, [r3, #0]
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	021b      	lsls	r3, r3, #8
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	4313      	orrs	r3, r2
 800f4c6:	b29a      	uxth	r2, r3
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	330c      	adds	r3, #12
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	b29a      	uxth	r2, r3
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	330d      	adds	r3, #13
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	021b      	lsls	r3, r3, #8
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	4313      	orrs	r3, r2
 800f4e2:	b29a      	uxth	r2, r3
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	7b9a      	ldrb	r2, [r3, #14]
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	7bda      	ldrb	r2, [r3, #15]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	7c1a      	ldrb	r2, [r3, #16]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	7c5a      	ldrb	r2, [r3, #17]
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	745a      	strb	r2, [r3, #17]
  }
}
 800f508:	bf00      	nop
 800f50a:	3714      	adds	r7, #20
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr
 800f514:	01000101 	.word	0x01000101

0800f518 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b08c      	sub	sp, #48	; 0x30
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	4613      	mov	r3, r2
 800f524:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f52c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800f52e:	2300      	movs	r3, #0
 800f530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f538:	2300      	movs	r3, #0
 800f53a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800f53e:	2300      	movs	r3, #0
 800f540:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	781a      	ldrb	r2, [r3, #0]
 800f54c:	6a3b      	ldr	r3, [r7, #32]
 800f54e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	785a      	ldrb	r2, [r3, #1]
 800f554:	6a3b      	ldr	r3, [r7, #32]
 800f556:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	3302      	adds	r3, #2
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	b29a      	uxth	r2, r3
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	3303      	adds	r3, #3
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	b29b      	uxth	r3, r3
 800f568:	021b      	lsls	r3, r3, #8
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	4313      	orrs	r3, r2
 800f56e:	b29b      	uxth	r3, r3
 800f570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f574:	bf28      	it	cs
 800f576:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	6a3b      	ldr	r3, [r7, #32]
 800f57e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	791a      	ldrb	r2, [r3, #4]
 800f584:	6a3b      	ldr	r3, [r7, #32]
 800f586:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	795a      	ldrb	r2, [r3, #5]
 800f58c:	6a3b      	ldr	r3, [r7, #32]
 800f58e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	799a      	ldrb	r2, [r3, #6]
 800f594:	6a3b      	ldr	r3, [r7, #32]
 800f596:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	79da      	ldrb	r2, [r3, #7]
 800f59c:	6a3b      	ldr	r3, [r7, #32]
 800f59e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	7a1a      	ldrb	r2, [r3, #8]
 800f5a4:	6a3b      	ldr	r3, [r7, #32]
 800f5a6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800f5a8:	6a3b      	ldr	r3, [r7, #32]
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	2b09      	cmp	r3, #9
 800f5ae:	d002      	beq.n	800f5b6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800f5b0:	6a3b      	ldr	r3, [r7, #32]
 800f5b2:	2209      	movs	r2, #9
 800f5b4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f5b6:	88fb      	ldrh	r3, [r7, #6]
 800f5b8:	2b09      	cmp	r3, #9
 800f5ba:	f240 809d 	bls.w	800f6f8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800f5be:	2309      	movs	r3, #9
 800f5c0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f5c6:	e081      	b.n	800f6cc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f5c8:	f107 0316 	add.w	r3, r7, #22
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5d0:	f000 f9a1 	bl	800f916 <USBH_GetNextDesc>
 800f5d4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800f5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d8:	785b      	ldrb	r3, [r3, #1]
 800f5da:	2b04      	cmp	r3, #4
 800f5dc:	d176      	bne.n	800f6cc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800f5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	2b09      	cmp	r3, #9
 800f5e4:	d002      	beq.n	800f5ec <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800f5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e8:	2209      	movs	r2, #9
 800f5ea:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800f5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5f0:	221a      	movs	r2, #26
 800f5f2:	fb02 f303 	mul.w	r3, r2, r3
 800f5f6:	3308      	adds	r3, #8
 800f5f8:	6a3a      	ldr	r2, [r7, #32]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	3302      	adds	r3, #2
 800f5fe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f602:	69f8      	ldr	r0, [r7, #28]
 800f604:	f000 f87e 	bl	800f704 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f608:	2300      	movs	r3, #0
 800f60a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800f60e:	2300      	movs	r3, #0
 800f610:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f612:	e043      	b.n	800f69c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f614:	f107 0316 	add.w	r3, r7, #22
 800f618:	4619      	mov	r1, r3
 800f61a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f61c:	f000 f97b 	bl	800f916 <USBH_GetNextDesc>
 800f620:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f624:	785b      	ldrb	r3, [r3, #1]
 800f626:	2b05      	cmp	r3, #5
 800f628:	d138      	bne.n	800f69c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	795b      	ldrb	r3, [r3, #5]
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d10f      	bne.n	800f652 <USBH_ParseCfgDesc+0x13a>
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	799b      	ldrb	r3, [r3, #6]
 800f636:	2b02      	cmp	r3, #2
 800f638:	d10b      	bne.n	800f652 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	79db      	ldrb	r3, [r3, #7]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d10f      	bne.n	800f662 <USBH_ParseCfgDesc+0x14a>
 800f642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	2b09      	cmp	r3, #9
 800f648:	d00b      	beq.n	800f662 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800f64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f64c:	2209      	movs	r2, #9
 800f64e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f650:	e007      	b.n	800f662 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800f652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	2b07      	cmp	r3, #7
 800f658:	d004      	beq.n	800f664 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800f65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65c:	2207      	movs	r2, #7
 800f65e:	701a      	strb	r2, [r3, #0]
 800f660:	e000      	b.n	800f664 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f662:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f668:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f66c:	3201      	adds	r2, #1
 800f66e:	00d2      	lsls	r2, r2, #3
 800f670:	211a      	movs	r1, #26
 800f672:	fb01 f303 	mul.w	r3, r1, r3
 800f676:	4413      	add	r3, r2
 800f678:	3308      	adds	r3, #8
 800f67a:	6a3a      	ldr	r2, [r7, #32]
 800f67c:	4413      	add	r3, r2
 800f67e:	3304      	adds	r3, #4
 800f680:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800f682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f684:	69b9      	ldr	r1, [r7, #24]
 800f686:	68f8      	ldr	r0, [r7, #12]
 800f688:	f000 f86c 	bl	800f764 <USBH_ParseEPDesc>
 800f68c:	4603      	mov	r3, r0
 800f68e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800f692:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f696:	3301      	adds	r3, #1
 800f698:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	791b      	ldrb	r3, [r3, #4]
 800f6a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d204      	bcs.n	800f6b2 <USBH_ParseCfgDesc+0x19a>
 800f6a8:	6a3b      	ldr	r3, [r7, #32]
 800f6aa:	885a      	ldrh	r2, [r3, #2]
 800f6ac:	8afb      	ldrh	r3, [r7, #22]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d8b0      	bhi.n	800f614 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	791b      	ldrb	r3, [r3, #4]
 800f6b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d201      	bcs.n	800f6c2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800f6be:	2303      	movs	r3, #3
 800f6c0:	e01c      	b.n	800f6fc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800f6c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d805      	bhi.n	800f6e0 <USBH_ParseCfgDesc+0x1c8>
 800f6d4:	6a3b      	ldr	r3, [r7, #32]
 800f6d6:	885a      	ldrh	r2, [r3, #2]
 800f6d8:	8afb      	ldrh	r3, [r7, #22]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	f63f af74 	bhi.w	800f5c8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800f6e0:	6a3b      	ldr	r3, [r7, #32]
 800f6e2:	791b      	ldrb	r3, [r3, #4]
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	bf28      	it	cs
 800f6e8:	2302      	movcs	r3, #2
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d201      	bcs.n	800f6f8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800f6f4:	2303      	movs	r3, #3
 800f6f6:	e001      	b.n	800f6fc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800f6f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3730      	adds	r7, #48	; 0x30
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	781a      	ldrb	r2, [r3, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	785a      	ldrb	r2, [r3, #1]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	789a      	ldrb	r2, [r3, #2]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	78da      	ldrb	r2, [r3, #3]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	791a      	ldrb	r2, [r3, #4]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	795a      	ldrb	r2, [r3, #5]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	799a      	ldrb	r2, [r3, #6]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	79da      	ldrb	r2, [r3, #7]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	7a1a      	ldrb	r2, [r3, #8]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	721a      	strb	r2, [r3, #8]
}
 800f756:	bf00      	nop
 800f758:	370c      	adds	r7, #12
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr
	...

0800f764 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800f764:	b480      	push	{r7}
 800f766:	b087      	sub	sp, #28
 800f768:	af00      	add	r7, sp, #0
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	60b9      	str	r1, [r7, #8]
 800f76e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800f770:	2300      	movs	r3, #0
 800f772:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	781a      	ldrb	r2, [r3, #0]
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	785a      	ldrb	r2, [r3, #1]
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	789a      	ldrb	r2, [r3, #2]
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	78da      	ldrb	r2, [r3, #3]
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	3304      	adds	r3, #4
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	b29a      	uxth	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	3305      	adds	r3, #5
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	021b      	lsls	r3, r3, #8
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	4313      	orrs	r3, r2
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	799a      	ldrb	r2, [r3, #6]
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	889b      	ldrh	r3, [r3, #4]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d102      	bne.n	800f7c6 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800f7c0:	2303      	movs	r3, #3
 800f7c2:	75fb      	strb	r3, [r7, #23]
 800f7c4:	e031      	b.n	800f82a <USBH_ParseEPDesc+0xc6>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	889a      	ldrh	r2, [r3, #4]
 800f7ca:	4b38      	ldr	r3, [pc, #224]	; (800f8ac <USBH_ParseEPDesc+0x148>)
 800f7cc:	4013      	ands	r3, r2
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	889b      	ldrh	r3, [r3, #4]
 800f7d8:	b21a      	sxth	r2, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	3304      	adds	r3, #4
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	b299      	uxth	r1, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	3305      	adds	r3, #5
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	021b      	lsls	r3, r3, #8
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	430b      	orrs	r3, r1
 800f7f0:	b29b      	uxth	r3, r3
 800f7f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d110      	bne.n	800f81c <USBH_ParseEPDesc+0xb8>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	3304      	adds	r3, #4
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	b299      	uxth	r1, r3
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	3305      	adds	r3, #5
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	b29b      	uxth	r3, r3
 800f80a:	021b      	lsls	r3, r3, #8
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	430b      	orrs	r3, r1
 800f810:	b29b      	uxth	r3, r3
 800f812:	b21b      	sxth	r3, r3
 800f814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f818:	b21b      	sxth	r3, r3
 800f81a:	e001      	b.n	800f820 <USBH_ParseEPDesc+0xbc>
 800f81c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f820:	4313      	orrs	r3, r2
 800f822:	b21b      	sxth	r3, r3
 800f824:	b29a      	uxth	r2, r3
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f830:	2b00      	cmp	r3, #0
 800f832:	d116      	bne.n	800f862 <USBH_ParseEPDesc+0xfe>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	78db      	ldrb	r3, [r3, #3]
 800f838:	f003 0303 	and.w	r3, r3, #3
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	d005      	beq.n	800f84c <USBH_ParseEPDesc+0xe8>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	78db      	ldrb	r3, [r3, #3]
 800f844:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f848:	2b03      	cmp	r3, #3
 800f84a:	d127      	bne.n	800f89c <USBH_ParseEPDesc+0x138>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	799b      	ldrb	r3, [r3, #6]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d003      	beq.n	800f85c <USBH_ParseEPDesc+0xf8>
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	799b      	ldrb	r3, [r3, #6]
 800f858:	2b10      	cmp	r3, #16
 800f85a:	d91f      	bls.n	800f89c <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 800f85c:	2303      	movs	r3, #3
 800f85e:	75fb      	strb	r3, [r7, #23]
 800f860:	e01c      	b.n	800f89c <USBH_ParseEPDesc+0x138>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	78db      	ldrb	r3, [r3, #3]
 800f866:	f003 0303 	and.w	r3, r3, #3
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d10a      	bne.n	800f884 <USBH_ParseEPDesc+0x120>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	799b      	ldrb	r3, [r3, #6]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d003      	beq.n	800f87e <USBH_ParseEPDesc+0x11a>
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	799b      	ldrb	r3, [r3, #6]
 800f87a:	2b10      	cmp	r3, #16
 800f87c:	d90e      	bls.n	800f89c <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 800f87e:	2303      	movs	r3, #3
 800f880:	75fb      	strb	r3, [r7, #23]
 800f882:	e00b      	b.n	800f89c <USBH_ParseEPDesc+0x138>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	78db      	ldrb	r3, [r3, #3]
 800f888:	f003 0303 	and.w	r3, r3, #3
 800f88c:	2b03      	cmp	r3, #3
 800f88e:	d105      	bne.n	800f89c <USBH_ParseEPDesc+0x138>
    {
      if (ep_descriptor->bInterval == 0U)
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	799b      	ldrb	r3, [r3, #6]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d101      	bne.n	800f89c <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 800f898:	2303      	movs	r3, #3
 800f89a:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800f89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	371c      	adds	r7, #28
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop
 800f8ac:	fffff800 	.word	0xfffff800

0800f8b0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b087      	sub	sp, #28
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	4613      	mov	r3, r2
 800f8bc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	2b03      	cmp	r3, #3
 800f8c6:	d120      	bne.n	800f90a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	1e9a      	subs	r2, r3, #2
 800f8ce:	88fb      	ldrh	r3, [r7, #6]
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	bf28      	it	cs
 800f8d4:	4613      	movcs	r3, r2
 800f8d6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	3302      	adds	r3, #2
 800f8dc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f8de:	2300      	movs	r3, #0
 800f8e0:	82fb      	strh	r3, [r7, #22]
 800f8e2:	e00b      	b.n	800f8fc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f8e4:	8afb      	ldrh	r3, [r7, #22]
 800f8e6:	68fa      	ldr	r2, [r7, #12]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	781a      	ldrb	r2, [r3, #0]
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f8f6:	8afb      	ldrh	r3, [r7, #22]
 800f8f8:	3302      	adds	r3, #2
 800f8fa:	82fb      	strh	r3, [r7, #22]
 800f8fc:	8afa      	ldrh	r2, [r7, #22]
 800f8fe:	8abb      	ldrh	r3, [r7, #20]
 800f900:	429a      	cmp	r2, r3
 800f902:	d3ef      	bcc.n	800f8e4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	2200      	movs	r2, #0
 800f908:	701a      	strb	r2, [r3, #0]
  }
}
 800f90a:	bf00      	nop
 800f90c:	371c      	adds	r7, #28
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr

0800f916 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f916:	b480      	push	{r7}
 800f918:	b085      	sub	sp, #20
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
 800f91e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	881a      	ldrh	r2, [r3, #0]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	b29b      	uxth	r3, r3
 800f92a:	4413      	add	r3, r2
 800f92c:	b29a      	uxth	r2, r3
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	4413      	add	r3, r2
 800f93c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f93e:	68fb      	ldr	r3, [r7, #12]
}
 800f940:	4618      	mov	r0, r3
 800f942:	3714      	adds	r7, #20
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b086      	sub	sp, #24
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	4613      	mov	r3, r2
 800f958:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f95a:	2301      	movs	r3, #1
 800f95c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	789b      	ldrb	r3, [r3, #2]
 800f962:	2b01      	cmp	r3, #1
 800f964:	d002      	beq.n	800f96c <USBH_CtlReq+0x20>
 800f966:	2b02      	cmp	r3, #2
 800f968:	d01d      	beq.n	800f9a6 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800f96a:	e043      	b.n	800f9f4 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	68ba      	ldr	r2, [r7, #8]
 800f970:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	88fa      	ldrh	r2, [r7, #6]
 800f976:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2201      	movs	r2, #1
 800f97c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2202      	movs	r2, #2
 800f982:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f984:	2301      	movs	r3, #1
 800f986:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2203      	movs	r2, #3
 800f98c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f99c:	2200      	movs	r2, #0
 800f99e:	4619      	mov	r1, r3
 800f9a0:	f006 fc76 	bl	8016290 <osMessagePut>
      break;
 800f9a4:	e026      	b.n	800f9f4 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f9a6:	68f8      	ldr	r0, [r7, #12]
 800f9a8:	f000 f82a 	bl	800fa00 <USBH_HandleControl>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f9b0:	7dfb      	ldrb	r3, [r7, #23]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d002      	beq.n	800f9bc <USBH_CtlReq+0x70>
 800f9b6:	7dfb      	ldrb	r3, [r7, #23]
 800f9b8:	2b03      	cmp	r3, #3
 800f9ba:	d106      	bne.n	800f9ca <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2201      	movs	r2, #1
 800f9c0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	761a      	strb	r2, [r3, #24]
 800f9c8:	e005      	b.n	800f9d6 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f9ca:	7dfb      	ldrb	r3, [r7, #23]
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	d102      	bne.n	800f9d6 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2203      	movs	r2, #3
 800f9da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	f006 fc4f 	bl	8016290 <osMessagePut>
      break;
 800f9f2:	bf00      	nop
  }
  return status;
 800f9f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3718      	adds	r7, #24
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
	...

0800fa00 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b086      	sub	sp, #24
 800fa04:	af02      	add	r7, sp, #8
 800fa06:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	7e1b      	ldrb	r3, [r3, #24]
 800fa14:	3b01      	subs	r3, #1
 800fa16:	2b0a      	cmp	r3, #10
 800fa18:	f200 8229 	bhi.w	800fe6e <USBH_HandleControl+0x46e>
 800fa1c:	a201      	add	r2, pc, #4	; (adr r2, 800fa24 <USBH_HandleControl+0x24>)
 800fa1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa22:	bf00      	nop
 800fa24:	0800fa51 	.word	0x0800fa51
 800fa28:	0800fa6b 	.word	0x0800fa6b
 800fa2c:	0800fb0d 	.word	0x0800fb0d
 800fa30:	0800fb33 	.word	0x0800fb33
 800fa34:	0800fbbf 	.word	0x0800fbbf
 800fa38:	0800fbe9 	.word	0x0800fbe9
 800fa3c:	0800fcab 	.word	0x0800fcab
 800fa40:	0800fccd 	.word	0x0800fccd
 800fa44:	0800fd5f 	.word	0x0800fd5f
 800fa48:	0800fd85 	.word	0x0800fd85
 800fa4c:	0800fe17 	.word	0x0800fe17
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f103 0110 	add.w	r1, r3, #16
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	795b      	ldrb	r3, [r3, #5]
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f000 fa17 	bl	800fe90 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2202      	movs	r2, #2
 800fa66:	761a      	strb	r2, [r3, #24]
      break;
 800fa68:	e20c      	b.n	800fe84 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	795b      	ldrb	r3, [r3, #5]
 800fa6e:	4619      	mov	r1, r3
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f00a f909 	bl	8019c88 <USBH_LL_GetURBState>
 800fa76:	4603      	mov	r3, r0
 800fa78:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fa7a:	7bbb      	ldrb	r3, [r7, #14]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d12c      	bne.n	800fada <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	7c1b      	ldrb	r3, [r3, #16]
 800fa84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fa88:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	8adb      	ldrh	r3, [r3, #22]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00a      	beq.n	800faa8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fa92:	7b7b      	ldrb	r3, [r7, #13]
 800fa94:	2b80      	cmp	r3, #128	; 0x80
 800fa96:	d103      	bne.n	800faa0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2203      	movs	r2, #3
 800fa9c:	761a      	strb	r2, [r3, #24]
 800fa9e:	e00d      	b.n	800fabc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2205      	movs	r2, #5
 800faa4:	761a      	strb	r2, [r3, #24]
 800faa6:	e009      	b.n	800fabc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800faa8:	7b7b      	ldrb	r3, [r7, #13]
 800faaa:	2b80      	cmp	r3, #128	; 0x80
 800faac:	d103      	bne.n	800fab6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2209      	movs	r2, #9
 800fab2:	761a      	strb	r2, [r3, #24]
 800fab4:	e002      	b.n	800fabc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2207      	movs	r2, #7
 800faba:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2203      	movs	r2, #3
 800fac0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fad0:	2200      	movs	r2, #0
 800fad2:	4619      	mov	r1, r3
 800fad4:	f006 fbdc 	bl	8016290 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fad8:	e1cb      	b.n	800fe72 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fada:	7bbb      	ldrb	r3, [r7, #14]
 800fadc:	2b04      	cmp	r3, #4
 800fade:	d003      	beq.n	800fae8 <USBH_HandleControl+0xe8>
 800fae0:	7bbb      	ldrb	r3, [r7, #14]
 800fae2:	2b02      	cmp	r3, #2
 800fae4:	f040 81c5 	bne.w	800fe72 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	220b      	movs	r2, #11
 800faec:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2203      	movs	r2, #3
 800faf2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb02:	2200      	movs	r2, #0
 800fb04:	4619      	mov	r1, r3
 800fb06:	f006 fbc3 	bl	8016290 <osMessagePut>
      break;
 800fb0a:	e1b2      	b.n	800fe72 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6899      	ldr	r1, [r3, #8]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	899a      	ldrh	r2, [r3, #12]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	791b      	ldrb	r3, [r3, #4]
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f000 f9f2 	bl	800ff0e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2204      	movs	r2, #4
 800fb2e:	761a      	strb	r2, [r3, #24]
      break;
 800fb30:	e1a8      	b.n	800fe84 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	791b      	ldrb	r3, [r3, #4]
 800fb36:	4619      	mov	r1, r3
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f00a f8a5 	bl	8019c88 <USBH_LL_GetURBState>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fb42:	7bbb      	ldrb	r3, [r7, #14]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d110      	bne.n	800fb6a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2209      	movs	r2, #9
 800fb4c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2203      	movs	r2, #3
 800fb52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb62:	2200      	movs	r2, #0
 800fb64:	4619      	mov	r1, r3
 800fb66:	f006 fb93 	bl	8016290 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800fb6a:	7bbb      	ldrb	r3, [r7, #14]
 800fb6c:	2b05      	cmp	r3, #5
 800fb6e:	d110      	bne.n	800fb92 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800fb70:	2303      	movs	r3, #3
 800fb72:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2203      	movs	r2, #3
 800fb78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb88:	2200      	movs	r2, #0
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	f006 fb80 	bl	8016290 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fb90:	e171      	b.n	800fe76 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800fb92:	7bbb      	ldrb	r3, [r7, #14]
 800fb94:	2b04      	cmp	r3, #4
 800fb96:	f040 816e 	bne.w	800fe76 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	220b      	movs	r2, #11
 800fb9e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2203      	movs	r2, #3
 800fba4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	f006 fb6a 	bl	8016290 <osMessagePut>
      break;
 800fbbc:	e15b      	b.n	800fe76 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6899      	ldr	r1, [r3, #8]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	899a      	ldrh	r2, [r3, #12]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	795b      	ldrb	r3, [r3, #5]
 800fbca:	2001      	movs	r0, #1
 800fbcc:	9000      	str	r0, [sp, #0]
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f000 f978 	bl	800fec4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fbda:	b29a      	uxth	r2, r3
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2206      	movs	r2, #6
 800fbe4:	761a      	strb	r2, [r3, #24]
      break;
 800fbe6:	e14d      	b.n	800fe84 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	795b      	ldrb	r3, [r3, #5]
 800fbec:	4619      	mov	r1, r3
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f00a f84a 	bl	8019c88 <USBH_LL_GetURBState>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fbf8:	7bbb      	ldrb	r3, [r7, #14]
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d111      	bne.n	800fc22 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2207      	movs	r2, #7
 800fc02:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2203      	movs	r2, #3
 800fc08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc18:	2200      	movs	r2, #0
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	f006 fb38 	bl	8016290 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fc20:	e12b      	b.n	800fe7a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800fc22:	7bbb      	ldrb	r3, [r7, #14]
 800fc24:	2b05      	cmp	r3, #5
 800fc26:	d113      	bne.n	800fc50 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	220c      	movs	r2, #12
 800fc2c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800fc2e:	2303      	movs	r3, #3
 800fc30:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2203      	movs	r2, #3
 800fc36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc46:	2200      	movs	r2, #0
 800fc48:	4619      	mov	r1, r3
 800fc4a:	f006 fb21 	bl	8016290 <osMessagePut>
      break;
 800fc4e:	e114      	b.n	800fe7a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fc50:	7bbb      	ldrb	r3, [r7, #14]
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	d111      	bne.n	800fc7a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2205      	movs	r2, #5
 800fc5a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2203      	movs	r2, #3
 800fc60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc70:	2200      	movs	r2, #0
 800fc72:	4619      	mov	r1, r3
 800fc74:	f006 fb0c 	bl	8016290 <osMessagePut>
      break;
 800fc78:	e0ff      	b.n	800fe7a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800fc7a:	7bbb      	ldrb	r3, [r7, #14]
 800fc7c:	2b04      	cmp	r3, #4
 800fc7e:	f040 80fc 	bne.w	800fe7a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	220b      	movs	r2, #11
 800fc86:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800fc88:	2302      	movs	r3, #2
 800fc8a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2203      	movs	r2, #3
 800fc90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fca0:	2200      	movs	r2, #0
 800fca2:	4619      	mov	r1, r3
 800fca4:	f006 faf4 	bl	8016290 <osMessagePut>
      break;
 800fca8:	e0e7      	b.n	800fe7a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	791b      	ldrb	r3, [r3, #4]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 f92b 	bl	800ff0e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2208      	movs	r2, #8
 800fcc8:	761a      	strb	r2, [r3, #24]

      break;
 800fcca:	e0db      	b.n	800fe84 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	791b      	ldrb	r3, [r3, #4]
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f009 ffd8 	bl	8019c88 <USBH_LL_GetURBState>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fcdc:	7bbb      	ldrb	r3, [r7, #14]
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d113      	bne.n	800fd0a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	220d      	movs	r2, #13
 800fce6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800fce8:	2300      	movs	r3, #0
 800fcea:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2203      	movs	r2, #3
 800fcf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fd00:	2200      	movs	r2, #0
 800fd02:	4619      	mov	r1, r3
 800fd04:	f006 fac4 	bl	8016290 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fd08:	e0b9      	b.n	800fe7e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800fd0a:	7bbb      	ldrb	r3, [r7, #14]
 800fd0c:	2b04      	cmp	r3, #4
 800fd0e:	d111      	bne.n	800fd34 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	220b      	movs	r2, #11
 800fd14:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2203      	movs	r2, #3
 800fd1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	f006 faaf 	bl	8016290 <osMessagePut>
      break;
 800fd32:	e0a4      	b.n	800fe7e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800fd34:	7bbb      	ldrb	r3, [r7, #14]
 800fd36:	2b05      	cmp	r3, #5
 800fd38:	f040 80a1 	bne.w	800fe7e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800fd3c:	2303      	movs	r3, #3
 800fd3e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2203      	movs	r2, #3
 800fd44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fd54:	2200      	movs	r2, #0
 800fd56:	4619      	mov	r1, r3
 800fd58:	f006 fa9a 	bl	8016290 <osMessagePut>
      break;
 800fd5c:	e08f      	b.n	800fe7e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	795b      	ldrb	r3, [r3, #5]
 800fd62:	2201      	movs	r2, #1
 800fd64:	9200      	str	r2, [sp, #0]
 800fd66:	2200      	movs	r2, #0
 800fd68:	2100      	movs	r1, #0
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f000 f8aa 	bl	800fec4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	220a      	movs	r2, #10
 800fd80:	761a      	strb	r2, [r3, #24]
      break;
 800fd82:	e07f      	b.n	800fe84 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	795b      	ldrb	r3, [r3, #5]
 800fd88:	4619      	mov	r1, r3
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f009 ff7c 	bl	8019c88 <USBH_LL_GetURBState>
 800fd90:	4603      	mov	r3, r0
 800fd92:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fd94:	7bbb      	ldrb	r3, [r7, #14]
 800fd96:	2b01      	cmp	r3, #1
 800fd98:	d113      	bne.n	800fdc2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	220d      	movs	r2, #13
 800fda2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2203      	movs	r2, #3
 800fda8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fdb8:	2200      	movs	r2, #0
 800fdba:	4619      	mov	r1, r3
 800fdbc:	f006 fa68 	bl	8016290 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fdc0:	e05f      	b.n	800fe82 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fdc2:	7bbb      	ldrb	r3, [r7, #14]
 800fdc4:	2b02      	cmp	r3, #2
 800fdc6:	d111      	bne.n	800fdec <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2209      	movs	r2, #9
 800fdcc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2203      	movs	r2, #3
 800fdd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fde2:	2200      	movs	r2, #0
 800fde4:	4619      	mov	r1, r3
 800fde6:	f006 fa53 	bl	8016290 <osMessagePut>
      break;
 800fdea:	e04a      	b.n	800fe82 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800fdec:	7bbb      	ldrb	r3, [r7, #14]
 800fdee:	2b04      	cmp	r3, #4
 800fdf0:	d147      	bne.n	800fe82 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	220b      	movs	r2, #11
 800fdf6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2203      	movs	r2, #3
 800fdfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	4619      	mov	r1, r3
 800fe10:	f006 fa3e 	bl	8016290 <osMessagePut>
      break;
 800fe14:	e035      	b.n	800fe82 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	7e5b      	ldrb	r3, [r3, #25]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	b2da      	uxtb	r2, r3
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	765a      	strb	r2, [r3, #25]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	7e5b      	ldrb	r3, [r3, #25]
 800fe26:	2b02      	cmp	r3, #2
 800fe28:	d806      	bhi.n	800fe38 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2201      	movs	r2, #1
 800fe34:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fe36:	e025      	b.n	800fe84 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fe3e:	2106      	movs	r1, #6
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2200      	movs	r2, #0
 800fe48:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	795b      	ldrb	r3, [r3, #5]
 800fe4e:	4619      	mov	r1, r3
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f000 f90d 	bl	8010070 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	791b      	ldrb	r3, [r3, #4]
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 f907 	bl	8010070 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2200      	movs	r2, #0
 800fe66:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fe68:	2302      	movs	r3, #2
 800fe6a:	73fb      	strb	r3, [r7, #15]
      break;
 800fe6c:	e00a      	b.n	800fe84 <USBH_HandleControl+0x484>

    default:
      break;
 800fe6e:	bf00      	nop
 800fe70:	e008      	b.n	800fe84 <USBH_HandleControl+0x484>
      break;
 800fe72:	bf00      	nop
 800fe74:	e006      	b.n	800fe84 <USBH_HandleControl+0x484>
      break;
 800fe76:	bf00      	nop
 800fe78:	e004      	b.n	800fe84 <USBH_HandleControl+0x484>
      break;
 800fe7a:	bf00      	nop
 800fe7c:	e002      	b.n	800fe84 <USBH_HandleControl+0x484>
      break;
 800fe7e:	bf00      	nop
 800fe80:	e000      	b.n	800fe84 <USBH_HandleControl+0x484>
      break;
 800fe82:	bf00      	nop
  }

  return status;
 800fe84:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3710      	adds	r7, #16
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop

0800fe90 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b088      	sub	sp, #32
 800fe94:	af04      	add	r7, sp, #16
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fe9e:	79f9      	ldrb	r1, [r7, #7]
 800fea0:	2300      	movs	r3, #0
 800fea2:	9303      	str	r3, [sp, #12]
 800fea4:	2308      	movs	r3, #8
 800fea6:	9302      	str	r3, [sp, #8]
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	9301      	str	r3, [sp, #4]
 800feac:	2300      	movs	r3, #0
 800feae:	9300      	str	r3, [sp, #0]
 800feb0:	2300      	movs	r3, #0
 800feb2:	2200      	movs	r2, #0
 800feb4:	68f8      	ldr	r0, [r7, #12]
 800feb6:	f009 feb6 	bl	8019c26 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800feba:	2300      	movs	r3, #0
}
 800febc:	4618      	mov	r0, r3
 800febe:	3710      	adds	r7, #16
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b088      	sub	sp, #32
 800fec8:	af04      	add	r7, sp, #16
 800feca:	60f8      	str	r0, [r7, #12]
 800fecc:	60b9      	str	r1, [r7, #8]
 800fece:	4611      	mov	r1, r2
 800fed0:	461a      	mov	r2, r3
 800fed2:	460b      	mov	r3, r1
 800fed4:	80fb      	strh	r3, [r7, #6]
 800fed6:	4613      	mov	r3, r2
 800fed8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d001      	beq.n	800fee8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fee4:	2300      	movs	r3, #0
 800fee6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fee8:	7979      	ldrb	r1, [r7, #5]
 800feea:	7e3b      	ldrb	r3, [r7, #24]
 800feec:	9303      	str	r3, [sp, #12]
 800feee:	88fb      	ldrh	r3, [r7, #6]
 800fef0:	9302      	str	r3, [sp, #8]
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	9301      	str	r3, [sp, #4]
 800fef6:	2301      	movs	r3, #1
 800fef8:	9300      	str	r3, [sp, #0]
 800fefa:	2300      	movs	r3, #0
 800fefc:	2200      	movs	r2, #0
 800fefe:	68f8      	ldr	r0, [r7, #12]
 800ff00:	f009 fe91 	bl	8019c26 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ff04:	2300      	movs	r3, #0
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3710      	adds	r7, #16
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b088      	sub	sp, #32
 800ff12:	af04      	add	r7, sp, #16
 800ff14:	60f8      	str	r0, [r7, #12]
 800ff16:	60b9      	str	r1, [r7, #8]
 800ff18:	4611      	mov	r1, r2
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	80fb      	strh	r3, [r7, #6]
 800ff20:	4613      	mov	r3, r2
 800ff22:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ff24:	7979      	ldrb	r1, [r7, #5]
 800ff26:	2300      	movs	r3, #0
 800ff28:	9303      	str	r3, [sp, #12]
 800ff2a:	88fb      	ldrh	r3, [r7, #6]
 800ff2c:	9302      	str	r3, [sp, #8]
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	9301      	str	r3, [sp, #4]
 800ff32:	2301      	movs	r3, #1
 800ff34:	9300      	str	r3, [sp, #0]
 800ff36:	2300      	movs	r3, #0
 800ff38:	2201      	movs	r2, #1
 800ff3a:	68f8      	ldr	r0, [r7, #12]
 800ff3c:	f009 fe73 	bl	8019c26 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ff40:	2300      	movs	r3, #0

}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3710      	adds	r7, #16
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b088      	sub	sp, #32
 800ff4e:	af04      	add	r7, sp, #16
 800ff50:	60f8      	str	r0, [r7, #12]
 800ff52:	60b9      	str	r1, [r7, #8]
 800ff54:	4611      	mov	r1, r2
 800ff56:	461a      	mov	r2, r3
 800ff58:	460b      	mov	r3, r1
 800ff5a:	80fb      	strh	r3, [r7, #6]
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d001      	beq.n	800ff6e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ff6e:	7979      	ldrb	r1, [r7, #5]
 800ff70:	7e3b      	ldrb	r3, [r7, #24]
 800ff72:	9303      	str	r3, [sp, #12]
 800ff74:	88fb      	ldrh	r3, [r7, #6]
 800ff76:	9302      	str	r3, [sp, #8]
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	9301      	str	r3, [sp, #4]
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	9300      	str	r3, [sp, #0]
 800ff80:	2302      	movs	r3, #2
 800ff82:	2200      	movs	r2, #0
 800ff84:	68f8      	ldr	r0, [r7, #12]
 800ff86:	f009 fe4e 	bl	8019c26 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b088      	sub	sp, #32
 800ff98:	af04      	add	r7, sp, #16
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	4611      	mov	r1, r2
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	460b      	mov	r3, r1
 800ffa4:	80fb      	strh	r3, [r7, #6]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ffaa:	7979      	ldrb	r1, [r7, #5]
 800ffac:	2300      	movs	r3, #0
 800ffae:	9303      	str	r3, [sp, #12]
 800ffb0:	88fb      	ldrh	r3, [r7, #6]
 800ffb2:	9302      	str	r3, [sp, #8]
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	9301      	str	r3, [sp, #4]
 800ffb8:	2301      	movs	r3, #1
 800ffba:	9300      	str	r3, [sp, #0]
 800ffbc:	2302      	movs	r3, #2
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	68f8      	ldr	r0, [r7, #12]
 800ffc2:	f009 fe30 	bl	8019c26 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ffc6:	2300      	movs	r3, #0
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af04      	add	r7, sp, #16
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	4608      	mov	r0, r1
 800ffda:	4611      	mov	r1, r2
 800ffdc:	461a      	mov	r2, r3
 800ffde:	4603      	mov	r3, r0
 800ffe0:	70fb      	strb	r3, [r7, #3]
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	70bb      	strb	r3, [r7, #2]
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ffea:	7878      	ldrb	r0, [r7, #1]
 800ffec:	78ba      	ldrb	r2, [r7, #2]
 800ffee:	78f9      	ldrb	r1, [r7, #3]
 800fff0:	8b3b      	ldrh	r3, [r7, #24]
 800fff2:	9302      	str	r3, [sp, #8]
 800fff4:	7d3b      	ldrb	r3, [r7, #20]
 800fff6:	9301      	str	r3, [sp, #4]
 800fff8:	7c3b      	ldrb	r3, [r7, #16]
 800fffa:	9300      	str	r3, [sp, #0]
 800fffc:	4603      	mov	r3, r0
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f009 fdc3 	bl	8019b8a <USBH_LL_OpenPipe>

  return USBH_OK;
 8010004:	2300      	movs	r3, #0
}
 8010006:	4618      	mov	r0, r3
 8010008:	3708      	adds	r7, #8
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}

0801000e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801000e:	b580      	push	{r7, lr}
 8010010:	b082      	sub	sp, #8
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
 8010016:	460b      	mov	r3, r1
 8010018:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801001a:	78fb      	ldrb	r3, [r7, #3]
 801001c:	4619      	mov	r1, r3
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f009 fde2 	bl	8019be8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010024:	2300      	movs	r3, #0
}
 8010026:	4618      	mov	r0, r3
 8010028:	3708      	adds	r7, #8
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}

0801002e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801002e:	b580      	push	{r7, lr}
 8010030:	b084      	sub	sp, #16
 8010032:	af00      	add	r7, sp, #0
 8010034:	6078      	str	r0, [r7, #4]
 8010036:	460b      	mov	r3, r1
 8010038:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 f836 	bl	80100ac <USBH_GetFreePipe>
 8010040:	4603      	mov	r3, r0
 8010042:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010044:	89fb      	ldrh	r3, [r7, #14]
 8010046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801004a:	4293      	cmp	r3, r2
 801004c:	d00a      	beq.n	8010064 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801004e:	78fa      	ldrb	r2, [r7, #3]
 8010050:	89fb      	ldrh	r3, [r7, #14]
 8010052:	f003 030f 	and.w	r3, r3, #15
 8010056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801005a:	6879      	ldr	r1, [r7, #4]
 801005c:	33e0      	adds	r3, #224	; 0xe0
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	440b      	add	r3, r1
 8010062:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010064:	89fb      	ldrh	r3, [r7, #14]
 8010066:	b2db      	uxtb	r3, r3
}
 8010068:	4618      	mov	r0, r3
 801006a:	3710      	adds	r7, #16
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	460b      	mov	r3, r1
 801007a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 801007c:	78fb      	ldrb	r3, [r7, #3]
 801007e:	2b0f      	cmp	r3, #15
 8010080:	d80d      	bhi.n	801009e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010082:	78fb      	ldrb	r3, [r7, #3]
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	33e0      	adds	r3, #224	; 0xe0
 8010088:	009b      	lsls	r3, r3, #2
 801008a:	4413      	add	r3, r2
 801008c:	685a      	ldr	r2, [r3, #4]
 801008e:	78fb      	ldrb	r3, [r7, #3]
 8010090:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010094:	6879      	ldr	r1, [r7, #4]
 8010096:	33e0      	adds	r3, #224	; 0xe0
 8010098:	009b      	lsls	r3, r3, #2
 801009a:	440b      	add	r3, r1
 801009c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801009e:	2300      	movs	r3, #0
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	370c      	adds	r7, #12
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr

080100ac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80100ac:	b480      	push	{r7}
 80100ae:	b085      	sub	sp, #20
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80100b4:	2300      	movs	r3, #0
 80100b6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80100b8:	2300      	movs	r3, #0
 80100ba:	73fb      	strb	r3, [r7, #15]
 80100bc:	e00f      	b.n	80100de <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80100be:	7bfb      	ldrb	r3, [r7, #15]
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	33e0      	adds	r3, #224	; 0xe0
 80100c4:	009b      	lsls	r3, r3, #2
 80100c6:	4413      	add	r3, r2
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d102      	bne.n	80100d8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80100d2:	7bfb      	ldrb	r3, [r7, #15]
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	e007      	b.n	80100e8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80100d8:	7bfb      	ldrb	r3, [r7, #15]
 80100da:	3301      	adds	r3, #1
 80100dc:	73fb      	strb	r3, [r7, #15]
 80100de:	7bfb      	ldrb	r3, [r7, #15]
 80100e0:	2b0f      	cmp	r3, #15
 80100e2:	d9ec      	bls.n	80100be <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80100e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3714      	adds	r7, #20
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	4603      	mov	r3, r0
 80100fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80100fe:	79fb      	ldrb	r3, [r7, #7]
 8010100:	4a08      	ldr	r2, [pc, #32]	; (8010124 <disk_status+0x30>)
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	4413      	add	r3, r2
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	79fa      	ldrb	r2, [r7, #7]
 801010c:	4905      	ldr	r1, [pc, #20]	; (8010124 <disk_status+0x30>)
 801010e:	440a      	add	r2, r1
 8010110:	7a12      	ldrb	r2, [r2, #8]
 8010112:	4610      	mov	r0, r2
 8010114:	4798      	blx	r3
 8010116:	4603      	mov	r3, r0
 8010118:	73fb      	strb	r3, [r7, #15]
  return stat;
 801011a:	7bfb      	ldrb	r3, [r7, #15]
}
 801011c:	4618      	mov	r0, r3
 801011e:	3710      	adds	r7, #16
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	24002c20 	.word	0x24002c20

08010128 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b084      	sub	sp, #16
 801012c:	af00      	add	r7, sp, #0
 801012e:	4603      	mov	r3, r0
 8010130:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010132:	2300      	movs	r3, #0
 8010134:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010136:	79fb      	ldrb	r3, [r7, #7]
 8010138:	4a0d      	ldr	r2, [pc, #52]	; (8010170 <disk_initialize+0x48>)
 801013a:	5cd3      	ldrb	r3, [r2, r3]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d111      	bne.n	8010164 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010140:	79fb      	ldrb	r3, [r7, #7]
 8010142:	4a0b      	ldr	r2, [pc, #44]	; (8010170 <disk_initialize+0x48>)
 8010144:	2101      	movs	r1, #1
 8010146:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010148:	79fb      	ldrb	r3, [r7, #7]
 801014a:	4a09      	ldr	r2, [pc, #36]	; (8010170 <disk_initialize+0x48>)
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	4413      	add	r3, r2
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	79fa      	ldrb	r2, [r7, #7]
 8010156:	4906      	ldr	r1, [pc, #24]	; (8010170 <disk_initialize+0x48>)
 8010158:	440a      	add	r2, r1
 801015a:	7a12      	ldrb	r2, [r2, #8]
 801015c:	4610      	mov	r0, r2
 801015e:	4798      	blx	r3
 8010160:	4603      	mov	r3, r0
 8010162:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010164:	7bfb      	ldrb	r3, [r7, #15]
}
 8010166:	4618      	mov	r0, r3
 8010168:	3710      	adds	r7, #16
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop
 8010170:	24002c20 	.word	0x24002c20

08010174 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010174:	b590      	push	{r4, r7, lr}
 8010176:	b087      	sub	sp, #28
 8010178:	af00      	add	r7, sp, #0
 801017a:	60b9      	str	r1, [r7, #8]
 801017c:	607a      	str	r2, [r7, #4]
 801017e:	603b      	str	r3, [r7, #0]
 8010180:	4603      	mov	r3, r0
 8010182:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010184:	7bfb      	ldrb	r3, [r7, #15]
 8010186:	4a0a      	ldr	r2, [pc, #40]	; (80101b0 <disk_read+0x3c>)
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	4413      	add	r3, r2
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	689c      	ldr	r4, [r3, #8]
 8010190:	7bfb      	ldrb	r3, [r7, #15]
 8010192:	4a07      	ldr	r2, [pc, #28]	; (80101b0 <disk_read+0x3c>)
 8010194:	4413      	add	r3, r2
 8010196:	7a18      	ldrb	r0, [r3, #8]
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	687a      	ldr	r2, [r7, #4]
 801019c:	68b9      	ldr	r1, [r7, #8]
 801019e:	47a0      	blx	r4
 80101a0:	4603      	mov	r3, r0
 80101a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80101a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	371c      	adds	r7, #28
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd90      	pop	{r4, r7, pc}
 80101ae:	bf00      	nop
 80101b0:	24002c20 	.word	0x24002c20

080101b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80101b4:	b590      	push	{r4, r7, lr}
 80101b6:	b087      	sub	sp, #28
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60b9      	str	r1, [r7, #8]
 80101bc:	607a      	str	r2, [r7, #4]
 80101be:	603b      	str	r3, [r7, #0]
 80101c0:	4603      	mov	r3, r0
 80101c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80101c4:	7bfb      	ldrb	r3, [r7, #15]
 80101c6:	4a0a      	ldr	r2, [pc, #40]	; (80101f0 <disk_write+0x3c>)
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	4413      	add	r3, r2
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	68dc      	ldr	r4, [r3, #12]
 80101d0:	7bfb      	ldrb	r3, [r7, #15]
 80101d2:	4a07      	ldr	r2, [pc, #28]	; (80101f0 <disk_write+0x3c>)
 80101d4:	4413      	add	r3, r2
 80101d6:	7a18      	ldrb	r0, [r3, #8]
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	68b9      	ldr	r1, [r7, #8]
 80101de:	47a0      	blx	r4
 80101e0:	4603      	mov	r3, r0
 80101e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80101e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	371c      	adds	r7, #28
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd90      	pop	{r4, r7, pc}
 80101ee:	bf00      	nop
 80101f0:	24002c20 	.word	0x24002c20

080101f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	4603      	mov	r3, r0
 80101fc:	603a      	str	r2, [r7, #0]
 80101fe:	71fb      	strb	r3, [r7, #7]
 8010200:	460b      	mov	r3, r1
 8010202:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010204:	79fb      	ldrb	r3, [r7, #7]
 8010206:	4a09      	ldr	r2, [pc, #36]	; (801022c <disk_ioctl+0x38>)
 8010208:	009b      	lsls	r3, r3, #2
 801020a:	4413      	add	r3, r2
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	691b      	ldr	r3, [r3, #16]
 8010210:	79fa      	ldrb	r2, [r7, #7]
 8010212:	4906      	ldr	r1, [pc, #24]	; (801022c <disk_ioctl+0x38>)
 8010214:	440a      	add	r2, r1
 8010216:	7a10      	ldrb	r0, [r2, #8]
 8010218:	79b9      	ldrb	r1, [r7, #6]
 801021a:	683a      	ldr	r2, [r7, #0]
 801021c:	4798      	blx	r3
 801021e:	4603      	mov	r3, r0
 8010220:	73fb      	strb	r3, [r7, #15]
  return res;
 8010222:	7bfb      	ldrb	r3, [r7, #15]
}
 8010224:	4618      	mov	r0, r3
 8010226:	3710      	adds	r7, #16
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}
 801022c:	24002c20 	.word	0x24002c20

08010230 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	3301      	adds	r3, #1
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010240:	89fb      	ldrh	r3, [r7, #14]
 8010242:	021b      	lsls	r3, r3, #8
 8010244:	b21a      	sxth	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	b21b      	sxth	r3, r3
 801024c:	4313      	orrs	r3, r2
 801024e:	b21b      	sxth	r3, r3
 8010250:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010252:	89fb      	ldrh	r3, [r7, #14]
}
 8010254:	4618      	mov	r0, r3
 8010256:	3714      	adds	r7, #20
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr

08010260 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010260:	b480      	push	{r7}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	3303      	adds	r3, #3
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	021b      	lsls	r3, r3, #8
 8010274:	687a      	ldr	r2, [r7, #4]
 8010276:	3202      	adds	r2, #2
 8010278:	7812      	ldrb	r2, [r2, #0]
 801027a:	4313      	orrs	r3, r2
 801027c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	021b      	lsls	r3, r3, #8
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	3201      	adds	r2, #1
 8010286:	7812      	ldrb	r2, [r2, #0]
 8010288:	4313      	orrs	r3, r2
 801028a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	021b      	lsls	r3, r3, #8
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	7812      	ldrb	r2, [r2, #0]
 8010294:	4313      	orrs	r3, r2
 8010296:	60fb      	str	r3, [r7, #12]
	return rv;
 8010298:	68fb      	ldr	r3, [r7, #12]
}
 801029a:	4618      	mov	r0, r3
 801029c:	3714      	adds	r7, #20
 801029e:	46bd      	mov	sp, r7
 80102a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a4:	4770      	bx	lr

080102a6 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80102a6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80102aa:	b09d      	sub	sp, #116	; 0x74
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 80102b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102b2:	3307      	adds	r3, #7
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	b2db      	uxtb	r3, r3
 80102b8:	2200      	movs	r2, #0
 80102ba:	469a      	mov	sl, r3
 80102bc:	4693      	mov	fp, r2
 80102be:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 80102c2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80102c6:	f04f 0000 	mov.w	r0, #0
 80102ca:	f04f 0100 	mov.w	r1, #0
 80102ce:	0219      	lsls	r1, r3, #8
 80102d0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80102d4:	0210      	lsls	r0, r2, #8
 80102d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102d8:	3306      	adds	r3, #6
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	2200      	movs	r2, #0
 80102e0:	461c      	mov	r4, r3
 80102e2:	4615      	mov	r5, r2
 80102e4:	ea40 0804 	orr.w	r8, r0, r4
 80102e8:	ea41 0905 	orr.w	r9, r1, r5
 80102ec:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 80102f0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80102f4:	f04f 0000 	mov.w	r0, #0
 80102f8:	f04f 0100 	mov.w	r1, #0
 80102fc:	0219      	lsls	r1, r3, #8
 80102fe:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010302:	0210      	lsls	r0, r2, #8
 8010304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010306:	3305      	adds	r3, #5
 8010308:	781b      	ldrb	r3, [r3, #0]
 801030a:	b2db      	uxtb	r3, r3
 801030c:	2200      	movs	r2, #0
 801030e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010310:	65fa      	str	r2, [r7, #92]	; 0x5c
 8010312:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8010316:	4623      	mov	r3, r4
 8010318:	4303      	orrs	r3, r0
 801031a:	62bb      	str	r3, [r7, #40]	; 0x28
 801031c:	462b      	mov	r3, r5
 801031e:	430b      	orrs	r3, r1
 8010320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010322:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8010326:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 801032a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801032e:	f04f 0000 	mov.w	r0, #0
 8010332:	f04f 0100 	mov.w	r1, #0
 8010336:	0219      	lsls	r1, r3, #8
 8010338:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801033c:	0210      	lsls	r0, r2, #8
 801033e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010340:	3304      	adds	r3, #4
 8010342:	781b      	ldrb	r3, [r3, #0]
 8010344:	b2db      	uxtb	r3, r3
 8010346:	2200      	movs	r2, #0
 8010348:	653b      	str	r3, [r7, #80]	; 0x50
 801034a:	657a      	str	r2, [r7, #84]	; 0x54
 801034c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8010350:	4623      	mov	r3, r4
 8010352:	4303      	orrs	r3, r0
 8010354:	623b      	str	r3, [r7, #32]
 8010356:	462b      	mov	r3, r5
 8010358:	430b      	orrs	r3, r1
 801035a:	627b      	str	r3, [r7, #36]	; 0x24
 801035c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010360:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8010364:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010368:	f04f 0000 	mov.w	r0, #0
 801036c:	f04f 0100 	mov.w	r1, #0
 8010370:	0219      	lsls	r1, r3, #8
 8010372:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010376:	0210      	lsls	r0, r2, #8
 8010378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801037a:	3303      	adds	r3, #3
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	b2db      	uxtb	r3, r3
 8010380:	2200      	movs	r2, #0
 8010382:	64bb      	str	r3, [r7, #72]	; 0x48
 8010384:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010386:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 801038a:	4623      	mov	r3, r4
 801038c:	4303      	orrs	r3, r0
 801038e:	61bb      	str	r3, [r7, #24]
 8010390:	462b      	mov	r3, r5
 8010392:	430b      	orrs	r3, r1
 8010394:	61fb      	str	r3, [r7, #28]
 8010396:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801039a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 801039e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80103a2:	f04f 0000 	mov.w	r0, #0
 80103a6:	f04f 0100 	mov.w	r1, #0
 80103aa:	0219      	lsls	r1, r3, #8
 80103ac:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80103b0:	0210      	lsls	r0, r2, #8
 80103b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103b4:	3302      	adds	r3, #2
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	b2db      	uxtb	r3, r3
 80103ba:	2200      	movs	r2, #0
 80103bc:	643b      	str	r3, [r7, #64]	; 0x40
 80103be:	647a      	str	r2, [r7, #68]	; 0x44
 80103c0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80103c4:	4623      	mov	r3, r4
 80103c6:	4303      	orrs	r3, r0
 80103c8:	613b      	str	r3, [r7, #16]
 80103ca:	462b      	mov	r3, r5
 80103cc:	430b      	orrs	r3, r1
 80103ce:	617b      	str	r3, [r7, #20]
 80103d0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80103d4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 80103d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80103dc:	f04f 0200 	mov.w	r2, #0
 80103e0:	f04f 0300 	mov.w	r3, #0
 80103e4:	020b      	lsls	r3, r1, #8
 80103e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80103ea:	0202      	lsls	r2, r0, #8
 80103ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80103ee:	3101      	adds	r1, #1
 80103f0:	7809      	ldrb	r1, [r1, #0]
 80103f2:	b2c9      	uxtb	r1, r1
 80103f4:	2000      	movs	r0, #0
 80103f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80103f8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80103fa:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80103fe:	4621      	mov	r1, r4
 8010400:	4311      	orrs	r1, r2
 8010402:	60b9      	str	r1, [r7, #8]
 8010404:	4629      	mov	r1, r5
 8010406:	4319      	orrs	r1, r3
 8010408:	60f9      	str	r1, [r7, #12]
 801040a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801040e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 8010412:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010416:	f04f 0200 	mov.w	r2, #0
 801041a:	f04f 0300 	mov.w	r3, #0
 801041e:	020b      	lsls	r3, r1, #8
 8010420:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010424:	0202      	lsls	r2, r0, #8
 8010426:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010428:	7809      	ldrb	r1, [r1, #0]
 801042a:	b2c9      	uxtb	r1, r1
 801042c:	2000      	movs	r0, #0
 801042e:	6339      	str	r1, [r7, #48]	; 0x30
 8010430:	6378      	str	r0, [r7, #52]	; 0x34
 8010432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8010436:	4621      	mov	r1, r4
 8010438:	4311      	orrs	r1, r2
 801043a:	6039      	str	r1, [r7, #0]
 801043c:	4629      	mov	r1, r5
 801043e:	4319      	orrs	r1, r3
 8010440:	6079      	str	r1, [r7, #4]
 8010442:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010446:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 801044a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 801044e:	4610      	mov	r0, r2
 8010450:	4619      	mov	r1, r3
 8010452:	3774      	adds	r7, #116	; 0x74
 8010454:	46bd      	mov	sp, r7
 8010456:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801045a:	4770      	bx	lr

0801045c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801045c:	b480      	push	{r7}
 801045e:	b083      	sub	sp, #12
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	460b      	mov	r3, r1
 8010466:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	1c5a      	adds	r2, r3, #1
 801046c:	607a      	str	r2, [r7, #4]
 801046e:	887a      	ldrh	r2, [r7, #2]
 8010470:	b2d2      	uxtb	r2, r2
 8010472:	701a      	strb	r2, [r3, #0]
 8010474:	887b      	ldrh	r3, [r7, #2]
 8010476:	0a1b      	lsrs	r3, r3, #8
 8010478:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	1c5a      	adds	r2, r3, #1
 801047e:	607a      	str	r2, [r7, #4]
 8010480:	887a      	ldrh	r2, [r7, #2]
 8010482:	b2d2      	uxtb	r2, r2
 8010484:	701a      	strb	r2, [r3, #0]
}
 8010486:	bf00      	nop
 8010488:	370c      	adds	r7, #12
 801048a:	46bd      	mov	sp, r7
 801048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010490:	4770      	bx	lr

08010492 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010492:	b480      	push	{r7}
 8010494:	b083      	sub	sp, #12
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
 801049a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	1c5a      	adds	r2, r3, #1
 80104a0:	607a      	str	r2, [r7, #4]
 80104a2:	683a      	ldr	r2, [r7, #0]
 80104a4:	b2d2      	uxtb	r2, r2
 80104a6:	701a      	strb	r2, [r3, #0]
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	0a1b      	lsrs	r3, r3, #8
 80104ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	1c5a      	adds	r2, r3, #1
 80104b2:	607a      	str	r2, [r7, #4]
 80104b4:	683a      	ldr	r2, [r7, #0]
 80104b6:	b2d2      	uxtb	r2, r2
 80104b8:	701a      	strb	r2, [r3, #0]
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	0a1b      	lsrs	r3, r3, #8
 80104be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	1c5a      	adds	r2, r3, #1
 80104c4:	607a      	str	r2, [r7, #4]
 80104c6:	683a      	ldr	r2, [r7, #0]
 80104c8:	b2d2      	uxtb	r2, r2
 80104ca:	701a      	strb	r2, [r3, #0]
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	0a1b      	lsrs	r3, r3, #8
 80104d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	1c5a      	adds	r2, r3, #1
 80104d6:	607a      	str	r2, [r7, #4]
 80104d8:	683a      	ldr	r2, [r7, #0]
 80104da:	b2d2      	uxtb	r2, r2
 80104dc:	701a      	strb	r2, [r3, #0]
}
 80104de:	bf00      	nop
 80104e0:	370c      	adds	r7, #12
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr

080104ea <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80104ea:	b480      	push	{r7}
 80104ec:	b085      	sub	sp, #20
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	60f8      	str	r0, [r7, #12]
 80104f2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	1c5a      	adds	r2, r3, #1
 80104fa:	60fa      	str	r2, [r7, #12]
 80104fc:	783a      	ldrb	r2, [r7, #0]
 80104fe:	701a      	strb	r2, [r3, #0]
 8010500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010504:	f04f 0200 	mov.w	r2, #0
 8010508:	f04f 0300 	mov.w	r3, #0
 801050c:	0a02      	lsrs	r2, r0, #8
 801050e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010512:	0a0b      	lsrs	r3, r1, #8
 8010514:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	1c5a      	adds	r2, r3, #1
 801051c:	60fa      	str	r2, [r7, #12]
 801051e:	783a      	ldrb	r2, [r7, #0]
 8010520:	701a      	strb	r2, [r3, #0]
 8010522:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010526:	f04f 0200 	mov.w	r2, #0
 801052a:	f04f 0300 	mov.w	r3, #0
 801052e:	0a02      	lsrs	r2, r0, #8
 8010530:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010534:	0a0b      	lsrs	r3, r1, #8
 8010536:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	1c5a      	adds	r2, r3, #1
 801053e:	60fa      	str	r2, [r7, #12]
 8010540:	783a      	ldrb	r2, [r7, #0]
 8010542:	701a      	strb	r2, [r3, #0]
 8010544:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010548:	f04f 0200 	mov.w	r2, #0
 801054c:	f04f 0300 	mov.w	r3, #0
 8010550:	0a02      	lsrs	r2, r0, #8
 8010552:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010556:	0a0b      	lsrs	r3, r1, #8
 8010558:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	1c5a      	adds	r2, r3, #1
 8010560:	60fa      	str	r2, [r7, #12]
 8010562:	783a      	ldrb	r2, [r7, #0]
 8010564:	701a      	strb	r2, [r3, #0]
 8010566:	e9d7 0100 	ldrd	r0, r1, [r7]
 801056a:	f04f 0200 	mov.w	r2, #0
 801056e:	f04f 0300 	mov.w	r3, #0
 8010572:	0a02      	lsrs	r2, r0, #8
 8010574:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010578:	0a0b      	lsrs	r3, r1, #8
 801057a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	1c5a      	adds	r2, r3, #1
 8010582:	60fa      	str	r2, [r7, #12]
 8010584:	783a      	ldrb	r2, [r7, #0]
 8010586:	701a      	strb	r2, [r3, #0]
 8010588:	e9d7 0100 	ldrd	r0, r1, [r7]
 801058c:	f04f 0200 	mov.w	r2, #0
 8010590:	f04f 0300 	mov.w	r3, #0
 8010594:	0a02      	lsrs	r2, r0, #8
 8010596:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801059a:	0a0b      	lsrs	r3, r1, #8
 801059c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	1c5a      	adds	r2, r3, #1
 80105a4:	60fa      	str	r2, [r7, #12]
 80105a6:	783a      	ldrb	r2, [r7, #0]
 80105a8:	701a      	strb	r2, [r3, #0]
 80105aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80105ae:	f04f 0200 	mov.w	r2, #0
 80105b2:	f04f 0300 	mov.w	r3, #0
 80105b6:	0a02      	lsrs	r2, r0, #8
 80105b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80105bc:	0a0b      	lsrs	r3, r1, #8
 80105be:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	1c5a      	adds	r2, r3, #1
 80105c6:	60fa      	str	r2, [r7, #12]
 80105c8:	783a      	ldrb	r2, [r7, #0]
 80105ca:	701a      	strb	r2, [r3, #0]
 80105cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80105d0:	f04f 0200 	mov.w	r2, #0
 80105d4:	f04f 0300 	mov.w	r3, #0
 80105d8:	0a02      	lsrs	r2, r0, #8
 80105da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80105de:	0a0b      	lsrs	r3, r1, #8
 80105e0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	1c5a      	adds	r2, r3, #1
 80105e8:	60fa      	str	r2, [r7, #12]
 80105ea:	783a      	ldrb	r2, [r7, #0]
 80105ec:	701a      	strb	r2, [r3, #0]
}
 80105ee:	bf00      	nop
 80105f0:	3714      	adds	r7, #20
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr

080105fa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80105fa:	b480      	push	{r7}
 80105fc:	b087      	sub	sp, #28
 80105fe:	af00      	add	r7, sp, #0
 8010600:	60f8      	str	r0, [r7, #12]
 8010602:	60b9      	str	r1, [r7, #8]
 8010604:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00d      	beq.n	8010630 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010614:	693a      	ldr	r2, [r7, #16]
 8010616:	1c53      	adds	r3, r2, #1
 8010618:	613b      	str	r3, [r7, #16]
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	1c59      	adds	r1, r3, #1
 801061e:	6179      	str	r1, [r7, #20]
 8010620:	7812      	ldrb	r2, [r2, #0]
 8010622:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	3b01      	subs	r3, #1
 8010628:	607b      	str	r3, [r7, #4]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d1f1      	bne.n	8010614 <mem_cpy+0x1a>
	}
}
 8010630:	bf00      	nop
 8010632:	371c      	adds	r7, #28
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801063c:	b480      	push	{r7}
 801063e:	b087      	sub	sp, #28
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	1c5a      	adds	r2, r3, #1
 8010650:	617a      	str	r2, [r7, #20]
 8010652:	68ba      	ldr	r2, [r7, #8]
 8010654:	b2d2      	uxtb	r2, r2
 8010656:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	3b01      	subs	r3, #1
 801065c:	607b      	str	r3, [r7, #4]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d1f3      	bne.n	801064c <mem_set+0x10>
}
 8010664:	bf00      	nop
 8010666:	bf00      	nop
 8010668:	371c      	adds	r7, #28
 801066a:	46bd      	mov	sp, r7
 801066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010670:	4770      	bx	lr

08010672 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010672:	b480      	push	{r7}
 8010674:	b089      	sub	sp, #36	; 0x24
 8010676:	af00      	add	r7, sp, #0
 8010678:	60f8      	str	r0, [r7, #12]
 801067a:	60b9      	str	r1, [r7, #8]
 801067c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	61fb      	str	r3, [r7, #28]
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010686:	2300      	movs	r3, #0
 8010688:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801068a:	69fb      	ldr	r3, [r7, #28]
 801068c:	1c5a      	adds	r2, r3, #1
 801068e:	61fa      	str	r2, [r7, #28]
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	4619      	mov	r1, r3
 8010694:	69bb      	ldr	r3, [r7, #24]
 8010696:	1c5a      	adds	r2, r3, #1
 8010698:	61ba      	str	r2, [r7, #24]
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	1acb      	subs	r3, r1, r3
 801069e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	3b01      	subs	r3, #1
 80106a4:	607b      	str	r3, [r7, #4]
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d002      	beq.n	80106b2 <mem_cmp+0x40>
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d0eb      	beq.n	801068a <mem_cmp+0x18>

	return r;
 80106b2:	697b      	ldr	r3, [r7, #20]
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3724      	adds	r7, #36	; 0x24
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr

080106c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80106c0:	b480      	push	{r7}
 80106c2:	b083      	sub	sp, #12
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80106ca:	e002      	b.n	80106d2 <chk_chr+0x12>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	3301      	adds	r3, #1
 80106d0:	607b      	str	r3, [r7, #4]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d005      	beq.n	80106e6 <chk_chr+0x26>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	461a      	mov	r2, r3
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d1f2      	bne.n	80106cc <chk_chr+0xc>
	return *str;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	781b      	ldrb	r3, [r3, #0]
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	370c      	adds	r7, #12
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr

080106f6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b082      	sub	sp, #8
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d009      	beq.n	8010718 <lock_fs+0x22>
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	699b      	ldr	r3, [r3, #24]
 8010708:	4618      	mov	r0, r3
 801070a:	f005 fb36 	bl	8015d7a <ff_req_grant>
 801070e:	4603      	mov	r3, r0
 8010710:	2b00      	cmp	r3, #0
 8010712:	d001      	beq.n	8010718 <lock_fs+0x22>
 8010714:	2301      	movs	r3, #1
 8010716:	e000      	b.n	801071a <lock_fs+0x24>
 8010718:	2300      	movs	r3, #0
}
 801071a:	4618      	mov	r0, r3
 801071c:	3708      	adds	r7, #8
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}

08010722 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8010722:	b580      	push	{r7, lr}
 8010724:	b082      	sub	sp, #8
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
 801072a:	460b      	mov	r3, r1
 801072c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d00d      	beq.n	8010750 <unlock_fs+0x2e>
 8010734:	78fb      	ldrb	r3, [r7, #3]
 8010736:	2b0c      	cmp	r3, #12
 8010738:	d00a      	beq.n	8010750 <unlock_fs+0x2e>
 801073a:	78fb      	ldrb	r3, [r7, #3]
 801073c:	2b0b      	cmp	r3, #11
 801073e:	d007      	beq.n	8010750 <unlock_fs+0x2e>
 8010740:	78fb      	ldrb	r3, [r7, #3]
 8010742:	2b0f      	cmp	r3, #15
 8010744:	d004      	beq.n	8010750 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	699b      	ldr	r3, [r3, #24]
 801074a:	4618      	mov	r0, r3
 801074c:	f005 fb2a 	bl	8015da4 <ff_rel_grant>
	}
}
 8010750:	bf00      	nop
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010758:	b480      	push	{r7}
 801075a:	b085      	sub	sp, #20
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010762:	2300      	movs	r3, #0
 8010764:	60bb      	str	r3, [r7, #8]
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	60fb      	str	r3, [r7, #12]
 801076a:	e029      	b.n	80107c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801076c:	4a27      	ldr	r2, [pc, #156]	; (801080c <chk_lock+0xb4>)
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	011b      	lsls	r3, r3, #4
 8010772:	4413      	add	r3, r2
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d01d      	beq.n	80107b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801077a:	4a24      	ldr	r2, [pc, #144]	; (801080c <chk_lock+0xb4>)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	011b      	lsls	r3, r3, #4
 8010780:	4413      	add	r3, r2
 8010782:	681a      	ldr	r2, [r3, #0]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	429a      	cmp	r2, r3
 801078a:	d116      	bne.n	80107ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801078c:	4a1f      	ldr	r2, [pc, #124]	; (801080c <chk_lock+0xb4>)
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	011b      	lsls	r3, r3, #4
 8010792:	4413      	add	r3, r2
 8010794:	3304      	adds	r3, #4
 8010796:	681a      	ldr	r2, [r3, #0]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801079c:	429a      	cmp	r2, r3
 801079e:	d10c      	bne.n	80107ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80107a0:	4a1a      	ldr	r2, [pc, #104]	; (801080c <chk_lock+0xb4>)
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	011b      	lsls	r3, r3, #4
 80107a6:	4413      	add	r3, r2
 80107a8:	3308      	adds	r3, #8
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d102      	bne.n	80107ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80107b4:	e007      	b.n	80107c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80107b6:	2301      	movs	r3, #1
 80107b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	3301      	adds	r3, #1
 80107be:	60fb      	str	r3, [r7, #12]
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d9d2      	bls.n	801076c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2b02      	cmp	r3, #2
 80107ca:	d109      	bne.n	80107e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d102      	bne.n	80107d8 <chk_lock+0x80>
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	2b02      	cmp	r3, #2
 80107d6:	d101      	bne.n	80107dc <chk_lock+0x84>
 80107d8:	2300      	movs	r3, #0
 80107da:	e010      	b.n	80107fe <chk_lock+0xa6>
 80107dc:	2312      	movs	r3, #18
 80107de:	e00e      	b.n	80107fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d108      	bne.n	80107f8 <chk_lock+0xa0>
 80107e6:	4a09      	ldr	r2, [pc, #36]	; (801080c <chk_lock+0xb4>)
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	011b      	lsls	r3, r3, #4
 80107ec:	4413      	add	r3, r2
 80107ee:	330c      	adds	r3, #12
 80107f0:	881b      	ldrh	r3, [r3, #0]
 80107f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107f6:	d101      	bne.n	80107fc <chk_lock+0xa4>
 80107f8:	2310      	movs	r3, #16
 80107fa:	e000      	b.n	80107fe <chk_lock+0xa6>
 80107fc:	2300      	movs	r3, #0
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3714      	adds	r7, #20
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	24002c00 	.word	0x24002c00

08010810 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010816:	2300      	movs	r3, #0
 8010818:	607b      	str	r3, [r7, #4]
 801081a:	e002      	b.n	8010822 <enq_lock+0x12>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	3301      	adds	r3, #1
 8010820:	607b      	str	r3, [r7, #4]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d806      	bhi.n	8010836 <enq_lock+0x26>
 8010828:	4a09      	ldr	r2, [pc, #36]	; (8010850 <enq_lock+0x40>)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	011b      	lsls	r3, r3, #4
 801082e:	4413      	add	r3, r2
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d1f2      	bne.n	801081c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2b02      	cmp	r3, #2
 801083a:	bf14      	ite	ne
 801083c:	2301      	movne	r3, #1
 801083e:	2300      	moveq	r3, #0
 8010840:	b2db      	uxtb	r3, r3
}
 8010842:	4618      	mov	r0, r3
 8010844:	370c      	adds	r7, #12
 8010846:	46bd      	mov	sp, r7
 8010848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084c:	4770      	bx	lr
 801084e:	bf00      	nop
 8010850:	24002c00 	.word	0x24002c00

08010854 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010854:	b480      	push	{r7}
 8010856:	b085      	sub	sp, #20
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801085e:	2300      	movs	r3, #0
 8010860:	60fb      	str	r3, [r7, #12]
 8010862:	e01f      	b.n	80108a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010864:	4a41      	ldr	r2, [pc, #260]	; (801096c <inc_lock+0x118>)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	011b      	lsls	r3, r3, #4
 801086a:	4413      	add	r3, r2
 801086c:	681a      	ldr	r2, [r3, #0]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	429a      	cmp	r2, r3
 8010874:	d113      	bne.n	801089e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010876:	4a3d      	ldr	r2, [pc, #244]	; (801096c <inc_lock+0x118>)
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	011b      	lsls	r3, r3, #4
 801087c:	4413      	add	r3, r2
 801087e:	3304      	adds	r3, #4
 8010880:	681a      	ldr	r2, [r3, #0]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010886:	429a      	cmp	r2, r3
 8010888:	d109      	bne.n	801089e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801088a:	4a38      	ldr	r2, [pc, #224]	; (801096c <inc_lock+0x118>)
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	011b      	lsls	r3, r3, #4
 8010890:	4413      	add	r3, r2
 8010892:	3308      	adds	r3, #8
 8010894:	681a      	ldr	r2, [r3, #0]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 801089a:	429a      	cmp	r2, r3
 801089c:	d006      	beq.n	80108ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	3301      	adds	r3, #1
 80108a2:	60fb      	str	r3, [r7, #12]
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d9dc      	bls.n	8010864 <inc_lock+0x10>
 80108aa:	e000      	b.n	80108ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80108ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2b02      	cmp	r3, #2
 80108b2:	d132      	bne.n	801091a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80108b4:	2300      	movs	r3, #0
 80108b6:	60fb      	str	r3, [r7, #12]
 80108b8:	e002      	b.n	80108c0 <inc_lock+0x6c>
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	3301      	adds	r3, #1
 80108be:	60fb      	str	r3, [r7, #12]
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2b01      	cmp	r3, #1
 80108c4:	d806      	bhi.n	80108d4 <inc_lock+0x80>
 80108c6:	4a29      	ldr	r2, [pc, #164]	; (801096c <inc_lock+0x118>)
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	011b      	lsls	r3, r3, #4
 80108cc:	4413      	add	r3, r2
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d1f2      	bne.n	80108ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2b02      	cmp	r3, #2
 80108d8:	d101      	bne.n	80108de <inc_lock+0x8a>
 80108da:	2300      	movs	r3, #0
 80108dc:	e040      	b.n	8010960 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	4922      	ldr	r1, [pc, #136]	; (801096c <inc_lock+0x118>)
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	011b      	lsls	r3, r3, #4
 80108e8:	440b      	add	r3, r1
 80108ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	689a      	ldr	r2, [r3, #8]
 80108f0:	491e      	ldr	r1, [pc, #120]	; (801096c <inc_lock+0x118>)
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	011b      	lsls	r3, r3, #4
 80108f6:	440b      	add	r3, r1
 80108f8:	3304      	adds	r3, #4
 80108fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010900:	491a      	ldr	r1, [pc, #104]	; (801096c <inc_lock+0x118>)
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	011b      	lsls	r3, r3, #4
 8010906:	440b      	add	r3, r1
 8010908:	3308      	adds	r3, #8
 801090a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801090c:	4a17      	ldr	r2, [pc, #92]	; (801096c <inc_lock+0x118>)
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	011b      	lsls	r3, r3, #4
 8010912:	4413      	add	r3, r2
 8010914:	330c      	adds	r3, #12
 8010916:	2200      	movs	r2, #0
 8010918:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d009      	beq.n	8010934 <inc_lock+0xe0>
 8010920:	4a12      	ldr	r2, [pc, #72]	; (801096c <inc_lock+0x118>)
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	011b      	lsls	r3, r3, #4
 8010926:	4413      	add	r3, r2
 8010928:	330c      	adds	r3, #12
 801092a:	881b      	ldrh	r3, [r3, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d001      	beq.n	8010934 <inc_lock+0xe0>
 8010930:	2300      	movs	r3, #0
 8010932:	e015      	b.n	8010960 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d108      	bne.n	801094c <inc_lock+0xf8>
 801093a:	4a0c      	ldr	r2, [pc, #48]	; (801096c <inc_lock+0x118>)
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	011b      	lsls	r3, r3, #4
 8010940:	4413      	add	r3, r2
 8010942:	330c      	adds	r3, #12
 8010944:	881b      	ldrh	r3, [r3, #0]
 8010946:	3301      	adds	r3, #1
 8010948:	b29a      	uxth	r2, r3
 801094a:	e001      	b.n	8010950 <inc_lock+0xfc>
 801094c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010950:	4906      	ldr	r1, [pc, #24]	; (801096c <inc_lock+0x118>)
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	011b      	lsls	r3, r3, #4
 8010956:	440b      	add	r3, r1
 8010958:	330c      	adds	r3, #12
 801095a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	3301      	adds	r3, #1
}
 8010960:	4618      	mov	r0, r3
 8010962:	3714      	adds	r7, #20
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr
 801096c:	24002c00 	.word	0x24002c00

08010970 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010970:	b480      	push	{r7}
 8010972:	b085      	sub	sp, #20
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	3b01      	subs	r3, #1
 801097c:	607b      	str	r3, [r7, #4]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2b01      	cmp	r3, #1
 8010982:	d825      	bhi.n	80109d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8010984:	4a17      	ldr	r2, [pc, #92]	; (80109e4 <dec_lock+0x74>)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	011b      	lsls	r3, r3, #4
 801098a:	4413      	add	r3, r2
 801098c:	330c      	adds	r3, #12
 801098e:	881b      	ldrh	r3, [r3, #0]
 8010990:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010992:	89fb      	ldrh	r3, [r7, #14]
 8010994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010998:	d101      	bne.n	801099e <dec_lock+0x2e>
 801099a:	2300      	movs	r3, #0
 801099c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801099e:	89fb      	ldrh	r3, [r7, #14]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d002      	beq.n	80109aa <dec_lock+0x3a>
 80109a4:	89fb      	ldrh	r3, [r7, #14]
 80109a6:	3b01      	subs	r3, #1
 80109a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80109aa:	4a0e      	ldr	r2, [pc, #56]	; (80109e4 <dec_lock+0x74>)
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	011b      	lsls	r3, r3, #4
 80109b0:	4413      	add	r3, r2
 80109b2:	330c      	adds	r3, #12
 80109b4:	89fa      	ldrh	r2, [r7, #14]
 80109b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80109b8:	89fb      	ldrh	r3, [r7, #14]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d105      	bne.n	80109ca <dec_lock+0x5a>
 80109be:	4a09      	ldr	r2, [pc, #36]	; (80109e4 <dec_lock+0x74>)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	011b      	lsls	r3, r3, #4
 80109c4:	4413      	add	r3, r2
 80109c6:	2200      	movs	r2, #0
 80109c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80109ca:	2300      	movs	r3, #0
 80109cc:	737b      	strb	r3, [r7, #13]
 80109ce:	e001      	b.n	80109d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80109d0:	2302      	movs	r3, #2
 80109d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80109d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3714      	adds	r7, #20
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr
 80109e2:	bf00      	nop
 80109e4:	24002c00 	.word	0x24002c00

080109e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b085      	sub	sp, #20
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80109f0:	2300      	movs	r3, #0
 80109f2:	60fb      	str	r3, [r7, #12]
 80109f4:	e010      	b.n	8010a18 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80109f6:	4a0d      	ldr	r2, [pc, #52]	; (8010a2c <clear_lock+0x44>)
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	011b      	lsls	r3, r3, #4
 80109fc:	4413      	add	r3, r2
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d105      	bne.n	8010a12 <clear_lock+0x2a>
 8010a06:	4a09      	ldr	r2, [pc, #36]	; (8010a2c <clear_lock+0x44>)
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	011b      	lsls	r3, r3, #4
 8010a0c:	4413      	add	r3, r2
 8010a0e:	2200      	movs	r2, #0
 8010a10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	3301      	adds	r3, #1
 8010a16:	60fb      	str	r3, [r7, #12]
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	2b01      	cmp	r3, #1
 8010a1c:	d9eb      	bls.n	80109f6 <clear_lock+0xe>
	}
}
 8010a1e:	bf00      	nop
 8010a20:	bf00      	nop
 8010a22:	3714      	adds	r7, #20
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr
 8010a2c:	24002c00 	.word	0x24002c00

08010a30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b086      	sub	sp, #24
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	78db      	ldrb	r3, [r3, #3]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d034      	beq.n	8010aae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a48:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	7858      	ldrb	r0, [r3, #1]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8010a54:	2301      	movs	r3, #1
 8010a56:	697a      	ldr	r2, [r7, #20]
 8010a58:	f7ff fbac 	bl	80101b4 <disk_write>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d002      	beq.n	8010a68 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010a62:	2301      	movs	r3, #1
 8010a64:	73fb      	strb	r3, [r7, #15]
 8010a66:	e022      	b.n	8010aae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a72:	697a      	ldr	r2, [r7, #20]
 8010a74:	1ad2      	subs	r2, r2, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d217      	bcs.n	8010aae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	789b      	ldrb	r3, [r3, #2]
 8010a82:	613b      	str	r3, [r7, #16]
 8010a84:	e010      	b.n	8010aa8 <sync_window+0x78>
					wsect += fs->fsize;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a8a:	697a      	ldr	r2, [r7, #20]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	7858      	ldrb	r0, [r3, #1]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	697a      	ldr	r2, [r7, #20]
 8010a9e:	f7ff fb89 	bl	80101b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	3b01      	subs	r3, #1
 8010aa6:	613b      	str	r3, [r7, #16]
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	2b01      	cmp	r3, #1
 8010aac:	d8eb      	bhi.n	8010a86 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3718      	adds	r7, #24
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b084      	sub	sp, #16
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010aca:	683a      	ldr	r2, [r7, #0]
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d01b      	beq.n	8010b08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f7ff ffad 	bl	8010a30 <sync_window>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010ada:	7bfb      	ldrb	r3, [r7, #15]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d113      	bne.n	8010b08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	7858      	ldrb	r0, [r3, #1]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8010aea:	2301      	movs	r3, #1
 8010aec:	683a      	ldr	r2, [r7, #0]
 8010aee:	f7ff fb41 	bl	8010174 <disk_read>
 8010af2:	4603      	mov	r3, r0
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d004      	beq.n	8010b02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010afc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010afe:	2301      	movs	r3, #1
 8010b00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	683a      	ldr	r2, [r7, #0]
 8010b06:	64da      	str	r2, [r3, #76]	; 0x4c
		}
	}
	return res;
 8010b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3710      	adds	r7, #16
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}
	...

08010b14 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b084      	sub	sp, #16
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f7ff ff87 	bl	8010a30 <sync_window>
 8010b22:	4603      	mov	r3, r0
 8010b24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010b26:	7bfb      	ldrb	r3, [r7, #15]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d159      	bne.n	8010be0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	781b      	ldrb	r3, [r3, #0]
 8010b30:	2b03      	cmp	r3, #3
 8010b32:	d149      	bne.n	8010bc8 <sync_fs+0xb4>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	791b      	ldrb	r3, [r3, #4]
 8010b38:	2b01      	cmp	r3, #1
 8010b3a:	d145      	bne.n	8010bc8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	899b      	ldrh	r3, [r3, #12]
 8010b46:	461a      	mov	r2, r3
 8010b48:	2100      	movs	r1, #0
 8010b4a:	f7ff fd77 	bl	801063c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	3350      	adds	r3, #80	; 0x50
 8010b52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b56:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7ff fc7e 	bl	801045c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	3350      	adds	r3, #80	; 0x50
 8010b64:	4921      	ldr	r1, [pc, #132]	; (8010bec <sync_fs+0xd8>)
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7ff fc93 	bl	8010492 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	3350      	adds	r3, #80	; 0x50
 8010b70:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010b74:	491e      	ldr	r1, [pc, #120]	; (8010bf0 <sync_fs+0xdc>)
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7ff fc8b 	bl	8010492 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	3350      	adds	r3, #80	; 0x50
 8010b80:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6a1b      	ldr	r3, [r3, #32]
 8010b88:	4619      	mov	r1, r3
 8010b8a:	4610      	mov	r0, r2
 8010b8c:	f7ff fc81 	bl	8010492 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	3350      	adds	r3, #80	; 0x50
 8010b94:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	69db      	ldr	r3, [r3, #28]
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	4610      	mov	r0, r2
 8010ba0:	f7ff fc77 	bl	8010492 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ba8:	1c5a      	adds	r2, r3, #1
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	64da      	str	r2, [r3, #76]	; 0x4c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	7858      	ldrb	r0, [r3, #1]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	f7ff faf9 	bl	80101b4 <disk_write>
			fs->fsi_flag = 0;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	785b      	ldrb	r3, [r3, #1]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	2100      	movs	r1, #0
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7ff fb0f 	bl	80101f4 <disk_ioctl>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d001      	beq.n	8010be0 <sync_fs+0xcc>
 8010bdc:	2301      	movs	r3, #1
 8010bde:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3710      	adds	r7, #16
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
 8010bea:	bf00      	nop
 8010bec:	41615252 	.word	0x41615252
 8010bf0:	61417272 	.word	0x61417272

08010bf4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	3b02      	subs	r3, #2
 8010c02:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c08:	3b02      	subs	r3, #2
 8010c0a:	683a      	ldr	r2, [r7, #0]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d301      	bcc.n	8010c14 <clust2sect+0x20>
 8010c10:	2300      	movs	r3, #0
 8010c12:	e008      	b.n	8010c26 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	895b      	ldrh	r3, [r3, #10]
 8010c18:	461a      	mov	r2, r3
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	fb03 f202 	mul.w	r2, r3, r2
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c24:	4413      	add	r3, r2
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	370c      	adds	r7, #12
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c30:	4770      	bx	lr
	...

08010c34 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010c34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010c38:	b088      	sub	sp, #32
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
 8010c3e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	d904      	bls.n	8010c56 <get_fat+0x22>
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c50:	683a      	ldr	r2, [r7, #0]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d302      	bcc.n	8010c5c <get_fat+0x28>
		val = 1;	/* Internal error */
 8010c56:	2301      	movs	r3, #1
 8010c58:	61fb      	str	r3, [r7, #28]
 8010c5a:	e13a      	b.n	8010ed2 <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c60:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8010c62:	69bb      	ldr	r3, [r7, #24]
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	3b01      	subs	r3, #1
 8010c68:	2b03      	cmp	r3, #3
 8010c6a:	f200 8126 	bhi.w	8010eba <get_fat+0x286>
 8010c6e:	a201      	add	r2, pc, #4	; (adr r2, 8010c74 <get_fat+0x40>)
 8010c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c74:	08010c85 	.word	0x08010c85
 8010c78:	08010d33 	.word	0x08010d33
 8010c7c:	08010d7f 	.word	0x08010d7f
 8010c80:	08010dcf 	.word	0x08010dcf
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	60fb      	str	r3, [r7, #12]
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	085b      	lsrs	r3, r3, #1
 8010c8c:	68fa      	ldr	r2, [r7, #12]
 8010c8e:	4413      	add	r3, r2
 8010c90:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010c92:	69bb      	ldr	r3, [r7, #24]
 8010c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	899b      	ldrh	r3, [r3, #12]
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ca2:	4413      	add	r3, r2
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	69b8      	ldr	r0, [r7, #24]
 8010ca8:	f7ff ff06 	bl	8010ab8 <move_window>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	f040 8106 	bne.w	8010ec0 <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	1c5a      	adds	r2, r3, #1
 8010cb8:	60fa      	str	r2, [r7, #12]
 8010cba:	69ba      	ldr	r2, [r7, #24]
 8010cbc:	8992      	ldrh	r2, [r2, #12]
 8010cbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cc2:	fb01 f202 	mul.w	r2, r1, r2
 8010cc6:	1a9b      	subs	r3, r3, r2
 8010cc8:	69ba      	ldr	r2, [r7, #24]
 8010cca:	4413      	add	r3, r2
 8010ccc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010cd0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cd2:	69bb      	ldr	r3, [r7, #24]
 8010cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010cd6:	69bb      	ldr	r3, [r7, #24]
 8010cd8:	899b      	ldrh	r3, [r3, #12]
 8010cda:	4619      	mov	r1, r3
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ce2:	4413      	add	r3, r2
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	69b8      	ldr	r0, [r7, #24]
 8010ce8:	f7ff fee6 	bl	8010ab8 <move_window>
 8010cec:	4603      	mov	r3, r0
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	f040 80e8 	bne.w	8010ec4 <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010cf4:	69bb      	ldr	r3, [r7, #24]
 8010cf6:	899b      	ldrh	r3, [r3, #12]
 8010cf8:	461a      	mov	r2, r3
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d00:	fb01 f202 	mul.w	r2, r1, r2
 8010d04:	1a9b      	subs	r3, r3, r2
 8010d06:	69ba      	ldr	r2, [r7, #24]
 8010d08:	4413      	add	r3, r2
 8010d0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010d0e:	021b      	lsls	r3, r3, #8
 8010d10:	461a      	mov	r2, r3
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	4313      	orrs	r3, r2
 8010d16:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	f003 0301 	and.w	r3, r3, #1
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d002      	beq.n	8010d28 <get_fat+0xf4>
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	091b      	lsrs	r3, r3, #4
 8010d26:	e002      	b.n	8010d2e <get_fat+0xfa>
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010d2e:	61fb      	str	r3, [r7, #28]
			break;
 8010d30:	e0cf      	b.n	8010ed2 <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010d36:	69bb      	ldr	r3, [r7, #24]
 8010d38:	899b      	ldrh	r3, [r3, #12]
 8010d3a:	085b      	lsrs	r3, r3, #1
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	4619      	mov	r1, r3
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d46:	4413      	add	r3, r2
 8010d48:	4619      	mov	r1, r3
 8010d4a:	69b8      	ldr	r0, [r7, #24]
 8010d4c:	f7ff feb4 	bl	8010ab8 <move_window>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	f040 80b8 	bne.w	8010ec8 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	005b      	lsls	r3, r3, #1
 8010d62:	69ba      	ldr	r2, [r7, #24]
 8010d64:	8992      	ldrh	r2, [r2, #12]
 8010d66:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d6a:	fb00 f202 	mul.w	r2, r0, r2
 8010d6e:	1a9b      	subs	r3, r3, r2
 8010d70:	440b      	add	r3, r1
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7ff fa5c 	bl	8010230 <ld_word>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	61fb      	str	r3, [r7, #28]
			break;
 8010d7c:	e0a9      	b.n	8010ed2 <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010d82:	69bb      	ldr	r3, [r7, #24]
 8010d84:	899b      	ldrh	r3, [r3, #12]
 8010d86:	089b      	lsrs	r3, r3, #2
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d92:	4413      	add	r3, r2
 8010d94:	4619      	mov	r1, r3
 8010d96:	69b8      	ldr	r0, [r7, #24]
 8010d98:	f7ff fe8e 	bl	8010ab8 <move_window>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f040 8094 	bne.w	8010ecc <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010da4:	69bb      	ldr	r3, [r7, #24]
 8010da6:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	69ba      	ldr	r2, [r7, #24]
 8010db0:	8992      	ldrh	r2, [r2, #12]
 8010db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8010db6:	fb00 f202 	mul.w	r2, r0, r2
 8010dba:	1a9b      	subs	r3, r3, r2
 8010dbc:	440b      	add	r3, r1
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7ff fa4e 	bl	8010260 <ld_dword>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010dca:	61fb      	str	r3, [r7, #28]
			break;
 8010dcc:	e081      	b.n	8010ed2 <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010dd4:	4313      	orrs	r3, r2
 8010dd6:	d070      	beq.n	8010eba <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	689b      	ldr	r3, [r3, #8]
 8010ddc:	683a      	ldr	r2, [r7, #0]
 8010dde:	1ad3      	subs	r3, r2, r3
 8010de0:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010de8:	1e54      	subs	r4, r2, #1
 8010dea:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 8010dee:	69bb      	ldr	r3, [r7, #24]
 8010df0:	899b      	ldrh	r3, [r3, #12]
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	2200      	movs	r2, #0
 8010df6:	4698      	mov	r8, r3
 8010df8:	4691      	mov	r9, r2
 8010dfa:	4642      	mov	r2, r8
 8010dfc:	464b      	mov	r3, r9
 8010dfe:	4620      	mov	r0, r4
 8010e00:	4629      	mov	r1, r5
 8010e02:	f7ef faed 	bl	80003e0 <__aeabi_uldivmod>
 8010e06:	4602      	mov	r2, r0
 8010e08:	460b      	mov	r3, r1
 8010e0a:	69bb      	ldr	r3, [r7, #24]
 8010e0c:	895b      	ldrh	r3, [r3, #10]
 8010e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e12:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	79db      	ldrb	r3, [r3, #7]
 8010e18:	2b02      	cmp	r3, #2
 8010e1a:	d10e      	bne.n	8010e3a <get_fat+0x206>
					if (cofs <= clen) {
 8010e1c:	697a      	ldr	r2, [r7, #20]
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d80a      	bhi.n	8010e3a <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8010e24:	697a      	ldr	r2, [r7, #20]
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d002      	beq.n	8010e32 <get_fat+0x1fe>
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	e001      	b.n	8010e36 <get_fat+0x202>
 8010e32:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010e36:	61fb      	str	r3, [r7, #28]
						break;
 8010e38:	e04b      	b.n	8010ed2 <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	79db      	ldrb	r3, [r3, #7]
 8010e3e:	2b03      	cmp	r3, #3
 8010e40:	d108      	bne.n	8010e54 <get_fat+0x220>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	699b      	ldr	r3, [r3, #24]
 8010e46:	697a      	ldr	r2, [r7, #20]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d203      	bcs.n	8010e54 <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	3301      	adds	r3, #1
 8010e50:	61fb      	str	r3, [r7, #28]
					break;
 8010e52:	e03e      	b.n	8010ed2 <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	79db      	ldrb	r3, [r3, #7]
 8010e58:	2b02      	cmp	r3, #2
 8010e5a:	d02e      	beq.n	8010eba <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	69db      	ldr	r3, [r3, #28]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d003      	beq.n	8010e6c <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8010e64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010e68:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8010e6a:	e032      	b.n	8010ed2 <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010e6c:	69bb      	ldr	r3, [r7, #24]
 8010e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010e70:	69bb      	ldr	r3, [r7, #24]
 8010e72:	899b      	ldrh	r3, [r3, #12]
 8010e74:	089b      	lsrs	r3, r3, #2
 8010e76:	b29b      	uxth	r3, r3
 8010e78:	4619      	mov	r1, r3
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e80:	4413      	add	r3, r2
 8010e82:	4619      	mov	r1, r3
 8010e84:	69b8      	ldr	r0, [r7, #24]
 8010e86:	f7ff fe17 	bl	8010ab8 <move_window>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d11f      	bne.n	8010ed0 <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8010e90:	69bb      	ldr	r3, [r7, #24]
 8010e92:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	69ba      	ldr	r2, [r7, #24]
 8010e9c:	8992      	ldrh	r2, [r2, #12]
 8010e9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ea2:	fb00 f202 	mul.w	r2, r0, r2
 8010ea6:	1a9b      	subs	r3, r3, r2
 8010ea8:	440b      	add	r3, r1
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7ff f9d8 	bl	8010260 <ld_dword>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010eb6:	61fb      	str	r3, [r7, #28]
					break;
 8010eb8:	e00b      	b.n	8010ed2 <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010eba:	2301      	movs	r3, #1
 8010ebc:	61fb      	str	r3, [r7, #28]
 8010ebe:	e008      	b.n	8010ed2 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ec0:	bf00      	nop
 8010ec2:	e006      	b.n	8010ed2 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ec4:	bf00      	nop
 8010ec6:	e004      	b.n	8010ed2 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010ec8:	bf00      	nop
 8010eca:	e002      	b.n	8010ed2 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ecc:	bf00      	nop
 8010ece:	e000      	b.n	8010ed2 <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ed0:	bf00      	nop
		}
	}

	return val;
 8010ed2:	69fb      	ldr	r3, [r7, #28]
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3720      	adds	r7, #32
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010ede:	bf00      	nop

08010ee0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010ee0:	b590      	push	{r4, r7, lr}
 8010ee2:	b089      	sub	sp, #36	; 0x24
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010eec:	2302      	movs	r3, #2
 8010eee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	2b01      	cmp	r3, #1
 8010ef4:	f240 8106 	bls.w	8011104 <put_fat+0x224>
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010efc:	68ba      	ldr	r2, [r7, #8]
 8010efe:	429a      	cmp	r2, r3
 8010f00:	f080 8100 	bcs.w	8011104 <put_fat+0x224>
		switch (fs->fs_type) {
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	2b04      	cmp	r3, #4
 8010f0a:	f300 8104 	bgt.w	8011116 <put_fat+0x236>
 8010f0e:	2b03      	cmp	r3, #3
 8010f10:	f280 80b3 	bge.w	801107a <put_fat+0x19a>
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d003      	beq.n	8010f20 <put_fat+0x40>
 8010f18:	2b02      	cmp	r3, #2
 8010f1a:	f000 8083 	beq.w	8011024 <put_fat+0x144>
 8010f1e:	e0fa      	b.n	8011116 <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	61bb      	str	r3, [r7, #24]
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	085b      	lsrs	r3, r3, #1
 8010f28:	69ba      	ldr	r2, [r7, #24]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	899b      	ldrh	r3, [r3, #12]
 8010f36:	4619      	mov	r1, r3
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f3e:	4413      	add	r3, r2
 8010f40:	4619      	mov	r1, r3
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	f7ff fdb8 	bl	8010ab8 <move_window>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f4c:	7ffb      	ldrb	r3, [r7, #31]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	f040 80da 	bne.w	8011108 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	1c5a      	adds	r2, r3, #1
 8010f5e:	61ba      	str	r2, [r7, #24]
 8010f60:	68fa      	ldr	r2, [r7, #12]
 8010f62:	8992      	ldrh	r2, [r2, #12]
 8010f64:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f68:	fb00 f202 	mul.w	r2, r0, r2
 8010f6c:	1a9b      	subs	r3, r3, r2
 8010f6e:	440b      	add	r3, r1
 8010f70:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	f003 0301 	and.w	r3, r3, #1
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d00d      	beq.n	8010f98 <put_fat+0xb8>
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	b25b      	sxtb	r3, r3
 8010f82:	f003 030f 	and.w	r3, r3, #15
 8010f86:	b25a      	sxtb	r2, r3
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	011b      	lsls	r3, r3, #4
 8010f8e:	b25b      	sxtb	r3, r3
 8010f90:	4313      	orrs	r3, r2
 8010f92:	b25b      	sxtb	r3, r3
 8010f94:	b2db      	uxtb	r3, r3
 8010f96:	e001      	b.n	8010f9c <put_fat+0xbc>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	697a      	ldr	r2, [r7, #20]
 8010f9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	899b      	ldrh	r3, [r3, #12]
 8010fae:	4619      	mov	r1, r3
 8010fb0:	69bb      	ldr	r3, [r7, #24]
 8010fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8010fb6:	4413      	add	r3, r2
 8010fb8:	4619      	mov	r1, r3
 8010fba:	68f8      	ldr	r0, [r7, #12]
 8010fbc:	f7ff fd7c 	bl	8010ab8 <move_window>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010fc4:	7ffb      	ldrb	r3, [r7, #31]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	f040 80a0 	bne.w	801110c <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	899b      	ldrh	r3, [r3, #12]
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	69bb      	ldr	r3, [r7, #24]
 8010fda:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fde:	fb00 f202 	mul.w	r2, r0, r2
 8010fe2:	1a9b      	subs	r3, r3, r2
 8010fe4:	440b      	add	r3, r1
 8010fe6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	f003 0301 	and.w	r3, r3, #1
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d003      	beq.n	8010ffa <put_fat+0x11a>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	091b      	lsrs	r3, r3, #4
 8010ff6:	b2db      	uxtb	r3, r3
 8010ff8:	e00e      	b.n	8011018 <put_fat+0x138>
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	b25b      	sxtb	r3, r3
 8011000:	f023 030f 	bic.w	r3, r3, #15
 8011004:	b25a      	sxtb	r2, r3
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	0a1b      	lsrs	r3, r3, #8
 801100a:	b25b      	sxtb	r3, r3
 801100c:	f003 030f 	and.w	r3, r3, #15
 8011010:	b25b      	sxtb	r3, r3
 8011012:	4313      	orrs	r3, r2
 8011014:	b25b      	sxtb	r3, r3
 8011016:	b2db      	uxtb	r3, r3
 8011018:	697a      	ldr	r2, [r7, #20]
 801101a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2201      	movs	r2, #1
 8011020:	70da      	strb	r2, [r3, #3]
			break;
 8011022:	e078      	b.n	8011116 <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	899b      	ldrh	r3, [r3, #12]
 801102c:	085b      	lsrs	r3, r3, #1
 801102e:	b29b      	uxth	r3, r3
 8011030:	4619      	mov	r1, r3
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	fbb3 f3f1 	udiv	r3, r3, r1
 8011038:	4413      	add	r3, r2
 801103a:	4619      	mov	r1, r3
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	f7ff fd3b 	bl	8010ab8 <move_window>
 8011042:	4603      	mov	r3, r0
 8011044:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011046:	7ffb      	ldrb	r3, [r7, #31]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d161      	bne.n	8011110 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	005b      	lsls	r3, r3, #1
 8011056:	68fa      	ldr	r2, [r7, #12]
 8011058:	8992      	ldrh	r2, [r2, #12]
 801105a:	fbb3 f0f2 	udiv	r0, r3, r2
 801105e:	fb00 f202 	mul.w	r2, r0, r2
 8011062:	1a9b      	subs	r3, r3, r2
 8011064:	440b      	add	r3, r1
 8011066:	687a      	ldr	r2, [r7, #4]
 8011068:	b292      	uxth	r2, r2
 801106a:	4611      	mov	r1, r2
 801106c:	4618      	mov	r0, r3
 801106e:	f7ff f9f5 	bl	801045c <st_word>
			fs->wflag = 1;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	2201      	movs	r2, #1
 8011076:	70da      	strb	r2, [r3, #3]
			break;
 8011078:	e04d      	b.n	8011116 <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	899b      	ldrh	r3, [r3, #12]
 8011082:	089b      	lsrs	r3, r3, #2
 8011084:	b29b      	uxth	r3, r3
 8011086:	4619      	mov	r1, r3
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	fbb3 f3f1 	udiv	r3, r3, r1
 801108e:	4413      	add	r3, r2
 8011090:	4619      	mov	r1, r3
 8011092:	68f8      	ldr	r0, [r7, #12]
 8011094:	f7ff fd10 	bl	8010ab8 <move_window>
 8011098:	4603      	mov	r3, r0
 801109a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801109c:	7ffb      	ldrb	r3, [r7, #31]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d138      	bne.n	8011114 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	2b04      	cmp	r3, #4
 80110a8:	d017      	beq.n	80110da <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	009b      	lsls	r3, r3, #2
 80110ba:	68fa      	ldr	r2, [r7, #12]
 80110bc:	8992      	ldrh	r2, [r2, #12]
 80110be:	fbb3 f0f2 	udiv	r0, r3, r2
 80110c2:	fb00 f202 	mul.w	r2, r0, r2
 80110c6:	1a9b      	subs	r3, r3, r2
 80110c8:	440b      	add	r3, r1
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7ff f8c8 	bl	8010260 <ld_dword>
 80110d0:	4603      	mov	r3, r0
 80110d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80110d6:	4323      	orrs	r3, r4
 80110d8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	009b      	lsls	r3, r3, #2
 80110e4:	68fa      	ldr	r2, [r7, #12]
 80110e6:	8992      	ldrh	r2, [r2, #12]
 80110e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80110ec:	fb00 f202 	mul.w	r2, r0, r2
 80110f0:	1a9b      	subs	r3, r3, r2
 80110f2:	440b      	add	r3, r1
 80110f4:	6879      	ldr	r1, [r7, #4]
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7ff f9cb 	bl	8010492 <st_dword>
			fs->wflag = 1;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2201      	movs	r2, #1
 8011100:	70da      	strb	r2, [r3, #3]
			break;
 8011102:	e008      	b.n	8011116 <put_fat+0x236>
		}
	}
 8011104:	bf00      	nop
 8011106:	e006      	b.n	8011116 <put_fat+0x236>
			if (res != FR_OK) break;
 8011108:	bf00      	nop
 801110a:	e004      	b.n	8011116 <put_fat+0x236>
			if (res != FR_OK) break;
 801110c:	bf00      	nop
 801110e:	e002      	b.n	8011116 <put_fat+0x236>
			if (res != FR_OK) break;
 8011110:	bf00      	nop
 8011112:	e000      	b.n	8011116 <put_fat+0x236>
			if (res != FR_OK) break;
 8011114:	bf00      	nop
	return res;
 8011116:	7ffb      	ldrb	r3, [r7, #31]
}
 8011118:	4618      	mov	r0, r3
 801111a:	3724      	adds	r7, #36	; 0x24
 801111c:	46bd      	mov	sp, r7
 801111e:	bd90      	pop	{r4, r7, pc}

08011120 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b08a      	sub	sp, #40	; 0x28
 8011124:	af00      	add	r7, sp, #0
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	60b9      	str	r1, [r7, #8]
 801112a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	3b02      	subs	r3, #2
 8011130:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011136:	3b02      	subs	r3, #2
 8011138:	68ba      	ldr	r2, [r7, #8]
 801113a:	429a      	cmp	r2, r3
 801113c:	d301      	bcc.n	8011142 <find_bitmap+0x22>
 801113e:	2300      	movs	r3, #0
 8011140:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	61fb      	str	r3, [r7, #28]
 8011146:	69fb      	ldr	r3, [r7, #28]
 8011148:	61bb      	str	r3, [r7, #24]
 801114a:	2300      	movs	r3, #0
 801114c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	08db      	lsrs	r3, r3, #3
 8011156:	68f9      	ldr	r1, [r7, #12]
 8011158:	8989      	ldrh	r1, [r1, #12]
 801115a:	fbb3 f3f1 	udiv	r3, r3, r1
 801115e:	4413      	add	r3, r2
 8011160:	4619      	mov	r1, r3
 8011162:	68f8      	ldr	r0, [r7, #12]
 8011164:	f7ff fca8 	bl	8010ab8 <move_window>
 8011168:	4603      	mov	r3, r0
 801116a:	2b00      	cmp	r3, #0
 801116c:	d002      	beq.n	8011174 <find_bitmap+0x54>
 801116e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011172:	e058      	b.n	8011226 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	08db      	lsrs	r3, r3, #3
 8011178:	68fa      	ldr	r2, [r7, #12]
 801117a:	8992      	ldrh	r2, [r2, #12]
 801117c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011180:	fb01 f202 	mul.w	r2, r1, r2
 8011184:	1a9b      	subs	r3, r3, r2
 8011186:	623b      	str	r3, [r7, #32]
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	f003 0307 	and.w	r3, r3, #7
 801118e:	2201      	movs	r2, #1
 8011190:	fa02 f303 	lsl.w	r3, r2, r3
 8011194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	6a3b      	ldr	r3, [r7, #32]
 801119c:	4413      	add	r3, r2
 801119e:	3350      	adds	r3, #80	; 0x50
 80111a0:	781a      	ldrb	r2, [r3, #0]
 80111a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111a6:	4013      	ands	r3, r2
 80111a8:	74fb      	strb	r3, [r7, #19]
 80111aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111ae:	005b      	lsls	r3, r3, #1
 80111b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80111b4:	69fb      	ldr	r3, [r7, #28]
 80111b6:	3301      	adds	r3, #1
 80111b8:	61fb      	str	r3, [r7, #28]
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111be:	3b02      	subs	r3, #2
 80111c0:	69fa      	ldr	r2, [r7, #28]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d307      	bcc.n	80111d6 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 80111c6:	2300      	movs	r3, #0
 80111c8:	61fb      	str	r3, [r7, #28]
 80111ca:	2300      	movs	r3, #0
 80111cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	899b      	ldrh	r3, [r3, #12]
 80111d4:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80111d6:	7cfb      	ldrb	r3, [r7, #19]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d109      	bne.n	80111f0 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	3301      	adds	r3, #1
 80111e0:	617b      	str	r3, [r7, #20]
 80111e2:	697a      	ldr	r2, [r7, #20]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d106      	bne.n	80111f8 <find_bitmap+0xd8>
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	3302      	adds	r3, #2
 80111ee:	e01a      	b.n	8011226 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80111f0:	69fb      	ldr	r3, [r7, #28]
 80111f2:	61bb      	str	r3, [r7, #24]
 80111f4:	2300      	movs	r3, #0
 80111f6:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80111f8:	69fa      	ldr	r2, [r7, #28]
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d101      	bne.n	8011204 <find_bitmap+0xe4>
 8011200:	2300      	movs	r3, #0
 8011202:	e010      	b.n	8011226 <find_bitmap+0x106>
			} while (bm);
 8011204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011208:	2b00      	cmp	r3, #0
 801120a:	d1c5      	bne.n	8011198 <find_bitmap+0x78>
			bm = 1;
 801120c:	2301      	movs	r3, #1
 801120e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8011212:	6a3b      	ldr	r3, [r7, #32]
 8011214:	3301      	adds	r3, #1
 8011216:	623b      	str	r3, [r7, #32]
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	899b      	ldrh	r3, [r3, #12]
 801121c:	461a      	mov	r2, r3
 801121e:	6a3b      	ldr	r3, [r7, #32]
 8011220:	4293      	cmp	r3, r2
 8011222:	d3b9      	bcc.n	8011198 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8011224:	e793      	b.n	801114e <find_bitmap+0x2e>
	}
}
 8011226:	4618      	mov	r0, r3
 8011228:	3728      	adds	r7, #40	; 0x28
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 801122e:	b580      	push	{r7, lr}
 8011230:	b088      	sub	sp, #32
 8011232:	af00      	add	r7, sp, #0
 8011234:	60f8      	str	r0, [r7, #12]
 8011236:	60b9      	str	r1, [r7, #8]
 8011238:	607a      	str	r2, [r7, #4]
 801123a:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	3b02      	subs	r3, #2
 8011240:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	08db      	lsrs	r3, r3, #3
 801124a:	68f9      	ldr	r1, [r7, #12]
 801124c:	8989      	ldrh	r1, [r1, #12]
 801124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011252:	4413      	add	r3, r2
 8011254:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	08db      	lsrs	r3, r3, #3
 801125a:	68fa      	ldr	r2, [r7, #12]
 801125c:	8992      	ldrh	r2, [r2, #12]
 801125e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011262:	fb01 f202 	mul.w	r2, r1, r2
 8011266:	1a9b      	subs	r3, r3, r2
 8011268:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	f003 0307 	and.w	r3, r3, #7
 8011270:	2201      	movs	r2, #1
 8011272:	fa02 f303 	lsl.w	r3, r2, r3
 8011276:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	1c5a      	adds	r2, r3, #1
 801127c:	617a      	str	r2, [r7, #20]
 801127e:	4619      	mov	r1, r3
 8011280:	68f8      	ldr	r0, [r7, #12]
 8011282:	f7ff fc19 	bl	8010ab8 <move_window>
 8011286:	4603      	mov	r3, r0
 8011288:	2b00      	cmp	r3, #0
 801128a:	d001      	beq.n	8011290 <change_bitmap+0x62>
 801128c:	2301      	movs	r3, #1
 801128e:	e03f      	b.n	8011310 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8011290:	68fa      	ldr	r2, [r7, #12]
 8011292:	69bb      	ldr	r3, [r7, #24]
 8011294:	4413      	add	r3, r2
 8011296:	3350      	adds	r3, #80	; 0x50
 8011298:	781a      	ldrb	r2, [r3, #0]
 801129a:	7ffb      	ldrb	r3, [r7, #31]
 801129c:	4013      	ands	r3, r2
 801129e:	b2db      	uxtb	r3, r3
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	bf14      	ite	ne
 80112a4:	2301      	movne	r3, #1
 80112a6:	2300      	moveq	r3, #0
 80112a8:	b2db      	uxtb	r3, r3
 80112aa:	461a      	mov	r2, r3
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	4293      	cmp	r3, r2
 80112b0:	d101      	bne.n	80112b6 <change_bitmap+0x88>
 80112b2:	2302      	movs	r3, #2
 80112b4:	e02c      	b.n	8011310 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 80112b6:	68fa      	ldr	r2, [r7, #12]
 80112b8:	69bb      	ldr	r3, [r7, #24]
 80112ba:	4413      	add	r3, r2
 80112bc:	3350      	adds	r3, #80	; 0x50
 80112be:	781a      	ldrb	r2, [r3, #0]
 80112c0:	7ffb      	ldrb	r3, [r7, #31]
 80112c2:	4053      	eors	r3, r2
 80112c4:	b2d9      	uxtb	r1, r3
 80112c6:	68fa      	ldr	r2, [r7, #12]
 80112c8:	69bb      	ldr	r3, [r7, #24]
 80112ca:	4413      	add	r3, r2
 80112cc:	3350      	adds	r3, #80	; 0x50
 80112ce:	460a      	mov	r2, r1
 80112d0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	2201      	movs	r2, #1
 80112d6:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	3b01      	subs	r3, #1
 80112dc:	607b      	str	r3, [r7, #4]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d101      	bne.n	80112e8 <change_bitmap+0xba>
 80112e4:	2300      	movs	r3, #0
 80112e6:	e013      	b.n	8011310 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 80112e8:	7ffb      	ldrb	r3, [r7, #31]
 80112ea:	005b      	lsls	r3, r3, #1
 80112ec:	77fb      	strb	r3, [r7, #31]
 80112ee:	7ffb      	ldrb	r3, [r7, #31]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d1cd      	bne.n	8011290 <change_bitmap+0x62>
			bm = 1;
 80112f4:	2301      	movs	r3, #1
 80112f6:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	3301      	adds	r3, #1
 80112fc:	61bb      	str	r3, [r7, #24]
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	899b      	ldrh	r3, [r3, #12]
 8011302:	461a      	mov	r2, r3
 8011304:	69bb      	ldr	r3, [r7, #24]
 8011306:	4293      	cmp	r3, r2
 8011308:	d3c2      	bcc.n	8011290 <change_bitmap+0x62>
		i = 0;
 801130a:	2300      	movs	r3, #0
 801130c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 801130e:	e7b3      	b.n	8011278 <change_bitmap+0x4a>
	}
}
 8011310:	4618      	mov	r0, r3
 8011312:	3720      	adds	r7, #32
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}

08011318 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b086      	sub	sp, #24
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	79db      	ldrb	r3, [r3, #7]
 8011324:	2b03      	cmp	r3, #3
 8011326:	d121      	bne.n	801136c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	689b      	ldr	r3, [r3, #8]
 801132c:	617b      	str	r3, [r7, #20]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	699b      	ldr	r3, [r3, #24]
 8011332:	613b      	str	r3, [r7, #16]
 8011334:	e014      	b.n	8011360 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6818      	ldr	r0, [r3, #0]
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	3301      	adds	r3, #1
 801133e:	461a      	mov	r2, r3
 8011340:	6979      	ldr	r1, [r7, #20]
 8011342:	f7ff fdcd 	bl	8010ee0 <put_fat>
 8011346:	4603      	mov	r3, r0
 8011348:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 801134a:	7bfb      	ldrb	r3, [r7, #15]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d001      	beq.n	8011354 <fill_first_frag+0x3c>
 8011350:	7bfb      	ldrb	r3, [r7, #15]
 8011352:	e00c      	b.n	801136e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	3301      	adds	r3, #1
 8011358:	617b      	str	r3, [r7, #20]
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	3b01      	subs	r3, #1
 801135e:	613b      	str	r3, [r7, #16]
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d1e7      	bne.n	8011336 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2200      	movs	r2, #0
 801136a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 801136c:	2300      	movs	r3, #0
}
 801136e:	4618      	mov	r0, r3
 8011370:	3718      	adds	r7, #24
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}

08011376 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8011376:	b580      	push	{r7, lr}
 8011378:	b086      	sub	sp, #24
 801137a:	af00      	add	r7, sp, #0
 801137c:	60f8      	str	r0, [r7, #12]
 801137e:	60b9      	str	r1, [r7, #8]
 8011380:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8011382:	e020      	b.n	80113c6 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	6818      	ldr	r0, [r3, #0]
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	69db      	ldr	r3, [r3, #28]
 801138c:	68ba      	ldr	r2, [r7, #8]
 801138e:	1ad3      	subs	r3, r2, r3
 8011390:	1c59      	adds	r1, r3, #1
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	69db      	ldr	r3, [r3, #28]
 8011396:	2b01      	cmp	r3, #1
 8011398:	d905      	bls.n	80113a6 <fill_last_frag+0x30>
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	69db      	ldr	r3, [r3, #28]
 801139e:	68ba      	ldr	r2, [r7, #8]
 80113a0:	1ad3      	subs	r3, r2, r3
 80113a2:	3302      	adds	r3, #2
 80113a4:	e000      	b.n	80113a8 <fill_last_frag+0x32>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	461a      	mov	r2, r3
 80113aa:	f7ff fd99 	bl	8010ee0 <put_fat>
 80113ae:	4603      	mov	r3, r0
 80113b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80113b2:	7dfb      	ldrb	r3, [r7, #23]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d001      	beq.n	80113bc <fill_last_frag+0x46>
 80113b8:	7dfb      	ldrb	r3, [r7, #23]
 80113ba:	e009      	b.n	80113d0 <fill_last_frag+0x5a>
		obj->n_frag--;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	69db      	ldr	r3, [r3, #28]
 80113c0:	1e5a      	subs	r2, r3, #1
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	69db      	ldr	r3, [r3, #28]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d1da      	bne.n	8011384 <fill_last_frag+0xe>
	}
	return FR_OK;
 80113ce:	2300      	movs	r3, #0
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	3718      	adds	r7, #24
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b08a      	sub	sp, #40	; 0x28
 80113dc:	af00      	add	r7, sp, #0
 80113de:	60f8      	str	r0, [r7, #12]
 80113e0:	60b9      	str	r1, [r7, #8]
 80113e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80113e4:	2300      	movs	r3, #0
 80113e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	627b      	str	r3, [r7, #36]	; 0x24
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	2b01      	cmp	r3, #1
 80113fa:	d904      	bls.n	8011406 <remove_chain+0x2e>
 80113fc:	69bb      	ldr	r3, [r7, #24]
 80113fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011400:	68ba      	ldr	r2, [r7, #8]
 8011402:	429a      	cmp	r2, r3
 8011404:	d301      	bcc.n	801140a <remove_chain+0x32>
 8011406:	2302      	movs	r3, #2
 8011408:	e096      	b.n	8011538 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d014      	beq.n	801143a <remove_chain+0x62>
 8011410:	69bb      	ldr	r3, [r7, #24]
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	2b04      	cmp	r3, #4
 8011416:	d103      	bne.n	8011420 <remove_chain+0x48>
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	79db      	ldrb	r3, [r3, #7]
 801141c:	2b02      	cmp	r3, #2
 801141e:	d00c      	beq.n	801143a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011424:	6879      	ldr	r1, [r7, #4]
 8011426:	69b8      	ldr	r0, [r7, #24]
 8011428:	f7ff fd5a 	bl	8010ee0 <put_fat>
 801142c:	4603      	mov	r3, r0
 801142e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011430:	7ffb      	ldrb	r3, [r7, #31]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d001      	beq.n	801143a <remove_chain+0x62>
 8011436:	7ffb      	ldrb	r3, [r7, #31]
 8011438:	e07e      	b.n	8011538 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801143a:	68b9      	ldr	r1, [r7, #8]
 801143c:	68f8      	ldr	r0, [r7, #12]
 801143e:	f7ff fbf9 	bl	8010c34 <get_fat>
 8011442:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d055      	beq.n	80114f6 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	2b01      	cmp	r3, #1
 801144e:	d101      	bne.n	8011454 <remove_chain+0x7c>
 8011450:	2302      	movs	r3, #2
 8011452:	e071      	b.n	8011538 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801145a:	d101      	bne.n	8011460 <remove_chain+0x88>
 801145c:	2301      	movs	r3, #1
 801145e:	e06b      	b.n	8011538 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8011460:	69bb      	ldr	r3, [r7, #24]
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	2b04      	cmp	r3, #4
 8011466:	d00b      	beq.n	8011480 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011468:	2200      	movs	r2, #0
 801146a:	68b9      	ldr	r1, [r7, #8]
 801146c:	69b8      	ldr	r0, [r7, #24]
 801146e:	f7ff fd37 	bl	8010ee0 <put_fat>
 8011472:	4603      	mov	r3, r0
 8011474:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011476:	7ffb      	ldrb	r3, [r7, #31]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d001      	beq.n	8011480 <remove_chain+0xa8>
 801147c:	7ffb      	ldrb	r3, [r7, #31]
 801147e:	e05b      	b.n	8011538 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011480:	69bb      	ldr	r3, [r7, #24]
 8011482:	6a1a      	ldr	r2, [r3, #32]
 8011484:	69bb      	ldr	r3, [r7, #24]
 8011486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011488:	3b02      	subs	r3, #2
 801148a:	429a      	cmp	r2, r3
 801148c:	d20b      	bcs.n	80114a6 <remove_chain+0xce>
			fs->free_clst++;
 801148e:	69bb      	ldr	r3, [r7, #24]
 8011490:	6a1b      	ldr	r3, [r3, #32]
 8011492:	1c5a      	adds	r2, r3, #1
 8011494:	69bb      	ldr	r3, [r7, #24]
 8011496:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 8011498:	69bb      	ldr	r3, [r7, #24]
 801149a:	791b      	ldrb	r3, [r3, #4]
 801149c:	f043 0301 	orr.w	r3, r3, #1
 80114a0:	b2da      	uxtb	r2, r3
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80114a6:	6a3b      	ldr	r3, [r7, #32]
 80114a8:	3301      	adds	r3, #1
 80114aa:	697a      	ldr	r2, [r7, #20]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d102      	bne.n	80114b6 <remove_chain+0xde>
			ecl = nxt;
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	623b      	str	r3, [r7, #32]
 80114b4:	e017      	b.n	80114e6 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	2b04      	cmp	r3, #4
 80114bc:	d10f      	bne.n	80114de <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80114be:	6a3a      	ldr	r2, [r7, #32]
 80114c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c2:	1ad3      	subs	r3, r2, r3
 80114c4:	1c5a      	adds	r2, r3, #1
 80114c6:	2300      	movs	r3, #0
 80114c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114ca:	69b8      	ldr	r0, [r7, #24]
 80114cc:	f7ff feaf 	bl	801122e <change_bitmap>
 80114d0:	4603      	mov	r3, r0
 80114d2:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80114d4:	7ffb      	ldrb	r3, [r7, #31]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d001      	beq.n	80114de <remove_chain+0x106>
 80114da:	7ffb      	ldrb	r3, [r7, #31]
 80114dc:	e02c      	b.n	8011538 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	623b      	str	r3, [r7, #32]
 80114e2:	6a3b      	ldr	r3, [r7, #32]
 80114e4:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80114ea:	69bb      	ldr	r3, [r7, #24]
 80114ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114ee:	68ba      	ldr	r2, [r7, #8]
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d3a2      	bcc.n	801143a <remove_chain+0x62>
 80114f4:	e000      	b.n	80114f8 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80114f6:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	2b04      	cmp	r3, #4
 80114fe:	d11a      	bne.n	8011536 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d103      	bne.n	801150e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	2200      	movs	r2, #0
 801150a:	71da      	strb	r2, [r3, #7]
 801150c:	e013      	b.n	8011536 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	79db      	ldrb	r3, [r3, #7]
 8011512:	2b03      	cmp	r3, #3
 8011514:	d10f      	bne.n	8011536 <remove_chain+0x15e>
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	689b      	ldr	r3, [r3, #8]
 801151a:	687a      	ldr	r2, [r7, #4]
 801151c:	429a      	cmp	r2, r3
 801151e:	d30a      	bcc.n	8011536 <remove_chain+0x15e>
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	689a      	ldr	r2, [r3, #8]
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	699b      	ldr	r3, [r3, #24]
 8011528:	4413      	add	r3, r2
 801152a:	687a      	ldr	r2, [r7, #4]
 801152c:	429a      	cmp	r2, r3
 801152e:	d802      	bhi.n	8011536 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	2202      	movs	r2, #2
 8011534:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8011536:	2300      	movs	r3, #0
}
 8011538:	4618      	mov	r0, r3
 801153a:	3728      	adds	r7, #40	; 0x28
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b088      	sub	sp, #32
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d10d      	bne.n	8011572 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	69db      	ldr	r3, [r3, #28]
 801155a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801155c:	69bb      	ldr	r3, [r7, #24]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d004      	beq.n	801156c <create_chain+0x2c>
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011566:	69ba      	ldr	r2, [r7, #24]
 8011568:	429a      	cmp	r2, r3
 801156a:	d31b      	bcc.n	80115a4 <create_chain+0x64>
 801156c:	2301      	movs	r3, #1
 801156e:	61bb      	str	r3, [r7, #24]
 8011570:	e018      	b.n	80115a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011572:	6839      	ldr	r1, [r7, #0]
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f7ff fb5d 	bl	8010c34 <get_fat>
 801157a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2b01      	cmp	r3, #1
 8011580:	d801      	bhi.n	8011586 <create_chain+0x46>
 8011582:	2301      	movs	r3, #1
 8011584:	e0d9      	b.n	801173a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801158c:	d101      	bne.n	8011592 <create_chain+0x52>
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	e0d3      	b.n	801173a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011596:	68fa      	ldr	r2, [r7, #12]
 8011598:	429a      	cmp	r2, r3
 801159a:	d201      	bcs.n	80115a0 <create_chain+0x60>
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	e0cc      	b.n	801173a <create_chain+0x1fa>
		scl = clst;
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	2b04      	cmp	r3, #4
 80115aa:	d164      	bne.n	8011676 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80115ac:	2201      	movs	r2, #1
 80115ae:	69b9      	ldr	r1, [r7, #24]
 80115b0:	6938      	ldr	r0, [r7, #16]
 80115b2:	f7ff fdb5 	bl	8011120 <find_bitmap>
 80115b6:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d003      	beq.n	80115c6 <create_chain+0x86>
 80115be:	69fb      	ldr	r3, [r7, #28]
 80115c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115c4:	d101      	bne.n	80115ca <create_chain+0x8a>
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	e0b7      	b.n	801173a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80115ca:	2301      	movs	r3, #1
 80115cc:	2201      	movs	r2, #1
 80115ce:	69f9      	ldr	r1, [r7, #28]
 80115d0:	6938      	ldr	r0, [r7, #16]
 80115d2:	f7ff fe2c 	bl	801122e <change_bitmap>
 80115d6:	4603      	mov	r3, r0
 80115d8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 80115da:	7dfb      	ldrb	r3, [r7, #23]
 80115dc:	2b02      	cmp	r3, #2
 80115de:	d101      	bne.n	80115e4 <create_chain+0xa4>
 80115e0:	2301      	movs	r3, #1
 80115e2:	e0aa      	b.n	801173a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80115e4:	7dfb      	ldrb	r3, [r7, #23]
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d102      	bne.n	80115f0 <create_chain+0xb0>
 80115ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115ee:	e0a4      	b.n	801173a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d103      	bne.n	80115fe <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2202      	movs	r2, #2
 80115fa:	71da      	strb	r2, [r3, #7]
 80115fc:	e011      	b.n	8011622 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	79db      	ldrb	r3, [r3, #7]
 8011602:	2b02      	cmp	r3, #2
 8011604:	d10d      	bne.n	8011622 <create_chain+0xe2>
 8011606:	69bb      	ldr	r3, [r7, #24]
 8011608:	3301      	adds	r3, #1
 801160a:	69fa      	ldr	r2, [r7, #28]
 801160c:	429a      	cmp	r2, r3
 801160e:	d008      	beq.n	8011622 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	689b      	ldr	r3, [r3, #8]
 8011614:	69ba      	ldr	r2, [r7, #24]
 8011616:	1ad2      	subs	r2, r2, r3
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2203      	movs	r2, #3
 8011620:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	79db      	ldrb	r3, [r3, #7]
 8011626:	2b02      	cmp	r3, #2
 8011628:	d064      	beq.n	80116f4 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	3301      	adds	r3, #1
 801162e:	69fa      	ldr	r2, [r7, #28]
 8011630:	429a      	cmp	r2, r3
 8011632:	d10b      	bne.n	801164c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	69db      	ldr	r3, [r3, #28]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d003      	beq.n	8011644 <create_chain+0x104>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	69db      	ldr	r3, [r3, #28]
 8011640:	3301      	adds	r3, #1
 8011642:	e000      	b.n	8011646 <create_chain+0x106>
 8011644:	2302      	movs	r3, #2
 8011646:	687a      	ldr	r2, [r7, #4]
 8011648:	61d3      	str	r3, [r2, #28]
 801164a:	e053      	b.n	80116f4 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	69db      	ldr	r3, [r3, #28]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d102      	bne.n	801165a <create_chain+0x11a>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2201      	movs	r2, #1
 8011658:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 801165a:	69fa      	ldr	r2, [r7, #28]
 801165c:	6839      	ldr	r1, [r7, #0]
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f7ff fe89 	bl	8011376 <fill_last_frag>
 8011664:	4603      	mov	r3, r0
 8011666:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8011668:	7dfb      	ldrb	r3, [r7, #23]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d142      	bne.n	80116f4 <create_chain+0x1b4>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2201      	movs	r2, #1
 8011672:	61da      	str	r2, [r3, #28]
 8011674:	e03e      	b.n	80116f4 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011676:	69bb      	ldr	r3, [r7, #24]
 8011678:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	3301      	adds	r3, #1
 801167e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011684:	69fa      	ldr	r2, [r7, #28]
 8011686:	429a      	cmp	r2, r3
 8011688:	d307      	bcc.n	801169a <create_chain+0x15a>
				ncl = 2;
 801168a:	2302      	movs	r3, #2
 801168c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801168e:	69fa      	ldr	r2, [r7, #28]
 8011690:	69bb      	ldr	r3, [r7, #24]
 8011692:	429a      	cmp	r2, r3
 8011694:	d901      	bls.n	801169a <create_chain+0x15a>
 8011696:	2300      	movs	r3, #0
 8011698:	e04f      	b.n	801173a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801169a:	69f9      	ldr	r1, [r7, #28]
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f7ff fac9 	bl	8010c34 <get_fat>
 80116a2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d00e      	beq.n	80116c8 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d003      	beq.n	80116b8 <create_chain+0x178>
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116b6:	d101      	bne.n	80116bc <create_chain+0x17c>
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	e03e      	b.n	801173a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 80116bc:	69fa      	ldr	r2, [r7, #28]
 80116be:	69bb      	ldr	r3, [r7, #24]
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d1da      	bne.n	801167a <create_chain+0x13a>
 80116c4:	2300      	movs	r3, #0
 80116c6:	e038      	b.n	801173a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 80116c8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80116ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116ce:	69f9      	ldr	r1, [r7, #28]
 80116d0:	6938      	ldr	r0, [r7, #16]
 80116d2:	f7ff fc05 	bl	8010ee0 <put_fat>
 80116d6:	4603      	mov	r3, r0
 80116d8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80116da:	7dfb      	ldrb	r3, [r7, #23]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d109      	bne.n	80116f4 <create_chain+0x1b4>
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d006      	beq.n	80116f4 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80116e6:	69fa      	ldr	r2, [r7, #28]
 80116e8:	6839      	ldr	r1, [r7, #0]
 80116ea:	6938      	ldr	r0, [r7, #16]
 80116ec:	f7ff fbf8 	bl	8010ee0 <put_fat>
 80116f0:	4603      	mov	r3, r0
 80116f2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80116f4:	7dfb      	ldrb	r3, [r7, #23]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d116      	bne.n	8011728 <create_chain+0x1e8>
		fs->last_clst = ncl;
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	69fa      	ldr	r2, [r7, #28]
 80116fe:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	6a1a      	ldr	r2, [r3, #32]
 8011704:	693b      	ldr	r3, [r7, #16]
 8011706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011708:	3b02      	subs	r3, #2
 801170a:	429a      	cmp	r2, r3
 801170c:	d804      	bhi.n	8011718 <create_chain+0x1d8>
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	6a1b      	ldr	r3, [r3, #32]
 8011712:	1e5a      	subs	r2, r3, #1
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	791b      	ldrb	r3, [r3, #4]
 801171c:	f043 0301 	orr.w	r3, r3, #1
 8011720:	b2da      	uxtb	r2, r3
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	711a      	strb	r2, [r3, #4]
 8011726:	e007      	b.n	8011738 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011728:	7dfb      	ldrb	r3, [r7, #23]
 801172a:	2b01      	cmp	r3, #1
 801172c:	d102      	bne.n	8011734 <create_chain+0x1f4>
 801172e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011732:	e000      	b.n	8011736 <create_chain+0x1f6>
 8011734:	2301      	movs	r3, #1
 8011736:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011738:	69fb      	ldr	r3, [r7, #28]
}
 801173a:	4618      	mov	r0, r3
 801173c:	3720      	adds	r7, #32
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}

08011742 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011742:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8011746:	b088      	sub	sp, #32
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801175a:	3304      	adds	r3, #4
 801175c:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	899b      	ldrh	r3, [r3, #12]
 8011762:	b29b      	uxth	r3, r3
 8011764:	2200      	movs	r2, #0
 8011766:	4698      	mov	r8, r3
 8011768:	4691      	mov	r9, r2
 801176a:	4642      	mov	r2, r8
 801176c:	464b      	mov	r3, r9
 801176e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011772:	f7ee fe35 	bl	80003e0 <__aeabi_uldivmod>
 8011776:	4602      	mov	r2, r0
 8011778:	460b      	mov	r3, r1
 801177a:	4610      	mov	r0, r2
 801177c:	4619      	mov	r1, r3
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	895b      	ldrh	r3, [r3, #10]
 8011782:	b29b      	uxth	r3, r3
 8011784:	2200      	movs	r2, #0
 8011786:	461c      	mov	r4, r3
 8011788:	4615      	mov	r5, r2
 801178a:	4622      	mov	r2, r4
 801178c:	462b      	mov	r3, r5
 801178e:	f7ee fe27 	bl	80003e0 <__aeabi_uldivmod>
 8011792:	4602      	mov	r2, r0
 8011794:	460b      	mov	r3, r1
 8011796:	4613      	mov	r3, r2
 8011798:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801179a:	69bb      	ldr	r3, [r7, #24]
 801179c:	1d1a      	adds	r2, r3, #4
 801179e:	61ba      	str	r2, [r7, #24]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d101      	bne.n	80117ae <clmt_clust+0x6c>
 80117aa:	2300      	movs	r3, #0
 80117ac:	e010      	b.n	80117d0 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 80117ae:	69fa      	ldr	r2, [r7, #28]
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d307      	bcc.n	80117c6 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 80117b6:	69fa      	ldr	r2, [r7, #28]
 80117b8:	693b      	ldr	r3, [r7, #16]
 80117ba:	1ad3      	subs	r3, r2, r3
 80117bc:	61fb      	str	r3, [r7, #28]
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	3304      	adds	r3, #4
 80117c2:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80117c4:	e7e9      	b.n	801179a <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 80117c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80117c8:	69bb      	ldr	r3, [r7, #24]
 80117ca:	681a      	ldr	r2, [r3, #0]
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	4413      	add	r3, r2
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3720      	adds	r7, #32
 80117d4:	46bd      	mov	sp, r7
 80117d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080117da <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80117da:	b580      	push	{r7, lr}
 80117dc:	b086      	sub	sp, #24
 80117de:	af00      	add	r7, sp, #0
 80117e0:	6078      	str	r0, [r7, #4]
 80117e2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	2b04      	cmp	r3, #4
 80117f0:	d102      	bne.n	80117f8 <dir_sdi+0x1e>
 80117f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117f6:	e001      	b.n	80117fc <dir_sdi+0x22>
 80117f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	429a      	cmp	r2, r3
 8011800:	d904      	bls.n	801180c <dir_sdi+0x32>
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	f003 031f 	and.w	r3, r3, #31
 8011808:	2b00      	cmp	r3, #0
 801180a:	d001      	beq.n	8011810 <dir_sdi+0x36>
		return FR_INT_ERR;
 801180c:	2302      	movs	r3, #2
 801180e:	e074      	b.n	80118fa <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	683a      	ldr	r2, [r7, #0]
 8011814:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	689b      	ldr	r3, [r3, #8]
 801181a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d109      	bne.n	8011836 <dir_sdi+0x5c>
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	781b      	ldrb	r3, [r3, #0]
 8011826:	2b02      	cmp	r3, #2
 8011828:	d905      	bls.n	8011836 <dir_sdi+0x5c>
		clst = fs->dirbase;
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801182e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2200      	movs	r2, #0
 8011834:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d10c      	bne.n	8011856 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	095b      	lsrs	r3, r3, #5
 8011840:	693a      	ldr	r2, [r7, #16]
 8011842:	8912      	ldrh	r2, [r2, #8]
 8011844:	4293      	cmp	r3, r2
 8011846:	d301      	bcc.n	801184c <dir_sdi+0x72>
 8011848:	2302      	movs	r3, #2
 801184a:	e056      	b.n	80118fa <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	639a      	str	r2, [r3, #56]	; 0x38
 8011854:	e02d      	b.n	80118b2 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011856:	693b      	ldr	r3, [r7, #16]
 8011858:	895b      	ldrh	r3, [r3, #10]
 801185a:	461a      	mov	r2, r3
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	899b      	ldrh	r3, [r3, #12]
 8011860:	fb02 f303 	mul.w	r3, r2, r3
 8011864:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011866:	e019      	b.n	801189c <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6979      	ldr	r1, [r7, #20]
 801186c:	4618      	mov	r0, r3
 801186e:	f7ff f9e1 	bl	8010c34 <get_fat>
 8011872:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801187a:	d101      	bne.n	8011880 <dir_sdi+0xa6>
 801187c:	2301      	movs	r3, #1
 801187e:	e03c      	b.n	80118fa <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	2b01      	cmp	r3, #1
 8011884:	d904      	bls.n	8011890 <dir_sdi+0xb6>
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801188a:	697a      	ldr	r2, [r7, #20]
 801188c:	429a      	cmp	r2, r3
 801188e:	d301      	bcc.n	8011894 <dir_sdi+0xba>
 8011890:	2302      	movs	r3, #2
 8011892:	e032      	b.n	80118fa <dir_sdi+0x120>
			ofs -= csz;
 8011894:	683a      	ldr	r2, [r7, #0]
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	1ad3      	subs	r3, r2, r3
 801189a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801189c:	683a      	ldr	r2, [r7, #0]
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d2e1      	bcs.n	8011868 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 80118a4:	6979      	ldr	r1, [r7, #20]
 80118a6:	6938      	ldr	r0, [r7, #16]
 80118a8:	f7ff f9a4 	bl	8010bf4 <clust2sect>
 80118ac:	4602      	mov	r2, r0
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	697a      	ldr	r2, [r7, #20]
 80118b6:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d101      	bne.n	80118c4 <dir_sdi+0xea>
 80118c0:	2302      	movs	r3, #2
 80118c2:	e01a      	b.n	80118fa <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	899b      	ldrh	r3, [r3, #12]
 80118cc:	4619      	mov	r1, r3
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80118d4:	441a      	add	r2, r3
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	899b      	ldrh	r3, [r3, #12]
 80118e4:	461a      	mov	r2, r3
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80118ec:	fb00 f202 	mul.w	r2, r0, r2
 80118f0:	1a9b      	subs	r3, r3, r2
 80118f2:	18ca      	adds	r2, r1, r3
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80118f8:	2300      	movs	r3, #0
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3718      	adds	r7, #24
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}

08011902 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011902:	b580      	push	{r7, lr}
 8011904:	b086      	sub	sp, #24
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
 801190a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011916:	3320      	adds	r3, #32
 8011918:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801191e:	2b00      	cmp	r3, #0
 8011920:	d00b      	beq.n	801193a <dir_next+0x38>
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	2b04      	cmp	r3, #4
 8011928:	d102      	bne.n	8011930 <dir_next+0x2e>
 801192a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801192e:	e001      	b.n	8011934 <dir_next+0x32>
 8011930:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	429a      	cmp	r2, r3
 8011938:	d801      	bhi.n	801193e <dir_next+0x3c>
 801193a:	2304      	movs	r3, #4
 801193c:	e0c3      	b.n	8011ac6 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	899b      	ldrh	r3, [r3, #12]
 8011942:	461a      	mov	r2, r3
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	fbb3 f1f2 	udiv	r1, r3, r2
 801194a:	fb01 f202 	mul.w	r2, r1, r2
 801194e:	1a9b      	subs	r3, r3, r2
 8011950:	2b00      	cmp	r3, #0
 8011952:	f040 80a5 	bne.w	8011aa0 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801195a:	1c5a      	adds	r2, r3, #1
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011964:	2b00      	cmp	r3, #0
 8011966:	d10b      	bne.n	8011980 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	095b      	lsrs	r3, r3, #5
 801196c:	68fa      	ldr	r2, [r7, #12]
 801196e:	8912      	ldrh	r2, [r2, #8]
 8011970:	4293      	cmp	r3, r2
 8011972:	f0c0 8095 	bcc.w	8011aa0 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2200      	movs	r2, #0
 801197a:	639a      	str	r2, [r3, #56]	; 0x38
 801197c:	2304      	movs	r3, #4
 801197e:	e0a2      	b.n	8011ac6 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	899b      	ldrh	r3, [r3, #12]
 8011984:	461a      	mov	r2, r3
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	fbb3 f3f2 	udiv	r3, r3, r2
 801198c:	68fa      	ldr	r2, [r7, #12]
 801198e:	8952      	ldrh	r2, [r2, #10]
 8011990:	3a01      	subs	r2, #1
 8011992:	4013      	ands	r3, r2
 8011994:	2b00      	cmp	r3, #0
 8011996:	f040 8083 	bne.w	8011aa0 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801199a:	687a      	ldr	r2, [r7, #4]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119a0:	4619      	mov	r1, r3
 80119a2:	4610      	mov	r0, r2
 80119a4:	f7ff f946 	bl	8010c34 <get_fat>
 80119a8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	2b01      	cmp	r3, #1
 80119ae:	d801      	bhi.n	80119b4 <dir_next+0xb2>
 80119b0:	2302      	movs	r3, #2
 80119b2:	e088      	b.n	8011ac6 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119ba:	d101      	bne.n	80119c0 <dir_next+0xbe>
 80119bc:	2301      	movs	r3, #1
 80119be:	e082      	b.n	8011ac6 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119c4:	697a      	ldr	r2, [r7, #20]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d360      	bcc.n	8011a8c <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d104      	bne.n	80119da <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2200      	movs	r2, #0
 80119d4:	639a      	str	r2, [r3, #56]	; 0x38
 80119d6:	2304      	movs	r3, #4
 80119d8:	e075      	b.n	8011ac6 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119e0:	4619      	mov	r1, r3
 80119e2:	4610      	mov	r0, r2
 80119e4:	f7ff fdac 	bl	8011540 <create_chain>
 80119e8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d101      	bne.n	80119f4 <dir_next+0xf2>
 80119f0:	2307      	movs	r3, #7
 80119f2:	e068      	b.n	8011ac6 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	2b01      	cmp	r3, #1
 80119f8:	d101      	bne.n	80119fe <dir_next+0xfc>
 80119fa:	2302      	movs	r3, #2
 80119fc:	e063      	b.n	8011ac6 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a04:	d101      	bne.n	8011a0a <dir_next+0x108>
 8011a06:	2301      	movs	r3, #1
 8011a08:	e05d      	b.n	8011ac6 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	79db      	ldrb	r3, [r3, #7]
 8011a0e:	f043 0304 	orr.w	r3, r3, #4
 8011a12:	b2da      	uxtb	r2, r3
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011a18:	68f8      	ldr	r0, [r7, #12]
 8011a1a:	f7ff f809 	bl	8010a30 <sync_window>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d001      	beq.n	8011a28 <dir_next+0x126>
 8011a24:	2301      	movs	r3, #1
 8011a26:	e04e      	b.n	8011ac6 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	899b      	ldrh	r3, [r3, #12]
 8011a32:	461a      	mov	r2, r3
 8011a34:	2100      	movs	r1, #0
 8011a36:	f7fe fe01 	bl	801063c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	613b      	str	r3, [r7, #16]
 8011a3e:	6979      	ldr	r1, [r7, #20]
 8011a40:	68f8      	ldr	r0, [r7, #12]
 8011a42:	f7ff f8d7 	bl	8010bf4 <clust2sect>
 8011a46:	4602      	mov	r2, r0
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8011a4c:	e012      	b.n	8011a74 <dir_next+0x172>
						fs->wflag = 1;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	2201      	movs	r2, #1
 8011a52:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f7fe ffeb 	bl	8010a30 <sync_window>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d001      	beq.n	8011a64 <dir_next+0x162>
 8011a60:	2301      	movs	r3, #1
 8011a62:	e030      	b.n	8011ac6 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	3301      	adds	r3, #1
 8011a68:	613b      	str	r3, [r7, #16]
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a6e:	1c5a      	adds	r2, r3, #1
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	64da      	str	r2, [r3, #76]	; 0x4c
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	895b      	ldrh	r3, [r3, #10]
 8011a78:	461a      	mov	r2, r3
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	d3e6      	bcc.n	8011a4e <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	1ad2      	subs	r2, r2, r3
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	64da      	str	r2, [r3, #76]	; 0x4c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	697a      	ldr	r2, [r7, #20]
 8011a90:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8011a92:	6979      	ldr	r1, [r7, #20]
 8011a94:	68f8      	ldr	r0, [r7, #12]
 8011a96:	f7ff f8ad 	bl	8010bf4 <clust2sect>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	68ba      	ldr	r2, [r7, #8]
 8011aa4:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	899b      	ldrh	r3, [r3, #12]
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ab8:	fb00 f202 	mul.w	r2, r0, r2
 8011abc:	1a9b      	subs	r3, r3, r2
 8011abe:	18ca      	adds	r2, r1, r3
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8011ac4:	2300      	movs	r3, #0
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3718      	adds	r7, #24
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}

08011ace <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011ace:	b580      	push	{r7, lr}
 8011ad0:	b086      	sub	sp, #24
 8011ad2:	af00      	add	r7, sp, #0
 8011ad4:	6078      	str	r0, [r7, #4]
 8011ad6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011ade:	2100      	movs	r1, #0
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f7ff fe7a 	bl	80117da <dir_sdi>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011aea:	7dfb      	ldrb	r3, [r7, #23]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d140      	bne.n	8011b72 <dir_alloc+0xa4>
		n = 0;
 8011af0:	2300      	movs	r3, #0
 8011af2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011af8:	4619      	mov	r1, r3
 8011afa:	68f8      	ldr	r0, [r7, #12]
 8011afc:	f7fe ffdc 	bl	8010ab8 <move_window>
 8011b00:	4603      	mov	r3, r0
 8011b02:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011b04:	7dfb      	ldrb	r3, [r7, #23]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d132      	bne.n	8011b70 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	2b04      	cmp	r3, #4
 8011b10:	d108      	bne.n	8011b24 <dir_alloc+0x56>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	b25b      	sxtb	r3, r3
 8011b1a:	43db      	mvns	r3, r3
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	09db      	lsrs	r3, r3, #7
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	e00f      	b.n	8011b44 <dir_alloc+0x76>
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	2be5      	cmp	r3, #229	; 0xe5
 8011b2c:	d004      	beq.n	8011b38 <dir_alloc+0x6a>
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d101      	bne.n	8011b3c <dir_alloc+0x6e>
 8011b38:	2301      	movs	r3, #1
 8011b3a:	e000      	b.n	8011b3e <dir_alloc+0x70>
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	f003 0301 	and.w	r3, r3, #1
 8011b42:	b2db      	uxtb	r3, r3
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d007      	beq.n	8011b58 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	613b      	str	r3, [r7, #16]
 8011b4e:	693a      	ldr	r2, [r7, #16]
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d102      	bne.n	8011b5c <dir_alloc+0x8e>
 8011b56:	e00c      	b.n	8011b72 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011b58:	2300      	movs	r3, #0
 8011b5a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011b5c:	2101      	movs	r1, #1
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f7ff fecf 	bl	8011902 <dir_next>
 8011b64:	4603      	mov	r3, r0
 8011b66:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011b68:	7dfb      	ldrb	r3, [r7, #23]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d0c2      	beq.n	8011af4 <dir_alloc+0x26>
 8011b6e:	e000      	b.n	8011b72 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8011b70:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011b72:	7dfb      	ldrb	r3, [r7, #23]
 8011b74:	2b04      	cmp	r3, #4
 8011b76:	d101      	bne.n	8011b7c <dir_alloc+0xae>
 8011b78:	2307      	movs	r3, #7
 8011b7a:	75fb      	strb	r3, [r7, #23]
	return res;
 8011b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3718      	adds	r7, #24
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}

08011b86 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011b86:	b580      	push	{r7, lr}
 8011b88:	b084      	sub	sp, #16
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	6078      	str	r0, [r7, #4]
 8011b8e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	331a      	adds	r3, #26
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7fe fb4b 	bl	8010230 <ld_word>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	781b      	ldrb	r3, [r3, #0]
 8011ba2:	2b03      	cmp	r3, #3
 8011ba4:	d109      	bne.n	8011bba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	3314      	adds	r3, #20
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7fe fb40 	bl	8010230 <ld_word>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	041b      	lsls	r3, r3, #16
 8011bb4:	68fa      	ldr	r2, [r7, #12]
 8011bb6:	4313      	orrs	r3, r2
 8011bb8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011bba:	68fb      	ldr	r3, [r7, #12]
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3710      	adds	r7, #16
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}

08011bc4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b084      	sub	sp, #16
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	60f8      	str	r0, [r7, #12]
 8011bcc:	60b9      	str	r1, [r7, #8]
 8011bce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	331a      	adds	r3, #26
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	b292      	uxth	r2, r2
 8011bd8:	4611      	mov	r1, r2
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7fe fc3e 	bl	801045c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	2b03      	cmp	r3, #3
 8011be6:	d109      	bne.n	8011bfc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	f103 0214 	add.w	r2, r3, #20
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	0c1b      	lsrs	r3, r3, #16
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	f7fe fc30 	bl	801045c <st_word>
	}
}
 8011bfc:	bf00      	nop
 8011bfe:	3710      	adds	r7, #16
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}

08011c04 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011c04:	b590      	push	{r4, r7, lr}
 8011c06:	b087      	sub	sp, #28
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	331a      	adds	r3, #26
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7fe fb0c 	bl	8010230 <ld_word>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d001      	beq.n	8011c22 <cmp_lfn+0x1e>
 8011c1e:	2300      	movs	r3, #0
 8011c20:	e059      	b.n	8011cd6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011c2a:	1e5a      	subs	r2, r3, #1
 8011c2c:	4613      	mov	r3, r2
 8011c2e:	005b      	lsls	r3, r3, #1
 8011c30:	4413      	add	r3, r2
 8011c32:	009b      	lsls	r3, r3, #2
 8011c34:	4413      	add	r3, r2
 8011c36:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011c38:	2301      	movs	r3, #1
 8011c3a:	81fb      	strh	r3, [r7, #14]
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	613b      	str	r3, [r7, #16]
 8011c40:	e033      	b.n	8011caa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011c42:	4a27      	ldr	r2, [pc, #156]	; (8011ce0 <cmp_lfn+0xdc>)
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	4413      	add	r3, r2
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	4413      	add	r3, r2
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7fe faed 	bl	8010230 <ld_word>
 8011c56:	4603      	mov	r3, r0
 8011c58:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011c5a:	89fb      	ldrh	r3, [r7, #14]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d01a      	beq.n	8011c96 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	2bfe      	cmp	r3, #254	; 0xfe
 8011c64:	d812      	bhi.n	8011c8c <cmp_lfn+0x88>
 8011c66:	89bb      	ldrh	r3, [r7, #12]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f003 ffd1 	bl	8015c10 <ff_wtoupper>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	461c      	mov	r4, r3
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	1c5a      	adds	r2, r3, #1
 8011c76:	617a      	str	r2, [r7, #20]
 8011c78:	005b      	lsls	r3, r3, #1
 8011c7a:	687a      	ldr	r2, [r7, #4]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	881b      	ldrh	r3, [r3, #0]
 8011c80:	4618      	mov	r0, r3
 8011c82:	f003 ffc5 	bl	8015c10 <ff_wtoupper>
 8011c86:	4603      	mov	r3, r0
 8011c88:	429c      	cmp	r4, r3
 8011c8a:	d001      	beq.n	8011c90 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	e022      	b.n	8011cd6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8011c90:	89bb      	ldrh	r3, [r7, #12]
 8011c92:	81fb      	strh	r3, [r7, #14]
 8011c94:	e006      	b.n	8011ca4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011c96:	89bb      	ldrh	r3, [r7, #12]
 8011c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c9c:	4293      	cmp	r3, r2
 8011c9e:	d001      	beq.n	8011ca4 <cmp_lfn+0xa0>
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	e018      	b.n	8011cd6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	613b      	str	r3, [r7, #16]
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	2b0c      	cmp	r3, #12
 8011cae:	d9c8      	bls.n	8011c42 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d00b      	beq.n	8011cd4 <cmp_lfn+0xd0>
 8011cbc:	89fb      	ldrh	r3, [r7, #14]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d008      	beq.n	8011cd4 <cmp_lfn+0xd0>
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	005b      	lsls	r3, r3, #1
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	4413      	add	r3, r2
 8011cca:	881b      	ldrh	r3, [r3, #0]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d001      	beq.n	8011cd4 <cmp_lfn+0xd0>
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	e000      	b.n	8011cd6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011cd4:	2301      	movs	r3, #1
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	371c      	adds	r7, #28
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd90      	pop	{r4, r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	0801b954 	.word	0x0801b954

08011ce4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b086      	sub	sp, #24
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	331a      	adds	r3, #26
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7fe fa9c 	bl	8010230 <ld_word>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d001      	beq.n	8011d02 <pick_lfn+0x1e>
 8011cfe:	2300      	movs	r3, #0
 8011d00:	e04d      	b.n	8011d9e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d0a:	1e5a      	subs	r2, r3, #1
 8011d0c:	4613      	mov	r3, r2
 8011d0e:	005b      	lsls	r3, r3, #1
 8011d10:	4413      	add	r3, r2
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	4413      	add	r3, r2
 8011d16:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011d18:	2301      	movs	r3, #1
 8011d1a:	81fb      	strh	r3, [r7, #14]
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	613b      	str	r3, [r7, #16]
 8011d20:	e028      	b.n	8011d74 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011d22:	4a21      	ldr	r2, [pc, #132]	; (8011da8 <pick_lfn+0xc4>)
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	4413      	add	r3, r2
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	4413      	add	r3, r2
 8011d30:	4618      	mov	r0, r3
 8011d32:	f7fe fa7d 	bl	8010230 <ld_word>
 8011d36:	4603      	mov	r3, r0
 8011d38:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011d3a:	89fb      	ldrh	r3, [r7, #14]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d00f      	beq.n	8011d60 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	2bfe      	cmp	r3, #254	; 0xfe
 8011d44:	d901      	bls.n	8011d4a <pick_lfn+0x66>
 8011d46:	2300      	movs	r3, #0
 8011d48:	e029      	b.n	8011d9e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011d4a:	89bb      	ldrh	r3, [r7, #12]
 8011d4c:	81fb      	strh	r3, [r7, #14]
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	1c5a      	adds	r2, r3, #1
 8011d52:	617a      	str	r2, [r7, #20]
 8011d54:	005b      	lsls	r3, r3, #1
 8011d56:	687a      	ldr	r2, [r7, #4]
 8011d58:	4413      	add	r3, r2
 8011d5a:	89fa      	ldrh	r2, [r7, #14]
 8011d5c:	801a      	strh	r2, [r3, #0]
 8011d5e:	e006      	b.n	8011d6e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011d60:	89bb      	ldrh	r3, [r7, #12]
 8011d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d001      	beq.n	8011d6e <pick_lfn+0x8a>
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	e017      	b.n	8011d9e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	3301      	adds	r3, #1
 8011d72:	613b      	str	r3, [r7, #16]
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	2b0c      	cmp	r3, #12
 8011d78:	d9d3      	bls.n	8011d22 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d00a      	beq.n	8011d9c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	2bfe      	cmp	r3, #254	; 0xfe
 8011d8a:	d901      	bls.n	8011d90 <pick_lfn+0xac>
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	e006      	b.n	8011d9e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	005b      	lsls	r3, r3, #1
 8011d94:	687a      	ldr	r2, [r7, #4]
 8011d96:	4413      	add	r3, r2
 8011d98:	2200      	movs	r2, #0
 8011d9a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8011d9c:	2301      	movs	r3, #1
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3718      	adds	r7, #24
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	0801b954 	.word	0x0801b954

08011dac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b088      	sub	sp, #32
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	60f8      	str	r0, [r7, #12]
 8011db4:	60b9      	str	r1, [r7, #8]
 8011db6:	4611      	mov	r1, r2
 8011db8:	461a      	mov	r2, r3
 8011dba:	460b      	mov	r3, r1
 8011dbc:	71fb      	strb	r3, [r7, #7]
 8011dbe:	4613      	mov	r3, r2
 8011dc0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	330d      	adds	r3, #13
 8011dc6:	79ba      	ldrb	r2, [r7, #6]
 8011dc8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	330b      	adds	r3, #11
 8011dce:	220f      	movs	r2, #15
 8011dd0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	330c      	adds	r3, #12
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	331a      	adds	r3, #26
 8011dde:	2100      	movs	r1, #0
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7fe fb3b 	bl	801045c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011de6:	79fb      	ldrb	r3, [r7, #7]
 8011de8:	1e5a      	subs	r2, r3, #1
 8011dea:	4613      	mov	r3, r2
 8011dec:	005b      	lsls	r3, r3, #1
 8011dee:	4413      	add	r3, r2
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	4413      	add	r3, r2
 8011df4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8011df6:	2300      	movs	r3, #0
 8011df8:	82fb      	strh	r3, [r7, #22]
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011dfe:	8afb      	ldrh	r3, [r7, #22]
 8011e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e04:	4293      	cmp	r3, r2
 8011e06:	d007      	beq.n	8011e18 <put_lfn+0x6c>
 8011e08:	69fb      	ldr	r3, [r7, #28]
 8011e0a:	1c5a      	adds	r2, r3, #1
 8011e0c:	61fa      	str	r2, [r7, #28]
 8011e0e:	005b      	lsls	r3, r3, #1
 8011e10:	68fa      	ldr	r2, [r7, #12]
 8011e12:	4413      	add	r3, r2
 8011e14:	881b      	ldrh	r3, [r3, #0]
 8011e16:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011e18:	4a17      	ldr	r2, [pc, #92]	; (8011e78 <put_lfn+0xcc>)
 8011e1a:	69bb      	ldr	r3, [r7, #24]
 8011e1c:	4413      	add	r3, r2
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	461a      	mov	r2, r3
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	4413      	add	r3, r2
 8011e26:	8afa      	ldrh	r2, [r7, #22]
 8011e28:	4611      	mov	r1, r2
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f7fe fb16 	bl	801045c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011e30:	8afb      	ldrh	r3, [r7, #22]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d102      	bne.n	8011e3c <put_lfn+0x90>
 8011e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e3a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011e3c:	69bb      	ldr	r3, [r7, #24]
 8011e3e:	3301      	adds	r3, #1
 8011e40:	61bb      	str	r3, [r7, #24]
 8011e42:	69bb      	ldr	r3, [r7, #24]
 8011e44:	2b0c      	cmp	r3, #12
 8011e46:	d9da      	bls.n	8011dfe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011e48:	8afb      	ldrh	r3, [r7, #22]
 8011e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d006      	beq.n	8011e60 <put_lfn+0xb4>
 8011e52:	69fb      	ldr	r3, [r7, #28]
 8011e54:	005b      	lsls	r3, r3, #1
 8011e56:	68fa      	ldr	r2, [r7, #12]
 8011e58:	4413      	add	r3, r2
 8011e5a:	881b      	ldrh	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d103      	bne.n	8011e68 <put_lfn+0xbc>
 8011e60:	79fb      	ldrb	r3, [r7, #7]
 8011e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e66:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	79fa      	ldrb	r2, [r7, #7]
 8011e6c:	701a      	strb	r2, [r3, #0]
}
 8011e6e:	bf00      	nop
 8011e70:	3720      	adds	r7, #32
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}
 8011e76:	bf00      	nop
 8011e78:	0801b954 	.word	0x0801b954

08011e7c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b08c      	sub	sp, #48	; 0x30
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	60f8      	str	r0, [r7, #12]
 8011e84:	60b9      	str	r1, [r7, #8]
 8011e86:	607a      	str	r2, [r7, #4]
 8011e88:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011e8a:	220b      	movs	r2, #11
 8011e8c:	68b9      	ldr	r1, [r7, #8]
 8011e8e:	68f8      	ldr	r0, [r7, #12]
 8011e90:	f7fe fbb3 	bl	80105fa <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	2b05      	cmp	r3, #5
 8011e98:	d929      	bls.n	8011eee <gen_numname+0x72>
		sr = seq;
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011e9e:	e020      	b.n	8011ee2 <gen_numname+0x66>
			wc = *lfn++;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	1c9a      	adds	r2, r3, #2
 8011ea4:	607a      	str	r2, [r7, #4]
 8011ea6:	881b      	ldrh	r3, [r3, #0]
 8011ea8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011eaa:	2300      	movs	r3, #0
 8011eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8011eae:	e015      	b.n	8011edc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8011eb0:	69fb      	ldr	r3, [r7, #28]
 8011eb2:	005a      	lsls	r2, r3, #1
 8011eb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011eb6:	f003 0301 	and.w	r3, r3, #1
 8011eba:	4413      	add	r3, r2
 8011ebc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011ebe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ec0:	085b      	lsrs	r3, r3, #1
 8011ec2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011ec4:	69fb      	ldr	r3, [r7, #28]
 8011ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d003      	beq.n	8011ed6 <gen_numname+0x5a>
 8011ece:	69fa      	ldr	r2, [r7, #28]
 8011ed0:	4b30      	ldr	r3, [pc, #192]	; (8011f94 <gen_numname+0x118>)
 8011ed2:	4053      	eors	r3, r2
 8011ed4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed8:	3301      	adds	r3, #1
 8011eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8011edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ede:	2b0f      	cmp	r3, #15
 8011ee0:	d9e6      	bls.n	8011eb0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	881b      	ldrh	r3, [r3, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d1da      	bne.n	8011ea0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011eea:	69fb      	ldr	r3, [r7, #28]
 8011eec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011eee:	2307      	movs	r3, #7
 8011ef0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	f003 030f 	and.w	r3, r3, #15
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	3330      	adds	r3, #48	; 0x30
 8011efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8011f02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f06:	2b39      	cmp	r3, #57	; 0x39
 8011f08:	d904      	bls.n	8011f14 <gen_numname+0x98>
 8011f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f0e:	3307      	adds	r3, #7
 8011f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f16:	1e5a      	subs	r2, r3, #1
 8011f18:	62ba      	str	r2, [r7, #40]	; 0x28
 8011f1a:	3330      	adds	r3, #48	; 0x30
 8011f1c:	443b      	add	r3, r7
 8011f1e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011f22:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	091b      	lsrs	r3, r3, #4
 8011f2a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d1df      	bne.n	8011ef2 <gen_numname+0x76>
	ns[i] = '~';
 8011f32:	f107 0214 	add.w	r2, r7, #20
 8011f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f38:	4413      	add	r3, r2
 8011f3a:	227e      	movs	r2, #126	; 0x7e
 8011f3c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011f3e:	2300      	movs	r3, #0
 8011f40:	627b      	str	r3, [r7, #36]	; 0x24
 8011f42:	e002      	b.n	8011f4a <gen_numname+0xce>
 8011f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f46:	3301      	adds	r3, #1
 8011f48:	627b      	str	r3, [r7, #36]	; 0x24
 8011f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d205      	bcs.n	8011f5e <gen_numname+0xe2>
 8011f52:	68fa      	ldr	r2, [r7, #12]
 8011f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f56:	4413      	add	r3, r2
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	2b20      	cmp	r3, #32
 8011f5c:	d1f2      	bne.n	8011f44 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f60:	2b07      	cmp	r3, #7
 8011f62:	d807      	bhi.n	8011f74 <gen_numname+0xf8>
 8011f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f66:	1c5a      	adds	r2, r3, #1
 8011f68:	62ba      	str	r2, [r7, #40]	; 0x28
 8011f6a:	3330      	adds	r3, #48	; 0x30
 8011f6c:	443b      	add	r3, r7
 8011f6e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011f72:	e000      	b.n	8011f76 <gen_numname+0xfa>
 8011f74:	2120      	movs	r1, #32
 8011f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f78:	1c5a      	adds	r2, r3, #1
 8011f7a:	627a      	str	r2, [r7, #36]	; 0x24
 8011f7c:	68fa      	ldr	r2, [r7, #12]
 8011f7e:	4413      	add	r3, r2
 8011f80:	460a      	mov	r2, r1
 8011f82:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f86:	2b07      	cmp	r3, #7
 8011f88:	d9e9      	bls.n	8011f5e <gen_numname+0xe2>
}
 8011f8a:	bf00      	nop
 8011f8c:	bf00      	nop
 8011f8e:	3730      	adds	r7, #48	; 0x30
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}
 8011f94:	00011021 	.word	0x00011021

08011f98 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b085      	sub	sp, #20
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011fa4:	230b      	movs	r3, #11
 8011fa6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011fa8:	7bfb      	ldrb	r3, [r7, #15]
 8011faa:	b2da      	uxtb	r2, r3
 8011fac:	0852      	lsrs	r2, r2, #1
 8011fae:	01db      	lsls	r3, r3, #7
 8011fb0:	4313      	orrs	r3, r2
 8011fb2:	b2da      	uxtb	r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	1c59      	adds	r1, r3, #1
 8011fb8:	6079      	str	r1, [r7, #4]
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	4413      	add	r3, r2
 8011fbe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	3b01      	subs	r3, #1
 8011fc4:	60bb      	str	r3, [r7, #8]
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d1ed      	bne.n	8011fa8 <sum_sfn+0x10>
	return sum;
 8011fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	3714      	adds	r7, #20
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd8:	4770      	bx	lr

08011fda <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8011fda:	b480      	push	{r7}
 8011fdc:	b087      	sub	sp, #28
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	3301      	adds	r3, #1
 8011fe6:	781b      	ldrb	r3, [r3, #0]
 8011fe8:	3301      	adds	r3, #1
 8011fea:	015b      	lsls	r3, r3, #5
 8011fec:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8011fee:	2300      	movs	r3, #0
 8011ff0:	827b      	strh	r3, [r7, #18]
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	617b      	str	r3, [r7, #20]
 8011ff6:	e018      	b.n	801202a <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8011ff8:	697b      	ldr	r3, [r7, #20]
 8011ffa:	2b02      	cmp	r3, #2
 8011ffc:	d103      	bne.n	8012006 <xdir_sum+0x2c>
			i++;
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	3301      	adds	r3, #1
 8012002:	617b      	str	r3, [r7, #20]
 8012004:	e00e      	b.n	8012024 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8012006:	8a7b      	ldrh	r3, [r7, #18]
 8012008:	03db      	lsls	r3, r3, #15
 801200a:	b29a      	uxth	r2, r3
 801200c:	8a7b      	ldrh	r3, [r7, #18]
 801200e:	085b      	lsrs	r3, r3, #1
 8012010:	b29b      	uxth	r3, r3
 8012012:	4413      	add	r3, r2
 8012014:	b29a      	uxth	r2, r3
 8012016:	6879      	ldr	r1, [r7, #4]
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	440b      	add	r3, r1
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	b29b      	uxth	r3, r3
 8012020:	4413      	add	r3, r2
 8012022:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	3301      	adds	r3, #1
 8012028:	617b      	str	r3, [r7, #20]
 801202a:	697a      	ldr	r2, [r7, #20]
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	429a      	cmp	r2, r3
 8012030:	d3e2      	bcc.n	8011ff8 <xdir_sum+0x1e>
		}
	}
	return sum;
 8012032:	8a7b      	ldrh	r3, [r7, #18]
}
 8012034:	4618      	mov	r0, r3
 8012036:	371c      	adds	r7, #28
 8012038:	46bd      	mov	sp, r7
 801203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203e:	4770      	bx	lr

08012040 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b084      	sub	sp, #16
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8012048:	2300      	movs	r3, #0
 801204a:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 801204c:	e01f      	b.n	801208e <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 801204e:	89bb      	ldrh	r3, [r7, #12]
 8012050:	4618      	mov	r0, r3
 8012052:	f003 fddd 	bl	8015c10 <ff_wtoupper>
 8012056:	4603      	mov	r3, r0
 8012058:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 801205a:	89fb      	ldrh	r3, [r7, #14]
 801205c:	03db      	lsls	r3, r3, #15
 801205e:	b29a      	uxth	r2, r3
 8012060:	89fb      	ldrh	r3, [r7, #14]
 8012062:	085b      	lsrs	r3, r3, #1
 8012064:	b29b      	uxth	r3, r3
 8012066:	4413      	add	r3, r2
 8012068:	b29a      	uxth	r2, r3
 801206a:	89bb      	ldrh	r3, [r7, #12]
 801206c:	b2db      	uxtb	r3, r3
 801206e:	b29b      	uxth	r3, r3
 8012070:	4413      	add	r3, r2
 8012072:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8012074:	89fb      	ldrh	r3, [r7, #14]
 8012076:	03db      	lsls	r3, r3, #15
 8012078:	b29a      	uxth	r2, r3
 801207a:	89fb      	ldrh	r3, [r7, #14]
 801207c:	085b      	lsrs	r3, r3, #1
 801207e:	b29b      	uxth	r3, r3
 8012080:	4413      	add	r3, r2
 8012082:	b29a      	uxth	r2, r3
 8012084:	89bb      	ldrh	r3, [r7, #12]
 8012086:	0a1b      	lsrs	r3, r3, #8
 8012088:	b29b      	uxth	r3, r3
 801208a:	4413      	add	r3, r2
 801208c:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	1c9a      	adds	r2, r3, #2
 8012092:	607a      	str	r2, [r7, #4]
 8012094:	881b      	ldrh	r3, [r3, #0]
 8012096:	81bb      	strh	r3, [r7, #12]
 8012098:	89bb      	ldrh	r3, [r7, #12]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d1d7      	bne.n	801204e <xname_sum+0xe>
	}
	return sum;
 801209e:	89fb      	ldrh	r3, [r7, #14]
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	3710      	adds	r7, #16
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}

080120a8 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b086      	sub	sp, #24
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
 80120b0:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 80120b2:	2300      	movs	r3, #0
 80120b4:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 80120b6:	2340      	movs	r3, #64	; 0x40
 80120b8:	613b      	str	r3, [r7, #16]
 80120ba:	2300      	movs	r3, #0
 80120bc:	60fb      	str	r3, [r7, #12]
 80120be:	e02c      	b.n	801211a <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	f003 031f 	and.w	r3, r3, #31
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d102      	bne.n	80120d0 <get_xdir_info+0x28>
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	3302      	adds	r3, #2
 80120ce:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 80120d0:	687a      	ldr	r2, [r7, #4]
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	4413      	add	r3, r2
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7fe f8aa 	bl	8010230 <ld_word>
 80120dc:	4603      	mov	r3, r0
 80120de:	2100      	movs	r1, #0
 80120e0:	4618      	mov	r0, r3
 80120e2:	f003 fd59 	bl	8015b98 <ff_convert>
 80120e6:	4603      	mov	r3, r0
 80120e8:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 80120ea:	897b      	ldrh	r3, [r7, #10]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d002      	beq.n	80120f6 <get_xdir_info+0x4e>
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	2bfe      	cmp	r3, #254	; 0xfe
 80120f4:	d902      	bls.n	80120fc <get_xdir_info+0x54>
 80120f6:	2300      	movs	r3, #0
 80120f8:	617b      	str	r3, [r7, #20]
 80120fa:	e015      	b.n	8012128 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	1c5a      	adds	r2, r3, #1
 8012100:	617a      	str	r2, [r7, #20]
 8012102:	897a      	ldrh	r2, [r7, #10]
 8012104:	b2d1      	uxtb	r1, r2
 8012106:	683a      	ldr	r2, [r7, #0]
 8012108:	4413      	add	r3, r2
 801210a:	460a      	mov	r2, r1
 801210c:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	3302      	adds	r3, #2
 8012112:	613b      	str	r3, [r7, #16]
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	3301      	adds	r3, #1
 8012118:	60fb      	str	r3, [r7, #12]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	3323      	adds	r3, #35	; 0x23
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	461a      	mov	r2, r3
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	4293      	cmp	r3, r2
 8012126:	d3cb      	bcc.n	80120c0 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d106      	bne.n	801213c <get_xdir_info+0x94>
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	1c5a      	adds	r2, r3, #1
 8012132:	617a      	str	r2, [r7, #20]
 8012134:	683a      	ldr	r2, [r7, #0]
 8012136:	4413      	add	r3, r2
 8012138:	223f      	movs	r2, #63	; 0x3f
 801213a:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 801213c:	683a      	ldr	r2, [r7, #0]
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	4413      	add	r3, r2
 8012142:	331a      	adds	r3, #26
 8012144:	2200      	movs	r2, #0
 8012146:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	2200      	movs	r2, #0
 801214c:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	791a      	ldrb	r2, [r3, #4]
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	7b1b      	ldrb	r3, [r3, #12]
 801215a:	f003 0310 	and.w	r3, r3, #16
 801215e:	2b00      	cmp	r3, #0
 8012160:	d107      	bne.n	8012172 <get_xdir_info+0xca>
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	3338      	adds	r3, #56	; 0x38
 8012166:	4618      	mov	r0, r3
 8012168:	f7fe f89d 	bl	80102a6 <ld_qword>
 801216c:	4602      	mov	r2, r0
 801216e:	460b      	mov	r3, r1
 8012170:	e003      	b.n	801217a <get_xdir_info+0xd2>
 8012172:	f04f 0200 	mov.w	r2, #0
 8012176:	f04f 0300 	mov.w	r3, #0
 801217a:	6839      	ldr	r1, [r7, #0]
 801217c:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	330c      	adds	r3, #12
 8012184:	4618      	mov	r0, r3
 8012186:	f7fe f853 	bl	8010230 <ld_word>
 801218a:	4603      	mov	r3, r0
 801218c:	461a      	mov	r2, r3
 801218e:	683b      	ldr	r3, [r7, #0]
 8012190:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	330e      	adds	r3, #14
 8012196:	4618      	mov	r0, r3
 8012198:	f7fe f84a 	bl	8010230 <ld_word>
 801219c:	4603      	mov	r3, r0
 801219e:	461a      	mov	r2, r3
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	811a      	strh	r2, [r3, #8]
}
 80121a4:	bf00      	nop
 80121a6:	3718      	adds	r7, #24
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}

080121ac <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80121ac:	b590      	push	{r4, r7, lr}
 80121ae:	b087      	sub	sp, #28
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	695b      	ldr	r3, [r3, #20]
 80121ba:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121c4:	4619      	mov	r1, r3
 80121c6:	4610      	mov	r0, r2
 80121c8:	f7fe fc76 	bl	8010ab8 <move_window>
 80121cc:	4603      	mov	r3, r0
 80121ce:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80121d0:	7bfb      	ldrb	r3, [r7, #15]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d001      	beq.n	80121da <load_xdir+0x2e>
 80121d6:	7bfb      	ldrb	r3, [r7, #15]
 80121d8:	e09f      	b.n	801231a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	2b85      	cmp	r3, #133	; 0x85
 80121e2:	d001      	beq.n	80121e8 <load_xdir+0x3c>
 80121e4:	2302      	movs	r3, #2
 80121e6:	e098      	b.n	801231a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121ec:	2220      	movs	r2, #32
 80121ee:	4619      	mov	r1, r3
 80121f0:	6938      	ldr	r0, [r7, #16]
 80121f2:	f7fe fa02 	bl	80105fa <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80121f6:	693b      	ldr	r3, [r7, #16]
 80121f8:	3301      	adds	r3, #1
 80121fa:	781b      	ldrb	r3, [r3, #0]
 80121fc:	3301      	adds	r3, #1
 80121fe:	015b      	lsls	r3, r3, #5
 8012200:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	2b5f      	cmp	r3, #95	; 0x5f
 8012206:	d903      	bls.n	8012210 <load_xdir+0x64>
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 801220e:	d901      	bls.n	8012214 <load_xdir+0x68>
 8012210:	2302      	movs	r3, #2
 8012212:	e082      	b.n	801231a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8012214:	2100      	movs	r1, #0
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f7ff fb73 	bl	8011902 <dir_next>
 801221c:	4603      	mov	r3, r0
 801221e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8012220:	7bfb      	ldrb	r3, [r7, #15]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d001      	beq.n	801222a <load_xdir+0x7e>
 8012226:	7bfb      	ldrb	r3, [r7, #15]
 8012228:	e077      	b.n	801231a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681a      	ldr	r2, [r3, #0]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012232:	4619      	mov	r1, r3
 8012234:	4610      	mov	r0, r2
 8012236:	f7fe fc3f 	bl	8010ab8 <move_window>
 801223a:	4603      	mov	r3, r0
 801223c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 801223e:	7bfb      	ldrb	r3, [r7, #15]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d001      	beq.n	8012248 <load_xdir+0x9c>
 8012244:	7bfb      	ldrb	r3, [r7, #15]
 8012246:	e068      	b.n	801231a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	2bc0      	cmp	r3, #192	; 0xc0
 8012250:	d001      	beq.n	8012256 <load_xdir+0xaa>
 8012252:	2302      	movs	r3, #2
 8012254:	e061      	b.n	801231a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	f103 0020 	add.w	r0, r3, #32
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012260:	2220      	movs	r2, #32
 8012262:	4619      	mov	r1, r3
 8012264:	f7fe f9c9 	bl	80105fa <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8012268:	693b      	ldr	r3, [r7, #16]
 801226a:	3323      	adds	r3, #35	; 0x23
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	332c      	adds	r3, #44	; 0x2c
 8012270:	4a2c      	ldr	r2, [pc, #176]	; (8012324 <load_xdir+0x178>)
 8012272:	fba2 2303 	umull	r2, r3, r2, r3
 8012276:	08db      	lsrs	r3, r3, #3
 8012278:	015b      	lsls	r3, r3, #5
 801227a:	68ba      	ldr	r2, [r7, #8]
 801227c:	429a      	cmp	r2, r3
 801227e:	d201      	bcs.n	8012284 <load_xdir+0xd8>
 8012280:	2302      	movs	r3, #2
 8012282:	e04a      	b.n	801231a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8012284:	2340      	movs	r3, #64	; 0x40
 8012286:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8012288:	2100      	movs	r1, #0
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f7ff fb39 	bl	8011902 <dir_next>
 8012290:	4603      	mov	r3, r0
 8012292:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8012294:	7bfb      	ldrb	r3, [r7, #15]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d001      	beq.n	801229e <load_xdir+0xf2>
 801229a:	7bfb      	ldrb	r3, [r7, #15]
 801229c:	e03d      	b.n	801231a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122a6:	4619      	mov	r1, r3
 80122a8:	4610      	mov	r0, r2
 80122aa:	f7fe fc05 	bl	8010ab8 <move_window>
 80122ae:	4603      	mov	r3, r0
 80122b0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80122b2:	7bfb      	ldrb	r3, [r7, #15]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d001      	beq.n	80122bc <load_xdir+0x110>
 80122b8:	7bfb      	ldrb	r3, [r7, #15]
 80122ba:	e02e      	b.n	801231a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122c0:	781b      	ldrb	r3, [r3, #0]
 80122c2:	2bc1      	cmp	r3, #193	; 0xc1
 80122c4:	d001      	beq.n	80122ca <load_xdir+0x11e>
 80122c6:	2302      	movs	r3, #2
 80122c8:	e027      	b.n	801231a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80122d0:	d208      	bcs.n	80122e4 <load_xdir+0x138>
 80122d2:	693a      	ldr	r2, [r7, #16]
 80122d4:	697b      	ldr	r3, [r7, #20]
 80122d6:	18d0      	adds	r0, r2, r3
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122dc:	2220      	movs	r2, #32
 80122de:	4619      	mov	r1, r3
 80122e0:	f7fe f98b 	bl	80105fa <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	3320      	adds	r3, #32
 80122e8:	617b      	str	r3, [r7, #20]
 80122ea:	697a      	ldr	r2, [r7, #20]
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d3ca      	bcc.n	8012288 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80122f8:	d80e      	bhi.n	8012318 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80122fa:	6938      	ldr	r0, [r7, #16]
 80122fc:	f7ff fe6d 	bl	8011fda <xdir_sum>
 8012300:	4603      	mov	r3, r0
 8012302:	461c      	mov	r4, r3
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	3302      	adds	r3, #2
 8012308:	4618      	mov	r0, r3
 801230a:	f7fd ff91 	bl	8010230 <ld_word>
 801230e:	4603      	mov	r3, r0
 8012310:	429c      	cmp	r4, r3
 8012312:	d001      	beq.n	8012318 <load_xdir+0x16c>
 8012314:	2302      	movs	r3, #2
 8012316:	e000      	b.n	801231a <load_xdir+0x16e>
	}
	return FR_OK;
 8012318:	2300      	movs	r3, #0
}
 801231a:	4618      	mov	r0, r3
 801231c:	371c      	adds	r7, #28
 801231e:	46bd      	mov	sp, r7
 8012320:	bd90      	pop	{r4, r7, pc}
 8012322:	bf00      	nop
 8012324:	88888889 	.word	0x88888889

08012328 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8012328:	b5b0      	push	{r4, r5, r7, lr}
 801232a:	b084      	sub	sp, #16
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8012332:	6839      	ldr	r1, [r7, #0]
 8012334:	6808      	ldr	r0, [r1, #0]
 8012336:	6879      	ldr	r1, [r7, #4]
 8012338:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 801233a:	6839      	ldr	r1, [r7, #0]
 801233c:	6a08      	ldr	r0, [r1, #32]
 801233e:	6879      	ldr	r1, [r7, #4]
 8012340:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8012342:	6839      	ldr	r1, [r7, #0]
 8012344:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8012346:	b2c8      	uxtb	r0, r1
 8012348:	6879      	ldr	r1, [r7, #4]
 801234a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 801234c:	6839      	ldr	r1, [r7, #0]
 801234e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8012350:	2000      	movs	r0, #0
 8012352:	460c      	mov	r4, r1
 8012354:	4605      	mov	r5, r0
 8012356:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 801235a:	2300      	movs	r3, #0
 801235c:	6879      	ldr	r1, [r7, #4]
 801235e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801236e:	4619      	mov	r1, r3
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f7ff fa32 	bl	80117da <dir_sdi>
 8012376:	4603      	mov	r3, r0
 8012378:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801237a:	7bfb      	ldrb	r3, [r7, #15]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d104      	bne.n	801238a <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f7ff ff13 	bl	80121ac <load_xdir>
 8012386:	4603      	mov	r3, r0
 8012388:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 801238a:	7bfb      	ldrb	r3, [r7, #15]
}
 801238c:	4618      	mov	r0, r3
 801238e:	3710      	adds	r7, #16
 8012390:	46bd      	mov	sp, r7
 8012392:	bdb0      	pop	{r4, r5, r7, pc}

08012394 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8012394:	b590      	push	{r4, r7, lr}
 8012396:	b087      	sub	sp, #28
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	695b      	ldr	r3, [r3, #20]
 80123a2:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	1c9c      	adds	r4, r3, #2
 80123a8:	68f8      	ldr	r0, [r7, #12]
 80123aa:	f7ff fe16 	bl	8011fda <xdir_sum>
 80123ae:	4603      	mov	r3, r0
 80123b0:	4619      	mov	r1, r3
 80123b2:	4620      	mov	r0, r4
 80123b4:	f7fe f852 	bl	801045c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	3301      	adds	r3, #1
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	3301      	adds	r3, #1
 80123c0:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123c6:	4619      	mov	r1, r3
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f7ff fa06 	bl	80117da <dir_sdi>
 80123ce:	4603      	mov	r3, r0
 80123d0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80123d2:	e026      	b.n	8012422 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681a      	ldr	r2, [r3, #0]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123dc:	4619      	mov	r1, r3
 80123de:	4610      	mov	r0, r2
 80123e0:	f7fe fb6a 	bl	8010ab8 <move_window>
 80123e4:	4603      	mov	r3, r0
 80123e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80123e8:	7dfb      	ldrb	r3, [r7, #23]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d11d      	bne.n	801242a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123f2:	2220      	movs	r2, #32
 80123f4:	68f9      	ldr	r1, [r7, #12]
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7fe f8ff 	bl	80105fa <mem_cpy>
		dp->obj.fs->wflag = 1;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2201      	movs	r2, #1
 8012402:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	3b01      	subs	r3, #1
 8012408:	613b      	str	r3, [r7, #16]
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d00e      	beq.n	801242e <store_xdir+0x9a>
		dirb += SZDIRE;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	3320      	adds	r3, #32
 8012414:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8012416:	2100      	movs	r1, #0
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f7ff fa72 	bl	8011902 <dir_next>
 801241e:	4603      	mov	r3, r0
 8012420:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8012422:	7dfb      	ldrb	r3, [r7, #23]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d0d5      	beq.n	80123d4 <store_xdir+0x40>
 8012428:	e002      	b.n	8012430 <store_xdir+0x9c>
		if (res != FR_OK) break;
 801242a:	bf00      	nop
 801242c:	e000      	b.n	8012430 <store_xdir+0x9c>
		if (--nent == 0) break;
 801242e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8012430:	7dfb      	ldrb	r3, [r7, #23]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d002      	beq.n	801243c <store_xdir+0xa8>
 8012436:	7dfb      	ldrb	r3, [r7, #23]
 8012438:	2b01      	cmp	r3, #1
 801243a:	d101      	bne.n	8012440 <store_xdir+0xac>
 801243c:	7dfb      	ldrb	r3, [r7, #23]
 801243e:	e000      	b.n	8012442 <store_xdir+0xae>
 8012440:	2302      	movs	r3, #2
}
 8012442:	4618      	mov	r0, r3
 8012444:	371c      	adds	r7, #28
 8012446:	46bd      	mov	sp, r7
 8012448:	bd90      	pop	{r4, r7, pc}

0801244a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 801244a:	b590      	push	{r4, r7, lr}
 801244c:	b085      	sub	sp, #20
 801244e:	af00      	add	r7, sp, #0
 8012450:	6078      	str	r0, [r7, #4]
 8012452:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8012454:	2240      	movs	r2, #64	; 0x40
 8012456:	2100      	movs	r1, #0
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f7fe f8ef 	bl	801063c <mem_set>
	dirb[XDIR_Type] = 0x85;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2285      	movs	r2, #133	; 0x85
 8012462:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	3320      	adds	r3, #32
 8012468:	22c0      	movs	r2, #192	; 0xc0
 801246a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 801246c:	2300      	movs	r3, #0
 801246e:	72bb      	strb	r3, [r7, #10]
 8012470:	2301      	movs	r3, #1
 8012472:	72fb      	strb	r3, [r7, #11]
 8012474:	2301      	movs	r3, #1
 8012476:	813b      	strh	r3, [r7, #8]
 8012478:	2340      	movs	r3, #64	; 0x40
 801247a:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	1c5a      	adds	r2, r3, #1
 8012480:	60fa      	str	r2, [r7, #12]
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	4413      	add	r3, r2
 8012486:	22c1      	movs	r2, #193	; 0xc1
 8012488:	701a      	strb	r2, [r3, #0]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	1c5a      	adds	r2, r3, #1
 801248e:	60fa      	str	r2, [r7, #12]
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	4413      	add	r3, r2
 8012494:	2200      	movs	r2, #0
 8012496:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8012498:	893b      	ldrh	r3, [r7, #8]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d00b      	beq.n	80124b6 <create_xdir+0x6c>
 801249e:	7abb      	ldrb	r3, [r7, #10]
 80124a0:	005b      	lsls	r3, r3, #1
 80124a2:	683a      	ldr	r2, [r7, #0]
 80124a4:	4413      	add	r3, r2
 80124a6:	881b      	ldrh	r3, [r3, #0]
 80124a8:	813b      	strh	r3, [r7, #8]
 80124aa:	893b      	ldrh	r3, [r7, #8]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d002      	beq.n	80124b6 <create_xdir+0x6c>
 80124b0:	7abb      	ldrb	r3, [r7, #10]
 80124b2:	3301      	adds	r3, #1
 80124b4:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	4413      	add	r3, r2
 80124bc:	893a      	ldrh	r2, [r7, #8]
 80124be:	4611      	mov	r1, r2
 80124c0:	4618      	mov	r0, r3
 80124c2:	f7fd ffcb 	bl	801045c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	3302      	adds	r3, #2
 80124ca:	60fb      	str	r3, [r7, #12]
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	f003 031f 	and.w	r3, r3, #31
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d1e0      	bne.n	8012498 <create_xdir+0x4e>
		nb++;
 80124d6:	7afb      	ldrb	r3, [r7, #11]
 80124d8:	3301      	adds	r3, #1
 80124da:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80124dc:	7abb      	ldrb	r3, [r7, #10]
 80124de:	005b      	lsls	r3, r3, #1
 80124e0:	683a      	ldr	r2, [r7, #0]
 80124e2:	4413      	add	r3, r2
 80124e4:	881b      	ldrh	r3, [r3, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d1c8      	bne.n	801247c <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	3323      	adds	r3, #35	; 0x23
 80124ee:	7aba      	ldrb	r2, [r7, #10]
 80124f0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	3301      	adds	r3, #1
 80124f6:	7afa      	ldrb	r2, [r7, #11]
 80124f8:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8012500:	6838      	ldr	r0, [r7, #0]
 8012502:	f7ff fd9d 	bl	8012040 <xname_sum>
 8012506:	4603      	mov	r3, r0
 8012508:	4619      	mov	r1, r3
 801250a:	4620      	mov	r0, r4
 801250c:	f7fd ffa6 	bl	801045c <st_word>
}
 8012510:	bf00      	nop
 8012512:	3714      	adds	r7, #20
 8012514:	46bd      	mov	sp, r7
 8012516:	bd90      	pop	{r4, r7, pc}

08012518 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b086      	sub	sp, #24
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012522:	2304      	movs	r3, #4
 8012524:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801252c:	23ff      	movs	r3, #255	; 0xff
 801252e:	757b      	strb	r3, [r7, #21]
 8012530:	23ff      	movs	r3, #255	; 0xff
 8012532:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8012534:	e09f      	b.n	8012676 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801253a:	4619      	mov	r1, r3
 801253c:	6938      	ldr	r0, [r7, #16]
 801253e:	f7fe fabb 	bl	8010ab8 <move_window>
 8012542:	4603      	mov	r3, r0
 8012544:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012546:	7dfb      	ldrb	r3, [r7, #23]
 8012548:	2b00      	cmp	r3, #0
 801254a:	f040 809a 	bne.w	8012682 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8012556:	7dbb      	ldrb	r3, [r7, #22]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d102      	bne.n	8012562 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801255c:	2304      	movs	r3, #4
 801255e:	75fb      	strb	r3, [r7, #23]
 8012560:	e096      	b.n	8012690 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	781b      	ldrb	r3, [r3, #0]
 8012566:	2b04      	cmp	r3, #4
 8012568:	d118      	bne.n	801259c <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 801256a:	7dbb      	ldrb	r3, [r7, #22]
 801256c:	2b85      	cmp	r3, #133	; 0x85
 801256e:	d179      	bne.n	8012664 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f7ff fe17 	bl	80121ac <load_xdir>
 801257e:	4603      	mov	r3, r0
 8012580:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8012582:	7dfb      	ldrb	r3, [r7, #23]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d17e      	bne.n	8012686 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	695b      	ldr	r3, [r3, #20]
 801258c:	3304      	adds	r3, #4
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012594:	b2da      	uxtb	r2, r3
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	719a      	strb	r2, [r3, #6]
					}
					break;
 801259a:	e074      	b.n	8012686 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125a0:	330b      	adds	r3, #11
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80125a8:	73fb      	strb	r3, [r7, #15]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	7bfa      	ldrb	r2, [r7, #15]
 80125ae:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80125b0:	7dbb      	ldrb	r3, [r7, #22]
 80125b2:	2be5      	cmp	r3, #229	; 0xe5
 80125b4:	d00e      	beq.n	80125d4 <dir_read+0xbc>
 80125b6:	7dbb      	ldrb	r3, [r7, #22]
 80125b8:	2b2e      	cmp	r3, #46	; 0x2e
 80125ba:	d00b      	beq.n	80125d4 <dir_read+0xbc>
 80125bc:	7bfb      	ldrb	r3, [r7, #15]
 80125be:	f023 0320 	bic.w	r3, r3, #32
 80125c2:	2b08      	cmp	r3, #8
 80125c4:	bf0c      	ite	eq
 80125c6:	2301      	moveq	r3, #1
 80125c8:	2300      	movne	r3, #0
 80125ca:	b2db      	uxtb	r3, r3
 80125cc:	461a      	mov	r2, r3
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	4293      	cmp	r3, r2
 80125d2:	d002      	beq.n	80125da <dir_read+0xc2>
				ord = 0xFF;
 80125d4:	23ff      	movs	r3, #255	; 0xff
 80125d6:	757b      	strb	r3, [r7, #21]
 80125d8:	e044      	b.n	8012664 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80125da:	7bfb      	ldrb	r3, [r7, #15]
 80125dc:	2b0f      	cmp	r3, #15
 80125de:	d12f      	bne.n	8012640 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80125e0:	7dbb      	ldrb	r3, [r7, #22]
 80125e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d00d      	beq.n	8012606 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125ee:	7b5b      	ldrb	r3, [r3, #13]
 80125f0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80125f2:	7dbb      	ldrb	r3, [r7, #22]
 80125f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80125f8:	75bb      	strb	r3, [r7, #22]
 80125fa:	7dbb      	ldrb	r3, [r7, #22]
 80125fc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012606:	7dba      	ldrb	r2, [r7, #22]
 8012608:	7d7b      	ldrb	r3, [r7, #21]
 801260a:	429a      	cmp	r2, r3
 801260c:	d115      	bne.n	801263a <dir_read+0x122>
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012612:	330d      	adds	r3, #13
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	7d3a      	ldrb	r2, [r7, #20]
 8012618:	429a      	cmp	r2, r3
 801261a:	d10e      	bne.n	801263a <dir_read+0x122>
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	691a      	ldr	r2, [r3, #16]
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012624:	4619      	mov	r1, r3
 8012626:	4610      	mov	r0, r2
 8012628:	f7ff fb5c 	bl	8011ce4 <pick_lfn>
 801262c:	4603      	mov	r3, r0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d003      	beq.n	801263a <dir_read+0x122>
 8012632:	7d7b      	ldrb	r3, [r7, #21]
 8012634:	3b01      	subs	r3, #1
 8012636:	b2db      	uxtb	r3, r3
 8012638:	e000      	b.n	801263c <dir_read+0x124>
 801263a:	23ff      	movs	r3, #255	; 0xff
 801263c:	757b      	strb	r3, [r7, #21]
 801263e:	e011      	b.n	8012664 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012640:	7d7b      	ldrb	r3, [r7, #21]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d109      	bne.n	801265a <dir_read+0x142>
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801264a:	4618      	mov	r0, r3
 801264c:	f7ff fca4 	bl	8011f98 <sum_sfn>
 8012650:	4603      	mov	r3, r0
 8012652:	461a      	mov	r2, r3
 8012654:	7d3b      	ldrb	r3, [r7, #20]
 8012656:	4293      	cmp	r3, r2
 8012658:	d017      	beq.n	801268a <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012660:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8012662:	e012      	b.n	801268a <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012664:	2100      	movs	r1, #0
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f7ff f94b 	bl	8011902 <dir_next>
 801266c:	4603      	mov	r3, r0
 801266e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012670:	7dfb      	ldrb	r3, [r7, #23]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d10b      	bne.n	801268e <dir_read+0x176>
	while (dp->sect) {
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801267a:	2b00      	cmp	r3, #0
 801267c:	f47f af5b 	bne.w	8012536 <dir_read+0x1e>
 8012680:	e006      	b.n	8012690 <dir_read+0x178>
		if (res != FR_OK) break;
 8012682:	bf00      	nop
 8012684:	e004      	b.n	8012690 <dir_read+0x178>
					break;
 8012686:	bf00      	nop
 8012688:	e002      	b.n	8012690 <dir_read+0x178>
					break;
 801268a:	bf00      	nop
 801268c:	e000      	b.n	8012690 <dir_read+0x178>
		if (res != FR_OK) break;
 801268e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012690:	7dfb      	ldrb	r3, [r7, #23]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d002      	beq.n	801269c <dir_read+0x184>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2200      	movs	r2, #0
 801269a:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 801269c:	7dfb      	ldrb	r3, [r7, #23]
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3718      	adds	r7, #24
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}

080126a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80126a6:	b590      	push	{r4, r7, lr}
 80126a8:	b089      	sub	sp, #36	; 0x24
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80126b4:	2100      	movs	r1, #0
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f7ff f88f 	bl	80117da <dir_sdi>
 80126bc:	4603      	mov	r3, r0
 80126be:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80126c0:	7ffb      	ldrb	r3, [r7, #31]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d001      	beq.n	80126ca <dir_find+0x24>
 80126c6:	7ffb      	ldrb	r3, [r7, #31]
 80126c8:	e112      	b.n	80128f0 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	2b04      	cmp	r3, #4
 80126d0:	d164      	bne.n	801279c <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	691b      	ldr	r3, [r3, #16]
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7ff fcb2 	bl	8012040 <xname_sum>
 80126dc:	4603      	mov	r3, r0
 80126de:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80126e0:	e04f      	b.n	8012782 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	695b      	ldr	r3, [r3, #20]
 80126e6:	3324      	adds	r3, #36	; 0x24
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7fd fda1 	bl	8010230 <ld_word>
 80126ee:	4603      	mov	r3, r0
 80126f0:	461a      	mov	r2, r3
 80126f2:	893b      	ldrh	r3, [r7, #8]
 80126f4:	4293      	cmp	r3, r2
 80126f6:	d000      	beq.n	80126fa <dir_find+0x54>
 80126f8:	e043      	b.n	8012782 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	695b      	ldr	r3, [r3, #20]
 80126fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012702:	76fb      	strb	r3, [r7, #27]
 8012704:	2340      	movs	r3, #64	; 0x40
 8012706:	617b      	str	r3, [r7, #20]
 8012708:	2300      	movs	r3, #0
 801270a:	613b      	str	r3, [r7, #16]
 801270c:	e029      	b.n	8012762 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	f003 031f 	and.w	r3, r3, #31
 8012714:	2b00      	cmp	r3, #0
 8012716:	d102      	bne.n	801271e <dir_find+0x78>
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	3302      	adds	r3, #2
 801271c:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	695a      	ldr	r2, [r3, #20]
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	4413      	add	r3, r2
 8012726:	4618      	mov	r0, r3
 8012728:	f7fd fd82 	bl	8010230 <ld_word>
 801272c:	4603      	mov	r3, r0
 801272e:	4618      	mov	r0, r3
 8012730:	f003 fa6e 	bl	8015c10 <ff_wtoupper>
 8012734:	4603      	mov	r3, r0
 8012736:	461c      	mov	r4, r3
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	691a      	ldr	r2, [r3, #16]
 801273c:	693b      	ldr	r3, [r7, #16]
 801273e:	005b      	lsls	r3, r3, #1
 8012740:	4413      	add	r3, r2
 8012742:	881b      	ldrh	r3, [r3, #0]
 8012744:	4618      	mov	r0, r3
 8012746:	f003 fa63 	bl	8015c10 <ff_wtoupper>
 801274a:	4603      	mov	r3, r0
 801274c:	429c      	cmp	r4, r3
 801274e:	d10c      	bne.n	801276a <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8012750:	7efb      	ldrb	r3, [r7, #27]
 8012752:	3b01      	subs	r3, #1
 8012754:	76fb      	strb	r3, [r7, #27]
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	3302      	adds	r3, #2
 801275a:	617b      	str	r3, [r7, #20]
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	3301      	adds	r3, #1
 8012760:	613b      	str	r3, [r7, #16]
 8012762:	7efb      	ldrb	r3, [r7, #27]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d1d2      	bne.n	801270e <dir_find+0x68>
 8012768:	e000      	b.n	801276c <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801276a:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 801276c:	7efb      	ldrb	r3, [r7, #27]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d107      	bne.n	8012782 <dir_find+0xdc>
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	691a      	ldr	r2, [r3, #16]
 8012776:	693b      	ldr	r3, [r7, #16]
 8012778:	005b      	lsls	r3, r3, #1
 801277a:	4413      	add	r3, r2
 801277c:	881b      	ldrh	r3, [r3, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d009      	beq.n	8012796 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8012782:	2100      	movs	r1, #0
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f7ff fec7 	bl	8012518 <dir_read>
 801278a:	4603      	mov	r3, r0
 801278c:	77fb      	strb	r3, [r7, #31]
 801278e:	7ffb      	ldrb	r3, [r7, #31]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d0a6      	beq.n	80126e2 <dir_find+0x3c>
 8012794:	e000      	b.n	8012798 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8012796:	bf00      	nop
		}
		return res;
 8012798:	7ffb      	ldrb	r3, [r7, #31]
 801279a:	e0a9      	b.n	80128f0 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801279c:	23ff      	movs	r3, #255	; 0xff
 801279e:	773b      	strb	r3, [r7, #28]
 80127a0:	7f3b      	ldrb	r3, [r7, #28]
 80127a2:	777b      	strb	r3, [r7, #29]
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80127aa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127b0:	4619      	mov	r1, r3
 80127b2:	68f8      	ldr	r0, [r7, #12]
 80127b4:	f7fe f980 	bl	8010ab8 <move_window>
 80127b8:	4603      	mov	r3, r0
 80127ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 80127bc:	7ffb      	ldrb	r3, [r7, #31]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	f040 8090 	bne.w	80128e4 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80127cc:	7fbb      	ldrb	r3, [r7, #30]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d102      	bne.n	80127d8 <dir_find+0x132>
 80127d2:	2304      	movs	r3, #4
 80127d4:	77fb      	strb	r3, [r7, #31]
 80127d6:	e08a      	b.n	80128ee <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127dc:	330b      	adds	r3, #11
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127e4:	72fb      	strb	r3, [r7, #11]
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	7afa      	ldrb	r2, [r7, #11]
 80127ea:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80127ec:	7fbb      	ldrb	r3, [r7, #30]
 80127ee:	2be5      	cmp	r3, #229	; 0xe5
 80127f0:	d007      	beq.n	8012802 <dir_find+0x15c>
 80127f2:	7afb      	ldrb	r3, [r7, #11]
 80127f4:	f003 0308 	and.w	r3, r3, #8
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d009      	beq.n	8012810 <dir_find+0x16a>
 80127fc:	7afb      	ldrb	r3, [r7, #11]
 80127fe:	2b0f      	cmp	r3, #15
 8012800:	d006      	beq.n	8012810 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012802:	23ff      	movs	r3, #255	; 0xff
 8012804:	777b      	strb	r3, [r7, #29]
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801280c:	64da      	str	r2, [r3, #76]	; 0x4c
 801280e:	e05e      	b.n	80128ce <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012810:	7afb      	ldrb	r3, [r7, #11]
 8012812:	2b0f      	cmp	r3, #15
 8012814:	d136      	bne.n	8012884 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012820:	2b00      	cmp	r3, #0
 8012822:	d154      	bne.n	80128ce <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012824:	7fbb      	ldrb	r3, [r7, #30]
 8012826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801282a:	2b00      	cmp	r3, #0
 801282c:	d00d      	beq.n	801284a <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012832:	7b5b      	ldrb	r3, [r3, #13]
 8012834:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012836:	7fbb      	ldrb	r3, [r7, #30]
 8012838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801283c:	77bb      	strb	r3, [r7, #30]
 801283e:	7fbb      	ldrb	r3, [r7, #30]
 8012840:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801284a:	7fba      	ldrb	r2, [r7, #30]
 801284c:	7f7b      	ldrb	r3, [r7, #29]
 801284e:	429a      	cmp	r2, r3
 8012850:	d115      	bne.n	801287e <dir_find+0x1d8>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012856:	330d      	adds	r3, #13
 8012858:	781b      	ldrb	r3, [r3, #0]
 801285a:	7f3a      	ldrb	r2, [r7, #28]
 801285c:	429a      	cmp	r2, r3
 801285e:	d10e      	bne.n	801287e <dir_find+0x1d8>
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	691a      	ldr	r2, [r3, #16]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012868:	4619      	mov	r1, r3
 801286a:	4610      	mov	r0, r2
 801286c:	f7ff f9ca 	bl	8011c04 <cmp_lfn>
 8012870:	4603      	mov	r3, r0
 8012872:	2b00      	cmp	r3, #0
 8012874:	d003      	beq.n	801287e <dir_find+0x1d8>
 8012876:	7f7b      	ldrb	r3, [r7, #29]
 8012878:	3b01      	subs	r3, #1
 801287a:	b2db      	uxtb	r3, r3
 801287c:	e000      	b.n	8012880 <dir_find+0x1da>
 801287e:	23ff      	movs	r3, #255	; 0xff
 8012880:	777b      	strb	r3, [r7, #29]
 8012882:	e024      	b.n	80128ce <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012884:	7f7b      	ldrb	r3, [r7, #29]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d109      	bne.n	801289e <dir_find+0x1f8>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801288e:	4618      	mov	r0, r3
 8012890:	f7ff fb82 	bl	8011f98 <sum_sfn>
 8012894:	4603      	mov	r3, r0
 8012896:	461a      	mov	r2, r3
 8012898:	7f3b      	ldrb	r3, [r7, #28]
 801289a:	4293      	cmp	r3, r2
 801289c:	d024      	beq.n	80128e8 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80128a4:	f003 0301 	and.w	r3, r3, #1
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d10a      	bne.n	80128c2 <dir_find+0x21c>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	3340      	adds	r3, #64	; 0x40
 80128b4:	220b      	movs	r2, #11
 80128b6:	4619      	mov	r1, r3
 80128b8:	f7fd fedb 	bl	8010672 <mem_cmp>
 80128bc:	4603      	mov	r3, r0
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d014      	beq.n	80128ec <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80128c2:	23ff      	movs	r3, #255	; 0xff
 80128c4:	777b      	strb	r3, [r7, #29]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128cc:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80128ce:	2100      	movs	r1, #0
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f7ff f816 	bl	8011902 <dir_next>
 80128d6:	4603      	mov	r3, r0
 80128d8:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 80128da:	7ffb      	ldrb	r3, [r7, #31]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	f43f af65 	beq.w	80127ac <dir_find+0x106>
 80128e2:	e004      	b.n	80128ee <dir_find+0x248>
		if (res != FR_OK) break;
 80128e4:	bf00      	nop
 80128e6:	e002      	b.n	80128ee <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80128e8:	bf00      	nop
 80128ea:	e000      	b.n	80128ee <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80128ec:	bf00      	nop

	return res;
 80128ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3724      	adds	r7, #36	; 0x24
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd90      	pop	{r4, r7, pc}

080128f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80128f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80128fc:	b0a0      	sub	sp, #128	; 0x80
 80128fe:	af00      	add	r7, sp, #0
 8012900:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801290e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012912:	2b00      	cmp	r3, #0
 8012914:	d001      	beq.n	801291a <dir_register+0x22>
 8012916:	2306      	movs	r3, #6
 8012918:	e192      	b.n	8012c40 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801291a:	2300      	movs	r3, #0
 801291c:	677b      	str	r3, [r7, #116]	; 0x74
 801291e:	e002      	b.n	8012926 <dir_register+0x2e>
 8012920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012922:	3301      	adds	r3, #1
 8012924:	677b      	str	r3, [r7, #116]	; 0x74
 8012926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012928:	691a      	ldr	r2, [r3, #16]
 801292a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801292c:	005b      	lsls	r3, r3, #1
 801292e:	4413      	add	r3, r2
 8012930:	881b      	ldrh	r3, [r3, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d1f4      	bne.n	8012920 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	2b04      	cmp	r3, #4
 801293c:	f040 80a3 	bne.w	8012a86 <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8012940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012942:	330e      	adds	r3, #14
 8012944:	4aa4      	ldr	r2, [pc, #656]	; (8012bd8 <dir_register+0x2e0>)
 8012946:	fba2 2303 	umull	r2, r3, r2, r3
 801294a:	08db      	lsrs	r3, r3, #3
 801294c:	3302      	adds	r3, #2
 801294e:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8012950:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f7ff f8bb 	bl	8011ace <dir_alloc>
 8012958:	4603      	mov	r3, r0
 801295a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 801295e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012962:	2b00      	cmp	r3, #0
 8012964:	d002      	beq.n	801296c <dir_register+0x74>
 8012966:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801296a:	e169      	b.n	8012c40 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012972:	3b01      	subs	r3, #1
 8012974:	015b      	lsls	r3, r3, #5
 8012976:	1ad2      	subs	r2, r2, r3
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	689b      	ldr	r3, [r3, #8]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d076      	beq.n	8012a72 <dir_register+0x17a>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	79db      	ldrb	r3, [r3, #7]
 8012988:	f003 0304 	and.w	r3, r3, #4
 801298c:	2b00      	cmp	r3, #0
 801298e:	d070      	beq.n	8012a72 <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012996:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012998:	8949      	ldrh	r1, [r1, #10]
 801299a:	4608      	mov	r0, r1
 801299c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801299e:	8989      	ldrh	r1, [r1, #12]
 80129a0:	fb00 f101 	mul.w	r1, r0, r1
 80129a4:	2000      	movs	r0, #0
 80129a6:	460c      	mov	r4, r1
 80129a8:	4605      	mov	r5, r0
 80129aa:	eb12 0804 	adds.w	r8, r2, r4
 80129ae:	eb43 0905 	adc.w	r9, r3, r5
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7fe fcac 	bl	8011318 <fill_first_frag>
 80129c0:	4603      	mov	r3, r0
 80129c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80129c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d002      	beq.n	80129d4 <dir_register+0xdc>
 80129ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80129d2:	e135      	b.n	8012c40 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80129de:	4619      	mov	r1, r3
 80129e0:	f7fe fcc9 	bl	8011376 <fill_last_frag>
 80129e4:	4603      	mov	r3, r0
 80129e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80129ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d002      	beq.n	80129f8 <dir_register+0x100>
 80129f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80129f6:	e123      	b.n	8012c40 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 80129f8:	687a      	ldr	r2, [r7, #4]
 80129fa:	f107 0308 	add.w	r3, r7, #8
 80129fe:	4611      	mov	r1, r2
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7ff fc91 	bl	8012328 <load_obj_dir>
 8012a06:	4603      	mov	r3, r0
 8012a08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8012a0c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d002      	beq.n	8012a1a <dir_register+0x122>
 8012a14:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012a18:	e112      	b.n	8012c40 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8012a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a1c:	695b      	ldr	r3, [r3, #20]
 8012a1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012a28:	4608      	mov	r0, r1
 8012a2a:	f7fd fd5e 	bl	80104ea <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8012a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a30:	695b      	ldr	r3, [r3, #20]
 8012a32:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012a3c:	4608      	mov	r0, r1
 8012a3e:	f7fd fd54 	bl	80104ea <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	79da      	ldrb	r2, [r3, #7]
 8012a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a48:	695b      	ldr	r3, [r3, #20]
 8012a4a:	3321      	adds	r3, #33	; 0x21
 8012a4c:	f042 0201 	orr.w	r2, r2, #1
 8012a50:	b2d2      	uxtb	r2, r2
 8012a52:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8012a54:	f107 0308 	add.w	r3, r7, #8
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7ff fc9b 	bl	8012394 <store_xdir>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8012a64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d002      	beq.n	8012a72 <dir_register+0x17a>
 8012a6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012a70:	e0e6      	b.n	8012c40 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8012a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a74:	695a      	ldr	r2, [r3, #20]
 8012a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a78:	691b      	ldr	r3, [r3, #16]
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	4610      	mov	r0, r2
 8012a7e:	f7ff fce4 	bl	801244a <create_xdir>
		return FR_OK;
 8012a82:	2300      	movs	r3, #0
 8012a84:	e0dc      	b.n	8012c40 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8012a8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012a90:	220c      	movs	r2, #12
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7fd fdb1 	bl	80105fa <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012a98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012a9c:	f003 0301 	and.w	r3, r3, #1
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d033      	beq.n	8012b0c <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2240      	movs	r2, #64	; 0x40
 8012aa8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8012aac:	2301      	movs	r3, #1
 8012aae:	67bb      	str	r3, [r7, #120]	; 0x78
 8012ab0:	e016      	b.n	8012ae0 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012aba:	691a      	ldr	r2, [r3, #16]
 8012abc:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8012ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ac2:	f7ff f9db 	bl	8011e7c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f7ff fded 	bl	80126a6 <dir_find>
 8012acc:	4603      	mov	r3, r0
 8012ace:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8012ad2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d106      	bne.n	8012ae8 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 8012ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012adc:	3301      	adds	r3, #1
 8012ade:	67bb      	str	r3, [r7, #120]	; 0x78
 8012ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ae2:	2b63      	cmp	r3, #99	; 0x63
 8012ae4:	d9e5      	bls.n	8012ab2 <dir_register+0x1ba>
 8012ae6:	e000      	b.n	8012aea <dir_register+0x1f2>
			if (res != FR_OK) break;
 8012ae8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8012aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012aec:	2b64      	cmp	r3, #100	; 0x64
 8012aee:	d101      	bne.n	8012af4 <dir_register+0x1fc>
 8012af0:	2307      	movs	r3, #7
 8012af2:	e0a5      	b.n	8012c40 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012af4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012af8:	2b04      	cmp	r3, #4
 8012afa:	d002      	beq.n	8012b02 <dir_register+0x20a>
 8012afc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012b00:	e09e      	b.n	8012c40 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012b02:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012b0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012b10:	f003 0302 	and.w	r3, r3, #2
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d007      	beq.n	8012b28 <dir_register+0x230>
 8012b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b1a:	330c      	adds	r3, #12
 8012b1c:	4a2f      	ldr	r2, [pc, #188]	; (8012bdc <dir_register+0x2e4>)
 8012b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8012b22:	089b      	lsrs	r3, r3, #2
 8012b24:	3301      	adds	r3, #1
 8012b26:	e000      	b.n	8012b2a <dir_register+0x232>
 8012b28:	2301      	movs	r3, #1
 8012b2a:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012b2c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f7fe ffcd 	bl	8011ace <dir_alloc>
 8012b34:	4603      	mov	r3, r0
 8012b36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012b3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d14f      	bne.n	8012be2 <dir_register+0x2ea>
 8012b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b44:	3b01      	subs	r3, #1
 8012b46:	673b      	str	r3, [r7, #112]	; 0x70
 8012b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d049      	beq.n	8012be2 <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b54:	015b      	lsls	r3, r3, #5
 8012b56:	1ad3      	subs	r3, r2, r3
 8012b58:	4619      	mov	r1, r3
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f7fe fe3d 	bl	80117da <dir_sdi>
 8012b60:	4603      	mov	r3, r0
 8012b62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8012b66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d139      	bne.n	8012be2 <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	3340      	adds	r3, #64	; 0x40
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7ff fa10 	bl	8011f98 <sum_sfn>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b82:	4619      	mov	r1, r3
 8012b84:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012b86:	f7fd ff97 	bl	8010ab8 <move_window>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8012b90:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d123      	bne.n	8012be0 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b9a:	6918      	ldr	r0, [r3, #16]
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8012ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ba2:	b2da      	uxtb	r2, r3
 8012ba4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012ba8:	f7ff f900 	bl	8011dac <put_lfn>
				fs->wflag = 1;
 8012bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bae:	2201      	movs	r2, #1
 8012bb0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012bb2:	2100      	movs	r1, #0
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f7fe fea4 	bl	8011902 <dir_next>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8012bc0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d10c      	bne.n	8012be2 <dir_register+0x2ea>
 8012bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012bca:	3b01      	subs	r3, #1
 8012bcc:	673b      	str	r3, [r7, #112]	; 0x70
 8012bce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d1d4      	bne.n	8012b7e <dir_register+0x286>
 8012bd4:	e005      	b.n	8012be2 <dir_register+0x2ea>
 8012bd6:	bf00      	nop
 8012bd8:	88888889 	.word	0x88888889
 8012bdc:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8012be0:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012be2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d128      	bne.n	8012c3c <dir_register+0x344>
		res = move_window(fs, dp->sect);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bee:	4619      	mov	r1, r3
 8012bf0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012bf2:	f7fd ff61 	bl	8010ab8 <move_window>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8012bfc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d11b      	bne.n	8012c3c <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c08:	2220      	movs	r2, #32
 8012c0a:	2100      	movs	r1, #0
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7fd fd15 	bl	801063c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	3340      	adds	r3, #64	; 0x40
 8012c1a:	220b      	movs	r2, #11
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	f7fd fcec 	bl	80105fa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c2c:	330c      	adds	r3, #12
 8012c2e:	f002 0218 	and.w	r2, r2, #24
 8012c32:	b2d2      	uxtb	r2, r2
 8012c34:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c38:	2201      	movs	r2, #1
 8012c3a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012c3c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3780      	adds	r7, #128	; 0x80
 8012c44:	46bd      	mov	sp, r7
 8012c46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012c4a:	bf00      	nop

08012c4c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b086      	sub	sp, #24
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c5e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c68:	d007      	beq.n	8012c7a <dir_remove+0x2e>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c6e:	4619      	mov	r1, r3
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7fe fdb2 	bl	80117da <dir_sdi>
 8012c76:	4603      	mov	r3, r0
 8012c78:	e000      	b.n	8012c7c <dir_remove+0x30>
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012c7e:	7dfb      	ldrb	r3, [r7, #23]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d136      	bne.n	8012cf2 <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c88:	4619      	mov	r1, r3
 8012c8a:	6938      	ldr	r0, [r7, #16]
 8012c8c:	f7fd ff14 	bl	8010ab8 <move_window>
 8012c90:	4603      	mov	r3, r0
 8012c92:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012c94:	7dfb      	ldrb	r3, [r7, #23]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d123      	bne.n	8012ce2 <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012c9a:	693b      	ldr	r3, [r7, #16]
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	2b04      	cmp	r3, #4
 8012ca0:	d109      	bne.n	8012cb6 <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ca6:	781a      	ldrb	r2, [r3, #0]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012cb0:	b2d2      	uxtb	r2, r2
 8012cb2:	701a      	strb	r2, [r3, #0]
 8012cb4:	e003      	b.n	8012cbe <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cba:	22e5      	movs	r2, #229	; 0xe5
 8012cbc:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cc8:	68fa      	ldr	r2, [r7, #12]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d90b      	bls.n	8012ce6 <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 8012cce:	2100      	movs	r1, #0
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7fe fe16 	bl	8011902 <dir_next>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8012cda:	7dfb      	ldrb	r3, [r7, #23]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d0d1      	beq.n	8012c84 <dir_remove+0x38>
 8012ce0:	e002      	b.n	8012ce8 <dir_remove+0x9c>
			if (res != FR_OK) break;
 8012ce2:	bf00      	nop
 8012ce4:	e000      	b.n	8012ce8 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8012ce6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8012ce8:	7dfb      	ldrb	r3, [r7, #23]
 8012cea:	2b04      	cmp	r3, #4
 8012cec:	d101      	bne.n	8012cf2 <dir_remove+0xa6>
 8012cee:	2302      	movs	r3, #2
 8012cf0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8012cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3718      	adds	r7, #24
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}

08012cfc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012cfc:	b5b0      	push	{r4, r5, r7, lr}
 8012cfe:	b088      	sub	sp, #32
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	f000 80d8 	beq.w	8012ecc <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	2b04      	cmp	r3, #4
 8012d22:	d106      	bne.n	8012d32 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	695b      	ldr	r3, [r3, #20]
 8012d28:	6839      	ldr	r1, [r7, #0]
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7ff f9bc 	bl	80120a8 <get_xdir_info>
		return;
 8012d30:	e0cd      	b.n	8012ece <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d3a:	d032      	beq.n	8012da2 <get_fileinfo+0xa6>
			i = j = 0;
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	61bb      	str	r3, [r7, #24]
 8012d40:	69bb      	ldr	r3, [r7, #24]
 8012d42:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012d44:	e01b      	b.n	8012d7e <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8012d46:	89fb      	ldrh	r3, [r7, #14]
 8012d48:	2100      	movs	r1, #0
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f002 ff24 	bl	8015b98 <ff_convert>
 8012d50:	4603      	mov	r3, r0
 8012d52:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8012d54:	89fb      	ldrh	r3, [r7, #14]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d102      	bne.n	8012d60 <get_fileinfo+0x64>
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	61fb      	str	r3, [r7, #28]
 8012d5e:	e01a      	b.n	8012d96 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8012d60:	69fb      	ldr	r3, [r7, #28]
 8012d62:	2bfe      	cmp	r3, #254	; 0xfe
 8012d64:	d902      	bls.n	8012d6c <get_fileinfo+0x70>
 8012d66:	2300      	movs	r3, #0
 8012d68:	61fb      	str	r3, [r7, #28]
 8012d6a:	e014      	b.n	8012d96 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 8012d6c:	69fb      	ldr	r3, [r7, #28]
 8012d6e:	1c5a      	adds	r2, r3, #1
 8012d70:	61fa      	str	r2, [r7, #28]
 8012d72:	89fa      	ldrh	r2, [r7, #14]
 8012d74:	b2d1      	uxtb	r1, r2
 8012d76:	683a      	ldr	r2, [r7, #0]
 8012d78:	4413      	add	r3, r2
 8012d7a:	460a      	mov	r2, r1
 8012d7c:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	691a      	ldr	r2, [r3, #16]
 8012d82:	69bb      	ldr	r3, [r7, #24]
 8012d84:	1c59      	adds	r1, r3, #1
 8012d86:	61b9      	str	r1, [r7, #24]
 8012d88:	005b      	lsls	r3, r3, #1
 8012d8a:	4413      	add	r3, r2
 8012d8c:	881b      	ldrh	r3, [r3, #0]
 8012d8e:	81fb      	strh	r3, [r7, #14]
 8012d90:	89fb      	ldrh	r3, [r7, #14]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d1d7      	bne.n	8012d46 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8012d96:	683a      	ldr	r2, [r7, #0]
 8012d98:	69fb      	ldr	r3, [r7, #28]
 8012d9a:	4413      	add	r3, r2
 8012d9c:	331a      	adds	r3, #26
 8012d9e:	2200      	movs	r2, #0
 8012da0:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8012da2:	2300      	movs	r3, #0
 8012da4:	61bb      	str	r3, [r7, #24]
 8012da6:	69bb      	ldr	r3, [r7, #24]
 8012da8:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8012daa:	683a      	ldr	r2, [r7, #0]
 8012dac:	69fb      	ldr	r3, [r7, #28]
 8012dae:	4413      	add	r3, r2
 8012db0:	331a      	adds	r3, #26
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8012db6:	e04c      	b.n	8012e52 <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012dbc:	69fb      	ldr	r3, [r7, #28]
 8012dbe:	1c59      	adds	r1, r3, #1
 8012dc0:	61f9      	str	r1, [r7, #28]
 8012dc2:	4413      	add	r3, r2
 8012dc4:	781b      	ldrb	r3, [r3, #0]
 8012dc6:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012dc8:	7dfb      	ldrb	r3, [r7, #23]
 8012dca:	2b20      	cmp	r3, #32
 8012dcc:	d100      	bne.n	8012dd0 <get_fileinfo+0xd4>
 8012dce:	e040      	b.n	8012e52 <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012dd0:	7dfb      	ldrb	r3, [r7, #23]
 8012dd2:	2b05      	cmp	r3, #5
 8012dd4:	d101      	bne.n	8012dda <get_fileinfo+0xde>
 8012dd6:	23e5      	movs	r3, #229	; 0xe5
 8012dd8:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	2b09      	cmp	r3, #9
 8012dde:	d10f      	bne.n	8012e00 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 8012de0:	89bb      	ldrh	r3, [r7, #12]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d105      	bne.n	8012df2 <get_fileinfo+0xf6>
 8012de6:	683a      	ldr	r2, [r7, #0]
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	4413      	add	r3, r2
 8012dec:	331a      	adds	r3, #26
 8012dee:	222e      	movs	r2, #46	; 0x2e
 8012df0:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8012df2:	69bb      	ldr	r3, [r7, #24]
 8012df4:	1c5a      	adds	r2, r3, #1
 8012df6:	61ba      	str	r2, [r7, #24]
 8012df8:	683a      	ldr	r2, [r7, #0]
 8012dfa:	4413      	add	r3, r2
 8012dfc:	222e      	movs	r2, #46	; 0x2e
 8012dfe:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8012e00:	683a      	ldr	r2, [r7, #0]
 8012e02:	69bb      	ldr	r3, [r7, #24]
 8012e04:	4413      	add	r3, r2
 8012e06:	330d      	adds	r3, #13
 8012e08:	7dfa      	ldrb	r2, [r7, #23]
 8012e0a:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8012e0c:	89bb      	ldrh	r3, [r7, #12]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d11c      	bne.n	8012e4c <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8012e12:	7dfb      	ldrb	r3, [r7, #23]
 8012e14:	2b40      	cmp	r3, #64	; 0x40
 8012e16:	d913      	bls.n	8012e40 <get_fileinfo+0x144>
 8012e18:	7dfb      	ldrb	r3, [r7, #23]
 8012e1a:	2b5a      	cmp	r3, #90	; 0x5a
 8012e1c:	d810      	bhi.n	8012e40 <get_fileinfo+0x144>
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e22:	330c      	adds	r3, #12
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	461a      	mov	r2, r3
 8012e28:	69fb      	ldr	r3, [r7, #28]
 8012e2a:	2b08      	cmp	r3, #8
 8012e2c:	d901      	bls.n	8012e32 <get_fileinfo+0x136>
 8012e2e:	2310      	movs	r3, #16
 8012e30:	e000      	b.n	8012e34 <get_fileinfo+0x138>
 8012e32:	2308      	movs	r3, #8
 8012e34:	4013      	ands	r3, r2
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d002      	beq.n	8012e40 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 8012e3a:	7dfb      	ldrb	r3, [r7, #23]
 8012e3c:	3320      	adds	r3, #32
 8012e3e:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8012e40:	683a      	ldr	r2, [r7, #0]
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	4413      	add	r3, r2
 8012e46:	331a      	adds	r3, #26
 8012e48:	7dfa      	ldrb	r2, [r7, #23]
 8012e4a:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8012e4c:	69bb      	ldr	r3, [r7, #24]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8012e52:	69fb      	ldr	r3, [r7, #28]
 8012e54:	2b0a      	cmp	r3, #10
 8012e56:	d9af      	bls.n	8012db8 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 8012e58:	89bb      	ldrh	r3, [r7, #12]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d10d      	bne.n	8012e7a <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 8012e5e:	683a      	ldr	r2, [r7, #0]
 8012e60:	69bb      	ldr	r3, [r7, #24]
 8012e62:	4413      	add	r3, r2
 8012e64:	331a      	adds	r3, #26
 8012e66:	2200      	movs	r2, #0
 8012e68:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e6e:	330c      	adds	r3, #12
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d101      	bne.n	8012e7a <get_fileinfo+0x17e>
 8012e76:	2300      	movs	r3, #0
 8012e78:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8012e7a:	683a      	ldr	r2, [r7, #0]
 8012e7c:	69bb      	ldr	r3, [r7, #24]
 8012e7e:	4413      	add	r3, r2
 8012e80:	330d      	adds	r3, #13
 8012e82:	2200      	movs	r2, #0
 8012e84:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e8a:	7ada      	ldrb	r2, [r3, #11]
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e94:	331c      	adds	r3, #28
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7fd f9e2 	bl	8010260 <ld_dword>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	461c      	mov	r4, r3
 8012ea2:	4615      	mov	r5, r2
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012eae:	3316      	adds	r3, #22
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7fd f9d5 	bl	8010260 <ld_dword>
 8012eb6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	b29a      	uxth	r2, r3
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	815a      	strh	r2, [r3, #10]
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	0c1b      	lsrs	r3, r3, #16
 8012ec4:	b29a      	uxth	r2, r3
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	811a      	strh	r2, [r3, #8]
 8012eca:	e000      	b.n	8012ece <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012ecc:	bf00      	nop
}
 8012ece:	3720      	adds	r7, #32
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bdb0      	pop	{r4, r5, r7, pc}

08012ed4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b08a      	sub	sp, #40	; 0x28
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
 8012edc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	613b      	str	r3, [r7, #16]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	691b      	ldr	r3, [r3, #16]
 8012eea:	60fb      	str	r3, [r7, #12]
 8012eec:	2300      	movs	r3, #0
 8012eee:	617b      	str	r3, [r7, #20]
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	1c5a      	adds	r2, r3, #1
 8012ef8:	61ba      	str	r2, [r7, #24]
 8012efa:	693a      	ldr	r2, [r7, #16]
 8012efc:	4413      	add	r3, r2
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012f02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f04:	2b1f      	cmp	r3, #31
 8012f06:	d940      	bls.n	8012f8a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012f08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f0a:	2b2f      	cmp	r3, #47	; 0x2f
 8012f0c:	d006      	beq.n	8012f1c <create_name+0x48>
 8012f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f10:	2b5c      	cmp	r3, #92	; 0x5c
 8012f12:	d110      	bne.n	8012f36 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012f14:	e002      	b.n	8012f1c <create_name+0x48>
 8012f16:	69bb      	ldr	r3, [r7, #24]
 8012f18:	3301      	adds	r3, #1
 8012f1a:	61bb      	str	r3, [r7, #24]
 8012f1c:	693a      	ldr	r2, [r7, #16]
 8012f1e:	69bb      	ldr	r3, [r7, #24]
 8012f20:	4413      	add	r3, r2
 8012f22:	781b      	ldrb	r3, [r3, #0]
 8012f24:	2b2f      	cmp	r3, #47	; 0x2f
 8012f26:	d0f6      	beq.n	8012f16 <create_name+0x42>
 8012f28:	693a      	ldr	r2, [r7, #16]
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	4413      	add	r3, r2
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	2b5c      	cmp	r3, #92	; 0x5c
 8012f32:	d0f0      	beq.n	8012f16 <create_name+0x42>
			break;
 8012f34:	e02a      	b.n	8012f8c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	2bfe      	cmp	r3, #254	; 0xfe
 8012f3a:	d901      	bls.n	8012f40 <create_name+0x6c>
 8012f3c:	2306      	movs	r3, #6
 8012f3e:	e1ca      	b.n	80132d6 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f42:	b2db      	uxtb	r3, r3
 8012f44:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f48:	2101      	movs	r1, #1
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f002 fe24 	bl	8015b98 <ff_convert>
 8012f50:	4603      	mov	r3, r0
 8012f52:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012f54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d101      	bne.n	8012f5e <create_name+0x8a>
 8012f5a:	2306      	movs	r3, #6
 8012f5c:	e1bb      	b.n	80132d6 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f60:	2b7f      	cmp	r3, #127	; 0x7f
 8012f62:	d809      	bhi.n	8012f78 <create_name+0xa4>
 8012f64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f66:	4619      	mov	r1, r3
 8012f68:	489e      	ldr	r0, [pc, #632]	; (80131e4 <create_name+0x310>)
 8012f6a:	f7fd fba9 	bl	80106c0 <chk_chr>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d001      	beq.n	8012f78 <create_name+0xa4>
 8012f74:	2306      	movs	r3, #6
 8012f76:	e1ae      	b.n	80132d6 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	1c5a      	adds	r2, r3, #1
 8012f7c:	617a      	str	r2, [r7, #20]
 8012f7e:	005b      	lsls	r3, r3, #1
 8012f80:	68fa      	ldr	r2, [r7, #12]
 8012f82:	4413      	add	r3, r2
 8012f84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012f86:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012f88:	e7b4      	b.n	8012ef4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012f8a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012f8c:	693a      	ldr	r2, [r7, #16]
 8012f8e:	69bb      	ldr	r3, [r7, #24]
 8012f90:	441a      	add	r2, r3
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f98:	2b1f      	cmp	r3, #31
 8012f9a:	d801      	bhi.n	8012fa0 <create_name+0xcc>
 8012f9c:	2304      	movs	r3, #4
 8012f9e:	e000      	b.n	8012fa2 <create_name+0xce>
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	2b01      	cmp	r3, #1
 8012faa:	d109      	bne.n	8012fc0 <create_name+0xec>
 8012fac:	697a      	ldr	r2, [r7, #20]
 8012fae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012fb2:	4413      	add	r3, r2
 8012fb4:	005b      	lsls	r3, r3, #1
 8012fb6:	68fa      	ldr	r2, [r7, #12]
 8012fb8:	4413      	add	r3, r2
 8012fba:	881b      	ldrh	r3, [r3, #0]
 8012fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8012fbe:	d015      	beq.n	8012fec <create_name+0x118>
 8012fc0:	697b      	ldr	r3, [r7, #20]
 8012fc2:	2b02      	cmp	r3, #2
 8012fc4:	d14d      	bne.n	8013062 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8012fc6:	697a      	ldr	r2, [r7, #20]
 8012fc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012fcc:	4413      	add	r3, r2
 8012fce:	005b      	lsls	r3, r3, #1
 8012fd0:	68fa      	ldr	r2, [r7, #12]
 8012fd2:	4413      	add	r3, r2
 8012fd4:	881b      	ldrh	r3, [r3, #0]
 8012fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8012fd8:	d143      	bne.n	8013062 <create_name+0x18e>
 8012fda:	697a      	ldr	r2, [r7, #20]
 8012fdc:	4b82      	ldr	r3, [pc, #520]	; (80131e8 <create_name+0x314>)
 8012fde:	4413      	add	r3, r2
 8012fe0:	005b      	lsls	r3, r3, #1
 8012fe2:	68fa      	ldr	r2, [r7, #12]
 8012fe4:	4413      	add	r3, r2
 8012fe6:	881b      	ldrh	r3, [r3, #0]
 8012fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8012fea:	d13a      	bne.n	8013062 <create_name+0x18e>
		lfn[di] = 0;
 8012fec:	697b      	ldr	r3, [r7, #20]
 8012fee:	005b      	lsls	r3, r3, #1
 8012ff0:	68fa      	ldr	r2, [r7, #12]
 8012ff2:	4413      	add	r3, r2
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	623b      	str	r3, [r7, #32]
 8012ffc:	e00f      	b.n	801301e <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8012ffe:	6a3a      	ldr	r2, [r7, #32]
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	429a      	cmp	r2, r3
 8013004:	d201      	bcs.n	801300a <create_name+0x136>
 8013006:	212e      	movs	r1, #46	; 0x2e
 8013008:	e000      	b.n	801300c <create_name+0x138>
 801300a:	2120      	movs	r1, #32
 801300c:	687a      	ldr	r2, [r7, #4]
 801300e:	6a3b      	ldr	r3, [r7, #32]
 8013010:	4413      	add	r3, r2
 8013012:	3340      	adds	r3, #64	; 0x40
 8013014:	460a      	mov	r2, r1
 8013016:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8013018:	6a3b      	ldr	r3, [r7, #32]
 801301a:	3301      	adds	r3, #1
 801301c:	623b      	str	r3, [r7, #32]
 801301e:	6a3b      	ldr	r3, [r7, #32]
 8013020:	2b0a      	cmp	r3, #10
 8013022:	d9ec      	bls.n	8012ffe <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8013024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013028:	f043 0320 	orr.w	r3, r3, #32
 801302c:	b2d9      	uxtb	r1, r3
 801302e:	687a      	ldr	r2, [r7, #4]
 8013030:	6a3b      	ldr	r3, [r7, #32]
 8013032:	4413      	add	r3, r2
 8013034:	3340      	adds	r3, #64	; 0x40
 8013036:	460a      	mov	r2, r1
 8013038:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 801303a:	2300      	movs	r3, #0
 801303c:	e14b      	b.n	80132d6 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 801303e:	697a      	ldr	r2, [r7, #20]
 8013040:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013044:	4413      	add	r3, r2
 8013046:	005b      	lsls	r3, r3, #1
 8013048:	68fa      	ldr	r2, [r7, #12]
 801304a:	4413      	add	r3, r2
 801304c:	881b      	ldrh	r3, [r3, #0]
 801304e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8013050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013052:	2b20      	cmp	r3, #32
 8013054:	d002      	beq.n	801305c <create_name+0x188>
 8013056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013058:	2b2e      	cmp	r3, #46	; 0x2e
 801305a:	d106      	bne.n	801306a <create_name+0x196>
		di--;
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	3b01      	subs	r3, #1
 8013060:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d1ea      	bne.n	801303e <create_name+0x16a>
 8013068:	e000      	b.n	801306c <create_name+0x198>
		if (w != ' ' && w != '.') break;
 801306a:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	005b      	lsls	r3, r3, #1
 8013070:	68fa      	ldr	r2, [r7, #12]
 8013072:	4413      	add	r3, r2
 8013074:	2200      	movs	r2, #0
 8013076:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d101      	bne.n	8013082 <create_name+0x1ae>
 801307e:	2306      	movs	r3, #6
 8013080:	e129      	b.n	80132d6 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	3340      	adds	r3, #64	; 0x40
 8013086:	220b      	movs	r2, #11
 8013088:	2120      	movs	r1, #32
 801308a:	4618      	mov	r0, r3
 801308c:	f7fd fad6 	bl	801063c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013090:	2300      	movs	r3, #0
 8013092:	61bb      	str	r3, [r7, #24]
 8013094:	e002      	b.n	801309c <create_name+0x1c8>
 8013096:	69bb      	ldr	r3, [r7, #24]
 8013098:	3301      	adds	r3, #1
 801309a:	61bb      	str	r3, [r7, #24]
 801309c:	69bb      	ldr	r3, [r7, #24]
 801309e:	005b      	lsls	r3, r3, #1
 80130a0:	68fa      	ldr	r2, [r7, #12]
 80130a2:	4413      	add	r3, r2
 80130a4:	881b      	ldrh	r3, [r3, #0]
 80130a6:	2b20      	cmp	r3, #32
 80130a8:	d0f5      	beq.n	8013096 <create_name+0x1c2>
 80130aa:	69bb      	ldr	r3, [r7, #24]
 80130ac:	005b      	lsls	r3, r3, #1
 80130ae:	68fa      	ldr	r2, [r7, #12]
 80130b0:	4413      	add	r3, r2
 80130b2:	881b      	ldrh	r3, [r3, #0]
 80130b4:	2b2e      	cmp	r3, #46	; 0x2e
 80130b6:	d0ee      	beq.n	8013096 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 80130b8:	69bb      	ldr	r3, [r7, #24]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d009      	beq.n	80130d2 <create_name+0x1fe>
 80130be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130c2:	f043 0303 	orr.w	r3, r3, #3
 80130c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80130ca:	e002      	b.n	80130d2 <create_name+0x1fe>
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	3b01      	subs	r3, #1
 80130d0:	617b      	str	r3, [r7, #20]
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d009      	beq.n	80130ec <create_name+0x218>
 80130d8:	697a      	ldr	r2, [r7, #20]
 80130da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80130de:	4413      	add	r3, r2
 80130e0:	005b      	lsls	r3, r3, #1
 80130e2:	68fa      	ldr	r2, [r7, #12]
 80130e4:	4413      	add	r3, r2
 80130e6:	881b      	ldrh	r3, [r3, #0]
 80130e8:	2b2e      	cmp	r3, #46	; 0x2e
 80130ea:	d1ef      	bne.n	80130cc <create_name+0x1f8>

	i = b = 0; ni = 8;
 80130ec:	2300      	movs	r3, #0
 80130ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80130f2:	2300      	movs	r3, #0
 80130f4:	623b      	str	r3, [r7, #32]
 80130f6:	2308      	movs	r3, #8
 80130f8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80130fa:	69bb      	ldr	r3, [r7, #24]
 80130fc:	1c5a      	adds	r2, r3, #1
 80130fe:	61ba      	str	r2, [r7, #24]
 8013100:	005b      	lsls	r3, r3, #1
 8013102:	68fa      	ldr	r2, [r7, #12]
 8013104:	4413      	add	r3, r2
 8013106:	881b      	ldrh	r3, [r3, #0]
 8013108:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801310a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801310c:	2b00      	cmp	r3, #0
 801310e:	f000 8098 	beq.w	8013242 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013114:	2b20      	cmp	r3, #32
 8013116:	d006      	beq.n	8013126 <create_name+0x252>
 8013118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801311a:	2b2e      	cmp	r3, #46	; 0x2e
 801311c:	d10a      	bne.n	8013134 <create_name+0x260>
 801311e:	69ba      	ldr	r2, [r7, #24]
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	429a      	cmp	r2, r3
 8013124:	d006      	beq.n	8013134 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 8013126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801312a:	f043 0303 	orr.w	r3, r3, #3
 801312e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013132:	e085      	b.n	8013240 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013134:	6a3a      	ldr	r2, [r7, #32]
 8013136:	69fb      	ldr	r3, [r7, #28]
 8013138:	429a      	cmp	r2, r3
 801313a:	d203      	bcs.n	8013144 <create_name+0x270>
 801313c:	69ba      	ldr	r2, [r7, #24]
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	429a      	cmp	r2, r3
 8013142:	d123      	bne.n	801318c <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8013144:	69fb      	ldr	r3, [r7, #28]
 8013146:	2b0b      	cmp	r3, #11
 8013148:	d106      	bne.n	8013158 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 801314a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801314e:	f043 0303 	orr.w	r3, r3, #3
 8013152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013156:	e077      	b.n	8013248 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013158:	69ba      	ldr	r2, [r7, #24]
 801315a:	697b      	ldr	r3, [r7, #20]
 801315c:	429a      	cmp	r2, r3
 801315e:	d005      	beq.n	801316c <create_name+0x298>
 8013160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013164:	f043 0303 	orr.w	r3, r3, #3
 8013168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801316c:	69ba      	ldr	r2, [r7, #24]
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	429a      	cmp	r2, r3
 8013172:	d868      	bhi.n	8013246 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	61bb      	str	r3, [r7, #24]
 8013178:	2308      	movs	r3, #8
 801317a:	623b      	str	r3, [r7, #32]
 801317c:	230b      	movs	r3, #11
 801317e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013180:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801318a:	e059      	b.n	8013240 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801318c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801318e:	2b7f      	cmp	r3, #127	; 0x7f
 8013190:	d914      	bls.n	80131bc <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013194:	2100      	movs	r1, #0
 8013196:	4618      	mov	r0, r3
 8013198:	f002 fcfe 	bl	8015b98 <ff_convert>
 801319c:	4603      	mov	r3, r0
 801319e:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80131a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d004      	beq.n	80131b0 <create_name+0x2dc>
 80131a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131a8:	3b80      	subs	r3, #128	; 0x80
 80131aa:	4a10      	ldr	r2, [pc, #64]	; (80131ec <create_name+0x318>)
 80131ac:	5cd3      	ldrb	r3, [r2, r3]
 80131ae:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80131b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131b4:	f043 0302 	orr.w	r3, r3, #2
 80131b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80131bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d007      	beq.n	80131d2 <create_name+0x2fe>
 80131c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131c4:	4619      	mov	r1, r3
 80131c6:	480a      	ldr	r0, [pc, #40]	; (80131f0 <create_name+0x31c>)
 80131c8:	f7fd fa7a 	bl	80106c0 <chk_chr>
 80131cc:	4603      	mov	r3, r0
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d010      	beq.n	80131f4 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80131d2:	235f      	movs	r3, #95	; 0x5f
 80131d4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80131d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131da:	f043 0303 	orr.w	r3, r3, #3
 80131de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80131e2:	e023      	b.n	801322c <create_name+0x358>
 80131e4:	0801b7cc 	.word	0x0801b7cc
 80131e8:	7ffffffe 	.word	0x7ffffffe
 80131ec:	0801b8d4 	.word	0x0801b8d4
 80131f0:	0801b7d8 	.word	0x0801b7d8
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80131f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131f6:	2b40      	cmp	r3, #64	; 0x40
 80131f8:	d909      	bls.n	801320e <create_name+0x33a>
 80131fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131fc:	2b5a      	cmp	r3, #90	; 0x5a
 80131fe:	d806      	bhi.n	801320e <create_name+0x33a>
					b |= 2;
 8013200:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013204:	f043 0302 	orr.w	r3, r3, #2
 8013208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801320c:	e00e      	b.n	801322c <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801320e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013210:	2b60      	cmp	r3, #96	; 0x60
 8013212:	d90b      	bls.n	801322c <create_name+0x358>
 8013214:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013216:	2b7a      	cmp	r3, #122	; 0x7a
 8013218:	d808      	bhi.n	801322c <create_name+0x358>
						b |= 1; w -= 0x20;
 801321a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801321e:	f043 0301 	orr.w	r3, r3, #1
 8013222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013228:	3b20      	subs	r3, #32
 801322a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801322c:	6a3b      	ldr	r3, [r7, #32]
 801322e:	1c5a      	adds	r2, r3, #1
 8013230:	623a      	str	r2, [r7, #32]
 8013232:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013234:	b2d1      	uxtb	r1, r2
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	4413      	add	r3, r2
 801323a:	460a      	mov	r2, r1
 801323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8013240:	e75b      	b.n	80130fa <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 8013242:	bf00      	nop
 8013244:	e000      	b.n	8013248 <create_name+0x374>
			if (si > di) break;			/* No extension */
 8013246:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801324e:	2be5      	cmp	r3, #229	; 0xe5
 8013250:	d103      	bne.n	801325a <create_name+0x386>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2205      	movs	r2, #5
 8013256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 801325a:	69fb      	ldr	r3, [r7, #28]
 801325c:	2b08      	cmp	r3, #8
 801325e:	d104      	bne.n	801326a <create_name+0x396>
 8013260:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013264:	009b      	lsls	r3, r3, #2
 8013266:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801326a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801326e:	f003 030c 	and.w	r3, r3, #12
 8013272:	2b0c      	cmp	r3, #12
 8013274:	d005      	beq.n	8013282 <create_name+0x3ae>
 8013276:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801327a:	f003 0303 	and.w	r3, r3, #3
 801327e:	2b03      	cmp	r3, #3
 8013280:	d105      	bne.n	801328e <create_name+0x3ba>
 8013282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013286:	f043 0302 	orr.w	r3, r3, #2
 801328a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801328e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013292:	f003 0302 	and.w	r3, r3, #2
 8013296:	2b00      	cmp	r3, #0
 8013298:	d117      	bne.n	80132ca <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801329a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801329e:	f003 0303 	and.w	r3, r3, #3
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	d105      	bne.n	80132b2 <create_name+0x3de>
 80132a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132aa:	f043 0310 	orr.w	r3, r3, #16
 80132ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80132b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80132b6:	f003 030c 	and.w	r3, r3, #12
 80132ba:	2b04      	cmp	r3, #4
 80132bc:	d105      	bne.n	80132ca <create_name+0x3f6>
 80132be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132c2:	f043 0308 	orr.w	r3, r3, #8
 80132c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80132d0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 80132d4:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80132d6:	4618      	mov	r0, r3
 80132d8:	3728      	adds	r7, #40	; 0x28
 80132da:	46bd      	mov	sp, r7
 80132dc:	bd80      	pop	{r7, pc}
 80132de:	bf00      	nop

080132e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80132e0:	b5b0      	push	{r4, r5, r7, lr}
 80132e2:	b09a      	sub	sp, #104	; 0x68
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	663b      	str	r3, [r7, #96]	; 0x60
	FATFS *fs = obj->fs;
 80132ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	65fb      	str	r3, [r7, #92]	; 0x5c


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	2b2f      	cmp	r3, #47	; 0x2f
 80132fa:	d00b      	beq.n	8013314 <follow_path+0x34>
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	2b5c      	cmp	r3, #92	; 0x5c
 8013302:	d007      	beq.n	8013314 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8013304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801330a:	609a      	str	r2, [r3, #8]
 801330c:	e00d      	b.n	801332a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	3301      	adds	r3, #1
 8013312:	603b      	str	r3, [r7, #0]
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	2b2f      	cmp	r3, #47	; 0x2f
 801331a:	d0f8      	beq.n	801330e <follow_path+0x2e>
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	2b5c      	cmp	r3, #92	; 0x5c
 8013322:	d0f4      	beq.n	801330e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8013324:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013326:	2200      	movs	r2, #0
 8013328:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 801332a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801332c:	2200      	movs	r2, #0
 801332e:	61da      	str	r2, [r3, #28]
#if _FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
 8013330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	2b04      	cmp	r3, #4
 8013336:	d135      	bne.n	80133a4 <follow_path+0xc4>
 8013338:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801333a:	689b      	ldr	r3, [r3, #8]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d031      	beq.n	80133a4 <follow_path+0xc4>
		DIR dj;

		obj->c_scl = fs->cdc_scl;
 8013340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013346:	621a      	str	r2, [r3, #32]
		obj->c_size = fs->cdc_size;
 8013348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801334a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801334c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801334e:	625a      	str	r2, [r3, #36]	; 0x24
		obj->c_ofs = fs->cdc_ofs;
 8013350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013356:	629a      	str	r2, [r3, #40]	; 0x28
		res = load_obj_dir(&dj, obj);
 8013358:	f107 0308 	add.w	r3, r7, #8
 801335c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801335e:	4618      	mov	r0, r3
 8013360:	f7fe ffe2 	bl	8012328 <load_obj_dir>
 8013364:	4603      	mov	r3, r0
 8013366:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res != FR_OK) return res;
 801336a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801336e:	2b00      	cmp	r3, #0
 8013370:	d002      	beq.n	8013378 <follow_path+0x98>
 8013372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013376:	e0c6      	b.n	8013506 <follow_path+0x226>
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 8013378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801337a:	695b      	ldr	r3, [r3, #20]
 801337c:	3338      	adds	r3, #56	; 0x38
 801337e:	4618      	mov	r0, r3
 8013380:	f7fc ff6e 	bl	8010260 <ld_dword>
 8013384:	4603      	mov	r3, r0
 8013386:	2200      	movs	r2, #0
 8013388:	461c      	mov	r4, r3
 801338a:	4615      	mov	r5, r2
 801338c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801338e:	e9c3 4504 	strd	r4, r5, [r3, #16]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8013392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013394:	695b      	ldr	r3, [r3, #20]
 8013396:	3321      	adds	r3, #33	; 0x21
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	f003 0302 	and.w	r3, r3, #2
 801339e:	b2da      	uxtb	r2, r3
 80133a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80133a2:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	2b1f      	cmp	r3, #31
 80133aa:	d80b      	bhi.n	80133c4 <follow_path+0xe4>
		dp->fn[NSFLAG] = NS_NONAME;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2280      	movs	r2, #128	; 0x80
 80133b0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 80133b4:	2100      	movs	r1, #0
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f7fe fa0f 	bl	80117da <dir_sdi>
 80133bc:	4603      	mov	r3, r0
 80133be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80133c2:	e09e      	b.n	8013502 <follow_path+0x222>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80133c4:	463b      	mov	r3, r7
 80133c6:	4619      	mov	r1, r3
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f7ff fd83 	bl	8012ed4 <create_name>
 80133ce:	4603      	mov	r3, r0
 80133d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (res != FR_OK) break;
 80133d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80133d8:	2b00      	cmp	r3, #0
 80133da:	f040 808d 	bne.w	80134f8 <follow_path+0x218>
			res = dir_find(dp);				/* Find an object with the segment name */
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f7ff f961 	bl	80126a6 <dir_find>
 80133e4:	4603      	mov	r3, r0
 80133e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			ns = dp->fn[NSFLAG];
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80133f0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			if (res != FR_OK) {				/* Failed to find the object */
 80133f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d021      	beq.n	8013440 <follow_path+0x160>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80133fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013400:	2b04      	cmp	r3, #4
 8013402:	d17b      	bne.n	80134fc <follow_path+0x21c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8013404:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8013408:	f003 0320 	and.w	r3, r3, #32
 801340c:	2b00      	cmp	r3, #0
 801340e:	d00d      	beq.n	801342c <follow_path+0x14c>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8013410:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8013414:	f003 0304 	and.w	r3, r3, #4
 8013418:	2b00      	cmp	r3, #0
 801341a:	d06b      	beq.n	80134f4 <follow_path+0x214>
						dp->fn[NSFLAG] = NS_NONAME;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2280      	movs	r2, #128	; 0x80
 8013420:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
						res = FR_OK;
 8013424:	2300      	movs	r3, #0
 8013426:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801342a:	e067      	b.n	80134fc <follow_path+0x21c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801342c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8013430:	f003 0304 	and.w	r3, r3, #4
 8013434:	2b00      	cmp	r3, #0
 8013436:	d161      	bne.n	80134fc <follow_path+0x21c>
 8013438:	2305      	movs	r3, #5
 801343a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801343e:	e05d      	b.n	80134fc <follow_path+0x21c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013440:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8013444:	f003 0304 	and.w	r3, r3, #4
 8013448:	2b00      	cmp	r3, #0
 801344a:	d159      	bne.n	8013500 <follow_path+0x220>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801344c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801344e:	799b      	ldrb	r3, [r3, #6]
 8013450:	f003 0310 	and.w	r3, r3, #16
 8013454:	2b00      	cmp	r3, #0
 8013456:	d103      	bne.n	8013460 <follow_path+0x180>
				res = FR_NO_PATH; break;
 8013458:	2305      	movs	r3, #5
 801345a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801345e:	e050      	b.n	8013502 <follow_path+0x222>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8013460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013462:	781b      	ldrb	r3, [r3, #0]
 8013464:	2b04      	cmp	r3, #4
 8013466:	d130      	bne.n	80134ca <follow_path+0x1ea>
				obj->c_scl = obj->sclust;
 8013468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801346a:	689a      	ldr	r2, [r3, #8]
 801346c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801346e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8013470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013472:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013476:	4613      	mov	r3, r2
 8013478:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801347c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801347e:	79d2      	ldrb	r2, [r2, #7]
 8013480:	431a      	orrs	r2, r3
 8013482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013484:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801348a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801348c:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 801348e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013490:	695b      	ldr	r3, [r3, #20]
 8013492:	3334      	adds	r3, #52	; 0x34
 8013494:	4618      	mov	r0, r3
 8013496:	f7fc fee3 	bl	8010260 <ld_dword>
 801349a:	4602      	mov	r2, r0
 801349c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801349e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80134a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134a2:	695b      	ldr	r3, [r3, #20]
 80134a4:	3321      	adds	r3, #33	; 0x21
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	f003 0302 	and.w	r3, r3, #2
 80134ac:	b2da      	uxtb	r2, r3
 80134ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80134b0:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80134b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134b4:	695b      	ldr	r3, [r3, #20]
 80134b6:	3338      	adds	r3, #56	; 0x38
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7fc fef4 	bl	80102a6 <ld_qword>
 80134be:	4602      	mov	r2, r0
 80134c0:	460b      	mov	r3, r1
 80134c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80134c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80134c8:	e77c      	b.n	80133c4 <follow_path+0xe4>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80134ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134cc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80134d6:	8992      	ldrh	r2, [r2, #12]
 80134d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80134dc:	fb00 f202 	mul.w	r2, r0, r2
 80134e0:	1a9b      	subs	r3, r3, r2
 80134e2:	440b      	add	r3, r1
 80134e4:	4619      	mov	r1, r3
 80134e6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80134e8:	f7fe fb4d 	bl	8011b86 <ld_clust>
 80134ec:	4602      	mov	r2, r0
 80134ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80134f0:	609a      	str	r2, [r3, #8]
 80134f2:	e767      	b.n	80133c4 <follow_path+0xe4>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80134f4:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80134f6:	e765      	b.n	80133c4 <follow_path+0xe4>
			if (res != FR_OK) break;
 80134f8:	bf00      	nop
 80134fa:	e002      	b.n	8013502 <follow_path+0x222>
				break;
 80134fc:	bf00      	nop
 80134fe:	e000      	b.n	8013502 <follow_path+0x222>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013500:	bf00      	nop
			}
		}
	}

	return res;
 8013502:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8013506:	4618      	mov	r0, r3
 8013508:	3768      	adds	r7, #104	; 0x68
 801350a:	46bd      	mov	sp, r7
 801350c:	bdb0      	pop	{r4, r5, r7, pc}

0801350e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801350e:	b480      	push	{r7}
 8013510:	b087      	sub	sp, #28
 8013512:	af00      	add	r7, sp, #0
 8013514:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801351a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d031      	beq.n	8013588 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	617b      	str	r3, [r7, #20]
 801352a:	e002      	b.n	8013532 <get_ldnumber+0x24>
 801352c:	697b      	ldr	r3, [r7, #20]
 801352e:	3301      	adds	r3, #1
 8013530:	617b      	str	r3, [r7, #20]
 8013532:	697b      	ldr	r3, [r7, #20]
 8013534:	781b      	ldrb	r3, [r3, #0]
 8013536:	2b1f      	cmp	r3, #31
 8013538:	d903      	bls.n	8013542 <get_ldnumber+0x34>
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	2b3a      	cmp	r3, #58	; 0x3a
 8013540:	d1f4      	bne.n	801352c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013542:	697b      	ldr	r3, [r7, #20]
 8013544:	781b      	ldrb	r3, [r3, #0]
 8013546:	2b3a      	cmp	r3, #58	; 0x3a
 8013548:	d11c      	bne.n	8013584 <get_ldnumber+0x76>
			tp = *path;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	1c5a      	adds	r2, r3, #1
 8013554:	60fa      	str	r2, [r7, #12]
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	3b30      	subs	r3, #48	; 0x30
 801355a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	2b09      	cmp	r3, #9
 8013560:	d80e      	bhi.n	8013580 <get_ldnumber+0x72>
 8013562:	68fa      	ldr	r2, [r7, #12]
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	429a      	cmp	r2, r3
 8013568:	d10a      	bne.n	8013580 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d107      	bne.n	8013580 <get_ldnumber+0x72>
					vol = (int)i;
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013574:	697b      	ldr	r3, [r7, #20]
 8013576:	3301      	adds	r3, #1
 8013578:	617b      	str	r3, [r7, #20]
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	697a      	ldr	r2, [r7, #20]
 801357e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	e002      	b.n	801358a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013584:	2300      	movs	r3, #0
 8013586:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013588:	693b      	ldr	r3, [r7, #16]
}
 801358a:	4618      	mov	r0, r3
 801358c:	371c      	adds	r7, #28
 801358e:	46bd      	mov	sp, r7
 8013590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013594:	4770      	bx	lr
	...

08013598 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2200      	movs	r2, #0
 80135a6:	70da      	strb	r2, [r3, #3]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135ae:	64da      	str	r2, [r3, #76]	; 0x4c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80135b0:	6839      	ldr	r1, [r7, #0]
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f7fd fa80 	bl	8010ab8 <move_window>
 80135b8:	4603      	mov	r3, r0
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d001      	beq.n	80135c2 <check_fs+0x2a>
 80135be:	2304      	movs	r3, #4
 80135c0:	e044      	b.n	801364c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	3350      	adds	r3, #80	; 0x50
 80135c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80135ca:	4618      	mov	r0, r3
 80135cc:	f7fc fe30 	bl	8010230 <ld_word>
 80135d0:	4603      	mov	r3, r0
 80135d2:	461a      	mov	r2, r3
 80135d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80135d8:	429a      	cmp	r2, r3
 80135da:	d001      	beq.n	80135e0 <check_fs+0x48>
 80135dc:	2303      	movs	r3, #3
 80135de:	e035      	b.n	801364c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80135e6:	2be9      	cmp	r3, #233	; 0xe9
 80135e8:	d009      	beq.n	80135fe <check_fs+0x66>
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80135f0:	2beb      	cmp	r3, #235	; 0xeb
 80135f2:	d11e      	bne.n	8013632 <check_fs+0x9a>
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80135fa:	2b90      	cmp	r3, #144	; 0x90
 80135fc:	d119      	bne.n	8013632 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	3350      	adds	r3, #80	; 0x50
 8013602:	3336      	adds	r3, #54	; 0x36
 8013604:	4618      	mov	r0, r3
 8013606:	f7fc fe2b 	bl	8010260 <ld_dword>
 801360a:	4603      	mov	r3, r0
 801360c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013610:	4a10      	ldr	r2, [pc, #64]	; (8013654 <check_fs+0xbc>)
 8013612:	4293      	cmp	r3, r2
 8013614:	d101      	bne.n	801361a <check_fs+0x82>
 8013616:	2300      	movs	r3, #0
 8013618:	e018      	b.n	801364c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	3350      	adds	r3, #80	; 0x50
 801361e:	3352      	adds	r3, #82	; 0x52
 8013620:	4618      	mov	r0, r3
 8013622:	f7fc fe1d 	bl	8010260 <ld_dword>
 8013626:	4603      	mov	r3, r0
 8013628:	4a0b      	ldr	r2, [pc, #44]	; (8013658 <check_fs+0xc0>)
 801362a:	4293      	cmp	r3, r2
 801362c:	d101      	bne.n	8013632 <check_fs+0x9a>
 801362e:	2300      	movs	r3, #0
 8013630:	e00c      	b.n	801364c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	3350      	adds	r3, #80	; 0x50
 8013636:	220b      	movs	r2, #11
 8013638:	4908      	ldr	r1, [pc, #32]	; (801365c <check_fs+0xc4>)
 801363a:	4618      	mov	r0, r3
 801363c:	f7fd f819 	bl	8010672 <mem_cmp>
 8013640:	4603      	mov	r3, r0
 8013642:	2b00      	cmp	r3, #0
 8013644:	d101      	bne.n	801364a <check_fs+0xb2>
 8013646:	2301      	movs	r3, #1
 8013648:	e000      	b.n	801364c <check_fs+0xb4>
#endif
	return 2;
 801364a:	2302      	movs	r3, #2
}
 801364c:	4618      	mov	r0, r3
 801364e:	3708      	adds	r7, #8
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}
 8013654:	00544146 	.word	0x00544146
 8013658:	33544146 	.word	0x33544146
 801365c:	0801b7e0 	.word	0x0801b7e0

08013660 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013664:	b09c      	sub	sp, #112	; 0x70
 8013666:	af00      	add	r7, sp, #0
 8013668:	61f8      	str	r0, [r7, #28]
 801366a:	61b9      	str	r1, [r7, #24]
 801366c:	4613      	mov	r3, r2
 801366e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013670:	69bb      	ldr	r3, [r7, #24]
 8013672:	2200      	movs	r2, #0
 8013674:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013676:	69f8      	ldr	r0, [r7, #28]
 8013678:	f7ff ff49 	bl	801350e <get_ldnumber>
 801367c:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 801367e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013680:	2b00      	cmp	r3, #0
 8013682:	da01      	bge.n	8013688 <find_volume+0x28>
 8013684:	230b      	movs	r3, #11
 8013686:	e37b      	b.n	8013d80 <find_volume+0x720>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013688:	4aa2      	ldr	r2, [pc, #648]	; (8013914 <find_volume+0x2b4>)
 801368a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801368c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013690:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013694:	2b00      	cmp	r3, #0
 8013696:	d101      	bne.n	801369c <find_volume+0x3c>
 8013698:	230c      	movs	r3, #12
 801369a:	e371      	b.n	8013d80 <find_volume+0x720>

	ENTER_FF(fs);						/* Lock the volume */
 801369c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801369e:	f7fd f82a 	bl	80106f6 <lock_fs>
 80136a2:	4603      	mov	r3, r0
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d101      	bne.n	80136ac <find_volume+0x4c>
 80136a8:	230f      	movs	r3, #15
 80136aa:	e369      	b.n	8013d80 <find_volume+0x720>
	*rfs = fs;							/* Return pointer to the file system object */
 80136ac:	69bb      	ldr	r3, [r7, #24]
 80136ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80136b0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80136b2:	7dfb      	ldrb	r3, [r7, #23]
 80136b4:	f023 0301 	bic.w	r3, r3, #1
 80136b8:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80136ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136bc:	781b      	ldrb	r3, [r3, #0]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d01a      	beq.n	80136f8 <find_volume+0x98>
		stat = disk_status(fs->drv);
 80136c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136c4:	785b      	ldrb	r3, [r3, #1]
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fc fd14 	bl	80100f4 <disk_status>
 80136cc:	4603      	mov	r3, r0
 80136ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80136d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80136d6:	f003 0301 	and.w	r3, r3, #1
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d10c      	bne.n	80136f8 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80136de:	7dfb      	ldrb	r3, [r7, #23]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d007      	beq.n	80136f4 <find_volume+0x94>
 80136e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80136e8:	f003 0304 	and.w	r3, r3, #4
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d001      	beq.n	80136f4 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 80136f0:	230a      	movs	r3, #10
 80136f2:	e345      	b.n	8013d80 <find_volume+0x720>
			}
			return FR_OK;				/* The file system object is valid */
 80136f4:	2300      	movs	r3, #0
 80136f6:	e343      	b.n	8013d80 <find_volume+0x720>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80136f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136fa:	2200      	movs	r2, #0
 80136fc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80136fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013700:	b2da      	uxtb	r2, r3
 8013702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013704:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013708:	785b      	ldrb	r3, [r3, #1]
 801370a:	4618      	mov	r0, r3
 801370c:	f7fc fd0c 	bl	8010128 <disk_initialize>
 8013710:	4603      	mov	r3, r0
 8013712:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013716:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801371a:	f003 0301 	and.w	r3, r3, #1
 801371e:	2b00      	cmp	r3, #0
 8013720:	d001      	beq.n	8013726 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013722:	2303      	movs	r3, #3
 8013724:	e32c      	b.n	8013d80 <find_volume+0x720>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013726:	7dfb      	ldrb	r3, [r7, #23]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d007      	beq.n	801373c <find_volume+0xdc>
 801372c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013730:	f003 0304 	and.w	r3, r3, #4
 8013734:	2b00      	cmp	r3, #0
 8013736:	d001      	beq.n	801373c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8013738:	230a      	movs	r3, #10
 801373a:	e321      	b.n	8013d80 <find_volume+0x720>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801373c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801373e:	7858      	ldrb	r0, [r3, #1]
 8013740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013742:	330c      	adds	r3, #12
 8013744:	461a      	mov	r2, r3
 8013746:	2102      	movs	r1, #2
 8013748:	f7fc fd54 	bl	80101f4 <disk_ioctl>
 801374c:	4603      	mov	r3, r0
 801374e:	2b00      	cmp	r3, #0
 8013750:	d001      	beq.n	8013756 <find_volume+0xf6>
 8013752:	2301      	movs	r3, #1
 8013754:	e314      	b.n	8013d80 <find_volume+0x720>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8013756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013758:	899b      	ldrh	r3, [r3, #12]
 801375a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801375e:	d80d      	bhi.n	801377c <find_volume+0x11c>
 8013760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013762:	899b      	ldrh	r3, [r3, #12]
 8013764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013768:	d308      	bcc.n	801377c <find_volume+0x11c>
 801376a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801376c:	899b      	ldrh	r3, [r3, #12]
 801376e:	461a      	mov	r2, r3
 8013770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013772:	899b      	ldrh	r3, [r3, #12]
 8013774:	3b01      	subs	r3, #1
 8013776:	4013      	ands	r3, r2
 8013778:	2b00      	cmp	r3, #0
 801377a:	d001      	beq.n	8013780 <find_volume+0x120>
 801377c:	2301      	movs	r3, #1
 801377e:	e2ff      	b.n	8013d80 <find_volume+0x720>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013780:	2300      	movs	r3, #0
 8013782:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013784:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013786:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013788:	f7ff ff06 	bl	8013598 <check_fs>
 801378c:	4603      	mov	r3, r0
 801378e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013792:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013796:	2b02      	cmp	r3, #2
 8013798:	d14d      	bne.n	8013836 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801379a:	2300      	movs	r3, #0
 801379c:	65bb      	str	r3, [r7, #88]	; 0x58
 801379e:	e020      	b.n	80137e2 <find_volume+0x182>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80137a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137a2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80137a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137a8:	011b      	lsls	r3, r3, #4
 80137aa:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80137ae:	4413      	add	r3, r2
 80137b0:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80137b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137b4:	3304      	adds	r3, #4
 80137b6:	781b      	ldrb	r3, [r3, #0]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d006      	beq.n	80137ca <find_volume+0x16a>
 80137bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137be:	3308      	adds	r3, #8
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7fc fd4d 	bl	8010260 <ld_dword>
 80137c6:	4602      	mov	r2, r0
 80137c8:	e000      	b.n	80137cc <find_volume+0x16c>
 80137ca:	2200      	movs	r2, #0
 80137cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137ce:	009b      	lsls	r3, r3, #2
 80137d0:	3360      	adds	r3, #96	; 0x60
 80137d2:	f107 0110 	add.w	r1, r7, #16
 80137d6:	440b      	add	r3, r1
 80137d8:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80137dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137de:	3301      	adds	r3, #1
 80137e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80137e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137e4:	2b03      	cmp	r3, #3
 80137e6:	d9db      	bls.n	80137a0 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80137e8:	2300      	movs	r3, #0
 80137ea:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 80137ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d002      	beq.n	80137f8 <find_volume+0x198>
 80137f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137f4:	3b01      	subs	r3, #1
 80137f6:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 80137f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137fa:	009b      	lsls	r3, r3, #2
 80137fc:	3360      	adds	r3, #96	; 0x60
 80137fe:	f107 0210 	add.w	r2, r7, #16
 8013802:	4413      	add	r3, r2
 8013804:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8013808:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801380a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801380c:	2b00      	cmp	r3, #0
 801380e:	d005      	beq.n	801381c <find_volume+0x1bc>
 8013810:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013812:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013814:	f7ff fec0 	bl	8013598 <check_fs>
 8013818:	4603      	mov	r3, r0
 801381a:	e000      	b.n	801381e <find_volume+0x1be>
 801381c:	2303      	movs	r3, #3
 801381e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013822:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013826:	2b01      	cmp	r3, #1
 8013828:	d905      	bls.n	8013836 <find_volume+0x1d6>
 801382a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801382c:	3301      	adds	r3, #1
 801382e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013832:	2b03      	cmp	r3, #3
 8013834:	d9e0      	bls.n	80137f8 <find_volume+0x198>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013836:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801383a:	2b04      	cmp	r3, #4
 801383c:	d101      	bne.n	8013842 <find_volume+0x1e2>
 801383e:	2301      	movs	r3, #1
 8013840:	e29e      	b.n	8013d80 <find_volume+0x720>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013842:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013846:	2b01      	cmp	r3, #1
 8013848:	d901      	bls.n	801384e <find_volume+0x1ee>
 801384a:	230d      	movs	r3, #13
 801384c:	e298      	b.n	8013d80 <find_volume+0x720>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 801384e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013852:	2b01      	cmp	r3, #1
 8013854:	f040 8100 	bne.w	8013a58 <find_volume+0x3f8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8013858:	230b      	movs	r3, #11
 801385a:	65bb      	str	r3, [r7, #88]	; 0x58
 801385c:	e002      	b.n	8013864 <find_volume+0x204>
 801385e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013860:	3301      	adds	r3, #1
 8013862:	65bb      	str	r3, [r7, #88]	; 0x58
 8013864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013866:	2b3f      	cmp	r3, #63	; 0x3f
 8013868:	d806      	bhi.n	8013878 <find_volume+0x218>
 801386a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801386c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801386e:	4413      	add	r3, r2
 8013870:	3350      	adds	r3, #80	; 0x50
 8013872:	781b      	ldrb	r3, [r3, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d0f2      	beq.n	801385e <find_volume+0x1fe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8013878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801387a:	2b3f      	cmp	r3, #63	; 0x3f
 801387c:	d801      	bhi.n	8013882 <find_volume+0x222>
 801387e:	230d      	movs	r3, #13
 8013880:	e27e      	b.n	8013d80 <find_volume+0x720>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8013882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013884:	3350      	adds	r3, #80	; 0x50
 8013886:	3368      	adds	r3, #104	; 0x68
 8013888:	4618      	mov	r0, r3
 801388a:	f7fc fcd1 	bl	8010230 <ld_word>
 801388e:	4603      	mov	r3, r0
 8013890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013894:	d001      	beq.n	801389a <find_volume+0x23a>
 8013896:	230d      	movs	r3, #13
 8013898:	e272      	b.n	8013d80 <find_volume+0x720>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 801389a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801389c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80138a0:	461a      	mov	r2, r3
 80138a2:	2301      	movs	r3, #1
 80138a4:	4093      	lsls	r3, r2
 80138a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80138a8:	8992      	ldrh	r2, [r2, #12]
 80138aa:	4293      	cmp	r3, r2
 80138ac:	d001      	beq.n	80138b2 <find_volume+0x252>
			return FR_NO_FILESYSTEM;
 80138ae:	230d      	movs	r3, #13
 80138b0:	e266      	b.n	8013d80 <find_volume+0x720>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80138b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138b4:	3350      	adds	r3, #80	; 0x50
 80138b6:	3348      	adds	r3, #72	; 0x48
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7fc fcf4 	bl	80102a6 <ld_qword>
 80138be:	4602      	mov	r2, r0
 80138c0:	460b      	mov	r3, r1
 80138c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80138c4:	2000      	movs	r0, #0
 80138c6:	60b9      	str	r1, [r7, #8]
 80138c8:	60f8      	str	r0, [r7, #12]
 80138ca:	68b9      	ldr	r1, [r7, #8]
 80138cc:	1851      	adds	r1, r2, r1
 80138ce:	6039      	str	r1, [r7, #0]
 80138d0:	68f9      	ldr	r1, [r7, #12]
 80138d2:	eb43 0101 	adc.w	r1, r3, r1
 80138d6:	6079      	str	r1, [r7, #4]
 80138d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80138dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80138e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d301      	bcc.n	80138ec <find_volume+0x28c>
 80138e8:	230d      	movs	r3, #13
 80138ea:	e249      	b.n	8013d80 <find_volume+0x720>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80138ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138ee:	3350      	adds	r3, #80	; 0x50
 80138f0:	3354      	adds	r3, #84	; 0x54
 80138f2:	4618      	mov	r0, r3
 80138f4:	f7fc fcb4 	bl	8010260 <ld_dword>
 80138f8:	4602      	mov	r2, r0
 80138fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138fc:	639a      	str	r2, [r3, #56]	; 0x38

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80138fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013900:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 8013904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013906:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8013908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801390a:	789b      	ldrb	r3, [r3, #2]
 801390c:	2b01      	cmp	r3, #1
 801390e:	d003      	beq.n	8013918 <find_volume+0x2b8>
 8013910:	230d      	movs	r3, #13
 8013912:	e235      	b.n	8013d80 <find_volume+0x720>
 8013914:	24002bf8 	.word	0x24002bf8

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8013918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801391a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801391e:	461a      	mov	r2, r3
 8013920:	2301      	movs	r3, #1
 8013922:	4093      	lsls	r3, r2
 8013924:	b29a      	uxth	r2, r3
 8013926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013928:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 801392a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801392c:	895b      	ldrh	r3, [r3, #10]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d101      	bne.n	8013936 <find_volume+0x2d6>
 8013932:	230d      	movs	r3, #13
 8013934:	e224      	b.n	8013d80 <find_volume+0x720>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8013936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013938:	3350      	adds	r3, #80	; 0x50
 801393a:	335c      	adds	r3, #92	; 0x5c
 801393c:	4618      	mov	r0, r3
 801393e:	f7fc fc8f 	bl	8010260 <ld_dword>
 8013942:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8013944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013946:	4a9a      	ldr	r2, [pc, #616]	; (8013bb0 <find_volume+0x550>)
 8013948:	4293      	cmp	r3, r2
 801394a:	d901      	bls.n	8013950 <find_volume+0x2f0>
 801394c:	230d      	movs	r3, #13
 801394e:	e217      	b.n	8013d80 <find_volume+0x720>
		fs->n_fatent = nclst + 2;
 8013950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013952:	1c9a      	adds	r2, r3, #2
 8013954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013956:	635a      	str	r2, [r3, #52]	; 0x34

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8013958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801395a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801395c:	63da      	str	r2, [r3, #60]	; 0x3c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 801395e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013960:	3350      	adds	r3, #80	; 0x50
 8013962:	3358      	adds	r3, #88	; 0x58
 8013964:	4618      	mov	r0, r3
 8013966:	f7fc fc7b 	bl	8010260 <ld_dword>
 801396a:	4602      	mov	r2, r0
 801396c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801396e:	441a      	add	r2, r3
 8013970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013972:	649a      	str	r2, [r3, #72]	; 0x48
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8013974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013976:	3350      	adds	r3, #80	; 0x50
 8013978:	3350      	adds	r3, #80	; 0x50
 801397a:	4618      	mov	r0, r3
 801397c:	f7fc fc70 	bl	8010260 <ld_dword>
 8013980:	4602      	mov	r2, r0
 8013982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013984:	441a      	add	r2, r3
 8013986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013988:	641a      	str	r2, [r3, #64]	; 0x40
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 801398a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801398c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801398e:	2200      	movs	r2, #0
 8013990:	469a      	mov	sl, r3
 8013992:	4693      	mov	fp, r2
 8013994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013996:	895b      	ldrh	r3, [r3, #10]
 8013998:	461a      	mov	r2, r3
 801399a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801399c:	fb02 f303 	mul.w	r3, r2, r3
 80139a0:	2200      	movs	r2, #0
 80139a2:	4698      	mov	r8, r3
 80139a4:	4691      	mov	r9, r2
 80139a6:	eb1a 0408 	adds.w	r4, sl, r8
 80139aa:	eb4b 0509 	adc.w	r5, fp, r9
 80139ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80139b2:	42a2      	cmp	r2, r4
 80139b4:	41ab      	sbcs	r3, r5
 80139b6:	d201      	bcs.n	80139bc <find_volume+0x35c>
 80139b8:	230d      	movs	r3, #13
 80139ba:	e1e1      	b.n	8013d80 <find_volume+0x720>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 80139bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139be:	3350      	adds	r3, #80	; 0x50
 80139c0:	3360      	adds	r3, #96	; 0x60
 80139c2:	4618      	mov	r0, r3
 80139c4:	f7fc fc4c 	bl	8010260 <ld_dword>
 80139c8:	4602      	mov	r2, r0
 80139ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139cc:	645a      	str	r2, [r3, #68]	; 0x44

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80139ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139d2:	4619      	mov	r1, r3
 80139d4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80139d6:	f7fd f90d 	bl	8010bf4 <clust2sect>
 80139da:	4603      	mov	r3, r0
 80139dc:	4619      	mov	r1, r3
 80139de:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80139e0:	f7fd f86a 	bl	8010ab8 <move_window>
 80139e4:	4603      	mov	r3, r0
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d001      	beq.n	80139ee <find_volume+0x38e>
 80139ea:	2301      	movs	r3, #1
 80139ec:	e1c8      	b.n	8013d80 <find_volume+0x720>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80139ee:	2300      	movs	r3, #0
 80139f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80139f2:	e015      	b.n	8013a20 <find_volume+0x3c0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80139f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80139f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80139f8:	4413      	add	r3, r2
 80139fa:	3350      	adds	r3, #80	; 0x50
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	2b81      	cmp	r3, #129	; 0x81
 8013a00:	d10b      	bne.n	8013a1a <find_volume+0x3ba>
 8013a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a04:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8013a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a0a:	3314      	adds	r3, #20
 8013a0c:	4413      	add	r3, r2
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7fc fc26 	bl	8010260 <ld_dword>
 8013a14:	4603      	mov	r3, r0
 8013a16:	2b02      	cmp	r3, #2
 8013a18:	d009      	beq.n	8013a2e <find_volume+0x3ce>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8013a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a1c:	3320      	adds	r3, #32
 8013a1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a22:	899b      	ldrh	r3, [r3, #12]
 8013a24:	461a      	mov	r2, r3
 8013a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	d3e3      	bcc.n	80139f4 <find_volume+0x394>
 8013a2c:	e000      	b.n	8013a30 <find_volume+0x3d0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8013a2e:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8013a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a32:	899b      	ldrh	r3, [r3, #12]
 8013a34:	461a      	mov	r2, r3
 8013a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a38:	4293      	cmp	r3, r2
 8013a3a:	d101      	bne.n	8013a40 <find_volume+0x3e0>
 8013a3c:	230d      	movs	r3, #13
 8013a3e:	e19f      	b.n	8013d80 <find_volume+0x720>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a46:	621a      	str	r2, [r3, #32]
 8013a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a4a:	6a1a      	ldr	r2, [r3, #32]
 8013a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a4e:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8013a50:	2304      	movs	r3, #4
 8013a52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8013a56:	e17e      	b.n	8013d56 <find_volume+0x6f6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a5a:	3350      	adds	r3, #80	; 0x50
 8013a5c:	330b      	adds	r3, #11
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7fc fbe6 	bl	8010230 <ld_word>
 8013a64:	4603      	mov	r3, r0
 8013a66:	461a      	mov	r2, r3
 8013a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a6a:	899b      	ldrh	r3, [r3, #12]
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d001      	beq.n	8013a74 <find_volume+0x414>
 8013a70:	230d      	movs	r3, #13
 8013a72:	e185      	b.n	8013d80 <find_volume+0x720>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a76:	3350      	adds	r3, #80	; 0x50
 8013a78:	3316      	adds	r3, #22
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7fc fbd8 	bl	8010230 <ld_word>
 8013a80:	4603      	mov	r3, r0
 8013a82:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d106      	bne.n	8013a98 <find_volume+0x438>
 8013a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a8c:	3350      	adds	r3, #80	; 0x50
 8013a8e:	3324      	adds	r3, #36	; 0x24
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7fc fbe5 	bl	8010260 <ld_dword>
 8013a96:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8013a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013a9c:	639a      	str	r2, [r3, #56]	; 0x38

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aa0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8013aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aa6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aaa:	789b      	ldrb	r3, [r3, #2]
 8013aac:	2b01      	cmp	r3, #1
 8013aae:	d005      	beq.n	8013abc <find_volume+0x45c>
 8013ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ab2:	789b      	ldrb	r3, [r3, #2]
 8013ab4:	2b02      	cmp	r3, #2
 8013ab6:	d001      	beq.n	8013abc <find_volume+0x45c>
 8013ab8:	230d      	movs	r3, #13
 8013aba:	e161      	b.n	8013d80 <find_volume+0x720>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013abe:	789b      	ldrb	r3, [r3, #2]
 8013ac0:	461a      	mov	r2, r3
 8013ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ac4:	fb02 f303 	mul.w	r3, r2, r3
 8013ac8:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013acc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013ad0:	b29a      	uxth	r2, r3
 8013ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ad4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ad8:	895b      	ldrh	r3, [r3, #10]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d008      	beq.n	8013af0 <find_volume+0x490>
 8013ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ae0:	895b      	ldrh	r3, [r3, #10]
 8013ae2:	461a      	mov	r2, r3
 8013ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ae6:	895b      	ldrh	r3, [r3, #10]
 8013ae8:	3b01      	subs	r3, #1
 8013aea:	4013      	ands	r3, r2
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d001      	beq.n	8013af4 <find_volume+0x494>
 8013af0:	230d      	movs	r3, #13
 8013af2:	e145      	b.n	8013d80 <find_volume+0x720>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013af6:	3350      	adds	r3, #80	; 0x50
 8013af8:	3311      	adds	r3, #17
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7fc fb98 	bl	8010230 <ld_word>
 8013b00:	4603      	mov	r3, r0
 8013b02:	461a      	mov	r2, r3
 8013b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b0a:	891b      	ldrh	r3, [r3, #8]
 8013b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b0e:	8992      	ldrh	r2, [r2, #12]
 8013b10:	0952      	lsrs	r2, r2, #5
 8013b12:	b292      	uxth	r2, r2
 8013b14:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b18:	fb01 f202 	mul.w	r2, r1, r2
 8013b1c:	1a9b      	subs	r3, r3, r2
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d001      	beq.n	8013b28 <find_volume+0x4c8>
 8013b24:	230d      	movs	r3, #13
 8013b26:	e12b      	b.n	8013d80 <find_volume+0x720>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b2a:	3350      	adds	r3, #80	; 0x50
 8013b2c:	3313      	adds	r3, #19
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f7fc fb7e 	bl	8010230 <ld_word>
 8013b34:	4603      	mov	r3, r0
 8013b36:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013b38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d106      	bne.n	8013b4c <find_volume+0x4ec>
 8013b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b40:	3350      	adds	r3, #80	; 0x50
 8013b42:	3320      	adds	r3, #32
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7fc fb8b 	bl	8010260 <ld_dword>
 8013b4a:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b4e:	3350      	adds	r3, #80	; 0x50
 8013b50:	330e      	adds	r3, #14
 8013b52:	4618      	mov	r0, r3
 8013b54:	f7fc fb6c 	bl	8010230 <ld_word>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013b5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d101      	bne.n	8013b6a <find_volume+0x50a>
 8013b66:	230d      	movs	r3, #13
 8013b68:	e10a      	b.n	8013d80 <find_volume+0x720>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013b6a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b70:	4413      	add	r3, r2
 8013b72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b74:	8911      	ldrh	r1, [r2, #8]
 8013b76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b78:	8992      	ldrh	r2, [r2, #12]
 8013b7a:	0952      	lsrs	r2, r2, #5
 8013b7c:	b292      	uxth	r2, r2
 8013b7e:	fbb1 f2f2 	udiv	r2, r1, r2
 8013b82:	b292      	uxth	r2, r2
 8013b84:	4413      	add	r3, r2
 8013b86:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013b88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d201      	bcs.n	8013b94 <find_volume+0x534>
 8013b90:	230d      	movs	r3, #13
 8013b92:	e0f5      	b.n	8013d80 <find_volume+0x720>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013b94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b98:	1ad3      	subs	r3, r2, r3
 8013b9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b9c:	8952      	ldrh	r2, [r2, #10]
 8013b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d104      	bne.n	8013bb4 <find_volume+0x554>
 8013baa:	230d      	movs	r3, #13
 8013bac:	e0e8      	b.n	8013d80 <find_volume+0x720>
 8013bae:	bf00      	nop
 8013bb0:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 8013bb4:	2303      	movs	r3, #3
 8013bb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bbc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013bc0:	4293      	cmp	r3, r2
 8013bc2:	d802      	bhi.n	8013bca <find_volume+0x56a>
 8013bc4:	2302      	movs	r3, #2
 8013bc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bcc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013bd0:	4293      	cmp	r3, r2
 8013bd2:	d802      	bhi.n	8013bda <find_volume+0x57a>
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bdc:	1c9a      	adds	r2, r3, #2
 8013bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013be0:	635a      	str	r2, [r3, #52]	; 0x34
		fs->volbase = bsect;							/* Volume start sector */
 8013be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013be4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013be6:	63da      	str	r2, [r3, #60]	; 0x3c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013be8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013bee:	441a      	add	r2, r3
 8013bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bf2:	641a      	str	r2, [r3, #64]	; 0x40
		fs->database = bsect + sysect;					/* Data start sector */
 8013bf4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bf8:	441a      	add	r2, r3
 8013bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bfc:	649a      	str	r2, [r3, #72]	; 0x48
		if (fmt == FS_FAT32) {
 8013bfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013c02:	2b03      	cmp	r3, #3
 8013c04:	d11e      	bne.n	8013c44 <find_volume+0x5e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c08:	3350      	adds	r3, #80	; 0x50
 8013c0a:	332a      	adds	r3, #42	; 0x2a
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7fc fb0f 	bl	8010230 <ld_word>
 8013c12:	4603      	mov	r3, r0
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d001      	beq.n	8013c1c <find_volume+0x5bc>
 8013c18:	230d      	movs	r3, #13
 8013c1a:	e0b1      	b.n	8013d80 <find_volume+0x720>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c1e:	891b      	ldrh	r3, [r3, #8]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d001      	beq.n	8013c28 <find_volume+0x5c8>
 8013c24:	230d      	movs	r3, #13
 8013c26:	e0ab      	b.n	8013d80 <find_volume+0x720>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c2a:	3350      	adds	r3, #80	; 0x50
 8013c2c:	332c      	adds	r3, #44	; 0x2c
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7fc fb16 	bl	8010260 <ld_dword>
 8013c34:	4602      	mov	r2, r0
 8013c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c38:	645a      	str	r2, [r3, #68]	; 0x44
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c3e:	009b      	lsls	r3, r3, #2
 8013c40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013c42:	e01f      	b.n	8013c84 <find_volume+0x624>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c46:	891b      	ldrh	r3, [r3, #8]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d101      	bne.n	8013c50 <find_volume+0x5f0>
 8013c4c:	230d      	movs	r3, #13
 8013c4e:	e097      	b.n	8013d80 <find_volume+0x720>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c56:	441a      	add	r2, r3
 8013c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c5a:	645a      	str	r2, [r3, #68]	; 0x44
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013c5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013c60:	2b02      	cmp	r3, #2
 8013c62:	d103      	bne.n	8013c6c <find_volume+0x60c>
 8013c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c68:	005b      	lsls	r3, r3, #1
 8013c6a:	e00a      	b.n	8013c82 <find_volume+0x622>
 8013c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013c70:	4613      	mov	r3, r2
 8013c72:	005b      	lsls	r3, r3, #1
 8013c74:	4413      	add	r3, r2
 8013c76:	085a      	lsrs	r2, r3, #1
 8013c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c7c:	f003 0301 	and.w	r3, r3, #1
 8013c80:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013c82:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c8a:	899b      	ldrh	r3, [r3, #12]
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013c90:	440b      	add	r3, r1
 8013c92:	3b01      	subs	r3, #1
 8013c94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013c96:	8989      	ldrh	r1, [r1, #12]
 8013c98:	fbb3 f3f1 	udiv	r3, r3, r1
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d201      	bcs.n	8013ca4 <find_volume+0x644>
 8013ca0:	230d      	movs	r3, #13
 8013ca2:	e06d      	b.n	8013d80 <find_volume+0x720>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013caa:	621a      	str	r2, [r3, #32]
 8013cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cae:	6a1a      	ldr	r2, [r3, #32]
 8013cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cb2:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 8013cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cb6:	2280      	movs	r2, #128	; 0x80
 8013cb8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013cba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013cbe:	2b03      	cmp	r3, #3
 8013cc0:	d149      	bne.n	8013d56 <find_volume+0x6f6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cc4:	3350      	adds	r3, #80	; 0x50
 8013cc6:	3330      	adds	r3, #48	; 0x30
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7fc fab1 	bl	8010230 <ld_word>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	2b01      	cmp	r3, #1
 8013cd2:	d140      	bne.n	8013d56 <find_volume+0x6f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	4619      	mov	r1, r3
 8013cda:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013cdc:	f7fc feec 	bl	8010ab8 <move_window>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d137      	bne.n	8013d56 <find_volume+0x6f6>
		{
			fs->fsi_flag = 0;
 8013ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ce8:	2200      	movs	r2, #0
 8013cea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cee:	3350      	adds	r3, #80	; 0x50
 8013cf0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f7fc fa9b 	bl	8010230 <ld_word>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d127      	bne.n	8013d56 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d08:	3350      	adds	r3, #80	; 0x50
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7fc faa8 	bl	8010260 <ld_dword>
 8013d10:	4603      	mov	r3, r0
 8013d12:	4a1e      	ldr	r2, [pc, #120]	; (8013d8c <find_volume+0x72c>)
 8013d14:	4293      	cmp	r3, r2
 8013d16:	d11e      	bne.n	8013d56 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d1a:	3350      	adds	r3, #80	; 0x50
 8013d1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7fc fa9d 	bl	8010260 <ld_dword>
 8013d26:	4603      	mov	r3, r0
 8013d28:	4a19      	ldr	r2, [pc, #100]	; (8013d90 <find_volume+0x730>)
 8013d2a:	4293      	cmp	r3, r2
 8013d2c:	d113      	bne.n	8013d56 <find_volume+0x6f6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d30:	3350      	adds	r3, #80	; 0x50
 8013d32:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013d36:	4618      	mov	r0, r3
 8013d38:	f7fc fa92 	bl	8010260 <ld_dword>
 8013d3c:	4602      	mov	r2, r0
 8013d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d40:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d44:	3350      	adds	r3, #80	; 0x50
 8013d46:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7fc fa88 	bl	8010260 <ld_dword>
 8013d50:	4602      	mov	r2, r0
 8013d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d54:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d58:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8013d5c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013d5e:	4b0d      	ldr	r3, [pc, #52]	; (8013d94 <find_volume+0x734>)
 8013d60:	881b      	ldrh	r3, [r3, #0]
 8013d62:	3301      	adds	r3, #1
 8013d64:	b29a      	uxth	r2, r3
 8013d66:	4b0b      	ldr	r3, [pc, #44]	; (8013d94 <find_volume+0x734>)
 8013d68:	801a      	strh	r2, [r3, #0]
 8013d6a:	4b0a      	ldr	r3, [pc, #40]	; (8013d94 <find_volume+0x734>)
 8013d6c:	881a      	ldrh	r2, [r3, #0]
 8013d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d70:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d74:	2200      	movs	r2, #0
 8013d76:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013d78:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013d7a:	f7fc fe35 	bl	80109e8 <clear_lock>
#endif
	return FR_OK;
 8013d7e:	2300      	movs	r3, #0
}
 8013d80:	4618      	mov	r0, r3
 8013d82:	3770      	adds	r7, #112	; 0x70
 8013d84:	46bd      	mov	sp, r7
 8013d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013d8a:	bf00      	nop
 8013d8c:	41615252 	.word	0x41615252
 8013d90:	61417272 	.word	0x61417272
 8013d94:	24002bfc 	.word	0x24002bfc

08013d98 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013da2:	2309      	movs	r3, #9
 8013da4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d02e      	beq.n	8013e0a <validate+0x72>
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d02a      	beq.n	8013e0a <validate+0x72>
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	781b      	ldrb	r3, [r3, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d025      	beq.n	8013e0a <validate+0x72>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	889a      	ldrh	r2, [r3, #4]
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	88db      	ldrh	r3, [r3, #6]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	d11e      	bne.n	8013e0a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7fc fc90 	bl	80106f6 <lock_fs>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d014      	beq.n	8013e06 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	785b      	ldrb	r3, [r3, #1]
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7fc f986 	bl	80100f4 <disk_status>
 8013de8:	4603      	mov	r3, r0
 8013dea:	f003 0301 	and.w	r3, r3, #1
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d102      	bne.n	8013df8 <validate+0x60>
				res = FR_OK;
 8013df2:	2300      	movs	r3, #0
 8013df4:	73fb      	strb	r3, [r7, #15]
 8013df6:	e008      	b.n	8013e0a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7fc fc8f 	bl	8010722 <unlock_fs>
 8013e04:	e001      	b.n	8013e0a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8013e06:	230f      	movs	r3, #15
 8013e08:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013e0a:	7bfb      	ldrb	r3, [r7, #15]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d102      	bne.n	8013e16 <validate+0x7e>
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	e000      	b.n	8013e18 <validate+0x80>
 8013e16:	2300      	movs	r3, #0
 8013e18:	683a      	ldr	r2, [r7, #0]
 8013e1a:	6013      	str	r3, [r2, #0]
	return res;
 8013e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	3710      	adds	r7, #16
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}
	...

08013e28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b088      	sub	sp, #32
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	60f8      	str	r0, [r7, #12]
 8013e30:	60b9      	str	r1, [r7, #8]
 8013e32:	4613      	mov	r3, r2
 8013e34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013e3a:	f107 0310 	add.w	r3, r7, #16
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7ff fb65 	bl	801350e <get_ldnumber>
 8013e44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013e46:	69fb      	ldr	r3, [r7, #28]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	da01      	bge.n	8013e50 <f_mount+0x28>
 8013e4c:	230b      	movs	r3, #11
 8013e4e:	e048      	b.n	8013ee2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013e50:	4a26      	ldr	r2, [pc, #152]	; (8013eec <f_mount+0xc4>)
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013e5a:	69bb      	ldr	r3, [r7, #24]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d00f      	beq.n	8013e80 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013e60:	69b8      	ldr	r0, [r7, #24]
 8013e62:	f7fc fdc1 	bl	80109e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8013e66:	69bb      	ldr	r3, [r7, #24]
 8013e68:	699b      	ldr	r3, [r3, #24]
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f001 ff79 	bl	8015d62 <ff_del_syncobj>
 8013e70:	4603      	mov	r3, r0
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d101      	bne.n	8013e7a <f_mount+0x52>
 8013e76:	2302      	movs	r3, #2
 8013e78:	e033      	b.n	8013ee2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013e7a:	69bb      	ldr	r3, [r7, #24]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d00f      	beq.n	8013ea6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8013e8c:	69fb      	ldr	r3, [r7, #28]
 8013e8e:	b2da      	uxtb	r2, r3
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	3318      	adds	r3, #24
 8013e94:	4619      	mov	r1, r3
 8013e96:	4610      	mov	r0, r2
 8013e98:	f001 ff44 	bl	8015d24 <ff_cre_syncobj>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d101      	bne.n	8013ea6 <f_mount+0x7e>
 8013ea2:	2302      	movs	r3, #2
 8013ea4:	e01d      	b.n	8013ee2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013ea6:	68fa      	ldr	r2, [r7, #12]
 8013ea8:	4910      	ldr	r1, [pc, #64]	; (8013eec <f_mount+0xc4>)
 8013eaa:	69fb      	ldr	r3, [r7, #28]
 8013eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d002      	beq.n	8013ebc <f_mount+0x94>
 8013eb6:	79fb      	ldrb	r3, [r7, #7]
 8013eb8:	2b01      	cmp	r3, #1
 8013eba:	d001      	beq.n	8013ec0 <f_mount+0x98>
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	e010      	b.n	8013ee2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013ec0:	f107 010c 	add.w	r1, r7, #12
 8013ec4:	f107 0308 	add.w	r3, r7, #8
 8013ec8:	2200      	movs	r2, #0
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f7ff fbc8 	bl	8013660 <find_volume>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	7dfa      	ldrb	r2, [r7, #23]
 8013ed8:	4611      	mov	r1, r2
 8013eda:	4618      	mov	r0, r3
 8013edc:	f7fc fc21 	bl	8010722 <unlock_fs>
 8013ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3720      	adds	r7, #32
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}
 8013eea:	bf00      	nop
 8013eec:	24002bf8 	.word	0x24002bf8

08013ef0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013ef4:	b0aa      	sub	sp, #168	; 0xa8
 8013ef6:	af00      	add	r7, sp, #0
 8013ef8:	6278      	str	r0, [r7, #36]	; 0x24
 8013efa:	6239      	str	r1, [r7, #32]
 8013efc:	4613      	mov	r3, r2
 8013efe:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d101      	bne.n	8013f0a <f_open+0x1a>
 8013f06:	2309      	movs	r3, #9
 8013f08:	e2e6      	b.n	80144d8 <f_open+0x5e8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013f0a:	7ffb      	ldrb	r3, [r7, #31]
 8013f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f10:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 8013f12:	7ffb      	ldrb	r3, [r7, #31]
 8013f14:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8013f18:	f107 0020 	add.w	r0, r7, #32
 8013f1c:	461a      	mov	r2, r3
 8013f1e:	f7ff fb9f 	bl	8013660 <find_volume>
 8013f22:	4603      	mov	r3, r0
 8013f24:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	if (res == FR_OK) {
 8013f28:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	f040 82c3 	bne.w	80144b8 <f_open+0x5c8>
		dj.obj.fs = fs;
 8013f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f34:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
 8013f36:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8013f3a:	f001 ff3e 	bl	8015dba <ff_memalloc>
 8013f3e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8013f42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d106      	bne.n	8013f58 <f_open+0x68>
 8013f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4c:	2111      	movs	r1, #17
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7fc fbe7 	bl	8010722 <unlock_fs>
 8013f54:	2311      	movs	r3, #17
 8013f56:	e2bf      	b.n	80144d8 <f_open+0x5e8>
 8013f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013f5e:	611a      	str	r2, [r3, #16]
 8013f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013f66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013f6a:	6153      	str	r3, [r2, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8013f6c:	6a3b      	ldr	r3, [r7, #32]
 8013f6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013f72:	4619      	mov	r1, r3
 8013f74:	4610      	mov	r0, r2
 8013f76:	f7ff f9b3 	bl	80132e0 <follow_path>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013f80:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d11a      	bne.n	8013fbe <f_open+0xce>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013f88:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8013f8c:	b25b      	sxtb	r3, r3
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	da03      	bge.n	8013f9a <f_open+0xaa>
				res = FR_INVALID_NAME;
 8013f92:	2306      	movs	r3, #6
 8013f94:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8013f98:	e011      	b.n	8013fbe <f_open+0xce>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013f9a:	7ffb      	ldrb	r3, [r7, #31]
 8013f9c:	f023 0301 	bic.w	r3, r3, #1
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	bf14      	ite	ne
 8013fa4:	2301      	movne	r3, #1
 8013fa6:	2300      	moveq	r3, #0
 8013fa8:	b2db      	uxtb	r3, r3
 8013faa:	461a      	mov	r2, r3
 8013fac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013fb0:	4611      	mov	r1, r2
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7fc fbd0 	bl	8010758 <chk_lock>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013fbe:	7ffb      	ldrb	r3, [r7, #31]
 8013fc0:	f003 031c 	and.w	r3, r3, #28
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	f000 8117 	beq.w	80141f8 <f_open+0x308>
			if (res != FR_OK) {					/* No file, create new */
 8013fca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d017      	beq.n	8014002 <f_open+0x112>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013fd2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8013fd6:	2b04      	cmp	r3, #4
 8013fd8:	d10e      	bne.n	8013ff8 <f_open+0x108>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013fda:	f7fc fc19 	bl	8010810 <enq_lock>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d006      	beq.n	8013ff2 <f_open+0x102>
 8013fe4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7fe fc85 	bl	80128f8 <dir_register>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	e000      	b.n	8013ff4 <f_open+0x104>
 8013ff2:	2312      	movs	r3, #18
 8013ff4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013ff8:	7ffb      	ldrb	r3, [r7, #31]
 8013ffa:	f043 0308 	orr.w	r3, r3, #8
 8013ffe:	77fb      	strb	r3, [r7, #31]
 8014000:	e011      	b.n	8014026 <f_open+0x136>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014002:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014006:	f003 0311 	and.w	r3, r3, #17
 801400a:	2b00      	cmp	r3, #0
 801400c:	d003      	beq.n	8014016 <f_open+0x126>
					res = FR_DENIED;
 801400e:	2307      	movs	r3, #7
 8014010:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8014014:	e007      	b.n	8014026 <f_open+0x136>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014016:	7ffb      	ldrb	r3, [r7, #31]
 8014018:	f003 0304 	and.w	r3, r3, #4
 801401c:	2b00      	cmp	r3, #0
 801401e:	d002      	beq.n	8014026 <f_open+0x136>
 8014020:	2308      	movs	r3, #8
 8014022:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014026:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801402a:	2b00      	cmp	r3, #0
 801402c:	f040 8100 	bne.w	8014230 <f_open+0x340>
 8014030:	7ffb      	ldrb	r3, [r7, #31]
 8014032:	f003 0308 	and.w	r3, r3, #8
 8014036:	2b00      	cmp	r3, #0
 8014038:	f000 80fa 	beq.w	8014230 <f_open+0x340>
				dw = GET_FATTIME();
 801403c:	f7f8 fc4c 	bl	800c8d8 <get_fattime>
 8014040:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8014044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	2b04      	cmp	r3, #4
 801404a:	f040 8085 	bne.w	8014158 <f_open+0x268>
					/* Get current allocation info */
					fp->obj.fs = fs;
 801404e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014052:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8014054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014056:	695b      	ldr	r3, [r3, #20]
 8014058:	3334      	adds	r3, #52	; 0x34
 801405a:	4618      	mov	r0, r3
 801405c:	f7fc f900 	bl	8010260 <ld_dword>
 8014060:	4602      	mov	r2, r0
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8014066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014068:	695b      	ldr	r3, [r3, #20]
 801406a:	3338      	adds	r3, #56	; 0x38
 801406c:	4618      	mov	r0, r3
 801406e:	f7fc f91a 	bl	80102a6 <ld_qword>
 8014072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014074:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8014078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407a:	695b      	ldr	r3, [r3, #20]
 801407c:	3321      	adds	r3, #33	; 0x21
 801407e:	781b      	ldrb	r3, [r3, #0]
 8014080:	f003 0302 	and.w	r3, r3, #2
 8014084:	b2db      	uxtb	r3, r3
 8014086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014088:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 801408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408c:	2200      	movs	r2, #0
 801408e:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8014090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014092:	695b      	ldr	r3, [r3, #20]
 8014094:	3308      	adds	r3, #8
 8014096:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801409a:	4618      	mov	r0, r3
 801409c:	f7fc f9f9 	bl	8010492 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80140a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a2:	695b      	ldr	r3, [r3, #20]
 80140a4:	f103 0214 	add.w	r2, r3, #20
 80140a8:	2300      	movs	r3, #0
 80140aa:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80140ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ae:	695b      	ldr	r3, [r3, #20]
 80140b0:	330c      	adds	r3, #12
 80140b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80140b6:	4618      	mov	r0, r3
 80140b8:	f7fc f9eb 	bl	8010492 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80140bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140be:	695b      	ldr	r3, [r3, #20]
 80140c0:	f103 0215 	add.w	r2, r3, #21
 80140c4:	2300      	movs	r3, #0
 80140c6:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80140c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ca:	695b      	ldr	r3, [r3, #20]
 80140cc:	1d1a      	adds	r2, r3, #4
 80140ce:	2320      	movs	r3, #32
 80140d0:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80140d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d4:	695b      	ldr	r3, [r3, #20]
 80140d6:	3334      	adds	r3, #52	; 0x34
 80140d8:	2100      	movs	r1, #0
 80140da:	4618      	mov	r0, r3
 80140dc:	f7fc f9d9 	bl	8010492 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80140e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e2:	695b      	ldr	r3, [r3, #20]
 80140e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80140e8:	f04f 0200 	mov.w	r2, #0
 80140ec:	f04f 0300 	mov.w	r3, #0
 80140f0:	4608      	mov	r0, r1
 80140f2:	f7fc f9fa 	bl	80104ea <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 80140f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f8:	695b      	ldr	r3, [r3, #20]
 80140fa:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80140fe:	f04f 0200 	mov.w	r2, #0
 8014102:	f04f 0300 	mov.w	r3, #0
 8014106:	4608      	mov	r0, r1
 8014108:	f7fc f9ef 	bl	80104ea <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 801410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801410e:	695b      	ldr	r3, [r3, #20]
 8014110:	f103 0221 	add.w	r2, r3, #33	; 0x21
 8014114:	2301      	movs	r3, #1
 8014116:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 8014118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801411c:	4618      	mov	r0, r3
 801411e:	f7fe f939 	bl	8012394 <store_xdir>
 8014122:	4603      	mov	r3, r0
 8014124:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8014128:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801412c:	2b00      	cmp	r3, #0
 801412e:	d17f      	bne.n	8014230 <f_open+0x340>
 8014130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014132:	689b      	ldr	r3, [r3, #8]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d07b      	beq.n	8014230 <f_open+0x340>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8014138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801413c:	689b      	ldr	r3, [r3, #8]
 801413e:	2200      	movs	r2, #0
 8014140:	4619      	mov	r1, r3
 8014142:	f7fd f949 	bl	80113d8 <remove_chain>
 8014146:	4603      	mov	r3, r0
 8014148:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 801414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801414e:	689b      	ldr	r3, [r3, #8]
 8014150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014152:	3b01      	subs	r3, #1
 8014154:	61d3      	str	r3, [r2, #28]
 8014156:	e06b      	b.n	8014230 <f_open+0x340>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801415a:	330e      	adds	r3, #14
 801415c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014160:	4618      	mov	r0, r3
 8014162:	f7fc f996 	bl	8010492 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014168:	3316      	adds	r3, #22
 801416a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801416e:	4618      	mov	r0, r3
 8014170:	f7fc f98f 	bl	8010492 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014176:	f103 020b 	add.w	r2, r3, #11
 801417a:	2320      	movs	r3, #32
 801417c:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801417e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014182:	4619      	mov	r1, r3
 8014184:	4610      	mov	r0, r2
 8014186:	f7fd fcfe 	bl	8011b86 <ld_clust>
 801418a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801418e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014192:	2200      	movs	r2, #0
 8014194:	4619      	mov	r1, r3
 8014196:	f7fd fd15 	bl	8011bc4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801419c:	331c      	adds	r3, #28
 801419e:	2100      	movs	r1, #0
 80141a0:	4618      	mov	r0, r3
 80141a2:	f7fc f976 	bl	8010492 <st_dword>
					fs->wflag = 1;
 80141a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141a8:	2301      	movs	r3, #1
 80141aa:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80141ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d03d      	beq.n	8014230 <f_open+0x340>
						dw = fs->winsect;
 80141b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80141b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						res = remove_chain(&dj.obj, cl, 0);
 80141bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80141c0:	2200      	movs	r2, #0
 80141c2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7fd f906 	bl	80113d8 <remove_chain>
 80141cc:	4603      	mov	r3, r0
 80141ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						if (res == FR_OK) {
 80141d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d12a      	bne.n	8014230 <f_open+0x340>
							res = move_window(fs, dw);
 80141da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7fc fc69 	bl	8010ab8 <move_window>
 80141e6:	4603      	mov	r3, r0
 80141e8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80141ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80141f2:	3b01      	subs	r3, #1
 80141f4:	61d3      	str	r3, [r2, #28]
 80141f6:	e01b      	b.n	8014230 <f_open+0x340>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80141f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d117      	bne.n	8014230 <f_open+0x340>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014200:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014204:	f003 0310 	and.w	r3, r3, #16
 8014208:	2b00      	cmp	r3, #0
 801420a:	d003      	beq.n	8014214 <f_open+0x324>
					res = FR_NO_FILE;
 801420c:	2304      	movs	r3, #4
 801420e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8014212:	e00d      	b.n	8014230 <f_open+0x340>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014214:	7ffb      	ldrb	r3, [r7, #31]
 8014216:	f003 0302 	and.w	r3, r3, #2
 801421a:	2b00      	cmp	r3, #0
 801421c:	d008      	beq.n	8014230 <f_open+0x340>
 801421e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014222:	f003 0301 	and.w	r3, r3, #1
 8014226:	2b00      	cmp	r3, #0
 8014228:	d002      	beq.n	8014230 <f_open+0x340>
						res = FR_DENIED;
 801422a:	2307      	movs	r3, #7
 801422c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					}
				}
			}
		}
		if (res == FR_OK) {
 8014230:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8014234:	2b00      	cmp	r3, #0
 8014236:	d128      	bne.n	801428a <f_open+0x39a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014238:	7ffb      	ldrb	r3, [r7, #31]
 801423a:	f003 0308 	and.w	r3, r3, #8
 801423e:	2b00      	cmp	r3, #0
 8014240:	d003      	beq.n	801424a <f_open+0x35a>
				mode |= FA_MODIFIED;
 8014242:	7ffb      	ldrb	r3, [r7, #31]
 8014244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014248:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801424c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014250:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8014252:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014256:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014258:	7ffb      	ldrb	r3, [r7, #31]
 801425a:	f023 0301 	bic.w	r3, r3, #1
 801425e:	2b00      	cmp	r3, #0
 8014260:	bf14      	ite	ne
 8014262:	2301      	movne	r3, #1
 8014264:	2300      	moveq	r3, #0
 8014266:	b2db      	uxtb	r3, r3
 8014268:	461a      	mov	r2, r3
 801426a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801426e:	4611      	mov	r1, r2
 8014270:	4618      	mov	r0, r3
 8014272:	f7fc faef 	bl	8010854 <inc_lock>
 8014276:	4602      	mov	r2, r0
 8014278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801427a:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014280:	2b00      	cmp	r3, #0
 8014282:	d102      	bne.n	801428a <f_open+0x39a>
 8014284:	2302      	movs	r3, #2
 8014286:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
		}
#endif

		if (res == FR_OK) {
 801428a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801428e:	2b00      	cmp	r3, #0
 8014290:	f040 810e 	bne.w	80144b0 <f_open+0x5c0>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8014294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014296:	781b      	ldrb	r3, [r3, #0]
 8014298:	2b04      	cmp	r3, #4
 801429a:	d12d      	bne.n	80142f8 <f_open+0x408>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 801429c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a0:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80142a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80142a6:	4613      	mov	r3, r2
 80142a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80142ac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80142b0:	431a      	orrs	r2, r3
 80142b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b4:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80142b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80142b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ba:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80142bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142be:	695b      	ldr	r3, [r3, #20]
 80142c0:	3334      	adds	r3, #52	; 0x34
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7fb ffcc 	bl	8010260 <ld_dword>
 80142c8:	4602      	mov	r2, r0
 80142ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142cc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80142ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d0:	695b      	ldr	r3, [r3, #20]
 80142d2:	3338      	adds	r3, #56	; 0x38
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7fb ffe6 	bl	80102a6 <ld_qword>
 80142da:	4602      	mov	r2, r0
 80142dc:	460b      	mov	r3, r1
 80142de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80142e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80142e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e6:	695b      	ldr	r3, [r3, #20]
 80142e8:	3321      	adds	r3, #33	; 0x21
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	f003 0302 	and.w	r3, r3, #2
 80142f0:	b2da      	uxtb	r2, r3
 80142f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f4:	71da      	strb	r2, [r3, #7]
 80142f6:	e016      	b.n	8014326 <f_open+0x436>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80142f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142fc:	4619      	mov	r1, r3
 80142fe:	4610      	mov	r0, r2
 8014300:	f7fd fc41 	bl	8011b86 <ld_clust>
 8014304:	4602      	mov	r2, r0
 8014306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014308:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801430a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801430c:	331c      	adds	r3, #28
 801430e:	4618      	mov	r0, r3
 8014310:	f7fb ffa6 	bl	8010260 <ld_dword>
 8014314:	4603      	mov	r3, r0
 8014316:	2200      	movs	r2, #0
 8014318:	613b      	str	r3, [r7, #16]
 801431a:	617a      	str	r2, [r7, #20]
 801431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8014322:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014328:	2200      	movs	r2, #0
 801432a:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801432c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014330:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014334:	88da      	ldrh	r2, [r3, #6]
 8014336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014338:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433c:	7ffa      	ldrb	r2, [r7, #31]
 801433e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8014342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014344:	2200      	movs	r2, #0
 8014346:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 801434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434c:	2200      	movs	r2, #0
 801434e:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014352:	f04f 0200 	mov.w	r2, #0
 8014356:	f04f 0300 	mov.w	r3, #0
 801435a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014360:	3354      	adds	r3, #84	; 0x54
 8014362:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014366:	2100      	movs	r1, #0
 8014368:	4618      	mov	r0, r3
 801436a:	f7fc f967 	bl	801063c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801436e:	7ffb      	ldrb	r3, [r7, #31]
 8014370:	f003 0320 	and.w	r3, r3, #32
 8014374:	2b00      	cmp	r3, #0
 8014376:	f000 809b 	beq.w	80144b0 <f_open+0x5c0>
 801437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014380:	4313      	orrs	r3, r2
 8014382:	f000 8095 	beq.w	80144b0 <f_open+0x5c0>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014388:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801438c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801438e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014394:	895b      	ldrh	r3, [r3, #10]
 8014396:	461a      	mov	r2, r3
 8014398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801439a:	899b      	ldrh	r3, [r3, #12]
 801439c:	fb02 f303 	mul.w	r3, r2, r3
 80143a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80143a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a6:	689b      	ldr	r3, [r3, #8]
 80143a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80143ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80143b2:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 80143b6:	e023      	b.n	8014400 <f_open+0x510>
					clst = get_fat(&fp->obj, clst);
 80143b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ba:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80143be:	4618      	mov	r0, r3
 80143c0:	f7fc fc38 	bl	8010c34 <get_fat>
 80143c4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
					if (clst <= 1) res = FR_INT_ERR;
 80143c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	d802      	bhi.n	80143d6 <f_open+0x4e6>
 80143d0:	2302      	movs	r3, #2
 80143d2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80143d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80143da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143de:	d102      	bne.n	80143e6 <f_open+0x4f6>
 80143e0:	2301      	movs	r3, #1
 80143e2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80143e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80143ea:	2200      	movs	r2, #0
 80143ec:	4698      	mov	r8, r3
 80143ee:	4691      	mov	r9, r2
 80143f0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80143f4:	ebb2 0a08 	subs.w	sl, r2, r8
 80143f8:	eb63 0b09 	sbc.w	fp, r3, r9
 80143fc:	e9c7 ab26 	strd	sl, fp, [r7, #152]	; 0x98
 8014400:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8014404:	2b00      	cmp	r3, #0
 8014406:	d10a      	bne.n	801441e <f_open+0x52e>
 8014408:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801440c:	2200      	movs	r2, #0
 801440e:	461c      	mov	r4, r3
 8014410:	4615      	mov	r5, r2
 8014412:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8014416:	4294      	cmp	r4, r2
 8014418:	eb75 0303 	sbcs.w	r3, r5, r3
 801441c:	d3cc      	bcc.n	80143b8 <f_open+0x4c8>
				}
				fp->clust = clst;
 801441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014420:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8014424:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014426:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801442a:	2b00      	cmp	r3, #0
 801442c:	d140      	bne.n	80144b0 <f_open+0x5c0>
 801442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014430:	899b      	ldrh	r3, [r3, #12]
 8014432:	b29b      	uxth	r3, r3
 8014434:	2200      	movs	r2, #0
 8014436:	60bb      	str	r3, [r7, #8]
 8014438:	60fa      	str	r2, [r7, #12]
 801443a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801443e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014442:	f7eb ffcd 	bl	80003e0 <__aeabi_uldivmod>
 8014446:	4313      	orrs	r3, r2
 8014448:	d032      	beq.n	80144b0 <f_open+0x5c0>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801444c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8014450:	4618      	mov	r0, r3
 8014452:	f7fc fbcf 	bl	8010bf4 <clust2sect>
 8014456:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 801445a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801445e:	2b00      	cmp	r3, #0
 8014460:	d103      	bne.n	801446a <f_open+0x57a>
						res = FR_INT_ERR;
 8014462:	2302      	movs	r3, #2
 8014464:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8014468:	e022      	b.n	80144b0 <f_open+0x5c0>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801446c:	899b      	ldrh	r3, [r3, #12]
 801446e:	b29b      	uxth	r3, r3
 8014470:	2200      	movs	r2, #0
 8014472:	603b      	str	r3, [r7, #0]
 8014474:	607a      	str	r2, [r7, #4]
 8014476:	e9d7 2300 	ldrd	r2, r3, [r7]
 801447a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801447e:	f7eb ffaf 	bl	80003e0 <__aeabi_uldivmod>
 8014482:	4602      	mov	r2, r0
 8014484:	460b      	mov	r3, r1
 8014486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801448a:	441a      	add	r2, r3
 801448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801448e:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014492:	7858      	ldrb	r0, [r3, #1]
 8014494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014496:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801449c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801449e:	2301      	movs	r3, #1
 80144a0:	f7fb fe68 	bl	8010174 <disk_read>
 80144a4:	4603      	mov	r3, r0
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d002      	beq.n	80144b0 <f_open+0x5c0>
 80144aa:	2301      	movs	r3, #1
 80144ac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
#endif
		}

		FREE_NAMBUF();
 80144b0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80144b4:	f001 fc8d 	bl	8015dd2 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80144b8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d002      	beq.n	80144c6 <f_open+0x5d6>
 80144c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c2:	2200      	movs	r2, #0
 80144c4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80144c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c8:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80144cc:	4611      	mov	r1, r2
 80144ce:	4618      	mov	r0, r3
 80144d0:	f7fc f927 	bl	8010722 <unlock_fs>
 80144d4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 80144d8:	4618      	mov	r0, r3
 80144da:	37a8      	adds	r7, #168	; 0xa8
 80144dc:	46bd      	mov	sp, r7
 80144de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080144e2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80144e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80144e6:	b098      	sub	sp, #96	; 0x60
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 80144ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80144ee:	627a      	str	r2, [r7, #36]	; 0x24
 80144f0:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80144f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144f4:	64fb      	str	r3, [r7, #76]	; 0x4c


	*br = 0;	/* Clear read byte counter */
 80144f6:	6a3a      	ldr	r2, [r7, #32]
 80144f8:	2300      	movs	r3, #0
 80144fa:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80144fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014502:	4619      	mov	r1, r3
 8014504:	4610      	mov	r0, r2
 8014506:	f7ff fc47 	bl	8013d98 <validate>
 801450a:	4603      	mov	r3, r0
 801450c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014514:	2b00      	cmp	r3, #0
 8014516:	d108      	bne.n	801452a <f_read+0x48>
 8014518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801451a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801451e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014522:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014526:	2b00      	cmp	r3, #0
 8014528:	d009      	beq.n	801453e <f_read+0x5c>
 801452a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801452c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014530:	4611      	mov	r1, r2
 8014532:	4618      	mov	r0, r3
 8014534:	f7fc f8f5 	bl	8010722 <unlock_fs>
 8014538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801453c:	e193      	b.n	8014866 <f_read+0x384>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014540:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014544:	f003 0301 	and.w	r3, r3, #1
 8014548:	2b00      	cmp	r3, #0
 801454a:	d106      	bne.n	801455a <f_read+0x78>
 801454c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801454e:	2107      	movs	r1, #7
 8014550:	4618      	mov	r0, r3
 8014552:	f7fc f8e6 	bl	8010722 <unlock_fs>
 8014556:	2307      	movs	r3, #7
 8014558:	e185      	b.n	8014866 <f_read+0x384>
	remain = fp->obj.objsize - fp->fptr;
 801455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801455c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8014560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014562:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014566:	ebb0 0802 	subs.w	r8, r0, r2
 801456a:	eb61 0903 	sbc.w	r9, r1, r3
 801456e:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014574:	2200      	movs	r2, #0
 8014576:	461c      	mov	r4, r3
 8014578:	4615      	mov	r5, r2
 801457a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801457e:	42a2      	cmp	r2, r4
 8014580:	41ab      	sbcs	r3, r5
 8014582:	f080 8166 	bcs.w	8014852 <f_read+0x370>
 8014586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014588:	627b      	str	r3, [r7, #36]	; 0x24

	for ( ;  btr;								/* Repeat until all data read */
 801458a:	e162      	b.n	8014852 <f_read+0x370>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801458e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014594:	899b      	ldrh	r3, [r3, #12]
 8014596:	b29b      	uxth	r3, r3
 8014598:	2200      	movs	r2, #0
 801459a:	61bb      	str	r3, [r7, #24]
 801459c:	61fa      	str	r2, [r7, #28]
 801459e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80145a2:	f7eb ff1d 	bl	80003e0 <__aeabi_uldivmod>
 80145a6:	4313      	orrs	r3, r2
 80145a8:	f040 8107 	bne.w	80147ba <f_read+0x2d8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80145ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ae:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80145b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145b4:	899b      	ldrh	r3, [r3, #12]
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	2200      	movs	r2, #0
 80145ba:	613b      	str	r3, [r7, #16]
 80145bc:	617a      	str	r2, [r7, #20]
 80145be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80145c2:	f7eb ff0d 	bl	80003e0 <__aeabi_uldivmod>
 80145c6:	4602      	mov	r2, r0
 80145c8:	460b      	mov	r3, r1
 80145ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145cc:	895b      	ldrh	r3, [r3, #10]
 80145ce:	3b01      	subs	r3, #1
 80145d0:	4013      	ands	r3, r2
 80145d2:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 80145d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d13c      	bne.n	8014654 <f_read+0x172>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80145da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80145e0:	4313      	orrs	r3, r2
 80145e2:	d103      	bne.n	80145ec <f_read+0x10a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80145e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e6:	689b      	ldr	r3, [r3, #8]
 80145e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80145ea:	e013      	b.n	8014614 <f_read+0x132>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80145ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d007      	beq.n	8014604 <f_read+0x122>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80145f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80145fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145fc:	f7fd f8a1 	bl	8011742 <clmt_clust>
 8014600:	65b8      	str	r0, [r7, #88]	; 0x58
 8014602:	e007      	b.n	8014614 <f_read+0x132>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801460a:	4619      	mov	r1, r3
 801460c:	4610      	mov	r0, r2
 801460e:	f7fc fb11 	bl	8010c34 <get_fat>
 8014612:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014616:	2b01      	cmp	r3, #1
 8014618:	d80a      	bhi.n	8014630 <f_read+0x14e>
 801461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801461c:	2202      	movs	r2, #2
 801461e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014624:	2102      	movs	r1, #2
 8014626:	4618      	mov	r0, r3
 8014628:	f7fc f87b 	bl	8010722 <unlock_fs>
 801462c:	2302      	movs	r3, #2
 801462e:	e11a      	b.n	8014866 <f_read+0x384>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014636:	d10a      	bne.n	801464e <f_read+0x16c>
 8014638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801463a:	2201      	movs	r2, #1
 801463c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014642:	2101      	movs	r1, #1
 8014644:	4618      	mov	r0, r3
 8014646:	f7fc f86c 	bl	8010722 <unlock_fs>
 801464a:	2301      	movs	r3, #1
 801464c:	e10b      	b.n	8014866 <f_read+0x384>
				fp->clust = clst;				/* Update current cluster */
 801464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014652:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801465a:	4619      	mov	r1, r3
 801465c:	4610      	mov	r0, r2
 801465e:	f7fc fac9 	bl	8010bf4 <clust2sect>
 8014662:	63b8      	str	r0, [r7, #56]	; 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014666:	2b00      	cmp	r3, #0
 8014668:	d10a      	bne.n	8014680 <f_read+0x19e>
 801466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801466c:	2202      	movs	r2, #2
 801466e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014674:	2102      	movs	r1, #2
 8014676:	4618      	mov	r0, r3
 8014678:	f7fc f853 	bl	8010722 <unlock_fs>
 801467c:	2302      	movs	r3, #2
 801467e:	e0f2      	b.n	8014866 <f_read+0x384>
			sect += csect;
 8014680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014684:	4413      	add	r3, r2
 8014686:	63bb      	str	r3, [r7, #56]	; 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801468a:	899b      	ldrh	r3, [r3, #12]
 801468c:	461a      	mov	r2, r3
 801468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014690:	fbb3 f3f2 	udiv	r3, r3, r2
 8014694:	653b      	str	r3, [r7, #80]	; 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014698:	2b00      	cmp	r3, #0
 801469a:	d048      	beq.n	801472e <f_read+0x24c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801469c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801469e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146a0:	4413      	add	r3, r2
 80146a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146a4:	8952      	ldrh	r2, [r2, #10]
 80146a6:	4293      	cmp	r3, r2
 80146a8:	d905      	bls.n	80146b6 <f_read+0x1d4>
					cc = fs->csize - csect;
 80146aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146ac:	895b      	ldrh	r3, [r3, #10]
 80146ae:	461a      	mov	r2, r3
 80146b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146b2:	1ad3      	subs	r3, r2, r3
 80146b4:	653b      	str	r3, [r7, #80]	; 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80146b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146b8:	7858      	ldrb	r0, [r3, #1]
 80146ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80146be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80146c0:	f7fb fd58 	bl	8010174 <disk_read>
 80146c4:	4603      	mov	r3, r0
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d00a      	beq.n	80146e0 <f_read+0x1fe>
 80146ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146cc:	2201      	movs	r2, #1
 80146ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80146d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146d4:	2101      	movs	r1, #1
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7fc f823 	bl	8010722 <unlock_fs>
 80146dc:	2301      	movs	r3, #1
 80146de:	e0c2      	b.n	8014866 <f_read+0x384>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80146e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80146e6:	b25b      	sxtb	r3, r3
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	da18      	bge.n	801471e <f_read+0x23c>
 80146ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80146f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f2:	1ad3      	subs	r3, r2, r3
 80146f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80146f6:	429a      	cmp	r2, r3
 80146f8:	d911      	bls.n	801471e <f_read+0x23c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80146fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80146fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014700:	1ad3      	subs	r3, r2, r3
 8014702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014704:	8992      	ldrh	r2, [r2, #12]
 8014706:	fb02 f303 	mul.w	r3, r2, r3
 801470a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801470c:	18d0      	adds	r0, r2, r3
 801470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014710:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014716:	899b      	ldrh	r3, [r3, #12]
 8014718:	461a      	mov	r2, r3
 801471a:	f7fb ff6e 	bl	80105fa <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014720:	899b      	ldrh	r3, [r3, #12]
 8014722:	461a      	mov	r2, r3
 8014724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014726:	fb02 f303 	mul.w	r3, r2, r3
 801472a:	657b      	str	r3, [r7, #84]	; 0x54
				continue;
 801472c:	e071      	b.n	8014812 <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014734:	429a      	cmp	r2, r3
 8014736:	d03d      	beq.n	80147b4 <f_read+0x2d2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801473a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801473e:	b25b      	sxtb	r3, r3
 8014740:	2b00      	cmp	r3, #0
 8014742:	da20      	bge.n	8014786 <f_read+0x2a4>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014746:	7858      	ldrb	r0, [r3, #1]
 8014748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801474a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014752:	2301      	movs	r3, #1
 8014754:	f7fb fd2e 	bl	80101b4 <disk_write>
 8014758:	4603      	mov	r3, r0
 801475a:	2b00      	cmp	r3, #0
 801475c:	d00a      	beq.n	8014774 <f_read+0x292>
 801475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014760:	2201      	movs	r2, #1
 8014762:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014768:	2101      	movs	r1, #1
 801476a:	4618      	mov	r0, r3
 801476c:	f7fb ffd9 	bl	8010722 <unlock_fs>
 8014770:	2301      	movs	r3, #1
 8014772:	e078      	b.n	8014866 <f_read+0x384>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801477a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801477e:	b2da      	uxtb	r2, r3
 8014780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014788:	7858      	ldrb	r0, [r3, #1]
 801478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801478c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014790:	2301      	movs	r3, #1
 8014792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014794:	f7fb fcee 	bl	8010174 <disk_read>
 8014798:	4603      	mov	r3, r0
 801479a:	2b00      	cmp	r3, #0
 801479c:	d00a      	beq.n	80147b4 <f_read+0x2d2>
 801479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a0:	2201      	movs	r2, #1
 80147a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80147a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147a8:	2101      	movs	r1, #1
 80147aa:	4618      	mov	r0, r3
 80147ac:	f7fb ffb9 	bl	8010722 <unlock_fs>
 80147b0:	2301      	movs	r3, #1
 80147b2:	e058      	b.n	8014866 <f_read+0x384>
			}
#endif
			fp->sect = sect;
 80147b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147b8:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80147ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147bc:	899b      	ldrh	r3, [r3, #12]
 80147be:	4618      	mov	r0, r3
 80147c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80147c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147c8:	899b      	ldrh	r3, [r3, #12]
 80147ca:	fbb2 f1f3 	udiv	r1, r2, r3
 80147ce:	fb01 f303 	mul.w	r3, r1, r3
 80147d2:	1ad3      	subs	r3, r2, r3
 80147d4:	1ac3      	subs	r3, r0, r3
 80147d6:	657b      	str	r3, [r7, #84]	; 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80147d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80147da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147dc:	429a      	cmp	r2, r3
 80147de:	d901      	bls.n	80147e4 <f_read+0x302>
 80147e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e2:	657b      	str	r3, [r7, #84]	; 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80147e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147e6:	f103 0454 	add.w	r4, r3, #84	; 0x54
 80147ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80147f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147f2:	899b      	ldrh	r3, [r3, #12]
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	2200      	movs	r2, #0
 80147f8:	60bb      	str	r3, [r7, #8]
 80147fa:	60fa      	str	r2, [r7, #12]
 80147fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014800:	f7eb fdee 	bl	80003e0 <__aeabi_uldivmod>
 8014804:	4613      	mov	r3, r2
 8014806:	4423      	add	r3, r4
 8014808:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801480a:	4619      	mov	r1, r3
 801480c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801480e:	f7fb fef4 	bl	80105fa <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014816:	4413      	add	r3, r2
 8014818:	64fb      	str	r3, [r7, #76]	; 0x4c
 801481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801481c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014820:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014822:	2000      	movs	r0, #0
 8014824:	468a      	mov	sl, r1
 8014826:	4683      	mov	fp, r0
 8014828:	eb12 010a 	adds.w	r1, r2, sl
 801482c:	6039      	str	r1, [r7, #0]
 801482e:	eb43 030b 	adc.w	r3, r3, fp
 8014832:	607b      	str	r3, [r7, #4]
 8014834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014836:	e9d7 1200 	ldrd	r1, r2, [r7]
 801483a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 801483e:	6a3b      	ldr	r3, [r7, #32]
 8014840:	681a      	ldr	r2, [r3, #0]
 8014842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014844:	441a      	add	r2, r3
 8014846:	6a3b      	ldr	r3, [r7, #32]
 8014848:	601a      	str	r2, [r3, #0]
 801484a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801484c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801484e:	1ad3      	subs	r3, r2, r3
 8014850:	627b      	str	r3, [r7, #36]	; 0x24
	for ( ;  btr;								/* Repeat until all data read */
 8014852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014854:	2b00      	cmp	r3, #0
 8014856:	f47f ae99 	bne.w	801458c <f_read+0xaa>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801485c:	2100      	movs	r1, #0
 801485e:	4618      	mov	r0, r3
 8014860:	f7fb ff5f 	bl	8010722 <unlock_fs>
 8014864:	2300      	movs	r3, #0
}
 8014866:	4618      	mov	r0, r3
 8014868:	3760      	adds	r7, #96	; 0x60
 801486a:	46bd      	mov	sp, r7
 801486c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014870 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014874:	b091      	sub	sp, #68	; 0x44
 8014876:	af00      	add	r7, sp, #0
 8014878:	61f8      	str	r0, [r7, #28]
 801487a:	61b9      	str	r1, [r7, #24]
 801487c:	617a      	str	r2, [r7, #20]
 801487e:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014880:	69bb      	ldr	r3, [r7, #24]
 8014882:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 8014884:	693b      	ldr	r3, [r7, #16]
 8014886:	2200      	movs	r2, #0
 8014888:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801488a:	69fb      	ldr	r3, [r7, #28]
 801488c:	f107 0220 	add.w	r2, r7, #32
 8014890:	4611      	mov	r1, r2
 8014892:	4618      	mov	r0, r3
 8014894:	f7ff fa80 	bl	8013d98 <validate>
 8014898:	4603      	mov	r3, r0
 801489a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801489e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d108      	bne.n	80148b8 <f_write+0x48>
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80148ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80148b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d009      	beq.n	80148cc <f_write+0x5c>
 80148b8:	6a3b      	ldr	r3, [r7, #32]
 80148ba:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80148be:	4611      	mov	r1, r2
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7fb ff2e 	bl	8010722 <unlock_fs>
 80148c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80148ca:	e1d2      	b.n	8014c72 <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80148cc:	69fb      	ldr	r3, [r7, #28]
 80148ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80148d2:	f003 0302 	and.w	r3, r3, #2
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d106      	bne.n	80148e8 <f_write+0x78>
 80148da:	6a3b      	ldr	r3, [r7, #32]
 80148dc:	2107      	movs	r1, #7
 80148de:	4618      	mov	r0, r3
 80148e0:	f7fb ff1f 	bl	8010722 <unlock_fs>
 80148e4:	2307      	movs	r3, #7
 80148e6:	e1c4      	b.n	8014c72 <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80148e8:	6a3b      	ldr	r3, [r7, #32]
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	2b04      	cmp	r3, #4
 80148ee:	f000 81ab 	beq.w	8014c48 <f_write+0x3d8>
 80148f2:	69fb      	ldr	r3, [r7, #28]
 80148f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80148f8:	697b      	ldr	r3, [r7, #20]
 80148fa:	18d1      	adds	r1, r2, r3
 80148fc:	69fb      	ldr	r3, [r7, #28]
 80148fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014902:	4613      	mov	r3, r2
 8014904:	4299      	cmp	r1, r3
 8014906:	f080 819f 	bcs.w	8014c48 <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801490a:	69fb      	ldr	r3, [r7, #28]
 801490c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014910:	4613      	mov	r3, r2
 8014912:	43db      	mvns	r3, r3
 8014914:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014916:	e197      	b.n	8014c48 <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014918:	69fb      	ldr	r3, [r7, #28]
 801491a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801491e:	6a3b      	ldr	r3, [r7, #32]
 8014920:	899b      	ldrh	r3, [r3, #12]
 8014922:	b29b      	uxth	r3, r3
 8014924:	2200      	movs	r2, #0
 8014926:	461d      	mov	r5, r3
 8014928:	4616      	mov	r6, r2
 801492a:	462a      	mov	r2, r5
 801492c:	4633      	mov	r3, r6
 801492e:	f7eb fd57 	bl	80003e0 <__aeabi_uldivmod>
 8014932:	4313      	orrs	r3, r2
 8014934:	f040 8128 	bne.w	8014b88 <f_write+0x318>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014938:	69fb      	ldr	r3, [r7, #28]
 801493a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801493e:	6a3b      	ldr	r3, [r7, #32]
 8014940:	899b      	ldrh	r3, [r3, #12]
 8014942:	b29b      	uxth	r3, r3
 8014944:	2200      	movs	r2, #0
 8014946:	60bb      	str	r3, [r7, #8]
 8014948:	60fa      	str	r2, [r7, #12]
 801494a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801494e:	f7eb fd47 	bl	80003e0 <__aeabi_uldivmod>
 8014952:	4602      	mov	r2, r0
 8014954:	460b      	mov	r3, r1
 8014956:	6a3b      	ldr	r3, [r7, #32]
 8014958:	895b      	ldrh	r3, [r3, #10]
 801495a:	3b01      	subs	r3, #1
 801495c:	4013      	ands	r3, r2
 801495e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 8014960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014962:	2b00      	cmp	r3, #0
 8014964:	d150      	bne.n	8014a08 <f_write+0x198>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014966:	69fb      	ldr	r3, [r7, #28]
 8014968:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801496c:	4313      	orrs	r3, r2
 801496e:	d10c      	bne.n	801498a <f_write+0x11a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014970:	69fb      	ldr	r3, [r7, #28]
 8014972:	689b      	ldr	r3, [r3, #8]
 8014974:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 8014976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014978:	2b00      	cmp	r3, #0
 801497a:	d11a      	bne.n	80149b2 <f_write+0x142>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801497c:	69fb      	ldr	r3, [r7, #28]
 801497e:	2100      	movs	r1, #0
 8014980:	4618      	mov	r0, r3
 8014982:	f7fc fddd 	bl	8011540 <create_chain>
 8014986:	63b8      	str	r0, [r7, #56]	; 0x38
 8014988:	e013      	b.n	80149b2 <f_write+0x142>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801498a:	69fb      	ldr	r3, [r7, #28]
 801498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801498e:	2b00      	cmp	r3, #0
 8014990:	d007      	beq.n	80149a2 <f_write+0x132>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014992:	69fb      	ldr	r3, [r7, #28]
 8014994:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014998:	69f8      	ldr	r0, [r7, #28]
 801499a:	f7fc fed2 	bl	8011742 <clmt_clust>
 801499e:	63b8      	str	r0, [r7, #56]	; 0x38
 80149a0:	e007      	b.n	80149b2 <f_write+0x142>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80149a2:	69fa      	ldr	r2, [r7, #28]
 80149a4:	69fb      	ldr	r3, [r7, #28]
 80149a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149a8:	4619      	mov	r1, r3
 80149aa:	4610      	mov	r0, r2
 80149ac:	f7fc fdc8 	bl	8011540 <create_chain>
 80149b0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80149b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	f000 814c 	beq.w	8014c52 <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80149ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149bc:	2b01      	cmp	r3, #1
 80149be:	d10a      	bne.n	80149d6 <f_write+0x166>
 80149c0:	69fb      	ldr	r3, [r7, #28]
 80149c2:	2202      	movs	r2, #2
 80149c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80149c8:	6a3b      	ldr	r3, [r7, #32]
 80149ca:	2102      	movs	r1, #2
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7fb fea8 	bl	8010722 <unlock_fs>
 80149d2:	2302      	movs	r3, #2
 80149d4:	e14d      	b.n	8014c72 <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80149d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80149dc:	d10a      	bne.n	80149f4 <f_write+0x184>
 80149de:	69fb      	ldr	r3, [r7, #28]
 80149e0:	2201      	movs	r2, #1
 80149e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80149e6:	6a3b      	ldr	r3, [r7, #32]
 80149e8:	2101      	movs	r1, #1
 80149ea:	4618      	mov	r0, r3
 80149ec:	f7fb fe99 	bl	8010722 <unlock_fs>
 80149f0:	2301      	movs	r3, #1
 80149f2:	e13e      	b.n	8014c72 <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 80149f4:	69fb      	ldr	r3, [r7, #28]
 80149f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149f8:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80149fa:	69fb      	ldr	r3, [r7, #28]
 80149fc:	689b      	ldr	r3, [r3, #8]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d102      	bne.n	8014a08 <f_write+0x198>
 8014a02:	69fb      	ldr	r3, [r7, #28]
 8014a04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a06:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014a08:	69fb      	ldr	r3, [r7, #28]
 8014a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a0e:	b25b      	sxtb	r3, r3
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	da20      	bge.n	8014a56 <f_write+0x1e6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014a14:	6a3b      	ldr	r3, [r7, #32]
 8014a16:	7858      	ldrb	r0, [r3, #1]
 8014a18:	69fb      	ldr	r3, [r7, #28]
 8014a1a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014a1e:	69fb      	ldr	r3, [r7, #28]
 8014a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014a22:	2301      	movs	r3, #1
 8014a24:	f7fb fbc6 	bl	80101b4 <disk_write>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d00a      	beq.n	8014a44 <f_write+0x1d4>
 8014a2e:	69fb      	ldr	r3, [r7, #28]
 8014a30:	2201      	movs	r2, #1
 8014a32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014a36:	6a3b      	ldr	r3, [r7, #32]
 8014a38:	2101      	movs	r1, #1
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f7fb fe71 	bl	8010722 <unlock_fs>
 8014a40:	2301      	movs	r3, #1
 8014a42:	e116      	b.n	8014c72 <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014a44:	69fb      	ldr	r3, [r7, #28]
 8014a46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a4e:	b2da      	uxtb	r2, r3
 8014a50:	69fb      	ldr	r3, [r7, #28]
 8014a52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014a56:	6a3a      	ldr	r2, [r7, #32]
 8014a58:	69fb      	ldr	r3, [r7, #28]
 8014a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	4610      	mov	r0, r2
 8014a60:	f7fc f8c8 	bl	8010bf4 <clust2sect>
 8014a64:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d10a      	bne.n	8014a82 <f_write+0x212>
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	2202      	movs	r2, #2
 8014a70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014a74:	6a3b      	ldr	r3, [r7, #32]
 8014a76:	2102      	movs	r1, #2
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f7fb fe52 	bl	8010722 <unlock_fs>
 8014a7e:	2302      	movs	r3, #2
 8014a80:	e0f7      	b.n	8014c72 <f_write+0x402>
			sect += csect;
 8014a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a86:	4413      	add	r3, r2
 8014a88:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014a8a:	6a3b      	ldr	r3, [r7, #32]
 8014a8c:	899b      	ldrh	r3, [r3, #12]
 8014a8e:	461a      	mov	r2, r3
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a96:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d04b      	beq.n	8014b36 <f_write+0x2c6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa2:	4413      	add	r3, r2
 8014aa4:	6a3a      	ldr	r2, [r7, #32]
 8014aa6:	8952      	ldrh	r2, [r2, #10]
 8014aa8:	4293      	cmp	r3, r2
 8014aaa:	d905      	bls.n	8014ab8 <f_write+0x248>
					cc = fs->csize - csect;
 8014aac:	6a3b      	ldr	r3, [r7, #32]
 8014aae:	895b      	ldrh	r3, [r3, #10]
 8014ab0:	461a      	mov	r2, r3
 8014ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014ab8:	6a3b      	ldr	r3, [r7, #32]
 8014aba:	7858      	ldrb	r0, [r3, #1]
 8014abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014ac2:	f7fb fb77 	bl	80101b4 <disk_write>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d00a      	beq.n	8014ae2 <f_write+0x272>
 8014acc:	69fb      	ldr	r3, [r7, #28]
 8014ace:	2201      	movs	r2, #1
 8014ad0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014ad4:	6a3b      	ldr	r3, [r7, #32]
 8014ad6:	2101      	movs	r1, #1
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7fb fe22 	bl	8010722 <unlock_fs>
 8014ade:	2301      	movs	r3, #1
 8014ae0:	e0c7      	b.n	8014c72 <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014ae2:	69fb      	ldr	r3, [r7, #28]
 8014ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae8:	1ad3      	subs	r3, r2, r3
 8014aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014aec:	429a      	cmp	r2, r3
 8014aee:	d91a      	bls.n	8014b26 <f_write+0x2b6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014af0:	69fb      	ldr	r3, [r7, #28]
 8014af2:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8014af6:	69fb      	ldr	r3, [r7, #28]
 8014af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afc:	1ad3      	subs	r3, r2, r3
 8014afe:	6a3a      	ldr	r2, [r7, #32]
 8014b00:	8992      	ldrh	r2, [r2, #12]
 8014b02:	fb02 f303 	mul.w	r3, r2, r3
 8014b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b08:	18d1      	adds	r1, r2, r3
 8014b0a:	6a3b      	ldr	r3, [r7, #32]
 8014b0c:	899b      	ldrh	r3, [r3, #12]
 8014b0e:	461a      	mov	r2, r3
 8014b10:	f7fb fd73 	bl	80105fa <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014b14:	69fb      	ldr	r3, [r7, #28]
 8014b16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b1e:	b2da      	uxtb	r2, r3
 8014b20:	69fb      	ldr	r3, [r7, #28]
 8014b22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014b26:	6a3b      	ldr	r3, [r7, #32]
 8014b28:	899b      	ldrh	r3, [r3, #12]
 8014b2a:	461a      	mov	r2, r3
 8014b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b2e:	fb02 f303 	mul.w	r3, r2, r3
 8014b32:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 8014b34:	e05d      	b.n	8014bf2 <f_write+0x382>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b3c:	429a      	cmp	r2, r3
 8014b3e:	d020      	beq.n	8014b82 <f_write+0x312>
				fp->fptr < fp->obj.objsize &&
 8014b40:	69fb      	ldr	r3, [r7, #28]
 8014b42:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014b46:	69fb      	ldr	r3, [r7, #28]
 8014b48:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014b4c:	4290      	cmp	r0, r2
 8014b4e:	eb71 0303 	sbcs.w	r3, r1, r3
 8014b52:	d216      	bcs.n	8014b82 <f_write+0x312>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014b54:	6a3b      	ldr	r3, [r7, #32]
 8014b56:	7858      	ldrb	r0, [r3, #1]
 8014b58:	69fb      	ldr	r3, [r7, #28]
 8014b5a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014b5e:	2301      	movs	r3, #1
 8014b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b62:	f7fb fb07 	bl	8010174 <disk_read>
 8014b66:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d00a      	beq.n	8014b82 <f_write+0x312>
					ABORT(fs, FR_DISK_ERR);
 8014b6c:	69fb      	ldr	r3, [r7, #28]
 8014b6e:	2201      	movs	r2, #1
 8014b70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014b74:	6a3b      	ldr	r3, [r7, #32]
 8014b76:	2101      	movs	r1, #1
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7fb fdd2 	bl	8010722 <unlock_fs>
 8014b7e:	2301      	movs	r3, #1
 8014b80:	e077      	b.n	8014c72 <f_write+0x402>
			}
#endif
			fp->sect = sect;
 8014b82:	69fb      	ldr	r3, [r7, #28]
 8014b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014b88:	6a3b      	ldr	r3, [r7, #32]
 8014b8a:	899b      	ldrh	r3, [r3, #12]
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	69fb      	ldr	r3, [r7, #28]
 8014b90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014b94:	6a3b      	ldr	r3, [r7, #32]
 8014b96:	899b      	ldrh	r3, [r3, #12]
 8014b98:	fbb2 f1f3 	udiv	r1, r2, r3
 8014b9c:	fb01 f303 	mul.w	r3, r1, r3
 8014ba0:	1ad3      	subs	r3, r2, r3
 8014ba2:	1ac3      	subs	r3, r0, r3
 8014ba4:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	429a      	cmp	r2, r3
 8014bac:	d901      	bls.n	8014bb2 <f_write+0x342>
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8014bb8:	69fb      	ldr	r3, [r7, #28]
 8014bba:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014bbe:	6a3b      	ldr	r3, [r7, #32]
 8014bc0:	899b      	ldrh	r3, [r3, #12]
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	603b      	str	r3, [r7, #0]
 8014bc8:	607a      	str	r2, [r7, #4]
 8014bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014bce:	f7eb fc07 	bl	80003e0 <__aeabi_uldivmod>
 8014bd2:	4613      	mov	r3, r2
 8014bd4:	4423      	add	r3, r4
 8014bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7fb fd0d 	bl	80105fa <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014be0:	69fb      	ldr	r3, [r7, #28]
 8014be2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014be6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014bea:	b2da      	uxtb	r2, r3
 8014bec:	69fb      	ldr	r3, [r7, #28]
 8014bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bf6:	4413      	add	r3, r2
 8014bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014bfa:	69fb      	ldr	r3, [r7, #28]
 8014bfc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014c00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014c02:	2000      	movs	r0, #0
 8014c04:	4688      	mov	r8, r1
 8014c06:	4681      	mov	r9, r0
 8014c08:	eb12 0a08 	adds.w	sl, r2, r8
 8014c0c:	eb43 0b09 	adc.w	fp, r3, r9
 8014c10:	69fb      	ldr	r3, [r7, #28]
 8014c12:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8014c16:	69fb      	ldr	r3, [r7, #28]
 8014c18:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8014c1c:	69fb      	ldr	r3, [r7, #28]
 8014c1e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014c22:	4290      	cmp	r0, r2
 8014c24:	eb71 0403 	sbcs.w	r4, r1, r3
 8014c28:	d201      	bcs.n	8014c2e <f_write+0x3be>
 8014c2a:	4610      	mov	r0, r2
 8014c2c:	4619      	mov	r1, r3
 8014c2e:	69fb      	ldr	r3, [r7, #28]
 8014c30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014c34:	693b      	ldr	r3, [r7, #16]
 8014c36:	681a      	ldr	r2, [r3, #0]
 8014c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c3a:	441a      	add	r2, r3
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	601a      	str	r2, [r3, #0]
 8014c40:	697a      	ldr	r2, [r7, #20]
 8014c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c44:	1ad3      	subs	r3, r2, r3
 8014c46:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	f47f ae64 	bne.w	8014918 <f_write+0xa8>
 8014c50:	e000      	b.n	8014c54 <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014c52:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014c54:	69fb      	ldr	r3, [r7, #28]
 8014c56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c5e:	b2da      	uxtb	r2, r3
 8014c60:	69fb      	ldr	r3, [r7, #28]
 8014c62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8014c66:	6a3b      	ldr	r3, [r7, #32]
 8014c68:	2100      	movs	r1, #0
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7fb fd59 	bl	8010722 <unlock_fs>
 8014c70:	2300      	movs	r3, #0
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3744      	adds	r7, #68	; 0x44
 8014c76:	46bd      	mov	sp, r7
 8014c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014c7c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b09c      	sub	sp, #112	; 0x70
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8014c8a:	4611      	mov	r1, r2
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f7ff f883 	bl	8013d98 <validate>
 8014c92:	4603      	mov	r3, r0
 8014c94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 8014c98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	f040 8123 	bne.w	8014ee8 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	f000 811b 	beq.w	8014ee8 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014cb8:	b25b      	sxtb	r3, r3
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	da1c      	bge.n	8014cf8 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014cc0:	7858      	ldrb	r0, [r3, #1]
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014ccc:	2301      	movs	r3, #1
 8014cce:	f7fb fa71 	bl	80101b4 <disk_write>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d006      	beq.n	8014ce6 <f_sync+0x6a>
 8014cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014cda:	2101      	movs	r1, #1
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f7fb fd20 	bl	8010722 <unlock_fs>
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	e109      	b.n	8014efa <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cf0:	b2da      	uxtb	r2, r3
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014cf8:	f7f7 fdee 	bl	800c8d8 <get_fattime>
 8014cfc:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8014cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d00:	781b      	ldrb	r3, [r3, #0]
 8014d02:	2b04      	cmp	r3, #4
 8014d04:	f040 80a5 	bne.w	8014e52 <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7fc fb04 	bl	8011318 <fill_first_frag>
 8014d10:	4603      	mov	r3, r0
 8014d12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8014d16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d10a      	bne.n	8014d34 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d28:	4619      	mov	r1, r3
 8014d2a:	f7fc fb24 	bl	8011376 <fill_last_frag>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 8014d34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	f040 80d5 	bne.w	8014ee8 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 8014d3e:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8014d42:	f001 f83a 	bl	8015dba <ff_memalloc>
 8014d46:	6638      	str	r0, [r7, #96]	; 0x60
 8014d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d106      	bne.n	8014d5c <f_sync+0xe0>
 8014d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d50:	2111      	movs	r1, #17
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7fb fce5 	bl	8010722 <unlock_fs>
 8014d58:	2311      	movs	r3, #17
 8014d5a:	e0ce      	b.n	8014efa <f_sync+0x27e>
 8014d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014d60:	611a      	str	r2, [r3, #16]
 8014d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014d66:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8014d6a:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8014d6c:	687a      	ldr	r2, [r7, #4]
 8014d6e:	f107 0308 	add.w	r3, r7, #8
 8014d72:	4611      	mov	r1, r2
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7fd fad7 	bl	8012328 <load_obj_dir>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 8014d80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d160      	bne.n	8014e4a <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8014d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d8a:	695b      	ldr	r3, [r3, #20]
 8014d8c:	3304      	adds	r3, #4
 8014d8e:	781a      	ldrb	r2, [r3, #0]
 8014d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d92:	695b      	ldr	r3, [r3, #20]
 8014d94:	3304      	adds	r3, #4
 8014d96:	f042 0220 	orr.w	r2, r2, #32
 8014d9a:	b2d2      	uxtb	r2, r2
 8014d9c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	79da      	ldrb	r2, [r3, #7]
 8014da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014da4:	695b      	ldr	r3, [r3, #20]
 8014da6:	3321      	adds	r3, #33	; 0x21
 8014da8:	f042 0201 	orr.w	r2, r2, #1
 8014dac:	b2d2      	uxtb	r2, r2
 8014dae:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8014db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014db2:	695b      	ldr	r3, [r3, #20]
 8014db4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	689b      	ldr	r3, [r3, #8]
 8014dbc:	4619      	mov	r1, r3
 8014dbe:	4610      	mov	r0, r2
 8014dc0:	f7fb fb67 	bl	8010492 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8014dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014dc6:	695b      	ldr	r3, [r3, #20]
 8014dc8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014dd2:	4608      	mov	r0, r1
 8014dd4:	f7fb fb89 	bl	80104ea <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8014dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014dda:	695b      	ldr	r3, [r3, #20]
 8014ddc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014de6:	4608      	mov	r0, r1
 8014de8:	f7fb fb7f 	bl	80104ea <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8014dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014dee:	695b      	ldr	r3, [r3, #20]
 8014df0:	330c      	adds	r3, #12
 8014df2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7fb fb4c 	bl	8010492 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8014dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014dfc:	695b      	ldr	r3, [r3, #20]
 8014dfe:	3315      	adds	r3, #21
 8014e00:	2200      	movs	r2, #0
 8014e02:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8014e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e06:	695b      	ldr	r3, [r3, #20]
 8014e08:	3310      	adds	r3, #16
 8014e0a:	2100      	movs	r1, #0
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7fb fb40 	bl	8010492 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8014e12:	f107 0308 	add.w	r3, r7, #8
 8014e16:	4618      	mov	r0, r3
 8014e18:	f7fd fabc 	bl	8012394 <store_xdir>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 8014e22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d10f      	bne.n	8014e4a <f_sync+0x1ce>
							res = sync_fs(fs);
 8014e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7fb fe71 	bl	8010b14 <sync_fs>
 8014e32:	4603      	mov	r3, r0
 8014e34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014e42:	b2da      	uxtb	r2, r3
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 8014e4a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8014e4c:	f000 ffc1 	bl	8015dd2 <ff_memfree>
 8014e50:	e04a      	b.n	8014ee8 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014e52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014e58:	4619      	mov	r1, r3
 8014e5a:	4610      	mov	r0, r2
 8014e5c:	f7fb fe2c 	bl	8010ab8 <move_window>
 8014e60:	4603      	mov	r3, r0
 8014e62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8014e66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d13c      	bne.n	8014ee8 <f_sync+0x26c>
					dir = fp->dir_ptr;
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e72:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014e76:	330b      	adds	r3, #11
 8014e78:	781a      	ldrb	r2, [r3, #0]
 8014e7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014e7c:	330b      	adds	r3, #11
 8014e7e:	f042 0220 	orr.w	r2, r2, #32
 8014e82:	b2d2      	uxtb	r2, r2
 8014e84:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6818      	ldr	r0, [r3, #0]
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	689b      	ldr	r3, [r3, #8]
 8014e8e:	461a      	mov	r2, r3
 8014e90:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014e92:	f7fc fe97 	bl	8011bc4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014e98:	f103 001c 	add.w	r0, r3, #28
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014ea2:	4613      	mov	r3, r2
 8014ea4:	4619      	mov	r1, r3
 8014ea6:	f7fb faf4 	bl	8010492 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014eaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014eac:	3316      	adds	r3, #22
 8014eae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7fb faee 	bl	8010492 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014eb8:	3312      	adds	r3, #18
 8014eba:	2100      	movs	r1, #0
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f7fb facd 	bl	801045c <st_word>
					fs->wflag = 1;
 8014ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f7fb fe22 	bl	8010b14 <sync_fs>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014ee0:	b2da      	uxtb	r2, r3
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014eea:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8014eee:	4611      	mov	r1, r2
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f7fb fc16 	bl	8010722 <unlock_fs>
 8014ef6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8014efa:	4618      	mov	r0, r3
 8014efc:	3770      	adds	r7, #112	; 0x70
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}

08014f02 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014f02:	b580      	push	{r7, lr}
 8014f04:	b084      	sub	sp, #16
 8014f06:	af00      	add	r7, sp, #0
 8014f08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f7ff feb6 	bl	8014c7c <f_sync>
 8014f10:	4603      	mov	r3, r0
 8014f12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014f14:	7bfb      	ldrb	r3, [r7, #15]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d11d      	bne.n	8014f56 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	f107 0208 	add.w	r2, r7, #8
 8014f20:	4611      	mov	r1, r2
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7fe ff38 	bl	8013d98 <validate>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014f2c:	7bfb      	ldrb	r3, [r7, #15]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d111      	bne.n	8014f56 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7fb fd1a 	bl	8010970 <dec_lock>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014f40:	7bfb      	ldrb	r3, [r7, #15]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d102      	bne.n	8014f4c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	2200      	movs	r2, #0
 8014f4a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	2100      	movs	r1, #0
 8014f50:	4618      	mov	r0, r3
 8014f52:	f7fb fbe6 	bl	8010722 <unlock_fs>
#endif
		}
	}
	return res;
 8014f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3710      	adds	r7, #16
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}

08014f60 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of path */
)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b0e6      	sub	sp, #408	; 0x198
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8014f6a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8014f6e:	6018      	str	r0, [r3, #0]
 8014f70:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8014f74:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8014f78:	6019      	str	r1, [r3, #0]
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMBUF


	*buff = 0;
 8014f7a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8014f7e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	2200      	movs	r2, #0
 8014f86:	701a      	strb	r2, [r3, #0]
	/* Get logical drive */
	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 8014f88:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8014f8c:	1d3b      	adds	r3, r7, #4
 8014f8e:	2200      	movs	r2, #0
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7fe fb65 	bl	8013660 <find_volume>
 8014f96:	4603      	mov	r3, r0
 8014f98:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
	if (res == FR_OK) {
 8014f9c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	f040 8148 	bne.w	8015236 <f_getcwd+0x2d6>
		dj.obj.fs = fs;
 8014fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014faa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		INIT_NAMBUF(fs);
 8014fae:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8014fb2:	f000 ff02 	bl	8015dba <ff_memalloc>
 8014fb6:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8014fba:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d107      	bne.n	8014fd2 <f_getcwd+0x72>
 8014fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014fc6:	2111      	movs	r1, #17
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f7fb fbaa 	bl	8010722 <unlock_fs>
 8014fce:	2311      	movs	r3, #17
 8014fd0:	e13b      	b.n	801524a <f_getcwd+0x2ea>
 8014fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014fd6:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8014fda:	611a      	str	r2, [r3, #16]
 8014fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014fe0:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8014fe4:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8014fe8:	615a      	str	r2, [r3, #20]
		i = len;			/* Bottom of buffer (directory stack base) */
 8014fea:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8014fee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path) */
 8014ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014ffc:	781b      	ldrb	r3, [r3, #0]
 8014ffe:	2b04      	cmp	r3, #4
 8015000:	f000 80da 	beq.w	80151b8 <f_getcwd+0x258>
			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
 8015004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801500a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 801500e:	e0c2      	b.n	8015196 <f_getcwd+0x236>
				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 8015010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015014:	2120      	movs	r1, #32
 8015016:	4618      	mov	r0, r3
 8015018:	f7fc fbdf 	bl	80117da <dir_sdi>
 801501c:	4603      	mov	r3, r0
 801501e:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 8015022:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8015026:	2b00      	cmp	r3, #0
 8015028:	f040 80bf 	bne.w	80151aa <f_getcwd+0x24a>
				res = move_window(fs, dj.sect);
 801502c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015030:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8015034:	4611      	mov	r1, r2
 8015036:	4618      	mov	r0, r3
 8015038:	f7fb fd3e 	bl	8010ab8 <move_window>
 801503c:	4603      	mov	r3, r0
 801503e:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 8015042:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8015046:	2b00      	cmp	r3, #0
 8015048:	f040 80b1 	bne.w	80151ae <f_getcwd+0x24e>
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 801504c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015050:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8015054:	4611      	mov	r1, r2
 8015056:	4618      	mov	r0, r3
 8015058:	f7fc fd95 	bl	8011b86 <ld_clust>
 801505c:	4603      	mov	r3, r0
 801505e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				res = dir_sdi(&dj, 0);
 8015062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015066:	2100      	movs	r1, #0
 8015068:	4618      	mov	r0, r3
 801506a:	f7fc fbb6 	bl	80117da <dir_sdi>
 801506e:	4603      	mov	r3, r0
 8015070:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 8015074:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8015078:	2b00      	cmp	r3, #0
 801507a:	f040 809a 	bne.w	80151b2 <f_getcwd+0x252>
				do {							/* Find the entry links to the child directory */
					res = dir_read(&dj, 0);
 801507e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015082:	2100      	movs	r1, #0
 8015084:	4618      	mov	r0, r3
 8015086:	f7fd fa47 	bl	8012518 <dir_read>
 801508a:	4603      	mov	r3, r0
 801508c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
					if (res != FR_OK) break;
 8015090:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8015094:	2b00      	cmp	r3, #0
 8015096:	d11a      	bne.n	80150ce <f_getcwd+0x16e>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 8015098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801509c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80150a0:	4611      	mov	r1, r2
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7fc fd6f 	bl	8011b86 <ld_clust>
 80150a8:	4602      	mov	r2, r0
 80150aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80150ae:	4293      	cmp	r3, r2
 80150b0:	d00f      	beq.n	80150d2 <f_getcwd+0x172>
					res = dir_next(&dj, 0);
 80150b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80150b6:	2100      	movs	r1, #0
 80150b8:	4618      	mov	r0, r3
 80150ba:	f7fc fc22 	bl	8011902 <dir_next>
 80150be:	4603      	mov	r3, r0
 80150c0:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				} while (res == FR_OK);
 80150c4:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d0d8      	beq.n	801507e <f_getcwd+0x11e>
 80150cc:	e002      	b.n	80150d4 <f_getcwd+0x174>
					if (res != FR_OK) break;
 80150ce:	bf00      	nop
 80150d0:	e000      	b.n	80150d4 <f_getcwd+0x174>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 80150d2:	bf00      	nop
				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 80150d4:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80150d8:	2b04      	cmp	r3, #4
 80150da:	d102      	bne.n	80150e2 <f_getcwd+0x182>
 80150dc:	2302      	movs	r3, #2
 80150de:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 80150e2:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d165      	bne.n	80151b6 <f_getcwd+0x256>
				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 80150ea:	f107 0208 	add.w	r2, r7, #8
 80150ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80150f2:	4611      	mov	r1, r2
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7fd fe01 	bl	8012cfc <get_fileinfo>
				for (n = 0; fno.fname[n]; n++) ;
 80150fa:	2300      	movs	r3, #0
 80150fc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8015100:	e004      	b.n	801510c <f_getcwd+0x1ac>
 8015102:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015106:	3301      	adds	r3, #1
 8015108:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 801510c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8015110:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8015114:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015118:	4413      	add	r3, r2
 801511a:	331a      	adds	r3, #26
 801511c:	781b      	ldrb	r3, [r3, #0]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d1ef      	bne.n	8015102 <f_getcwd+0x1a2>
				if (i < n + 3) {
 8015122:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015126:	3303      	adds	r3, #3
 8015128:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801512c:	429a      	cmp	r2, r3
 801512e:	d21f      	bcs.n	8015170 <f_getcwd+0x210>
					res = FR_NOT_ENOUGH_CORE; break;
 8015130:	2311      	movs	r3, #17
 8015132:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8015136:	e03f      	b.n	80151b8 <f_getcwd+0x258>
				}
				while (n) buff[--i] = fno.fname[--n];
 8015138:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801513c:	3b01      	subs	r3, #1
 801513e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8015142:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8015146:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801514a:	681a      	ldr	r2, [r3, #0]
 801514c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8015150:	3b01      	subs	r3, #1
 8015152:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8015156:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801515a:	4413      	add	r3, r2
 801515c:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8015160:	f5a2 71c8 	sub.w	r1, r2, #400	; 0x190
 8015164:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8015168:	440a      	add	r2, r1
 801516a:	321a      	adds	r2, #26
 801516c:	7812      	ldrb	r2, [r2, #0]
 801516e:	701a      	strb	r2, [r3, #0]
 8015170:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015174:	2b00      	cmp	r3, #0
 8015176:	d1df      	bne.n	8015138 <f_getcwd+0x1d8>
				buff[--i] = '/';
 8015178:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801517c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8015180:	681a      	ldr	r2, [r3, #0]
 8015182:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8015186:	3b01      	subs	r3, #1
 8015188:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 801518c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8015190:	4413      	add	r3, r2
 8015192:	222f      	movs	r2, #47	; 0x2f
 8015194:	701a      	strb	r2, [r3, #0]
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 8015196:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801519a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 801519e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	f47f af34 	bne.w	8015010 <f_getcwd+0xb0>
 80151a8:	e006      	b.n	80151b8 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80151aa:	bf00      	nop
 80151ac:	e004      	b.n	80151b8 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80151ae:	bf00      	nop
 80151b0:	e002      	b.n	80151b8 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80151b2:	bf00      	nop
 80151b4:	e000      	b.n	80151b8 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80151b6:	bf00      	nop
			}
		}
		tp = buff;
 80151b8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80151bc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
		if (res == FR_OK) {
 80151c6:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d12b      	bne.n	8015226 <f_getcwd+0x2c6>
#if _VOLUMES >= 2
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
#endif
			if (i == len) {					/* Root-directory */
 80151ce:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80151d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80151d6:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	429a      	cmp	r2, r3
 80151de:	d107      	bne.n	80151f0 <f_getcwd+0x290>
				*tp++ = '/';
 80151e0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80151e4:	1c5a      	adds	r2, r3, #1
 80151e6:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 80151ea:	222f      	movs	r2, #47	; 0x2f
 80151ec:	701a      	strb	r2, [r3, #0]
 80151ee:	e01a      	b.n	8015226 <f_getcwd+0x2c6>
			} else {						/* Sub-directroy */
				do		/* Add stacked path str */
					*tp++ = buff[i++];
 80151f0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80151f4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80151f8:	681a      	ldr	r2, [r3, #0]
 80151fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80151fe:	1c59      	adds	r1, r3, #1
 8015200:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8015204:	441a      	add	r2, r3
 8015206:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801520a:	1c59      	adds	r1, r3, #1
 801520c:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8015210:	7812      	ldrb	r2, [r2, #0]
 8015212:	701a      	strb	r2, [r3, #0]
				while (i < len);
 8015214:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8015218:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801521c:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	429a      	cmp	r2, r3
 8015224:	d3e4      	bcc.n	80151f0 <f_getcwd+0x290>
			}
		}
		*tp = 0;
 8015226:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801522a:	2200      	movs	r2, #0
 801522c:	701a      	strb	r2, [r3, #0]
		FREE_NAMBUF();
 801522e:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 8015232:	f000 fdce 	bl	8015dd2 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8015236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801523a:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 801523e:	4611      	mov	r1, r2
 8015240:	4618      	mov	r0, r3
 8015242:	f7fb fa6e 	bl	8010722 <unlock_fs>
 8015246:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
}
 801524a:	4618      	mov	r0, r3
 801524c:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}

08015254 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b086      	sub	sp, #24
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d101      	bne.n	8015268 <f_opendir+0x14>
 8015264:	2309      	movs	r3, #9
 8015266:	e0ba      	b.n	80153de <f_opendir+0x18a>

	/* Get logical drive */
	obj = &dp->obj;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801526c:	f107 0108 	add.w	r1, r7, #8
 8015270:	463b      	mov	r3, r7
 8015272:	2200      	movs	r2, #0
 8015274:	4618      	mov	r0, r3
 8015276:	f7fe f9f3 	bl	8013660 <find_volume>
 801527a:	4603      	mov	r3, r0
 801527c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801527e:	7dfb      	ldrb	r3, [r7, #23]
 8015280:	2b00      	cmp	r3, #0
 8015282:	f040 809f 	bne.w	80153c4 <f_opendir+0x170>
		obj->fs = fs;
 8015286:	68ba      	ldr	r2, [r7, #8]
 8015288:	693b      	ldr	r3, [r7, #16]
 801528a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 801528c:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8015290:	f000 fd93 	bl	8015dba <ff_memalloc>
 8015294:	60f8      	str	r0, [r7, #12]
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d106      	bne.n	80152aa <f_opendir+0x56>
 801529c:	68bb      	ldr	r3, [r7, #8]
 801529e:	2111      	movs	r1, #17
 80152a0:	4618      	mov	r0, r3
 80152a2:	f7fb fa3e 	bl	8010722 <unlock_fs>
 80152a6:	2311      	movs	r3, #17
 80152a8:	e099      	b.n	80153de <f_opendir+0x18a>
 80152aa:	68bb      	ldr	r3, [r7, #8]
 80152ac:	68fa      	ldr	r2, [r7, #12]
 80152ae:	611a      	str	r2, [r3, #16]
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	68fa      	ldr	r2, [r7, #12]
 80152b4:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80152b8:	615a      	str	r2, [r3, #20]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80152ba:	683b      	ldr	r3, [r7, #0]
 80152bc:	4619      	mov	r1, r3
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f7fe f80e 	bl	80132e0 <follow_path>
 80152c4:	4603      	mov	r3, r0
 80152c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80152c8:	7dfb      	ldrb	r3, [r7, #23]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d172      	bne.n	80153b4 <f_opendir+0x160>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80152d4:	b25b      	sxtb	r3, r3
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	db47      	blt.n	801536a <f_opendir+0x116>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80152da:	693b      	ldr	r3, [r7, #16]
 80152dc:	799b      	ldrb	r3, [r3, #6]
 80152de:	f003 0310 	and.w	r3, r3, #16
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d03f      	beq.n	8015366 <f_opendir+0x112>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 80152e6:	68bb      	ldr	r3, [r7, #8]
 80152e8:	781b      	ldrb	r3, [r3, #0]
 80152ea:	2b04      	cmp	r3, #4
 80152ec:	d130      	bne.n	8015350 <f_opendir+0xfc>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 80152ee:	693b      	ldr	r3, [r7, #16]
 80152f0:	689a      	ldr	r2, [r3, #8]
 80152f2:	693b      	ldr	r3, [r7, #16]
 80152f4:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80152f6:	693b      	ldr	r3, [r7, #16]
 80152f8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80152fc:	4613      	mov	r3, r2
 80152fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8015302:	693a      	ldr	r2, [r7, #16]
 8015304:	79d2      	ldrb	r2, [r2, #7]
 8015306:	431a      	orrs	r2, r3
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	695b      	ldr	r3, [r3, #20]
 8015318:	3334      	adds	r3, #52	; 0x34
 801531a:	4618      	mov	r0, r3
 801531c:	f7fa ffa0 	bl	8010260 <ld_dword>
 8015320:	4602      	mov	r2, r0
 8015322:	693b      	ldr	r3, [r7, #16]
 8015324:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	695b      	ldr	r3, [r3, #20]
 801532a:	3338      	adds	r3, #56	; 0x38
 801532c:	4618      	mov	r0, r3
 801532e:	f7fa ffba 	bl	80102a6 <ld_qword>
 8015332:	4602      	mov	r2, r0
 8015334:	460b      	mov	r3, r1
 8015336:	6939      	ldr	r1, [r7, #16]
 8015338:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	695b      	ldr	r3, [r3, #20]
 8015340:	3321      	adds	r3, #33	; 0x21
 8015342:	781b      	ldrb	r3, [r3, #0]
 8015344:	f003 0302 	and.w	r3, r3, #2
 8015348:	b2da      	uxtb	r2, r3
 801534a:	693b      	ldr	r3, [r7, #16]
 801534c:	71da      	strb	r2, [r3, #7]
 801534e:	e00c      	b.n	801536a <f_opendir+0x116>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015350:	68ba      	ldr	r2, [r7, #8]
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015356:	4619      	mov	r1, r3
 8015358:	4610      	mov	r0, r2
 801535a:	f7fc fc14 	bl	8011b86 <ld_clust>
 801535e:	4602      	mov	r2, r0
 8015360:	693b      	ldr	r3, [r7, #16]
 8015362:	609a      	str	r2, [r3, #8]
 8015364:	e001      	b.n	801536a <f_opendir+0x116>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8015366:	2305      	movs	r3, #5
 8015368:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801536a:	7dfb      	ldrb	r3, [r7, #23]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d121      	bne.n	80153b4 <f_opendir+0x160>
				obj->id = fs->id;
 8015370:	68bb      	ldr	r3, [r7, #8]
 8015372:	88da      	ldrh	r2, [r3, #6]
 8015374:	693b      	ldr	r3, [r7, #16]
 8015376:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015378:	2100      	movs	r1, #0
 801537a:	6878      	ldr	r0, [r7, #4]
 801537c:	f7fc fa2d 	bl	80117da <dir_sdi>
 8015380:	4603      	mov	r3, r0
 8015382:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8015384:	7dfb      	ldrb	r3, [r7, #23]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d114      	bne.n	80153b4 <f_opendir+0x160>
					if (obj->sclust) {
 801538a:	693b      	ldr	r3, [r7, #16]
 801538c:	689b      	ldr	r3, [r3, #8]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d00d      	beq.n	80153ae <f_opendir+0x15a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015392:	2100      	movs	r1, #0
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f7fb fa5d 	bl	8010854 <inc_lock>
 801539a:	4602      	mov	r2, r0
 801539c:	693b      	ldr	r3, [r7, #16]
 801539e:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80153a0:	693b      	ldr	r3, [r7, #16]
 80153a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d105      	bne.n	80153b4 <f_opendir+0x160>
 80153a8:	2312      	movs	r3, #18
 80153aa:	75fb      	strb	r3, [r7, #23]
 80153ac:	e002      	b.n	80153b4 <f_opendir+0x160>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80153ae:	693b      	ldr	r3, [r7, #16]
 80153b0:	2200      	movs	r2, #0
 80153b2:	62da      	str	r2, [r3, #44]	; 0x2c
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 80153b4:	68f8      	ldr	r0, [r7, #12]
 80153b6:	f000 fd0c 	bl	8015dd2 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80153ba:	7dfb      	ldrb	r3, [r7, #23]
 80153bc:	2b04      	cmp	r3, #4
 80153be:	d101      	bne.n	80153c4 <f_opendir+0x170>
 80153c0:	2305      	movs	r3, #5
 80153c2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80153c4:	7dfb      	ldrb	r3, [r7, #23]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d002      	beq.n	80153d0 <f_opendir+0x17c>
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	2200      	movs	r2, #0
 80153ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	7dfa      	ldrb	r2, [r7, #23]
 80153d4:	4611      	mov	r1, r2
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7fb f9a3 	bl	8010722 <unlock_fs>
 80153dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80153de:	4618      	mov	r0, r3
 80153e0:	3718      	adds	r7, #24
 80153e2:	46bd      	mov	sp, r7
 80153e4:	bd80      	pop	{r7, pc}

080153e6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80153e6:	b580      	push	{r7, lr}
 80153e8:	b084      	sub	sp, #16
 80153ea:	af00      	add	r7, sp, #0
 80153ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	f107 0208 	add.w	r2, r7, #8
 80153f4:	4611      	mov	r1, r2
 80153f6:	4618      	mov	r0, r3
 80153f8:	f7fe fcce 	bl	8013d98 <validate>
 80153fc:	4603      	mov	r3, r0
 80153fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015400:	7bfb      	ldrb	r3, [r7, #15]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d115      	bne.n	8015432 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801540a:	2b00      	cmp	r3, #0
 801540c:	d006      	beq.n	801541c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015412:	4618      	mov	r0, r3
 8015414:	f7fb faac 	bl	8010970 <dec_lock>
 8015418:	4603      	mov	r3, r0
 801541a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801541c:	7bfb      	ldrb	r3, [r7, #15]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d102      	bne.n	8015428 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	2200      	movs	r2, #0
 8015426:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	2100      	movs	r1, #0
 801542c:	4618      	mov	r0, r3
 801542e:	f7fb f978 	bl	8010722 <unlock_fs>
#endif
	}
	return res;
 8015432:	7bfb      	ldrb	r3, [r7, #15]
}
 8015434:	4618      	mov	r0, r3
 8015436:	3710      	adds	r7, #16
 8015438:	46bd      	mov	sp, r7
 801543a:	bd80      	pop	{r7, pc}

0801543c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b086      	sub	sp, #24
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	f107 020c 	add.w	r2, r7, #12
 801544c:	4611      	mov	r1, r2
 801544e:	4618      	mov	r0, r3
 8015450:	f7fe fca2 	bl	8013d98 <validate>
 8015454:	4603      	mov	r3, r0
 8015456:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015458:	7dfb      	ldrb	r3, [r7, #23]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d140      	bne.n	80154e0 <f_readdir+0xa4>
		if (!fno) {
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d106      	bne.n	8015472 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015464:	2100      	movs	r1, #0
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f7fc f9b7 	bl	80117da <dir_sdi>
 801546c:	4603      	mov	r3, r0
 801546e:	75fb      	strb	r3, [r7, #23]
 8015470:	e036      	b.n	80154e0 <f_readdir+0xa4>
		} else {
			INIT_NAMBUF(fs);
 8015472:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8015476:	f000 fca0 	bl	8015dba <ff_memalloc>
 801547a:	6138      	str	r0, [r7, #16]
 801547c:	693b      	ldr	r3, [r7, #16]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d106      	bne.n	8015490 <f_readdir+0x54>
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	2111      	movs	r1, #17
 8015486:	4618      	mov	r0, r3
 8015488:	f7fb f94b 	bl	8010722 <unlock_fs>
 801548c:	2311      	movs	r3, #17
 801548e:	e02e      	b.n	80154ee <f_readdir+0xb2>
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	693a      	ldr	r2, [r7, #16]
 8015494:	611a      	str	r2, [r3, #16]
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	693a      	ldr	r2, [r7, #16]
 801549a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801549e:	615a      	str	r2, [r3, #20]
			res = dir_read(dp, 0);			/* Read an item */
 80154a0:	2100      	movs	r1, #0
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f7fd f838 	bl	8012518 <dir_read>
 80154a8:	4603      	mov	r3, r0
 80154aa:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80154ac:	7dfb      	ldrb	r3, [r7, #23]
 80154ae:	2b04      	cmp	r3, #4
 80154b0:	d101      	bne.n	80154b6 <f_readdir+0x7a>
 80154b2:	2300      	movs	r3, #0
 80154b4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 80154b6:	7dfb      	ldrb	r3, [r7, #23]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d10e      	bne.n	80154da <f_readdir+0x9e>
				get_fileinfo(dp, fno);		/* Get the object information */
 80154bc:	6839      	ldr	r1, [r7, #0]
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f7fd fc1c 	bl	8012cfc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80154c4:	2100      	movs	r1, #0
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f7fc fa1b 	bl	8011902 <dir_next>
 80154cc:	4603      	mov	r3, r0
 80154ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80154d0:	7dfb      	ldrb	r3, [r7, #23]
 80154d2:	2b04      	cmp	r3, #4
 80154d4:	d101      	bne.n	80154da <f_readdir+0x9e>
 80154d6:	2300      	movs	r3, #0
 80154d8:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 80154da:	6938      	ldr	r0, [r7, #16]
 80154dc:	f000 fc79 	bl	8015dd2 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	7dfa      	ldrb	r2, [r7, #23]
 80154e4:	4611      	mov	r1, r2
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7fb f91b 	bl	8010722 <unlock_fs>
 80154ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80154ee:	4618      	mov	r0, r3
 80154f0:	3718      	adds	r7, #24
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}

080154f6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80154f6:	b580      	push	{r7, lr}
 80154f8:	b098      	sub	sp, #96	; 0x60
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	6078      	str	r0, [r7, #4]
 80154fe:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8015500:	f107 0108 	add.w	r1, r7, #8
 8015504:	1d3b      	adds	r3, r7, #4
 8015506:	2200      	movs	r2, #0
 8015508:	4618      	mov	r0, r3
 801550a:	f7fe f8a9 	bl	8013660 <find_volume>
 801550e:	4603      	mov	r3, r0
 8015510:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8015514:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015518:	2b00      	cmp	r3, #0
 801551a:	d139      	bne.n	8015590 <f_stat+0x9a>
		INIT_NAMBUF(dj.obj.fs);
 801551c:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8015520:	f000 fc4b 	bl	8015dba <ff_memalloc>
 8015524:	65b8      	str	r0, [r7, #88]	; 0x58
 8015526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015528:	2b00      	cmp	r3, #0
 801552a:	d106      	bne.n	801553a <f_stat+0x44>
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	2111      	movs	r1, #17
 8015530:	4618      	mov	r0, r3
 8015532:	f7fb f8f6 	bl	8010722 <unlock_fs>
 8015536:	2311      	movs	r3, #17
 8015538:	e033      	b.n	80155a2 <f_stat+0xac>
 801553a:	68bb      	ldr	r3, [r7, #8]
 801553c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801553e:	611a      	str	r2, [r3, #16]
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015544:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8015548:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 801554a:	687a      	ldr	r2, [r7, #4]
 801554c:	f107 0308 	add.w	r3, r7, #8
 8015550:	4611      	mov	r1, r2
 8015552:	4618      	mov	r0, r3
 8015554:	f7fd fec4 	bl	80132e0 <follow_path>
 8015558:	4603      	mov	r3, r0
 801555a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 801555e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015562:	2b00      	cmp	r3, #0
 8015564:	d111      	bne.n	801558a <f_stat+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8015566:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801556a:	b25b      	sxtb	r3, r3
 801556c:	2b00      	cmp	r3, #0
 801556e:	da03      	bge.n	8015578 <f_stat+0x82>
				res = FR_INVALID_NAME;
 8015570:	2306      	movs	r3, #6
 8015572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015576:	e008      	b.n	801558a <f_stat+0x94>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d005      	beq.n	801558a <f_stat+0x94>
 801557e:	f107 0308 	add.w	r3, r7, #8
 8015582:	6839      	ldr	r1, [r7, #0]
 8015584:	4618      	mov	r0, r3
 8015586:	f7fd fbb9 	bl	8012cfc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 801558a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801558c:	f000 fc21 	bl	8015dd2 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8015596:	4611      	mov	r1, r2
 8015598:	4618      	mov	r0, r3
 801559a:	f7fb f8c2 	bl	8010722 <unlock_fs>
 801559e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3760      	adds	r7, #96	; 0x60
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}

080155aa <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80155aa:	b580      	push	{r7, lr}
 80155ac:	b0bc      	sub	sp, #240	; 0xf0
 80155ae:	af00      	add	r7, sp, #0
 80155b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80155b2:	2300      	movs	r3, #0
 80155b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80155b8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80155bc:	1d3b      	adds	r3, r7, #4
 80155be:	2202      	movs	r2, #2
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7fe f84d 	bl	8013660 <find_volume>
 80155c6:	4603      	mov	r3, r0
 80155c8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	dj.obj.fs = fs;
 80155cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (res == FR_OK) {
 80155d2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	f040 80f9 	bne.w	80157ce <f_unlink+0x224>
		INIT_NAMBUF(fs);
 80155dc:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80155e0:	f000 fbeb 	bl	8015dba <ff_memalloc>
 80155e4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 80155e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d106      	bne.n	80155fe <f_unlink+0x54>
 80155f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155f2:	2111      	movs	r1, #17
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7fb f894 	bl	8010722 <unlock_fs>
 80155fa:	2311      	movs	r3, #17
 80155fc:	e0f0      	b.n	80157e0 <f_unlink+0x236>
 80155fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015600:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8015604:	611a      	str	r2, [r3, #16]
 8015606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015608:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801560c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8015610:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);		/* Follow the file path */
 8015612:	687a      	ldr	r2, [r7, #4]
 8015614:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015618:	4611      	mov	r1, r2
 801561a:	4618      	mov	r0, r3
 801561c:	f7fd fe60 	bl	80132e0 <follow_path>
 8015620:	4603      	mov	r3, r0
 8015622:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8015626:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 801562a:	2b00      	cmp	r3, #0
 801562c:	d108      	bne.n	8015640 <f_unlink+0x96>
 801562e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8015632:	f003 0320 	and.w	r3, r3, #32
 8015636:	2b00      	cmp	r3, #0
 8015638:	d002      	beq.n	8015640 <f_unlink+0x96>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801563a:	2306      	movs	r3, #6
 801563c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8015640:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8015644:	2b00      	cmp	r3, #0
 8015646:	d108      	bne.n	801565a <f_unlink+0xb0>
 8015648:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801564c:	2102      	movs	r1, #2
 801564e:	4618      	mov	r0, r3
 8015650:	f7fb f882 	bl	8010758 <chk_lock>
 8015654:	4603      	mov	r3, r0
 8015656:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801565a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 801565e:	2b00      	cmp	r3, #0
 8015660:	f040 80b1 	bne.w	80157c6 <f_unlink+0x21c>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015664:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8015668:	b25b      	sxtb	r3, r3
 801566a:	2b00      	cmp	r3, #0
 801566c:	da03      	bge.n	8015676 <f_unlink+0xcc>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801566e:	2306      	movs	r3, #6
 8015670:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015674:	e008      	b.n	8015688 <f_unlink+0xde>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8015676:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801567a:	f003 0301 	and.w	r3, r3, #1
 801567e:	2b00      	cmp	r3, #0
 8015680:	d002      	beq.n	8015688 <f_unlink+0xde>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8015682:	2307      	movs	r3, #7
 8015684:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				}
			}
			if (res == FR_OK) {
 8015688:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 801568c:	2b00      	cmp	r3, #0
 801568e:	d170      	bne.n	8015772 <f_unlink+0x1c8>
#if _FS_EXFAT
				obj.fs = fs;
 8015690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015692:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 8015694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015696:	781b      	ldrb	r3, [r3, #0]
 8015698:	2b04      	cmp	r3, #4
 801569a:	d11d      	bne.n	80156d8 <f_unlink+0x12e>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 801569c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801569e:	695b      	ldr	r3, [r3, #20]
 80156a0:	3334      	adds	r3, #52	; 0x34
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7fa fddc 	bl	8010260 <ld_dword>
 80156a8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80156ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80156b0:	613b      	str	r3, [r7, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80156b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156b4:	695b      	ldr	r3, [r3, #20]
 80156b6:	3338      	adds	r3, #56	; 0x38
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7fa fdf4 	bl	80102a6 <ld_qword>
 80156be:	4602      	mov	r2, r0
 80156c0:	460b      	mov	r3, r1
 80156c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80156c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156c8:	695b      	ldr	r3, [r3, #20]
 80156ca:	3321      	adds	r3, #33	; 0x21
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	f003 0302 	and.w	r3, r3, #2
 80156d2:	b2db      	uxtb	r3, r3
 80156d4:	73fb      	strb	r3, [r7, #15]
 80156d6:	e008      	b.n	80156ea <f_unlink+0x140>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80156d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156da:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80156de:	4611      	mov	r1, r2
 80156e0:	4618      	mov	r0, r3
 80156e2:	f7fc fa50 	bl	8011b86 <ld_clust>
 80156e6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80156ea:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80156ee:	f003 0310 	and.w	r3, r3, #16
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d03d      	beq.n	8015772 <f_unlink+0x1c8>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80156f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156fa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80156fe:	429a      	cmp	r2, r3
 8015700:	d103      	bne.n	801570a <f_unlink+0x160>
						res = FR_DENIED;
 8015702:	2307      	movs	r3, #7
 8015704:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015708:	e033      	b.n	8015772 <f_unlink+0x1c8>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801570a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801570c:	643b      	str	r3, [r7, #64]	; 0x40
						sdj.obj.sclust = dclst;
 801570e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015712:	64bb      	str	r3, [r7, #72]	; 0x48
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 8015714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	2b04      	cmp	r3, #4
 801571a:	d106      	bne.n	801572a <f_unlink+0x180>
							sdj.obj.objsize = obj.objsize;
 801571c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015720:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
							sdj.obj.stat = obj.stat;
 8015724:	7bfb      	ldrb	r3, [r7, #15]
 8015726:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 801572a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801572e:	2100      	movs	r1, #0
 8015730:	4618      	mov	r0, r3
 8015732:	f7fc f852 	bl	80117da <dir_sdi>
 8015736:	4603      	mov	r3, r0
 8015738:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						if (res == FR_OK) {
 801573c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8015740:	2b00      	cmp	r3, #0
 8015742:	d116      	bne.n	8015772 <f_unlink+0x1c8>
							res = dir_read(&sdj, 0);			/* Read an item */
 8015744:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015748:	2100      	movs	r1, #0
 801574a:	4618      	mov	r0, r3
 801574c:	f7fc fee4 	bl	8012518 <dir_read>
 8015750:	4603      	mov	r3, r0
 8015752:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8015756:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 801575a:	2b00      	cmp	r3, #0
 801575c:	d102      	bne.n	8015764 <f_unlink+0x1ba>
 801575e:	2307      	movs	r3, #7
 8015760:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8015764:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8015768:	2b04      	cmp	r3, #4
 801576a:	d102      	bne.n	8015772 <f_unlink+0x1c8>
 801576c:	2300      	movs	r3, #0
 801576e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						}
					}
				}
			}
			if (res == FR_OK) {
 8015772:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8015776:	2b00      	cmp	r3, #0
 8015778:	d125      	bne.n	80157c6 <f_unlink+0x21c>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801577a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801577e:	4618      	mov	r0, r3
 8015780:	f7fd fa64 	bl	8012c4c <dir_remove>
 8015784:	4603      	mov	r3, r0
 8015786:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801578a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 801578e:	2b00      	cmp	r3, #0
 8015790:	d10e      	bne.n	80157b0 <f_unlink+0x206>
 8015792:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015796:	2b00      	cmp	r3, #0
 8015798:	d00a      	beq.n	80157b0 <f_unlink+0x206>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 801579a:	f107 0308 	add.w	r3, r7, #8
 801579e:	2200      	movs	r2, #0
 80157a0:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7fb fe17 	bl	80113d8 <remove_chain>
 80157aa:	4603      	mov	r3, r0
 80157ac:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80157b0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d106      	bne.n	80157c6 <f_unlink+0x21c>
 80157b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7fb f9aa 	bl	8010b14 <sync_fs>
 80157c0:	4603      	mov	r3, r0
 80157c2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			}
		}
		FREE_NAMBUF();
 80157c6:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80157ca:	f000 fb02 	bl	8015dd2 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 80157ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157d0:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 80157d4:	4611      	mov	r1, r2
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7fa ffa3 	bl	8010722 <unlock_fs>
 80157dc:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 80157e0:	4618      	mov	r0, r3
 80157e2:	37f0      	adds	r7, #240	; 0xf0
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80157e8:	b5b0      	push	{r4, r5, r7, lr}
 80157ea:	b0a0      	sub	sp, #128	; 0x80
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80157f0:	f107 010c 	add.w	r1, r7, #12
 80157f4:	1d3b      	adds	r3, r7, #4
 80157f6:	2202      	movs	r2, #2
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7fd ff31 	bl	8013660 <find_volume>
 80157fe:	4603      	mov	r3, r0
 8015800:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8015808:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801580c:	2b00      	cmp	r3, #0
 801580e:	f040 815a 	bne.w	8015ac6 <f_mkdir+0x2de>
		INIT_NAMBUF(fs);
 8015812:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8015816:	f000 fad0 	bl	8015dba <ff_memalloc>
 801581a:	66f8      	str	r0, [r7, #108]	; 0x6c
 801581c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801581e:	2b00      	cmp	r3, #0
 8015820:	d106      	bne.n	8015830 <f_mkdir+0x48>
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	2111      	movs	r1, #17
 8015826:	4618      	mov	r0, r3
 8015828:	f7fa ff7b 	bl	8010722 <unlock_fs>
 801582c:	2311      	movs	r3, #17
 801582e:	e153      	b.n	8015ad8 <f_mkdir+0x2f0>
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015834:	611a      	str	r2, [r3, #16]
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801583a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801583e:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);			/* Follow the file path */
 8015840:	687a      	ldr	r2, [r7, #4]
 8015842:	f107 0310 	add.w	r3, r7, #16
 8015846:	4611      	mov	r1, r2
 8015848:	4618      	mov	r0, r3
 801584a:	f7fd fd49 	bl	80132e0 <follow_path>
 801584e:	4603      	mov	r3, r0
 8015850:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015854:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8015858:	2b00      	cmp	r3, #0
 801585a:	d102      	bne.n	8015862 <f_mkdir+0x7a>
 801585c:	2308      	movs	r3, #8
 801585e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8015862:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8015866:	2b04      	cmp	r3, #4
 8015868:	d108      	bne.n	801587c <f_mkdir+0x94>
 801586a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801586e:	f003 0320 	and.w	r3, r3, #32
 8015872:	2b00      	cmp	r3, #0
 8015874:	d002      	beq.n	801587c <f_mkdir+0x94>
			res = FR_INVALID_NAME;
 8015876:	2306      	movs	r3, #6
 8015878:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801587c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8015880:	2b04      	cmp	r3, #4
 8015882:	f040 811d 	bne.w	8015ac0 <f_mkdir+0x2d8>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8015886:	f107 0310 	add.w	r3, r7, #16
 801588a:	2100      	movs	r1, #0
 801588c:	4618      	mov	r0, r3
 801588e:	f7fb fe57 	bl	8011540 <create_chain>
 8015892:	66b8      	str	r0, [r7, #104]	; 0x68
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	895b      	ldrh	r3, [r3, #10]
 8015898:	461a      	mov	r2, r3
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	899b      	ldrh	r3, [r3, #12]
 801589e:	fb02 f303 	mul.w	r3, r2, r3
 80158a2:	2200      	movs	r2, #0
 80158a4:	461c      	mov	r4, r3
 80158a6:	4615      	mov	r5, r2
 80158a8:	e9c7 4508 	strd	r4, r5, [r7, #32]
			res = FR_OK;
 80158ac:	2300      	movs	r3, #0
 80158ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80158b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d102      	bne.n	80158be <f_mkdir+0xd6>
 80158b8:	2307      	movs	r3, #7
 80158ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 80158be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158c0:	2b01      	cmp	r3, #1
 80158c2:	d102      	bne.n	80158ca <f_mkdir+0xe2>
 80158c4:	2302      	movs	r3, #2
 80158c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80158ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80158d0:	d102      	bne.n	80158d8 <f_mkdir+0xf0>
 80158d2:	2301      	movs	r3, #1
 80158d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80158d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d106      	bne.n	80158ee <f_mkdir+0x106>
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	4618      	mov	r0, r3
 80158e4:	f7fb f8a4 	bl	8010a30 <sync_window>
 80158e8:	4603      	mov	r3, r0
 80158ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			tm = GET_FATTIME();
 80158ee:	f7f6 fff3 	bl	800c8d8 <get_fattime>
 80158f2:	6678      	str	r0, [r7, #100]	; 0x64
			if (res == FR_OK) {					/* Initialize the new directory table */
 80158f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d170      	bne.n	80159de <f_mkdir+0x1f6>
				dsc = clust2sect(fs, dcl);
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015900:	4618      	mov	r0, r3
 8015902:	f7fb f977 	bl	8010bf4 <clust2sect>
 8015906:	6778      	str	r0, [r7, #116]	; 0x74
				dir = fs->win;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	3350      	adds	r3, #80	; 0x50
 801590c:	663b      	str	r3, [r7, #96]	; 0x60
				mem_set(dir, 0, SS(fs));
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	899b      	ldrh	r3, [r3, #12]
 8015912:	461a      	mov	r2, r3
 8015914:	2100      	movs	r1, #0
 8015916:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8015918:	f7fa fe90 	bl	801063c <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	781b      	ldrb	r3, [r3, #0]
 8015920:	2b04      	cmp	r3, #4
 8015922:	d036      	beq.n	8015992 <f_mkdir+0x1aa>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8015924:	220b      	movs	r2, #11
 8015926:	2120      	movs	r1, #32
 8015928:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801592a:	f7fa fe87 	bl	801063c <mem_set>
					dir[DIR_Name] = '.';
 801592e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015930:	222e      	movs	r2, #46	; 0x2e
 8015932:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8015934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015936:	330b      	adds	r3, #11
 8015938:	2210      	movs	r2, #16
 801593a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801593c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801593e:	3316      	adds	r3, #22
 8015940:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015942:	4618      	mov	r0, r3
 8015944:	f7fa fda5 	bl	8010492 <st_dword>
					st_clust(fs, dir, dcl);
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801594c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801594e:	4618      	mov	r0, r3
 8015950:	f7fc f938 	bl	8011bc4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015956:	3320      	adds	r3, #32
 8015958:	2220      	movs	r2, #32
 801595a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801595c:	4618      	mov	r0, r3
 801595e:	f7fa fe4c 	bl	80105fa <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015964:	3321      	adds	r3, #33	; 0x21
 8015966:	222e      	movs	r2, #46	; 0x2e
 8015968:	701a      	strb	r2, [r3, #0]
 801596a:	69bb      	ldr	r3, [r7, #24]
 801596c:	673b      	str	r3, [r7, #112]	; 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	781b      	ldrb	r3, [r3, #0]
 8015972:	2b03      	cmp	r3, #3
 8015974:	d106      	bne.n	8015984 <f_mkdir+0x19c>
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801597a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801597c:	429a      	cmp	r2, r3
 801597e:	d101      	bne.n	8015984 <f_mkdir+0x19c>
 8015980:	2300      	movs	r3, #0
 8015982:	673b      	str	r3, [r7, #112]	; 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 8015984:	68f8      	ldr	r0, [r7, #12]
 8015986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015988:	3320      	adds	r3, #32
 801598a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801598c:	4619      	mov	r1, r3
 801598e:	f7fc f919 	bl	8011bc4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	895b      	ldrh	r3, [r3, #10]
 8015996:	67bb      	str	r3, [r7, #120]	; 0x78
 8015998:	e01c      	b.n	80159d4 <f_mkdir+0x1ec>
					fs->winsect = dsc++;
 801599a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801599c:	1c5a      	adds	r2, r3, #1
 801599e:	677a      	str	r2, [r7, #116]	; 0x74
 80159a0:	68fa      	ldr	r2, [r7, #12]
 80159a2:	64d3      	str	r3, [r2, #76]	; 0x4c
					fs->wflag = 1;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2201      	movs	r2, #1
 80159a8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	4618      	mov	r0, r3
 80159ae:	f7fb f83f 	bl	8010a30 <sync_window>
 80159b2:	4603      	mov	r3, r0
 80159b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					if (res != FR_OK) break;
 80159b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d10d      	bne.n	80159dc <f_mkdir+0x1f4>
					mem_set(dir, 0, SS(fs));
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	899b      	ldrh	r3, [r3, #12]
 80159c4:	461a      	mov	r2, r3
 80159c6:	2100      	movs	r1, #0
 80159c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80159ca:	f7fa fe37 	bl	801063c <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80159ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80159d0:	3b01      	subs	r3, #1
 80159d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80159d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d1df      	bne.n	801599a <f_mkdir+0x1b2>
 80159da:	e000      	b.n	80159de <f_mkdir+0x1f6>
					if (res != FR_OK) break;
 80159dc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80159de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d107      	bne.n	80159f6 <f_mkdir+0x20e>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80159e6:	f107 0310 	add.w	r3, r7, #16
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7fc ff84 	bl	80128f8 <dir_register>
 80159f0:	4603      	mov	r3, r0
 80159f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			if (res == FR_OK) {
 80159f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d159      	bne.n	8015ab2 <f_mkdir+0x2ca>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	781b      	ldrb	r3, [r3, #0]
 8015a02:	2b04      	cmp	r3, #4
 8015a04:	d134      	bne.n	8015a70 <f_mkdir+0x288>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	695b      	ldr	r3, [r3, #20]
 8015a0a:	330c      	adds	r3, #12
 8015a0c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f7fa fd3f 	bl	8010492 <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	695b      	ldr	r3, [r3, #20]
 8015a18:	3334      	adds	r3, #52	; 0x34
 8015a1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f7fa fd38 	bl	8010492 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	695b      	ldr	r3, [r3, #20]
 8015a26:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015a2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015a2e:	4613      	mov	r3, r2
 8015a30:	4619      	mov	r1, r3
 8015a32:	f7fa fd2e 	bl	8010492 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	695b      	ldr	r3, [r3, #20]
 8015a3a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8015a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015a42:	4613      	mov	r3, r2
 8015a44:	4619      	mov	r1, r3
 8015a46:	f7fa fd24 	bl	8010492 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	695b      	ldr	r3, [r3, #20]
 8015a4e:	3321      	adds	r3, #33	; 0x21
 8015a50:	2203      	movs	r2, #3
 8015a52:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	695b      	ldr	r3, [r3, #20]
 8015a58:	3304      	adds	r3, #4
 8015a5a:	2210      	movs	r2, #16
 8015a5c:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8015a5e:	f107 0310 	add.w	r3, r7, #16
 8015a62:	4618      	mov	r0, r3
 8015a64:	f7fc fc96 	bl	8012394 <store_xdir>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8015a6e:	e014      	b.n	8015a9a <f_mkdir+0x2b2>
				} else
#endif
				{
					dir = dj.dir;
 8015a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a72:	663b      	str	r3, [r7, #96]	; 0x60
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015a76:	3316      	adds	r3, #22
 8015a78:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f7fa fd09 	bl	8010492 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015a84:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7fc f89c 	bl	8011bc4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015a8e:	330b      	adds	r3, #11
 8015a90:	2210      	movs	r2, #16
 8015a92:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	2201      	movs	r2, #1
 8015a98:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8015a9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d10e      	bne.n	8015ac0 <f_mkdir+0x2d8>
					res = sync_fs(fs);
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7fb f835 	bl	8010b14 <sync_fs>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8015ab0:	e006      	b.n	8015ac0 <f_mkdir+0x2d8>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015ab2:	f107 0310 	add.w	r3, r7, #16
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7fb fc8c 	bl	80113d8 <remove_chain>
			}
		}
		FREE_NAMBUF();
 8015ac0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8015ac2:	f000 f986 	bl	8015dd2 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8015acc:	4611      	mov	r1, r2
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7fa fe27 	bl	8010722 <unlock_fs>
 8015ad4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3780      	adds	r7, #128	; 0x80
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bdb0      	pop	{r4, r5, r7, pc}

08015ae0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015ae0:	b480      	push	{r7}
 8015ae2:	b087      	sub	sp, #28
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	60f8      	str	r0, [r7, #12]
 8015ae8:	60b9      	str	r1, [r7, #8]
 8015aea:	4613      	mov	r3, r2
 8015aec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015aee:	2301      	movs	r3, #1
 8015af0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015af2:	2300      	movs	r3, #0
 8015af4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015af6:	4b1f      	ldr	r3, [pc, #124]	; (8015b74 <FATFS_LinkDriverEx+0x94>)
 8015af8:	7a5b      	ldrb	r3, [r3, #9]
 8015afa:	b2db      	uxtb	r3, r3
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d131      	bne.n	8015b64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015b00:	4b1c      	ldr	r3, [pc, #112]	; (8015b74 <FATFS_LinkDriverEx+0x94>)
 8015b02:	7a5b      	ldrb	r3, [r3, #9]
 8015b04:	b2db      	uxtb	r3, r3
 8015b06:	461a      	mov	r2, r3
 8015b08:	4b1a      	ldr	r3, [pc, #104]	; (8015b74 <FATFS_LinkDriverEx+0x94>)
 8015b0a:	2100      	movs	r1, #0
 8015b0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015b0e:	4b19      	ldr	r3, [pc, #100]	; (8015b74 <FATFS_LinkDriverEx+0x94>)
 8015b10:	7a5b      	ldrb	r3, [r3, #9]
 8015b12:	b2db      	uxtb	r3, r3
 8015b14:	4a17      	ldr	r2, [pc, #92]	; (8015b74 <FATFS_LinkDriverEx+0x94>)
 8015b16:	009b      	lsls	r3, r3, #2
 8015b18:	4413      	add	r3, r2
 8015b1a:	68fa      	ldr	r2, [r7, #12]
 8015b1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015b1e:	4b15      	ldr	r3, [pc, #84]	; (8015b74 <FATFS_LinkDriverEx+0x94>)
 8015b20:	7a5b      	ldrb	r3, [r3, #9]
 8015b22:	b2db      	uxtb	r3, r3
 8015b24:	461a      	mov	r2, r3
 8015b26:	4b13      	ldr	r3, [pc, #76]	; (8015b74 <FATFS_LinkDriverEx+0x94>)
 8015b28:	4413      	add	r3, r2
 8015b2a:	79fa      	ldrb	r2, [r7, #7]
 8015b2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015b2e:	4b11      	ldr	r3, [pc, #68]	; (8015b74 <FATFS_LinkDriverEx+0x94>)
 8015b30:	7a5b      	ldrb	r3, [r3, #9]
 8015b32:	b2db      	uxtb	r3, r3
 8015b34:	1c5a      	adds	r2, r3, #1
 8015b36:	b2d1      	uxtb	r1, r2
 8015b38:	4a0e      	ldr	r2, [pc, #56]	; (8015b74 <FATFS_LinkDriverEx+0x94>)
 8015b3a:	7251      	strb	r1, [r2, #9]
 8015b3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015b3e:	7dbb      	ldrb	r3, [r7, #22]
 8015b40:	3330      	adds	r3, #48	; 0x30
 8015b42:	b2da      	uxtb	r2, r3
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	3301      	adds	r3, #1
 8015b4c:	223a      	movs	r2, #58	; 0x3a
 8015b4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	3302      	adds	r3, #2
 8015b54:	222f      	movs	r2, #47	; 0x2f
 8015b56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	3303      	adds	r3, #3
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015b60:	2300      	movs	r3, #0
 8015b62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	371c      	adds	r7, #28
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b70:	4770      	bx	lr
 8015b72:	bf00      	nop
 8015b74:	24002c20 	.word	0x24002c20

08015b78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b082      	sub	sp, #8
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
 8015b80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015b82:	2200      	movs	r2, #0
 8015b84:	6839      	ldr	r1, [r7, #0]
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f7ff ffaa 	bl	8015ae0 <FATFS_LinkDriverEx>
 8015b8c:	4603      	mov	r3, r0
}
 8015b8e:	4618      	mov	r0, r3
 8015b90:	3708      	adds	r7, #8
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
	...

08015b98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015b98:	b480      	push	{r7}
 8015b9a:	b085      	sub	sp, #20
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	6039      	str	r1, [r7, #0]
 8015ba2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8015ba4:	88fb      	ldrh	r3, [r7, #6]
 8015ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8015ba8:	d802      	bhi.n	8015bb0 <ff_convert+0x18>
		c = chr;
 8015baa:	88fb      	ldrh	r3, [r7, #6]
 8015bac:	81fb      	strh	r3, [r7, #14]
 8015bae:	e025      	b.n	8015bfc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8015bb0:	683b      	ldr	r3, [r7, #0]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d00b      	beq.n	8015bce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015bb6:	88fb      	ldrh	r3, [r7, #6]
 8015bb8:	2bff      	cmp	r3, #255	; 0xff
 8015bba:	d805      	bhi.n	8015bc8 <ff_convert+0x30>
 8015bbc:	88fb      	ldrh	r3, [r7, #6]
 8015bbe:	3b80      	subs	r3, #128	; 0x80
 8015bc0:	4a12      	ldr	r2, [pc, #72]	; (8015c0c <ff_convert+0x74>)
 8015bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015bc6:	e000      	b.n	8015bca <ff_convert+0x32>
 8015bc8:	2300      	movs	r3, #0
 8015bca:	81fb      	strh	r3, [r7, #14]
 8015bcc:	e016      	b.n	8015bfc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8015bce:	2300      	movs	r3, #0
 8015bd0:	81fb      	strh	r3, [r7, #14]
 8015bd2:	e009      	b.n	8015be8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8015bd4:	89fb      	ldrh	r3, [r7, #14]
 8015bd6:	4a0d      	ldr	r2, [pc, #52]	; (8015c0c <ff_convert+0x74>)
 8015bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015bdc:	88fa      	ldrh	r2, [r7, #6]
 8015bde:	429a      	cmp	r2, r3
 8015be0:	d006      	beq.n	8015bf0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8015be2:	89fb      	ldrh	r3, [r7, #14]
 8015be4:	3301      	adds	r3, #1
 8015be6:	81fb      	strh	r3, [r7, #14]
 8015be8:	89fb      	ldrh	r3, [r7, #14]
 8015bea:	2b7f      	cmp	r3, #127	; 0x7f
 8015bec:	d9f2      	bls.n	8015bd4 <ff_convert+0x3c>
 8015bee:	e000      	b.n	8015bf2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015bf0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8015bf2:	89fb      	ldrh	r3, [r7, #14]
 8015bf4:	3380      	adds	r3, #128	; 0x80
 8015bf6:	b29b      	uxth	r3, r3
 8015bf8:	b2db      	uxtb	r3, r3
 8015bfa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015bfc:	89fb      	ldrh	r3, [r7, #14]
}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	3714      	adds	r7, #20
 8015c02:	46bd      	mov	sp, r7
 8015c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c08:	4770      	bx	lr
 8015c0a:	bf00      	nop
 8015c0c:	0801b964 	.word	0x0801b964

08015c10 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015c10:	b480      	push	{r7}
 8015c12:	b087      	sub	sp, #28
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	4603      	mov	r3, r0
 8015c18:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015c1a:	88fb      	ldrh	r3, [r7, #6]
 8015c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015c20:	d201      	bcs.n	8015c26 <ff_wtoupper+0x16>
 8015c22:	4b3e      	ldr	r3, [pc, #248]	; (8015d1c <ff_wtoupper+0x10c>)
 8015c24:	e000      	b.n	8015c28 <ff_wtoupper+0x18>
 8015c26:	4b3e      	ldr	r3, [pc, #248]	; (8015d20 <ff_wtoupper+0x110>)
 8015c28:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8015c2a:	697b      	ldr	r3, [r7, #20]
 8015c2c:	1c9a      	adds	r2, r3, #2
 8015c2e:	617a      	str	r2, [r7, #20]
 8015c30:	881b      	ldrh	r3, [r3, #0]
 8015c32:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8015c34:	8a7b      	ldrh	r3, [r7, #18]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d068      	beq.n	8015d0c <ff_wtoupper+0xfc>
 8015c3a:	88fa      	ldrh	r2, [r7, #6]
 8015c3c:	8a7b      	ldrh	r3, [r7, #18]
 8015c3e:	429a      	cmp	r2, r3
 8015c40:	d364      	bcc.n	8015d0c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8015c42:	697b      	ldr	r3, [r7, #20]
 8015c44:	1c9a      	adds	r2, r3, #2
 8015c46:	617a      	str	r2, [r7, #20]
 8015c48:	881b      	ldrh	r3, [r3, #0]
 8015c4a:	823b      	strh	r3, [r7, #16]
 8015c4c:	8a3b      	ldrh	r3, [r7, #16]
 8015c4e:	0a1b      	lsrs	r3, r3, #8
 8015c50:	81fb      	strh	r3, [r7, #14]
 8015c52:	8a3b      	ldrh	r3, [r7, #16]
 8015c54:	b2db      	uxtb	r3, r3
 8015c56:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015c58:	88fa      	ldrh	r2, [r7, #6]
 8015c5a:	8a79      	ldrh	r1, [r7, #18]
 8015c5c:	8a3b      	ldrh	r3, [r7, #16]
 8015c5e:	440b      	add	r3, r1
 8015c60:	429a      	cmp	r2, r3
 8015c62:	da49      	bge.n	8015cf8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8015c64:	89fb      	ldrh	r3, [r7, #14]
 8015c66:	2b08      	cmp	r3, #8
 8015c68:	d84f      	bhi.n	8015d0a <ff_wtoupper+0xfa>
 8015c6a:	a201      	add	r2, pc, #4	; (adr r2, 8015c70 <ff_wtoupper+0x60>)
 8015c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c70:	08015c95 	.word	0x08015c95
 8015c74:	08015ca7 	.word	0x08015ca7
 8015c78:	08015cbd 	.word	0x08015cbd
 8015c7c:	08015cc5 	.word	0x08015cc5
 8015c80:	08015ccd 	.word	0x08015ccd
 8015c84:	08015cd5 	.word	0x08015cd5
 8015c88:	08015cdd 	.word	0x08015cdd
 8015c8c:	08015ce5 	.word	0x08015ce5
 8015c90:	08015ced 	.word	0x08015ced
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8015c94:	88fa      	ldrh	r2, [r7, #6]
 8015c96:	8a7b      	ldrh	r3, [r7, #18]
 8015c98:	1ad3      	subs	r3, r2, r3
 8015c9a:	005b      	lsls	r3, r3, #1
 8015c9c:	697a      	ldr	r2, [r7, #20]
 8015c9e:	4413      	add	r3, r2
 8015ca0:	881b      	ldrh	r3, [r3, #0]
 8015ca2:	80fb      	strh	r3, [r7, #6]
 8015ca4:	e027      	b.n	8015cf6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8015ca6:	88fa      	ldrh	r2, [r7, #6]
 8015ca8:	8a7b      	ldrh	r3, [r7, #18]
 8015caa:	1ad3      	subs	r3, r2, r3
 8015cac:	b29b      	uxth	r3, r3
 8015cae:	f003 0301 	and.w	r3, r3, #1
 8015cb2:	b29b      	uxth	r3, r3
 8015cb4:	88fa      	ldrh	r2, [r7, #6]
 8015cb6:	1ad3      	subs	r3, r2, r3
 8015cb8:	80fb      	strh	r3, [r7, #6]
 8015cba:	e01c      	b.n	8015cf6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8015cbc:	88fb      	ldrh	r3, [r7, #6]
 8015cbe:	3b10      	subs	r3, #16
 8015cc0:	80fb      	strh	r3, [r7, #6]
 8015cc2:	e018      	b.n	8015cf6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8015cc4:	88fb      	ldrh	r3, [r7, #6]
 8015cc6:	3b20      	subs	r3, #32
 8015cc8:	80fb      	strh	r3, [r7, #6]
 8015cca:	e014      	b.n	8015cf6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015ccc:	88fb      	ldrh	r3, [r7, #6]
 8015cce:	3b30      	subs	r3, #48	; 0x30
 8015cd0:	80fb      	strh	r3, [r7, #6]
 8015cd2:	e010      	b.n	8015cf6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015cd4:	88fb      	ldrh	r3, [r7, #6]
 8015cd6:	3b1a      	subs	r3, #26
 8015cd8:	80fb      	strh	r3, [r7, #6]
 8015cda:	e00c      	b.n	8015cf6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015cdc:	88fb      	ldrh	r3, [r7, #6]
 8015cde:	3308      	adds	r3, #8
 8015ce0:	80fb      	strh	r3, [r7, #6]
 8015ce2:	e008      	b.n	8015cf6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015ce4:	88fb      	ldrh	r3, [r7, #6]
 8015ce6:	3b50      	subs	r3, #80	; 0x50
 8015ce8:	80fb      	strh	r3, [r7, #6]
 8015cea:	e004      	b.n	8015cf6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015cec:	88fb      	ldrh	r3, [r7, #6]
 8015cee:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8015cf2:	80fb      	strh	r3, [r7, #6]
 8015cf4:	bf00      	nop
			}
			break;
 8015cf6:	e008      	b.n	8015d0a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015cf8:	89fb      	ldrh	r3, [r7, #14]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d195      	bne.n	8015c2a <ff_wtoupper+0x1a>
 8015cfe:	8a3b      	ldrh	r3, [r7, #16]
 8015d00:	005b      	lsls	r3, r3, #1
 8015d02:	697a      	ldr	r2, [r7, #20]
 8015d04:	4413      	add	r3, r2
 8015d06:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8015d08:	e78f      	b.n	8015c2a <ff_wtoupper+0x1a>
			break;
 8015d0a:	bf00      	nop
	}

	return chr;
 8015d0c:	88fb      	ldrh	r3, [r7, #6]
}
 8015d0e:	4618      	mov	r0, r3
 8015d10:	371c      	adds	r7, #28
 8015d12:	46bd      	mov	sp, r7
 8015d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d18:	4770      	bx	lr
 8015d1a:	bf00      	nop
 8015d1c:	0801ba64 	.word	0x0801ba64
 8015d20:	0801bc58 	.word	0x0801bc58

08015d24 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b086      	sub	sp, #24
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	6039      	str	r1, [r7, #0]
 8015d2e:	71fb      	strb	r3, [r7, #7]

    int ret;
#if _USE_MUTEX

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
 8015d30:	2300      	movs	r3, #0
 8015d32:	60fb      	str	r3, [r7, #12]
 8015d34:	2300      	movs	r3, #0
 8015d36:	613b      	str	r3, [r7, #16]
    *sobj = osMutexCreate(osMutex(MTX));
 8015d38:	f107 030c 	add.w	r3, r7, #12
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f000 f919 	bl	8015f74 <osMutexCreate>
 8015d42:	4602      	mov	r2, r0
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	bf14      	ite	ne
 8015d50:	2301      	movne	r3, #1
 8015d52:	2300      	moveq	r3, #0
 8015d54:	b2db      	uxtb	r3, r3
 8015d56:	617b      	str	r3, [r7, #20]

    return ret;
 8015d58:	697b      	ldr	r3, [r7, #20]
}
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	3718      	adds	r7, #24
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd80      	pop	{r7, pc}

08015d62 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015d62:	b580      	push	{r7, lr}
 8015d64:	b082      	sub	sp, #8
 8015d66:	af00      	add	r7, sp, #0
 8015d68:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f000 f99e 	bl	80160ac <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 8015d70:	2301      	movs	r3, #1
}
 8015d72:	4618      	mov	r0, r3
 8015d74:	3708      	adds	r7, #8
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}

08015d7a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015d7a:	b580      	push	{r7, lr}
 8015d7c:	b084      	sub	sp, #16
 8015d7e:	af00      	add	r7, sp, #0
 8015d80:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015d82:	2300      	movs	r3, #0
 8015d84:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
 8015d86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f000 f90a 	bl	8015fa4 <osMutexWait>
 8015d90:	4603      	mov	r3, r0
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d101      	bne.n	8015d9a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8015d96:	2301      	movs	r3, #1
 8015d98:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015d9a:	68fb      	ldr	r3, [r7, #12]
}
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	3710      	adds	r7, #16
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}

08015da4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b082      	sub	sp, #8
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f000 f947 	bl	8016040 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 8015db2:	bf00      	nop
 8015db4:	3708      	adds	r7, #8
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}

08015dba <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8015dba:	b580      	push	{r7, lr}
 8015dbc:	b082      	sub	sp, #8
 8015dbe:	af00      	add	r7, sp, #0
 8015dc0:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8015dc2:	6878      	ldr	r0, [r7, #4]
 8015dc4:	f003 faf0 	bl	80193a8 <pvPortMalloc>
 8015dc8:	4603      	mov	r3, r0
}
 8015dca:	4618      	mov	r0, r3
 8015dcc:	3708      	adds	r7, #8
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	bd80      	pop	{r7, pc}

08015dd2 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8015dd2:	b580      	push	{r7, lr}
 8015dd4:	b082      	sub	sp, #8
 8015dd6:	af00      	add	r7, sp, #0
 8015dd8:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8015dda:	6878      	ldr	r0, [r7, #4]
 8015ddc:	f003 fbb0 	bl	8019540 <vPortFree>
}
 8015de0:	bf00      	nop
 8015de2:	3708      	adds	r7, #8
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}

08015de8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8015de8:	b480      	push	{r7}
 8015dea:	b085      	sub	sp, #20
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	4603      	mov	r3, r0
 8015df0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8015df2:	2300      	movs	r3, #0
 8015df4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8015df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015dfa:	2b84      	cmp	r3, #132	; 0x84
 8015dfc:	d005      	beq.n	8015e0a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8015dfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	4413      	add	r3, r2
 8015e06:	3303      	adds	r3, #3
 8015e08:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
}
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	3714      	adds	r7, #20
 8015e10:	46bd      	mov	sp, r7
 8015e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e16:	4770      	bx	lr

08015e18 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8015e18:	b480      	push	{r7}
 8015e1a:	b083      	sub	sp, #12
 8015e1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e1e:	f3ef 8305 	mrs	r3, IPSR
 8015e22:	607b      	str	r3, [r7, #4]
  return(result);
 8015e24:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	bf14      	ite	ne
 8015e2a:	2301      	movne	r3, #1
 8015e2c:	2300      	moveq	r3, #0
 8015e2e:	b2db      	uxtb	r3, r3
}
 8015e30:	4618      	mov	r0, r3
 8015e32:	370c      	adds	r7, #12
 8015e34:	46bd      	mov	sp, r7
 8015e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3a:	4770      	bx	lr

08015e3c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8015e40:	f001 fd42 	bl	80178c8 <vTaskStartScheduler>
  
  return osOK;
 8015e44:	2300      	movs	r3, #0
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	bd80      	pop	{r7, pc}

08015e4a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8015e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e4c:	b089      	sub	sp, #36	; 0x24
 8015e4e:	af04      	add	r7, sp, #16
 8015e50:	6078      	str	r0, [r7, #4]
 8015e52:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	695b      	ldr	r3, [r3, #20]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d020      	beq.n	8015e9e <osThreadCreate+0x54>
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	699b      	ldr	r3, [r3, #24]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d01c      	beq.n	8015e9e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	685c      	ldr	r4, [r3, #4]
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	681d      	ldr	r5, [r3, #0]
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	691e      	ldr	r6, [r3, #16]
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015e76:	4618      	mov	r0, r3
 8015e78:	f7ff ffb6 	bl	8015de8 <makeFreeRtosPriority>
 8015e7c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	695b      	ldr	r3, [r3, #20]
 8015e82:	687a      	ldr	r2, [r7, #4]
 8015e84:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015e86:	9202      	str	r2, [sp, #8]
 8015e88:	9301      	str	r3, [sp, #4]
 8015e8a:	9100      	str	r1, [sp, #0]
 8015e8c:	683b      	ldr	r3, [r7, #0]
 8015e8e:	4632      	mov	r2, r6
 8015e90:	4629      	mov	r1, r5
 8015e92:	4620      	mov	r0, r4
 8015e94:	f001 fb50 	bl	8017538 <xTaskCreateStatic>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	60fb      	str	r3, [r7, #12]
 8015e9c:	e01c      	b.n	8015ed8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	685c      	ldr	r4, [r3, #4]
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015eaa:	b29e      	uxth	r6, r3
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	f7ff ff98 	bl	8015de8 <makeFreeRtosPriority>
 8015eb8:	4602      	mov	r2, r0
 8015eba:	f107 030c 	add.w	r3, r7, #12
 8015ebe:	9301      	str	r3, [sp, #4]
 8015ec0:	9200      	str	r2, [sp, #0]
 8015ec2:	683b      	ldr	r3, [r7, #0]
 8015ec4:	4632      	mov	r2, r6
 8015ec6:	4629      	mov	r1, r5
 8015ec8:	4620      	mov	r0, r4
 8015eca:	f001 fb92 	bl	80175f2 <xTaskCreate>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	2b01      	cmp	r3, #1
 8015ed2:	d001      	beq.n	8015ed8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	e000      	b.n	8015eda <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8015ed8:	68fb      	ldr	r3, [r7, #12]
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3714      	adds	r7, #20
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ee2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8015ee2:	b580      	push	{r7, lr}
 8015ee4:	b084      	sub	sp, #16
 8015ee6:	af00      	add	r7, sp, #0
 8015ee8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d001      	beq.n	8015ef8 <osDelay+0x16>
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	e000      	b.n	8015efa <osDelay+0x18>
 8015ef8:	2301      	movs	r3, #1
 8015efa:	4618      	mov	r0, r3
 8015efc:	f001 fcb0 	bl	8017860 <vTaskDelay>
  
  return osOK;
 8015f00:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	3710      	adds	r7, #16
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}
	...

08015f0c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b086      	sub	sp, #24
 8015f10:	af02      	add	r7, sp, #8
 8015f12:	60f8      	str	r0, [r7, #12]
 8015f14:	460b      	mov	r3, r1
 8015f16:	607a      	str	r2, [r7, #4]
 8015f18:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d013      	beq.n	8015f4a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8015f22:	7afb      	ldrb	r3, [r7, #11]
 8015f24:	2b01      	cmp	r3, #1
 8015f26:	d101      	bne.n	8015f2c <osTimerCreate+0x20>
 8015f28:	2101      	movs	r1, #1
 8015f2a:	e000      	b.n	8015f2e <osTimerCreate+0x22>
 8015f2c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8015f32:	68fa      	ldr	r2, [r7, #12]
 8015f34:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8015f36:	9201      	str	r2, [sp, #4]
 8015f38:	9300      	str	r3, [sp, #0]
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	460a      	mov	r2, r1
 8015f3e:	2101      	movs	r1, #1
 8015f40:	480b      	ldr	r0, [pc, #44]	; (8015f70 <osTimerCreate+0x64>)
 8015f42:	f002 fc66 	bl	8018812 <xTimerCreateStatic>
 8015f46:	4603      	mov	r3, r0
 8015f48:	e00e      	b.n	8015f68 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8015f4a:	7afb      	ldrb	r3, [r7, #11]
 8015f4c:	2b01      	cmp	r3, #1
 8015f4e:	d101      	bne.n	8015f54 <osTimerCreate+0x48>
 8015f50:	2201      	movs	r2, #1
 8015f52:	e000      	b.n	8015f56 <osTimerCreate+0x4a>
 8015f54:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8015f5a:	9300      	str	r3, [sp, #0]
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2101      	movs	r1, #1
 8015f60:	4803      	ldr	r0, [pc, #12]	; (8015f70 <osTimerCreate+0x64>)
 8015f62:	f002 fc35 	bl	80187d0 <xTimerCreate>
 8015f66:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3710      	adds	r7, #16
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}
 8015f70:	0801b820 	.word	0x0801b820

08015f74 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b082      	sub	sp, #8
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	685b      	ldr	r3, [r3, #4]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d007      	beq.n	8015f94 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	685b      	ldr	r3, [r3, #4]
 8015f88:	4619      	mov	r1, r3
 8015f8a:	2001      	movs	r0, #1
 8015f8c:	f000 fc53 	bl	8016836 <xQueueCreateMutexStatic>
 8015f90:	4603      	mov	r3, r0
 8015f92:	e003      	b.n	8015f9c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8015f94:	2001      	movs	r0, #1
 8015f96:	f000 fc36 	bl	8016806 <xQueueCreateMutex>
 8015f9a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3708      	adds	r7, #8
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}

08015fa4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b084      	sub	sp, #16
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
 8015fac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8015fae:	2300      	movs	r3, #0
 8015fb0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d101      	bne.n	8015fbc <osMutexWait+0x18>
    return osErrorParameter;
 8015fb8:	2380      	movs	r3, #128	; 0x80
 8015fba:	e03a      	b.n	8016032 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8015fc0:	683b      	ldr	r3, [r7, #0]
 8015fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015fc6:	d103      	bne.n	8015fd0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8015fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015fcc:	60fb      	str	r3, [r7, #12]
 8015fce:	e009      	b.n	8015fe4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d006      	beq.n	8015fe4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d101      	bne.n	8015fe4 <osMutexWait+0x40>
      ticks = 1;
 8015fe0:	2301      	movs	r3, #1
 8015fe2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8015fe4:	f7ff ff18 	bl	8015e18 <inHandlerMode>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d017      	beq.n	801601e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8015fee:	f107 0308 	add.w	r3, r7, #8
 8015ff2:	461a      	mov	r2, r3
 8015ff4:	2100      	movs	r1, #0
 8015ff6:	6878      	ldr	r0, [r7, #4]
 8015ff8:	f001 f84a 	bl	8017090 <xQueueReceiveFromISR>
 8015ffc:	4603      	mov	r3, r0
 8015ffe:	2b01      	cmp	r3, #1
 8016000:	d001      	beq.n	8016006 <osMutexWait+0x62>
      return osErrorOS;
 8016002:	23ff      	movs	r3, #255	; 0xff
 8016004:	e015      	b.n	8016032 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8016006:	68bb      	ldr	r3, [r7, #8]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d011      	beq.n	8016030 <osMutexWait+0x8c>
 801600c:	4b0b      	ldr	r3, [pc, #44]	; (801603c <osMutexWait+0x98>)
 801600e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016012:	601a      	str	r2, [r3, #0]
 8016014:	f3bf 8f4f 	dsb	sy
 8016018:	f3bf 8f6f 	isb	sy
 801601c:	e008      	b.n	8016030 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 801601e:	68f9      	ldr	r1, [r7, #12]
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f000 ff29 	bl	8016e78 <xQueueSemaphoreTake>
 8016026:	4603      	mov	r3, r0
 8016028:	2b01      	cmp	r3, #1
 801602a:	d001      	beq.n	8016030 <osMutexWait+0x8c>
    return osErrorOS;
 801602c:	23ff      	movs	r3, #255	; 0xff
 801602e:	e000      	b.n	8016032 <osMutexWait+0x8e>
  }
  
  return osOK;
 8016030:	2300      	movs	r3, #0
}
 8016032:	4618      	mov	r0, r3
 8016034:	3710      	adds	r7, #16
 8016036:	46bd      	mov	sp, r7
 8016038:	bd80      	pop	{r7, pc}
 801603a:	bf00      	nop
 801603c:	e000ed04 	.word	0xe000ed04

08016040 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b084      	sub	sp, #16
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8016048:	2300      	movs	r3, #0
 801604a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801604c:	2300      	movs	r3, #0
 801604e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8016050:	f7ff fee2 	bl	8015e18 <inHandlerMode>
 8016054:	4603      	mov	r3, r0
 8016056:	2b00      	cmp	r3, #0
 8016058:	d016      	beq.n	8016088 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801605a:	f107 0308 	add.w	r3, r7, #8
 801605e:	4619      	mov	r1, r3
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f000 fd9c 	bl	8016b9e <xQueueGiveFromISR>
 8016066:	4603      	mov	r3, r0
 8016068:	2b01      	cmp	r3, #1
 801606a:	d001      	beq.n	8016070 <osMutexRelease+0x30>
      return osErrorOS;
 801606c:	23ff      	movs	r3, #255	; 0xff
 801606e:	e017      	b.n	80160a0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d013      	beq.n	801609e <osMutexRelease+0x5e>
 8016076:	4b0c      	ldr	r3, [pc, #48]	; (80160a8 <osMutexRelease+0x68>)
 8016078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801607c:	601a      	str	r2, [r3, #0]
 801607e:	f3bf 8f4f 	dsb	sy
 8016082:	f3bf 8f6f 	isb	sy
 8016086:	e00a      	b.n	801609e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8016088:	2300      	movs	r3, #0
 801608a:	2200      	movs	r2, #0
 801608c:	2100      	movs	r1, #0
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f000 fbec 	bl	801686c <xQueueGenericSend>
 8016094:	4603      	mov	r3, r0
 8016096:	2b01      	cmp	r3, #1
 8016098:	d001      	beq.n	801609e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 801609a:	23ff      	movs	r3, #255	; 0xff
 801609c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801609e:	68fb      	ldr	r3, [r7, #12]
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	3710      	adds	r7, #16
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}
 80160a8:	e000ed04 	.word	0xe000ed04

080160ac <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b082      	sub	sp, #8
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80160b4:	f7ff feb0 	bl	8015e18 <inHandlerMode>
 80160b8:	4603      	mov	r3, r0
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d001      	beq.n	80160c2 <osMutexDelete+0x16>
    return osErrorISR;
 80160be:	2382      	movs	r3, #130	; 0x82
 80160c0:	e003      	b.n	80160ca <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 80160c2:	6878      	ldr	r0, [r7, #4]
 80160c4:	f001 f864 	bl	8017190 <vQueueDelete>

  return osOK;
 80160c8:	2300      	movs	r3, #0
}
 80160ca:	4618      	mov	r0, r3
 80160cc:	3708      	adds	r7, #8
 80160ce:	46bd      	mov	sp, r7
 80160d0:	bd80      	pop	{r7, pc}

080160d2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80160d2:	b580      	push	{r7, lr}
 80160d4:	b086      	sub	sp, #24
 80160d6:	af02      	add	r7, sp, #8
 80160d8:	6078      	str	r0, [r7, #4]
 80160da:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	685b      	ldr	r3, [r3, #4]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d00f      	beq.n	8016104 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80160e4:	683b      	ldr	r3, [r7, #0]
 80160e6:	2b01      	cmp	r3, #1
 80160e8:	d10a      	bne.n	8016100 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	685b      	ldr	r3, [r3, #4]
 80160ee:	2203      	movs	r2, #3
 80160f0:	9200      	str	r2, [sp, #0]
 80160f2:	2200      	movs	r2, #0
 80160f4:	2100      	movs	r1, #0
 80160f6:	2001      	movs	r0, #1
 80160f8:	f000 fa9a 	bl	8016630 <xQueueGenericCreateStatic>
 80160fc:	4603      	mov	r3, r0
 80160fe:	e016      	b.n	801612e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8016100:	2300      	movs	r3, #0
 8016102:	e014      	b.n	801612e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8016104:	683b      	ldr	r3, [r7, #0]
 8016106:	2b01      	cmp	r3, #1
 8016108:	d110      	bne.n	801612c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 801610a:	2203      	movs	r2, #3
 801610c:	2100      	movs	r1, #0
 801610e:	2001      	movs	r0, #1
 8016110:	f000 fb06 	bl	8016720 <xQueueGenericCreate>
 8016114:	60f8      	str	r0, [r7, #12]
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d005      	beq.n	8016128 <osSemaphoreCreate+0x56>
 801611c:	2300      	movs	r3, #0
 801611e:	2200      	movs	r2, #0
 8016120:	2100      	movs	r1, #0
 8016122:	68f8      	ldr	r0, [r7, #12]
 8016124:	f000 fba2 	bl	801686c <xQueueGenericSend>
      return sema;
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	e000      	b.n	801612e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 801612c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 801612e:	4618      	mov	r0, r3
 8016130:	3710      	adds	r7, #16
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}
	...

08016138 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b084      	sub	sp, #16
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
 8016140:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8016142:	2300      	movs	r3, #0
 8016144:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d101      	bne.n	8016150 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801614c:	2380      	movs	r3, #128	; 0x80
 801614e:	e03a      	b.n	80161c6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8016150:	2300      	movs	r3, #0
 8016152:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8016154:	683b      	ldr	r3, [r7, #0]
 8016156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801615a:	d103      	bne.n	8016164 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801615c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016160:	60fb      	str	r3, [r7, #12]
 8016162:	e009      	b.n	8016178 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d006      	beq.n	8016178 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d101      	bne.n	8016178 <osSemaphoreWait+0x40>
      ticks = 1;
 8016174:	2301      	movs	r3, #1
 8016176:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8016178:	f7ff fe4e 	bl	8015e18 <inHandlerMode>
 801617c:	4603      	mov	r3, r0
 801617e:	2b00      	cmp	r3, #0
 8016180:	d017      	beq.n	80161b2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8016182:	f107 0308 	add.w	r3, r7, #8
 8016186:	461a      	mov	r2, r3
 8016188:	2100      	movs	r1, #0
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f000 ff80 	bl	8017090 <xQueueReceiveFromISR>
 8016190:	4603      	mov	r3, r0
 8016192:	2b01      	cmp	r3, #1
 8016194:	d001      	beq.n	801619a <osSemaphoreWait+0x62>
      return osErrorOS;
 8016196:	23ff      	movs	r3, #255	; 0xff
 8016198:	e015      	b.n	80161c6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801619a:	68bb      	ldr	r3, [r7, #8]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d011      	beq.n	80161c4 <osSemaphoreWait+0x8c>
 80161a0:	4b0b      	ldr	r3, [pc, #44]	; (80161d0 <osSemaphoreWait+0x98>)
 80161a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161a6:	601a      	str	r2, [r3, #0]
 80161a8:	f3bf 8f4f 	dsb	sy
 80161ac:	f3bf 8f6f 	isb	sy
 80161b0:	e008      	b.n	80161c4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80161b2:	68f9      	ldr	r1, [r7, #12]
 80161b4:	6878      	ldr	r0, [r7, #4]
 80161b6:	f000 fe5f 	bl	8016e78 <xQueueSemaphoreTake>
 80161ba:	4603      	mov	r3, r0
 80161bc:	2b01      	cmp	r3, #1
 80161be:	d001      	beq.n	80161c4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80161c0:	23ff      	movs	r3, #255	; 0xff
 80161c2:	e000      	b.n	80161c6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80161c4:	2300      	movs	r3, #0
}
 80161c6:	4618      	mov	r0, r3
 80161c8:	3710      	adds	r7, #16
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd80      	pop	{r7, pc}
 80161ce:	bf00      	nop
 80161d0:	e000ed04 	.word	0xe000ed04

080161d4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b084      	sub	sp, #16
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80161dc:	2300      	movs	r3, #0
 80161de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80161e0:	2300      	movs	r3, #0
 80161e2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80161e4:	f7ff fe18 	bl	8015e18 <inHandlerMode>
 80161e8:	4603      	mov	r3, r0
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d016      	beq.n	801621c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80161ee:	f107 0308 	add.w	r3, r7, #8
 80161f2:	4619      	mov	r1, r3
 80161f4:	6878      	ldr	r0, [r7, #4]
 80161f6:	f000 fcd2 	bl	8016b9e <xQueueGiveFromISR>
 80161fa:	4603      	mov	r3, r0
 80161fc:	2b01      	cmp	r3, #1
 80161fe:	d001      	beq.n	8016204 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8016200:	23ff      	movs	r3, #255	; 0xff
 8016202:	e017      	b.n	8016234 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016204:	68bb      	ldr	r3, [r7, #8]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d013      	beq.n	8016232 <osSemaphoreRelease+0x5e>
 801620a:	4b0c      	ldr	r3, [pc, #48]	; (801623c <osSemaphoreRelease+0x68>)
 801620c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016210:	601a      	str	r2, [r3, #0]
 8016212:	f3bf 8f4f 	dsb	sy
 8016216:	f3bf 8f6f 	isb	sy
 801621a:	e00a      	b.n	8016232 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801621c:	2300      	movs	r3, #0
 801621e:	2200      	movs	r2, #0
 8016220:	2100      	movs	r1, #0
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	f000 fb22 	bl	801686c <xQueueGenericSend>
 8016228:	4603      	mov	r3, r0
 801622a:	2b01      	cmp	r3, #1
 801622c:	d001      	beq.n	8016232 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801622e:	23ff      	movs	r3, #255	; 0xff
 8016230:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8016232:	68fb      	ldr	r3, [r7, #12]
}
 8016234:	4618      	mov	r0, r3
 8016236:	3710      	adds	r7, #16
 8016238:	46bd      	mov	sp, r7
 801623a:	bd80      	pop	{r7, pc}
 801623c:	e000ed04 	.word	0xe000ed04

08016240 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8016240:	b590      	push	{r4, r7, lr}
 8016242:	b085      	sub	sp, #20
 8016244:	af02      	add	r7, sp, #8
 8016246:	6078      	str	r0, [r7, #4]
 8016248:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	689b      	ldr	r3, [r3, #8]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d011      	beq.n	8016276 <osMessageCreate+0x36>
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	68db      	ldr	r3, [r3, #12]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d00d      	beq.n	8016276 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	6818      	ldr	r0, [r3, #0]
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	6859      	ldr	r1, [r3, #4]
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	689a      	ldr	r2, [r3, #8]
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	68db      	ldr	r3, [r3, #12]
 801626a:	2400      	movs	r4, #0
 801626c:	9400      	str	r4, [sp, #0]
 801626e:	f000 f9df 	bl	8016630 <xQueueGenericCreateStatic>
 8016272:	4603      	mov	r3, r0
 8016274:	e008      	b.n	8016288 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	6818      	ldr	r0, [r3, #0]
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	685b      	ldr	r3, [r3, #4]
 801627e:	2200      	movs	r2, #0
 8016280:	4619      	mov	r1, r3
 8016282:	f000 fa4d 	bl	8016720 <xQueueGenericCreate>
 8016286:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8016288:	4618      	mov	r0, r3
 801628a:	370c      	adds	r7, #12
 801628c:	46bd      	mov	sp, r7
 801628e:	bd90      	pop	{r4, r7, pc}

08016290 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b086      	sub	sp, #24
 8016294:	af00      	add	r7, sp, #0
 8016296:	60f8      	str	r0, [r7, #12]
 8016298:	60b9      	str	r1, [r7, #8]
 801629a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801629c:	2300      	movs	r3, #0
 801629e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80162a4:	697b      	ldr	r3, [r7, #20]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d101      	bne.n	80162ae <osMessagePut+0x1e>
    ticks = 1;
 80162aa:	2301      	movs	r3, #1
 80162ac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80162ae:	f7ff fdb3 	bl	8015e18 <inHandlerMode>
 80162b2:	4603      	mov	r3, r0
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d018      	beq.n	80162ea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80162b8:	f107 0210 	add.w	r2, r7, #16
 80162bc:	f107 0108 	add.w	r1, r7, #8
 80162c0:	2300      	movs	r3, #0
 80162c2:	68f8      	ldr	r0, [r7, #12]
 80162c4:	f000 fbd0 	bl	8016a68 <xQueueGenericSendFromISR>
 80162c8:	4603      	mov	r3, r0
 80162ca:	2b01      	cmp	r3, #1
 80162cc:	d001      	beq.n	80162d2 <osMessagePut+0x42>
      return osErrorOS;
 80162ce:	23ff      	movs	r3, #255	; 0xff
 80162d0:	e018      	b.n	8016304 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80162d2:	693b      	ldr	r3, [r7, #16]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d014      	beq.n	8016302 <osMessagePut+0x72>
 80162d8:	4b0c      	ldr	r3, [pc, #48]	; (801630c <osMessagePut+0x7c>)
 80162da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162de:	601a      	str	r2, [r3, #0]
 80162e0:	f3bf 8f4f 	dsb	sy
 80162e4:	f3bf 8f6f 	isb	sy
 80162e8:	e00b      	b.n	8016302 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80162ea:	f107 0108 	add.w	r1, r7, #8
 80162ee:	2300      	movs	r3, #0
 80162f0:	697a      	ldr	r2, [r7, #20]
 80162f2:	68f8      	ldr	r0, [r7, #12]
 80162f4:	f000 faba 	bl	801686c <xQueueGenericSend>
 80162f8:	4603      	mov	r3, r0
 80162fa:	2b01      	cmp	r3, #1
 80162fc:	d001      	beq.n	8016302 <osMessagePut+0x72>
      return osErrorOS;
 80162fe:	23ff      	movs	r3, #255	; 0xff
 8016300:	e000      	b.n	8016304 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8016302:	2300      	movs	r3, #0
}
 8016304:	4618      	mov	r0, r3
 8016306:	3718      	adds	r7, #24
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}
 801630c:	e000ed04 	.word	0xe000ed04

08016310 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8016310:	b590      	push	{r4, r7, lr}
 8016312:	b08b      	sub	sp, #44	; 0x2c
 8016314:	af00      	add	r7, sp, #0
 8016316:	60f8      	str	r0, [r7, #12]
 8016318:	60b9      	str	r1, [r7, #8]
 801631a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8016320:	2300      	movs	r3, #0
 8016322:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8016324:	68bb      	ldr	r3, [r7, #8]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d10a      	bne.n	8016340 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801632a:	2380      	movs	r3, #128	; 0x80
 801632c:	617b      	str	r3, [r7, #20]
    return event;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	461c      	mov	r4, r3
 8016332:	f107 0314 	add.w	r3, r7, #20
 8016336:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801633a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801633e:	e054      	b.n	80163ea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8016340:	2300      	movs	r3, #0
 8016342:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8016344:	2300      	movs	r3, #0
 8016346:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801634e:	d103      	bne.n	8016358 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8016350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016354:	627b      	str	r3, [r7, #36]	; 0x24
 8016356:	e009      	b.n	801636c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d006      	beq.n	801636c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8016362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016364:	2b00      	cmp	r3, #0
 8016366:	d101      	bne.n	801636c <osMessageGet+0x5c>
      ticks = 1;
 8016368:	2301      	movs	r3, #1
 801636a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801636c:	f7ff fd54 	bl	8015e18 <inHandlerMode>
 8016370:	4603      	mov	r3, r0
 8016372:	2b00      	cmp	r3, #0
 8016374:	d01c      	beq.n	80163b0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8016376:	f107 0220 	add.w	r2, r7, #32
 801637a:	f107 0314 	add.w	r3, r7, #20
 801637e:	3304      	adds	r3, #4
 8016380:	4619      	mov	r1, r3
 8016382:	68b8      	ldr	r0, [r7, #8]
 8016384:	f000 fe84 	bl	8017090 <xQueueReceiveFromISR>
 8016388:	4603      	mov	r3, r0
 801638a:	2b01      	cmp	r3, #1
 801638c:	d102      	bne.n	8016394 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801638e:	2310      	movs	r3, #16
 8016390:	617b      	str	r3, [r7, #20]
 8016392:	e001      	b.n	8016398 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8016394:	2300      	movs	r3, #0
 8016396:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016398:	6a3b      	ldr	r3, [r7, #32]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d01d      	beq.n	80163da <osMessageGet+0xca>
 801639e:	4b15      	ldr	r3, [pc, #84]	; (80163f4 <osMessageGet+0xe4>)
 80163a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163a4:	601a      	str	r2, [r3, #0]
 80163a6:	f3bf 8f4f 	dsb	sy
 80163aa:	f3bf 8f6f 	isb	sy
 80163ae:	e014      	b.n	80163da <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80163b0:	f107 0314 	add.w	r3, r7, #20
 80163b4:	3304      	adds	r3, #4
 80163b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163b8:	4619      	mov	r1, r3
 80163ba:	68b8      	ldr	r0, [r7, #8]
 80163bc:	f000 fc7c 	bl	8016cb8 <xQueueReceive>
 80163c0:	4603      	mov	r3, r0
 80163c2:	2b01      	cmp	r3, #1
 80163c4:	d102      	bne.n	80163cc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80163c6:	2310      	movs	r3, #16
 80163c8:	617b      	str	r3, [r7, #20]
 80163ca:	e006      	b.n	80163da <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80163cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d101      	bne.n	80163d6 <osMessageGet+0xc6>
 80163d2:	2300      	movs	r3, #0
 80163d4:	e000      	b.n	80163d8 <osMessageGet+0xc8>
 80163d6:	2340      	movs	r3, #64	; 0x40
 80163d8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	461c      	mov	r4, r3
 80163de:	f107 0314 	add.w	r3, r7, #20
 80163e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80163e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80163ea:	68f8      	ldr	r0, [r7, #12]
 80163ec:	372c      	adds	r7, #44	; 0x2c
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd90      	pop	{r4, r7, pc}
 80163f2:	bf00      	nop
 80163f4:	e000ed04 	.word	0xe000ed04

080163f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80163f8:	b480      	push	{r7}
 80163fa:	b083      	sub	sp, #12
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	f103 0208 	add.w	r2, r3, #8
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016410:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	f103 0208 	add.w	r2, r3, #8
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	f103 0208 	add.w	r2, r3, #8
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	2200      	movs	r2, #0
 801642a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801642c:	bf00      	nop
 801642e:	370c      	adds	r7, #12
 8016430:	46bd      	mov	sp, r7
 8016432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016436:	4770      	bx	lr

08016438 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016438:	b480      	push	{r7}
 801643a:	b083      	sub	sp, #12
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	2200      	movs	r2, #0
 8016444:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016446:	bf00      	nop
 8016448:	370c      	adds	r7, #12
 801644a:	46bd      	mov	sp, r7
 801644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016450:	4770      	bx	lr

08016452 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016452:	b480      	push	{r7}
 8016454:	b085      	sub	sp, #20
 8016456:	af00      	add	r7, sp, #0
 8016458:	6078      	str	r0, [r7, #4]
 801645a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	685b      	ldr	r3, [r3, #4]
 8016460:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016462:	683b      	ldr	r3, [r7, #0]
 8016464:	68fa      	ldr	r2, [r7, #12]
 8016466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	689a      	ldr	r2, [r3, #8]
 801646c:	683b      	ldr	r3, [r7, #0]
 801646e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	689b      	ldr	r3, [r3, #8]
 8016474:	683a      	ldr	r2, [r7, #0]
 8016476:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	683a      	ldr	r2, [r7, #0]
 801647c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	687a      	ldr	r2, [r7, #4]
 8016482:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	1c5a      	adds	r2, r3, #1
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	601a      	str	r2, [r3, #0]
}
 801648e:	bf00      	nop
 8016490:	3714      	adds	r7, #20
 8016492:	46bd      	mov	sp, r7
 8016494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016498:	4770      	bx	lr

0801649a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801649a:	b480      	push	{r7}
 801649c:	b085      	sub	sp, #20
 801649e:	af00      	add	r7, sp, #0
 80164a0:	6078      	str	r0, [r7, #4]
 80164a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80164aa:	68bb      	ldr	r3, [r7, #8]
 80164ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80164b0:	d103      	bne.n	80164ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	691b      	ldr	r3, [r3, #16]
 80164b6:	60fb      	str	r3, [r7, #12]
 80164b8:	e00c      	b.n	80164d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	3308      	adds	r3, #8
 80164be:	60fb      	str	r3, [r7, #12]
 80164c0:	e002      	b.n	80164c8 <vListInsert+0x2e>
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	60fb      	str	r3, [r7, #12]
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	685b      	ldr	r3, [r3, #4]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	68ba      	ldr	r2, [r7, #8]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d2f6      	bcs.n	80164c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	685a      	ldr	r2, [r3, #4]
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	685b      	ldr	r3, [r3, #4]
 80164e0:	683a      	ldr	r2, [r7, #0]
 80164e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	68fa      	ldr	r2, [r7, #12]
 80164e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	683a      	ldr	r2, [r7, #0]
 80164ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80164f0:	683b      	ldr	r3, [r7, #0]
 80164f2:	687a      	ldr	r2, [r7, #4]
 80164f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	1c5a      	adds	r2, r3, #1
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	601a      	str	r2, [r3, #0]
}
 8016500:	bf00      	nop
 8016502:	3714      	adds	r7, #20
 8016504:	46bd      	mov	sp, r7
 8016506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650a:	4770      	bx	lr

0801650c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801650c:	b480      	push	{r7}
 801650e:	b085      	sub	sp, #20
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	691b      	ldr	r3, [r3, #16]
 8016518:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	685b      	ldr	r3, [r3, #4]
 801651e:	687a      	ldr	r2, [r7, #4]
 8016520:	6892      	ldr	r2, [r2, #8]
 8016522:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	689b      	ldr	r3, [r3, #8]
 8016528:	687a      	ldr	r2, [r7, #4]
 801652a:	6852      	ldr	r2, [r2, #4]
 801652c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	685b      	ldr	r3, [r3, #4]
 8016532:	687a      	ldr	r2, [r7, #4]
 8016534:	429a      	cmp	r2, r3
 8016536:	d103      	bne.n	8016540 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	689a      	ldr	r2, [r3, #8]
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2200      	movs	r2, #0
 8016544:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	1e5a      	subs	r2, r3, #1
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	681b      	ldr	r3, [r3, #0]
}
 8016554:	4618      	mov	r0, r3
 8016556:	3714      	adds	r7, #20
 8016558:	46bd      	mov	sp, r7
 801655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655e:	4770      	bx	lr

08016560 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b084      	sub	sp, #16
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
 8016568:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d10a      	bne.n	801658a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016578:	f383 8811 	msr	BASEPRI, r3
 801657c:	f3bf 8f6f 	isb	sy
 8016580:	f3bf 8f4f 	dsb	sy
 8016584:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016586:	bf00      	nop
 8016588:	e7fe      	b.n	8016588 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801658a:	f002 fdeb 	bl	8019164 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	681a      	ldr	r2, [r3, #0]
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016596:	68f9      	ldr	r1, [r7, #12]
 8016598:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801659a:	fb01 f303 	mul.w	r3, r1, r3
 801659e:	441a      	add	r2, r3
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	2200      	movs	r2, #0
 80165a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	681a      	ldr	r2, [r3, #0]
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	681a      	ldr	r2, [r3, #0]
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165ba:	3b01      	subs	r3, #1
 80165bc:	68f9      	ldr	r1, [r7, #12]
 80165be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80165c0:	fb01 f303 	mul.w	r3, r1, r3
 80165c4:	441a      	add	r2, r3
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	22ff      	movs	r2, #255	; 0xff
 80165ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	22ff      	movs	r2, #255	; 0xff
 80165d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d114      	bne.n	801660a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	691b      	ldr	r3, [r3, #16]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d01a      	beq.n	801661e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	3310      	adds	r3, #16
 80165ec:	4618      	mov	r0, r3
 80165ee:	f001 fbef 	bl	8017dd0 <xTaskRemoveFromEventList>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d012      	beq.n	801661e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80165f8:	4b0c      	ldr	r3, [pc, #48]	; (801662c <xQueueGenericReset+0xcc>)
 80165fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165fe:	601a      	str	r2, [r3, #0]
 8016600:	f3bf 8f4f 	dsb	sy
 8016604:	f3bf 8f6f 	isb	sy
 8016608:	e009      	b.n	801661e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	3310      	adds	r3, #16
 801660e:	4618      	mov	r0, r3
 8016610:	f7ff fef2 	bl	80163f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	3324      	adds	r3, #36	; 0x24
 8016618:	4618      	mov	r0, r3
 801661a:	f7ff feed 	bl	80163f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801661e:	f002 fdd1 	bl	80191c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016622:	2301      	movs	r3, #1
}
 8016624:	4618      	mov	r0, r3
 8016626:	3710      	adds	r7, #16
 8016628:	46bd      	mov	sp, r7
 801662a:	bd80      	pop	{r7, pc}
 801662c:	e000ed04 	.word	0xe000ed04

08016630 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016630:	b580      	push	{r7, lr}
 8016632:	b08e      	sub	sp, #56	; 0x38
 8016634:	af02      	add	r7, sp, #8
 8016636:	60f8      	str	r0, [r7, #12]
 8016638:	60b9      	str	r1, [r7, #8]
 801663a:	607a      	str	r2, [r7, #4]
 801663c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d10a      	bne.n	801665a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016648:	f383 8811 	msr	BASEPRI, r3
 801664c:	f3bf 8f6f 	isb	sy
 8016650:	f3bf 8f4f 	dsb	sy
 8016654:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016656:	bf00      	nop
 8016658:	e7fe      	b.n	8016658 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801665a:	683b      	ldr	r3, [r7, #0]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d10a      	bne.n	8016676 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016664:	f383 8811 	msr	BASEPRI, r3
 8016668:	f3bf 8f6f 	isb	sy
 801666c:	f3bf 8f4f 	dsb	sy
 8016670:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016672:	bf00      	nop
 8016674:	e7fe      	b.n	8016674 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d002      	beq.n	8016682 <xQueueGenericCreateStatic+0x52>
 801667c:	68bb      	ldr	r3, [r7, #8]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d001      	beq.n	8016686 <xQueueGenericCreateStatic+0x56>
 8016682:	2301      	movs	r3, #1
 8016684:	e000      	b.n	8016688 <xQueueGenericCreateStatic+0x58>
 8016686:	2300      	movs	r3, #0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d10a      	bne.n	80166a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016690:	f383 8811 	msr	BASEPRI, r3
 8016694:	f3bf 8f6f 	isb	sy
 8016698:	f3bf 8f4f 	dsb	sy
 801669c:	623b      	str	r3, [r7, #32]
}
 801669e:	bf00      	nop
 80166a0:	e7fe      	b.n	80166a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d102      	bne.n	80166ae <xQueueGenericCreateStatic+0x7e>
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d101      	bne.n	80166b2 <xQueueGenericCreateStatic+0x82>
 80166ae:	2301      	movs	r3, #1
 80166b0:	e000      	b.n	80166b4 <xQueueGenericCreateStatic+0x84>
 80166b2:	2300      	movs	r3, #0
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d10a      	bne.n	80166ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80166b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166bc:	f383 8811 	msr	BASEPRI, r3
 80166c0:	f3bf 8f6f 	isb	sy
 80166c4:	f3bf 8f4f 	dsb	sy
 80166c8:	61fb      	str	r3, [r7, #28]
}
 80166ca:	bf00      	nop
 80166cc:	e7fe      	b.n	80166cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80166ce:	2348      	movs	r3, #72	; 0x48
 80166d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	2b48      	cmp	r3, #72	; 0x48
 80166d6:	d00a      	beq.n	80166ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80166d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166dc:	f383 8811 	msr	BASEPRI, r3
 80166e0:	f3bf 8f6f 	isb	sy
 80166e4:	f3bf 8f4f 	dsb	sy
 80166e8:	61bb      	str	r3, [r7, #24]
}
 80166ea:	bf00      	nop
 80166ec:	e7fe      	b.n	80166ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80166ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80166f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d00d      	beq.n	8016716 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80166fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166fc:	2201      	movs	r2, #1
 80166fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016702:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016708:	9300      	str	r3, [sp, #0]
 801670a:	4613      	mov	r3, r2
 801670c:	687a      	ldr	r2, [r7, #4]
 801670e:	68b9      	ldr	r1, [r7, #8]
 8016710:	68f8      	ldr	r0, [r7, #12]
 8016712:	f000 f83f 	bl	8016794 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016718:	4618      	mov	r0, r3
 801671a:	3730      	adds	r7, #48	; 0x30
 801671c:	46bd      	mov	sp, r7
 801671e:	bd80      	pop	{r7, pc}

08016720 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016720:	b580      	push	{r7, lr}
 8016722:	b08a      	sub	sp, #40	; 0x28
 8016724:	af02      	add	r7, sp, #8
 8016726:	60f8      	str	r0, [r7, #12]
 8016728:	60b9      	str	r1, [r7, #8]
 801672a:	4613      	mov	r3, r2
 801672c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d10a      	bne.n	801674a <xQueueGenericCreate+0x2a>
	__asm volatile
 8016734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016738:	f383 8811 	msr	BASEPRI, r3
 801673c:	f3bf 8f6f 	isb	sy
 8016740:	f3bf 8f4f 	dsb	sy
 8016744:	613b      	str	r3, [r7, #16]
}
 8016746:	bf00      	nop
 8016748:	e7fe      	b.n	8016748 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	68ba      	ldr	r2, [r7, #8]
 801674e:	fb02 f303 	mul.w	r3, r2, r3
 8016752:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016754:	69fb      	ldr	r3, [r7, #28]
 8016756:	3348      	adds	r3, #72	; 0x48
 8016758:	4618      	mov	r0, r3
 801675a:	f002 fe25 	bl	80193a8 <pvPortMalloc>
 801675e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016760:	69bb      	ldr	r3, [r7, #24]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d011      	beq.n	801678a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016766:	69bb      	ldr	r3, [r7, #24]
 8016768:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801676a:	697b      	ldr	r3, [r7, #20]
 801676c:	3348      	adds	r3, #72	; 0x48
 801676e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016770:	69bb      	ldr	r3, [r7, #24]
 8016772:	2200      	movs	r2, #0
 8016774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016778:	79fa      	ldrb	r2, [r7, #7]
 801677a:	69bb      	ldr	r3, [r7, #24]
 801677c:	9300      	str	r3, [sp, #0]
 801677e:	4613      	mov	r3, r2
 8016780:	697a      	ldr	r2, [r7, #20]
 8016782:	68b9      	ldr	r1, [r7, #8]
 8016784:	68f8      	ldr	r0, [r7, #12]
 8016786:	f000 f805 	bl	8016794 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801678a:	69bb      	ldr	r3, [r7, #24]
	}
 801678c:	4618      	mov	r0, r3
 801678e:	3720      	adds	r7, #32
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}

08016794 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b084      	sub	sp, #16
 8016798:	af00      	add	r7, sp, #0
 801679a:	60f8      	str	r0, [r7, #12]
 801679c:	60b9      	str	r1, [r7, #8]
 801679e:	607a      	str	r2, [r7, #4]
 80167a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80167a2:	68bb      	ldr	r3, [r7, #8]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d103      	bne.n	80167b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80167a8:	69bb      	ldr	r3, [r7, #24]
 80167aa:	69ba      	ldr	r2, [r7, #24]
 80167ac:	601a      	str	r2, [r3, #0]
 80167ae:	e002      	b.n	80167b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80167b0:	69bb      	ldr	r3, [r7, #24]
 80167b2:	687a      	ldr	r2, [r7, #4]
 80167b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80167b6:	69bb      	ldr	r3, [r7, #24]
 80167b8:	68fa      	ldr	r2, [r7, #12]
 80167ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80167bc:	69bb      	ldr	r3, [r7, #24]
 80167be:	68ba      	ldr	r2, [r7, #8]
 80167c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80167c2:	2101      	movs	r1, #1
 80167c4:	69b8      	ldr	r0, [r7, #24]
 80167c6:	f7ff fecb 	bl	8016560 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80167ca:	bf00      	nop
 80167cc:	3710      	adds	r7, #16
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}

080167d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80167d2:	b580      	push	{r7, lr}
 80167d4:	b082      	sub	sp, #8
 80167d6:	af00      	add	r7, sp, #0
 80167d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d00e      	beq.n	80167fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	2200      	movs	r2, #0
 80167e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2200      	movs	r2, #0
 80167ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	2200      	movs	r2, #0
 80167f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80167f2:	2300      	movs	r3, #0
 80167f4:	2200      	movs	r2, #0
 80167f6:	2100      	movs	r1, #0
 80167f8:	6878      	ldr	r0, [r7, #4]
 80167fa:	f000 f837 	bl	801686c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80167fe:	bf00      	nop
 8016800:	3708      	adds	r7, #8
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}

08016806 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016806:	b580      	push	{r7, lr}
 8016808:	b086      	sub	sp, #24
 801680a:	af00      	add	r7, sp, #0
 801680c:	4603      	mov	r3, r0
 801680e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016810:	2301      	movs	r3, #1
 8016812:	617b      	str	r3, [r7, #20]
 8016814:	2300      	movs	r3, #0
 8016816:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016818:	79fb      	ldrb	r3, [r7, #7]
 801681a:	461a      	mov	r2, r3
 801681c:	6939      	ldr	r1, [r7, #16]
 801681e:	6978      	ldr	r0, [r7, #20]
 8016820:	f7ff ff7e 	bl	8016720 <xQueueGenericCreate>
 8016824:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016826:	68f8      	ldr	r0, [r7, #12]
 8016828:	f7ff ffd3 	bl	80167d2 <prvInitialiseMutex>

		return xNewQueue;
 801682c:	68fb      	ldr	r3, [r7, #12]
	}
 801682e:	4618      	mov	r0, r3
 8016830:	3718      	adds	r7, #24
 8016832:	46bd      	mov	sp, r7
 8016834:	bd80      	pop	{r7, pc}

08016836 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016836:	b580      	push	{r7, lr}
 8016838:	b088      	sub	sp, #32
 801683a:	af02      	add	r7, sp, #8
 801683c:	4603      	mov	r3, r0
 801683e:	6039      	str	r1, [r7, #0]
 8016840:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016842:	2301      	movs	r3, #1
 8016844:	617b      	str	r3, [r7, #20]
 8016846:	2300      	movs	r3, #0
 8016848:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801684a:	79fb      	ldrb	r3, [r7, #7]
 801684c:	9300      	str	r3, [sp, #0]
 801684e:	683b      	ldr	r3, [r7, #0]
 8016850:	2200      	movs	r2, #0
 8016852:	6939      	ldr	r1, [r7, #16]
 8016854:	6978      	ldr	r0, [r7, #20]
 8016856:	f7ff feeb 	bl	8016630 <xQueueGenericCreateStatic>
 801685a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801685c:	68f8      	ldr	r0, [r7, #12]
 801685e:	f7ff ffb8 	bl	80167d2 <prvInitialiseMutex>

		return xNewQueue;
 8016862:	68fb      	ldr	r3, [r7, #12]
	}
 8016864:	4618      	mov	r0, r3
 8016866:	3718      	adds	r7, #24
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}

0801686c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b08e      	sub	sp, #56	; 0x38
 8016870:	af00      	add	r7, sp, #0
 8016872:	60f8      	str	r0, [r7, #12]
 8016874:	60b9      	str	r1, [r7, #8]
 8016876:	607a      	str	r2, [r7, #4]
 8016878:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801687a:	2300      	movs	r3, #0
 801687c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016884:	2b00      	cmp	r3, #0
 8016886:	d10a      	bne.n	801689e <xQueueGenericSend+0x32>
	__asm volatile
 8016888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801688c:	f383 8811 	msr	BASEPRI, r3
 8016890:	f3bf 8f6f 	isb	sy
 8016894:	f3bf 8f4f 	dsb	sy
 8016898:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801689a:	bf00      	nop
 801689c:	e7fe      	b.n	801689c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801689e:	68bb      	ldr	r3, [r7, #8]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d103      	bne.n	80168ac <xQueueGenericSend+0x40>
 80168a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d101      	bne.n	80168b0 <xQueueGenericSend+0x44>
 80168ac:	2301      	movs	r3, #1
 80168ae:	e000      	b.n	80168b2 <xQueueGenericSend+0x46>
 80168b0:	2300      	movs	r3, #0
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d10a      	bne.n	80168cc <xQueueGenericSend+0x60>
	__asm volatile
 80168b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ba:	f383 8811 	msr	BASEPRI, r3
 80168be:	f3bf 8f6f 	isb	sy
 80168c2:	f3bf 8f4f 	dsb	sy
 80168c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80168c8:	bf00      	nop
 80168ca:	e7fe      	b.n	80168ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	2b02      	cmp	r3, #2
 80168d0:	d103      	bne.n	80168da <xQueueGenericSend+0x6e>
 80168d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80168d6:	2b01      	cmp	r3, #1
 80168d8:	d101      	bne.n	80168de <xQueueGenericSend+0x72>
 80168da:	2301      	movs	r3, #1
 80168dc:	e000      	b.n	80168e0 <xQueueGenericSend+0x74>
 80168de:	2300      	movs	r3, #0
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d10a      	bne.n	80168fa <xQueueGenericSend+0x8e>
	__asm volatile
 80168e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e8:	f383 8811 	msr	BASEPRI, r3
 80168ec:	f3bf 8f6f 	isb	sy
 80168f0:	f3bf 8f4f 	dsb	sy
 80168f4:	623b      	str	r3, [r7, #32]
}
 80168f6:	bf00      	nop
 80168f8:	e7fe      	b.n	80168f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80168fa:	f001 fc25 	bl	8018148 <xTaskGetSchedulerState>
 80168fe:	4603      	mov	r3, r0
 8016900:	2b00      	cmp	r3, #0
 8016902:	d102      	bne.n	801690a <xQueueGenericSend+0x9e>
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d101      	bne.n	801690e <xQueueGenericSend+0xa2>
 801690a:	2301      	movs	r3, #1
 801690c:	e000      	b.n	8016910 <xQueueGenericSend+0xa4>
 801690e:	2300      	movs	r3, #0
 8016910:	2b00      	cmp	r3, #0
 8016912:	d10a      	bne.n	801692a <xQueueGenericSend+0xbe>
	__asm volatile
 8016914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016918:	f383 8811 	msr	BASEPRI, r3
 801691c:	f3bf 8f6f 	isb	sy
 8016920:	f3bf 8f4f 	dsb	sy
 8016924:	61fb      	str	r3, [r7, #28]
}
 8016926:	bf00      	nop
 8016928:	e7fe      	b.n	8016928 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801692a:	f002 fc1b 	bl	8019164 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016936:	429a      	cmp	r2, r3
 8016938:	d302      	bcc.n	8016940 <xQueueGenericSend+0xd4>
 801693a:	683b      	ldr	r3, [r7, #0]
 801693c:	2b02      	cmp	r3, #2
 801693e:	d129      	bne.n	8016994 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016940:	683a      	ldr	r2, [r7, #0]
 8016942:	68b9      	ldr	r1, [r7, #8]
 8016944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016946:	f000 fc5e 	bl	8017206 <prvCopyDataToQueue>
 801694a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016950:	2b00      	cmp	r3, #0
 8016952:	d010      	beq.n	8016976 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016956:	3324      	adds	r3, #36	; 0x24
 8016958:	4618      	mov	r0, r3
 801695a:	f001 fa39 	bl	8017dd0 <xTaskRemoveFromEventList>
 801695e:	4603      	mov	r3, r0
 8016960:	2b00      	cmp	r3, #0
 8016962:	d013      	beq.n	801698c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016964:	4b3f      	ldr	r3, [pc, #252]	; (8016a64 <xQueueGenericSend+0x1f8>)
 8016966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801696a:	601a      	str	r2, [r3, #0]
 801696c:	f3bf 8f4f 	dsb	sy
 8016970:	f3bf 8f6f 	isb	sy
 8016974:	e00a      	b.n	801698c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016978:	2b00      	cmp	r3, #0
 801697a:	d007      	beq.n	801698c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801697c:	4b39      	ldr	r3, [pc, #228]	; (8016a64 <xQueueGenericSend+0x1f8>)
 801697e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016982:	601a      	str	r2, [r3, #0]
 8016984:	f3bf 8f4f 	dsb	sy
 8016988:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801698c:	f002 fc1a 	bl	80191c4 <vPortExitCritical>
				return pdPASS;
 8016990:	2301      	movs	r3, #1
 8016992:	e063      	b.n	8016a5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d103      	bne.n	80169a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801699a:	f002 fc13 	bl	80191c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801699e:	2300      	movs	r3, #0
 80169a0:	e05c      	b.n	8016a5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80169a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d106      	bne.n	80169b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80169a8:	f107 0314 	add.w	r3, r7, #20
 80169ac:	4618      	mov	r0, r3
 80169ae:	f001 fa71 	bl	8017e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80169b2:	2301      	movs	r3, #1
 80169b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80169b6:	f002 fc05 	bl	80191c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80169ba:	f000 ffeb 	bl	8017994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80169be:	f002 fbd1 	bl	8019164 <vPortEnterCritical>
 80169c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80169c8:	b25b      	sxtb	r3, r3
 80169ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80169ce:	d103      	bne.n	80169d8 <xQueueGenericSend+0x16c>
 80169d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169d2:	2200      	movs	r2, #0
 80169d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80169d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80169de:	b25b      	sxtb	r3, r3
 80169e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80169e4:	d103      	bne.n	80169ee <xQueueGenericSend+0x182>
 80169e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169e8:	2200      	movs	r2, #0
 80169ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80169ee:	f002 fbe9 	bl	80191c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80169f2:	1d3a      	adds	r2, r7, #4
 80169f4:	f107 0314 	add.w	r3, r7, #20
 80169f8:	4611      	mov	r1, r2
 80169fa:	4618      	mov	r0, r3
 80169fc:	f001 fa60 	bl	8017ec0 <xTaskCheckForTimeOut>
 8016a00:	4603      	mov	r3, r0
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d124      	bne.n	8016a50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a08:	f000 fcf5 	bl	80173f6 <prvIsQueueFull>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d018      	beq.n	8016a44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a14:	3310      	adds	r3, #16
 8016a16:	687a      	ldr	r2, [r7, #4]
 8016a18:	4611      	mov	r1, r2
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f001 f988 	bl	8017d30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a22:	f000 fc80 	bl	8017326 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016a26:	f000 ffc3 	bl	80179b0 <xTaskResumeAll>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	f47f af7c 	bne.w	801692a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016a32:	4b0c      	ldr	r3, [pc, #48]	; (8016a64 <xQueueGenericSend+0x1f8>)
 8016a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a38:	601a      	str	r2, [r3, #0]
 8016a3a:	f3bf 8f4f 	dsb	sy
 8016a3e:	f3bf 8f6f 	isb	sy
 8016a42:	e772      	b.n	801692a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a46:	f000 fc6e 	bl	8017326 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016a4a:	f000 ffb1 	bl	80179b0 <xTaskResumeAll>
 8016a4e:	e76c      	b.n	801692a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a52:	f000 fc68 	bl	8017326 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016a56:	f000 ffab 	bl	80179b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016a5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	3738      	adds	r7, #56	; 0x38
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}
 8016a64:	e000ed04 	.word	0xe000ed04

08016a68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b090      	sub	sp, #64	; 0x40
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	60f8      	str	r0, [r7, #12]
 8016a70:	60b9      	str	r1, [r7, #8]
 8016a72:	607a      	str	r2, [r7, #4]
 8016a74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d10a      	bne.n	8016a96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a84:	f383 8811 	msr	BASEPRI, r3
 8016a88:	f3bf 8f6f 	isb	sy
 8016a8c:	f3bf 8f4f 	dsb	sy
 8016a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016a92:	bf00      	nop
 8016a94:	e7fe      	b.n	8016a94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016a96:	68bb      	ldr	r3, [r7, #8]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d103      	bne.n	8016aa4 <xQueueGenericSendFromISR+0x3c>
 8016a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d101      	bne.n	8016aa8 <xQueueGenericSendFromISR+0x40>
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	e000      	b.n	8016aaa <xQueueGenericSendFromISR+0x42>
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d10a      	bne.n	8016ac4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ab2:	f383 8811 	msr	BASEPRI, r3
 8016ab6:	f3bf 8f6f 	isb	sy
 8016aba:	f3bf 8f4f 	dsb	sy
 8016abe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016ac0:	bf00      	nop
 8016ac2:	e7fe      	b.n	8016ac2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016ac4:	683b      	ldr	r3, [r7, #0]
 8016ac6:	2b02      	cmp	r3, #2
 8016ac8:	d103      	bne.n	8016ad2 <xQueueGenericSendFromISR+0x6a>
 8016aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ace:	2b01      	cmp	r3, #1
 8016ad0:	d101      	bne.n	8016ad6 <xQueueGenericSendFromISR+0x6e>
 8016ad2:	2301      	movs	r3, #1
 8016ad4:	e000      	b.n	8016ad8 <xQueueGenericSendFromISR+0x70>
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d10a      	bne.n	8016af2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ae0:	f383 8811 	msr	BASEPRI, r3
 8016ae4:	f3bf 8f6f 	isb	sy
 8016ae8:	f3bf 8f4f 	dsb	sy
 8016aec:	623b      	str	r3, [r7, #32]
}
 8016aee:	bf00      	nop
 8016af0:	e7fe      	b.n	8016af0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016af2:	f002 fc19 	bl	8019328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016af6:	f3ef 8211 	mrs	r2, BASEPRI
 8016afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016afe:	f383 8811 	msr	BASEPRI, r3
 8016b02:	f3bf 8f6f 	isb	sy
 8016b06:	f3bf 8f4f 	dsb	sy
 8016b0a:	61fa      	str	r2, [r7, #28]
 8016b0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016b0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016b10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b1a:	429a      	cmp	r2, r3
 8016b1c:	d302      	bcc.n	8016b24 <xQueueGenericSendFromISR+0xbc>
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	2b02      	cmp	r3, #2
 8016b22:	d12f      	bne.n	8016b84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016b34:	683a      	ldr	r2, [r7, #0]
 8016b36:	68b9      	ldr	r1, [r7, #8]
 8016b38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016b3a:	f000 fb64 	bl	8017206 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016b3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b46:	d112      	bne.n	8016b6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d016      	beq.n	8016b7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b52:	3324      	adds	r3, #36	; 0x24
 8016b54:	4618      	mov	r0, r3
 8016b56:	f001 f93b 	bl	8017dd0 <xTaskRemoveFromEventList>
 8016b5a:	4603      	mov	r3, r0
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d00e      	beq.n	8016b7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d00b      	beq.n	8016b7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	2201      	movs	r2, #1
 8016b6a:	601a      	str	r2, [r3, #0]
 8016b6c:	e007      	b.n	8016b7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016b6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016b72:	3301      	adds	r3, #1
 8016b74:	b2db      	uxtb	r3, r3
 8016b76:	b25a      	sxtb	r2, r3
 8016b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016b7e:	2301      	movs	r3, #1
 8016b80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8016b82:	e001      	b.n	8016b88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016b84:	2300      	movs	r3, #0
 8016b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016b8c:	697b      	ldr	r3, [r7, #20]
 8016b8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016b92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016b96:	4618      	mov	r0, r3
 8016b98:	3740      	adds	r7, #64	; 0x40
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	bd80      	pop	{r7, pc}

08016b9e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016b9e:	b580      	push	{r7, lr}
 8016ba0:	b08e      	sub	sp, #56	; 0x38
 8016ba2:	af00      	add	r7, sp, #0
 8016ba4:	6078      	str	r0, [r7, #4]
 8016ba6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d10a      	bne.n	8016bc8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8016bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb6:	f383 8811 	msr	BASEPRI, r3
 8016bba:	f3bf 8f6f 	isb	sy
 8016bbe:	f3bf 8f4f 	dsb	sy
 8016bc2:	623b      	str	r3, [r7, #32]
}
 8016bc4:	bf00      	nop
 8016bc6:	e7fe      	b.n	8016bc6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d00a      	beq.n	8016be6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8016bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bd4:	f383 8811 	msr	BASEPRI, r3
 8016bd8:	f3bf 8f6f 	isb	sy
 8016bdc:	f3bf 8f4f 	dsb	sy
 8016be0:	61fb      	str	r3, [r7, #28]
}
 8016be2:	bf00      	nop
 8016be4:	e7fe      	b.n	8016be4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d103      	bne.n	8016bf6 <xQueueGiveFromISR+0x58>
 8016bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bf0:	689b      	ldr	r3, [r3, #8]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d101      	bne.n	8016bfa <xQueueGiveFromISR+0x5c>
 8016bf6:	2301      	movs	r3, #1
 8016bf8:	e000      	b.n	8016bfc <xQueueGiveFromISR+0x5e>
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d10a      	bne.n	8016c16 <xQueueGiveFromISR+0x78>
	__asm volatile
 8016c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c04:	f383 8811 	msr	BASEPRI, r3
 8016c08:	f3bf 8f6f 	isb	sy
 8016c0c:	f3bf 8f4f 	dsb	sy
 8016c10:	61bb      	str	r3, [r7, #24]
}
 8016c12:	bf00      	nop
 8016c14:	e7fe      	b.n	8016c14 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016c16:	f002 fb87 	bl	8019328 <vPortValidateInterruptPriority>
	__asm volatile
 8016c1a:	f3ef 8211 	mrs	r2, BASEPRI
 8016c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c22:	f383 8811 	msr	BASEPRI, r3
 8016c26:	f3bf 8f6f 	isb	sy
 8016c2a:	f3bf 8f4f 	dsb	sy
 8016c2e:	617a      	str	r2, [r7, #20]
 8016c30:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016c32:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016c34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c42:	429a      	cmp	r2, r3
 8016c44:	d22b      	bcs.n	8016c9e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c52:	1c5a      	adds	r2, r3, #1
 8016c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c56:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016c58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016c60:	d112      	bne.n	8016c88 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d016      	beq.n	8016c98 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c6c:	3324      	adds	r3, #36	; 0x24
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f001 f8ae 	bl	8017dd0 <xTaskRemoveFromEventList>
 8016c74:	4603      	mov	r3, r0
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d00e      	beq.n	8016c98 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016c7a:	683b      	ldr	r3, [r7, #0]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d00b      	beq.n	8016c98 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	2201      	movs	r2, #1
 8016c84:	601a      	str	r2, [r3, #0]
 8016c86:	e007      	b.n	8016c98 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c8c:	3301      	adds	r3, #1
 8016c8e:	b2db      	uxtb	r3, r3
 8016c90:	b25a      	sxtb	r2, r3
 8016c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016c98:	2301      	movs	r3, #1
 8016c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8016c9c:	e001      	b.n	8016ca2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8016ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	f383 8811 	msr	BASEPRI, r3
}
 8016cac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	3738      	adds	r7, #56	; 0x38
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b08c      	sub	sp, #48	; 0x30
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	60f8      	str	r0, [r7, #12]
 8016cc0:	60b9      	str	r1, [r7, #8]
 8016cc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d10a      	bne.n	8016ce8 <xQueueReceive+0x30>
	__asm volatile
 8016cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cd6:	f383 8811 	msr	BASEPRI, r3
 8016cda:	f3bf 8f6f 	isb	sy
 8016cde:	f3bf 8f4f 	dsb	sy
 8016ce2:	623b      	str	r3, [r7, #32]
}
 8016ce4:	bf00      	nop
 8016ce6:	e7fe      	b.n	8016ce6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d103      	bne.n	8016cf6 <xQueueReceive+0x3e>
 8016cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d101      	bne.n	8016cfa <xQueueReceive+0x42>
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	e000      	b.n	8016cfc <xQueueReceive+0x44>
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d10a      	bne.n	8016d16 <xQueueReceive+0x5e>
	__asm volatile
 8016d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d04:	f383 8811 	msr	BASEPRI, r3
 8016d08:	f3bf 8f6f 	isb	sy
 8016d0c:	f3bf 8f4f 	dsb	sy
 8016d10:	61fb      	str	r3, [r7, #28]
}
 8016d12:	bf00      	nop
 8016d14:	e7fe      	b.n	8016d14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016d16:	f001 fa17 	bl	8018148 <xTaskGetSchedulerState>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d102      	bne.n	8016d26 <xQueueReceive+0x6e>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d101      	bne.n	8016d2a <xQueueReceive+0x72>
 8016d26:	2301      	movs	r3, #1
 8016d28:	e000      	b.n	8016d2c <xQueueReceive+0x74>
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d10a      	bne.n	8016d46 <xQueueReceive+0x8e>
	__asm volatile
 8016d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d34:	f383 8811 	msr	BASEPRI, r3
 8016d38:	f3bf 8f6f 	isb	sy
 8016d3c:	f3bf 8f4f 	dsb	sy
 8016d40:	61bb      	str	r3, [r7, #24]
}
 8016d42:	bf00      	nop
 8016d44:	e7fe      	b.n	8016d44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016d46:	f002 fa0d 	bl	8019164 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d01f      	beq.n	8016d96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016d56:	68b9      	ldr	r1, [r7, #8]
 8016d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d5a:	f000 fabe 	bl	80172da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d60:	1e5a      	subs	r2, r3, #1
 8016d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d68:	691b      	ldr	r3, [r3, #16]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d00f      	beq.n	8016d8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d70:	3310      	adds	r3, #16
 8016d72:	4618      	mov	r0, r3
 8016d74:	f001 f82c 	bl	8017dd0 <xTaskRemoveFromEventList>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d007      	beq.n	8016d8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016d7e:	4b3d      	ldr	r3, [pc, #244]	; (8016e74 <xQueueReceive+0x1bc>)
 8016d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d84:	601a      	str	r2, [r3, #0]
 8016d86:	f3bf 8f4f 	dsb	sy
 8016d8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016d8e:	f002 fa19 	bl	80191c4 <vPortExitCritical>
				return pdPASS;
 8016d92:	2301      	movs	r3, #1
 8016d94:	e069      	b.n	8016e6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d103      	bne.n	8016da4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016d9c:	f002 fa12 	bl	80191c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016da0:	2300      	movs	r3, #0
 8016da2:	e062      	b.n	8016e6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d106      	bne.n	8016db8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016daa:	f107 0310 	add.w	r3, r7, #16
 8016dae:	4618      	mov	r0, r3
 8016db0:	f001 f870 	bl	8017e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016db4:	2301      	movs	r3, #1
 8016db6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016db8:	f002 fa04 	bl	80191c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016dbc:	f000 fdea 	bl	8017994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016dc0:	f002 f9d0 	bl	8019164 <vPortEnterCritical>
 8016dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016dca:	b25b      	sxtb	r3, r3
 8016dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016dd0:	d103      	bne.n	8016dda <xQueueReceive+0x122>
 8016dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016de0:	b25b      	sxtb	r3, r3
 8016de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016de6:	d103      	bne.n	8016df0 <xQueueReceive+0x138>
 8016de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dea:	2200      	movs	r2, #0
 8016dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016df0:	f002 f9e8 	bl	80191c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016df4:	1d3a      	adds	r2, r7, #4
 8016df6:	f107 0310 	add.w	r3, r7, #16
 8016dfa:	4611      	mov	r1, r2
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f001 f85f 	bl	8017ec0 <xTaskCheckForTimeOut>
 8016e02:	4603      	mov	r3, r0
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d123      	bne.n	8016e50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e0a:	f000 fade 	bl	80173ca <prvIsQueueEmpty>
 8016e0e:	4603      	mov	r3, r0
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d017      	beq.n	8016e44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e16:	3324      	adds	r3, #36	; 0x24
 8016e18:	687a      	ldr	r2, [r7, #4]
 8016e1a:	4611      	mov	r1, r2
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f000 ff87 	bl	8017d30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e24:	f000 fa7f 	bl	8017326 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016e28:	f000 fdc2 	bl	80179b0 <xTaskResumeAll>
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d189      	bne.n	8016d46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016e32:	4b10      	ldr	r3, [pc, #64]	; (8016e74 <xQueueReceive+0x1bc>)
 8016e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e38:	601a      	str	r2, [r3, #0]
 8016e3a:	f3bf 8f4f 	dsb	sy
 8016e3e:	f3bf 8f6f 	isb	sy
 8016e42:	e780      	b.n	8016d46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e46:	f000 fa6e 	bl	8017326 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016e4a:	f000 fdb1 	bl	80179b0 <xTaskResumeAll>
 8016e4e:	e77a      	b.n	8016d46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e52:	f000 fa68 	bl	8017326 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016e56:	f000 fdab 	bl	80179b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e5c:	f000 fab5 	bl	80173ca <prvIsQueueEmpty>
 8016e60:	4603      	mov	r3, r0
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	f43f af6f 	beq.w	8016d46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016e68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	3730      	adds	r7, #48	; 0x30
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}
 8016e72:	bf00      	nop
 8016e74:	e000ed04 	.word	0xe000ed04

08016e78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b08e      	sub	sp, #56	; 0x38
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
 8016e80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016e82:	2300      	movs	r3, #0
 8016e84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d10a      	bne.n	8016eaa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e98:	f383 8811 	msr	BASEPRI, r3
 8016e9c:	f3bf 8f6f 	isb	sy
 8016ea0:	f3bf 8f4f 	dsb	sy
 8016ea4:	623b      	str	r3, [r7, #32]
}
 8016ea6:	bf00      	nop
 8016ea8:	e7fe      	b.n	8016ea8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d00a      	beq.n	8016ec8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8016eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb6:	f383 8811 	msr	BASEPRI, r3
 8016eba:	f3bf 8f6f 	isb	sy
 8016ebe:	f3bf 8f4f 	dsb	sy
 8016ec2:	61fb      	str	r3, [r7, #28]
}
 8016ec4:	bf00      	nop
 8016ec6:	e7fe      	b.n	8016ec6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016ec8:	f001 f93e 	bl	8018148 <xTaskGetSchedulerState>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d102      	bne.n	8016ed8 <xQueueSemaphoreTake+0x60>
 8016ed2:	683b      	ldr	r3, [r7, #0]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d101      	bne.n	8016edc <xQueueSemaphoreTake+0x64>
 8016ed8:	2301      	movs	r3, #1
 8016eda:	e000      	b.n	8016ede <xQueueSemaphoreTake+0x66>
 8016edc:	2300      	movs	r3, #0
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d10a      	bne.n	8016ef8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ee6:	f383 8811 	msr	BASEPRI, r3
 8016eea:	f3bf 8f6f 	isb	sy
 8016eee:	f3bf 8f4f 	dsb	sy
 8016ef2:	61bb      	str	r3, [r7, #24]
}
 8016ef4:	bf00      	nop
 8016ef6:	e7fe      	b.n	8016ef6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016ef8:	f002 f934 	bl	8019164 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d024      	beq.n	8016f52 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f0a:	1e5a      	subs	r2, r3, #1
 8016f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d104      	bne.n	8016f22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016f18:	f001 fabe 	bl	8018498 <pvTaskIncrementMutexHeldCount>
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f24:	691b      	ldr	r3, [r3, #16]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d00f      	beq.n	8016f4a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f2c:	3310      	adds	r3, #16
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f000 ff4e 	bl	8017dd0 <xTaskRemoveFromEventList>
 8016f34:	4603      	mov	r3, r0
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d007      	beq.n	8016f4a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016f3a:	4b54      	ldr	r3, [pc, #336]	; (801708c <xQueueSemaphoreTake+0x214>)
 8016f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f40:	601a      	str	r2, [r3, #0]
 8016f42:	f3bf 8f4f 	dsb	sy
 8016f46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016f4a:	f002 f93b 	bl	80191c4 <vPortExitCritical>
				return pdPASS;
 8016f4e:	2301      	movs	r3, #1
 8016f50:	e097      	b.n	8017082 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d111      	bne.n	8016f7c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d00a      	beq.n	8016f74 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8016f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f62:	f383 8811 	msr	BASEPRI, r3
 8016f66:	f3bf 8f6f 	isb	sy
 8016f6a:	f3bf 8f4f 	dsb	sy
 8016f6e:	617b      	str	r3, [r7, #20]
}
 8016f70:	bf00      	nop
 8016f72:	e7fe      	b.n	8016f72 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016f74:	f002 f926 	bl	80191c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016f78:	2300      	movs	r3, #0
 8016f7a:	e082      	b.n	8017082 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d106      	bne.n	8016f90 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016f82:	f107 030c 	add.w	r3, r7, #12
 8016f86:	4618      	mov	r0, r3
 8016f88:	f000 ff84 	bl	8017e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016f8c:	2301      	movs	r3, #1
 8016f8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016f90:	f002 f918 	bl	80191c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016f94:	f000 fcfe 	bl	8017994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016f98:	f002 f8e4 	bl	8019164 <vPortEnterCritical>
 8016f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016fa2:	b25b      	sxtb	r3, r3
 8016fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016fa8:	d103      	bne.n	8016fb2 <xQueueSemaphoreTake+0x13a>
 8016faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fac:	2200      	movs	r2, #0
 8016fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016fb8:	b25b      	sxtb	r3, r3
 8016fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016fbe:	d103      	bne.n	8016fc8 <xQueueSemaphoreTake+0x150>
 8016fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016fc8:	f002 f8fc 	bl	80191c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016fcc:	463a      	mov	r2, r7
 8016fce:	f107 030c 	add.w	r3, r7, #12
 8016fd2:	4611      	mov	r1, r2
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	f000 ff73 	bl	8017ec0 <xTaskCheckForTimeOut>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d132      	bne.n	8017046 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016fe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016fe2:	f000 f9f2 	bl	80173ca <prvIsQueueEmpty>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d026      	beq.n	801703a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d109      	bne.n	8017008 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016ff4:	f002 f8b6 	bl	8019164 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ffa:	689b      	ldr	r3, [r3, #8]
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f001 f8c1 	bl	8018184 <xTaskPriorityInherit>
 8017002:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8017004:	f002 f8de 	bl	80191c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801700a:	3324      	adds	r3, #36	; 0x24
 801700c:	683a      	ldr	r2, [r7, #0]
 801700e:	4611      	mov	r1, r2
 8017010:	4618      	mov	r0, r3
 8017012:	f000 fe8d 	bl	8017d30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017016:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017018:	f000 f985 	bl	8017326 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801701c:	f000 fcc8 	bl	80179b0 <xTaskResumeAll>
 8017020:	4603      	mov	r3, r0
 8017022:	2b00      	cmp	r3, #0
 8017024:	f47f af68 	bne.w	8016ef8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8017028:	4b18      	ldr	r3, [pc, #96]	; (801708c <xQueueSemaphoreTake+0x214>)
 801702a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801702e:	601a      	str	r2, [r3, #0]
 8017030:	f3bf 8f4f 	dsb	sy
 8017034:	f3bf 8f6f 	isb	sy
 8017038:	e75e      	b.n	8016ef8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801703a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801703c:	f000 f973 	bl	8017326 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017040:	f000 fcb6 	bl	80179b0 <xTaskResumeAll>
 8017044:	e758      	b.n	8016ef8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8017046:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017048:	f000 f96d 	bl	8017326 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801704c:	f000 fcb0 	bl	80179b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017050:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017052:	f000 f9ba 	bl	80173ca <prvIsQueueEmpty>
 8017056:	4603      	mov	r3, r0
 8017058:	2b00      	cmp	r3, #0
 801705a:	f43f af4d 	beq.w	8016ef8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017060:	2b00      	cmp	r3, #0
 8017062:	d00d      	beq.n	8017080 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8017064:	f002 f87e 	bl	8019164 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801706a:	f000 f8b4 	bl	80171d6 <prvGetDisinheritPriorityAfterTimeout>
 801706e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017072:	689b      	ldr	r3, [r3, #8]
 8017074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017076:	4618      	mov	r0, r3
 8017078:	f001 f980 	bl	801837c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801707c:	f002 f8a2 	bl	80191c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017080:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017082:	4618      	mov	r0, r3
 8017084:	3738      	adds	r7, #56	; 0x38
 8017086:	46bd      	mov	sp, r7
 8017088:	bd80      	pop	{r7, pc}
 801708a:	bf00      	nop
 801708c:	e000ed04 	.word	0xe000ed04

08017090 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b08e      	sub	sp, #56	; 0x38
 8017094:	af00      	add	r7, sp, #0
 8017096:	60f8      	str	r0, [r7, #12]
 8017098:	60b9      	str	r1, [r7, #8]
 801709a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80170a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d10a      	bne.n	80170bc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80170a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170aa:	f383 8811 	msr	BASEPRI, r3
 80170ae:	f3bf 8f6f 	isb	sy
 80170b2:	f3bf 8f4f 	dsb	sy
 80170b6:	623b      	str	r3, [r7, #32]
}
 80170b8:	bf00      	nop
 80170ba:	e7fe      	b.n	80170ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d103      	bne.n	80170ca <xQueueReceiveFromISR+0x3a>
 80170c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d101      	bne.n	80170ce <xQueueReceiveFromISR+0x3e>
 80170ca:	2301      	movs	r3, #1
 80170cc:	e000      	b.n	80170d0 <xQueueReceiveFromISR+0x40>
 80170ce:	2300      	movs	r3, #0
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d10a      	bne.n	80170ea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80170d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170d8:	f383 8811 	msr	BASEPRI, r3
 80170dc:	f3bf 8f6f 	isb	sy
 80170e0:	f3bf 8f4f 	dsb	sy
 80170e4:	61fb      	str	r3, [r7, #28]
}
 80170e6:	bf00      	nop
 80170e8:	e7fe      	b.n	80170e8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80170ea:	f002 f91d 	bl	8019328 <vPortValidateInterruptPriority>
	__asm volatile
 80170ee:	f3ef 8211 	mrs	r2, BASEPRI
 80170f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170f6:	f383 8811 	msr	BASEPRI, r3
 80170fa:	f3bf 8f6f 	isb	sy
 80170fe:	f3bf 8f4f 	dsb	sy
 8017102:	61ba      	str	r2, [r7, #24]
 8017104:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017106:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017108:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801710c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801710e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017112:	2b00      	cmp	r3, #0
 8017114:	d02f      	beq.n	8017176 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801711c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017120:	68b9      	ldr	r1, [r7, #8]
 8017122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017124:	f000 f8d9 	bl	80172da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801712a:	1e5a      	subs	r2, r3, #1
 801712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801712e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017130:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017138:	d112      	bne.n	8017160 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801713c:	691b      	ldr	r3, [r3, #16]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d016      	beq.n	8017170 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017144:	3310      	adds	r3, #16
 8017146:	4618      	mov	r0, r3
 8017148:	f000 fe42 	bl	8017dd0 <xTaskRemoveFromEventList>
 801714c:	4603      	mov	r3, r0
 801714e:	2b00      	cmp	r3, #0
 8017150:	d00e      	beq.n	8017170 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d00b      	beq.n	8017170 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	2201      	movs	r2, #1
 801715c:	601a      	str	r2, [r3, #0]
 801715e:	e007      	b.n	8017170 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017164:	3301      	adds	r3, #1
 8017166:	b2db      	uxtb	r3, r3
 8017168:	b25a      	sxtb	r2, r3
 801716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801716c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017170:	2301      	movs	r3, #1
 8017172:	637b      	str	r3, [r7, #52]	; 0x34
 8017174:	e001      	b.n	801717a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8017176:	2300      	movs	r3, #0
 8017178:	637b      	str	r3, [r7, #52]	; 0x34
 801717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801717c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801717e:	693b      	ldr	r3, [r7, #16]
 8017180:	f383 8811 	msr	BASEPRI, r3
}
 8017184:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017188:	4618      	mov	r0, r3
 801718a:	3738      	adds	r7, #56	; 0x38
 801718c:	46bd      	mov	sp, r7
 801718e:	bd80      	pop	{r7, pc}

08017190 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b084      	sub	sp, #16
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d10a      	bne.n	80171b8 <vQueueDelete+0x28>
	__asm volatile
 80171a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171a6:	f383 8811 	msr	BASEPRI, r3
 80171aa:	f3bf 8f6f 	isb	sy
 80171ae:	f3bf 8f4f 	dsb	sy
 80171b2:	60bb      	str	r3, [r7, #8]
}
 80171b4:	bf00      	nop
 80171b6:	e7fe      	b.n	80171b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80171b8:	68f8      	ldr	r0, [r7, #12]
 80171ba:	f000 f95f 	bl	801747c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d102      	bne.n	80171ce <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80171c8:	68f8      	ldr	r0, [r7, #12]
 80171ca:	f002 f9b9 	bl	8019540 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80171ce:	bf00      	nop
 80171d0:	3710      	adds	r7, #16
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd80      	pop	{r7, pc}

080171d6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80171d6:	b480      	push	{r7}
 80171d8:	b085      	sub	sp, #20
 80171da:	af00      	add	r7, sp, #0
 80171dc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d006      	beq.n	80171f4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	f1c3 0307 	rsb	r3, r3, #7
 80171f0:	60fb      	str	r3, [r7, #12]
 80171f2:	e001      	b.n	80171f8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80171f4:	2300      	movs	r3, #0
 80171f6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80171f8:	68fb      	ldr	r3, [r7, #12]
	}
 80171fa:	4618      	mov	r0, r3
 80171fc:	3714      	adds	r7, #20
 80171fe:	46bd      	mov	sp, r7
 8017200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017204:	4770      	bx	lr

08017206 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017206:	b580      	push	{r7, lr}
 8017208:	b086      	sub	sp, #24
 801720a:	af00      	add	r7, sp, #0
 801720c:	60f8      	str	r0, [r7, #12]
 801720e:	60b9      	str	r1, [r7, #8]
 8017210:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017212:	2300      	movs	r3, #0
 8017214:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801721a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017220:	2b00      	cmp	r3, #0
 8017222:	d10d      	bne.n	8017240 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d14d      	bne.n	80172c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	689b      	ldr	r3, [r3, #8]
 8017230:	4618      	mov	r0, r3
 8017232:	f001 f81d 	bl	8018270 <xTaskPriorityDisinherit>
 8017236:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	2200      	movs	r2, #0
 801723c:	609a      	str	r2, [r3, #8]
 801723e:	e043      	b.n	80172c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d119      	bne.n	801727a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	6858      	ldr	r0, [r3, #4]
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801724e:	461a      	mov	r2, r3
 8017250:	68b9      	ldr	r1, [r7, #8]
 8017252:	f002 fe31 	bl	8019eb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	685a      	ldr	r2, [r3, #4]
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801725e:	441a      	add	r2, r3
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	685a      	ldr	r2, [r3, #4]
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	689b      	ldr	r3, [r3, #8]
 801726c:	429a      	cmp	r2, r3
 801726e:	d32b      	bcc.n	80172c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	681a      	ldr	r2, [r3, #0]
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	605a      	str	r2, [r3, #4]
 8017278:	e026      	b.n	80172c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	68d8      	ldr	r0, [r3, #12]
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017282:	461a      	mov	r2, r3
 8017284:	68b9      	ldr	r1, [r7, #8]
 8017286:	f002 fe17 	bl	8019eb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	68da      	ldr	r2, [r3, #12]
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017292:	425b      	negs	r3, r3
 8017294:	441a      	add	r2, r3
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	68da      	ldr	r2, [r3, #12]
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	429a      	cmp	r2, r3
 80172a4:	d207      	bcs.n	80172b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	689a      	ldr	r2, [r3, #8]
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172ae:	425b      	negs	r3, r3
 80172b0:	441a      	add	r2, r3
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	2b02      	cmp	r3, #2
 80172ba:	d105      	bne.n	80172c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80172bc:	693b      	ldr	r3, [r7, #16]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d002      	beq.n	80172c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80172c2:	693b      	ldr	r3, [r7, #16]
 80172c4:	3b01      	subs	r3, #1
 80172c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80172c8:	693b      	ldr	r3, [r7, #16]
 80172ca:	1c5a      	adds	r2, r3, #1
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80172d0:	697b      	ldr	r3, [r7, #20]
}
 80172d2:	4618      	mov	r0, r3
 80172d4:	3718      	adds	r7, #24
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}

080172da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80172da:	b580      	push	{r7, lr}
 80172dc:	b082      	sub	sp, #8
 80172de:	af00      	add	r7, sp, #0
 80172e0:	6078      	str	r0, [r7, #4]
 80172e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d018      	beq.n	801731e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	68da      	ldr	r2, [r3, #12]
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172f4:	441a      	add	r2, r3
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	68da      	ldr	r2, [r3, #12]
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	689b      	ldr	r3, [r3, #8]
 8017302:	429a      	cmp	r2, r3
 8017304:	d303      	bcc.n	801730e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	681a      	ldr	r2, [r3, #0]
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	68d9      	ldr	r1, [r3, #12]
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017316:	461a      	mov	r2, r3
 8017318:	6838      	ldr	r0, [r7, #0]
 801731a:	f002 fdcd 	bl	8019eb8 <memcpy>
	}
}
 801731e:	bf00      	nop
 8017320:	3708      	adds	r7, #8
 8017322:	46bd      	mov	sp, r7
 8017324:	bd80      	pop	{r7, pc}

08017326 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017326:	b580      	push	{r7, lr}
 8017328:	b084      	sub	sp, #16
 801732a:	af00      	add	r7, sp, #0
 801732c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801732e:	f001 ff19 	bl	8019164 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017338:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801733a:	e011      	b.n	8017360 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017340:	2b00      	cmp	r3, #0
 8017342:	d012      	beq.n	801736a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	3324      	adds	r3, #36	; 0x24
 8017348:	4618      	mov	r0, r3
 801734a:	f000 fd41 	bl	8017dd0 <xTaskRemoveFromEventList>
 801734e:	4603      	mov	r3, r0
 8017350:	2b00      	cmp	r3, #0
 8017352:	d001      	beq.n	8017358 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017354:	f000 fe16 	bl	8017f84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017358:	7bfb      	ldrb	r3, [r7, #15]
 801735a:	3b01      	subs	r3, #1
 801735c:	b2db      	uxtb	r3, r3
 801735e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017364:	2b00      	cmp	r3, #0
 8017366:	dce9      	bgt.n	801733c <prvUnlockQueue+0x16>
 8017368:	e000      	b.n	801736c <prvUnlockQueue+0x46>
					break;
 801736a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	22ff      	movs	r2, #255	; 0xff
 8017370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017374:	f001 ff26 	bl	80191c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017378:	f001 fef4 	bl	8019164 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017382:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017384:	e011      	b.n	80173aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	691b      	ldr	r3, [r3, #16]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d012      	beq.n	80173b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	3310      	adds	r3, #16
 8017392:	4618      	mov	r0, r3
 8017394:	f000 fd1c 	bl	8017dd0 <xTaskRemoveFromEventList>
 8017398:	4603      	mov	r3, r0
 801739a:	2b00      	cmp	r3, #0
 801739c:	d001      	beq.n	80173a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801739e:	f000 fdf1 	bl	8017f84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80173a2:	7bbb      	ldrb	r3, [r7, #14]
 80173a4:	3b01      	subs	r3, #1
 80173a6:	b2db      	uxtb	r3, r3
 80173a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80173aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	dce9      	bgt.n	8017386 <prvUnlockQueue+0x60>
 80173b2:	e000      	b.n	80173b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80173b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	22ff      	movs	r2, #255	; 0xff
 80173ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80173be:	f001 ff01 	bl	80191c4 <vPortExitCritical>
}
 80173c2:	bf00      	nop
 80173c4:	3710      	adds	r7, #16
 80173c6:	46bd      	mov	sp, r7
 80173c8:	bd80      	pop	{r7, pc}

080173ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80173ca:	b580      	push	{r7, lr}
 80173cc:	b084      	sub	sp, #16
 80173ce:	af00      	add	r7, sp, #0
 80173d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80173d2:	f001 fec7 	bl	8019164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d102      	bne.n	80173e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80173de:	2301      	movs	r3, #1
 80173e0:	60fb      	str	r3, [r7, #12]
 80173e2:	e001      	b.n	80173e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80173e4:	2300      	movs	r3, #0
 80173e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80173e8:	f001 feec 	bl	80191c4 <vPortExitCritical>

	return xReturn;
 80173ec:	68fb      	ldr	r3, [r7, #12]
}
 80173ee:	4618      	mov	r0, r3
 80173f0:	3710      	adds	r7, #16
 80173f2:	46bd      	mov	sp, r7
 80173f4:	bd80      	pop	{r7, pc}

080173f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80173f6:	b580      	push	{r7, lr}
 80173f8:	b084      	sub	sp, #16
 80173fa:	af00      	add	r7, sp, #0
 80173fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80173fe:	f001 feb1 	bl	8019164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801740a:	429a      	cmp	r2, r3
 801740c:	d102      	bne.n	8017414 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801740e:	2301      	movs	r3, #1
 8017410:	60fb      	str	r3, [r7, #12]
 8017412:	e001      	b.n	8017418 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017414:	2300      	movs	r3, #0
 8017416:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017418:	f001 fed4 	bl	80191c4 <vPortExitCritical>

	return xReturn;
 801741c:	68fb      	ldr	r3, [r7, #12]
}
 801741e:	4618      	mov	r0, r3
 8017420:	3710      	adds	r7, #16
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}
	...

08017428 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017428:	b480      	push	{r7}
 801742a:	b085      	sub	sp, #20
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
 8017430:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017432:	2300      	movs	r3, #0
 8017434:	60fb      	str	r3, [r7, #12]
 8017436:	e014      	b.n	8017462 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017438:	4a0f      	ldr	r2, [pc, #60]	; (8017478 <vQueueAddToRegistry+0x50>)
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017440:	2b00      	cmp	r3, #0
 8017442:	d10b      	bne.n	801745c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017444:	490c      	ldr	r1, [pc, #48]	; (8017478 <vQueueAddToRegistry+0x50>)
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	683a      	ldr	r2, [r7, #0]
 801744a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801744e:	4a0a      	ldr	r2, [pc, #40]	; (8017478 <vQueueAddToRegistry+0x50>)
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	00db      	lsls	r3, r3, #3
 8017454:	4413      	add	r3, r2
 8017456:	687a      	ldr	r2, [r7, #4]
 8017458:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801745a:	e006      	b.n	801746a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	3301      	adds	r3, #1
 8017460:	60fb      	str	r3, [r7, #12]
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	2b07      	cmp	r3, #7
 8017466:	d9e7      	bls.n	8017438 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017468:	bf00      	nop
 801746a:	bf00      	nop
 801746c:	3714      	adds	r7, #20
 801746e:	46bd      	mov	sp, r7
 8017470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017474:	4770      	bx	lr
 8017476:	bf00      	nop
 8017478:	24002c2c 	.word	0x24002c2c

0801747c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801747c:	b480      	push	{r7}
 801747e:	b085      	sub	sp, #20
 8017480:	af00      	add	r7, sp, #0
 8017482:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017484:	2300      	movs	r3, #0
 8017486:	60fb      	str	r3, [r7, #12]
 8017488:	e016      	b.n	80174b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801748a:	4a10      	ldr	r2, [pc, #64]	; (80174cc <vQueueUnregisterQueue+0x50>)
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	00db      	lsls	r3, r3, #3
 8017490:	4413      	add	r3, r2
 8017492:	685b      	ldr	r3, [r3, #4]
 8017494:	687a      	ldr	r2, [r7, #4]
 8017496:	429a      	cmp	r2, r3
 8017498:	d10b      	bne.n	80174b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801749a:	4a0c      	ldr	r2, [pc, #48]	; (80174cc <vQueueUnregisterQueue+0x50>)
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	2100      	movs	r1, #0
 80174a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80174a4:	4a09      	ldr	r2, [pc, #36]	; (80174cc <vQueueUnregisterQueue+0x50>)
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	00db      	lsls	r3, r3, #3
 80174aa:	4413      	add	r3, r2
 80174ac:	2200      	movs	r2, #0
 80174ae:	605a      	str	r2, [r3, #4]
				break;
 80174b0:	e006      	b.n	80174c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	3301      	adds	r3, #1
 80174b6:	60fb      	str	r3, [r7, #12]
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	2b07      	cmp	r3, #7
 80174bc:	d9e5      	bls.n	801748a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80174be:	bf00      	nop
 80174c0:	bf00      	nop
 80174c2:	3714      	adds	r7, #20
 80174c4:	46bd      	mov	sp, r7
 80174c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ca:	4770      	bx	lr
 80174cc:	24002c2c 	.word	0x24002c2c

080174d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b086      	sub	sp, #24
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	60f8      	str	r0, [r7, #12]
 80174d8:	60b9      	str	r1, [r7, #8]
 80174da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80174e0:	f001 fe40 	bl	8019164 <vPortEnterCritical>
 80174e4:	697b      	ldr	r3, [r7, #20]
 80174e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80174ea:	b25b      	sxtb	r3, r3
 80174ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80174f0:	d103      	bne.n	80174fa <vQueueWaitForMessageRestricted+0x2a>
 80174f2:	697b      	ldr	r3, [r7, #20]
 80174f4:	2200      	movs	r2, #0
 80174f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80174fa:	697b      	ldr	r3, [r7, #20]
 80174fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017500:	b25b      	sxtb	r3, r3
 8017502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017506:	d103      	bne.n	8017510 <vQueueWaitForMessageRestricted+0x40>
 8017508:	697b      	ldr	r3, [r7, #20]
 801750a:	2200      	movs	r2, #0
 801750c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017510:	f001 fe58 	bl	80191c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017514:	697b      	ldr	r3, [r7, #20]
 8017516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017518:	2b00      	cmp	r3, #0
 801751a:	d106      	bne.n	801752a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801751c:	697b      	ldr	r3, [r7, #20]
 801751e:	3324      	adds	r3, #36	; 0x24
 8017520:	687a      	ldr	r2, [r7, #4]
 8017522:	68b9      	ldr	r1, [r7, #8]
 8017524:	4618      	mov	r0, r3
 8017526:	f000 fc27 	bl	8017d78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801752a:	6978      	ldr	r0, [r7, #20]
 801752c:	f7ff fefb 	bl	8017326 <prvUnlockQueue>
	}
 8017530:	bf00      	nop
 8017532:	3718      	adds	r7, #24
 8017534:	46bd      	mov	sp, r7
 8017536:	bd80      	pop	{r7, pc}

08017538 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017538:	b580      	push	{r7, lr}
 801753a:	b08e      	sub	sp, #56	; 0x38
 801753c:	af04      	add	r7, sp, #16
 801753e:	60f8      	str	r0, [r7, #12]
 8017540:	60b9      	str	r1, [r7, #8]
 8017542:	607a      	str	r2, [r7, #4]
 8017544:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017548:	2b00      	cmp	r3, #0
 801754a:	d10a      	bne.n	8017562 <xTaskCreateStatic+0x2a>
	__asm volatile
 801754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017550:	f383 8811 	msr	BASEPRI, r3
 8017554:	f3bf 8f6f 	isb	sy
 8017558:	f3bf 8f4f 	dsb	sy
 801755c:	623b      	str	r3, [r7, #32]
}
 801755e:	bf00      	nop
 8017560:	e7fe      	b.n	8017560 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017564:	2b00      	cmp	r3, #0
 8017566:	d10a      	bne.n	801757e <xTaskCreateStatic+0x46>
	__asm volatile
 8017568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801756c:	f383 8811 	msr	BASEPRI, r3
 8017570:	f3bf 8f6f 	isb	sy
 8017574:	f3bf 8f4f 	dsb	sy
 8017578:	61fb      	str	r3, [r7, #28]
}
 801757a:	bf00      	nop
 801757c:	e7fe      	b.n	801757c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801757e:	2354      	movs	r3, #84	; 0x54
 8017580:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017582:	693b      	ldr	r3, [r7, #16]
 8017584:	2b54      	cmp	r3, #84	; 0x54
 8017586:	d00a      	beq.n	801759e <xTaskCreateStatic+0x66>
	__asm volatile
 8017588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801758c:	f383 8811 	msr	BASEPRI, r3
 8017590:	f3bf 8f6f 	isb	sy
 8017594:	f3bf 8f4f 	dsb	sy
 8017598:	61bb      	str	r3, [r7, #24]
}
 801759a:	bf00      	nop
 801759c:	e7fe      	b.n	801759c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801759e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80175a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d01e      	beq.n	80175e4 <xTaskCreateStatic+0xac>
 80175a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d01b      	beq.n	80175e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80175ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80175b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80175b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80175b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b8:	2202      	movs	r2, #2
 80175ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80175be:	2300      	movs	r3, #0
 80175c0:	9303      	str	r3, [sp, #12]
 80175c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c4:	9302      	str	r3, [sp, #8]
 80175c6:	f107 0314 	add.w	r3, r7, #20
 80175ca:	9301      	str	r3, [sp, #4]
 80175cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ce:	9300      	str	r3, [sp, #0]
 80175d0:	683b      	ldr	r3, [r7, #0]
 80175d2:	687a      	ldr	r2, [r7, #4]
 80175d4:	68b9      	ldr	r1, [r7, #8]
 80175d6:	68f8      	ldr	r0, [r7, #12]
 80175d8:	f000 f850 	bl	801767c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80175dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80175de:	f000 f8d5 	bl	801778c <prvAddNewTaskToReadyList>
 80175e2:	e001      	b.n	80175e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80175e4:	2300      	movs	r3, #0
 80175e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80175e8:	697b      	ldr	r3, [r7, #20]
	}
 80175ea:	4618      	mov	r0, r3
 80175ec:	3728      	adds	r7, #40	; 0x28
 80175ee:	46bd      	mov	sp, r7
 80175f0:	bd80      	pop	{r7, pc}

080175f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80175f2:	b580      	push	{r7, lr}
 80175f4:	b08c      	sub	sp, #48	; 0x30
 80175f6:	af04      	add	r7, sp, #16
 80175f8:	60f8      	str	r0, [r7, #12]
 80175fa:	60b9      	str	r1, [r7, #8]
 80175fc:	603b      	str	r3, [r7, #0]
 80175fe:	4613      	mov	r3, r2
 8017600:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017602:	88fb      	ldrh	r3, [r7, #6]
 8017604:	009b      	lsls	r3, r3, #2
 8017606:	4618      	mov	r0, r3
 8017608:	f001 fece 	bl	80193a8 <pvPortMalloc>
 801760c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d00e      	beq.n	8017632 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017614:	2054      	movs	r0, #84	; 0x54
 8017616:	f001 fec7 	bl	80193a8 <pvPortMalloc>
 801761a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801761c:	69fb      	ldr	r3, [r7, #28]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d003      	beq.n	801762a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017622:	69fb      	ldr	r3, [r7, #28]
 8017624:	697a      	ldr	r2, [r7, #20]
 8017626:	631a      	str	r2, [r3, #48]	; 0x30
 8017628:	e005      	b.n	8017636 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801762a:	6978      	ldr	r0, [r7, #20]
 801762c:	f001 ff88 	bl	8019540 <vPortFree>
 8017630:	e001      	b.n	8017636 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017632:	2300      	movs	r3, #0
 8017634:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017636:	69fb      	ldr	r3, [r7, #28]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d017      	beq.n	801766c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801763c:	69fb      	ldr	r3, [r7, #28]
 801763e:	2200      	movs	r2, #0
 8017640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017644:	88fa      	ldrh	r2, [r7, #6]
 8017646:	2300      	movs	r3, #0
 8017648:	9303      	str	r3, [sp, #12]
 801764a:	69fb      	ldr	r3, [r7, #28]
 801764c:	9302      	str	r3, [sp, #8]
 801764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017650:	9301      	str	r3, [sp, #4]
 8017652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017654:	9300      	str	r3, [sp, #0]
 8017656:	683b      	ldr	r3, [r7, #0]
 8017658:	68b9      	ldr	r1, [r7, #8]
 801765a:	68f8      	ldr	r0, [r7, #12]
 801765c:	f000 f80e 	bl	801767c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017660:	69f8      	ldr	r0, [r7, #28]
 8017662:	f000 f893 	bl	801778c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017666:	2301      	movs	r3, #1
 8017668:	61bb      	str	r3, [r7, #24]
 801766a:	e002      	b.n	8017672 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801766c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017670:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017672:	69bb      	ldr	r3, [r7, #24]
	}
 8017674:	4618      	mov	r0, r3
 8017676:	3720      	adds	r7, #32
 8017678:	46bd      	mov	sp, r7
 801767a:	bd80      	pop	{r7, pc}

0801767c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b088      	sub	sp, #32
 8017680:	af00      	add	r7, sp, #0
 8017682:	60f8      	str	r0, [r7, #12]
 8017684:	60b9      	str	r1, [r7, #8]
 8017686:	607a      	str	r2, [r7, #4]
 8017688:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801768c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801768e:	6879      	ldr	r1, [r7, #4]
 8017690:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017694:	440b      	add	r3, r1
 8017696:	009b      	lsls	r3, r3, #2
 8017698:	4413      	add	r3, r2
 801769a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801769c:	69bb      	ldr	r3, [r7, #24]
 801769e:	f023 0307 	bic.w	r3, r3, #7
 80176a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80176a4:	69bb      	ldr	r3, [r7, #24]
 80176a6:	f003 0307 	and.w	r3, r3, #7
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d00a      	beq.n	80176c4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80176ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176b2:	f383 8811 	msr	BASEPRI, r3
 80176b6:	f3bf 8f6f 	isb	sy
 80176ba:	f3bf 8f4f 	dsb	sy
 80176be:	617b      	str	r3, [r7, #20]
}
 80176c0:	bf00      	nop
 80176c2:	e7fe      	b.n	80176c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d01f      	beq.n	801770a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80176ca:	2300      	movs	r3, #0
 80176cc:	61fb      	str	r3, [r7, #28]
 80176ce:	e012      	b.n	80176f6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80176d0:	68ba      	ldr	r2, [r7, #8]
 80176d2:	69fb      	ldr	r3, [r7, #28]
 80176d4:	4413      	add	r3, r2
 80176d6:	7819      	ldrb	r1, [r3, #0]
 80176d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80176da:	69fb      	ldr	r3, [r7, #28]
 80176dc:	4413      	add	r3, r2
 80176de:	3334      	adds	r3, #52	; 0x34
 80176e0:	460a      	mov	r2, r1
 80176e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80176e4:	68ba      	ldr	r2, [r7, #8]
 80176e6:	69fb      	ldr	r3, [r7, #28]
 80176e8:	4413      	add	r3, r2
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d006      	beq.n	80176fe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80176f0:	69fb      	ldr	r3, [r7, #28]
 80176f2:	3301      	adds	r3, #1
 80176f4:	61fb      	str	r3, [r7, #28]
 80176f6:	69fb      	ldr	r3, [r7, #28]
 80176f8:	2b0f      	cmp	r3, #15
 80176fa:	d9e9      	bls.n	80176d0 <prvInitialiseNewTask+0x54>
 80176fc:	e000      	b.n	8017700 <prvInitialiseNewTask+0x84>
			{
				break;
 80176fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017702:	2200      	movs	r2, #0
 8017704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017708:	e003      	b.n	8017712 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770c:	2200      	movs	r2, #0
 801770e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017714:	2b06      	cmp	r3, #6
 8017716:	d901      	bls.n	801771c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017718:	2306      	movs	r3, #6
 801771a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801771e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017720:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017726:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8017728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801772a:	2200      	movs	r2, #0
 801772c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017730:	3304      	adds	r3, #4
 8017732:	4618      	mov	r0, r3
 8017734:	f7fe fe80 	bl	8016438 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801773a:	3318      	adds	r3, #24
 801773c:	4618      	mov	r0, r3
 801773e:	f7fe fe7b 	bl	8016438 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017746:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801774a:	f1c3 0207 	rsb	r2, r3, #7
 801774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017750:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017756:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801775a:	2200      	movs	r2, #0
 801775c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017760:	2200      	movs	r2, #0
 8017762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017766:	683a      	ldr	r2, [r7, #0]
 8017768:	68f9      	ldr	r1, [r7, #12]
 801776a:	69b8      	ldr	r0, [r7, #24]
 801776c:	f001 fbd0 	bl	8018f10 <pxPortInitialiseStack>
 8017770:	4602      	mov	r2, r0
 8017772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017774:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017778:	2b00      	cmp	r3, #0
 801777a:	d002      	beq.n	8017782 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801777e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017780:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017782:	bf00      	nop
 8017784:	3720      	adds	r7, #32
 8017786:	46bd      	mov	sp, r7
 8017788:	bd80      	pop	{r7, pc}
	...

0801778c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b082      	sub	sp, #8
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017794:	f001 fce6 	bl	8019164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017798:	4b2a      	ldr	r3, [pc, #168]	; (8017844 <prvAddNewTaskToReadyList+0xb8>)
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	3301      	adds	r3, #1
 801779e:	4a29      	ldr	r2, [pc, #164]	; (8017844 <prvAddNewTaskToReadyList+0xb8>)
 80177a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80177a2:	4b29      	ldr	r3, [pc, #164]	; (8017848 <prvAddNewTaskToReadyList+0xbc>)
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d109      	bne.n	80177be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80177aa:	4a27      	ldr	r2, [pc, #156]	; (8017848 <prvAddNewTaskToReadyList+0xbc>)
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80177b0:	4b24      	ldr	r3, [pc, #144]	; (8017844 <prvAddNewTaskToReadyList+0xb8>)
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	2b01      	cmp	r3, #1
 80177b6:	d110      	bne.n	80177da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80177b8:	f000 fc08 	bl	8017fcc <prvInitialiseTaskLists>
 80177bc:	e00d      	b.n	80177da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80177be:	4b23      	ldr	r3, [pc, #140]	; (801784c <prvAddNewTaskToReadyList+0xc0>)
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d109      	bne.n	80177da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80177c6:	4b20      	ldr	r3, [pc, #128]	; (8017848 <prvAddNewTaskToReadyList+0xbc>)
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177d0:	429a      	cmp	r2, r3
 80177d2:	d802      	bhi.n	80177da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80177d4:	4a1c      	ldr	r2, [pc, #112]	; (8017848 <prvAddNewTaskToReadyList+0xbc>)
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80177da:	4b1d      	ldr	r3, [pc, #116]	; (8017850 <prvAddNewTaskToReadyList+0xc4>)
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	3301      	adds	r3, #1
 80177e0:	4a1b      	ldr	r2, [pc, #108]	; (8017850 <prvAddNewTaskToReadyList+0xc4>)
 80177e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177e8:	2201      	movs	r2, #1
 80177ea:	409a      	lsls	r2, r3
 80177ec:	4b19      	ldr	r3, [pc, #100]	; (8017854 <prvAddNewTaskToReadyList+0xc8>)
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	4313      	orrs	r3, r2
 80177f2:	4a18      	ldr	r2, [pc, #96]	; (8017854 <prvAddNewTaskToReadyList+0xc8>)
 80177f4:	6013      	str	r3, [r2, #0]
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177fa:	4613      	mov	r3, r2
 80177fc:	009b      	lsls	r3, r3, #2
 80177fe:	4413      	add	r3, r2
 8017800:	009b      	lsls	r3, r3, #2
 8017802:	4a15      	ldr	r2, [pc, #84]	; (8017858 <prvAddNewTaskToReadyList+0xcc>)
 8017804:	441a      	add	r2, r3
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	3304      	adds	r3, #4
 801780a:	4619      	mov	r1, r3
 801780c:	4610      	mov	r0, r2
 801780e:	f7fe fe20 	bl	8016452 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017812:	f001 fcd7 	bl	80191c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017816:	4b0d      	ldr	r3, [pc, #52]	; (801784c <prvAddNewTaskToReadyList+0xc0>)
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d00e      	beq.n	801783c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801781e:	4b0a      	ldr	r3, [pc, #40]	; (8017848 <prvAddNewTaskToReadyList+0xbc>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017828:	429a      	cmp	r2, r3
 801782a:	d207      	bcs.n	801783c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801782c:	4b0b      	ldr	r3, [pc, #44]	; (801785c <prvAddNewTaskToReadyList+0xd0>)
 801782e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017832:	601a      	str	r2, [r3, #0]
 8017834:	f3bf 8f4f 	dsb	sy
 8017838:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801783c:	bf00      	nop
 801783e:	3708      	adds	r7, #8
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}
 8017844:	24002d6c 	.word	0x24002d6c
 8017848:	24002c6c 	.word	0x24002c6c
 801784c:	24002d78 	.word	0x24002d78
 8017850:	24002d88 	.word	0x24002d88
 8017854:	24002d74 	.word	0x24002d74
 8017858:	24002c70 	.word	0x24002c70
 801785c:	e000ed04 	.word	0xe000ed04

08017860 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017860:	b580      	push	{r7, lr}
 8017862:	b084      	sub	sp, #16
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017868:	2300      	movs	r3, #0
 801786a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d017      	beq.n	80178a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017872:	4b13      	ldr	r3, [pc, #76]	; (80178c0 <vTaskDelay+0x60>)
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d00a      	beq.n	8017890 <vTaskDelay+0x30>
	__asm volatile
 801787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801787e:	f383 8811 	msr	BASEPRI, r3
 8017882:	f3bf 8f6f 	isb	sy
 8017886:	f3bf 8f4f 	dsb	sy
 801788a:	60bb      	str	r3, [r7, #8]
}
 801788c:	bf00      	nop
 801788e:	e7fe      	b.n	801788e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017890:	f000 f880 	bl	8017994 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017894:	2100      	movs	r1, #0
 8017896:	6878      	ldr	r0, [r7, #4]
 8017898:	f000 feec 	bl	8018674 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801789c:	f000 f888 	bl	80179b0 <xTaskResumeAll>
 80178a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d107      	bne.n	80178b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80178a8:	4b06      	ldr	r3, [pc, #24]	; (80178c4 <vTaskDelay+0x64>)
 80178aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178ae:	601a      	str	r2, [r3, #0]
 80178b0:	f3bf 8f4f 	dsb	sy
 80178b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80178b8:	bf00      	nop
 80178ba:	3710      	adds	r7, #16
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}
 80178c0:	24002d94 	.word	0x24002d94
 80178c4:	e000ed04 	.word	0xe000ed04

080178c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b08a      	sub	sp, #40	; 0x28
 80178cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80178ce:	2300      	movs	r3, #0
 80178d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80178d2:	2300      	movs	r3, #0
 80178d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80178d6:	463a      	mov	r2, r7
 80178d8:	1d39      	adds	r1, r7, #4
 80178da:	f107 0308 	add.w	r3, r7, #8
 80178de:	4618      	mov	r0, r3
 80178e0:	f7e9 f9d8 	bl	8000c94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80178e4:	6839      	ldr	r1, [r7, #0]
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	68ba      	ldr	r2, [r7, #8]
 80178ea:	9202      	str	r2, [sp, #8]
 80178ec:	9301      	str	r3, [sp, #4]
 80178ee:	2300      	movs	r3, #0
 80178f0:	9300      	str	r3, [sp, #0]
 80178f2:	2300      	movs	r3, #0
 80178f4:	460a      	mov	r2, r1
 80178f6:	4921      	ldr	r1, [pc, #132]	; (801797c <vTaskStartScheduler+0xb4>)
 80178f8:	4821      	ldr	r0, [pc, #132]	; (8017980 <vTaskStartScheduler+0xb8>)
 80178fa:	f7ff fe1d 	bl	8017538 <xTaskCreateStatic>
 80178fe:	4603      	mov	r3, r0
 8017900:	4a20      	ldr	r2, [pc, #128]	; (8017984 <vTaskStartScheduler+0xbc>)
 8017902:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017904:	4b1f      	ldr	r3, [pc, #124]	; (8017984 <vTaskStartScheduler+0xbc>)
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d002      	beq.n	8017912 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801790c:	2301      	movs	r3, #1
 801790e:	617b      	str	r3, [r7, #20]
 8017910:	e001      	b.n	8017916 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017912:	2300      	movs	r3, #0
 8017914:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017916:	697b      	ldr	r3, [r7, #20]
 8017918:	2b01      	cmp	r3, #1
 801791a:	d102      	bne.n	8017922 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801791c:	f000 ff10 	bl	8018740 <xTimerCreateTimerTask>
 8017920:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	2b01      	cmp	r3, #1
 8017926:	d116      	bne.n	8017956 <vTaskStartScheduler+0x8e>
	__asm volatile
 8017928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801792c:	f383 8811 	msr	BASEPRI, r3
 8017930:	f3bf 8f6f 	isb	sy
 8017934:	f3bf 8f4f 	dsb	sy
 8017938:	613b      	str	r3, [r7, #16]
}
 801793a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801793c:	4b12      	ldr	r3, [pc, #72]	; (8017988 <vTaskStartScheduler+0xc0>)
 801793e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017942:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017944:	4b11      	ldr	r3, [pc, #68]	; (801798c <vTaskStartScheduler+0xc4>)
 8017946:	2201      	movs	r2, #1
 8017948:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801794a:	4b11      	ldr	r3, [pc, #68]	; (8017990 <vTaskStartScheduler+0xc8>)
 801794c:	2200      	movs	r2, #0
 801794e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017950:	f001 fb66 	bl	8019020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017954:	e00e      	b.n	8017974 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017956:	697b      	ldr	r3, [r7, #20]
 8017958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801795c:	d10a      	bne.n	8017974 <vTaskStartScheduler+0xac>
	__asm volatile
 801795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017962:	f383 8811 	msr	BASEPRI, r3
 8017966:	f3bf 8f6f 	isb	sy
 801796a:	f3bf 8f4f 	dsb	sy
 801796e:	60fb      	str	r3, [r7, #12]
}
 8017970:	bf00      	nop
 8017972:	e7fe      	b.n	8017972 <vTaskStartScheduler+0xaa>
}
 8017974:	bf00      	nop
 8017976:	3718      	adds	r7, #24
 8017978:	46bd      	mov	sp, r7
 801797a:	bd80      	pop	{r7, pc}
 801797c:	0801b824 	.word	0x0801b824
 8017980:	08017f9d 	.word	0x08017f9d
 8017984:	24002d90 	.word	0x24002d90
 8017988:	24002d8c 	.word	0x24002d8c
 801798c:	24002d78 	.word	0x24002d78
 8017990:	24002d70 	.word	0x24002d70

08017994 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017994:	b480      	push	{r7}
 8017996:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017998:	4b04      	ldr	r3, [pc, #16]	; (80179ac <vTaskSuspendAll+0x18>)
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	3301      	adds	r3, #1
 801799e:	4a03      	ldr	r2, [pc, #12]	; (80179ac <vTaskSuspendAll+0x18>)
 80179a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80179a2:	bf00      	nop
 80179a4:	46bd      	mov	sp, r7
 80179a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179aa:	4770      	bx	lr
 80179ac:	24002d94 	.word	0x24002d94

080179b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80179b0:	b580      	push	{r7, lr}
 80179b2:	b084      	sub	sp, #16
 80179b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80179b6:	2300      	movs	r3, #0
 80179b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80179ba:	2300      	movs	r3, #0
 80179bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80179be:	4b41      	ldr	r3, [pc, #260]	; (8017ac4 <xTaskResumeAll+0x114>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d10a      	bne.n	80179dc <xTaskResumeAll+0x2c>
	__asm volatile
 80179c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179ca:	f383 8811 	msr	BASEPRI, r3
 80179ce:	f3bf 8f6f 	isb	sy
 80179d2:	f3bf 8f4f 	dsb	sy
 80179d6:	603b      	str	r3, [r7, #0]
}
 80179d8:	bf00      	nop
 80179da:	e7fe      	b.n	80179da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80179dc:	f001 fbc2 	bl	8019164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80179e0:	4b38      	ldr	r3, [pc, #224]	; (8017ac4 <xTaskResumeAll+0x114>)
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	3b01      	subs	r3, #1
 80179e6:	4a37      	ldr	r2, [pc, #220]	; (8017ac4 <xTaskResumeAll+0x114>)
 80179e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80179ea:	4b36      	ldr	r3, [pc, #216]	; (8017ac4 <xTaskResumeAll+0x114>)
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d161      	bne.n	8017ab6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80179f2:	4b35      	ldr	r3, [pc, #212]	; (8017ac8 <xTaskResumeAll+0x118>)
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d05d      	beq.n	8017ab6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80179fa:	e02e      	b.n	8017a5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80179fc:	4b33      	ldr	r3, [pc, #204]	; (8017acc <xTaskResumeAll+0x11c>)
 80179fe:	68db      	ldr	r3, [r3, #12]
 8017a00:	68db      	ldr	r3, [r3, #12]
 8017a02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	3318      	adds	r3, #24
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f7fe fd7f 	bl	801650c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	3304      	adds	r3, #4
 8017a12:	4618      	mov	r0, r3
 8017a14:	f7fe fd7a 	bl	801650c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a1c:	2201      	movs	r2, #1
 8017a1e:	409a      	lsls	r2, r3
 8017a20:	4b2b      	ldr	r3, [pc, #172]	; (8017ad0 <xTaskResumeAll+0x120>)
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	4313      	orrs	r3, r2
 8017a26:	4a2a      	ldr	r2, [pc, #168]	; (8017ad0 <xTaskResumeAll+0x120>)
 8017a28:	6013      	str	r3, [r2, #0]
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a2e:	4613      	mov	r3, r2
 8017a30:	009b      	lsls	r3, r3, #2
 8017a32:	4413      	add	r3, r2
 8017a34:	009b      	lsls	r3, r3, #2
 8017a36:	4a27      	ldr	r2, [pc, #156]	; (8017ad4 <xTaskResumeAll+0x124>)
 8017a38:	441a      	add	r2, r3
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	3304      	adds	r3, #4
 8017a3e:	4619      	mov	r1, r3
 8017a40:	4610      	mov	r0, r2
 8017a42:	f7fe fd06 	bl	8016452 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a4a:	4b23      	ldr	r3, [pc, #140]	; (8017ad8 <xTaskResumeAll+0x128>)
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a50:	429a      	cmp	r2, r3
 8017a52:	d302      	bcc.n	8017a5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8017a54:	4b21      	ldr	r3, [pc, #132]	; (8017adc <xTaskResumeAll+0x12c>)
 8017a56:	2201      	movs	r2, #1
 8017a58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017a5a:	4b1c      	ldr	r3, [pc, #112]	; (8017acc <xTaskResumeAll+0x11c>)
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d1cc      	bne.n	80179fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d001      	beq.n	8017a6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017a68:	f000 fb4e 	bl	8018108 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017a6c:	4b1c      	ldr	r3, [pc, #112]	; (8017ae0 <xTaskResumeAll+0x130>)
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d010      	beq.n	8017a9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017a78:	f000 f846 	bl	8017b08 <xTaskIncrementTick>
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d002      	beq.n	8017a88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8017a82:	4b16      	ldr	r3, [pc, #88]	; (8017adc <xTaskResumeAll+0x12c>)
 8017a84:	2201      	movs	r2, #1
 8017a86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	3b01      	subs	r3, #1
 8017a8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d1f1      	bne.n	8017a78 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8017a94:	4b12      	ldr	r3, [pc, #72]	; (8017ae0 <xTaskResumeAll+0x130>)
 8017a96:	2200      	movs	r2, #0
 8017a98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017a9a:	4b10      	ldr	r3, [pc, #64]	; (8017adc <xTaskResumeAll+0x12c>)
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d009      	beq.n	8017ab6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017aa2:	2301      	movs	r3, #1
 8017aa4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017aa6:	4b0f      	ldr	r3, [pc, #60]	; (8017ae4 <xTaskResumeAll+0x134>)
 8017aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017aac:	601a      	str	r2, [r3, #0]
 8017aae:	f3bf 8f4f 	dsb	sy
 8017ab2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017ab6:	f001 fb85 	bl	80191c4 <vPortExitCritical>

	return xAlreadyYielded;
 8017aba:	68bb      	ldr	r3, [r7, #8]
}
 8017abc:	4618      	mov	r0, r3
 8017abe:	3710      	adds	r7, #16
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	bd80      	pop	{r7, pc}
 8017ac4:	24002d94 	.word	0x24002d94
 8017ac8:	24002d6c 	.word	0x24002d6c
 8017acc:	24002d2c 	.word	0x24002d2c
 8017ad0:	24002d74 	.word	0x24002d74
 8017ad4:	24002c70 	.word	0x24002c70
 8017ad8:	24002c6c 	.word	0x24002c6c
 8017adc:	24002d80 	.word	0x24002d80
 8017ae0:	24002d7c 	.word	0x24002d7c
 8017ae4:	e000ed04 	.word	0xe000ed04

08017ae8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017ae8:	b480      	push	{r7}
 8017aea:	b083      	sub	sp, #12
 8017aec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017aee:	4b05      	ldr	r3, [pc, #20]	; (8017b04 <xTaskGetTickCount+0x1c>)
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017af4:	687b      	ldr	r3, [r7, #4]
}
 8017af6:	4618      	mov	r0, r3
 8017af8:	370c      	adds	r7, #12
 8017afa:	46bd      	mov	sp, r7
 8017afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b00:	4770      	bx	lr
 8017b02:	bf00      	nop
 8017b04:	24002d70 	.word	0x24002d70

08017b08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b086      	sub	sp, #24
 8017b0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017b12:	4b4e      	ldr	r3, [pc, #312]	; (8017c4c <xTaskIncrementTick+0x144>)
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	f040 808e 	bne.w	8017c38 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017b1c:	4b4c      	ldr	r3, [pc, #304]	; (8017c50 <xTaskIncrementTick+0x148>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	3301      	adds	r3, #1
 8017b22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017b24:	4a4a      	ldr	r2, [pc, #296]	; (8017c50 <xTaskIncrementTick+0x148>)
 8017b26:	693b      	ldr	r3, [r7, #16]
 8017b28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017b2a:	693b      	ldr	r3, [r7, #16]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d120      	bne.n	8017b72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017b30:	4b48      	ldr	r3, [pc, #288]	; (8017c54 <xTaskIncrementTick+0x14c>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d00a      	beq.n	8017b50 <xTaskIncrementTick+0x48>
	__asm volatile
 8017b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b3e:	f383 8811 	msr	BASEPRI, r3
 8017b42:	f3bf 8f6f 	isb	sy
 8017b46:	f3bf 8f4f 	dsb	sy
 8017b4a:	603b      	str	r3, [r7, #0]
}
 8017b4c:	bf00      	nop
 8017b4e:	e7fe      	b.n	8017b4e <xTaskIncrementTick+0x46>
 8017b50:	4b40      	ldr	r3, [pc, #256]	; (8017c54 <xTaskIncrementTick+0x14c>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	60fb      	str	r3, [r7, #12]
 8017b56:	4b40      	ldr	r3, [pc, #256]	; (8017c58 <xTaskIncrementTick+0x150>)
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	4a3e      	ldr	r2, [pc, #248]	; (8017c54 <xTaskIncrementTick+0x14c>)
 8017b5c:	6013      	str	r3, [r2, #0]
 8017b5e:	4a3e      	ldr	r2, [pc, #248]	; (8017c58 <xTaskIncrementTick+0x150>)
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	6013      	str	r3, [r2, #0]
 8017b64:	4b3d      	ldr	r3, [pc, #244]	; (8017c5c <xTaskIncrementTick+0x154>)
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	3301      	adds	r3, #1
 8017b6a:	4a3c      	ldr	r2, [pc, #240]	; (8017c5c <xTaskIncrementTick+0x154>)
 8017b6c:	6013      	str	r3, [r2, #0]
 8017b6e:	f000 facb 	bl	8018108 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017b72:	4b3b      	ldr	r3, [pc, #236]	; (8017c60 <xTaskIncrementTick+0x158>)
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	693a      	ldr	r2, [r7, #16]
 8017b78:	429a      	cmp	r2, r3
 8017b7a:	d348      	bcc.n	8017c0e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017b7c:	4b35      	ldr	r3, [pc, #212]	; (8017c54 <xTaskIncrementTick+0x14c>)
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d104      	bne.n	8017b90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017b86:	4b36      	ldr	r3, [pc, #216]	; (8017c60 <xTaskIncrementTick+0x158>)
 8017b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017b8c:	601a      	str	r2, [r3, #0]
					break;
 8017b8e:	e03e      	b.n	8017c0e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b90:	4b30      	ldr	r3, [pc, #192]	; (8017c54 <xTaskIncrementTick+0x14c>)
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	68db      	ldr	r3, [r3, #12]
 8017b96:	68db      	ldr	r3, [r3, #12]
 8017b98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017b9a:	68bb      	ldr	r3, [r7, #8]
 8017b9c:	685b      	ldr	r3, [r3, #4]
 8017b9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017ba0:	693a      	ldr	r2, [r7, #16]
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d203      	bcs.n	8017bb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017ba8:	4a2d      	ldr	r2, [pc, #180]	; (8017c60 <xTaskIncrementTick+0x158>)
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017bae:	e02e      	b.n	8017c0e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017bb0:	68bb      	ldr	r3, [r7, #8]
 8017bb2:	3304      	adds	r3, #4
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	f7fe fca9 	bl	801650c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017bba:	68bb      	ldr	r3, [r7, #8]
 8017bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d004      	beq.n	8017bcc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017bc2:	68bb      	ldr	r3, [r7, #8]
 8017bc4:	3318      	adds	r3, #24
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f7fe fca0 	bl	801650c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017bcc:	68bb      	ldr	r3, [r7, #8]
 8017bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bd0:	2201      	movs	r2, #1
 8017bd2:	409a      	lsls	r2, r3
 8017bd4:	4b23      	ldr	r3, [pc, #140]	; (8017c64 <xTaskIncrementTick+0x15c>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	4313      	orrs	r3, r2
 8017bda:	4a22      	ldr	r2, [pc, #136]	; (8017c64 <xTaskIncrementTick+0x15c>)
 8017bdc:	6013      	str	r3, [r2, #0]
 8017bde:	68bb      	ldr	r3, [r7, #8]
 8017be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017be2:	4613      	mov	r3, r2
 8017be4:	009b      	lsls	r3, r3, #2
 8017be6:	4413      	add	r3, r2
 8017be8:	009b      	lsls	r3, r3, #2
 8017bea:	4a1f      	ldr	r2, [pc, #124]	; (8017c68 <xTaskIncrementTick+0x160>)
 8017bec:	441a      	add	r2, r3
 8017bee:	68bb      	ldr	r3, [r7, #8]
 8017bf0:	3304      	adds	r3, #4
 8017bf2:	4619      	mov	r1, r3
 8017bf4:	4610      	mov	r0, r2
 8017bf6:	f7fe fc2c 	bl	8016452 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017bfa:	68bb      	ldr	r3, [r7, #8]
 8017bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bfe:	4b1b      	ldr	r3, [pc, #108]	; (8017c6c <xTaskIncrementTick+0x164>)
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c04:	429a      	cmp	r2, r3
 8017c06:	d3b9      	bcc.n	8017b7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017c08:	2301      	movs	r3, #1
 8017c0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017c0c:	e7b6      	b.n	8017b7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017c0e:	4b17      	ldr	r3, [pc, #92]	; (8017c6c <xTaskIncrementTick+0x164>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c14:	4914      	ldr	r1, [pc, #80]	; (8017c68 <xTaskIncrementTick+0x160>)
 8017c16:	4613      	mov	r3, r2
 8017c18:	009b      	lsls	r3, r3, #2
 8017c1a:	4413      	add	r3, r2
 8017c1c:	009b      	lsls	r3, r3, #2
 8017c1e:	440b      	add	r3, r1
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	2b01      	cmp	r3, #1
 8017c24:	d901      	bls.n	8017c2a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8017c26:	2301      	movs	r3, #1
 8017c28:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017c2a:	4b11      	ldr	r3, [pc, #68]	; (8017c70 <xTaskIncrementTick+0x168>)
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d007      	beq.n	8017c42 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8017c32:	2301      	movs	r3, #1
 8017c34:	617b      	str	r3, [r7, #20]
 8017c36:	e004      	b.n	8017c42 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017c38:	4b0e      	ldr	r3, [pc, #56]	; (8017c74 <xTaskIncrementTick+0x16c>)
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	3301      	adds	r3, #1
 8017c3e:	4a0d      	ldr	r2, [pc, #52]	; (8017c74 <xTaskIncrementTick+0x16c>)
 8017c40:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017c42:	697b      	ldr	r3, [r7, #20]
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3718      	adds	r7, #24
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	24002d94 	.word	0x24002d94
 8017c50:	24002d70 	.word	0x24002d70
 8017c54:	24002d24 	.word	0x24002d24
 8017c58:	24002d28 	.word	0x24002d28
 8017c5c:	24002d84 	.word	0x24002d84
 8017c60:	24002d8c 	.word	0x24002d8c
 8017c64:	24002d74 	.word	0x24002d74
 8017c68:	24002c70 	.word	0x24002c70
 8017c6c:	24002c6c 	.word	0x24002c6c
 8017c70:	24002d80 	.word	0x24002d80
 8017c74:	24002d7c 	.word	0x24002d7c

08017c78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017c78:	b480      	push	{r7}
 8017c7a:	b087      	sub	sp, #28
 8017c7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017c7e:	4b27      	ldr	r3, [pc, #156]	; (8017d1c <vTaskSwitchContext+0xa4>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d003      	beq.n	8017c8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017c86:	4b26      	ldr	r3, [pc, #152]	; (8017d20 <vTaskSwitchContext+0xa8>)
 8017c88:	2201      	movs	r2, #1
 8017c8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017c8c:	e03f      	b.n	8017d0e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8017c8e:	4b24      	ldr	r3, [pc, #144]	; (8017d20 <vTaskSwitchContext+0xa8>)
 8017c90:	2200      	movs	r2, #0
 8017c92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c94:	4b23      	ldr	r3, [pc, #140]	; (8017d24 <vTaskSwitchContext+0xac>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	fab3 f383 	clz	r3, r3
 8017ca0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8017ca2:	7afb      	ldrb	r3, [r7, #11]
 8017ca4:	f1c3 031f 	rsb	r3, r3, #31
 8017ca8:	617b      	str	r3, [r7, #20]
 8017caa:	491f      	ldr	r1, [pc, #124]	; (8017d28 <vTaskSwitchContext+0xb0>)
 8017cac:	697a      	ldr	r2, [r7, #20]
 8017cae:	4613      	mov	r3, r2
 8017cb0:	009b      	lsls	r3, r3, #2
 8017cb2:	4413      	add	r3, r2
 8017cb4:	009b      	lsls	r3, r3, #2
 8017cb6:	440b      	add	r3, r1
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d10a      	bne.n	8017cd4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8017cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cc2:	f383 8811 	msr	BASEPRI, r3
 8017cc6:	f3bf 8f6f 	isb	sy
 8017cca:	f3bf 8f4f 	dsb	sy
 8017cce:	607b      	str	r3, [r7, #4]
}
 8017cd0:	bf00      	nop
 8017cd2:	e7fe      	b.n	8017cd2 <vTaskSwitchContext+0x5a>
 8017cd4:	697a      	ldr	r2, [r7, #20]
 8017cd6:	4613      	mov	r3, r2
 8017cd8:	009b      	lsls	r3, r3, #2
 8017cda:	4413      	add	r3, r2
 8017cdc:	009b      	lsls	r3, r3, #2
 8017cde:	4a12      	ldr	r2, [pc, #72]	; (8017d28 <vTaskSwitchContext+0xb0>)
 8017ce0:	4413      	add	r3, r2
 8017ce2:	613b      	str	r3, [r7, #16]
 8017ce4:	693b      	ldr	r3, [r7, #16]
 8017ce6:	685b      	ldr	r3, [r3, #4]
 8017ce8:	685a      	ldr	r2, [r3, #4]
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	605a      	str	r2, [r3, #4]
 8017cee:	693b      	ldr	r3, [r7, #16]
 8017cf0:	685a      	ldr	r2, [r3, #4]
 8017cf2:	693b      	ldr	r3, [r7, #16]
 8017cf4:	3308      	adds	r3, #8
 8017cf6:	429a      	cmp	r2, r3
 8017cf8:	d104      	bne.n	8017d04 <vTaskSwitchContext+0x8c>
 8017cfa:	693b      	ldr	r3, [r7, #16]
 8017cfc:	685b      	ldr	r3, [r3, #4]
 8017cfe:	685a      	ldr	r2, [r3, #4]
 8017d00:	693b      	ldr	r3, [r7, #16]
 8017d02:	605a      	str	r2, [r3, #4]
 8017d04:	693b      	ldr	r3, [r7, #16]
 8017d06:	685b      	ldr	r3, [r3, #4]
 8017d08:	68db      	ldr	r3, [r3, #12]
 8017d0a:	4a08      	ldr	r2, [pc, #32]	; (8017d2c <vTaskSwitchContext+0xb4>)
 8017d0c:	6013      	str	r3, [r2, #0]
}
 8017d0e:	bf00      	nop
 8017d10:	371c      	adds	r7, #28
 8017d12:	46bd      	mov	sp, r7
 8017d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d18:	4770      	bx	lr
 8017d1a:	bf00      	nop
 8017d1c:	24002d94 	.word	0x24002d94
 8017d20:	24002d80 	.word	0x24002d80
 8017d24:	24002d74 	.word	0x24002d74
 8017d28:	24002c70 	.word	0x24002c70
 8017d2c:	24002c6c 	.word	0x24002c6c

08017d30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b084      	sub	sp, #16
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
 8017d38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d10a      	bne.n	8017d56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d44:	f383 8811 	msr	BASEPRI, r3
 8017d48:	f3bf 8f6f 	isb	sy
 8017d4c:	f3bf 8f4f 	dsb	sy
 8017d50:	60fb      	str	r3, [r7, #12]
}
 8017d52:	bf00      	nop
 8017d54:	e7fe      	b.n	8017d54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017d56:	4b07      	ldr	r3, [pc, #28]	; (8017d74 <vTaskPlaceOnEventList+0x44>)
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	3318      	adds	r3, #24
 8017d5c:	4619      	mov	r1, r3
 8017d5e:	6878      	ldr	r0, [r7, #4]
 8017d60:	f7fe fb9b 	bl	801649a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017d64:	2101      	movs	r1, #1
 8017d66:	6838      	ldr	r0, [r7, #0]
 8017d68:	f000 fc84 	bl	8018674 <prvAddCurrentTaskToDelayedList>
}
 8017d6c:	bf00      	nop
 8017d6e:	3710      	adds	r7, #16
 8017d70:	46bd      	mov	sp, r7
 8017d72:	bd80      	pop	{r7, pc}
 8017d74:	24002c6c 	.word	0x24002c6c

08017d78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b086      	sub	sp, #24
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	60f8      	str	r0, [r7, #12]
 8017d80:	60b9      	str	r1, [r7, #8]
 8017d82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d10a      	bne.n	8017da0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d8e:	f383 8811 	msr	BASEPRI, r3
 8017d92:	f3bf 8f6f 	isb	sy
 8017d96:	f3bf 8f4f 	dsb	sy
 8017d9a:	617b      	str	r3, [r7, #20]
}
 8017d9c:	bf00      	nop
 8017d9e:	e7fe      	b.n	8017d9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017da0:	4b0a      	ldr	r3, [pc, #40]	; (8017dcc <vTaskPlaceOnEventListRestricted+0x54>)
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	3318      	adds	r3, #24
 8017da6:	4619      	mov	r1, r3
 8017da8:	68f8      	ldr	r0, [r7, #12]
 8017daa:	f7fe fb52 	bl	8016452 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d002      	beq.n	8017dba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017db8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017dba:	6879      	ldr	r1, [r7, #4]
 8017dbc:	68b8      	ldr	r0, [r7, #8]
 8017dbe:	f000 fc59 	bl	8018674 <prvAddCurrentTaskToDelayedList>
	}
 8017dc2:	bf00      	nop
 8017dc4:	3718      	adds	r7, #24
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd80      	pop	{r7, pc}
 8017dca:	bf00      	nop
 8017dcc:	24002c6c 	.word	0x24002c6c

08017dd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b086      	sub	sp, #24
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	68db      	ldr	r3, [r3, #12]
 8017ddc:	68db      	ldr	r3, [r3, #12]
 8017dde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017de0:	693b      	ldr	r3, [r7, #16]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d10a      	bne.n	8017dfc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dea:	f383 8811 	msr	BASEPRI, r3
 8017dee:	f3bf 8f6f 	isb	sy
 8017df2:	f3bf 8f4f 	dsb	sy
 8017df6:	60fb      	str	r3, [r7, #12]
}
 8017df8:	bf00      	nop
 8017dfa:	e7fe      	b.n	8017dfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017dfc:	693b      	ldr	r3, [r7, #16]
 8017dfe:	3318      	adds	r3, #24
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7fe fb83 	bl	801650c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017e06:	4b1d      	ldr	r3, [pc, #116]	; (8017e7c <xTaskRemoveFromEventList+0xac>)
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d11c      	bne.n	8017e48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017e0e:	693b      	ldr	r3, [r7, #16]
 8017e10:	3304      	adds	r3, #4
 8017e12:	4618      	mov	r0, r3
 8017e14:	f7fe fb7a 	bl	801650c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017e18:	693b      	ldr	r3, [r7, #16]
 8017e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e1c:	2201      	movs	r2, #1
 8017e1e:	409a      	lsls	r2, r3
 8017e20:	4b17      	ldr	r3, [pc, #92]	; (8017e80 <xTaskRemoveFromEventList+0xb0>)
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	4313      	orrs	r3, r2
 8017e26:	4a16      	ldr	r2, [pc, #88]	; (8017e80 <xTaskRemoveFromEventList+0xb0>)
 8017e28:	6013      	str	r3, [r2, #0]
 8017e2a:	693b      	ldr	r3, [r7, #16]
 8017e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e2e:	4613      	mov	r3, r2
 8017e30:	009b      	lsls	r3, r3, #2
 8017e32:	4413      	add	r3, r2
 8017e34:	009b      	lsls	r3, r3, #2
 8017e36:	4a13      	ldr	r2, [pc, #76]	; (8017e84 <xTaskRemoveFromEventList+0xb4>)
 8017e38:	441a      	add	r2, r3
 8017e3a:	693b      	ldr	r3, [r7, #16]
 8017e3c:	3304      	adds	r3, #4
 8017e3e:	4619      	mov	r1, r3
 8017e40:	4610      	mov	r0, r2
 8017e42:	f7fe fb06 	bl	8016452 <vListInsertEnd>
 8017e46:	e005      	b.n	8017e54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017e48:	693b      	ldr	r3, [r7, #16]
 8017e4a:	3318      	adds	r3, #24
 8017e4c:	4619      	mov	r1, r3
 8017e4e:	480e      	ldr	r0, [pc, #56]	; (8017e88 <xTaskRemoveFromEventList+0xb8>)
 8017e50:	f7fe faff 	bl	8016452 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017e54:	693b      	ldr	r3, [r7, #16]
 8017e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e58:	4b0c      	ldr	r3, [pc, #48]	; (8017e8c <xTaskRemoveFromEventList+0xbc>)
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	d905      	bls.n	8017e6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017e62:	2301      	movs	r3, #1
 8017e64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017e66:	4b0a      	ldr	r3, [pc, #40]	; (8017e90 <xTaskRemoveFromEventList+0xc0>)
 8017e68:	2201      	movs	r2, #1
 8017e6a:	601a      	str	r2, [r3, #0]
 8017e6c:	e001      	b.n	8017e72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017e72:	697b      	ldr	r3, [r7, #20]
}
 8017e74:	4618      	mov	r0, r3
 8017e76:	3718      	adds	r7, #24
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd80      	pop	{r7, pc}
 8017e7c:	24002d94 	.word	0x24002d94
 8017e80:	24002d74 	.word	0x24002d74
 8017e84:	24002c70 	.word	0x24002c70
 8017e88:	24002d2c 	.word	0x24002d2c
 8017e8c:	24002c6c 	.word	0x24002c6c
 8017e90:	24002d80 	.word	0x24002d80

08017e94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017e94:	b480      	push	{r7}
 8017e96:	b083      	sub	sp, #12
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017e9c:	4b06      	ldr	r3, [pc, #24]	; (8017eb8 <vTaskInternalSetTimeOutState+0x24>)
 8017e9e:	681a      	ldr	r2, [r3, #0]
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017ea4:	4b05      	ldr	r3, [pc, #20]	; (8017ebc <vTaskInternalSetTimeOutState+0x28>)
 8017ea6:	681a      	ldr	r2, [r3, #0]
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	605a      	str	r2, [r3, #4]
}
 8017eac:	bf00      	nop
 8017eae:	370c      	adds	r7, #12
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb6:	4770      	bx	lr
 8017eb8:	24002d84 	.word	0x24002d84
 8017ebc:	24002d70 	.word	0x24002d70

08017ec0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b088      	sub	sp, #32
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
 8017ec8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d10a      	bne.n	8017ee6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ed4:	f383 8811 	msr	BASEPRI, r3
 8017ed8:	f3bf 8f6f 	isb	sy
 8017edc:	f3bf 8f4f 	dsb	sy
 8017ee0:	613b      	str	r3, [r7, #16]
}
 8017ee2:	bf00      	nop
 8017ee4:	e7fe      	b.n	8017ee4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017ee6:	683b      	ldr	r3, [r7, #0]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d10a      	bne.n	8017f02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ef0:	f383 8811 	msr	BASEPRI, r3
 8017ef4:	f3bf 8f6f 	isb	sy
 8017ef8:	f3bf 8f4f 	dsb	sy
 8017efc:	60fb      	str	r3, [r7, #12]
}
 8017efe:	bf00      	nop
 8017f00:	e7fe      	b.n	8017f00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017f02:	f001 f92f 	bl	8019164 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017f06:	4b1d      	ldr	r3, [pc, #116]	; (8017f7c <xTaskCheckForTimeOut+0xbc>)
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	685b      	ldr	r3, [r3, #4]
 8017f10:	69ba      	ldr	r2, [r7, #24]
 8017f12:	1ad3      	subs	r3, r2, r3
 8017f14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017f16:	683b      	ldr	r3, [r7, #0]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f1e:	d102      	bne.n	8017f26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017f20:	2300      	movs	r3, #0
 8017f22:	61fb      	str	r3, [r7, #28]
 8017f24:	e023      	b.n	8017f6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	681a      	ldr	r2, [r3, #0]
 8017f2a:	4b15      	ldr	r3, [pc, #84]	; (8017f80 <xTaskCheckForTimeOut+0xc0>)
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	429a      	cmp	r2, r3
 8017f30:	d007      	beq.n	8017f42 <xTaskCheckForTimeOut+0x82>
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	685b      	ldr	r3, [r3, #4]
 8017f36:	69ba      	ldr	r2, [r7, #24]
 8017f38:	429a      	cmp	r2, r3
 8017f3a:	d302      	bcc.n	8017f42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	61fb      	str	r3, [r7, #28]
 8017f40:	e015      	b.n	8017f6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017f42:	683b      	ldr	r3, [r7, #0]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	697a      	ldr	r2, [r7, #20]
 8017f48:	429a      	cmp	r2, r3
 8017f4a:	d20b      	bcs.n	8017f64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017f4c:	683b      	ldr	r3, [r7, #0]
 8017f4e:	681a      	ldr	r2, [r3, #0]
 8017f50:	697b      	ldr	r3, [r7, #20]
 8017f52:	1ad2      	subs	r2, r2, r3
 8017f54:	683b      	ldr	r3, [r7, #0]
 8017f56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017f58:	6878      	ldr	r0, [r7, #4]
 8017f5a:	f7ff ff9b 	bl	8017e94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017f5e:	2300      	movs	r3, #0
 8017f60:	61fb      	str	r3, [r7, #28]
 8017f62:	e004      	b.n	8017f6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017f64:	683b      	ldr	r3, [r7, #0]
 8017f66:	2200      	movs	r2, #0
 8017f68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017f6a:	2301      	movs	r3, #1
 8017f6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017f6e:	f001 f929 	bl	80191c4 <vPortExitCritical>

	return xReturn;
 8017f72:	69fb      	ldr	r3, [r7, #28]
}
 8017f74:	4618      	mov	r0, r3
 8017f76:	3720      	adds	r7, #32
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	bd80      	pop	{r7, pc}
 8017f7c:	24002d70 	.word	0x24002d70
 8017f80:	24002d84 	.word	0x24002d84

08017f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017f84:	b480      	push	{r7}
 8017f86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017f88:	4b03      	ldr	r3, [pc, #12]	; (8017f98 <vTaskMissedYield+0x14>)
 8017f8a:	2201      	movs	r2, #1
 8017f8c:	601a      	str	r2, [r3, #0]
}
 8017f8e:	bf00      	nop
 8017f90:	46bd      	mov	sp, r7
 8017f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f96:	4770      	bx	lr
 8017f98:	24002d80 	.word	0x24002d80

08017f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b082      	sub	sp, #8
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017fa4:	f000 f852 	bl	801804c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017fa8:	4b06      	ldr	r3, [pc, #24]	; (8017fc4 <prvIdleTask+0x28>)
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	2b01      	cmp	r3, #1
 8017fae:	d9f9      	bls.n	8017fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017fb0:	4b05      	ldr	r3, [pc, #20]	; (8017fc8 <prvIdleTask+0x2c>)
 8017fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017fb6:	601a      	str	r2, [r3, #0]
 8017fb8:	f3bf 8f4f 	dsb	sy
 8017fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017fc0:	e7f0      	b.n	8017fa4 <prvIdleTask+0x8>
 8017fc2:	bf00      	nop
 8017fc4:	24002c70 	.word	0x24002c70
 8017fc8:	e000ed04 	.word	0xe000ed04

08017fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b082      	sub	sp, #8
 8017fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	607b      	str	r3, [r7, #4]
 8017fd6:	e00c      	b.n	8017ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017fd8:	687a      	ldr	r2, [r7, #4]
 8017fda:	4613      	mov	r3, r2
 8017fdc:	009b      	lsls	r3, r3, #2
 8017fde:	4413      	add	r3, r2
 8017fe0:	009b      	lsls	r3, r3, #2
 8017fe2:	4a12      	ldr	r2, [pc, #72]	; (801802c <prvInitialiseTaskLists+0x60>)
 8017fe4:	4413      	add	r3, r2
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	f7fe fa06 	bl	80163f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	3301      	adds	r3, #1
 8017ff0:	607b      	str	r3, [r7, #4]
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	2b06      	cmp	r3, #6
 8017ff6:	d9ef      	bls.n	8017fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017ff8:	480d      	ldr	r0, [pc, #52]	; (8018030 <prvInitialiseTaskLists+0x64>)
 8017ffa:	f7fe f9fd 	bl	80163f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017ffe:	480d      	ldr	r0, [pc, #52]	; (8018034 <prvInitialiseTaskLists+0x68>)
 8018000:	f7fe f9fa 	bl	80163f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018004:	480c      	ldr	r0, [pc, #48]	; (8018038 <prvInitialiseTaskLists+0x6c>)
 8018006:	f7fe f9f7 	bl	80163f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801800a:	480c      	ldr	r0, [pc, #48]	; (801803c <prvInitialiseTaskLists+0x70>)
 801800c:	f7fe f9f4 	bl	80163f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018010:	480b      	ldr	r0, [pc, #44]	; (8018040 <prvInitialiseTaskLists+0x74>)
 8018012:	f7fe f9f1 	bl	80163f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018016:	4b0b      	ldr	r3, [pc, #44]	; (8018044 <prvInitialiseTaskLists+0x78>)
 8018018:	4a05      	ldr	r2, [pc, #20]	; (8018030 <prvInitialiseTaskLists+0x64>)
 801801a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801801c:	4b0a      	ldr	r3, [pc, #40]	; (8018048 <prvInitialiseTaskLists+0x7c>)
 801801e:	4a05      	ldr	r2, [pc, #20]	; (8018034 <prvInitialiseTaskLists+0x68>)
 8018020:	601a      	str	r2, [r3, #0]
}
 8018022:	bf00      	nop
 8018024:	3708      	adds	r7, #8
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}
 801802a:	bf00      	nop
 801802c:	24002c70 	.word	0x24002c70
 8018030:	24002cfc 	.word	0x24002cfc
 8018034:	24002d10 	.word	0x24002d10
 8018038:	24002d2c 	.word	0x24002d2c
 801803c:	24002d40 	.word	0x24002d40
 8018040:	24002d58 	.word	0x24002d58
 8018044:	24002d24 	.word	0x24002d24
 8018048:	24002d28 	.word	0x24002d28

0801804c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018052:	e019      	b.n	8018088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018054:	f001 f886 	bl	8019164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018058:	4b10      	ldr	r3, [pc, #64]	; (801809c <prvCheckTasksWaitingTermination+0x50>)
 801805a:	68db      	ldr	r3, [r3, #12]
 801805c:	68db      	ldr	r3, [r3, #12]
 801805e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	3304      	adds	r3, #4
 8018064:	4618      	mov	r0, r3
 8018066:	f7fe fa51 	bl	801650c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801806a:	4b0d      	ldr	r3, [pc, #52]	; (80180a0 <prvCheckTasksWaitingTermination+0x54>)
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	3b01      	subs	r3, #1
 8018070:	4a0b      	ldr	r2, [pc, #44]	; (80180a0 <prvCheckTasksWaitingTermination+0x54>)
 8018072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018074:	4b0b      	ldr	r3, [pc, #44]	; (80180a4 <prvCheckTasksWaitingTermination+0x58>)
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	3b01      	subs	r3, #1
 801807a:	4a0a      	ldr	r2, [pc, #40]	; (80180a4 <prvCheckTasksWaitingTermination+0x58>)
 801807c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801807e:	f001 f8a1 	bl	80191c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	f000 f810 	bl	80180a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018088:	4b06      	ldr	r3, [pc, #24]	; (80180a4 <prvCheckTasksWaitingTermination+0x58>)
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d1e1      	bne.n	8018054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018090:	bf00      	nop
 8018092:	bf00      	nop
 8018094:	3708      	adds	r7, #8
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}
 801809a:	bf00      	nop
 801809c:	24002d40 	.word	0x24002d40
 80180a0:	24002d6c 	.word	0x24002d6c
 80180a4:	24002d54 	.word	0x24002d54

080180a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b084      	sub	sp, #16
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d108      	bne.n	80180cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180be:	4618      	mov	r0, r3
 80180c0:	f001 fa3e 	bl	8019540 <vPortFree>
				vPortFree( pxTCB );
 80180c4:	6878      	ldr	r0, [r7, #4]
 80180c6:	f001 fa3b 	bl	8019540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80180ca:	e018      	b.n	80180fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80180d2:	2b01      	cmp	r3, #1
 80180d4:	d103      	bne.n	80180de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80180d6:	6878      	ldr	r0, [r7, #4]
 80180d8:	f001 fa32 	bl	8019540 <vPortFree>
	}
 80180dc:	e00f      	b.n	80180fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80180e4:	2b02      	cmp	r3, #2
 80180e6:	d00a      	beq.n	80180fe <prvDeleteTCB+0x56>
	__asm volatile
 80180e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180ec:	f383 8811 	msr	BASEPRI, r3
 80180f0:	f3bf 8f6f 	isb	sy
 80180f4:	f3bf 8f4f 	dsb	sy
 80180f8:	60fb      	str	r3, [r7, #12]
}
 80180fa:	bf00      	nop
 80180fc:	e7fe      	b.n	80180fc <prvDeleteTCB+0x54>
	}
 80180fe:	bf00      	nop
 8018100:	3710      	adds	r7, #16
 8018102:	46bd      	mov	sp, r7
 8018104:	bd80      	pop	{r7, pc}
	...

08018108 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018108:	b480      	push	{r7}
 801810a:	b083      	sub	sp, #12
 801810c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801810e:	4b0c      	ldr	r3, [pc, #48]	; (8018140 <prvResetNextTaskUnblockTime+0x38>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d104      	bne.n	8018122 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018118:	4b0a      	ldr	r3, [pc, #40]	; (8018144 <prvResetNextTaskUnblockTime+0x3c>)
 801811a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801811e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018120:	e008      	b.n	8018134 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018122:	4b07      	ldr	r3, [pc, #28]	; (8018140 <prvResetNextTaskUnblockTime+0x38>)
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	68db      	ldr	r3, [r3, #12]
 8018128:	68db      	ldr	r3, [r3, #12]
 801812a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	685b      	ldr	r3, [r3, #4]
 8018130:	4a04      	ldr	r2, [pc, #16]	; (8018144 <prvResetNextTaskUnblockTime+0x3c>)
 8018132:	6013      	str	r3, [r2, #0]
}
 8018134:	bf00      	nop
 8018136:	370c      	adds	r7, #12
 8018138:	46bd      	mov	sp, r7
 801813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801813e:	4770      	bx	lr
 8018140:	24002d24 	.word	0x24002d24
 8018144:	24002d8c 	.word	0x24002d8c

08018148 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018148:	b480      	push	{r7}
 801814a:	b083      	sub	sp, #12
 801814c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801814e:	4b0b      	ldr	r3, [pc, #44]	; (801817c <xTaskGetSchedulerState+0x34>)
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d102      	bne.n	801815c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018156:	2301      	movs	r3, #1
 8018158:	607b      	str	r3, [r7, #4]
 801815a:	e008      	b.n	801816e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801815c:	4b08      	ldr	r3, [pc, #32]	; (8018180 <xTaskGetSchedulerState+0x38>)
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d102      	bne.n	801816a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018164:	2302      	movs	r3, #2
 8018166:	607b      	str	r3, [r7, #4]
 8018168:	e001      	b.n	801816e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801816a:	2300      	movs	r3, #0
 801816c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801816e:	687b      	ldr	r3, [r7, #4]
	}
 8018170:	4618      	mov	r0, r3
 8018172:	370c      	adds	r7, #12
 8018174:	46bd      	mov	sp, r7
 8018176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817a:	4770      	bx	lr
 801817c:	24002d78 	.word	0x24002d78
 8018180:	24002d94 	.word	0x24002d94

08018184 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018184:	b580      	push	{r7, lr}
 8018186:	b084      	sub	sp, #16
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018190:	2300      	movs	r3, #0
 8018192:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d05e      	beq.n	8018258 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801819a:	68bb      	ldr	r3, [r7, #8]
 801819c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801819e:	4b31      	ldr	r3, [pc, #196]	; (8018264 <xTaskPriorityInherit+0xe0>)
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d24e      	bcs.n	8018246 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80181a8:	68bb      	ldr	r3, [r7, #8]
 80181aa:	699b      	ldr	r3, [r3, #24]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	db06      	blt.n	80181be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80181b0:	4b2c      	ldr	r3, [pc, #176]	; (8018264 <xTaskPriorityInherit+0xe0>)
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181b6:	f1c3 0207 	rsb	r2, r3, #7
 80181ba:	68bb      	ldr	r3, [r7, #8]
 80181bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80181be:	68bb      	ldr	r3, [r7, #8]
 80181c0:	6959      	ldr	r1, [r3, #20]
 80181c2:	68bb      	ldr	r3, [r7, #8]
 80181c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181c6:	4613      	mov	r3, r2
 80181c8:	009b      	lsls	r3, r3, #2
 80181ca:	4413      	add	r3, r2
 80181cc:	009b      	lsls	r3, r3, #2
 80181ce:	4a26      	ldr	r2, [pc, #152]	; (8018268 <xTaskPriorityInherit+0xe4>)
 80181d0:	4413      	add	r3, r2
 80181d2:	4299      	cmp	r1, r3
 80181d4:	d12f      	bne.n	8018236 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80181d6:	68bb      	ldr	r3, [r7, #8]
 80181d8:	3304      	adds	r3, #4
 80181da:	4618      	mov	r0, r3
 80181dc:	f7fe f996 	bl	801650c <uxListRemove>
 80181e0:	4603      	mov	r3, r0
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d10a      	bne.n	80181fc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80181e6:	68bb      	ldr	r3, [r7, #8]
 80181e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181ea:	2201      	movs	r2, #1
 80181ec:	fa02 f303 	lsl.w	r3, r2, r3
 80181f0:	43da      	mvns	r2, r3
 80181f2:	4b1e      	ldr	r3, [pc, #120]	; (801826c <xTaskPriorityInherit+0xe8>)
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	4013      	ands	r3, r2
 80181f8:	4a1c      	ldr	r2, [pc, #112]	; (801826c <xTaskPriorityInherit+0xe8>)
 80181fa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80181fc:	4b19      	ldr	r3, [pc, #100]	; (8018264 <xTaskPriorityInherit+0xe0>)
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018202:	68bb      	ldr	r3, [r7, #8]
 8018204:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018206:	68bb      	ldr	r3, [r7, #8]
 8018208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801820a:	2201      	movs	r2, #1
 801820c:	409a      	lsls	r2, r3
 801820e:	4b17      	ldr	r3, [pc, #92]	; (801826c <xTaskPriorityInherit+0xe8>)
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	4313      	orrs	r3, r2
 8018214:	4a15      	ldr	r2, [pc, #84]	; (801826c <xTaskPriorityInherit+0xe8>)
 8018216:	6013      	str	r3, [r2, #0]
 8018218:	68bb      	ldr	r3, [r7, #8]
 801821a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801821c:	4613      	mov	r3, r2
 801821e:	009b      	lsls	r3, r3, #2
 8018220:	4413      	add	r3, r2
 8018222:	009b      	lsls	r3, r3, #2
 8018224:	4a10      	ldr	r2, [pc, #64]	; (8018268 <xTaskPriorityInherit+0xe4>)
 8018226:	441a      	add	r2, r3
 8018228:	68bb      	ldr	r3, [r7, #8]
 801822a:	3304      	adds	r3, #4
 801822c:	4619      	mov	r1, r3
 801822e:	4610      	mov	r0, r2
 8018230:	f7fe f90f 	bl	8016452 <vListInsertEnd>
 8018234:	e004      	b.n	8018240 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018236:	4b0b      	ldr	r3, [pc, #44]	; (8018264 <xTaskPriorityInherit+0xe0>)
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801823c:	68bb      	ldr	r3, [r7, #8]
 801823e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018240:	2301      	movs	r3, #1
 8018242:	60fb      	str	r3, [r7, #12]
 8018244:	e008      	b.n	8018258 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018246:	68bb      	ldr	r3, [r7, #8]
 8018248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801824a:	4b06      	ldr	r3, [pc, #24]	; (8018264 <xTaskPriorityInherit+0xe0>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018250:	429a      	cmp	r2, r3
 8018252:	d201      	bcs.n	8018258 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018254:	2301      	movs	r3, #1
 8018256:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018258:	68fb      	ldr	r3, [r7, #12]
	}
 801825a:	4618      	mov	r0, r3
 801825c:	3710      	adds	r7, #16
 801825e:	46bd      	mov	sp, r7
 8018260:	bd80      	pop	{r7, pc}
 8018262:	bf00      	nop
 8018264:	24002c6c 	.word	0x24002c6c
 8018268:	24002c70 	.word	0x24002c70
 801826c:	24002d74 	.word	0x24002d74

08018270 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018270:	b580      	push	{r7, lr}
 8018272:	b086      	sub	sp, #24
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801827c:	2300      	movs	r3, #0
 801827e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d06e      	beq.n	8018364 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018286:	4b3a      	ldr	r3, [pc, #232]	; (8018370 <xTaskPriorityDisinherit+0x100>)
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	693a      	ldr	r2, [r7, #16]
 801828c:	429a      	cmp	r2, r3
 801828e:	d00a      	beq.n	80182a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018294:	f383 8811 	msr	BASEPRI, r3
 8018298:	f3bf 8f6f 	isb	sy
 801829c:	f3bf 8f4f 	dsb	sy
 80182a0:	60fb      	str	r3, [r7, #12]
}
 80182a2:	bf00      	nop
 80182a4:	e7fe      	b.n	80182a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80182a6:	693b      	ldr	r3, [r7, #16]
 80182a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d10a      	bne.n	80182c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80182ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182b2:	f383 8811 	msr	BASEPRI, r3
 80182b6:	f3bf 8f6f 	isb	sy
 80182ba:	f3bf 8f4f 	dsb	sy
 80182be:	60bb      	str	r3, [r7, #8]
}
 80182c0:	bf00      	nop
 80182c2:	e7fe      	b.n	80182c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80182c4:	693b      	ldr	r3, [r7, #16]
 80182c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80182c8:	1e5a      	subs	r2, r3, #1
 80182ca:	693b      	ldr	r3, [r7, #16]
 80182cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80182ce:	693b      	ldr	r3, [r7, #16]
 80182d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182d2:	693b      	ldr	r3, [r7, #16]
 80182d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d044      	beq.n	8018364 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80182da:	693b      	ldr	r3, [r7, #16]
 80182dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d140      	bne.n	8018364 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80182e2:	693b      	ldr	r3, [r7, #16]
 80182e4:	3304      	adds	r3, #4
 80182e6:	4618      	mov	r0, r3
 80182e8:	f7fe f910 	bl	801650c <uxListRemove>
 80182ec:	4603      	mov	r3, r0
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d115      	bne.n	801831e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80182f2:	693b      	ldr	r3, [r7, #16]
 80182f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182f6:	491f      	ldr	r1, [pc, #124]	; (8018374 <xTaskPriorityDisinherit+0x104>)
 80182f8:	4613      	mov	r3, r2
 80182fa:	009b      	lsls	r3, r3, #2
 80182fc:	4413      	add	r3, r2
 80182fe:	009b      	lsls	r3, r3, #2
 8018300:	440b      	add	r3, r1
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d10a      	bne.n	801831e <xTaskPriorityDisinherit+0xae>
 8018308:	693b      	ldr	r3, [r7, #16]
 801830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801830c:	2201      	movs	r2, #1
 801830e:	fa02 f303 	lsl.w	r3, r2, r3
 8018312:	43da      	mvns	r2, r3
 8018314:	4b18      	ldr	r3, [pc, #96]	; (8018378 <xTaskPriorityDisinherit+0x108>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	4013      	ands	r3, r2
 801831a:	4a17      	ldr	r2, [pc, #92]	; (8018378 <xTaskPriorityDisinherit+0x108>)
 801831c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801831e:	693b      	ldr	r3, [r7, #16]
 8018320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018322:	693b      	ldr	r3, [r7, #16]
 8018324:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018326:	693b      	ldr	r3, [r7, #16]
 8018328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801832a:	f1c3 0207 	rsb	r2, r3, #7
 801832e:	693b      	ldr	r3, [r7, #16]
 8018330:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018332:	693b      	ldr	r3, [r7, #16]
 8018334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018336:	2201      	movs	r2, #1
 8018338:	409a      	lsls	r2, r3
 801833a:	4b0f      	ldr	r3, [pc, #60]	; (8018378 <xTaskPriorityDisinherit+0x108>)
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	4313      	orrs	r3, r2
 8018340:	4a0d      	ldr	r2, [pc, #52]	; (8018378 <xTaskPriorityDisinherit+0x108>)
 8018342:	6013      	str	r3, [r2, #0]
 8018344:	693b      	ldr	r3, [r7, #16]
 8018346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018348:	4613      	mov	r3, r2
 801834a:	009b      	lsls	r3, r3, #2
 801834c:	4413      	add	r3, r2
 801834e:	009b      	lsls	r3, r3, #2
 8018350:	4a08      	ldr	r2, [pc, #32]	; (8018374 <xTaskPriorityDisinherit+0x104>)
 8018352:	441a      	add	r2, r3
 8018354:	693b      	ldr	r3, [r7, #16]
 8018356:	3304      	adds	r3, #4
 8018358:	4619      	mov	r1, r3
 801835a:	4610      	mov	r0, r2
 801835c:	f7fe f879 	bl	8016452 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018360:	2301      	movs	r3, #1
 8018362:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018364:	697b      	ldr	r3, [r7, #20]
	}
 8018366:	4618      	mov	r0, r3
 8018368:	3718      	adds	r7, #24
 801836a:	46bd      	mov	sp, r7
 801836c:	bd80      	pop	{r7, pc}
 801836e:	bf00      	nop
 8018370:	24002c6c 	.word	0x24002c6c
 8018374:	24002c70 	.word	0x24002c70
 8018378:	24002d74 	.word	0x24002d74

0801837c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801837c:	b580      	push	{r7, lr}
 801837e:	b088      	sub	sp, #32
 8018380:	af00      	add	r7, sp, #0
 8018382:	6078      	str	r0, [r7, #4]
 8018384:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801838a:	2301      	movs	r3, #1
 801838c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d077      	beq.n	8018484 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018394:	69bb      	ldr	r3, [r7, #24]
 8018396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018398:	2b00      	cmp	r3, #0
 801839a:	d10a      	bne.n	80183b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183a0:	f383 8811 	msr	BASEPRI, r3
 80183a4:	f3bf 8f6f 	isb	sy
 80183a8:	f3bf 8f4f 	dsb	sy
 80183ac:	60fb      	str	r3, [r7, #12]
}
 80183ae:	bf00      	nop
 80183b0:	e7fe      	b.n	80183b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80183b2:	69bb      	ldr	r3, [r7, #24]
 80183b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80183b6:	683a      	ldr	r2, [r7, #0]
 80183b8:	429a      	cmp	r2, r3
 80183ba:	d902      	bls.n	80183c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80183bc:	683b      	ldr	r3, [r7, #0]
 80183be:	61fb      	str	r3, [r7, #28]
 80183c0:	e002      	b.n	80183c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80183c2:	69bb      	ldr	r3, [r7, #24]
 80183c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80183c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80183c8:	69bb      	ldr	r3, [r7, #24]
 80183ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183cc:	69fa      	ldr	r2, [r7, #28]
 80183ce:	429a      	cmp	r2, r3
 80183d0:	d058      	beq.n	8018484 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80183d2:	69bb      	ldr	r3, [r7, #24]
 80183d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80183d6:	697a      	ldr	r2, [r7, #20]
 80183d8:	429a      	cmp	r2, r3
 80183da:	d153      	bne.n	8018484 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80183dc:	4b2b      	ldr	r3, [pc, #172]	; (801848c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	69ba      	ldr	r2, [r7, #24]
 80183e2:	429a      	cmp	r2, r3
 80183e4:	d10a      	bne.n	80183fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80183e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183ea:	f383 8811 	msr	BASEPRI, r3
 80183ee:	f3bf 8f6f 	isb	sy
 80183f2:	f3bf 8f4f 	dsb	sy
 80183f6:	60bb      	str	r3, [r7, #8]
}
 80183f8:	bf00      	nop
 80183fa:	e7fe      	b.n	80183fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80183fc:	69bb      	ldr	r3, [r7, #24]
 80183fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018400:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018402:	69bb      	ldr	r3, [r7, #24]
 8018404:	69fa      	ldr	r2, [r7, #28]
 8018406:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018408:	69bb      	ldr	r3, [r7, #24]
 801840a:	699b      	ldr	r3, [r3, #24]
 801840c:	2b00      	cmp	r3, #0
 801840e:	db04      	blt.n	801841a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018410:	69fb      	ldr	r3, [r7, #28]
 8018412:	f1c3 0207 	rsb	r2, r3, #7
 8018416:	69bb      	ldr	r3, [r7, #24]
 8018418:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801841a:	69bb      	ldr	r3, [r7, #24]
 801841c:	6959      	ldr	r1, [r3, #20]
 801841e:	693a      	ldr	r2, [r7, #16]
 8018420:	4613      	mov	r3, r2
 8018422:	009b      	lsls	r3, r3, #2
 8018424:	4413      	add	r3, r2
 8018426:	009b      	lsls	r3, r3, #2
 8018428:	4a19      	ldr	r2, [pc, #100]	; (8018490 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801842a:	4413      	add	r3, r2
 801842c:	4299      	cmp	r1, r3
 801842e:	d129      	bne.n	8018484 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018430:	69bb      	ldr	r3, [r7, #24]
 8018432:	3304      	adds	r3, #4
 8018434:	4618      	mov	r0, r3
 8018436:	f7fe f869 	bl	801650c <uxListRemove>
 801843a:	4603      	mov	r3, r0
 801843c:	2b00      	cmp	r3, #0
 801843e:	d10a      	bne.n	8018456 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8018440:	69bb      	ldr	r3, [r7, #24]
 8018442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018444:	2201      	movs	r2, #1
 8018446:	fa02 f303 	lsl.w	r3, r2, r3
 801844a:	43da      	mvns	r2, r3
 801844c:	4b11      	ldr	r3, [pc, #68]	; (8018494 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	4013      	ands	r3, r2
 8018452:	4a10      	ldr	r2, [pc, #64]	; (8018494 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8018454:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018456:	69bb      	ldr	r3, [r7, #24]
 8018458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801845a:	2201      	movs	r2, #1
 801845c:	409a      	lsls	r2, r3
 801845e:	4b0d      	ldr	r3, [pc, #52]	; (8018494 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	4313      	orrs	r3, r2
 8018464:	4a0b      	ldr	r2, [pc, #44]	; (8018494 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8018466:	6013      	str	r3, [r2, #0]
 8018468:	69bb      	ldr	r3, [r7, #24]
 801846a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801846c:	4613      	mov	r3, r2
 801846e:	009b      	lsls	r3, r3, #2
 8018470:	4413      	add	r3, r2
 8018472:	009b      	lsls	r3, r3, #2
 8018474:	4a06      	ldr	r2, [pc, #24]	; (8018490 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8018476:	441a      	add	r2, r3
 8018478:	69bb      	ldr	r3, [r7, #24]
 801847a:	3304      	adds	r3, #4
 801847c:	4619      	mov	r1, r3
 801847e:	4610      	mov	r0, r2
 8018480:	f7fd ffe7 	bl	8016452 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018484:	bf00      	nop
 8018486:	3720      	adds	r7, #32
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}
 801848c:	24002c6c 	.word	0x24002c6c
 8018490:	24002c70 	.word	0x24002c70
 8018494:	24002d74 	.word	0x24002d74

08018498 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018498:	b480      	push	{r7}
 801849a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801849c:	4b07      	ldr	r3, [pc, #28]	; (80184bc <pvTaskIncrementMutexHeldCount+0x24>)
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d004      	beq.n	80184ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80184a4:	4b05      	ldr	r3, [pc, #20]	; (80184bc <pvTaskIncrementMutexHeldCount+0x24>)
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80184aa:	3201      	adds	r2, #1
 80184ac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80184ae:	4b03      	ldr	r3, [pc, #12]	; (80184bc <pvTaskIncrementMutexHeldCount+0x24>)
 80184b0:	681b      	ldr	r3, [r3, #0]
	}
 80184b2:	4618      	mov	r0, r3
 80184b4:	46bd      	mov	sp, r7
 80184b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ba:	4770      	bx	lr
 80184bc:	24002c6c 	.word	0x24002c6c

080184c0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b084      	sub	sp, #16
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	6078      	str	r0, [r7, #4]
 80184c8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80184ca:	f000 fe4b 	bl	8019164 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80184ce:	4b1e      	ldr	r3, [pc, #120]	; (8018548 <ulTaskNotifyTake+0x88>)
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d113      	bne.n	8018500 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80184d8:	4b1b      	ldr	r3, [pc, #108]	; (8018548 <ulTaskNotifyTake+0x88>)
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	2201      	movs	r2, #1
 80184de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80184e2:	683b      	ldr	r3, [r7, #0]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d00b      	beq.n	8018500 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80184e8:	2101      	movs	r1, #1
 80184ea:	6838      	ldr	r0, [r7, #0]
 80184ec:	f000 f8c2 	bl	8018674 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80184f0:	4b16      	ldr	r3, [pc, #88]	; (801854c <ulTaskNotifyTake+0x8c>)
 80184f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80184f6:	601a      	str	r2, [r3, #0]
 80184f8:	f3bf 8f4f 	dsb	sy
 80184fc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8018500:	f000 fe60 	bl	80191c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8018504:	f000 fe2e 	bl	8019164 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8018508:	4b0f      	ldr	r3, [pc, #60]	; (8018548 <ulTaskNotifyTake+0x88>)
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801850e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d00c      	beq.n	8018530 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d004      	beq.n	8018526 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801851c:	4b0a      	ldr	r3, [pc, #40]	; (8018548 <ulTaskNotifyTake+0x88>)
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	2200      	movs	r2, #0
 8018522:	64da      	str	r2, [r3, #76]	; 0x4c
 8018524:	e004      	b.n	8018530 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8018526:	4b08      	ldr	r3, [pc, #32]	; (8018548 <ulTaskNotifyTake+0x88>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	68fa      	ldr	r2, [r7, #12]
 801852c:	3a01      	subs	r2, #1
 801852e:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018530:	4b05      	ldr	r3, [pc, #20]	; (8018548 <ulTaskNotifyTake+0x88>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	2200      	movs	r2, #0
 8018536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801853a:	f000 fe43 	bl	80191c4 <vPortExitCritical>

		return ulReturn;
 801853e:	68fb      	ldr	r3, [r7, #12]
	}
 8018540:	4618      	mov	r0, r3
 8018542:	3710      	adds	r7, #16
 8018544:	46bd      	mov	sp, r7
 8018546:	bd80      	pop	{r7, pc}
 8018548:	24002c6c 	.word	0x24002c6c
 801854c:	e000ed04 	.word	0xe000ed04

08018550 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8018550:	b580      	push	{r7, lr}
 8018552:	b08a      	sub	sp, #40	; 0x28
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
 8018558:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d10a      	bne.n	8018576 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8018560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018564:	f383 8811 	msr	BASEPRI, r3
 8018568:	f3bf 8f6f 	isb	sy
 801856c:	f3bf 8f4f 	dsb	sy
 8018570:	61bb      	str	r3, [r7, #24]
}
 8018572:	bf00      	nop
 8018574:	e7fe      	b.n	8018574 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018576:	f000 fed7 	bl	8019328 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 801857e:	f3ef 8211 	mrs	r2, BASEPRI
 8018582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018586:	f383 8811 	msr	BASEPRI, r3
 801858a:	f3bf 8f6f 	isb	sy
 801858e:	f3bf 8f4f 	dsb	sy
 8018592:	617a      	str	r2, [r7, #20]
 8018594:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018596:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018598:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801859c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80185a0:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80185a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185a4:	2202      	movs	r2, #2
 80185a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80185aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80185ae:	1c5a      	adds	r2, r3, #1
 80185b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b2:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80185b4:	7ffb      	ldrb	r3, [r7, #31]
 80185b6:	2b01      	cmp	r3, #1
 80185b8:	d145      	bne.n	8018646 <vTaskNotifyGiveFromISR+0xf6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80185ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d00a      	beq.n	80185d8 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 80185c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185c6:	f383 8811 	msr	BASEPRI, r3
 80185ca:	f3bf 8f6f 	isb	sy
 80185ce:	f3bf 8f4f 	dsb	sy
 80185d2:	60fb      	str	r3, [r7, #12]
}
 80185d4:	bf00      	nop
 80185d6:	e7fe      	b.n	80185d6 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80185d8:	4b20      	ldr	r3, [pc, #128]	; (801865c <vTaskNotifyGiveFromISR+0x10c>)
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d11c      	bne.n	801861a <vTaskNotifyGiveFromISR+0xca>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80185e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185e2:	3304      	adds	r3, #4
 80185e4:	4618      	mov	r0, r3
 80185e6:	f7fd ff91 	bl	801650c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80185ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185ee:	2201      	movs	r2, #1
 80185f0:	409a      	lsls	r2, r3
 80185f2:	4b1b      	ldr	r3, [pc, #108]	; (8018660 <vTaskNotifyGiveFromISR+0x110>)
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	4313      	orrs	r3, r2
 80185f8:	4a19      	ldr	r2, [pc, #100]	; (8018660 <vTaskNotifyGiveFromISR+0x110>)
 80185fa:	6013      	str	r3, [r2, #0]
 80185fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018600:	4613      	mov	r3, r2
 8018602:	009b      	lsls	r3, r3, #2
 8018604:	4413      	add	r3, r2
 8018606:	009b      	lsls	r3, r3, #2
 8018608:	4a16      	ldr	r2, [pc, #88]	; (8018664 <vTaskNotifyGiveFromISR+0x114>)
 801860a:	441a      	add	r2, r3
 801860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801860e:	3304      	adds	r3, #4
 8018610:	4619      	mov	r1, r3
 8018612:	4610      	mov	r0, r2
 8018614:	f7fd ff1d 	bl	8016452 <vListInsertEnd>
 8018618:	e005      	b.n	8018626 <vTaskNotifyGiveFromISR+0xd6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801861c:	3318      	adds	r3, #24
 801861e:	4619      	mov	r1, r3
 8018620:	4811      	ldr	r0, [pc, #68]	; (8018668 <vTaskNotifyGiveFromISR+0x118>)
 8018622:	f7fd ff16 	bl	8016452 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801862a:	4b10      	ldr	r3, [pc, #64]	; (801866c <vTaskNotifyGiveFromISR+0x11c>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018630:	429a      	cmp	r2, r3
 8018632:	d908      	bls.n	8018646 <vTaskNotifyGiveFromISR+0xf6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8018634:	683b      	ldr	r3, [r7, #0]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d002      	beq.n	8018640 <vTaskNotifyGiveFromISR+0xf0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801863a:	683b      	ldr	r3, [r7, #0]
 801863c:	2201      	movs	r2, #1
 801863e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8018640:	4b0b      	ldr	r3, [pc, #44]	; (8018670 <vTaskNotifyGiveFromISR+0x120>)
 8018642:	2201      	movs	r2, #1
 8018644:	601a      	str	r2, [r3, #0]
 8018646:	6a3b      	ldr	r3, [r7, #32]
 8018648:	60bb      	str	r3, [r7, #8]
	__asm volatile
 801864a:	68bb      	ldr	r3, [r7, #8]
 801864c:	f383 8811 	msr	BASEPRI, r3
}
 8018650:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8018652:	bf00      	nop
 8018654:	3728      	adds	r7, #40	; 0x28
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}
 801865a:	bf00      	nop
 801865c:	24002d94 	.word	0x24002d94
 8018660:	24002d74 	.word	0x24002d74
 8018664:	24002c70 	.word	0x24002c70
 8018668:	24002d2c 	.word	0x24002d2c
 801866c:	24002c6c 	.word	0x24002c6c
 8018670:	24002d80 	.word	0x24002d80

08018674 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b084      	sub	sp, #16
 8018678:	af00      	add	r7, sp, #0
 801867a:	6078      	str	r0, [r7, #4]
 801867c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801867e:	4b29      	ldr	r3, [pc, #164]	; (8018724 <prvAddCurrentTaskToDelayedList+0xb0>)
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018684:	4b28      	ldr	r3, [pc, #160]	; (8018728 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	3304      	adds	r3, #4
 801868a:	4618      	mov	r0, r3
 801868c:	f7fd ff3e 	bl	801650c <uxListRemove>
 8018690:	4603      	mov	r3, r0
 8018692:	2b00      	cmp	r3, #0
 8018694:	d10b      	bne.n	80186ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8018696:	4b24      	ldr	r3, [pc, #144]	; (8018728 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801869c:	2201      	movs	r2, #1
 801869e:	fa02 f303 	lsl.w	r3, r2, r3
 80186a2:	43da      	mvns	r2, r3
 80186a4:	4b21      	ldr	r3, [pc, #132]	; (801872c <prvAddCurrentTaskToDelayedList+0xb8>)
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	4013      	ands	r3, r2
 80186aa:	4a20      	ldr	r2, [pc, #128]	; (801872c <prvAddCurrentTaskToDelayedList+0xb8>)
 80186ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80186b4:	d10a      	bne.n	80186cc <prvAddCurrentTaskToDelayedList+0x58>
 80186b6:	683b      	ldr	r3, [r7, #0]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d007      	beq.n	80186cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80186bc:	4b1a      	ldr	r3, [pc, #104]	; (8018728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	3304      	adds	r3, #4
 80186c2:	4619      	mov	r1, r3
 80186c4:	481a      	ldr	r0, [pc, #104]	; (8018730 <prvAddCurrentTaskToDelayedList+0xbc>)
 80186c6:	f7fd fec4 	bl	8016452 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80186ca:	e026      	b.n	801871a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80186cc:	68fa      	ldr	r2, [r7, #12]
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	4413      	add	r3, r2
 80186d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80186d4:	4b14      	ldr	r3, [pc, #80]	; (8018728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	68ba      	ldr	r2, [r7, #8]
 80186da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80186dc:	68ba      	ldr	r2, [r7, #8]
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	429a      	cmp	r2, r3
 80186e2:	d209      	bcs.n	80186f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80186e4:	4b13      	ldr	r3, [pc, #76]	; (8018734 <prvAddCurrentTaskToDelayedList+0xc0>)
 80186e6:	681a      	ldr	r2, [r3, #0]
 80186e8:	4b0f      	ldr	r3, [pc, #60]	; (8018728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	3304      	adds	r3, #4
 80186ee:	4619      	mov	r1, r3
 80186f0:	4610      	mov	r0, r2
 80186f2:	f7fd fed2 	bl	801649a <vListInsert>
}
 80186f6:	e010      	b.n	801871a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80186f8:	4b0f      	ldr	r3, [pc, #60]	; (8018738 <prvAddCurrentTaskToDelayedList+0xc4>)
 80186fa:	681a      	ldr	r2, [r3, #0]
 80186fc:	4b0a      	ldr	r3, [pc, #40]	; (8018728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	3304      	adds	r3, #4
 8018702:	4619      	mov	r1, r3
 8018704:	4610      	mov	r0, r2
 8018706:	f7fd fec8 	bl	801649a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801870a:	4b0c      	ldr	r3, [pc, #48]	; (801873c <prvAddCurrentTaskToDelayedList+0xc8>)
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	68ba      	ldr	r2, [r7, #8]
 8018710:	429a      	cmp	r2, r3
 8018712:	d202      	bcs.n	801871a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8018714:	4a09      	ldr	r2, [pc, #36]	; (801873c <prvAddCurrentTaskToDelayedList+0xc8>)
 8018716:	68bb      	ldr	r3, [r7, #8]
 8018718:	6013      	str	r3, [r2, #0]
}
 801871a:	bf00      	nop
 801871c:	3710      	adds	r7, #16
 801871e:	46bd      	mov	sp, r7
 8018720:	bd80      	pop	{r7, pc}
 8018722:	bf00      	nop
 8018724:	24002d70 	.word	0x24002d70
 8018728:	24002c6c 	.word	0x24002c6c
 801872c:	24002d74 	.word	0x24002d74
 8018730:	24002d58 	.word	0x24002d58
 8018734:	24002d28 	.word	0x24002d28
 8018738:	24002d24 	.word	0x24002d24
 801873c:	24002d8c 	.word	0x24002d8c

08018740 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b08a      	sub	sp, #40	; 0x28
 8018744:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018746:	2300      	movs	r3, #0
 8018748:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801874a:	f000 fba1 	bl	8018e90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801874e:	4b1c      	ldr	r3, [pc, #112]	; (80187c0 <xTimerCreateTimerTask+0x80>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d021      	beq.n	801879a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018756:	2300      	movs	r3, #0
 8018758:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801875a:	2300      	movs	r3, #0
 801875c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801875e:	1d3a      	adds	r2, r7, #4
 8018760:	f107 0108 	add.w	r1, r7, #8
 8018764:	f107 030c 	add.w	r3, r7, #12
 8018768:	4618      	mov	r0, r3
 801876a:	f7e8 faad 	bl	8000cc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801876e:	6879      	ldr	r1, [r7, #4]
 8018770:	68bb      	ldr	r3, [r7, #8]
 8018772:	68fa      	ldr	r2, [r7, #12]
 8018774:	9202      	str	r2, [sp, #8]
 8018776:	9301      	str	r3, [sp, #4]
 8018778:	2302      	movs	r3, #2
 801877a:	9300      	str	r3, [sp, #0]
 801877c:	2300      	movs	r3, #0
 801877e:	460a      	mov	r2, r1
 8018780:	4910      	ldr	r1, [pc, #64]	; (80187c4 <xTimerCreateTimerTask+0x84>)
 8018782:	4811      	ldr	r0, [pc, #68]	; (80187c8 <xTimerCreateTimerTask+0x88>)
 8018784:	f7fe fed8 	bl	8017538 <xTaskCreateStatic>
 8018788:	4603      	mov	r3, r0
 801878a:	4a10      	ldr	r2, [pc, #64]	; (80187cc <xTimerCreateTimerTask+0x8c>)
 801878c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801878e:	4b0f      	ldr	r3, [pc, #60]	; (80187cc <xTimerCreateTimerTask+0x8c>)
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	2b00      	cmp	r3, #0
 8018794:	d001      	beq.n	801879a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018796:	2301      	movs	r3, #1
 8018798:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801879a:	697b      	ldr	r3, [r7, #20]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d10a      	bne.n	80187b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80187a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187a4:	f383 8811 	msr	BASEPRI, r3
 80187a8:	f3bf 8f6f 	isb	sy
 80187ac:	f3bf 8f4f 	dsb	sy
 80187b0:	613b      	str	r3, [r7, #16]
}
 80187b2:	bf00      	nop
 80187b4:	e7fe      	b.n	80187b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80187b6:	697b      	ldr	r3, [r7, #20]
}
 80187b8:	4618      	mov	r0, r3
 80187ba:	3718      	adds	r7, #24
 80187bc:	46bd      	mov	sp, r7
 80187be:	bd80      	pop	{r7, pc}
 80187c0:	24002dc8 	.word	0x24002dc8
 80187c4:	0801b82c 	.word	0x0801b82c
 80187c8:	08018a39 	.word	0x08018a39
 80187cc:	24002dcc 	.word	0x24002dcc

080187d0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b088      	sub	sp, #32
 80187d4:	af02      	add	r7, sp, #8
 80187d6:	60f8      	str	r0, [r7, #12]
 80187d8:	60b9      	str	r1, [r7, #8]
 80187da:	607a      	str	r2, [r7, #4]
 80187dc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80187de:	2028      	movs	r0, #40	; 0x28
 80187e0:	f000 fde2 	bl	80193a8 <pvPortMalloc>
 80187e4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80187e6:	697b      	ldr	r3, [r7, #20]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d00d      	beq.n	8018808 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80187ec:	697b      	ldr	r3, [r7, #20]
 80187ee:	2200      	movs	r2, #0
 80187f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80187f4:	697b      	ldr	r3, [r7, #20]
 80187f6:	9301      	str	r3, [sp, #4]
 80187f8:	6a3b      	ldr	r3, [r7, #32]
 80187fa:	9300      	str	r3, [sp, #0]
 80187fc:	683b      	ldr	r3, [r7, #0]
 80187fe:	687a      	ldr	r2, [r7, #4]
 8018800:	68b9      	ldr	r1, [r7, #8]
 8018802:	68f8      	ldr	r0, [r7, #12]
 8018804:	f000 f843 	bl	801888e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8018808:	697b      	ldr	r3, [r7, #20]
	}
 801880a:	4618      	mov	r0, r3
 801880c:	3718      	adds	r7, #24
 801880e:	46bd      	mov	sp, r7
 8018810:	bd80      	pop	{r7, pc}

08018812 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8018812:	b580      	push	{r7, lr}
 8018814:	b08a      	sub	sp, #40	; 0x28
 8018816:	af02      	add	r7, sp, #8
 8018818:	60f8      	str	r0, [r7, #12]
 801881a:	60b9      	str	r1, [r7, #8]
 801881c:	607a      	str	r2, [r7, #4]
 801881e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8018820:	2328      	movs	r3, #40	; 0x28
 8018822:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8018824:	693b      	ldr	r3, [r7, #16]
 8018826:	2b28      	cmp	r3, #40	; 0x28
 8018828:	d00a      	beq.n	8018840 <xTimerCreateStatic+0x2e>
	__asm volatile
 801882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801882e:	f383 8811 	msr	BASEPRI, r3
 8018832:	f3bf 8f6f 	isb	sy
 8018836:	f3bf 8f4f 	dsb	sy
 801883a:	61bb      	str	r3, [r7, #24]
}
 801883c:	bf00      	nop
 801883e:	e7fe      	b.n	801883e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018840:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8018842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018844:	2b00      	cmp	r3, #0
 8018846:	d10a      	bne.n	801885e <xTimerCreateStatic+0x4c>
	__asm volatile
 8018848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801884c:	f383 8811 	msr	BASEPRI, r3
 8018850:	f3bf 8f6f 	isb	sy
 8018854:	f3bf 8f4f 	dsb	sy
 8018858:	617b      	str	r3, [r7, #20]
}
 801885a:	bf00      	nop
 801885c:	e7fe      	b.n	801885c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018860:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8018862:	69fb      	ldr	r3, [r7, #28]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d00d      	beq.n	8018884 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8018868:	69fb      	ldr	r3, [r7, #28]
 801886a:	2202      	movs	r2, #2
 801886c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8018870:	69fb      	ldr	r3, [r7, #28]
 8018872:	9301      	str	r3, [sp, #4]
 8018874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018876:	9300      	str	r3, [sp, #0]
 8018878:	683b      	ldr	r3, [r7, #0]
 801887a:	687a      	ldr	r2, [r7, #4]
 801887c:	68b9      	ldr	r1, [r7, #8]
 801887e:	68f8      	ldr	r0, [r7, #12]
 8018880:	f000 f805 	bl	801888e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8018884:	69fb      	ldr	r3, [r7, #28]
	}
 8018886:	4618      	mov	r0, r3
 8018888:	3720      	adds	r7, #32
 801888a:	46bd      	mov	sp, r7
 801888c:	bd80      	pop	{r7, pc}

0801888e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801888e:	b580      	push	{r7, lr}
 8018890:	b086      	sub	sp, #24
 8018892:	af00      	add	r7, sp, #0
 8018894:	60f8      	str	r0, [r7, #12]
 8018896:	60b9      	str	r1, [r7, #8]
 8018898:	607a      	str	r2, [r7, #4]
 801889a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801889c:	68bb      	ldr	r3, [r7, #8]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d10a      	bne.n	80188b8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80188a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188a6:	f383 8811 	msr	BASEPRI, r3
 80188aa:	f3bf 8f6f 	isb	sy
 80188ae:	f3bf 8f4f 	dsb	sy
 80188b2:	617b      	str	r3, [r7, #20]
}
 80188b4:	bf00      	nop
 80188b6:	e7fe      	b.n	80188b6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80188b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d01e      	beq.n	80188fc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80188be:	f000 fae7 	bl	8018e90 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80188c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188c4:	68fa      	ldr	r2, [r7, #12]
 80188c6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80188c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ca:	68ba      	ldr	r2, [r7, #8]
 80188cc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80188ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d0:	683a      	ldr	r2, [r7, #0]
 80188d2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80188d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d6:	6a3a      	ldr	r2, [r7, #32]
 80188d8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80188da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188dc:	3304      	adds	r3, #4
 80188de:	4618      	mov	r0, r3
 80188e0:	f7fd fdaa 	bl	8016438 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d008      	beq.n	80188fc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80188ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80188f0:	f043 0304 	orr.w	r3, r3, #4
 80188f4:	b2da      	uxtb	r2, r3
 80188f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80188fc:	bf00      	nop
 80188fe:	3718      	adds	r7, #24
 8018900:	46bd      	mov	sp, r7
 8018902:	bd80      	pop	{r7, pc}

08018904 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b08a      	sub	sp, #40	; 0x28
 8018908:	af00      	add	r7, sp, #0
 801890a:	60f8      	str	r0, [r7, #12]
 801890c:	60b9      	str	r1, [r7, #8]
 801890e:	607a      	str	r2, [r7, #4]
 8018910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018912:	2300      	movs	r3, #0
 8018914:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d10a      	bne.n	8018932 <xTimerGenericCommand+0x2e>
	__asm volatile
 801891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018920:	f383 8811 	msr	BASEPRI, r3
 8018924:	f3bf 8f6f 	isb	sy
 8018928:	f3bf 8f4f 	dsb	sy
 801892c:	623b      	str	r3, [r7, #32]
}
 801892e:	bf00      	nop
 8018930:	e7fe      	b.n	8018930 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018932:	4b1a      	ldr	r3, [pc, #104]	; (801899c <xTimerGenericCommand+0x98>)
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d02a      	beq.n	8018990 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801893a:	68bb      	ldr	r3, [r7, #8]
 801893c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018946:	68bb      	ldr	r3, [r7, #8]
 8018948:	2b05      	cmp	r3, #5
 801894a:	dc18      	bgt.n	801897e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801894c:	f7ff fbfc 	bl	8018148 <xTaskGetSchedulerState>
 8018950:	4603      	mov	r3, r0
 8018952:	2b02      	cmp	r3, #2
 8018954:	d109      	bne.n	801896a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018956:	4b11      	ldr	r3, [pc, #68]	; (801899c <xTimerGenericCommand+0x98>)
 8018958:	6818      	ldr	r0, [r3, #0]
 801895a:	f107 0110 	add.w	r1, r7, #16
 801895e:	2300      	movs	r3, #0
 8018960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018962:	f7fd ff83 	bl	801686c <xQueueGenericSend>
 8018966:	6278      	str	r0, [r7, #36]	; 0x24
 8018968:	e012      	b.n	8018990 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801896a:	4b0c      	ldr	r3, [pc, #48]	; (801899c <xTimerGenericCommand+0x98>)
 801896c:	6818      	ldr	r0, [r3, #0]
 801896e:	f107 0110 	add.w	r1, r7, #16
 8018972:	2300      	movs	r3, #0
 8018974:	2200      	movs	r2, #0
 8018976:	f7fd ff79 	bl	801686c <xQueueGenericSend>
 801897a:	6278      	str	r0, [r7, #36]	; 0x24
 801897c:	e008      	b.n	8018990 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801897e:	4b07      	ldr	r3, [pc, #28]	; (801899c <xTimerGenericCommand+0x98>)
 8018980:	6818      	ldr	r0, [r3, #0]
 8018982:	f107 0110 	add.w	r1, r7, #16
 8018986:	2300      	movs	r3, #0
 8018988:	683a      	ldr	r2, [r7, #0]
 801898a:	f7fe f86d 	bl	8016a68 <xQueueGenericSendFromISR>
 801898e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018992:	4618      	mov	r0, r3
 8018994:	3728      	adds	r7, #40	; 0x28
 8018996:	46bd      	mov	sp, r7
 8018998:	bd80      	pop	{r7, pc}
 801899a:	bf00      	nop
 801899c:	24002dc8 	.word	0x24002dc8

080189a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b088      	sub	sp, #32
 80189a4:	af02      	add	r7, sp, #8
 80189a6:	6078      	str	r0, [r7, #4]
 80189a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80189aa:	4b22      	ldr	r3, [pc, #136]	; (8018a34 <prvProcessExpiredTimer+0x94>)
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	68db      	ldr	r3, [r3, #12]
 80189b0:	68db      	ldr	r3, [r3, #12]
 80189b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80189b4:	697b      	ldr	r3, [r7, #20]
 80189b6:	3304      	adds	r3, #4
 80189b8:	4618      	mov	r0, r3
 80189ba:	f7fd fda7 	bl	801650c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80189be:	697b      	ldr	r3, [r7, #20]
 80189c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80189c4:	f003 0304 	and.w	r3, r3, #4
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d022      	beq.n	8018a12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	699a      	ldr	r2, [r3, #24]
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	18d1      	adds	r1, r2, r3
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	683a      	ldr	r2, [r7, #0]
 80189d8:	6978      	ldr	r0, [r7, #20]
 80189da:	f000 f8d1 	bl	8018b80 <prvInsertTimerInActiveList>
 80189de:	4603      	mov	r3, r0
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d01f      	beq.n	8018a24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80189e4:	2300      	movs	r3, #0
 80189e6:	9300      	str	r3, [sp, #0]
 80189e8:	2300      	movs	r3, #0
 80189ea:	687a      	ldr	r2, [r7, #4]
 80189ec:	2100      	movs	r1, #0
 80189ee:	6978      	ldr	r0, [r7, #20]
 80189f0:	f7ff ff88 	bl	8018904 <xTimerGenericCommand>
 80189f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d113      	bne.n	8018a24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80189fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a00:	f383 8811 	msr	BASEPRI, r3
 8018a04:	f3bf 8f6f 	isb	sy
 8018a08:	f3bf 8f4f 	dsb	sy
 8018a0c:	60fb      	str	r3, [r7, #12]
}
 8018a0e:	bf00      	nop
 8018a10:	e7fe      	b.n	8018a10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018a12:	697b      	ldr	r3, [r7, #20]
 8018a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018a18:	f023 0301 	bic.w	r3, r3, #1
 8018a1c:	b2da      	uxtb	r2, r3
 8018a1e:	697b      	ldr	r3, [r7, #20]
 8018a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018a24:	697b      	ldr	r3, [r7, #20]
 8018a26:	6a1b      	ldr	r3, [r3, #32]
 8018a28:	6978      	ldr	r0, [r7, #20]
 8018a2a:	4798      	blx	r3
}
 8018a2c:	bf00      	nop
 8018a2e:	3718      	adds	r7, #24
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd80      	pop	{r7, pc}
 8018a34:	24002dc0 	.word	0x24002dc0

08018a38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b084      	sub	sp, #16
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018a40:	f107 0308 	add.w	r3, r7, #8
 8018a44:	4618      	mov	r0, r3
 8018a46:	f000 f857 	bl	8018af8 <prvGetNextExpireTime>
 8018a4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018a4c:	68bb      	ldr	r3, [r7, #8]
 8018a4e:	4619      	mov	r1, r3
 8018a50:	68f8      	ldr	r0, [r7, #12]
 8018a52:	f000 f803 	bl	8018a5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018a56:	f000 f8d5 	bl	8018c04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018a5a:	e7f1      	b.n	8018a40 <prvTimerTask+0x8>

08018a5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018a5c:	b580      	push	{r7, lr}
 8018a5e:	b084      	sub	sp, #16
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	6078      	str	r0, [r7, #4]
 8018a64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018a66:	f7fe ff95 	bl	8017994 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018a6a:	f107 0308 	add.w	r3, r7, #8
 8018a6e:	4618      	mov	r0, r3
 8018a70:	f000 f866 	bl	8018b40 <prvSampleTimeNow>
 8018a74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018a76:	68bb      	ldr	r3, [r7, #8]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d130      	bne.n	8018ade <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018a7c:	683b      	ldr	r3, [r7, #0]
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d10a      	bne.n	8018a98 <prvProcessTimerOrBlockTask+0x3c>
 8018a82:	687a      	ldr	r2, [r7, #4]
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	429a      	cmp	r2, r3
 8018a88:	d806      	bhi.n	8018a98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018a8a:	f7fe ff91 	bl	80179b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018a8e:	68f9      	ldr	r1, [r7, #12]
 8018a90:	6878      	ldr	r0, [r7, #4]
 8018a92:	f7ff ff85 	bl	80189a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018a96:	e024      	b.n	8018ae2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018a98:	683b      	ldr	r3, [r7, #0]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d008      	beq.n	8018ab0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018a9e:	4b13      	ldr	r3, [pc, #76]	; (8018aec <prvProcessTimerOrBlockTask+0x90>)
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d101      	bne.n	8018aac <prvProcessTimerOrBlockTask+0x50>
 8018aa8:	2301      	movs	r3, #1
 8018aaa:	e000      	b.n	8018aae <prvProcessTimerOrBlockTask+0x52>
 8018aac:	2300      	movs	r3, #0
 8018aae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018ab0:	4b0f      	ldr	r3, [pc, #60]	; (8018af0 <prvProcessTimerOrBlockTask+0x94>)
 8018ab2:	6818      	ldr	r0, [r3, #0]
 8018ab4:	687a      	ldr	r2, [r7, #4]
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	1ad3      	subs	r3, r2, r3
 8018aba:	683a      	ldr	r2, [r7, #0]
 8018abc:	4619      	mov	r1, r3
 8018abe:	f7fe fd07 	bl	80174d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018ac2:	f7fe ff75 	bl	80179b0 <xTaskResumeAll>
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d10a      	bne.n	8018ae2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018acc:	4b09      	ldr	r3, [pc, #36]	; (8018af4 <prvProcessTimerOrBlockTask+0x98>)
 8018ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ad2:	601a      	str	r2, [r3, #0]
 8018ad4:	f3bf 8f4f 	dsb	sy
 8018ad8:	f3bf 8f6f 	isb	sy
}
 8018adc:	e001      	b.n	8018ae2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018ade:	f7fe ff67 	bl	80179b0 <xTaskResumeAll>
}
 8018ae2:	bf00      	nop
 8018ae4:	3710      	adds	r7, #16
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	bd80      	pop	{r7, pc}
 8018aea:	bf00      	nop
 8018aec:	24002dc4 	.word	0x24002dc4
 8018af0:	24002dc8 	.word	0x24002dc8
 8018af4:	e000ed04 	.word	0xe000ed04

08018af8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018af8:	b480      	push	{r7}
 8018afa:	b085      	sub	sp, #20
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018b00:	4b0e      	ldr	r3, [pc, #56]	; (8018b3c <prvGetNextExpireTime+0x44>)
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d101      	bne.n	8018b0e <prvGetNextExpireTime+0x16>
 8018b0a:	2201      	movs	r2, #1
 8018b0c:	e000      	b.n	8018b10 <prvGetNextExpireTime+0x18>
 8018b0e:	2200      	movs	r2, #0
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d105      	bne.n	8018b28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018b1c:	4b07      	ldr	r3, [pc, #28]	; (8018b3c <prvGetNextExpireTime+0x44>)
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	68db      	ldr	r3, [r3, #12]
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	60fb      	str	r3, [r7, #12]
 8018b26:	e001      	b.n	8018b2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018b28:	2300      	movs	r3, #0
 8018b2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018b2c:	68fb      	ldr	r3, [r7, #12]
}
 8018b2e:	4618      	mov	r0, r3
 8018b30:	3714      	adds	r7, #20
 8018b32:	46bd      	mov	sp, r7
 8018b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b38:	4770      	bx	lr
 8018b3a:	bf00      	nop
 8018b3c:	24002dc0 	.word	0x24002dc0

08018b40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b084      	sub	sp, #16
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018b48:	f7fe ffce 	bl	8017ae8 <xTaskGetTickCount>
 8018b4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018b4e:	4b0b      	ldr	r3, [pc, #44]	; (8018b7c <prvSampleTimeNow+0x3c>)
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	68fa      	ldr	r2, [r7, #12]
 8018b54:	429a      	cmp	r2, r3
 8018b56:	d205      	bcs.n	8018b64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018b58:	f000 f936 	bl	8018dc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	2201      	movs	r2, #1
 8018b60:	601a      	str	r2, [r3, #0]
 8018b62:	e002      	b.n	8018b6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2200      	movs	r2, #0
 8018b68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018b6a:	4a04      	ldr	r2, [pc, #16]	; (8018b7c <prvSampleTimeNow+0x3c>)
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018b70:	68fb      	ldr	r3, [r7, #12]
}
 8018b72:	4618      	mov	r0, r3
 8018b74:	3710      	adds	r7, #16
 8018b76:	46bd      	mov	sp, r7
 8018b78:	bd80      	pop	{r7, pc}
 8018b7a:	bf00      	nop
 8018b7c:	24002dd0 	.word	0x24002dd0

08018b80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b086      	sub	sp, #24
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	60f8      	str	r0, [r7, #12]
 8018b88:	60b9      	str	r1, [r7, #8]
 8018b8a:	607a      	str	r2, [r7, #4]
 8018b8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018b8e:	2300      	movs	r3, #0
 8018b90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	68ba      	ldr	r2, [r7, #8]
 8018b96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	68fa      	ldr	r2, [r7, #12]
 8018b9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018b9e:	68ba      	ldr	r2, [r7, #8]
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	429a      	cmp	r2, r3
 8018ba4:	d812      	bhi.n	8018bcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018ba6:	687a      	ldr	r2, [r7, #4]
 8018ba8:	683b      	ldr	r3, [r7, #0]
 8018baa:	1ad2      	subs	r2, r2, r3
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	699b      	ldr	r3, [r3, #24]
 8018bb0:	429a      	cmp	r2, r3
 8018bb2:	d302      	bcc.n	8018bba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018bb4:	2301      	movs	r3, #1
 8018bb6:	617b      	str	r3, [r7, #20]
 8018bb8:	e01b      	b.n	8018bf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018bba:	4b10      	ldr	r3, [pc, #64]	; (8018bfc <prvInsertTimerInActiveList+0x7c>)
 8018bbc:	681a      	ldr	r2, [r3, #0]
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	3304      	adds	r3, #4
 8018bc2:	4619      	mov	r1, r3
 8018bc4:	4610      	mov	r0, r2
 8018bc6:	f7fd fc68 	bl	801649a <vListInsert>
 8018bca:	e012      	b.n	8018bf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018bcc:	687a      	ldr	r2, [r7, #4]
 8018bce:	683b      	ldr	r3, [r7, #0]
 8018bd0:	429a      	cmp	r2, r3
 8018bd2:	d206      	bcs.n	8018be2 <prvInsertTimerInActiveList+0x62>
 8018bd4:	68ba      	ldr	r2, [r7, #8]
 8018bd6:	683b      	ldr	r3, [r7, #0]
 8018bd8:	429a      	cmp	r2, r3
 8018bda:	d302      	bcc.n	8018be2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018bdc:	2301      	movs	r3, #1
 8018bde:	617b      	str	r3, [r7, #20]
 8018be0:	e007      	b.n	8018bf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018be2:	4b07      	ldr	r3, [pc, #28]	; (8018c00 <prvInsertTimerInActiveList+0x80>)
 8018be4:	681a      	ldr	r2, [r3, #0]
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	3304      	adds	r3, #4
 8018bea:	4619      	mov	r1, r3
 8018bec:	4610      	mov	r0, r2
 8018bee:	f7fd fc54 	bl	801649a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018bf2:	697b      	ldr	r3, [r7, #20]
}
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	3718      	adds	r7, #24
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}
 8018bfc:	24002dc4 	.word	0x24002dc4
 8018c00:	24002dc0 	.word	0x24002dc0

08018c04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b08e      	sub	sp, #56	; 0x38
 8018c08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018c0a:	e0ca      	b.n	8018da2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	da18      	bge.n	8018c44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018c12:	1d3b      	adds	r3, r7, #4
 8018c14:	3304      	adds	r3, #4
 8018c16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d10a      	bne.n	8018c34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c22:	f383 8811 	msr	BASEPRI, r3
 8018c26:	f3bf 8f6f 	isb	sy
 8018c2a:	f3bf 8f4f 	dsb	sy
 8018c2e:	61fb      	str	r3, [r7, #28]
}
 8018c30:	bf00      	nop
 8018c32:	e7fe      	b.n	8018c32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c3a:	6850      	ldr	r0, [r2, #4]
 8018c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c3e:	6892      	ldr	r2, [r2, #8]
 8018c40:	4611      	mov	r1, r2
 8018c42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	f2c0 80aa 	blt.w	8018da0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c52:	695b      	ldr	r3, [r3, #20]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d004      	beq.n	8018c62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c5a:	3304      	adds	r3, #4
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	f7fd fc55 	bl	801650c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018c62:	463b      	mov	r3, r7
 8018c64:	4618      	mov	r0, r3
 8018c66:	f7ff ff6b 	bl	8018b40 <prvSampleTimeNow>
 8018c6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	2b09      	cmp	r3, #9
 8018c70:	f200 8097 	bhi.w	8018da2 <prvProcessReceivedCommands+0x19e>
 8018c74:	a201      	add	r2, pc, #4	; (adr r2, 8018c7c <prvProcessReceivedCommands+0x78>)
 8018c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c7a:	bf00      	nop
 8018c7c:	08018ca5 	.word	0x08018ca5
 8018c80:	08018ca5 	.word	0x08018ca5
 8018c84:	08018ca5 	.word	0x08018ca5
 8018c88:	08018d19 	.word	0x08018d19
 8018c8c:	08018d2d 	.word	0x08018d2d
 8018c90:	08018d77 	.word	0x08018d77
 8018c94:	08018ca5 	.word	0x08018ca5
 8018c98:	08018ca5 	.word	0x08018ca5
 8018c9c:	08018d19 	.word	0x08018d19
 8018ca0:	08018d2d 	.word	0x08018d2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ca6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018caa:	f043 0301 	orr.w	r3, r3, #1
 8018cae:	b2da      	uxtb	r2, r3
 8018cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018cb6:	68ba      	ldr	r2, [r7, #8]
 8018cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cba:	699b      	ldr	r3, [r3, #24]
 8018cbc:	18d1      	adds	r1, r2, r3
 8018cbe:	68bb      	ldr	r3, [r7, #8]
 8018cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018cc4:	f7ff ff5c 	bl	8018b80 <prvInsertTimerInActiveList>
 8018cc8:	4603      	mov	r3, r0
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d069      	beq.n	8018da2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cd0:	6a1b      	ldr	r3, [r3, #32]
 8018cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018cd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018cdc:	f003 0304 	and.w	r3, r3, #4
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d05e      	beq.n	8018da2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018ce4:	68ba      	ldr	r2, [r7, #8]
 8018ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ce8:	699b      	ldr	r3, [r3, #24]
 8018cea:	441a      	add	r2, r3
 8018cec:	2300      	movs	r3, #0
 8018cee:	9300      	str	r3, [sp, #0]
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	2100      	movs	r1, #0
 8018cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018cf6:	f7ff fe05 	bl	8018904 <xTimerGenericCommand>
 8018cfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018cfc:	6a3b      	ldr	r3, [r7, #32]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d14f      	bne.n	8018da2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d06:	f383 8811 	msr	BASEPRI, r3
 8018d0a:	f3bf 8f6f 	isb	sy
 8018d0e:	f3bf 8f4f 	dsb	sy
 8018d12:	61bb      	str	r3, [r7, #24]
}
 8018d14:	bf00      	nop
 8018d16:	e7fe      	b.n	8018d16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018d1e:	f023 0301 	bic.w	r3, r3, #1
 8018d22:	b2da      	uxtb	r2, r3
 8018d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8018d2a:	e03a      	b.n	8018da2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018d32:	f043 0301 	orr.w	r3, r3, #1
 8018d36:	b2da      	uxtb	r2, r3
 8018d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018d3e:	68ba      	ldr	r2, [r7, #8]
 8018d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d46:	699b      	ldr	r3, [r3, #24]
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d10a      	bne.n	8018d62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d50:	f383 8811 	msr	BASEPRI, r3
 8018d54:	f3bf 8f6f 	isb	sy
 8018d58:	f3bf 8f4f 	dsb	sy
 8018d5c:	617b      	str	r3, [r7, #20]
}
 8018d5e:	bf00      	nop
 8018d60:	e7fe      	b.n	8018d60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d64:	699a      	ldr	r2, [r3, #24]
 8018d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d68:	18d1      	adds	r1, r2, r3
 8018d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018d70:	f7ff ff06 	bl	8018b80 <prvInsertTimerInActiveList>
					break;
 8018d74:	e015      	b.n	8018da2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018d7c:	f003 0302 	and.w	r3, r3, #2
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d103      	bne.n	8018d8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018d86:	f000 fbdb 	bl	8019540 <vPortFree>
 8018d8a:	e00a      	b.n	8018da2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018d92:	f023 0301 	bic.w	r3, r3, #1
 8018d96:	b2da      	uxtb	r2, r3
 8018d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018d9e:	e000      	b.n	8018da2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018da0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018da2:	4b08      	ldr	r3, [pc, #32]	; (8018dc4 <prvProcessReceivedCommands+0x1c0>)
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	1d39      	adds	r1, r7, #4
 8018da8:	2200      	movs	r2, #0
 8018daa:	4618      	mov	r0, r3
 8018dac:	f7fd ff84 	bl	8016cb8 <xQueueReceive>
 8018db0:	4603      	mov	r3, r0
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	f47f af2a 	bne.w	8018c0c <prvProcessReceivedCommands+0x8>
	}
}
 8018db8:	bf00      	nop
 8018dba:	bf00      	nop
 8018dbc:	3730      	adds	r7, #48	; 0x30
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	bd80      	pop	{r7, pc}
 8018dc2:	bf00      	nop
 8018dc4:	24002dc8 	.word	0x24002dc8

08018dc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b088      	sub	sp, #32
 8018dcc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018dce:	e048      	b.n	8018e62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018dd0:	4b2d      	ldr	r3, [pc, #180]	; (8018e88 <prvSwitchTimerLists+0xc0>)
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	68db      	ldr	r3, [r3, #12]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018dda:	4b2b      	ldr	r3, [pc, #172]	; (8018e88 <prvSwitchTimerLists+0xc0>)
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	68db      	ldr	r3, [r3, #12]
 8018de0:	68db      	ldr	r3, [r3, #12]
 8018de2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	3304      	adds	r3, #4
 8018de8:	4618      	mov	r0, r3
 8018dea:	f7fd fb8f 	bl	801650c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	6a1b      	ldr	r3, [r3, #32]
 8018df2:	68f8      	ldr	r0, [r7, #12]
 8018df4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018dfc:	f003 0304 	and.w	r3, r3, #4
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d02e      	beq.n	8018e62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	699b      	ldr	r3, [r3, #24]
 8018e08:	693a      	ldr	r2, [r7, #16]
 8018e0a:	4413      	add	r3, r2
 8018e0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018e0e:	68ba      	ldr	r2, [r7, #8]
 8018e10:	693b      	ldr	r3, [r7, #16]
 8018e12:	429a      	cmp	r2, r3
 8018e14:	d90e      	bls.n	8018e34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	68ba      	ldr	r2, [r7, #8]
 8018e1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018e1c:	68fb      	ldr	r3, [r7, #12]
 8018e1e:	68fa      	ldr	r2, [r7, #12]
 8018e20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018e22:	4b19      	ldr	r3, [pc, #100]	; (8018e88 <prvSwitchTimerLists+0xc0>)
 8018e24:	681a      	ldr	r2, [r3, #0]
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	3304      	adds	r3, #4
 8018e2a:	4619      	mov	r1, r3
 8018e2c:	4610      	mov	r0, r2
 8018e2e:	f7fd fb34 	bl	801649a <vListInsert>
 8018e32:	e016      	b.n	8018e62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018e34:	2300      	movs	r3, #0
 8018e36:	9300      	str	r3, [sp, #0]
 8018e38:	2300      	movs	r3, #0
 8018e3a:	693a      	ldr	r2, [r7, #16]
 8018e3c:	2100      	movs	r1, #0
 8018e3e:	68f8      	ldr	r0, [r7, #12]
 8018e40:	f7ff fd60 	bl	8018904 <xTimerGenericCommand>
 8018e44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d10a      	bne.n	8018e62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e50:	f383 8811 	msr	BASEPRI, r3
 8018e54:	f3bf 8f6f 	isb	sy
 8018e58:	f3bf 8f4f 	dsb	sy
 8018e5c:	603b      	str	r3, [r7, #0]
}
 8018e5e:	bf00      	nop
 8018e60:	e7fe      	b.n	8018e60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018e62:	4b09      	ldr	r3, [pc, #36]	; (8018e88 <prvSwitchTimerLists+0xc0>)
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d1b1      	bne.n	8018dd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018e6c:	4b06      	ldr	r3, [pc, #24]	; (8018e88 <prvSwitchTimerLists+0xc0>)
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018e72:	4b06      	ldr	r3, [pc, #24]	; (8018e8c <prvSwitchTimerLists+0xc4>)
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	4a04      	ldr	r2, [pc, #16]	; (8018e88 <prvSwitchTimerLists+0xc0>)
 8018e78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018e7a:	4a04      	ldr	r2, [pc, #16]	; (8018e8c <prvSwitchTimerLists+0xc4>)
 8018e7c:	697b      	ldr	r3, [r7, #20]
 8018e7e:	6013      	str	r3, [r2, #0]
}
 8018e80:	bf00      	nop
 8018e82:	3718      	adds	r7, #24
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}
 8018e88:	24002dc0 	.word	0x24002dc0
 8018e8c:	24002dc4 	.word	0x24002dc4

08018e90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b082      	sub	sp, #8
 8018e94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018e96:	f000 f965 	bl	8019164 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018e9a:	4b15      	ldr	r3, [pc, #84]	; (8018ef0 <prvCheckForValidListAndQueue+0x60>)
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d120      	bne.n	8018ee4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018ea2:	4814      	ldr	r0, [pc, #80]	; (8018ef4 <prvCheckForValidListAndQueue+0x64>)
 8018ea4:	f7fd faa8 	bl	80163f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018ea8:	4813      	ldr	r0, [pc, #76]	; (8018ef8 <prvCheckForValidListAndQueue+0x68>)
 8018eaa:	f7fd faa5 	bl	80163f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018eae:	4b13      	ldr	r3, [pc, #76]	; (8018efc <prvCheckForValidListAndQueue+0x6c>)
 8018eb0:	4a10      	ldr	r2, [pc, #64]	; (8018ef4 <prvCheckForValidListAndQueue+0x64>)
 8018eb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018eb4:	4b12      	ldr	r3, [pc, #72]	; (8018f00 <prvCheckForValidListAndQueue+0x70>)
 8018eb6:	4a10      	ldr	r2, [pc, #64]	; (8018ef8 <prvCheckForValidListAndQueue+0x68>)
 8018eb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018eba:	2300      	movs	r3, #0
 8018ebc:	9300      	str	r3, [sp, #0]
 8018ebe:	4b11      	ldr	r3, [pc, #68]	; (8018f04 <prvCheckForValidListAndQueue+0x74>)
 8018ec0:	4a11      	ldr	r2, [pc, #68]	; (8018f08 <prvCheckForValidListAndQueue+0x78>)
 8018ec2:	2110      	movs	r1, #16
 8018ec4:	200a      	movs	r0, #10
 8018ec6:	f7fd fbb3 	bl	8016630 <xQueueGenericCreateStatic>
 8018eca:	4603      	mov	r3, r0
 8018ecc:	4a08      	ldr	r2, [pc, #32]	; (8018ef0 <prvCheckForValidListAndQueue+0x60>)
 8018ece:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018ed0:	4b07      	ldr	r3, [pc, #28]	; (8018ef0 <prvCheckForValidListAndQueue+0x60>)
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d005      	beq.n	8018ee4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018ed8:	4b05      	ldr	r3, [pc, #20]	; (8018ef0 <prvCheckForValidListAndQueue+0x60>)
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	490b      	ldr	r1, [pc, #44]	; (8018f0c <prvCheckForValidListAndQueue+0x7c>)
 8018ede:	4618      	mov	r0, r3
 8018ee0:	f7fe faa2 	bl	8017428 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018ee4:	f000 f96e 	bl	80191c4 <vPortExitCritical>
}
 8018ee8:	bf00      	nop
 8018eea:	46bd      	mov	sp, r7
 8018eec:	bd80      	pop	{r7, pc}
 8018eee:	bf00      	nop
 8018ef0:	24002dc8 	.word	0x24002dc8
 8018ef4:	24002d98 	.word	0x24002d98
 8018ef8:	24002dac 	.word	0x24002dac
 8018efc:	24002dc0 	.word	0x24002dc0
 8018f00:	24002dc4 	.word	0x24002dc4
 8018f04:	24002e74 	.word	0x24002e74
 8018f08:	24002dd4 	.word	0x24002dd4
 8018f0c:	0801b834 	.word	0x0801b834

08018f10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018f10:	b480      	push	{r7}
 8018f12:	b085      	sub	sp, #20
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	60f8      	str	r0, [r7, #12]
 8018f18:	60b9      	str	r1, [r7, #8]
 8018f1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	3b04      	subs	r3, #4
 8018f20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	3b04      	subs	r3, #4
 8018f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018f30:	68bb      	ldr	r3, [r7, #8]
 8018f32:	f023 0201 	bic.w	r2, r3, #1
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	3b04      	subs	r3, #4
 8018f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018f40:	4a0c      	ldr	r2, [pc, #48]	; (8018f74 <pxPortInitialiseStack+0x64>)
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	3b14      	subs	r3, #20
 8018f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018f4c:	687a      	ldr	r2, [r7, #4]
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	3b04      	subs	r3, #4
 8018f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	f06f 0202 	mvn.w	r2, #2
 8018f5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	3b20      	subs	r3, #32
 8018f64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018f66:	68fb      	ldr	r3, [r7, #12]
}
 8018f68:	4618      	mov	r0, r3
 8018f6a:	3714      	adds	r7, #20
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f72:	4770      	bx	lr
 8018f74:	08018f79 	.word	0x08018f79

08018f78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018f78:	b480      	push	{r7}
 8018f7a:	b085      	sub	sp, #20
 8018f7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018f7e:	2300      	movs	r3, #0
 8018f80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018f82:	4b12      	ldr	r3, [pc, #72]	; (8018fcc <prvTaskExitError+0x54>)
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018f8a:	d00a      	beq.n	8018fa2 <prvTaskExitError+0x2a>
	__asm volatile
 8018f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f90:	f383 8811 	msr	BASEPRI, r3
 8018f94:	f3bf 8f6f 	isb	sy
 8018f98:	f3bf 8f4f 	dsb	sy
 8018f9c:	60fb      	str	r3, [r7, #12]
}
 8018f9e:	bf00      	nop
 8018fa0:	e7fe      	b.n	8018fa0 <prvTaskExitError+0x28>
	__asm volatile
 8018fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fa6:	f383 8811 	msr	BASEPRI, r3
 8018faa:	f3bf 8f6f 	isb	sy
 8018fae:	f3bf 8f4f 	dsb	sy
 8018fb2:	60bb      	str	r3, [r7, #8]
}
 8018fb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018fb6:	bf00      	nop
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d0fc      	beq.n	8018fb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018fbe:	bf00      	nop
 8018fc0:	bf00      	nop
 8018fc2:	3714      	adds	r7, #20
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fca:	4770      	bx	lr
 8018fcc:	24000030 	.word	0x24000030

08018fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018fd0:	4b07      	ldr	r3, [pc, #28]	; (8018ff0 <pxCurrentTCBConst2>)
 8018fd2:	6819      	ldr	r1, [r3, #0]
 8018fd4:	6808      	ldr	r0, [r1, #0]
 8018fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fda:	f380 8809 	msr	PSP, r0
 8018fde:	f3bf 8f6f 	isb	sy
 8018fe2:	f04f 0000 	mov.w	r0, #0
 8018fe6:	f380 8811 	msr	BASEPRI, r0
 8018fea:	4770      	bx	lr
 8018fec:	f3af 8000 	nop.w

08018ff0 <pxCurrentTCBConst2>:
 8018ff0:	24002c6c 	.word	0x24002c6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018ff4:	bf00      	nop
 8018ff6:	bf00      	nop

08018ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018ff8:	4808      	ldr	r0, [pc, #32]	; (801901c <prvPortStartFirstTask+0x24>)
 8018ffa:	6800      	ldr	r0, [r0, #0]
 8018ffc:	6800      	ldr	r0, [r0, #0]
 8018ffe:	f380 8808 	msr	MSP, r0
 8019002:	f04f 0000 	mov.w	r0, #0
 8019006:	f380 8814 	msr	CONTROL, r0
 801900a:	b662      	cpsie	i
 801900c:	b661      	cpsie	f
 801900e:	f3bf 8f4f 	dsb	sy
 8019012:	f3bf 8f6f 	isb	sy
 8019016:	df00      	svc	0
 8019018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801901a:	bf00      	nop
 801901c:	e000ed08 	.word	0xe000ed08

08019020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019020:	b580      	push	{r7, lr}
 8019022:	b086      	sub	sp, #24
 8019024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019026:	4b46      	ldr	r3, [pc, #280]	; (8019140 <xPortStartScheduler+0x120>)
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	4a46      	ldr	r2, [pc, #280]	; (8019144 <xPortStartScheduler+0x124>)
 801902c:	4293      	cmp	r3, r2
 801902e:	d10a      	bne.n	8019046 <xPortStartScheduler+0x26>
	__asm volatile
 8019030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019034:	f383 8811 	msr	BASEPRI, r3
 8019038:	f3bf 8f6f 	isb	sy
 801903c:	f3bf 8f4f 	dsb	sy
 8019040:	613b      	str	r3, [r7, #16]
}
 8019042:	bf00      	nop
 8019044:	e7fe      	b.n	8019044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019046:	4b3e      	ldr	r3, [pc, #248]	; (8019140 <xPortStartScheduler+0x120>)
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	4a3f      	ldr	r2, [pc, #252]	; (8019148 <xPortStartScheduler+0x128>)
 801904c:	4293      	cmp	r3, r2
 801904e:	d10a      	bne.n	8019066 <xPortStartScheduler+0x46>
	__asm volatile
 8019050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019054:	f383 8811 	msr	BASEPRI, r3
 8019058:	f3bf 8f6f 	isb	sy
 801905c:	f3bf 8f4f 	dsb	sy
 8019060:	60fb      	str	r3, [r7, #12]
}
 8019062:	bf00      	nop
 8019064:	e7fe      	b.n	8019064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019066:	4b39      	ldr	r3, [pc, #228]	; (801914c <xPortStartScheduler+0x12c>)
 8019068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801906a:	697b      	ldr	r3, [r7, #20]
 801906c:	781b      	ldrb	r3, [r3, #0]
 801906e:	b2db      	uxtb	r3, r3
 8019070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019072:	697b      	ldr	r3, [r7, #20]
 8019074:	22ff      	movs	r2, #255	; 0xff
 8019076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019078:	697b      	ldr	r3, [r7, #20]
 801907a:	781b      	ldrb	r3, [r3, #0]
 801907c:	b2db      	uxtb	r3, r3
 801907e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019080:	78fb      	ldrb	r3, [r7, #3]
 8019082:	b2db      	uxtb	r3, r3
 8019084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019088:	b2da      	uxtb	r2, r3
 801908a:	4b31      	ldr	r3, [pc, #196]	; (8019150 <xPortStartScheduler+0x130>)
 801908c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801908e:	4b31      	ldr	r3, [pc, #196]	; (8019154 <xPortStartScheduler+0x134>)
 8019090:	2207      	movs	r2, #7
 8019092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019094:	e009      	b.n	80190aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019096:	4b2f      	ldr	r3, [pc, #188]	; (8019154 <xPortStartScheduler+0x134>)
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	3b01      	subs	r3, #1
 801909c:	4a2d      	ldr	r2, [pc, #180]	; (8019154 <xPortStartScheduler+0x134>)
 801909e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80190a0:	78fb      	ldrb	r3, [r7, #3]
 80190a2:	b2db      	uxtb	r3, r3
 80190a4:	005b      	lsls	r3, r3, #1
 80190a6:	b2db      	uxtb	r3, r3
 80190a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80190aa:	78fb      	ldrb	r3, [r7, #3]
 80190ac:	b2db      	uxtb	r3, r3
 80190ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80190b2:	2b80      	cmp	r3, #128	; 0x80
 80190b4:	d0ef      	beq.n	8019096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80190b6:	4b27      	ldr	r3, [pc, #156]	; (8019154 <xPortStartScheduler+0x134>)
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	f1c3 0307 	rsb	r3, r3, #7
 80190be:	2b04      	cmp	r3, #4
 80190c0:	d00a      	beq.n	80190d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80190c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190c6:	f383 8811 	msr	BASEPRI, r3
 80190ca:	f3bf 8f6f 	isb	sy
 80190ce:	f3bf 8f4f 	dsb	sy
 80190d2:	60bb      	str	r3, [r7, #8]
}
 80190d4:	bf00      	nop
 80190d6:	e7fe      	b.n	80190d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80190d8:	4b1e      	ldr	r3, [pc, #120]	; (8019154 <xPortStartScheduler+0x134>)
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	021b      	lsls	r3, r3, #8
 80190de:	4a1d      	ldr	r2, [pc, #116]	; (8019154 <xPortStartScheduler+0x134>)
 80190e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80190e2:	4b1c      	ldr	r3, [pc, #112]	; (8019154 <xPortStartScheduler+0x134>)
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80190ea:	4a1a      	ldr	r2, [pc, #104]	; (8019154 <xPortStartScheduler+0x134>)
 80190ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	b2da      	uxtb	r2, r3
 80190f2:	697b      	ldr	r3, [r7, #20]
 80190f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80190f6:	4b18      	ldr	r3, [pc, #96]	; (8019158 <xPortStartScheduler+0x138>)
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	4a17      	ldr	r2, [pc, #92]	; (8019158 <xPortStartScheduler+0x138>)
 80190fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019102:	4b15      	ldr	r3, [pc, #84]	; (8019158 <xPortStartScheduler+0x138>)
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	4a14      	ldr	r2, [pc, #80]	; (8019158 <xPortStartScheduler+0x138>)
 8019108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801910c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801910e:	f000 f8dd 	bl	80192cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019112:	4b12      	ldr	r3, [pc, #72]	; (801915c <xPortStartScheduler+0x13c>)
 8019114:	2200      	movs	r2, #0
 8019116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019118:	f000 f8fc 	bl	8019314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801911c:	4b10      	ldr	r3, [pc, #64]	; (8019160 <xPortStartScheduler+0x140>)
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	4a0f      	ldr	r2, [pc, #60]	; (8019160 <xPortStartScheduler+0x140>)
 8019122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019128:	f7ff ff66 	bl	8018ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801912c:	f7fe fda4 	bl	8017c78 <vTaskSwitchContext>
	prvTaskExitError();
 8019130:	f7ff ff22 	bl	8018f78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019134:	2300      	movs	r3, #0
}
 8019136:	4618      	mov	r0, r3
 8019138:	3718      	adds	r7, #24
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}
 801913e:	bf00      	nop
 8019140:	e000ed00 	.word	0xe000ed00
 8019144:	410fc271 	.word	0x410fc271
 8019148:	410fc270 	.word	0x410fc270
 801914c:	e000e400 	.word	0xe000e400
 8019150:	24002ebc 	.word	0x24002ebc
 8019154:	24002ec0 	.word	0x24002ec0
 8019158:	e000ed20 	.word	0xe000ed20
 801915c:	24000030 	.word	0x24000030
 8019160:	e000ef34 	.word	0xe000ef34

08019164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019164:	b480      	push	{r7}
 8019166:	b083      	sub	sp, #12
 8019168:	af00      	add	r7, sp, #0
	__asm volatile
 801916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801916e:	f383 8811 	msr	BASEPRI, r3
 8019172:	f3bf 8f6f 	isb	sy
 8019176:	f3bf 8f4f 	dsb	sy
 801917a:	607b      	str	r3, [r7, #4]
}
 801917c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801917e:	4b0f      	ldr	r3, [pc, #60]	; (80191bc <vPortEnterCritical+0x58>)
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	3301      	adds	r3, #1
 8019184:	4a0d      	ldr	r2, [pc, #52]	; (80191bc <vPortEnterCritical+0x58>)
 8019186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019188:	4b0c      	ldr	r3, [pc, #48]	; (80191bc <vPortEnterCritical+0x58>)
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	2b01      	cmp	r3, #1
 801918e:	d10f      	bne.n	80191b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019190:	4b0b      	ldr	r3, [pc, #44]	; (80191c0 <vPortEnterCritical+0x5c>)
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	b2db      	uxtb	r3, r3
 8019196:	2b00      	cmp	r3, #0
 8019198:	d00a      	beq.n	80191b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801919e:	f383 8811 	msr	BASEPRI, r3
 80191a2:	f3bf 8f6f 	isb	sy
 80191a6:	f3bf 8f4f 	dsb	sy
 80191aa:	603b      	str	r3, [r7, #0]
}
 80191ac:	bf00      	nop
 80191ae:	e7fe      	b.n	80191ae <vPortEnterCritical+0x4a>
	}
}
 80191b0:	bf00      	nop
 80191b2:	370c      	adds	r7, #12
 80191b4:	46bd      	mov	sp, r7
 80191b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ba:	4770      	bx	lr
 80191bc:	24000030 	.word	0x24000030
 80191c0:	e000ed04 	.word	0xe000ed04

080191c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80191c4:	b480      	push	{r7}
 80191c6:	b083      	sub	sp, #12
 80191c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80191ca:	4b12      	ldr	r3, [pc, #72]	; (8019214 <vPortExitCritical+0x50>)
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d10a      	bne.n	80191e8 <vPortExitCritical+0x24>
	__asm volatile
 80191d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191d6:	f383 8811 	msr	BASEPRI, r3
 80191da:	f3bf 8f6f 	isb	sy
 80191de:	f3bf 8f4f 	dsb	sy
 80191e2:	607b      	str	r3, [r7, #4]
}
 80191e4:	bf00      	nop
 80191e6:	e7fe      	b.n	80191e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80191e8:	4b0a      	ldr	r3, [pc, #40]	; (8019214 <vPortExitCritical+0x50>)
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	3b01      	subs	r3, #1
 80191ee:	4a09      	ldr	r2, [pc, #36]	; (8019214 <vPortExitCritical+0x50>)
 80191f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80191f2:	4b08      	ldr	r3, [pc, #32]	; (8019214 <vPortExitCritical+0x50>)
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d105      	bne.n	8019206 <vPortExitCritical+0x42>
 80191fa:	2300      	movs	r3, #0
 80191fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	f383 8811 	msr	BASEPRI, r3
}
 8019204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019206:	bf00      	nop
 8019208:	370c      	adds	r7, #12
 801920a:	46bd      	mov	sp, r7
 801920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019210:	4770      	bx	lr
 8019212:	bf00      	nop
 8019214:	24000030 	.word	0x24000030
	...

08019220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019220:	f3ef 8009 	mrs	r0, PSP
 8019224:	f3bf 8f6f 	isb	sy
 8019228:	4b15      	ldr	r3, [pc, #84]	; (8019280 <pxCurrentTCBConst>)
 801922a:	681a      	ldr	r2, [r3, #0]
 801922c:	f01e 0f10 	tst.w	lr, #16
 8019230:	bf08      	it	eq
 8019232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801923a:	6010      	str	r0, [r2, #0]
 801923c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019244:	f380 8811 	msr	BASEPRI, r0
 8019248:	f3bf 8f4f 	dsb	sy
 801924c:	f3bf 8f6f 	isb	sy
 8019250:	f7fe fd12 	bl	8017c78 <vTaskSwitchContext>
 8019254:	f04f 0000 	mov.w	r0, #0
 8019258:	f380 8811 	msr	BASEPRI, r0
 801925c:	bc09      	pop	{r0, r3}
 801925e:	6819      	ldr	r1, [r3, #0]
 8019260:	6808      	ldr	r0, [r1, #0]
 8019262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019266:	f01e 0f10 	tst.w	lr, #16
 801926a:	bf08      	it	eq
 801926c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019270:	f380 8809 	msr	PSP, r0
 8019274:	f3bf 8f6f 	isb	sy
 8019278:	4770      	bx	lr
 801927a:	bf00      	nop
 801927c:	f3af 8000 	nop.w

08019280 <pxCurrentTCBConst>:
 8019280:	24002c6c 	.word	0x24002c6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019284:	bf00      	nop
 8019286:	bf00      	nop

08019288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b082      	sub	sp, #8
 801928c:	af00      	add	r7, sp, #0
	__asm volatile
 801928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019292:	f383 8811 	msr	BASEPRI, r3
 8019296:	f3bf 8f6f 	isb	sy
 801929a:	f3bf 8f4f 	dsb	sy
 801929e:	607b      	str	r3, [r7, #4]
}
 80192a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80192a2:	f7fe fc31 	bl	8017b08 <xTaskIncrementTick>
 80192a6:	4603      	mov	r3, r0
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d003      	beq.n	80192b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80192ac:	4b06      	ldr	r3, [pc, #24]	; (80192c8 <SysTick_Handler+0x40>)
 80192ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80192b2:	601a      	str	r2, [r3, #0]
 80192b4:	2300      	movs	r3, #0
 80192b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80192b8:	683b      	ldr	r3, [r7, #0]
 80192ba:	f383 8811 	msr	BASEPRI, r3
}
 80192be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80192c0:	bf00      	nop
 80192c2:	3708      	adds	r7, #8
 80192c4:	46bd      	mov	sp, r7
 80192c6:	bd80      	pop	{r7, pc}
 80192c8:	e000ed04 	.word	0xe000ed04

080192cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80192cc:	b480      	push	{r7}
 80192ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80192d0:	4b0b      	ldr	r3, [pc, #44]	; (8019300 <vPortSetupTimerInterrupt+0x34>)
 80192d2:	2200      	movs	r2, #0
 80192d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80192d6:	4b0b      	ldr	r3, [pc, #44]	; (8019304 <vPortSetupTimerInterrupt+0x38>)
 80192d8:	2200      	movs	r2, #0
 80192da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80192dc:	4b0a      	ldr	r3, [pc, #40]	; (8019308 <vPortSetupTimerInterrupt+0x3c>)
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	4a0a      	ldr	r2, [pc, #40]	; (801930c <vPortSetupTimerInterrupt+0x40>)
 80192e2:	fba2 2303 	umull	r2, r3, r2, r3
 80192e6:	099b      	lsrs	r3, r3, #6
 80192e8:	4a09      	ldr	r2, [pc, #36]	; (8019310 <vPortSetupTimerInterrupt+0x44>)
 80192ea:	3b01      	subs	r3, #1
 80192ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80192ee:	4b04      	ldr	r3, [pc, #16]	; (8019300 <vPortSetupTimerInterrupt+0x34>)
 80192f0:	2207      	movs	r2, #7
 80192f2:	601a      	str	r2, [r3, #0]
}
 80192f4:	bf00      	nop
 80192f6:	46bd      	mov	sp, r7
 80192f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fc:	4770      	bx	lr
 80192fe:	bf00      	nop
 8019300:	e000e010 	.word	0xe000e010
 8019304:	e000e018 	.word	0xe000e018
 8019308:	24000000 	.word	0x24000000
 801930c:	10624dd3 	.word	0x10624dd3
 8019310:	e000e014 	.word	0xe000e014

08019314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019324 <vPortEnableVFP+0x10>
 8019318:	6801      	ldr	r1, [r0, #0]
 801931a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801931e:	6001      	str	r1, [r0, #0]
 8019320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019322:	bf00      	nop
 8019324:	e000ed88 	.word	0xe000ed88

08019328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019328:	b480      	push	{r7}
 801932a:	b085      	sub	sp, #20
 801932c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801932e:	f3ef 8305 	mrs	r3, IPSR
 8019332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	2b0f      	cmp	r3, #15
 8019338:	d914      	bls.n	8019364 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801933a:	4a17      	ldr	r2, [pc, #92]	; (8019398 <vPortValidateInterruptPriority+0x70>)
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	4413      	add	r3, r2
 8019340:	781b      	ldrb	r3, [r3, #0]
 8019342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019344:	4b15      	ldr	r3, [pc, #84]	; (801939c <vPortValidateInterruptPriority+0x74>)
 8019346:	781b      	ldrb	r3, [r3, #0]
 8019348:	7afa      	ldrb	r2, [r7, #11]
 801934a:	429a      	cmp	r2, r3
 801934c:	d20a      	bcs.n	8019364 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801934e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019352:	f383 8811 	msr	BASEPRI, r3
 8019356:	f3bf 8f6f 	isb	sy
 801935a:	f3bf 8f4f 	dsb	sy
 801935e:	607b      	str	r3, [r7, #4]
}
 8019360:	bf00      	nop
 8019362:	e7fe      	b.n	8019362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019364:	4b0e      	ldr	r3, [pc, #56]	; (80193a0 <vPortValidateInterruptPriority+0x78>)
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801936c:	4b0d      	ldr	r3, [pc, #52]	; (80193a4 <vPortValidateInterruptPriority+0x7c>)
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	429a      	cmp	r2, r3
 8019372:	d90a      	bls.n	801938a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019378:	f383 8811 	msr	BASEPRI, r3
 801937c:	f3bf 8f6f 	isb	sy
 8019380:	f3bf 8f4f 	dsb	sy
 8019384:	603b      	str	r3, [r7, #0]
}
 8019386:	bf00      	nop
 8019388:	e7fe      	b.n	8019388 <vPortValidateInterruptPriority+0x60>
	}
 801938a:	bf00      	nop
 801938c:	3714      	adds	r7, #20
 801938e:	46bd      	mov	sp, r7
 8019390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019394:	4770      	bx	lr
 8019396:	bf00      	nop
 8019398:	e000e3f0 	.word	0xe000e3f0
 801939c:	24002ebc 	.word	0x24002ebc
 80193a0:	e000ed0c 	.word	0xe000ed0c
 80193a4:	24002ec0 	.word	0x24002ec0

080193a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b08a      	sub	sp, #40	; 0x28
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80193b0:	2300      	movs	r3, #0
 80193b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80193b4:	f7fe faee 	bl	8017994 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80193b8:	4b5b      	ldr	r3, [pc, #364]	; (8019528 <pvPortMalloc+0x180>)
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d101      	bne.n	80193c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80193c0:	f000 f920 	bl	8019604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80193c4:	4b59      	ldr	r3, [pc, #356]	; (801952c <pvPortMalloc+0x184>)
 80193c6:	681a      	ldr	r2, [r3, #0]
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	4013      	ands	r3, r2
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	f040 8093 	bne.w	80194f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d01d      	beq.n	8019414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80193d8:	2208      	movs	r2, #8
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	4413      	add	r3, r2
 80193de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	f003 0307 	and.w	r3, r3, #7
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d014      	beq.n	8019414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	f023 0307 	bic.w	r3, r3, #7
 80193f0:	3308      	adds	r3, #8
 80193f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	f003 0307 	and.w	r3, r3, #7
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d00a      	beq.n	8019414 <pvPortMalloc+0x6c>
	__asm volatile
 80193fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019402:	f383 8811 	msr	BASEPRI, r3
 8019406:	f3bf 8f6f 	isb	sy
 801940a:	f3bf 8f4f 	dsb	sy
 801940e:	617b      	str	r3, [r7, #20]
}
 8019410:	bf00      	nop
 8019412:	e7fe      	b.n	8019412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d06e      	beq.n	80194f8 <pvPortMalloc+0x150>
 801941a:	4b45      	ldr	r3, [pc, #276]	; (8019530 <pvPortMalloc+0x188>)
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	687a      	ldr	r2, [r7, #4]
 8019420:	429a      	cmp	r2, r3
 8019422:	d869      	bhi.n	80194f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019424:	4b43      	ldr	r3, [pc, #268]	; (8019534 <pvPortMalloc+0x18c>)
 8019426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019428:	4b42      	ldr	r3, [pc, #264]	; (8019534 <pvPortMalloc+0x18c>)
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801942e:	e004      	b.n	801943a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801943a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801943c:	685b      	ldr	r3, [r3, #4]
 801943e:	687a      	ldr	r2, [r7, #4]
 8019440:	429a      	cmp	r2, r3
 8019442:	d903      	bls.n	801944c <pvPortMalloc+0xa4>
 8019444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d1f1      	bne.n	8019430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801944c:	4b36      	ldr	r3, [pc, #216]	; (8019528 <pvPortMalloc+0x180>)
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019452:	429a      	cmp	r2, r3
 8019454:	d050      	beq.n	80194f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019456:	6a3b      	ldr	r3, [r7, #32]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	2208      	movs	r2, #8
 801945c:	4413      	add	r3, r2
 801945e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019462:	681a      	ldr	r2, [r3, #0]
 8019464:	6a3b      	ldr	r3, [r7, #32]
 8019466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801946a:	685a      	ldr	r2, [r3, #4]
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	1ad2      	subs	r2, r2, r3
 8019470:	2308      	movs	r3, #8
 8019472:	005b      	lsls	r3, r3, #1
 8019474:	429a      	cmp	r2, r3
 8019476:	d91f      	bls.n	80194b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	4413      	add	r3, r2
 801947e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019480:	69bb      	ldr	r3, [r7, #24]
 8019482:	f003 0307 	and.w	r3, r3, #7
 8019486:	2b00      	cmp	r3, #0
 8019488:	d00a      	beq.n	80194a0 <pvPortMalloc+0xf8>
	__asm volatile
 801948a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801948e:	f383 8811 	msr	BASEPRI, r3
 8019492:	f3bf 8f6f 	isb	sy
 8019496:	f3bf 8f4f 	dsb	sy
 801949a:	613b      	str	r3, [r7, #16]
}
 801949c:	bf00      	nop
 801949e:	e7fe      	b.n	801949e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80194a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194a2:	685a      	ldr	r2, [r3, #4]
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	1ad2      	subs	r2, r2, r3
 80194a8:	69bb      	ldr	r3, [r7, #24]
 80194aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80194ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194ae:	687a      	ldr	r2, [r7, #4]
 80194b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80194b2:	69b8      	ldr	r0, [r7, #24]
 80194b4:	f000 f908 	bl	80196c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80194b8:	4b1d      	ldr	r3, [pc, #116]	; (8019530 <pvPortMalloc+0x188>)
 80194ba:	681a      	ldr	r2, [r3, #0]
 80194bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194be:	685b      	ldr	r3, [r3, #4]
 80194c0:	1ad3      	subs	r3, r2, r3
 80194c2:	4a1b      	ldr	r2, [pc, #108]	; (8019530 <pvPortMalloc+0x188>)
 80194c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80194c6:	4b1a      	ldr	r3, [pc, #104]	; (8019530 <pvPortMalloc+0x188>)
 80194c8:	681a      	ldr	r2, [r3, #0]
 80194ca:	4b1b      	ldr	r3, [pc, #108]	; (8019538 <pvPortMalloc+0x190>)
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	429a      	cmp	r2, r3
 80194d0:	d203      	bcs.n	80194da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80194d2:	4b17      	ldr	r3, [pc, #92]	; (8019530 <pvPortMalloc+0x188>)
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	4a18      	ldr	r2, [pc, #96]	; (8019538 <pvPortMalloc+0x190>)
 80194d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80194da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194dc:	685a      	ldr	r2, [r3, #4]
 80194de:	4b13      	ldr	r3, [pc, #76]	; (801952c <pvPortMalloc+0x184>)
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	431a      	orrs	r2, r3
 80194e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80194e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194ea:	2200      	movs	r2, #0
 80194ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80194ee:	4b13      	ldr	r3, [pc, #76]	; (801953c <pvPortMalloc+0x194>)
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	3301      	adds	r3, #1
 80194f4:	4a11      	ldr	r2, [pc, #68]	; (801953c <pvPortMalloc+0x194>)
 80194f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80194f8:	f7fe fa5a 	bl	80179b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80194fc:	69fb      	ldr	r3, [r7, #28]
 80194fe:	f003 0307 	and.w	r3, r3, #7
 8019502:	2b00      	cmp	r3, #0
 8019504:	d00a      	beq.n	801951c <pvPortMalloc+0x174>
	__asm volatile
 8019506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801950a:	f383 8811 	msr	BASEPRI, r3
 801950e:	f3bf 8f6f 	isb	sy
 8019512:	f3bf 8f4f 	dsb	sy
 8019516:	60fb      	str	r3, [r7, #12]
}
 8019518:	bf00      	nop
 801951a:	e7fe      	b.n	801951a <pvPortMalloc+0x172>
	return pvReturn;
 801951c:	69fb      	ldr	r3, [r7, #28]
}
 801951e:	4618      	mov	r0, r3
 8019520:	3728      	adds	r7, #40	; 0x28
 8019522:	46bd      	mov	sp, r7
 8019524:	bd80      	pop	{r7, pc}
 8019526:	bf00      	nop
 8019528:	24006acc 	.word	0x24006acc
 801952c:	24006ae0 	.word	0x24006ae0
 8019530:	24006ad0 	.word	0x24006ad0
 8019534:	24006ac4 	.word	0x24006ac4
 8019538:	24006ad4 	.word	0x24006ad4
 801953c:	24006ad8 	.word	0x24006ad8

08019540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b086      	sub	sp, #24
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d04d      	beq.n	80195ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019552:	2308      	movs	r3, #8
 8019554:	425b      	negs	r3, r3
 8019556:	697a      	ldr	r2, [r7, #20]
 8019558:	4413      	add	r3, r2
 801955a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801955c:	697b      	ldr	r3, [r7, #20]
 801955e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019560:	693b      	ldr	r3, [r7, #16]
 8019562:	685a      	ldr	r2, [r3, #4]
 8019564:	4b24      	ldr	r3, [pc, #144]	; (80195f8 <vPortFree+0xb8>)
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	4013      	ands	r3, r2
 801956a:	2b00      	cmp	r3, #0
 801956c:	d10a      	bne.n	8019584 <vPortFree+0x44>
	__asm volatile
 801956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019572:	f383 8811 	msr	BASEPRI, r3
 8019576:	f3bf 8f6f 	isb	sy
 801957a:	f3bf 8f4f 	dsb	sy
 801957e:	60fb      	str	r3, [r7, #12]
}
 8019580:	bf00      	nop
 8019582:	e7fe      	b.n	8019582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019584:	693b      	ldr	r3, [r7, #16]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d00a      	beq.n	80195a2 <vPortFree+0x62>
	__asm volatile
 801958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019590:	f383 8811 	msr	BASEPRI, r3
 8019594:	f3bf 8f6f 	isb	sy
 8019598:	f3bf 8f4f 	dsb	sy
 801959c:	60bb      	str	r3, [r7, #8]
}
 801959e:	bf00      	nop
 80195a0:	e7fe      	b.n	80195a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80195a2:	693b      	ldr	r3, [r7, #16]
 80195a4:	685a      	ldr	r2, [r3, #4]
 80195a6:	4b14      	ldr	r3, [pc, #80]	; (80195f8 <vPortFree+0xb8>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	4013      	ands	r3, r2
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d01e      	beq.n	80195ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80195b0:	693b      	ldr	r3, [r7, #16]
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d11a      	bne.n	80195ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80195b8:	693b      	ldr	r3, [r7, #16]
 80195ba:	685a      	ldr	r2, [r3, #4]
 80195bc:	4b0e      	ldr	r3, [pc, #56]	; (80195f8 <vPortFree+0xb8>)
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	43db      	mvns	r3, r3
 80195c2:	401a      	ands	r2, r3
 80195c4:	693b      	ldr	r3, [r7, #16]
 80195c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80195c8:	f7fe f9e4 	bl	8017994 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80195cc:	693b      	ldr	r3, [r7, #16]
 80195ce:	685a      	ldr	r2, [r3, #4]
 80195d0:	4b0a      	ldr	r3, [pc, #40]	; (80195fc <vPortFree+0xbc>)
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	4413      	add	r3, r2
 80195d6:	4a09      	ldr	r2, [pc, #36]	; (80195fc <vPortFree+0xbc>)
 80195d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80195da:	6938      	ldr	r0, [r7, #16]
 80195dc:	f000 f874 	bl	80196c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80195e0:	4b07      	ldr	r3, [pc, #28]	; (8019600 <vPortFree+0xc0>)
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	3301      	adds	r3, #1
 80195e6:	4a06      	ldr	r2, [pc, #24]	; (8019600 <vPortFree+0xc0>)
 80195e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80195ea:	f7fe f9e1 	bl	80179b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80195ee:	bf00      	nop
 80195f0:	3718      	adds	r7, #24
 80195f2:	46bd      	mov	sp, r7
 80195f4:	bd80      	pop	{r7, pc}
 80195f6:	bf00      	nop
 80195f8:	24006ae0 	.word	0x24006ae0
 80195fc:	24006ad0 	.word	0x24006ad0
 8019600:	24006adc 	.word	0x24006adc

08019604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019604:	b480      	push	{r7}
 8019606:	b085      	sub	sp, #20
 8019608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801960a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801960e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019610:	4b27      	ldr	r3, [pc, #156]	; (80196b0 <prvHeapInit+0xac>)
 8019612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	f003 0307 	and.w	r3, r3, #7
 801961a:	2b00      	cmp	r3, #0
 801961c:	d00c      	beq.n	8019638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	3307      	adds	r3, #7
 8019622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	f023 0307 	bic.w	r3, r3, #7
 801962a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801962c:	68ba      	ldr	r2, [r7, #8]
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	1ad3      	subs	r3, r2, r3
 8019632:	4a1f      	ldr	r2, [pc, #124]	; (80196b0 <prvHeapInit+0xac>)
 8019634:	4413      	add	r3, r2
 8019636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801963c:	4a1d      	ldr	r2, [pc, #116]	; (80196b4 <prvHeapInit+0xb0>)
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019642:	4b1c      	ldr	r3, [pc, #112]	; (80196b4 <prvHeapInit+0xb0>)
 8019644:	2200      	movs	r2, #0
 8019646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	68ba      	ldr	r2, [r7, #8]
 801964c:	4413      	add	r3, r2
 801964e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019650:	2208      	movs	r2, #8
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	1a9b      	subs	r3, r3, r2
 8019656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	f023 0307 	bic.w	r3, r3, #7
 801965e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	4a15      	ldr	r2, [pc, #84]	; (80196b8 <prvHeapInit+0xb4>)
 8019664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019666:	4b14      	ldr	r3, [pc, #80]	; (80196b8 <prvHeapInit+0xb4>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	2200      	movs	r2, #0
 801966c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801966e:	4b12      	ldr	r3, [pc, #72]	; (80196b8 <prvHeapInit+0xb4>)
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	2200      	movs	r2, #0
 8019674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801967a:	683b      	ldr	r3, [r7, #0]
 801967c:	68fa      	ldr	r2, [r7, #12]
 801967e:	1ad2      	subs	r2, r2, r3
 8019680:	683b      	ldr	r3, [r7, #0]
 8019682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019684:	4b0c      	ldr	r3, [pc, #48]	; (80196b8 <prvHeapInit+0xb4>)
 8019686:	681a      	ldr	r2, [r3, #0]
 8019688:	683b      	ldr	r3, [r7, #0]
 801968a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	685b      	ldr	r3, [r3, #4]
 8019690:	4a0a      	ldr	r2, [pc, #40]	; (80196bc <prvHeapInit+0xb8>)
 8019692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019694:	683b      	ldr	r3, [r7, #0]
 8019696:	685b      	ldr	r3, [r3, #4]
 8019698:	4a09      	ldr	r2, [pc, #36]	; (80196c0 <prvHeapInit+0xbc>)
 801969a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801969c:	4b09      	ldr	r3, [pc, #36]	; (80196c4 <prvHeapInit+0xc0>)
 801969e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80196a2:	601a      	str	r2, [r3, #0]
}
 80196a4:	bf00      	nop
 80196a6:	3714      	adds	r7, #20
 80196a8:	46bd      	mov	sp, r7
 80196aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ae:	4770      	bx	lr
 80196b0:	24002ec4 	.word	0x24002ec4
 80196b4:	24006ac4 	.word	0x24006ac4
 80196b8:	24006acc 	.word	0x24006acc
 80196bc:	24006ad4 	.word	0x24006ad4
 80196c0:	24006ad0 	.word	0x24006ad0
 80196c4:	24006ae0 	.word	0x24006ae0

080196c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80196c8:	b480      	push	{r7}
 80196ca:	b085      	sub	sp, #20
 80196cc:	af00      	add	r7, sp, #0
 80196ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80196d0:	4b28      	ldr	r3, [pc, #160]	; (8019774 <prvInsertBlockIntoFreeList+0xac>)
 80196d2:	60fb      	str	r3, [r7, #12]
 80196d4:	e002      	b.n	80196dc <prvInsertBlockIntoFreeList+0x14>
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	60fb      	str	r3, [r7, #12]
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	687a      	ldr	r2, [r7, #4]
 80196e2:	429a      	cmp	r2, r3
 80196e4:	d8f7      	bhi.n	80196d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	685b      	ldr	r3, [r3, #4]
 80196ee:	68ba      	ldr	r2, [r7, #8]
 80196f0:	4413      	add	r3, r2
 80196f2:	687a      	ldr	r2, [r7, #4]
 80196f4:	429a      	cmp	r2, r3
 80196f6:	d108      	bne.n	801970a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	685a      	ldr	r2, [r3, #4]
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	685b      	ldr	r3, [r3, #4]
 8019700:	441a      	add	r2, r3
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	685b      	ldr	r3, [r3, #4]
 8019712:	68ba      	ldr	r2, [r7, #8]
 8019714:	441a      	add	r2, r3
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	429a      	cmp	r2, r3
 801971c:	d118      	bne.n	8019750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	681a      	ldr	r2, [r3, #0]
 8019722:	4b15      	ldr	r3, [pc, #84]	; (8019778 <prvInsertBlockIntoFreeList+0xb0>)
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	429a      	cmp	r2, r3
 8019728:	d00d      	beq.n	8019746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	685a      	ldr	r2, [r3, #4]
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	685b      	ldr	r3, [r3, #4]
 8019734:	441a      	add	r2, r3
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	681a      	ldr	r2, [r3, #0]
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	601a      	str	r2, [r3, #0]
 8019744:	e008      	b.n	8019758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019746:	4b0c      	ldr	r3, [pc, #48]	; (8019778 <prvInsertBlockIntoFreeList+0xb0>)
 8019748:	681a      	ldr	r2, [r3, #0]
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	601a      	str	r2, [r3, #0]
 801974e:	e003      	b.n	8019758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	681a      	ldr	r2, [r3, #0]
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019758:	68fa      	ldr	r2, [r7, #12]
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	429a      	cmp	r2, r3
 801975e:	d002      	beq.n	8019766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	687a      	ldr	r2, [r7, #4]
 8019764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019766:	bf00      	nop
 8019768:	3714      	adds	r7, #20
 801976a:	46bd      	mov	sp, r7
 801976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019770:	4770      	bx	lr
 8019772:	bf00      	nop
 8019774:	24006ac4 	.word	0x24006ac4
 8019778:	24006acc 	.word	0x24006acc

0801977c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801977c:	b580      	push	{r7, lr}
 801977e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8019780:	2200      	movs	r2, #0
 8019782:	490e      	ldr	r1, [pc, #56]	; (80197bc <MX_USB_HOST_Init+0x40>)
 8019784:	480e      	ldr	r0, [pc, #56]	; (80197c0 <MX_USB_HOST_Init+0x44>)
 8019786:	f7f4 fe2f 	bl	800e3e8 <USBH_Init>
 801978a:	4603      	mov	r3, r0
 801978c:	2b00      	cmp	r3, #0
 801978e:	d001      	beq.n	8019794 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8019790:	f7e8 f966 	bl	8001a60 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8019794:	490b      	ldr	r1, [pc, #44]	; (80197c4 <MX_USB_HOST_Init+0x48>)
 8019796:	480a      	ldr	r0, [pc, #40]	; (80197c0 <MX_USB_HOST_Init+0x44>)
 8019798:	f7f4 fedc 	bl	800e554 <USBH_RegisterClass>
 801979c:	4603      	mov	r3, r0
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d001      	beq.n	80197a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80197a2:	f7e8 f95d 	bl	8001a60 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80197a6:	4806      	ldr	r0, [pc, #24]	; (80197c0 <MX_USB_HOST_Init+0x44>)
 80197a8:	f7f4 ff60 	bl	800e66c <USBH_Start>
 80197ac:	4603      	mov	r3, r0
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d001      	beq.n	80197b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80197b2:	f7e8 f955 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80197b6:	bf00      	nop
 80197b8:	bd80      	pop	{r7, pc}
 80197ba:	bf00      	nop
 80197bc:	080197c9 	.word	0x080197c9
 80197c0:	24006ae4 	.word	0x24006ae4
 80197c4:	24000010 	.word	0x24000010

080197c8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b082      	sub	sp, #8
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	6078      	str	r0, [r7, #4]
 80197d0:	460b      	mov	r3, r1
 80197d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80197d4:	78fb      	ldrb	r3, [r7, #3]
 80197d6:	3b01      	subs	r3, #1
 80197d8:	2b04      	cmp	r3, #4
 80197da:	d822      	bhi.n	8019822 <USBH_UserProcess+0x5a>
 80197dc:	a201      	add	r2, pc, #4	; (adr r2, 80197e4 <USBH_UserProcess+0x1c>)
 80197de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197e2:	bf00      	nop
 80197e4:	08019823 	.word	0x08019823
 80197e8:	08019807 	.word	0x08019807
 80197ec:	08019823 	.word	0x08019823
 80197f0:	08019815 	.word	0x08019815
 80197f4:	080197f9 	.word	0x080197f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80197f8:	4b0c      	ldr	r3, [pc, #48]	; (801982c <USBH_UserProcess+0x64>)
 80197fa:	2203      	movs	r2, #3
 80197fc:	701a      	strb	r2, [r3, #0]
  printf("USB is disconnected!\r\n");
 80197fe:	480c      	ldr	r0, [pc, #48]	; (8019830 <USBH_UserProcess+0x68>)
 8019800:	f000 fcd6 	bl	801a1b0 <puts>
  break;
 8019804:	e00e      	b.n	8019824 <USBH_UserProcess+0x5c>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8019806:	4b09      	ldr	r3, [pc, #36]	; (801982c <USBH_UserProcess+0x64>)
 8019808:	2202      	movs	r2, #2
 801980a:	701a      	strb	r2, [r3, #0]
  printf("USB is ready to use!\r\n");
 801980c:	4809      	ldr	r0, [pc, #36]	; (8019834 <USBH_UserProcess+0x6c>)
 801980e:	f000 fccf 	bl	801a1b0 <puts>
  break;
 8019812:	e007      	b.n	8019824 <USBH_UserProcess+0x5c>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8019814:	4b05      	ldr	r3, [pc, #20]	; (801982c <USBH_UserProcess+0x64>)
 8019816:	2201      	movs	r2, #1
 8019818:	701a      	strb	r2, [r3, #0]
  printf("USB is connected!\r\n");
 801981a:	4807      	ldr	r0, [pc, #28]	; (8019838 <USBH_UserProcess+0x70>)
 801981c:	f000 fcc8 	bl	801a1b0 <puts>
  break;
 8019820:	e000      	b.n	8019824 <USBH_UserProcess+0x5c>

  default:
  break;
 8019822:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8019824:	bf00      	nop
 8019826:	3708      	adds	r7, #8
 8019828:	46bd      	mov	sp, r7
 801982a:	bd80      	pop	{r7, pc}
 801982c:	24006ec8 	.word	0x24006ec8
 8019830:	0801b83c 	.word	0x0801b83c
 8019834:	0801b854 	.word	0x0801b854
 8019838:	0801b86c 	.word	0x0801b86c

0801983c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b0b6      	sub	sp, #216	; 0xd8
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019844:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8019848:	2200      	movs	r2, #0
 801984a:	601a      	str	r2, [r3, #0]
 801984c:	605a      	str	r2, [r3, #4]
 801984e:	609a      	str	r2, [r3, #8]
 8019850:	60da      	str	r2, [r3, #12]
 8019852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8019854:	f107 0310 	add.w	r3, r7, #16
 8019858:	22b4      	movs	r2, #180	; 0xb4
 801985a:	2100      	movs	r1, #0
 801985c:	4618      	mov	r0, r3
 801985e:	f000 fb39 	bl	8019ed4 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	4a33      	ldr	r2, [pc, #204]	; (8019934 <HAL_HCD_MspInit+0xf8>)
 8019868:	4293      	cmp	r3, r2
 801986a:	d15e      	bne.n	801992a <HAL_HCD_MspInit+0xee>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801986c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019870:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8019872:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8019876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801987a:	f107 0310 	add.w	r3, r7, #16
 801987e:	4618      	mov	r0, r3
 8019880:	f7ee f8fe 	bl	8007a80 <HAL_RCCEx_PeriphCLKConfig>
 8019884:	4603      	mov	r3, r0
 8019886:	2b00      	cmp	r3, #0
 8019888:	d001      	beq.n	801988e <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 801988a:	f7e8 f8e9 	bl	8001a60 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801988e:	f7ed f96b 	bl	8006b68 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019892:	4b29      	ldr	r3, [pc, #164]	; (8019938 <HAL_HCD_MspInit+0xfc>)
 8019894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8019898:	4a27      	ldr	r2, [pc, #156]	; (8019938 <HAL_HCD_MspInit+0xfc>)
 801989a:	f043 0301 	orr.w	r3, r3, #1
 801989e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80198a2:	4b25      	ldr	r3, [pc, #148]	; (8019938 <HAL_HCD_MspInit+0xfc>)
 80198a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80198a8:	f003 0301 	and.w	r3, r3, #1
 80198ac:	60fb      	str	r3, [r7, #12]
 80198ae:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80198b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80198b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80198b8:	2300      	movs	r3, #0
 80198ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80198be:	2300      	movs	r3, #0
 80198c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80198c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80198c8:	4619      	mov	r1, r3
 80198ca:	481c      	ldr	r0, [pc, #112]	; (801993c <HAL_HCD_MspInit+0x100>)
 80198cc:	f7eb fb2c 	bl	8004f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80198d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80198d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80198d8:	2302      	movs	r3, #2
 80198da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80198de:	2300      	movs	r3, #0
 80198e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80198e4:	2300      	movs	r3, #0
 80198e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80198ea:	230a      	movs	r3, #10
 80198ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80198f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80198f4:	4619      	mov	r1, r3
 80198f6:	4811      	ldr	r0, [pc, #68]	; (801993c <HAL_HCD_MspInit+0x100>)
 80198f8:	f7eb fb16 	bl	8004f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80198fc:	4b0e      	ldr	r3, [pc, #56]	; (8019938 <HAL_HCD_MspInit+0xfc>)
 80198fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8019902:	4a0d      	ldr	r2, [pc, #52]	; (8019938 <HAL_HCD_MspInit+0xfc>)
 8019904:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8019908:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801990c:	4b0a      	ldr	r3, [pc, #40]	; (8019938 <HAL_HCD_MspInit+0xfc>)
 801990e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8019912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019916:	60bb      	str	r3, [r7, #8]
 8019918:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 801991a:	2200      	movs	r2, #0
 801991c:	2105      	movs	r1, #5
 801991e:	204d      	movs	r0, #77	; 0x4d
 8019920:	f7e8 fca0 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8019924:	204d      	movs	r0, #77	; 0x4d
 8019926:	f7e8 fcb7 	bl	8002298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801992a:	bf00      	nop
 801992c:	37d8      	adds	r7, #216	; 0xd8
 801992e:	46bd      	mov	sp, r7
 8019930:	bd80      	pop	{r7, pc}
 8019932:	bf00      	nop
 8019934:	40040000 	.word	0x40040000
 8019938:	58024400 	.word	0x58024400
 801993c:	58020000 	.word	0x58020000

08019940 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8019940:	b580      	push	{r7, lr}
 8019942:	b082      	sub	sp, #8
 8019944:	af00      	add	r7, sp, #0
 8019946:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801994e:	4618      	mov	r0, r3
 8019950:	f7f5 fb43 	bl	800efda <USBH_LL_IncTimer>
}
 8019954:	bf00      	nop
 8019956:	3708      	adds	r7, #8
 8019958:	46bd      	mov	sp, r7
 801995a:	bd80      	pop	{r7, pc}

0801995c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801995c:	b580      	push	{r7, lr}
 801995e:	b082      	sub	sp, #8
 8019960:	af00      	add	r7, sp, #0
 8019962:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801996a:	4618      	mov	r0, r3
 801996c:	f7f5 fb87 	bl	800f07e <USBH_LL_Connect>
}
 8019970:	bf00      	nop
 8019972:	3708      	adds	r7, #8
 8019974:	46bd      	mov	sp, r7
 8019976:	bd80      	pop	{r7, pc}

08019978 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019978:	b580      	push	{r7, lr}
 801997a:	b082      	sub	sp, #8
 801997c:	af00      	add	r7, sp, #0
 801997e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019986:	4618      	mov	r0, r3
 8019988:	f7f5 fb9c 	bl	800f0c4 <USBH_LL_Disconnect>
}
 801998c:	bf00      	nop
 801998e:	3708      	adds	r7, #8
 8019990:	46bd      	mov	sp, r7
 8019992:	bd80      	pop	{r7, pc}

08019994 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8019994:	b580      	push	{r7, lr}
 8019996:	b082      	sub	sp, #8
 8019998:	af00      	add	r7, sp, #0
 801999a:	6078      	str	r0, [r7, #4]
 801999c:	460b      	mov	r3, r1
 801999e:	70fb      	strb	r3, [r7, #3]
 80199a0:	4613      	mov	r3, r2
 80199a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80199aa:	4618      	mov	r0, r3
 80199ac:	f7f5 fbd1 	bl	800f152 <USBH_LL_NotifyURBChange>
#endif
}
 80199b0:	bf00      	nop
 80199b2:	3708      	adds	r7, #8
 80199b4:	46bd      	mov	sp, r7
 80199b6:	bd80      	pop	{r7, pc}

080199b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b082      	sub	sp, #8
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80199c6:	4618      	mov	r0, r3
 80199c8:	f7f5 fb31 	bl	800f02e <USBH_LL_PortEnabled>
}
 80199cc:	bf00      	nop
 80199ce:	3708      	adds	r7, #8
 80199d0:	46bd      	mov	sp, r7
 80199d2:	bd80      	pop	{r7, pc}

080199d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b082      	sub	sp, #8
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80199e2:	4618      	mov	r0, r3
 80199e4:	f7f5 fb3d 	bl	800f062 <USBH_LL_PortDisabled>
}
 80199e8:	bf00      	nop
 80199ea:	3708      	adds	r7, #8
 80199ec:	46bd      	mov	sp, r7
 80199ee:	bd80      	pop	{r7, pc}

080199f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b082      	sub	sp, #8
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d12f      	bne.n	8019a62 <USBH_LL_Init+0x72>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8019a02:	4a1a      	ldr	r2, [pc, #104]	; (8019a6c <USBH_LL_Init+0x7c>)
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	4a17      	ldr	r2, [pc, #92]	; (8019a6c <USBH_LL_Init+0x7c>)
 8019a0e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8019a12:	4b16      	ldr	r3, [pc, #88]	; (8019a6c <USBH_LL_Init+0x7c>)
 8019a14:	4a16      	ldr	r2, [pc, #88]	; (8019a70 <USBH_LL_Init+0x80>)
 8019a16:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8019a18:	4b14      	ldr	r3, [pc, #80]	; (8019a6c <USBH_LL_Init+0x7c>)
 8019a1a:	2210      	movs	r2, #16
 8019a1c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8019a1e:	4b13      	ldr	r3, [pc, #76]	; (8019a6c <USBH_LL_Init+0x7c>)
 8019a20:	2201      	movs	r2, #1
 8019a22:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8019a24:	4b11      	ldr	r3, [pc, #68]	; (8019a6c <USBH_LL_Init+0x7c>)
 8019a26:	2200      	movs	r2, #0
 8019a28:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8019a2a:	4b10      	ldr	r3, [pc, #64]	; (8019a6c <USBH_LL_Init+0x7c>)
 8019a2c:	2202      	movs	r2, #2
 8019a2e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8019a30:	4b0e      	ldr	r3, [pc, #56]	; (8019a6c <USBH_LL_Init+0x7c>)
 8019a32:	2200      	movs	r2, #0
 8019a34:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8019a36:	4b0d      	ldr	r3, [pc, #52]	; (8019a6c <USBH_LL_Init+0x7c>)
 8019a38:	2200      	movs	r2, #0
 8019a3a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8019a3c:	4b0b      	ldr	r3, [pc, #44]	; (8019a6c <USBH_LL_Init+0x7c>)
 8019a3e:	2200      	movs	r2, #0
 8019a40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8019a42:	480a      	ldr	r0, [pc, #40]	; (8019a6c <USBH_LL_Init+0x7c>)
 8019a44:	f7eb fc4b 	bl	80052de <HAL_HCD_Init>
 8019a48:	4603      	mov	r3, r0
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d001      	beq.n	8019a52 <USBH_LL_Init+0x62>
  {
    Error_Handler( );
 8019a4e:	f7e8 f807 	bl	8001a60 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8019a52:	4806      	ldr	r0, [pc, #24]	; (8019a6c <USBH_LL_Init+0x7c>)
 8019a54:	f7ec f82f 	bl	8005ab6 <HAL_HCD_GetCurrentFrame>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	4619      	mov	r1, r3
 8019a5c:	6878      	ldr	r0, [r7, #4]
 8019a5e:	f7f5 faad 	bl	800efbc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8019a62:	2300      	movs	r3, #0
}
 8019a64:	4618      	mov	r0, r3
 8019a66:	3708      	adds	r7, #8
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	bd80      	pop	{r7, pc}
 8019a6c:	24006ecc 	.word	0x24006ecc
 8019a70:	40040000 	.word	0x40040000

08019a74 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8019a74:	b580      	push	{r7, lr}
 8019a76:	b084      	sub	sp, #16
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019a80:	2300      	movs	r3, #0
 8019a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	f7eb ff9d 	bl	80059ca <HAL_HCD_Start>
 8019a90:	4603      	mov	r3, r0
 8019a92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019a94:	7bfb      	ldrb	r3, [r7, #15]
 8019a96:	4618      	mov	r0, r3
 8019a98:	f000 f98c 	bl	8019db4 <USBH_Get_USB_Status>
 8019a9c:	4603      	mov	r3, r0
 8019a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	3710      	adds	r7, #16
 8019aa6:	46bd      	mov	sp, r7
 8019aa8:	bd80      	pop	{r7, pc}

08019aaa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8019aaa:	b580      	push	{r7, lr}
 8019aac:	b084      	sub	sp, #16
 8019aae:	af00      	add	r7, sp, #0
 8019ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ab2:	2300      	movs	r3, #0
 8019ab4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019ab6:	2300      	movs	r3, #0
 8019ab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	f7eb ffa5 	bl	8005a10 <HAL_HCD_Stop>
 8019ac6:	4603      	mov	r3, r0
 8019ac8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019aca:	7bfb      	ldrb	r3, [r7, #15]
 8019acc:	4618      	mov	r0, r3
 8019ace:	f000 f971 	bl	8019db4 <USBH_Get_USB_Status>
 8019ad2:	4603      	mov	r3, r0
 8019ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ad8:	4618      	mov	r0, r3
 8019ada:	3710      	adds	r7, #16
 8019adc:	46bd      	mov	sp, r7
 8019ade:	bd80      	pop	{r7, pc}

08019ae0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	b084      	sub	sp, #16
 8019ae4:	af00      	add	r7, sp, #0
 8019ae6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019ae8:	2301      	movs	r3, #1
 8019aea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019af2:	4618      	mov	r0, r3
 8019af4:	f7eb ffed 	bl	8005ad2 <HAL_HCD_GetCurrentSpeed>
 8019af8:	4603      	mov	r3, r0
 8019afa:	2b02      	cmp	r3, #2
 8019afc:	d00c      	beq.n	8019b18 <USBH_LL_GetSpeed+0x38>
 8019afe:	2b02      	cmp	r3, #2
 8019b00:	d80d      	bhi.n	8019b1e <USBH_LL_GetSpeed+0x3e>
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d002      	beq.n	8019b0c <USBH_LL_GetSpeed+0x2c>
 8019b06:	2b01      	cmp	r3, #1
 8019b08:	d003      	beq.n	8019b12 <USBH_LL_GetSpeed+0x32>
 8019b0a:	e008      	b.n	8019b1e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8019b10:	e008      	b.n	8019b24 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8019b12:	2301      	movs	r3, #1
 8019b14:	73fb      	strb	r3, [r7, #15]
    break;
 8019b16:	e005      	b.n	8019b24 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8019b18:	2302      	movs	r3, #2
 8019b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8019b1c:	e002      	b.n	8019b24 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8019b1e:	2301      	movs	r3, #1
 8019b20:	73fb      	strb	r3, [r7, #15]
    break;
 8019b22:	bf00      	nop
  }
  return  speed;
 8019b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b26:	4618      	mov	r0, r3
 8019b28:	3710      	adds	r7, #16
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	bd80      	pop	{r7, pc}

08019b2e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8019b2e:	b580      	push	{r7, lr}
 8019b30:	b084      	sub	sp, #16
 8019b32:	af00      	add	r7, sp, #0
 8019b34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b36:	2300      	movs	r3, #0
 8019b38:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019b44:	4618      	mov	r0, r3
 8019b46:	f7eb ff80 	bl	8005a4a <HAL_HCD_ResetPort>
 8019b4a:	4603      	mov	r3, r0
 8019b4c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019b4e:	7bfb      	ldrb	r3, [r7, #15]
 8019b50:	4618      	mov	r0, r3
 8019b52:	f000 f92f 	bl	8019db4 <USBH_Get_USB_Status>
 8019b56:	4603      	mov	r3, r0
 8019b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	3710      	adds	r7, #16
 8019b60:	46bd      	mov	sp, r7
 8019b62:	bd80      	pop	{r7, pc}

08019b64 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b082      	sub	sp, #8
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
 8019b6c:	460b      	mov	r3, r1
 8019b6e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019b76:	78fa      	ldrb	r2, [r7, #3]
 8019b78:	4611      	mov	r1, r2
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	f7eb ff87 	bl	8005a8e <HAL_HCD_HC_GetXferCount>
 8019b80:	4603      	mov	r3, r0
}
 8019b82:	4618      	mov	r0, r3
 8019b84:	3708      	adds	r7, #8
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}

08019b8a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8019b8a:	b590      	push	{r4, r7, lr}
 8019b8c:	b089      	sub	sp, #36	; 0x24
 8019b8e:	af04      	add	r7, sp, #16
 8019b90:	6078      	str	r0, [r7, #4]
 8019b92:	4608      	mov	r0, r1
 8019b94:	4611      	mov	r1, r2
 8019b96:	461a      	mov	r2, r3
 8019b98:	4603      	mov	r3, r0
 8019b9a:	70fb      	strb	r3, [r7, #3]
 8019b9c:	460b      	mov	r3, r1
 8019b9e:	70bb      	strb	r3, [r7, #2]
 8019ba0:	4613      	mov	r3, r2
 8019ba2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019ba8:	2300      	movs	r3, #0
 8019baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8019bb2:	787c      	ldrb	r4, [r7, #1]
 8019bb4:	78ba      	ldrb	r2, [r7, #2]
 8019bb6:	78f9      	ldrb	r1, [r7, #3]
 8019bb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019bba:	9302      	str	r3, [sp, #8]
 8019bbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019bc0:	9301      	str	r3, [sp, #4]
 8019bc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019bc6:	9300      	str	r3, [sp, #0]
 8019bc8:	4623      	mov	r3, r4
 8019bca:	f7eb fbea 	bl	80053a2 <HAL_HCD_HC_Init>
 8019bce:	4603      	mov	r3, r0
 8019bd0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019bd2:	7bfb      	ldrb	r3, [r7, #15]
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	f000 f8ed 	bl	8019db4 <USBH_Get_USB_Status>
 8019bda:	4603      	mov	r3, r0
 8019bdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019bde:	7bbb      	ldrb	r3, [r7, #14]
}
 8019be0:	4618      	mov	r0, r3
 8019be2:	3714      	adds	r7, #20
 8019be4:	46bd      	mov	sp, r7
 8019be6:	bd90      	pop	{r4, r7, pc}

08019be8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019be8:	b580      	push	{r7, lr}
 8019bea:	b084      	sub	sp, #16
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
 8019bf0:	460b      	mov	r3, r1
 8019bf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019c02:	78fa      	ldrb	r2, [r7, #3]
 8019c04:	4611      	mov	r1, r2
 8019c06:	4618      	mov	r0, r3
 8019c08:	f7eb fc5a 	bl	80054c0 <HAL_HCD_HC_Halt>
 8019c0c:	4603      	mov	r3, r0
 8019c0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019c10:	7bfb      	ldrb	r3, [r7, #15]
 8019c12:	4618      	mov	r0, r3
 8019c14:	f000 f8ce 	bl	8019db4 <USBH_Get_USB_Status>
 8019c18:	4603      	mov	r3, r0
 8019c1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c1e:	4618      	mov	r0, r3
 8019c20:	3710      	adds	r7, #16
 8019c22:	46bd      	mov	sp, r7
 8019c24:	bd80      	pop	{r7, pc}

08019c26 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019c26:	b590      	push	{r4, r7, lr}
 8019c28:	b089      	sub	sp, #36	; 0x24
 8019c2a:	af04      	add	r7, sp, #16
 8019c2c:	6078      	str	r0, [r7, #4]
 8019c2e:	4608      	mov	r0, r1
 8019c30:	4611      	mov	r1, r2
 8019c32:	461a      	mov	r2, r3
 8019c34:	4603      	mov	r3, r0
 8019c36:	70fb      	strb	r3, [r7, #3]
 8019c38:	460b      	mov	r3, r1
 8019c3a:	70bb      	strb	r3, [r7, #2]
 8019c3c:	4613      	mov	r3, r2
 8019c3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c40:	2300      	movs	r3, #0
 8019c42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019c44:	2300      	movs	r3, #0
 8019c46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8019c4e:	787c      	ldrb	r4, [r7, #1]
 8019c50:	78ba      	ldrb	r2, [r7, #2]
 8019c52:	78f9      	ldrb	r1, [r7, #3]
 8019c54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019c58:	9303      	str	r3, [sp, #12]
 8019c5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019c5c:	9302      	str	r3, [sp, #8]
 8019c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c60:	9301      	str	r3, [sp, #4]
 8019c62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019c66:	9300      	str	r3, [sp, #0]
 8019c68:	4623      	mov	r3, r4
 8019c6a:	f7eb fc4d 	bl	8005508 <HAL_HCD_HC_SubmitRequest>
 8019c6e:	4603      	mov	r3, r0
 8019c70:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8019c72:	7bfb      	ldrb	r3, [r7, #15]
 8019c74:	4618      	mov	r0, r3
 8019c76:	f000 f89d 	bl	8019db4 <USBH_Get_USB_Status>
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019c7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c80:	4618      	mov	r0, r3
 8019c82:	3714      	adds	r7, #20
 8019c84:	46bd      	mov	sp, r7
 8019c86:	bd90      	pop	{r4, r7, pc}

08019c88 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b082      	sub	sp, #8
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	6078      	str	r0, [r7, #4]
 8019c90:	460b      	mov	r3, r1
 8019c92:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019c9a:	78fa      	ldrb	r2, [r7, #3]
 8019c9c:	4611      	mov	r1, r2
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	f7eb fee1 	bl	8005a66 <HAL_HCD_HC_GetURBState>
 8019ca4:	4603      	mov	r3, r0
}
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	3708      	adds	r7, #8
 8019caa:	46bd      	mov	sp, r7
 8019cac:	bd80      	pop	{r7, pc}

08019cae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8019cae:	b580      	push	{r7, lr}
 8019cb0:	b082      	sub	sp, #8
 8019cb2:	af00      	add	r7, sp, #0
 8019cb4:	6078      	str	r0, [r7, #4]
 8019cb6:	460b      	mov	r3, r1
 8019cb8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d103      	bne.n	8019ccc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8019cc4:	78fb      	ldrb	r3, [r7, #3]
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	f000 f8a0 	bl	8019e0c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8019ccc:	20c8      	movs	r0, #200	; 0xc8
 8019cce:	f7e8 f9ed 	bl	80020ac <HAL_Delay>
  return USBH_OK;
 8019cd2:	2300      	movs	r3, #0
}
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	3708      	adds	r7, #8
 8019cd8:	46bd      	mov	sp, r7
 8019cda:	bd80      	pop	{r7, pc}

08019cdc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8019cdc:	b480      	push	{r7}
 8019cde:	b085      	sub	sp, #20
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	6078      	str	r0, [r7, #4]
 8019ce4:	460b      	mov	r3, r1
 8019ce6:	70fb      	strb	r3, [r7, #3]
 8019ce8:	4613      	mov	r3, r2
 8019cea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019cf2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019cf4:	78fb      	ldrb	r3, [r7, #3]
 8019cf6:	68fa      	ldr	r2, [r7, #12]
 8019cf8:	212c      	movs	r1, #44	; 0x2c
 8019cfa:	fb01 f303 	mul.w	r3, r1, r3
 8019cfe:	4413      	add	r3, r2
 8019d00:	333b      	adds	r3, #59	; 0x3b
 8019d02:	781b      	ldrb	r3, [r3, #0]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d009      	beq.n	8019d1c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019d08:	78fb      	ldrb	r3, [r7, #3]
 8019d0a:	68fa      	ldr	r2, [r7, #12]
 8019d0c:	212c      	movs	r1, #44	; 0x2c
 8019d0e:	fb01 f303 	mul.w	r3, r1, r3
 8019d12:	4413      	add	r3, r2
 8019d14:	3354      	adds	r3, #84	; 0x54
 8019d16:	78ba      	ldrb	r2, [r7, #2]
 8019d18:	701a      	strb	r2, [r3, #0]
 8019d1a:	e008      	b.n	8019d2e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8019d1c:	78fb      	ldrb	r3, [r7, #3]
 8019d1e:	68fa      	ldr	r2, [r7, #12]
 8019d20:	212c      	movs	r1, #44	; 0x2c
 8019d22:	fb01 f303 	mul.w	r3, r1, r3
 8019d26:	4413      	add	r3, r2
 8019d28:	3355      	adds	r3, #85	; 0x55
 8019d2a:	78ba      	ldrb	r2, [r7, #2]
 8019d2c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8019d2e:	2300      	movs	r3, #0
}
 8019d30:	4618      	mov	r0, r3
 8019d32:	3714      	adds	r7, #20
 8019d34:	46bd      	mov	sp, r7
 8019d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d3a:	4770      	bx	lr

08019d3c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019d3c:	b480      	push	{r7}
 8019d3e:	b085      	sub	sp, #20
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	6078      	str	r0, [r7, #4]
 8019d44:	460b      	mov	r3, r1
 8019d46:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8019d48:	2300      	movs	r3, #0
 8019d4a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019d52:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8019d54:	78fb      	ldrb	r3, [r7, #3]
 8019d56:	68ba      	ldr	r2, [r7, #8]
 8019d58:	212c      	movs	r1, #44	; 0x2c
 8019d5a:	fb01 f303 	mul.w	r3, r1, r3
 8019d5e:	4413      	add	r3, r2
 8019d60:	333b      	adds	r3, #59	; 0x3b
 8019d62:	781b      	ldrb	r3, [r3, #0]
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d009      	beq.n	8019d7c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8019d68:	78fb      	ldrb	r3, [r7, #3]
 8019d6a:	68ba      	ldr	r2, [r7, #8]
 8019d6c:	212c      	movs	r1, #44	; 0x2c
 8019d6e:	fb01 f303 	mul.w	r3, r1, r3
 8019d72:	4413      	add	r3, r2
 8019d74:	3354      	adds	r3, #84	; 0x54
 8019d76:	781b      	ldrb	r3, [r3, #0]
 8019d78:	73fb      	strb	r3, [r7, #15]
 8019d7a:	e008      	b.n	8019d8e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8019d7c:	78fb      	ldrb	r3, [r7, #3]
 8019d7e:	68ba      	ldr	r2, [r7, #8]
 8019d80:	212c      	movs	r1, #44	; 0x2c
 8019d82:	fb01 f303 	mul.w	r3, r1, r3
 8019d86:	4413      	add	r3, r2
 8019d88:	3355      	adds	r3, #85	; 0x55
 8019d8a:	781b      	ldrb	r3, [r3, #0]
 8019d8c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8019d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d90:	4618      	mov	r0, r3
 8019d92:	3714      	adds	r7, #20
 8019d94:	46bd      	mov	sp, r7
 8019d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d9a:	4770      	bx	lr

08019d9c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b082      	sub	sp, #8
 8019da0:	af00      	add	r7, sp, #0
 8019da2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8019da4:	6878      	ldr	r0, [r7, #4]
 8019da6:	f7e8 f981 	bl	80020ac <HAL_Delay>
}
 8019daa:	bf00      	nop
 8019dac:	3708      	adds	r7, #8
 8019dae:	46bd      	mov	sp, r7
 8019db0:	bd80      	pop	{r7, pc}
	...

08019db4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019db4:	b480      	push	{r7}
 8019db6:	b085      	sub	sp, #20
 8019db8:	af00      	add	r7, sp, #0
 8019dba:	4603      	mov	r3, r0
 8019dbc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019dbe:	2300      	movs	r3, #0
 8019dc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019dc2:	79fb      	ldrb	r3, [r7, #7]
 8019dc4:	2b03      	cmp	r3, #3
 8019dc6:	d817      	bhi.n	8019df8 <USBH_Get_USB_Status+0x44>
 8019dc8:	a201      	add	r2, pc, #4	; (adr r2, 8019dd0 <USBH_Get_USB_Status+0x1c>)
 8019dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019dce:	bf00      	nop
 8019dd0:	08019de1 	.word	0x08019de1
 8019dd4:	08019de7 	.word	0x08019de7
 8019dd8:	08019ded 	.word	0x08019ded
 8019ddc:	08019df3 	.word	0x08019df3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019de0:	2300      	movs	r3, #0
 8019de2:	73fb      	strb	r3, [r7, #15]
    break;
 8019de4:	e00b      	b.n	8019dfe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8019de6:	2302      	movs	r3, #2
 8019de8:	73fb      	strb	r3, [r7, #15]
    break;
 8019dea:	e008      	b.n	8019dfe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8019dec:	2301      	movs	r3, #1
 8019dee:	73fb      	strb	r3, [r7, #15]
    break;
 8019df0:	e005      	b.n	8019dfe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019df2:	2302      	movs	r3, #2
 8019df4:	73fb      	strb	r3, [r7, #15]
    break;
 8019df6:	e002      	b.n	8019dfe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019df8:	2302      	movs	r3, #2
 8019dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8019dfc:	bf00      	nop
  }
  return usb_status;
 8019dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e00:	4618      	mov	r0, r3
 8019e02:	3714      	adds	r7, #20
 8019e04:	46bd      	mov	sp, r7
 8019e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0a:	4770      	bx	lr

08019e0c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b084      	sub	sp, #16
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	4603      	mov	r3, r0
 8019e14:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8019e16:	79fb      	ldrb	r3, [r7, #7]
 8019e18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8019e1a:	79fb      	ldrb	r3, [r7, #7]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d102      	bne.n	8019e26 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8019e20:	2301      	movs	r3, #1
 8019e22:	73fb      	strb	r3, [r7, #15]
 8019e24:	e001      	b.n	8019e2a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8019e26:	2300      	movs	r3, #0
 8019e28:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,(GPIO_PinState)data);
 8019e2a:	7bfb      	ldrb	r3, [r7, #15]
 8019e2c:	461a      	mov	r2, r3
 8019e2e:	2101      	movs	r1, #1
 8019e30:	4803      	ldr	r0, [pc, #12]	; (8019e40 <MX_DriverVbusHS+0x34>)
 8019e32:	f7eb fa21 	bl	8005278 <HAL_GPIO_WritePin>
}
 8019e36:	bf00      	nop
 8019e38:	3710      	adds	r7, #16
 8019e3a:	46bd      	mov	sp, r7
 8019e3c:	bd80      	pop	{r7, pc}
 8019e3e:	bf00      	nop
 8019e40:	58021000 	.word	0x58021000

08019e44 <__errno>:
 8019e44:	4b01      	ldr	r3, [pc, #4]	; (8019e4c <__errno+0x8>)
 8019e46:	6818      	ldr	r0, [r3, #0]
 8019e48:	4770      	bx	lr
 8019e4a:	bf00      	nop
 8019e4c:	24000034 	.word	0x24000034

08019e50 <__libc_init_array>:
 8019e50:	b570      	push	{r4, r5, r6, lr}
 8019e52:	4d0d      	ldr	r5, [pc, #52]	; (8019e88 <__libc_init_array+0x38>)
 8019e54:	4c0d      	ldr	r4, [pc, #52]	; (8019e8c <__libc_init_array+0x3c>)
 8019e56:	1b64      	subs	r4, r4, r5
 8019e58:	10a4      	asrs	r4, r4, #2
 8019e5a:	2600      	movs	r6, #0
 8019e5c:	42a6      	cmp	r6, r4
 8019e5e:	d109      	bne.n	8019e74 <__libc_init_array+0x24>
 8019e60:	4d0b      	ldr	r5, [pc, #44]	; (8019e90 <__libc_init_array+0x40>)
 8019e62:	4c0c      	ldr	r4, [pc, #48]	; (8019e94 <__libc_init_array+0x44>)
 8019e64:	f001 fa48 	bl	801b2f8 <_init>
 8019e68:	1b64      	subs	r4, r4, r5
 8019e6a:	10a4      	asrs	r4, r4, #2
 8019e6c:	2600      	movs	r6, #0
 8019e6e:	42a6      	cmp	r6, r4
 8019e70:	d105      	bne.n	8019e7e <__libc_init_array+0x2e>
 8019e72:	bd70      	pop	{r4, r5, r6, pc}
 8019e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8019e78:	4798      	blx	r3
 8019e7a:	3601      	adds	r6, #1
 8019e7c:	e7ee      	b.n	8019e5c <__libc_init_array+0xc>
 8019e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019e82:	4798      	blx	r3
 8019e84:	3601      	adds	r6, #1
 8019e86:	e7f2      	b.n	8019e6e <__libc_init_array+0x1e>
 8019e88:	0801bdb4 	.word	0x0801bdb4
 8019e8c:	0801bdb4 	.word	0x0801bdb4
 8019e90:	0801bdb4 	.word	0x0801bdb4
 8019e94:	0801bdb8 	.word	0x0801bdb8

08019e98 <malloc>:
 8019e98:	4b02      	ldr	r3, [pc, #8]	; (8019ea4 <malloc+0xc>)
 8019e9a:	4601      	mov	r1, r0
 8019e9c:	6818      	ldr	r0, [r3, #0]
 8019e9e:	f000 b88d 	b.w	8019fbc <_malloc_r>
 8019ea2:	bf00      	nop
 8019ea4:	24000034 	.word	0x24000034

08019ea8 <free>:
 8019ea8:	4b02      	ldr	r3, [pc, #8]	; (8019eb4 <free+0xc>)
 8019eaa:	4601      	mov	r1, r0
 8019eac:	6818      	ldr	r0, [r3, #0]
 8019eae:	f000 b819 	b.w	8019ee4 <_free_r>
 8019eb2:	bf00      	nop
 8019eb4:	24000034 	.word	0x24000034

08019eb8 <memcpy>:
 8019eb8:	440a      	add	r2, r1
 8019eba:	4291      	cmp	r1, r2
 8019ebc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019ec0:	d100      	bne.n	8019ec4 <memcpy+0xc>
 8019ec2:	4770      	bx	lr
 8019ec4:	b510      	push	{r4, lr}
 8019ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019ece:	4291      	cmp	r1, r2
 8019ed0:	d1f9      	bne.n	8019ec6 <memcpy+0xe>
 8019ed2:	bd10      	pop	{r4, pc}

08019ed4 <memset>:
 8019ed4:	4402      	add	r2, r0
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	4293      	cmp	r3, r2
 8019eda:	d100      	bne.n	8019ede <memset+0xa>
 8019edc:	4770      	bx	lr
 8019ede:	f803 1b01 	strb.w	r1, [r3], #1
 8019ee2:	e7f9      	b.n	8019ed8 <memset+0x4>

08019ee4 <_free_r>:
 8019ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ee6:	2900      	cmp	r1, #0
 8019ee8:	d044      	beq.n	8019f74 <_free_r+0x90>
 8019eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019eee:	9001      	str	r0, [sp, #4]
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	f1a1 0404 	sub.w	r4, r1, #4
 8019ef6:	bfb8      	it	lt
 8019ef8:	18e4      	addlt	r4, r4, r3
 8019efa:	f000 fca9 	bl	801a850 <__malloc_lock>
 8019efe:	4a1e      	ldr	r2, [pc, #120]	; (8019f78 <_free_r+0x94>)
 8019f00:	9801      	ldr	r0, [sp, #4]
 8019f02:	6813      	ldr	r3, [r2, #0]
 8019f04:	b933      	cbnz	r3, 8019f14 <_free_r+0x30>
 8019f06:	6063      	str	r3, [r4, #4]
 8019f08:	6014      	str	r4, [r2, #0]
 8019f0a:	b003      	add	sp, #12
 8019f0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f10:	f000 bca4 	b.w	801a85c <__malloc_unlock>
 8019f14:	42a3      	cmp	r3, r4
 8019f16:	d908      	bls.n	8019f2a <_free_r+0x46>
 8019f18:	6825      	ldr	r5, [r4, #0]
 8019f1a:	1961      	adds	r1, r4, r5
 8019f1c:	428b      	cmp	r3, r1
 8019f1e:	bf01      	itttt	eq
 8019f20:	6819      	ldreq	r1, [r3, #0]
 8019f22:	685b      	ldreq	r3, [r3, #4]
 8019f24:	1949      	addeq	r1, r1, r5
 8019f26:	6021      	streq	r1, [r4, #0]
 8019f28:	e7ed      	b.n	8019f06 <_free_r+0x22>
 8019f2a:	461a      	mov	r2, r3
 8019f2c:	685b      	ldr	r3, [r3, #4]
 8019f2e:	b10b      	cbz	r3, 8019f34 <_free_r+0x50>
 8019f30:	42a3      	cmp	r3, r4
 8019f32:	d9fa      	bls.n	8019f2a <_free_r+0x46>
 8019f34:	6811      	ldr	r1, [r2, #0]
 8019f36:	1855      	adds	r5, r2, r1
 8019f38:	42a5      	cmp	r5, r4
 8019f3a:	d10b      	bne.n	8019f54 <_free_r+0x70>
 8019f3c:	6824      	ldr	r4, [r4, #0]
 8019f3e:	4421      	add	r1, r4
 8019f40:	1854      	adds	r4, r2, r1
 8019f42:	42a3      	cmp	r3, r4
 8019f44:	6011      	str	r1, [r2, #0]
 8019f46:	d1e0      	bne.n	8019f0a <_free_r+0x26>
 8019f48:	681c      	ldr	r4, [r3, #0]
 8019f4a:	685b      	ldr	r3, [r3, #4]
 8019f4c:	6053      	str	r3, [r2, #4]
 8019f4e:	4421      	add	r1, r4
 8019f50:	6011      	str	r1, [r2, #0]
 8019f52:	e7da      	b.n	8019f0a <_free_r+0x26>
 8019f54:	d902      	bls.n	8019f5c <_free_r+0x78>
 8019f56:	230c      	movs	r3, #12
 8019f58:	6003      	str	r3, [r0, #0]
 8019f5a:	e7d6      	b.n	8019f0a <_free_r+0x26>
 8019f5c:	6825      	ldr	r5, [r4, #0]
 8019f5e:	1961      	adds	r1, r4, r5
 8019f60:	428b      	cmp	r3, r1
 8019f62:	bf04      	itt	eq
 8019f64:	6819      	ldreq	r1, [r3, #0]
 8019f66:	685b      	ldreq	r3, [r3, #4]
 8019f68:	6063      	str	r3, [r4, #4]
 8019f6a:	bf04      	itt	eq
 8019f6c:	1949      	addeq	r1, r1, r5
 8019f6e:	6021      	streq	r1, [r4, #0]
 8019f70:	6054      	str	r4, [r2, #4]
 8019f72:	e7ca      	b.n	8019f0a <_free_r+0x26>
 8019f74:	b003      	add	sp, #12
 8019f76:	bd30      	pop	{r4, r5, pc}
 8019f78:	240071d0 	.word	0x240071d0

08019f7c <sbrk_aligned>:
 8019f7c:	b570      	push	{r4, r5, r6, lr}
 8019f7e:	4e0e      	ldr	r6, [pc, #56]	; (8019fb8 <sbrk_aligned+0x3c>)
 8019f80:	460c      	mov	r4, r1
 8019f82:	6831      	ldr	r1, [r6, #0]
 8019f84:	4605      	mov	r5, r0
 8019f86:	b911      	cbnz	r1, 8019f8e <sbrk_aligned+0x12>
 8019f88:	f000 f91a 	bl	801a1c0 <_sbrk_r>
 8019f8c:	6030      	str	r0, [r6, #0]
 8019f8e:	4621      	mov	r1, r4
 8019f90:	4628      	mov	r0, r5
 8019f92:	f000 f915 	bl	801a1c0 <_sbrk_r>
 8019f96:	1c43      	adds	r3, r0, #1
 8019f98:	d00a      	beq.n	8019fb0 <sbrk_aligned+0x34>
 8019f9a:	1cc4      	adds	r4, r0, #3
 8019f9c:	f024 0403 	bic.w	r4, r4, #3
 8019fa0:	42a0      	cmp	r0, r4
 8019fa2:	d007      	beq.n	8019fb4 <sbrk_aligned+0x38>
 8019fa4:	1a21      	subs	r1, r4, r0
 8019fa6:	4628      	mov	r0, r5
 8019fa8:	f000 f90a 	bl	801a1c0 <_sbrk_r>
 8019fac:	3001      	adds	r0, #1
 8019fae:	d101      	bne.n	8019fb4 <sbrk_aligned+0x38>
 8019fb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019fb4:	4620      	mov	r0, r4
 8019fb6:	bd70      	pop	{r4, r5, r6, pc}
 8019fb8:	240071d4 	.word	0x240071d4

08019fbc <_malloc_r>:
 8019fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fc0:	1ccd      	adds	r5, r1, #3
 8019fc2:	f025 0503 	bic.w	r5, r5, #3
 8019fc6:	3508      	adds	r5, #8
 8019fc8:	2d0c      	cmp	r5, #12
 8019fca:	bf38      	it	cc
 8019fcc:	250c      	movcc	r5, #12
 8019fce:	2d00      	cmp	r5, #0
 8019fd0:	4607      	mov	r7, r0
 8019fd2:	db01      	blt.n	8019fd8 <_malloc_r+0x1c>
 8019fd4:	42a9      	cmp	r1, r5
 8019fd6:	d905      	bls.n	8019fe4 <_malloc_r+0x28>
 8019fd8:	230c      	movs	r3, #12
 8019fda:	603b      	str	r3, [r7, #0]
 8019fdc:	2600      	movs	r6, #0
 8019fde:	4630      	mov	r0, r6
 8019fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fe4:	4e2e      	ldr	r6, [pc, #184]	; (801a0a0 <_malloc_r+0xe4>)
 8019fe6:	f000 fc33 	bl	801a850 <__malloc_lock>
 8019fea:	6833      	ldr	r3, [r6, #0]
 8019fec:	461c      	mov	r4, r3
 8019fee:	bb34      	cbnz	r4, 801a03e <_malloc_r+0x82>
 8019ff0:	4629      	mov	r1, r5
 8019ff2:	4638      	mov	r0, r7
 8019ff4:	f7ff ffc2 	bl	8019f7c <sbrk_aligned>
 8019ff8:	1c43      	adds	r3, r0, #1
 8019ffa:	4604      	mov	r4, r0
 8019ffc:	d14d      	bne.n	801a09a <_malloc_r+0xde>
 8019ffe:	6834      	ldr	r4, [r6, #0]
 801a000:	4626      	mov	r6, r4
 801a002:	2e00      	cmp	r6, #0
 801a004:	d140      	bne.n	801a088 <_malloc_r+0xcc>
 801a006:	6823      	ldr	r3, [r4, #0]
 801a008:	4631      	mov	r1, r6
 801a00a:	4638      	mov	r0, r7
 801a00c:	eb04 0803 	add.w	r8, r4, r3
 801a010:	f000 f8d6 	bl	801a1c0 <_sbrk_r>
 801a014:	4580      	cmp	r8, r0
 801a016:	d13a      	bne.n	801a08e <_malloc_r+0xd2>
 801a018:	6821      	ldr	r1, [r4, #0]
 801a01a:	3503      	adds	r5, #3
 801a01c:	1a6d      	subs	r5, r5, r1
 801a01e:	f025 0503 	bic.w	r5, r5, #3
 801a022:	3508      	adds	r5, #8
 801a024:	2d0c      	cmp	r5, #12
 801a026:	bf38      	it	cc
 801a028:	250c      	movcc	r5, #12
 801a02a:	4629      	mov	r1, r5
 801a02c:	4638      	mov	r0, r7
 801a02e:	f7ff ffa5 	bl	8019f7c <sbrk_aligned>
 801a032:	3001      	adds	r0, #1
 801a034:	d02b      	beq.n	801a08e <_malloc_r+0xd2>
 801a036:	6823      	ldr	r3, [r4, #0]
 801a038:	442b      	add	r3, r5
 801a03a:	6023      	str	r3, [r4, #0]
 801a03c:	e00e      	b.n	801a05c <_malloc_r+0xa0>
 801a03e:	6822      	ldr	r2, [r4, #0]
 801a040:	1b52      	subs	r2, r2, r5
 801a042:	d41e      	bmi.n	801a082 <_malloc_r+0xc6>
 801a044:	2a0b      	cmp	r2, #11
 801a046:	d916      	bls.n	801a076 <_malloc_r+0xba>
 801a048:	1961      	adds	r1, r4, r5
 801a04a:	42a3      	cmp	r3, r4
 801a04c:	6025      	str	r5, [r4, #0]
 801a04e:	bf18      	it	ne
 801a050:	6059      	strne	r1, [r3, #4]
 801a052:	6863      	ldr	r3, [r4, #4]
 801a054:	bf08      	it	eq
 801a056:	6031      	streq	r1, [r6, #0]
 801a058:	5162      	str	r2, [r4, r5]
 801a05a:	604b      	str	r3, [r1, #4]
 801a05c:	4638      	mov	r0, r7
 801a05e:	f104 060b 	add.w	r6, r4, #11
 801a062:	f000 fbfb 	bl	801a85c <__malloc_unlock>
 801a066:	f026 0607 	bic.w	r6, r6, #7
 801a06a:	1d23      	adds	r3, r4, #4
 801a06c:	1af2      	subs	r2, r6, r3
 801a06e:	d0b6      	beq.n	8019fde <_malloc_r+0x22>
 801a070:	1b9b      	subs	r3, r3, r6
 801a072:	50a3      	str	r3, [r4, r2]
 801a074:	e7b3      	b.n	8019fde <_malloc_r+0x22>
 801a076:	6862      	ldr	r2, [r4, #4]
 801a078:	42a3      	cmp	r3, r4
 801a07a:	bf0c      	ite	eq
 801a07c:	6032      	streq	r2, [r6, #0]
 801a07e:	605a      	strne	r2, [r3, #4]
 801a080:	e7ec      	b.n	801a05c <_malloc_r+0xa0>
 801a082:	4623      	mov	r3, r4
 801a084:	6864      	ldr	r4, [r4, #4]
 801a086:	e7b2      	b.n	8019fee <_malloc_r+0x32>
 801a088:	4634      	mov	r4, r6
 801a08a:	6876      	ldr	r6, [r6, #4]
 801a08c:	e7b9      	b.n	801a002 <_malloc_r+0x46>
 801a08e:	230c      	movs	r3, #12
 801a090:	603b      	str	r3, [r7, #0]
 801a092:	4638      	mov	r0, r7
 801a094:	f000 fbe2 	bl	801a85c <__malloc_unlock>
 801a098:	e7a1      	b.n	8019fde <_malloc_r+0x22>
 801a09a:	6025      	str	r5, [r4, #0]
 801a09c:	e7de      	b.n	801a05c <_malloc_r+0xa0>
 801a09e:	bf00      	nop
 801a0a0:	240071d0 	.word	0x240071d0

0801a0a4 <iprintf>:
 801a0a4:	b40f      	push	{r0, r1, r2, r3}
 801a0a6:	4b0a      	ldr	r3, [pc, #40]	; (801a0d0 <iprintf+0x2c>)
 801a0a8:	b513      	push	{r0, r1, r4, lr}
 801a0aa:	681c      	ldr	r4, [r3, #0]
 801a0ac:	b124      	cbz	r4, 801a0b8 <iprintf+0x14>
 801a0ae:	69a3      	ldr	r3, [r4, #24]
 801a0b0:	b913      	cbnz	r3, 801a0b8 <iprintf+0x14>
 801a0b2:	4620      	mov	r0, r4
 801a0b4:	f000 fac6 	bl	801a644 <__sinit>
 801a0b8:	ab05      	add	r3, sp, #20
 801a0ba:	9a04      	ldr	r2, [sp, #16]
 801a0bc:	68a1      	ldr	r1, [r4, #8]
 801a0be:	9301      	str	r3, [sp, #4]
 801a0c0:	4620      	mov	r0, r4
 801a0c2:	f000 fd57 	bl	801ab74 <_vfiprintf_r>
 801a0c6:	b002      	add	sp, #8
 801a0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0cc:	b004      	add	sp, #16
 801a0ce:	4770      	bx	lr
 801a0d0:	24000034 	.word	0x24000034

0801a0d4 <_puts_r>:
 801a0d4:	b570      	push	{r4, r5, r6, lr}
 801a0d6:	460e      	mov	r6, r1
 801a0d8:	4605      	mov	r5, r0
 801a0da:	b118      	cbz	r0, 801a0e4 <_puts_r+0x10>
 801a0dc:	6983      	ldr	r3, [r0, #24]
 801a0de:	b90b      	cbnz	r3, 801a0e4 <_puts_r+0x10>
 801a0e0:	f000 fab0 	bl	801a644 <__sinit>
 801a0e4:	69ab      	ldr	r3, [r5, #24]
 801a0e6:	68ac      	ldr	r4, [r5, #8]
 801a0e8:	b913      	cbnz	r3, 801a0f0 <_puts_r+0x1c>
 801a0ea:	4628      	mov	r0, r5
 801a0ec:	f000 faaa 	bl	801a644 <__sinit>
 801a0f0:	4b2c      	ldr	r3, [pc, #176]	; (801a1a4 <_puts_r+0xd0>)
 801a0f2:	429c      	cmp	r4, r3
 801a0f4:	d120      	bne.n	801a138 <_puts_r+0x64>
 801a0f6:	686c      	ldr	r4, [r5, #4]
 801a0f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a0fa:	07db      	lsls	r3, r3, #31
 801a0fc:	d405      	bmi.n	801a10a <_puts_r+0x36>
 801a0fe:	89a3      	ldrh	r3, [r4, #12]
 801a100:	0598      	lsls	r0, r3, #22
 801a102:	d402      	bmi.n	801a10a <_puts_r+0x36>
 801a104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a106:	f000 fb3b 	bl	801a780 <__retarget_lock_acquire_recursive>
 801a10a:	89a3      	ldrh	r3, [r4, #12]
 801a10c:	0719      	lsls	r1, r3, #28
 801a10e:	d51d      	bpl.n	801a14c <_puts_r+0x78>
 801a110:	6923      	ldr	r3, [r4, #16]
 801a112:	b1db      	cbz	r3, 801a14c <_puts_r+0x78>
 801a114:	3e01      	subs	r6, #1
 801a116:	68a3      	ldr	r3, [r4, #8]
 801a118:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a11c:	3b01      	subs	r3, #1
 801a11e:	60a3      	str	r3, [r4, #8]
 801a120:	bb39      	cbnz	r1, 801a172 <_puts_r+0x9e>
 801a122:	2b00      	cmp	r3, #0
 801a124:	da38      	bge.n	801a198 <_puts_r+0xc4>
 801a126:	4622      	mov	r2, r4
 801a128:	210a      	movs	r1, #10
 801a12a:	4628      	mov	r0, r5
 801a12c:	f000 f8b0 	bl	801a290 <__swbuf_r>
 801a130:	3001      	adds	r0, #1
 801a132:	d011      	beq.n	801a158 <_puts_r+0x84>
 801a134:	250a      	movs	r5, #10
 801a136:	e011      	b.n	801a15c <_puts_r+0x88>
 801a138:	4b1b      	ldr	r3, [pc, #108]	; (801a1a8 <_puts_r+0xd4>)
 801a13a:	429c      	cmp	r4, r3
 801a13c:	d101      	bne.n	801a142 <_puts_r+0x6e>
 801a13e:	68ac      	ldr	r4, [r5, #8]
 801a140:	e7da      	b.n	801a0f8 <_puts_r+0x24>
 801a142:	4b1a      	ldr	r3, [pc, #104]	; (801a1ac <_puts_r+0xd8>)
 801a144:	429c      	cmp	r4, r3
 801a146:	bf08      	it	eq
 801a148:	68ec      	ldreq	r4, [r5, #12]
 801a14a:	e7d5      	b.n	801a0f8 <_puts_r+0x24>
 801a14c:	4621      	mov	r1, r4
 801a14e:	4628      	mov	r0, r5
 801a150:	f000 f8f0 	bl	801a334 <__swsetup_r>
 801a154:	2800      	cmp	r0, #0
 801a156:	d0dd      	beq.n	801a114 <_puts_r+0x40>
 801a158:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a15c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a15e:	07da      	lsls	r2, r3, #31
 801a160:	d405      	bmi.n	801a16e <_puts_r+0x9a>
 801a162:	89a3      	ldrh	r3, [r4, #12]
 801a164:	059b      	lsls	r3, r3, #22
 801a166:	d402      	bmi.n	801a16e <_puts_r+0x9a>
 801a168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a16a:	f000 fb0a 	bl	801a782 <__retarget_lock_release_recursive>
 801a16e:	4628      	mov	r0, r5
 801a170:	bd70      	pop	{r4, r5, r6, pc}
 801a172:	2b00      	cmp	r3, #0
 801a174:	da04      	bge.n	801a180 <_puts_r+0xac>
 801a176:	69a2      	ldr	r2, [r4, #24]
 801a178:	429a      	cmp	r2, r3
 801a17a:	dc06      	bgt.n	801a18a <_puts_r+0xb6>
 801a17c:	290a      	cmp	r1, #10
 801a17e:	d004      	beq.n	801a18a <_puts_r+0xb6>
 801a180:	6823      	ldr	r3, [r4, #0]
 801a182:	1c5a      	adds	r2, r3, #1
 801a184:	6022      	str	r2, [r4, #0]
 801a186:	7019      	strb	r1, [r3, #0]
 801a188:	e7c5      	b.n	801a116 <_puts_r+0x42>
 801a18a:	4622      	mov	r2, r4
 801a18c:	4628      	mov	r0, r5
 801a18e:	f000 f87f 	bl	801a290 <__swbuf_r>
 801a192:	3001      	adds	r0, #1
 801a194:	d1bf      	bne.n	801a116 <_puts_r+0x42>
 801a196:	e7df      	b.n	801a158 <_puts_r+0x84>
 801a198:	6823      	ldr	r3, [r4, #0]
 801a19a:	250a      	movs	r5, #10
 801a19c:	1c5a      	adds	r2, r3, #1
 801a19e:	6022      	str	r2, [r4, #0]
 801a1a0:	701d      	strb	r5, [r3, #0]
 801a1a2:	e7db      	b.n	801a15c <_puts_r+0x88>
 801a1a4:	0801bd38 	.word	0x0801bd38
 801a1a8:	0801bd58 	.word	0x0801bd58
 801a1ac:	0801bd18 	.word	0x0801bd18

0801a1b0 <puts>:
 801a1b0:	4b02      	ldr	r3, [pc, #8]	; (801a1bc <puts+0xc>)
 801a1b2:	4601      	mov	r1, r0
 801a1b4:	6818      	ldr	r0, [r3, #0]
 801a1b6:	f7ff bf8d 	b.w	801a0d4 <_puts_r>
 801a1ba:	bf00      	nop
 801a1bc:	24000034 	.word	0x24000034

0801a1c0 <_sbrk_r>:
 801a1c0:	b538      	push	{r3, r4, r5, lr}
 801a1c2:	4d06      	ldr	r5, [pc, #24]	; (801a1dc <_sbrk_r+0x1c>)
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	4604      	mov	r4, r0
 801a1c8:	4608      	mov	r0, r1
 801a1ca:	602b      	str	r3, [r5, #0]
 801a1cc:	f7e7 fe3a 	bl	8001e44 <_sbrk>
 801a1d0:	1c43      	adds	r3, r0, #1
 801a1d2:	d102      	bne.n	801a1da <_sbrk_r+0x1a>
 801a1d4:	682b      	ldr	r3, [r5, #0]
 801a1d6:	b103      	cbz	r3, 801a1da <_sbrk_r+0x1a>
 801a1d8:	6023      	str	r3, [r4, #0]
 801a1da:	bd38      	pop	{r3, r4, r5, pc}
 801a1dc:	240071dc 	.word	0x240071dc

0801a1e0 <siprintf>:
 801a1e0:	b40e      	push	{r1, r2, r3}
 801a1e2:	b500      	push	{lr}
 801a1e4:	b09c      	sub	sp, #112	; 0x70
 801a1e6:	ab1d      	add	r3, sp, #116	; 0x74
 801a1e8:	9002      	str	r0, [sp, #8]
 801a1ea:	9006      	str	r0, [sp, #24]
 801a1ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a1f0:	4809      	ldr	r0, [pc, #36]	; (801a218 <siprintf+0x38>)
 801a1f2:	9107      	str	r1, [sp, #28]
 801a1f4:	9104      	str	r1, [sp, #16]
 801a1f6:	4909      	ldr	r1, [pc, #36]	; (801a21c <siprintf+0x3c>)
 801a1f8:	f853 2b04 	ldr.w	r2, [r3], #4
 801a1fc:	9105      	str	r1, [sp, #20]
 801a1fe:	6800      	ldr	r0, [r0, #0]
 801a200:	9301      	str	r3, [sp, #4]
 801a202:	a902      	add	r1, sp, #8
 801a204:	f000 fb8c 	bl	801a920 <_svfiprintf_r>
 801a208:	9b02      	ldr	r3, [sp, #8]
 801a20a:	2200      	movs	r2, #0
 801a20c:	701a      	strb	r2, [r3, #0]
 801a20e:	b01c      	add	sp, #112	; 0x70
 801a210:	f85d eb04 	ldr.w	lr, [sp], #4
 801a214:	b003      	add	sp, #12
 801a216:	4770      	bx	lr
 801a218:	24000034 	.word	0x24000034
 801a21c:	ffff0208 	.word	0xffff0208

0801a220 <strchr>:
 801a220:	b2c9      	uxtb	r1, r1
 801a222:	4603      	mov	r3, r0
 801a224:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a228:	b11a      	cbz	r2, 801a232 <strchr+0x12>
 801a22a:	428a      	cmp	r2, r1
 801a22c:	d1f9      	bne.n	801a222 <strchr+0x2>
 801a22e:	4618      	mov	r0, r3
 801a230:	4770      	bx	lr
 801a232:	2900      	cmp	r1, #0
 801a234:	bf18      	it	ne
 801a236:	2300      	movne	r3, #0
 801a238:	e7f9      	b.n	801a22e <strchr+0xe>

0801a23a <strncmp>:
 801a23a:	b510      	push	{r4, lr}
 801a23c:	b17a      	cbz	r2, 801a25e <strncmp+0x24>
 801a23e:	4603      	mov	r3, r0
 801a240:	3901      	subs	r1, #1
 801a242:	1884      	adds	r4, r0, r2
 801a244:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a248:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a24c:	4290      	cmp	r0, r2
 801a24e:	d101      	bne.n	801a254 <strncmp+0x1a>
 801a250:	42a3      	cmp	r3, r4
 801a252:	d101      	bne.n	801a258 <strncmp+0x1e>
 801a254:	1a80      	subs	r0, r0, r2
 801a256:	bd10      	pop	{r4, pc}
 801a258:	2800      	cmp	r0, #0
 801a25a:	d1f3      	bne.n	801a244 <strncmp+0xa>
 801a25c:	e7fa      	b.n	801a254 <strncmp+0x1a>
 801a25e:	4610      	mov	r0, r2
 801a260:	e7f9      	b.n	801a256 <strncmp+0x1c>

0801a262 <strstr>:
 801a262:	780a      	ldrb	r2, [r1, #0]
 801a264:	b570      	push	{r4, r5, r6, lr}
 801a266:	b96a      	cbnz	r2, 801a284 <strstr+0x22>
 801a268:	bd70      	pop	{r4, r5, r6, pc}
 801a26a:	429a      	cmp	r2, r3
 801a26c:	d109      	bne.n	801a282 <strstr+0x20>
 801a26e:	460c      	mov	r4, r1
 801a270:	4605      	mov	r5, r0
 801a272:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a276:	2b00      	cmp	r3, #0
 801a278:	d0f6      	beq.n	801a268 <strstr+0x6>
 801a27a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a27e:	429e      	cmp	r6, r3
 801a280:	d0f7      	beq.n	801a272 <strstr+0x10>
 801a282:	3001      	adds	r0, #1
 801a284:	7803      	ldrb	r3, [r0, #0]
 801a286:	2b00      	cmp	r3, #0
 801a288:	d1ef      	bne.n	801a26a <strstr+0x8>
 801a28a:	4618      	mov	r0, r3
 801a28c:	e7ec      	b.n	801a268 <strstr+0x6>
	...

0801a290 <__swbuf_r>:
 801a290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a292:	460e      	mov	r6, r1
 801a294:	4614      	mov	r4, r2
 801a296:	4605      	mov	r5, r0
 801a298:	b118      	cbz	r0, 801a2a2 <__swbuf_r+0x12>
 801a29a:	6983      	ldr	r3, [r0, #24]
 801a29c:	b90b      	cbnz	r3, 801a2a2 <__swbuf_r+0x12>
 801a29e:	f000 f9d1 	bl	801a644 <__sinit>
 801a2a2:	4b21      	ldr	r3, [pc, #132]	; (801a328 <__swbuf_r+0x98>)
 801a2a4:	429c      	cmp	r4, r3
 801a2a6:	d12b      	bne.n	801a300 <__swbuf_r+0x70>
 801a2a8:	686c      	ldr	r4, [r5, #4]
 801a2aa:	69a3      	ldr	r3, [r4, #24]
 801a2ac:	60a3      	str	r3, [r4, #8]
 801a2ae:	89a3      	ldrh	r3, [r4, #12]
 801a2b0:	071a      	lsls	r2, r3, #28
 801a2b2:	d52f      	bpl.n	801a314 <__swbuf_r+0x84>
 801a2b4:	6923      	ldr	r3, [r4, #16]
 801a2b6:	b36b      	cbz	r3, 801a314 <__swbuf_r+0x84>
 801a2b8:	6923      	ldr	r3, [r4, #16]
 801a2ba:	6820      	ldr	r0, [r4, #0]
 801a2bc:	1ac0      	subs	r0, r0, r3
 801a2be:	6963      	ldr	r3, [r4, #20]
 801a2c0:	b2f6      	uxtb	r6, r6
 801a2c2:	4283      	cmp	r3, r0
 801a2c4:	4637      	mov	r7, r6
 801a2c6:	dc04      	bgt.n	801a2d2 <__swbuf_r+0x42>
 801a2c8:	4621      	mov	r1, r4
 801a2ca:	4628      	mov	r0, r5
 801a2cc:	f000 f926 	bl	801a51c <_fflush_r>
 801a2d0:	bb30      	cbnz	r0, 801a320 <__swbuf_r+0x90>
 801a2d2:	68a3      	ldr	r3, [r4, #8]
 801a2d4:	3b01      	subs	r3, #1
 801a2d6:	60a3      	str	r3, [r4, #8]
 801a2d8:	6823      	ldr	r3, [r4, #0]
 801a2da:	1c5a      	adds	r2, r3, #1
 801a2dc:	6022      	str	r2, [r4, #0]
 801a2de:	701e      	strb	r6, [r3, #0]
 801a2e0:	6963      	ldr	r3, [r4, #20]
 801a2e2:	3001      	adds	r0, #1
 801a2e4:	4283      	cmp	r3, r0
 801a2e6:	d004      	beq.n	801a2f2 <__swbuf_r+0x62>
 801a2e8:	89a3      	ldrh	r3, [r4, #12]
 801a2ea:	07db      	lsls	r3, r3, #31
 801a2ec:	d506      	bpl.n	801a2fc <__swbuf_r+0x6c>
 801a2ee:	2e0a      	cmp	r6, #10
 801a2f0:	d104      	bne.n	801a2fc <__swbuf_r+0x6c>
 801a2f2:	4621      	mov	r1, r4
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	f000 f911 	bl	801a51c <_fflush_r>
 801a2fa:	b988      	cbnz	r0, 801a320 <__swbuf_r+0x90>
 801a2fc:	4638      	mov	r0, r7
 801a2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a300:	4b0a      	ldr	r3, [pc, #40]	; (801a32c <__swbuf_r+0x9c>)
 801a302:	429c      	cmp	r4, r3
 801a304:	d101      	bne.n	801a30a <__swbuf_r+0x7a>
 801a306:	68ac      	ldr	r4, [r5, #8]
 801a308:	e7cf      	b.n	801a2aa <__swbuf_r+0x1a>
 801a30a:	4b09      	ldr	r3, [pc, #36]	; (801a330 <__swbuf_r+0xa0>)
 801a30c:	429c      	cmp	r4, r3
 801a30e:	bf08      	it	eq
 801a310:	68ec      	ldreq	r4, [r5, #12]
 801a312:	e7ca      	b.n	801a2aa <__swbuf_r+0x1a>
 801a314:	4621      	mov	r1, r4
 801a316:	4628      	mov	r0, r5
 801a318:	f000 f80c 	bl	801a334 <__swsetup_r>
 801a31c:	2800      	cmp	r0, #0
 801a31e:	d0cb      	beq.n	801a2b8 <__swbuf_r+0x28>
 801a320:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a324:	e7ea      	b.n	801a2fc <__swbuf_r+0x6c>
 801a326:	bf00      	nop
 801a328:	0801bd38 	.word	0x0801bd38
 801a32c:	0801bd58 	.word	0x0801bd58
 801a330:	0801bd18 	.word	0x0801bd18

0801a334 <__swsetup_r>:
 801a334:	4b32      	ldr	r3, [pc, #200]	; (801a400 <__swsetup_r+0xcc>)
 801a336:	b570      	push	{r4, r5, r6, lr}
 801a338:	681d      	ldr	r5, [r3, #0]
 801a33a:	4606      	mov	r6, r0
 801a33c:	460c      	mov	r4, r1
 801a33e:	b125      	cbz	r5, 801a34a <__swsetup_r+0x16>
 801a340:	69ab      	ldr	r3, [r5, #24]
 801a342:	b913      	cbnz	r3, 801a34a <__swsetup_r+0x16>
 801a344:	4628      	mov	r0, r5
 801a346:	f000 f97d 	bl	801a644 <__sinit>
 801a34a:	4b2e      	ldr	r3, [pc, #184]	; (801a404 <__swsetup_r+0xd0>)
 801a34c:	429c      	cmp	r4, r3
 801a34e:	d10f      	bne.n	801a370 <__swsetup_r+0x3c>
 801a350:	686c      	ldr	r4, [r5, #4]
 801a352:	89a3      	ldrh	r3, [r4, #12]
 801a354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a358:	0719      	lsls	r1, r3, #28
 801a35a:	d42c      	bmi.n	801a3b6 <__swsetup_r+0x82>
 801a35c:	06dd      	lsls	r5, r3, #27
 801a35e:	d411      	bmi.n	801a384 <__swsetup_r+0x50>
 801a360:	2309      	movs	r3, #9
 801a362:	6033      	str	r3, [r6, #0]
 801a364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a368:	81a3      	strh	r3, [r4, #12]
 801a36a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a36e:	e03e      	b.n	801a3ee <__swsetup_r+0xba>
 801a370:	4b25      	ldr	r3, [pc, #148]	; (801a408 <__swsetup_r+0xd4>)
 801a372:	429c      	cmp	r4, r3
 801a374:	d101      	bne.n	801a37a <__swsetup_r+0x46>
 801a376:	68ac      	ldr	r4, [r5, #8]
 801a378:	e7eb      	b.n	801a352 <__swsetup_r+0x1e>
 801a37a:	4b24      	ldr	r3, [pc, #144]	; (801a40c <__swsetup_r+0xd8>)
 801a37c:	429c      	cmp	r4, r3
 801a37e:	bf08      	it	eq
 801a380:	68ec      	ldreq	r4, [r5, #12]
 801a382:	e7e6      	b.n	801a352 <__swsetup_r+0x1e>
 801a384:	0758      	lsls	r0, r3, #29
 801a386:	d512      	bpl.n	801a3ae <__swsetup_r+0x7a>
 801a388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a38a:	b141      	cbz	r1, 801a39e <__swsetup_r+0x6a>
 801a38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a390:	4299      	cmp	r1, r3
 801a392:	d002      	beq.n	801a39a <__swsetup_r+0x66>
 801a394:	4630      	mov	r0, r6
 801a396:	f7ff fda5 	bl	8019ee4 <_free_r>
 801a39a:	2300      	movs	r3, #0
 801a39c:	6363      	str	r3, [r4, #52]	; 0x34
 801a39e:	89a3      	ldrh	r3, [r4, #12]
 801a3a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a3a4:	81a3      	strh	r3, [r4, #12]
 801a3a6:	2300      	movs	r3, #0
 801a3a8:	6063      	str	r3, [r4, #4]
 801a3aa:	6923      	ldr	r3, [r4, #16]
 801a3ac:	6023      	str	r3, [r4, #0]
 801a3ae:	89a3      	ldrh	r3, [r4, #12]
 801a3b0:	f043 0308 	orr.w	r3, r3, #8
 801a3b4:	81a3      	strh	r3, [r4, #12]
 801a3b6:	6923      	ldr	r3, [r4, #16]
 801a3b8:	b94b      	cbnz	r3, 801a3ce <__swsetup_r+0x9a>
 801a3ba:	89a3      	ldrh	r3, [r4, #12]
 801a3bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a3c4:	d003      	beq.n	801a3ce <__swsetup_r+0x9a>
 801a3c6:	4621      	mov	r1, r4
 801a3c8:	4630      	mov	r0, r6
 801a3ca:	f000 fa01 	bl	801a7d0 <__smakebuf_r>
 801a3ce:	89a0      	ldrh	r0, [r4, #12]
 801a3d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a3d4:	f010 0301 	ands.w	r3, r0, #1
 801a3d8:	d00a      	beq.n	801a3f0 <__swsetup_r+0xbc>
 801a3da:	2300      	movs	r3, #0
 801a3dc:	60a3      	str	r3, [r4, #8]
 801a3de:	6963      	ldr	r3, [r4, #20]
 801a3e0:	425b      	negs	r3, r3
 801a3e2:	61a3      	str	r3, [r4, #24]
 801a3e4:	6923      	ldr	r3, [r4, #16]
 801a3e6:	b943      	cbnz	r3, 801a3fa <__swsetup_r+0xc6>
 801a3e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a3ec:	d1ba      	bne.n	801a364 <__swsetup_r+0x30>
 801a3ee:	bd70      	pop	{r4, r5, r6, pc}
 801a3f0:	0781      	lsls	r1, r0, #30
 801a3f2:	bf58      	it	pl
 801a3f4:	6963      	ldrpl	r3, [r4, #20]
 801a3f6:	60a3      	str	r3, [r4, #8]
 801a3f8:	e7f4      	b.n	801a3e4 <__swsetup_r+0xb0>
 801a3fa:	2000      	movs	r0, #0
 801a3fc:	e7f7      	b.n	801a3ee <__swsetup_r+0xba>
 801a3fe:	bf00      	nop
 801a400:	24000034 	.word	0x24000034
 801a404:	0801bd38 	.word	0x0801bd38
 801a408:	0801bd58 	.word	0x0801bd58
 801a40c:	0801bd18 	.word	0x0801bd18

0801a410 <__sflush_r>:
 801a410:	898a      	ldrh	r2, [r1, #12]
 801a412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a416:	4605      	mov	r5, r0
 801a418:	0710      	lsls	r0, r2, #28
 801a41a:	460c      	mov	r4, r1
 801a41c:	d458      	bmi.n	801a4d0 <__sflush_r+0xc0>
 801a41e:	684b      	ldr	r3, [r1, #4]
 801a420:	2b00      	cmp	r3, #0
 801a422:	dc05      	bgt.n	801a430 <__sflush_r+0x20>
 801a424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a426:	2b00      	cmp	r3, #0
 801a428:	dc02      	bgt.n	801a430 <__sflush_r+0x20>
 801a42a:	2000      	movs	r0, #0
 801a42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a432:	2e00      	cmp	r6, #0
 801a434:	d0f9      	beq.n	801a42a <__sflush_r+0x1a>
 801a436:	2300      	movs	r3, #0
 801a438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a43c:	682f      	ldr	r7, [r5, #0]
 801a43e:	602b      	str	r3, [r5, #0]
 801a440:	d032      	beq.n	801a4a8 <__sflush_r+0x98>
 801a442:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a444:	89a3      	ldrh	r3, [r4, #12]
 801a446:	075a      	lsls	r2, r3, #29
 801a448:	d505      	bpl.n	801a456 <__sflush_r+0x46>
 801a44a:	6863      	ldr	r3, [r4, #4]
 801a44c:	1ac0      	subs	r0, r0, r3
 801a44e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a450:	b10b      	cbz	r3, 801a456 <__sflush_r+0x46>
 801a452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a454:	1ac0      	subs	r0, r0, r3
 801a456:	2300      	movs	r3, #0
 801a458:	4602      	mov	r2, r0
 801a45a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a45c:	6a21      	ldr	r1, [r4, #32]
 801a45e:	4628      	mov	r0, r5
 801a460:	47b0      	blx	r6
 801a462:	1c43      	adds	r3, r0, #1
 801a464:	89a3      	ldrh	r3, [r4, #12]
 801a466:	d106      	bne.n	801a476 <__sflush_r+0x66>
 801a468:	6829      	ldr	r1, [r5, #0]
 801a46a:	291d      	cmp	r1, #29
 801a46c:	d82c      	bhi.n	801a4c8 <__sflush_r+0xb8>
 801a46e:	4a2a      	ldr	r2, [pc, #168]	; (801a518 <__sflush_r+0x108>)
 801a470:	40ca      	lsrs	r2, r1
 801a472:	07d6      	lsls	r6, r2, #31
 801a474:	d528      	bpl.n	801a4c8 <__sflush_r+0xb8>
 801a476:	2200      	movs	r2, #0
 801a478:	6062      	str	r2, [r4, #4]
 801a47a:	04d9      	lsls	r1, r3, #19
 801a47c:	6922      	ldr	r2, [r4, #16]
 801a47e:	6022      	str	r2, [r4, #0]
 801a480:	d504      	bpl.n	801a48c <__sflush_r+0x7c>
 801a482:	1c42      	adds	r2, r0, #1
 801a484:	d101      	bne.n	801a48a <__sflush_r+0x7a>
 801a486:	682b      	ldr	r3, [r5, #0]
 801a488:	b903      	cbnz	r3, 801a48c <__sflush_r+0x7c>
 801a48a:	6560      	str	r0, [r4, #84]	; 0x54
 801a48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a48e:	602f      	str	r7, [r5, #0]
 801a490:	2900      	cmp	r1, #0
 801a492:	d0ca      	beq.n	801a42a <__sflush_r+0x1a>
 801a494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a498:	4299      	cmp	r1, r3
 801a49a:	d002      	beq.n	801a4a2 <__sflush_r+0x92>
 801a49c:	4628      	mov	r0, r5
 801a49e:	f7ff fd21 	bl	8019ee4 <_free_r>
 801a4a2:	2000      	movs	r0, #0
 801a4a4:	6360      	str	r0, [r4, #52]	; 0x34
 801a4a6:	e7c1      	b.n	801a42c <__sflush_r+0x1c>
 801a4a8:	6a21      	ldr	r1, [r4, #32]
 801a4aa:	2301      	movs	r3, #1
 801a4ac:	4628      	mov	r0, r5
 801a4ae:	47b0      	blx	r6
 801a4b0:	1c41      	adds	r1, r0, #1
 801a4b2:	d1c7      	bne.n	801a444 <__sflush_r+0x34>
 801a4b4:	682b      	ldr	r3, [r5, #0]
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d0c4      	beq.n	801a444 <__sflush_r+0x34>
 801a4ba:	2b1d      	cmp	r3, #29
 801a4bc:	d001      	beq.n	801a4c2 <__sflush_r+0xb2>
 801a4be:	2b16      	cmp	r3, #22
 801a4c0:	d101      	bne.n	801a4c6 <__sflush_r+0xb6>
 801a4c2:	602f      	str	r7, [r5, #0]
 801a4c4:	e7b1      	b.n	801a42a <__sflush_r+0x1a>
 801a4c6:	89a3      	ldrh	r3, [r4, #12]
 801a4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4cc:	81a3      	strh	r3, [r4, #12]
 801a4ce:	e7ad      	b.n	801a42c <__sflush_r+0x1c>
 801a4d0:	690f      	ldr	r7, [r1, #16]
 801a4d2:	2f00      	cmp	r7, #0
 801a4d4:	d0a9      	beq.n	801a42a <__sflush_r+0x1a>
 801a4d6:	0793      	lsls	r3, r2, #30
 801a4d8:	680e      	ldr	r6, [r1, #0]
 801a4da:	bf08      	it	eq
 801a4dc:	694b      	ldreq	r3, [r1, #20]
 801a4de:	600f      	str	r7, [r1, #0]
 801a4e0:	bf18      	it	ne
 801a4e2:	2300      	movne	r3, #0
 801a4e4:	eba6 0807 	sub.w	r8, r6, r7
 801a4e8:	608b      	str	r3, [r1, #8]
 801a4ea:	f1b8 0f00 	cmp.w	r8, #0
 801a4ee:	dd9c      	ble.n	801a42a <__sflush_r+0x1a>
 801a4f0:	6a21      	ldr	r1, [r4, #32]
 801a4f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a4f4:	4643      	mov	r3, r8
 801a4f6:	463a      	mov	r2, r7
 801a4f8:	4628      	mov	r0, r5
 801a4fa:	47b0      	blx	r6
 801a4fc:	2800      	cmp	r0, #0
 801a4fe:	dc06      	bgt.n	801a50e <__sflush_r+0xfe>
 801a500:	89a3      	ldrh	r3, [r4, #12]
 801a502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a506:	81a3      	strh	r3, [r4, #12]
 801a508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a50c:	e78e      	b.n	801a42c <__sflush_r+0x1c>
 801a50e:	4407      	add	r7, r0
 801a510:	eba8 0800 	sub.w	r8, r8, r0
 801a514:	e7e9      	b.n	801a4ea <__sflush_r+0xda>
 801a516:	bf00      	nop
 801a518:	20400001 	.word	0x20400001

0801a51c <_fflush_r>:
 801a51c:	b538      	push	{r3, r4, r5, lr}
 801a51e:	690b      	ldr	r3, [r1, #16]
 801a520:	4605      	mov	r5, r0
 801a522:	460c      	mov	r4, r1
 801a524:	b913      	cbnz	r3, 801a52c <_fflush_r+0x10>
 801a526:	2500      	movs	r5, #0
 801a528:	4628      	mov	r0, r5
 801a52a:	bd38      	pop	{r3, r4, r5, pc}
 801a52c:	b118      	cbz	r0, 801a536 <_fflush_r+0x1a>
 801a52e:	6983      	ldr	r3, [r0, #24]
 801a530:	b90b      	cbnz	r3, 801a536 <_fflush_r+0x1a>
 801a532:	f000 f887 	bl	801a644 <__sinit>
 801a536:	4b14      	ldr	r3, [pc, #80]	; (801a588 <_fflush_r+0x6c>)
 801a538:	429c      	cmp	r4, r3
 801a53a:	d11b      	bne.n	801a574 <_fflush_r+0x58>
 801a53c:	686c      	ldr	r4, [r5, #4]
 801a53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a542:	2b00      	cmp	r3, #0
 801a544:	d0ef      	beq.n	801a526 <_fflush_r+0xa>
 801a546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a548:	07d0      	lsls	r0, r2, #31
 801a54a:	d404      	bmi.n	801a556 <_fflush_r+0x3a>
 801a54c:	0599      	lsls	r1, r3, #22
 801a54e:	d402      	bmi.n	801a556 <_fflush_r+0x3a>
 801a550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a552:	f000 f915 	bl	801a780 <__retarget_lock_acquire_recursive>
 801a556:	4628      	mov	r0, r5
 801a558:	4621      	mov	r1, r4
 801a55a:	f7ff ff59 	bl	801a410 <__sflush_r>
 801a55e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a560:	07da      	lsls	r2, r3, #31
 801a562:	4605      	mov	r5, r0
 801a564:	d4e0      	bmi.n	801a528 <_fflush_r+0xc>
 801a566:	89a3      	ldrh	r3, [r4, #12]
 801a568:	059b      	lsls	r3, r3, #22
 801a56a:	d4dd      	bmi.n	801a528 <_fflush_r+0xc>
 801a56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a56e:	f000 f908 	bl	801a782 <__retarget_lock_release_recursive>
 801a572:	e7d9      	b.n	801a528 <_fflush_r+0xc>
 801a574:	4b05      	ldr	r3, [pc, #20]	; (801a58c <_fflush_r+0x70>)
 801a576:	429c      	cmp	r4, r3
 801a578:	d101      	bne.n	801a57e <_fflush_r+0x62>
 801a57a:	68ac      	ldr	r4, [r5, #8]
 801a57c:	e7df      	b.n	801a53e <_fflush_r+0x22>
 801a57e:	4b04      	ldr	r3, [pc, #16]	; (801a590 <_fflush_r+0x74>)
 801a580:	429c      	cmp	r4, r3
 801a582:	bf08      	it	eq
 801a584:	68ec      	ldreq	r4, [r5, #12]
 801a586:	e7da      	b.n	801a53e <_fflush_r+0x22>
 801a588:	0801bd38 	.word	0x0801bd38
 801a58c:	0801bd58 	.word	0x0801bd58
 801a590:	0801bd18 	.word	0x0801bd18

0801a594 <std>:
 801a594:	2300      	movs	r3, #0
 801a596:	b510      	push	{r4, lr}
 801a598:	4604      	mov	r4, r0
 801a59a:	e9c0 3300 	strd	r3, r3, [r0]
 801a59e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a5a2:	6083      	str	r3, [r0, #8]
 801a5a4:	8181      	strh	r1, [r0, #12]
 801a5a6:	6643      	str	r3, [r0, #100]	; 0x64
 801a5a8:	81c2      	strh	r2, [r0, #14]
 801a5aa:	6183      	str	r3, [r0, #24]
 801a5ac:	4619      	mov	r1, r3
 801a5ae:	2208      	movs	r2, #8
 801a5b0:	305c      	adds	r0, #92	; 0x5c
 801a5b2:	f7ff fc8f 	bl	8019ed4 <memset>
 801a5b6:	4b05      	ldr	r3, [pc, #20]	; (801a5cc <std+0x38>)
 801a5b8:	6263      	str	r3, [r4, #36]	; 0x24
 801a5ba:	4b05      	ldr	r3, [pc, #20]	; (801a5d0 <std+0x3c>)
 801a5bc:	62a3      	str	r3, [r4, #40]	; 0x28
 801a5be:	4b05      	ldr	r3, [pc, #20]	; (801a5d4 <std+0x40>)
 801a5c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a5c2:	4b05      	ldr	r3, [pc, #20]	; (801a5d8 <std+0x44>)
 801a5c4:	6224      	str	r4, [r4, #32]
 801a5c6:	6323      	str	r3, [r4, #48]	; 0x30
 801a5c8:	bd10      	pop	{r4, pc}
 801a5ca:	bf00      	nop
 801a5cc:	0801b0fd 	.word	0x0801b0fd
 801a5d0:	0801b11f 	.word	0x0801b11f
 801a5d4:	0801b157 	.word	0x0801b157
 801a5d8:	0801b17b 	.word	0x0801b17b

0801a5dc <_cleanup_r>:
 801a5dc:	4901      	ldr	r1, [pc, #4]	; (801a5e4 <_cleanup_r+0x8>)
 801a5de:	f000 b8af 	b.w	801a740 <_fwalk_reent>
 801a5e2:	bf00      	nop
 801a5e4:	0801a51d 	.word	0x0801a51d

0801a5e8 <__sfmoreglue>:
 801a5e8:	b570      	push	{r4, r5, r6, lr}
 801a5ea:	2268      	movs	r2, #104	; 0x68
 801a5ec:	1e4d      	subs	r5, r1, #1
 801a5ee:	4355      	muls	r5, r2
 801a5f0:	460e      	mov	r6, r1
 801a5f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a5f6:	f7ff fce1 	bl	8019fbc <_malloc_r>
 801a5fa:	4604      	mov	r4, r0
 801a5fc:	b140      	cbz	r0, 801a610 <__sfmoreglue+0x28>
 801a5fe:	2100      	movs	r1, #0
 801a600:	e9c0 1600 	strd	r1, r6, [r0]
 801a604:	300c      	adds	r0, #12
 801a606:	60a0      	str	r0, [r4, #8]
 801a608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a60c:	f7ff fc62 	bl	8019ed4 <memset>
 801a610:	4620      	mov	r0, r4
 801a612:	bd70      	pop	{r4, r5, r6, pc}

0801a614 <__sfp_lock_acquire>:
 801a614:	4801      	ldr	r0, [pc, #4]	; (801a61c <__sfp_lock_acquire+0x8>)
 801a616:	f000 b8b3 	b.w	801a780 <__retarget_lock_acquire_recursive>
 801a61a:	bf00      	nop
 801a61c:	240071d9 	.word	0x240071d9

0801a620 <__sfp_lock_release>:
 801a620:	4801      	ldr	r0, [pc, #4]	; (801a628 <__sfp_lock_release+0x8>)
 801a622:	f000 b8ae 	b.w	801a782 <__retarget_lock_release_recursive>
 801a626:	bf00      	nop
 801a628:	240071d9 	.word	0x240071d9

0801a62c <__sinit_lock_acquire>:
 801a62c:	4801      	ldr	r0, [pc, #4]	; (801a634 <__sinit_lock_acquire+0x8>)
 801a62e:	f000 b8a7 	b.w	801a780 <__retarget_lock_acquire_recursive>
 801a632:	bf00      	nop
 801a634:	240071da 	.word	0x240071da

0801a638 <__sinit_lock_release>:
 801a638:	4801      	ldr	r0, [pc, #4]	; (801a640 <__sinit_lock_release+0x8>)
 801a63a:	f000 b8a2 	b.w	801a782 <__retarget_lock_release_recursive>
 801a63e:	bf00      	nop
 801a640:	240071da 	.word	0x240071da

0801a644 <__sinit>:
 801a644:	b510      	push	{r4, lr}
 801a646:	4604      	mov	r4, r0
 801a648:	f7ff fff0 	bl	801a62c <__sinit_lock_acquire>
 801a64c:	69a3      	ldr	r3, [r4, #24]
 801a64e:	b11b      	cbz	r3, 801a658 <__sinit+0x14>
 801a650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a654:	f7ff bff0 	b.w	801a638 <__sinit_lock_release>
 801a658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a65c:	6523      	str	r3, [r4, #80]	; 0x50
 801a65e:	4b13      	ldr	r3, [pc, #76]	; (801a6ac <__sinit+0x68>)
 801a660:	4a13      	ldr	r2, [pc, #76]	; (801a6b0 <__sinit+0x6c>)
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	62a2      	str	r2, [r4, #40]	; 0x28
 801a666:	42a3      	cmp	r3, r4
 801a668:	bf04      	itt	eq
 801a66a:	2301      	moveq	r3, #1
 801a66c:	61a3      	streq	r3, [r4, #24]
 801a66e:	4620      	mov	r0, r4
 801a670:	f000 f820 	bl	801a6b4 <__sfp>
 801a674:	6060      	str	r0, [r4, #4]
 801a676:	4620      	mov	r0, r4
 801a678:	f000 f81c 	bl	801a6b4 <__sfp>
 801a67c:	60a0      	str	r0, [r4, #8]
 801a67e:	4620      	mov	r0, r4
 801a680:	f000 f818 	bl	801a6b4 <__sfp>
 801a684:	2200      	movs	r2, #0
 801a686:	60e0      	str	r0, [r4, #12]
 801a688:	2104      	movs	r1, #4
 801a68a:	6860      	ldr	r0, [r4, #4]
 801a68c:	f7ff ff82 	bl	801a594 <std>
 801a690:	68a0      	ldr	r0, [r4, #8]
 801a692:	2201      	movs	r2, #1
 801a694:	2109      	movs	r1, #9
 801a696:	f7ff ff7d 	bl	801a594 <std>
 801a69a:	68e0      	ldr	r0, [r4, #12]
 801a69c:	2202      	movs	r2, #2
 801a69e:	2112      	movs	r1, #18
 801a6a0:	f7ff ff78 	bl	801a594 <std>
 801a6a4:	2301      	movs	r3, #1
 801a6a6:	61a3      	str	r3, [r4, #24]
 801a6a8:	e7d2      	b.n	801a650 <__sinit+0xc>
 801a6aa:	bf00      	nop
 801a6ac:	0801bd14 	.word	0x0801bd14
 801a6b0:	0801a5dd 	.word	0x0801a5dd

0801a6b4 <__sfp>:
 801a6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6b6:	4607      	mov	r7, r0
 801a6b8:	f7ff ffac 	bl	801a614 <__sfp_lock_acquire>
 801a6bc:	4b1e      	ldr	r3, [pc, #120]	; (801a738 <__sfp+0x84>)
 801a6be:	681e      	ldr	r6, [r3, #0]
 801a6c0:	69b3      	ldr	r3, [r6, #24]
 801a6c2:	b913      	cbnz	r3, 801a6ca <__sfp+0x16>
 801a6c4:	4630      	mov	r0, r6
 801a6c6:	f7ff ffbd 	bl	801a644 <__sinit>
 801a6ca:	3648      	adds	r6, #72	; 0x48
 801a6cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a6d0:	3b01      	subs	r3, #1
 801a6d2:	d503      	bpl.n	801a6dc <__sfp+0x28>
 801a6d4:	6833      	ldr	r3, [r6, #0]
 801a6d6:	b30b      	cbz	r3, 801a71c <__sfp+0x68>
 801a6d8:	6836      	ldr	r6, [r6, #0]
 801a6da:	e7f7      	b.n	801a6cc <__sfp+0x18>
 801a6dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a6e0:	b9d5      	cbnz	r5, 801a718 <__sfp+0x64>
 801a6e2:	4b16      	ldr	r3, [pc, #88]	; (801a73c <__sfp+0x88>)
 801a6e4:	60e3      	str	r3, [r4, #12]
 801a6e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a6ea:	6665      	str	r5, [r4, #100]	; 0x64
 801a6ec:	f000 f847 	bl	801a77e <__retarget_lock_init_recursive>
 801a6f0:	f7ff ff96 	bl	801a620 <__sfp_lock_release>
 801a6f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a6f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a6fc:	6025      	str	r5, [r4, #0]
 801a6fe:	61a5      	str	r5, [r4, #24]
 801a700:	2208      	movs	r2, #8
 801a702:	4629      	mov	r1, r5
 801a704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a708:	f7ff fbe4 	bl	8019ed4 <memset>
 801a70c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a714:	4620      	mov	r0, r4
 801a716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a718:	3468      	adds	r4, #104	; 0x68
 801a71a:	e7d9      	b.n	801a6d0 <__sfp+0x1c>
 801a71c:	2104      	movs	r1, #4
 801a71e:	4638      	mov	r0, r7
 801a720:	f7ff ff62 	bl	801a5e8 <__sfmoreglue>
 801a724:	4604      	mov	r4, r0
 801a726:	6030      	str	r0, [r6, #0]
 801a728:	2800      	cmp	r0, #0
 801a72a:	d1d5      	bne.n	801a6d8 <__sfp+0x24>
 801a72c:	f7ff ff78 	bl	801a620 <__sfp_lock_release>
 801a730:	230c      	movs	r3, #12
 801a732:	603b      	str	r3, [r7, #0]
 801a734:	e7ee      	b.n	801a714 <__sfp+0x60>
 801a736:	bf00      	nop
 801a738:	0801bd14 	.word	0x0801bd14
 801a73c:	ffff0001 	.word	0xffff0001

0801a740 <_fwalk_reent>:
 801a740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a744:	4606      	mov	r6, r0
 801a746:	4688      	mov	r8, r1
 801a748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a74c:	2700      	movs	r7, #0
 801a74e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a752:	f1b9 0901 	subs.w	r9, r9, #1
 801a756:	d505      	bpl.n	801a764 <_fwalk_reent+0x24>
 801a758:	6824      	ldr	r4, [r4, #0]
 801a75a:	2c00      	cmp	r4, #0
 801a75c:	d1f7      	bne.n	801a74e <_fwalk_reent+0xe>
 801a75e:	4638      	mov	r0, r7
 801a760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a764:	89ab      	ldrh	r3, [r5, #12]
 801a766:	2b01      	cmp	r3, #1
 801a768:	d907      	bls.n	801a77a <_fwalk_reent+0x3a>
 801a76a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a76e:	3301      	adds	r3, #1
 801a770:	d003      	beq.n	801a77a <_fwalk_reent+0x3a>
 801a772:	4629      	mov	r1, r5
 801a774:	4630      	mov	r0, r6
 801a776:	47c0      	blx	r8
 801a778:	4307      	orrs	r7, r0
 801a77a:	3568      	adds	r5, #104	; 0x68
 801a77c:	e7e9      	b.n	801a752 <_fwalk_reent+0x12>

0801a77e <__retarget_lock_init_recursive>:
 801a77e:	4770      	bx	lr

0801a780 <__retarget_lock_acquire_recursive>:
 801a780:	4770      	bx	lr

0801a782 <__retarget_lock_release_recursive>:
 801a782:	4770      	bx	lr

0801a784 <__swhatbuf_r>:
 801a784:	b570      	push	{r4, r5, r6, lr}
 801a786:	460e      	mov	r6, r1
 801a788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a78c:	2900      	cmp	r1, #0
 801a78e:	b096      	sub	sp, #88	; 0x58
 801a790:	4614      	mov	r4, r2
 801a792:	461d      	mov	r5, r3
 801a794:	da08      	bge.n	801a7a8 <__swhatbuf_r+0x24>
 801a796:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a79a:	2200      	movs	r2, #0
 801a79c:	602a      	str	r2, [r5, #0]
 801a79e:	061a      	lsls	r2, r3, #24
 801a7a0:	d410      	bmi.n	801a7c4 <__swhatbuf_r+0x40>
 801a7a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a7a6:	e00e      	b.n	801a7c6 <__swhatbuf_r+0x42>
 801a7a8:	466a      	mov	r2, sp
 801a7aa:	f000 fd0d 	bl	801b1c8 <_fstat_r>
 801a7ae:	2800      	cmp	r0, #0
 801a7b0:	dbf1      	blt.n	801a796 <__swhatbuf_r+0x12>
 801a7b2:	9a01      	ldr	r2, [sp, #4]
 801a7b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a7b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a7bc:	425a      	negs	r2, r3
 801a7be:	415a      	adcs	r2, r3
 801a7c0:	602a      	str	r2, [r5, #0]
 801a7c2:	e7ee      	b.n	801a7a2 <__swhatbuf_r+0x1e>
 801a7c4:	2340      	movs	r3, #64	; 0x40
 801a7c6:	2000      	movs	r0, #0
 801a7c8:	6023      	str	r3, [r4, #0]
 801a7ca:	b016      	add	sp, #88	; 0x58
 801a7cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a7d0 <__smakebuf_r>:
 801a7d0:	898b      	ldrh	r3, [r1, #12]
 801a7d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a7d4:	079d      	lsls	r5, r3, #30
 801a7d6:	4606      	mov	r6, r0
 801a7d8:	460c      	mov	r4, r1
 801a7da:	d507      	bpl.n	801a7ec <__smakebuf_r+0x1c>
 801a7dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a7e0:	6023      	str	r3, [r4, #0]
 801a7e2:	6123      	str	r3, [r4, #16]
 801a7e4:	2301      	movs	r3, #1
 801a7e6:	6163      	str	r3, [r4, #20]
 801a7e8:	b002      	add	sp, #8
 801a7ea:	bd70      	pop	{r4, r5, r6, pc}
 801a7ec:	ab01      	add	r3, sp, #4
 801a7ee:	466a      	mov	r2, sp
 801a7f0:	f7ff ffc8 	bl	801a784 <__swhatbuf_r>
 801a7f4:	9900      	ldr	r1, [sp, #0]
 801a7f6:	4605      	mov	r5, r0
 801a7f8:	4630      	mov	r0, r6
 801a7fa:	f7ff fbdf 	bl	8019fbc <_malloc_r>
 801a7fe:	b948      	cbnz	r0, 801a814 <__smakebuf_r+0x44>
 801a800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a804:	059a      	lsls	r2, r3, #22
 801a806:	d4ef      	bmi.n	801a7e8 <__smakebuf_r+0x18>
 801a808:	f023 0303 	bic.w	r3, r3, #3
 801a80c:	f043 0302 	orr.w	r3, r3, #2
 801a810:	81a3      	strh	r3, [r4, #12]
 801a812:	e7e3      	b.n	801a7dc <__smakebuf_r+0xc>
 801a814:	4b0d      	ldr	r3, [pc, #52]	; (801a84c <__smakebuf_r+0x7c>)
 801a816:	62b3      	str	r3, [r6, #40]	; 0x28
 801a818:	89a3      	ldrh	r3, [r4, #12]
 801a81a:	6020      	str	r0, [r4, #0]
 801a81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a820:	81a3      	strh	r3, [r4, #12]
 801a822:	9b00      	ldr	r3, [sp, #0]
 801a824:	6163      	str	r3, [r4, #20]
 801a826:	9b01      	ldr	r3, [sp, #4]
 801a828:	6120      	str	r0, [r4, #16]
 801a82a:	b15b      	cbz	r3, 801a844 <__smakebuf_r+0x74>
 801a82c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a830:	4630      	mov	r0, r6
 801a832:	f000 fcdb 	bl	801b1ec <_isatty_r>
 801a836:	b128      	cbz	r0, 801a844 <__smakebuf_r+0x74>
 801a838:	89a3      	ldrh	r3, [r4, #12]
 801a83a:	f023 0303 	bic.w	r3, r3, #3
 801a83e:	f043 0301 	orr.w	r3, r3, #1
 801a842:	81a3      	strh	r3, [r4, #12]
 801a844:	89a0      	ldrh	r0, [r4, #12]
 801a846:	4305      	orrs	r5, r0
 801a848:	81a5      	strh	r5, [r4, #12]
 801a84a:	e7cd      	b.n	801a7e8 <__smakebuf_r+0x18>
 801a84c:	0801a5dd 	.word	0x0801a5dd

0801a850 <__malloc_lock>:
 801a850:	4801      	ldr	r0, [pc, #4]	; (801a858 <__malloc_lock+0x8>)
 801a852:	f7ff bf95 	b.w	801a780 <__retarget_lock_acquire_recursive>
 801a856:	bf00      	nop
 801a858:	240071d8 	.word	0x240071d8

0801a85c <__malloc_unlock>:
 801a85c:	4801      	ldr	r0, [pc, #4]	; (801a864 <__malloc_unlock+0x8>)
 801a85e:	f7ff bf90 	b.w	801a782 <__retarget_lock_release_recursive>
 801a862:	bf00      	nop
 801a864:	240071d8 	.word	0x240071d8

0801a868 <__ssputs_r>:
 801a868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a86c:	688e      	ldr	r6, [r1, #8]
 801a86e:	429e      	cmp	r6, r3
 801a870:	4682      	mov	sl, r0
 801a872:	460c      	mov	r4, r1
 801a874:	4690      	mov	r8, r2
 801a876:	461f      	mov	r7, r3
 801a878:	d838      	bhi.n	801a8ec <__ssputs_r+0x84>
 801a87a:	898a      	ldrh	r2, [r1, #12]
 801a87c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a880:	d032      	beq.n	801a8e8 <__ssputs_r+0x80>
 801a882:	6825      	ldr	r5, [r4, #0]
 801a884:	6909      	ldr	r1, [r1, #16]
 801a886:	eba5 0901 	sub.w	r9, r5, r1
 801a88a:	6965      	ldr	r5, [r4, #20]
 801a88c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a894:	3301      	adds	r3, #1
 801a896:	444b      	add	r3, r9
 801a898:	106d      	asrs	r5, r5, #1
 801a89a:	429d      	cmp	r5, r3
 801a89c:	bf38      	it	cc
 801a89e:	461d      	movcc	r5, r3
 801a8a0:	0553      	lsls	r3, r2, #21
 801a8a2:	d531      	bpl.n	801a908 <__ssputs_r+0xa0>
 801a8a4:	4629      	mov	r1, r5
 801a8a6:	f7ff fb89 	bl	8019fbc <_malloc_r>
 801a8aa:	4606      	mov	r6, r0
 801a8ac:	b950      	cbnz	r0, 801a8c4 <__ssputs_r+0x5c>
 801a8ae:	230c      	movs	r3, #12
 801a8b0:	f8ca 3000 	str.w	r3, [sl]
 801a8b4:	89a3      	ldrh	r3, [r4, #12]
 801a8b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8ba:	81a3      	strh	r3, [r4, #12]
 801a8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8c4:	6921      	ldr	r1, [r4, #16]
 801a8c6:	464a      	mov	r2, r9
 801a8c8:	f7ff faf6 	bl	8019eb8 <memcpy>
 801a8cc:	89a3      	ldrh	r3, [r4, #12]
 801a8ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a8d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a8d6:	81a3      	strh	r3, [r4, #12]
 801a8d8:	6126      	str	r6, [r4, #16]
 801a8da:	6165      	str	r5, [r4, #20]
 801a8dc:	444e      	add	r6, r9
 801a8de:	eba5 0509 	sub.w	r5, r5, r9
 801a8e2:	6026      	str	r6, [r4, #0]
 801a8e4:	60a5      	str	r5, [r4, #8]
 801a8e6:	463e      	mov	r6, r7
 801a8e8:	42be      	cmp	r6, r7
 801a8ea:	d900      	bls.n	801a8ee <__ssputs_r+0x86>
 801a8ec:	463e      	mov	r6, r7
 801a8ee:	6820      	ldr	r0, [r4, #0]
 801a8f0:	4632      	mov	r2, r6
 801a8f2:	4641      	mov	r1, r8
 801a8f4:	f000 fc9c 	bl	801b230 <memmove>
 801a8f8:	68a3      	ldr	r3, [r4, #8]
 801a8fa:	1b9b      	subs	r3, r3, r6
 801a8fc:	60a3      	str	r3, [r4, #8]
 801a8fe:	6823      	ldr	r3, [r4, #0]
 801a900:	4433      	add	r3, r6
 801a902:	6023      	str	r3, [r4, #0]
 801a904:	2000      	movs	r0, #0
 801a906:	e7db      	b.n	801a8c0 <__ssputs_r+0x58>
 801a908:	462a      	mov	r2, r5
 801a90a:	f000 fcab 	bl	801b264 <_realloc_r>
 801a90e:	4606      	mov	r6, r0
 801a910:	2800      	cmp	r0, #0
 801a912:	d1e1      	bne.n	801a8d8 <__ssputs_r+0x70>
 801a914:	6921      	ldr	r1, [r4, #16]
 801a916:	4650      	mov	r0, sl
 801a918:	f7ff fae4 	bl	8019ee4 <_free_r>
 801a91c:	e7c7      	b.n	801a8ae <__ssputs_r+0x46>
	...

0801a920 <_svfiprintf_r>:
 801a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a924:	4698      	mov	r8, r3
 801a926:	898b      	ldrh	r3, [r1, #12]
 801a928:	061b      	lsls	r3, r3, #24
 801a92a:	b09d      	sub	sp, #116	; 0x74
 801a92c:	4607      	mov	r7, r0
 801a92e:	460d      	mov	r5, r1
 801a930:	4614      	mov	r4, r2
 801a932:	d50e      	bpl.n	801a952 <_svfiprintf_r+0x32>
 801a934:	690b      	ldr	r3, [r1, #16]
 801a936:	b963      	cbnz	r3, 801a952 <_svfiprintf_r+0x32>
 801a938:	2140      	movs	r1, #64	; 0x40
 801a93a:	f7ff fb3f 	bl	8019fbc <_malloc_r>
 801a93e:	6028      	str	r0, [r5, #0]
 801a940:	6128      	str	r0, [r5, #16]
 801a942:	b920      	cbnz	r0, 801a94e <_svfiprintf_r+0x2e>
 801a944:	230c      	movs	r3, #12
 801a946:	603b      	str	r3, [r7, #0]
 801a948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a94c:	e0d1      	b.n	801aaf2 <_svfiprintf_r+0x1d2>
 801a94e:	2340      	movs	r3, #64	; 0x40
 801a950:	616b      	str	r3, [r5, #20]
 801a952:	2300      	movs	r3, #0
 801a954:	9309      	str	r3, [sp, #36]	; 0x24
 801a956:	2320      	movs	r3, #32
 801a958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a95c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a960:	2330      	movs	r3, #48	; 0x30
 801a962:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ab0c <_svfiprintf_r+0x1ec>
 801a966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a96a:	f04f 0901 	mov.w	r9, #1
 801a96e:	4623      	mov	r3, r4
 801a970:	469a      	mov	sl, r3
 801a972:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a976:	b10a      	cbz	r2, 801a97c <_svfiprintf_r+0x5c>
 801a978:	2a25      	cmp	r2, #37	; 0x25
 801a97a:	d1f9      	bne.n	801a970 <_svfiprintf_r+0x50>
 801a97c:	ebba 0b04 	subs.w	fp, sl, r4
 801a980:	d00b      	beq.n	801a99a <_svfiprintf_r+0x7a>
 801a982:	465b      	mov	r3, fp
 801a984:	4622      	mov	r2, r4
 801a986:	4629      	mov	r1, r5
 801a988:	4638      	mov	r0, r7
 801a98a:	f7ff ff6d 	bl	801a868 <__ssputs_r>
 801a98e:	3001      	adds	r0, #1
 801a990:	f000 80aa 	beq.w	801aae8 <_svfiprintf_r+0x1c8>
 801a994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a996:	445a      	add	r2, fp
 801a998:	9209      	str	r2, [sp, #36]	; 0x24
 801a99a:	f89a 3000 	ldrb.w	r3, [sl]
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	f000 80a2 	beq.w	801aae8 <_svfiprintf_r+0x1c8>
 801a9a4:	2300      	movs	r3, #0
 801a9a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a9aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a9ae:	f10a 0a01 	add.w	sl, sl, #1
 801a9b2:	9304      	str	r3, [sp, #16]
 801a9b4:	9307      	str	r3, [sp, #28]
 801a9b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a9ba:	931a      	str	r3, [sp, #104]	; 0x68
 801a9bc:	4654      	mov	r4, sl
 801a9be:	2205      	movs	r2, #5
 801a9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9c4:	4851      	ldr	r0, [pc, #324]	; (801ab0c <_svfiprintf_r+0x1ec>)
 801a9c6:	f7e5 fcbb 	bl	8000340 <memchr>
 801a9ca:	9a04      	ldr	r2, [sp, #16]
 801a9cc:	b9d8      	cbnz	r0, 801aa06 <_svfiprintf_r+0xe6>
 801a9ce:	06d0      	lsls	r0, r2, #27
 801a9d0:	bf44      	itt	mi
 801a9d2:	2320      	movmi	r3, #32
 801a9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9d8:	0711      	lsls	r1, r2, #28
 801a9da:	bf44      	itt	mi
 801a9dc:	232b      	movmi	r3, #43	; 0x2b
 801a9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9e2:	f89a 3000 	ldrb.w	r3, [sl]
 801a9e6:	2b2a      	cmp	r3, #42	; 0x2a
 801a9e8:	d015      	beq.n	801aa16 <_svfiprintf_r+0xf6>
 801a9ea:	9a07      	ldr	r2, [sp, #28]
 801a9ec:	4654      	mov	r4, sl
 801a9ee:	2000      	movs	r0, #0
 801a9f0:	f04f 0c0a 	mov.w	ip, #10
 801a9f4:	4621      	mov	r1, r4
 801a9f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9fa:	3b30      	subs	r3, #48	; 0x30
 801a9fc:	2b09      	cmp	r3, #9
 801a9fe:	d94e      	bls.n	801aa9e <_svfiprintf_r+0x17e>
 801aa00:	b1b0      	cbz	r0, 801aa30 <_svfiprintf_r+0x110>
 801aa02:	9207      	str	r2, [sp, #28]
 801aa04:	e014      	b.n	801aa30 <_svfiprintf_r+0x110>
 801aa06:	eba0 0308 	sub.w	r3, r0, r8
 801aa0a:	fa09 f303 	lsl.w	r3, r9, r3
 801aa0e:	4313      	orrs	r3, r2
 801aa10:	9304      	str	r3, [sp, #16]
 801aa12:	46a2      	mov	sl, r4
 801aa14:	e7d2      	b.n	801a9bc <_svfiprintf_r+0x9c>
 801aa16:	9b03      	ldr	r3, [sp, #12]
 801aa18:	1d19      	adds	r1, r3, #4
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	9103      	str	r1, [sp, #12]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	bfbb      	ittet	lt
 801aa22:	425b      	neglt	r3, r3
 801aa24:	f042 0202 	orrlt.w	r2, r2, #2
 801aa28:	9307      	strge	r3, [sp, #28]
 801aa2a:	9307      	strlt	r3, [sp, #28]
 801aa2c:	bfb8      	it	lt
 801aa2e:	9204      	strlt	r2, [sp, #16]
 801aa30:	7823      	ldrb	r3, [r4, #0]
 801aa32:	2b2e      	cmp	r3, #46	; 0x2e
 801aa34:	d10c      	bne.n	801aa50 <_svfiprintf_r+0x130>
 801aa36:	7863      	ldrb	r3, [r4, #1]
 801aa38:	2b2a      	cmp	r3, #42	; 0x2a
 801aa3a:	d135      	bne.n	801aaa8 <_svfiprintf_r+0x188>
 801aa3c:	9b03      	ldr	r3, [sp, #12]
 801aa3e:	1d1a      	adds	r2, r3, #4
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	9203      	str	r2, [sp, #12]
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	bfb8      	it	lt
 801aa48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801aa4c:	3402      	adds	r4, #2
 801aa4e:	9305      	str	r3, [sp, #20]
 801aa50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ab1c <_svfiprintf_r+0x1fc>
 801aa54:	7821      	ldrb	r1, [r4, #0]
 801aa56:	2203      	movs	r2, #3
 801aa58:	4650      	mov	r0, sl
 801aa5a:	f7e5 fc71 	bl	8000340 <memchr>
 801aa5e:	b140      	cbz	r0, 801aa72 <_svfiprintf_r+0x152>
 801aa60:	2340      	movs	r3, #64	; 0x40
 801aa62:	eba0 000a 	sub.w	r0, r0, sl
 801aa66:	fa03 f000 	lsl.w	r0, r3, r0
 801aa6a:	9b04      	ldr	r3, [sp, #16]
 801aa6c:	4303      	orrs	r3, r0
 801aa6e:	3401      	adds	r4, #1
 801aa70:	9304      	str	r3, [sp, #16]
 801aa72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa76:	4826      	ldr	r0, [pc, #152]	; (801ab10 <_svfiprintf_r+0x1f0>)
 801aa78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa7c:	2206      	movs	r2, #6
 801aa7e:	f7e5 fc5f 	bl	8000340 <memchr>
 801aa82:	2800      	cmp	r0, #0
 801aa84:	d038      	beq.n	801aaf8 <_svfiprintf_r+0x1d8>
 801aa86:	4b23      	ldr	r3, [pc, #140]	; (801ab14 <_svfiprintf_r+0x1f4>)
 801aa88:	bb1b      	cbnz	r3, 801aad2 <_svfiprintf_r+0x1b2>
 801aa8a:	9b03      	ldr	r3, [sp, #12]
 801aa8c:	3307      	adds	r3, #7
 801aa8e:	f023 0307 	bic.w	r3, r3, #7
 801aa92:	3308      	adds	r3, #8
 801aa94:	9303      	str	r3, [sp, #12]
 801aa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa98:	4433      	add	r3, r6
 801aa9a:	9309      	str	r3, [sp, #36]	; 0x24
 801aa9c:	e767      	b.n	801a96e <_svfiprintf_r+0x4e>
 801aa9e:	fb0c 3202 	mla	r2, ip, r2, r3
 801aaa2:	460c      	mov	r4, r1
 801aaa4:	2001      	movs	r0, #1
 801aaa6:	e7a5      	b.n	801a9f4 <_svfiprintf_r+0xd4>
 801aaa8:	2300      	movs	r3, #0
 801aaaa:	3401      	adds	r4, #1
 801aaac:	9305      	str	r3, [sp, #20]
 801aaae:	4619      	mov	r1, r3
 801aab0:	f04f 0c0a 	mov.w	ip, #10
 801aab4:	4620      	mov	r0, r4
 801aab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aaba:	3a30      	subs	r2, #48	; 0x30
 801aabc:	2a09      	cmp	r2, #9
 801aabe:	d903      	bls.n	801aac8 <_svfiprintf_r+0x1a8>
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d0c5      	beq.n	801aa50 <_svfiprintf_r+0x130>
 801aac4:	9105      	str	r1, [sp, #20]
 801aac6:	e7c3      	b.n	801aa50 <_svfiprintf_r+0x130>
 801aac8:	fb0c 2101 	mla	r1, ip, r1, r2
 801aacc:	4604      	mov	r4, r0
 801aace:	2301      	movs	r3, #1
 801aad0:	e7f0      	b.n	801aab4 <_svfiprintf_r+0x194>
 801aad2:	ab03      	add	r3, sp, #12
 801aad4:	9300      	str	r3, [sp, #0]
 801aad6:	462a      	mov	r2, r5
 801aad8:	4b0f      	ldr	r3, [pc, #60]	; (801ab18 <_svfiprintf_r+0x1f8>)
 801aada:	a904      	add	r1, sp, #16
 801aadc:	4638      	mov	r0, r7
 801aade:	f3af 8000 	nop.w
 801aae2:	1c42      	adds	r2, r0, #1
 801aae4:	4606      	mov	r6, r0
 801aae6:	d1d6      	bne.n	801aa96 <_svfiprintf_r+0x176>
 801aae8:	89ab      	ldrh	r3, [r5, #12]
 801aaea:	065b      	lsls	r3, r3, #25
 801aaec:	f53f af2c 	bmi.w	801a948 <_svfiprintf_r+0x28>
 801aaf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aaf2:	b01d      	add	sp, #116	; 0x74
 801aaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaf8:	ab03      	add	r3, sp, #12
 801aafa:	9300      	str	r3, [sp, #0]
 801aafc:	462a      	mov	r2, r5
 801aafe:	4b06      	ldr	r3, [pc, #24]	; (801ab18 <_svfiprintf_r+0x1f8>)
 801ab00:	a904      	add	r1, sp, #16
 801ab02:	4638      	mov	r0, r7
 801ab04:	f000 f9d4 	bl	801aeb0 <_printf_i>
 801ab08:	e7eb      	b.n	801aae2 <_svfiprintf_r+0x1c2>
 801ab0a:	bf00      	nop
 801ab0c:	0801bd78 	.word	0x0801bd78
 801ab10:	0801bd82 	.word	0x0801bd82
 801ab14:	00000000 	.word	0x00000000
 801ab18:	0801a869 	.word	0x0801a869
 801ab1c:	0801bd7e 	.word	0x0801bd7e

0801ab20 <__sfputc_r>:
 801ab20:	6893      	ldr	r3, [r2, #8]
 801ab22:	3b01      	subs	r3, #1
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	b410      	push	{r4}
 801ab28:	6093      	str	r3, [r2, #8]
 801ab2a:	da08      	bge.n	801ab3e <__sfputc_r+0x1e>
 801ab2c:	6994      	ldr	r4, [r2, #24]
 801ab2e:	42a3      	cmp	r3, r4
 801ab30:	db01      	blt.n	801ab36 <__sfputc_r+0x16>
 801ab32:	290a      	cmp	r1, #10
 801ab34:	d103      	bne.n	801ab3e <__sfputc_r+0x1e>
 801ab36:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab3a:	f7ff bba9 	b.w	801a290 <__swbuf_r>
 801ab3e:	6813      	ldr	r3, [r2, #0]
 801ab40:	1c58      	adds	r0, r3, #1
 801ab42:	6010      	str	r0, [r2, #0]
 801ab44:	7019      	strb	r1, [r3, #0]
 801ab46:	4608      	mov	r0, r1
 801ab48:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab4c:	4770      	bx	lr

0801ab4e <__sfputs_r>:
 801ab4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab50:	4606      	mov	r6, r0
 801ab52:	460f      	mov	r7, r1
 801ab54:	4614      	mov	r4, r2
 801ab56:	18d5      	adds	r5, r2, r3
 801ab58:	42ac      	cmp	r4, r5
 801ab5a:	d101      	bne.n	801ab60 <__sfputs_r+0x12>
 801ab5c:	2000      	movs	r0, #0
 801ab5e:	e007      	b.n	801ab70 <__sfputs_r+0x22>
 801ab60:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab64:	463a      	mov	r2, r7
 801ab66:	4630      	mov	r0, r6
 801ab68:	f7ff ffda 	bl	801ab20 <__sfputc_r>
 801ab6c:	1c43      	adds	r3, r0, #1
 801ab6e:	d1f3      	bne.n	801ab58 <__sfputs_r+0xa>
 801ab70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ab74 <_vfiprintf_r>:
 801ab74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab78:	460d      	mov	r5, r1
 801ab7a:	b09d      	sub	sp, #116	; 0x74
 801ab7c:	4614      	mov	r4, r2
 801ab7e:	4698      	mov	r8, r3
 801ab80:	4606      	mov	r6, r0
 801ab82:	b118      	cbz	r0, 801ab8c <_vfiprintf_r+0x18>
 801ab84:	6983      	ldr	r3, [r0, #24]
 801ab86:	b90b      	cbnz	r3, 801ab8c <_vfiprintf_r+0x18>
 801ab88:	f7ff fd5c 	bl	801a644 <__sinit>
 801ab8c:	4b89      	ldr	r3, [pc, #548]	; (801adb4 <_vfiprintf_r+0x240>)
 801ab8e:	429d      	cmp	r5, r3
 801ab90:	d11b      	bne.n	801abca <_vfiprintf_r+0x56>
 801ab92:	6875      	ldr	r5, [r6, #4]
 801ab94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab96:	07d9      	lsls	r1, r3, #31
 801ab98:	d405      	bmi.n	801aba6 <_vfiprintf_r+0x32>
 801ab9a:	89ab      	ldrh	r3, [r5, #12]
 801ab9c:	059a      	lsls	r2, r3, #22
 801ab9e:	d402      	bmi.n	801aba6 <_vfiprintf_r+0x32>
 801aba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aba2:	f7ff fded 	bl	801a780 <__retarget_lock_acquire_recursive>
 801aba6:	89ab      	ldrh	r3, [r5, #12]
 801aba8:	071b      	lsls	r3, r3, #28
 801abaa:	d501      	bpl.n	801abb0 <_vfiprintf_r+0x3c>
 801abac:	692b      	ldr	r3, [r5, #16]
 801abae:	b9eb      	cbnz	r3, 801abec <_vfiprintf_r+0x78>
 801abb0:	4629      	mov	r1, r5
 801abb2:	4630      	mov	r0, r6
 801abb4:	f7ff fbbe 	bl	801a334 <__swsetup_r>
 801abb8:	b1c0      	cbz	r0, 801abec <_vfiprintf_r+0x78>
 801abba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801abbc:	07dc      	lsls	r4, r3, #31
 801abbe:	d50e      	bpl.n	801abde <_vfiprintf_r+0x6a>
 801abc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801abc4:	b01d      	add	sp, #116	; 0x74
 801abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abca:	4b7b      	ldr	r3, [pc, #492]	; (801adb8 <_vfiprintf_r+0x244>)
 801abcc:	429d      	cmp	r5, r3
 801abce:	d101      	bne.n	801abd4 <_vfiprintf_r+0x60>
 801abd0:	68b5      	ldr	r5, [r6, #8]
 801abd2:	e7df      	b.n	801ab94 <_vfiprintf_r+0x20>
 801abd4:	4b79      	ldr	r3, [pc, #484]	; (801adbc <_vfiprintf_r+0x248>)
 801abd6:	429d      	cmp	r5, r3
 801abd8:	bf08      	it	eq
 801abda:	68f5      	ldreq	r5, [r6, #12]
 801abdc:	e7da      	b.n	801ab94 <_vfiprintf_r+0x20>
 801abde:	89ab      	ldrh	r3, [r5, #12]
 801abe0:	0598      	lsls	r0, r3, #22
 801abe2:	d4ed      	bmi.n	801abc0 <_vfiprintf_r+0x4c>
 801abe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801abe6:	f7ff fdcc 	bl	801a782 <__retarget_lock_release_recursive>
 801abea:	e7e9      	b.n	801abc0 <_vfiprintf_r+0x4c>
 801abec:	2300      	movs	r3, #0
 801abee:	9309      	str	r3, [sp, #36]	; 0x24
 801abf0:	2320      	movs	r3, #32
 801abf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801abf6:	f8cd 800c 	str.w	r8, [sp, #12]
 801abfa:	2330      	movs	r3, #48	; 0x30
 801abfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801adc0 <_vfiprintf_r+0x24c>
 801ac00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ac04:	f04f 0901 	mov.w	r9, #1
 801ac08:	4623      	mov	r3, r4
 801ac0a:	469a      	mov	sl, r3
 801ac0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac10:	b10a      	cbz	r2, 801ac16 <_vfiprintf_r+0xa2>
 801ac12:	2a25      	cmp	r2, #37	; 0x25
 801ac14:	d1f9      	bne.n	801ac0a <_vfiprintf_r+0x96>
 801ac16:	ebba 0b04 	subs.w	fp, sl, r4
 801ac1a:	d00b      	beq.n	801ac34 <_vfiprintf_r+0xc0>
 801ac1c:	465b      	mov	r3, fp
 801ac1e:	4622      	mov	r2, r4
 801ac20:	4629      	mov	r1, r5
 801ac22:	4630      	mov	r0, r6
 801ac24:	f7ff ff93 	bl	801ab4e <__sfputs_r>
 801ac28:	3001      	adds	r0, #1
 801ac2a:	f000 80aa 	beq.w	801ad82 <_vfiprintf_r+0x20e>
 801ac2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac30:	445a      	add	r2, fp
 801ac32:	9209      	str	r2, [sp, #36]	; 0x24
 801ac34:	f89a 3000 	ldrb.w	r3, [sl]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	f000 80a2 	beq.w	801ad82 <_vfiprintf_r+0x20e>
 801ac3e:	2300      	movs	r3, #0
 801ac40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ac44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac48:	f10a 0a01 	add.w	sl, sl, #1
 801ac4c:	9304      	str	r3, [sp, #16]
 801ac4e:	9307      	str	r3, [sp, #28]
 801ac50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ac54:	931a      	str	r3, [sp, #104]	; 0x68
 801ac56:	4654      	mov	r4, sl
 801ac58:	2205      	movs	r2, #5
 801ac5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac5e:	4858      	ldr	r0, [pc, #352]	; (801adc0 <_vfiprintf_r+0x24c>)
 801ac60:	f7e5 fb6e 	bl	8000340 <memchr>
 801ac64:	9a04      	ldr	r2, [sp, #16]
 801ac66:	b9d8      	cbnz	r0, 801aca0 <_vfiprintf_r+0x12c>
 801ac68:	06d1      	lsls	r1, r2, #27
 801ac6a:	bf44      	itt	mi
 801ac6c:	2320      	movmi	r3, #32
 801ac6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac72:	0713      	lsls	r3, r2, #28
 801ac74:	bf44      	itt	mi
 801ac76:	232b      	movmi	r3, #43	; 0x2b
 801ac78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac7c:	f89a 3000 	ldrb.w	r3, [sl]
 801ac80:	2b2a      	cmp	r3, #42	; 0x2a
 801ac82:	d015      	beq.n	801acb0 <_vfiprintf_r+0x13c>
 801ac84:	9a07      	ldr	r2, [sp, #28]
 801ac86:	4654      	mov	r4, sl
 801ac88:	2000      	movs	r0, #0
 801ac8a:	f04f 0c0a 	mov.w	ip, #10
 801ac8e:	4621      	mov	r1, r4
 801ac90:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac94:	3b30      	subs	r3, #48	; 0x30
 801ac96:	2b09      	cmp	r3, #9
 801ac98:	d94e      	bls.n	801ad38 <_vfiprintf_r+0x1c4>
 801ac9a:	b1b0      	cbz	r0, 801acca <_vfiprintf_r+0x156>
 801ac9c:	9207      	str	r2, [sp, #28]
 801ac9e:	e014      	b.n	801acca <_vfiprintf_r+0x156>
 801aca0:	eba0 0308 	sub.w	r3, r0, r8
 801aca4:	fa09 f303 	lsl.w	r3, r9, r3
 801aca8:	4313      	orrs	r3, r2
 801acaa:	9304      	str	r3, [sp, #16]
 801acac:	46a2      	mov	sl, r4
 801acae:	e7d2      	b.n	801ac56 <_vfiprintf_r+0xe2>
 801acb0:	9b03      	ldr	r3, [sp, #12]
 801acb2:	1d19      	adds	r1, r3, #4
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	9103      	str	r1, [sp, #12]
 801acb8:	2b00      	cmp	r3, #0
 801acba:	bfbb      	ittet	lt
 801acbc:	425b      	neglt	r3, r3
 801acbe:	f042 0202 	orrlt.w	r2, r2, #2
 801acc2:	9307      	strge	r3, [sp, #28]
 801acc4:	9307      	strlt	r3, [sp, #28]
 801acc6:	bfb8      	it	lt
 801acc8:	9204      	strlt	r2, [sp, #16]
 801acca:	7823      	ldrb	r3, [r4, #0]
 801accc:	2b2e      	cmp	r3, #46	; 0x2e
 801acce:	d10c      	bne.n	801acea <_vfiprintf_r+0x176>
 801acd0:	7863      	ldrb	r3, [r4, #1]
 801acd2:	2b2a      	cmp	r3, #42	; 0x2a
 801acd4:	d135      	bne.n	801ad42 <_vfiprintf_r+0x1ce>
 801acd6:	9b03      	ldr	r3, [sp, #12]
 801acd8:	1d1a      	adds	r2, r3, #4
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	9203      	str	r2, [sp, #12]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	bfb8      	it	lt
 801ace2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ace6:	3402      	adds	r4, #2
 801ace8:	9305      	str	r3, [sp, #20]
 801acea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801add0 <_vfiprintf_r+0x25c>
 801acee:	7821      	ldrb	r1, [r4, #0]
 801acf0:	2203      	movs	r2, #3
 801acf2:	4650      	mov	r0, sl
 801acf4:	f7e5 fb24 	bl	8000340 <memchr>
 801acf8:	b140      	cbz	r0, 801ad0c <_vfiprintf_r+0x198>
 801acfa:	2340      	movs	r3, #64	; 0x40
 801acfc:	eba0 000a 	sub.w	r0, r0, sl
 801ad00:	fa03 f000 	lsl.w	r0, r3, r0
 801ad04:	9b04      	ldr	r3, [sp, #16]
 801ad06:	4303      	orrs	r3, r0
 801ad08:	3401      	adds	r4, #1
 801ad0a:	9304      	str	r3, [sp, #16]
 801ad0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad10:	482c      	ldr	r0, [pc, #176]	; (801adc4 <_vfiprintf_r+0x250>)
 801ad12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ad16:	2206      	movs	r2, #6
 801ad18:	f7e5 fb12 	bl	8000340 <memchr>
 801ad1c:	2800      	cmp	r0, #0
 801ad1e:	d03f      	beq.n	801ada0 <_vfiprintf_r+0x22c>
 801ad20:	4b29      	ldr	r3, [pc, #164]	; (801adc8 <_vfiprintf_r+0x254>)
 801ad22:	bb1b      	cbnz	r3, 801ad6c <_vfiprintf_r+0x1f8>
 801ad24:	9b03      	ldr	r3, [sp, #12]
 801ad26:	3307      	adds	r3, #7
 801ad28:	f023 0307 	bic.w	r3, r3, #7
 801ad2c:	3308      	adds	r3, #8
 801ad2e:	9303      	str	r3, [sp, #12]
 801ad30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad32:	443b      	add	r3, r7
 801ad34:	9309      	str	r3, [sp, #36]	; 0x24
 801ad36:	e767      	b.n	801ac08 <_vfiprintf_r+0x94>
 801ad38:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad3c:	460c      	mov	r4, r1
 801ad3e:	2001      	movs	r0, #1
 801ad40:	e7a5      	b.n	801ac8e <_vfiprintf_r+0x11a>
 801ad42:	2300      	movs	r3, #0
 801ad44:	3401      	adds	r4, #1
 801ad46:	9305      	str	r3, [sp, #20]
 801ad48:	4619      	mov	r1, r3
 801ad4a:	f04f 0c0a 	mov.w	ip, #10
 801ad4e:	4620      	mov	r0, r4
 801ad50:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad54:	3a30      	subs	r2, #48	; 0x30
 801ad56:	2a09      	cmp	r2, #9
 801ad58:	d903      	bls.n	801ad62 <_vfiprintf_r+0x1ee>
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d0c5      	beq.n	801acea <_vfiprintf_r+0x176>
 801ad5e:	9105      	str	r1, [sp, #20]
 801ad60:	e7c3      	b.n	801acea <_vfiprintf_r+0x176>
 801ad62:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad66:	4604      	mov	r4, r0
 801ad68:	2301      	movs	r3, #1
 801ad6a:	e7f0      	b.n	801ad4e <_vfiprintf_r+0x1da>
 801ad6c:	ab03      	add	r3, sp, #12
 801ad6e:	9300      	str	r3, [sp, #0]
 801ad70:	462a      	mov	r2, r5
 801ad72:	4b16      	ldr	r3, [pc, #88]	; (801adcc <_vfiprintf_r+0x258>)
 801ad74:	a904      	add	r1, sp, #16
 801ad76:	4630      	mov	r0, r6
 801ad78:	f3af 8000 	nop.w
 801ad7c:	4607      	mov	r7, r0
 801ad7e:	1c78      	adds	r0, r7, #1
 801ad80:	d1d6      	bne.n	801ad30 <_vfiprintf_r+0x1bc>
 801ad82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad84:	07d9      	lsls	r1, r3, #31
 801ad86:	d405      	bmi.n	801ad94 <_vfiprintf_r+0x220>
 801ad88:	89ab      	ldrh	r3, [r5, #12]
 801ad8a:	059a      	lsls	r2, r3, #22
 801ad8c:	d402      	bmi.n	801ad94 <_vfiprintf_r+0x220>
 801ad8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad90:	f7ff fcf7 	bl	801a782 <__retarget_lock_release_recursive>
 801ad94:	89ab      	ldrh	r3, [r5, #12]
 801ad96:	065b      	lsls	r3, r3, #25
 801ad98:	f53f af12 	bmi.w	801abc0 <_vfiprintf_r+0x4c>
 801ad9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ad9e:	e711      	b.n	801abc4 <_vfiprintf_r+0x50>
 801ada0:	ab03      	add	r3, sp, #12
 801ada2:	9300      	str	r3, [sp, #0]
 801ada4:	462a      	mov	r2, r5
 801ada6:	4b09      	ldr	r3, [pc, #36]	; (801adcc <_vfiprintf_r+0x258>)
 801ada8:	a904      	add	r1, sp, #16
 801adaa:	4630      	mov	r0, r6
 801adac:	f000 f880 	bl	801aeb0 <_printf_i>
 801adb0:	e7e4      	b.n	801ad7c <_vfiprintf_r+0x208>
 801adb2:	bf00      	nop
 801adb4:	0801bd38 	.word	0x0801bd38
 801adb8:	0801bd58 	.word	0x0801bd58
 801adbc:	0801bd18 	.word	0x0801bd18
 801adc0:	0801bd78 	.word	0x0801bd78
 801adc4:	0801bd82 	.word	0x0801bd82
 801adc8:	00000000 	.word	0x00000000
 801adcc:	0801ab4f 	.word	0x0801ab4f
 801add0:	0801bd7e 	.word	0x0801bd7e

0801add4 <_printf_common>:
 801add4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801add8:	4616      	mov	r6, r2
 801adda:	4699      	mov	r9, r3
 801addc:	688a      	ldr	r2, [r1, #8]
 801adde:	690b      	ldr	r3, [r1, #16]
 801ade0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ade4:	4293      	cmp	r3, r2
 801ade6:	bfb8      	it	lt
 801ade8:	4613      	movlt	r3, r2
 801adea:	6033      	str	r3, [r6, #0]
 801adec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801adf0:	4607      	mov	r7, r0
 801adf2:	460c      	mov	r4, r1
 801adf4:	b10a      	cbz	r2, 801adfa <_printf_common+0x26>
 801adf6:	3301      	adds	r3, #1
 801adf8:	6033      	str	r3, [r6, #0]
 801adfa:	6823      	ldr	r3, [r4, #0]
 801adfc:	0699      	lsls	r1, r3, #26
 801adfe:	bf42      	ittt	mi
 801ae00:	6833      	ldrmi	r3, [r6, #0]
 801ae02:	3302      	addmi	r3, #2
 801ae04:	6033      	strmi	r3, [r6, #0]
 801ae06:	6825      	ldr	r5, [r4, #0]
 801ae08:	f015 0506 	ands.w	r5, r5, #6
 801ae0c:	d106      	bne.n	801ae1c <_printf_common+0x48>
 801ae0e:	f104 0a19 	add.w	sl, r4, #25
 801ae12:	68e3      	ldr	r3, [r4, #12]
 801ae14:	6832      	ldr	r2, [r6, #0]
 801ae16:	1a9b      	subs	r3, r3, r2
 801ae18:	42ab      	cmp	r3, r5
 801ae1a:	dc26      	bgt.n	801ae6a <_printf_common+0x96>
 801ae1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ae20:	1e13      	subs	r3, r2, #0
 801ae22:	6822      	ldr	r2, [r4, #0]
 801ae24:	bf18      	it	ne
 801ae26:	2301      	movne	r3, #1
 801ae28:	0692      	lsls	r2, r2, #26
 801ae2a:	d42b      	bmi.n	801ae84 <_printf_common+0xb0>
 801ae2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae30:	4649      	mov	r1, r9
 801ae32:	4638      	mov	r0, r7
 801ae34:	47c0      	blx	r8
 801ae36:	3001      	adds	r0, #1
 801ae38:	d01e      	beq.n	801ae78 <_printf_common+0xa4>
 801ae3a:	6823      	ldr	r3, [r4, #0]
 801ae3c:	68e5      	ldr	r5, [r4, #12]
 801ae3e:	6832      	ldr	r2, [r6, #0]
 801ae40:	f003 0306 	and.w	r3, r3, #6
 801ae44:	2b04      	cmp	r3, #4
 801ae46:	bf08      	it	eq
 801ae48:	1aad      	subeq	r5, r5, r2
 801ae4a:	68a3      	ldr	r3, [r4, #8]
 801ae4c:	6922      	ldr	r2, [r4, #16]
 801ae4e:	bf0c      	ite	eq
 801ae50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae54:	2500      	movne	r5, #0
 801ae56:	4293      	cmp	r3, r2
 801ae58:	bfc4      	itt	gt
 801ae5a:	1a9b      	subgt	r3, r3, r2
 801ae5c:	18ed      	addgt	r5, r5, r3
 801ae5e:	2600      	movs	r6, #0
 801ae60:	341a      	adds	r4, #26
 801ae62:	42b5      	cmp	r5, r6
 801ae64:	d11a      	bne.n	801ae9c <_printf_common+0xc8>
 801ae66:	2000      	movs	r0, #0
 801ae68:	e008      	b.n	801ae7c <_printf_common+0xa8>
 801ae6a:	2301      	movs	r3, #1
 801ae6c:	4652      	mov	r2, sl
 801ae6e:	4649      	mov	r1, r9
 801ae70:	4638      	mov	r0, r7
 801ae72:	47c0      	blx	r8
 801ae74:	3001      	adds	r0, #1
 801ae76:	d103      	bne.n	801ae80 <_printf_common+0xac>
 801ae78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae80:	3501      	adds	r5, #1
 801ae82:	e7c6      	b.n	801ae12 <_printf_common+0x3e>
 801ae84:	18e1      	adds	r1, r4, r3
 801ae86:	1c5a      	adds	r2, r3, #1
 801ae88:	2030      	movs	r0, #48	; 0x30
 801ae8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ae8e:	4422      	add	r2, r4
 801ae90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ae94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ae98:	3302      	adds	r3, #2
 801ae9a:	e7c7      	b.n	801ae2c <_printf_common+0x58>
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	4622      	mov	r2, r4
 801aea0:	4649      	mov	r1, r9
 801aea2:	4638      	mov	r0, r7
 801aea4:	47c0      	blx	r8
 801aea6:	3001      	adds	r0, #1
 801aea8:	d0e6      	beq.n	801ae78 <_printf_common+0xa4>
 801aeaa:	3601      	adds	r6, #1
 801aeac:	e7d9      	b.n	801ae62 <_printf_common+0x8e>
	...

0801aeb0 <_printf_i>:
 801aeb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aeb4:	7e0f      	ldrb	r7, [r1, #24]
 801aeb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aeb8:	2f78      	cmp	r7, #120	; 0x78
 801aeba:	4691      	mov	r9, r2
 801aebc:	4680      	mov	r8, r0
 801aebe:	460c      	mov	r4, r1
 801aec0:	469a      	mov	sl, r3
 801aec2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801aec6:	d807      	bhi.n	801aed8 <_printf_i+0x28>
 801aec8:	2f62      	cmp	r7, #98	; 0x62
 801aeca:	d80a      	bhi.n	801aee2 <_printf_i+0x32>
 801aecc:	2f00      	cmp	r7, #0
 801aece:	f000 80d8 	beq.w	801b082 <_printf_i+0x1d2>
 801aed2:	2f58      	cmp	r7, #88	; 0x58
 801aed4:	f000 80a3 	beq.w	801b01e <_printf_i+0x16e>
 801aed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aedc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aee0:	e03a      	b.n	801af58 <_printf_i+0xa8>
 801aee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aee6:	2b15      	cmp	r3, #21
 801aee8:	d8f6      	bhi.n	801aed8 <_printf_i+0x28>
 801aeea:	a101      	add	r1, pc, #4	; (adr r1, 801aef0 <_printf_i+0x40>)
 801aeec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aef0:	0801af49 	.word	0x0801af49
 801aef4:	0801af5d 	.word	0x0801af5d
 801aef8:	0801aed9 	.word	0x0801aed9
 801aefc:	0801aed9 	.word	0x0801aed9
 801af00:	0801aed9 	.word	0x0801aed9
 801af04:	0801aed9 	.word	0x0801aed9
 801af08:	0801af5d 	.word	0x0801af5d
 801af0c:	0801aed9 	.word	0x0801aed9
 801af10:	0801aed9 	.word	0x0801aed9
 801af14:	0801aed9 	.word	0x0801aed9
 801af18:	0801aed9 	.word	0x0801aed9
 801af1c:	0801b069 	.word	0x0801b069
 801af20:	0801af8d 	.word	0x0801af8d
 801af24:	0801b04b 	.word	0x0801b04b
 801af28:	0801aed9 	.word	0x0801aed9
 801af2c:	0801aed9 	.word	0x0801aed9
 801af30:	0801b08b 	.word	0x0801b08b
 801af34:	0801aed9 	.word	0x0801aed9
 801af38:	0801af8d 	.word	0x0801af8d
 801af3c:	0801aed9 	.word	0x0801aed9
 801af40:	0801aed9 	.word	0x0801aed9
 801af44:	0801b053 	.word	0x0801b053
 801af48:	682b      	ldr	r3, [r5, #0]
 801af4a:	1d1a      	adds	r2, r3, #4
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	602a      	str	r2, [r5, #0]
 801af50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801af58:	2301      	movs	r3, #1
 801af5a:	e0a3      	b.n	801b0a4 <_printf_i+0x1f4>
 801af5c:	6820      	ldr	r0, [r4, #0]
 801af5e:	6829      	ldr	r1, [r5, #0]
 801af60:	0606      	lsls	r6, r0, #24
 801af62:	f101 0304 	add.w	r3, r1, #4
 801af66:	d50a      	bpl.n	801af7e <_printf_i+0xce>
 801af68:	680e      	ldr	r6, [r1, #0]
 801af6a:	602b      	str	r3, [r5, #0]
 801af6c:	2e00      	cmp	r6, #0
 801af6e:	da03      	bge.n	801af78 <_printf_i+0xc8>
 801af70:	232d      	movs	r3, #45	; 0x2d
 801af72:	4276      	negs	r6, r6
 801af74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af78:	485e      	ldr	r0, [pc, #376]	; (801b0f4 <_printf_i+0x244>)
 801af7a:	230a      	movs	r3, #10
 801af7c:	e019      	b.n	801afb2 <_printf_i+0x102>
 801af7e:	680e      	ldr	r6, [r1, #0]
 801af80:	602b      	str	r3, [r5, #0]
 801af82:	f010 0f40 	tst.w	r0, #64	; 0x40
 801af86:	bf18      	it	ne
 801af88:	b236      	sxthne	r6, r6
 801af8a:	e7ef      	b.n	801af6c <_printf_i+0xbc>
 801af8c:	682b      	ldr	r3, [r5, #0]
 801af8e:	6820      	ldr	r0, [r4, #0]
 801af90:	1d19      	adds	r1, r3, #4
 801af92:	6029      	str	r1, [r5, #0]
 801af94:	0601      	lsls	r1, r0, #24
 801af96:	d501      	bpl.n	801af9c <_printf_i+0xec>
 801af98:	681e      	ldr	r6, [r3, #0]
 801af9a:	e002      	b.n	801afa2 <_printf_i+0xf2>
 801af9c:	0646      	lsls	r6, r0, #25
 801af9e:	d5fb      	bpl.n	801af98 <_printf_i+0xe8>
 801afa0:	881e      	ldrh	r6, [r3, #0]
 801afa2:	4854      	ldr	r0, [pc, #336]	; (801b0f4 <_printf_i+0x244>)
 801afa4:	2f6f      	cmp	r7, #111	; 0x6f
 801afa6:	bf0c      	ite	eq
 801afa8:	2308      	moveq	r3, #8
 801afaa:	230a      	movne	r3, #10
 801afac:	2100      	movs	r1, #0
 801afae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801afb2:	6865      	ldr	r5, [r4, #4]
 801afb4:	60a5      	str	r5, [r4, #8]
 801afb6:	2d00      	cmp	r5, #0
 801afb8:	bfa2      	ittt	ge
 801afba:	6821      	ldrge	r1, [r4, #0]
 801afbc:	f021 0104 	bicge.w	r1, r1, #4
 801afc0:	6021      	strge	r1, [r4, #0]
 801afc2:	b90e      	cbnz	r6, 801afc8 <_printf_i+0x118>
 801afc4:	2d00      	cmp	r5, #0
 801afc6:	d04d      	beq.n	801b064 <_printf_i+0x1b4>
 801afc8:	4615      	mov	r5, r2
 801afca:	fbb6 f1f3 	udiv	r1, r6, r3
 801afce:	fb03 6711 	mls	r7, r3, r1, r6
 801afd2:	5dc7      	ldrb	r7, [r0, r7]
 801afd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801afd8:	4637      	mov	r7, r6
 801afda:	42bb      	cmp	r3, r7
 801afdc:	460e      	mov	r6, r1
 801afde:	d9f4      	bls.n	801afca <_printf_i+0x11a>
 801afe0:	2b08      	cmp	r3, #8
 801afe2:	d10b      	bne.n	801affc <_printf_i+0x14c>
 801afe4:	6823      	ldr	r3, [r4, #0]
 801afe6:	07de      	lsls	r6, r3, #31
 801afe8:	d508      	bpl.n	801affc <_printf_i+0x14c>
 801afea:	6923      	ldr	r3, [r4, #16]
 801afec:	6861      	ldr	r1, [r4, #4]
 801afee:	4299      	cmp	r1, r3
 801aff0:	bfde      	ittt	le
 801aff2:	2330      	movle	r3, #48	; 0x30
 801aff4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801aff8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801affc:	1b52      	subs	r2, r2, r5
 801affe:	6122      	str	r2, [r4, #16]
 801b000:	f8cd a000 	str.w	sl, [sp]
 801b004:	464b      	mov	r3, r9
 801b006:	aa03      	add	r2, sp, #12
 801b008:	4621      	mov	r1, r4
 801b00a:	4640      	mov	r0, r8
 801b00c:	f7ff fee2 	bl	801add4 <_printf_common>
 801b010:	3001      	adds	r0, #1
 801b012:	d14c      	bne.n	801b0ae <_printf_i+0x1fe>
 801b014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b018:	b004      	add	sp, #16
 801b01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b01e:	4835      	ldr	r0, [pc, #212]	; (801b0f4 <_printf_i+0x244>)
 801b020:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b024:	6829      	ldr	r1, [r5, #0]
 801b026:	6823      	ldr	r3, [r4, #0]
 801b028:	f851 6b04 	ldr.w	r6, [r1], #4
 801b02c:	6029      	str	r1, [r5, #0]
 801b02e:	061d      	lsls	r5, r3, #24
 801b030:	d514      	bpl.n	801b05c <_printf_i+0x1ac>
 801b032:	07df      	lsls	r7, r3, #31
 801b034:	bf44      	itt	mi
 801b036:	f043 0320 	orrmi.w	r3, r3, #32
 801b03a:	6023      	strmi	r3, [r4, #0]
 801b03c:	b91e      	cbnz	r6, 801b046 <_printf_i+0x196>
 801b03e:	6823      	ldr	r3, [r4, #0]
 801b040:	f023 0320 	bic.w	r3, r3, #32
 801b044:	6023      	str	r3, [r4, #0]
 801b046:	2310      	movs	r3, #16
 801b048:	e7b0      	b.n	801afac <_printf_i+0xfc>
 801b04a:	6823      	ldr	r3, [r4, #0]
 801b04c:	f043 0320 	orr.w	r3, r3, #32
 801b050:	6023      	str	r3, [r4, #0]
 801b052:	2378      	movs	r3, #120	; 0x78
 801b054:	4828      	ldr	r0, [pc, #160]	; (801b0f8 <_printf_i+0x248>)
 801b056:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b05a:	e7e3      	b.n	801b024 <_printf_i+0x174>
 801b05c:	0659      	lsls	r1, r3, #25
 801b05e:	bf48      	it	mi
 801b060:	b2b6      	uxthmi	r6, r6
 801b062:	e7e6      	b.n	801b032 <_printf_i+0x182>
 801b064:	4615      	mov	r5, r2
 801b066:	e7bb      	b.n	801afe0 <_printf_i+0x130>
 801b068:	682b      	ldr	r3, [r5, #0]
 801b06a:	6826      	ldr	r6, [r4, #0]
 801b06c:	6961      	ldr	r1, [r4, #20]
 801b06e:	1d18      	adds	r0, r3, #4
 801b070:	6028      	str	r0, [r5, #0]
 801b072:	0635      	lsls	r5, r6, #24
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	d501      	bpl.n	801b07c <_printf_i+0x1cc>
 801b078:	6019      	str	r1, [r3, #0]
 801b07a:	e002      	b.n	801b082 <_printf_i+0x1d2>
 801b07c:	0670      	lsls	r0, r6, #25
 801b07e:	d5fb      	bpl.n	801b078 <_printf_i+0x1c8>
 801b080:	8019      	strh	r1, [r3, #0]
 801b082:	2300      	movs	r3, #0
 801b084:	6123      	str	r3, [r4, #16]
 801b086:	4615      	mov	r5, r2
 801b088:	e7ba      	b.n	801b000 <_printf_i+0x150>
 801b08a:	682b      	ldr	r3, [r5, #0]
 801b08c:	1d1a      	adds	r2, r3, #4
 801b08e:	602a      	str	r2, [r5, #0]
 801b090:	681d      	ldr	r5, [r3, #0]
 801b092:	6862      	ldr	r2, [r4, #4]
 801b094:	2100      	movs	r1, #0
 801b096:	4628      	mov	r0, r5
 801b098:	f7e5 f952 	bl	8000340 <memchr>
 801b09c:	b108      	cbz	r0, 801b0a2 <_printf_i+0x1f2>
 801b09e:	1b40      	subs	r0, r0, r5
 801b0a0:	6060      	str	r0, [r4, #4]
 801b0a2:	6863      	ldr	r3, [r4, #4]
 801b0a4:	6123      	str	r3, [r4, #16]
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b0ac:	e7a8      	b.n	801b000 <_printf_i+0x150>
 801b0ae:	6923      	ldr	r3, [r4, #16]
 801b0b0:	462a      	mov	r2, r5
 801b0b2:	4649      	mov	r1, r9
 801b0b4:	4640      	mov	r0, r8
 801b0b6:	47d0      	blx	sl
 801b0b8:	3001      	adds	r0, #1
 801b0ba:	d0ab      	beq.n	801b014 <_printf_i+0x164>
 801b0bc:	6823      	ldr	r3, [r4, #0]
 801b0be:	079b      	lsls	r3, r3, #30
 801b0c0:	d413      	bmi.n	801b0ea <_printf_i+0x23a>
 801b0c2:	68e0      	ldr	r0, [r4, #12]
 801b0c4:	9b03      	ldr	r3, [sp, #12]
 801b0c6:	4298      	cmp	r0, r3
 801b0c8:	bfb8      	it	lt
 801b0ca:	4618      	movlt	r0, r3
 801b0cc:	e7a4      	b.n	801b018 <_printf_i+0x168>
 801b0ce:	2301      	movs	r3, #1
 801b0d0:	4632      	mov	r2, r6
 801b0d2:	4649      	mov	r1, r9
 801b0d4:	4640      	mov	r0, r8
 801b0d6:	47d0      	blx	sl
 801b0d8:	3001      	adds	r0, #1
 801b0da:	d09b      	beq.n	801b014 <_printf_i+0x164>
 801b0dc:	3501      	adds	r5, #1
 801b0de:	68e3      	ldr	r3, [r4, #12]
 801b0e0:	9903      	ldr	r1, [sp, #12]
 801b0e2:	1a5b      	subs	r3, r3, r1
 801b0e4:	42ab      	cmp	r3, r5
 801b0e6:	dcf2      	bgt.n	801b0ce <_printf_i+0x21e>
 801b0e8:	e7eb      	b.n	801b0c2 <_printf_i+0x212>
 801b0ea:	2500      	movs	r5, #0
 801b0ec:	f104 0619 	add.w	r6, r4, #25
 801b0f0:	e7f5      	b.n	801b0de <_printf_i+0x22e>
 801b0f2:	bf00      	nop
 801b0f4:	0801bd89 	.word	0x0801bd89
 801b0f8:	0801bd9a 	.word	0x0801bd9a

0801b0fc <__sread>:
 801b0fc:	b510      	push	{r4, lr}
 801b0fe:	460c      	mov	r4, r1
 801b100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b104:	f000 f8de 	bl	801b2c4 <_read_r>
 801b108:	2800      	cmp	r0, #0
 801b10a:	bfab      	itete	ge
 801b10c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b10e:	89a3      	ldrhlt	r3, [r4, #12]
 801b110:	181b      	addge	r3, r3, r0
 801b112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b116:	bfac      	ite	ge
 801b118:	6563      	strge	r3, [r4, #84]	; 0x54
 801b11a:	81a3      	strhlt	r3, [r4, #12]
 801b11c:	bd10      	pop	{r4, pc}

0801b11e <__swrite>:
 801b11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b122:	461f      	mov	r7, r3
 801b124:	898b      	ldrh	r3, [r1, #12]
 801b126:	05db      	lsls	r3, r3, #23
 801b128:	4605      	mov	r5, r0
 801b12a:	460c      	mov	r4, r1
 801b12c:	4616      	mov	r6, r2
 801b12e:	d505      	bpl.n	801b13c <__swrite+0x1e>
 801b130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b134:	2302      	movs	r3, #2
 801b136:	2200      	movs	r2, #0
 801b138:	f000 f868 	bl	801b20c <_lseek_r>
 801b13c:	89a3      	ldrh	r3, [r4, #12]
 801b13e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b146:	81a3      	strh	r3, [r4, #12]
 801b148:	4632      	mov	r2, r6
 801b14a:	463b      	mov	r3, r7
 801b14c:	4628      	mov	r0, r5
 801b14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b152:	f000 b817 	b.w	801b184 <_write_r>

0801b156 <__sseek>:
 801b156:	b510      	push	{r4, lr}
 801b158:	460c      	mov	r4, r1
 801b15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b15e:	f000 f855 	bl	801b20c <_lseek_r>
 801b162:	1c43      	adds	r3, r0, #1
 801b164:	89a3      	ldrh	r3, [r4, #12]
 801b166:	bf15      	itete	ne
 801b168:	6560      	strne	r0, [r4, #84]	; 0x54
 801b16a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b16e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b172:	81a3      	strheq	r3, [r4, #12]
 801b174:	bf18      	it	ne
 801b176:	81a3      	strhne	r3, [r4, #12]
 801b178:	bd10      	pop	{r4, pc}

0801b17a <__sclose>:
 801b17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b17e:	f000 b813 	b.w	801b1a8 <_close_r>
	...

0801b184 <_write_r>:
 801b184:	b538      	push	{r3, r4, r5, lr}
 801b186:	4d07      	ldr	r5, [pc, #28]	; (801b1a4 <_write_r+0x20>)
 801b188:	4604      	mov	r4, r0
 801b18a:	4608      	mov	r0, r1
 801b18c:	4611      	mov	r1, r2
 801b18e:	2200      	movs	r2, #0
 801b190:	602a      	str	r2, [r5, #0]
 801b192:	461a      	mov	r2, r3
 801b194:	f7e5 fdb2 	bl	8000cfc <_write>
 801b198:	1c43      	adds	r3, r0, #1
 801b19a:	d102      	bne.n	801b1a2 <_write_r+0x1e>
 801b19c:	682b      	ldr	r3, [r5, #0]
 801b19e:	b103      	cbz	r3, 801b1a2 <_write_r+0x1e>
 801b1a0:	6023      	str	r3, [r4, #0]
 801b1a2:	bd38      	pop	{r3, r4, r5, pc}
 801b1a4:	240071dc 	.word	0x240071dc

0801b1a8 <_close_r>:
 801b1a8:	b538      	push	{r3, r4, r5, lr}
 801b1aa:	4d06      	ldr	r5, [pc, #24]	; (801b1c4 <_close_r+0x1c>)
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	4604      	mov	r4, r0
 801b1b0:	4608      	mov	r0, r1
 801b1b2:	602b      	str	r3, [r5, #0]
 801b1b4:	f7e6 fe11 	bl	8001dda <_close>
 801b1b8:	1c43      	adds	r3, r0, #1
 801b1ba:	d102      	bne.n	801b1c2 <_close_r+0x1a>
 801b1bc:	682b      	ldr	r3, [r5, #0]
 801b1be:	b103      	cbz	r3, 801b1c2 <_close_r+0x1a>
 801b1c0:	6023      	str	r3, [r4, #0]
 801b1c2:	bd38      	pop	{r3, r4, r5, pc}
 801b1c4:	240071dc 	.word	0x240071dc

0801b1c8 <_fstat_r>:
 801b1c8:	b538      	push	{r3, r4, r5, lr}
 801b1ca:	4d07      	ldr	r5, [pc, #28]	; (801b1e8 <_fstat_r+0x20>)
 801b1cc:	2300      	movs	r3, #0
 801b1ce:	4604      	mov	r4, r0
 801b1d0:	4608      	mov	r0, r1
 801b1d2:	4611      	mov	r1, r2
 801b1d4:	602b      	str	r3, [r5, #0]
 801b1d6:	f7e6 fe0c 	bl	8001df2 <_fstat>
 801b1da:	1c43      	adds	r3, r0, #1
 801b1dc:	d102      	bne.n	801b1e4 <_fstat_r+0x1c>
 801b1de:	682b      	ldr	r3, [r5, #0]
 801b1e0:	b103      	cbz	r3, 801b1e4 <_fstat_r+0x1c>
 801b1e2:	6023      	str	r3, [r4, #0]
 801b1e4:	bd38      	pop	{r3, r4, r5, pc}
 801b1e6:	bf00      	nop
 801b1e8:	240071dc 	.word	0x240071dc

0801b1ec <_isatty_r>:
 801b1ec:	b538      	push	{r3, r4, r5, lr}
 801b1ee:	4d06      	ldr	r5, [pc, #24]	; (801b208 <_isatty_r+0x1c>)
 801b1f0:	2300      	movs	r3, #0
 801b1f2:	4604      	mov	r4, r0
 801b1f4:	4608      	mov	r0, r1
 801b1f6:	602b      	str	r3, [r5, #0]
 801b1f8:	f7e6 fe0b 	bl	8001e12 <_isatty>
 801b1fc:	1c43      	adds	r3, r0, #1
 801b1fe:	d102      	bne.n	801b206 <_isatty_r+0x1a>
 801b200:	682b      	ldr	r3, [r5, #0]
 801b202:	b103      	cbz	r3, 801b206 <_isatty_r+0x1a>
 801b204:	6023      	str	r3, [r4, #0]
 801b206:	bd38      	pop	{r3, r4, r5, pc}
 801b208:	240071dc 	.word	0x240071dc

0801b20c <_lseek_r>:
 801b20c:	b538      	push	{r3, r4, r5, lr}
 801b20e:	4d07      	ldr	r5, [pc, #28]	; (801b22c <_lseek_r+0x20>)
 801b210:	4604      	mov	r4, r0
 801b212:	4608      	mov	r0, r1
 801b214:	4611      	mov	r1, r2
 801b216:	2200      	movs	r2, #0
 801b218:	602a      	str	r2, [r5, #0]
 801b21a:	461a      	mov	r2, r3
 801b21c:	f7e6 fe04 	bl	8001e28 <_lseek>
 801b220:	1c43      	adds	r3, r0, #1
 801b222:	d102      	bne.n	801b22a <_lseek_r+0x1e>
 801b224:	682b      	ldr	r3, [r5, #0]
 801b226:	b103      	cbz	r3, 801b22a <_lseek_r+0x1e>
 801b228:	6023      	str	r3, [r4, #0]
 801b22a:	bd38      	pop	{r3, r4, r5, pc}
 801b22c:	240071dc 	.word	0x240071dc

0801b230 <memmove>:
 801b230:	4288      	cmp	r0, r1
 801b232:	b510      	push	{r4, lr}
 801b234:	eb01 0402 	add.w	r4, r1, r2
 801b238:	d902      	bls.n	801b240 <memmove+0x10>
 801b23a:	4284      	cmp	r4, r0
 801b23c:	4623      	mov	r3, r4
 801b23e:	d807      	bhi.n	801b250 <memmove+0x20>
 801b240:	1e43      	subs	r3, r0, #1
 801b242:	42a1      	cmp	r1, r4
 801b244:	d008      	beq.n	801b258 <memmove+0x28>
 801b246:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b24a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b24e:	e7f8      	b.n	801b242 <memmove+0x12>
 801b250:	4402      	add	r2, r0
 801b252:	4601      	mov	r1, r0
 801b254:	428a      	cmp	r2, r1
 801b256:	d100      	bne.n	801b25a <memmove+0x2a>
 801b258:	bd10      	pop	{r4, pc}
 801b25a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b25e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b262:	e7f7      	b.n	801b254 <memmove+0x24>

0801b264 <_realloc_r>:
 801b264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b268:	4680      	mov	r8, r0
 801b26a:	4614      	mov	r4, r2
 801b26c:	460e      	mov	r6, r1
 801b26e:	b921      	cbnz	r1, 801b27a <_realloc_r+0x16>
 801b270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b274:	4611      	mov	r1, r2
 801b276:	f7fe bea1 	b.w	8019fbc <_malloc_r>
 801b27a:	b92a      	cbnz	r2, 801b288 <_realloc_r+0x24>
 801b27c:	f7fe fe32 	bl	8019ee4 <_free_r>
 801b280:	4625      	mov	r5, r4
 801b282:	4628      	mov	r0, r5
 801b284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b288:	f000 f82e 	bl	801b2e8 <_malloc_usable_size_r>
 801b28c:	4284      	cmp	r4, r0
 801b28e:	4607      	mov	r7, r0
 801b290:	d802      	bhi.n	801b298 <_realloc_r+0x34>
 801b292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b296:	d812      	bhi.n	801b2be <_realloc_r+0x5a>
 801b298:	4621      	mov	r1, r4
 801b29a:	4640      	mov	r0, r8
 801b29c:	f7fe fe8e 	bl	8019fbc <_malloc_r>
 801b2a0:	4605      	mov	r5, r0
 801b2a2:	2800      	cmp	r0, #0
 801b2a4:	d0ed      	beq.n	801b282 <_realloc_r+0x1e>
 801b2a6:	42bc      	cmp	r4, r7
 801b2a8:	4622      	mov	r2, r4
 801b2aa:	4631      	mov	r1, r6
 801b2ac:	bf28      	it	cs
 801b2ae:	463a      	movcs	r2, r7
 801b2b0:	f7fe fe02 	bl	8019eb8 <memcpy>
 801b2b4:	4631      	mov	r1, r6
 801b2b6:	4640      	mov	r0, r8
 801b2b8:	f7fe fe14 	bl	8019ee4 <_free_r>
 801b2bc:	e7e1      	b.n	801b282 <_realloc_r+0x1e>
 801b2be:	4635      	mov	r5, r6
 801b2c0:	e7df      	b.n	801b282 <_realloc_r+0x1e>
	...

0801b2c4 <_read_r>:
 801b2c4:	b538      	push	{r3, r4, r5, lr}
 801b2c6:	4d07      	ldr	r5, [pc, #28]	; (801b2e4 <_read_r+0x20>)
 801b2c8:	4604      	mov	r4, r0
 801b2ca:	4608      	mov	r0, r1
 801b2cc:	4611      	mov	r1, r2
 801b2ce:	2200      	movs	r2, #0
 801b2d0:	602a      	str	r2, [r5, #0]
 801b2d2:	461a      	mov	r2, r3
 801b2d4:	f7e6 fd64 	bl	8001da0 <_read>
 801b2d8:	1c43      	adds	r3, r0, #1
 801b2da:	d102      	bne.n	801b2e2 <_read_r+0x1e>
 801b2dc:	682b      	ldr	r3, [r5, #0]
 801b2de:	b103      	cbz	r3, 801b2e2 <_read_r+0x1e>
 801b2e0:	6023      	str	r3, [r4, #0]
 801b2e2:	bd38      	pop	{r3, r4, r5, pc}
 801b2e4:	240071dc 	.word	0x240071dc

0801b2e8 <_malloc_usable_size_r>:
 801b2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b2ec:	1f18      	subs	r0, r3, #4
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	bfbc      	itt	lt
 801b2f2:	580b      	ldrlt	r3, [r1, r0]
 801b2f4:	18c0      	addlt	r0, r0, r3
 801b2f6:	4770      	bx	lr

0801b2f8 <_init>:
 801b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2fa:	bf00      	nop
 801b2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b2fe:	bc08      	pop	{r3}
 801b300:	469e      	mov	lr, r3
 801b302:	4770      	bx	lr

0801b304 <_fini>:
 801b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b306:	bf00      	nop
 801b308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b30a:	bc08      	pop	{r3}
 801b30c:	469e      	mov	lr, r3
 801b30e:	4770      	bx	lr
