
RTOS_USBFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b090  080202d0  080202d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b1c  0803b360  0803b360  0002b360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803be7c  0803be7c  0002be7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803be84  0803be84  0002be84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0803be88  0803be88  0002be88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  0803be8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007150  24000098  0803bf24  00030098  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240071e8  0803bf24  000371e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034453  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006cf2  00000000  00000000  00064519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002388  00000000  00000000  0006b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002100  00000000  00000000  0006d598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d1f9  00000000  00000000  0006f698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037463  00000000  00000000  000ac891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e2b3  00000000  00000000  000e3cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00241fa7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009ea4  00000000  00000000  00241ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202d0 <__do_global_dtors_aux>:
 80202d0:	b510      	push	{r4, lr}
 80202d2:	4c05      	ldr	r4, [pc, #20]	; (80202e8 <__do_global_dtors_aux+0x18>)
 80202d4:	7823      	ldrb	r3, [r4, #0]
 80202d6:	b933      	cbnz	r3, 80202e6 <__do_global_dtors_aux+0x16>
 80202d8:	4b04      	ldr	r3, [pc, #16]	; (80202ec <__do_global_dtors_aux+0x1c>)
 80202da:	b113      	cbz	r3, 80202e2 <__do_global_dtors_aux+0x12>
 80202dc:	4804      	ldr	r0, [pc, #16]	; (80202f0 <__do_global_dtors_aux+0x20>)
 80202de:	f3af 8000 	nop.w
 80202e2:	2301      	movs	r3, #1
 80202e4:	7023      	strb	r3, [r4, #0]
 80202e6:	bd10      	pop	{r4, pc}
 80202e8:	24000098 	.word	0x24000098
 80202ec:	00000000 	.word	0x00000000
 80202f0:	0803b348 	.word	0x0803b348

080202f4 <frame_dummy>:
 80202f4:	b508      	push	{r3, lr}
 80202f6:	4b03      	ldr	r3, [pc, #12]	; (8020304 <frame_dummy+0x10>)
 80202f8:	b11b      	cbz	r3, 8020302 <frame_dummy+0xe>
 80202fa:	4903      	ldr	r1, [pc, #12]	; (8020308 <frame_dummy+0x14>)
 80202fc:	4803      	ldr	r0, [pc, #12]	; (802030c <frame_dummy+0x18>)
 80202fe:	f3af 8000 	nop.w
 8020302:	bd08      	pop	{r3, pc}
 8020304:	00000000 	.word	0x00000000
 8020308:	2400009c 	.word	0x2400009c
 802030c:	0803b348 	.word	0x0803b348

08020310 <strcmp>:
 8020310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020318:	2a01      	cmp	r2, #1
 802031a:	bf28      	it	cs
 802031c:	429a      	cmpcs	r2, r3
 802031e:	d0f7      	beq.n	8020310 <strcmp>
 8020320:	1ad0      	subs	r0, r2, r3
 8020322:	4770      	bx	lr

08020324 <strlen>:
 8020324:	4603      	mov	r3, r0
 8020326:	f813 2b01 	ldrb.w	r2, [r3], #1
 802032a:	2a00      	cmp	r2, #0
 802032c:	d1fb      	bne.n	8020326 <strlen+0x2>
 802032e:	1a18      	subs	r0, r3, r0
 8020330:	3801      	subs	r0, #1
 8020332:	4770      	bx	lr
	...

08020340 <memchr>:
 8020340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020344:	2a10      	cmp	r2, #16
 8020346:	db2b      	blt.n	80203a0 <memchr+0x60>
 8020348:	f010 0f07 	tst.w	r0, #7
 802034c:	d008      	beq.n	8020360 <memchr+0x20>
 802034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020352:	3a01      	subs	r2, #1
 8020354:	428b      	cmp	r3, r1
 8020356:	d02d      	beq.n	80203b4 <memchr+0x74>
 8020358:	f010 0f07 	tst.w	r0, #7
 802035c:	b342      	cbz	r2, 80203b0 <memchr+0x70>
 802035e:	d1f6      	bne.n	802034e <memchr+0xe>
 8020360:	b4f0      	push	{r4, r5, r6, r7}
 8020362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802036a:	f022 0407 	bic.w	r4, r2, #7
 802036e:	f07f 0700 	mvns.w	r7, #0
 8020372:	2300      	movs	r3, #0
 8020374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020378:	3c08      	subs	r4, #8
 802037a:	ea85 0501 	eor.w	r5, r5, r1
 802037e:	ea86 0601 	eor.w	r6, r6, r1
 8020382:	fa85 f547 	uadd8	r5, r5, r7
 8020386:	faa3 f587 	sel	r5, r3, r7
 802038a:	fa86 f647 	uadd8	r6, r6, r7
 802038e:	faa5 f687 	sel	r6, r5, r7
 8020392:	b98e      	cbnz	r6, 80203b8 <memchr+0x78>
 8020394:	d1ee      	bne.n	8020374 <memchr+0x34>
 8020396:	bcf0      	pop	{r4, r5, r6, r7}
 8020398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802039c:	f002 0207 	and.w	r2, r2, #7
 80203a0:	b132      	cbz	r2, 80203b0 <memchr+0x70>
 80203a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80203a6:	3a01      	subs	r2, #1
 80203a8:	ea83 0301 	eor.w	r3, r3, r1
 80203ac:	b113      	cbz	r3, 80203b4 <memchr+0x74>
 80203ae:	d1f8      	bne.n	80203a2 <memchr+0x62>
 80203b0:	2000      	movs	r0, #0
 80203b2:	4770      	bx	lr
 80203b4:	3801      	subs	r0, #1
 80203b6:	4770      	bx	lr
 80203b8:	2d00      	cmp	r5, #0
 80203ba:	bf06      	itte	eq
 80203bc:	4635      	moveq	r5, r6
 80203be:	3803      	subeq	r0, #3
 80203c0:	3807      	subne	r0, #7
 80203c2:	f015 0f01 	tst.w	r5, #1
 80203c6:	d107      	bne.n	80203d8 <memchr+0x98>
 80203c8:	3001      	adds	r0, #1
 80203ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80203ce:	bf02      	ittt	eq
 80203d0:	3001      	addeq	r0, #1
 80203d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80203d6:	3001      	addeq	r0, #1
 80203d8:	bcf0      	pop	{r4, r5, r6, r7}
 80203da:	3801      	subs	r0, #1
 80203dc:	4770      	bx	lr
 80203de:	bf00      	nop

080203e0 <__aeabi_uldivmod>:
 80203e0:	b953      	cbnz	r3, 80203f8 <__aeabi_uldivmod+0x18>
 80203e2:	b94a      	cbnz	r2, 80203f8 <__aeabi_uldivmod+0x18>
 80203e4:	2900      	cmp	r1, #0
 80203e6:	bf08      	it	eq
 80203e8:	2800      	cmpeq	r0, #0
 80203ea:	bf1c      	itt	ne
 80203ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80203f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80203f4:	f000 b974 	b.w	80206e0 <__aeabi_idiv0>
 80203f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80203fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020400:	f000 f806 	bl	8020410 <__udivmoddi4>
 8020404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802040c:	b004      	add	sp, #16
 802040e:	4770      	bx	lr

08020410 <__udivmoddi4>:
 8020410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020414:	9d08      	ldr	r5, [sp, #32]
 8020416:	4604      	mov	r4, r0
 8020418:	468e      	mov	lr, r1
 802041a:	2b00      	cmp	r3, #0
 802041c:	d14d      	bne.n	80204ba <__udivmoddi4+0xaa>
 802041e:	428a      	cmp	r2, r1
 8020420:	4694      	mov	ip, r2
 8020422:	d969      	bls.n	80204f8 <__udivmoddi4+0xe8>
 8020424:	fab2 f282 	clz	r2, r2
 8020428:	b152      	cbz	r2, 8020440 <__udivmoddi4+0x30>
 802042a:	fa01 f302 	lsl.w	r3, r1, r2
 802042e:	f1c2 0120 	rsb	r1, r2, #32
 8020432:	fa20 f101 	lsr.w	r1, r0, r1
 8020436:	fa0c fc02 	lsl.w	ip, ip, r2
 802043a:	ea41 0e03 	orr.w	lr, r1, r3
 802043e:	4094      	lsls	r4, r2
 8020440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020444:	0c21      	lsrs	r1, r4, #16
 8020446:	fbbe f6f8 	udiv	r6, lr, r8
 802044a:	fa1f f78c 	uxth.w	r7, ip
 802044e:	fb08 e316 	mls	r3, r8, r6, lr
 8020452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020456:	fb06 f107 	mul.w	r1, r6, r7
 802045a:	4299      	cmp	r1, r3
 802045c:	d90a      	bls.n	8020474 <__udivmoddi4+0x64>
 802045e:	eb1c 0303 	adds.w	r3, ip, r3
 8020462:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020466:	f080 811f 	bcs.w	80206a8 <__udivmoddi4+0x298>
 802046a:	4299      	cmp	r1, r3
 802046c:	f240 811c 	bls.w	80206a8 <__udivmoddi4+0x298>
 8020470:	3e02      	subs	r6, #2
 8020472:	4463      	add	r3, ip
 8020474:	1a5b      	subs	r3, r3, r1
 8020476:	b2a4      	uxth	r4, r4
 8020478:	fbb3 f0f8 	udiv	r0, r3, r8
 802047c:	fb08 3310 	mls	r3, r8, r0, r3
 8020480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020484:	fb00 f707 	mul.w	r7, r0, r7
 8020488:	42a7      	cmp	r7, r4
 802048a:	d90a      	bls.n	80204a2 <__udivmoddi4+0x92>
 802048c:	eb1c 0404 	adds.w	r4, ip, r4
 8020490:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020494:	f080 810a 	bcs.w	80206ac <__udivmoddi4+0x29c>
 8020498:	42a7      	cmp	r7, r4
 802049a:	f240 8107 	bls.w	80206ac <__udivmoddi4+0x29c>
 802049e:	4464      	add	r4, ip
 80204a0:	3802      	subs	r0, #2
 80204a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80204a6:	1be4      	subs	r4, r4, r7
 80204a8:	2600      	movs	r6, #0
 80204aa:	b11d      	cbz	r5, 80204b4 <__udivmoddi4+0xa4>
 80204ac:	40d4      	lsrs	r4, r2
 80204ae:	2300      	movs	r3, #0
 80204b0:	e9c5 4300 	strd	r4, r3, [r5]
 80204b4:	4631      	mov	r1, r6
 80204b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204ba:	428b      	cmp	r3, r1
 80204bc:	d909      	bls.n	80204d2 <__udivmoddi4+0xc2>
 80204be:	2d00      	cmp	r5, #0
 80204c0:	f000 80ef 	beq.w	80206a2 <__udivmoddi4+0x292>
 80204c4:	2600      	movs	r6, #0
 80204c6:	e9c5 0100 	strd	r0, r1, [r5]
 80204ca:	4630      	mov	r0, r6
 80204cc:	4631      	mov	r1, r6
 80204ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204d2:	fab3 f683 	clz	r6, r3
 80204d6:	2e00      	cmp	r6, #0
 80204d8:	d14a      	bne.n	8020570 <__udivmoddi4+0x160>
 80204da:	428b      	cmp	r3, r1
 80204dc:	d302      	bcc.n	80204e4 <__udivmoddi4+0xd4>
 80204de:	4282      	cmp	r2, r0
 80204e0:	f200 80f9 	bhi.w	80206d6 <__udivmoddi4+0x2c6>
 80204e4:	1a84      	subs	r4, r0, r2
 80204e6:	eb61 0303 	sbc.w	r3, r1, r3
 80204ea:	2001      	movs	r0, #1
 80204ec:	469e      	mov	lr, r3
 80204ee:	2d00      	cmp	r5, #0
 80204f0:	d0e0      	beq.n	80204b4 <__udivmoddi4+0xa4>
 80204f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80204f6:	e7dd      	b.n	80204b4 <__udivmoddi4+0xa4>
 80204f8:	b902      	cbnz	r2, 80204fc <__udivmoddi4+0xec>
 80204fa:	deff      	udf	#255	; 0xff
 80204fc:	fab2 f282 	clz	r2, r2
 8020500:	2a00      	cmp	r2, #0
 8020502:	f040 8092 	bne.w	802062a <__udivmoddi4+0x21a>
 8020506:	eba1 010c 	sub.w	r1, r1, ip
 802050a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 802050e:	fa1f fe8c 	uxth.w	lr, ip
 8020512:	2601      	movs	r6, #1
 8020514:	0c20      	lsrs	r0, r4, #16
 8020516:	fbb1 f3f7 	udiv	r3, r1, r7
 802051a:	fb07 1113 	mls	r1, r7, r3, r1
 802051e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020522:	fb0e f003 	mul.w	r0, lr, r3
 8020526:	4288      	cmp	r0, r1
 8020528:	d908      	bls.n	802053c <__udivmoddi4+0x12c>
 802052a:	eb1c 0101 	adds.w	r1, ip, r1
 802052e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8020532:	d202      	bcs.n	802053a <__udivmoddi4+0x12a>
 8020534:	4288      	cmp	r0, r1
 8020536:	f200 80cb 	bhi.w	80206d0 <__udivmoddi4+0x2c0>
 802053a:	4643      	mov	r3, r8
 802053c:	1a09      	subs	r1, r1, r0
 802053e:	b2a4      	uxth	r4, r4
 8020540:	fbb1 f0f7 	udiv	r0, r1, r7
 8020544:	fb07 1110 	mls	r1, r7, r0, r1
 8020548:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 802054c:	fb0e fe00 	mul.w	lr, lr, r0
 8020550:	45a6      	cmp	lr, r4
 8020552:	d908      	bls.n	8020566 <__udivmoddi4+0x156>
 8020554:	eb1c 0404 	adds.w	r4, ip, r4
 8020558:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 802055c:	d202      	bcs.n	8020564 <__udivmoddi4+0x154>
 802055e:	45a6      	cmp	lr, r4
 8020560:	f200 80bb 	bhi.w	80206da <__udivmoddi4+0x2ca>
 8020564:	4608      	mov	r0, r1
 8020566:	eba4 040e 	sub.w	r4, r4, lr
 802056a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802056e:	e79c      	b.n	80204aa <__udivmoddi4+0x9a>
 8020570:	f1c6 0720 	rsb	r7, r6, #32
 8020574:	40b3      	lsls	r3, r6
 8020576:	fa22 fc07 	lsr.w	ip, r2, r7
 802057a:	ea4c 0c03 	orr.w	ip, ip, r3
 802057e:	fa20 f407 	lsr.w	r4, r0, r7
 8020582:	fa01 f306 	lsl.w	r3, r1, r6
 8020586:	431c      	orrs	r4, r3
 8020588:	40f9      	lsrs	r1, r7
 802058a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802058e:	fa00 f306 	lsl.w	r3, r0, r6
 8020592:	fbb1 f8f9 	udiv	r8, r1, r9
 8020596:	0c20      	lsrs	r0, r4, #16
 8020598:	fa1f fe8c 	uxth.w	lr, ip
 802059c:	fb09 1118 	mls	r1, r9, r8, r1
 80205a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80205a4:	fb08 f00e 	mul.w	r0, r8, lr
 80205a8:	4288      	cmp	r0, r1
 80205aa:	fa02 f206 	lsl.w	r2, r2, r6
 80205ae:	d90b      	bls.n	80205c8 <__udivmoddi4+0x1b8>
 80205b0:	eb1c 0101 	adds.w	r1, ip, r1
 80205b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80205b8:	f080 8088 	bcs.w	80206cc <__udivmoddi4+0x2bc>
 80205bc:	4288      	cmp	r0, r1
 80205be:	f240 8085 	bls.w	80206cc <__udivmoddi4+0x2bc>
 80205c2:	f1a8 0802 	sub.w	r8, r8, #2
 80205c6:	4461      	add	r1, ip
 80205c8:	1a09      	subs	r1, r1, r0
 80205ca:	b2a4      	uxth	r4, r4
 80205cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80205d0:	fb09 1110 	mls	r1, r9, r0, r1
 80205d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80205d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80205dc:	458e      	cmp	lr, r1
 80205de:	d908      	bls.n	80205f2 <__udivmoddi4+0x1e2>
 80205e0:	eb1c 0101 	adds.w	r1, ip, r1
 80205e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80205e8:	d26c      	bcs.n	80206c4 <__udivmoddi4+0x2b4>
 80205ea:	458e      	cmp	lr, r1
 80205ec:	d96a      	bls.n	80206c4 <__udivmoddi4+0x2b4>
 80205ee:	3802      	subs	r0, #2
 80205f0:	4461      	add	r1, ip
 80205f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80205f6:	fba0 9402 	umull	r9, r4, r0, r2
 80205fa:	eba1 010e 	sub.w	r1, r1, lr
 80205fe:	42a1      	cmp	r1, r4
 8020600:	46c8      	mov	r8, r9
 8020602:	46a6      	mov	lr, r4
 8020604:	d356      	bcc.n	80206b4 <__udivmoddi4+0x2a4>
 8020606:	d053      	beq.n	80206b0 <__udivmoddi4+0x2a0>
 8020608:	b15d      	cbz	r5, 8020622 <__udivmoddi4+0x212>
 802060a:	ebb3 0208 	subs.w	r2, r3, r8
 802060e:	eb61 010e 	sbc.w	r1, r1, lr
 8020612:	fa01 f707 	lsl.w	r7, r1, r7
 8020616:	fa22 f306 	lsr.w	r3, r2, r6
 802061a:	40f1      	lsrs	r1, r6
 802061c:	431f      	orrs	r7, r3
 802061e:	e9c5 7100 	strd	r7, r1, [r5]
 8020622:	2600      	movs	r6, #0
 8020624:	4631      	mov	r1, r6
 8020626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802062a:	f1c2 0320 	rsb	r3, r2, #32
 802062e:	40d8      	lsrs	r0, r3
 8020630:	fa0c fc02 	lsl.w	ip, ip, r2
 8020634:	fa21 f303 	lsr.w	r3, r1, r3
 8020638:	4091      	lsls	r1, r2
 802063a:	4301      	orrs	r1, r0
 802063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020640:	fa1f fe8c 	uxth.w	lr, ip
 8020644:	fbb3 f0f7 	udiv	r0, r3, r7
 8020648:	fb07 3610 	mls	r6, r7, r0, r3
 802064c:	0c0b      	lsrs	r3, r1, #16
 802064e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020652:	fb00 f60e 	mul.w	r6, r0, lr
 8020656:	429e      	cmp	r6, r3
 8020658:	fa04 f402 	lsl.w	r4, r4, r2
 802065c:	d908      	bls.n	8020670 <__udivmoddi4+0x260>
 802065e:	eb1c 0303 	adds.w	r3, ip, r3
 8020662:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020666:	d22f      	bcs.n	80206c8 <__udivmoddi4+0x2b8>
 8020668:	429e      	cmp	r6, r3
 802066a:	d92d      	bls.n	80206c8 <__udivmoddi4+0x2b8>
 802066c:	3802      	subs	r0, #2
 802066e:	4463      	add	r3, ip
 8020670:	1b9b      	subs	r3, r3, r6
 8020672:	b289      	uxth	r1, r1
 8020674:	fbb3 f6f7 	udiv	r6, r3, r7
 8020678:	fb07 3316 	mls	r3, r7, r6, r3
 802067c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020680:	fb06 f30e 	mul.w	r3, r6, lr
 8020684:	428b      	cmp	r3, r1
 8020686:	d908      	bls.n	802069a <__udivmoddi4+0x28a>
 8020688:	eb1c 0101 	adds.w	r1, ip, r1
 802068c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020690:	d216      	bcs.n	80206c0 <__udivmoddi4+0x2b0>
 8020692:	428b      	cmp	r3, r1
 8020694:	d914      	bls.n	80206c0 <__udivmoddi4+0x2b0>
 8020696:	3e02      	subs	r6, #2
 8020698:	4461      	add	r1, ip
 802069a:	1ac9      	subs	r1, r1, r3
 802069c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80206a0:	e738      	b.n	8020514 <__udivmoddi4+0x104>
 80206a2:	462e      	mov	r6, r5
 80206a4:	4628      	mov	r0, r5
 80206a6:	e705      	b.n	80204b4 <__udivmoddi4+0xa4>
 80206a8:	4606      	mov	r6, r0
 80206aa:	e6e3      	b.n	8020474 <__udivmoddi4+0x64>
 80206ac:	4618      	mov	r0, r3
 80206ae:	e6f8      	b.n	80204a2 <__udivmoddi4+0x92>
 80206b0:	454b      	cmp	r3, r9
 80206b2:	d2a9      	bcs.n	8020608 <__udivmoddi4+0x1f8>
 80206b4:	ebb9 0802 	subs.w	r8, r9, r2
 80206b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80206bc:	3801      	subs	r0, #1
 80206be:	e7a3      	b.n	8020608 <__udivmoddi4+0x1f8>
 80206c0:	4646      	mov	r6, r8
 80206c2:	e7ea      	b.n	802069a <__udivmoddi4+0x28a>
 80206c4:	4620      	mov	r0, r4
 80206c6:	e794      	b.n	80205f2 <__udivmoddi4+0x1e2>
 80206c8:	4640      	mov	r0, r8
 80206ca:	e7d1      	b.n	8020670 <__udivmoddi4+0x260>
 80206cc:	46d0      	mov	r8, sl
 80206ce:	e77b      	b.n	80205c8 <__udivmoddi4+0x1b8>
 80206d0:	3b02      	subs	r3, #2
 80206d2:	4461      	add	r1, ip
 80206d4:	e732      	b.n	802053c <__udivmoddi4+0x12c>
 80206d6:	4630      	mov	r0, r6
 80206d8:	e709      	b.n	80204ee <__udivmoddi4+0xde>
 80206da:	4464      	add	r4, ip
 80206dc:	3802      	subs	r0, #2
 80206de:	e742      	b.n	8020566 <__udivmoddi4+0x156>

080206e0 <__aeabi_idiv0>:
 80206e0:	4770      	bx	lr
 80206e2:	bf00      	nop

080206e4 <scan_all_files>:

uint8_t disk_mounted = 0;


FRESULT scan_all_files (char* path)        /* Start node to be scanned (***also used as work area***) */
{
 80206e4:	b580      	push	{r7, lr}
 80206e6:	b098      	sub	sp, #96	; 0x60
 80206e8:	af00      	add	r7, sp, #0
 80206ea:	6078      	str	r0, [r7, #4]
	DIR dir;
	UINT i;

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80206ec:	f107 0308 	add.w	r3, r7, #8
 80206f0:	6879      	ldr	r1, [r7, #4]
 80206f2:	4618      	mov	r0, r3
 80206f4:	f014 fdd2 	bl	803529c <f_opendir>
 80206f8:	4603      	mov	r3, r0
 80206fa:	461a      	mov	r2, r3
 80206fc:	4b31      	ldr	r3, [pc, #196]	; (80207c4 <scan_all_files+0xe0>)
 80206fe:	701a      	strb	r2, [r3, #0]

    if (fresult == FR_OK) {
 8020700:	4b30      	ldr	r3, [pc, #192]	; (80207c4 <scan_all_files+0xe0>)
 8020702:	781b      	ldrb	r3, [r3, #0]
 8020704:	2b00      	cmp	r3, #0
 8020706:	d156      	bne.n	80207b6 <scan_all_files+0xd2>
            for (;;) {
            	fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8020708:	f107 0308 	add.w	r3, r7, #8
 802070c:	492e      	ldr	r1, [pc, #184]	; (80207c8 <scan_all_files+0xe4>)
 802070e:	4618      	mov	r0, r3
 8020710:	f014 feb8 	bl	8035484 <f_readdir>
 8020714:	4603      	mov	r3, r0
 8020716:	461a      	mov	r2, r3
 8020718:	4b2a      	ldr	r3, [pc, #168]	; (80207c4 <scan_all_files+0xe0>)
 802071a:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 802071c:	4b29      	ldr	r3, [pc, #164]	; (80207c4 <scan_all_files+0xe0>)
 802071e:	781b      	ldrb	r3, [r3, #0]
 8020720:	2b00      	cmp	r3, #0
 8020722:	d143      	bne.n	80207ac <scan_all_files+0xc8>
 8020724:	4b28      	ldr	r3, [pc, #160]	; (80207c8 <scan_all_files+0xe4>)
 8020726:	7e9b      	ldrb	r3, [r3, #26]
 8020728:	2b00      	cmp	r3, #0
 802072a:	d03f      	beq.n	80207ac <scan_all_files+0xc8>
                if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 802072c:	4b26      	ldr	r3, [pc, #152]	; (80207c8 <scan_all_files+0xe4>)
 802072e:	7b1b      	ldrb	r3, [r3, #12]
 8020730:	f003 0310 	and.w	r3, r3, #16
 8020734:	2b00      	cmp	r3, #0
 8020736:	d02e      	beq.n	8020796 <scan_all_files+0xb2>
                	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8020738:	4924      	ldr	r1, [pc, #144]	; (80207cc <scan_all_files+0xe8>)
 802073a:	4825      	ldr	r0, [pc, #148]	; (80207d0 <scan_all_files+0xec>)
 802073c:	f7ff fde8 	bl	8020310 <strcmp>
 8020740:	4603      	mov	r3, r0
 8020742:	2b00      	cmp	r3, #0
 8020744:	d02d      	beq.n	80207a2 <scan_all_files+0xbe>
                	if (!(strcmp("System Volume Information", fno.fname))) continue;
 8020746:	4921      	ldr	r1, [pc, #132]	; (80207cc <scan_all_files+0xe8>)
 8020748:	4822      	ldr	r0, [pc, #136]	; (80207d4 <scan_all_files+0xf0>)
 802074a:	f7ff fde1 	bl	8020310 <strcmp>
 802074e:	4603      	mov	r3, r0
 8020750:	2b00      	cmp	r3, #0
 8020752:	d028      	beq.n	80207a6 <scan_all_files+0xc2>
                	i = strlen(path);
 8020754:	6878      	ldr	r0, [r7, #4]
 8020756:	f7ff fde5 	bl	8020324 <strlen>
 802075a:	65f8      	str	r0, [r7, #92]	; 0x5c
                    sprintf(&path[i], "/%s", fno.fname);
 802075c:	687a      	ldr	r2, [r7, #4]
 802075e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020760:	4413      	add	r3, r2
 8020762:	4a1a      	ldr	r2, [pc, #104]	; (80207cc <scan_all_files+0xe8>)
 8020764:	491c      	ldr	r1, [pc, #112]	; (80207d8 <scan_all_files+0xf4>)
 8020766:	4618      	mov	r0, r3
 8020768:	f019 fd62 	bl	803a230 <siprintf>
                    printf("%s\r\n",path);
 802076c:	6879      	ldr	r1, [r7, #4]
 802076e:	481b      	ldr	r0, [pc, #108]	; (80207dc <scan_all_files+0xf8>)
 8020770:	f019 fcc0 	bl	803a0f4 <iprintf>
                    fresult = scan_all_files(path);                    /* Enter the directory */
 8020774:	6878      	ldr	r0, [r7, #4]
 8020776:	f7ff ffb5 	bl	80206e4 <scan_all_files>
 802077a:	4603      	mov	r3, r0
 802077c:	461a      	mov	r2, r3
 802077e:	4b11      	ldr	r3, [pc, #68]	; (80207c4 <scan_all_files+0xe0>)
 8020780:	701a      	strb	r2, [r3, #0]
                    if (fresult != FR_OK) break;
 8020782:	4b10      	ldr	r3, [pc, #64]	; (80207c4 <scan_all_files+0xe0>)
 8020784:	781b      	ldrb	r3, [r3, #0]
 8020786:	2b00      	cmp	r3, #0
 8020788:	d10f      	bne.n	80207aa <scan_all_files+0xc6>
                    path[i] = 0;
 802078a:	687a      	ldr	r2, [r7, #4]
 802078c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802078e:	4413      	add	r3, r2
 8020790:	2200      	movs	r2, #0
 8020792:	701a      	strb	r2, [r3, #0]
 8020794:	e7b8      	b.n	8020708 <scan_all_files+0x24>
                } else {                                       /* It is a file. */
                	printf("%s/%s\r\n", path, fno.fname);
 8020796:	4a0d      	ldr	r2, [pc, #52]	; (80207cc <scan_all_files+0xe8>)
 8020798:	6879      	ldr	r1, [r7, #4]
 802079a:	4811      	ldr	r0, [pc, #68]	; (80207e0 <scan_all_files+0xfc>)
 802079c:	f019 fcaa 	bl	803a0f4 <iprintf>
 80207a0:	e7b2      	b.n	8020708 <scan_all_files+0x24>
                	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80207a2:	bf00      	nop
 80207a4:	e7b0      	b.n	8020708 <scan_all_files+0x24>
                	if (!(strcmp("System Volume Information", fno.fname))) continue;
 80207a6:	bf00      	nop
            	fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80207a8:	e7ae      	b.n	8020708 <scan_all_files+0x24>
                    if (fresult != FR_OK) break;
 80207aa:	bf00      	nop
                }
            }
            f_closedir(&dir);
 80207ac:	f107 0308 	add.w	r3, r7, #8
 80207b0:	4618      	mov	r0, r3
 80207b2:	f014 fe3c 	bl	803542e <f_closedir>
        }


    return fresult;
 80207b6:	4b03      	ldr	r3, [pc, #12]	; (80207c4 <scan_all_files+0xe0>)
 80207b8:	781b      	ldrb	r3, [r3, #0]
}
 80207ba:	4618      	mov	r0, r3
 80207bc:	3760      	adds	r7, #96	; 0x60
 80207be:	46bd      	mov	sp, r7
 80207c0:	bd80      	pop	{r7, pc}
 80207c2:	bf00      	nop
 80207c4:	240001d8 	.word	0x240001d8
 80207c8:	240000b8 	.word	0x240000b8
 80207cc:	240000d2 	.word	0x240000d2
 80207d0:	0803b360 	.word	0x0803b360
 80207d4:	0803b36c 	.word	0x0803b36c
 80207d8:	0803b388 	.word	0x0803b388
 80207dc:	0803b38c 	.word	0x0803b38c
 80207e0:	0803b394 	.word	0x0803b394

080207e4 <create_file>:

FRESULT create_file (char *name)
{
 80207e4:	b580      	push	{r7, lr}
 80207e6:	b084      	sub	sp, #16
 80207e8:	af00      	add	r7, sp, #0
 80207ea:	6078      	str	r0, [r7, #4]

	uint8_t filename_position = find_filename_argument(name);
 80207ec:	6878      	ldr	r0, [r7, #4]
 80207ee:	f000 fa1f 	bl	8020c30 <find_filename_argument>
 80207f2:	4603      	mov	r3, r0
 80207f4:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	name = name + filename_position;
 80207f6:	7bfb      	ldrb	r3, [r7, #15]
 80207f8:	687a      	ldr	r2, [r7, #4]
 80207fa:	4413      	add	r3, r2
 80207fc:	607b      	str	r3, [r7, #4]

	fresult = f_stat (name, &fno);
 80207fe:	4922      	ldr	r1, [pc, #136]	; (8020888 <create_file+0xa4>)
 8020800:	6878      	ldr	r0, [r7, #4]
 8020802:	f014 fe9c 	bl	803553e <f_stat>
 8020806:	4603      	mov	r3, r0
 8020808:	461a      	mov	r2, r3
 802080a:	4b20      	ldr	r3, [pc, #128]	; (802088c <create_file+0xa8>)
 802080c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 802080e:	4b1f      	ldr	r3, [pc, #124]	; (802088c <create_file+0xa8>)
 8020810:	781b      	ldrb	r3, [r3, #0]
 8020812:	2b00      	cmp	r3, #0
 8020814:	d104      	bne.n	8020820 <create_file+0x3c>
	{
		printf("File '%s' already exists!\r\n",name);
 8020816:	6879      	ldr	r1, [r7, #4]
 8020818:	481d      	ldr	r0, [pc, #116]	; (8020890 <create_file+0xac>)
 802081a:	f019 fc6b 	bl	803a0f4 <iprintf>
 802081e:	e02c      	b.n	802087a <create_file+0x96>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8020820:	220b      	movs	r2, #11
 8020822:	6879      	ldr	r1, [r7, #4]
 8020824:	481b      	ldr	r0, [pc, #108]	; (8020894 <create_file+0xb0>)
 8020826:	f013 fb87 	bl	8033f38 <f_open>
 802082a:	4603      	mov	r3, r0
 802082c:	461a      	mov	r2, r3
 802082e:	4b17      	ldr	r3, [pc, #92]	; (802088c <create_file+0xa8>)
 8020830:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8020832:	4b16      	ldr	r3, [pc, #88]	; (802088c <create_file+0xa8>)
 8020834:	781b      	ldrb	r3, [r3, #0]
 8020836:	2b00      	cmp	r3, #0
 8020838:	d009      	beq.n	802084e <create_file+0x6a>
		{
			printf("Error(%d) when creating the file '%s'\r\n", fresult, name);
 802083a:	4b14      	ldr	r3, [pc, #80]	; (802088c <create_file+0xa8>)
 802083c:	781b      	ldrb	r3, [r3, #0]
 802083e:	687a      	ldr	r2, [r7, #4]
 8020840:	4619      	mov	r1, r3
 8020842:	4815      	ldr	r0, [pc, #84]	; (8020898 <create_file+0xb4>)
 8020844:	f019 fc56 	bl	803a0f4 <iprintf>
		    return fresult;
 8020848:	4b10      	ldr	r3, [pc, #64]	; (802088c <create_file+0xa8>)
 802084a:	781b      	ldrb	r3, [r3, #0]
 802084c:	e017      	b.n	802087e <create_file+0x9a>
		}
		else
		{
			printf("'%s' is created successfully\r\n",name);
 802084e:	6879      	ldr	r1, [r7, #4]
 8020850:	4812      	ldr	r0, [pc, #72]	; (802089c <create_file+0xb8>)
 8020852:	f019 fc4f 	bl	803a0f4 <iprintf>
		}

		fresult = f_close(&USBHFile);
 8020856:	480f      	ldr	r0, [pc, #60]	; (8020894 <create_file+0xb0>)
 8020858:	f014 fb77 	bl	8034f4a <f_close>
 802085c:	4603      	mov	r3, r0
 802085e:	461a      	mov	r2, r3
 8020860:	4b0a      	ldr	r3, [pc, #40]	; (802088c <create_file+0xa8>)
 8020862:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8020864:	4b09      	ldr	r3, [pc, #36]	; (802088c <create_file+0xa8>)
 8020866:	781b      	ldrb	r3, [r3, #0]
 8020868:	2b00      	cmp	r3, #0
 802086a:	d006      	beq.n	802087a <create_file+0x96>
		{
			printf("Error(%d) when closing the file '%s'\r\n", fresult, name);
 802086c:	4b07      	ldr	r3, [pc, #28]	; (802088c <create_file+0xa8>)
 802086e:	781b      	ldrb	r3, [r3, #0]
 8020870:	687a      	ldr	r2, [r7, #4]
 8020872:	4619      	mov	r1, r3
 8020874:	480a      	ldr	r0, [pc, #40]	; (80208a0 <create_file+0xbc>)
 8020876:	f019 fc3d 	bl	803a0f4 <iprintf>
		}
	}
    return fresult;
 802087a:	4b04      	ldr	r3, [pc, #16]	; (802088c <create_file+0xa8>)
 802087c:	781b      	ldrb	r3, [r3, #0]
}
 802087e:	4618      	mov	r0, r3
 8020880:	3710      	adds	r7, #16
 8020882:	46bd      	mov	sp, r7
 8020884:	bd80      	pop	{r7, pc}
 8020886:	bf00      	nop
 8020888:	240000b8 	.word	0x240000b8
 802088c:	240001d8 	.word	0x240001d8
 8020890:	0803b39c 	.word	0x0803b39c
 8020894:	24001ba8 	.word	0x24001ba8
 8020898:	0803b3b8 	.word	0x0803b3b8
 802089c:	0803b3e0 	.word	0x0803b3e0
 80208a0:	0803b400 	.word	0x0803b400

080208a4 <remove_file>:

FRESULT remove_file (char *name)
{
 80208a4:	b580      	push	{r7, lr}
 80208a6:	b084      	sub	sp, #16
 80208a8:	af00      	add	r7, sp, #0
 80208aa:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/

	uint8_t filename_position = find_filename_argument(name);
 80208ac:	6878      	ldr	r0, [r7, #4]
 80208ae:	f000 f9bf 	bl	8020c30 <find_filename_argument>
 80208b2:	4603      	mov	r3, r0
 80208b4:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	name = name + filename_position;
 80208b6:	7bfb      	ldrb	r3, [r7, #15]
 80208b8:	687a      	ldr	r2, [r7, #4]
 80208ba:	4413      	add	r3, r2
 80208bc:	607b      	str	r3, [r7, #4]

	fresult = f_stat (name, &fno);
 80208be:	4917      	ldr	r1, [pc, #92]	; (802091c <remove_file+0x78>)
 80208c0:	6878      	ldr	r0, [r7, #4]
 80208c2:	f014 fe3c 	bl	803553e <f_stat>
 80208c6:	4603      	mov	r3, r0
 80208c8:	461a      	mov	r2, r3
 80208ca:	4b15      	ldr	r3, [pc, #84]	; (8020920 <remove_file+0x7c>)
 80208cc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80208ce:	4b14      	ldr	r3, [pc, #80]	; (8020920 <remove_file+0x7c>)
 80208d0:	781b      	ldrb	r3, [r3, #0]
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	d004      	beq.n	80208e0 <remove_file+0x3c>
	{
		printf("File '%s' does not exists!\r\n", name);
 80208d6:	6879      	ldr	r1, [r7, #4]
 80208d8:	4812      	ldr	r0, [pc, #72]	; (8020924 <remove_file+0x80>)
 80208da:	f019 fc0b 	bl	803a0f4 <iprintf>
 80208de:	e016      	b.n	802090e <remove_file+0x6a>
	}
	else
	{
		fresult = f_unlink (name);
 80208e0:	6878      	ldr	r0, [r7, #4]
 80208e2:	f014 fe86 	bl	80355f2 <f_unlink>
 80208e6:	4603      	mov	r3, r0
 80208e8:	461a      	mov	r2, r3
 80208ea:	4b0d      	ldr	r3, [pc, #52]	; (8020920 <remove_file+0x7c>)
 80208ec:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK)
 80208ee:	4b0c      	ldr	r3, [pc, #48]	; (8020920 <remove_file+0x7c>)
 80208f0:	781b      	ldrb	r3, [r3, #0]
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	d104      	bne.n	8020900 <remove_file+0x5c>
		{
			printf("'%s' has been removed successfully.\r\n", name);
 80208f6:	6879      	ldr	r1, [r7, #4]
 80208f8:	480b      	ldr	r0, [pc, #44]	; (8020928 <remove_file+0x84>)
 80208fa:	f019 fbfb 	bl	803a0f4 <iprintf>
 80208fe:	e006      	b.n	802090e <remove_file+0x6a>
		}
		else
		{
			printf("Error(%d) when removing '%s'!\r\n",fresult, name);
 8020900:	4b07      	ldr	r3, [pc, #28]	; (8020920 <remove_file+0x7c>)
 8020902:	781b      	ldrb	r3, [r3, #0]
 8020904:	687a      	ldr	r2, [r7, #4]
 8020906:	4619      	mov	r1, r3
 8020908:	4808      	ldr	r0, [pc, #32]	; (802092c <remove_file+0x88>)
 802090a:	f019 fbf3 	bl	803a0f4 <iprintf>
		}
	}
	return fresult;
 802090e:	4b04      	ldr	r3, [pc, #16]	; (8020920 <remove_file+0x7c>)
 8020910:	781b      	ldrb	r3, [r3, #0]
}
 8020912:	4618      	mov	r0, r3
 8020914:	3710      	adds	r7, #16
 8020916:	46bd      	mov	sp, r7
 8020918:	bd80      	pop	{r7, pc}
 802091a:	bf00      	nop
 802091c:	240000b8 	.word	0x240000b8
 8020920:	240001d8 	.word	0x240001d8
 8020924:	0803b428 	.word	0x0803b428
 8020928:	0803b448 	.word	0x0803b448
 802092c:	0803b470 	.word	0x0803b470

08020930 <create_dir>:

FRESULT create_dir (char *name)
{
 8020930:	b580      	push	{r7, lr}
 8020932:	b084      	sub	sp, #16
 8020934:	af00      	add	r7, sp, #0
 8020936:	6078      	str	r0, [r7, #4]
	uint8_t filename_position = find_filename_argument(name);
 8020938:	6878      	ldr	r0, [r7, #4]
 802093a:	f000 f979 	bl	8020c30 <find_filename_argument>
 802093e:	4603      	mov	r3, r0
 8020940:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	name = name + filename_position;
 8020942:	7bfb      	ldrb	r3, [r7, #15]
 8020944:	687a      	ldr	r2, [r7, #4]
 8020946:	4413      	add	r3, r2
 8020948:	607b      	str	r3, [r7, #4]

    fresult = f_mkdir(name);
 802094a:	6878      	ldr	r0, [r7, #4]
 802094c:	f014 ff70 	bl	8035830 <f_mkdir>
 8020950:	4603      	mov	r3, r0
 8020952:	461a      	mov	r2, r3
 8020954:	4b0b      	ldr	r3, [pc, #44]	; (8020984 <create_dir+0x54>)
 8020956:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8020958:	4b0a      	ldr	r3, [pc, #40]	; (8020984 <create_dir+0x54>)
 802095a:	781b      	ldrb	r3, [r3, #0]
 802095c:	2b00      	cmp	r3, #0
 802095e:	d104      	bne.n	802096a <create_dir+0x3a>
    {
    	printf("'%s' has been created successfully.\r\n", name);
 8020960:	6879      	ldr	r1, [r7, #4]
 8020962:	4809      	ldr	r0, [pc, #36]	; (8020988 <create_dir+0x58>)
 8020964:	f019 fbc6 	bl	803a0f4 <iprintf>
 8020968:	e006      	b.n	8020978 <create_dir+0x48>
    }
    else
    {
    	printf("Error(%d) when creating directory '%s'\r\n", fresult,name);
 802096a:	4b06      	ldr	r3, [pc, #24]	; (8020984 <create_dir+0x54>)
 802096c:	781b      	ldrb	r3, [r3, #0]
 802096e:	687a      	ldr	r2, [r7, #4]
 8020970:	4619      	mov	r1, r3
 8020972:	4806      	ldr	r0, [pc, #24]	; (802098c <create_dir+0x5c>)
 8020974:	f019 fbbe 	bl	803a0f4 <iprintf>
    }
    return fresult;
 8020978:	4b02      	ldr	r3, [pc, #8]	; (8020984 <create_dir+0x54>)
 802097a:	781b      	ldrb	r3, [r3, #0]
}
 802097c:	4618      	mov	r0, r3
 802097e:	3710      	adds	r7, #16
 8020980:	46bd      	mov	sp, r7
 8020982:	bd80      	pop	{r7, pc}
 8020984:	240001d8 	.word	0x240001d8
 8020988:	0803b490 	.word	0x0803b490
 802098c:	0803b4b8 	.word	0x0803b4b8

08020990 <write_file>:

FRESULT write_file(char *filename, char* data, BYTE mode)
{
 8020990:	b580      	push	{r7, lr}
 8020992:	b084      	sub	sp, #16
 8020994:	af00      	add	r7, sp, #0
 8020996:	60f8      	str	r0, [r7, #12]
 8020998:	60b9      	str	r1, [r7, #8]
 802099a:	4613      	mov	r3, r2
 802099c:	71fb      	strb	r3, [r7, #7]

	fresult = f_open(&USBHFile, filename, mode);
 802099e:	79fb      	ldrb	r3, [r7, #7]
 80209a0:	461a      	mov	r2, r3
 80209a2:	68f9      	ldr	r1, [r7, #12]
 80209a4:	4826      	ldr	r0, [pc, #152]	; (8020a40 <write_file+0xb0>)
 80209a6:	f013 fac7 	bl	8033f38 <f_open>
 80209aa:	4603      	mov	r3, r0
 80209ac:	461a      	mov	r2, r3
 80209ae:	4b25      	ldr	r3, [pc, #148]	; (8020a44 <write_file+0xb4>)
 80209b0:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 80209b2:	4b24      	ldr	r3, [pc, #144]	; (8020a44 <write_file+0xb4>)
 80209b4:	781b      	ldrb	r3, [r3, #0]
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	d009      	beq.n	80209ce <write_file+0x3e>
		printf("Error(%d) when opening file '%s'.\r\n", fresult, filename);
 80209ba:	4b22      	ldr	r3, [pc, #136]	; (8020a44 <write_file+0xb4>)
 80209bc:	781b      	ldrb	r3, [r3, #0]
 80209be:	68fa      	ldr	r2, [r7, #12]
 80209c0:	4619      	mov	r1, r3
 80209c2:	4821      	ldr	r0, [pc, #132]	; (8020a48 <write_file+0xb8>)
 80209c4:	f019 fb96 	bl	803a0f4 <iprintf>
		return fresult;
 80209c8:	4b1e      	ldr	r3, [pc, #120]	; (8020a44 <write_file+0xb4>)
 80209ca:	781b      	ldrb	r3, [r3, #0]
 80209cc:	e033      	b.n	8020a36 <write_file+0xa6>
	}

	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 80209ce:	68b8      	ldr	r0, [r7, #8]
 80209d0:	f7ff fca8 	bl	8020324 <strlen>
 80209d4:	4602      	mov	r2, r0
 80209d6:	4b1d      	ldr	r3, [pc, #116]	; (8020a4c <write_file+0xbc>)
 80209d8:	68b9      	ldr	r1, [r7, #8]
 80209da:	4819      	ldr	r0, [pc, #100]	; (8020a40 <write_file+0xb0>)
 80209dc:	f013 ff6c 	bl	80348b8 <f_write>
 80209e0:	4603      	mov	r3, r0
 80209e2:	461a      	mov	r2, r3
 80209e4:	4b17      	ldr	r3, [pc, #92]	; (8020a44 <write_file+0xb4>)
 80209e6:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80209e8:	4b16      	ldr	r3, [pc, #88]	; (8020a44 <write_file+0xb4>)
 80209ea:	781b      	ldrb	r3, [r3, #0]
 80209ec:	2b00      	cmp	r3, #0
 80209ee:	d009      	beq.n	8020a04 <write_file+0x74>
	{
		printf("Error(%d) when opening file '%s'.\r\n", fresult, filename);
 80209f0:	4b14      	ldr	r3, [pc, #80]	; (8020a44 <write_file+0xb4>)
 80209f2:	781b      	ldrb	r3, [r3, #0]
 80209f4:	68fa      	ldr	r2, [r7, #12]
 80209f6:	4619      	mov	r1, r3
 80209f8:	4813      	ldr	r0, [pc, #76]	; (8020a48 <write_file+0xb8>)
 80209fa:	f019 fb7b 	bl	803a0f4 <iprintf>
		return fresult;
 80209fe:	4b11      	ldr	r3, [pc, #68]	; (8020a44 <write_file+0xb4>)
 8020a00:	781b      	ldrb	r3, [r3, #0]
 8020a02:	e018      	b.n	8020a36 <write_file+0xa6>
	}

	/* Close file */
	fresult = f_close(&USBHFile);
 8020a04:	480e      	ldr	r0, [pc, #56]	; (8020a40 <write_file+0xb0>)
 8020a06:	f014 faa0 	bl	8034f4a <f_close>
 8020a0a:	4603      	mov	r3, r0
 8020a0c:	461a      	mov	r2, r3
 8020a0e:	4b0d      	ldr	r3, [pc, #52]	; (8020a44 <write_file+0xb4>)
 8020a10:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8020a12:	4b0c      	ldr	r3, [pc, #48]	; (8020a44 <write_file+0xb4>)
 8020a14:	781b      	ldrb	r3, [r3, #0]
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	d007      	beq.n	8020a2a <write_file+0x9a>
	{
		printf("Error(%d) when opening file '%s'.\r\n", fresult, filename);
 8020a1a:	4b0a      	ldr	r3, [pc, #40]	; (8020a44 <write_file+0xb4>)
 8020a1c:	781b      	ldrb	r3, [r3, #0]
 8020a1e:	68fa      	ldr	r2, [r7, #12]
 8020a20:	4619      	mov	r1, r3
 8020a22:	4809      	ldr	r0, [pc, #36]	; (8020a48 <write_file+0xb8>)
 8020a24:	f019 fb66 	bl	803a0f4 <iprintf>
 8020a28:	e003      	b.n	8020a32 <write_file+0xa2>
	}
	else
	{
		printf("File '%s' is written successfully.\r\n", filename);
 8020a2a:	68f9      	ldr	r1, [r7, #12]
 8020a2c:	4808      	ldr	r0, [pc, #32]	; (8020a50 <write_file+0xc0>)
 8020a2e:	f019 fb61 	bl	803a0f4 <iprintf>
	}

	return fresult;
 8020a32:	4b04      	ldr	r3, [pc, #16]	; (8020a44 <write_file+0xb4>)
 8020a34:	781b      	ldrb	r3, [r3, #0]
}
 8020a36:	4618      	mov	r0, r3
 8020a38:	3710      	adds	r7, #16
 8020a3a:	46bd      	mov	sp, r7
 8020a3c:	bd80      	pop	{r7, pc}
 8020a3e:	bf00      	nop
 8020a40:	24001ba8 	.word	0x24001ba8
 8020a44:	240001d8 	.word	0x240001d8
 8020a48:	0803b4e4 	.word	0x0803b4e4
 8020a4c:	240001e0 	.word	0x240001e0
 8020a50:	0803b508 	.word	0x0803b508

08020a54 <read_file>:

FRESULT read_file (char *filename)
{
 8020a54:	b580      	push	{r7, lr}
 8020a56:	b084      	sub	sp, #16
 8020a58:	af00      	add	r7, sp, #0
 8020a5a:	6078      	str	r0, [r7, #4]
	uint8_t filename_position = find_filename_argument(filename);
 8020a5c:	6878      	ldr	r0, [r7, #4]
 8020a5e:	f000 f8e7 	bl	8020c30 <find_filename_argument>
 8020a62:	4603      	mov	r3, r0
 8020a64:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	filename = filename + filename_position;
 8020a66:	7bfb      	ldrb	r3, [r7, #15]
 8020a68:	687a      	ldr	r2, [r7, #4]
 8020a6a:	4413      	add	r3, r2
 8020a6c:	607b      	str	r3, [r7, #4]


	/**** check whether the file exists or not ****/
	fresult = f_stat (filename, &fno);
 8020a6e:	4938      	ldr	r1, [pc, #224]	; (8020b50 <read_file+0xfc>)
 8020a70:	6878      	ldr	r0, [r7, #4]
 8020a72:	f014 fd64 	bl	803553e <f_stat>
 8020a76:	4603      	mov	r3, r0
 8020a78:	461a      	mov	r2, r3
 8020a7a:	4b36      	ldr	r3, [pc, #216]	; (8020b54 <read_file+0x100>)
 8020a7c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8020a7e:	4b35      	ldr	r3, [pc, #212]	; (8020b54 <read_file+0x100>)
 8020a80:	781b      	ldrb	r3, [r3, #0]
 8020a82:	2b00      	cmp	r3, #0
 8020a84:	d006      	beq.n	8020a94 <read_file+0x40>
	{
		printf("File '%s' does not exists\r\n", filename);
 8020a86:	6879      	ldr	r1, [r7, #4]
 8020a88:	4833      	ldr	r0, [pc, #204]	; (8020b58 <read_file+0x104>)
 8020a8a:	f019 fb33 	bl	803a0f4 <iprintf>
	    return fresult;
 8020a8e:	4b31      	ldr	r3, [pc, #196]	; (8020b54 <read_file+0x100>)
 8020a90:	781b      	ldrb	r3, [r3, #0]
 8020a92:	e059      	b.n	8020b48 <read_file+0xf4>
	}

	/* Open file to read */
	fresult = f_open(&USBHFile, filename, FA_READ);
 8020a94:	2201      	movs	r2, #1
 8020a96:	6879      	ldr	r1, [r7, #4]
 8020a98:	4830      	ldr	r0, [pc, #192]	; (8020b5c <read_file+0x108>)
 8020a9a:	f013 fa4d 	bl	8033f38 <f_open>
 8020a9e:	4603      	mov	r3, r0
 8020aa0:	461a      	mov	r2, r3
 8020aa2:	4b2c      	ldr	r3, [pc, #176]	; (8020b54 <read_file+0x100>)
 8020aa4:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK)
 8020aa6:	4b2b      	ldr	r3, [pc, #172]	; (8020b54 <read_file+0x100>)
 8020aa8:	781b      	ldrb	r3, [r3, #0]
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	d009      	beq.n	8020ac2 <read_file+0x6e>
	{
		printf("Error(%d) when opening file '%s'\r\n", fresult, filename);
 8020aae:	4b29      	ldr	r3, [pc, #164]	; (8020b54 <read_file+0x100>)
 8020ab0:	781b      	ldrb	r3, [r3, #0]
 8020ab2:	687a      	ldr	r2, [r7, #4]
 8020ab4:	4619      	mov	r1, r3
 8020ab6:	482a      	ldr	r0, [pc, #168]	; (8020b60 <read_file+0x10c>)
 8020ab8:	f019 fb1c 	bl	803a0f4 <iprintf>
		return fresult;
 8020abc:	4b25      	ldr	r3, [pc, #148]	; (8020b54 <read_file+0x100>)
 8020abe:	781b      	ldrb	r3, [r3, #0]
 8020ac0:	e042      	b.n	8020b48 <read_file+0xf4>
	}

	char *buffer = malloc(f_size(&USBHFile)+1);
 8020ac2:	4b26      	ldr	r3, [pc, #152]	; (8020b5c <read_file+0x108>)
 8020ac4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8020ac8:	4613      	mov	r3, r2
 8020aca:	3301      	adds	r3, #1
 8020acc:	4618      	mov	r0, r3
 8020ace:	f019 fa0b 	bl	8039ee8 <malloc>
 8020ad2:	4603      	mov	r3, r0
 8020ad4:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&USBHFile, buffer, f_size(&USBHFile), &br);
 8020ad6:	4b21      	ldr	r3, [pc, #132]	; (8020b5c <read_file+0x108>)
 8020ad8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8020adc:	4b21      	ldr	r3, [pc, #132]	; (8020b64 <read_file+0x110>)
 8020ade:	68b9      	ldr	r1, [r7, #8]
 8020ae0:	481e      	ldr	r0, [pc, #120]	; (8020b5c <read_file+0x108>)
 8020ae2:	f013 fd22 	bl	803452a <f_read>
 8020ae6:	4603      	mov	r3, r0
 8020ae8:	461a      	mov	r2, r3
 8020aea:	4b1a      	ldr	r3, [pc, #104]	; (8020b54 <read_file+0x100>)
 8020aec:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8020aee:	4b19      	ldr	r3, [pc, #100]	; (8020b54 <read_file+0x100>)
 8020af0:	781b      	ldrb	r3, [r3, #0]
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	d009      	beq.n	8020b0a <read_file+0xb6>
	{
		printf("Error(%d) when reading file '%s'\r\n", fresult, filename);
 8020af6:	4b17      	ldr	r3, [pc, #92]	; (8020b54 <read_file+0x100>)
 8020af8:	781b      	ldrb	r3, [r3, #0]
 8020afa:	687a      	ldr	r2, [r7, #4]
 8020afc:	4619      	mov	r1, r3
 8020afe:	481a      	ldr	r0, [pc, #104]	; (8020b68 <read_file+0x114>)
 8020b00:	f019 faf8 	bl	803a0f4 <iprintf>
	    return fresult;
 8020b04:	4b13      	ldr	r3, [pc, #76]	; (8020b54 <read_file+0x100>)
 8020b06:	781b      	ldrb	r3, [r3, #0]
 8020b08:	e01e      	b.n	8020b48 <read_file+0xf4>
	}

	buffer[f_size(&USBHFile)] = '\0';
 8020b0a:	4b14      	ldr	r3, [pc, #80]	; (8020b5c <read_file+0x108>)
 8020b0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8020b10:	68bb      	ldr	r3, [r7, #8]
 8020b12:	4413      	add	r3, r2
 8020b14:	2200      	movs	r2, #0
 8020b16:	701a      	strb	r2, [r3, #0]


	printf("%s\r\n", buffer);
 8020b18:	68b9      	ldr	r1, [r7, #8]
 8020b1a:	4814      	ldr	r0, [pc, #80]	; (8020b6c <read_file+0x118>)
 8020b1c:	f019 faea 	bl	803a0f4 <iprintf>
	/* Close file */
	fresult = f_close(&USBHFile);
 8020b20:	480e      	ldr	r0, [pc, #56]	; (8020b5c <read_file+0x108>)
 8020b22:	f014 fa12 	bl	8034f4a <f_close>
 8020b26:	4603      	mov	r3, r0
 8020b28:	461a      	mov	r2, r3
 8020b2a:	4b0a      	ldr	r3, [pc, #40]	; (8020b54 <read_file+0x100>)
 8020b2c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8020b2e:	4b09      	ldr	r3, [pc, #36]	; (8020b54 <read_file+0x100>)
 8020b30:	781b      	ldrb	r3, [r3, #0]
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d006      	beq.n	8020b44 <read_file+0xf0>
	{
		printf("Error(%d) when closing file '%s'\r\n", fresult, filename);
 8020b36:	4b07      	ldr	r3, [pc, #28]	; (8020b54 <read_file+0x100>)
 8020b38:	781b      	ldrb	r3, [r3, #0]
 8020b3a:	687a      	ldr	r2, [r7, #4]
 8020b3c:	4619      	mov	r1, r3
 8020b3e:	480c      	ldr	r0, [pc, #48]	; (8020b70 <read_file+0x11c>)
 8020b40:	f019 fad8 	bl	803a0f4 <iprintf>
	}

	return fresult;
 8020b44:	4b03      	ldr	r3, [pc, #12]	; (8020b54 <read_file+0x100>)
 8020b46:	781b      	ldrb	r3, [r3, #0]
}
 8020b48:	4618      	mov	r0, r3
 8020b4a:	3710      	adds	r7, #16
 8020b4c:	46bd      	mov	sp, r7
 8020b4e:	bd80      	pop	{r7, pc}
 8020b50:	240000b8 	.word	0x240000b8
 8020b54:	240001d8 	.word	0x240001d8
 8020b58:	0803b530 	.word	0x0803b530
 8020b5c:	24001ba8 	.word	0x24001ba8
 8020b60:	0803b54c 	.word	0x0803b54c
 8020b64:	240001dc 	.word	0x240001dc
 8020b68:	0803b570 	.word	0x0803b570
 8020b6c:	0803b38c 	.word	0x0803b38c
 8020b70:	0803b594 	.word	0x0803b594

08020b74 <echo>:


/* HIGH LEVEL FUNCTIONS */
FRESULT echo(char *arguments){
 8020b74:	b580      	push	{r7, lr}
 8020b76:	b088      	sub	sp, #32
 8020b78:	af00      	add	r7, sp, #0
 8020b7a:	6078      	str	r0, [r7, #4]
	uint8_t argument_position = find_filename_argument(arguments);
 8020b7c:	6878      	ldr	r0, [r7, #4]
 8020b7e:	f000 f857 	bl	8020c30 <find_filename_argument>
 8020b82:	4603      	mov	r3, r0
 8020b84:	77fb      	strb	r3, [r7, #31]
		return FR_INVALID_NAME;
	}

	char *data_field_start_ptr, *data_field_end_ptr, *file_name_ptr;

	data_field_start_ptr = strchr(arguments, '"');
 8020b86:	2122      	movs	r1, #34	; 0x22
 8020b88:	6878      	ldr	r0, [r7, #4]
 8020b8a:	f019 fb71 	bl	803a270 <strchr>
 8020b8e:	61b8      	str	r0, [r7, #24]
	if(!data_field_start_ptr){
 8020b90:	69bb      	ldr	r3, [r7, #24]
 8020b92:	2b00      	cmp	r3, #0
 8020b94:	d104      	bne.n	8020ba0 <echo+0x2c>
		printf("Specify the text to be written in the file!\r\n");
 8020b96:	4822      	ldr	r0, [pc, #136]	; (8020c20 <echo+0xac>)
 8020b98:	f019 fb32 	bl	803a200 <puts>
		return FR_INVALID_NAME;
 8020b9c:	2306      	movs	r3, #6
 8020b9e:	e03a      	b.n	8020c16 <echo+0xa2>
	}

	data_field_end_ptr = strchr(data_field_start_ptr+1, '"');
 8020ba0:	69bb      	ldr	r3, [r7, #24]
 8020ba2:	3301      	adds	r3, #1
 8020ba4:	2122      	movs	r1, #34	; 0x22
 8020ba6:	4618      	mov	r0, r3
 8020ba8:	f019 fb62 	bl	803a270 <strchr>
 8020bac:	6178      	str	r0, [r7, #20]


	if(!data_field_end_ptr){
 8020bae:	697b      	ldr	r3, [r7, #20]
 8020bb0:	2b00      	cmp	r3, #0
 8020bb2:	d104      	bne.n	8020bbe <echo+0x4a>
		printf("Specify the text to be written in the file!\r\n");
 8020bb4:	481a      	ldr	r0, [pc, #104]	; (8020c20 <echo+0xac>)
 8020bb6:	f019 fb23 	bl	803a200 <puts>
		return FR_INVALID_NAME;
 8020bba:	2306      	movs	r3, #6
 8020bbc:	e02b      	b.n	8020c16 <echo+0xa2>
	}
	data_field_start_ptr++;
 8020bbe:	69bb      	ldr	r3, [r7, #24]
 8020bc0:	3301      	adds	r3, #1
 8020bc2:	61bb      	str	r3, [r7, #24]
	*data_field_end_ptr = '\0';
 8020bc4:	697b      	ldr	r3, [r7, #20]
 8020bc6:	2200      	movs	r2, #0
 8020bc8:	701a      	strb	r2, [r3, #0]

	file_name_ptr = strstr(data_field_end_ptr+1, ">>");
 8020bca:	697b      	ldr	r3, [r7, #20]
 8020bcc:	3301      	adds	r3, #1
 8020bce:	4915      	ldr	r1, [pc, #84]	; (8020c24 <echo+0xb0>)
 8020bd0:	4618      	mov	r0, r3
 8020bd2:	f019 fb6e 	bl	803a2b2 <strstr>
 8020bd6:	6138      	str	r0, [r7, #16]
	if(!file_name_ptr){
 8020bd8:	693b      	ldr	r3, [r7, #16]
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	d104      	bne.n	8020be8 <echo+0x74>
		printf("Specify the filename to be written in the file!\r\n");
 8020bde:	4812      	ldr	r0, [pc, #72]	; (8020c28 <echo+0xb4>)
 8020be0:	f019 fb0e 	bl	803a200 <puts>
		return FR_INVALID_NAME;
 8020be4:	2306      	movs	r3, #6
 8020be6:	e016      	b.n	8020c16 <echo+0xa2>
	}

	uint8_t filename_position = find_filename_argument(file_name_ptr+2);
 8020be8:	693b      	ldr	r3, [r7, #16]
 8020bea:	3302      	adds	r3, #2
 8020bec:	4618      	mov	r0, r3
 8020bee:	f000 f81f 	bl	8020c30 <find_filename_argument>
 8020bf2:	4603      	mov	r3, r0
 8020bf4:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Specify the filename to be written in the file!\r\n");
		return FR_INVALID_NAME;
	}

	file_name_ptr = file_name_ptr + filename_position + 2;
 8020bf6:	7bfb      	ldrb	r3, [r7, #15]
 8020bf8:	3302      	adds	r3, #2
 8020bfa:	693a      	ldr	r2, [r7, #16]
 8020bfc:	4413      	add	r3, r2
 8020bfe:	613b      	str	r3, [r7, #16]

	fresult = write_file(file_name_ptr, data_field_start_ptr, FA_OPEN_ALWAYS | FA_WRITE);
 8020c00:	2212      	movs	r2, #18
 8020c02:	69b9      	ldr	r1, [r7, #24]
 8020c04:	6938      	ldr	r0, [r7, #16]
 8020c06:	f7ff fec3 	bl	8020990 <write_file>
 8020c0a:	4603      	mov	r3, r0
 8020c0c:	461a      	mov	r2, r3
 8020c0e:	4b07      	ldr	r3, [pc, #28]	; (8020c2c <echo+0xb8>)
 8020c10:	701a      	strb	r2, [r3, #0]
	return fresult;
 8020c12:	4b06      	ldr	r3, [pc, #24]	; (8020c2c <echo+0xb8>)
 8020c14:	781b      	ldrb	r3, [r3, #0]

}
 8020c16:	4618      	mov	r0, r3
 8020c18:	3720      	adds	r7, #32
 8020c1a:	46bd      	mov	sp, r7
 8020c1c:	bd80      	pop	{r7, pc}
 8020c1e:	bf00      	nop
 8020c20:	0803b5b8 	.word	0x0803b5b8
 8020c24:	0803b5e8 	.word	0x0803b5e8
 8020c28:	0803b5ec 	.word	0x0803b5ec
 8020c2c:	240001d8 	.word	0x240001d8

08020c30 <find_filename_argument>:

int8_t find_filename_argument(char* command)
{
 8020c30:	b580      	push	{r7, lr}
 8020c32:	b086      	sub	sp, #24
 8020c34:	af00      	add	r7, sp, #0
 8020c36:	6078      	str	r0, [r7, #4]
	char* args_start = command;
 8020c38:	687b      	ldr	r3, [r7, #4]
 8020c3a:	613b      	str	r3, [r7, #16]
	uint8_t len = strlen(args_start);
 8020c3c:	6938      	ldr	r0, [r7, #16]
 8020c3e:	f7ff fb71 	bl	8020324 <strlen>
 8020c42:	4603      	mov	r3, r0
 8020c44:	73fb      	strb	r3, [r7, #15]

	int8_t i = 0;
 8020c46:	2300      	movs	r3, #0
 8020c48:	75fb      	strb	r3, [r7, #23]

	if(len == 0){
 8020c4a:	7bfb      	ldrb	r3, [r7, #15]
 8020c4c:	2b00      	cmp	r3, #0
 8020c4e:	d102      	bne.n	8020c56 <find_filename_argument+0x26>
		return ARG_ERR;
 8020c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020c54:	e019      	b.n	8020c8a <find_filename_argument+0x5a>
	}

	for(i = 0; i <= len; i ++)
 8020c56:	2300      	movs	r3, #0
 8020c58:	75fb      	strb	r3, [r7, #23]
 8020c5a:	e00f      	b.n	8020c7c <find_filename_argument+0x4c>
	{
		if(args_start[i] != ' ')
 8020c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020c60:	693a      	ldr	r2, [r7, #16]
 8020c62:	4413      	add	r3, r2
 8020c64:	781b      	ldrb	r3, [r3, #0]
 8020c66:	2b20      	cmp	r3, #32
 8020c68:	d002      	beq.n	8020c70 <find_filename_argument+0x40>
		{
			return i;
 8020c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020c6e:	e00c      	b.n	8020c8a <find_filename_argument+0x5a>
	for(i = 0; i <= len; i ++)
 8020c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020c74:	b2db      	uxtb	r3, r3
 8020c76:	3301      	adds	r3, #1
 8020c78:	b2db      	uxtb	r3, r3
 8020c7a:	75fb      	strb	r3, [r7, #23]
 8020c7c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8020c80:	7bfb      	ldrb	r3, [r7, #15]
 8020c82:	429a      	cmp	r2, r3
 8020c84:	ddea      	ble.n	8020c5c <find_filename_argument+0x2c>
			break;
		}
	}

	return ARG_ERR;
 8020c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8020c8a:	4618      	mov	r0, r3
 8020c8c:	3718      	adds	r7, #24
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	bd80      	pop	{r7, pc}
	...

08020c94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8020c94:	b480      	push	{r7}
 8020c96:	b085      	sub	sp, #20
 8020c98:	af00      	add	r7, sp, #0
 8020c9a:	60f8      	str	r0, [r7, #12]
 8020c9c:	60b9      	str	r1, [r7, #8]
 8020c9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8020ca0:	68fb      	ldr	r3, [r7, #12]
 8020ca2:	4a07      	ldr	r2, [pc, #28]	; (8020cc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8020ca4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8020ca6:	68bb      	ldr	r3, [r7, #8]
 8020ca8:	4a06      	ldr	r2, [pc, #24]	; (8020cc4 <vApplicationGetIdleTaskMemory+0x30>)
 8020caa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	2280      	movs	r2, #128	; 0x80
 8020cb0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8020cb2:	bf00      	nop
 8020cb4:	3714      	adds	r7, #20
 8020cb6:	46bd      	mov	sp, r7
 8020cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cbc:	4770      	bx	lr
 8020cbe:	bf00      	nop
 8020cc0:	240001e8 	.word	0x240001e8
 8020cc4:	2400023c 	.word	0x2400023c

08020cc8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8020cc8:	b480      	push	{r7}
 8020cca:	b085      	sub	sp, #20
 8020ccc:	af00      	add	r7, sp, #0
 8020cce:	60f8      	str	r0, [r7, #12]
 8020cd0:	60b9      	str	r1, [r7, #8]
 8020cd2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8020cd4:	68fb      	ldr	r3, [r7, #12]
 8020cd6:	4a07      	ldr	r2, [pc, #28]	; (8020cf4 <vApplicationGetTimerTaskMemory+0x2c>)
 8020cd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8020cda:	68bb      	ldr	r3, [r7, #8]
 8020cdc:	4a06      	ldr	r2, [pc, #24]	; (8020cf8 <vApplicationGetTimerTaskMemory+0x30>)
 8020cde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8020ce0:	687b      	ldr	r3, [r7, #4]
 8020ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8020ce6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8020ce8:	bf00      	nop
 8020cea:	3714      	adds	r7, #20
 8020cec:	46bd      	mov	sp, r7
 8020cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cf2:	4770      	bx	lr
 8020cf4:	2400043c 	.word	0x2400043c
 8020cf8:	24000490 	.word	0x24000490

08020cfc <_write>:

uint8_t UART_TX_BUFFER[UART_TX_BUFFER_LENGTH];
uint8_t UART_RX_BUFFER[UART_RX_BUFFER_LENGTH];

int _write(int file, uint8_t *data, int len)
{
 8020cfc:	b580      	push	{r7, lr}
 8020cfe:	b086      	sub	sp, #24
 8020d00:	af00      	add	r7, sp, #0
 8020d02:	60f8      	str	r0, [r7, #12]
 8020d04:	60b9      	str	r1, [r7, #8]
 8020d06:	607a      	str	r2, [r7, #4]

   /* Lock Semaphore to ensure print buffer is used just by one thread. */
   osSemaphoreWait(UART_TX_SemaphoreHandle, osWaitForever);
 8020d08:	4b0f      	ldr	r3, [pc, #60]	; (8020d48 <_write+0x4c>)
 8020d0a:	681b      	ldr	r3, [r3, #0]
 8020d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020d10:	4618      	mov	r0, r3
 8020d12:	f015 fa35 	bl	8036180 <osSemaphoreWait>

   memcpy(UART_TX_BUFFER, data, len);
 8020d16:	687b      	ldr	r3, [r7, #4]
 8020d18:	461a      	mov	r2, r3
 8020d1a:	68b9      	ldr	r1, [r7, #8]
 8020d1c:	480b      	ldr	r0, [pc, #44]	; (8020d4c <_write+0x50>)
 8020d1e:	f019 f8f3 	bl	8039f08 <memcpy>

   HAL_StatusTypeDef status =
      HAL_UART_Transmit_DMA(&huart3, (uint8_t*)UART_TX_BUFFER, len);
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	b29b      	uxth	r3, r3
 8020d26:	461a      	mov	r2, r3
 8020d28:	4908      	ldr	r1, [pc, #32]	; (8020d4c <_write+0x50>)
 8020d2a:	4809      	ldr	r0, [pc, #36]	; (8020d50 <_write+0x54>)
 8020d2c:	f008 fd2c 	bl	8029788 <HAL_UART_Transmit_DMA>
 8020d30:	4603      	mov	r3, r0
 8020d32:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8020d34:	7dfb      	ldrb	r3, [r7, #23]
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d101      	bne.n	8020d3e <_write+0x42>
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	e000      	b.n	8020d40 <_write+0x44>
 8020d3e:	2300      	movs	r3, #0
}
 8020d40:	4618      	mov	r0, r3
 8020d42:	3718      	adds	r7, #24
 8020d44:	46bd      	mov	sp, r7
 8020d46:	bd80      	pop	{r7, pc}
 8020d48:	24000a20 	.word	0x24000a20
 8020d4c:	24000a24 	.word	0x24000a24
 8020d50:	24000890 	.word	0x24000890

08020d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020d54:	b5b0      	push	{r4, r5, r7, lr}
 8020d56:	b09a      	sub	sp, #104	; 0x68
 8020d58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020d5a:	f001 f96f 	bl	802203c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020d5e:	f000 f86f 	bl	8020e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020d62:	f000 f951 	bl	8021008 <MX_GPIO_Init>
  MX_FATFS_Init();
 8020d66:	f00b fdc9 	bl	802c8fc <MX_FATFS_Init>
  MX_DMA_Init();
 8020d6a:	f000 f925 	bl	8020fb8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8020d6e:	f000 f8d7 	bl	8020f20 <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of UART_TX_Semaphore */
  osSemaphoreDef(UART_TX_Semaphore);
 8020d72:	2300      	movs	r3, #0
 8020d74:	663b      	str	r3, [r7, #96]	; 0x60
 8020d76:	2300      	movs	r3, #0
 8020d78:	667b      	str	r3, [r7, #100]	; 0x64
  UART_TX_SemaphoreHandle = osSemaphoreCreate(osSemaphore(UART_TX_Semaphore), 1);
 8020d7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020d7e:	2101      	movs	r1, #1
 8020d80:	4618      	mov	r0, r3
 8020d82:	f015 f9ca 	bl	803611a <osSemaphoreCreate>
 8020d86:	4603      	mov	r3, r0
 8020d88:	4a24      	ldr	r2, [pc, #144]	; (8020e1c <main+0xc8>)
 8020d8a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer1 */
  osTimerDef(Timer1, Timer1_Callback);
 8020d8c:	4b24      	ldr	r3, [pc, #144]	; (8020e20 <main+0xcc>)
 8020d8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8020d90:	2300      	movs	r3, #0
 8020d92:	65fb      	str	r3, [r7, #92]	; 0x5c
  Timer1Handle = osTimerCreate(osTimer(Timer1), osTimerPeriodic, NULL);
 8020d94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020d98:	2200      	movs	r2, #0
 8020d9a:	2101      	movs	r1, #1
 8020d9c:	4618      	mov	r0, r3
 8020d9e:	f015 f8d9 	bl	8035f54 <osTimerCreate>
 8020da2:	4603      	mov	r3, r0
 8020da4:	4a1f      	ldr	r2, [pc, #124]	; (8020e24 <main+0xd0>)
 8020da6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8020da8:	4b1f      	ldr	r3, [pc, #124]	; (8020e28 <main+0xd4>)
 8020daa:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8020dae:	461d      	mov	r5, r3
 8020db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020db4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8020db8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8020dbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8020dc0:	2100      	movs	r1, #0
 8020dc2:	4618      	mov	r0, r3
 8020dc4:	f015 f865 	bl	8035e92 <osThreadCreate>
 8020dc8:	4603      	mov	r3, r0
 8020dca:	4a18      	ldr	r2, [pc, #96]	; (8020e2c <main+0xd8>)
 8020dcc:	6013      	str	r3, [r2, #0]

  /* definition and creation of USBFileSystemTa */
  osThreadDef(USBFileSystemTa, USBFileSystemTask_Start, osPriorityNormal, 0, 128);
 8020dce:	4b18      	ldr	r3, [pc, #96]	; (8020e30 <main+0xdc>)
 8020dd0:	f107 0420 	add.w	r4, r7, #32
 8020dd4:	461d      	mov	r5, r3
 8020dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020dda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8020dde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USBFileSystemTaHandle = osThreadCreate(osThread(USBFileSystemTa), NULL);
 8020de2:	f107 0320 	add.w	r3, r7, #32
 8020de6:	2100      	movs	r1, #0
 8020de8:	4618      	mov	r0, r3
 8020dea:	f015 f852 	bl	8035e92 <osThreadCreate>
 8020dee:	4603      	mov	r3, r0
 8020df0:	4a10      	ldr	r2, [pc, #64]	; (8020e34 <main+0xe0>)
 8020df2:	6013      	str	r3, [r2, #0]

  /* definition and creation of ConsoleTask */
  osThreadDef(ConsoleTask, ConsoleTask_Start, osPriorityNormal, 0, 1024);
 8020df4:	4b10      	ldr	r3, [pc, #64]	; (8020e38 <main+0xe4>)
 8020df6:	1d3c      	adds	r4, r7, #4
 8020df8:	461d      	mov	r5, r3
 8020dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020dfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8020e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ConsoleTaskHandle = osThreadCreate(osThread(ConsoleTask), NULL);
 8020e06:	1d3b      	adds	r3, r7, #4
 8020e08:	2100      	movs	r1, #0
 8020e0a:	4618      	mov	r0, r3
 8020e0c:	f015 f841 	bl	8035e92 <osThreadCreate>
 8020e10:	4603      	mov	r3, r0
 8020e12:	4a0a      	ldr	r2, [pc, #40]	; (8020e3c <main+0xe8>)
 8020e14:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8020e16:	f015 f835 	bl	8035e84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8020e1a:	e7fe      	b.n	8020e1a <main+0xc6>
 8020e1c:	24000a20 	.word	0x24000a20
 8020e20:	08021a65 	.word	0x08021a65
 8020e24:	24000a1c 	.word	0x24000a1c
 8020e28:	0803b648 	.word	0x0803b648
 8020e2c:	24000a10 	.word	0x24000a10
 8020e30:	0803b664 	.word	0x0803b664
 8020e34:	24000a14 	.word	0x24000a14
 8020e38:	0803b680 	.word	0x0803b680
 8020e3c:	24000a18 	.word	0x24000a18

08020e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020e40:	b580      	push	{r7, lr}
 8020e42:	b09c      	sub	sp, #112	; 0x70
 8020e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e4a:	224c      	movs	r2, #76	; 0x4c
 8020e4c:	2100      	movs	r1, #0
 8020e4e:	4618      	mov	r0, r3
 8020e50:	f019 f868 	bl	8039f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020e54:	1d3b      	adds	r3, r7, #4
 8020e56:	2220      	movs	r2, #32
 8020e58:	2100      	movs	r1, #0
 8020e5a:	4618      	mov	r0, r3
 8020e5c:	f019 f862 	bl	8039f24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8020e60:	2002      	movs	r0, #2
 8020e62:	f005 fe6b 	bl	8026b3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8020e66:	2300      	movs	r3, #0
 8020e68:	603b      	str	r3, [r7, #0]
 8020e6a:	4b2c      	ldr	r3, [pc, #176]	; (8020f1c <SystemClock_Config+0xdc>)
 8020e6c:	699b      	ldr	r3, [r3, #24]
 8020e6e:	4a2b      	ldr	r2, [pc, #172]	; (8020f1c <SystemClock_Config+0xdc>)
 8020e70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020e74:	6193      	str	r3, [r2, #24]
 8020e76:	4b29      	ldr	r3, [pc, #164]	; (8020f1c <SystemClock_Config+0xdc>)
 8020e78:	699b      	ldr	r3, [r3, #24]
 8020e7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020e7e:	603b      	str	r3, [r7, #0]
 8020e80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8020e82:	bf00      	nop
 8020e84:	4b25      	ldr	r3, [pc, #148]	; (8020f1c <SystemClock_Config+0xdc>)
 8020e86:	699b      	ldr	r3, [r3, #24]
 8020e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8020e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020e90:	d1f8      	bne.n	8020e84 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8020e92:	2321      	movs	r3, #33	; 0x21
 8020e94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8020e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8020e9c:	2301      	movs	r3, #1
 8020e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020ea0:	2302      	movs	r3, #2
 8020ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020ea4:	2302      	movs	r3, #2
 8020ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8020ea8:	2304      	movs	r3, #4
 8020eaa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8020eac:	f240 1313 	movw	r3, #275	; 0x113
 8020eb0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8020eb2:	2301      	movs	r3, #1
 8020eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8020eb6:	2304      	movs	r3, #4
 8020eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8020eba:	2302      	movs	r3, #2
 8020ebc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8020ebe:	2304      	movs	r3, #4
 8020ec0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8020ec2:	2300      	movs	r3, #0
 8020ec4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8020ec6:	2300      	movs	r3, #0
 8020ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ece:	4618      	mov	r0, r3
 8020ed0:	f005 fe7e 	bl	8026bd0 <HAL_RCC_OscConfig>
 8020ed4:	4603      	mov	r3, r0
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	d001      	beq.n	8020ede <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8020eda:	f000 fddf 	bl	8021a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020ede:	233f      	movs	r3, #63	; 0x3f
 8020ee0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020ee2:	2303      	movs	r3, #3
 8020ee4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8020ee6:	2300      	movs	r3, #0
 8020ee8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8020eea:	2308      	movs	r3, #8
 8020eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8020eee:	2340      	movs	r3, #64	; 0x40
 8020ef0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8020ef2:	2340      	movs	r3, #64	; 0x40
 8020ef4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8020ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020efa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8020efc:	2340      	movs	r3, #64	; 0x40
 8020efe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8020f00:	1d3b      	adds	r3, r7, #4
 8020f02:	2103      	movs	r1, #3
 8020f04:	4618      	mov	r0, r3
 8020f06:	f006 fa11 	bl	802732c <HAL_RCC_ClockConfig>
 8020f0a:	4603      	mov	r3, r0
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	d001      	beq.n	8020f14 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8020f10:	f000 fdc4 	bl	8021a9c <Error_Handler>
  }
}
 8020f14:	bf00      	nop
 8020f16:	3770      	adds	r7, #112	; 0x70
 8020f18:	46bd      	mov	sp, r7
 8020f1a:	bd80      	pop	{r7, pc}
 8020f1c:	58024800 	.word	0x58024800

08020f20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8020f20:	b580      	push	{r7, lr}
 8020f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8020f24:	4b22      	ldr	r3, [pc, #136]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f26:	4a23      	ldr	r2, [pc, #140]	; (8020fb4 <MX_USART3_UART_Init+0x94>)
 8020f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8020f2a:	4b21      	ldr	r3, [pc, #132]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8020f32:	4b1f      	ldr	r3, [pc, #124]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f34:	2200      	movs	r2, #0
 8020f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8020f38:	4b1d      	ldr	r3, [pc, #116]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f3a:	2200      	movs	r2, #0
 8020f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8020f3e:	4b1c      	ldr	r3, [pc, #112]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f40:	2200      	movs	r2, #0
 8020f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8020f44:	4b1a      	ldr	r3, [pc, #104]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f46:	220c      	movs	r2, #12
 8020f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020f4a:	4b19      	ldr	r3, [pc, #100]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f4c:	2200      	movs	r2, #0
 8020f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8020f50:	4b17      	ldr	r3, [pc, #92]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f52:	2200      	movs	r2, #0
 8020f54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020f56:	4b16      	ldr	r3, [pc, #88]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f58:	2200      	movs	r2, #0
 8020f5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8020f5c:	4b14      	ldr	r3, [pc, #80]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f5e:	2200      	movs	r2, #0
 8020f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020f62:	4b13      	ldr	r3, [pc, #76]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f64:	2200      	movs	r2, #0
 8020f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8020f68:	4811      	ldr	r0, [pc, #68]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f6a:	f008 fbbd 	bl	80296e8 <HAL_UART_Init>
 8020f6e:	4603      	mov	r3, r0
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d001      	beq.n	8020f78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8020f74:	f000 fd92 	bl	8021a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020f78:	2100      	movs	r1, #0
 8020f7a:	480d      	ldr	r0, [pc, #52]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f7c:	f00a fbac 	bl	802b6d8 <HAL_UARTEx_SetTxFifoThreshold>
 8020f80:	4603      	mov	r3, r0
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	d001      	beq.n	8020f8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8020f86:	f000 fd89 	bl	8021a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020f8a:	2100      	movs	r1, #0
 8020f8c:	4808      	ldr	r0, [pc, #32]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f8e:	f00a fbe1 	bl	802b754 <HAL_UARTEx_SetRxFifoThreshold>
 8020f92:	4603      	mov	r3, r0
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	d001      	beq.n	8020f9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8020f98:	f000 fd80 	bl	8021a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8020f9c:	4804      	ldr	r0, [pc, #16]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f9e:	f00a fb62 	bl	802b666 <HAL_UARTEx_DisableFifoMode>
 8020fa2:	4603      	mov	r3, r0
 8020fa4:	2b00      	cmp	r3, #0
 8020fa6:	d001      	beq.n	8020fac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8020fa8:	f000 fd78 	bl	8021a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8020fac:	bf00      	nop
 8020fae:	bd80      	pop	{r7, pc}
 8020fb0:	24000890 	.word	0x24000890
 8020fb4:	40004800 	.word	0x40004800

08020fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8020fb8:	b580      	push	{r7, lr}
 8020fba:	b082      	sub	sp, #8
 8020fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020fbe:	4b11      	ldr	r3, [pc, #68]	; (8021004 <MX_DMA_Init+0x4c>)
 8020fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8020fc4:	4a0f      	ldr	r2, [pc, #60]	; (8021004 <MX_DMA_Init+0x4c>)
 8020fc6:	f043 0301 	orr.w	r3, r3, #1
 8020fca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8020fce:	4b0d      	ldr	r3, [pc, #52]	; (8021004 <MX_DMA_Init+0x4c>)
 8020fd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8020fd4:	f003 0301 	and.w	r3, r3, #1
 8020fd8:	607b      	str	r3, [r7, #4]
 8020fda:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8020fdc:	2200      	movs	r2, #0
 8020fde:	2105      	movs	r1, #5
 8020fe0:	200b      	movs	r0, #11
 8020fe2:	f001 f963 	bl	80222ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8020fe6:	200b      	movs	r0, #11
 8020fe8:	f001 f97a 	bl	80222e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8020fec:	2200      	movs	r2, #0
 8020fee:	2105      	movs	r1, #5
 8020ff0:	200c      	movs	r0, #12
 8020ff2:	f001 f95b 	bl	80222ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8020ff6:	200c      	movs	r0, #12
 8020ff8:	f001 f972 	bl	80222e0 <HAL_NVIC_EnableIRQ>

}
 8020ffc:	bf00      	nop
 8020ffe:	3708      	adds	r7, #8
 8021000:	46bd      	mov	sp, r7
 8021002:	bd80      	pop	{r7, pc}
 8021004:	58024400 	.word	0x58024400

08021008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8021008:	b580      	push	{r7, lr}
 802100a:	b08c      	sub	sp, #48	; 0x30
 802100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802100e:	f107 031c 	add.w	r3, r7, #28
 8021012:	2200      	movs	r2, #0
 8021014:	601a      	str	r2, [r3, #0]
 8021016:	605a      	str	r2, [r3, #4]
 8021018:	609a      	str	r2, [r3, #8]
 802101a:	60da      	str	r2, [r3, #12]
 802101c:	611a      	str	r2, [r3, #16]


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802101e:	4b83      	ldr	r3, [pc, #524]	; (802122c <MX_GPIO_Init+0x224>)
 8021020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021024:	4a81      	ldr	r2, [pc, #516]	; (802122c <MX_GPIO_Init+0x224>)
 8021026:	f043 0304 	orr.w	r3, r3, #4
 802102a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802102e:	4b7f      	ldr	r3, [pc, #508]	; (802122c <MX_GPIO_Init+0x224>)
 8021030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021034:	f003 0304 	and.w	r3, r3, #4
 8021038:	61bb      	str	r3, [r7, #24]
 802103a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802103c:	4b7b      	ldr	r3, [pc, #492]	; (802122c <MX_GPIO_Init+0x224>)
 802103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021042:	4a7a      	ldr	r2, [pc, #488]	; (802122c <MX_GPIO_Init+0x224>)
 8021044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802104c:	4b77      	ldr	r3, [pc, #476]	; (802122c <MX_GPIO_Init+0x224>)
 802104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021056:	617b      	str	r3, [r7, #20]
 8021058:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802105a:	4b74      	ldr	r3, [pc, #464]	; (802122c <MX_GPIO_Init+0x224>)
 802105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021060:	4a72      	ldr	r2, [pc, #456]	; (802122c <MX_GPIO_Init+0x224>)
 8021062:	f043 0301 	orr.w	r3, r3, #1
 8021066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802106a:	4b70      	ldr	r3, [pc, #448]	; (802122c <MX_GPIO_Init+0x224>)
 802106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021070:	f003 0301 	and.w	r3, r3, #1
 8021074:	613b      	str	r3, [r7, #16]
 8021076:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8021078:	4b6c      	ldr	r3, [pc, #432]	; (802122c <MX_GPIO_Init+0x224>)
 802107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802107e:	4a6b      	ldr	r2, [pc, #428]	; (802122c <MX_GPIO_Init+0x224>)
 8021080:	f043 0302 	orr.w	r3, r3, #2
 8021084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8021088:	4b68      	ldr	r3, [pc, #416]	; (802122c <MX_GPIO_Init+0x224>)
 802108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802108e:	f003 0302 	and.w	r3, r3, #2
 8021092:	60fb      	str	r3, [r7, #12]
 8021094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8021096:	4b65      	ldr	r3, [pc, #404]	; (802122c <MX_GPIO_Init+0x224>)
 8021098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802109c:	4a63      	ldr	r2, [pc, #396]	; (802122c <MX_GPIO_Init+0x224>)
 802109e:	f043 0308 	orr.w	r3, r3, #8
 80210a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80210a6:	4b61      	ldr	r3, [pc, #388]	; (802122c <MX_GPIO_Init+0x224>)
 80210a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80210ac:	f003 0308 	and.w	r3, r3, #8
 80210b0:	60bb      	str	r3, [r7, #8]
 80210b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80210b4:	4b5d      	ldr	r3, [pc, #372]	; (802122c <MX_GPIO_Init+0x224>)
 80210b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80210ba:	4a5c      	ldr	r2, [pc, #368]	; (802122c <MX_GPIO_Init+0x224>)
 80210bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80210c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80210c4:	4b59      	ldr	r3, [pc, #356]	; (802122c <MX_GPIO_Init+0x224>)
 80210c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80210ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80210ce:	607b      	str	r3, [r7, #4]
 80210d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80210d2:	4b56      	ldr	r3, [pc, #344]	; (802122c <MX_GPIO_Init+0x224>)
 80210d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80210d8:	4a54      	ldr	r2, [pc, #336]	; (802122c <MX_GPIO_Init+0x224>)
 80210da:	f043 0310 	orr.w	r3, r3, #16
 80210de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80210e2:	4b52      	ldr	r3, [pc, #328]	; (802122c <MX_GPIO_Init+0x224>)
 80210e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80210e8:	f003 0310 	and.w	r3, r3, #16
 80210ec:	603b      	str	r3, [r7, #0]
 80210ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80210f0:	2200      	movs	r2, #0
 80210f2:	f244 0101 	movw	r1, #16385	; 0x4001
 80210f6:	484e      	ldr	r0, [pc, #312]	; (8021230 <MX_GPIO_Init+0x228>)
 80210f8:	f004 f8e2 	bl	80252c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80210fc:	2200      	movs	r2, #0
 80210fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021102:	484c      	ldr	r0, [pc, #304]	; (8021234 <MX_GPIO_Init+0x22c>)
 8021104:	f004 f8dc 	bl	80252c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, USB_VBUS_Pin|LED_YELLOW_Pin, GPIO_PIN_SET);
 8021108:	2201      	movs	r2, #1
 802110a:	2103      	movs	r1, #3
 802110c:	484a      	ldr	r0, [pc, #296]	; (8021238 <MX_GPIO_Init+0x230>)
 802110e:	f004 f8d7 	bl	80252c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8021112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021118:	2300      	movs	r3, #0
 802111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802111c:	2300      	movs	r3, #0
 802111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8021120:	f107 031c 	add.w	r3, r7, #28
 8021124:	4619      	mov	r1, r3
 8021126:	4845      	ldr	r0, [pc, #276]	; (802123c <MX_GPIO_Init+0x234>)
 8021128:	f003 ff22 	bl	8024f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 802112c:	2332      	movs	r3, #50	; 0x32
 802112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021130:	2302      	movs	r3, #2
 8021132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021134:	2300      	movs	r3, #0
 8021136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021138:	2300      	movs	r3, #0
 802113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 802113c:	230b      	movs	r3, #11
 802113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021140:	f107 031c 	add.w	r3, r7, #28
 8021144:	4619      	mov	r1, r3
 8021146:	483d      	ldr	r0, [pc, #244]	; (802123c <MX_GPIO_Init+0x234>)
 8021148:	f003 ff12 	bl	8024f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 802114c:	2386      	movs	r3, #134	; 0x86
 802114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021150:	2302      	movs	r3, #2
 8021152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021154:	2300      	movs	r3, #0
 8021156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021158:	2300      	movs	r3, #0
 802115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 802115c:	230b      	movs	r3, #11
 802115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021160:	f107 031c 	add.w	r3, r7, #28
 8021164:	4619      	mov	r1, r3
 8021166:	4836      	ldr	r0, [pc, #216]	; (8021240 <MX_GPIO_Init+0x238>)
 8021168:	f003 ff02 	bl	8024f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 802116c:	f244 0301 	movw	r3, #16385	; 0x4001
 8021170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021172:	2301      	movs	r3, #1
 8021174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021176:	2300      	movs	r3, #0
 8021178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802117a:	2300      	movs	r3, #0
 802117c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802117e:	f107 031c 	add.w	r3, r7, #28
 8021182:	4619      	mov	r1, r3
 8021184:	482a      	ldr	r0, [pc, #168]	; (8021230 <MX_GPIO_Init+0x228>)
 8021186:	f003 fef3 	bl	8024f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 802118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021190:	2302      	movs	r3, #2
 8021192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021194:	2300      	movs	r3, #0
 8021196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021198:	2300      	movs	r3, #0
 802119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 802119c:	230b      	movs	r3, #11
 802119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80211a0:	f107 031c 	add.w	r3, r7, #28
 80211a4:	4619      	mov	r1, r3
 80211a6:	4822      	ldr	r0, [pc, #136]	; (8021230 <MX_GPIO_Init+0x228>)
 80211a8:	f003 fee2 	bl	8024f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80211ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80211b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80211b2:	2301      	movs	r3, #1
 80211b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211b6:	2300      	movs	r3, #0
 80211b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80211ba:	2300      	movs	r3, #0
 80211bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80211be:	f107 031c 	add.w	r3, r7, #28
 80211c2:	4619      	mov	r1, r3
 80211c4:	481b      	ldr	r0, [pc, #108]	; (8021234 <MX_GPIO_Init+0x22c>)
 80211c6:	f003 fed3 	bl	8024f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80211ca:	2380      	movs	r3, #128	; 0x80
 80211cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80211ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80211d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211d4:	2300      	movs	r3, #0
 80211d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80211d8:	f107 031c 	add.w	r3, r7, #28
 80211dc:	4619      	mov	r1, r3
 80211de:	4819      	ldr	r0, [pc, #100]	; (8021244 <MX_GPIO_Init+0x23c>)
 80211e0:	f003 fec6 	bl	8024f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80211e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80211e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80211ea:	2302      	movs	r3, #2
 80211ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211ee:	2300      	movs	r3, #0
 80211f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80211f2:	2300      	movs	r3, #0
 80211f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80211f6:	230b      	movs	r3, #11
 80211f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80211fa:	f107 031c 	add.w	r3, r7, #28
 80211fe:	4619      	mov	r1, r3
 8021200:	4810      	ldr	r0, [pc, #64]	; (8021244 <MX_GPIO_Init+0x23c>)
 8021202:	f003 feb5 	bl	8024f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_VBUS_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin|LED_YELLOW_Pin;
 8021206:	2303      	movs	r3, #3
 8021208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802120a:	2301      	movs	r3, #1
 802120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802120e:	2300      	movs	r3, #0
 8021210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021212:	2300      	movs	r3, #0
 8021214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021216:	f107 031c 	add.w	r3, r7, #28
 802121a:	4619      	mov	r1, r3
 802121c:	4806      	ldr	r0, [pc, #24]	; (8021238 <MX_GPIO_Init+0x230>)
 802121e:	f003 fea7 	bl	8024f70 <HAL_GPIO_Init>

}
 8021222:	bf00      	nop
 8021224:	3730      	adds	r7, #48	; 0x30
 8021226:	46bd      	mov	sp, r7
 8021228:	bd80      	pop	{r7, pc}
 802122a:	bf00      	nop
 802122c:	58024400 	.word	0x58024400
 8021230:	58020400 	.word	0x58020400
 8021234:	58020c00 	.word	0x58020c00
 8021238:	58021000 	.word	0x58021000
 802123c:	58020800 	.word	0x58020800
 8021240:	58020000 	.word	0x58020000
 8021244:	58021800 	.word	0x58021800

08021248 <HAL_UART_TxCpltCallback>:

char received_command[UART_RX_BUFFER_LENGTH];

/* This function release the semaphore if the TX event is finished. */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8021248:	b580      	push	{r7, lr}
 802124a:	b082      	sub	sp, #8
 802124c:	af00      	add	r7, sp, #0
 802124e:	6078      	str	r0, [r7, #4]

	/* Release Semaphore to execute next print operation */
	osSemaphoreRelease(UART_TX_SemaphoreHandle);
 8021250:	4b06      	ldr	r3, [pc, #24]	; (802126c <HAL_UART_TxCpltCallback+0x24>)
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	4618      	mov	r0, r3
 8021256:	f014 ffe1 	bl	803621c <osSemaphoreRelease>
	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);
 802125a:	2101      	movs	r1, #1
 802125c:	4804      	ldr	r0, [pc, #16]	; (8021270 <HAL_UART_TxCpltCallback+0x28>)
 802125e:	f004 f848 	bl	80252f2 <HAL_GPIO_TogglePin>
}
 8021262:	bf00      	nop
 8021264:	3708      	adds	r7, #8
 8021266:	46bd      	mov	sp, r7
 8021268:	bd80      	pop	{r7, pc}
 802126a:	bf00      	nop
 802126c:	24000a20 	.word	0x24000a20
 8021270:	58020400 	.word	0x58020400

08021274 <HAL_UARTEx_RxEventCallback>:

/* UART RX DMA CALLBACK FUNCTION */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8021274:	b580      	push	{r7, lr}
 8021276:	b084      	sub	sp, #16
 8021278:	af00      	add	r7, sp, #0
 802127a:	6078      	str	r0, [r7, #4]
 802127c:	460b      	mov	r3, r1
 802127e:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);
 8021280:	2101      	movs	r1, #1
 8021282:	4883      	ldr	r0, [pc, #524]	; (8021490 <HAL_UARTEx_RxEventCallback+0x21c>)
 8021284:	f004 f835 	bl	80252f2 <HAL_GPIO_TogglePin>


	current_RX_buffer_position = Size; // Size parameter is not working as expected at first sight.
 8021288:	887b      	ldrh	r3, [r7, #2]
 802128a:	4a82      	ldr	r2, [pc, #520]	; (8021494 <HAL_UARTEx_RxEventCallback+0x220>)
 802128c:	6013      	str	r3, [r2, #0]

	/* Receive Command from RX BUFFER */

	if(current_RX_buffer_position > old_RX_buffer_position){
 802128e:	4b81      	ldr	r3, [pc, #516]	; (8021494 <HAL_UARTEx_RxEventCallback+0x220>)
 8021290:	681a      	ldr	r2, [r3, #0]
 8021292:	4b81      	ldr	r3, [pc, #516]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 8021294:	681b      	ldr	r3, [r3, #0]
 8021296:	429a      	cmp	r2, r3
 8021298:	d917      	bls.n	80212ca <HAL_UARTEx_RxEventCallback+0x56>
		* [   5   ]            |------------------------------------|
		* [   6   ] <- pos
		* [   7   ]
		* [ N - 1 ]
		*/
	  memcpy(received_command, UART_RX_BUFFER+old_RX_buffer_position, current_RX_buffer_position - old_RX_buffer_position -1);
 802129a:	4b7f      	ldr	r3, [pc, #508]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	4a7f      	ldr	r2, [pc, #508]	; (802149c <HAL_UARTEx_RxEventCallback+0x228>)
 80212a0:	1899      	adds	r1, r3, r2
 80212a2:	4b7c      	ldr	r3, [pc, #496]	; (8021494 <HAL_UARTEx_RxEventCallback+0x220>)
 80212a4:	681a      	ldr	r2, [r3, #0]
 80212a6:	4b7c      	ldr	r3, [pc, #496]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 80212a8:	681b      	ldr	r3, [r3, #0]
 80212aa:	1ad3      	subs	r3, r2, r3
 80212ac:	3b01      	subs	r3, #1
 80212ae:	461a      	mov	r2, r3
 80212b0:	487b      	ldr	r0, [pc, #492]	; (80214a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80212b2:	f018 fe29 	bl	8039f08 <memcpy>

	  received_command[current_RX_buffer_position - old_RX_buffer_position -1] = '\0';
 80212b6:	4b77      	ldr	r3, [pc, #476]	; (8021494 <HAL_UARTEx_RxEventCallback+0x220>)
 80212b8:	681a      	ldr	r2, [r3, #0]
 80212ba:	4b77      	ldr	r3, [pc, #476]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 80212bc:	681b      	ldr	r3, [r3, #0]
 80212be:	1ad3      	subs	r3, r2, r3
 80212c0:	3b01      	subs	r3, #1
 80212c2:	4a77      	ldr	r2, [pc, #476]	; (80214a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80212c4:	2100      	movs	r1, #0
 80212c6:	54d1      	strb	r1, [r2, r3]
 80212c8:	e01f      	b.n	802130a <HAL_UARTEx_RxEventCallback+0x96>
        * [   7   ]            |                                 |
        * [ N - 1 ]            |---------------------------------|
        */


	  memcpy(received_command, UART_RX_BUFFER+old_RX_buffer_position, UART_RX_BUFFER_LENGTH-old_RX_buffer_position);
 80212ca:	4b73      	ldr	r3, [pc, #460]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 80212cc:	681b      	ldr	r3, [r3, #0]
 80212ce:	4a73      	ldr	r2, [pc, #460]	; (802149c <HAL_UARTEx_RxEventCallback+0x228>)
 80212d0:	1899      	adds	r1, r3, r2
 80212d2:	4b71      	ldr	r3, [pc, #452]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 80212d4:	681b      	ldr	r3, [r3, #0]
 80212d6:	f1c3 0342 	rsb	r3, r3, #66	; 0x42
 80212da:	461a      	mov	r2, r3
 80212dc:	4870      	ldr	r0, [pc, #448]	; (80214a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80212de:	f018 fe13 	bl	8039f08 <memcpy>

	  memcpy(received_command+UART_RX_BUFFER_LENGTH-old_RX_buffer_position, UART_RX_BUFFER, Size-1);
 80212e2:	4b6d      	ldr	r3, [pc, #436]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 80212e4:	681b      	ldr	r3, [r3, #0]
 80212e6:	f1c3 0342 	rsb	r3, r3, #66	; 0x42
 80212ea:	4a6d      	ldr	r2, [pc, #436]	; (80214a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80212ec:	1898      	adds	r0, r3, r2
 80212ee:	887b      	ldrh	r3, [r7, #2]
 80212f0:	3b01      	subs	r3, #1
 80212f2:	461a      	mov	r2, r3
 80212f4:	4969      	ldr	r1, [pc, #420]	; (802149c <HAL_UARTEx_RxEventCallback+0x228>)
 80212f6:	f018 fe07 	bl	8039f08 <memcpy>

	  received_command[UART_RX_BUFFER_LENGTH-old_RX_buffer_position + Size - 1] = '\0';
 80212fa:	887a      	ldrh	r2, [r7, #2]
 80212fc:	4b66      	ldr	r3, [pc, #408]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 80212fe:	681b      	ldr	r3, [r3, #0]
 8021300:	1ad3      	subs	r3, r2, r3
 8021302:	3341      	adds	r3, #65	; 0x41
 8021304:	4a66      	ldr	r2, [pc, #408]	; (80214a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 8021306:	2100      	movs	r1, #0
 8021308:	54d1      	strb	r1, [r2, r3]
	}

	old_RX_buffer_position = current_RX_buffer_position;
 802130a:	4b62      	ldr	r3, [pc, #392]	; (8021494 <HAL_UARTEx_RxEventCallback+0x220>)
 802130c:	681b      	ldr	r3, [r3, #0]
 802130e:	4a62      	ldr	r2, [pc, #392]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 8021310:	6013      	str	r3, [r2, #0]


	/* Start DMA Reception again */

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_RX_BUFFER, UART_RX_BUFFER_LENGTH);
 8021312:	2242      	movs	r2, #66	; 0x42
 8021314:	4961      	ldr	r1, [pc, #388]	; (802149c <HAL_UARTEx_RxEventCallback+0x228>)
 8021316:	4863      	ldr	r0, [pc, #396]	; (80214a4 <HAL_UARTEx_RxEventCallback+0x230>)
 8021318:	f00a fa5a 	bl	802b7d0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 802131c:	4b62      	ldr	r3, [pc, #392]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802131e:	681b      	ldr	r3, [r3, #0]
 8021320:	4a62      	ldr	r2, [pc, #392]	; (80214ac <HAL_UARTEx_RxEventCallback+0x238>)
 8021322:	4293      	cmp	r3, r2
 8021324:	d04a      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021326:	4b60      	ldr	r3, [pc, #384]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021328:	681b      	ldr	r3, [r3, #0]
 802132a:	4a61      	ldr	r2, [pc, #388]	; (80214b0 <HAL_UARTEx_RxEventCallback+0x23c>)
 802132c:	4293      	cmp	r3, r2
 802132e:	d045      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021330:	4b5d      	ldr	r3, [pc, #372]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021332:	681b      	ldr	r3, [r3, #0]
 8021334:	4a5f      	ldr	r2, [pc, #380]	; (80214b4 <HAL_UARTEx_RxEventCallback+0x240>)
 8021336:	4293      	cmp	r3, r2
 8021338:	d040      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 802133a:	4b5b      	ldr	r3, [pc, #364]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802133c:	681b      	ldr	r3, [r3, #0]
 802133e:	4a5e      	ldr	r2, [pc, #376]	; (80214b8 <HAL_UARTEx_RxEventCallback+0x244>)
 8021340:	4293      	cmp	r3, r2
 8021342:	d03b      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021344:	4b58      	ldr	r3, [pc, #352]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021346:	681b      	ldr	r3, [r3, #0]
 8021348:	4a5c      	ldr	r2, [pc, #368]	; (80214bc <HAL_UARTEx_RxEventCallback+0x248>)
 802134a:	4293      	cmp	r3, r2
 802134c:	d036      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 802134e:	4b56      	ldr	r3, [pc, #344]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021350:	681b      	ldr	r3, [r3, #0]
 8021352:	4a5b      	ldr	r2, [pc, #364]	; (80214c0 <HAL_UARTEx_RxEventCallback+0x24c>)
 8021354:	4293      	cmp	r3, r2
 8021356:	d031      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021358:	4b53      	ldr	r3, [pc, #332]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802135a:	681b      	ldr	r3, [r3, #0]
 802135c:	4a59      	ldr	r2, [pc, #356]	; (80214c4 <HAL_UARTEx_RxEventCallback+0x250>)
 802135e:	4293      	cmp	r3, r2
 8021360:	d02c      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021362:	4b51      	ldr	r3, [pc, #324]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021364:	681b      	ldr	r3, [r3, #0]
 8021366:	4a58      	ldr	r2, [pc, #352]	; (80214c8 <HAL_UARTEx_RxEventCallback+0x254>)
 8021368:	4293      	cmp	r3, r2
 802136a:	d027      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 802136c:	4b4e      	ldr	r3, [pc, #312]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	4a56      	ldr	r2, [pc, #344]	; (80214cc <HAL_UARTEx_RxEventCallback+0x258>)
 8021372:	4293      	cmp	r3, r2
 8021374:	d022      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021376:	4b4c      	ldr	r3, [pc, #304]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021378:	681b      	ldr	r3, [r3, #0]
 802137a:	4a55      	ldr	r2, [pc, #340]	; (80214d0 <HAL_UARTEx_RxEventCallback+0x25c>)
 802137c:	4293      	cmp	r3, r2
 802137e:	d01d      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021380:	4b49      	ldr	r3, [pc, #292]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021382:	681b      	ldr	r3, [r3, #0]
 8021384:	4a53      	ldr	r2, [pc, #332]	; (80214d4 <HAL_UARTEx_RxEventCallback+0x260>)
 8021386:	4293      	cmp	r3, r2
 8021388:	d018      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 802138a:	4b47      	ldr	r3, [pc, #284]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802138c:	681b      	ldr	r3, [r3, #0]
 802138e:	4a52      	ldr	r2, [pc, #328]	; (80214d8 <HAL_UARTEx_RxEventCallback+0x264>)
 8021390:	4293      	cmp	r3, r2
 8021392:	d013      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021394:	4b44      	ldr	r3, [pc, #272]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021396:	681b      	ldr	r3, [r3, #0]
 8021398:	4a50      	ldr	r2, [pc, #320]	; (80214dc <HAL_UARTEx_RxEventCallback+0x268>)
 802139a:	4293      	cmp	r3, r2
 802139c:	d00e      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 802139e:	4b42      	ldr	r3, [pc, #264]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213a0:	681b      	ldr	r3, [r3, #0]
 80213a2:	4a4f      	ldr	r2, [pc, #316]	; (80214e0 <HAL_UARTEx_RxEventCallback+0x26c>)
 80213a4:	4293      	cmp	r3, r2
 80213a6:	d009      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 80213a8:	4b3f      	ldr	r3, [pc, #252]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213aa:	681b      	ldr	r3, [r3, #0]
 80213ac:	4a4d      	ldr	r2, [pc, #308]	; (80214e4 <HAL_UARTEx_RxEventCallback+0x270>)
 80213ae:	4293      	cmp	r3, r2
 80213b0:	d004      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 80213b2:	4b3d      	ldr	r3, [pc, #244]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213b4:	681b      	ldr	r3, [r3, #0]
 80213b6:	4a4c      	ldr	r2, [pc, #304]	; (80214e8 <HAL_UARTEx_RxEventCallback+0x274>)
 80213b8:	4293      	cmp	r3, r2
 80213ba:	d108      	bne.n	80213ce <HAL_UARTEx_RxEventCallback+0x15a>
 80213bc:	4b3a      	ldr	r3, [pc, #232]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213be:	681b      	ldr	r3, [r3, #0]
 80213c0:	681a      	ldr	r2, [r3, #0]
 80213c2:	4b39      	ldr	r3, [pc, #228]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213c4:	681b      	ldr	r3, [r3, #0]
 80213c6:	f022 0208 	bic.w	r2, r2, #8
 80213ca:	601a      	str	r2, [r3, #0]
 80213cc:	e007      	b.n	80213de <HAL_UARTEx_RxEventCallback+0x16a>
 80213ce:	4b36      	ldr	r3, [pc, #216]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213d0:	681b      	ldr	r3, [r3, #0]
 80213d2:	681a      	ldr	r2, [r3, #0]
 80213d4:	4b34      	ldr	r3, [pc, #208]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213d6:	681b      	ldr	r3, [r3, #0]
 80213d8:	f022 0204 	bic.w	r2, r2, #4
 80213dc:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_TC);
 80213de:	4b32      	ldr	r3, [pc, #200]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213e0:	681b      	ldr	r3, [r3, #0]
 80213e2:	4a32      	ldr	r2, [pc, #200]	; (80214ac <HAL_UARTEx_RxEventCallback+0x238>)
 80213e4:	4293      	cmp	r3, r2
 80213e6:	d04a      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 80213e8:	4b2f      	ldr	r3, [pc, #188]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213ea:	681b      	ldr	r3, [r3, #0]
 80213ec:	4a30      	ldr	r2, [pc, #192]	; (80214b0 <HAL_UARTEx_RxEventCallback+0x23c>)
 80213ee:	4293      	cmp	r3, r2
 80213f0:	d045      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 80213f2:	4b2d      	ldr	r3, [pc, #180]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213f4:	681b      	ldr	r3, [r3, #0]
 80213f6:	4a2f      	ldr	r2, [pc, #188]	; (80214b4 <HAL_UARTEx_RxEventCallback+0x240>)
 80213f8:	4293      	cmp	r3, r2
 80213fa:	d040      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 80213fc:	4b2a      	ldr	r3, [pc, #168]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213fe:	681b      	ldr	r3, [r3, #0]
 8021400:	4a2d      	ldr	r2, [pc, #180]	; (80214b8 <HAL_UARTEx_RxEventCallback+0x244>)
 8021402:	4293      	cmp	r3, r2
 8021404:	d03b      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021406:	4b28      	ldr	r3, [pc, #160]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021408:	681b      	ldr	r3, [r3, #0]
 802140a:	4a2c      	ldr	r2, [pc, #176]	; (80214bc <HAL_UARTEx_RxEventCallback+0x248>)
 802140c:	4293      	cmp	r3, r2
 802140e:	d036      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021410:	4b25      	ldr	r3, [pc, #148]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021412:	681b      	ldr	r3, [r3, #0]
 8021414:	4a2a      	ldr	r2, [pc, #168]	; (80214c0 <HAL_UARTEx_RxEventCallback+0x24c>)
 8021416:	4293      	cmp	r3, r2
 8021418:	d031      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 802141a:	4b23      	ldr	r3, [pc, #140]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802141c:	681b      	ldr	r3, [r3, #0]
 802141e:	4a29      	ldr	r2, [pc, #164]	; (80214c4 <HAL_UARTEx_RxEventCallback+0x250>)
 8021420:	4293      	cmp	r3, r2
 8021422:	d02c      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021424:	4b20      	ldr	r3, [pc, #128]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	4a27      	ldr	r2, [pc, #156]	; (80214c8 <HAL_UARTEx_RxEventCallback+0x254>)
 802142a:	4293      	cmp	r3, r2
 802142c:	d027      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 802142e:	4b1e      	ldr	r3, [pc, #120]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	4a26      	ldr	r2, [pc, #152]	; (80214cc <HAL_UARTEx_RxEventCallback+0x258>)
 8021434:	4293      	cmp	r3, r2
 8021436:	d022      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021438:	4b1b      	ldr	r3, [pc, #108]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802143a:	681b      	ldr	r3, [r3, #0]
 802143c:	4a24      	ldr	r2, [pc, #144]	; (80214d0 <HAL_UARTEx_RxEventCallback+0x25c>)
 802143e:	4293      	cmp	r3, r2
 8021440:	d01d      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021442:	4b19      	ldr	r3, [pc, #100]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021444:	681b      	ldr	r3, [r3, #0]
 8021446:	4a23      	ldr	r2, [pc, #140]	; (80214d4 <HAL_UARTEx_RxEventCallback+0x260>)
 8021448:	4293      	cmp	r3, r2
 802144a:	d018      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 802144c:	4b16      	ldr	r3, [pc, #88]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802144e:	681b      	ldr	r3, [r3, #0]
 8021450:	4a21      	ldr	r2, [pc, #132]	; (80214d8 <HAL_UARTEx_RxEventCallback+0x264>)
 8021452:	4293      	cmp	r3, r2
 8021454:	d013      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021456:	4b14      	ldr	r3, [pc, #80]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021458:	681b      	ldr	r3, [r3, #0]
 802145a:	4a20      	ldr	r2, [pc, #128]	; (80214dc <HAL_UARTEx_RxEventCallback+0x268>)
 802145c:	4293      	cmp	r3, r2
 802145e:	d00e      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021460:	4b11      	ldr	r3, [pc, #68]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021462:	681b      	ldr	r3, [r3, #0]
 8021464:	4a1e      	ldr	r2, [pc, #120]	; (80214e0 <HAL_UARTEx_RxEventCallback+0x26c>)
 8021466:	4293      	cmp	r3, r2
 8021468:	d009      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 802146a:	4b0f      	ldr	r3, [pc, #60]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802146c:	681b      	ldr	r3, [r3, #0]
 802146e:	4a1d      	ldr	r2, [pc, #116]	; (80214e4 <HAL_UARTEx_RxEventCallback+0x270>)
 8021470:	4293      	cmp	r3, r2
 8021472:	d004      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021474:	4b0c      	ldr	r3, [pc, #48]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	4a1b      	ldr	r2, [pc, #108]	; (80214e8 <HAL_UARTEx_RxEventCallback+0x274>)
 802147a:	4293      	cmp	r3, r2
 802147c:	d136      	bne.n	80214ec <HAL_UARTEx_RxEventCallback+0x278>
 802147e:	4b0a      	ldr	r3, [pc, #40]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021480:	681b      	ldr	r3, [r3, #0]
 8021482:	681a      	ldr	r2, [r3, #0]
 8021484:	4b08      	ldr	r3, [pc, #32]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021486:	681b      	ldr	r3, [r3, #0]
 8021488:	f022 0210 	bic.w	r2, r2, #16
 802148c:	601a      	str	r2, [r3, #0]
 802148e:	e035      	b.n	80214fc <HAL_UARTEx_RxEventCallback+0x288>
 8021490:	58020400 	.word	0x58020400
 8021494:	24000ab0 	.word	0x24000ab0
 8021498:	24000aac 	.word	0x24000aac
 802149c:	24000a68 	.word	0x24000a68
 80214a0:	24000ab4 	.word	0x24000ab4
 80214a4:	24000890 	.word	0x24000890
 80214a8:	24000998 	.word	0x24000998
 80214ac:	40020010 	.word	0x40020010
 80214b0:	40020028 	.word	0x40020028
 80214b4:	40020040 	.word	0x40020040
 80214b8:	40020058 	.word	0x40020058
 80214bc:	40020070 	.word	0x40020070
 80214c0:	40020088 	.word	0x40020088
 80214c4:	400200a0 	.word	0x400200a0
 80214c8:	400200b8 	.word	0x400200b8
 80214cc:	40020410 	.word	0x40020410
 80214d0:	40020428 	.word	0x40020428
 80214d4:	40020440 	.word	0x40020440
 80214d8:	40020458 	.word	0x40020458
 80214dc:	40020470 	.word	0x40020470
 80214e0:	40020488 	.word	0x40020488
 80214e4:	400204a0 	.word	0x400204a0
 80214e8:	400204b8 	.word	0x400204b8
 80214ec:	4b10      	ldr	r3, [pc, #64]	; (8021530 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80214ee:	681b      	ldr	r3, [r3, #0]
 80214f0:	681a      	ldr	r2, [r3, #0]
 80214f2:	4b0f      	ldr	r3, [pc, #60]	; (8021530 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80214f4:	681b      	ldr	r3, [r3, #0]
 80214f6:	f022 0202 	bic.w	r2, r2, #2
 80214fa:	601a      	str	r2, [r3, #0]

	/* xHigherPriorityTaskWoken must be initialised to pdFALSE.  If calling
	vTaskNotifyGiveFromISR() unblocks the handling task, and the priority of
	the handling task is higher than the priority of the currently running task,
	then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
	xHigherPriorityTaskWoken = pdFALSE;
 80214fc:	2300      	movs	r3, #0
 80214fe:	60fb      	str	r3, [r7, #12]

	/* Unblock the handling task so the task can perform any processing necessitated
	by the interrupt.  xHandlingTask is the task's handle, which was obtained
	when the task was created. */
	vTaskNotifyGiveFromISR(ConsoleTaskHandle, &xHigherPriorityTaskWoken );
 8021500:	4b0c      	ldr	r3, [pc, #48]	; (8021534 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8021502:	681b      	ldr	r3, [r3, #0]
 8021504:	f107 020c 	add.w	r2, r7, #12
 8021508:	4611      	mov	r1, r2
 802150a:	4618      	mov	r0, r3
 802150c:	f017 f844 	bl	8038598 <vTaskNotifyGiveFromISR>

	/* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
	The macro used to do this is dependent on the port and may be called
	portEND_SWITCHING_ISR. */
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8021510:	68fb      	ldr	r3, [r7, #12]
 8021512:	2b00      	cmp	r3, #0
 8021514:	d007      	beq.n	8021526 <HAL_UARTEx_RxEventCallback+0x2b2>
 8021516:	4b08      	ldr	r3, [pc, #32]	; (8021538 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8021518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802151c:	601a      	str	r2, [r3, #0]
 802151e:	f3bf 8f4f 	dsb	sy
 8021522:	f3bf 8f6f 	isb	sy

}
 8021526:	bf00      	nop
 8021528:	3710      	adds	r7, #16
 802152a:	46bd      	mov	sp, r7
 802152c:	bd80      	pop	{r7, pc}
 802152e:	bf00      	nop
 8021530:	24000998 	.word	0x24000998
 8021534:	24000a18 	.word	0x24000a18
 8021538:	e000ed04 	.word	0xe000ed04

0802153c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 802153c:	b580      	push	{r7, lr}
 802153e:	b082      	sub	sp, #8
 8021540:	af00      	add	r7, sp, #0
 8021542:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8021544:	f018 f942 	bl	80397cc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  /* USRT RX INITIATE */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_RX_BUFFER, UART_RX_BUFFER_LENGTH);
 8021548:	2242      	movs	r2, #66	; 0x42
 802154a:	4965      	ldr	r1, [pc, #404]	; (80216e0 <StartDefaultTask+0x1a4>)
 802154c:	4865      	ldr	r0, [pc, #404]	; (80216e4 <StartDefaultTask+0x1a8>)
 802154e:	f00a f93f 	bl	802b7d0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8021552:	4b65      	ldr	r3, [pc, #404]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021554:	681b      	ldr	r3, [r3, #0]
 8021556:	4a65      	ldr	r2, [pc, #404]	; (80216ec <StartDefaultTask+0x1b0>)
 8021558:	4293      	cmp	r3, r2
 802155a:	d04a      	beq.n	80215f2 <StartDefaultTask+0xb6>
 802155c:	4b62      	ldr	r3, [pc, #392]	; (80216e8 <StartDefaultTask+0x1ac>)
 802155e:	681b      	ldr	r3, [r3, #0]
 8021560:	4a63      	ldr	r2, [pc, #396]	; (80216f0 <StartDefaultTask+0x1b4>)
 8021562:	4293      	cmp	r3, r2
 8021564:	d045      	beq.n	80215f2 <StartDefaultTask+0xb6>
 8021566:	4b60      	ldr	r3, [pc, #384]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021568:	681b      	ldr	r3, [r3, #0]
 802156a:	4a62      	ldr	r2, [pc, #392]	; (80216f4 <StartDefaultTask+0x1b8>)
 802156c:	4293      	cmp	r3, r2
 802156e:	d040      	beq.n	80215f2 <StartDefaultTask+0xb6>
 8021570:	4b5d      	ldr	r3, [pc, #372]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021572:	681b      	ldr	r3, [r3, #0]
 8021574:	4a60      	ldr	r2, [pc, #384]	; (80216f8 <StartDefaultTask+0x1bc>)
 8021576:	4293      	cmp	r3, r2
 8021578:	d03b      	beq.n	80215f2 <StartDefaultTask+0xb6>
 802157a:	4b5b      	ldr	r3, [pc, #364]	; (80216e8 <StartDefaultTask+0x1ac>)
 802157c:	681b      	ldr	r3, [r3, #0]
 802157e:	4a5f      	ldr	r2, [pc, #380]	; (80216fc <StartDefaultTask+0x1c0>)
 8021580:	4293      	cmp	r3, r2
 8021582:	d036      	beq.n	80215f2 <StartDefaultTask+0xb6>
 8021584:	4b58      	ldr	r3, [pc, #352]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021586:	681b      	ldr	r3, [r3, #0]
 8021588:	4a5d      	ldr	r2, [pc, #372]	; (8021700 <StartDefaultTask+0x1c4>)
 802158a:	4293      	cmp	r3, r2
 802158c:	d031      	beq.n	80215f2 <StartDefaultTask+0xb6>
 802158e:	4b56      	ldr	r3, [pc, #344]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021590:	681b      	ldr	r3, [r3, #0]
 8021592:	4a5c      	ldr	r2, [pc, #368]	; (8021704 <StartDefaultTask+0x1c8>)
 8021594:	4293      	cmp	r3, r2
 8021596:	d02c      	beq.n	80215f2 <StartDefaultTask+0xb6>
 8021598:	4b53      	ldr	r3, [pc, #332]	; (80216e8 <StartDefaultTask+0x1ac>)
 802159a:	681b      	ldr	r3, [r3, #0]
 802159c:	4a5a      	ldr	r2, [pc, #360]	; (8021708 <StartDefaultTask+0x1cc>)
 802159e:	4293      	cmp	r3, r2
 80215a0:	d027      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215a2:	4b51      	ldr	r3, [pc, #324]	; (80216e8 <StartDefaultTask+0x1ac>)
 80215a4:	681b      	ldr	r3, [r3, #0]
 80215a6:	4a59      	ldr	r2, [pc, #356]	; (802170c <StartDefaultTask+0x1d0>)
 80215a8:	4293      	cmp	r3, r2
 80215aa:	d022      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215ac:	4b4e      	ldr	r3, [pc, #312]	; (80216e8 <StartDefaultTask+0x1ac>)
 80215ae:	681b      	ldr	r3, [r3, #0]
 80215b0:	4a57      	ldr	r2, [pc, #348]	; (8021710 <StartDefaultTask+0x1d4>)
 80215b2:	4293      	cmp	r3, r2
 80215b4:	d01d      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215b6:	4b4c      	ldr	r3, [pc, #304]	; (80216e8 <StartDefaultTask+0x1ac>)
 80215b8:	681b      	ldr	r3, [r3, #0]
 80215ba:	4a56      	ldr	r2, [pc, #344]	; (8021714 <StartDefaultTask+0x1d8>)
 80215bc:	4293      	cmp	r3, r2
 80215be:	d018      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215c0:	4b49      	ldr	r3, [pc, #292]	; (80216e8 <StartDefaultTask+0x1ac>)
 80215c2:	681b      	ldr	r3, [r3, #0]
 80215c4:	4a54      	ldr	r2, [pc, #336]	; (8021718 <StartDefaultTask+0x1dc>)
 80215c6:	4293      	cmp	r3, r2
 80215c8:	d013      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215ca:	4b47      	ldr	r3, [pc, #284]	; (80216e8 <StartDefaultTask+0x1ac>)
 80215cc:	681b      	ldr	r3, [r3, #0]
 80215ce:	4a53      	ldr	r2, [pc, #332]	; (802171c <StartDefaultTask+0x1e0>)
 80215d0:	4293      	cmp	r3, r2
 80215d2:	d00e      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215d4:	4b44      	ldr	r3, [pc, #272]	; (80216e8 <StartDefaultTask+0x1ac>)
 80215d6:	681b      	ldr	r3, [r3, #0]
 80215d8:	4a51      	ldr	r2, [pc, #324]	; (8021720 <StartDefaultTask+0x1e4>)
 80215da:	4293      	cmp	r3, r2
 80215dc:	d009      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215de:	4b42      	ldr	r3, [pc, #264]	; (80216e8 <StartDefaultTask+0x1ac>)
 80215e0:	681b      	ldr	r3, [r3, #0]
 80215e2:	4a50      	ldr	r2, [pc, #320]	; (8021724 <StartDefaultTask+0x1e8>)
 80215e4:	4293      	cmp	r3, r2
 80215e6:	d004      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215e8:	4b3f      	ldr	r3, [pc, #252]	; (80216e8 <StartDefaultTask+0x1ac>)
 80215ea:	681b      	ldr	r3, [r3, #0]
 80215ec:	4a4e      	ldr	r2, [pc, #312]	; (8021728 <StartDefaultTask+0x1ec>)
 80215ee:	4293      	cmp	r3, r2
 80215f0:	d108      	bne.n	8021604 <StartDefaultTask+0xc8>
 80215f2:	4b3d      	ldr	r3, [pc, #244]	; (80216e8 <StartDefaultTask+0x1ac>)
 80215f4:	681b      	ldr	r3, [r3, #0]
 80215f6:	681a      	ldr	r2, [r3, #0]
 80215f8:	4b3b      	ldr	r3, [pc, #236]	; (80216e8 <StartDefaultTask+0x1ac>)
 80215fa:	681b      	ldr	r3, [r3, #0]
 80215fc:	f022 0208 	bic.w	r2, r2, #8
 8021600:	601a      	str	r2, [r3, #0]
 8021602:	e007      	b.n	8021614 <StartDefaultTask+0xd8>
 8021604:	4b38      	ldr	r3, [pc, #224]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021606:	681b      	ldr	r3, [r3, #0]
 8021608:	681a      	ldr	r2, [r3, #0]
 802160a:	4b37      	ldr	r3, [pc, #220]	; (80216e8 <StartDefaultTask+0x1ac>)
 802160c:	681b      	ldr	r3, [r3, #0]
 802160e:	f022 0204 	bic.w	r2, r2, #4
 8021612:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_TC);
 8021614:	4b34      	ldr	r3, [pc, #208]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021616:	681b      	ldr	r3, [r3, #0]
 8021618:	4a34      	ldr	r2, [pc, #208]	; (80216ec <StartDefaultTask+0x1b0>)
 802161a:	4293      	cmp	r3, r2
 802161c:	d04a      	beq.n	80216b4 <StartDefaultTask+0x178>
 802161e:	4b32      	ldr	r3, [pc, #200]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021620:	681b      	ldr	r3, [r3, #0]
 8021622:	4a33      	ldr	r2, [pc, #204]	; (80216f0 <StartDefaultTask+0x1b4>)
 8021624:	4293      	cmp	r3, r2
 8021626:	d045      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021628:	4b2f      	ldr	r3, [pc, #188]	; (80216e8 <StartDefaultTask+0x1ac>)
 802162a:	681b      	ldr	r3, [r3, #0]
 802162c:	4a31      	ldr	r2, [pc, #196]	; (80216f4 <StartDefaultTask+0x1b8>)
 802162e:	4293      	cmp	r3, r2
 8021630:	d040      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021632:	4b2d      	ldr	r3, [pc, #180]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021634:	681b      	ldr	r3, [r3, #0]
 8021636:	4a30      	ldr	r2, [pc, #192]	; (80216f8 <StartDefaultTask+0x1bc>)
 8021638:	4293      	cmp	r3, r2
 802163a:	d03b      	beq.n	80216b4 <StartDefaultTask+0x178>
 802163c:	4b2a      	ldr	r3, [pc, #168]	; (80216e8 <StartDefaultTask+0x1ac>)
 802163e:	681b      	ldr	r3, [r3, #0]
 8021640:	4a2e      	ldr	r2, [pc, #184]	; (80216fc <StartDefaultTask+0x1c0>)
 8021642:	4293      	cmp	r3, r2
 8021644:	d036      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021646:	4b28      	ldr	r3, [pc, #160]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	4a2d      	ldr	r2, [pc, #180]	; (8021700 <StartDefaultTask+0x1c4>)
 802164c:	4293      	cmp	r3, r2
 802164e:	d031      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021650:	4b25      	ldr	r3, [pc, #148]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	4a2b      	ldr	r2, [pc, #172]	; (8021704 <StartDefaultTask+0x1c8>)
 8021656:	4293      	cmp	r3, r2
 8021658:	d02c      	beq.n	80216b4 <StartDefaultTask+0x178>
 802165a:	4b23      	ldr	r3, [pc, #140]	; (80216e8 <StartDefaultTask+0x1ac>)
 802165c:	681b      	ldr	r3, [r3, #0]
 802165e:	4a2a      	ldr	r2, [pc, #168]	; (8021708 <StartDefaultTask+0x1cc>)
 8021660:	4293      	cmp	r3, r2
 8021662:	d027      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021664:	4b20      	ldr	r3, [pc, #128]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021666:	681b      	ldr	r3, [r3, #0]
 8021668:	4a28      	ldr	r2, [pc, #160]	; (802170c <StartDefaultTask+0x1d0>)
 802166a:	4293      	cmp	r3, r2
 802166c:	d022      	beq.n	80216b4 <StartDefaultTask+0x178>
 802166e:	4b1e      	ldr	r3, [pc, #120]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021670:	681b      	ldr	r3, [r3, #0]
 8021672:	4a27      	ldr	r2, [pc, #156]	; (8021710 <StartDefaultTask+0x1d4>)
 8021674:	4293      	cmp	r3, r2
 8021676:	d01d      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021678:	4b1b      	ldr	r3, [pc, #108]	; (80216e8 <StartDefaultTask+0x1ac>)
 802167a:	681b      	ldr	r3, [r3, #0]
 802167c:	4a25      	ldr	r2, [pc, #148]	; (8021714 <StartDefaultTask+0x1d8>)
 802167e:	4293      	cmp	r3, r2
 8021680:	d018      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021682:	4b19      	ldr	r3, [pc, #100]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021684:	681b      	ldr	r3, [r3, #0]
 8021686:	4a24      	ldr	r2, [pc, #144]	; (8021718 <StartDefaultTask+0x1dc>)
 8021688:	4293      	cmp	r3, r2
 802168a:	d013      	beq.n	80216b4 <StartDefaultTask+0x178>
 802168c:	4b16      	ldr	r3, [pc, #88]	; (80216e8 <StartDefaultTask+0x1ac>)
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	4a22      	ldr	r2, [pc, #136]	; (802171c <StartDefaultTask+0x1e0>)
 8021692:	4293      	cmp	r3, r2
 8021694:	d00e      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021696:	4b14      	ldr	r3, [pc, #80]	; (80216e8 <StartDefaultTask+0x1ac>)
 8021698:	681b      	ldr	r3, [r3, #0]
 802169a:	4a21      	ldr	r2, [pc, #132]	; (8021720 <StartDefaultTask+0x1e4>)
 802169c:	4293      	cmp	r3, r2
 802169e:	d009      	beq.n	80216b4 <StartDefaultTask+0x178>
 80216a0:	4b11      	ldr	r3, [pc, #68]	; (80216e8 <StartDefaultTask+0x1ac>)
 80216a2:	681b      	ldr	r3, [r3, #0]
 80216a4:	4a1f      	ldr	r2, [pc, #124]	; (8021724 <StartDefaultTask+0x1e8>)
 80216a6:	4293      	cmp	r3, r2
 80216a8:	d004      	beq.n	80216b4 <StartDefaultTask+0x178>
 80216aa:	4b0f      	ldr	r3, [pc, #60]	; (80216e8 <StartDefaultTask+0x1ac>)
 80216ac:	681b      	ldr	r3, [r3, #0]
 80216ae:	4a1e      	ldr	r2, [pc, #120]	; (8021728 <StartDefaultTask+0x1ec>)
 80216b0:	4293      	cmp	r3, r2
 80216b2:	d108      	bne.n	80216c6 <StartDefaultTask+0x18a>
 80216b4:	4b0c      	ldr	r3, [pc, #48]	; (80216e8 <StartDefaultTask+0x1ac>)
 80216b6:	681b      	ldr	r3, [r3, #0]
 80216b8:	681a      	ldr	r2, [r3, #0]
 80216ba:	4b0b      	ldr	r3, [pc, #44]	; (80216e8 <StartDefaultTask+0x1ac>)
 80216bc:	681b      	ldr	r3, [r3, #0]
 80216be:	f022 0210 	bic.w	r2, r2, #16
 80216c2:	601a      	str	r2, [r3, #0]
 80216c4:	e007      	b.n	80216d6 <StartDefaultTask+0x19a>
 80216c6:	4b08      	ldr	r3, [pc, #32]	; (80216e8 <StartDefaultTask+0x1ac>)
 80216c8:	681b      	ldr	r3, [r3, #0]
 80216ca:	681a      	ldr	r2, [r3, #0]
 80216cc:	4b06      	ldr	r3, [pc, #24]	; (80216e8 <StartDefaultTask+0x1ac>)
 80216ce:	681b      	ldr	r3, [r3, #0]
 80216d0:	f022 0202 	bic.w	r2, r2, #2
 80216d4:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
    //printf("Hello World! %d\r\n", count++);
    osDelay(2000);
 80216d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80216da:	f014 fc26 	bl	8035f2a <osDelay>
 80216de:	e7fa      	b.n	80216d6 <StartDefaultTask+0x19a>
 80216e0:	24000a68 	.word	0x24000a68
 80216e4:	24000890 	.word	0x24000890
 80216e8:	24000998 	.word	0x24000998
 80216ec:	40020010 	.word	0x40020010
 80216f0:	40020028 	.word	0x40020028
 80216f4:	40020040 	.word	0x40020040
 80216f8:	40020058 	.word	0x40020058
 80216fc:	40020070 	.word	0x40020070
 8021700:	40020088 	.word	0x40020088
 8021704:	400200a0 	.word	0x400200a0
 8021708:	400200b8 	.word	0x400200b8
 802170c:	40020410 	.word	0x40020410
 8021710:	40020428 	.word	0x40020428
 8021714:	40020440 	.word	0x40020440
 8021718:	40020458 	.word	0x40020458
 802171c:	40020470 	.word	0x40020470
 8021720:	40020488 	.word	0x40020488
 8021724:	400204a0 	.word	0x400204a0
 8021728:	400204b8 	.word	0x400204b8

0802172c <USBFileSystemTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_USBFileSystemTask_Start */
void USBFileSystemTask_Start(void const * argument)
{
 802172c:	b580      	push	{r7, lr}
 802172e:	b082      	sub	sp, #8
 8021730:	af00      	add	r7, sp, #0
 8021732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBFileSystemTask_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8021734:	2001      	movs	r0, #1
 8021736:	f014 fbf8 	bl	8035f2a <osDelay>
 802173a:	e7fb      	b.n	8021734 <USBFileSystemTask_Start+0x8>

0802173c <ConsoleTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ConsoleTask_Start */
void ConsoleTask_Start(void const * argument)
{
 802173c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8021740:	b088      	sub	sp, #32
 8021742:	af00      	add	r7, sp, #0
 8021744:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN ConsoleTask_Start */
	// ToDo Add buffer full mechanism to UART TX.
	printf("\r\n\r\n[INFO]: APP%d is running...\r\n\r\n", APP_NUM);
 8021746:	2101      	movs	r1, #1
 8021748:	48a7      	ldr	r0, [pc, #668]	; (80219e8 <ConsoleTask_Start+0x2ac>)
 802174a:	f018 fcd3 	bl	803a0f4 <iprintf>

	printf("======================\r\n");
 802174e:	48a7      	ldr	r0, [pc, #668]	; (80219ec <ConsoleTask_Start+0x2b0>)
 8021750:	f018 fd56 	bl	803a200 <puts>
	printf(" Terminal is ready...\r\n");
 8021754:	48a6      	ldr	r0, [pc, #664]	; (80219f0 <ConsoleTask_Start+0x2b4>)
 8021756:	f018 fd53 	bl	803a200 <puts>
	printf(" Waiting commands... \r\n");
 802175a:	48a6      	ldr	r0, [pc, #664]	; (80219f4 <ConsoleTask_Start+0x2b8>)
 802175c:	f018 fd50 	bl	803a200 <puts>
	printf("======================\r\n");
 8021760:	48a2      	ldr	r0, [pc, #648]	; (80219ec <ConsoleTask_Start+0x2b0>)
 8021762:	f018 fd4d 	bl	803a200 <puts>

	uint8_t str_trim_start = 0;
 8021766:	2300      	movs	r3, #0
 8021768:	76bb      	strb	r3, [r7, #26]
	uint8_t str_trim_end = 0;
 802176a:	2300      	movs	r3, #0
 802176c:	76fb      	strb	r3, [r7, #27]

	UINT SZ_STR = 100;
 802176e:	2364      	movs	r3, #100	; 0x64
 8021770:	617b      	str	r3, [r7, #20]
	TCHAR str[SZ_STR];
 8021772:	6979      	ldr	r1, [r7, #20]
 8021774:	460b      	mov	r3, r1
 8021776:	3b01      	subs	r3, #1
 8021778:	613b      	str	r3, [r7, #16]
 802177a:	2300      	movs	r3, #0
 802177c:	4688      	mov	r8, r1
 802177e:	4699      	mov	r9, r3
 8021780:	f04f 0200 	mov.w	r2, #0
 8021784:	f04f 0300 	mov.w	r3, #0
 8021788:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802178c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021790:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021794:	2300      	movs	r3, #0
 8021796:	460c      	mov	r4, r1
 8021798:	461d      	mov	r5, r3
 802179a:	f04f 0200 	mov.w	r2, #0
 802179e:	f04f 0300 	mov.w	r3, #0
 80217a2:	00eb      	lsls	r3, r5, #3
 80217a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80217a8:	00e2      	lsls	r2, r4, #3
 80217aa:	1dcb      	adds	r3, r1, #7
 80217ac:	08db      	lsrs	r3, r3, #3
 80217ae:	00db      	lsls	r3, r3, #3
 80217b0:	ebad 0d03 	sub.w	sp, sp, r3
 80217b4:	466b      	mov	r3, sp
 80217b6:	3300      	adds	r3, #0
 80217b8:	60fb      	str	r3, [r7, #12]

	char* trimmed_command = NULL;
 80217ba:	2300      	movs	r3, #0
 80217bc:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	 /* Wait incoming command from UART */

	ulTaskNotifyTake(pdTRUE,          /* Clear the notification value before exiting. */
 80217be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80217c2:	2001      	movs	r0, #1
 80217c4:	f016 fea0 	bl	8038508 <ulTaskNotifyTake>
	                 portMAX_DELAY ); /* Block indefinitely. */


	/* Trimming the coming command to delete empty spaces */

	for(str_trim_start = 0; str_trim_start <= strlen(received_command); str_trim_start ++)
 80217c8:	2300      	movs	r3, #0
 80217ca:	76bb      	strb	r3, [r7, #26]
 80217cc:	e00c      	b.n	80217e8 <ConsoleTask_Start+0xac>
	{
		if(received_command[str_trim_start] != ' ')
 80217ce:	7ebb      	ldrb	r3, [r7, #26]
 80217d0:	4a89      	ldr	r2, [pc, #548]	; (80219f8 <ConsoleTask_Start+0x2bc>)
 80217d2:	5cd3      	ldrb	r3, [r2, r3]
 80217d4:	2b20      	cmp	r3, #32
 80217d6:	d004      	beq.n	80217e2 <ConsoleTask_Start+0xa6>
		{
			trimmed_command = received_command + str_trim_start;
 80217d8:	7ebb      	ldrb	r3, [r7, #26]
 80217da:	4a87      	ldr	r2, [pc, #540]	; (80219f8 <ConsoleTask_Start+0x2bc>)
 80217dc:	4413      	add	r3, r2
 80217de:	61fb      	str	r3, [r7, #28]
			break;
 80217e0:	e009      	b.n	80217f6 <ConsoleTask_Start+0xba>
	for(str_trim_start = 0; str_trim_start <= strlen(received_command); str_trim_start ++)
 80217e2:	7ebb      	ldrb	r3, [r7, #26]
 80217e4:	3301      	adds	r3, #1
 80217e6:	76bb      	strb	r3, [r7, #26]
 80217e8:	7ebc      	ldrb	r4, [r7, #26]
 80217ea:	4883      	ldr	r0, [pc, #524]	; (80219f8 <ConsoleTask_Start+0x2bc>)
 80217ec:	f7fe fd9a 	bl	8020324 <strlen>
 80217f0:	4603      	mov	r3, r0
 80217f2:	429c      	cmp	r4, r3
 80217f4:	d9eb      	bls.n	80217ce <ConsoleTask_Start+0x92>
		}
	}

	for(str_trim_end = strlen(trimmed_command)-1; str_trim_end >= 0; str_trim_end--)
 80217f6:	69f8      	ldr	r0, [r7, #28]
 80217f8:	f7fe fd94 	bl	8020324 <strlen>
 80217fc:	4603      	mov	r3, r0
 80217fe:	b2db      	uxtb	r3, r3
 8021800:	3b01      	subs	r3, #1
 8021802:	76fb      	strb	r3, [r7, #27]
	{
		if(trimmed_command[str_trim_end] != ' ')
 8021804:	7efb      	ldrb	r3, [r7, #27]
 8021806:	69fa      	ldr	r2, [r7, #28]
 8021808:	4413      	add	r3, r2
 802180a:	781b      	ldrb	r3, [r3, #0]
 802180c:	2b20      	cmp	r3, #32
 802180e:	d00f      	beq.n	8021830 <ConsoleTask_Start+0xf4>
		{
			trimmed_command[str_trim_end+1] = '\0';
 8021810:	7efb      	ldrb	r3, [r7, #27]
 8021812:	3301      	adds	r3, #1
 8021814:	69fa      	ldr	r2, [r7, #28]
 8021816:	4413      	add	r3, r2
 8021818:	2200      	movs	r2, #0
 802181a:	701a      	strb	r2, [r3, #0]
			break;
 802181c:	bf00      	nop
		}
	}

	/* Handling Incoming Command */

	printf("CMD$: %s \r\n", trimmed_command);
 802181e:	69f9      	ldr	r1, [r7, #28]
 8021820:	4876      	ldr	r0, [pc, #472]	; (80219fc <ConsoleTask_Start+0x2c0>)
 8021822:	f018 fc67 	bl	803a0f4 <iprintf>

	if(Appli_state != APPLICATION_READY){
 8021826:	4b76      	ldr	r3, [pc, #472]	; (8021a00 <ConsoleTask_Start+0x2c4>)
 8021828:	781b      	ldrb	r3, [r3, #0]
 802182a:	2b02      	cmp	r3, #2
 802182c:	d008      	beq.n	8021840 <ConsoleTask_Start+0x104>
 802182e:	e003      	b.n	8021838 <ConsoleTask_Start+0xfc>
	for(str_trim_end = strlen(trimmed_command)-1; str_trim_end >= 0; str_trim_end--)
 8021830:	7efb      	ldrb	r3, [r7, #27]
 8021832:	3b01      	subs	r3, #1
 8021834:	76fb      	strb	r3, [r7, #27]
		if(trimmed_command[str_trim_end] != ' ')
 8021836:	e7e5      	b.n	8021804 <ConsoleTask_Start+0xc8>
		printf("USB is not connected!\r\n");
 8021838:	4872      	ldr	r0, [pc, #456]	; (8021a04 <ConsoleTask_Start+0x2c8>)
 802183a:	f018 fce1 	bl	803a200 <puts>
		continue;
 802183e:	e0d1      	b.n	80219e4 <ConsoleTask_Start+0x2a8>
	}



	if(strlen(trimmed_command) > 0)
 8021840:	69fb      	ldr	r3, [r7, #28]
 8021842:	781b      	ldrb	r3, [r3, #0]
 8021844:	2b00      	cmp	r3, #0
 8021846:	f000 80ca 	beq.w	80219de <ConsoleTask_Start+0x2a2>
	{

		if(!strncmp(trimmed_command , "mount" , 5))
 802184a:	2205      	movs	r2, #5
 802184c:	496e      	ldr	r1, [pc, #440]	; (8021a08 <ConsoleTask_Start+0x2cc>)
 802184e:	69f8      	ldr	r0, [r7, #28]
 8021850:	f018 fd1b 	bl	803a28a <strncmp>
 8021854:	4603      	mov	r3, r0
 8021856:	2b00      	cmp	r3, #0
 8021858:	d11e      	bne.n	8021898 <ConsoleTask_Start+0x15c>
		{
			if(disk_mounted){
 802185a:	4b6c      	ldr	r3, [pc, #432]	; (8021a0c <ConsoleTask_Start+0x2d0>)
 802185c:	781b      	ldrb	r3, [r3, #0]
 802185e:	2b00      	cmp	r3, #0
 8021860:	d003      	beq.n	802186a <ConsoleTask_Start+0x12e>
				printf("USB is mounted already.\r\n");
 8021862:	486b      	ldr	r0, [pc, #428]	; (8021a10 <ConsoleTask_Start+0x2d4>)
 8021864:	f018 fccc 	bl	803a200 <puts>
				continue;
 8021868:	e0bc      	b.n	80219e4 <ConsoleTask_Start+0x2a8>
			}

			printf("Mounting the USB...\r\n");
 802186a:	486a      	ldr	r0, [pc, #424]	; (8021a14 <ConsoleTask_Start+0x2d8>)
 802186c:	f018 fcc8 	bl	803a200 <puts>

			if(f_mount(&USBHFatFS, (TCHAR const*)USBHPath, 0) != FR_OK)
 8021870:	2200      	movs	r2, #0
 8021872:	4969      	ldr	r1, [pc, #420]	; (8021a18 <ConsoleTask_Start+0x2dc>)
 8021874:	4869      	ldr	r0, [pc, #420]	; (8021a1c <ConsoleTask_Start+0x2e0>)
 8021876:	f012 fafb 	bl	8033e70 <f_mount>
 802187a:	4603      	mov	r3, r0
 802187c:	2b00      	cmp	r3, #0
 802187e:	d004      	beq.n	802188a <ConsoleTask_Start+0x14e>
			{
				printf("Mounting error!\r\n");
 8021880:	4867      	ldr	r0, [pc, #412]	; (8021a20 <ConsoleTask_Start+0x2e4>)
 8021882:	f018 fcbd 	bl	803a200 <puts>
				Error_Handler();
 8021886:	f000 f909 	bl	8021a9c <Error_Handler>
			}

			disk_mounted = 1;
 802188a:	4b60      	ldr	r3, [pc, #384]	; (8021a0c <ConsoleTask_Start+0x2d0>)
 802188c:	2201      	movs	r2, #1
 802188e:	701a      	strb	r2, [r3, #0]
			printf("Mounting the USB is done.\r\n");
 8021890:	4864      	ldr	r0, [pc, #400]	; (8021a24 <ConsoleTask_Start+0x2e8>)
 8021892:	f018 fcb5 	bl	803a200 <puts>
			continue;
 8021896:	e0a5      	b.n	80219e4 <ConsoleTask_Start+0x2a8>
		}
		else if(!strncmp(trimmed_command , "unmount" , 7))
 8021898:	2207      	movs	r2, #7
 802189a:	4963      	ldr	r1, [pc, #396]	; (8021a28 <ConsoleTask_Start+0x2ec>)
 802189c:	69f8      	ldr	r0, [r7, #28]
 802189e:	f018 fcf4 	bl	803a28a <strncmp>
 80218a2:	4603      	mov	r3, r0
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d11e      	bne.n	80218e6 <ConsoleTask_Start+0x1aa>
		{
			if(!disk_mounted){
 80218a8:	4b58      	ldr	r3, [pc, #352]	; (8021a0c <ConsoleTask_Start+0x2d0>)
 80218aa:	781b      	ldrb	r3, [r3, #0]
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	d103      	bne.n	80218b8 <ConsoleTask_Start+0x17c>
				printf("USB is not mounted yet. Mount it first!\r\n");
 80218b0:	485e      	ldr	r0, [pc, #376]	; (8021a2c <ConsoleTask_Start+0x2f0>)
 80218b2:	f018 fca5 	bl	803a200 <puts>
				continue;
 80218b6:	e095      	b.n	80219e4 <ConsoleTask_Start+0x2a8>
			}

			printf("Unmounting the USB...\r\n");
 80218b8:	485d      	ldr	r0, [pc, #372]	; (8021a30 <ConsoleTask_Start+0x2f4>)
 80218ba:	f018 fca1 	bl	803a200 <puts>

			if(f_mount(NULL, (TCHAR const*)USBHPath, 0) != FR_OK)
 80218be:	2200      	movs	r2, #0
 80218c0:	4955      	ldr	r1, [pc, #340]	; (8021a18 <ConsoleTask_Start+0x2dc>)
 80218c2:	2000      	movs	r0, #0
 80218c4:	f012 fad4 	bl	8033e70 <f_mount>
 80218c8:	4603      	mov	r3, r0
 80218ca:	2b00      	cmp	r3, #0
 80218cc:	d004      	beq.n	80218d8 <ConsoleTask_Start+0x19c>
			{
				printf("Unmounting error!\r\n");
 80218ce:	4859      	ldr	r0, [pc, #356]	; (8021a34 <ConsoleTask_Start+0x2f8>)
 80218d0:	f018 fc96 	bl	803a200 <puts>
				Error_Handler();
 80218d4:	f000 f8e2 	bl	8021a9c <Error_Handler>
			}

			disk_mounted = 0;
 80218d8:	4b4c      	ldr	r3, [pc, #304]	; (8021a0c <ConsoleTask_Start+0x2d0>)
 80218da:	2200      	movs	r2, #0
 80218dc:	701a      	strb	r2, [r3, #0]
			printf("Unmounting the USB is done.\r\n");
 80218de:	4856      	ldr	r0, [pc, #344]	; (8021a38 <ConsoleTask_Start+0x2fc>)
 80218e0:	f018 fc8e 	bl	803a200 <puts>
			continue;
 80218e4:	e07e      	b.n	80219e4 <ConsoleTask_Start+0x2a8>
		}

		/* Check Mount Stat */
		if(!disk_mounted){
 80218e6:	4b49      	ldr	r3, [pc, #292]	; (8021a0c <ConsoleTask_Start+0x2d0>)
 80218e8:	781b      	ldrb	r3, [r3, #0]
 80218ea:	2b00      	cmp	r3, #0
 80218ec:	d103      	bne.n	80218f6 <ConsoleTask_Start+0x1ba>
			printf("USB is not mounted yet. Mount it first!\r\n");
 80218ee:	484f      	ldr	r0, [pc, #316]	; (8021a2c <ConsoleTask_Start+0x2f0>)
 80218f0:	f018 fc86 	bl	803a200 <puts>
			continue;
 80218f4:	e076      	b.n	80219e4 <ConsoleTask_Start+0x2a8>
		}

		/* Branch into Applications */

		if(!strncmp(trimmed_command , "pwd" , 3))
 80218f6:	2203      	movs	r2, #3
 80218f8:	4950      	ldr	r1, [pc, #320]	; (8021a3c <ConsoleTask_Start+0x300>)
 80218fa:	69f8      	ldr	r0, [r7, #28]
 80218fc:	f018 fcc5 	bl	803a28a <strncmp>
 8021900:	4603      	mov	r3, r0
 8021902:	2b00      	cmp	r3, #0
 8021904:	d108      	bne.n	8021918 <ConsoleTask_Start+0x1dc>
		{
			f_getcwd(str, SZ_STR);  /* Get current directory path */
 8021906:	6979      	ldr	r1, [r7, #20]
 8021908:	68f8      	ldr	r0, [r7, #12]
 802190a:	f013 fb4d 	bl	8034fa8 <f_getcwd>
			printf("%s\r\n", str);
 802190e:	68f9      	ldr	r1, [r7, #12]
 8021910:	484b      	ldr	r0, [pc, #300]	; (8021a40 <ConsoleTask_Start+0x304>)
 8021912:	f018 fbef 	bl	803a0f4 <iprintf>
 8021916:	e062      	b.n	80219de <ConsoleTask_Start+0x2a2>
		}
		else if(!strncmp(trimmed_command , "ls" , 2)){
 8021918:	2202      	movs	r2, #2
 802191a:	494a      	ldr	r1, [pc, #296]	; (8021a44 <ConsoleTask_Start+0x308>)
 802191c:	69f8      	ldr	r0, [r7, #28]
 802191e:	f018 fcb4 	bl	803a28a <strncmp>
 8021922:	4603      	mov	r3, r0
 8021924:	2b00      	cmp	r3, #0
 8021926:	d111      	bne.n	802194c <ConsoleTask_Start+0x210>
			char *buf = malloc(30*sizeof(char));
 8021928:	201e      	movs	r0, #30
 802192a:	f018 fadd 	bl	8039ee8 <malloc>
 802192e:	4603      	mov	r3, r0
 8021930:	60bb      	str	r3, [r7, #8]
			strcpy(buf, "/");
 8021932:	68bb      	ldr	r3, [r7, #8]
 8021934:	4944      	ldr	r1, [pc, #272]	; (8021a48 <ConsoleTask_Start+0x30c>)
 8021936:	461a      	mov	r2, r3
 8021938:	460b      	mov	r3, r1
 802193a:	881b      	ldrh	r3, [r3, #0]
 802193c:	8013      	strh	r3, [r2, #0]
			scan_all_files(buf);
 802193e:	68b8      	ldr	r0, [r7, #8]
 8021940:	f7fe fed0 	bl	80206e4 <scan_all_files>
			free(buf);
 8021944:	68b8      	ldr	r0, [r7, #8]
 8021946:	f018 fad7 	bl	8039ef8 <free>
 802194a:	e048      	b.n	80219de <ConsoleTask_Start+0x2a2>
		}
		else if(!strncmp(trimmed_command , "touch" , 5))
 802194c:	2205      	movs	r2, #5
 802194e:	493f      	ldr	r1, [pc, #252]	; (8021a4c <ConsoleTask_Start+0x310>)
 8021950:	69f8      	ldr	r0, [r7, #28]
 8021952:	f018 fc9a 	bl	803a28a <strncmp>
 8021956:	4603      	mov	r3, r0
 8021958:	2b00      	cmp	r3, #0
 802195a:	d105      	bne.n	8021968 <ConsoleTask_Start+0x22c>
		{
			create_file(trimmed_command + 5);
 802195c:	69fb      	ldr	r3, [r7, #28]
 802195e:	3305      	adds	r3, #5
 8021960:	4618      	mov	r0, r3
 8021962:	f7fe ff3f 	bl	80207e4 <create_file>
 8021966:	e03a      	b.n	80219de <ConsoleTask_Start+0x2a2>
		}
		else if(!strncmp(trimmed_command , "rm" , 2))
 8021968:	2202      	movs	r2, #2
 802196a:	4939      	ldr	r1, [pc, #228]	; (8021a50 <ConsoleTask_Start+0x314>)
 802196c:	69f8      	ldr	r0, [r7, #28]
 802196e:	f018 fc8c 	bl	803a28a <strncmp>
 8021972:	4603      	mov	r3, r0
 8021974:	2b00      	cmp	r3, #0
 8021976:	d105      	bne.n	8021984 <ConsoleTask_Start+0x248>
		{
			remove_file(trimmed_command+2);
 8021978:	69fb      	ldr	r3, [r7, #28]
 802197a:	3302      	adds	r3, #2
 802197c:	4618      	mov	r0, r3
 802197e:	f7fe ff91 	bl	80208a4 <remove_file>
 8021982:	e02c      	b.n	80219de <ConsoleTask_Start+0x2a2>
		}
		else if(!strncmp(trimmed_command , "mkdir" , 5))
 8021984:	2205      	movs	r2, #5
 8021986:	4933      	ldr	r1, [pc, #204]	; (8021a54 <ConsoleTask_Start+0x318>)
 8021988:	69f8      	ldr	r0, [r7, #28]
 802198a:	f018 fc7e 	bl	803a28a <strncmp>
 802198e:	4603      	mov	r3, r0
 8021990:	2b00      	cmp	r3, #0
 8021992:	d105      	bne.n	80219a0 <ConsoleTask_Start+0x264>
		{
			create_dir(trimmed_command+5);
 8021994:	69fb      	ldr	r3, [r7, #28]
 8021996:	3305      	adds	r3, #5
 8021998:	4618      	mov	r0, r3
 802199a:	f7fe ffc9 	bl	8020930 <create_dir>
 802199e:	e01e      	b.n	80219de <ConsoleTask_Start+0x2a2>
		}else if(!strncmp(trimmed_command , "echo" , 4))
 80219a0:	2204      	movs	r2, #4
 80219a2:	492d      	ldr	r1, [pc, #180]	; (8021a58 <ConsoleTask_Start+0x31c>)
 80219a4:	69f8      	ldr	r0, [r7, #28]
 80219a6:	f018 fc70 	bl	803a28a <strncmp>
 80219aa:	4603      	mov	r3, r0
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	d105      	bne.n	80219bc <ConsoleTask_Start+0x280>
		{
			echo(trimmed_command+4);
 80219b0:	69fb      	ldr	r3, [r7, #28]
 80219b2:	3304      	adds	r3, #4
 80219b4:	4618      	mov	r0, r3
 80219b6:	f7ff f8dd 	bl	8020b74 <echo>
 80219ba:	e010      	b.n	80219de <ConsoleTask_Start+0x2a2>
		}else if(!strncmp(trimmed_command , "cat" , 3))
 80219bc:	2203      	movs	r2, #3
 80219be:	4927      	ldr	r1, [pc, #156]	; (8021a5c <ConsoleTask_Start+0x320>)
 80219c0:	69f8      	ldr	r0, [r7, #28]
 80219c2:	f018 fc62 	bl	803a28a <strncmp>
 80219c6:	4603      	mov	r3, r0
 80219c8:	2b00      	cmp	r3, #0
 80219ca:	d105      	bne.n	80219d8 <ConsoleTask_Start+0x29c>
		{
			read_file(trimmed_command+3);
 80219cc:	69fb      	ldr	r3, [r7, #28]
 80219ce:	3303      	adds	r3, #3
 80219d0:	4618      	mov	r0, r3
 80219d2:	f7ff f83f 	bl	8020a54 <read_file>
 80219d6:	e002      	b.n	80219de <ConsoleTask_Start+0x2a2>
		}else{
			printf("Unknown Command!\r\n");
 80219d8:	4821      	ldr	r0, [pc, #132]	; (8021a60 <ConsoleTask_Start+0x324>)
 80219da:	f018 fc11 	bl	803a200 <puts>
		}

	}

    osDelay(1);
 80219de:	2001      	movs	r0, #1
 80219e0:	f014 faa3 	bl	8035f2a <osDelay>
	ulTaskNotifyTake(pdTRUE,          /* Clear the notification value before exiting. */
 80219e4:	e6eb      	b.n	80217be <ConsoleTask_Start+0x82>
 80219e6:	bf00      	nop
 80219e8:	0803b69c 	.word	0x0803b69c
 80219ec:	0803b6c0 	.word	0x0803b6c0
 80219f0:	0803b6d8 	.word	0x0803b6d8
 80219f4:	0803b6f0 	.word	0x0803b6f0
 80219f8:	24000ab4 	.word	0x24000ab4
 80219fc:	0803b708 	.word	0x0803b708
 8021a00:	24006ed0 	.word	0x24006ed0
 8021a04:	0803b714 	.word	0x0803b714
 8021a08:	0803b72c 	.word	0x0803b72c
 8021a0c:	240001e4 	.word	0x240001e4
 8021a10:	0803b734 	.word	0x0803b734
 8021a14:	0803b750 	.word	0x0803b750
 8021a18:	24000b50 	.word	0x24000b50
 8021a1c:	24000b54 	.word	0x24000b54
 8021a20:	0803b768 	.word	0x0803b768
 8021a24:	0803b77c 	.word	0x0803b77c
 8021a28:	0803b798 	.word	0x0803b798
 8021a2c:	0803b7a0 	.word	0x0803b7a0
 8021a30:	0803b7cc 	.word	0x0803b7cc
 8021a34:	0803b7e4 	.word	0x0803b7e4
 8021a38:	0803b7f8 	.word	0x0803b7f8
 8021a3c:	0803b818 	.word	0x0803b818
 8021a40:	0803b81c 	.word	0x0803b81c
 8021a44:	0803b824 	.word	0x0803b824
 8021a48:	0803b828 	.word	0x0803b828
 8021a4c:	0803b82c 	.word	0x0803b82c
 8021a50:	0803b834 	.word	0x0803b834
 8021a54:	0803b838 	.word	0x0803b838
 8021a58:	0803b840 	.word	0x0803b840
 8021a5c:	0803b848 	.word	0x0803b848
 8021a60:	0803b84c 	.word	0x0803b84c

08021a64 <Timer1_Callback>:
  /* USER CODE END ConsoleTask_Start */
}

/* Timer1_Callback function */
void Timer1_Callback(void const * argument)
{
 8021a64:	b480      	push	{r7}
 8021a66:	b083      	sub	sp, #12
 8021a68:	af00      	add	r7, sp, #0
 8021a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer1_Callback */

  /* USER CODE END Timer1_Callback */
}
 8021a6c:	bf00      	nop
 8021a6e:	370c      	adds	r7, #12
 8021a70:	46bd      	mov	sp, r7
 8021a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a76:	4770      	bx	lr

08021a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021a78:	b580      	push	{r7, lr}
 8021a7a:	b082      	sub	sp, #8
 8021a7c:	af00      	add	r7, sp, #0
 8021a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8021a80:	687b      	ldr	r3, [r7, #4]
 8021a82:	681b      	ldr	r3, [r3, #0]
 8021a84:	4a04      	ldr	r2, [pc, #16]	; (8021a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8021a86:	4293      	cmp	r3, r2
 8021a88:	d101      	bne.n	8021a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8021a8a:	f000 fb13 	bl	80220b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8021a8e:	bf00      	nop
 8021a90:	3708      	adds	r7, #8
 8021a92:	46bd      	mov	sp, r7
 8021a94:	bd80      	pop	{r7, pc}
 8021a96:	bf00      	nop
 8021a98:	40010000 	.word	0x40010000

08021a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8021a9c:	b480      	push	{r7}
 8021a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021aa0:	b672      	cpsid	i
}
 8021aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8021aa4:	e7fe      	b.n	8021aa4 <Error_Handler+0x8>
	...

08021aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021aa8:	b580      	push	{r7, lr}
 8021aaa:	b082      	sub	sp, #8
 8021aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021aae:	4b0c      	ldr	r3, [pc, #48]	; (8021ae0 <HAL_MspInit+0x38>)
 8021ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8021ab4:	4a0a      	ldr	r2, [pc, #40]	; (8021ae0 <HAL_MspInit+0x38>)
 8021ab6:	f043 0302 	orr.w	r3, r3, #2
 8021aba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8021abe:	4b08      	ldr	r3, [pc, #32]	; (8021ae0 <HAL_MspInit+0x38>)
 8021ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8021ac4:	f003 0302 	and.w	r3, r3, #2
 8021ac8:	607b      	str	r3, [r7, #4]
 8021aca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8021acc:	2200      	movs	r2, #0
 8021ace:	210f      	movs	r1, #15
 8021ad0:	f06f 0001 	mvn.w	r0, #1
 8021ad4:	f000 fbea 	bl	80222ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8021ad8:	bf00      	nop
 8021ada:	3708      	adds	r7, #8
 8021adc:	46bd      	mov	sp, r7
 8021ade:	bd80      	pop	{r7, pc}
 8021ae0:	58024400 	.word	0x58024400

08021ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8021ae4:	b580      	push	{r7, lr}
 8021ae6:	b0b6      	sub	sp, #216	; 0xd8
 8021ae8:	af00      	add	r7, sp, #0
 8021aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021aec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8021af0:	2200      	movs	r2, #0
 8021af2:	601a      	str	r2, [r3, #0]
 8021af4:	605a      	str	r2, [r3, #4]
 8021af6:	609a      	str	r2, [r3, #8]
 8021af8:	60da      	str	r2, [r3, #12]
 8021afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8021afc:	f107 0310 	add.w	r3, r7, #16
 8021b00:	22b4      	movs	r2, #180	; 0xb4
 8021b02:	2100      	movs	r1, #0
 8021b04:	4618      	mov	r0, r3
 8021b06:	f018 fa0d 	bl	8039f24 <memset>
  if(huart->Instance==USART3)
 8021b0a:	687b      	ldr	r3, [r7, #4]
 8021b0c:	681b      	ldr	r3, [r3, #0]
 8021b0e:	4a57      	ldr	r2, [pc, #348]	; (8021c6c <HAL_UART_MspInit+0x188>)
 8021b10:	4293      	cmp	r3, r2
 8021b12:	f040 80a6 	bne.w	8021c62 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8021b16:	2302      	movs	r3, #2
 8021b18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8021b1a:	2300      	movs	r3, #0
 8021b1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021b20:	f107 0310 	add.w	r3, r7, #16
 8021b24:	4618      	mov	r0, r3
 8021b26:	f005 ffcf 	bl	8027ac8 <HAL_RCCEx_PeriphCLKConfig>
 8021b2a:	4603      	mov	r3, r0
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	d001      	beq.n	8021b34 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8021b30:	f7ff ffb4 	bl	8021a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8021b34:	4b4e      	ldr	r3, [pc, #312]	; (8021c70 <HAL_UART_MspInit+0x18c>)
 8021b36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021b3a:	4a4d      	ldr	r2, [pc, #308]	; (8021c70 <HAL_UART_MspInit+0x18c>)
 8021b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021b40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8021b44:	4b4a      	ldr	r3, [pc, #296]	; (8021c70 <HAL_UART_MspInit+0x18c>)
 8021b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8021b4e:	60fb      	str	r3, [r7, #12]
 8021b50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021b52:	4b47      	ldr	r3, [pc, #284]	; (8021c70 <HAL_UART_MspInit+0x18c>)
 8021b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021b58:	4a45      	ldr	r2, [pc, #276]	; (8021c70 <HAL_UART_MspInit+0x18c>)
 8021b5a:	f043 0308 	orr.w	r3, r3, #8
 8021b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8021b62:	4b43      	ldr	r3, [pc, #268]	; (8021c70 <HAL_UART_MspInit+0x18c>)
 8021b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021b68:	f003 0308 	and.w	r3, r3, #8
 8021b6c:	60bb      	str	r3, [r7, #8]
 8021b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8021b70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8021b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b78:	2302      	movs	r3, #2
 8021b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b7e:	2300      	movs	r3, #0
 8021b80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021b84:	2300      	movs	r3, #0
 8021b86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8021b8a:	2307      	movs	r3, #7
 8021b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021b90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8021b94:	4619      	mov	r1, r3
 8021b96:	4837      	ldr	r0, [pc, #220]	; (8021c74 <HAL_UART_MspInit+0x190>)
 8021b98:	f003 f9ea 	bl	8024f70 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8021b9c:	4b36      	ldr	r3, [pc, #216]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021b9e:	4a37      	ldr	r2, [pc, #220]	; (8021c7c <HAL_UART_MspInit+0x198>)
 8021ba0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8021ba2:	4b35      	ldr	r3, [pc, #212]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021ba4:	222e      	movs	r2, #46	; 0x2e
 8021ba6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8021ba8:	4b33      	ldr	r3, [pc, #204]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021baa:	2240      	movs	r2, #64	; 0x40
 8021bac:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8021bae:	4b32      	ldr	r3, [pc, #200]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021bb0:	2200      	movs	r2, #0
 8021bb2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8021bb4:	4b30      	ldr	r3, [pc, #192]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021bba:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8021bbc:	4b2e      	ldr	r3, [pc, #184]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021bbe:	2200      	movs	r2, #0
 8021bc0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8021bc2:	4b2d      	ldr	r3, [pc, #180]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021bc4:	2200      	movs	r2, #0
 8021bc6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8021bc8:	4b2b      	ldr	r3, [pc, #172]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021bca:	2200      	movs	r2, #0
 8021bcc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8021bce:	4b2a      	ldr	r3, [pc, #168]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021bd0:	2200      	movs	r2, #0
 8021bd2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8021bd4:	4b28      	ldr	r3, [pc, #160]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021bd6:	2200      	movs	r2, #0
 8021bd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8021bda:	4827      	ldr	r0, [pc, #156]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021bdc:	f000 fb8e 	bl	80222fc <HAL_DMA_Init>
 8021be0:	4603      	mov	r3, r0
 8021be2:	2b00      	cmp	r3, #0
 8021be4:	d001      	beq.n	8021bea <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8021be6:	f7ff ff59 	bl	8021a9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8021bea:	687b      	ldr	r3, [r7, #4]
 8021bec:	4a22      	ldr	r2, [pc, #136]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021bee:	679a      	str	r2, [r3, #120]	; 0x78
 8021bf0:	4a21      	ldr	r2, [pc, #132]	; (8021c78 <HAL_UART_MspInit+0x194>)
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8021bf6:	4b22      	ldr	r3, [pc, #136]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021bf8:	4a22      	ldr	r2, [pc, #136]	; (8021c84 <HAL_UART_MspInit+0x1a0>)
 8021bfa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8021bfc:	4b20      	ldr	r3, [pc, #128]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021bfe:	222d      	movs	r2, #45	; 0x2d
 8021c00:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8021c02:	4b1f      	ldr	r3, [pc, #124]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021c04:	2200      	movs	r2, #0
 8021c06:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8021c08:	4b1d      	ldr	r3, [pc, #116]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021c0a:	2200      	movs	r2, #0
 8021c0c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8021c0e:	4b1c      	ldr	r3, [pc, #112]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021c14:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8021c16:	4b1a      	ldr	r3, [pc, #104]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021c18:	2200      	movs	r2, #0
 8021c1a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8021c1c:	4b18      	ldr	r3, [pc, #96]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021c1e:	2200      	movs	r2, #0
 8021c20:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8021c22:	4b17      	ldr	r3, [pc, #92]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8021c28:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8021c2a:	4b15      	ldr	r3, [pc, #84]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021c2c:	2200      	movs	r2, #0
 8021c2e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8021c30:	4b13      	ldr	r3, [pc, #76]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021c32:	2200      	movs	r2, #0
 8021c34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8021c36:	4812      	ldr	r0, [pc, #72]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021c38:	f000 fb60 	bl	80222fc <HAL_DMA_Init>
 8021c3c:	4603      	mov	r3, r0
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d001      	beq.n	8021c46 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8021c42:	f7ff ff2b 	bl	8021a9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8021c46:	687b      	ldr	r3, [r7, #4]
 8021c48:	4a0d      	ldr	r2, [pc, #52]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021c4a:	67da      	str	r2, [r3, #124]	; 0x7c
 8021c4c:	4a0c      	ldr	r2, [pc, #48]	; (8021c80 <HAL_UART_MspInit+0x19c>)
 8021c4e:	687b      	ldr	r3, [r7, #4]
 8021c50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8021c52:	2200      	movs	r2, #0
 8021c54:	2105      	movs	r1, #5
 8021c56:	2027      	movs	r0, #39	; 0x27
 8021c58:	f000 fb28 	bl	80222ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8021c5c:	2027      	movs	r0, #39	; 0x27
 8021c5e:	f000 fb3f 	bl	80222e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8021c62:	bf00      	nop
 8021c64:	37d8      	adds	r7, #216	; 0xd8
 8021c66:	46bd      	mov	sp, r7
 8021c68:	bd80      	pop	{r7, pc}
 8021c6a:	bf00      	nop
 8021c6c:	40004800 	.word	0x40004800
 8021c70:	58024400 	.word	0x58024400
 8021c74:	58020c00 	.word	0x58020c00
 8021c78:	24000920 	.word	0x24000920
 8021c7c:	40020010 	.word	0x40020010
 8021c80:	24000998 	.word	0x24000998
 8021c84:	40020028 	.word	0x40020028

08021c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021c88:	b580      	push	{r7, lr}
 8021c8a:	b08e      	sub	sp, #56	; 0x38
 8021c8c:	af00      	add	r7, sp, #0
 8021c8e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021c90:	687b      	ldr	r3, [r7, #4]
 8021c92:	2b0f      	cmp	r3, #15
 8021c94:	d844      	bhi.n	8021d20 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8021c96:	2200      	movs	r2, #0
 8021c98:	6879      	ldr	r1, [r7, #4]
 8021c9a:	2019      	movs	r0, #25
 8021c9c:	f000 fb06 	bl	80222ac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8021ca0:	2019      	movs	r0, #25
 8021ca2:	f000 fb1d 	bl	80222e0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8021ca6:	4a24      	ldr	r2, [pc, #144]	; (8021d38 <HAL_InitTick+0xb0>)
 8021ca8:	687b      	ldr	r3, [r7, #4]
 8021caa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8021cac:	4b23      	ldr	r3, [pc, #140]	; (8021d3c <HAL_InitTick+0xb4>)
 8021cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8021cb2:	4a22      	ldr	r2, [pc, #136]	; (8021d3c <HAL_InitTick+0xb4>)
 8021cb4:	f043 0301 	orr.w	r3, r3, #1
 8021cb8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8021cbc:	4b1f      	ldr	r3, [pc, #124]	; (8021d3c <HAL_InitTick+0xb4>)
 8021cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8021cc2:	f003 0301 	and.w	r3, r3, #1
 8021cc6:	60bb      	str	r3, [r7, #8]
 8021cc8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8021cca:	f107 020c 	add.w	r2, r7, #12
 8021cce:	f107 0310 	add.w	r3, r7, #16
 8021cd2:	4611      	mov	r1, r2
 8021cd4:	4618      	mov	r0, r3
 8021cd6:	f005 feb5 	bl	8027a44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8021cda:	f005 fe9d 	bl	8027a18 <HAL_RCC_GetPCLK2Freq>
 8021cde:	4603      	mov	r3, r0
 8021ce0:	005b      	lsls	r3, r3, #1
 8021ce2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8021ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021ce6:	4a16      	ldr	r2, [pc, #88]	; (8021d40 <HAL_InitTick+0xb8>)
 8021ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8021cec:	0c9b      	lsrs	r3, r3, #18
 8021cee:	3b01      	subs	r3, #1
 8021cf0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8021cf2:	4b14      	ldr	r3, [pc, #80]	; (8021d44 <HAL_InitTick+0xbc>)
 8021cf4:	4a14      	ldr	r2, [pc, #80]	; (8021d48 <HAL_InitTick+0xc0>)
 8021cf6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8021cf8:	4b12      	ldr	r3, [pc, #72]	; (8021d44 <HAL_InitTick+0xbc>)
 8021cfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8021cfe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8021d00:	4a10      	ldr	r2, [pc, #64]	; (8021d44 <HAL_InitTick+0xbc>)
 8021d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d04:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8021d06:	4b0f      	ldr	r3, [pc, #60]	; (8021d44 <HAL_InitTick+0xbc>)
 8021d08:	2200      	movs	r2, #0
 8021d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021d0c:	4b0d      	ldr	r3, [pc, #52]	; (8021d44 <HAL_InitTick+0xbc>)
 8021d0e:	2200      	movs	r2, #0
 8021d10:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8021d12:	480c      	ldr	r0, [pc, #48]	; (8021d44 <HAL_InitTick+0xbc>)
 8021d14:	f007 f9f4 	bl	8029100 <HAL_TIM_Base_Init>
 8021d18:	4603      	mov	r3, r0
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	d107      	bne.n	8021d2e <HAL_InitTick+0xa6>
 8021d1e:	e001      	b.n	8021d24 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8021d20:	2301      	movs	r3, #1
 8021d22:	e005      	b.n	8021d30 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8021d24:	4807      	ldr	r0, [pc, #28]	; (8021d44 <HAL_InitTick+0xbc>)
 8021d26:	f007 fa4d 	bl	80291c4 <HAL_TIM_Base_Start_IT>
 8021d2a:	4603      	mov	r3, r0
 8021d2c:	e000      	b.n	8021d30 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8021d2e:	2301      	movs	r3, #1
}
 8021d30:	4618      	mov	r0, r3
 8021d32:	3738      	adds	r7, #56	; 0x38
 8021d34:	46bd      	mov	sp, r7
 8021d36:	bd80      	pop	{r7, pc}
 8021d38:	24000008 	.word	0x24000008
 8021d3c:	58024400 	.word	0x58024400
 8021d40:	431bde83 	.word	0x431bde83
 8021d44:	24000af8 	.word	0x24000af8
 8021d48:	40010000 	.word	0x40010000

08021d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021d4c:	b480      	push	{r7}
 8021d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021d50:	e7fe      	b.n	8021d50 <NMI_Handler+0x4>

08021d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021d52:	b480      	push	{r7}
 8021d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021d56:	e7fe      	b.n	8021d56 <HardFault_Handler+0x4>

08021d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021d58:	b480      	push	{r7}
 8021d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021d5c:	e7fe      	b.n	8021d5c <MemManage_Handler+0x4>

08021d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021d5e:	b480      	push	{r7}
 8021d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021d62:	e7fe      	b.n	8021d62 <BusFault_Handler+0x4>

08021d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021d64:	b480      	push	{r7}
 8021d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021d68:	e7fe      	b.n	8021d68 <UsageFault_Handler+0x4>

08021d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021d6a:	b480      	push	{r7}
 8021d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021d6e:	bf00      	nop
 8021d70:	46bd      	mov	sp, r7
 8021d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d76:	4770      	bx	lr

08021d78 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8021d78:	b580      	push	{r7, lr}
 8021d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8021d7c:	4802      	ldr	r0, [pc, #8]	; (8021d88 <DMA1_Stream0_IRQHandler+0x10>)
 8021d7e:	f001 fde5 	bl	802394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8021d82:	bf00      	nop
 8021d84:	bd80      	pop	{r7, pc}
 8021d86:	bf00      	nop
 8021d88:	24000920 	.word	0x24000920

08021d8c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8021d8c:	b580      	push	{r7, lr}
 8021d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8021d90:	4802      	ldr	r0, [pc, #8]	; (8021d9c <DMA1_Stream1_IRQHandler+0x10>)
 8021d92:	f001 fddb 	bl	802394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8021d96:	bf00      	nop
 8021d98:	bd80      	pop	{r7, pc}
 8021d9a:	bf00      	nop
 8021d9c:	24000998 	.word	0x24000998

08021da0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8021da0:	b580      	push	{r7, lr}
 8021da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8021da4:	4802      	ldr	r0, [pc, #8]	; (8021db0 <TIM1_UP_IRQHandler+0x10>)
 8021da6:	f007 fa93 	bl	80292d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8021daa:	bf00      	nop
 8021dac:	bd80      	pop	{r7, pc}
 8021dae:	bf00      	nop
 8021db0:	24000af8 	.word	0x24000af8

08021db4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8021db4:	b580      	push	{r7, lr}
 8021db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8021db8:	4802      	ldr	r0, [pc, #8]	; (8021dc4 <USART3_IRQHandler+0x10>)
 8021dba:	f007 fd77 	bl	80298ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8021dbe:	bf00      	nop
 8021dc0:	bd80      	pop	{r7, pc}
 8021dc2:	bf00      	nop
 8021dc4:	24000890 	.word	0x24000890

08021dc8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8021dc8:	b580      	push	{r7, lr}
 8021dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8021dcc:	4802      	ldr	r0, [pc, #8]	; (8021dd8 <OTG_HS_IRQHandler+0x10>)
 8021dce:	f003 fd15 	bl	80257fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8021dd2:	bf00      	nop
 8021dd4:	bd80      	pop	{r7, pc}
 8021dd6:	bf00      	nop
 8021dd8:	24006ed4 	.word	0x24006ed4

08021ddc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021ddc:	b580      	push	{r7, lr}
 8021dde:	b086      	sub	sp, #24
 8021de0:	af00      	add	r7, sp, #0
 8021de2:	60f8      	str	r0, [r7, #12]
 8021de4:	60b9      	str	r1, [r7, #8]
 8021de6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021de8:	2300      	movs	r3, #0
 8021dea:	617b      	str	r3, [r7, #20]
 8021dec:	e00a      	b.n	8021e04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8021dee:	f3af 8000 	nop.w
 8021df2:	4601      	mov	r1, r0
 8021df4:	68bb      	ldr	r3, [r7, #8]
 8021df6:	1c5a      	adds	r2, r3, #1
 8021df8:	60ba      	str	r2, [r7, #8]
 8021dfa:	b2ca      	uxtb	r2, r1
 8021dfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021dfe:	697b      	ldr	r3, [r7, #20]
 8021e00:	3301      	adds	r3, #1
 8021e02:	617b      	str	r3, [r7, #20]
 8021e04:	697a      	ldr	r2, [r7, #20]
 8021e06:	687b      	ldr	r3, [r7, #4]
 8021e08:	429a      	cmp	r2, r3
 8021e0a:	dbf0      	blt.n	8021dee <_read+0x12>
	}

return len;
 8021e0c:	687b      	ldr	r3, [r7, #4]
}
 8021e0e:	4618      	mov	r0, r3
 8021e10:	3718      	adds	r7, #24
 8021e12:	46bd      	mov	sp, r7
 8021e14:	bd80      	pop	{r7, pc}

08021e16 <_close>:
	}
	return len;
}

int _close(int file)
{
 8021e16:	b480      	push	{r7}
 8021e18:	b083      	sub	sp, #12
 8021e1a:	af00      	add	r7, sp, #0
 8021e1c:	6078      	str	r0, [r7, #4]
	return -1;
 8021e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8021e22:	4618      	mov	r0, r3
 8021e24:	370c      	adds	r7, #12
 8021e26:	46bd      	mov	sp, r7
 8021e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e2c:	4770      	bx	lr

08021e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8021e2e:	b480      	push	{r7}
 8021e30:	b083      	sub	sp, #12
 8021e32:	af00      	add	r7, sp, #0
 8021e34:	6078      	str	r0, [r7, #4]
 8021e36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8021e38:	683b      	ldr	r3, [r7, #0]
 8021e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8021e3e:	605a      	str	r2, [r3, #4]
	return 0;
 8021e40:	2300      	movs	r3, #0
}
 8021e42:	4618      	mov	r0, r3
 8021e44:	370c      	adds	r7, #12
 8021e46:	46bd      	mov	sp, r7
 8021e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e4c:	4770      	bx	lr

08021e4e <_isatty>:

int _isatty(int file)
{
 8021e4e:	b480      	push	{r7}
 8021e50:	b083      	sub	sp, #12
 8021e52:	af00      	add	r7, sp, #0
 8021e54:	6078      	str	r0, [r7, #4]
	return 1;
 8021e56:	2301      	movs	r3, #1
}
 8021e58:	4618      	mov	r0, r3
 8021e5a:	370c      	adds	r7, #12
 8021e5c:	46bd      	mov	sp, r7
 8021e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e62:	4770      	bx	lr

08021e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021e64:	b480      	push	{r7}
 8021e66:	b085      	sub	sp, #20
 8021e68:	af00      	add	r7, sp, #0
 8021e6a:	60f8      	str	r0, [r7, #12]
 8021e6c:	60b9      	str	r1, [r7, #8]
 8021e6e:	607a      	str	r2, [r7, #4]
	return 0;
 8021e70:	2300      	movs	r3, #0
}
 8021e72:	4618      	mov	r0, r3
 8021e74:	3714      	adds	r7, #20
 8021e76:	46bd      	mov	sp, r7
 8021e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e7c:	4770      	bx	lr
	...

08021e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8021e80:	b580      	push	{r7, lr}
 8021e82:	b086      	sub	sp, #24
 8021e84:	af00      	add	r7, sp, #0
 8021e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021e88:	4a14      	ldr	r2, [pc, #80]	; (8021edc <_sbrk+0x5c>)
 8021e8a:	4b15      	ldr	r3, [pc, #84]	; (8021ee0 <_sbrk+0x60>)
 8021e8c:	1ad3      	subs	r3, r2, r3
 8021e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8021e90:	697b      	ldr	r3, [r7, #20]
 8021e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8021e94:	4b13      	ldr	r3, [pc, #76]	; (8021ee4 <_sbrk+0x64>)
 8021e96:	681b      	ldr	r3, [r3, #0]
 8021e98:	2b00      	cmp	r3, #0
 8021e9a:	d102      	bne.n	8021ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8021e9c:	4b11      	ldr	r3, [pc, #68]	; (8021ee4 <_sbrk+0x64>)
 8021e9e:	4a12      	ldr	r2, [pc, #72]	; (8021ee8 <_sbrk+0x68>)
 8021ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8021ea2:	4b10      	ldr	r3, [pc, #64]	; (8021ee4 <_sbrk+0x64>)
 8021ea4:	681a      	ldr	r2, [r3, #0]
 8021ea6:	687b      	ldr	r3, [r7, #4]
 8021ea8:	4413      	add	r3, r2
 8021eaa:	693a      	ldr	r2, [r7, #16]
 8021eac:	429a      	cmp	r2, r3
 8021eae:	d207      	bcs.n	8021ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8021eb0:	f017 fff0 	bl	8039e94 <__errno>
 8021eb4:	4603      	mov	r3, r0
 8021eb6:	220c      	movs	r2, #12
 8021eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8021eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021ebe:	e009      	b.n	8021ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8021ec0:	4b08      	ldr	r3, [pc, #32]	; (8021ee4 <_sbrk+0x64>)
 8021ec2:	681b      	ldr	r3, [r3, #0]
 8021ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8021ec6:	4b07      	ldr	r3, [pc, #28]	; (8021ee4 <_sbrk+0x64>)
 8021ec8:	681a      	ldr	r2, [r3, #0]
 8021eca:	687b      	ldr	r3, [r7, #4]
 8021ecc:	4413      	add	r3, r2
 8021ece:	4a05      	ldr	r2, [pc, #20]	; (8021ee4 <_sbrk+0x64>)
 8021ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8021ed2:	68fb      	ldr	r3, [r7, #12]
}
 8021ed4:	4618      	mov	r0, r3
 8021ed6:	3718      	adds	r7, #24
 8021ed8:	46bd      	mov	sp, r7
 8021eda:	bd80      	pop	{r7, pc}
 8021edc:	24050000 	.word	0x24050000
 8021ee0:	00000400 	.word	0x00000400
 8021ee4:	24000b44 	.word	0x24000b44
 8021ee8:	240071e8 	.word	0x240071e8

08021eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8021eec:	b480      	push	{r7}
 8021eee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8021ef0:	4b34      	ldr	r3, [pc, #208]	; (8021fc4 <SystemInit+0xd8>)
 8021ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021ef6:	4a33      	ldr	r2, [pc, #204]	; (8021fc4 <SystemInit+0xd8>)
 8021ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8021f00:	4b31      	ldr	r3, [pc, #196]	; (8021fc8 <SystemInit+0xdc>)
 8021f02:	681b      	ldr	r3, [r3, #0]
 8021f04:	f003 030f 	and.w	r3, r3, #15
 8021f08:	2b06      	cmp	r3, #6
 8021f0a:	d807      	bhi.n	8021f1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8021f0c:	4b2e      	ldr	r3, [pc, #184]	; (8021fc8 <SystemInit+0xdc>)
 8021f0e:	681b      	ldr	r3, [r3, #0]
 8021f10:	f023 030f 	bic.w	r3, r3, #15
 8021f14:	4a2c      	ldr	r2, [pc, #176]	; (8021fc8 <SystemInit+0xdc>)
 8021f16:	f043 0307 	orr.w	r3, r3, #7
 8021f1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8021f1c:	4b2b      	ldr	r3, [pc, #172]	; (8021fcc <SystemInit+0xe0>)
 8021f1e:	681b      	ldr	r3, [r3, #0]
 8021f20:	4a2a      	ldr	r2, [pc, #168]	; (8021fcc <SystemInit+0xe0>)
 8021f22:	f043 0301 	orr.w	r3, r3, #1
 8021f26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8021f28:	4b28      	ldr	r3, [pc, #160]	; (8021fcc <SystemInit+0xe0>)
 8021f2a:	2200      	movs	r2, #0
 8021f2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8021f2e:	4b27      	ldr	r3, [pc, #156]	; (8021fcc <SystemInit+0xe0>)
 8021f30:	681a      	ldr	r2, [r3, #0]
 8021f32:	4926      	ldr	r1, [pc, #152]	; (8021fcc <SystemInit+0xe0>)
 8021f34:	4b26      	ldr	r3, [pc, #152]	; (8021fd0 <SystemInit+0xe4>)
 8021f36:	4013      	ands	r3, r2
 8021f38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8021f3a:	4b23      	ldr	r3, [pc, #140]	; (8021fc8 <SystemInit+0xdc>)
 8021f3c:	681b      	ldr	r3, [r3, #0]
 8021f3e:	f003 0308 	and.w	r3, r3, #8
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	d007      	beq.n	8021f56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8021f46:	4b20      	ldr	r3, [pc, #128]	; (8021fc8 <SystemInit+0xdc>)
 8021f48:	681b      	ldr	r3, [r3, #0]
 8021f4a:	f023 030f 	bic.w	r3, r3, #15
 8021f4e:	4a1e      	ldr	r2, [pc, #120]	; (8021fc8 <SystemInit+0xdc>)
 8021f50:	f043 0307 	orr.w	r3, r3, #7
 8021f54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8021f56:	4b1d      	ldr	r3, [pc, #116]	; (8021fcc <SystemInit+0xe0>)
 8021f58:	2200      	movs	r2, #0
 8021f5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8021f5c:	4b1b      	ldr	r3, [pc, #108]	; (8021fcc <SystemInit+0xe0>)
 8021f5e:	2200      	movs	r2, #0
 8021f60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8021f62:	4b1a      	ldr	r3, [pc, #104]	; (8021fcc <SystemInit+0xe0>)
 8021f64:	2200      	movs	r2, #0
 8021f66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8021f68:	4b18      	ldr	r3, [pc, #96]	; (8021fcc <SystemInit+0xe0>)
 8021f6a:	4a1a      	ldr	r2, [pc, #104]	; (8021fd4 <SystemInit+0xe8>)
 8021f6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8021f6e:	4b17      	ldr	r3, [pc, #92]	; (8021fcc <SystemInit+0xe0>)
 8021f70:	4a19      	ldr	r2, [pc, #100]	; (8021fd8 <SystemInit+0xec>)
 8021f72:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8021f74:	4b15      	ldr	r3, [pc, #84]	; (8021fcc <SystemInit+0xe0>)
 8021f76:	4a19      	ldr	r2, [pc, #100]	; (8021fdc <SystemInit+0xf0>)
 8021f78:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8021f7a:	4b14      	ldr	r3, [pc, #80]	; (8021fcc <SystemInit+0xe0>)
 8021f7c:	2200      	movs	r2, #0
 8021f7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8021f80:	4b12      	ldr	r3, [pc, #72]	; (8021fcc <SystemInit+0xe0>)
 8021f82:	4a16      	ldr	r2, [pc, #88]	; (8021fdc <SystemInit+0xf0>)
 8021f84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8021f86:	4b11      	ldr	r3, [pc, #68]	; (8021fcc <SystemInit+0xe0>)
 8021f88:	2200      	movs	r2, #0
 8021f8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8021f8c:	4b0f      	ldr	r3, [pc, #60]	; (8021fcc <SystemInit+0xe0>)
 8021f8e:	4a13      	ldr	r2, [pc, #76]	; (8021fdc <SystemInit+0xf0>)
 8021f90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8021f92:	4b0e      	ldr	r3, [pc, #56]	; (8021fcc <SystemInit+0xe0>)
 8021f94:	2200      	movs	r2, #0
 8021f96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8021f98:	4b0c      	ldr	r3, [pc, #48]	; (8021fcc <SystemInit+0xe0>)
 8021f9a:	681b      	ldr	r3, [r3, #0]
 8021f9c:	4a0b      	ldr	r2, [pc, #44]	; (8021fcc <SystemInit+0xe0>)
 8021f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021fa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8021fa4:	4b09      	ldr	r3, [pc, #36]	; (8021fcc <SystemInit+0xe0>)
 8021fa6:	2200      	movs	r2, #0
 8021fa8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8021faa:	4b0d      	ldr	r3, [pc, #52]	; (8021fe0 <SystemInit+0xf4>)
 8021fac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8021fb0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8021fb2:	4b04      	ldr	r3, [pc, #16]	; (8021fc4 <SystemInit+0xd8>)
 8021fb4:	4a0b      	ldr	r2, [pc, #44]	; (8021fe4 <SystemInit+0xf8>)
 8021fb6:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8021fb8:	bf00      	nop
 8021fba:	46bd      	mov	sp, r7
 8021fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fc0:	4770      	bx	lr
 8021fc2:	bf00      	nop
 8021fc4:	e000ed00 	.word	0xe000ed00
 8021fc8:	52002000 	.word	0x52002000
 8021fcc:	58024400 	.word	0x58024400
 8021fd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8021fd4:	02020200 	.word	0x02020200
 8021fd8:	01ff0000 	.word	0x01ff0000
 8021fdc:	01010280 	.word	0x01010280
 8021fe0:	52004000 	.word	0x52004000
 8021fe4:	08020000 	.word	0x08020000

08021fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8021fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8022020 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8021fec:	f7ff ff7e 	bl	8021eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8021ff0:	480c      	ldr	r0, [pc, #48]	; (8022024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8021ff2:	490d      	ldr	r1, [pc, #52]	; (8022028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8021ff4:	4a0d      	ldr	r2, [pc, #52]	; (802202c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8021ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021ff8:	e002      	b.n	8022000 <LoopCopyDataInit>

08021ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021ffe:	3304      	adds	r3, #4

08022000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8022000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8022002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8022004:	d3f9      	bcc.n	8021ffa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8022006:	4a0a      	ldr	r2, [pc, #40]	; (8022030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8022008:	4c0a      	ldr	r4, [pc, #40]	; (8022034 <LoopFillZerobss+0x22>)
  movs r3, #0
 802200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 802200c:	e001      	b.n	8022012 <LoopFillZerobss>

0802200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8022010:	3204      	adds	r2, #4

08022012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8022012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8022014:	d3fb      	bcc.n	802200e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8022016:	f017 ff43 	bl	8039ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802201a:	f7fe fe9b 	bl	8020d54 <main>
  bx  lr
 802201e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8022020:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8022024:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8022028:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 802202c:	0803be8c 	.word	0x0803be8c
  ldr r2, =_sbss
 8022030:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8022034:	240071e8 	.word	0x240071e8

08022038 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8022038:	e7fe      	b.n	8022038 <ADC3_IRQHandler>
	...

0802203c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802203c:	b580      	push	{r7, lr}
 802203e:	b082      	sub	sp, #8
 8022040:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8022042:	2003      	movs	r0, #3
 8022044:	f000 f927 	bl	8022296 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8022048:	f005 fb26 	bl	8027698 <HAL_RCC_GetSysClockFreq>
 802204c:	4602      	mov	r2, r0
 802204e:	4b15      	ldr	r3, [pc, #84]	; (80220a4 <HAL_Init+0x68>)
 8022050:	699b      	ldr	r3, [r3, #24]
 8022052:	0a1b      	lsrs	r3, r3, #8
 8022054:	f003 030f 	and.w	r3, r3, #15
 8022058:	4913      	ldr	r1, [pc, #76]	; (80220a8 <HAL_Init+0x6c>)
 802205a:	5ccb      	ldrb	r3, [r1, r3]
 802205c:	f003 031f 	and.w	r3, r3, #31
 8022060:	fa22 f303 	lsr.w	r3, r2, r3
 8022064:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8022066:	4b0f      	ldr	r3, [pc, #60]	; (80220a4 <HAL_Init+0x68>)
 8022068:	699b      	ldr	r3, [r3, #24]
 802206a:	f003 030f 	and.w	r3, r3, #15
 802206e:	4a0e      	ldr	r2, [pc, #56]	; (80220a8 <HAL_Init+0x6c>)
 8022070:	5cd3      	ldrb	r3, [r2, r3]
 8022072:	f003 031f 	and.w	r3, r3, #31
 8022076:	687a      	ldr	r2, [r7, #4]
 8022078:	fa22 f303 	lsr.w	r3, r2, r3
 802207c:	4a0b      	ldr	r2, [pc, #44]	; (80220ac <HAL_Init+0x70>)
 802207e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8022080:	4a0b      	ldr	r2, [pc, #44]	; (80220b0 <HAL_Init+0x74>)
 8022082:	687b      	ldr	r3, [r7, #4]
 8022084:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8022086:	200f      	movs	r0, #15
 8022088:	f7ff fdfe 	bl	8021c88 <HAL_InitTick>
 802208c:	4603      	mov	r3, r0
 802208e:	2b00      	cmp	r3, #0
 8022090:	d001      	beq.n	8022096 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8022092:	2301      	movs	r3, #1
 8022094:	e002      	b.n	802209c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8022096:	f7ff fd07 	bl	8021aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802209a:	2300      	movs	r3, #0
}
 802209c:	4618      	mov	r0, r3
 802209e:	3708      	adds	r7, #8
 80220a0:	46bd      	mov	sp, r7
 80220a2:	bd80      	pop	{r7, pc}
 80220a4:	58024400 	.word	0x58024400
 80220a8:	0803b950 	.word	0x0803b950
 80220ac:	24000004 	.word	0x24000004
 80220b0:	24000000 	.word	0x24000000

080220b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80220b4:	b480      	push	{r7}
 80220b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80220b8:	4b06      	ldr	r3, [pc, #24]	; (80220d4 <HAL_IncTick+0x20>)
 80220ba:	781b      	ldrb	r3, [r3, #0]
 80220bc:	461a      	mov	r2, r3
 80220be:	4b06      	ldr	r3, [pc, #24]	; (80220d8 <HAL_IncTick+0x24>)
 80220c0:	681b      	ldr	r3, [r3, #0]
 80220c2:	4413      	add	r3, r2
 80220c4:	4a04      	ldr	r2, [pc, #16]	; (80220d8 <HAL_IncTick+0x24>)
 80220c6:	6013      	str	r3, [r2, #0]
}
 80220c8:	bf00      	nop
 80220ca:	46bd      	mov	sp, r7
 80220cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220d0:	4770      	bx	lr
 80220d2:	bf00      	nop
 80220d4:	2400000c 	.word	0x2400000c
 80220d8:	24000b48 	.word	0x24000b48

080220dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80220dc:	b480      	push	{r7}
 80220de:	af00      	add	r7, sp, #0
  return uwTick;
 80220e0:	4b03      	ldr	r3, [pc, #12]	; (80220f0 <HAL_GetTick+0x14>)
 80220e2:	681b      	ldr	r3, [r3, #0]
}
 80220e4:	4618      	mov	r0, r3
 80220e6:	46bd      	mov	sp, r7
 80220e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220ec:	4770      	bx	lr
 80220ee:	bf00      	nop
 80220f0:	24000b48 	.word	0x24000b48

080220f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80220f4:	b580      	push	{r7, lr}
 80220f6:	b084      	sub	sp, #16
 80220f8:	af00      	add	r7, sp, #0
 80220fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80220fc:	f7ff ffee 	bl	80220dc <HAL_GetTick>
 8022100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8022102:	687b      	ldr	r3, [r7, #4]
 8022104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8022106:	68fb      	ldr	r3, [r7, #12]
 8022108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802210c:	d005      	beq.n	802211a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802210e:	4b0a      	ldr	r3, [pc, #40]	; (8022138 <HAL_Delay+0x44>)
 8022110:	781b      	ldrb	r3, [r3, #0]
 8022112:	461a      	mov	r2, r3
 8022114:	68fb      	ldr	r3, [r7, #12]
 8022116:	4413      	add	r3, r2
 8022118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802211a:	bf00      	nop
 802211c:	f7ff ffde 	bl	80220dc <HAL_GetTick>
 8022120:	4602      	mov	r2, r0
 8022122:	68bb      	ldr	r3, [r7, #8]
 8022124:	1ad3      	subs	r3, r2, r3
 8022126:	68fa      	ldr	r2, [r7, #12]
 8022128:	429a      	cmp	r2, r3
 802212a:	d8f7      	bhi.n	802211c <HAL_Delay+0x28>
  {
  }
}
 802212c:	bf00      	nop
 802212e:	bf00      	nop
 8022130:	3710      	adds	r7, #16
 8022132:	46bd      	mov	sp, r7
 8022134:	bd80      	pop	{r7, pc}
 8022136:	bf00      	nop
 8022138:	2400000c 	.word	0x2400000c

0802213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802213c:	b480      	push	{r7}
 802213e:	b085      	sub	sp, #20
 8022140:	af00      	add	r7, sp, #0
 8022142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8022144:	687b      	ldr	r3, [r7, #4]
 8022146:	f003 0307 	and.w	r3, r3, #7
 802214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802214c:	4b0b      	ldr	r3, [pc, #44]	; (802217c <__NVIC_SetPriorityGrouping+0x40>)
 802214e:	68db      	ldr	r3, [r3, #12]
 8022150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8022152:	68ba      	ldr	r2, [r7, #8]
 8022154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8022158:	4013      	ands	r3, r2
 802215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802215c:	68fb      	ldr	r3, [r7, #12]
 802215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8022160:	68bb      	ldr	r3, [r7, #8]
 8022162:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8022164:	4b06      	ldr	r3, [pc, #24]	; (8022180 <__NVIC_SetPriorityGrouping+0x44>)
 8022166:	4313      	orrs	r3, r2
 8022168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802216a:	4a04      	ldr	r2, [pc, #16]	; (802217c <__NVIC_SetPriorityGrouping+0x40>)
 802216c:	68bb      	ldr	r3, [r7, #8]
 802216e:	60d3      	str	r3, [r2, #12]
}
 8022170:	bf00      	nop
 8022172:	3714      	adds	r7, #20
 8022174:	46bd      	mov	sp, r7
 8022176:	f85d 7b04 	ldr.w	r7, [sp], #4
 802217a:	4770      	bx	lr
 802217c:	e000ed00 	.word	0xe000ed00
 8022180:	05fa0000 	.word	0x05fa0000

08022184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8022184:	b480      	push	{r7}
 8022186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022188:	4b04      	ldr	r3, [pc, #16]	; (802219c <__NVIC_GetPriorityGrouping+0x18>)
 802218a:	68db      	ldr	r3, [r3, #12]
 802218c:	0a1b      	lsrs	r3, r3, #8
 802218e:	f003 0307 	and.w	r3, r3, #7
}
 8022192:	4618      	mov	r0, r3
 8022194:	46bd      	mov	sp, r7
 8022196:	f85d 7b04 	ldr.w	r7, [sp], #4
 802219a:	4770      	bx	lr
 802219c:	e000ed00 	.word	0xe000ed00

080221a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80221a0:	b480      	push	{r7}
 80221a2:	b083      	sub	sp, #12
 80221a4:	af00      	add	r7, sp, #0
 80221a6:	4603      	mov	r3, r0
 80221a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80221aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80221ae:	2b00      	cmp	r3, #0
 80221b0:	db0b      	blt.n	80221ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80221b2:	88fb      	ldrh	r3, [r7, #6]
 80221b4:	f003 021f 	and.w	r2, r3, #31
 80221b8:	4907      	ldr	r1, [pc, #28]	; (80221d8 <__NVIC_EnableIRQ+0x38>)
 80221ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80221be:	095b      	lsrs	r3, r3, #5
 80221c0:	2001      	movs	r0, #1
 80221c2:	fa00 f202 	lsl.w	r2, r0, r2
 80221c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80221ca:	bf00      	nop
 80221cc:	370c      	adds	r7, #12
 80221ce:	46bd      	mov	sp, r7
 80221d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221d4:	4770      	bx	lr
 80221d6:	bf00      	nop
 80221d8:	e000e100 	.word	0xe000e100

080221dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80221dc:	b480      	push	{r7}
 80221de:	b083      	sub	sp, #12
 80221e0:	af00      	add	r7, sp, #0
 80221e2:	4603      	mov	r3, r0
 80221e4:	6039      	str	r1, [r7, #0]
 80221e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80221e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	db0a      	blt.n	8022206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80221f0:	683b      	ldr	r3, [r7, #0]
 80221f2:	b2da      	uxtb	r2, r3
 80221f4:	490c      	ldr	r1, [pc, #48]	; (8022228 <__NVIC_SetPriority+0x4c>)
 80221f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80221fa:	0112      	lsls	r2, r2, #4
 80221fc:	b2d2      	uxtb	r2, r2
 80221fe:	440b      	add	r3, r1
 8022200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8022204:	e00a      	b.n	802221c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022206:	683b      	ldr	r3, [r7, #0]
 8022208:	b2da      	uxtb	r2, r3
 802220a:	4908      	ldr	r1, [pc, #32]	; (802222c <__NVIC_SetPriority+0x50>)
 802220c:	88fb      	ldrh	r3, [r7, #6]
 802220e:	f003 030f 	and.w	r3, r3, #15
 8022212:	3b04      	subs	r3, #4
 8022214:	0112      	lsls	r2, r2, #4
 8022216:	b2d2      	uxtb	r2, r2
 8022218:	440b      	add	r3, r1
 802221a:	761a      	strb	r2, [r3, #24]
}
 802221c:	bf00      	nop
 802221e:	370c      	adds	r7, #12
 8022220:	46bd      	mov	sp, r7
 8022222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022226:	4770      	bx	lr
 8022228:	e000e100 	.word	0xe000e100
 802222c:	e000ed00 	.word	0xe000ed00

08022230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8022230:	b480      	push	{r7}
 8022232:	b089      	sub	sp, #36	; 0x24
 8022234:	af00      	add	r7, sp, #0
 8022236:	60f8      	str	r0, [r7, #12]
 8022238:	60b9      	str	r1, [r7, #8]
 802223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802223c:	68fb      	ldr	r3, [r7, #12]
 802223e:	f003 0307 	and.w	r3, r3, #7
 8022242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022244:	69fb      	ldr	r3, [r7, #28]
 8022246:	f1c3 0307 	rsb	r3, r3, #7
 802224a:	2b04      	cmp	r3, #4
 802224c:	bf28      	it	cs
 802224e:	2304      	movcs	r3, #4
 8022250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022252:	69fb      	ldr	r3, [r7, #28]
 8022254:	3304      	adds	r3, #4
 8022256:	2b06      	cmp	r3, #6
 8022258:	d902      	bls.n	8022260 <NVIC_EncodePriority+0x30>
 802225a:	69fb      	ldr	r3, [r7, #28]
 802225c:	3b03      	subs	r3, #3
 802225e:	e000      	b.n	8022262 <NVIC_EncodePriority+0x32>
 8022260:	2300      	movs	r3, #0
 8022262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022268:	69bb      	ldr	r3, [r7, #24]
 802226a:	fa02 f303 	lsl.w	r3, r2, r3
 802226e:	43da      	mvns	r2, r3
 8022270:	68bb      	ldr	r3, [r7, #8]
 8022272:	401a      	ands	r2, r3
 8022274:	697b      	ldr	r3, [r7, #20]
 8022276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802227c:	697b      	ldr	r3, [r7, #20]
 802227e:	fa01 f303 	lsl.w	r3, r1, r3
 8022282:	43d9      	mvns	r1, r3
 8022284:	687b      	ldr	r3, [r7, #4]
 8022286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022288:	4313      	orrs	r3, r2
         );
}
 802228a:	4618      	mov	r0, r3
 802228c:	3724      	adds	r7, #36	; 0x24
 802228e:	46bd      	mov	sp, r7
 8022290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022294:	4770      	bx	lr

08022296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022296:	b580      	push	{r7, lr}
 8022298:	b082      	sub	sp, #8
 802229a:	af00      	add	r7, sp, #0
 802229c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802229e:	6878      	ldr	r0, [r7, #4]
 80222a0:	f7ff ff4c 	bl	802213c <__NVIC_SetPriorityGrouping>
}
 80222a4:	bf00      	nop
 80222a6:	3708      	adds	r7, #8
 80222a8:	46bd      	mov	sp, r7
 80222aa:	bd80      	pop	{r7, pc}

080222ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80222ac:	b580      	push	{r7, lr}
 80222ae:	b086      	sub	sp, #24
 80222b0:	af00      	add	r7, sp, #0
 80222b2:	4603      	mov	r3, r0
 80222b4:	60b9      	str	r1, [r7, #8]
 80222b6:	607a      	str	r2, [r7, #4]
 80222b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80222ba:	f7ff ff63 	bl	8022184 <__NVIC_GetPriorityGrouping>
 80222be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80222c0:	687a      	ldr	r2, [r7, #4]
 80222c2:	68b9      	ldr	r1, [r7, #8]
 80222c4:	6978      	ldr	r0, [r7, #20]
 80222c6:	f7ff ffb3 	bl	8022230 <NVIC_EncodePriority>
 80222ca:	4602      	mov	r2, r0
 80222cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80222d0:	4611      	mov	r1, r2
 80222d2:	4618      	mov	r0, r3
 80222d4:	f7ff ff82 	bl	80221dc <__NVIC_SetPriority>
}
 80222d8:	bf00      	nop
 80222da:	3718      	adds	r7, #24
 80222dc:	46bd      	mov	sp, r7
 80222de:	bd80      	pop	{r7, pc}

080222e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80222e0:	b580      	push	{r7, lr}
 80222e2:	b082      	sub	sp, #8
 80222e4:	af00      	add	r7, sp, #0
 80222e6:	4603      	mov	r3, r0
 80222e8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80222ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80222ee:	4618      	mov	r0, r3
 80222f0:	f7ff ff56 	bl	80221a0 <__NVIC_EnableIRQ>
}
 80222f4:	bf00      	nop
 80222f6:	3708      	adds	r7, #8
 80222f8:	46bd      	mov	sp, r7
 80222fa:	bd80      	pop	{r7, pc}

080222fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80222fc:	b580      	push	{r7, lr}
 80222fe:	b086      	sub	sp, #24
 8022300:	af00      	add	r7, sp, #0
 8022302:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8022304:	f7ff feea 	bl	80220dc <HAL_GetTick>
 8022308:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	2b00      	cmp	r3, #0
 802230e:	d101      	bne.n	8022314 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8022310:	2301      	movs	r3, #1
 8022312:	e314      	b.n	802293e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8022314:	687b      	ldr	r3, [r7, #4]
 8022316:	681b      	ldr	r3, [r3, #0]
 8022318:	4a66      	ldr	r2, [pc, #408]	; (80224b4 <HAL_DMA_Init+0x1b8>)
 802231a:	4293      	cmp	r3, r2
 802231c:	d04a      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 802231e:	687b      	ldr	r3, [r7, #4]
 8022320:	681b      	ldr	r3, [r3, #0]
 8022322:	4a65      	ldr	r2, [pc, #404]	; (80224b8 <HAL_DMA_Init+0x1bc>)
 8022324:	4293      	cmp	r3, r2
 8022326:	d045      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	681b      	ldr	r3, [r3, #0]
 802232c:	4a63      	ldr	r2, [pc, #396]	; (80224bc <HAL_DMA_Init+0x1c0>)
 802232e:	4293      	cmp	r3, r2
 8022330:	d040      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	681b      	ldr	r3, [r3, #0]
 8022336:	4a62      	ldr	r2, [pc, #392]	; (80224c0 <HAL_DMA_Init+0x1c4>)
 8022338:	4293      	cmp	r3, r2
 802233a:	d03b      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 802233c:	687b      	ldr	r3, [r7, #4]
 802233e:	681b      	ldr	r3, [r3, #0]
 8022340:	4a60      	ldr	r2, [pc, #384]	; (80224c4 <HAL_DMA_Init+0x1c8>)
 8022342:	4293      	cmp	r3, r2
 8022344:	d036      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	681b      	ldr	r3, [r3, #0]
 802234a:	4a5f      	ldr	r2, [pc, #380]	; (80224c8 <HAL_DMA_Init+0x1cc>)
 802234c:	4293      	cmp	r3, r2
 802234e:	d031      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	681b      	ldr	r3, [r3, #0]
 8022354:	4a5d      	ldr	r2, [pc, #372]	; (80224cc <HAL_DMA_Init+0x1d0>)
 8022356:	4293      	cmp	r3, r2
 8022358:	d02c      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 802235a:	687b      	ldr	r3, [r7, #4]
 802235c:	681b      	ldr	r3, [r3, #0]
 802235e:	4a5c      	ldr	r2, [pc, #368]	; (80224d0 <HAL_DMA_Init+0x1d4>)
 8022360:	4293      	cmp	r3, r2
 8022362:	d027      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 8022364:	687b      	ldr	r3, [r7, #4]
 8022366:	681b      	ldr	r3, [r3, #0]
 8022368:	4a5a      	ldr	r2, [pc, #360]	; (80224d4 <HAL_DMA_Init+0x1d8>)
 802236a:	4293      	cmp	r3, r2
 802236c:	d022      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 802236e:	687b      	ldr	r3, [r7, #4]
 8022370:	681b      	ldr	r3, [r3, #0]
 8022372:	4a59      	ldr	r2, [pc, #356]	; (80224d8 <HAL_DMA_Init+0x1dc>)
 8022374:	4293      	cmp	r3, r2
 8022376:	d01d      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 8022378:	687b      	ldr	r3, [r7, #4]
 802237a:	681b      	ldr	r3, [r3, #0]
 802237c:	4a57      	ldr	r2, [pc, #348]	; (80224dc <HAL_DMA_Init+0x1e0>)
 802237e:	4293      	cmp	r3, r2
 8022380:	d018      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 8022382:	687b      	ldr	r3, [r7, #4]
 8022384:	681b      	ldr	r3, [r3, #0]
 8022386:	4a56      	ldr	r2, [pc, #344]	; (80224e0 <HAL_DMA_Init+0x1e4>)
 8022388:	4293      	cmp	r3, r2
 802238a:	d013      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	681b      	ldr	r3, [r3, #0]
 8022390:	4a54      	ldr	r2, [pc, #336]	; (80224e4 <HAL_DMA_Init+0x1e8>)
 8022392:	4293      	cmp	r3, r2
 8022394:	d00e      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 8022396:	687b      	ldr	r3, [r7, #4]
 8022398:	681b      	ldr	r3, [r3, #0]
 802239a:	4a53      	ldr	r2, [pc, #332]	; (80224e8 <HAL_DMA_Init+0x1ec>)
 802239c:	4293      	cmp	r3, r2
 802239e:	d009      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 80223a0:	687b      	ldr	r3, [r7, #4]
 80223a2:	681b      	ldr	r3, [r3, #0]
 80223a4:	4a51      	ldr	r2, [pc, #324]	; (80224ec <HAL_DMA_Init+0x1f0>)
 80223a6:	4293      	cmp	r3, r2
 80223a8:	d004      	beq.n	80223b4 <HAL_DMA_Init+0xb8>
 80223aa:	687b      	ldr	r3, [r7, #4]
 80223ac:	681b      	ldr	r3, [r3, #0]
 80223ae:	4a50      	ldr	r2, [pc, #320]	; (80224f0 <HAL_DMA_Init+0x1f4>)
 80223b0:	4293      	cmp	r3, r2
 80223b2:	d101      	bne.n	80223b8 <HAL_DMA_Init+0xbc>
 80223b4:	2301      	movs	r3, #1
 80223b6:	e000      	b.n	80223ba <HAL_DMA_Init+0xbe>
 80223b8:	2300      	movs	r3, #0
 80223ba:	2b00      	cmp	r3, #0
 80223bc:	f000 813c 	beq.w	8022638 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	2202      	movs	r2, #2
 80223c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80223c8:	687b      	ldr	r3, [r7, #4]
 80223ca:	2200      	movs	r2, #0
 80223cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80223d0:	687b      	ldr	r3, [r7, #4]
 80223d2:	681b      	ldr	r3, [r3, #0]
 80223d4:	4a37      	ldr	r2, [pc, #220]	; (80224b4 <HAL_DMA_Init+0x1b8>)
 80223d6:	4293      	cmp	r3, r2
 80223d8:	d04a      	beq.n	8022470 <HAL_DMA_Init+0x174>
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	681b      	ldr	r3, [r3, #0]
 80223de:	4a36      	ldr	r2, [pc, #216]	; (80224b8 <HAL_DMA_Init+0x1bc>)
 80223e0:	4293      	cmp	r3, r2
 80223e2:	d045      	beq.n	8022470 <HAL_DMA_Init+0x174>
 80223e4:	687b      	ldr	r3, [r7, #4]
 80223e6:	681b      	ldr	r3, [r3, #0]
 80223e8:	4a34      	ldr	r2, [pc, #208]	; (80224bc <HAL_DMA_Init+0x1c0>)
 80223ea:	4293      	cmp	r3, r2
 80223ec:	d040      	beq.n	8022470 <HAL_DMA_Init+0x174>
 80223ee:	687b      	ldr	r3, [r7, #4]
 80223f0:	681b      	ldr	r3, [r3, #0]
 80223f2:	4a33      	ldr	r2, [pc, #204]	; (80224c0 <HAL_DMA_Init+0x1c4>)
 80223f4:	4293      	cmp	r3, r2
 80223f6:	d03b      	beq.n	8022470 <HAL_DMA_Init+0x174>
 80223f8:	687b      	ldr	r3, [r7, #4]
 80223fa:	681b      	ldr	r3, [r3, #0]
 80223fc:	4a31      	ldr	r2, [pc, #196]	; (80224c4 <HAL_DMA_Init+0x1c8>)
 80223fe:	4293      	cmp	r3, r2
 8022400:	d036      	beq.n	8022470 <HAL_DMA_Init+0x174>
 8022402:	687b      	ldr	r3, [r7, #4]
 8022404:	681b      	ldr	r3, [r3, #0]
 8022406:	4a30      	ldr	r2, [pc, #192]	; (80224c8 <HAL_DMA_Init+0x1cc>)
 8022408:	4293      	cmp	r3, r2
 802240a:	d031      	beq.n	8022470 <HAL_DMA_Init+0x174>
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	681b      	ldr	r3, [r3, #0]
 8022410:	4a2e      	ldr	r2, [pc, #184]	; (80224cc <HAL_DMA_Init+0x1d0>)
 8022412:	4293      	cmp	r3, r2
 8022414:	d02c      	beq.n	8022470 <HAL_DMA_Init+0x174>
 8022416:	687b      	ldr	r3, [r7, #4]
 8022418:	681b      	ldr	r3, [r3, #0]
 802241a:	4a2d      	ldr	r2, [pc, #180]	; (80224d0 <HAL_DMA_Init+0x1d4>)
 802241c:	4293      	cmp	r3, r2
 802241e:	d027      	beq.n	8022470 <HAL_DMA_Init+0x174>
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	681b      	ldr	r3, [r3, #0]
 8022424:	4a2b      	ldr	r2, [pc, #172]	; (80224d4 <HAL_DMA_Init+0x1d8>)
 8022426:	4293      	cmp	r3, r2
 8022428:	d022      	beq.n	8022470 <HAL_DMA_Init+0x174>
 802242a:	687b      	ldr	r3, [r7, #4]
 802242c:	681b      	ldr	r3, [r3, #0]
 802242e:	4a2a      	ldr	r2, [pc, #168]	; (80224d8 <HAL_DMA_Init+0x1dc>)
 8022430:	4293      	cmp	r3, r2
 8022432:	d01d      	beq.n	8022470 <HAL_DMA_Init+0x174>
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	681b      	ldr	r3, [r3, #0]
 8022438:	4a28      	ldr	r2, [pc, #160]	; (80224dc <HAL_DMA_Init+0x1e0>)
 802243a:	4293      	cmp	r3, r2
 802243c:	d018      	beq.n	8022470 <HAL_DMA_Init+0x174>
 802243e:	687b      	ldr	r3, [r7, #4]
 8022440:	681b      	ldr	r3, [r3, #0]
 8022442:	4a27      	ldr	r2, [pc, #156]	; (80224e0 <HAL_DMA_Init+0x1e4>)
 8022444:	4293      	cmp	r3, r2
 8022446:	d013      	beq.n	8022470 <HAL_DMA_Init+0x174>
 8022448:	687b      	ldr	r3, [r7, #4]
 802244a:	681b      	ldr	r3, [r3, #0]
 802244c:	4a25      	ldr	r2, [pc, #148]	; (80224e4 <HAL_DMA_Init+0x1e8>)
 802244e:	4293      	cmp	r3, r2
 8022450:	d00e      	beq.n	8022470 <HAL_DMA_Init+0x174>
 8022452:	687b      	ldr	r3, [r7, #4]
 8022454:	681b      	ldr	r3, [r3, #0]
 8022456:	4a24      	ldr	r2, [pc, #144]	; (80224e8 <HAL_DMA_Init+0x1ec>)
 8022458:	4293      	cmp	r3, r2
 802245a:	d009      	beq.n	8022470 <HAL_DMA_Init+0x174>
 802245c:	687b      	ldr	r3, [r7, #4]
 802245e:	681b      	ldr	r3, [r3, #0]
 8022460:	4a22      	ldr	r2, [pc, #136]	; (80224ec <HAL_DMA_Init+0x1f0>)
 8022462:	4293      	cmp	r3, r2
 8022464:	d004      	beq.n	8022470 <HAL_DMA_Init+0x174>
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	681b      	ldr	r3, [r3, #0]
 802246a:	4a21      	ldr	r2, [pc, #132]	; (80224f0 <HAL_DMA_Init+0x1f4>)
 802246c:	4293      	cmp	r3, r2
 802246e:	d108      	bne.n	8022482 <HAL_DMA_Init+0x186>
 8022470:	687b      	ldr	r3, [r7, #4]
 8022472:	681b      	ldr	r3, [r3, #0]
 8022474:	681a      	ldr	r2, [r3, #0]
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	681b      	ldr	r3, [r3, #0]
 802247a:	f022 0201 	bic.w	r2, r2, #1
 802247e:	601a      	str	r2, [r3, #0]
 8022480:	e007      	b.n	8022492 <HAL_DMA_Init+0x196>
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	681b      	ldr	r3, [r3, #0]
 8022486:	681a      	ldr	r2, [r3, #0]
 8022488:	687b      	ldr	r3, [r7, #4]
 802248a:	681b      	ldr	r3, [r3, #0]
 802248c:	f022 0201 	bic.w	r2, r2, #1
 8022490:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8022492:	e02f      	b.n	80224f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8022494:	f7ff fe22 	bl	80220dc <HAL_GetTick>
 8022498:	4602      	mov	r2, r0
 802249a:	693b      	ldr	r3, [r7, #16]
 802249c:	1ad3      	subs	r3, r2, r3
 802249e:	2b05      	cmp	r3, #5
 80224a0:	d928      	bls.n	80224f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80224a2:	687b      	ldr	r3, [r7, #4]
 80224a4:	2220      	movs	r2, #32
 80224a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80224a8:	687b      	ldr	r3, [r7, #4]
 80224aa:	2203      	movs	r2, #3
 80224ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80224b0:	2301      	movs	r3, #1
 80224b2:	e244      	b.n	802293e <HAL_DMA_Init+0x642>
 80224b4:	40020010 	.word	0x40020010
 80224b8:	40020028 	.word	0x40020028
 80224bc:	40020040 	.word	0x40020040
 80224c0:	40020058 	.word	0x40020058
 80224c4:	40020070 	.word	0x40020070
 80224c8:	40020088 	.word	0x40020088
 80224cc:	400200a0 	.word	0x400200a0
 80224d0:	400200b8 	.word	0x400200b8
 80224d4:	40020410 	.word	0x40020410
 80224d8:	40020428 	.word	0x40020428
 80224dc:	40020440 	.word	0x40020440
 80224e0:	40020458 	.word	0x40020458
 80224e4:	40020470 	.word	0x40020470
 80224e8:	40020488 	.word	0x40020488
 80224ec:	400204a0 	.word	0x400204a0
 80224f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	681b      	ldr	r3, [r3, #0]
 80224f8:	681b      	ldr	r3, [r3, #0]
 80224fa:	f003 0301 	and.w	r3, r3, #1
 80224fe:	2b00      	cmp	r3, #0
 8022500:	d1c8      	bne.n	8022494 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8022502:	687b      	ldr	r3, [r7, #4]
 8022504:	681b      	ldr	r3, [r3, #0]
 8022506:	681b      	ldr	r3, [r3, #0]
 8022508:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802250a:	697a      	ldr	r2, [r7, #20]
 802250c:	4b84      	ldr	r3, [pc, #528]	; (8022720 <HAL_DMA_Init+0x424>)
 802250e:	4013      	ands	r3, r2
 8022510:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022516:	687b      	ldr	r3, [r7, #4]
 8022518:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 802251a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	691b      	ldr	r3, [r3, #16]
 8022520:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022522:	687b      	ldr	r3, [r7, #4]
 8022524:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022526:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022528:	687b      	ldr	r3, [r7, #4]
 802252a:	699b      	ldr	r3, [r3, #24]
 802252c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802252e:	687b      	ldr	r3, [r7, #4]
 8022530:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022532:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8022534:	687b      	ldr	r3, [r7, #4]
 8022536:	6a1b      	ldr	r3, [r3, #32]
 8022538:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 802253a:	697a      	ldr	r2, [r7, #20]
 802253c:	4313      	orrs	r3, r2
 802253e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8022540:	687b      	ldr	r3, [r7, #4]
 8022542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022544:	2b04      	cmp	r3, #4
 8022546:	d107      	bne.n	8022558 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022550:	4313      	orrs	r3, r2
 8022552:	697a      	ldr	r2, [r7, #20]
 8022554:	4313      	orrs	r3, r2
 8022556:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8022558:	687b      	ldr	r3, [r7, #4]
 802255a:	685b      	ldr	r3, [r3, #4]
 802255c:	2b28      	cmp	r3, #40	; 0x28
 802255e:	d903      	bls.n	8022568 <HAL_DMA_Init+0x26c>
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	685b      	ldr	r3, [r3, #4]
 8022564:	2b2e      	cmp	r3, #46	; 0x2e
 8022566:	d91f      	bls.n	80225a8 <HAL_DMA_Init+0x2ac>
 8022568:	687b      	ldr	r3, [r7, #4]
 802256a:	685b      	ldr	r3, [r3, #4]
 802256c:	2b3e      	cmp	r3, #62	; 0x3e
 802256e:	d903      	bls.n	8022578 <HAL_DMA_Init+0x27c>
 8022570:	687b      	ldr	r3, [r7, #4]
 8022572:	685b      	ldr	r3, [r3, #4]
 8022574:	2b42      	cmp	r3, #66	; 0x42
 8022576:	d917      	bls.n	80225a8 <HAL_DMA_Init+0x2ac>
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	685b      	ldr	r3, [r3, #4]
 802257c:	2b46      	cmp	r3, #70	; 0x46
 802257e:	d903      	bls.n	8022588 <HAL_DMA_Init+0x28c>
 8022580:	687b      	ldr	r3, [r7, #4]
 8022582:	685b      	ldr	r3, [r3, #4]
 8022584:	2b48      	cmp	r3, #72	; 0x48
 8022586:	d90f      	bls.n	80225a8 <HAL_DMA_Init+0x2ac>
 8022588:	687b      	ldr	r3, [r7, #4]
 802258a:	685b      	ldr	r3, [r3, #4]
 802258c:	2b4e      	cmp	r3, #78	; 0x4e
 802258e:	d903      	bls.n	8022598 <HAL_DMA_Init+0x29c>
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	685b      	ldr	r3, [r3, #4]
 8022594:	2b52      	cmp	r3, #82	; 0x52
 8022596:	d907      	bls.n	80225a8 <HAL_DMA_Init+0x2ac>
 8022598:	687b      	ldr	r3, [r7, #4]
 802259a:	685b      	ldr	r3, [r3, #4]
 802259c:	2b73      	cmp	r3, #115	; 0x73
 802259e:	d905      	bls.n	80225ac <HAL_DMA_Init+0x2b0>
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	685b      	ldr	r3, [r3, #4]
 80225a4:	2b77      	cmp	r3, #119	; 0x77
 80225a6:	d801      	bhi.n	80225ac <HAL_DMA_Init+0x2b0>
 80225a8:	2301      	movs	r3, #1
 80225aa:	e000      	b.n	80225ae <HAL_DMA_Init+0x2b2>
 80225ac:	2300      	movs	r3, #0
 80225ae:	2b00      	cmp	r3, #0
 80225b0:	d003      	beq.n	80225ba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80225b2:	697b      	ldr	r3, [r7, #20]
 80225b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80225b8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80225ba:	687b      	ldr	r3, [r7, #4]
 80225bc:	681b      	ldr	r3, [r3, #0]
 80225be:	697a      	ldr	r2, [r7, #20]
 80225c0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80225c2:	687b      	ldr	r3, [r7, #4]
 80225c4:	681b      	ldr	r3, [r3, #0]
 80225c6:	695b      	ldr	r3, [r3, #20]
 80225c8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80225ca:	697b      	ldr	r3, [r7, #20]
 80225cc:	f023 0307 	bic.w	r3, r3, #7
 80225d0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80225d2:	687b      	ldr	r3, [r7, #4]
 80225d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225d6:	697a      	ldr	r2, [r7, #20]
 80225d8:	4313      	orrs	r3, r2
 80225da:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225e0:	2b04      	cmp	r3, #4
 80225e2:	d117      	bne.n	8022614 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80225e8:	697a      	ldr	r2, [r7, #20]
 80225ea:	4313      	orrs	r3, r2
 80225ec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80225ee:	687b      	ldr	r3, [r7, #4]
 80225f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80225f2:	2b00      	cmp	r3, #0
 80225f4:	d00e      	beq.n	8022614 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80225f6:	6878      	ldr	r0, [r7, #4]
 80225f8:	f002 fb30 	bl	8024c5c <DMA_CheckFifoParam>
 80225fc:	4603      	mov	r3, r0
 80225fe:	2b00      	cmp	r3, #0
 8022600:	d008      	beq.n	8022614 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	2240      	movs	r2, #64	; 0x40
 8022606:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8022608:	687b      	ldr	r3, [r7, #4]
 802260a:	2201      	movs	r2, #1
 802260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8022610:	2301      	movs	r3, #1
 8022612:	e194      	b.n	802293e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	681b      	ldr	r3, [r3, #0]
 8022618:	697a      	ldr	r2, [r7, #20]
 802261a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802261c:	6878      	ldr	r0, [r7, #4]
 802261e:	f002 fa6b 	bl	8024af8 <DMA_CalcBaseAndBitshift>
 8022622:	4603      	mov	r3, r0
 8022624:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8022626:	687b      	ldr	r3, [r7, #4]
 8022628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802262a:	f003 031f 	and.w	r3, r3, #31
 802262e:	223f      	movs	r2, #63	; 0x3f
 8022630:	409a      	lsls	r2, r3
 8022632:	68bb      	ldr	r3, [r7, #8]
 8022634:	609a      	str	r2, [r3, #8]
 8022636:	e0ca      	b.n	80227ce <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8022638:	687b      	ldr	r3, [r7, #4]
 802263a:	681b      	ldr	r3, [r3, #0]
 802263c:	4a39      	ldr	r2, [pc, #228]	; (8022724 <HAL_DMA_Init+0x428>)
 802263e:	4293      	cmp	r3, r2
 8022640:	d022      	beq.n	8022688 <HAL_DMA_Init+0x38c>
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	681b      	ldr	r3, [r3, #0]
 8022646:	4a38      	ldr	r2, [pc, #224]	; (8022728 <HAL_DMA_Init+0x42c>)
 8022648:	4293      	cmp	r3, r2
 802264a:	d01d      	beq.n	8022688 <HAL_DMA_Init+0x38c>
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	681b      	ldr	r3, [r3, #0]
 8022650:	4a36      	ldr	r2, [pc, #216]	; (802272c <HAL_DMA_Init+0x430>)
 8022652:	4293      	cmp	r3, r2
 8022654:	d018      	beq.n	8022688 <HAL_DMA_Init+0x38c>
 8022656:	687b      	ldr	r3, [r7, #4]
 8022658:	681b      	ldr	r3, [r3, #0]
 802265a:	4a35      	ldr	r2, [pc, #212]	; (8022730 <HAL_DMA_Init+0x434>)
 802265c:	4293      	cmp	r3, r2
 802265e:	d013      	beq.n	8022688 <HAL_DMA_Init+0x38c>
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	681b      	ldr	r3, [r3, #0]
 8022664:	4a33      	ldr	r2, [pc, #204]	; (8022734 <HAL_DMA_Init+0x438>)
 8022666:	4293      	cmp	r3, r2
 8022668:	d00e      	beq.n	8022688 <HAL_DMA_Init+0x38c>
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	681b      	ldr	r3, [r3, #0]
 802266e:	4a32      	ldr	r2, [pc, #200]	; (8022738 <HAL_DMA_Init+0x43c>)
 8022670:	4293      	cmp	r3, r2
 8022672:	d009      	beq.n	8022688 <HAL_DMA_Init+0x38c>
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	681b      	ldr	r3, [r3, #0]
 8022678:	4a30      	ldr	r2, [pc, #192]	; (802273c <HAL_DMA_Init+0x440>)
 802267a:	4293      	cmp	r3, r2
 802267c:	d004      	beq.n	8022688 <HAL_DMA_Init+0x38c>
 802267e:	687b      	ldr	r3, [r7, #4]
 8022680:	681b      	ldr	r3, [r3, #0]
 8022682:	4a2f      	ldr	r2, [pc, #188]	; (8022740 <HAL_DMA_Init+0x444>)
 8022684:	4293      	cmp	r3, r2
 8022686:	d101      	bne.n	802268c <HAL_DMA_Init+0x390>
 8022688:	2301      	movs	r3, #1
 802268a:	e000      	b.n	802268e <HAL_DMA_Init+0x392>
 802268c:	2300      	movs	r3, #0
 802268e:	2b00      	cmp	r3, #0
 8022690:	f000 8094 	beq.w	80227bc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	681b      	ldr	r3, [r3, #0]
 8022698:	4a22      	ldr	r2, [pc, #136]	; (8022724 <HAL_DMA_Init+0x428>)
 802269a:	4293      	cmp	r3, r2
 802269c:	d021      	beq.n	80226e2 <HAL_DMA_Init+0x3e6>
 802269e:	687b      	ldr	r3, [r7, #4]
 80226a0:	681b      	ldr	r3, [r3, #0]
 80226a2:	4a21      	ldr	r2, [pc, #132]	; (8022728 <HAL_DMA_Init+0x42c>)
 80226a4:	4293      	cmp	r3, r2
 80226a6:	d01c      	beq.n	80226e2 <HAL_DMA_Init+0x3e6>
 80226a8:	687b      	ldr	r3, [r7, #4]
 80226aa:	681b      	ldr	r3, [r3, #0]
 80226ac:	4a1f      	ldr	r2, [pc, #124]	; (802272c <HAL_DMA_Init+0x430>)
 80226ae:	4293      	cmp	r3, r2
 80226b0:	d017      	beq.n	80226e2 <HAL_DMA_Init+0x3e6>
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	681b      	ldr	r3, [r3, #0]
 80226b6:	4a1e      	ldr	r2, [pc, #120]	; (8022730 <HAL_DMA_Init+0x434>)
 80226b8:	4293      	cmp	r3, r2
 80226ba:	d012      	beq.n	80226e2 <HAL_DMA_Init+0x3e6>
 80226bc:	687b      	ldr	r3, [r7, #4]
 80226be:	681b      	ldr	r3, [r3, #0]
 80226c0:	4a1c      	ldr	r2, [pc, #112]	; (8022734 <HAL_DMA_Init+0x438>)
 80226c2:	4293      	cmp	r3, r2
 80226c4:	d00d      	beq.n	80226e2 <HAL_DMA_Init+0x3e6>
 80226c6:	687b      	ldr	r3, [r7, #4]
 80226c8:	681b      	ldr	r3, [r3, #0]
 80226ca:	4a1b      	ldr	r2, [pc, #108]	; (8022738 <HAL_DMA_Init+0x43c>)
 80226cc:	4293      	cmp	r3, r2
 80226ce:	d008      	beq.n	80226e2 <HAL_DMA_Init+0x3e6>
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	681b      	ldr	r3, [r3, #0]
 80226d4:	4a19      	ldr	r2, [pc, #100]	; (802273c <HAL_DMA_Init+0x440>)
 80226d6:	4293      	cmp	r3, r2
 80226d8:	d003      	beq.n	80226e2 <HAL_DMA_Init+0x3e6>
 80226da:	687b      	ldr	r3, [r7, #4]
 80226dc:	681b      	ldr	r3, [r3, #0]
 80226de:	4a18      	ldr	r2, [pc, #96]	; (8022740 <HAL_DMA_Init+0x444>)
 80226e0:	4293      	cmp	r3, r2
 80226e2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	2202      	movs	r2, #2
 80226e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80226ec:	687b      	ldr	r3, [r7, #4]
 80226ee:	2200      	movs	r2, #0
 80226f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	681b      	ldr	r3, [r3, #0]
 80226f8:	681b      	ldr	r3, [r3, #0]
 80226fa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80226fc:	697a      	ldr	r2, [r7, #20]
 80226fe:	4b11      	ldr	r3, [pc, #68]	; (8022744 <HAL_DMA_Init+0x448>)
 8022700:	4013      	ands	r3, r2
 8022702:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8022704:	687b      	ldr	r3, [r7, #4]
 8022706:	689b      	ldr	r3, [r3, #8]
 8022708:	2b40      	cmp	r3, #64	; 0x40
 802270a:	d01d      	beq.n	8022748 <HAL_DMA_Init+0x44c>
 802270c:	687b      	ldr	r3, [r7, #4]
 802270e:	689b      	ldr	r3, [r3, #8]
 8022710:	2b80      	cmp	r3, #128	; 0x80
 8022712:	d102      	bne.n	802271a <HAL_DMA_Init+0x41e>
 8022714:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8022718:	e017      	b.n	802274a <HAL_DMA_Init+0x44e>
 802271a:	2300      	movs	r3, #0
 802271c:	e015      	b.n	802274a <HAL_DMA_Init+0x44e>
 802271e:	bf00      	nop
 8022720:	fe10803f 	.word	0xfe10803f
 8022724:	58025408 	.word	0x58025408
 8022728:	5802541c 	.word	0x5802541c
 802272c:	58025430 	.word	0x58025430
 8022730:	58025444 	.word	0x58025444
 8022734:	58025458 	.word	0x58025458
 8022738:	5802546c 	.word	0x5802546c
 802273c:	58025480 	.word	0x58025480
 8022740:	58025494 	.word	0x58025494
 8022744:	fffe000f 	.word	0xfffe000f
 8022748:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802274a:	687a      	ldr	r2, [r7, #4]
 802274c:	68d2      	ldr	r2, [r2, #12]
 802274e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8022750:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8022752:	687b      	ldr	r3, [r7, #4]
 8022754:	691b      	ldr	r3, [r3, #16]
 8022756:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8022758:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802275a:	687b      	ldr	r3, [r7, #4]
 802275c:	695b      	ldr	r3, [r3, #20]
 802275e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8022760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8022762:	687b      	ldr	r3, [r7, #4]
 8022764:	699b      	ldr	r3, [r3, #24]
 8022766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8022768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	69db      	ldr	r3, [r3, #28]
 802276e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8022770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8022772:	687b      	ldr	r3, [r7, #4]
 8022774:	6a1b      	ldr	r3, [r3, #32]
 8022776:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8022778:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802277a:	697a      	ldr	r2, [r7, #20]
 802277c:	4313      	orrs	r3, r2
 802277e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8022780:	687b      	ldr	r3, [r7, #4]
 8022782:	681b      	ldr	r3, [r3, #0]
 8022784:	697a      	ldr	r2, [r7, #20]
 8022786:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8022788:	687b      	ldr	r3, [r7, #4]
 802278a:	681b      	ldr	r3, [r3, #0]
 802278c:	461a      	mov	r2, r3
 802278e:	4b6e      	ldr	r3, [pc, #440]	; (8022948 <HAL_DMA_Init+0x64c>)
 8022790:	4413      	add	r3, r2
 8022792:	4a6e      	ldr	r2, [pc, #440]	; (802294c <HAL_DMA_Init+0x650>)
 8022794:	fba2 2303 	umull	r2, r3, r2, r3
 8022798:	091b      	lsrs	r3, r3, #4
 802279a:	009a      	lsls	r2, r3, #2
 802279c:	687b      	ldr	r3, [r7, #4]
 802279e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80227a0:	6878      	ldr	r0, [r7, #4]
 80227a2:	f002 f9a9 	bl	8024af8 <DMA_CalcBaseAndBitshift>
 80227a6:	4603      	mov	r3, r0
 80227a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80227ae:	f003 031f 	and.w	r3, r3, #31
 80227b2:	2201      	movs	r2, #1
 80227b4:	409a      	lsls	r2, r3
 80227b6:	68fb      	ldr	r3, [r7, #12]
 80227b8:	605a      	str	r2, [r3, #4]
 80227ba:	e008      	b.n	80227ce <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	2240      	movs	r2, #64	; 0x40
 80227c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80227c2:	687b      	ldr	r3, [r7, #4]
 80227c4:	2203      	movs	r2, #3
 80227c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80227ca:	2301      	movs	r3, #1
 80227cc:	e0b7      	b.n	802293e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80227ce:	687b      	ldr	r3, [r7, #4]
 80227d0:	681b      	ldr	r3, [r3, #0]
 80227d2:	4a5f      	ldr	r2, [pc, #380]	; (8022950 <HAL_DMA_Init+0x654>)
 80227d4:	4293      	cmp	r3, r2
 80227d6:	d072      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 80227d8:	687b      	ldr	r3, [r7, #4]
 80227da:	681b      	ldr	r3, [r3, #0]
 80227dc:	4a5d      	ldr	r2, [pc, #372]	; (8022954 <HAL_DMA_Init+0x658>)
 80227de:	4293      	cmp	r3, r2
 80227e0:	d06d      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 80227e2:	687b      	ldr	r3, [r7, #4]
 80227e4:	681b      	ldr	r3, [r3, #0]
 80227e6:	4a5c      	ldr	r2, [pc, #368]	; (8022958 <HAL_DMA_Init+0x65c>)
 80227e8:	4293      	cmp	r3, r2
 80227ea:	d068      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	681b      	ldr	r3, [r3, #0]
 80227f0:	4a5a      	ldr	r2, [pc, #360]	; (802295c <HAL_DMA_Init+0x660>)
 80227f2:	4293      	cmp	r3, r2
 80227f4:	d063      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 80227f6:	687b      	ldr	r3, [r7, #4]
 80227f8:	681b      	ldr	r3, [r3, #0]
 80227fa:	4a59      	ldr	r2, [pc, #356]	; (8022960 <HAL_DMA_Init+0x664>)
 80227fc:	4293      	cmp	r3, r2
 80227fe:	d05e      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 8022800:	687b      	ldr	r3, [r7, #4]
 8022802:	681b      	ldr	r3, [r3, #0]
 8022804:	4a57      	ldr	r2, [pc, #348]	; (8022964 <HAL_DMA_Init+0x668>)
 8022806:	4293      	cmp	r3, r2
 8022808:	d059      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 802280a:	687b      	ldr	r3, [r7, #4]
 802280c:	681b      	ldr	r3, [r3, #0]
 802280e:	4a56      	ldr	r2, [pc, #344]	; (8022968 <HAL_DMA_Init+0x66c>)
 8022810:	4293      	cmp	r3, r2
 8022812:	d054      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 8022814:	687b      	ldr	r3, [r7, #4]
 8022816:	681b      	ldr	r3, [r3, #0]
 8022818:	4a54      	ldr	r2, [pc, #336]	; (802296c <HAL_DMA_Init+0x670>)
 802281a:	4293      	cmp	r3, r2
 802281c:	d04f      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 802281e:	687b      	ldr	r3, [r7, #4]
 8022820:	681b      	ldr	r3, [r3, #0]
 8022822:	4a53      	ldr	r2, [pc, #332]	; (8022970 <HAL_DMA_Init+0x674>)
 8022824:	4293      	cmp	r3, r2
 8022826:	d04a      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	681b      	ldr	r3, [r3, #0]
 802282c:	4a51      	ldr	r2, [pc, #324]	; (8022974 <HAL_DMA_Init+0x678>)
 802282e:	4293      	cmp	r3, r2
 8022830:	d045      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 8022832:	687b      	ldr	r3, [r7, #4]
 8022834:	681b      	ldr	r3, [r3, #0]
 8022836:	4a50      	ldr	r2, [pc, #320]	; (8022978 <HAL_DMA_Init+0x67c>)
 8022838:	4293      	cmp	r3, r2
 802283a:	d040      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 802283c:	687b      	ldr	r3, [r7, #4]
 802283e:	681b      	ldr	r3, [r3, #0]
 8022840:	4a4e      	ldr	r2, [pc, #312]	; (802297c <HAL_DMA_Init+0x680>)
 8022842:	4293      	cmp	r3, r2
 8022844:	d03b      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	681b      	ldr	r3, [r3, #0]
 802284a:	4a4d      	ldr	r2, [pc, #308]	; (8022980 <HAL_DMA_Init+0x684>)
 802284c:	4293      	cmp	r3, r2
 802284e:	d036      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	681b      	ldr	r3, [r3, #0]
 8022854:	4a4b      	ldr	r2, [pc, #300]	; (8022984 <HAL_DMA_Init+0x688>)
 8022856:	4293      	cmp	r3, r2
 8022858:	d031      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 802285a:	687b      	ldr	r3, [r7, #4]
 802285c:	681b      	ldr	r3, [r3, #0]
 802285e:	4a4a      	ldr	r2, [pc, #296]	; (8022988 <HAL_DMA_Init+0x68c>)
 8022860:	4293      	cmp	r3, r2
 8022862:	d02c      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 8022864:	687b      	ldr	r3, [r7, #4]
 8022866:	681b      	ldr	r3, [r3, #0]
 8022868:	4a48      	ldr	r2, [pc, #288]	; (802298c <HAL_DMA_Init+0x690>)
 802286a:	4293      	cmp	r3, r2
 802286c:	d027      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 802286e:	687b      	ldr	r3, [r7, #4]
 8022870:	681b      	ldr	r3, [r3, #0]
 8022872:	4a47      	ldr	r2, [pc, #284]	; (8022990 <HAL_DMA_Init+0x694>)
 8022874:	4293      	cmp	r3, r2
 8022876:	d022      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 8022878:	687b      	ldr	r3, [r7, #4]
 802287a:	681b      	ldr	r3, [r3, #0]
 802287c:	4a45      	ldr	r2, [pc, #276]	; (8022994 <HAL_DMA_Init+0x698>)
 802287e:	4293      	cmp	r3, r2
 8022880:	d01d      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 8022882:	687b      	ldr	r3, [r7, #4]
 8022884:	681b      	ldr	r3, [r3, #0]
 8022886:	4a44      	ldr	r2, [pc, #272]	; (8022998 <HAL_DMA_Init+0x69c>)
 8022888:	4293      	cmp	r3, r2
 802288a:	d018      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 802288c:	687b      	ldr	r3, [r7, #4]
 802288e:	681b      	ldr	r3, [r3, #0]
 8022890:	4a42      	ldr	r2, [pc, #264]	; (802299c <HAL_DMA_Init+0x6a0>)
 8022892:	4293      	cmp	r3, r2
 8022894:	d013      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 8022896:	687b      	ldr	r3, [r7, #4]
 8022898:	681b      	ldr	r3, [r3, #0]
 802289a:	4a41      	ldr	r2, [pc, #260]	; (80229a0 <HAL_DMA_Init+0x6a4>)
 802289c:	4293      	cmp	r3, r2
 802289e:	d00e      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	681b      	ldr	r3, [r3, #0]
 80228a4:	4a3f      	ldr	r2, [pc, #252]	; (80229a4 <HAL_DMA_Init+0x6a8>)
 80228a6:	4293      	cmp	r3, r2
 80228a8:	d009      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 80228aa:	687b      	ldr	r3, [r7, #4]
 80228ac:	681b      	ldr	r3, [r3, #0]
 80228ae:	4a3e      	ldr	r2, [pc, #248]	; (80229a8 <HAL_DMA_Init+0x6ac>)
 80228b0:	4293      	cmp	r3, r2
 80228b2:	d004      	beq.n	80228be <HAL_DMA_Init+0x5c2>
 80228b4:	687b      	ldr	r3, [r7, #4]
 80228b6:	681b      	ldr	r3, [r3, #0]
 80228b8:	4a3c      	ldr	r2, [pc, #240]	; (80229ac <HAL_DMA_Init+0x6b0>)
 80228ba:	4293      	cmp	r3, r2
 80228bc:	d101      	bne.n	80228c2 <HAL_DMA_Init+0x5c6>
 80228be:	2301      	movs	r3, #1
 80228c0:	e000      	b.n	80228c4 <HAL_DMA_Init+0x5c8>
 80228c2:	2300      	movs	r3, #0
 80228c4:	2b00      	cmp	r3, #0
 80228c6:	d032      	beq.n	802292e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80228c8:	6878      	ldr	r0, [r7, #4]
 80228ca:	f002 fa43 	bl	8024d54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80228ce:	687b      	ldr	r3, [r7, #4]
 80228d0:	689b      	ldr	r3, [r3, #8]
 80228d2:	2b80      	cmp	r3, #128	; 0x80
 80228d4:	d102      	bne.n	80228dc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80228d6:	687b      	ldr	r3, [r7, #4]
 80228d8:	2200      	movs	r2, #0
 80228da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80228dc:	687b      	ldr	r3, [r7, #4]
 80228de:	685a      	ldr	r2, [r3, #4]
 80228e0:	687b      	ldr	r3, [r7, #4]
 80228e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80228e4:	b2d2      	uxtb	r2, r2
 80228e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80228e8:	687b      	ldr	r3, [r7, #4]
 80228ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80228ec:	687a      	ldr	r2, [r7, #4]
 80228ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80228f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80228f2:	687b      	ldr	r3, [r7, #4]
 80228f4:	685b      	ldr	r3, [r3, #4]
 80228f6:	2b00      	cmp	r3, #0
 80228f8:	d010      	beq.n	802291c <HAL_DMA_Init+0x620>
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	685b      	ldr	r3, [r3, #4]
 80228fe:	2b08      	cmp	r3, #8
 8022900:	d80c      	bhi.n	802291c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8022902:	6878      	ldr	r0, [r7, #4]
 8022904:	f002 fac0 	bl	8024e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8022908:	687b      	ldr	r3, [r7, #4]
 802290a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802290c:	2200      	movs	r2, #0
 802290e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022914:	687a      	ldr	r2, [r7, #4]
 8022916:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8022918:	605a      	str	r2, [r3, #4]
 802291a:	e008      	b.n	802292e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 802291c:	687b      	ldr	r3, [r7, #4]
 802291e:	2200      	movs	r2, #0
 8022920:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8022922:	687b      	ldr	r3, [r7, #4]
 8022924:	2200      	movs	r2, #0
 8022926:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8022928:	687b      	ldr	r3, [r7, #4]
 802292a:	2200      	movs	r2, #0
 802292c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802292e:	687b      	ldr	r3, [r7, #4]
 8022930:	2200      	movs	r2, #0
 8022932:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8022934:	687b      	ldr	r3, [r7, #4]
 8022936:	2201      	movs	r2, #1
 8022938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802293c:	2300      	movs	r3, #0
}
 802293e:	4618      	mov	r0, r3
 8022940:	3718      	adds	r7, #24
 8022942:	46bd      	mov	sp, r7
 8022944:	bd80      	pop	{r7, pc}
 8022946:	bf00      	nop
 8022948:	a7fdabf8 	.word	0xa7fdabf8
 802294c:	cccccccd 	.word	0xcccccccd
 8022950:	40020010 	.word	0x40020010
 8022954:	40020028 	.word	0x40020028
 8022958:	40020040 	.word	0x40020040
 802295c:	40020058 	.word	0x40020058
 8022960:	40020070 	.word	0x40020070
 8022964:	40020088 	.word	0x40020088
 8022968:	400200a0 	.word	0x400200a0
 802296c:	400200b8 	.word	0x400200b8
 8022970:	40020410 	.word	0x40020410
 8022974:	40020428 	.word	0x40020428
 8022978:	40020440 	.word	0x40020440
 802297c:	40020458 	.word	0x40020458
 8022980:	40020470 	.word	0x40020470
 8022984:	40020488 	.word	0x40020488
 8022988:	400204a0 	.word	0x400204a0
 802298c:	400204b8 	.word	0x400204b8
 8022990:	58025408 	.word	0x58025408
 8022994:	5802541c 	.word	0x5802541c
 8022998:	58025430 	.word	0x58025430
 802299c:	58025444 	.word	0x58025444
 80229a0:	58025458 	.word	0x58025458
 80229a4:	5802546c 	.word	0x5802546c
 80229a8:	58025480 	.word	0x58025480
 80229ac:	58025494 	.word	0x58025494

080229b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80229b0:	b580      	push	{r7, lr}
 80229b2:	b086      	sub	sp, #24
 80229b4:	af00      	add	r7, sp, #0
 80229b6:	60f8      	str	r0, [r7, #12]
 80229b8:	60b9      	str	r1, [r7, #8]
 80229ba:	607a      	str	r2, [r7, #4]
 80229bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80229be:	2300      	movs	r3, #0
 80229c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80229c2:	68fb      	ldr	r3, [r7, #12]
 80229c4:	2b00      	cmp	r3, #0
 80229c6:	d101      	bne.n	80229cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80229c8:	2301      	movs	r3, #1
 80229ca:	e226      	b.n	8022e1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80229cc:	68fb      	ldr	r3, [r7, #12]
 80229ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80229d2:	2b01      	cmp	r3, #1
 80229d4:	d101      	bne.n	80229da <HAL_DMA_Start_IT+0x2a>
 80229d6:	2302      	movs	r3, #2
 80229d8:	e21f      	b.n	8022e1a <HAL_DMA_Start_IT+0x46a>
 80229da:	68fb      	ldr	r3, [r7, #12]
 80229dc:	2201      	movs	r2, #1
 80229de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80229e2:	68fb      	ldr	r3, [r7, #12]
 80229e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80229e8:	b2db      	uxtb	r3, r3
 80229ea:	2b01      	cmp	r3, #1
 80229ec:	f040 820a 	bne.w	8022e04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80229f0:	68fb      	ldr	r3, [r7, #12]
 80229f2:	2202      	movs	r2, #2
 80229f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80229f8:	68fb      	ldr	r3, [r7, #12]
 80229fa:	2200      	movs	r2, #0
 80229fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80229fe:	68fb      	ldr	r3, [r7, #12]
 8022a00:	681b      	ldr	r3, [r3, #0]
 8022a02:	4a68      	ldr	r2, [pc, #416]	; (8022ba4 <HAL_DMA_Start_IT+0x1f4>)
 8022a04:	4293      	cmp	r3, r2
 8022a06:	d04a      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a08:	68fb      	ldr	r3, [r7, #12]
 8022a0a:	681b      	ldr	r3, [r3, #0]
 8022a0c:	4a66      	ldr	r2, [pc, #408]	; (8022ba8 <HAL_DMA_Start_IT+0x1f8>)
 8022a0e:	4293      	cmp	r3, r2
 8022a10:	d045      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a12:	68fb      	ldr	r3, [r7, #12]
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	4a65      	ldr	r2, [pc, #404]	; (8022bac <HAL_DMA_Start_IT+0x1fc>)
 8022a18:	4293      	cmp	r3, r2
 8022a1a:	d040      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a1c:	68fb      	ldr	r3, [r7, #12]
 8022a1e:	681b      	ldr	r3, [r3, #0]
 8022a20:	4a63      	ldr	r2, [pc, #396]	; (8022bb0 <HAL_DMA_Start_IT+0x200>)
 8022a22:	4293      	cmp	r3, r2
 8022a24:	d03b      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a26:	68fb      	ldr	r3, [r7, #12]
 8022a28:	681b      	ldr	r3, [r3, #0]
 8022a2a:	4a62      	ldr	r2, [pc, #392]	; (8022bb4 <HAL_DMA_Start_IT+0x204>)
 8022a2c:	4293      	cmp	r3, r2
 8022a2e:	d036      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a30:	68fb      	ldr	r3, [r7, #12]
 8022a32:	681b      	ldr	r3, [r3, #0]
 8022a34:	4a60      	ldr	r2, [pc, #384]	; (8022bb8 <HAL_DMA_Start_IT+0x208>)
 8022a36:	4293      	cmp	r3, r2
 8022a38:	d031      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a3a:	68fb      	ldr	r3, [r7, #12]
 8022a3c:	681b      	ldr	r3, [r3, #0]
 8022a3e:	4a5f      	ldr	r2, [pc, #380]	; (8022bbc <HAL_DMA_Start_IT+0x20c>)
 8022a40:	4293      	cmp	r3, r2
 8022a42:	d02c      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a44:	68fb      	ldr	r3, [r7, #12]
 8022a46:	681b      	ldr	r3, [r3, #0]
 8022a48:	4a5d      	ldr	r2, [pc, #372]	; (8022bc0 <HAL_DMA_Start_IT+0x210>)
 8022a4a:	4293      	cmp	r3, r2
 8022a4c:	d027      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a4e:	68fb      	ldr	r3, [r7, #12]
 8022a50:	681b      	ldr	r3, [r3, #0]
 8022a52:	4a5c      	ldr	r2, [pc, #368]	; (8022bc4 <HAL_DMA_Start_IT+0x214>)
 8022a54:	4293      	cmp	r3, r2
 8022a56:	d022      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a58:	68fb      	ldr	r3, [r7, #12]
 8022a5a:	681b      	ldr	r3, [r3, #0]
 8022a5c:	4a5a      	ldr	r2, [pc, #360]	; (8022bc8 <HAL_DMA_Start_IT+0x218>)
 8022a5e:	4293      	cmp	r3, r2
 8022a60:	d01d      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a62:	68fb      	ldr	r3, [r7, #12]
 8022a64:	681b      	ldr	r3, [r3, #0]
 8022a66:	4a59      	ldr	r2, [pc, #356]	; (8022bcc <HAL_DMA_Start_IT+0x21c>)
 8022a68:	4293      	cmp	r3, r2
 8022a6a:	d018      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a6c:	68fb      	ldr	r3, [r7, #12]
 8022a6e:	681b      	ldr	r3, [r3, #0]
 8022a70:	4a57      	ldr	r2, [pc, #348]	; (8022bd0 <HAL_DMA_Start_IT+0x220>)
 8022a72:	4293      	cmp	r3, r2
 8022a74:	d013      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a76:	68fb      	ldr	r3, [r7, #12]
 8022a78:	681b      	ldr	r3, [r3, #0]
 8022a7a:	4a56      	ldr	r2, [pc, #344]	; (8022bd4 <HAL_DMA_Start_IT+0x224>)
 8022a7c:	4293      	cmp	r3, r2
 8022a7e:	d00e      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a80:	68fb      	ldr	r3, [r7, #12]
 8022a82:	681b      	ldr	r3, [r3, #0]
 8022a84:	4a54      	ldr	r2, [pc, #336]	; (8022bd8 <HAL_DMA_Start_IT+0x228>)
 8022a86:	4293      	cmp	r3, r2
 8022a88:	d009      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a8a:	68fb      	ldr	r3, [r7, #12]
 8022a8c:	681b      	ldr	r3, [r3, #0]
 8022a8e:	4a53      	ldr	r2, [pc, #332]	; (8022bdc <HAL_DMA_Start_IT+0x22c>)
 8022a90:	4293      	cmp	r3, r2
 8022a92:	d004      	beq.n	8022a9e <HAL_DMA_Start_IT+0xee>
 8022a94:	68fb      	ldr	r3, [r7, #12]
 8022a96:	681b      	ldr	r3, [r3, #0]
 8022a98:	4a51      	ldr	r2, [pc, #324]	; (8022be0 <HAL_DMA_Start_IT+0x230>)
 8022a9a:	4293      	cmp	r3, r2
 8022a9c:	d108      	bne.n	8022ab0 <HAL_DMA_Start_IT+0x100>
 8022a9e:	68fb      	ldr	r3, [r7, #12]
 8022aa0:	681b      	ldr	r3, [r3, #0]
 8022aa2:	681a      	ldr	r2, [r3, #0]
 8022aa4:	68fb      	ldr	r3, [r7, #12]
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	f022 0201 	bic.w	r2, r2, #1
 8022aac:	601a      	str	r2, [r3, #0]
 8022aae:	e007      	b.n	8022ac0 <HAL_DMA_Start_IT+0x110>
 8022ab0:	68fb      	ldr	r3, [r7, #12]
 8022ab2:	681b      	ldr	r3, [r3, #0]
 8022ab4:	681a      	ldr	r2, [r3, #0]
 8022ab6:	68fb      	ldr	r3, [r7, #12]
 8022ab8:	681b      	ldr	r3, [r3, #0]
 8022aba:	f022 0201 	bic.w	r2, r2, #1
 8022abe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8022ac0:	683b      	ldr	r3, [r7, #0]
 8022ac2:	687a      	ldr	r2, [r7, #4]
 8022ac4:	68b9      	ldr	r1, [r7, #8]
 8022ac6:	68f8      	ldr	r0, [r7, #12]
 8022ac8:	f001 fe6a 	bl	80247a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8022acc:	68fb      	ldr	r3, [r7, #12]
 8022ace:	681b      	ldr	r3, [r3, #0]
 8022ad0:	4a34      	ldr	r2, [pc, #208]	; (8022ba4 <HAL_DMA_Start_IT+0x1f4>)
 8022ad2:	4293      	cmp	r3, r2
 8022ad4:	d04a      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022ad6:	68fb      	ldr	r3, [r7, #12]
 8022ad8:	681b      	ldr	r3, [r3, #0]
 8022ada:	4a33      	ldr	r2, [pc, #204]	; (8022ba8 <HAL_DMA_Start_IT+0x1f8>)
 8022adc:	4293      	cmp	r3, r2
 8022ade:	d045      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022ae0:	68fb      	ldr	r3, [r7, #12]
 8022ae2:	681b      	ldr	r3, [r3, #0]
 8022ae4:	4a31      	ldr	r2, [pc, #196]	; (8022bac <HAL_DMA_Start_IT+0x1fc>)
 8022ae6:	4293      	cmp	r3, r2
 8022ae8:	d040      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022aea:	68fb      	ldr	r3, [r7, #12]
 8022aec:	681b      	ldr	r3, [r3, #0]
 8022aee:	4a30      	ldr	r2, [pc, #192]	; (8022bb0 <HAL_DMA_Start_IT+0x200>)
 8022af0:	4293      	cmp	r3, r2
 8022af2:	d03b      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022af4:	68fb      	ldr	r3, [r7, #12]
 8022af6:	681b      	ldr	r3, [r3, #0]
 8022af8:	4a2e      	ldr	r2, [pc, #184]	; (8022bb4 <HAL_DMA_Start_IT+0x204>)
 8022afa:	4293      	cmp	r3, r2
 8022afc:	d036      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022afe:	68fb      	ldr	r3, [r7, #12]
 8022b00:	681b      	ldr	r3, [r3, #0]
 8022b02:	4a2d      	ldr	r2, [pc, #180]	; (8022bb8 <HAL_DMA_Start_IT+0x208>)
 8022b04:	4293      	cmp	r3, r2
 8022b06:	d031      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022b08:	68fb      	ldr	r3, [r7, #12]
 8022b0a:	681b      	ldr	r3, [r3, #0]
 8022b0c:	4a2b      	ldr	r2, [pc, #172]	; (8022bbc <HAL_DMA_Start_IT+0x20c>)
 8022b0e:	4293      	cmp	r3, r2
 8022b10:	d02c      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022b12:	68fb      	ldr	r3, [r7, #12]
 8022b14:	681b      	ldr	r3, [r3, #0]
 8022b16:	4a2a      	ldr	r2, [pc, #168]	; (8022bc0 <HAL_DMA_Start_IT+0x210>)
 8022b18:	4293      	cmp	r3, r2
 8022b1a:	d027      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022b1c:	68fb      	ldr	r3, [r7, #12]
 8022b1e:	681b      	ldr	r3, [r3, #0]
 8022b20:	4a28      	ldr	r2, [pc, #160]	; (8022bc4 <HAL_DMA_Start_IT+0x214>)
 8022b22:	4293      	cmp	r3, r2
 8022b24:	d022      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022b26:	68fb      	ldr	r3, [r7, #12]
 8022b28:	681b      	ldr	r3, [r3, #0]
 8022b2a:	4a27      	ldr	r2, [pc, #156]	; (8022bc8 <HAL_DMA_Start_IT+0x218>)
 8022b2c:	4293      	cmp	r3, r2
 8022b2e:	d01d      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022b30:	68fb      	ldr	r3, [r7, #12]
 8022b32:	681b      	ldr	r3, [r3, #0]
 8022b34:	4a25      	ldr	r2, [pc, #148]	; (8022bcc <HAL_DMA_Start_IT+0x21c>)
 8022b36:	4293      	cmp	r3, r2
 8022b38:	d018      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022b3a:	68fb      	ldr	r3, [r7, #12]
 8022b3c:	681b      	ldr	r3, [r3, #0]
 8022b3e:	4a24      	ldr	r2, [pc, #144]	; (8022bd0 <HAL_DMA_Start_IT+0x220>)
 8022b40:	4293      	cmp	r3, r2
 8022b42:	d013      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022b44:	68fb      	ldr	r3, [r7, #12]
 8022b46:	681b      	ldr	r3, [r3, #0]
 8022b48:	4a22      	ldr	r2, [pc, #136]	; (8022bd4 <HAL_DMA_Start_IT+0x224>)
 8022b4a:	4293      	cmp	r3, r2
 8022b4c:	d00e      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022b4e:	68fb      	ldr	r3, [r7, #12]
 8022b50:	681b      	ldr	r3, [r3, #0]
 8022b52:	4a21      	ldr	r2, [pc, #132]	; (8022bd8 <HAL_DMA_Start_IT+0x228>)
 8022b54:	4293      	cmp	r3, r2
 8022b56:	d009      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022b58:	68fb      	ldr	r3, [r7, #12]
 8022b5a:	681b      	ldr	r3, [r3, #0]
 8022b5c:	4a1f      	ldr	r2, [pc, #124]	; (8022bdc <HAL_DMA_Start_IT+0x22c>)
 8022b5e:	4293      	cmp	r3, r2
 8022b60:	d004      	beq.n	8022b6c <HAL_DMA_Start_IT+0x1bc>
 8022b62:	68fb      	ldr	r3, [r7, #12]
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	4a1e      	ldr	r2, [pc, #120]	; (8022be0 <HAL_DMA_Start_IT+0x230>)
 8022b68:	4293      	cmp	r3, r2
 8022b6a:	d101      	bne.n	8022b70 <HAL_DMA_Start_IT+0x1c0>
 8022b6c:	2301      	movs	r3, #1
 8022b6e:	e000      	b.n	8022b72 <HAL_DMA_Start_IT+0x1c2>
 8022b70:	2300      	movs	r3, #0
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	d036      	beq.n	8022be4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8022b76:	68fb      	ldr	r3, [r7, #12]
 8022b78:	681b      	ldr	r3, [r3, #0]
 8022b7a:	681b      	ldr	r3, [r3, #0]
 8022b7c:	f023 021e 	bic.w	r2, r3, #30
 8022b80:	68fb      	ldr	r3, [r7, #12]
 8022b82:	681b      	ldr	r3, [r3, #0]
 8022b84:	f042 0216 	orr.w	r2, r2, #22
 8022b88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8022b8a:	68fb      	ldr	r3, [r7, #12]
 8022b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b8e:	2b00      	cmp	r3, #0
 8022b90:	d03e      	beq.n	8022c10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8022b92:	68fb      	ldr	r3, [r7, #12]
 8022b94:	681b      	ldr	r3, [r3, #0]
 8022b96:	681a      	ldr	r2, [r3, #0]
 8022b98:	68fb      	ldr	r3, [r7, #12]
 8022b9a:	681b      	ldr	r3, [r3, #0]
 8022b9c:	f042 0208 	orr.w	r2, r2, #8
 8022ba0:	601a      	str	r2, [r3, #0]
 8022ba2:	e035      	b.n	8022c10 <HAL_DMA_Start_IT+0x260>
 8022ba4:	40020010 	.word	0x40020010
 8022ba8:	40020028 	.word	0x40020028
 8022bac:	40020040 	.word	0x40020040
 8022bb0:	40020058 	.word	0x40020058
 8022bb4:	40020070 	.word	0x40020070
 8022bb8:	40020088 	.word	0x40020088
 8022bbc:	400200a0 	.word	0x400200a0
 8022bc0:	400200b8 	.word	0x400200b8
 8022bc4:	40020410 	.word	0x40020410
 8022bc8:	40020428 	.word	0x40020428
 8022bcc:	40020440 	.word	0x40020440
 8022bd0:	40020458 	.word	0x40020458
 8022bd4:	40020470 	.word	0x40020470
 8022bd8:	40020488 	.word	0x40020488
 8022bdc:	400204a0 	.word	0x400204a0
 8022be0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8022be4:	68fb      	ldr	r3, [r7, #12]
 8022be6:	681b      	ldr	r3, [r3, #0]
 8022be8:	681b      	ldr	r3, [r3, #0]
 8022bea:	f023 020e 	bic.w	r2, r3, #14
 8022bee:	68fb      	ldr	r3, [r7, #12]
 8022bf0:	681b      	ldr	r3, [r3, #0]
 8022bf2:	f042 020a 	orr.w	r2, r2, #10
 8022bf6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8022bf8:	68fb      	ldr	r3, [r7, #12]
 8022bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022bfc:	2b00      	cmp	r3, #0
 8022bfe:	d007      	beq.n	8022c10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8022c00:	68fb      	ldr	r3, [r7, #12]
 8022c02:	681b      	ldr	r3, [r3, #0]
 8022c04:	681a      	ldr	r2, [r3, #0]
 8022c06:	68fb      	ldr	r3, [r7, #12]
 8022c08:	681b      	ldr	r3, [r3, #0]
 8022c0a:	f042 0204 	orr.w	r2, r2, #4
 8022c0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8022c10:	68fb      	ldr	r3, [r7, #12]
 8022c12:	681b      	ldr	r3, [r3, #0]
 8022c14:	4a83      	ldr	r2, [pc, #524]	; (8022e24 <HAL_DMA_Start_IT+0x474>)
 8022c16:	4293      	cmp	r3, r2
 8022c18:	d072      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c1a:	68fb      	ldr	r3, [r7, #12]
 8022c1c:	681b      	ldr	r3, [r3, #0]
 8022c1e:	4a82      	ldr	r2, [pc, #520]	; (8022e28 <HAL_DMA_Start_IT+0x478>)
 8022c20:	4293      	cmp	r3, r2
 8022c22:	d06d      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c24:	68fb      	ldr	r3, [r7, #12]
 8022c26:	681b      	ldr	r3, [r3, #0]
 8022c28:	4a80      	ldr	r2, [pc, #512]	; (8022e2c <HAL_DMA_Start_IT+0x47c>)
 8022c2a:	4293      	cmp	r3, r2
 8022c2c:	d068      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c2e:	68fb      	ldr	r3, [r7, #12]
 8022c30:	681b      	ldr	r3, [r3, #0]
 8022c32:	4a7f      	ldr	r2, [pc, #508]	; (8022e30 <HAL_DMA_Start_IT+0x480>)
 8022c34:	4293      	cmp	r3, r2
 8022c36:	d063      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c38:	68fb      	ldr	r3, [r7, #12]
 8022c3a:	681b      	ldr	r3, [r3, #0]
 8022c3c:	4a7d      	ldr	r2, [pc, #500]	; (8022e34 <HAL_DMA_Start_IT+0x484>)
 8022c3e:	4293      	cmp	r3, r2
 8022c40:	d05e      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c42:	68fb      	ldr	r3, [r7, #12]
 8022c44:	681b      	ldr	r3, [r3, #0]
 8022c46:	4a7c      	ldr	r2, [pc, #496]	; (8022e38 <HAL_DMA_Start_IT+0x488>)
 8022c48:	4293      	cmp	r3, r2
 8022c4a:	d059      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c4c:	68fb      	ldr	r3, [r7, #12]
 8022c4e:	681b      	ldr	r3, [r3, #0]
 8022c50:	4a7a      	ldr	r2, [pc, #488]	; (8022e3c <HAL_DMA_Start_IT+0x48c>)
 8022c52:	4293      	cmp	r3, r2
 8022c54:	d054      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c56:	68fb      	ldr	r3, [r7, #12]
 8022c58:	681b      	ldr	r3, [r3, #0]
 8022c5a:	4a79      	ldr	r2, [pc, #484]	; (8022e40 <HAL_DMA_Start_IT+0x490>)
 8022c5c:	4293      	cmp	r3, r2
 8022c5e:	d04f      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c60:	68fb      	ldr	r3, [r7, #12]
 8022c62:	681b      	ldr	r3, [r3, #0]
 8022c64:	4a77      	ldr	r2, [pc, #476]	; (8022e44 <HAL_DMA_Start_IT+0x494>)
 8022c66:	4293      	cmp	r3, r2
 8022c68:	d04a      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c6a:	68fb      	ldr	r3, [r7, #12]
 8022c6c:	681b      	ldr	r3, [r3, #0]
 8022c6e:	4a76      	ldr	r2, [pc, #472]	; (8022e48 <HAL_DMA_Start_IT+0x498>)
 8022c70:	4293      	cmp	r3, r2
 8022c72:	d045      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c74:	68fb      	ldr	r3, [r7, #12]
 8022c76:	681b      	ldr	r3, [r3, #0]
 8022c78:	4a74      	ldr	r2, [pc, #464]	; (8022e4c <HAL_DMA_Start_IT+0x49c>)
 8022c7a:	4293      	cmp	r3, r2
 8022c7c:	d040      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c7e:	68fb      	ldr	r3, [r7, #12]
 8022c80:	681b      	ldr	r3, [r3, #0]
 8022c82:	4a73      	ldr	r2, [pc, #460]	; (8022e50 <HAL_DMA_Start_IT+0x4a0>)
 8022c84:	4293      	cmp	r3, r2
 8022c86:	d03b      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c88:	68fb      	ldr	r3, [r7, #12]
 8022c8a:	681b      	ldr	r3, [r3, #0]
 8022c8c:	4a71      	ldr	r2, [pc, #452]	; (8022e54 <HAL_DMA_Start_IT+0x4a4>)
 8022c8e:	4293      	cmp	r3, r2
 8022c90:	d036      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c92:	68fb      	ldr	r3, [r7, #12]
 8022c94:	681b      	ldr	r3, [r3, #0]
 8022c96:	4a70      	ldr	r2, [pc, #448]	; (8022e58 <HAL_DMA_Start_IT+0x4a8>)
 8022c98:	4293      	cmp	r3, r2
 8022c9a:	d031      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022c9c:	68fb      	ldr	r3, [r7, #12]
 8022c9e:	681b      	ldr	r3, [r3, #0]
 8022ca0:	4a6e      	ldr	r2, [pc, #440]	; (8022e5c <HAL_DMA_Start_IT+0x4ac>)
 8022ca2:	4293      	cmp	r3, r2
 8022ca4:	d02c      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022ca6:	68fb      	ldr	r3, [r7, #12]
 8022ca8:	681b      	ldr	r3, [r3, #0]
 8022caa:	4a6d      	ldr	r2, [pc, #436]	; (8022e60 <HAL_DMA_Start_IT+0x4b0>)
 8022cac:	4293      	cmp	r3, r2
 8022cae:	d027      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022cb0:	68fb      	ldr	r3, [r7, #12]
 8022cb2:	681b      	ldr	r3, [r3, #0]
 8022cb4:	4a6b      	ldr	r2, [pc, #428]	; (8022e64 <HAL_DMA_Start_IT+0x4b4>)
 8022cb6:	4293      	cmp	r3, r2
 8022cb8:	d022      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022cba:	68fb      	ldr	r3, [r7, #12]
 8022cbc:	681b      	ldr	r3, [r3, #0]
 8022cbe:	4a6a      	ldr	r2, [pc, #424]	; (8022e68 <HAL_DMA_Start_IT+0x4b8>)
 8022cc0:	4293      	cmp	r3, r2
 8022cc2:	d01d      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022cc4:	68fb      	ldr	r3, [r7, #12]
 8022cc6:	681b      	ldr	r3, [r3, #0]
 8022cc8:	4a68      	ldr	r2, [pc, #416]	; (8022e6c <HAL_DMA_Start_IT+0x4bc>)
 8022cca:	4293      	cmp	r3, r2
 8022ccc:	d018      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022cce:	68fb      	ldr	r3, [r7, #12]
 8022cd0:	681b      	ldr	r3, [r3, #0]
 8022cd2:	4a67      	ldr	r2, [pc, #412]	; (8022e70 <HAL_DMA_Start_IT+0x4c0>)
 8022cd4:	4293      	cmp	r3, r2
 8022cd6:	d013      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022cd8:	68fb      	ldr	r3, [r7, #12]
 8022cda:	681b      	ldr	r3, [r3, #0]
 8022cdc:	4a65      	ldr	r2, [pc, #404]	; (8022e74 <HAL_DMA_Start_IT+0x4c4>)
 8022cde:	4293      	cmp	r3, r2
 8022ce0:	d00e      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022ce2:	68fb      	ldr	r3, [r7, #12]
 8022ce4:	681b      	ldr	r3, [r3, #0]
 8022ce6:	4a64      	ldr	r2, [pc, #400]	; (8022e78 <HAL_DMA_Start_IT+0x4c8>)
 8022ce8:	4293      	cmp	r3, r2
 8022cea:	d009      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022cec:	68fb      	ldr	r3, [r7, #12]
 8022cee:	681b      	ldr	r3, [r3, #0]
 8022cf0:	4a62      	ldr	r2, [pc, #392]	; (8022e7c <HAL_DMA_Start_IT+0x4cc>)
 8022cf2:	4293      	cmp	r3, r2
 8022cf4:	d004      	beq.n	8022d00 <HAL_DMA_Start_IT+0x350>
 8022cf6:	68fb      	ldr	r3, [r7, #12]
 8022cf8:	681b      	ldr	r3, [r3, #0]
 8022cfa:	4a61      	ldr	r2, [pc, #388]	; (8022e80 <HAL_DMA_Start_IT+0x4d0>)
 8022cfc:	4293      	cmp	r3, r2
 8022cfe:	d101      	bne.n	8022d04 <HAL_DMA_Start_IT+0x354>
 8022d00:	2301      	movs	r3, #1
 8022d02:	e000      	b.n	8022d06 <HAL_DMA_Start_IT+0x356>
 8022d04:	2300      	movs	r3, #0
 8022d06:	2b00      	cmp	r3, #0
 8022d08:	d01a      	beq.n	8022d40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8022d0a:	68fb      	ldr	r3, [r7, #12]
 8022d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8022d0e:	681b      	ldr	r3, [r3, #0]
 8022d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022d14:	2b00      	cmp	r3, #0
 8022d16:	d007      	beq.n	8022d28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8022d18:	68fb      	ldr	r3, [r7, #12]
 8022d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8022d1c:	681a      	ldr	r2, [r3, #0]
 8022d1e:	68fb      	ldr	r3, [r7, #12]
 8022d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8022d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022d26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8022d28:	68fb      	ldr	r3, [r7, #12]
 8022d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022d2c:	2b00      	cmp	r3, #0
 8022d2e:	d007      	beq.n	8022d40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8022d30:	68fb      	ldr	r3, [r7, #12]
 8022d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022d34:	681a      	ldr	r2, [r3, #0]
 8022d36:	68fb      	ldr	r3, [r7, #12]
 8022d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022d3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8022d40:	68fb      	ldr	r3, [r7, #12]
 8022d42:	681b      	ldr	r3, [r3, #0]
 8022d44:	4a37      	ldr	r2, [pc, #220]	; (8022e24 <HAL_DMA_Start_IT+0x474>)
 8022d46:	4293      	cmp	r3, r2
 8022d48:	d04a      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022d4a:	68fb      	ldr	r3, [r7, #12]
 8022d4c:	681b      	ldr	r3, [r3, #0]
 8022d4e:	4a36      	ldr	r2, [pc, #216]	; (8022e28 <HAL_DMA_Start_IT+0x478>)
 8022d50:	4293      	cmp	r3, r2
 8022d52:	d045      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022d54:	68fb      	ldr	r3, [r7, #12]
 8022d56:	681b      	ldr	r3, [r3, #0]
 8022d58:	4a34      	ldr	r2, [pc, #208]	; (8022e2c <HAL_DMA_Start_IT+0x47c>)
 8022d5a:	4293      	cmp	r3, r2
 8022d5c:	d040      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022d5e:	68fb      	ldr	r3, [r7, #12]
 8022d60:	681b      	ldr	r3, [r3, #0]
 8022d62:	4a33      	ldr	r2, [pc, #204]	; (8022e30 <HAL_DMA_Start_IT+0x480>)
 8022d64:	4293      	cmp	r3, r2
 8022d66:	d03b      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022d68:	68fb      	ldr	r3, [r7, #12]
 8022d6a:	681b      	ldr	r3, [r3, #0]
 8022d6c:	4a31      	ldr	r2, [pc, #196]	; (8022e34 <HAL_DMA_Start_IT+0x484>)
 8022d6e:	4293      	cmp	r3, r2
 8022d70:	d036      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022d72:	68fb      	ldr	r3, [r7, #12]
 8022d74:	681b      	ldr	r3, [r3, #0]
 8022d76:	4a30      	ldr	r2, [pc, #192]	; (8022e38 <HAL_DMA_Start_IT+0x488>)
 8022d78:	4293      	cmp	r3, r2
 8022d7a:	d031      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022d7c:	68fb      	ldr	r3, [r7, #12]
 8022d7e:	681b      	ldr	r3, [r3, #0]
 8022d80:	4a2e      	ldr	r2, [pc, #184]	; (8022e3c <HAL_DMA_Start_IT+0x48c>)
 8022d82:	4293      	cmp	r3, r2
 8022d84:	d02c      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022d86:	68fb      	ldr	r3, [r7, #12]
 8022d88:	681b      	ldr	r3, [r3, #0]
 8022d8a:	4a2d      	ldr	r2, [pc, #180]	; (8022e40 <HAL_DMA_Start_IT+0x490>)
 8022d8c:	4293      	cmp	r3, r2
 8022d8e:	d027      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022d90:	68fb      	ldr	r3, [r7, #12]
 8022d92:	681b      	ldr	r3, [r3, #0]
 8022d94:	4a2b      	ldr	r2, [pc, #172]	; (8022e44 <HAL_DMA_Start_IT+0x494>)
 8022d96:	4293      	cmp	r3, r2
 8022d98:	d022      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022d9a:	68fb      	ldr	r3, [r7, #12]
 8022d9c:	681b      	ldr	r3, [r3, #0]
 8022d9e:	4a2a      	ldr	r2, [pc, #168]	; (8022e48 <HAL_DMA_Start_IT+0x498>)
 8022da0:	4293      	cmp	r3, r2
 8022da2:	d01d      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022da4:	68fb      	ldr	r3, [r7, #12]
 8022da6:	681b      	ldr	r3, [r3, #0]
 8022da8:	4a28      	ldr	r2, [pc, #160]	; (8022e4c <HAL_DMA_Start_IT+0x49c>)
 8022daa:	4293      	cmp	r3, r2
 8022dac:	d018      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022dae:	68fb      	ldr	r3, [r7, #12]
 8022db0:	681b      	ldr	r3, [r3, #0]
 8022db2:	4a27      	ldr	r2, [pc, #156]	; (8022e50 <HAL_DMA_Start_IT+0x4a0>)
 8022db4:	4293      	cmp	r3, r2
 8022db6:	d013      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022db8:	68fb      	ldr	r3, [r7, #12]
 8022dba:	681b      	ldr	r3, [r3, #0]
 8022dbc:	4a25      	ldr	r2, [pc, #148]	; (8022e54 <HAL_DMA_Start_IT+0x4a4>)
 8022dbe:	4293      	cmp	r3, r2
 8022dc0:	d00e      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022dc2:	68fb      	ldr	r3, [r7, #12]
 8022dc4:	681b      	ldr	r3, [r3, #0]
 8022dc6:	4a24      	ldr	r2, [pc, #144]	; (8022e58 <HAL_DMA_Start_IT+0x4a8>)
 8022dc8:	4293      	cmp	r3, r2
 8022dca:	d009      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022dcc:	68fb      	ldr	r3, [r7, #12]
 8022dce:	681b      	ldr	r3, [r3, #0]
 8022dd0:	4a22      	ldr	r2, [pc, #136]	; (8022e5c <HAL_DMA_Start_IT+0x4ac>)
 8022dd2:	4293      	cmp	r3, r2
 8022dd4:	d004      	beq.n	8022de0 <HAL_DMA_Start_IT+0x430>
 8022dd6:	68fb      	ldr	r3, [r7, #12]
 8022dd8:	681b      	ldr	r3, [r3, #0]
 8022dda:	4a21      	ldr	r2, [pc, #132]	; (8022e60 <HAL_DMA_Start_IT+0x4b0>)
 8022ddc:	4293      	cmp	r3, r2
 8022dde:	d108      	bne.n	8022df2 <HAL_DMA_Start_IT+0x442>
 8022de0:	68fb      	ldr	r3, [r7, #12]
 8022de2:	681b      	ldr	r3, [r3, #0]
 8022de4:	681a      	ldr	r2, [r3, #0]
 8022de6:	68fb      	ldr	r3, [r7, #12]
 8022de8:	681b      	ldr	r3, [r3, #0]
 8022dea:	f042 0201 	orr.w	r2, r2, #1
 8022dee:	601a      	str	r2, [r3, #0]
 8022df0:	e012      	b.n	8022e18 <HAL_DMA_Start_IT+0x468>
 8022df2:	68fb      	ldr	r3, [r7, #12]
 8022df4:	681b      	ldr	r3, [r3, #0]
 8022df6:	681a      	ldr	r2, [r3, #0]
 8022df8:	68fb      	ldr	r3, [r7, #12]
 8022dfa:	681b      	ldr	r3, [r3, #0]
 8022dfc:	f042 0201 	orr.w	r2, r2, #1
 8022e00:	601a      	str	r2, [r3, #0]
 8022e02:	e009      	b.n	8022e18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8022e04:	68fb      	ldr	r3, [r7, #12]
 8022e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022e0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8022e0c:	68fb      	ldr	r3, [r7, #12]
 8022e0e:	2200      	movs	r2, #0
 8022e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8022e14:	2301      	movs	r3, #1
 8022e16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8022e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8022e1a:	4618      	mov	r0, r3
 8022e1c:	3718      	adds	r7, #24
 8022e1e:	46bd      	mov	sp, r7
 8022e20:	bd80      	pop	{r7, pc}
 8022e22:	bf00      	nop
 8022e24:	40020010 	.word	0x40020010
 8022e28:	40020028 	.word	0x40020028
 8022e2c:	40020040 	.word	0x40020040
 8022e30:	40020058 	.word	0x40020058
 8022e34:	40020070 	.word	0x40020070
 8022e38:	40020088 	.word	0x40020088
 8022e3c:	400200a0 	.word	0x400200a0
 8022e40:	400200b8 	.word	0x400200b8
 8022e44:	40020410 	.word	0x40020410
 8022e48:	40020428 	.word	0x40020428
 8022e4c:	40020440 	.word	0x40020440
 8022e50:	40020458 	.word	0x40020458
 8022e54:	40020470 	.word	0x40020470
 8022e58:	40020488 	.word	0x40020488
 8022e5c:	400204a0 	.word	0x400204a0
 8022e60:	400204b8 	.word	0x400204b8
 8022e64:	58025408 	.word	0x58025408
 8022e68:	5802541c 	.word	0x5802541c
 8022e6c:	58025430 	.word	0x58025430
 8022e70:	58025444 	.word	0x58025444
 8022e74:	58025458 	.word	0x58025458
 8022e78:	5802546c 	.word	0x5802546c
 8022e7c:	58025480 	.word	0x58025480
 8022e80:	58025494 	.word	0x58025494

08022e84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8022e84:	b580      	push	{r7, lr}
 8022e86:	b086      	sub	sp, #24
 8022e88:	af00      	add	r7, sp, #0
 8022e8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8022e8c:	f7ff f926 	bl	80220dc <HAL_GetTick>
 8022e90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8022e92:	687b      	ldr	r3, [r7, #4]
 8022e94:	2b00      	cmp	r3, #0
 8022e96:	d101      	bne.n	8022e9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8022e98:	2301      	movs	r3, #1
 8022e9a:	e2dc      	b.n	8023456 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8022e9c:	687b      	ldr	r3, [r7, #4]
 8022e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8022ea2:	b2db      	uxtb	r3, r3
 8022ea4:	2b02      	cmp	r3, #2
 8022ea6:	d008      	beq.n	8022eba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	2280      	movs	r2, #128	; 0x80
 8022eac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8022eae:	687b      	ldr	r3, [r7, #4]
 8022eb0:	2200      	movs	r2, #0
 8022eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8022eb6:	2301      	movs	r3, #1
 8022eb8:	e2cd      	b.n	8023456 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8022eba:	687b      	ldr	r3, [r7, #4]
 8022ebc:	681b      	ldr	r3, [r3, #0]
 8022ebe:	4a76      	ldr	r2, [pc, #472]	; (8023098 <HAL_DMA_Abort+0x214>)
 8022ec0:	4293      	cmp	r3, r2
 8022ec2:	d04a      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022ec4:	687b      	ldr	r3, [r7, #4]
 8022ec6:	681b      	ldr	r3, [r3, #0]
 8022ec8:	4a74      	ldr	r2, [pc, #464]	; (802309c <HAL_DMA_Abort+0x218>)
 8022eca:	4293      	cmp	r3, r2
 8022ecc:	d045      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022ece:	687b      	ldr	r3, [r7, #4]
 8022ed0:	681b      	ldr	r3, [r3, #0]
 8022ed2:	4a73      	ldr	r2, [pc, #460]	; (80230a0 <HAL_DMA_Abort+0x21c>)
 8022ed4:	4293      	cmp	r3, r2
 8022ed6:	d040      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022ed8:	687b      	ldr	r3, [r7, #4]
 8022eda:	681b      	ldr	r3, [r3, #0]
 8022edc:	4a71      	ldr	r2, [pc, #452]	; (80230a4 <HAL_DMA_Abort+0x220>)
 8022ede:	4293      	cmp	r3, r2
 8022ee0:	d03b      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022ee2:	687b      	ldr	r3, [r7, #4]
 8022ee4:	681b      	ldr	r3, [r3, #0]
 8022ee6:	4a70      	ldr	r2, [pc, #448]	; (80230a8 <HAL_DMA_Abort+0x224>)
 8022ee8:	4293      	cmp	r3, r2
 8022eea:	d036      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022eec:	687b      	ldr	r3, [r7, #4]
 8022eee:	681b      	ldr	r3, [r3, #0]
 8022ef0:	4a6e      	ldr	r2, [pc, #440]	; (80230ac <HAL_DMA_Abort+0x228>)
 8022ef2:	4293      	cmp	r3, r2
 8022ef4:	d031      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022ef6:	687b      	ldr	r3, [r7, #4]
 8022ef8:	681b      	ldr	r3, [r3, #0]
 8022efa:	4a6d      	ldr	r2, [pc, #436]	; (80230b0 <HAL_DMA_Abort+0x22c>)
 8022efc:	4293      	cmp	r3, r2
 8022efe:	d02c      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022f00:	687b      	ldr	r3, [r7, #4]
 8022f02:	681b      	ldr	r3, [r3, #0]
 8022f04:	4a6b      	ldr	r2, [pc, #428]	; (80230b4 <HAL_DMA_Abort+0x230>)
 8022f06:	4293      	cmp	r3, r2
 8022f08:	d027      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	681b      	ldr	r3, [r3, #0]
 8022f0e:	4a6a      	ldr	r2, [pc, #424]	; (80230b8 <HAL_DMA_Abort+0x234>)
 8022f10:	4293      	cmp	r3, r2
 8022f12:	d022      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022f14:	687b      	ldr	r3, [r7, #4]
 8022f16:	681b      	ldr	r3, [r3, #0]
 8022f18:	4a68      	ldr	r2, [pc, #416]	; (80230bc <HAL_DMA_Abort+0x238>)
 8022f1a:	4293      	cmp	r3, r2
 8022f1c:	d01d      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022f1e:	687b      	ldr	r3, [r7, #4]
 8022f20:	681b      	ldr	r3, [r3, #0]
 8022f22:	4a67      	ldr	r2, [pc, #412]	; (80230c0 <HAL_DMA_Abort+0x23c>)
 8022f24:	4293      	cmp	r3, r2
 8022f26:	d018      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022f28:	687b      	ldr	r3, [r7, #4]
 8022f2a:	681b      	ldr	r3, [r3, #0]
 8022f2c:	4a65      	ldr	r2, [pc, #404]	; (80230c4 <HAL_DMA_Abort+0x240>)
 8022f2e:	4293      	cmp	r3, r2
 8022f30:	d013      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022f32:	687b      	ldr	r3, [r7, #4]
 8022f34:	681b      	ldr	r3, [r3, #0]
 8022f36:	4a64      	ldr	r2, [pc, #400]	; (80230c8 <HAL_DMA_Abort+0x244>)
 8022f38:	4293      	cmp	r3, r2
 8022f3a:	d00e      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022f3c:	687b      	ldr	r3, [r7, #4]
 8022f3e:	681b      	ldr	r3, [r3, #0]
 8022f40:	4a62      	ldr	r2, [pc, #392]	; (80230cc <HAL_DMA_Abort+0x248>)
 8022f42:	4293      	cmp	r3, r2
 8022f44:	d009      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022f46:	687b      	ldr	r3, [r7, #4]
 8022f48:	681b      	ldr	r3, [r3, #0]
 8022f4a:	4a61      	ldr	r2, [pc, #388]	; (80230d0 <HAL_DMA_Abort+0x24c>)
 8022f4c:	4293      	cmp	r3, r2
 8022f4e:	d004      	beq.n	8022f5a <HAL_DMA_Abort+0xd6>
 8022f50:	687b      	ldr	r3, [r7, #4]
 8022f52:	681b      	ldr	r3, [r3, #0]
 8022f54:	4a5f      	ldr	r2, [pc, #380]	; (80230d4 <HAL_DMA_Abort+0x250>)
 8022f56:	4293      	cmp	r3, r2
 8022f58:	d101      	bne.n	8022f5e <HAL_DMA_Abort+0xda>
 8022f5a:	2301      	movs	r3, #1
 8022f5c:	e000      	b.n	8022f60 <HAL_DMA_Abort+0xdc>
 8022f5e:	2300      	movs	r3, #0
 8022f60:	2b00      	cmp	r3, #0
 8022f62:	d013      	beq.n	8022f8c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8022f64:	687b      	ldr	r3, [r7, #4]
 8022f66:	681b      	ldr	r3, [r3, #0]
 8022f68:	681a      	ldr	r2, [r3, #0]
 8022f6a:	687b      	ldr	r3, [r7, #4]
 8022f6c:	681b      	ldr	r3, [r3, #0]
 8022f6e:	f022 021e 	bic.w	r2, r2, #30
 8022f72:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8022f74:	687b      	ldr	r3, [r7, #4]
 8022f76:	681b      	ldr	r3, [r3, #0]
 8022f78:	695a      	ldr	r2, [r3, #20]
 8022f7a:	687b      	ldr	r3, [r7, #4]
 8022f7c:	681b      	ldr	r3, [r3, #0]
 8022f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022f82:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8022f84:	687b      	ldr	r3, [r7, #4]
 8022f86:	681b      	ldr	r3, [r3, #0]
 8022f88:	617b      	str	r3, [r7, #20]
 8022f8a:	e00a      	b.n	8022fa2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8022f8c:	687b      	ldr	r3, [r7, #4]
 8022f8e:	681b      	ldr	r3, [r3, #0]
 8022f90:	681a      	ldr	r2, [r3, #0]
 8022f92:	687b      	ldr	r3, [r7, #4]
 8022f94:	681b      	ldr	r3, [r3, #0]
 8022f96:	f022 020e 	bic.w	r2, r2, #14
 8022f9a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8022f9c:	687b      	ldr	r3, [r7, #4]
 8022f9e:	681b      	ldr	r3, [r3, #0]
 8022fa0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	681b      	ldr	r3, [r3, #0]
 8022fa6:	4a3c      	ldr	r2, [pc, #240]	; (8023098 <HAL_DMA_Abort+0x214>)
 8022fa8:	4293      	cmp	r3, r2
 8022faa:	d072      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8022fac:	687b      	ldr	r3, [r7, #4]
 8022fae:	681b      	ldr	r3, [r3, #0]
 8022fb0:	4a3a      	ldr	r2, [pc, #232]	; (802309c <HAL_DMA_Abort+0x218>)
 8022fb2:	4293      	cmp	r3, r2
 8022fb4:	d06d      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	681b      	ldr	r3, [r3, #0]
 8022fba:	4a39      	ldr	r2, [pc, #228]	; (80230a0 <HAL_DMA_Abort+0x21c>)
 8022fbc:	4293      	cmp	r3, r2
 8022fbe:	d068      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8022fc0:	687b      	ldr	r3, [r7, #4]
 8022fc2:	681b      	ldr	r3, [r3, #0]
 8022fc4:	4a37      	ldr	r2, [pc, #220]	; (80230a4 <HAL_DMA_Abort+0x220>)
 8022fc6:	4293      	cmp	r3, r2
 8022fc8:	d063      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	4a36      	ldr	r2, [pc, #216]	; (80230a8 <HAL_DMA_Abort+0x224>)
 8022fd0:	4293      	cmp	r3, r2
 8022fd2:	d05e      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8022fd4:	687b      	ldr	r3, [r7, #4]
 8022fd6:	681b      	ldr	r3, [r3, #0]
 8022fd8:	4a34      	ldr	r2, [pc, #208]	; (80230ac <HAL_DMA_Abort+0x228>)
 8022fda:	4293      	cmp	r3, r2
 8022fdc:	d059      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	681b      	ldr	r3, [r3, #0]
 8022fe2:	4a33      	ldr	r2, [pc, #204]	; (80230b0 <HAL_DMA_Abort+0x22c>)
 8022fe4:	4293      	cmp	r3, r2
 8022fe6:	d054      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8022fe8:	687b      	ldr	r3, [r7, #4]
 8022fea:	681b      	ldr	r3, [r3, #0]
 8022fec:	4a31      	ldr	r2, [pc, #196]	; (80230b4 <HAL_DMA_Abort+0x230>)
 8022fee:	4293      	cmp	r3, r2
 8022ff0:	d04f      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8022ff2:	687b      	ldr	r3, [r7, #4]
 8022ff4:	681b      	ldr	r3, [r3, #0]
 8022ff6:	4a30      	ldr	r2, [pc, #192]	; (80230b8 <HAL_DMA_Abort+0x234>)
 8022ff8:	4293      	cmp	r3, r2
 8022ffa:	d04a      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8022ffc:	687b      	ldr	r3, [r7, #4]
 8022ffe:	681b      	ldr	r3, [r3, #0]
 8023000:	4a2e      	ldr	r2, [pc, #184]	; (80230bc <HAL_DMA_Abort+0x238>)
 8023002:	4293      	cmp	r3, r2
 8023004:	d045      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8023006:	687b      	ldr	r3, [r7, #4]
 8023008:	681b      	ldr	r3, [r3, #0]
 802300a:	4a2d      	ldr	r2, [pc, #180]	; (80230c0 <HAL_DMA_Abort+0x23c>)
 802300c:	4293      	cmp	r3, r2
 802300e:	d040      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8023010:	687b      	ldr	r3, [r7, #4]
 8023012:	681b      	ldr	r3, [r3, #0]
 8023014:	4a2b      	ldr	r2, [pc, #172]	; (80230c4 <HAL_DMA_Abort+0x240>)
 8023016:	4293      	cmp	r3, r2
 8023018:	d03b      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 802301a:	687b      	ldr	r3, [r7, #4]
 802301c:	681b      	ldr	r3, [r3, #0]
 802301e:	4a2a      	ldr	r2, [pc, #168]	; (80230c8 <HAL_DMA_Abort+0x244>)
 8023020:	4293      	cmp	r3, r2
 8023022:	d036      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8023024:	687b      	ldr	r3, [r7, #4]
 8023026:	681b      	ldr	r3, [r3, #0]
 8023028:	4a28      	ldr	r2, [pc, #160]	; (80230cc <HAL_DMA_Abort+0x248>)
 802302a:	4293      	cmp	r3, r2
 802302c:	d031      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 802302e:	687b      	ldr	r3, [r7, #4]
 8023030:	681b      	ldr	r3, [r3, #0]
 8023032:	4a27      	ldr	r2, [pc, #156]	; (80230d0 <HAL_DMA_Abort+0x24c>)
 8023034:	4293      	cmp	r3, r2
 8023036:	d02c      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	681b      	ldr	r3, [r3, #0]
 802303c:	4a25      	ldr	r2, [pc, #148]	; (80230d4 <HAL_DMA_Abort+0x250>)
 802303e:	4293      	cmp	r3, r2
 8023040:	d027      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8023042:	687b      	ldr	r3, [r7, #4]
 8023044:	681b      	ldr	r3, [r3, #0]
 8023046:	4a24      	ldr	r2, [pc, #144]	; (80230d8 <HAL_DMA_Abort+0x254>)
 8023048:	4293      	cmp	r3, r2
 802304a:	d022      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 802304c:	687b      	ldr	r3, [r7, #4]
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	4a22      	ldr	r2, [pc, #136]	; (80230dc <HAL_DMA_Abort+0x258>)
 8023052:	4293      	cmp	r3, r2
 8023054:	d01d      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8023056:	687b      	ldr	r3, [r7, #4]
 8023058:	681b      	ldr	r3, [r3, #0]
 802305a:	4a21      	ldr	r2, [pc, #132]	; (80230e0 <HAL_DMA_Abort+0x25c>)
 802305c:	4293      	cmp	r3, r2
 802305e:	d018      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8023060:	687b      	ldr	r3, [r7, #4]
 8023062:	681b      	ldr	r3, [r3, #0]
 8023064:	4a1f      	ldr	r2, [pc, #124]	; (80230e4 <HAL_DMA_Abort+0x260>)
 8023066:	4293      	cmp	r3, r2
 8023068:	d013      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 802306a:	687b      	ldr	r3, [r7, #4]
 802306c:	681b      	ldr	r3, [r3, #0]
 802306e:	4a1e      	ldr	r2, [pc, #120]	; (80230e8 <HAL_DMA_Abort+0x264>)
 8023070:	4293      	cmp	r3, r2
 8023072:	d00e      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8023074:	687b      	ldr	r3, [r7, #4]
 8023076:	681b      	ldr	r3, [r3, #0]
 8023078:	4a1c      	ldr	r2, [pc, #112]	; (80230ec <HAL_DMA_Abort+0x268>)
 802307a:	4293      	cmp	r3, r2
 802307c:	d009      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 802307e:	687b      	ldr	r3, [r7, #4]
 8023080:	681b      	ldr	r3, [r3, #0]
 8023082:	4a1b      	ldr	r2, [pc, #108]	; (80230f0 <HAL_DMA_Abort+0x26c>)
 8023084:	4293      	cmp	r3, r2
 8023086:	d004      	beq.n	8023092 <HAL_DMA_Abort+0x20e>
 8023088:	687b      	ldr	r3, [r7, #4]
 802308a:	681b      	ldr	r3, [r3, #0]
 802308c:	4a19      	ldr	r2, [pc, #100]	; (80230f4 <HAL_DMA_Abort+0x270>)
 802308e:	4293      	cmp	r3, r2
 8023090:	d132      	bne.n	80230f8 <HAL_DMA_Abort+0x274>
 8023092:	2301      	movs	r3, #1
 8023094:	e031      	b.n	80230fa <HAL_DMA_Abort+0x276>
 8023096:	bf00      	nop
 8023098:	40020010 	.word	0x40020010
 802309c:	40020028 	.word	0x40020028
 80230a0:	40020040 	.word	0x40020040
 80230a4:	40020058 	.word	0x40020058
 80230a8:	40020070 	.word	0x40020070
 80230ac:	40020088 	.word	0x40020088
 80230b0:	400200a0 	.word	0x400200a0
 80230b4:	400200b8 	.word	0x400200b8
 80230b8:	40020410 	.word	0x40020410
 80230bc:	40020428 	.word	0x40020428
 80230c0:	40020440 	.word	0x40020440
 80230c4:	40020458 	.word	0x40020458
 80230c8:	40020470 	.word	0x40020470
 80230cc:	40020488 	.word	0x40020488
 80230d0:	400204a0 	.word	0x400204a0
 80230d4:	400204b8 	.word	0x400204b8
 80230d8:	58025408 	.word	0x58025408
 80230dc:	5802541c 	.word	0x5802541c
 80230e0:	58025430 	.word	0x58025430
 80230e4:	58025444 	.word	0x58025444
 80230e8:	58025458 	.word	0x58025458
 80230ec:	5802546c 	.word	0x5802546c
 80230f0:	58025480 	.word	0x58025480
 80230f4:	58025494 	.word	0x58025494
 80230f8:	2300      	movs	r3, #0
 80230fa:	2b00      	cmp	r3, #0
 80230fc:	d007      	beq.n	802310e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80230fe:	687b      	ldr	r3, [r7, #4]
 8023100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023102:	681a      	ldr	r2, [r3, #0]
 8023104:	687b      	ldr	r3, [r7, #4]
 8023106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802310c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802310e:	687b      	ldr	r3, [r7, #4]
 8023110:	681b      	ldr	r3, [r3, #0]
 8023112:	4a6d      	ldr	r2, [pc, #436]	; (80232c8 <HAL_DMA_Abort+0x444>)
 8023114:	4293      	cmp	r3, r2
 8023116:	d04a      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 8023118:	687b      	ldr	r3, [r7, #4]
 802311a:	681b      	ldr	r3, [r3, #0]
 802311c:	4a6b      	ldr	r2, [pc, #428]	; (80232cc <HAL_DMA_Abort+0x448>)
 802311e:	4293      	cmp	r3, r2
 8023120:	d045      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 8023122:	687b      	ldr	r3, [r7, #4]
 8023124:	681b      	ldr	r3, [r3, #0]
 8023126:	4a6a      	ldr	r2, [pc, #424]	; (80232d0 <HAL_DMA_Abort+0x44c>)
 8023128:	4293      	cmp	r3, r2
 802312a:	d040      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 802312c:	687b      	ldr	r3, [r7, #4]
 802312e:	681b      	ldr	r3, [r3, #0]
 8023130:	4a68      	ldr	r2, [pc, #416]	; (80232d4 <HAL_DMA_Abort+0x450>)
 8023132:	4293      	cmp	r3, r2
 8023134:	d03b      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 8023136:	687b      	ldr	r3, [r7, #4]
 8023138:	681b      	ldr	r3, [r3, #0]
 802313a:	4a67      	ldr	r2, [pc, #412]	; (80232d8 <HAL_DMA_Abort+0x454>)
 802313c:	4293      	cmp	r3, r2
 802313e:	d036      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 8023140:	687b      	ldr	r3, [r7, #4]
 8023142:	681b      	ldr	r3, [r3, #0]
 8023144:	4a65      	ldr	r2, [pc, #404]	; (80232dc <HAL_DMA_Abort+0x458>)
 8023146:	4293      	cmp	r3, r2
 8023148:	d031      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 802314a:	687b      	ldr	r3, [r7, #4]
 802314c:	681b      	ldr	r3, [r3, #0]
 802314e:	4a64      	ldr	r2, [pc, #400]	; (80232e0 <HAL_DMA_Abort+0x45c>)
 8023150:	4293      	cmp	r3, r2
 8023152:	d02c      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 8023154:	687b      	ldr	r3, [r7, #4]
 8023156:	681b      	ldr	r3, [r3, #0]
 8023158:	4a62      	ldr	r2, [pc, #392]	; (80232e4 <HAL_DMA_Abort+0x460>)
 802315a:	4293      	cmp	r3, r2
 802315c:	d027      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 802315e:	687b      	ldr	r3, [r7, #4]
 8023160:	681b      	ldr	r3, [r3, #0]
 8023162:	4a61      	ldr	r2, [pc, #388]	; (80232e8 <HAL_DMA_Abort+0x464>)
 8023164:	4293      	cmp	r3, r2
 8023166:	d022      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 8023168:	687b      	ldr	r3, [r7, #4]
 802316a:	681b      	ldr	r3, [r3, #0]
 802316c:	4a5f      	ldr	r2, [pc, #380]	; (80232ec <HAL_DMA_Abort+0x468>)
 802316e:	4293      	cmp	r3, r2
 8023170:	d01d      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 8023172:	687b      	ldr	r3, [r7, #4]
 8023174:	681b      	ldr	r3, [r3, #0]
 8023176:	4a5e      	ldr	r2, [pc, #376]	; (80232f0 <HAL_DMA_Abort+0x46c>)
 8023178:	4293      	cmp	r3, r2
 802317a:	d018      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 802317c:	687b      	ldr	r3, [r7, #4]
 802317e:	681b      	ldr	r3, [r3, #0]
 8023180:	4a5c      	ldr	r2, [pc, #368]	; (80232f4 <HAL_DMA_Abort+0x470>)
 8023182:	4293      	cmp	r3, r2
 8023184:	d013      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 8023186:	687b      	ldr	r3, [r7, #4]
 8023188:	681b      	ldr	r3, [r3, #0]
 802318a:	4a5b      	ldr	r2, [pc, #364]	; (80232f8 <HAL_DMA_Abort+0x474>)
 802318c:	4293      	cmp	r3, r2
 802318e:	d00e      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 8023190:	687b      	ldr	r3, [r7, #4]
 8023192:	681b      	ldr	r3, [r3, #0]
 8023194:	4a59      	ldr	r2, [pc, #356]	; (80232fc <HAL_DMA_Abort+0x478>)
 8023196:	4293      	cmp	r3, r2
 8023198:	d009      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	681b      	ldr	r3, [r3, #0]
 802319e:	4a58      	ldr	r2, [pc, #352]	; (8023300 <HAL_DMA_Abort+0x47c>)
 80231a0:	4293      	cmp	r3, r2
 80231a2:	d004      	beq.n	80231ae <HAL_DMA_Abort+0x32a>
 80231a4:	687b      	ldr	r3, [r7, #4]
 80231a6:	681b      	ldr	r3, [r3, #0]
 80231a8:	4a56      	ldr	r2, [pc, #344]	; (8023304 <HAL_DMA_Abort+0x480>)
 80231aa:	4293      	cmp	r3, r2
 80231ac:	d108      	bne.n	80231c0 <HAL_DMA_Abort+0x33c>
 80231ae:	687b      	ldr	r3, [r7, #4]
 80231b0:	681b      	ldr	r3, [r3, #0]
 80231b2:	681a      	ldr	r2, [r3, #0]
 80231b4:	687b      	ldr	r3, [r7, #4]
 80231b6:	681b      	ldr	r3, [r3, #0]
 80231b8:	f022 0201 	bic.w	r2, r2, #1
 80231bc:	601a      	str	r2, [r3, #0]
 80231be:	e007      	b.n	80231d0 <HAL_DMA_Abort+0x34c>
 80231c0:	687b      	ldr	r3, [r7, #4]
 80231c2:	681b      	ldr	r3, [r3, #0]
 80231c4:	681a      	ldr	r2, [r3, #0]
 80231c6:	687b      	ldr	r3, [r7, #4]
 80231c8:	681b      	ldr	r3, [r3, #0]
 80231ca:	f022 0201 	bic.w	r2, r2, #1
 80231ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80231d0:	e013      	b.n	80231fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80231d2:	f7fe ff83 	bl	80220dc <HAL_GetTick>
 80231d6:	4602      	mov	r2, r0
 80231d8:	693b      	ldr	r3, [r7, #16]
 80231da:	1ad3      	subs	r3, r2, r3
 80231dc:	2b05      	cmp	r3, #5
 80231de:	d90c      	bls.n	80231fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80231e0:	687b      	ldr	r3, [r7, #4]
 80231e2:	2220      	movs	r2, #32
 80231e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80231e6:	687b      	ldr	r3, [r7, #4]
 80231e8:	2203      	movs	r2, #3
 80231ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80231ee:	687b      	ldr	r3, [r7, #4]
 80231f0:	2200      	movs	r2, #0
 80231f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80231f6:	2301      	movs	r3, #1
 80231f8:	e12d      	b.n	8023456 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80231fa:	697b      	ldr	r3, [r7, #20]
 80231fc:	681b      	ldr	r3, [r3, #0]
 80231fe:	f003 0301 	and.w	r3, r3, #1
 8023202:	2b00      	cmp	r3, #0
 8023204:	d1e5      	bne.n	80231d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8023206:	687b      	ldr	r3, [r7, #4]
 8023208:	681b      	ldr	r3, [r3, #0]
 802320a:	4a2f      	ldr	r2, [pc, #188]	; (80232c8 <HAL_DMA_Abort+0x444>)
 802320c:	4293      	cmp	r3, r2
 802320e:	d04a      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 8023210:	687b      	ldr	r3, [r7, #4]
 8023212:	681b      	ldr	r3, [r3, #0]
 8023214:	4a2d      	ldr	r2, [pc, #180]	; (80232cc <HAL_DMA_Abort+0x448>)
 8023216:	4293      	cmp	r3, r2
 8023218:	d045      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 802321a:	687b      	ldr	r3, [r7, #4]
 802321c:	681b      	ldr	r3, [r3, #0]
 802321e:	4a2c      	ldr	r2, [pc, #176]	; (80232d0 <HAL_DMA_Abort+0x44c>)
 8023220:	4293      	cmp	r3, r2
 8023222:	d040      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 8023224:	687b      	ldr	r3, [r7, #4]
 8023226:	681b      	ldr	r3, [r3, #0]
 8023228:	4a2a      	ldr	r2, [pc, #168]	; (80232d4 <HAL_DMA_Abort+0x450>)
 802322a:	4293      	cmp	r3, r2
 802322c:	d03b      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 802322e:	687b      	ldr	r3, [r7, #4]
 8023230:	681b      	ldr	r3, [r3, #0]
 8023232:	4a29      	ldr	r2, [pc, #164]	; (80232d8 <HAL_DMA_Abort+0x454>)
 8023234:	4293      	cmp	r3, r2
 8023236:	d036      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 8023238:	687b      	ldr	r3, [r7, #4]
 802323a:	681b      	ldr	r3, [r3, #0]
 802323c:	4a27      	ldr	r2, [pc, #156]	; (80232dc <HAL_DMA_Abort+0x458>)
 802323e:	4293      	cmp	r3, r2
 8023240:	d031      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 8023242:	687b      	ldr	r3, [r7, #4]
 8023244:	681b      	ldr	r3, [r3, #0]
 8023246:	4a26      	ldr	r2, [pc, #152]	; (80232e0 <HAL_DMA_Abort+0x45c>)
 8023248:	4293      	cmp	r3, r2
 802324a:	d02c      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 802324c:	687b      	ldr	r3, [r7, #4]
 802324e:	681b      	ldr	r3, [r3, #0]
 8023250:	4a24      	ldr	r2, [pc, #144]	; (80232e4 <HAL_DMA_Abort+0x460>)
 8023252:	4293      	cmp	r3, r2
 8023254:	d027      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 8023256:	687b      	ldr	r3, [r7, #4]
 8023258:	681b      	ldr	r3, [r3, #0]
 802325a:	4a23      	ldr	r2, [pc, #140]	; (80232e8 <HAL_DMA_Abort+0x464>)
 802325c:	4293      	cmp	r3, r2
 802325e:	d022      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	681b      	ldr	r3, [r3, #0]
 8023264:	4a21      	ldr	r2, [pc, #132]	; (80232ec <HAL_DMA_Abort+0x468>)
 8023266:	4293      	cmp	r3, r2
 8023268:	d01d      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 802326a:	687b      	ldr	r3, [r7, #4]
 802326c:	681b      	ldr	r3, [r3, #0]
 802326e:	4a20      	ldr	r2, [pc, #128]	; (80232f0 <HAL_DMA_Abort+0x46c>)
 8023270:	4293      	cmp	r3, r2
 8023272:	d018      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 8023274:	687b      	ldr	r3, [r7, #4]
 8023276:	681b      	ldr	r3, [r3, #0]
 8023278:	4a1e      	ldr	r2, [pc, #120]	; (80232f4 <HAL_DMA_Abort+0x470>)
 802327a:	4293      	cmp	r3, r2
 802327c:	d013      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 802327e:	687b      	ldr	r3, [r7, #4]
 8023280:	681b      	ldr	r3, [r3, #0]
 8023282:	4a1d      	ldr	r2, [pc, #116]	; (80232f8 <HAL_DMA_Abort+0x474>)
 8023284:	4293      	cmp	r3, r2
 8023286:	d00e      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 8023288:	687b      	ldr	r3, [r7, #4]
 802328a:	681b      	ldr	r3, [r3, #0]
 802328c:	4a1b      	ldr	r2, [pc, #108]	; (80232fc <HAL_DMA_Abort+0x478>)
 802328e:	4293      	cmp	r3, r2
 8023290:	d009      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 8023292:	687b      	ldr	r3, [r7, #4]
 8023294:	681b      	ldr	r3, [r3, #0]
 8023296:	4a1a      	ldr	r2, [pc, #104]	; (8023300 <HAL_DMA_Abort+0x47c>)
 8023298:	4293      	cmp	r3, r2
 802329a:	d004      	beq.n	80232a6 <HAL_DMA_Abort+0x422>
 802329c:	687b      	ldr	r3, [r7, #4]
 802329e:	681b      	ldr	r3, [r3, #0]
 80232a0:	4a18      	ldr	r2, [pc, #96]	; (8023304 <HAL_DMA_Abort+0x480>)
 80232a2:	4293      	cmp	r3, r2
 80232a4:	d101      	bne.n	80232aa <HAL_DMA_Abort+0x426>
 80232a6:	2301      	movs	r3, #1
 80232a8:	e000      	b.n	80232ac <HAL_DMA_Abort+0x428>
 80232aa:	2300      	movs	r3, #0
 80232ac:	2b00      	cmp	r3, #0
 80232ae:	d02b      	beq.n	8023308 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80232b0:	687b      	ldr	r3, [r7, #4]
 80232b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80232b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80232b6:	687b      	ldr	r3, [r7, #4]
 80232b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80232ba:	f003 031f 	and.w	r3, r3, #31
 80232be:	223f      	movs	r2, #63	; 0x3f
 80232c0:	409a      	lsls	r2, r3
 80232c2:	68bb      	ldr	r3, [r7, #8]
 80232c4:	609a      	str	r2, [r3, #8]
 80232c6:	e02a      	b.n	802331e <HAL_DMA_Abort+0x49a>
 80232c8:	40020010 	.word	0x40020010
 80232cc:	40020028 	.word	0x40020028
 80232d0:	40020040 	.word	0x40020040
 80232d4:	40020058 	.word	0x40020058
 80232d8:	40020070 	.word	0x40020070
 80232dc:	40020088 	.word	0x40020088
 80232e0:	400200a0 	.word	0x400200a0
 80232e4:	400200b8 	.word	0x400200b8
 80232e8:	40020410 	.word	0x40020410
 80232ec:	40020428 	.word	0x40020428
 80232f0:	40020440 	.word	0x40020440
 80232f4:	40020458 	.word	0x40020458
 80232f8:	40020470 	.word	0x40020470
 80232fc:	40020488 	.word	0x40020488
 8023300:	400204a0 	.word	0x400204a0
 8023304:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8023308:	687b      	ldr	r3, [r7, #4]
 802330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802330c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802330e:	687b      	ldr	r3, [r7, #4]
 8023310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023312:	f003 031f 	and.w	r3, r3, #31
 8023316:	2201      	movs	r2, #1
 8023318:	409a      	lsls	r2, r3
 802331a:	68fb      	ldr	r3, [r7, #12]
 802331c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802331e:	687b      	ldr	r3, [r7, #4]
 8023320:	681b      	ldr	r3, [r3, #0]
 8023322:	4a4f      	ldr	r2, [pc, #316]	; (8023460 <HAL_DMA_Abort+0x5dc>)
 8023324:	4293      	cmp	r3, r2
 8023326:	d072      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 8023328:	687b      	ldr	r3, [r7, #4]
 802332a:	681b      	ldr	r3, [r3, #0]
 802332c:	4a4d      	ldr	r2, [pc, #308]	; (8023464 <HAL_DMA_Abort+0x5e0>)
 802332e:	4293      	cmp	r3, r2
 8023330:	d06d      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 8023332:	687b      	ldr	r3, [r7, #4]
 8023334:	681b      	ldr	r3, [r3, #0]
 8023336:	4a4c      	ldr	r2, [pc, #304]	; (8023468 <HAL_DMA_Abort+0x5e4>)
 8023338:	4293      	cmp	r3, r2
 802333a:	d068      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 802333c:	687b      	ldr	r3, [r7, #4]
 802333e:	681b      	ldr	r3, [r3, #0]
 8023340:	4a4a      	ldr	r2, [pc, #296]	; (802346c <HAL_DMA_Abort+0x5e8>)
 8023342:	4293      	cmp	r3, r2
 8023344:	d063      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 8023346:	687b      	ldr	r3, [r7, #4]
 8023348:	681b      	ldr	r3, [r3, #0]
 802334a:	4a49      	ldr	r2, [pc, #292]	; (8023470 <HAL_DMA_Abort+0x5ec>)
 802334c:	4293      	cmp	r3, r2
 802334e:	d05e      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 8023350:	687b      	ldr	r3, [r7, #4]
 8023352:	681b      	ldr	r3, [r3, #0]
 8023354:	4a47      	ldr	r2, [pc, #284]	; (8023474 <HAL_DMA_Abort+0x5f0>)
 8023356:	4293      	cmp	r3, r2
 8023358:	d059      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	681b      	ldr	r3, [r3, #0]
 802335e:	4a46      	ldr	r2, [pc, #280]	; (8023478 <HAL_DMA_Abort+0x5f4>)
 8023360:	4293      	cmp	r3, r2
 8023362:	d054      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 8023364:	687b      	ldr	r3, [r7, #4]
 8023366:	681b      	ldr	r3, [r3, #0]
 8023368:	4a44      	ldr	r2, [pc, #272]	; (802347c <HAL_DMA_Abort+0x5f8>)
 802336a:	4293      	cmp	r3, r2
 802336c:	d04f      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 802336e:	687b      	ldr	r3, [r7, #4]
 8023370:	681b      	ldr	r3, [r3, #0]
 8023372:	4a43      	ldr	r2, [pc, #268]	; (8023480 <HAL_DMA_Abort+0x5fc>)
 8023374:	4293      	cmp	r3, r2
 8023376:	d04a      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 8023378:	687b      	ldr	r3, [r7, #4]
 802337a:	681b      	ldr	r3, [r3, #0]
 802337c:	4a41      	ldr	r2, [pc, #260]	; (8023484 <HAL_DMA_Abort+0x600>)
 802337e:	4293      	cmp	r3, r2
 8023380:	d045      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 8023382:	687b      	ldr	r3, [r7, #4]
 8023384:	681b      	ldr	r3, [r3, #0]
 8023386:	4a40      	ldr	r2, [pc, #256]	; (8023488 <HAL_DMA_Abort+0x604>)
 8023388:	4293      	cmp	r3, r2
 802338a:	d040      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 802338c:	687b      	ldr	r3, [r7, #4]
 802338e:	681b      	ldr	r3, [r3, #0]
 8023390:	4a3e      	ldr	r2, [pc, #248]	; (802348c <HAL_DMA_Abort+0x608>)
 8023392:	4293      	cmp	r3, r2
 8023394:	d03b      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 8023396:	687b      	ldr	r3, [r7, #4]
 8023398:	681b      	ldr	r3, [r3, #0]
 802339a:	4a3d      	ldr	r2, [pc, #244]	; (8023490 <HAL_DMA_Abort+0x60c>)
 802339c:	4293      	cmp	r3, r2
 802339e:	d036      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 80233a0:	687b      	ldr	r3, [r7, #4]
 80233a2:	681b      	ldr	r3, [r3, #0]
 80233a4:	4a3b      	ldr	r2, [pc, #236]	; (8023494 <HAL_DMA_Abort+0x610>)
 80233a6:	4293      	cmp	r3, r2
 80233a8:	d031      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 80233aa:	687b      	ldr	r3, [r7, #4]
 80233ac:	681b      	ldr	r3, [r3, #0]
 80233ae:	4a3a      	ldr	r2, [pc, #232]	; (8023498 <HAL_DMA_Abort+0x614>)
 80233b0:	4293      	cmp	r3, r2
 80233b2:	d02c      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 80233b4:	687b      	ldr	r3, [r7, #4]
 80233b6:	681b      	ldr	r3, [r3, #0]
 80233b8:	4a38      	ldr	r2, [pc, #224]	; (802349c <HAL_DMA_Abort+0x618>)
 80233ba:	4293      	cmp	r3, r2
 80233bc:	d027      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 80233be:	687b      	ldr	r3, [r7, #4]
 80233c0:	681b      	ldr	r3, [r3, #0]
 80233c2:	4a37      	ldr	r2, [pc, #220]	; (80234a0 <HAL_DMA_Abort+0x61c>)
 80233c4:	4293      	cmp	r3, r2
 80233c6:	d022      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 80233c8:	687b      	ldr	r3, [r7, #4]
 80233ca:	681b      	ldr	r3, [r3, #0]
 80233cc:	4a35      	ldr	r2, [pc, #212]	; (80234a4 <HAL_DMA_Abort+0x620>)
 80233ce:	4293      	cmp	r3, r2
 80233d0:	d01d      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 80233d2:	687b      	ldr	r3, [r7, #4]
 80233d4:	681b      	ldr	r3, [r3, #0]
 80233d6:	4a34      	ldr	r2, [pc, #208]	; (80234a8 <HAL_DMA_Abort+0x624>)
 80233d8:	4293      	cmp	r3, r2
 80233da:	d018      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 80233dc:	687b      	ldr	r3, [r7, #4]
 80233de:	681b      	ldr	r3, [r3, #0]
 80233e0:	4a32      	ldr	r2, [pc, #200]	; (80234ac <HAL_DMA_Abort+0x628>)
 80233e2:	4293      	cmp	r3, r2
 80233e4:	d013      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 80233e6:	687b      	ldr	r3, [r7, #4]
 80233e8:	681b      	ldr	r3, [r3, #0]
 80233ea:	4a31      	ldr	r2, [pc, #196]	; (80234b0 <HAL_DMA_Abort+0x62c>)
 80233ec:	4293      	cmp	r3, r2
 80233ee:	d00e      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 80233f0:	687b      	ldr	r3, [r7, #4]
 80233f2:	681b      	ldr	r3, [r3, #0]
 80233f4:	4a2f      	ldr	r2, [pc, #188]	; (80234b4 <HAL_DMA_Abort+0x630>)
 80233f6:	4293      	cmp	r3, r2
 80233f8:	d009      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 80233fa:	687b      	ldr	r3, [r7, #4]
 80233fc:	681b      	ldr	r3, [r3, #0]
 80233fe:	4a2e      	ldr	r2, [pc, #184]	; (80234b8 <HAL_DMA_Abort+0x634>)
 8023400:	4293      	cmp	r3, r2
 8023402:	d004      	beq.n	802340e <HAL_DMA_Abort+0x58a>
 8023404:	687b      	ldr	r3, [r7, #4]
 8023406:	681b      	ldr	r3, [r3, #0]
 8023408:	4a2c      	ldr	r2, [pc, #176]	; (80234bc <HAL_DMA_Abort+0x638>)
 802340a:	4293      	cmp	r3, r2
 802340c:	d101      	bne.n	8023412 <HAL_DMA_Abort+0x58e>
 802340e:	2301      	movs	r3, #1
 8023410:	e000      	b.n	8023414 <HAL_DMA_Abort+0x590>
 8023412:	2300      	movs	r3, #0
 8023414:	2b00      	cmp	r3, #0
 8023416:	d015      	beq.n	8023444 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8023418:	687b      	ldr	r3, [r7, #4]
 802341a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802341c:	687a      	ldr	r2, [r7, #4]
 802341e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023420:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8023422:	687b      	ldr	r3, [r7, #4]
 8023424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023426:	2b00      	cmp	r3, #0
 8023428:	d00c      	beq.n	8023444 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802342a:	687b      	ldr	r3, [r7, #4]
 802342c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802342e:	681a      	ldr	r2, [r3, #0]
 8023430:	687b      	ldr	r3, [r7, #4]
 8023432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023438:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802343a:	687b      	ldr	r3, [r7, #4]
 802343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802343e:	687a      	ldr	r2, [r7, #4]
 8023440:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8023442:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8023444:	687b      	ldr	r3, [r7, #4]
 8023446:	2201      	movs	r2, #1
 8023448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802344c:	687b      	ldr	r3, [r7, #4]
 802344e:	2200      	movs	r2, #0
 8023450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8023454:	2300      	movs	r3, #0
}
 8023456:	4618      	mov	r0, r3
 8023458:	3718      	adds	r7, #24
 802345a:	46bd      	mov	sp, r7
 802345c:	bd80      	pop	{r7, pc}
 802345e:	bf00      	nop
 8023460:	40020010 	.word	0x40020010
 8023464:	40020028 	.word	0x40020028
 8023468:	40020040 	.word	0x40020040
 802346c:	40020058 	.word	0x40020058
 8023470:	40020070 	.word	0x40020070
 8023474:	40020088 	.word	0x40020088
 8023478:	400200a0 	.word	0x400200a0
 802347c:	400200b8 	.word	0x400200b8
 8023480:	40020410 	.word	0x40020410
 8023484:	40020428 	.word	0x40020428
 8023488:	40020440 	.word	0x40020440
 802348c:	40020458 	.word	0x40020458
 8023490:	40020470 	.word	0x40020470
 8023494:	40020488 	.word	0x40020488
 8023498:	400204a0 	.word	0x400204a0
 802349c:	400204b8 	.word	0x400204b8
 80234a0:	58025408 	.word	0x58025408
 80234a4:	5802541c 	.word	0x5802541c
 80234a8:	58025430 	.word	0x58025430
 80234ac:	58025444 	.word	0x58025444
 80234b0:	58025458 	.word	0x58025458
 80234b4:	5802546c 	.word	0x5802546c
 80234b8:	58025480 	.word	0x58025480
 80234bc:	58025494 	.word	0x58025494

080234c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80234c0:	b580      	push	{r7, lr}
 80234c2:	b084      	sub	sp, #16
 80234c4:	af00      	add	r7, sp, #0
 80234c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80234c8:	687b      	ldr	r3, [r7, #4]
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d101      	bne.n	80234d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80234ce:	2301      	movs	r3, #1
 80234d0:	e237      	b.n	8023942 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80234d2:	687b      	ldr	r3, [r7, #4]
 80234d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80234d8:	b2db      	uxtb	r3, r3
 80234da:	2b02      	cmp	r3, #2
 80234dc:	d004      	beq.n	80234e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80234de:	687b      	ldr	r3, [r7, #4]
 80234e0:	2280      	movs	r2, #128	; 0x80
 80234e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80234e4:	2301      	movs	r3, #1
 80234e6:	e22c      	b.n	8023942 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80234e8:	687b      	ldr	r3, [r7, #4]
 80234ea:	681b      	ldr	r3, [r3, #0]
 80234ec:	4a5c      	ldr	r2, [pc, #368]	; (8023660 <HAL_DMA_Abort_IT+0x1a0>)
 80234ee:	4293      	cmp	r3, r2
 80234f0:	d04a      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 80234f2:	687b      	ldr	r3, [r7, #4]
 80234f4:	681b      	ldr	r3, [r3, #0]
 80234f6:	4a5b      	ldr	r2, [pc, #364]	; (8023664 <HAL_DMA_Abort_IT+0x1a4>)
 80234f8:	4293      	cmp	r3, r2
 80234fa:	d045      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 80234fc:	687b      	ldr	r3, [r7, #4]
 80234fe:	681b      	ldr	r3, [r3, #0]
 8023500:	4a59      	ldr	r2, [pc, #356]	; (8023668 <HAL_DMA_Abort_IT+0x1a8>)
 8023502:	4293      	cmp	r3, r2
 8023504:	d040      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 8023506:	687b      	ldr	r3, [r7, #4]
 8023508:	681b      	ldr	r3, [r3, #0]
 802350a:	4a58      	ldr	r2, [pc, #352]	; (802366c <HAL_DMA_Abort_IT+0x1ac>)
 802350c:	4293      	cmp	r3, r2
 802350e:	d03b      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 8023510:	687b      	ldr	r3, [r7, #4]
 8023512:	681b      	ldr	r3, [r3, #0]
 8023514:	4a56      	ldr	r2, [pc, #344]	; (8023670 <HAL_DMA_Abort_IT+0x1b0>)
 8023516:	4293      	cmp	r3, r2
 8023518:	d036      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	681b      	ldr	r3, [r3, #0]
 802351e:	4a55      	ldr	r2, [pc, #340]	; (8023674 <HAL_DMA_Abort_IT+0x1b4>)
 8023520:	4293      	cmp	r3, r2
 8023522:	d031      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	681b      	ldr	r3, [r3, #0]
 8023528:	4a53      	ldr	r2, [pc, #332]	; (8023678 <HAL_DMA_Abort_IT+0x1b8>)
 802352a:	4293      	cmp	r3, r2
 802352c:	d02c      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 802352e:	687b      	ldr	r3, [r7, #4]
 8023530:	681b      	ldr	r3, [r3, #0]
 8023532:	4a52      	ldr	r2, [pc, #328]	; (802367c <HAL_DMA_Abort_IT+0x1bc>)
 8023534:	4293      	cmp	r3, r2
 8023536:	d027      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 8023538:	687b      	ldr	r3, [r7, #4]
 802353a:	681b      	ldr	r3, [r3, #0]
 802353c:	4a50      	ldr	r2, [pc, #320]	; (8023680 <HAL_DMA_Abort_IT+0x1c0>)
 802353e:	4293      	cmp	r3, r2
 8023540:	d022      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 8023542:	687b      	ldr	r3, [r7, #4]
 8023544:	681b      	ldr	r3, [r3, #0]
 8023546:	4a4f      	ldr	r2, [pc, #316]	; (8023684 <HAL_DMA_Abort_IT+0x1c4>)
 8023548:	4293      	cmp	r3, r2
 802354a:	d01d      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 802354c:	687b      	ldr	r3, [r7, #4]
 802354e:	681b      	ldr	r3, [r3, #0]
 8023550:	4a4d      	ldr	r2, [pc, #308]	; (8023688 <HAL_DMA_Abort_IT+0x1c8>)
 8023552:	4293      	cmp	r3, r2
 8023554:	d018      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 8023556:	687b      	ldr	r3, [r7, #4]
 8023558:	681b      	ldr	r3, [r3, #0]
 802355a:	4a4c      	ldr	r2, [pc, #304]	; (802368c <HAL_DMA_Abort_IT+0x1cc>)
 802355c:	4293      	cmp	r3, r2
 802355e:	d013      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	4a4a      	ldr	r2, [pc, #296]	; (8023690 <HAL_DMA_Abort_IT+0x1d0>)
 8023566:	4293      	cmp	r3, r2
 8023568:	d00e      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 802356a:	687b      	ldr	r3, [r7, #4]
 802356c:	681b      	ldr	r3, [r3, #0]
 802356e:	4a49      	ldr	r2, [pc, #292]	; (8023694 <HAL_DMA_Abort_IT+0x1d4>)
 8023570:	4293      	cmp	r3, r2
 8023572:	d009      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 8023574:	687b      	ldr	r3, [r7, #4]
 8023576:	681b      	ldr	r3, [r3, #0]
 8023578:	4a47      	ldr	r2, [pc, #284]	; (8023698 <HAL_DMA_Abort_IT+0x1d8>)
 802357a:	4293      	cmp	r3, r2
 802357c:	d004      	beq.n	8023588 <HAL_DMA_Abort_IT+0xc8>
 802357e:	687b      	ldr	r3, [r7, #4]
 8023580:	681b      	ldr	r3, [r3, #0]
 8023582:	4a46      	ldr	r2, [pc, #280]	; (802369c <HAL_DMA_Abort_IT+0x1dc>)
 8023584:	4293      	cmp	r3, r2
 8023586:	d101      	bne.n	802358c <HAL_DMA_Abort_IT+0xcc>
 8023588:	2301      	movs	r3, #1
 802358a:	e000      	b.n	802358e <HAL_DMA_Abort_IT+0xce>
 802358c:	2300      	movs	r3, #0
 802358e:	2b00      	cmp	r3, #0
 8023590:	f000 8086 	beq.w	80236a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8023594:	687b      	ldr	r3, [r7, #4]
 8023596:	2204      	movs	r2, #4
 8023598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802359c:	687b      	ldr	r3, [r7, #4]
 802359e:	681b      	ldr	r3, [r3, #0]
 80235a0:	4a2f      	ldr	r2, [pc, #188]	; (8023660 <HAL_DMA_Abort_IT+0x1a0>)
 80235a2:	4293      	cmp	r3, r2
 80235a4:	d04a      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 80235a6:	687b      	ldr	r3, [r7, #4]
 80235a8:	681b      	ldr	r3, [r3, #0]
 80235aa:	4a2e      	ldr	r2, [pc, #184]	; (8023664 <HAL_DMA_Abort_IT+0x1a4>)
 80235ac:	4293      	cmp	r3, r2
 80235ae:	d045      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 80235b0:	687b      	ldr	r3, [r7, #4]
 80235b2:	681b      	ldr	r3, [r3, #0]
 80235b4:	4a2c      	ldr	r2, [pc, #176]	; (8023668 <HAL_DMA_Abort_IT+0x1a8>)
 80235b6:	4293      	cmp	r3, r2
 80235b8:	d040      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 80235ba:	687b      	ldr	r3, [r7, #4]
 80235bc:	681b      	ldr	r3, [r3, #0]
 80235be:	4a2b      	ldr	r2, [pc, #172]	; (802366c <HAL_DMA_Abort_IT+0x1ac>)
 80235c0:	4293      	cmp	r3, r2
 80235c2:	d03b      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 80235c4:	687b      	ldr	r3, [r7, #4]
 80235c6:	681b      	ldr	r3, [r3, #0]
 80235c8:	4a29      	ldr	r2, [pc, #164]	; (8023670 <HAL_DMA_Abort_IT+0x1b0>)
 80235ca:	4293      	cmp	r3, r2
 80235cc:	d036      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	681b      	ldr	r3, [r3, #0]
 80235d2:	4a28      	ldr	r2, [pc, #160]	; (8023674 <HAL_DMA_Abort_IT+0x1b4>)
 80235d4:	4293      	cmp	r3, r2
 80235d6:	d031      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 80235d8:	687b      	ldr	r3, [r7, #4]
 80235da:	681b      	ldr	r3, [r3, #0]
 80235dc:	4a26      	ldr	r2, [pc, #152]	; (8023678 <HAL_DMA_Abort_IT+0x1b8>)
 80235de:	4293      	cmp	r3, r2
 80235e0:	d02c      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 80235e2:	687b      	ldr	r3, [r7, #4]
 80235e4:	681b      	ldr	r3, [r3, #0]
 80235e6:	4a25      	ldr	r2, [pc, #148]	; (802367c <HAL_DMA_Abort_IT+0x1bc>)
 80235e8:	4293      	cmp	r3, r2
 80235ea:	d027      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 80235ec:	687b      	ldr	r3, [r7, #4]
 80235ee:	681b      	ldr	r3, [r3, #0]
 80235f0:	4a23      	ldr	r2, [pc, #140]	; (8023680 <HAL_DMA_Abort_IT+0x1c0>)
 80235f2:	4293      	cmp	r3, r2
 80235f4:	d022      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 80235f6:	687b      	ldr	r3, [r7, #4]
 80235f8:	681b      	ldr	r3, [r3, #0]
 80235fa:	4a22      	ldr	r2, [pc, #136]	; (8023684 <HAL_DMA_Abort_IT+0x1c4>)
 80235fc:	4293      	cmp	r3, r2
 80235fe:	d01d      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	681b      	ldr	r3, [r3, #0]
 8023604:	4a20      	ldr	r2, [pc, #128]	; (8023688 <HAL_DMA_Abort_IT+0x1c8>)
 8023606:	4293      	cmp	r3, r2
 8023608:	d018      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 802360a:	687b      	ldr	r3, [r7, #4]
 802360c:	681b      	ldr	r3, [r3, #0]
 802360e:	4a1f      	ldr	r2, [pc, #124]	; (802368c <HAL_DMA_Abort_IT+0x1cc>)
 8023610:	4293      	cmp	r3, r2
 8023612:	d013      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 8023614:	687b      	ldr	r3, [r7, #4]
 8023616:	681b      	ldr	r3, [r3, #0]
 8023618:	4a1d      	ldr	r2, [pc, #116]	; (8023690 <HAL_DMA_Abort_IT+0x1d0>)
 802361a:	4293      	cmp	r3, r2
 802361c:	d00e      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 802361e:	687b      	ldr	r3, [r7, #4]
 8023620:	681b      	ldr	r3, [r3, #0]
 8023622:	4a1c      	ldr	r2, [pc, #112]	; (8023694 <HAL_DMA_Abort_IT+0x1d4>)
 8023624:	4293      	cmp	r3, r2
 8023626:	d009      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 8023628:	687b      	ldr	r3, [r7, #4]
 802362a:	681b      	ldr	r3, [r3, #0]
 802362c:	4a1a      	ldr	r2, [pc, #104]	; (8023698 <HAL_DMA_Abort_IT+0x1d8>)
 802362e:	4293      	cmp	r3, r2
 8023630:	d004      	beq.n	802363c <HAL_DMA_Abort_IT+0x17c>
 8023632:	687b      	ldr	r3, [r7, #4]
 8023634:	681b      	ldr	r3, [r3, #0]
 8023636:	4a19      	ldr	r2, [pc, #100]	; (802369c <HAL_DMA_Abort_IT+0x1dc>)
 8023638:	4293      	cmp	r3, r2
 802363a:	d108      	bne.n	802364e <HAL_DMA_Abort_IT+0x18e>
 802363c:	687b      	ldr	r3, [r7, #4]
 802363e:	681b      	ldr	r3, [r3, #0]
 8023640:	681a      	ldr	r2, [r3, #0]
 8023642:	687b      	ldr	r3, [r7, #4]
 8023644:	681b      	ldr	r3, [r3, #0]
 8023646:	f022 0201 	bic.w	r2, r2, #1
 802364a:	601a      	str	r2, [r3, #0]
 802364c:	e178      	b.n	8023940 <HAL_DMA_Abort_IT+0x480>
 802364e:	687b      	ldr	r3, [r7, #4]
 8023650:	681b      	ldr	r3, [r3, #0]
 8023652:	681a      	ldr	r2, [r3, #0]
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	681b      	ldr	r3, [r3, #0]
 8023658:	f022 0201 	bic.w	r2, r2, #1
 802365c:	601a      	str	r2, [r3, #0]
 802365e:	e16f      	b.n	8023940 <HAL_DMA_Abort_IT+0x480>
 8023660:	40020010 	.word	0x40020010
 8023664:	40020028 	.word	0x40020028
 8023668:	40020040 	.word	0x40020040
 802366c:	40020058 	.word	0x40020058
 8023670:	40020070 	.word	0x40020070
 8023674:	40020088 	.word	0x40020088
 8023678:	400200a0 	.word	0x400200a0
 802367c:	400200b8 	.word	0x400200b8
 8023680:	40020410 	.word	0x40020410
 8023684:	40020428 	.word	0x40020428
 8023688:	40020440 	.word	0x40020440
 802368c:	40020458 	.word	0x40020458
 8023690:	40020470 	.word	0x40020470
 8023694:	40020488 	.word	0x40020488
 8023698:	400204a0 	.word	0x400204a0
 802369c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80236a0:	687b      	ldr	r3, [r7, #4]
 80236a2:	681b      	ldr	r3, [r3, #0]
 80236a4:	681a      	ldr	r2, [r3, #0]
 80236a6:	687b      	ldr	r3, [r7, #4]
 80236a8:	681b      	ldr	r3, [r3, #0]
 80236aa:	f022 020e 	bic.w	r2, r2, #14
 80236ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80236b0:	687b      	ldr	r3, [r7, #4]
 80236b2:	681b      	ldr	r3, [r3, #0]
 80236b4:	4a6c      	ldr	r2, [pc, #432]	; (8023868 <HAL_DMA_Abort_IT+0x3a8>)
 80236b6:	4293      	cmp	r3, r2
 80236b8:	d04a      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 80236ba:	687b      	ldr	r3, [r7, #4]
 80236bc:	681b      	ldr	r3, [r3, #0]
 80236be:	4a6b      	ldr	r2, [pc, #428]	; (802386c <HAL_DMA_Abort_IT+0x3ac>)
 80236c0:	4293      	cmp	r3, r2
 80236c2:	d045      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	681b      	ldr	r3, [r3, #0]
 80236c8:	4a69      	ldr	r2, [pc, #420]	; (8023870 <HAL_DMA_Abort_IT+0x3b0>)
 80236ca:	4293      	cmp	r3, r2
 80236cc:	d040      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 80236ce:	687b      	ldr	r3, [r7, #4]
 80236d0:	681b      	ldr	r3, [r3, #0]
 80236d2:	4a68      	ldr	r2, [pc, #416]	; (8023874 <HAL_DMA_Abort_IT+0x3b4>)
 80236d4:	4293      	cmp	r3, r2
 80236d6:	d03b      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 80236d8:	687b      	ldr	r3, [r7, #4]
 80236da:	681b      	ldr	r3, [r3, #0]
 80236dc:	4a66      	ldr	r2, [pc, #408]	; (8023878 <HAL_DMA_Abort_IT+0x3b8>)
 80236de:	4293      	cmp	r3, r2
 80236e0:	d036      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 80236e2:	687b      	ldr	r3, [r7, #4]
 80236e4:	681b      	ldr	r3, [r3, #0]
 80236e6:	4a65      	ldr	r2, [pc, #404]	; (802387c <HAL_DMA_Abort_IT+0x3bc>)
 80236e8:	4293      	cmp	r3, r2
 80236ea:	d031      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 80236ec:	687b      	ldr	r3, [r7, #4]
 80236ee:	681b      	ldr	r3, [r3, #0]
 80236f0:	4a63      	ldr	r2, [pc, #396]	; (8023880 <HAL_DMA_Abort_IT+0x3c0>)
 80236f2:	4293      	cmp	r3, r2
 80236f4:	d02c      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 80236f6:	687b      	ldr	r3, [r7, #4]
 80236f8:	681b      	ldr	r3, [r3, #0]
 80236fa:	4a62      	ldr	r2, [pc, #392]	; (8023884 <HAL_DMA_Abort_IT+0x3c4>)
 80236fc:	4293      	cmp	r3, r2
 80236fe:	d027      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 8023700:	687b      	ldr	r3, [r7, #4]
 8023702:	681b      	ldr	r3, [r3, #0]
 8023704:	4a60      	ldr	r2, [pc, #384]	; (8023888 <HAL_DMA_Abort_IT+0x3c8>)
 8023706:	4293      	cmp	r3, r2
 8023708:	d022      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 802370a:	687b      	ldr	r3, [r7, #4]
 802370c:	681b      	ldr	r3, [r3, #0]
 802370e:	4a5f      	ldr	r2, [pc, #380]	; (802388c <HAL_DMA_Abort_IT+0x3cc>)
 8023710:	4293      	cmp	r3, r2
 8023712:	d01d      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 8023714:	687b      	ldr	r3, [r7, #4]
 8023716:	681b      	ldr	r3, [r3, #0]
 8023718:	4a5d      	ldr	r2, [pc, #372]	; (8023890 <HAL_DMA_Abort_IT+0x3d0>)
 802371a:	4293      	cmp	r3, r2
 802371c:	d018      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 802371e:	687b      	ldr	r3, [r7, #4]
 8023720:	681b      	ldr	r3, [r3, #0]
 8023722:	4a5c      	ldr	r2, [pc, #368]	; (8023894 <HAL_DMA_Abort_IT+0x3d4>)
 8023724:	4293      	cmp	r3, r2
 8023726:	d013      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 8023728:	687b      	ldr	r3, [r7, #4]
 802372a:	681b      	ldr	r3, [r3, #0]
 802372c:	4a5a      	ldr	r2, [pc, #360]	; (8023898 <HAL_DMA_Abort_IT+0x3d8>)
 802372e:	4293      	cmp	r3, r2
 8023730:	d00e      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 8023732:	687b      	ldr	r3, [r7, #4]
 8023734:	681b      	ldr	r3, [r3, #0]
 8023736:	4a59      	ldr	r2, [pc, #356]	; (802389c <HAL_DMA_Abort_IT+0x3dc>)
 8023738:	4293      	cmp	r3, r2
 802373a:	d009      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 802373c:	687b      	ldr	r3, [r7, #4]
 802373e:	681b      	ldr	r3, [r3, #0]
 8023740:	4a57      	ldr	r2, [pc, #348]	; (80238a0 <HAL_DMA_Abort_IT+0x3e0>)
 8023742:	4293      	cmp	r3, r2
 8023744:	d004      	beq.n	8023750 <HAL_DMA_Abort_IT+0x290>
 8023746:	687b      	ldr	r3, [r7, #4]
 8023748:	681b      	ldr	r3, [r3, #0]
 802374a:	4a56      	ldr	r2, [pc, #344]	; (80238a4 <HAL_DMA_Abort_IT+0x3e4>)
 802374c:	4293      	cmp	r3, r2
 802374e:	d108      	bne.n	8023762 <HAL_DMA_Abort_IT+0x2a2>
 8023750:	687b      	ldr	r3, [r7, #4]
 8023752:	681b      	ldr	r3, [r3, #0]
 8023754:	681a      	ldr	r2, [r3, #0]
 8023756:	687b      	ldr	r3, [r7, #4]
 8023758:	681b      	ldr	r3, [r3, #0]
 802375a:	f022 0201 	bic.w	r2, r2, #1
 802375e:	601a      	str	r2, [r3, #0]
 8023760:	e007      	b.n	8023772 <HAL_DMA_Abort_IT+0x2b2>
 8023762:	687b      	ldr	r3, [r7, #4]
 8023764:	681b      	ldr	r3, [r3, #0]
 8023766:	681a      	ldr	r2, [r3, #0]
 8023768:	687b      	ldr	r3, [r7, #4]
 802376a:	681b      	ldr	r3, [r3, #0]
 802376c:	f022 0201 	bic.w	r2, r2, #1
 8023770:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8023772:	687b      	ldr	r3, [r7, #4]
 8023774:	681b      	ldr	r3, [r3, #0]
 8023776:	4a3c      	ldr	r2, [pc, #240]	; (8023868 <HAL_DMA_Abort_IT+0x3a8>)
 8023778:	4293      	cmp	r3, r2
 802377a:	d072      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 802377c:	687b      	ldr	r3, [r7, #4]
 802377e:	681b      	ldr	r3, [r3, #0]
 8023780:	4a3a      	ldr	r2, [pc, #232]	; (802386c <HAL_DMA_Abort_IT+0x3ac>)
 8023782:	4293      	cmp	r3, r2
 8023784:	d06d      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 8023786:	687b      	ldr	r3, [r7, #4]
 8023788:	681b      	ldr	r3, [r3, #0]
 802378a:	4a39      	ldr	r2, [pc, #228]	; (8023870 <HAL_DMA_Abort_IT+0x3b0>)
 802378c:	4293      	cmp	r3, r2
 802378e:	d068      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 8023790:	687b      	ldr	r3, [r7, #4]
 8023792:	681b      	ldr	r3, [r3, #0]
 8023794:	4a37      	ldr	r2, [pc, #220]	; (8023874 <HAL_DMA_Abort_IT+0x3b4>)
 8023796:	4293      	cmp	r3, r2
 8023798:	d063      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 802379a:	687b      	ldr	r3, [r7, #4]
 802379c:	681b      	ldr	r3, [r3, #0]
 802379e:	4a36      	ldr	r2, [pc, #216]	; (8023878 <HAL_DMA_Abort_IT+0x3b8>)
 80237a0:	4293      	cmp	r3, r2
 80237a2:	d05e      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 80237a4:	687b      	ldr	r3, [r7, #4]
 80237a6:	681b      	ldr	r3, [r3, #0]
 80237a8:	4a34      	ldr	r2, [pc, #208]	; (802387c <HAL_DMA_Abort_IT+0x3bc>)
 80237aa:	4293      	cmp	r3, r2
 80237ac:	d059      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 80237ae:	687b      	ldr	r3, [r7, #4]
 80237b0:	681b      	ldr	r3, [r3, #0]
 80237b2:	4a33      	ldr	r2, [pc, #204]	; (8023880 <HAL_DMA_Abort_IT+0x3c0>)
 80237b4:	4293      	cmp	r3, r2
 80237b6:	d054      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 80237b8:	687b      	ldr	r3, [r7, #4]
 80237ba:	681b      	ldr	r3, [r3, #0]
 80237bc:	4a31      	ldr	r2, [pc, #196]	; (8023884 <HAL_DMA_Abort_IT+0x3c4>)
 80237be:	4293      	cmp	r3, r2
 80237c0:	d04f      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 80237c2:	687b      	ldr	r3, [r7, #4]
 80237c4:	681b      	ldr	r3, [r3, #0]
 80237c6:	4a30      	ldr	r2, [pc, #192]	; (8023888 <HAL_DMA_Abort_IT+0x3c8>)
 80237c8:	4293      	cmp	r3, r2
 80237ca:	d04a      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 80237cc:	687b      	ldr	r3, [r7, #4]
 80237ce:	681b      	ldr	r3, [r3, #0]
 80237d0:	4a2e      	ldr	r2, [pc, #184]	; (802388c <HAL_DMA_Abort_IT+0x3cc>)
 80237d2:	4293      	cmp	r3, r2
 80237d4:	d045      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 80237d6:	687b      	ldr	r3, [r7, #4]
 80237d8:	681b      	ldr	r3, [r3, #0]
 80237da:	4a2d      	ldr	r2, [pc, #180]	; (8023890 <HAL_DMA_Abort_IT+0x3d0>)
 80237dc:	4293      	cmp	r3, r2
 80237de:	d040      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 80237e0:	687b      	ldr	r3, [r7, #4]
 80237e2:	681b      	ldr	r3, [r3, #0]
 80237e4:	4a2b      	ldr	r2, [pc, #172]	; (8023894 <HAL_DMA_Abort_IT+0x3d4>)
 80237e6:	4293      	cmp	r3, r2
 80237e8:	d03b      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 80237ea:	687b      	ldr	r3, [r7, #4]
 80237ec:	681b      	ldr	r3, [r3, #0]
 80237ee:	4a2a      	ldr	r2, [pc, #168]	; (8023898 <HAL_DMA_Abort_IT+0x3d8>)
 80237f0:	4293      	cmp	r3, r2
 80237f2:	d036      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 80237f4:	687b      	ldr	r3, [r7, #4]
 80237f6:	681b      	ldr	r3, [r3, #0]
 80237f8:	4a28      	ldr	r2, [pc, #160]	; (802389c <HAL_DMA_Abort_IT+0x3dc>)
 80237fa:	4293      	cmp	r3, r2
 80237fc:	d031      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 80237fe:	687b      	ldr	r3, [r7, #4]
 8023800:	681b      	ldr	r3, [r3, #0]
 8023802:	4a27      	ldr	r2, [pc, #156]	; (80238a0 <HAL_DMA_Abort_IT+0x3e0>)
 8023804:	4293      	cmp	r3, r2
 8023806:	d02c      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 8023808:	687b      	ldr	r3, [r7, #4]
 802380a:	681b      	ldr	r3, [r3, #0]
 802380c:	4a25      	ldr	r2, [pc, #148]	; (80238a4 <HAL_DMA_Abort_IT+0x3e4>)
 802380e:	4293      	cmp	r3, r2
 8023810:	d027      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 8023812:	687b      	ldr	r3, [r7, #4]
 8023814:	681b      	ldr	r3, [r3, #0]
 8023816:	4a24      	ldr	r2, [pc, #144]	; (80238a8 <HAL_DMA_Abort_IT+0x3e8>)
 8023818:	4293      	cmp	r3, r2
 802381a:	d022      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 802381c:	687b      	ldr	r3, [r7, #4]
 802381e:	681b      	ldr	r3, [r3, #0]
 8023820:	4a22      	ldr	r2, [pc, #136]	; (80238ac <HAL_DMA_Abort_IT+0x3ec>)
 8023822:	4293      	cmp	r3, r2
 8023824:	d01d      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 8023826:	687b      	ldr	r3, [r7, #4]
 8023828:	681b      	ldr	r3, [r3, #0]
 802382a:	4a21      	ldr	r2, [pc, #132]	; (80238b0 <HAL_DMA_Abort_IT+0x3f0>)
 802382c:	4293      	cmp	r3, r2
 802382e:	d018      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 8023830:	687b      	ldr	r3, [r7, #4]
 8023832:	681b      	ldr	r3, [r3, #0]
 8023834:	4a1f      	ldr	r2, [pc, #124]	; (80238b4 <HAL_DMA_Abort_IT+0x3f4>)
 8023836:	4293      	cmp	r3, r2
 8023838:	d013      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 802383a:	687b      	ldr	r3, [r7, #4]
 802383c:	681b      	ldr	r3, [r3, #0]
 802383e:	4a1e      	ldr	r2, [pc, #120]	; (80238b8 <HAL_DMA_Abort_IT+0x3f8>)
 8023840:	4293      	cmp	r3, r2
 8023842:	d00e      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 8023844:	687b      	ldr	r3, [r7, #4]
 8023846:	681b      	ldr	r3, [r3, #0]
 8023848:	4a1c      	ldr	r2, [pc, #112]	; (80238bc <HAL_DMA_Abort_IT+0x3fc>)
 802384a:	4293      	cmp	r3, r2
 802384c:	d009      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 802384e:	687b      	ldr	r3, [r7, #4]
 8023850:	681b      	ldr	r3, [r3, #0]
 8023852:	4a1b      	ldr	r2, [pc, #108]	; (80238c0 <HAL_DMA_Abort_IT+0x400>)
 8023854:	4293      	cmp	r3, r2
 8023856:	d004      	beq.n	8023862 <HAL_DMA_Abort_IT+0x3a2>
 8023858:	687b      	ldr	r3, [r7, #4]
 802385a:	681b      	ldr	r3, [r3, #0]
 802385c:	4a19      	ldr	r2, [pc, #100]	; (80238c4 <HAL_DMA_Abort_IT+0x404>)
 802385e:	4293      	cmp	r3, r2
 8023860:	d132      	bne.n	80238c8 <HAL_DMA_Abort_IT+0x408>
 8023862:	2301      	movs	r3, #1
 8023864:	e031      	b.n	80238ca <HAL_DMA_Abort_IT+0x40a>
 8023866:	bf00      	nop
 8023868:	40020010 	.word	0x40020010
 802386c:	40020028 	.word	0x40020028
 8023870:	40020040 	.word	0x40020040
 8023874:	40020058 	.word	0x40020058
 8023878:	40020070 	.word	0x40020070
 802387c:	40020088 	.word	0x40020088
 8023880:	400200a0 	.word	0x400200a0
 8023884:	400200b8 	.word	0x400200b8
 8023888:	40020410 	.word	0x40020410
 802388c:	40020428 	.word	0x40020428
 8023890:	40020440 	.word	0x40020440
 8023894:	40020458 	.word	0x40020458
 8023898:	40020470 	.word	0x40020470
 802389c:	40020488 	.word	0x40020488
 80238a0:	400204a0 	.word	0x400204a0
 80238a4:	400204b8 	.word	0x400204b8
 80238a8:	58025408 	.word	0x58025408
 80238ac:	5802541c 	.word	0x5802541c
 80238b0:	58025430 	.word	0x58025430
 80238b4:	58025444 	.word	0x58025444
 80238b8:	58025458 	.word	0x58025458
 80238bc:	5802546c 	.word	0x5802546c
 80238c0:	58025480 	.word	0x58025480
 80238c4:	58025494 	.word	0x58025494
 80238c8:	2300      	movs	r3, #0
 80238ca:	2b00      	cmp	r3, #0
 80238cc:	d028      	beq.n	8023920 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80238ce:	687b      	ldr	r3, [r7, #4]
 80238d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80238d2:	681a      	ldr	r2, [r3, #0]
 80238d4:	687b      	ldr	r3, [r7, #4]
 80238d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80238d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80238dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80238de:	687b      	ldr	r3, [r7, #4]
 80238e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80238e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80238e4:	687b      	ldr	r3, [r7, #4]
 80238e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80238e8:	f003 031f 	and.w	r3, r3, #31
 80238ec:	2201      	movs	r2, #1
 80238ee:	409a      	lsls	r2, r3
 80238f0:	68fb      	ldr	r3, [r7, #12]
 80238f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80238f4:	687b      	ldr	r3, [r7, #4]
 80238f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80238f8:	687a      	ldr	r2, [r7, #4]
 80238fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80238fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80238fe:	687b      	ldr	r3, [r7, #4]
 8023900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023902:	2b00      	cmp	r3, #0
 8023904:	d00c      	beq.n	8023920 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8023906:	687b      	ldr	r3, [r7, #4]
 8023908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802390a:	681a      	ldr	r2, [r3, #0]
 802390c:	687b      	ldr	r3, [r7, #4]
 802390e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023914:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8023916:	687b      	ldr	r3, [r7, #4]
 8023918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802391a:	687a      	ldr	r2, [r7, #4]
 802391c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802391e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8023920:	687b      	ldr	r3, [r7, #4]
 8023922:	2201      	movs	r2, #1
 8023924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8023928:	687b      	ldr	r3, [r7, #4]
 802392a:	2200      	movs	r2, #0
 802392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8023930:	687b      	ldr	r3, [r7, #4]
 8023932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023934:	2b00      	cmp	r3, #0
 8023936:	d003      	beq.n	8023940 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8023938:	687b      	ldr	r3, [r7, #4]
 802393a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802393c:	6878      	ldr	r0, [r7, #4]
 802393e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8023940:	2300      	movs	r3, #0
}
 8023942:	4618      	mov	r0, r3
 8023944:	3710      	adds	r7, #16
 8023946:	46bd      	mov	sp, r7
 8023948:	bd80      	pop	{r7, pc}
 802394a:	bf00      	nop

0802394c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802394c:	b580      	push	{r7, lr}
 802394e:	b08a      	sub	sp, #40	; 0x28
 8023950:	af00      	add	r7, sp, #0
 8023952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8023954:	2300      	movs	r3, #0
 8023956:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8023958:	4b67      	ldr	r3, [pc, #412]	; (8023af8 <HAL_DMA_IRQHandler+0x1ac>)
 802395a:	681b      	ldr	r3, [r3, #0]
 802395c:	4a67      	ldr	r2, [pc, #412]	; (8023afc <HAL_DMA_IRQHandler+0x1b0>)
 802395e:	fba2 2303 	umull	r2, r3, r2, r3
 8023962:	0a9b      	lsrs	r3, r3, #10
 8023964:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8023966:	687b      	ldr	r3, [r7, #4]
 8023968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802396a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802396c:	687b      	ldr	r3, [r7, #4]
 802396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023970:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8023972:	6a3b      	ldr	r3, [r7, #32]
 8023974:	681b      	ldr	r3, [r3, #0]
 8023976:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8023978:	69fb      	ldr	r3, [r7, #28]
 802397a:	681b      	ldr	r3, [r3, #0]
 802397c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 802397e:	687b      	ldr	r3, [r7, #4]
 8023980:	681b      	ldr	r3, [r3, #0]
 8023982:	4a5f      	ldr	r2, [pc, #380]	; (8023b00 <HAL_DMA_IRQHandler+0x1b4>)
 8023984:	4293      	cmp	r3, r2
 8023986:	d04a      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 8023988:	687b      	ldr	r3, [r7, #4]
 802398a:	681b      	ldr	r3, [r3, #0]
 802398c:	4a5d      	ldr	r2, [pc, #372]	; (8023b04 <HAL_DMA_IRQHandler+0x1b8>)
 802398e:	4293      	cmp	r3, r2
 8023990:	d045      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	681b      	ldr	r3, [r3, #0]
 8023996:	4a5c      	ldr	r2, [pc, #368]	; (8023b08 <HAL_DMA_IRQHandler+0x1bc>)
 8023998:	4293      	cmp	r3, r2
 802399a:	d040      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 802399c:	687b      	ldr	r3, [r7, #4]
 802399e:	681b      	ldr	r3, [r3, #0]
 80239a0:	4a5a      	ldr	r2, [pc, #360]	; (8023b0c <HAL_DMA_IRQHandler+0x1c0>)
 80239a2:	4293      	cmp	r3, r2
 80239a4:	d03b      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	681b      	ldr	r3, [r3, #0]
 80239aa:	4a59      	ldr	r2, [pc, #356]	; (8023b10 <HAL_DMA_IRQHandler+0x1c4>)
 80239ac:	4293      	cmp	r3, r2
 80239ae:	d036      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 80239b0:	687b      	ldr	r3, [r7, #4]
 80239b2:	681b      	ldr	r3, [r3, #0]
 80239b4:	4a57      	ldr	r2, [pc, #348]	; (8023b14 <HAL_DMA_IRQHandler+0x1c8>)
 80239b6:	4293      	cmp	r3, r2
 80239b8:	d031      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 80239ba:	687b      	ldr	r3, [r7, #4]
 80239bc:	681b      	ldr	r3, [r3, #0]
 80239be:	4a56      	ldr	r2, [pc, #344]	; (8023b18 <HAL_DMA_IRQHandler+0x1cc>)
 80239c0:	4293      	cmp	r3, r2
 80239c2:	d02c      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 80239c4:	687b      	ldr	r3, [r7, #4]
 80239c6:	681b      	ldr	r3, [r3, #0]
 80239c8:	4a54      	ldr	r2, [pc, #336]	; (8023b1c <HAL_DMA_IRQHandler+0x1d0>)
 80239ca:	4293      	cmp	r3, r2
 80239cc:	d027      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 80239ce:	687b      	ldr	r3, [r7, #4]
 80239d0:	681b      	ldr	r3, [r3, #0]
 80239d2:	4a53      	ldr	r2, [pc, #332]	; (8023b20 <HAL_DMA_IRQHandler+0x1d4>)
 80239d4:	4293      	cmp	r3, r2
 80239d6:	d022      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	681b      	ldr	r3, [r3, #0]
 80239dc:	4a51      	ldr	r2, [pc, #324]	; (8023b24 <HAL_DMA_IRQHandler+0x1d8>)
 80239de:	4293      	cmp	r3, r2
 80239e0:	d01d      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 80239e2:	687b      	ldr	r3, [r7, #4]
 80239e4:	681b      	ldr	r3, [r3, #0]
 80239e6:	4a50      	ldr	r2, [pc, #320]	; (8023b28 <HAL_DMA_IRQHandler+0x1dc>)
 80239e8:	4293      	cmp	r3, r2
 80239ea:	d018      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 80239ec:	687b      	ldr	r3, [r7, #4]
 80239ee:	681b      	ldr	r3, [r3, #0]
 80239f0:	4a4e      	ldr	r2, [pc, #312]	; (8023b2c <HAL_DMA_IRQHandler+0x1e0>)
 80239f2:	4293      	cmp	r3, r2
 80239f4:	d013      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 80239f6:	687b      	ldr	r3, [r7, #4]
 80239f8:	681b      	ldr	r3, [r3, #0]
 80239fa:	4a4d      	ldr	r2, [pc, #308]	; (8023b30 <HAL_DMA_IRQHandler+0x1e4>)
 80239fc:	4293      	cmp	r3, r2
 80239fe:	d00e      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 8023a00:	687b      	ldr	r3, [r7, #4]
 8023a02:	681b      	ldr	r3, [r3, #0]
 8023a04:	4a4b      	ldr	r2, [pc, #300]	; (8023b34 <HAL_DMA_IRQHandler+0x1e8>)
 8023a06:	4293      	cmp	r3, r2
 8023a08:	d009      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 8023a0a:	687b      	ldr	r3, [r7, #4]
 8023a0c:	681b      	ldr	r3, [r3, #0]
 8023a0e:	4a4a      	ldr	r2, [pc, #296]	; (8023b38 <HAL_DMA_IRQHandler+0x1ec>)
 8023a10:	4293      	cmp	r3, r2
 8023a12:	d004      	beq.n	8023a1e <HAL_DMA_IRQHandler+0xd2>
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	681b      	ldr	r3, [r3, #0]
 8023a18:	4a48      	ldr	r2, [pc, #288]	; (8023b3c <HAL_DMA_IRQHandler+0x1f0>)
 8023a1a:	4293      	cmp	r3, r2
 8023a1c:	d101      	bne.n	8023a22 <HAL_DMA_IRQHandler+0xd6>
 8023a1e:	2301      	movs	r3, #1
 8023a20:	e000      	b.n	8023a24 <HAL_DMA_IRQHandler+0xd8>
 8023a22:	2300      	movs	r3, #0
 8023a24:	2b00      	cmp	r3, #0
 8023a26:	f000 842b 	beq.w	8024280 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8023a2a:	687b      	ldr	r3, [r7, #4]
 8023a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a2e:	f003 031f 	and.w	r3, r3, #31
 8023a32:	2208      	movs	r2, #8
 8023a34:	409a      	lsls	r2, r3
 8023a36:	69bb      	ldr	r3, [r7, #24]
 8023a38:	4013      	ands	r3, r2
 8023a3a:	2b00      	cmp	r3, #0
 8023a3c:	f000 80a2 	beq.w	8023b84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8023a40:	687b      	ldr	r3, [r7, #4]
 8023a42:	681b      	ldr	r3, [r3, #0]
 8023a44:	4a2e      	ldr	r2, [pc, #184]	; (8023b00 <HAL_DMA_IRQHandler+0x1b4>)
 8023a46:	4293      	cmp	r3, r2
 8023a48:	d04a      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	681b      	ldr	r3, [r3, #0]
 8023a4e:	4a2d      	ldr	r2, [pc, #180]	; (8023b04 <HAL_DMA_IRQHandler+0x1b8>)
 8023a50:	4293      	cmp	r3, r2
 8023a52:	d045      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023a54:	687b      	ldr	r3, [r7, #4]
 8023a56:	681b      	ldr	r3, [r3, #0]
 8023a58:	4a2b      	ldr	r2, [pc, #172]	; (8023b08 <HAL_DMA_IRQHandler+0x1bc>)
 8023a5a:	4293      	cmp	r3, r2
 8023a5c:	d040      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	681b      	ldr	r3, [r3, #0]
 8023a62:	4a2a      	ldr	r2, [pc, #168]	; (8023b0c <HAL_DMA_IRQHandler+0x1c0>)
 8023a64:	4293      	cmp	r3, r2
 8023a66:	d03b      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023a68:	687b      	ldr	r3, [r7, #4]
 8023a6a:	681b      	ldr	r3, [r3, #0]
 8023a6c:	4a28      	ldr	r2, [pc, #160]	; (8023b10 <HAL_DMA_IRQHandler+0x1c4>)
 8023a6e:	4293      	cmp	r3, r2
 8023a70:	d036      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023a72:	687b      	ldr	r3, [r7, #4]
 8023a74:	681b      	ldr	r3, [r3, #0]
 8023a76:	4a27      	ldr	r2, [pc, #156]	; (8023b14 <HAL_DMA_IRQHandler+0x1c8>)
 8023a78:	4293      	cmp	r3, r2
 8023a7a:	d031      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023a7c:	687b      	ldr	r3, [r7, #4]
 8023a7e:	681b      	ldr	r3, [r3, #0]
 8023a80:	4a25      	ldr	r2, [pc, #148]	; (8023b18 <HAL_DMA_IRQHandler+0x1cc>)
 8023a82:	4293      	cmp	r3, r2
 8023a84:	d02c      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023a86:	687b      	ldr	r3, [r7, #4]
 8023a88:	681b      	ldr	r3, [r3, #0]
 8023a8a:	4a24      	ldr	r2, [pc, #144]	; (8023b1c <HAL_DMA_IRQHandler+0x1d0>)
 8023a8c:	4293      	cmp	r3, r2
 8023a8e:	d027      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023a90:	687b      	ldr	r3, [r7, #4]
 8023a92:	681b      	ldr	r3, [r3, #0]
 8023a94:	4a22      	ldr	r2, [pc, #136]	; (8023b20 <HAL_DMA_IRQHandler+0x1d4>)
 8023a96:	4293      	cmp	r3, r2
 8023a98:	d022      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023a9a:	687b      	ldr	r3, [r7, #4]
 8023a9c:	681b      	ldr	r3, [r3, #0]
 8023a9e:	4a21      	ldr	r2, [pc, #132]	; (8023b24 <HAL_DMA_IRQHandler+0x1d8>)
 8023aa0:	4293      	cmp	r3, r2
 8023aa2:	d01d      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	681b      	ldr	r3, [r3, #0]
 8023aa8:	4a1f      	ldr	r2, [pc, #124]	; (8023b28 <HAL_DMA_IRQHandler+0x1dc>)
 8023aaa:	4293      	cmp	r3, r2
 8023aac:	d018      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023aae:	687b      	ldr	r3, [r7, #4]
 8023ab0:	681b      	ldr	r3, [r3, #0]
 8023ab2:	4a1e      	ldr	r2, [pc, #120]	; (8023b2c <HAL_DMA_IRQHandler+0x1e0>)
 8023ab4:	4293      	cmp	r3, r2
 8023ab6:	d013      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023ab8:	687b      	ldr	r3, [r7, #4]
 8023aba:	681b      	ldr	r3, [r3, #0]
 8023abc:	4a1c      	ldr	r2, [pc, #112]	; (8023b30 <HAL_DMA_IRQHandler+0x1e4>)
 8023abe:	4293      	cmp	r3, r2
 8023ac0:	d00e      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023ac2:	687b      	ldr	r3, [r7, #4]
 8023ac4:	681b      	ldr	r3, [r3, #0]
 8023ac6:	4a1b      	ldr	r2, [pc, #108]	; (8023b34 <HAL_DMA_IRQHandler+0x1e8>)
 8023ac8:	4293      	cmp	r3, r2
 8023aca:	d009      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023acc:	687b      	ldr	r3, [r7, #4]
 8023ace:	681b      	ldr	r3, [r3, #0]
 8023ad0:	4a19      	ldr	r2, [pc, #100]	; (8023b38 <HAL_DMA_IRQHandler+0x1ec>)
 8023ad2:	4293      	cmp	r3, r2
 8023ad4:	d004      	beq.n	8023ae0 <HAL_DMA_IRQHandler+0x194>
 8023ad6:	687b      	ldr	r3, [r7, #4]
 8023ad8:	681b      	ldr	r3, [r3, #0]
 8023ada:	4a18      	ldr	r2, [pc, #96]	; (8023b3c <HAL_DMA_IRQHandler+0x1f0>)
 8023adc:	4293      	cmp	r3, r2
 8023ade:	d12f      	bne.n	8023b40 <HAL_DMA_IRQHandler+0x1f4>
 8023ae0:	687b      	ldr	r3, [r7, #4]
 8023ae2:	681b      	ldr	r3, [r3, #0]
 8023ae4:	681b      	ldr	r3, [r3, #0]
 8023ae6:	f003 0304 	and.w	r3, r3, #4
 8023aea:	2b00      	cmp	r3, #0
 8023aec:	bf14      	ite	ne
 8023aee:	2301      	movne	r3, #1
 8023af0:	2300      	moveq	r3, #0
 8023af2:	b2db      	uxtb	r3, r3
 8023af4:	e02e      	b.n	8023b54 <HAL_DMA_IRQHandler+0x208>
 8023af6:	bf00      	nop
 8023af8:	24000000 	.word	0x24000000
 8023afc:	1b4e81b5 	.word	0x1b4e81b5
 8023b00:	40020010 	.word	0x40020010
 8023b04:	40020028 	.word	0x40020028
 8023b08:	40020040 	.word	0x40020040
 8023b0c:	40020058 	.word	0x40020058
 8023b10:	40020070 	.word	0x40020070
 8023b14:	40020088 	.word	0x40020088
 8023b18:	400200a0 	.word	0x400200a0
 8023b1c:	400200b8 	.word	0x400200b8
 8023b20:	40020410 	.word	0x40020410
 8023b24:	40020428 	.word	0x40020428
 8023b28:	40020440 	.word	0x40020440
 8023b2c:	40020458 	.word	0x40020458
 8023b30:	40020470 	.word	0x40020470
 8023b34:	40020488 	.word	0x40020488
 8023b38:	400204a0 	.word	0x400204a0
 8023b3c:	400204b8 	.word	0x400204b8
 8023b40:	687b      	ldr	r3, [r7, #4]
 8023b42:	681b      	ldr	r3, [r3, #0]
 8023b44:	681b      	ldr	r3, [r3, #0]
 8023b46:	f003 0308 	and.w	r3, r3, #8
 8023b4a:	2b00      	cmp	r3, #0
 8023b4c:	bf14      	ite	ne
 8023b4e:	2301      	movne	r3, #1
 8023b50:	2300      	moveq	r3, #0
 8023b52:	b2db      	uxtb	r3, r3
 8023b54:	2b00      	cmp	r3, #0
 8023b56:	d015      	beq.n	8023b84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	681b      	ldr	r3, [r3, #0]
 8023b5c:	681a      	ldr	r2, [r3, #0]
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	681b      	ldr	r3, [r3, #0]
 8023b62:	f022 0204 	bic.w	r2, r2, #4
 8023b66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023b6c:	f003 031f 	and.w	r3, r3, #31
 8023b70:	2208      	movs	r2, #8
 8023b72:	409a      	lsls	r2, r3
 8023b74:	6a3b      	ldr	r3, [r7, #32]
 8023b76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8023b78:	687b      	ldr	r3, [r7, #4]
 8023b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023b7c:	f043 0201 	orr.w	r2, r3, #1
 8023b80:	687b      	ldr	r3, [r7, #4]
 8023b82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8023b84:	687b      	ldr	r3, [r7, #4]
 8023b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023b88:	f003 031f 	and.w	r3, r3, #31
 8023b8c:	69ba      	ldr	r2, [r7, #24]
 8023b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8023b92:	f003 0301 	and.w	r3, r3, #1
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	d06e      	beq.n	8023c78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8023b9a:	687b      	ldr	r3, [r7, #4]
 8023b9c:	681b      	ldr	r3, [r3, #0]
 8023b9e:	4a69      	ldr	r2, [pc, #420]	; (8023d44 <HAL_DMA_IRQHandler+0x3f8>)
 8023ba0:	4293      	cmp	r3, r2
 8023ba2:	d04a      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023ba4:	687b      	ldr	r3, [r7, #4]
 8023ba6:	681b      	ldr	r3, [r3, #0]
 8023ba8:	4a67      	ldr	r2, [pc, #412]	; (8023d48 <HAL_DMA_IRQHandler+0x3fc>)
 8023baa:	4293      	cmp	r3, r2
 8023bac:	d045      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023bae:	687b      	ldr	r3, [r7, #4]
 8023bb0:	681b      	ldr	r3, [r3, #0]
 8023bb2:	4a66      	ldr	r2, [pc, #408]	; (8023d4c <HAL_DMA_IRQHandler+0x400>)
 8023bb4:	4293      	cmp	r3, r2
 8023bb6:	d040      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023bb8:	687b      	ldr	r3, [r7, #4]
 8023bba:	681b      	ldr	r3, [r3, #0]
 8023bbc:	4a64      	ldr	r2, [pc, #400]	; (8023d50 <HAL_DMA_IRQHandler+0x404>)
 8023bbe:	4293      	cmp	r3, r2
 8023bc0:	d03b      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023bc2:	687b      	ldr	r3, [r7, #4]
 8023bc4:	681b      	ldr	r3, [r3, #0]
 8023bc6:	4a63      	ldr	r2, [pc, #396]	; (8023d54 <HAL_DMA_IRQHandler+0x408>)
 8023bc8:	4293      	cmp	r3, r2
 8023bca:	d036      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023bcc:	687b      	ldr	r3, [r7, #4]
 8023bce:	681b      	ldr	r3, [r3, #0]
 8023bd0:	4a61      	ldr	r2, [pc, #388]	; (8023d58 <HAL_DMA_IRQHandler+0x40c>)
 8023bd2:	4293      	cmp	r3, r2
 8023bd4:	d031      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023bd6:	687b      	ldr	r3, [r7, #4]
 8023bd8:	681b      	ldr	r3, [r3, #0]
 8023bda:	4a60      	ldr	r2, [pc, #384]	; (8023d5c <HAL_DMA_IRQHandler+0x410>)
 8023bdc:	4293      	cmp	r3, r2
 8023bde:	d02c      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023be0:	687b      	ldr	r3, [r7, #4]
 8023be2:	681b      	ldr	r3, [r3, #0]
 8023be4:	4a5e      	ldr	r2, [pc, #376]	; (8023d60 <HAL_DMA_IRQHandler+0x414>)
 8023be6:	4293      	cmp	r3, r2
 8023be8:	d027      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023bea:	687b      	ldr	r3, [r7, #4]
 8023bec:	681b      	ldr	r3, [r3, #0]
 8023bee:	4a5d      	ldr	r2, [pc, #372]	; (8023d64 <HAL_DMA_IRQHandler+0x418>)
 8023bf0:	4293      	cmp	r3, r2
 8023bf2:	d022      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023bf4:	687b      	ldr	r3, [r7, #4]
 8023bf6:	681b      	ldr	r3, [r3, #0]
 8023bf8:	4a5b      	ldr	r2, [pc, #364]	; (8023d68 <HAL_DMA_IRQHandler+0x41c>)
 8023bfa:	4293      	cmp	r3, r2
 8023bfc:	d01d      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023bfe:	687b      	ldr	r3, [r7, #4]
 8023c00:	681b      	ldr	r3, [r3, #0]
 8023c02:	4a5a      	ldr	r2, [pc, #360]	; (8023d6c <HAL_DMA_IRQHandler+0x420>)
 8023c04:	4293      	cmp	r3, r2
 8023c06:	d018      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023c08:	687b      	ldr	r3, [r7, #4]
 8023c0a:	681b      	ldr	r3, [r3, #0]
 8023c0c:	4a58      	ldr	r2, [pc, #352]	; (8023d70 <HAL_DMA_IRQHandler+0x424>)
 8023c0e:	4293      	cmp	r3, r2
 8023c10:	d013      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023c12:	687b      	ldr	r3, [r7, #4]
 8023c14:	681b      	ldr	r3, [r3, #0]
 8023c16:	4a57      	ldr	r2, [pc, #348]	; (8023d74 <HAL_DMA_IRQHandler+0x428>)
 8023c18:	4293      	cmp	r3, r2
 8023c1a:	d00e      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023c1c:	687b      	ldr	r3, [r7, #4]
 8023c1e:	681b      	ldr	r3, [r3, #0]
 8023c20:	4a55      	ldr	r2, [pc, #340]	; (8023d78 <HAL_DMA_IRQHandler+0x42c>)
 8023c22:	4293      	cmp	r3, r2
 8023c24:	d009      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023c26:	687b      	ldr	r3, [r7, #4]
 8023c28:	681b      	ldr	r3, [r3, #0]
 8023c2a:	4a54      	ldr	r2, [pc, #336]	; (8023d7c <HAL_DMA_IRQHandler+0x430>)
 8023c2c:	4293      	cmp	r3, r2
 8023c2e:	d004      	beq.n	8023c3a <HAL_DMA_IRQHandler+0x2ee>
 8023c30:	687b      	ldr	r3, [r7, #4]
 8023c32:	681b      	ldr	r3, [r3, #0]
 8023c34:	4a52      	ldr	r2, [pc, #328]	; (8023d80 <HAL_DMA_IRQHandler+0x434>)
 8023c36:	4293      	cmp	r3, r2
 8023c38:	d10a      	bne.n	8023c50 <HAL_DMA_IRQHandler+0x304>
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	681b      	ldr	r3, [r3, #0]
 8023c3e:	695b      	ldr	r3, [r3, #20]
 8023c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023c44:	2b00      	cmp	r3, #0
 8023c46:	bf14      	ite	ne
 8023c48:	2301      	movne	r3, #1
 8023c4a:	2300      	moveq	r3, #0
 8023c4c:	b2db      	uxtb	r3, r3
 8023c4e:	e003      	b.n	8023c58 <HAL_DMA_IRQHandler+0x30c>
 8023c50:	687b      	ldr	r3, [r7, #4]
 8023c52:	681b      	ldr	r3, [r3, #0]
 8023c54:	681b      	ldr	r3, [r3, #0]
 8023c56:	2300      	movs	r3, #0
 8023c58:	2b00      	cmp	r3, #0
 8023c5a:	d00d      	beq.n	8023c78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8023c5c:	687b      	ldr	r3, [r7, #4]
 8023c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023c60:	f003 031f 	and.w	r3, r3, #31
 8023c64:	2201      	movs	r2, #1
 8023c66:	409a      	lsls	r2, r3
 8023c68:	6a3b      	ldr	r3, [r7, #32]
 8023c6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8023c6c:	687b      	ldr	r3, [r7, #4]
 8023c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023c70:	f043 0202 	orr.w	r2, r3, #2
 8023c74:	687b      	ldr	r3, [r7, #4]
 8023c76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8023c78:	687b      	ldr	r3, [r7, #4]
 8023c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023c7c:	f003 031f 	and.w	r3, r3, #31
 8023c80:	2204      	movs	r2, #4
 8023c82:	409a      	lsls	r2, r3
 8023c84:	69bb      	ldr	r3, [r7, #24]
 8023c86:	4013      	ands	r3, r2
 8023c88:	2b00      	cmp	r3, #0
 8023c8a:	f000 808f 	beq.w	8023dac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8023c8e:	687b      	ldr	r3, [r7, #4]
 8023c90:	681b      	ldr	r3, [r3, #0]
 8023c92:	4a2c      	ldr	r2, [pc, #176]	; (8023d44 <HAL_DMA_IRQHandler+0x3f8>)
 8023c94:	4293      	cmp	r3, r2
 8023c96:	d04a      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023c98:	687b      	ldr	r3, [r7, #4]
 8023c9a:	681b      	ldr	r3, [r3, #0]
 8023c9c:	4a2a      	ldr	r2, [pc, #168]	; (8023d48 <HAL_DMA_IRQHandler+0x3fc>)
 8023c9e:	4293      	cmp	r3, r2
 8023ca0:	d045      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023ca2:	687b      	ldr	r3, [r7, #4]
 8023ca4:	681b      	ldr	r3, [r3, #0]
 8023ca6:	4a29      	ldr	r2, [pc, #164]	; (8023d4c <HAL_DMA_IRQHandler+0x400>)
 8023ca8:	4293      	cmp	r3, r2
 8023caa:	d040      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	681b      	ldr	r3, [r3, #0]
 8023cb0:	4a27      	ldr	r2, [pc, #156]	; (8023d50 <HAL_DMA_IRQHandler+0x404>)
 8023cb2:	4293      	cmp	r3, r2
 8023cb4:	d03b      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023cb6:	687b      	ldr	r3, [r7, #4]
 8023cb8:	681b      	ldr	r3, [r3, #0]
 8023cba:	4a26      	ldr	r2, [pc, #152]	; (8023d54 <HAL_DMA_IRQHandler+0x408>)
 8023cbc:	4293      	cmp	r3, r2
 8023cbe:	d036      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023cc0:	687b      	ldr	r3, [r7, #4]
 8023cc2:	681b      	ldr	r3, [r3, #0]
 8023cc4:	4a24      	ldr	r2, [pc, #144]	; (8023d58 <HAL_DMA_IRQHandler+0x40c>)
 8023cc6:	4293      	cmp	r3, r2
 8023cc8:	d031      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023cca:	687b      	ldr	r3, [r7, #4]
 8023ccc:	681b      	ldr	r3, [r3, #0]
 8023cce:	4a23      	ldr	r2, [pc, #140]	; (8023d5c <HAL_DMA_IRQHandler+0x410>)
 8023cd0:	4293      	cmp	r3, r2
 8023cd2:	d02c      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023cd4:	687b      	ldr	r3, [r7, #4]
 8023cd6:	681b      	ldr	r3, [r3, #0]
 8023cd8:	4a21      	ldr	r2, [pc, #132]	; (8023d60 <HAL_DMA_IRQHandler+0x414>)
 8023cda:	4293      	cmp	r3, r2
 8023cdc:	d027      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023cde:	687b      	ldr	r3, [r7, #4]
 8023ce0:	681b      	ldr	r3, [r3, #0]
 8023ce2:	4a20      	ldr	r2, [pc, #128]	; (8023d64 <HAL_DMA_IRQHandler+0x418>)
 8023ce4:	4293      	cmp	r3, r2
 8023ce6:	d022      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	681b      	ldr	r3, [r3, #0]
 8023cec:	4a1e      	ldr	r2, [pc, #120]	; (8023d68 <HAL_DMA_IRQHandler+0x41c>)
 8023cee:	4293      	cmp	r3, r2
 8023cf0:	d01d      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023cf2:	687b      	ldr	r3, [r7, #4]
 8023cf4:	681b      	ldr	r3, [r3, #0]
 8023cf6:	4a1d      	ldr	r2, [pc, #116]	; (8023d6c <HAL_DMA_IRQHandler+0x420>)
 8023cf8:	4293      	cmp	r3, r2
 8023cfa:	d018      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023cfc:	687b      	ldr	r3, [r7, #4]
 8023cfe:	681b      	ldr	r3, [r3, #0]
 8023d00:	4a1b      	ldr	r2, [pc, #108]	; (8023d70 <HAL_DMA_IRQHandler+0x424>)
 8023d02:	4293      	cmp	r3, r2
 8023d04:	d013      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023d06:	687b      	ldr	r3, [r7, #4]
 8023d08:	681b      	ldr	r3, [r3, #0]
 8023d0a:	4a1a      	ldr	r2, [pc, #104]	; (8023d74 <HAL_DMA_IRQHandler+0x428>)
 8023d0c:	4293      	cmp	r3, r2
 8023d0e:	d00e      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023d10:	687b      	ldr	r3, [r7, #4]
 8023d12:	681b      	ldr	r3, [r3, #0]
 8023d14:	4a18      	ldr	r2, [pc, #96]	; (8023d78 <HAL_DMA_IRQHandler+0x42c>)
 8023d16:	4293      	cmp	r3, r2
 8023d18:	d009      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023d1a:	687b      	ldr	r3, [r7, #4]
 8023d1c:	681b      	ldr	r3, [r3, #0]
 8023d1e:	4a17      	ldr	r2, [pc, #92]	; (8023d7c <HAL_DMA_IRQHandler+0x430>)
 8023d20:	4293      	cmp	r3, r2
 8023d22:	d004      	beq.n	8023d2e <HAL_DMA_IRQHandler+0x3e2>
 8023d24:	687b      	ldr	r3, [r7, #4]
 8023d26:	681b      	ldr	r3, [r3, #0]
 8023d28:	4a15      	ldr	r2, [pc, #84]	; (8023d80 <HAL_DMA_IRQHandler+0x434>)
 8023d2a:	4293      	cmp	r3, r2
 8023d2c:	d12a      	bne.n	8023d84 <HAL_DMA_IRQHandler+0x438>
 8023d2e:	687b      	ldr	r3, [r7, #4]
 8023d30:	681b      	ldr	r3, [r3, #0]
 8023d32:	681b      	ldr	r3, [r3, #0]
 8023d34:	f003 0302 	and.w	r3, r3, #2
 8023d38:	2b00      	cmp	r3, #0
 8023d3a:	bf14      	ite	ne
 8023d3c:	2301      	movne	r3, #1
 8023d3e:	2300      	moveq	r3, #0
 8023d40:	b2db      	uxtb	r3, r3
 8023d42:	e023      	b.n	8023d8c <HAL_DMA_IRQHandler+0x440>
 8023d44:	40020010 	.word	0x40020010
 8023d48:	40020028 	.word	0x40020028
 8023d4c:	40020040 	.word	0x40020040
 8023d50:	40020058 	.word	0x40020058
 8023d54:	40020070 	.word	0x40020070
 8023d58:	40020088 	.word	0x40020088
 8023d5c:	400200a0 	.word	0x400200a0
 8023d60:	400200b8 	.word	0x400200b8
 8023d64:	40020410 	.word	0x40020410
 8023d68:	40020428 	.word	0x40020428
 8023d6c:	40020440 	.word	0x40020440
 8023d70:	40020458 	.word	0x40020458
 8023d74:	40020470 	.word	0x40020470
 8023d78:	40020488 	.word	0x40020488
 8023d7c:	400204a0 	.word	0x400204a0
 8023d80:	400204b8 	.word	0x400204b8
 8023d84:	687b      	ldr	r3, [r7, #4]
 8023d86:	681b      	ldr	r3, [r3, #0]
 8023d88:	681b      	ldr	r3, [r3, #0]
 8023d8a:	2300      	movs	r3, #0
 8023d8c:	2b00      	cmp	r3, #0
 8023d8e:	d00d      	beq.n	8023dac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8023d90:	687b      	ldr	r3, [r7, #4]
 8023d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023d94:	f003 031f 	and.w	r3, r3, #31
 8023d98:	2204      	movs	r2, #4
 8023d9a:	409a      	lsls	r2, r3
 8023d9c:	6a3b      	ldr	r3, [r7, #32]
 8023d9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8023da0:	687b      	ldr	r3, [r7, #4]
 8023da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023da4:	f043 0204 	orr.w	r2, r3, #4
 8023da8:	687b      	ldr	r3, [r7, #4]
 8023daa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8023dac:	687b      	ldr	r3, [r7, #4]
 8023dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023db0:	f003 031f 	and.w	r3, r3, #31
 8023db4:	2210      	movs	r2, #16
 8023db6:	409a      	lsls	r2, r3
 8023db8:	69bb      	ldr	r3, [r7, #24]
 8023dba:	4013      	ands	r3, r2
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	f000 80a6 	beq.w	8023f0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8023dc2:	687b      	ldr	r3, [r7, #4]
 8023dc4:	681b      	ldr	r3, [r3, #0]
 8023dc6:	4a85      	ldr	r2, [pc, #532]	; (8023fdc <HAL_DMA_IRQHandler+0x690>)
 8023dc8:	4293      	cmp	r3, r2
 8023dca:	d04a      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023dcc:	687b      	ldr	r3, [r7, #4]
 8023dce:	681b      	ldr	r3, [r3, #0]
 8023dd0:	4a83      	ldr	r2, [pc, #524]	; (8023fe0 <HAL_DMA_IRQHandler+0x694>)
 8023dd2:	4293      	cmp	r3, r2
 8023dd4:	d045      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023dd6:	687b      	ldr	r3, [r7, #4]
 8023dd8:	681b      	ldr	r3, [r3, #0]
 8023dda:	4a82      	ldr	r2, [pc, #520]	; (8023fe4 <HAL_DMA_IRQHandler+0x698>)
 8023ddc:	4293      	cmp	r3, r2
 8023dde:	d040      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023de0:	687b      	ldr	r3, [r7, #4]
 8023de2:	681b      	ldr	r3, [r3, #0]
 8023de4:	4a80      	ldr	r2, [pc, #512]	; (8023fe8 <HAL_DMA_IRQHandler+0x69c>)
 8023de6:	4293      	cmp	r3, r2
 8023de8:	d03b      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023dea:	687b      	ldr	r3, [r7, #4]
 8023dec:	681b      	ldr	r3, [r3, #0]
 8023dee:	4a7f      	ldr	r2, [pc, #508]	; (8023fec <HAL_DMA_IRQHandler+0x6a0>)
 8023df0:	4293      	cmp	r3, r2
 8023df2:	d036      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023df4:	687b      	ldr	r3, [r7, #4]
 8023df6:	681b      	ldr	r3, [r3, #0]
 8023df8:	4a7d      	ldr	r2, [pc, #500]	; (8023ff0 <HAL_DMA_IRQHandler+0x6a4>)
 8023dfa:	4293      	cmp	r3, r2
 8023dfc:	d031      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023dfe:	687b      	ldr	r3, [r7, #4]
 8023e00:	681b      	ldr	r3, [r3, #0]
 8023e02:	4a7c      	ldr	r2, [pc, #496]	; (8023ff4 <HAL_DMA_IRQHandler+0x6a8>)
 8023e04:	4293      	cmp	r3, r2
 8023e06:	d02c      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023e08:	687b      	ldr	r3, [r7, #4]
 8023e0a:	681b      	ldr	r3, [r3, #0]
 8023e0c:	4a7a      	ldr	r2, [pc, #488]	; (8023ff8 <HAL_DMA_IRQHandler+0x6ac>)
 8023e0e:	4293      	cmp	r3, r2
 8023e10:	d027      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023e12:	687b      	ldr	r3, [r7, #4]
 8023e14:	681b      	ldr	r3, [r3, #0]
 8023e16:	4a79      	ldr	r2, [pc, #484]	; (8023ffc <HAL_DMA_IRQHandler+0x6b0>)
 8023e18:	4293      	cmp	r3, r2
 8023e1a:	d022      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023e1c:	687b      	ldr	r3, [r7, #4]
 8023e1e:	681b      	ldr	r3, [r3, #0]
 8023e20:	4a77      	ldr	r2, [pc, #476]	; (8024000 <HAL_DMA_IRQHandler+0x6b4>)
 8023e22:	4293      	cmp	r3, r2
 8023e24:	d01d      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023e26:	687b      	ldr	r3, [r7, #4]
 8023e28:	681b      	ldr	r3, [r3, #0]
 8023e2a:	4a76      	ldr	r2, [pc, #472]	; (8024004 <HAL_DMA_IRQHandler+0x6b8>)
 8023e2c:	4293      	cmp	r3, r2
 8023e2e:	d018      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023e30:	687b      	ldr	r3, [r7, #4]
 8023e32:	681b      	ldr	r3, [r3, #0]
 8023e34:	4a74      	ldr	r2, [pc, #464]	; (8024008 <HAL_DMA_IRQHandler+0x6bc>)
 8023e36:	4293      	cmp	r3, r2
 8023e38:	d013      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023e3a:	687b      	ldr	r3, [r7, #4]
 8023e3c:	681b      	ldr	r3, [r3, #0]
 8023e3e:	4a73      	ldr	r2, [pc, #460]	; (802400c <HAL_DMA_IRQHandler+0x6c0>)
 8023e40:	4293      	cmp	r3, r2
 8023e42:	d00e      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023e44:	687b      	ldr	r3, [r7, #4]
 8023e46:	681b      	ldr	r3, [r3, #0]
 8023e48:	4a71      	ldr	r2, [pc, #452]	; (8024010 <HAL_DMA_IRQHandler+0x6c4>)
 8023e4a:	4293      	cmp	r3, r2
 8023e4c:	d009      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023e4e:	687b      	ldr	r3, [r7, #4]
 8023e50:	681b      	ldr	r3, [r3, #0]
 8023e52:	4a70      	ldr	r2, [pc, #448]	; (8024014 <HAL_DMA_IRQHandler+0x6c8>)
 8023e54:	4293      	cmp	r3, r2
 8023e56:	d004      	beq.n	8023e62 <HAL_DMA_IRQHandler+0x516>
 8023e58:	687b      	ldr	r3, [r7, #4]
 8023e5a:	681b      	ldr	r3, [r3, #0]
 8023e5c:	4a6e      	ldr	r2, [pc, #440]	; (8024018 <HAL_DMA_IRQHandler+0x6cc>)
 8023e5e:	4293      	cmp	r3, r2
 8023e60:	d10a      	bne.n	8023e78 <HAL_DMA_IRQHandler+0x52c>
 8023e62:	687b      	ldr	r3, [r7, #4]
 8023e64:	681b      	ldr	r3, [r3, #0]
 8023e66:	681b      	ldr	r3, [r3, #0]
 8023e68:	f003 0308 	and.w	r3, r3, #8
 8023e6c:	2b00      	cmp	r3, #0
 8023e6e:	bf14      	ite	ne
 8023e70:	2301      	movne	r3, #1
 8023e72:	2300      	moveq	r3, #0
 8023e74:	b2db      	uxtb	r3, r3
 8023e76:	e009      	b.n	8023e8c <HAL_DMA_IRQHandler+0x540>
 8023e78:	687b      	ldr	r3, [r7, #4]
 8023e7a:	681b      	ldr	r3, [r3, #0]
 8023e7c:	681b      	ldr	r3, [r3, #0]
 8023e7e:	f003 0304 	and.w	r3, r3, #4
 8023e82:	2b00      	cmp	r3, #0
 8023e84:	bf14      	ite	ne
 8023e86:	2301      	movne	r3, #1
 8023e88:	2300      	moveq	r3, #0
 8023e8a:	b2db      	uxtb	r3, r3
 8023e8c:	2b00      	cmp	r3, #0
 8023e8e:	d03e      	beq.n	8023f0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8023e90:	687b      	ldr	r3, [r7, #4]
 8023e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023e94:	f003 031f 	and.w	r3, r3, #31
 8023e98:	2210      	movs	r2, #16
 8023e9a:	409a      	lsls	r2, r3
 8023e9c:	6a3b      	ldr	r3, [r7, #32]
 8023e9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8023ea0:	687b      	ldr	r3, [r7, #4]
 8023ea2:	681b      	ldr	r3, [r3, #0]
 8023ea4:	681b      	ldr	r3, [r3, #0]
 8023ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023eaa:	2b00      	cmp	r3, #0
 8023eac:	d018      	beq.n	8023ee0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8023eae:	687b      	ldr	r3, [r7, #4]
 8023eb0:	681b      	ldr	r3, [r3, #0]
 8023eb2:	681b      	ldr	r3, [r3, #0]
 8023eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8023eb8:	2b00      	cmp	r3, #0
 8023eba:	d108      	bne.n	8023ece <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8023ebc:	687b      	ldr	r3, [r7, #4]
 8023ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023ec0:	2b00      	cmp	r3, #0
 8023ec2:	d024      	beq.n	8023f0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8023ec4:	687b      	ldr	r3, [r7, #4]
 8023ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023ec8:	6878      	ldr	r0, [r7, #4]
 8023eca:	4798      	blx	r3
 8023ecc:	e01f      	b.n	8023f0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8023ece:	687b      	ldr	r3, [r7, #4]
 8023ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023ed2:	2b00      	cmp	r3, #0
 8023ed4:	d01b      	beq.n	8023f0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8023ed6:	687b      	ldr	r3, [r7, #4]
 8023ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023eda:	6878      	ldr	r0, [r7, #4]
 8023edc:	4798      	blx	r3
 8023ede:	e016      	b.n	8023f0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8023ee0:	687b      	ldr	r3, [r7, #4]
 8023ee2:	681b      	ldr	r3, [r3, #0]
 8023ee4:	681b      	ldr	r3, [r3, #0]
 8023ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023eea:	2b00      	cmp	r3, #0
 8023eec:	d107      	bne.n	8023efe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8023eee:	687b      	ldr	r3, [r7, #4]
 8023ef0:	681b      	ldr	r3, [r3, #0]
 8023ef2:	681a      	ldr	r2, [r3, #0]
 8023ef4:	687b      	ldr	r3, [r7, #4]
 8023ef6:	681b      	ldr	r3, [r3, #0]
 8023ef8:	f022 0208 	bic.w	r2, r2, #8
 8023efc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8023efe:	687b      	ldr	r3, [r7, #4]
 8023f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023f02:	2b00      	cmp	r3, #0
 8023f04:	d003      	beq.n	8023f0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8023f06:	687b      	ldr	r3, [r7, #4]
 8023f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023f0a:	6878      	ldr	r0, [r7, #4]
 8023f0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8023f0e:	687b      	ldr	r3, [r7, #4]
 8023f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023f12:	f003 031f 	and.w	r3, r3, #31
 8023f16:	2220      	movs	r2, #32
 8023f18:	409a      	lsls	r2, r3
 8023f1a:	69bb      	ldr	r3, [r7, #24]
 8023f1c:	4013      	ands	r3, r2
 8023f1e:	2b00      	cmp	r3, #0
 8023f20:	f000 8110 	beq.w	8024144 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8023f24:	687b      	ldr	r3, [r7, #4]
 8023f26:	681b      	ldr	r3, [r3, #0]
 8023f28:	4a2c      	ldr	r2, [pc, #176]	; (8023fdc <HAL_DMA_IRQHandler+0x690>)
 8023f2a:	4293      	cmp	r3, r2
 8023f2c:	d04a      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023f2e:	687b      	ldr	r3, [r7, #4]
 8023f30:	681b      	ldr	r3, [r3, #0]
 8023f32:	4a2b      	ldr	r2, [pc, #172]	; (8023fe0 <HAL_DMA_IRQHandler+0x694>)
 8023f34:	4293      	cmp	r3, r2
 8023f36:	d045      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023f38:	687b      	ldr	r3, [r7, #4]
 8023f3a:	681b      	ldr	r3, [r3, #0]
 8023f3c:	4a29      	ldr	r2, [pc, #164]	; (8023fe4 <HAL_DMA_IRQHandler+0x698>)
 8023f3e:	4293      	cmp	r3, r2
 8023f40:	d040      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023f42:	687b      	ldr	r3, [r7, #4]
 8023f44:	681b      	ldr	r3, [r3, #0]
 8023f46:	4a28      	ldr	r2, [pc, #160]	; (8023fe8 <HAL_DMA_IRQHandler+0x69c>)
 8023f48:	4293      	cmp	r3, r2
 8023f4a:	d03b      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023f4c:	687b      	ldr	r3, [r7, #4]
 8023f4e:	681b      	ldr	r3, [r3, #0]
 8023f50:	4a26      	ldr	r2, [pc, #152]	; (8023fec <HAL_DMA_IRQHandler+0x6a0>)
 8023f52:	4293      	cmp	r3, r2
 8023f54:	d036      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023f56:	687b      	ldr	r3, [r7, #4]
 8023f58:	681b      	ldr	r3, [r3, #0]
 8023f5a:	4a25      	ldr	r2, [pc, #148]	; (8023ff0 <HAL_DMA_IRQHandler+0x6a4>)
 8023f5c:	4293      	cmp	r3, r2
 8023f5e:	d031      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023f60:	687b      	ldr	r3, [r7, #4]
 8023f62:	681b      	ldr	r3, [r3, #0]
 8023f64:	4a23      	ldr	r2, [pc, #140]	; (8023ff4 <HAL_DMA_IRQHandler+0x6a8>)
 8023f66:	4293      	cmp	r3, r2
 8023f68:	d02c      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023f6a:	687b      	ldr	r3, [r7, #4]
 8023f6c:	681b      	ldr	r3, [r3, #0]
 8023f6e:	4a22      	ldr	r2, [pc, #136]	; (8023ff8 <HAL_DMA_IRQHandler+0x6ac>)
 8023f70:	4293      	cmp	r3, r2
 8023f72:	d027      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023f74:	687b      	ldr	r3, [r7, #4]
 8023f76:	681b      	ldr	r3, [r3, #0]
 8023f78:	4a20      	ldr	r2, [pc, #128]	; (8023ffc <HAL_DMA_IRQHandler+0x6b0>)
 8023f7a:	4293      	cmp	r3, r2
 8023f7c:	d022      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023f7e:	687b      	ldr	r3, [r7, #4]
 8023f80:	681b      	ldr	r3, [r3, #0]
 8023f82:	4a1f      	ldr	r2, [pc, #124]	; (8024000 <HAL_DMA_IRQHandler+0x6b4>)
 8023f84:	4293      	cmp	r3, r2
 8023f86:	d01d      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023f88:	687b      	ldr	r3, [r7, #4]
 8023f8a:	681b      	ldr	r3, [r3, #0]
 8023f8c:	4a1d      	ldr	r2, [pc, #116]	; (8024004 <HAL_DMA_IRQHandler+0x6b8>)
 8023f8e:	4293      	cmp	r3, r2
 8023f90:	d018      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023f92:	687b      	ldr	r3, [r7, #4]
 8023f94:	681b      	ldr	r3, [r3, #0]
 8023f96:	4a1c      	ldr	r2, [pc, #112]	; (8024008 <HAL_DMA_IRQHandler+0x6bc>)
 8023f98:	4293      	cmp	r3, r2
 8023f9a:	d013      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023f9c:	687b      	ldr	r3, [r7, #4]
 8023f9e:	681b      	ldr	r3, [r3, #0]
 8023fa0:	4a1a      	ldr	r2, [pc, #104]	; (802400c <HAL_DMA_IRQHandler+0x6c0>)
 8023fa2:	4293      	cmp	r3, r2
 8023fa4:	d00e      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023fa6:	687b      	ldr	r3, [r7, #4]
 8023fa8:	681b      	ldr	r3, [r3, #0]
 8023faa:	4a19      	ldr	r2, [pc, #100]	; (8024010 <HAL_DMA_IRQHandler+0x6c4>)
 8023fac:	4293      	cmp	r3, r2
 8023fae:	d009      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023fb0:	687b      	ldr	r3, [r7, #4]
 8023fb2:	681b      	ldr	r3, [r3, #0]
 8023fb4:	4a17      	ldr	r2, [pc, #92]	; (8024014 <HAL_DMA_IRQHandler+0x6c8>)
 8023fb6:	4293      	cmp	r3, r2
 8023fb8:	d004      	beq.n	8023fc4 <HAL_DMA_IRQHandler+0x678>
 8023fba:	687b      	ldr	r3, [r7, #4]
 8023fbc:	681b      	ldr	r3, [r3, #0]
 8023fbe:	4a16      	ldr	r2, [pc, #88]	; (8024018 <HAL_DMA_IRQHandler+0x6cc>)
 8023fc0:	4293      	cmp	r3, r2
 8023fc2:	d12b      	bne.n	802401c <HAL_DMA_IRQHandler+0x6d0>
 8023fc4:	687b      	ldr	r3, [r7, #4]
 8023fc6:	681b      	ldr	r3, [r3, #0]
 8023fc8:	681b      	ldr	r3, [r3, #0]
 8023fca:	f003 0310 	and.w	r3, r3, #16
 8023fce:	2b00      	cmp	r3, #0
 8023fd0:	bf14      	ite	ne
 8023fd2:	2301      	movne	r3, #1
 8023fd4:	2300      	moveq	r3, #0
 8023fd6:	b2db      	uxtb	r3, r3
 8023fd8:	e02a      	b.n	8024030 <HAL_DMA_IRQHandler+0x6e4>
 8023fda:	bf00      	nop
 8023fdc:	40020010 	.word	0x40020010
 8023fe0:	40020028 	.word	0x40020028
 8023fe4:	40020040 	.word	0x40020040
 8023fe8:	40020058 	.word	0x40020058
 8023fec:	40020070 	.word	0x40020070
 8023ff0:	40020088 	.word	0x40020088
 8023ff4:	400200a0 	.word	0x400200a0
 8023ff8:	400200b8 	.word	0x400200b8
 8023ffc:	40020410 	.word	0x40020410
 8024000:	40020428 	.word	0x40020428
 8024004:	40020440 	.word	0x40020440
 8024008:	40020458 	.word	0x40020458
 802400c:	40020470 	.word	0x40020470
 8024010:	40020488 	.word	0x40020488
 8024014:	400204a0 	.word	0x400204a0
 8024018:	400204b8 	.word	0x400204b8
 802401c:	687b      	ldr	r3, [r7, #4]
 802401e:	681b      	ldr	r3, [r3, #0]
 8024020:	681b      	ldr	r3, [r3, #0]
 8024022:	f003 0302 	and.w	r3, r3, #2
 8024026:	2b00      	cmp	r3, #0
 8024028:	bf14      	ite	ne
 802402a:	2301      	movne	r3, #1
 802402c:	2300      	moveq	r3, #0
 802402e:	b2db      	uxtb	r3, r3
 8024030:	2b00      	cmp	r3, #0
 8024032:	f000 8087 	beq.w	8024144 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8024036:	687b      	ldr	r3, [r7, #4]
 8024038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802403a:	f003 031f 	and.w	r3, r3, #31
 802403e:	2220      	movs	r2, #32
 8024040:	409a      	lsls	r2, r3
 8024042:	6a3b      	ldr	r3, [r7, #32]
 8024044:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8024046:	687b      	ldr	r3, [r7, #4]
 8024048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802404c:	b2db      	uxtb	r3, r3
 802404e:	2b04      	cmp	r3, #4
 8024050:	d139      	bne.n	80240c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8024052:	687b      	ldr	r3, [r7, #4]
 8024054:	681b      	ldr	r3, [r3, #0]
 8024056:	681a      	ldr	r2, [r3, #0]
 8024058:	687b      	ldr	r3, [r7, #4]
 802405a:	681b      	ldr	r3, [r3, #0]
 802405c:	f022 0216 	bic.w	r2, r2, #22
 8024060:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8024062:	687b      	ldr	r3, [r7, #4]
 8024064:	681b      	ldr	r3, [r3, #0]
 8024066:	695a      	ldr	r2, [r3, #20]
 8024068:	687b      	ldr	r3, [r7, #4]
 802406a:	681b      	ldr	r3, [r3, #0]
 802406c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8024070:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8024072:	687b      	ldr	r3, [r7, #4]
 8024074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024076:	2b00      	cmp	r3, #0
 8024078:	d103      	bne.n	8024082 <HAL_DMA_IRQHandler+0x736>
 802407a:	687b      	ldr	r3, [r7, #4]
 802407c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802407e:	2b00      	cmp	r3, #0
 8024080:	d007      	beq.n	8024092 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8024082:	687b      	ldr	r3, [r7, #4]
 8024084:	681b      	ldr	r3, [r3, #0]
 8024086:	681a      	ldr	r2, [r3, #0]
 8024088:	687b      	ldr	r3, [r7, #4]
 802408a:	681b      	ldr	r3, [r3, #0]
 802408c:	f022 0208 	bic.w	r2, r2, #8
 8024090:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8024092:	687b      	ldr	r3, [r7, #4]
 8024094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024096:	f003 031f 	and.w	r3, r3, #31
 802409a:	223f      	movs	r2, #63	; 0x3f
 802409c:	409a      	lsls	r2, r3
 802409e:	6a3b      	ldr	r3, [r7, #32]
 80240a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80240a2:	687b      	ldr	r3, [r7, #4]
 80240a4:	2201      	movs	r2, #1
 80240a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80240aa:	687b      	ldr	r3, [r7, #4]
 80240ac:	2200      	movs	r2, #0
 80240ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80240b2:	687b      	ldr	r3, [r7, #4]
 80240b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80240b6:	2b00      	cmp	r3, #0
 80240b8:	f000 834a 	beq.w	8024750 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80240bc:	687b      	ldr	r3, [r7, #4]
 80240be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80240c0:	6878      	ldr	r0, [r7, #4]
 80240c2:	4798      	blx	r3
          }
          return;
 80240c4:	e344      	b.n	8024750 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80240c6:	687b      	ldr	r3, [r7, #4]
 80240c8:	681b      	ldr	r3, [r3, #0]
 80240ca:	681b      	ldr	r3, [r3, #0]
 80240cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80240d0:	2b00      	cmp	r3, #0
 80240d2:	d018      	beq.n	8024106 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80240d4:	687b      	ldr	r3, [r7, #4]
 80240d6:	681b      	ldr	r3, [r3, #0]
 80240d8:	681b      	ldr	r3, [r3, #0]
 80240da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80240de:	2b00      	cmp	r3, #0
 80240e0:	d108      	bne.n	80240f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80240e2:	687b      	ldr	r3, [r7, #4]
 80240e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80240e6:	2b00      	cmp	r3, #0
 80240e8:	d02c      	beq.n	8024144 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80240ea:	687b      	ldr	r3, [r7, #4]
 80240ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80240ee:	6878      	ldr	r0, [r7, #4]
 80240f0:	4798      	blx	r3
 80240f2:	e027      	b.n	8024144 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80240f8:	2b00      	cmp	r3, #0
 80240fa:	d023      	beq.n	8024144 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80240fc:	687b      	ldr	r3, [r7, #4]
 80240fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024100:	6878      	ldr	r0, [r7, #4]
 8024102:	4798      	blx	r3
 8024104:	e01e      	b.n	8024144 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8024106:	687b      	ldr	r3, [r7, #4]
 8024108:	681b      	ldr	r3, [r3, #0]
 802410a:	681b      	ldr	r3, [r3, #0]
 802410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024110:	2b00      	cmp	r3, #0
 8024112:	d10f      	bne.n	8024134 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8024114:	687b      	ldr	r3, [r7, #4]
 8024116:	681b      	ldr	r3, [r3, #0]
 8024118:	681a      	ldr	r2, [r3, #0]
 802411a:	687b      	ldr	r3, [r7, #4]
 802411c:	681b      	ldr	r3, [r3, #0]
 802411e:	f022 0210 	bic.w	r2, r2, #16
 8024122:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8024124:	687b      	ldr	r3, [r7, #4]
 8024126:	2201      	movs	r2, #1
 8024128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 802412c:	687b      	ldr	r3, [r7, #4]
 802412e:	2200      	movs	r2, #0
 8024130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8024134:	687b      	ldr	r3, [r7, #4]
 8024136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024138:	2b00      	cmp	r3, #0
 802413a:	d003      	beq.n	8024144 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 802413c:	687b      	ldr	r3, [r7, #4]
 802413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024140:	6878      	ldr	r0, [r7, #4]
 8024142:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8024144:	687b      	ldr	r3, [r7, #4]
 8024146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024148:	2b00      	cmp	r3, #0
 802414a:	f000 8306 	beq.w	802475a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 802414e:	687b      	ldr	r3, [r7, #4]
 8024150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024152:	f003 0301 	and.w	r3, r3, #1
 8024156:	2b00      	cmp	r3, #0
 8024158:	f000 8088 	beq.w	802426c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 802415c:	687b      	ldr	r3, [r7, #4]
 802415e:	2204      	movs	r2, #4
 8024160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8024164:	687b      	ldr	r3, [r7, #4]
 8024166:	681b      	ldr	r3, [r3, #0]
 8024168:	4a7a      	ldr	r2, [pc, #488]	; (8024354 <HAL_DMA_IRQHandler+0xa08>)
 802416a:	4293      	cmp	r3, r2
 802416c:	d04a      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 802416e:	687b      	ldr	r3, [r7, #4]
 8024170:	681b      	ldr	r3, [r3, #0]
 8024172:	4a79      	ldr	r2, [pc, #484]	; (8024358 <HAL_DMA_IRQHandler+0xa0c>)
 8024174:	4293      	cmp	r3, r2
 8024176:	d045      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 8024178:	687b      	ldr	r3, [r7, #4]
 802417a:	681b      	ldr	r3, [r3, #0]
 802417c:	4a77      	ldr	r2, [pc, #476]	; (802435c <HAL_DMA_IRQHandler+0xa10>)
 802417e:	4293      	cmp	r3, r2
 8024180:	d040      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 8024182:	687b      	ldr	r3, [r7, #4]
 8024184:	681b      	ldr	r3, [r3, #0]
 8024186:	4a76      	ldr	r2, [pc, #472]	; (8024360 <HAL_DMA_IRQHandler+0xa14>)
 8024188:	4293      	cmp	r3, r2
 802418a:	d03b      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 802418c:	687b      	ldr	r3, [r7, #4]
 802418e:	681b      	ldr	r3, [r3, #0]
 8024190:	4a74      	ldr	r2, [pc, #464]	; (8024364 <HAL_DMA_IRQHandler+0xa18>)
 8024192:	4293      	cmp	r3, r2
 8024194:	d036      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 8024196:	687b      	ldr	r3, [r7, #4]
 8024198:	681b      	ldr	r3, [r3, #0]
 802419a:	4a73      	ldr	r2, [pc, #460]	; (8024368 <HAL_DMA_IRQHandler+0xa1c>)
 802419c:	4293      	cmp	r3, r2
 802419e:	d031      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 80241a0:	687b      	ldr	r3, [r7, #4]
 80241a2:	681b      	ldr	r3, [r3, #0]
 80241a4:	4a71      	ldr	r2, [pc, #452]	; (802436c <HAL_DMA_IRQHandler+0xa20>)
 80241a6:	4293      	cmp	r3, r2
 80241a8:	d02c      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 80241aa:	687b      	ldr	r3, [r7, #4]
 80241ac:	681b      	ldr	r3, [r3, #0]
 80241ae:	4a70      	ldr	r2, [pc, #448]	; (8024370 <HAL_DMA_IRQHandler+0xa24>)
 80241b0:	4293      	cmp	r3, r2
 80241b2:	d027      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 80241b4:	687b      	ldr	r3, [r7, #4]
 80241b6:	681b      	ldr	r3, [r3, #0]
 80241b8:	4a6e      	ldr	r2, [pc, #440]	; (8024374 <HAL_DMA_IRQHandler+0xa28>)
 80241ba:	4293      	cmp	r3, r2
 80241bc:	d022      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 80241be:	687b      	ldr	r3, [r7, #4]
 80241c0:	681b      	ldr	r3, [r3, #0]
 80241c2:	4a6d      	ldr	r2, [pc, #436]	; (8024378 <HAL_DMA_IRQHandler+0xa2c>)
 80241c4:	4293      	cmp	r3, r2
 80241c6:	d01d      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 80241c8:	687b      	ldr	r3, [r7, #4]
 80241ca:	681b      	ldr	r3, [r3, #0]
 80241cc:	4a6b      	ldr	r2, [pc, #428]	; (802437c <HAL_DMA_IRQHandler+0xa30>)
 80241ce:	4293      	cmp	r3, r2
 80241d0:	d018      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 80241d2:	687b      	ldr	r3, [r7, #4]
 80241d4:	681b      	ldr	r3, [r3, #0]
 80241d6:	4a6a      	ldr	r2, [pc, #424]	; (8024380 <HAL_DMA_IRQHandler+0xa34>)
 80241d8:	4293      	cmp	r3, r2
 80241da:	d013      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 80241dc:	687b      	ldr	r3, [r7, #4]
 80241de:	681b      	ldr	r3, [r3, #0]
 80241e0:	4a68      	ldr	r2, [pc, #416]	; (8024384 <HAL_DMA_IRQHandler+0xa38>)
 80241e2:	4293      	cmp	r3, r2
 80241e4:	d00e      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 80241e6:	687b      	ldr	r3, [r7, #4]
 80241e8:	681b      	ldr	r3, [r3, #0]
 80241ea:	4a67      	ldr	r2, [pc, #412]	; (8024388 <HAL_DMA_IRQHandler+0xa3c>)
 80241ec:	4293      	cmp	r3, r2
 80241ee:	d009      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 80241f0:	687b      	ldr	r3, [r7, #4]
 80241f2:	681b      	ldr	r3, [r3, #0]
 80241f4:	4a65      	ldr	r2, [pc, #404]	; (802438c <HAL_DMA_IRQHandler+0xa40>)
 80241f6:	4293      	cmp	r3, r2
 80241f8:	d004      	beq.n	8024204 <HAL_DMA_IRQHandler+0x8b8>
 80241fa:	687b      	ldr	r3, [r7, #4]
 80241fc:	681b      	ldr	r3, [r3, #0]
 80241fe:	4a64      	ldr	r2, [pc, #400]	; (8024390 <HAL_DMA_IRQHandler+0xa44>)
 8024200:	4293      	cmp	r3, r2
 8024202:	d108      	bne.n	8024216 <HAL_DMA_IRQHandler+0x8ca>
 8024204:	687b      	ldr	r3, [r7, #4]
 8024206:	681b      	ldr	r3, [r3, #0]
 8024208:	681a      	ldr	r2, [r3, #0]
 802420a:	687b      	ldr	r3, [r7, #4]
 802420c:	681b      	ldr	r3, [r3, #0]
 802420e:	f022 0201 	bic.w	r2, r2, #1
 8024212:	601a      	str	r2, [r3, #0]
 8024214:	e007      	b.n	8024226 <HAL_DMA_IRQHandler+0x8da>
 8024216:	687b      	ldr	r3, [r7, #4]
 8024218:	681b      	ldr	r3, [r3, #0]
 802421a:	681a      	ldr	r2, [r3, #0]
 802421c:	687b      	ldr	r3, [r7, #4]
 802421e:	681b      	ldr	r3, [r3, #0]
 8024220:	f022 0201 	bic.w	r2, r2, #1
 8024224:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8024226:	68fb      	ldr	r3, [r7, #12]
 8024228:	3301      	adds	r3, #1
 802422a:	60fb      	str	r3, [r7, #12]
 802422c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802422e:	429a      	cmp	r2, r3
 8024230:	d307      	bcc.n	8024242 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8024232:	687b      	ldr	r3, [r7, #4]
 8024234:	681b      	ldr	r3, [r3, #0]
 8024236:	681b      	ldr	r3, [r3, #0]
 8024238:	f003 0301 	and.w	r3, r3, #1
 802423c:	2b00      	cmp	r3, #0
 802423e:	d1f2      	bne.n	8024226 <HAL_DMA_IRQHandler+0x8da>
 8024240:	e000      	b.n	8024244 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8024242:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8024244:	687b      	ldr	r3, [r7, #4]
 8024246:	681b      	ldr	r3, [r3, #0]
 8024248:	681b      	ldr	r3, [r3, #0]
 802424a:	f003 0301 	and.w	r3, r3, #1
 802424e:	2b00      	cmp	r3, #0
 8024250:	d004      	beq.n	802425c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8024252:	687b      	ldr	r3, [r7, #4]
 8024254:	2203      	movs	r2, #3
 8024256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802425a:	e003      	b.n	8024264 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 802425c:	687b      	ldr	r3, [r7, #4]
 802425e:	2201      	movs	r2, #1
 8024260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8024264:	687b      	ldr	r3, [r7, #4]
 8024266:	2200      	movs	r2, #0
 8024268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 802426c:	687b      	ldr	r3, [r7, #4]
 802426e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024270:	2b00      	cmp	r3, #0
 8024272:	f000 8272 	beq.w	802475a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802427a:	6878      	ldr	r0, [r7, #4]
 802427c:	4798      	blx	r3
 802427e:	e26c      	b.n	802475a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8024280:	687b      	ldr	r3, [r7, #4]
 8024282:	681b      	ldr	r3, [r3, #0]
 8024284:	4a43      	ldr	r2, [pc, #268]	; (8024394 <HAL_DMA_IRQHandler+0xa48>)
 8024286:	4293      	cmp	r3, r2
 8024288:	d022      	beq.n	80242d0 <HAL_DMA_IRQHandler+0x984>
 802428a:	687b      	ldr	r3, [r7, #4]
 802428c:	681b      	ldr	r3, [r3, #0]
 802428e:	4a42      	ldr	r2, [pc, #264]	; (8024398 <HAL_DMA_IRQHandler+0xa4c>)
 8024290:	4293      	cmp	r3, r2
 8024292:	d01d      	beq.n	80242d0 <HAL_DMA_IRQHandler+0x984>
 8024294:	687b      	ldr	r3, [r7, #4]
 8024296:	681b      	ldr	r3, [r3, #0]
 8024298:	4a40      	ldr	r2, [pc, #256]	; (802439c <HAL_DMA_IRQHandler+0xa50>)
 802429a:	4293      	cmp	r3, r2
 802429c:	d018      	beq.n	80242d0 <HAL_DMA_IRQHandler+0x984>
 802429e:	687b      	ldr	r3, [r7, #4]
 80242a0:	681b      	ldr	r3, [r3, #0]
 80242a2:	4a3f      	ldr	r2, [pc, #252]	; (80243a0 <HAL_DMA_IRQHandler+0xa54>)
 80242a4:	4293      	cmp	r3, r2
 80242a6:	d013      	beq.n	80242d0 <HAL_DMA_IRQHandler+0x984>
 80242a8:	687b      	ldr	r3, [r7, #4]
 80242aa:	681b      	ldr	r3, [r3, #0]
 80242ac:	4a3d      	ldr	r2, [pc, #244]	; (80243a4 <HAL_DMA_IRQHandler+0xa58>)
 80242ae:	4293      	cmp	r3, r2
 80242b0:	d00e      	beq.n	80242d0 <HAL_DMA_IRQHandler+0x984>
 80242b2:	687b      	ldr	r3, [r7, #4]
 80242b4:	681b      	ldr	r3, [r3, #0]
 80242b6:	4a3c      	ldr	r2, [pc, #240]	; (80243a8 <HAL_DMA_IRQHandler+0xa5c>)
 80242b8:	4293      	cmp	r3, r2
 80242ba:	d009      	beq.n	80242d0 <HAL_DMA_IRQHandler+0x984>
 80242bc:	687b      	ldr	r3, [r7, #4]
 80242be:	681b      	ldr	r3, [r3, #0]
 80242c0:	4a3a      	ldr	r2, [pc, #232]	; (80243ac <HAL_DMA_IRQHandler+0xa60>)
 80242c2:	4293      	cmp	r3, r2
 80242c4:	d004      	beq.n	80242d0 <HAL_DMA_IRQHandler+0x984>
 80242c6:	687b      	ldr	r3, [r7, #4]
 80242c8:	681b      	ldr	r3, [r3, #0]
 80242ca:	4a39      	ldr	r2, [pc, #228]	; (80243b0 <HAL_DMA_IRQHandler+0xa64>)
 80242cc:	4293      	cmp	r3, r2
 80242ce:	d101      	bne.n	80242d4 <HAL_DMA_IRQHandler+0x988>
 80242d0:	2301      	movs	r3, #1
 80242d2:	e000      	b.n	80242d6 <HAL_DMA_IRQHandler+0x98a>
 80242d4:	2300      	movs	r3, #0
 80242d6:	2b00      	cmp	r3, #0
 80242d8:	f000 823f 	beq.w	802475a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80242dc:	687b      	ldr	r3, [r7, #4]
 80242de:	681b      	ldr	r3, [r3, #0]
 80242e0:	681b      	ldr	r3, [r3, #0]
 80242e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80242e4:	687b      	ldr	r3, [r7, #4]
 80242e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80242e8:	f003 031f 	and.w	r3, r3, #31
 80242ec:	2204      	movs	r2, #4
 80242ee:	409a      	lsls	r2, r3
 80242f0:	697b      	ldr	r3, [r7, #20]
 80242f2:	4013      	ands	r3, r2
 80242f4:	2b00      	cmp	r3, #0
 80242f6:	f000 80cd 	beq.w	8024494 <HAL_DMA_IRQHandler+0xb48>
 80242fa:	693b      	ldr	r3, [r7, #16]
 80242fc:	f003 0304 	and.w	r3, r3, #4
 8024300:	2b00      	cmp	r3, #0
 8024302:	f000 80c7 	beq.w	8024494 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8024306:	687b      	ldr	r3, [r7, #4]
 8024308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802430a:	f003 031f 	and.w	r3, r3, #31
 802430e:	2204      	movs	r2, #4
 8024310:	409a      	lsls	r2, r3
 8024312:	69fb      	ldr	r3, [r7, #28]
 8024314:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024316:	693b      	ldr	r3, [r7, #16]
 8024318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802431c:	2b00      	cmp	r3, #0
 802431e:	d049      	beq.n	80243b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8024320:	693b      	ldr	r3, [r7, #16]
 8024322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024326:	2b00      	cmp	r3, #0
 8024328:	d109      	bne.n	802433e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802432a:	687b      	ldr	r3, [r7, #4]
 802432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802432e:	2b00      	cmp	r3, #0
 8024330:	f000 8210 	beq.w	8024754 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8024334:	687b      	ldr	r3, [r7, #4]
 8024336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024338:	6878      	ldr	r0, [r7, #4]
 802433a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802433c:	e20a      	b.n	8024754 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802433e:	687b      	ldr	r3, [r7, #4]
 8024340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024342:	2b00      	cmp	r3, #0
 8024344:	f000 8206 	beq.w	8024754 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8024348:	687b      	ldr	r3, [r7, #4]
 802434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802434c:	6878      	ldr	r0, [r7, #4]
 802434e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024350:	e200      	b.n	8024754 <HAL_DMA_IRQHandler+0xe08>
 8024352:	bf00      	nop
 8024354:	40020010 	.word	0x40020010
 8024358:	40020028 	.word	0x40020028
 802435c:	40020040 	.word	0x40020040
 8024360:	40020058 	.word	0x40020058
 8024364:	40020070 	.word	0x40020070
 8024368:	40020088 	.word	0x40020088
 802436c:	400200a0 	.word	0x400200a0
 8024370:	400200b8 	.word	0x400200b8
 8024374:	40020410 	.word	0x40020410
 8024378:	40020428 	.word	0x40020428
 802437c:	40020440 	.word	0x40020440
 8024380:	40020458 	.word	0x40020458
 8024384:	40020470 	.word	0x40020470
 8024388:	40020488 	.word	0x40020488
 802438c:	400204a0 	.word	0x400204a0
 8024390:	400204b8 	.word	0x400204b8
 8024394:	58025408 	.word	0x58025408
 8024398:	5802541c 	.word	0x5802541c
 802439c:	58025430 	.word	0x58025430
 80243a0:	58025444 	.word	0x58025444
 80243a4:	58025458 	.word	0x58025458
 80243a8:	5802546c 	.word	0x5802546c
 80243ac:	58025480 	.word	0x58025480
 80243b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80243b4:	693b      	ldr	r3, [r7, #16]
 80243b6:	f003 0320 	and.w	r3, r3, #32
 80243ba:	2b00      	cmp	r3, #0
 80243bc:	d160      	bne.n	8024480 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80243be:	687b      	ldr	r3, [r7, #4]
 80243c0:	681b      	ldr	r3, [r3, #0]
 80243c2:	4a7f      	ldr	r2, [pc, #508]	; (80245c0 <HAL_DMA_IRQHandler+0xc74>)
 80243c4:	4293      	cmp	r3, r2
 80243c6:	d04a      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 80243c8:	687b      	ldr	r3, [r7, #4]
 80243ca:	681b      	ldr	r3, [r3, #0]
 80243cc:	4a7d      	ldr	r2, [pc, #500]	; (80245c4 <HAL_DMA_IRQHandler+0xc78>)
 80243ce:	4293      	cmp	r3, r2
 80243d0:	d045      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 80243d2:	687b      	ldr	r3, [r7, #4]
 80243d4:	681b      	ldr	r3, [r3, #0]
 80243d6:	4a7c      	ldr	r2, [pc, #496]	; (80245c8 <HAL_DMA_IRQHandler+0xc7c>)
 80243d8:	4293      	cmp	r3, r2
 80243da:	d040      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 80243dc:	687b      	ldr	r3, [r7, #4]
 80243de:	681b      	ldr	r3, [r3, #0]
 80243e0:	4a7a      	ldr	r2, [pc, #488]	; (80245cc <HAL_DMA_IRQHandler+0xc80>)
 80243e2:	4293      	cmp	r3, r2
 80243e4:	d03b      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 80243e6:	687b      	ldr	r3, [r7, #4]
 80243e8:	681b      	ldr	r3, [r3, #0]
 80243ea:	4a79      	ldr	r2, [pc, #484]	; (80245d0 <HAL_DMA_IRQHandler+0xc84>)
 80243ec:	4293      	cmp	r3, r2
 80243ee:	d036      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 80243f0:	687b      	ldr	r3, [r7, #4]
 80243f2:	681b      	ldr	r3, [r3, #0]
 80243f4:	4a77      	ldr	r2, [pc, #476]	; (80245d4 <HAL_DMA_IRQHandler+0xc88>)
 80243f6:	4293      	cmp	r3, r2
 80243f8:	d031      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 80243fa:	687b      	ldr	r3, [r7, #4]
 80243fc:	681b      	ldr	r3, [r3, #0]
 80243fe:	4a76      	ldr	r2, [pc, #472]	; (80245d8 <HAL_DMA_IRQHandler+0xc8c>)
 8024400:	4293      	cmp	r3, r2
 8024402:	d02c      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 8024404:	687b      	ldr	r3, [r7, #4]
 8024406:	681b      	ldr	r3, [r3, #0]
 8024408:	4a74      	ldr	r2, [pc, #464]	; (80245dc <HAL_DMA_IRQHandler+0xc90>)
 802440a:	4293      	cmp	r3, r2
 802440c:	d027      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 802440e:	687b      	ldr	r3, [r7, #4]
 8024410:	681b      	ldr	r3, [r3, #0]
 8024412:	4a73      	ldr	r2, [pc, #460]	; (80245e0 <HAL_DMA_IRQHandler+0xc94>)
 8024414:	4293      	cmp	r3, r2
 8024416:	d022      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 8024418:	687b      	ldr	r3, [r7, #4]
 802441a:	681b      	ldr	r3, [r3, #0]
 802441c:	4a71      	ldr	r2, [pc, #452]	; (80245e4 <HAL_DMA_IRQHandler+0xc98>)
 802441e:	4293      	cmp	r3, r2
 8024420:	d01d      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 8024422:	687b      	ldr	r3, [r7, #4]
 8024424:	681b      	ldr	r3, [r3, #0]
 8024426:	4a70      	ldr	r2, [pc, #448]	; (80245e8 <HAL_DMA_IRQHandler+0xc9c>)
 8024428:	4293      	cmp	r3, r2
 802442a:	d018      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 802442c:	687b      	ldr	r3, [r7, #4]
 802442e:	681b      	ldr	r3, [r3, #0]
 8024430:	4a6e      	ldr	r2, [pc, #440]	; (80245ec <HAL_DMA_IRQHandler+0xca0>)
 8024432:	4293      	cmp	r3, r2
 8024434:	d013      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 8024436:	687b      	ldr	r3, [r7, #4]
 8024438:	681b      	ldr	r3, [r3, #0]
 802443a:	4a6d      	ldr	r2, [pc, #436]	; (80245f0 <HAL_DMA_IRQHandler+0xca4>)
 802443c:	4293      	cmp	r3, r2
 802443e:	d00e      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 8024440:	687b      	ldr	r3, [r7, #4]
 8024442:	681b      	ldr	r3, [r3, #0]
 8024444:	4a6b      	ldr	r2, [pc, #428]	; (80245f4 <HAL_DMA_IRQHandler+0xca8>)
 8024446:	4293      	cmp	r3, r2
 8024448:	d009      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 802444a:	687b      	ldr	r3, [r7, #4]
 802444c:	681b      	ldr	r3, [r3, #0]
 802444e:	4a6a      	ldr	r2, [pc, #424]	; (80245f8 <HAL_DMA_IRQHandler+0xcac>)
 8024450:	4293      	cmp	r3, r2
 8024452:	d004      	beq.n	802445e <HAL_DMA_IRQHandler+0xb12>
 8024454:	687b      	ldr	r3, [r7, #4]
 8024456:	681b      	ldr	r3, [r3, #0]
 8024458:	4a68      	ldr	r2, [pc, #416]	; (80245fc <HAL_DMA_IRQHandler+0xcb0>)
 802445a:	4293      	cmp	r3, r2
 802445c:	d108      	bne.n	8024470 <HAL_DMA_IRQHandler+0xb24>
 802445e:	687b      	ldr	r3, [r7, #4]
 8024460:	681b      	ldr	r3, [r3, #0]
 8024462:	681a      	ldr	r2, [r3, #0]
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	681b      	ldr	r3, [r3, #0]
 8024468:	f022 0208 	bic.w	r2, r2, #8
 802446c:	601a      	str	r2, [r3, #0]
 802446e:	e007      	b.n	8024480 <HAL_DMA_IRQHandler+0xb34>
 8024470:	687b      	ldr	r3, [r7, #4]
 8024472:	681b      	ldr	r3, [r3, #0]
 8024474:	681a      	ldr	r2, [r3, #0]
 8024476:	687b      	ldr	r3, [r7, #4]
 8024478:	681b      	ldr	r3, [r3, #0]
 802447a:	f022 0204 	bic.w	r2, r2, #4
 802447e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8024480:	687b      	ldr	r3, [r7, #4]
 8024482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024484:	2b00      	cmp	r3, #0
 8024486:	f000 8165 	beq.w	8024754 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802448a:	687b      	ldr	r3, [r7, #4]
 802448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802448e:	6878      	ldr	r0, [r7, #4]
 8024490:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024492:	e15f      	b.n	8024754 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8024494:	687b      	ldr	r3, [r7, #4]
 8024496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024498:	f003 031f 	and.w	r3, r3, #31
 802449c:	2202      	movs	r2, #2
 802449e:	409a      	lsls	r2, r3
 80244a0:	697b      	ldr	r3, [r7, #20]
 80244a2:	4013      	ands	r3, r2
 80244a4:	2b00      	cmp	r3, #0
 80244a6:	f000 80c5 	beq.w	8024634 <HAL_DMA_IRQHandler+0xce8>
 80244aa:	693b      	ldr	r3, [r7, #16]
 80244ac:	f003 0302 	and.w	r3, r3, #2
 80244b0:	2b00      	cmp	r3, #0
 80244b2:	f000 80bf 	beq.w	8024634 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80244b6:	687b      	ldr	r3, [r7, #4]
 80244b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80244ba:	f003 031f 	and.w	r3, r3, #31
 80244be:	2202      	movs	r2, #2
 80244c0:	409a      	lsls	r2, r3
 80244c2:	69fb      	ldr	r3, [r7, #28]
 80244c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80244c6:	693b      	ldr	r3, [r7, #16]
 80244c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80244cc:	2b00      	cmp	r3, #0
 80244ce:	d018      	beq.n	8024502 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80244d0:	693b      	ldr	r3, [r7, #16]
 80244d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80244d6:	2b00      	cmp	r3, #0
 80244d8:	d109      	bne.n	80244ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80244da:	687b      	ldr	r3, [r7, #4]
 80244dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80244de:	2b00      	cmp	r3, #0
 80244e0:	f000 813a 	beq.w	8024758 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80244e4:	687b      	ldr	r3, [r7, #4]
 80244e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80244e8:	6878      	ldr	r0, [r7, #4]
 80244ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80244ec:	e134      	b.n	8024758 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80244ee:	687b      	ldr	r3, [r7, #4]
 80244f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80244f2:	2b00      	cmp	r3, #0
 80244f4:	f000 8130 	beq.w	8024758 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80244f8:	687b      	ldr	r3, [r7, #4]
 80244fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80244fc:	6878      	ldr	r0, [r7, #4]
 80244fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024500:	e12a      	b.n	8024758 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8024502:	693b      	ldr	r3, [r7, #16]
 8024504:	f003 0320 	and.w	r3, r3, #32
 8024508:	2b00      	cmp	r3, #0
 802450a:	f040 8089 	bne.w	8024620 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 802450e:	687b      	ldr	r3, [r7, #4]
 8024510:	681b      	ldr	r3, [r3, #0]
 8024512:	4a2b      	ldr	r2, [pc, #172]	; (80245c0 <HAL_DMA_IRQHandler+0xc74>)
 8024514:	4293      	cmp	r3, r2
 8024516:	d04a      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 8024518:	687b      	ldr	r3, [r7, #4]
 802451a:	681b      	ldr	r3, [r3, #0]
 802451c:	4a29      	ldr	r2, [pc, #164]	; (80245c4 <HAL_DMA_IRQHandler+0xc78>)
 802451e:	4293      	cmp	r3, r2
 8024520:	d045      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 8024522:	687b      	ldr	r3, [r7, #4]
 8024524:	681b      	ldr	r3, [r3, #0]
 8024526:	4a28      	ldr	r2, [pc, #160]	; (80245c8 <HAL_DMA_IRQHandler+0xc7c>)
 8024528:	4293      	cmp	r3, r2
 802452a:	d040      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 802452c:	687b      	ldr	r3, [r7, #4]
 802452e:	681b      	ldr	r3, [r3, #0]
 8024530:	4a26      	ldr	r2, [pc, #152]	; (80245cc <HAL_DMA_IRQHandler+0xc80>)
 8024532:	4293      	cmp	r3, r2
 8024534:	d03b      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 8024536:	687b      	ldr	r3, [r7, #4]
 8024538:	681b      	ldr	r3, [r3, #0]
 802453a:	4a25      	ldr	r2, [pc, #148]	; (80245d0 <HAL_DMA_IRQHandler+0xc84>)
 802453c:	4293      	cmp	r3, r2
 802453e:	d036      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 8024540:	687b      	ldr	r3, [r7, #4]
 8024542:	681b      	ldr	r3, [r3, #0]
 8024544:	4a23      	ldr	r2, [pc, #140]	; (80245d4 <HAL_DMA_IRQHandler+0xc88>)
 8024546:	4293      	cmp	r3, r2
 8024548:	d031      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 802454a:	687b      	ldr	r3, [r7, #4]
 802454c:	681b      	ldr	r3, [r3, #0]
 802454e:	4a22      	ldr	r2, [pc, #136]	; (80245d8 <HAL_DMA_IRQHandler+0xc8c>)
 8024550:	4293      	cmp	r3, r2
 8024552:	d02c      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 8024554:	687b      	ldr	r3, [r7, #4]
 8024556:	681b      	ldr	r3, [r3, #0]
 8024558:	4a20      	ldr	r2, [pc, #128]	; (80245dc <HAL_DMA_IRQHandler+0xc90>)
 802455a:	4293      	cmp	r3, r2
 802455c:	d027      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 802455e:	687b      	ldr	r3, [r7, #4]
 8024560:	681b      	ldr	r3, [r3, #0]
 8024562:	4a1f      	ldr	r2, [pc, #124]	; (80245e0 <HAL_DMA_IRQHandler+0xc94>)
 8024564:	4293      	cmp	r3, r2
 8024566:	d022      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 8024568:	687b      	ldr	r3, [r7, #4]
 802456a:	681b      	ldr	r3, [r3, #0]
 802456c:	4a1d      	ldr	r2, [pc, #116]	; (80245e4 <HAL_DMA_IRQHandler+0xc98>)
 802456e:	4293      	cmp	r3, r2
 8024570:	d01d      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 8024572:	687b      	ldr	r3, [r7, #4]
 8024574:	681b      	ldr	r3, [r3, #0]
 8024576:	4a1c      	ldr	r2, [pc, #112]	; (80245e8 <HAL_DMA_IRQHandler+0xc9c>)
 8024578:	4293      	cmp	r3, r2
 802457a:	d018      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 802457c:	687b      	ldr	r3, [r7, #4]
 802457e:	681b      	ldr	r3, [r3, #0]
 8024580:	4a1a      	ldr	r2, [pc, #104]	; (80245ec <HAL_DMA_IRQHandler+0xca0>)
 8024582:	4293      	cmp	r3, r2
 8024584:	d013      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 8024586:	687b      	ldr	r3, [r7, #4]
 8024588:	681b      	ldr	r3, [r3, #0]
 802458a:	4a19      	ldr	r2, [pc, #100]	; (80245f0 <HAL_DMA_IRQHandler+0xca4>)
 802458c:	4293      	cmp	r3, r2
 802458e:	d00e      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 8024590:	687b      	ldr	r3, [r7, #4]
 8024592:	681b      	ldr	r3, [r3, #0]
 8024594:	4a17      	ldr	r2, [pc, #92]	; (80245f4 <HAL_DMA_IRQHandler+0xca8>)
 8024596:	4293      	cmp	r3, r2
 8024598:	d009      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 802459a:	687b      	ldr	r3, [r7, #4]
 802459c:	681b      	ldr	r3, [r3, #0]
 802459e:	4a16      	ldr	r2, [pc, #88]	; (80245f8 <HAL_DMA_IRQHandler+0xcac>)
 80245a0:	4293      	cmp	r3, r2
 80245a2:	d004      	beq.n	80245ae <HAL_DMA_IRQHandler+0xc62>
 80245a4:	687b      	ldr	r3, [r7, #4]
 80245a6:	681b      	ldr	r3, [r3, #0]
 80245a8:	4a14      	ldr	r2, [pc, #80]	; (80245fc <HAL_DMA_IRQHandler+0xcb0>)
 80245aa:	4293      	cmp	r3, r2
 80245ac:	d128      	bne.n	8024600 <HAL_DMA_IRQHandler+0xcb4>
 80245ae:	687b      	ldr	r3, [r7, #4]
 80245b0:	681b      	ldr	r3, [r3, #0]
 80245b2:	681a      	ldr	r2, [r3, #0]
 80245b4:	687b      	ldr	r3, [r7, #4]
 80245b6:	681b      	ldr	r3, [r3, #0]
 80245b8:	f022 0214 	bic.w	r2, r2, #20
 80245bc:	601a      	str	r2, [r3, #0]
 80245be:	e027      	b.n	8024610 <HAL_DMA_IRQHandler+0xcc4>
 80245c0:	40020010 	.word	0x40020010
 80245c4:	40020028 	.word	0x40020028
 80245c8:	40020040 	.word	0x40020040
 80245cc:	40020058 	.word	0x40020058
 80245d0:	40020070 	.word	0x40020070
 80245d4:	40020088 	.word	0x40020088
 80245d8:	400200a0 	.word	0x400200a0
 80245dc:	400200b8 	.word	0x400200b8
 80245e0:	40020410 	.word	0x40020410
 80245e4:	40020428 	.word	0x40020428
 80245e8:	40020440 	.word	0x40020440
 80245ec:	40020458 	.word	0x40020458
 80245f0:	40020470 	.word	0x40020470
 80245f4:	40020488 	.word	0x40020488
 80245f8:	400204a0 	.word	0x400204a0
 80245fc:	400204b8 	.word	0x400204b8
 8024600:	687b      	ldr	r3, [r7, #4]
 8024602:	681b      	ldr	r3, [r3, #0]
 8024604:	681a      	ldr	r2, [r3, #0]
 8024606:	687b      	ldr	r3, [r7, #4]
 8024608:	681b      	ldr	r3, [r3, #0]
 802460a:	f022 020a 	bic.w	r2, r2, #10
 802460e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8024610:	687b      	ldr	r3, [r7, #4]
 8024612:	2201      	movs	r2, #1
 8024614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8024618:	687b      	ldr	r3, [r7, #4]
 802461a:	2200      	movs	r2, #0
 802461c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8024620:	687b      	ldr	r3, [r7, #4]
 8024622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024624:	2b00      	cmp	r3, #0
 8024626:	f000 8097 	beq.w	8024758 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802462a:	687b      	ldr	r3, [r7, #4]
 802462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802462e:	6878      	ldr	r0, [r7, #4]
 8024630:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024632:	e091      	b.n	8024758 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8024634:	687b      	ldr	r3, [r7, #4]
 8024636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024638:	f003 031f 	and.w	r3, r3, #31
 802463c:	2208      	movs	r2, #8
 802463e:	409a      	lsls	r2, r3
 8024640:	697b      	ldr	r3, [r7, #20]
 8024642:	4013      	ands	r3, r2
 8024644:	2b00      	cmp	r3, #0
 8024646:	f000 8088 	beq.w	802475a <HAL_DMA_IRQHandler+0xe0e>
 802464a:	693b      	ldr	r3, [r7, #16]
 802464c:	f003 0308 	and.w	r3, r3, #8
 8024650:	2b00      	cmp	r3, #0
 8024652:	f000 8082 	beq.w	802475a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8024656:	687b      	ldr	r3, [r7, #4]
 8024658:	681b      	ldr	r3, [r3, #0]
 802465a:	4a41      	ldr	r2, [pc, #260]	; (8024760 <HAL_DMA_IRQHandler+0xe14>)
 802465c:	4293      	cmp	r3, r2
 802465e:	d04a      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 8024660:	687b      	ldr	r3, [r7, #4]
 8024662:	681b      	ldr	r3, [r3, #0]
 8024664:	4a3f      	ldr	r2, [pc, #252]	; (8024764 <HAL_DMA_IRQHandler+0xe18>)
 8024666:	4293      	cmp	r3, r2
 8024668:	d045      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 802466a:	687b      	ldr	r3, [r7, #4]
 802466c:	681b      	ldr	r3, [r3, #0]
 802466e:	4a3e      	ldr	r2, [pc, #248]	; (8024768 <HAL_DMA_IRQHandler+0xe1c>)
 8024670:	4293      	cmp	r3, r2
 8024672:	d040      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 8024674:	687b      	ldr	r3, [r7, #4]
 8024676:	681b      	ldr	r3, [r3, #0]
 8024678:	4a3c      	ldr	r2, [pc, #240]	; (802476c <HAL_DMA_IRQHandler+0xe20>)
 802467a:	4293      	cmp	r3, r2
 802467c:	d03b      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 802467e:	687b      	ldr	r3, [r7, #4]
 8024680:	681b      	ldr	r3, [r3, #0]
 8024682:	4a3b      	ldr	r2, [pc, #236]	; (8024770 <HAL_DMA_IRQHandler+0xe24>)
 8024684:	4293      	cmp	r3, r2
 8024686:	d036      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 8024688:	687b      	ldr	r3, [r7, #4]
 802468a:	681b      	ldr	r3, [r3, #0]
 802468c:	4a39      	ldr	r2, [pc, #228]	; (8024774 <HAL_DMA_IRQHandler+0xe28>)
 802468e:	4293      	cmp	r3, r2
 8024690:	d031      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 8024692:	687b      	ldr	r3, [r7, #4]
 8024694:	681b      	ldr	r3, [r3, #0]
 8024696:	4a38      	ldr	r2, [pc, #224]	; (8024778 <HAL_DMA_IRQHandler+0xe2c>)
 8024698:	4293      	cmp	r3, r2
 802469a:	d02c      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 802469c:	687b      	ldr	r3, [r7, #4]
 802469e:	681b      	ldr	r3, [r3, #0]
 80246a0:	4a36      	ldr	r2, [pc, #216]	; (802477c <HAL_DMA_IRQHandler+0xe30>)
 80246a2:	4293      	cmp	r3, r2
 80246a4:	d027      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 80246a6:	687b      	ldr	r3, [r7, #4]
 80246a8:	681b      	ldr	r3, [r3, #0]
 80246aa:	4a35      	ldr	r2, [pc, #212]	; (8024780 <HAL_DMA_IRQHandler+0xe34>)
 80246ac:	4293      	cmp	r3, r2
 80246ae:	d022      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 80246b0:	687b      	ldr	r3, [r7, #4]
 80246b2:	681b      	ldr	r3, [r3, #0]
 80246b4:	4a33      	ldr	r2, [pc, #204]	; (8024784 <HAL_DMA_IRQHandler+0xe38>)
 80246b6:	4293      	cmp	r3, r2
 80246b8:	d01d      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 80246ba:	687b      	ldr	r3, [r7, #4]
 80246bc:	681b      	ldr	r3, [r3, #0]
 80246be:	4a32      	ldr	r2, [pc, #200]	; (8024788 <HAL_DMA_IRQHandler+0xe3c>)
 80246c0:	4293      	cmp	r3, r2
 80246c2:	d018      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 80246c4:	687b      	ldr	r3, [r7, #4]
 80246c6:	681b      	ldr	r3, [r3, #0]
 80246c8:	4a30      	ldr	r2, [pc, #192]	; (802478c <HAL_DMA_IRQHandler+0xe40>)
 80246ca:	4293      	cmp	r3, r2
 80246cc:	d013      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 80246ce:	687b      	ldr	r3, [r7, #4]
 80246d0:	681b      	ldr	r3, [r3, #0]
 80246d2:	4a2f      	ldr	r2, [pc, #188]	; (8024790 <HAL_DMA_IRQHandler+0xe44>)
 80246d4:	4293      	cmp	r3, r2
 80246d6:	d00e      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 80246d8:	687b      	ldr	r3, [r7, #4]
 80246da:	681b      	ldr	r3, [r3, #0]
 80246dc:	4a2d      	ldr	r2, [pc, #180]	; (8024794 <HAL_DMA_IRQHandler+0xe48>)
 80246de:	4293      	cmp	r3, r2
 80246e0:	d009      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 80246e2:	687b      	ldr	r3, [r7, #4]
 80246e4:	681b      	ldr	r3, [r3, #0]
 80246e6:	4a2c      	ldr	r2, [pc, #176]	; (8024798 <HAL_DMA_IRQHandler+0xe4c>)
 80246e8:	4293      	cmp	r3, r2
 80246ea:	d004      	beq.n	80246f6 <HAL_DMA_IRQHandler+0xdaa>
 80246ec:	687b      	ldr	r3, [r7, #4]
 80246ee:	681b      	ldr	r3, [r3, #0]
 80246f0:	4a2a      	ldr	r2, [pc, #168]	; (802479c <HAL_DMA_IRQHandler+0xe50>)
 80246f2:	4293      	cmp	r3, r2
 80246f4:	d108      	bne.n	8024708 <HAL_DMA_IRQHandler+0xdbc>
 80246f6:	687b      	ldr	r3, [r7, #4]
 80246f8:	681b      	ldr	r3, [r3, #0]
 80246fa:	681a      	ldr	r2, [r3, #0]
 80246fc:	687b      	ldr	r3, [r7, #4]
 80246fe:	681b      	ldr	r3, [r3, #0]
 8024700:	f022 021c 	bic.w	r2, r2, #28
 8024704:	601a      	str	r2, [r3, #0]
 8024706:	e007      	b.n	8024718 <HAL_DMA_IRQHandler+0xdcc>
 8024708:	687b      	ldr	r3, [r7, #4]
 802470a:	681b      	ldr	r3, [r3, #0]
 802470c:	681a      	ldr	r2, [r3, #0]
 802470e:	687b      	ldr	r3, [r7, #4]
 8024710:	681b      	ldr	r3, [r3, #0]
 8024712:	f022 020e 	bic.w	r2, r2, #14
 8024716:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8024718:	687b      	ldr	r3, [r7, #4]
 802471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802471c:	f003 031f 	and.w	r3, r3, #31
 8024720:	2201      	movs	r2, #1
 8024722:	409a      	lsls	r2, r3
 8024724:	69fb      	ldr	r3, [r7, #28]
 8024726:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8024728:	687b      	ldr	r3, [r7, #4]
 802472a:	2201      	movs	r2, #1
 802472c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802472e:	687b      	ldr	r3, [r7, #4]
 8024730:	2201      	movs	r2, #1
 8024732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8024736:	687b      	ldr	r3, [r7, #4]
 8024738:	2200      	movs	r2, #0
 802473a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 802473e:	687b      	ldr	r3, [r7, #4]
 8024740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024742:	2b00      	cmp	r3, #0
 8024744:	d009      	beq.n	802475a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8024746:	687b      	ldr	r3, [r7, #4]
 8024748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802474a:	6878      	ldr	r0, [r7, #4]
 802474c:	4798      	blx	r3
 802474e:	e004      	b.n	802475a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8024750:	bf00      	nop
 8024752:	e002      	b.n	802475a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024754:	bf00      	nop
 8024756:	e000      	b.n	802475a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024758:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 802475a:	3728      	adds	r7, #40	; 0x28
 802475c:	46bd      	mov	sp, r7
 802475e:	bd80      	pop	{r7, pc}
 8024760:	40020010 	.word	0x40020010
 8024764:	40020028 	.word	0x40020028
 8024768:	40020040 	.word	0x40020040
 802476c:	40020058 	.word	0x40020058
 8024770:	40020070 	.word	0x40020070
 8024774:	40020088 	.word	0x40020088
 8024778:	400200a0 	.word	0x400200a0
 802477c:	400200b8 	.word	0x400200b8
 8024780:	40020410 	.word	0x40020410
 8024784:	40020428 	.word	0x40020428
 8024788:	40020440 	.word	0x40020440
 802478c:	40020458 	.word	0x40020458
 8024790:	40020470 	.word	0x40020470
 8024794:	40020488 	.word	0x40020488
 8024798:	400204a0 	.word	0x400204a0
 802479c:	400204b8 	.word	0x400204b8

080247a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80247a0:	b480      	push	{r7}
 80247a2:	b087      	sub	sp, #28
 80247a4:	af00      	add	r7, sp, #0
 80247a6:	60f8      	str	r0, [r7, #12]
 80247a8:	60b9      	str	r1, [r7, #8]
 80247aa:	607a      	str	r2, [r7, #4]
 80247ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80247ae:	68fb      	ldr	r3, [r7, #12]
 80247b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80247b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80247b4:	68fb      	ldr	r3, [r7, #12]
 80247b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80247b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80247ba:	68fb      	ldr	r3, [r7, #12]
 80247bc:	681b      	ldr	r3, [r3, #0]
 80247be:	4a7f      	ldr	r2, [pc, #508]	; (80249bc <DMA_SetConfig+0x21c>)
 80247c0:	4293      	cmp	r3, r2
 80247c2:	d072      	beq.n	80248aa <DMA_SetConfig+0x10a>
 80247c4:	68fb      	ldr	r3, [r7, #12]
 80247c6:	681b      	ldr	r3, [r3, #0]
 80247c8:	4a7d      	ldr	r2, [pc, #500]	; (80249c0 <DMA_SetConfig+0x220>)
 80247ca:	4293      	cmp	r3, r2
 80247cc:	d06d      	beq.n	80248aa <DMA_SetConfig+0x10a>
 80247ce:	68fb      	ldr	r3, [r7, #12]
 80247d0:	681b      	ldr	r3, [r3, #0]
 80247d2:	4a7c      	ldr	r2, [pc, #496]	; (80249c4 <DMA_SetConfig+0x224>)
 80247d4:	4293      	cmp	r3, r2
 80247d6:	d068      	beq.n	80248aa <DMA_SetConfig+0x10a>
 80247d8:	68fb      	ldr	r3, [r7, #12]
 80247da:	681b      	ldr	r3, [r3, #0]
 80247dc:	4a7a      	ldr	r2, [pc, #488]	; (80249c8 <DMA_SetConfig+0x228>)
 80247de:	4293      	cmp	r3, r2
 80247e0:	d063      	beq.n	80248aa <DMA_SetConfig+0x10a>
 80247e2:	68fb      	ldr	r3, [r7, #12]
 80247e4:	681b      	ldr	r3, [r3, #0]
 80247e6:	4a79      	ldr	r2, [pc, #484]	; (80249cc <DMA_SetConfig+0x22c>)
 80247e8:	4293      	cmp	r3, r2
 80247ea:	d05e      	beq.n	80248aa <DMA_SetConfig+0x10a>
 80247ec:	68fb      	ldr	r3, [r7, #12]
 80247ee:	681b      	ldr	r3, [r3, #0]
 80247f0:	4a77      	ldr	r2, [pc, #476]	; (80249d0 <DMA_SetConfig+0x230>)
 80247f2:	4293      	cmp	r3, r2
 80247f4:	d059      	beq.n	80248aa <DMA_SetConfig+0x10a>
 80247f6:	68fb      	ldr	r3, [r7, #12]
 80247f8:	681b      	ldr	r3, [r3, #0]
 80247fa:	4a76      	ldr	r2, [pc, #472]	; (80249d4 <DMA_SetConfig+0x234>)
 80247fc:	4293      	cmp	r3, r2
 80247fe:	d054      	beq.n	80248aa <DMA_SetConfig+0x10a>
 8024800:	68fb      	ldr	r3, [r7, #12]
 8024802:	681b      	ldr	r3, [r3, #0]
 8024804:	4a74      	ldr	r2, [pc, #464]	; (80249d8 <DMA_SetConfig+0x238>)
 8024806:	4293      	cmp	r3, r2
 8024808:	d04f      	beq.n	80248aa <DMA_SetConfig+0x10a>
 802480a:	68fb      	ldr	r3, [r7, #12]
 802480c:	681b      	ldr	r3, [r3, #0]
 802480e:	4a73      	ldr	r2, [pc, #460]	; (80249dc <DMA_SetConfig+0x23c>)
 8024810:	4293      	cmp	r3, r2
 8024812:	d04a      	beq.n	80248aa <DMA_SetConfig+0x10a>
 8024814:	68fb      	ldr	r3, [r7, #12]
 8024816:	681b      	ldr	r3, [r3, #0]
 8024818:	4a71      	ldr	r2, [pc, #452]	; (80249e0 <DMA_SetConfig+0x240>)
 802481a:	4293      	cmp	r3, r2
 802481c:	d045      	beq.n	80248aa <DMA_SetConfig+0x10a>
 802481e:	68fb      	ldr	r3, [r7, #12]
 8024820:	681b      	ldr	r3, [r3, #0]
 8024822:	4a70      	ldr	r2, [pc, #448]	; (80249e4 <DMA_SetConfig+0x244>)
 8024824:	4293      	cmp	r3, r2
 8024826:	d040      	beq.n	80248aa <DMA_SetConfig+0x10a>
 8024828:	68fb      	ldr	r3, [r7, #12]
 802482a:	681b      	ldr	r3, [r3, #0]
 802482c:	4a6e      	ldr	r2, [pc, #440]	; (80249e8 <DMA_SetConfig+0x248>)
 802482e:	4293      	cmp	r3, r2
 8024830:	d03b      	beq.n	80248aa <DMA_SetConfig+0x10a>
 8024832:	68fb      	ldr	r3, [r7, #12]
 8024834:	681b      	ldr	r3, [r3, #0]
 8024836:	4a6d      	ldr	r2, [pc, #436]	; (80249ec <DMA_SetConfig+0x24c>)
 8024838:	4293      	cmp	r3, r2
 802483a:	d036      	beq.n	80248aa <DMA_SetConfig+0x10a>
 802483c:	68fb      	ldr	r3, [r7, #12]
 802483e:	681b      	ldr	r3, [r3, #0]
 8024840:	4a6b      	ldr	r2, [pc, #428]	; (80249f0 <DMA_SetConfig+0x250>)
 8024842:	4293      	cmp	r3, r2
 8024844:	d031      	beq.n	80248aa <DMA_SetConfig+0x10a>
 8024846:	68fb      	ldr	r3, [r7, #12]
 8024848:	681b      	ldr	r3, [r3, #0]
 802484a:	4a6a      	ldr	r2, [pc, #424]	; (80249f4 <DMA_SetConfig+0x254>)
 802484c:	4293      	cmp	r3, r2
 802484e:	d02c      	beq.n	80248aa <DMA_SetConfig+0x10a>
 8024850:	68fb      	ldr	r3, [r7, #12]
 8024852:	681b      	ldr	r3, [r3, #0]
 8024854:	4a68      	ldr	r2, [pc, #416]	; (80249f8 <DMA_SetConfig+0x258>)
 8024856:	4293      	cmp	r3, r2
 8024858:	d027      	beq.n	80248aa <DMA_SetConfig+0x10a>
 802485a:	68fb      	ldr	r3, [r7, #12]
 802485c:	681b      	ldr	r3, [r3, #0]
 802485e:	4a67      	ldr	r2, [pc, #412]	; (80249fc <DMA_SetConfig+0x25c>)
 8024860:	4293      	cmp	r3, r2
 8024862:	d022      	beq.n	80248aa <DMA_SetConfig+0x10a>
 8024864:	68fb      	ldr	r3, [r7, #12]
 8024866:	681b      	ldr	r3, [r3, #0]
 8024868:	4a65      	ldr	r2, [pc, #404]	; (8024a00 <DMA_SetConfig+0x260>)
 802486a:	4293      	cmp	r3, r2
 802486c:	d01d      	beq.n	80248aa <DMA_SetConfig+0x10a>
 802486e:	68fb      	ldr	r3, [r7, #12]
 8024870:	681b      	ldr	r3, [r3, #0]
 8024872:	4a64      	ldr	r2, [pc, #400]	; (8024a04 <DMA_SetConfig+0x264>)
 8024874:	4293      	cmp	r3, r2
 8024876:	d018      	beq.n	80248aa <DMA_SetConfig+0x10a>
 8024878:	68fb      	ldr	r3, [r7, #12]
 802487a:	681b      	ldr	r3, [r3, #0]
 802487c:	4a62      	ldr	r2, [pc, #392]	; (8024a08 <DMA_SetConfig+0x268>)
 802487e:	4293      	cmp	r3, r2
 8024880:	d013      	beq.n	80248aa <DMA_SetConfig+0x10a>
 8024882:	68fb      	ldr	r3, [r7, #12]
 8024884:	681b      	ldr	r3, [r3, #0]
 8024886:	4a61      	ldr	r2, [pc, #388]	; (8024a0c <DMA_SetConfig+0x26c>)
 8024888:	4293      	cmp	r3, r2
 802488a:	d00e      	beq.n	80248aa <DMA_SetConfig+0x10a>
 802488c:	68fb      	ldr	r3, [r7, #12]
 802488e:	681b      	ldr	r3, [r3, #0]
 8024890:	4a5f      	ldr	r2, [pc, #380]	; (8024a10 <DMA_SetConfig+0x270>)
 8024892:	4293      	cmp	r3, r2
 8024894:	d009      	beq.n	80248aa <DMA_SetConfig+0x10a>
 8024896:	68fb      	ldr	r3, [r7, #12]
 8024898:	681b      	ldr	r3, [r3, #0]
 802489a:	4a5e      	ldr	r2, [pc, #376]	; (8024a14 <DMA_SetConfig+0x274>)
 802489c:	4293      	cmp	r3, r2
 802489e:	d004      	beq.n	80248aa <DMA_SetConfig+0x10a>
 80248a0:	68fb      	ldr	r3, [r7, #12]
 80248a2:	681b      	ldr	r3, [r3, #0]
 80248a4:	4a5c      	ldr	r2, [pc, #368]	; (8024a18 <DMA_SetConfig+0x278>)
 80248a6:	4293      	cmp	r3, r2
 80248a8:	d101      	bne.n	80248ae <DMA_SetConfig+0x10e>
 80248aa:	2301      	movs	r3, #1
 80248ac:	e000      	b.n	80248b0 <DMA_SetConfig+0x110>
 80248ae:	2300      	movs	r3, #0
 80248b0:	2b00      	cmp	r3, #0
 80248b2:	d00d      	beq.n	80248d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80248b4:	68fb      	ldr	r3, [r7, #12]
 80248b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80248b8:	68fa      	ldr	r2, [r7, #12]
 80248ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80248bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80248be:	68fb      	ldr	r3, [r7, #12]
 80248c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80248c2:	2b00      	cmp	r3, #0
 80248c4:	d004      	beq.n	80248d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80248c6:	68fb      	ldr	r3, [r7, #12]
 80248c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80248ca:	68fa      	ldr	r2, [r7, #12]
 80248cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80248ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80248d0:	68fb      	ldr	r3, [r7, #12]
 80248d2:	681b      	ldr	r3, [r3, #0]
 80248d4:	4a39      	ldr	r2, [pc, #228]	; (80249bc <DMA_SetConfig+0x21c>)
 80248d6:	4293      	cmp	r3, r2
 80248d8:	d04a      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 80248da:	68fb      	ldr	r3, [r7, #12]
 80248dc:	681b      	ldr	r3, [r3, #0]
 80248de:	4a38      	ldr	r2, [pc, #224]	; (80249c0 <DMA_SetConfig+0x220>)
 80248e0:	4293      	cmp	r3, r2
 80248e2:	d045      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 80248e4:	68fb      	ldr	r3, [r7, #12]
 80248e6:	681b      	ldr	r3, [r3, #0]
 80248e8:	4a36      	ldr	r2, [pc, #216]	; (80249c4 <DMA_SetConfig+0x224>)
 80248ea:	4293      	cmp	r3, r2
 80248ec:	d040      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 80248ee:	68fb      	ldr	r3, [r7, #12]
 80248f0:	681b      	ldr	r3, [r3, #0]
 80248f2:	4a35      	ldr	r2, [pc, #212]	; (80249c8 <DMA_SetConfig+0x228>)
 80248f4:	4293      	cmp	r3, r2
 80248f6:	d03b      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 80248f8:	68fb      	ldr	r3, [r7, #12]
 80248fa:	681b      	ldr	r3, [r3, #0]
 80248fc:	4a33      	ldr	r2, [pc, #204]	; (80249cc <DMA_SetConfig+0x22c>)
 80248fe:	4293      	cmp	r3, r2
 8024900:	d036      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 8024902:	68fb      	ldr	r3, [r7, #12]
 8024904:	681b      	ldr	r3, [r3, #0]
 8024906:	4a32      	ldr	r2, [pc, #200]	; (80249d0 <DMA_SetConfig+0x230>)
 8024908:	4293      	cmp	r3, r2
 802490a:	d031      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 802490c:	68fb      	ldr	r3, [r7, #12]
 802490e:	681b      	ldr	r3, [r3, #0]
 8024910:	4a30      	ldr	r2, [pc, #192]	; (80249d4 <DMA_SetConfig+0x234>)
 8024912:	4293      	cmp	r3, r2
 8024914:	d02c      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 8024916:	68fb      	ldr	r3, [r7, #12]
 8024918:	681b      	ldr	r3, [r3, #0]
 802491a:	4a2f      	ldr	r2, [pc, #188]	; (80249d8 <DMA_SetConfig+0x238>)
 802491c:	4293      	cmp	r3, r2
 802491e:	d027      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 8024920:	68fb      	ldr	r3, [r7, #12]
 8024922:	681b      	ldr	r3, [r3, #0]
 8024924:	4a2d      	ldr	r2, [pc, #180]	; (80249dc <DMA_SetConfig+0x23c>)
 8024926:	4293      	cmp	r3, r2
 8024928:	d022      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 802492a:	68fb      	ldr	r3, [r7, #12]
 802492c:	681b      	ldr	r3, [r3, #0]
 802492e:	4a2c      	ldr	r2, [pc, #176]	; (80249e0 <DMA_SetConfig+0x240>)
 8024930:	4293      	cmp	r3, r2
 8024932:	d01d      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 8024934:	68fb      	ldr	r3, [r7, #12]
 8024936:	681b      	ldr	r3, [r3, #0]
 8024938:	4a2a      	ldr	r2, [pc, #168]	; (80249e4 <DMA_SetConfig+0x244>)
 802493a:	4293      	cmp	r3, r2
 802493c:	d018      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 802493e:	68fb      	ldr	r3, [r7, #12]
 8024940:	681b      	ldr	r3, [r3, #0]
 8024942:	4a29      	ldr	r2, [pc, #164]	; (80249e8 <DMA_SetConfig+0x248>)
 8024944:	4293      	cmp	r3, r2
 8024946:	d013      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 8024948:	68fb      	ldr	r3, [r7, #12]
 802494a:	681b      	ldr	r3, [r3, #0]
 802494c:	4a27      	ldr	r2, [pc, #156]	; (80249ec <DMA_SetConfig+0x24c>)
 802494e:	4293      	cmp	r3, r2
 8024950:	d00e      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 8024952:	68fb      	ldr	r3, [r7, #12]
 8024954:	681b      	ldr	r3, [r3, #0]
 8024956:	4a26      	ldr	r2, [pc, #152]	; (80249f0 <DMA_SetConfig+0x250>)
 8024958:	4293      	cmp	r3, r2
 802495a:	d009      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 802495c:	68fb      	ldr	r3, [r7, #12]
 802495e:	681b      	ldr	r3, [r3, #0]
 8024960:	4a24      	ldr	r2, [pc, #144]	; (80249f4 <DMA_SetConfig+0x254>)
 8024962:	4293      	cmp	r3, r2
 8024964:	d004      	beq.n	8024970 <DMA_SetConfig+0x1d0>
 8024966:	68fb      	ldr	r3, [r7, #12]
 8024968:	681b      	ldr	r3, [r3, #0]
 802496a:	4a23      	ldr	r2, [pc, #140]	; (80249f8 <DMA_SetConfig+0x258>)
 802496c:	4293      	cmp	r3, r2
 802496e:	d101      	bne.n	8024974 <DMA_SetConfig+0x1d4>
 8024970:	2301      	movs	r3, #1
 8024972:	e000      	b.n	8024976 <DMA_SetConfig+0x1d6>
 8024974:	2300      	movs	r3, #0
 8024976:	2b00      	cmp	r3, #0
 8024978:	d059      	beq.n	8024a2e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802497a:	68fb      	ldr	r3, [r7, #12]
 802497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802497e:	f003 031f 	and.w	r3, r3, #31
 8024982:	223f      	movs	r2, #63	; 0x3f
 8024984:	409a      	lsls	r2, r3
 8024986:	697b      	ldr	r3, [r7, #20]
 8024988:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802498a:	68fb      	ldr	r3, [r7, #12]
 802498c:	681b      	ldr	r3, [r3, #0]
 802498e:	681a      	ldr	r2, [r3, #0]
 8024990:	68fb      	ldr	r3, [r7, #12]
 8024992:	681b      	ldr	r3, [r3, #0]
 8024994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8024998:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 802499a:	68fb      	ldr	r3, [r7, #12]
 802499c:	681b      	ldr	r3, [r3, #0]
 802499e:	683a      	ldr	r2, [r7, #0]
 80249a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80249a2:	68fb      	ldr	r3, [r7, #12]
 80249a4:	689b      	ldr	r3, [r3, #8]
 80249a6:	2b40      	cmp	r3, #64	; 0x40
 80249a8:	d138      	bne.n	8024a1c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80249aa:	68fb      	ldr	r3, [r7, #12]
 80249ac:	681b      	ldr	r3, [r3, #0]
 80249ae:	687a      	ldr	r2, [r7, #4]
 80249b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80249b2:	68fb      	ldr	r3, [r7, #12]
 80249b4:	681b      	ldr	r3, [r3, #0]
 80249b6:	68ba      	ldr	r2, [r7, #8]
 80249b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80249ba:	e086      	b.n	8024aca <DMA_SetConfig+0x32a>
 80249bc:	40020010 	.word	0x40020010
 80249c0:	40020028 	.word	0x40020028
 80249c4:	40020040 	.word	0x40020040
 80249c8:	40020058 	.word	0x40020058
 80249cc:	40020070 	.word	0x40020070
 80249d0:	40020088 	.word	0x40020088
 80249d4:	400200a0 	.word	0x400200a0
 80249d8:	400200b8 	.word	0x400200b8
 80249dc:	40020410 	.word	0x40020410
 80249e0:	40020428 	.word	0x40020428
 80249e4:	40020440 	.word	0x40020440
 80249e8:	40020458 	.word	0x40020458
 80249ec:	40020470 	.word	0x40020470
 80249f0:	40020488 	.word	0x40020488
 80249f4:	400204a0 	.word	0x400204a0
 80249f8:	400204b8 	.word	0x400204b8
 80249fc:	58025408 	.word	0x58025408
 8024a00:	5802541c 	.word	0x5802541c
 8024a04:	58025430 	.word	0x58025430
 8024a08:	58025444 	.word	0x58025444
 8024a0c:	58025458 	.word	0x58025458
 8024a10:	5802546c 	.word	0x5802546c
 8024a14:	58025480 	.word	0x58025480
 8024a18:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8024a1c:	68fb      	ldr	r3, [r7, #12]
 8024a1e:	681b      	ldr	r3, [r3, #0]
 8024a20:	68ba      	ldr	r2, [r7, #8]
 8024a22:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8024a24:	68fb      	ldr	r3, [r7, #12]
 8024a26:	681b      	ldr	r3, [r3, #0]
 8024a28:	687a      	ldr	r2, [r7, #4]
 8024a2a:	60da      	str	r2, [r3, #12]
}
 8024a2c:	e04d      	b.n	8024aca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8024a2e:	68fb      	ldr	r3, [r7, #12]
 8024a30:	681b      	ldr	r3, [r3, #0]
 8024a32:	4a29      	ldr	r2, [pc, #164]	; (8024ad8 <DMA_SetConfig+0x338>)
 8024a34:	4293      	cmp	r3, r2
 8024a36:	d022      	beq.n	8024a7e <DMA_SetConfig+0x2de>
 8024a38:	68fb      	ldr	r3, [r7, #12]
 8024a3a:	681b      	ldr	r3, [r3, #0]
 8024a3c:	4a27      	ldr	r2, [pc, #156]	; (8024adc <DMA_SetConfig+0x33c>)
 8024a3e:	4293      	cmp	r3, r2
 8024a40:	d01d      	beq.n	8024a7e <DMA_SetConfig+0x2de>
 8024a42:	68fb      	ldr	r3, [r7, #12]
 8024a44:	681b      	ldr	r3, [r3, #0]
 8024a46:	4a26      	ldr	r2, [pc, #152]	; (8024ae0 <DMA_SetConfig+0x340>)
 8024a48:	4293      	cmp	r3, r2
 8024a4a:	d018      	beq.n	8024a7e <DMA_SetConfig+0x2de>
 8024a4c:	68fb      	ldr	r3, [r7, #12]
 8024a4e:	681b      	ldr	r3, [r3, #0]
 8024a50:	4a24      	ldr	r2, [pc, #144]	; (8024ae4 <DMA_SetConfig+0x344>)
 8024a52:	4293      	cmp	r3, r2
 8024a54:	d013      	beq.n	8024a7e <DMA_SetConfig+0x2de>
 8024a56:	68fb      	ldr	r3, [r7, #12]
 8024a58:	681b      	ldr	r3, [r3, #0]
 8024a5a:	4a23      	ldr	r2, [pc, #140]	; (8024ae8 <DMA_SetConfig+0x348>)
 8024a5c:	4293      	cmp	r3, r2
 8024a5e:	d00e      	beq.n	8024a7e <DMA_SetConfig+0x2de>
 8024a60:	68fb      	ldr	r3, [r7, #12]
 8024a62:	681b      	ldr	r3, [r3, #0]
 8024a64:	4a21      	ldr	r2, [pc, #132]	; (8024aec <DMA_SetConfig+0x34c>)
 8024a66:	4293      	cmp	r3, r2
 8024a68:	d009      	beq.n	8024a7e <DMA_SetConfig+0x2de>
 8024a6a:	68fb      	ldr	r3, [r7, #12]
 8024a6c:	681b      	ldr	r3, [r3, #0]
 8024a6e:	4a20      	ldr	r2, [pc, #128]	; (8024af0 <DMA_SetConfig+0x350>)
 8024a70:	4293      	cmp	r3, r2
 8024a72:	d004      	beq.n	8024a7e <DMA_SetConfig+0x2de>
 8024a74:	68fb      	ldr	r3, [r7, #12]
 8024a76:	681b      	ldr	r3, [r3, #0]
 8024a78:	4a1e      	ldr	r2, [pc, #120]	; (8024af4 <DMA_SetConfig+0x354>)
 8024a7a:	4293      	cmp	r3, r2
 8024a7c:	d101      	bne.n	8024a82 <DMA_SetConfig+0x2e2>
 8024a7e:	2301      	movs	r3, #1
 8024a80:	e000      	b.n	8024a84 <DMA_SetConfig+0x2e4>
 8024a82:	2300      	movs	r3, #0
 8024a84:	2b00      	cmp	r3, #0
 8024a86:	d020      	beq.n	8024aca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8024a88:	68fb      	ldr	r3, [r7, #12]
 8024a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024a8c:	f003 031f 	and.w	r3, r3, #31
 8024a90:	2201      	movs	r2, #1
 8024a92:	409a      	lsls	r2, r3
 8024a94:	693b      	ldr	r3, [r7, #16]
 8024a96:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8024a98:	68fb      	ldr	r3, [r7, #12]
 8024a9a:	681b      	ldr	r3, [r3, #0]
 8024a9c:	683a      	ldr	r2, [r7, #0]
 8024a9e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8024aa0:	68fb      	ldr	r3, [r7, #12]
 8024aa2:	689b      	ldr	r3, [r3, #8]
 8024aa4:	2b40      	cmp	r3, #64	; 0x40
 8024aa6:	d108      	bne.n	8024aba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8024aa8:	68fb      	ldr	r3, [r7, #12]
 8024aaa:	681b      	ldr	r3, [r3, #0]
 8024aac:	687a      	ldr	r2, [r7, #4]
 8024aae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8024ab0:	68fb      	ldr	r3, [r7, #12]
 8024ab2:	681b      	ldr	r3, [r3, #0]
 8024ab4:	68ba      	ldr	r2, [r7, #8]
 8024ab6:	60da      	str	r2, [r3, #12]
}
 8024ab8:	e007      	b.n	8024aca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8024aba:	68fb      	ldr	r3, [r7, #12]
 8024abc:	681b      	ldr	r3, [r3, #0]
 8024abe:	68ba      	ldr	r2, [r7, #8]
 8024ac0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8024ac2:	68fb      	ldr	r3, [r7, #12]
 8024ac4:	681b      	ldr	r3, [r3, #0]
 8024ac6:	687a      	ldr	r2, [r7, #4]
 8024ac8:	60da      	str	r2, [r3, #12]
}
 8024aca:	bf00      	nop
 8024acc:	371c      	adds	r7, #28
 8024ace:	46bd      	mov	sp, r7
 8024ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ad4:	4770      	bx	lr
 8024ad6:	bf00      	nop
 8024ad8:	58025408 	.word	0x58025408
 8024adc:	5802541c 	.word	0x5802541c
 8024ae0:	58025430 	.word	0x58025430
 8024ae4:	58025444 	.word	0x58025444
 8024ae8:	58025458 	.word	0x58025458
 8024aec:	5802546c 	.word	0x5802546c
 8024af0:	58025480 	.word	0x58025480
 8024af4:	58025494 	.word	0x58025494

08024af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8024af8:	b480      	push	{r7}
 8024afa:	b085      	sub	sp, #20
 8024afc:	af00      	add	r7, sp, #0
 8024afe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8024b00:	687b      	ldr	r3, [r7, #4]
 8024b02:	681b      	ldr	r3, [r3, #0]
 8024b04:	4a42      	ldr	r2, [pc, #264]	; (8024c10 <DMA_CalcBaseAndBitshift+0x118>)
 8024b06:	4293      	cmp	r3, r2
 8024b08:	d04a      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b0a:	687b      	ldr	r3, [r7, #4]
 8024b0c:	681b      	ldr	r3, [r3, #0]
 8024b0e:	4a41      	ldr	r2, [pc, #260]	; (8024c14 <DMA_CalcBaseAndBitshift+0x11c>)
 8024b10:	4293      	cmp	r3, r2
 8024b12:	d045      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b14:	687b      	ldr	r3, [r7, #4]
 8024b16:	681b      	ldr	r3, [r3, #0]
 8024b18:	4a3f      	ldr	r2, [pc, #252]	; (8024c18 <DMA_CalcBaseAndBitshift+0x120>)
 8024b1a:	4293      	cmp	r3, r2
 8024b1c:	d040      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b1e:	687b      	ldr	r3, [r7, #4]
 8024b20:	681b      	ldr	r3, [r3, #0]
 8024b22:	4a3e      	ldr	r2, [pc, #248]	; (8024c1c <DMA_CalcBaseAndBitshift+0x124>)
 8024b24:	4293      	cmp	r3, r2
 8024b26:	d03b      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b28:	687b      	ldr	r3, [r7, #4]
 8024b2a:	681b      	ldr	r3, [r3, #0]
 8024b2c:	4a3c      	ldr	r2, [pc, #240]	; (8024c20 <DMA_CalcBaseAndBitshift+0x128>)
 8024b2e:	4293      	cmp	r3, r2
 8024b30:	d036      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b32:	687b      	ldr	r3, [r7, #4]
 8024b34:	681b      	ldr	r3, [r3, #0]
 8024b36:	4a3b      	ldr	r2, [pc, #236]	; (8024c24 <DMA_CalcBaseAndBitshift+0x12c>)
 8024b38:	4293      	cmp	r3, r2
 8024b3a:	d031      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	681b      	ldr	r3, [r3, #0]
 8024b40:	4a39      	ldr	r2, [pc, #228]	; (8024c28 <DMA_CalcBaseAndBitshift+0x130>)
 8024b42:	4293      	cmp	r3, r2
 8024b44:	d02c      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b46:	687b      	ldr	r3, [r7, #4]
 8024b48:	681b      	ldr	r3, [r3, #0]
 8024b4a:	4a38      	ldr	r2, [pc, #224]	; (8024c2c <DMA_CalcBaseAndBitshift+0x134>)
 8024b4c:	4293      	cmp	r3, r2
 8024b4e:	d027      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b50:	687b      	ldr	r3, [r7, #4]
 8024b52:	681b      	ldr	r3, [r3, #0]
 8024b54:	4a36      	ldr	r2, [pc, #216]	; (8024c30 <DMA_CalcBaseAndBitshift+0x138>)
 8024b56:	4293      	cmp	r3, r2
 8024b58:	d022      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b5a:	687b      	ldr	r3, [r7, #4]
 8024b5c:	681b      	ldr	r3, [r3, #0]
 8024b5e:	4a35      	ldr	r2, [pc, #212]	; (8024c34 <DMA_CalcBaseAndBitshift+0x13c>)
 8024b60:	4293      	cmp	r3, r2
 8024b62:	d01d      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b64:	687b      	ldr	r3, [r7, #4]
 8024b66:	681b      	ldr	r3, [r3, #0]
 8024b68:	4a33      	ldr	r2, [pc, #204]	; (8024c38 <DMA_CalcBaseAndBitshift+0x140>)
 8024b6a:	4293      	cmp	r3, r2
 8024b6c:	d018      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b6e:	687b      	ldr	r3, [r7, #4]
 8024b70:	681b      	ldr	r3, [r3, #0]
 8024b72:	4a32      	ldr	r2, [pc, #200]	; (8024c3c <DMA_CalcBaseAndBitshift+0x144>)
 8024b74:	4293      	cmp	r3, r2
 8024b76:	d013      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b78:	687b      	ldr	r3, [r7, #4]
 8024b7a:	681b      	ldr	r3, [r3, #0]
 8024b7c:	4a30      	ldr	r2, [pc, #192]	; (8024c40 <DMA_CalcBaseAndBitshift+0x148>)
 8024b7e:	4293      	cmp	r3, r2
 8024b80:	d00e      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b82:	687b      	ldr	r3, [r7, #4]
 8024b84:	681b      	ldr	r3, [r3, #0]
 8024b86:	4a2f      	ldr	r2, [pc, #188]	; (8024c44 <DMA_CalcBaseAndBitshift+0x14c>)
 8024b88:	4293      	cmp	r3, r2
 8024b8a:	d009      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b8c:	687b      	ldr	r3, [r7, #4]
 8024b8e:	681b      	ldr	r3, [r3, #0]
 8024b90:	4a2d      	ldr	r2, [pc, #180]	; (8024c48 <DMA_CalcBaseAndBitshift+0x150>)
 8024b92:	4293      	cmp	r3, r2
 8024b94:	d004      	beq.n	8024ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8024b96:	687b      	ldr	r3, [r7, #4]
 8024b98:	681b      	ldr	r3, [r3, #0]
 8024b9a:	4a2c      	ldr	r2, [pc, #176]	; (8024c4c <DMA_CalcBaseAndBitshift+0x154>)
 8024b9c:	4293      	cmp	r3, r2
 8024b9e:	d101      	bne.n	8024ba4 <DMA_CalcBaseAndBitshift+0xac>
 8024ba0:	2301      	movs	r3, #1
 8024ba2:	e000      	b.n	8024ba6 <DMA_CalcBaseAndBitshift+0xae>
 8024ba4:	2300      	movs	r3, #0
 8024ba6:	2b00      	cmp	r3, #0
 8024ba8:	d024      	beq.n	8024bf4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8024baa:	687b      	ldr	r3, [r7, #4]
 8024bac:	681b      	ldr	r3, [r3, #0]
 8024bae:	b2db      	uxtb	r3, r3
 8024bb0:	3b10      	subs	r3, #16
 8024bb2:	4a27      	ldr	r2, [pc, #156]	; (8024c50 <DMA_CalcBaseAndBitshift+0x158>)
 8024bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8024bb8:	091b      	lsrs	r3, r3, #4
 8024bba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8024bbc:	68fb      	ldr	r3, [r7, #12]
 8024bbe:	f003 0307 	and.w	r3, r3, #7
 8024bc2:	4a24      	ldr	r2, [pc, #144]	; (8024c54 <DMA_CalcBaseAndBitshift+0x15c>)
 8024bc4:	5cd3      	ldrb	r3, [r2, r3]
 8024bc6:	461a      	mov	r2, r3
 8024bc8:	687b      	ldr	r3, [r7, #4]
 8024bca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8024bcc:	68fb      	ldr	r3, [r7, #12]
 8024bce:	2b03      	cmp	r3, #3
 8024bd0:	d908      	bls.n	8024be4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8024bd2:	687b      	ldr	r3, [r7, #4]
 8024bd4:	681b      	ldr	r3, [r3, #0]
 8024bd6:	461a      	mov	r2, r3
 8024bd8:	4b1f      	ldr	r3, [pc, #124]	; (8024c58 <DMA_CalcBaseAndBitshift+0x160>)
 8024bda:	4013      	ands	r3, r2
 8024bdc:	1d1a      	adds	r2, r3, #4
 8024bde:	687b      	ldr	r3, [r7, #4]
 8024be0:	659a      	str	r2, [r3, #88]	; 0x58
 8024be2:	e00d      	b.n	8024c00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8024be4:	687b      	ldr	r3, [r7, #4]
 8024be6:	681b      	ldr	r3, [r3, #0]
 8024be8:	461a      	mov	r2, r3
 8024bea:	4b1b      	ldr	r3, [pc, #108]	; (8024c58 <DMA_CalcBaseAndBitshift+0x160>)
 8024bec:	4013      	ands	r3, r2
 8024bee:	687a      	ldr	r2, [r7, #4]
 8024bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8024bf2:	e005      	b.n	8024c00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8024bf4:	687b      	ldr	r3, [r7, #4]
 8024bf6:	681b      	ldr	r3, [r3, #0]
 8024bf8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8024bfc:	687b      	ldr	r3, [r7, #4]
 8024bfe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8024c00:	687b      	ldr	r3, [r7, #4]
 8024c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8024c04:	4618      	mov	r0, r3
 8024c06:	3714      	adds	r7, #20
 8024c08:	46bd      	mov	sp, r7
 8024c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c0e:	4770      	bx	lr
 8024c10:	40020010 	.word	0x40020010
 8024c14:	40020028 	.word	0x40020028
 8024c18:	40020040 	.word	0x40020040
 8024c1c:	40020058 	.word	0x40020058
 8024c20:	40020070 	.word	0x40020070
 8024c24:	40020088 	.word	0x40020088
 8024c28:	400200a0 	.word	0x400200a0
 8024c2c:	400200b8 	.word	0x400200b8
 8024c30:	40020410 	.word	0x40020410
 8024c34:	40020428 	.word	0x40020428
 8024c38:	40020440 	.word	0x40020440
 8024c3c:	40020458 	.word	0x40020458
 8024c40:	40020470 	.word	0x40020470
 8024c44:	40020488 	.word	0x40020488
 8024c48:	400204a0 	.word	0x400204a0
 8024c4c:	400204b8 	.word	0x400204b8
 8024c50:	aaaaaaab 	.word	0xaaaaaaab
 8024c54:	0803b960 	.word	0x0803b960
 8024c58:	fffffc00 	.word	0xfffffc00

08024c5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8024c5c:	b480      	push	{r7}
 8024c5e:	b085      	sub	sp, #20
 8024c60:	af00      	add	r7, sp, #0
 8024c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8024c64:	2300      	movs	r3, #0
 8024c66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8024c68:	687b      	ldr	r3, [r7, #4]
 8024c6a:	699b      	ldr	r3, [r3, #24]
 8024c6c:	2b00      	cmp	r3, #0
 8024c6e:	d120      	bne.n	8024cb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8024c70:	687b      	ldr	r3, [r7, #4]
 8024c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c74:	2b03      	cmp	r3, #3
 8024c76:	d858      	bhi.n	8024d2a <DMA_CheckFifoParam+0xce>
 8024c78:	a201      	add	r2, pc, #4	; (adr r2, 8024c80 <DMA_CheckFifoParam+0x24>)
 8024c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024c7e:	bf00      	nop
 8024c80:	08024c91 	.word	0x08024c91
 8024c84:	08024ca3 	.word	0x08024ca3
 8024c88:	08024c91 	.word	0x08024c91
 8024c8c:	08024d2b 	.word	0x08024d2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024c90:	687b      	ldr	r3, [r7, #4]
 8024c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024c98:	2b00      	cmp	r3, #0
 8024c9a:	d048      	beq.n	8024d2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8024c9c:	2301      	movs	r3, #1
 8024c9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8024ca0:	e045      	b.n	8024d2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8024ca2:	687b      	ldr	r3, [r7, #4]
 8024ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8024caa:	d142      	bne.n	8024d32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8024cac:	2301      	movs	r3, #1
 8024cae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8024cb0:	e03f      	b.n	8024d32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8024cb2:	687b      	ldr	r3, [r7, #4]
 8024cb4:	699b      	ldr	r3, [r3, #24]
 8024cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024cba:	d123      	bne.n	8024d04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8024cbc:	687b      	ldr	r3, [r7, #4]
 8024cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024cc0:	2b03      	cmp	r3, #3
 8024cc2:	d838      	bhi.n	8024d36 <DMA_CheckFifoParam+0xda>
 8024cc4:	a201      	add	r2, pc, #4	; (adr r2, 8024ccc <DMA_CheckFifoParam+0x70>)
 8024cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024cca:	bf00      	nop
 8024ccc:	08024cdd 	.word	0x08024cdd
 8024cd0:	08024ce3 	.word	0x08024ce3
 8024cd4:	08024cdd 	.word	0x08024cdd
 8024cd8:	08024cf5 	.word	0x08024cf5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8024cdc:	2301      	movs	r3, #1
 8024cde:	73fb      	strb	r3, [r7, #15]
        break;
 8024ce0:	e030      	b.n	8024d44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024ce2:	687b      	ldr	r3, [r7, #4]
 8024ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024cea:	2b00      	cmp	r3, #0
 8024cec:	d025      	beq.n	8024d3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8024cee:	2301      	movs	r3, #1
 8024cf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8024cf2:	e022      	b.n	8024d3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8024cf4:	687b      	ldr	r3, [r7, #4]
 8024cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024cf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8024cfc:	d11f      	bne.n	8024d3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8024cfe:	2301      	movs	r3, #1
 8024d00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8024d02:	e01c      	b.n	8024d3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8024d04:	687b      	ldr	r3, [r7, #4]
 8024d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024d08:	2b02      	cmp	r3, #2
 8024d0a:	d902      	bls.n	8024d12 <DMA_CheckFifoParam+0xb6>
 8024d0c:	2b03      	cmp	r3, #3
 8024d0e:	d003      	beq.n	8024d18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8024d10:	e018      	b.n	8024d44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8024d12:	2301      	movs	r3, #1
 8024d14:	73fb      	strb	r3, [r7, #15]
        break;
 8024d16:	e015      	b.n	8024d44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024d18:	687b      	ldr	r3, [r7, #4]
 8024d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024d20:	2b00      	cmp	r3, #0
 8024d22:	d00e      	beq.n	8024d42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8024d24:	2301      	movs	r3, #1
 8024d26:	73fb      	strb	r3, [r7, #15]
    break;
 8024d28:	e00b      	b.n	8024d42 <DMA_CheckFifoParam+0xe6>
        break;
 8024d2a:	bf00      	nop
 8024d2c:	e00a      	b.n	8024d44 <DMA_CheckFifoParam+0xe8>
        break;
 8024d2e:	bf00      	nop
 8024d30:	e008      	b.n	8024d44 <DMA_CheckFifoParam+0xe8>
        break;
 8024d32:	bf00      	nop
 8024d34:	e006      	b.n	8024d44 <DMA_CheckFifoParam+0xe8>
        break;
 8024d36:	bf00      	nop
 8024d38:	e004      	b.n	8024d44 <DMA_CheckFifoParam+0xe8>
        break;
 8024d3a:	bf00      	nop
 8024d3c:	e002      	b.n	8024d44 <DMA_CheckFifoParam+0xe8>
        break;
 8024d3e:	bf00      	nop
 8024d40:	e000      	b.n	8024d44 <DMA_CheckFifoParam+0xe8>
    break;
 8024d42:	bf00      	nop
    }
  }

  return status;
 8024d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8024d46:	4618      	mov	r0, r3
 8024d48:	3714      	adds	r7, #20
 8024d4a:	46bd      	mov	sp, r7
 8024d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d50:	4770      	bx	lr
 8024d52:	bf00      	nop

08024d54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8024d54:	b480      	push	{r7}
 8024d56:	b085      	sub	sp, #20
 8024d58:	af00      	add	r7, sp, #0
 8024d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8024d5c:	687b      	ldr	r3, [r7, #4]
 8024d5e:	681b      	ldr	r3, [r3, #0]
 8024d60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8024d62:	687b      	ldr	r3, [r7, #4]
 8024d64:	681b      	ldr	r3, [r3, #0]
 8024d66:	4a38      	ldr	r2, [pc, #224]	; (8024e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8024d68:	4293      	cmp	r3, r2
 8024d6a:	d022      	beq.n	8024db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d6c:	687b      	ldr	r3, [r7, #4]
 8024d6e:	681b      	ldr	r3, [r3, #0]
 8024d70:	4a36      	ldr	r2, [pc, #216]	; (8024e4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8024d72:	4293      	cmp	r3, r2
 8024d74:	d01d      	beq.n	8024db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d76:	687b      	ldr	r3, [r7, #4]
 8024d78:	681b      	ldr	r3, [r3, #0]
 8024d7a:	4a35      	ldr	r2, [pc, #212]	; (8024e50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8024d7c:	4293      	cmp	r3, r2
 8024d7e:	d018      	beq.n	8024db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d80:	687b      	ldr	r3, [r7, #4]
 8024d82:	681b      	ldr	r3, [r3, #0]
 8024d84:	4a33      	ldr	r2, [pc, #204]	; (8024e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8024d86:	4293      	cmp	r3, r2
 8024d88:	d013      	beq.n	8024db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d8a:	687b      	ldr	r3, [r7, #4]
 8024d8c:	681b      	ldr	r3, [r3, #0]
 8024d8e:	4a32      	ldr	r2, [pc, #200]	; (8024e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8024d90:	4293      	cmp	r3, r2
 8024d92:	d00e      	beq.n	8024db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d94:	687b      	ldr	r3, [r7, #4]
 8024d96:	681b      	ldr	r3, [r3, #0]
 8024d98:	4a30      	ldr	r2, [pc, #192]	; (8024e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8024d9a:	4293      	cmp	r3, r2
 8024d9c:	d009      	beq.n	8024db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d9e:	687b      	ldr	r3, [r7, #4]
 8024da0:	681b      	ldr	r3, [r3, #0]
 8024da2:	4a2f      	ldr	r2, [pc, #188]	; (8024e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8024da4:	4293      	cmp	r3, r2
 8024da6:	d004      	beq.n	8024db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024da8:	687b      	ldr	r3, [r7, #4]
 8024daa:	681b      	ldr	r3, [r3, #0]
 8024dac:	4a2d      	ldr	r2, [pc, #180]	; (8024e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8024dae:	4293      	cmp	r3, r2
 8024db0:	d101      	bne.n	8024db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8024db2:	2301      	movs	r3, #1
 8024db4:	e000      	b.n	8024db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8024db6:	2300      	movs	r3, #0
 8024db8:	2b00      	cmp	r3, #0
 8024dba:	d01a      	beq.n	8024df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8024dbc:	687b      	ldr	r3, [r7, #4]
 8024dbe:	681b      	ldr	r3, [r3, #0]
 8024dc0:	b2db      	uxtb	r3, r3
 8024dc2:	3b08      	subs	r3, #8
 8024dc4:	4a28      	ldr	r2, [pc, #160]	; (8024e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8024dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8024dca:	091b      	lsrs	r3, r3, #4
 8024dcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8024dce:	68fa      	ldr	r2, [r7, #12]
 8024dd0:	4b26      	ldr	r3, [pc, #152]	; (8024e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8024dd2:	4413      	add	r3, r2
 8024dd4:	009b      	lsls	r3, r3, #2
 8024dd6:	461a      	mov	r2, r3
 8024dd8:	687b      	ldr	r3, [r7, #4]
 8024dda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8024ddc:	687b      	ldr	r3, [r7, #4]
 8024dde:	4a24      	ldr	r2, [pc, #144]	; (8024e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8024de0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8024de2:	68fb      	ldr	r3, [r7, #12]
 8024de4:	f003 031f 	and.w	r3, r3, #31
 8024de8:	2201      	movs	r2, #1
 8024dea:	409a      	lsls	r2, r3
 8024dec:	687b      	ldr	r3, [r7, #4]
 8024dee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8024df0:	e024      	b.n	8024e3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8024df2:	687b      	ldr	r3, [r7, #4]
 8024df4:	681b      	ldr	r3, [r3, #0]
 8024df6:	b2db      	uxtb	r3, r3
 8024df8:	3b10      	subs	r3, #16
 8024dfa:	4a1e      	ldr	r2, [pc, #120]	; (8024e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8024dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8024e00:	091b      	lsrs	r3, r3, #4
 8024e02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8024e04:	68bb      	ldr	r3, [r7, #8]
 8024e06:	4a1c      	ldr	r2, [pc, #112]	; (8024e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8024e08:	4293      	cmp	r3, r2
 8024e0a:	d806      	bhi.n	8024e1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8024e0c:	68bb      	ldr	r3, [r7, #8]
 8024e0e:	4a1b      	ldr	r2, [pc, #108]	; (8024e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8024e10:	4293      	cmp	r3, r2
 8024e12:	d902      	bls.n	8024e1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8024e14:	68fb      	ldr	r3, [r7, #12]
 8024e16:	3308      	adds	r3, #8
 8024e18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8024e1a:	68fa      	ldr	r2, [r7, #12]
 8024e1c:	4b18      	ldr	r3, [pc, #96]	; (8024e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8024e1e:	4413      	add	r3, r2
 8024e20:	009b      	lsls	r3, r3, #2
 8024e22:	461a      	mov	r2, r3
 8024e24:	687b      	ldr	r3, [r7, #4]
 8024e26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8024e28:	687b      	ldr	r3, [r7, #4]
 8024e2a:	4a16      	ldr	r2, [pc, #88]	; (8024e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8024e2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8024e2e:	68fb      	ldr	r3, [r7, #12]
 8024e30:	f003 031f 	and.w	r3, r3, #31
 8024e34:	2201      	movs	r2, #1
 8024e36:	409a      	lsls	r2, r3
 8024e38:	687b      	ldr	r3, [r7, #4]
 8024e3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8024e3c:	bf00      	nop
 8024e3e:	3714      	adds	r7, #20
 8024e40:	46bd      	mov	sp, r7
 8024e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e46:	4770      	bx	lr
 8024e48:	58025408 	.word	0x58025408
 8024e4c:	5802541c 	.word	0x5802541c
 8024e50:	58025430 	.word	0x58025430
 8024e54:	58025444 	.word	0x58025444
 8024e58:	58025458 	.word	0x58025458
 8024e5c:	5802546c 	.word	0x5802546c
 8024e60:	58025480 	.word	0x58025480
 8024e64:	58025494 	.word	0x58025494
 8024e68:	cccccccd 	.word	0xcccccccd
 8024e6c:	16009600 	.word	0x16009600
 8024e70:	58025880 	.word	0x58025880
 8024e74:	aaaaaaab 	.word	0xaaaaaaab
 8024e78:	400204b8 	.word	0x400204b8
 8024e7c:	4002040f 	.word	0x4002040f
 8024e80:	10008200 	.word	0x10008200
 8024e84:	40020880 	.word	0x40020880

08024e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8024e88:	b480      	push	{r7}
 8024e8a:	b085      	sub	sp, #20
 8024e8c:	af00      	add	r7, sp, #0
 8024e8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8024e90:	687b      	ldr	r3, [r7, #4]
 8024e92:	685b      	ldr	r3, [r3, #4]
 8024e94:	b2db      	uxtb	r3, r3
 8024e96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8024e98:	68fb      	ldr	r3, [r7, #12]
 8024e9a:	2b00      	cmp	r3, #0
 8024e9c:	d04a      	beq.n	8024f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8024e9e:	68fb      	ldr	r3, [r7, #12]
 8024ea0:	2b08      	cmp	r3, #8
 8024ea2:	d847      	bhi.n	8024f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8024ea4:	687b      	ldr	r3, [r7, #4]
 8024ea6:	681b      	ldr	r3, [r3, #0]
 8024ea8:	4a25      	ldr	r2, [pc, #148]	; (8024f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8024eaa:	4293      	cmp	r3, r2
 8024eac:	d022      	beq.n	8024ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024eae:	687b      	ldr	r3, [r7, #4]
 8024eb0:	681b      	ldr	r3, [r3, #0]
 8024eb2:	4a24      	ldr	r2, [pc, #144]	; (8024f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8024eb4:	4293      	cmp	r3, r2
 8024eb6:	d01d      	beq.n	8024ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024eb8:	687b      	ldr	r3, [r7, #4]
 8024eba:	681b      	ldr	r3, [r3, #0]
 8024ebc:	4a22      	ldr	r2, [pc, #136]	; (8024f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8024ebe:	4293      	cmp	r3, r2
 8024ec0:	d018      	beq.n	8024ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024ec2:	687b      	ldr	r3, [r7, #4]
 8024ec4:	681b      	ldr	r3, [r3, #0]
 8024ec6:	4a21      	ldr	r2, [pc, #132]	; (8024f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8024ec8:	4293      	cmp	r3, r2
 8024eca:	d013      	beq.n	8024ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024ecc:	687b      	ldr	r3, [r7, #4]
 8024ece:	681b      	ldr	r3, [r3, #0]
 8024ed0:	4a1f      	ldr	r2, [pc, #124]	; (8024f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8024ed2:	4293      	cmp	r3, r2
 8024ed4:	d00e      	beq.n	8024ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024ed6:	687b      	ldr	r3, [r7, #4]
 8024ed8:	681b      	ldr	r3, [r3, #0]
 8024eda:	4a1e      	ldr	r2, [pc, #120]	; (8024f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8024edc:	4293      	cmp	r3, r2
 8024ede:	d009      	beq.n	8024ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024ee0:	687b      	ldr	r3, [r7, #4]
 8024ee2:	681b      	ldr	r3, [r3, #0]
 8024ee4:	4a1c      	ldr	r2, [pc, #112]	; (8024f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8024ee6:	4293      	cmp	r3, r2
 8024ee8:	d004      	beq.n	8024ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024eea:	687b      	ldr	r3, [r7, #4]
 8024eec:	681b      	ldr	r3, [r3, #0]
 8024eee:	4a1b      	ldr	r2, [pc, #108]	; (8024f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8024ef0:	4293      	cmp	r3, r2
 8024ef2:	d101      	bne.n	8024ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8024ef4:	2301      	movs	r3, #1
 8024ef6:	e000      	b.n	8024efa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8024ef8:	2300      	movs	r3, #0
 8024efa:	2b00      	cmp	r3, #0
 8024efc:	d00a      	beq.n	8024f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8024efe:	68fa      	ldr	r2, [r7, #12]
 8024f00:	4b17      	ldr	r3, [pc, #92]	; (8024f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8024f02:	4413      	add	r3, r2
 8024f04:	009b      	lsls	r3, r3, #2
 8024f06:	461a      	mov	r2, r3
 8024f08:	687b      	ldr	r3, [r7, #4]
 8024f0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8024f0c:	687b      	ldr	r3, [r7, #4]
 8024f0e:	4a15      	ldr	r2, [pc, #84]	; (8024f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8024f10:	671a      	str	r2, [r3, #112]	; 0x70
 8024f12:	e009      	b.n	8024f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8024f14:	68fa      	ldr	r2, [r7, #12]
 8024f16:	4b14      	ldr	r3, [pc, #80]	; (8024f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8024f18:	4413      	add	r3, r2
 8024f1a:	009b      	lsls	r3, r3, #2
 8024f1c:	461a      	mov	r2, r3
 8024f1e:	687b      	ldr	r3, [r7, #4]
 8024f20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8024f22:	687b      	ldr	r3, [r7, #4]
 8024f24:	4a11      	ldr	r2, [pc, #68]	; (8024f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8024f26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8024f28:	68fb      	ldr	r3, [r7, #12]
 8024f2a:	3b01      	subs	r3, #1
 8024f2c:	2201      	movs	r2, #1
 8024f2e:	409a      	lsls	r2, r3
 8024f30:	687b      	ldr	r3, [r7, #4]
 8024f32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8024f34:	bf00      	nop
 8024f36:	3714      	adds	r7, #20
 8024f38:	46bd      	mov	sp, r7
 8024f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f3e:	4770      	bx	lr
 8024f40:	58025408 	.word	0x58025408
 8024f44:	5802541c 	.word	0x5802541c
 8024f48:	58025430 	.word	0x58025430
 8024f4c:	58025444 	.word	0x58025444
 8024f50:	58025458 	.word	0x58025458
 8024f54:	5802546c 	.word	0x5802546c
 8024f58:	58025480 	.word	0x58025480
 8024f5c:	58025494 	.word	0x58025494
 8024f60:	1600963f 	.word	0x1600963f
 8024f64:	58025940 	.word	0x58025940
 8024f68:	1000823f 	.word	0x1000823f
 8024f6c:	40020940 	.word	0x40020940

08024f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8024f70:	b480      	push	{r7}
 8024f72:	b089      	sub	sp, #36	; 0x24
 8024f74:	af00      	add	r7, sp, #0
 8024f76:	6078      	str	r0, [r7, #4]
 8024f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8024f7a:	2300      	movs	r3, #0
 8024f7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8024f7e:	4b86      	ldr	r3, [pc, #536]	; (8025198 <HAL_GPIO_Init+0x228>)
 8024f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8024f82:	e18c      	b.n	802529e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8024f84:	683b      	ldr	r3, [r7, #0]
 8024f86:	681a      	ldr	r2, [r3, #0]
 8024f88:	2101      	movs	r1, #1
 8024f8a:	69fb      	ldr	r3, [r7, #28]
 8024f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8024f90:	4013      	ands	r3, r2
 8024f92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8024f94:	693b      	ldr	r3, [r7, #16]
 8024f96:	2b00      	cmp	r3, #0
 8024f98:	f000 817e 	beq.w	8025298 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8024f9c:	683b      	ldr	r3, [r7, #0]
 8024f9e:	685b      	ldr	r3, [r3, #4]
 8024fa0:	f003 0303 	and.w	r3, r3, #3
 8024fa4:	2b01      	cmp	r3, #1
 8024fa6:	d005      	beq.n	8024fb4 <HAL_GPIO_Init+0x44>
 8024fa8:	683b      	ldr	r3, [r7, #0]
 8024faa:	685b      	ldr	r3, [r3, #4]
 8024fac:	f003 0303 	and.w	r3, r3, #3
 8024fb0:	2b02      	cmp	r3, #2
 8024fb2:	d130      	bne.n	8025016 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8024fb4:	687b      	ldr	r3, [r7, #4]
 8024fb6:	689b      	ldr	r3, [r3, #8]
 8024fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8024fba:	69fb      	ldr	r3, [r7, #28]
 8024fbc:	005b      	lsls	r3, r3, #1
 8024fbe:	2203      	movs	r2, #3
 8024fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8024fc4:	43db      	mvns	r3, r3
 8024fc6:	69ba      	ldr	r2, [r7, #24]
 8024fc8:	4013      	ands	r3, r2
 8024fca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8024fcc:	683b      	ldr	r3, [r7, #0]
 8024fce:	68da      	ldr	r2, [r3, #12]
 8024fd0:	69fb      	ldr	r3, [r7, #28]
 8024fd2:	005b      	lsls	r3, r3, #1
 8024fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8024fd8:	69ba      	ldr	r2, [r7, #24]
 8024fda:	4313      	orrs	r3, r2
 8024fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024fde:	687b      	ldr	r3, [r7, #4]
 8024fe0:	69ba      	ldr	r2, [r7, #24]
 8024fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8024fe4:	687b      	ldr	r3, [r7, #4]
 8024fe6:	685b      	ldr	r3, [r3, #4]
 8024fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8024fea:	2201      	movs	r2, #1
 8024fec:	69fb      	ldr	r3, [r7, #28]
 8024fee:	fa02 f303 	lsl.w	r3, r2, r3
 8024ff2:	43db      	mvns	r3, r3
 8024ff4:	69ba      	ldr	r2, [r7, #24]
 8024ff6:	4013      	ands	r3, r2
 8024ff8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8024ffa:	683b      	ldr	r3, [r7, #0]
 8024ffc:	685b      	ldr	r3, [r3, #4]
 8024ffe:	091b      	lsrs	r3, r3, #4
 8025000:	f003 0201 	and.w	r2, r3, #1
 8025004:	69fb      	ldr	r3, [r7, #28]
 8025006:	fa02 f303 	lsl.w	r3, r2, r3
 802500a:	69ba      	ldr	r2, [r7, #24]
 802500c:	4313      	orrs	r3, r2
 802500e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8025010:	687b      	ldr	r3, [r7, #4]
 8025012:	69ba      	ldr	r2, [r7, #24]
 8025014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8025016:	683b      	ldr	r3, [r7, #0]
 8025018:	685b      	ldr	r3, [r3, #4]
 802501a:	f003 0303 	and.w	r3, r3, #3
 802501e:	2b03      	cmp	r3, #3
 8025020:	d017      	beq.n	8025052 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8025022:	687b      	ldr	r3, [r7, #4]
 8025024:	68db      	ldr	r3, [r3, #12]
 8025026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8025028:	69fb      	ldr	r3, [r7, #28]
 802502a:	005b      	lsls	r3, r3, #1
 802502c:	2203      	movs	r2, #3
 802502e:	fa02 f303 	lsl.w	r3, r2, r3
 8025032:	43db      	mvns	r3, r3
 8025034:	69ba      	ldr	r2, [r7, #24]
 8025036:	4013      	ands	r3, r2
 8025038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802503a:	683b      	ldr	r3, [r7, #0]
 802503c:	689a      	ldr	r2, [r3, #8]
 802503e:	69fb      	ldr	r3, [r7, #28]
 8025040:	005b      	lsls	r3, r3, #1
 8025042:	fa02 f303 	lsl.w	r3, r2, r3
 8025046:	69ba      	ldr	r2, [r7, #24]
 8025048:	4313      	orrs	r3, r2
 802504a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802504c:	687b      	ldr	r3, [r7, #4]
 802504e:	69ba      	ldr	r2, [r7, #24]
 8025050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8025052:	683b      	ldr	r3, [r7, #0]
 8025054:	685b      	ldr	r3, [r3, #4]
 8025056:	f003 0303 	and.w	r3, r3, #3
 802505a:	2b02      	cmp	r3, #2
 802505c:	d123      	bne.n	80250a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802505e:	69fb      	ldr	r3, [r7, #28]
 8025060:	08da      	lsrs	r2, r3, #3
 8025062:	687b      	ldr	r3, [r7, #4]
 8025064:	3208      	adds	r2, #8
 8025066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802506a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 802506c:	69fb      	ldr	r3, [r7, #28]
 802506e:	f003 0307 	and.w	r3, r3, #7
 8025072:	009b      	lsls	r3, r3, #2
 8025074:	220f      	movs	r2, #15
 8025076:	fa02 f303 	lsl.w	r3, r2, r3
 802507a:	43db      	mvns	r3, r3
 802507c:	69ba      	ldr	r2, [r7, #24]
 802507e:	4013      	ands	r3, r2
 8025080:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8025082:	683b      	ldr	r3, [r7, #0]
 8025084:	691a      	ldr	r2, [r3, #16]
 8025086:	69fb      	ldr	r3, [r7, #28]
 8025088:	f003 0307 	and.w	r3, r3, #7
 802508c:	009b      	lsls	r3, r3, #2
 802508e:	fa02 f303 	lsl.w	r3, r2, r3
 8025092:	69ba      	ldr	r2, [r7, #24]
 8025094:	4313      	orrs	r3, r2
 8025096:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8025098:	69fb      	ldr	r3, [r7, #28]
 802509a:	08da      	lsrs	r2, r3, #3
 802509c:	687b      	ldr	r3, [r7, #4]
 802509e:	3208      	adds	r2, #8
 80250a0:	69b9      	ldr	r1, [r7, #24]
 80250a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80250a6:	687b      	ldr	r3, [r7, #4]
 80250a8:	681b      	ldr	r3, [r3, #0]
 80250aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80250ac:	69fb      	ldr	r3, [r7, #28]
 80250ae:	005b      	lsls	r3, r3, #1
 80250b0:	2203      	movs	r2, #3
 80250b2:	fa02 f303 	lsl.w	r3, r2, r3
 80250b6:	43db      	mvns	r3, r3
 80250b8:	69ba      	ldr	r2, [r7, #24]
 80250ba:	4013      	ands	r3, r2
 80250bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80250be:	683b      	ldr	r3, [r7, #0]
 80250c0:	685b      	ldr	r3, [r3, #4]
 80250c2:	f003 0203 	and.w	r2, r3, #3
 80250c6:	69fb      	ldr	r3, [r7, #28]
 80250c8:	005b      	lsls	r3, r3, #1
 80250ca:	fa02 f303 	lsl.w	r3, r2, r3
 80250ce:	69ba      	ldr	r2, [r7, #24]
 80250d0:	4313      	orrs	r3, r2
 80250d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80250d4:	687b      	ldr	r3, [r7, #4]
 80250d6:	69ba      	ldr	r2, [r7, #24]
 80250d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80250da:	683b      	ldr	r3, [r7, #0]
 80250dc:	685b      	ldr	r3, [r3, #4]
 80250de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80250e2:	2b00      	cmp	r3, #0
 80250e4:	f000 80d8 	beq.w	8025298 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80250e8:	4b2c      	ldr	r3, [pc, #176]	; (802519c <HAL_GPIO_Init+0x22c>)
 80250ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80250ee:	4a2b      	ldr	r2, [pc, #172]	; (802519c <HAL_GPIO_Init+0x22c>)
 80250f0:	f043 0302 	orr.w	r3, r3, #2
 80250f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80250f8:	4b28      	ldr	r3, [pc, #160]	; (802519c <HAL_GPIO_Init+0x22c>)
 80250fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80250fe:	f003 0302 	and.w	r3, r3, #2
 8025102:	60fb      	str	r3, [r7, #12]
 8025104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8025106:	4a26      	ldr	r2, [pc, #152]	; (80251a0 <HAL_GPIO_Init+0x230>)
 8025108:	69fb      	ldr	r3, [r7, #28]
 802510a:	089b      	lsrs	r3, r3, #2
 802510c:	3302      	adds	r3, #2
 802510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8025114:	69fb      	ldr	r3, [r7, #28]
 8025116:	f003 0303 	and.w	r3, r3, #3
 802511a:	009b      	lsls	r3, r3, #2
 802511c:	220f      	movs	r2, #15
 802511e:	fa02 f303 	lsl.w	r3, r2, r3
 8025122:	43db      	mvns	r3, r3
 8025124:	69ba      	ldr	r2, [r7, #24]
 8025126:	4013      	ands	r3, r2
 8025128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 802512a:	687b      	ldr	r3, [r7, #4]
 802512c:	4a1d      	ldr	r2, [pc, #116]	; (80251a4 <HAL_GPIO_Init+0x234>)
 802512e:	4293      	cmp	r3, r2
 8025130:	d04a      	beq.n	80251c8 <HAL_GPIO_Init+0x258>
 8025132:	687b      	ldr	r3, [r7, #4]
 8025134:	4a1c      	ldr	r2, [pc, #112]	; (80251a8 <HAL_GPIO_Init+0x238>)
 8025136:	4293      	cmp	r3, r2
 8025138:	d02b      	beq.n	8025192 <HAL_GPIO_Init+0x222>
 802513a:	687b      	ldr	r3, [r7, #4]
 802513c:	4a1b      	ldr	r2, [pc, #108]	; (80251ac <HAL_GPIO_Init+0x23c>)
 802513e:	4293      	cmp	r3, r2
 8025140:	d025      	beq.n	802518e <HAL_GPIO_Init+0x21e>
 8025142:	687b      	ldr	r3, [r7, #4]
 8025144:	4a1a      	ldr	r2, [pc, #104]	; (80251b0 <HAL_GPIO_Init+0x240>)
 8025146:	4293      	cmp	r3, r2
 8025148:	d01f      	beq.n	802518a <HAL_GPIO_Init+0x21a>
 802514a:	687b      	ldr	r3, [r7, #4]
 802514c:	4a19      	ldr	r2, [pc, #100]	; (80251b4 <HAL_GPIO_Init+0x244>)
 802514e:	4293      	cmp	r3, r2
 8025150:	d019      	beq.n	8025186 <HAL_GPIO_Init+0x216>
 8025152:	687b      	ldr	r3, [r7, #4]
 8025154:	4a18      	ldr	r2, [pc, #96]	; (80251b8 <HAL_GPIO_Init+0x248>)
 8025156:	4293      	cmp	r3, r2
 8025158:	d013      	beq.n	8025182 <HAL_GPIO_Init+0x212>
 802515a:	687b      	ldr	r3, [r7, #4]
 802515c:	4a17      	ldr	r2, [pc, #92]	; (80251bc <HAL_GPIO_Init+0x24c>)
 802515e:	4293      	cmp	r3, r2
 8025160:	d00d      	beq.n	802517e <HAL_GPIO_Init+0x20e>
 8025162:	687b      	ldr	r3, [r7, #4]
 8025164:	4a16      	ldr	r2, [pc, #88]	; (80251c0 <HAL_GPIO_Init+0x250>)
 8025166:	4293      	cmp	r3, r2
 8025168:	d007      	beq.n	802517a <HAL_GPIO_Init+0x20a>
 802516a:	687b      	ldr	r3, [r7, #4]
 802516c:	4a15      	ldr	r2, [pc, #84]	; (80251c4 <HAL_GPIO_Init+0x254>)
 802516e:	4293      	cmp	r3, r2
 8025170:	d101      	bne.n	8025176 <HAL_GPIO_Init+0x206>
 8025172:	2309      	movs	r3, #9
 8025174:	e029      	b.n	80251ca <HAL_GPIO_Init+0x25a>
 8025176:	230a      	movs	r3, #10
 8025178:	e027      	b.n	80251ca <HAL_GPIO_Init+0x25a>
 802517a:	2307      	movs	r3, #7
 802517c:	e025      	b.n	80251ca <HAL_GPIO_Init+0x25a>
 802517e:	2306      	movs	r3, #6
 8025180:	e023      	b.n	80251ca <HAL_GPIO_Init+0x25a>
 8025182:	2305      	movs	r3, #5
 8025184:	e021      	b.n	80251ca <HAL_GPIO_Init+0x25a>
 8025186:	2304      	movs	r3, #4
 8025188:	e01f      	b.n	80251ca <HAL_GPIO_Init+0x25a>
 802518a:	2303      	movs	r3, #3
 802518c:	e01d      	b.n	80251ca <HAL_GPIO_Init+0x25a>
 802518e:	2302      	movs	r3, #2
 8025190:	e01b      	b.n	80251ca <HAL_GPIO_Init+0x25a>
 8025192:	2301      	movs	r3, #1
 8025194:	e019      	b.n	80251ca <HAL_GPIO_Init+0x25a>
 8025196:	bf00      	nop
 8025198:	58000080 	.word	0x58000080
 802519c:	58024400 	.word	0x58024400
 80251a0:	58000400 	.word	0x58000400
 80251a4:	58020000 	.word	0x58020000
 80251a8:	58020400 	.word	0x58020400
 80251ac:	58020800 	.word	0x58020800
 80251b0:	58020c00 	.word	0x58020c00
 80251b4:	58021000 	.word	0x58021000
 80251b8:	58021400 	.word	0x58021400
 80251bc:	58021800 	.word	0x58021800
 80251c0:	58021c00 	.word	0x58021c00
 80251c4:	58022400 	.word	0x58022400
 80251c8:	2300      	movs	r3, #0
 80251ca:	69fa      	ldr	r2, [r7, #28]
 80251cc:	f002 0203 	and.w	r2, r2, #3
 80251d0:	0092      	lsls	r2, r2, #2
 80251d2:	4093      	lsls	r3, r2
 80251d4:	69ba      	ldr	r2, [r7, #24]
 80251d6:	4313      	orrs	r3, r2
 80251d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80251da:	4938      	ldr	r1, [pc, #224]	; (80252bc <HAL_GPIO_Init+0x34c>)
 80251dc:	69fb      	ldr	r3, [r7, #28]
 80251de:	089b      	lsrs	r3, r3, #2
 80251e0:	3302      	adds	r3, #2
 80251e2:	69ba      	ldr	r2, [r7, #24]
 80251e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80251e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80251ec:	681b      	ldr	r3, [r3, #0]
 80251ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80251f0:	693b      	ldr	r3, [r7, #16]
 80251f2:	43db      	mvns	r3, r3
 80251f4:	69ba      	ldr	r2, [r7, #24]
 80251f6:	4013      	ands	r3, r2
 80251f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80251fa:	683b      	ldr	r3, [r7, #0]
 80251fc:	685b      	ldr	r3, [r3, #4]
 80251fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025202:	2b00      	cmp	r3, #0
 8025204:	d003      	beq.n	802520e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8025206:	69ba      	ldr	r2, [r7, #24]
 8025208:	693b      	ldr	r3, [r7, #16]
 802520a:	4313      	orrs	r3, r2
 802520c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 802520e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8025212:	69bb      	ldr	r3, [r7, #24]
 8025214:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8025216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802521a:	685b      	ldr	r3, [r3, #4]
 802521c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802521e:	693b      	ldr	r3, [r7, #16]
 8025220:	43db      	mvns	r3, r3
 8025222:	69ba      	ldr	r2, [r7, #24]
 8025224:	4013      	ands	r3, r2
 8025226:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8025228:	683b      	ldr	r3, [r7, #0]
 802522a:	685b      	ldr	r3, [r3, #4]
 802522c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8025230:	2b00      	cmp	r3, #0
 8025232:	d003      	beq.n	802523c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8025234:	69ba      	ldr	r2, [r7, #24]
 8025236:	693b      	ldr	r3, [r7, #16]
 8025238:	4313      	orrs	r3, r2
 802523a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 802523c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8025240:	69bb      	ldr	r3, [r7, #24]
 8025242:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8025244:	697b      	ldr	r3, [r7, #20]
 8025246:	685b      	ldr	r3, [r3, #4]
 8025248:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802524a:	693b      	ldr	r3, [r7, #16]
 802524c:	43db      	mvns	r3, r3
 802524e:	69ba      	ldr	r2, [r7, #24]
 8025250:	4013      	ands	r3, r2
 8025252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8025254:	683b      	ldr	r3, [r7, #0]
 8025256:	685b      	ldr	r3, [r3, #4]
 8025258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802525c:	2b00      	cmp	r3, #0
 802525e:	d003      	beq.n	8025268 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8025260:	69ba      	ldr	r2, [r7, #24]
 8025262:	693b      	ldr	r3, [r7, #16]
 8025264:	4313      	orrs	r3, r2
 8025266:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8025268:	697b      	ldr	r3, [r7, #20]
 802526a:	69ba      	ldr	r2, [r7, #24]
 802526c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 802526e:	697b      	ldr	r3, [r7, #20]
 8025270:	681b      	ldr	r3, [r3, #0]
 8025272:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8025274:	693b      	ldr	r3, [r7, #16]
 8025276:	43db      	mvns	r3, r3
 8025278:	69ba      	ldr	r2, [r7, #24]
 802527a:	4013      	ands	r3, r2
 802527c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802527e:	683b      	ldr	r3, [r7, #0]
 8025280:	685b      	ldr	r3, [r3, #4]
 8025282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025286:	2b00      	cmp	r3, #0
 8025288:	d003      	beq.n	8025292 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 802528a:	69ba      	ldr	r2, [r7, #24]
 802528c:	693b      	ldr	r3, [r7, #16]
 802528e:	4313      	orrs	r3, r2
 8025290:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8025292:	697b      	ldr	r3, [r7, #20]
 8025294:	69ba      	ldr	r2, [r7, #24]
 8025296:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8025298:	69fb      	ldr	r3, [r7, #28]
 802529a:	3301      	adds	r3, #1
 802529c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802529e:	683b      	ldr	r3, [r7, #0]
 80252a0:	681a      	ldr	r2, [r3, #0]
 80252a2:	69fb      	ldr	r3, [r7, #28]
 80252a4:	fa22 f303 	lsr.w	r3, r2, r3
 80252a8:	2b00      	cmp	r3, #0
 80252aa:	f47f ae6b 	bne.w	8024f84 <HAL_GPIO_Init+0x14>
  }
}
 80252ae:	bf00      	nop
 80252b0:	bf00      	nop
 80252b2:	3724      	adds	r7, #36	; 0x24
 80252b4:	46bd      	mov	sp, r7
 80252b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252ba:	4770      	bx	lr
 80252bc:	58000400 	.word	0x58000400

080252c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80252c0:	b480      	push	{r7}
 80252c2:	b083      	sub	sp, #12
 80252c4:	af00      	add	r7, sp, #0
 80252c6:	6078      	str	r0, [r7, #4]
 80252c8:	460b      	mov	r3, r1
 80252ca:	807b      	strh	r3, [r7, #2]
 80252cc:	4613      	mov	r3, r2
 80252ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80252d0:	787b      	ldrb	r3, [r7, #1]
 80252d2:	2b00      	cmp	r3, #0
 80252d4:	d003      	beq.n	80252de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80252d6:	887a      	ldrh	r2, [r7, #2]
 80252d8:	687b      	ldr	r3, [r7, #4]
 80252da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80252dc:	e003      	b.n	80252e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80252de:	887b      	ldrh	r3, [r7, #2]
 80252e0:	041a      	lsls	r2, r3, #16
 80252e2:	687b      	ldr	r3, [r7, #4]
 80252e4:	619a      	str	r2, [r3, #24]
}
 80252e6:	bf00      	nop
 80252e8:	370c      	adds	r7, #12
 80252ea:	46bd      	mov	sp, r7
 80252ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252f0:	4770      	bx	lr

080252f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80252f2:	b480      	push	{r7}
 80252f4:	b085      	sub	sp, #20
 80252f6:	af00      	add	r7, sp, #0
 80252f8:	6078      	str	r0, [r7, #4]
 80252fa:	460b      	mov	r3, r1
 80252fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80252fe:	687b      	ldr	r3, [r7, #4]
 8025300:	695b      	ldr	r3, [r3, #20]
 8025302:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8025304:	887a      	ldrh	r2, [r7, #2]
 8025306:	68fb      	ldr	r3, [r7, #12]
 8025308:	4013      	ands	r3, r2
 802530a:	041a      	lsls	r2, r3, #16
 802530c:	68fb      	ldr	r3, [r7, #12]
 802530e:	43d9      	mvns	r1, r3
 8025310:	887b      	ldrh	r3, [r7, #2]
 8025312:	400b      	ands	r3, r1
 8025314:	431a      	orrs	r2, r3
 8025316:	687b      	ldr	r3, [r7, #4]
 8025318:	619a      	str	r2, [r3, #24]
}
 802531a:	bf00      	nop
 802531c:	3714      	adds	r7, #20
 802531e:	46bd      	mov	sp, r7
 8025320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025324:	4770      	bx	lr

08025326 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8025326:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025328:	b08f      	sub	sp, #60	; 0x3c
 802532a:	af0a      	add	r7, sp, #40	; 0x28
 802532c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 802532e:	687b      	ldr	r3, [r7, #4]
 8025330:	2b00      	cmp	r3, #0
 8025332:	d101      	bne.n	8025338 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8025334:	2301      	movs	r3, #1
 8025336:	e054      	b.n	80253e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8025338:	687b      	ldr	r3, [r7, #4]
 802533a:	681b      	ldr	r3, [r3, #0]
 802533c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 802533e:	687b      	ldr	r3, [r7, #4]
 8025340:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8025344:	b2db      	uxtb	r3, r3
 8025346:	2b00      	cmp	r3, #0
 8025348:	d106      	bne.n	8025358 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 802534a:	687b      	ldr	r3, [r7, #4]
 802534c:	2200      	movs	r2, #0
 802534e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8025352:	6878      	ldr	r0, [r7, #4]
 8025354:	f014 fa9a 	bl	803988c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8025358:	687b      	ldr	r3, [r7, #4]
 802535a:	2203      	movs	r2, #3
 802535c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8025360:	68fb      	ldr	r3, [r7, #12]
 8025362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025368:	2b00      	cmp	r3, #0
 802536a:	d102      	bne.n	8025372 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 802536c:	687b      	ldr	r3, [r7, #4]
 802536e:	2200      	movs	r2, #0
 8025370:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8025372:	687b      	ldr	r3, [r7, #4]
 8025374:	681b      	ldr	r3, [r3, #0]
 8025376:	4618      	mov	r0, r3
 8025378:	f006 fb53 	bl	802ba22 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 802537c:	687b      	ldr	r3, [r7, #4]
 802537e:	681b      	ldr	r3, [r3, #0]
 8025380:	603b      	str	r3, [r7, #0]
 8025382:	687e      	ldr	r6, [r7, #4]
 8025384:	466d      	mov	r5, sp
 8025386:	f106 0410 	add.w	r4, r6, #16
 802538a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802538c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802538e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025392:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025396:	e885 0003 	stmia.w	r5, {r0, r1}
 802539a:	1d33      	adds	r3, r6, #4
 802539c:	cb0e      	ldmia	r3, {r1, r2, r3}
 802539e:	6838      	ldr	r0, [r7, #0]
 80253a0:	f006 fac0 	bl	802b924 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80253a4:	687b      	ldr	r3, [r7, #4]
 80253a6:	681b      	ldr	r3, [r3, #0]
 80253a8:	2101      	movs	r1, #1
 80253aa:	4618      	mov	r0, r3
 80253ac:	f006 fb4a 	bl	802ba44 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80253b0:	687b      	ldr	r3, [r7, #4]
 80253b2:	681b      	ldr	r3, [r3, #0]
 80253b4:	603b      	str	r3, [r7, #0]
 80253b6:	687e      	ldr	r6, [r7, #4]
 80253b8:	466d      	mov	r5, sp
 80253ba:	f106 0410 	add.w	r4, r6, #16
 80253be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80253c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80253c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80253c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80253c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80253ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80253ce:	1d33      	adds	r3, r6, #4
 80253d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80253d2:	6838      	ldr	r0, [r7, #0]
 80253d4:	f006 fcd2 	bl	802bd7c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	2201      	movs	r2, #1
 80253dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80253e0:	2300      	movs	r3, #0
}
 80253e2:	4618      	mov	r0, r3
 80253e4:	3714      	adds	r7, #20
 80253e6:	46bd      	mov	sp, r7
 80253e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080253ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80253ea:	b590      	push	{r4, r7, lr}
 80253ec:	b089      	sub	sp, #36	; 0x24
 80253ee:	af04      	add	r7, sp, #16
 80253f0:	6078      	str	r0, [r7, #4]
 80253f2:	4608      	mov	r0, r1
 80253f4:	4611      	mov	r1, r2
 80253f6:	461a      	mov	r2, r3
 80253f8:	4603      	mov	r3, r0
 80253fa:	70fb      	strb	r3, [r7, #3]
 80253fc:	460b      	mov	r3, r1
 80253fe:	70bb      	strb	r3, [r7, #2]
 8025400:	4613      	mov	r3, r2
 8025402:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8025404:	687b      	ldr	r3, [r7, #4]
 8025406:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 802540a:	2b01      	cmp	r3, #1
 802540c:	d101      	bne.n	8025412 <HAL_HCD_HC_Init+0x28>
 802540e:	2302      	movs	r3, #2
 8025410:	e076      	b.n	8025500 <HAL_HCD_HC_Init+0x116>
 8025412:	687b      	ldr	r3, [r7, #4]
 8025414:	2201      	movs	r2, #1
 8025416:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 802541a:	78fb      	ldrb	r3, [r7, #3]
 802541c:	687a      	ldr	r2, [r7, #4]
 802541e:	212c      	movs	r1, #44	; 0x2c
 8025420:	fb01 f303 	mul.w	r3, r1, r3
 8025424:	4413      	add	r3, r2
 8025426:	333d      	adds	r3, #61	; 0x3d
 8025428:	2200      	movs	r2, #0
 802542a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 802542c:	78fb      	ldrb	r3, [r7, #3]
 802542e:	687a      	ldr	r2, [r7, #4]
 8025430:	212c      	movs	r1, #44	; 0x2c
 8025432:	fb01 f303 	mul.w	r3, r1, r3
 8025436:	4413      	add	r3, r2
 8025438:	3338      	adds	r3, #56	; 0x38
 802543a:	787a      	ldrb	r2, [r7, #1]
 802543c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 802543e:	78fb      	ldrb	r3, [r7, #3]
 8025440:	687a      	ldr	r2, [r7, #4]
 8025442:	212c      	movs	r1, #44	; 0x2c
 8025444:	fb01 f303 	mul.w	r3, r1, r3
 8025448:	4413      	add	r3, r2
 802544a:	3340      	adds	r3, #64	; 0x40
 802544c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 802544e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8025450:	78fb      	ldrb	r3, [r7, #3]
 8025452:	687a      	ldr	r2, [r7, #4]
 8025454:	212c      	movs	r1, #44	; 0x2c
 8025456:	fb01 f303 	mul.w	r3, r1, r3
 802545a:	4413      	add	r3, r2
 802545c:	3339      	adds	r3, #57	; 0x39
 802545e:	78fa      	ldrb	r2, [r7, #3]
 8025460:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8025462:	78fb      	ldrb	r3, [r7, #3]
 8025464:	687a      	ldr	r2, [r7, #4]
 8025466:	212c      	movs	r1, #44	; 0x2c
 8025468:	fb01 f303 	mul.w	r3, r1, r3
 802546c:	4413      	add	r3, r2
 802546e:	333f      	adds	r3, #63	; 0x3f
 8025470:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8025474:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8025476:	78fb      	ldrb	r3, [r7, #3]
 8025478:	78ba      	ldrb	r2, [r7, #2]
 802547a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 802547e:	b2d0      	uxtb	r0, r2
 8025480:	687a      	ldr	r2, [r7, #4]
 8025482:	212c      	movs	r1, #44	; 0x2c
 8025484:	fb01 f303 	mul.w	r3, r1, r3
 8025488:	4413      	add	r3, r2
 802548a:	333a      	adds	r3, #58	; 0x3a
 802548c:	4602      	mov	r2, r0
 802548e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8025490:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8025494:	2b00      	cmp	r3, #0
 8025496:	da09      	bge.n	80254ac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8025498:	78fb      	ldrb	r3, [r7, #3]
 802549a:	687a      	ldr	r2, [r7, #4]
 802549c:	212c      	movs	r1, #44	; 0x2c
 802549e:	fb01 f303 	mul.w	r3, r1, r3
 80254a2:	4413      	add	r3, r2
 80254a4:	333b      	adds	r3, #59	; 0x3b
 80254a6:	2201      	movs	r2, #1
 80254a8:	701a      	strb	r2, [r3, #0]
 80254aa:	e008      	b.n	80254be <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80254ac:	78fb      	ldrb	r3, [r7, #3]
 80254ae:	687a      	ldr	r2, [r7, #4]
 80254b0:	212c      	movs	r1, #44	; 0x2c
 80254b2:	fb01 f303 	mul.w	r3, r1, r3
 80254b6:	4413      	add	r3, r2
 80254b8:	333b      	adds	r3, #59	; 0x3b
 80254ba:	2200      	movs	r2, #0
 80254bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80254be:	78fb      	ldrb	r3, [r7, #3]
 80254c0:	687a      	ldr	r2, [r7, #4]
 80254c2:	212c      	movs	r1, #44	; 0x2c
 80254c4:	fb01 f303 	mul.w	r3, r1, r3
 80254c8:	4413      	add	r3, r2
 80254ca:	333c      	adds	r3, #60	; 0x3c
 80254cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80254d0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80254d2:	687b      	ldr	r3, [r7, #4]
 80254d4:	6818      	ldr	r0, [r3, #0]
 80254d6:	787c      	ldrb	r4, [r7, #1]
 80254d8:	78ba      	ldrb	r2, [r7, #2]
 80254da:	78f9      	ldrb	r1, [r7, #3]
 80254dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80254de:	9302      	str	r3, [sp, #8]
 80254e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80254e4:	9301      	str	r3, [sp, #4]
 80254e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80254ea:	9300      	str	r3, [sp, #0]
 80254ec:	4623      	mov	r3, r4
 80254ee:	f006 fdc5 	bl	802c07c <USB_HC_Init>
 80254f2:	4603      	mov	r3, r0
 80254f4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80254f6:	687b      	ldr	r3, [r7, #4]
 80254f8:	2200      	movs	r2, #0
 80254fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80254fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8025500:	4618      	mov	r0, r3
 8025502:	3714      	adds	r7, #20
 8025504:	46bd      	mov	sp, r7
 8025506:	bd90      	pop	{r4, r7, pc}

08025508 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8025508:	b580      	push	{r7, lr}
 802550a:	b084      	sub	sp, #16
 802550c:	af00      	add	r7, sp, #0
 802550e:	6078      	str	r0, [r7, #4]
 8025510:	460b      	mov	r3, r1
 8025512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8025514:	2300      	movs	r3, #0
 8025516:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8025518:	687b      	ldr	r3, [r7, #4]
 802551a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 802551e:	2b01      	cmp	r3, #1
 8025520:	d101      	bne.n	8025526 <HAL_HCD_HC_Halt+0x1e>
 8025522:	2302      	movs	r3, #2
 8025524:	e00f      	b.n	8025546 <HAL_HCD_HC_Halt+0x3e>
 8025526:	687b      	ldr	r3, [r7, #4]
 8025528:	2201      	movs	r2, #1
 802552a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802552e:	687b      	ldr	r3, [r7, #4]
 8025530:	681b      	ldr	r3, [r3, #0]
 8025532:	78fa      	ldrb	r2, [r7, #3]
 8025534:	4611      	mov	r1, r2
 8025536:	4618      	mov	r0, r3
 8025538:	f007 f815 	bl	802c566 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 802553c:	687b      	ldr	r3, [r7, #4]
 802553e:	2200      	movs	r2, #0
 8025540:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8025544:	7bfb      	ldrb	r3, [r7, #15]
}
 8025546:	4618      	mov	r0, r3
 8025548:	3710      	adds	r7, #16
 802554a:	46bd      	mov	sp, r7
 802554c:	bd80      	pop	{r7, pc}
	...

08025550 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8025550:	b580      	push	{r7, lr}
 8025552:	b082      	sub	sp, #8
 8025554:	af00      	add	r7, sp, #0
 8025556:	6078      	str	r0, [r7, #4]
 8025558:	4608      	mov	r0, r1
 802555a:	4611      	mov	r1, r2
 802555c:	461a      	mov	r2, r3
 802555e:	4603      	mov	r3, r0
 8025560:	70fb      	strb	r3, [r7, #3]
 8025562:	460b      	mov	r3, r1
 8025564:	70bb      	strb	r3, [r7, #2]
 8025566:	4613      	mov	r3, r2
 8025568:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 802556a:	78fb      	ldrb	r3, [r7, #3]
 802556c:	687a      	ldr	r2, [r7, #4]
 802556e:	212c      	movs	r1, #44	; 0x2c
 8025570:	fb01 f303 	mul.w	r3, r1, r3
 8025574:	4413      	add	r3, r2
 8025576:	333b      	adds	r3, #59	; 0x3b
 8025578:	78ba      	ldrb	r2, [r7, #2]
 802557a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 802557c:	78fb      	ldrb	r3, [r7, #3]
 802557e:	687a      	ldr	r2, [r7, #4]
 8025580:	212c      	movs	r1, #44	; 0x2c
 8025582:	fb01 f303 	mul.w	r3, r1, r3
 8025586:	4413      	add	r3, r2
 8025588:	333f      	adds	r3, #63	; 0x3f
 802558a:	787a      	ldrb	r2, [r7, #1]
 802558c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 802558e:	7c3b      	ldrb	r3, [r7, #16]
 8025590:	2b00      	cmp	r3, #0
 8025592:	d112      	bne.n	80255ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8025594:	78fb      	ldrb	r3, [r7, #3]
 8025596:	687a      	ldr	r2, [r7, #4]
 8025598:	212c      	movs	r1, #44	; 0x2c
 802559a:	fb01 f303 	mul.w	r3, r1, r3
 802559e:	4413      	add	r3, r2
 80255a0:	3342      	adds	r3, #66	; 0x42
 80255a2:	2203      	movs	r2, #3
 80255a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80255a6:	78fb      	ldrb	r3, [r7, #3]
 80255a8:	687a      	ldr	r2, [r7, #4]
 80255aa:	212c      	movs	r1, #44	; 0x2c
 80255ac:	fb01 f303 	mul.w	r3, r1, r3
 80255b0:	4413      	add	r3, r2
 80255b2:	333d      	adds	r3, #61	; 0x3d
 80255b4:	7f3a      	ldrb	r2, [r7, #28]
 80255b6:	701a      	strb	r2, [r3, #0]
 80255b8:	e008      	b.n	80255cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80255ba:	78fb      	ldrb	r3, [r7, #3]
 80255bc:	687a      	ldr	r2, [r7, #4]
 80255be:	212c      	movs	r1, #44	; 0x2c
 80255c0:	fb01 f303 	mul.w	r3, r1, r3
 80255c4:	4413      	add	r3, r2
 80255c6:	3342      	adds	r3, #66	; 0x42
 80255c8:	2202      	movs	r2, #2
 80255ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80255cc:	787b      	ldrb	r3, [r7, #1]
 80255ce:	2b03      	cmp	r3, #3
 80255d0:	f200 80c6 	bhi.w	8025760 <HAL_HCD_HC_SubmitRequest+0x210>
 80255d4:	a201      	add	r2, pc, #4	; (adr r2, 80255dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80255d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80255da:	bf00      	nop
 80255dc:	080255ed 	.word	0x080255ed
 80255e0:	0802574d 	.word	0x0802574d
 80255e4:	08025651 	.word	0x08025651
 80255e8:	080256cf 	.word	0x080256cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80255ec:	7c3b      	ldrb	r3, [r7, #16]
 80255ee:	2b01      	cmp	r3, #1
 80255f0:	f040 80b8 	bne.w	8025764 <HAL_HCD_HC_SubmitRequest+0x214>
 80255f4:	78bb      	ldrb	r3, [r7, #2]
 80255f6:	2b00      	cmp	r3, #0
 80255f8:	f040 80b4 	bne.w	8025764 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80255fc:	8b3b      	ldrh	r3, [r7, #24]
 80255fe:	2b00      	cmp	r3, #0
 8025600:	d108      	bne.n	8025614 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8025602:	78fb      	ldrb	r3, [r7, #3]
 8025604:	687a      	ldr	r2, [r7, #4]
 8025606:	212c      	movs	r1, #44	; 0x2c
 8025608:	fb01 f303 	mul.w	r3, r1, r3
 802560c:	4413      	add	r3, r2
 802560e:	3355      	adds	r3, #85	; 0x55
 8025610:	2201      	movs	r2, #1
 8025612:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8025614:	78fb      	ldrb	r3, [r7, #3]
 8025616:	687a      	ldr	r2, [r7, #4]
 8025618:	212c      	movs	r1, #44	; 0x2c
 802561a:	fb01 f303 	mul.w	r3, r1, r3
 802561e:	4413      	add	r3, r2
 8025620:	3355      	adds	r3, #85	; 0x55
 8025622:	781b      	ldrb	r3, [r3, #0]
 8025624:	2b00      	cmp	r3, #0
 8025626:	d109      	bne.n	802563c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8025628:	78fb      	ldrb	r3, [r7, #3]
 802562a:	687a      	ldr	r2, [r7, #4]
 802562c:	212c      	movs	r1, #44	; 0x2c
 802562e:	fb01 f303 	mul.w	r3, r1, r3
 8025632:	4413      	add	r3, r2
 8025634:	3342      	adds	r3, #66	; 0x42
 8025636:	2200      	movs	r2, #0
 8025638:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 802563a:	e093      	b.n	8025764 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802563c:	78fb      	ldrb	r3, [r7, #3]
 802563e:	687a      	ldr	r2, [r7, #4]
 8025640:	212c      	movs	r1, #44	; 0x2c
 8025642:	fb01 f303 	mul.w	r3, r1, r3
 8025646:	4413      	add	r3, r2
 8025648:	3342      	adds	r3, #66	; 0x42
 802564a:	2202      	movs	r2, #2
 802564c:	701a      	strb	r2, [r3, #0]
      break;
 802564e:	e089      	b.n	8025764 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8025650:	78bb      	ldrb	r3, [r7, #2]
 8025652:	2b00      	cmp	r3, #0
 8025654:	d11d      	bne.n	8025692 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8025656:	78fb      	ldrb	r3, [r7, #3]
 8025658:	687a      	ldr	r2, [r7, #4]
 802565a:	212c      	movs	r1, #44	; 0x2c
 802565c:	fb01 f303 	mul.w	r3, r1, r3
 8025660:	4413      	add	r3, r2
 8025662:	3355      	adds	r3, #85	; 0x55
 8025664:	781b      	ldrb	r3, [r3, #0]
 8025666:	2b00      	cmp	r3, #0
 8025668:	d109      	bne.n	802567e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802566a:	78fb      	ldrb	r3, [r7, #3]
 802566c:	687a      	ldr	r2, [r7, #4]
 802566e:	212c      	movs	r1, #44	; 0x2c
 8025670:	fb01 f303 	mul.w	r3, r1, r3
 8025674:	4413      	add	r3, r2
 8025676:	3342      	adds	r3, #66	; 0x42
 8025678:	2200      	movs	r2, #0
 802567a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 802567c:	e073      	b.n	8025766 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802567e:	78fb      	ldrb	r3, [r7, #3]
 8025680:	687a      	ldr	r2, [r7, #4]
 8025682:	212c      	movs	r1, #44	; 0x2c
 8025684:	fb01 f303 	mul.w	r3, r1, r3
 8025688:	4413      	add	r3, r2
 802568a:	3342      	adds	r3, #66	; 0x42
 802568c:	2202      	movs	r2, #2
 802568e:	701a      	strb	r2, [r3, #0]
      break;
 8025690:	e069      	b.n	8025766 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8025692:	78fb      	ldrb	r3, [r7, #3]
 8025694:	687a      	ldr	r2, [r7, #4]
 8025696:	212c      	movs	r1, #44	; 0x2c
 8025698:	fb01 f303 	mul.w	r3, r1, r3
 802569c:	4413      	add	r3, r2
 802569e:	3354      	adds	r3, #84	; 0x54
 80256a0:	781b      	ldrb	r3, [r3, #0]
 80256a2:	2b00      	cmp	r3, #0
 80256a4:	d109      	bne.n	80256ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80256a6:	78fb      	ldrb	r3, [r7, #3]
 80256a8:	687a      	ldr	r2, [r7, #4]
 80256aa:	212c      	movs	r1, #44	; 0x2c
 80256ac:	fb01 f303 	mul.w	r3, r1, r3
 80256b0:	4413      	add	r3, r2
 80256b2:	3342      	adds	r3, #66	; 0x42
 80256b4:	2200      	movs	r2, #0
 80256b6:	701a      	strb	r2, [r3, #0]
      break;
 80256b8:	e055      	b.n	8025766 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80256ba:	78fb      	ldrb	r3, [r7, #3]
 80256bc:	687a      	ldr	r2, [r7, #4]
 80256be:	212c      	movs	r1, #44	; 0x2c
 80256c0:	fb01 f303 	mul.w	r3, r1, r3
 80256c4:	4413      	add	r3, r2
 80256c6:	3342      	adds	r3, #66	; 0x42
 80256c8:	2202      	movs	r2, #2
 80256ca:	701a      	strb	r2, [r3, #0]
      break;
 80256cc:	e04b      	b.n	8025766 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80256ce:	78bb      	ldrb	r3, [r7, #2]
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	d11d      	bne.n	8025710 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80256d4:	78fb      	ldrb	r3, [r7, #3]
 80256d6:	687a      	ldr	r2, [r7, #4]
 80256d8:	212c      	movs	r1, #44	; 0x2c
 80256da:	fb01 f303 	mul.w	r3, r1, r3
 80256de:	4413      	add	r3, r2
 80256e0:	3355      	adds	r3, #85	; 0x55
 80256e2:	781b      	ldrb	r3, [r3, #0]
 80256e4:	2b00      	cmp	r3, #0
 80256e6:	d109      	bne.n	80256fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80256e8:	78fb      	ldrb	r3, [r7, #3]
 80256ea:	687a      	ldr	r2, [r7, #4]
 80256ec:	212c      	movs	r1, #44	; 0x2c
 80256ee:	fb01 f303 	mul.w	r3, r1, r3
 80256f2:	4413      	add	r3, r2
 80256f4:	3342      	adds	r3, #66	; 0x42
 80256f6:	2200      	movs	r2, #0
 80256f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80256fa:	e034      	b.n	8025766 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80256fc:	78fb      	ldrb	r3, [r7, #3]
 80256fe:	687a      	ldr	r2, [r7, #4]
 8025700:	212c      	movs	r1, #44	; 0x2c
 8025702:	fb01 f303 	mul.w	r3, r1, r3
 8025706:	4413      	add	r3, r2
 8025708:	3342      	adds	r3, #66	; 0x42
 802570a:	2202      	movs	r2, #2
 802570c:	701a      	strb	r2, [r3, #0]
      break;
 802570e:	e02a      	b.n	8025766 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8025710:	78fb      	ldrb	r3, [r7, #3]
 8025712:	687a      	ldr	r2, [r7, #4]
 8025714:	212c      	movs	r1, #44	; 0x2c
 8025716:	fb01 f303 	mul.w	r3, r1, r3
 802571a:	4413      	add	r3, r2
 802571c:	3354      	adds	r3, #84	; 0x54
 802571e:	781b      	ldrb	r3, [r3, #0]
 8025720:	2b00      	cmp	r3, #0
 8025722:	d109      	bne.n	8025738 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8025724:	78fb      	ldrb	r3, [r7, #3]
 8025726:	687a      	ldr	r2, [r7, #4]
 8025728:	212c      	movs	r1, #44	; 0x2c
 802572a:	fb01 f303 	mul.w	r3, r1, r3
 802572e:	4413      	add	r3, r2
 8025730:	3342      	adds	r3, #66	; 0x42
 8025732:	2200      	movs	r2, #0
 8025734:	701a      	strb	r2, [r3, #0]
      break;
 8025736:	e016      	b.n	8025766 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025738:	78fb      	ldrb	r3, [r7, #3]
 802573a:	687a      	ldr	r2, [r7, #4]
 802573c:	212c      	movs	r1, #44	; 0x2c
 802573e:	fb01 f303 	mul.w	r3, r1, r3
 8025742:	4413      	add	r3, r2
 8025744:	3342      	adds	r3, #66	; 0x42
 8025746:	2202      	movs	r2, #2
 8025748:	701a      	strb	r2, [r3, #0]
      break;
 802574a:	e00c      	b.n	8025766 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802574c:	78fb      	ldrb	r3, [r7, #3]
 802574e:	687a      	ldr	r2, [r7, #4]
 8025750:	212c      	movs	r1, #44	; 0x2c
 8025752:	fb01 f303 	mul.w	r3, r1, r3
 8025756:	4413      	add	r3, r2
 8025758:	3342      	adds	r3, #66	; 0x42
 802575a:	2200      	movs	r2, #0
 802575c:	701a      	strb	r2, [r3, #0]
      break;
 802575e:	e002      	b.n	8025766 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8025760:	bf00      	nop
 8025762:	e000      	b.n	8025766 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8025764:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8025766:	78fb      	ldrb	r3, [r7, #3]
 8025768:	687a      	ldr	r2, [r7, #4]
 802576a:	212c      	movs	r1, #44	; 0x2c
 802576c:	fb01 f303 	mul.w	r3, r1, r3
 8025770:	4413      	add	r3, r2
 8025772:	3344      	adds	r3, #68	; 0x44
 8025774:	697a      	ldr	r2, [r7, #20]
 8025776:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8025778:	78fb      	ldrb	r3, [r7, #3]
 802577a:	8b3a      	ldrh	r2, [r7, #24]
 802577c:	6879      	ldr	r1, [r7, #4]
 802577e:	202c      	movs	r0, #44	; 0x2c
 8025780:	fb00 f303 	mul.w	r3, r0, r3
 8025784:	440b      	add	r3, r1
 8025786:	334c      	adds	r3, #76	; 0x4c
 8025788:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 802578a:	78fb      	ldrb	r3, [r7, #3]
 802578c:	687a      	ldr	r2, [r7, #4]
 802578e:	212c      	movs	r1, #44	; 0x2c
 8025790:	fb01 f303 	mul.w	r3, r1, r3
 8025794:	4413      	add	r3, r2
 8025796:	3360      	adds	r3, #96	; 0x60
 8025798:	2200      	movs	r2, #0
 802579a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 802579c:	78fb      	ldrb	r3, [r7, #3]
 802579e:	687a      	ldr	r2, [r7, #4]
 80257a0:	212c      	movs	r1, #44	; 0x2c
 80257a2:	fb01 f303 	mul.w	r3, r1, r3
 80257a6:	4413      	add	r3, r2
 80257a8:	3350      	adds	r3, #80	; 0x50
 80257aa:	2200      	movs	r2, #0
 80257ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80257ae:	78fb      	ldrb	r3, [r7, #3]
 80257b0:	687a      	ldr	r2, [r7, #4]
 80257b2:	212c      	movs	r1, #44	; 0x2c
 80257b4:	fb01 f303 	mul.w	r3, r1, r3
 80257b8:	4413      	add	r3, r2
 80257ba:	3339      	adds	r3, #57	; 0x39
 80257bc:	78fa      	ldrb	r2, [r7, #3]
 80257be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80257c0:	78fb      	ldrb	r3, [r7, #3]
 80257c2:	687a      	ldr	r2, [r7, #4]
 80257c4:	212c      	movs	r1, #44	; 0x2c
 80257c6:	fb01 f303 	mul.w	r3, r1, r3
 80257ca:	4413      	add	r3, r2
 80257cc:	3361      	adds	r3, #97	; 0x61
 80257ce:	2200      	movs	r2, #0
 80257d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80257d2:	687b      	ldr	r3, [r7, #4]
 80257d4:	6818      	ldr	r0, [r3, #0]
 80257d6:	78fb      	ldrb	r3, [r7, #3]
 80257d8:	222c      	movs	r2, #44	; 0x2c
 80257da:	fb02 f303 	mul.w	r3, r2, r3
 80257de:	3338      	adds	r3, #56	; 0x38
 80257e0:	687a      	ldr	r2, [r7, #4]
 80257e2:	18d1      	adds	r1, r2, r3
 80257e4:	687b      	ldr	r3, [r7, #4]
 80257e6:	691b      	ldr	r3, [r3, #16]
 80257e8:	b2db      	uxtb	r3, r3
 80257ea:	461a      	mov	r2, r3
 80257ec:	f006 fd68 	bl	802c2c0 <USB_HC_StartXfer>
 80257f0:	4603      	mov	r3, r0
}
 80257f2:	4618      	mov	r0, r3
 80257f4:	3708      	adds	r7, #8
 80257f6:	46bd      	mov	sp, r7
 80257f8:	bd80      	pop	{r7, pc}
 80257fa:	bf00      	nop

080257fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80257fc:	b580      	push	{r7, lr}
 80257fe:	b086      	sub	sp, #24
 8025800:	af00      	add	r7, sp, #0
 8025802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025804:	687b      	ldr	r3, [r7, #4]
 8025806:	681b      	ldr	r3, [r3, #0]
 8025808:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802580a:	693b      	ldr	r3, [r7, #16]
 802580c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 802580e:	687b      	ldr	r3, [r7, #4]
 8025810:	681b      	ldr	r3, [r3, #0]
 8025812:	4618      	mov	r0, r3
 8025814:	f006 fa6f 	bl	802bcf6 <USB_GetMode>
 8025818:	4603      	mov	r3, r0
 802581a:	2b01      	cmp	r3, #1
 802581c:	f040 80f6 	bne.w	8025a0c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8025820:	687b      	ldr	r3, [r7, #4]
 8025822:	681b      	ldr	r3, [r3, #0]
 8025824:	4618      	mov	r0, r3
 8025826:	f006 fa53 	bl	802bcd0 <USB_ReadInterrupts>
 802582a:	4603      	mov	r3, r0
 802582c:	2b00      	cmp	r3, #0
 802582e:	f000 80ec 	beq.w	8025a0a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8025832:	687b      	ldr	r3, [r7, #4]
 8025834:	681b      	ldr	r3, [r3, #0]
 8025836:	4618      	mov	r0, r3
 8025838:	f006 fa4a 	bl	802bcd0 <USB_ReadInterrupts>
 802583c:	4603      	mov	r3, r0
 802583e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8025842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8025846:	d104      	bne.n	8025852 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8025848:	687b      	ldr	r3, [r7, #4]
 802584a:	681b      	ldr	r3, [r3, #0]
 802584c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8025850:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8025852:	687b      	ldr	r3, [r7, #4]
 8025854:	681b      	ldr	r3, [r3, #0]
 8025856:	4618      	mov	r0, r3
 8025858:	f006 fa3a 	bl	802bcd0 <USB_ReadInterrupts>
 802585c:	4603      	mov	r3, r0
 802585e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8025866:	d104      	bne.n	8025872 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8025868:	687b      	ldr	r3, [r7, #4]
 802586a:	681b      	ldr	r3, [r3, #0]
 802586c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8025870:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8025872:	687b      	ldr	r3, [r7, #4]
 8025874:	681b      	ldr	r3, [r3, #0]
 8025876:	4618      	mov	r0, r3
 8025878:	f006 fa2a 	bl	802bcd0 <USB_ReadInterrupts>
 802587c:	4603      	mov	r3, r0
 802587e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8025882:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8025886:	d104      	bne.n	8025892 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8025888:	687b      	ldr	r3, [r7, #4]
 802588a:	681b      	ldr	r3, [r3, #0]
 802588c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8025890:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8025892:	687b      	ldr	r3, [r7, #4]
 8025894:	681b      	ldr	r3, [r3, #0]
 8025896:	4618      	mov	r0, r3
 8025898:	f006 fa1a 	bl	802bcd0 <USB_ReadInterrupts>
 802589c:	4603      	mov	r3, r0
 802589e:	f003 0302 	and.w	r3, r3, #2
 80258a2:	2b02      	cmp	r3, #2
 80258a4:	d103      	bne.n	80258ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80258a6:	687b      	ldr	r3, [r7, #4]
 80258a8:	681b      	ldr	r3, [r3, #0]
 80258aa:	2202      	movs	r2, #2
 80258ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80258ae:	687b      	ldr	r3, [r7, #4]
 80258b0:	681b      	ldr	r3, [r3, #0]
 80258b2:	4618      	mov	r0, r3
 80258b4:	f006 fa0c 	bl	802bcd0 <USB_ReadInterrupts>
 80258b8:	4603      	mov	r3, r0
 80258ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80258be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80258c2:	d11c      	bne.n	80258fe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80258c4:	687b      	ldr	r3, [r7, #4]
 80258c6:	681b      	ldr	r3, [r3, #0]
 80258c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80258cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80258ce:	68fb      	ldr	r3, [r7, #12]
 80258d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80258d4:	681b      	ldr	r3, [r3, #0]
 80258d6:	f003 0301 	and.w	r3, r3, #1
 80258da:	2b00      	cmp	r3, #0
 80258dc:	d10f      	bne.n	80258fe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80258de:	2110      	movs	r1, #16
 80258e0:	6938      	ldr	r0, [r7, #16]
 80258e2:	f006 f8fb 	bl	802badc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80258e6:	6938      	ldr	r0, [r7, #16]
 80258e8:	f006 f92c 	bl	802bb44 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80258ec:	687b      	ldr	r3, [r7, #4]
 80258ee:	681b      	ldr	r3, [r3, #0]
 80258f0:	2101      	movs	r1, #1
 80258f2:	4618      	mov	r0, r3
 80258f4:	f006 fafc 	bl	802bef0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80258f8:	6878      	ldr	r0, [r7, #4]
 80258fa:	f014 f865 	bl	80399c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80258fe:	687b      	ldr	r3, [r7, #4]
 8025900:	681b      	ldr	r3, [r3, #0]
 8025902:	4618      	mov	r0, r3
 8025904:	f006 f9e4 	bl	802bcd0 <USB_ReadInterrupts>
 8025908:	4603      	mov	r3, r0
 802590a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802590e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8025912:	d102      	bne.n	802591a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8025914:	6878      	ldr	r0, [r7, #4]
 8025916:	f001 f89e 	bl	8026a56 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 802591a:	687b      	ldr	r3, [r7, #4]
 802591c:	681b      	ldr	r3, [r3, #0]
 802591e:	4618      	mov	r0, r3
 8025920:	f006 f9d6 	bl	802bcd0 <USB_ReadInterrupts>
 8025924:	4603      	mov	r3, r0
 8025926:	f003 0308 	and.w	r3, r3, #8
 802592a:	2b08      	cmp	r3, #8
 802592c:	d106      	bne.n	802593c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 802592e:	6878      	ldr	r0, [r7, #4]
 8025930:	f014 f82e 	bl	8039990 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8025934:	687b      	ldr	r3, [r7, #4]
 8025936:	681b      	ldr	r3, [r3, #0]
 8025938:	2208      	movs	r2, #8
 802593a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 802593c:	687b      	ldr	r3, [r7, #4]
 802593e:	681b      	ldr	r3, [r3, #0]
 8025940:	4618      	mov	r0, r3
 8025942:	f006 f9c5 	bl	802bcd0 <USB_ReadInterrupts>
 8025946:	4603      	mov	r3, r0
 8025948:	f003 0310 	and.w	r3, r3, #16
 802594c:	2b10      	cmp	r3, #16
 802594e:	d101      	bne.n	8025954 <HAL_HCD_IRQHandler+0x158>
 8025950:	2301      	movs	r3, #1
 8025952:	e000      	b.n	8025956 <HAL_HCD_IRQHandler+0x15a>
 8025954:	2300      	movs	r3, #0
 8025956:	2b00      	cmp	r3, #0
 8025958:	d012      	beq.n	8025980 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802595a:	687b      	ldr	r3, [r7, #4]
 802595c:	681b      	ldr	r3, [r3, #0]
 802595e:	699a      	ldr	r2, [r3, #24]
 8025960:	687b      	ldr	r3, [r7, #4]
 8025962:	681b      	ldr	r3, [r3, #0]
 8025964:	f022 0210 	bic.w	r2, r2, #16
 8025968:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 802596a:	6878      	ldr	r0, [r7, #4]
 802596c:	f000 ffa1 	bl	80268b2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8025970:	687b      	ldr	r3, [r7, #4]
 8025972:	681b      	ldr	r3, [r3, #0]
 8025974:	699a      	ldr	r2, [r3, #24]
 8025976:	687b      	ldr	r3, [r7, #4]
 8025978:	681b      	ldr	r3, [r3, #0]
 802597a:	f042 0210 	orr.w	r2, r2, #16
 802597e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8025980:	687b      	ldr	r3, [r7, #4]
 8025982:	681b      	ldr	r3, [r3, #0]
 8025984:	4618      	mov	r0, r3
 8025986:	f006 f9a3 	bl	802bcd0 <USB_ReadInterrupts>
 802598a:	4603      	mov	r3, r0
 802598c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8025994:	d13a      	bne.n	8025a0c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8025996:	687b      	ldr	r3, [r7, #4]
 8025998:	681b      	ldr	r3, [r3, #0]
 802599a:	4618      	mov	r0, r3
 802599c:	f006 fdd2 	bl	802c544 <USB_HC_ReadInterrupt>
 80259a0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80259a2:	2300      	movs	r3, #0
 80259a4:	617b      	str	r3, [r7, #20]
 80259a6:	e025      	b.n	80259f4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80259a8:	697b      	ldr	r3, [r7, #20]
 80259aa:	f003 030f 	and.w	r3, r3, #15
 80259ae:	68ba      	ldr	r2, [r7, #8]
 80259b0:	fa22 f303 	lsr.w	r3, r2, r3
 80259b4:	f003 0301 	and.w	r3, r3, #1
 80259b8:	2b00      	cmp	r3, #0
 80259ba:	d018      	beq.n	80259ee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80259bc:	697b      	ldr	r3, [r7, #20]
 80259be:	015a      	lsls	r2, r3, #5
 80259c0:	68fb      	ldr	r3, [r7, #12]
 80259c2:	4413      	add	r3, r2
 80259c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259c8:	681b      	ldr	r3, [r3, #0]
 80259ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80259ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80259d2:	d106      	bne.n	80259e2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80259d4:	697b      	ldr	r3, [r7, #20]
 80259d6:	b2db      	uxtb	r3, r3
 80259d8:	4619      	mov	r1, r3
 80259da:	6878      	ldr	r0, [r7, #4]
 80259dc:	f000 f8ab 	bl	8025b36 <HCD_HC_IN_IRQHandler>
 80259e0:	e005      	b.n	80259ee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80259e2:	697b      	ldr	r3, [r7, #20]
 80259e4:	b2db      	uxtb	r3, r3
 80259e6:	4619      	mov	r1, r3
 80259e8:	6878      	ldr	r0, [r7, #4]
 80259ea:	f000 fbf9 	bl	80261e0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80259ee:	697b      	ldr	r3, [r7, #20]
 80259f0:	3301      	adds	r3, #1
 80259f2:	617b      	str	r3, [r7, #20]
 80259f4:	687b      	ldr	r3, [r7, #4]
 80259f6:	689b      	ldr	r3, [r3, #8]
 80259f8:	697a      	ldr	r2, [r7, #20]
 80259fa:	429a      	cmp	r2, r3
 80259fc:	d3d4      	bcc.n	80259a8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80259fe:	687b      	ldr	r3, [r7, #4]
 8025a00:	681b      	ldr	r3, [r3, #0]
 8025a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8025a06:	615a      	str	r2, [r3, #20]
 8025a08:	e000      	b.n	8025a0c <HAL_HCD_IRQHandler+0x210>
      return;
 8025a0a:	bf00      	nop
    }
  }
}
 8025a0c:	3718      	adds	r7, #24
 8025a0e:	46bd      	mov	sp, r7
 8025a10:	bd80      	pop	{r7, pc}

08025a12 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8025a12:	b580      	push	{r7, lr}
 8025a14:	b082      	sub	sp, #8
 8025a16:	af00      	add	r7, sp, #0
 8025a18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8025a1a:	687b      	ldr	r3, [r7, #4]
 8025a1c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8025a20:	2b01      	cmp	r3, #1
 8025a22:	d101      	bne.n	8025a28 <HAL_HCD_Start+0x16>
 8025a24:	2302      	movs	r3, #2
 8025a26:	e013      	b.n	8025a50 <HAL_HCD_Start+0x3e>
 8025a28:	687b      	ldr	r3, [r7, #4]
 8025a2a:	2201      	movs	r2, #1
 8025a2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8025a30:	687b      	ldr	r3, [r7, #4]
 8025a32:	681b      	ldr	r3, [r3, #0]
 8025a34:	2101      	movs	r1, #1
 8025a36:	4618      	mov	r0, r3
 8025a38:	f006 fabe 	bl	802bfb8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8025a3c:	687b      	ldr	r3, [r7, #4]
 8025a3e:	681b      	ldr	r3, [r3, #0]
 8025a40:	4618      	mov	r0, r3
 8025a42:	f005 ffdd 	bl	802ba00 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8025a46:	687b      	ldr	r3, [r7, #4]
 8025a48:	2200      	movs	r2, #0
 8025a4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8025a4e:	2300      	movs	r3, #0
}
 8025a50:	4618      	mov	r0, r3
 8025a52:	3708      	adds	r7, #8
 8025a54:	46bd      	mov	sp, r7
 8025a56:	bd80      	pop	{r7, pc}

08025a58 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8025a58:	b580      	push	{r7, lr}
 8025a5a:	b082      	sub	sp, #8
 8025a5c:	af00      	add	r7, sp, #0
 8025a5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8025a60:	687b      	ldr	r3, [r7, #4]
 8025a62:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8025a66:	2b01      	cmp	r3, #1
 8025a68:	d101      	bne.n	8025a6e <HAL_HCD_Stop+0x16>
 8025a6a:	2302      	movs	r3, #2
 8025a6c:	e00d      	b.n	8025a8a <HAL_HCD_Stop+0x32>
 8025a6e:	687b      	ldr	r3, [r7, #4]
 8025a70:	2201      	movs	r2, #1
 8025a72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8025a76:	687b      	ldr	r3, [r7, #4]
 8025a78:	681b      	ldr	r3, [r3, #0]
 8025a7a:	4618      	mov	r0, r3
 8025a7c:	f006 feac 	bl	802c7d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8025a80:	687b      	ldr	r3, [r7, #4]
 8025a82:	2200      	movs	r2, #0
 8025a84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8025a88:	2300      	movs	r3, #0
}
 8025a8a:	4618      	mov	r0, r3
 8025a8c:	3708      	adds	r7, #8
 8025a8e:	46bd      	mov	sp, r7
 8025a90:	bd80      	pop	{r7, pc}

08025a92 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8025a92:	b580      	push	{r7, lr}
 8025a94:	b082      	sub	sp, #8
 8025a96:	af00      	add	r7, sp, #0
 8025a98:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8025a9a:	687b      	ldr	r3, [r7, #4]
 8025a9c:	681b      	ldr	r3, [r3, #0]
 8025a9e:	4618      	mov	r0, r3
 8025aa0:	f006 fa60 	bl	802bf64 <USB_ResetPort>
 8025aa4:	4603      	mov	r3, r0
}
 8025aa6:	4618      	mov	r0, r3
 8025aa8:	3708      	adds	r7, #8
 8025aaa:	46bd      	mov	sp, r7
 8025aac:	bd80      	pop	{r7, pc}

08025aae <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025aae:	b480      	push	{r7}
 8025ab0:	b083      	sub	sp, #12
 8025ab2:	af00      	add	r7, sp, #0
 8025ab4:	6078      	str	r0, [r7, #4]
 8025ab6:	460b      	mov	r3, r1
 8025ab8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8025aba:	78fb      	ldrb	r3, [r7, #3]
 8025abc:	687a      	ldr	r2, [r7, #4]
 8025abe:	212c      	movs	r1, #44	; 0x2c
 8025ac0:	fb01 f303 	mul.w	r3, r1, r3
 8025ac4:	4413      	add	r3, r2
 8025ac6:	3360      	adds	r3, #96	; 0x60
 8025ac8:	781b      	ldrb	r3, [r3, #0]
}
 8025aca:	4618      	mov	r0, r3
 8025acc:	370c      	adds	r7, #12
 8025ace:	46bd      	mov	sp, r7
 8025ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ad4:	4770      	bx	lr

08025ad6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025ad6:	b480      	push	{r7}
 8025ad8:	b083      	sub	sp, #12
 8025ada:	af00      	add	r7, sp, #0
 8025adc:	6078      	str	r0, [r7, #4]
 8025ade:	460b      	mov	r3, r1
 8025ae0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8025ae2:	78fb      	ldrb	r3, [r7, #3]
 8025ae4:	687a      	ldr	r2, [r7, #4]
 8025ae6:	212c      	movs	r1, #44	; 0x2c
 8025ae8:	fb01 f303 	mul.w	r3, r1, r3
 8025aec:	4413      	add	r3, r2
 8025aee:	3350      	adds	r3, #80	; 0x50
 8025af0:	681b      	ldr	r3, [r3, #0]
}
 8025af2:	4618      	mov	r0, r3
 8025af4:	370c      	adds	r7, #12
 8025af6:	46bd      	mov	sp, r7
 8025af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025afc:	4770      	bx	lr

08025afe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8025afe:	b580      	push	{r7, lr}
 8025b00:	b082      	sub	sp, #8
 8025b02:	af00      	add	r7, sp, #0
 8025b04:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8025b06:	687b      	ldr	r3, [r7, #4]
 8025b08:	681b      	ldr	r3, [r3, #0]
 8025b0a:	4618      	mov	r0, r3
 8025b0c:	f006 faa4 	bl	802c058 <USB_GetCurrentFrame>
 8025b10:	4603      	mov	r3, r0
}
 8025b12:	4618      	mov	r0, r3
 8025b14:	3708      	adds	r7, #8
 8025b16:	46bd      	mov	sp, r7
 8025b18:	bd80      	pop	{r7, pc}

08025b1a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8025b1a:	b580      	push	{r7, lr}
 8025b1c:	b082      	sub	sp, #8
 8025b1e:	af00      	add	r7, sp, #0
 8025b20:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8025b22:	687b      	ldr	r3, [r7, #4]
 8025b24:	681b      	ldr	r3, [r3, #0]
 8025b26:	4618      	mov	r0, r3
 8025b28:	f006 fa7f 	bl	802c02a <USB_GetHostSpeed>
 8025b2c:	4603      	mov	r3, r0
}
 8025b2e:	4618      	mov	r0, r3
 8025b30:	3708      	adds	r7, #8
 8025b32:	46bd      	mov	sp, r7
 8025b34:	bd80      	pop	{r7, pc}

08025b36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025b36:	b580      	push	{r7, lr}
 8025b38:	b086      	sub	sp, #24
 8025b3a:	af00      	add	r7, sp, #0
 8025b3c:	6078      	str	r0, [r7, #4]
 8025b3e:	460b      	mov	r3, r1
 8025b40:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025b42:	687b      	ldr	r3, [r7, #4]
 8025b44:	681b      	ldr	r3, [r3, #0]
 8025b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025b48:	697b      	ldr	r3, [r7, #20]
 8025b4a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8025b4c:	78fb      	ldrb	r3, [r7, #3]
 8025b4e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025b50:	68fb      	ldr	r3, [r7, #12]
 8025b52:	015a      	lsls	r2, r3, #5
 8025b54:	693b      	ldr	r3, [r7, #16]
 8025b56:	4413      	add	r3, r2
 8025b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b5c:	689b      	ldr	r3, [r3, #8]
 8025b5e:	f003 0304 	and.w	r3, r3, #4
 8025b62:	2b04      	cmp	r3, #4
 8025b64:	d11a      	bne.n	8025b9c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8025b66:	68fb      	ldr	r3, [r7, #12]
 8025b68:	015a      	lsls	r2, r3, #5
 8025b6a:	693b      	ldr	r3, [r7, #16]
 8025b6c:	4413      	add	r3, r2
 8025b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b72:	461a      	mov	r2, r3
 8025b74:	2304      	movs	r3, #4
 8025b76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025b78:	687a      	ldr	r2, [r7, #4]
 8025b7a:	68fb      	ldr	r3, [r7, #12]
 8025b7c:	212c      	movs	r1, #44	; 0x2c
 8025b7e:	fb01 f303 	mul.w	r3, r1, r3
 8025b82:	4413      	add	r3, r2
 8025b84:	3361      	adds	r3, #97	; 0x61
 8025b86:	2206      	movs	r2, #6
 8025b88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025b8a:	687b      	ldr	r3, [r7, #4]
 8025b8c:	681b      	ldr	r3, [r3, #0]
 8025b8e:	68fa      	ldr	r2, [r7, #12]
 8025b90:	b2d2      	uxtb	r2, r2
 8025b92:	4611      	mov	r1, r2
 8025b94:	4618      	mov	r0, r3
 8025b96:	f006 fce6 	bl	802c566 <USB_HC_Halt>
 8025b9a:	e0af      	b.n	8025cfc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8025b9c:	68fb      	ldr	r3, [r7, #12]
 8025b9e:	015a      	lsls	r2, r3, #5
 8025ba0:	693b      	ldr	r3, [r7, #16]
 8025ba2:	4413      	add	r3, r2
 8025ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ba8:	689b      	ldr	r3, [r3, #8]
 8025baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8025bb2:	d11b      	bne.n	8025bec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8025bb4:	68fb      	ldr	r3, [r7, #12]
 8025bb6:	015a      	lsls	r2, r3, #5
 8025bb8:	693b      	ldr	r3, [r7, #16]
 8025bba:	4413      	add	r3, r2
 8025bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bc0:	461a      	mov	r2, r3
 8025bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8025bc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8025bc8:	687a      	ldr	r2, [r7, #4]
 8025bca:	68fb      	ldr	r3, [r7, #12]
 8025bcc:	212c      	movs	r1, #44	; 0x2c
 8025bce:	fb01 f303 	mul.w	r3, r1, r3
 8025bd2:	4413      	add	r3, r2
 8025bd4:	3361      	adds	r3, #97	; 0x61
 8025bd6:	2207      	movs	r2, #7
 8025bd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025bda:	687b      	ldr	r3, [r7, #4]
 8025bdc:	681b      	ldr	r3, [r3, #0]
 8025bde:	68fa      	ldr	r2, [r7, #12]
 8025be0:	b2d2      	uxtb	r2, r2
 8025be2:	4611      	mov	r1, r2
 8025be4:	4618      	mov	r0, r3
 8025be6:	f006 fcbe 	bl	802c566 <USB_HC_Halt>
 8025bea:	e087      	b.n	8025cfc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8025bec:	68fb      	ldr	r3, [r7, #12]
 8025bee:	015a      	lsls	r2, r3, #5
 8025bf0:	693b      	ldr	r3, [r7, #16]
 8025bf2:	4413      	add	r3, r2
 8025bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bf8:	689b      	ldr	r3, [r3, #8]
 8025bfa:	f003 0320 	and.w	r3, r3, #32
 8025bfe:	2b20      	cmp	r3, #32
 8025c00:	d109      	bne.n	8025c16 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8025c02:	68fb      	ldr	r3, [r7, #12]
 8025c04:	015a      	lsls	r2, r3, #5
 8025c06:	693b      	ldr	r3, [r7, #16]
 8025c08:	4413      	add	r3, r2
 8025c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c0e:	461a      	mov	r2, r3
 8025c10:	2320      	movs	r3, #32
 8025c12:	6093      	str	r3, [r2, #8]
 8025c14:	e072      	b.n	8025cfc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8025c16:	68fb      	ldr	r3, [r7, #12]
 8025c18:	015a      	lsls	r2, r3, #5
 8025c1a:	693b      	ldr	r3, [r7, #16]
 8025c1c:	4413      	add	r3, r2
 8025c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c22:	689b      	ldr	r3, [r3, #8]
 8025c24:	f003 0308 	and.w	r3, r3, #8
 8025c28:	2b08      	cmp	r3, #8
 8025c2a:	d11a      	bne.n	8025c62 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8025c2c:	68fb      	ldr	r3, [r7, #12]
 8025c2e:	015a      	lsls	r2, r3, #5
 8025c30:	693b      	ldr	r3, [r7, #16]
 8025c32:	4413      	add	r3, r2
 8025c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c38:	461a      	mov	r2, r3
 8025c3a:	2308      	movs	r3, #8
 8025c3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8025c3e:	687a      	ldr	r2, [r7, #4]
 8025c40:	68fb      	ldr	r3, [r7, #12]
 8025c42:	212c      	movs	r1, #44	; 0x2c
 8025c44:	fb01 f303 	mul.w	r3, r1, r3
 8025c48:	4413      	add	r3, r2
 8025c4a:	3361      	adds	r3, #97	; 0x61
 8025c4c:	2205      	movs	r2, #5
 8025c4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025c50:	687b      	ldr	r3, [r7, #4]
 8025c52:	681b      	ldr	r3, [r3, #0]
 8025c54:	68fa      	ldr	r2, [r7, #12]
 8025c56:	b2d2      	uxtb	r2, r2
 8025c58:	4611      	mov	r1, r2
 8025c5a:	4618      	mov	r0, r3
 8025c5c:	f006 fc83 	bl	802c566 <USB_HC_Halt>
 8025c60:	e04c      	b.n	8025cfc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8025c62:	68fb      	ldr	r3, [r7, #12]
 8025c64:	015a      	lsls	r2, r3, #5
 8025c66:	693b      	ldr	r3, [r7, #16]
 8025c68:	4413      	add	r3, r2
 8025c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c6e:	689b      	ldr	r3, [r3, #8]
 8025c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025c78:	d11b      	bne.n	8025cb2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8025c7a:	68fb      	ldr	r3, [r7, #12]
 8025c7c:	015a      	lsls	r2, r3, #5
 8025c7e:	693b      	ldr	r3, [r7, #16]
 8025c80:	4413      	add	r3, r2
 8025c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c86:	461a      	mov	r2, r3
 8025c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025c8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8025c8e:	687a      	ldr	r2, [r7, #4]
 8025c90:	68fb      	ldr	r3, [r7, #12]
 8025c92:	212c      	movs	r1, #44	; 0x2c
 8025c94:	fb01 f303 	mul.w	r3, r1, r3
 8025c98:	4413      	add	r3, r2
 8025c9a:	3361      	adds	r3, #97	; 0x61
 8025c9c:	2208      	movs	r2, #8
 8025c9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025ca0:	687b      	ldr	r3, [r7, #4]
 8025ca2:	681b      	ldr	r3, [r3, #0]
 8025ca4:	68fa      	ldr	r2, [r7, #12]
 8025ca6:	b2d2      	uxtb	r2, r2
 8025ca8:	4611      	mov	r1, r2
 8025caa:	4618      	mov	r0, r3
 8025cac:	f006 fc5b 	bl	802c566 <USB_HC_Halt>
 8025cb0:	e024      	b.n	8025cfc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8025cb2:	68fb      	ldr	r3, [r7, #12]
 8025cb4:	015a      	lsls	r2, r3, #5
 8025cb6:	693b      	ldr	r3, [r7, #16]
 8025cb8:	4413      	add	r3, r2
 8025cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025cbe:	689b      	ldr	r3, [r3, #8]
 8025cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025cc4:	2b80      	cmp	r3, #128	; 0x80
 8025cc6:	d119      	bne.n	8025cfc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8025cc8:	68fb      	ldr	r3, [r7, #12]
 8025cca:	015a      	lsls	r2, r3, #5
 8025ccc:	693b      	ldr	r3, [r7, #16]
 8025cce:	4413      	add	r3, r2
 8025cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025cd4:	461a      	mov	r2, r3
 8025cd6:	2380      	movs	r3, #128	; 0x80
 8025cd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025cda:	687a      	ldr	r2, [r7, #4]
 8025cdc:	68fb      	ldr	r3, [r7, #12]
 8025cde:	212c      	movs	r1, #44	; 0x2c
 8025ce0:	fb01 f303 	mul.w	r3, r1, r3
 8025ce4:	4413      	add	r3, r2
 8025ce6:	3361      	adds	r3, #97	; 0x61
 8025ce8:	2206      	movs	r2, #6
 8025cea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025cec:	687b      	ldr	r3, [r7, #4]
 8025cee:	681b      	ldr	r3, [r3, #0]
 8025cf0:	68fa      	ldr	r2, [r7, #12]
 8025cf2:	b2d2      	uxtb	r2, r2
 8025cf4:	4611      	mov	r1, r2
 8025cf6:	4618      	mov	r0, r3
 8025cf8:	f006 fc35 	bl	802c566 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8025cfc:	68fb      	ldr	r3, [r7, #12]
 8025cfe:	015a      	lsls	r2, r3, #5
 8025d00:	693b      	ldr	r3, [r7, #16]
 8025d02:	4413      	add	r3, r2
 8025d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d08:	689b      	ldr	r3, [r3, #8]
 8025d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025d12:	d112      	bne.n	8025d3a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025d14:	687b      	ldr	r3, [r7, #4]
 8025d16:	681b      	ldr	r3, [r3, #0]
 8025d18:	68fa      	ldr	r2, [r7, #12]
 8025d1a:	b2d2      	uxtb	r2, r2
 8025d1c:	4611      	mov	r1, r2
 8025d1e:	4618      	mov	r0, r3
 8025d20:	f006 fc21 	bl	802c566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8025d24:	68fb      	ldr	r3, [r7, #12]
 8025d26:	015a      	lsls	r2, r3, #5
 8025d28:	693b      	ldr	r3, [r7, #16]
 8025d2a:	4413      	add	r3, r2
 8025d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d30:	461a      	mov	r2, r3
 8025d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025d36:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8025d38:	e24e      	b.n	80261d8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025d3a:	68fb      	ldr	r3, [r7, #12]
 8025d3c:	015a      	lsls	r2, r3, #5
 8025d3e:	693b      	ldr	r3, [r7, #16]
 8025d40:	4413      	add	r3, r2
 8025d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d46:	689b      	ldr	r3, [r3, #8]
 8025d48:	f003 0301 	and.w	r3, r3, #1
 8025d4c:	2b01      	cmp	r3, #1
 8025d4e:	f040 80df 	bne.w	8025f10 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8025d52:	687b      	ldr	r3, [r7, #4]
 8025d54:	691b      	ldr	r3, [r3, #16]
 8025d56:	2b00      	cmp	r3, #0
 8025d58:	d019      	beq.n	8025d8e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025d5a:	687a      	ldr	r2, [r7, #4]
 8025d5c:	68fb      	ldr	r3, [r7, #12]
 8025d5e:	212c      	movs	r1, #44	; 0x2c
 8025d60:	fb01 f303 	mul.w	r3, r1, r3
 8025d64:	4413      	add	r3, r2
 8025d66:	3348      	adds	r3, #72	; 0x48
 8025d68:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8025d6a:	68fb      	ldr	r3, [r7, #12]
 8025d6c:	0159      	lsls	r1, r3, #5
 8025d6e:	693b      	ldr	r3, [r7, #16]
 8025d70:	440b      	add	r3, r1
 8025d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d76:	691b      	ldr	r3, [r3, #16]
 8025d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025d7c:	1ad2      	subs	r2, r2, r3
 8025d7e:	6879      	ldr	r1, [r7, #4]
 8025d80:	68fb      	ldr	r3, [r7, #12]
 8025d82:	202c      	movs	r0, #44	; 0x2c
 8025d84:	fb00 f303 	mul.w	r3, r0, r3
 8025d88:	440b      	add	r3, r1
 8025d8a:	3350      	adds	r3, #80	; 0x50
 8025d8c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8025d8e:	687a      	ldr	r2, [r7, #4]
 8025d90:	68fb      	ldr	r3, [r7, #12]
 8025d92:	212c      	movs	r1, #44	; 0x2c
 8025d94:	fb01 f303 	mul.w	r3, r1, r3
 8025d98:	4413      	add	r3, r2
 8025d9a:	3361      	adds	r3, #97	; 0x61
 8025d9c:	2201      	movs	r2, #1
 8025d9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025da0:	687a      	ldr	r2, [r7, #4]
 8025da2:	68fb      	ldr	r3, [r7, #12]
 8025da4:	212c      	movs	r1, #44	; 0x2c
 8025da6:	fb01 f303 	mul.w	r3, r1, r3
 8025daa:	4413      	add	r3, r2
 8025dac:	335c      	adds	r3, #92	; 0x5c
 8025dae:	2200      	movs	r2, #0
 8025db0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8025db2:	68fb      	ldr	r3, [r7, #12]
 8025db4:	015a      	lsls	r2, r3, #5
 8025db6:	693b      	ldr	r3, [r7, #16]
 8025db8:	4413      	add	r3, r2
 8025dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025dbe:	461a      	mov	r2, r3
 8025dc0:	2301      	movs	r3, #1
 8025dc2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025dc4:	687a      	ldr	r2, [r7, #4]
 8025dc6:	68fb      	ldr	r3, [r7, #12]
 8025dc8:	212c      	movs	r1, #44	; 0x2c
 8025dca:	fb01 f303 	mul.w	r3, r1, r3
 8025dce:	4413      	add	r3, r2
 8025dd0:	333f      	adds	r3, #63	; 0x3f
 8025dd2:	781b      	ldrb	r3, [r3, #0]
 8025dd4:	2b00      	cmp	r3, #0
 8025dd6:	d009      	beq.n	8025dec <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025dd8:	687a      	ldr	r2, [r7, #4]
 8025dda:	68fb      	ldr	r3, [r7, #12]
 8025ddc:	212c      	movs	r1, #44	; 0x2c
 8025dde:	fb01 f303 	mul.w	r3, r1, r3
 8025de2:	4413      	add	r3, r2
 8025de4:	333f      	adds	r3, #63	; 0x3f
 8025de6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025de8:	2b02      	cmp	r3, #2
 8025dea:	d111      	bne.n	8025e10 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025dec:	687b      	ldr	r3, [r7, #4]
 8025dee:	681b      	ldr	r3, [r3, #0]
 8025df0:	68fa      	ldr	r2, [r7, #12]
 8025df2:	b2d2      	uxtb	r2, r2
 8025df4:	4611      	mov	r1, r2
 8025df6:	4618      	mov	r0, r3
 8025df8:	f006 fbb5 	bl	802c566 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025dfc:	68fb      	ldr	r3, [r7, #12]
 8025dfe:	015a      	lsls	r2, r3, #5
 8025e00:	693b      	ldr	r3, [r7, #16]
 8025e02:	4413      	add	r3, r2
 8025e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e08:	461a      	mov	r2, r3
 8025e0a:	2310      	movs	r3, #16
 8025e0c:	6093      	str	r3, [r2, #8]
 8025e0e:	e03a      	b.n	8025e86 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025e10:	687a      	ldr	r2, [r7, #4]
 8025e12:	68fb      	ldr	r3, [r7, #12]
 8025e14:	212c      	movs	r1, #44	; 0x2c
 8025e16:	fb01 f303 	mul.w	r3, r1, r3
 8025e1a:	4413      	add	r3, r2
 8025e1c:	333f      	adds	r3, #63	; 0x3f
 8025e1e:	781b      	ldrb	r3, [r3, #0]
 8025e20:	2b03      	cmp	r3, #3
 8025e22:	d009      	beq.n	8025e38 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8025e24:	687a      	ldr	r2, [r7, #4]
 8025e26:	68fb      	ldr	r3, [r7, #12]
 8025e28:	212c      	movs	r1, #44	; 0x2c
 8025e2a:	fb01 f303 	mul.w	r3, r1, r3
 8025e2e:	4413      	add	r3, r2
 8025e30:	333f      	adds	r3, #63	; 0x3f
 8025e32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025e34:	2b01      	cmp	r3, #1
 8025e36:	d126      	bne.n	8025e86 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8025e38:	68fb      	ldr	r3, [r7, #12]
 8025e3a:	015a      	lsls	r2, r3, #5
 8025e3c:	693b      	ldr	r3, [r7, #16]
 8025e3e:	4413      	add	r3, r2
 8025e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e44:	681b      	ldr	r3, [r3, #0]
 8025e46:	68fa      	ldr	r2, [r7, #12]
 8025e48:	0151      	lsls	r1, r2, #5
 8025e4a:	693a      	ldr	r2, [r7, #16]
 8025e4c:	440a      	add	r2, r1
 8025e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025e52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025e56:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025e58:	687a      	ldr	r2, [r7, #4]
 8025e5a:	68fb      	ldr	r3, [r7, #12]
 8025e5c:	212c      	movs	r1, #44	; 0x2c
 8025e5e:	fb01 f303 	mul.w	r3, r1, r3
 8025e62:	4413      	add	r3, r2
 8025e64:	3360      	adds	r3, #96	; 0x60
 8025e66:	2201      	movs	r2, #1
 8025e68:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025e6a:	68fb      	ldr	r3, [r7, #12]
 8025e6c:	b2d9      	uxtb	r1, r3
 8025e6e:	687a      	ldr	r2, [r7, #4]
 8025e70:	68fb      	ldr	r3, [r7, #12]
 8025e72:	202c      	movs	r0, #44	; 0x2c
 8025e74:	fb00 f303 	mul.w	r3, r0, r3
 8025e78:	4413      	add	r3, r2
 8025e7a:	3360      	adds	r3, #96	; 0x60
 8025e7c:	781b      	ldrb	r3, [r3, #0]
 8025e7e:	461a      	mov	r2, r3
 8025e80:	6878      	ldr	r0, [r7, #4]
 8025e82:	f013 fdaf 	bl	80399e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8025e86:	687b      	ldr	r3, [r7, #4]
 8025e88:	691b      	ldr	r3, [r3, #16]
 8025e8a:	2b01      	cmp	r3, #1
 8025e8c:	d12b      	bne.n	8025ee6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8025e8e:	687a      	ldr	r2, [r7, #4]
 8025e90:	68fb      	ldr	r3, [r7, #12]
 8025e92:	212c      	movs	r1, #44	; 0x2c
 8025e94:	fb01 f303 	mul.w	r3, r1, r3
 8025e98:	4413      	add	r3, r2
 8025e9a:	3348      	adds	r3, #72	; 0x48
 8025e9c:	681b      	ldr	r3, [r3, #0]
 8025e9e:	6879      	ldr	r1, [r7, #4]
 8025ea0:	68fa      	ldr	r2, [r7, #12]
 8025ea2:	202c      	movs	r0, #44	; 0x2c
 8025ea4:	fb00 f202 	mul.w	r2, r0, r2
 8025ea8:	440a      	add	r2, r1
 8025eaa:	3240      	adds	r2, #64	; 0x40
 8025eac:	8812      	ldrh	r2, [r2, #0]
 8025eae:	fbb3 f3f2 	udiv	r3, r3, r2
 8025eb2:	f003 0301 	and.w	r3, r3, #1
 8025eb6:	2b00      	cmp	r3, #0
 8025eb8:	f000 818e 	beq.w	80261d8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8025ebc:	687a      	ldr	r2, [r7, #4]
 8025ebe:	68fb      	ldr	r3, [r7, #12]
 8025ec0:	212c      	movs	r1, #44	; 0x2c
 8025ec2:	fb01 f303 	mul.w	r3, r1, r3
 8025ec6:	4413      	add	r3, r2
 8025ec8:	3354      	adds	r3, #84	; 0x54
 8025eca:	781b      	ldrb	r3, [r3, #0]
 8025ecc:	f083 0301 	eor.w	r3, r3, #1
 8025ed0:	b2d8      	uxtb	r0, r3
 8025ed2:	687a      	ldr	r2, [r7, #4]
 8025ed4:	68fb      	ldr	r3, [r7, #12]
 8025ed6:	212c      	movs	r1, #44	; 0x2c
 8025ed8:	fb01 f303 	mul.w	r3, r1, r3
 8025edc:	4413      	add	r3, r2
 8025ede:	3354      	adds	r3, #84	; 0x54
 8025ee0:	4602      	mov	r2, r0
 8025ee2:	701a      	strb	r2, [r3, #0]
}
 8025ee4:	e178      	b.n	80261d8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8025ee6:	687a      	ldr	r2, [r7, #4]
 8025ee8:	68fb      	ldr	r3, [r7, #12]
 8025eea:	212c      	movs	r1, #44	; 0x2c
 8025eec:	fb01 f303 	mul.w	r3, r1, r3
 8025ef0:	4413      	add	r3, r2
 8025ef2:	3354      	adds	r3, #84	; 0x54
 8025ef4:	781b      	ldrb	r3, [r3, #0]
 8025ef6:	f083 0301 	eor.w	r3, r3, #1
 8025efa:	b2d8      	uxtb	r0, r3
 8025efc:	687a      	ldr	r2, [r7, #4]
 8025efe:	68fb      	ldr	r3, [r7, #12]
 8025f00:	212c      	movs	r1, #44	; 0x2c
 8025f02:	fb01 f303 	mul.w	r3, r1, r3
 8025f06:	4413      	add	r3, r2
 8025f08:	3354      	adds	r3, #84	; 0x54
 8025f0a:	4602      	mov	r2, r0
 8025f0c:	701a      	strb	r2, [r3, #0]
}
 8025f0e:	e163      	b.n	80261d8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8025f10:	68fb      	ldr	r3, [r7, #12]
 8025f12:	015a      	lsls	r2, r3, #5
 8025f14:	693b      	ldr	r3, [r7, #16]
 8025f16:	4413      	add	r3, r2
 8025f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f1c:	689b      	ldr	r3, [r3, #8]
 8025f1e:	f003 0302 	and.w	r3, r3, #2
 8025f22:	2b02      	cmp	r3, #2
 8025f24:	f040 80f6 	bne.w	8026114 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8025f28:	687a      	ldr	r2, [r7, #4]
 8025f2a:	68fb      	ldr	r3, [r7, #12]
 8025f2c:	212c      	movs	r1, #44	; 0x2c
 8025f2e:	fb01 f303 	mul.w	r3, r1, r3
 8025f32:	4413      	add	r3, r2
 8025f34:	3361      	adds	r3, #97	; 0x61
 8025f36:	781b      	ldrb	r3, [r3, #0]
 8025f38:	2b01      	cmp	r3, #1
 8025f3a:	d109      	bne.n	8025f50 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025f3c:	687a      	ldr	r2, [r7, #4]
 8025f3e:	68fb      	ldr	r3, [r7, #12]
 8025f40:	212c      	movs	r1, #44	; 0x2c
 8025f42:	fb01 f303 	mul.w	r3, r1, r3
 8025f46:	4413      	add	r3, r2
 8025f48:	3360      	adds	r3, #96	; 0x60
 8025f4a:	2201      	movs	r2, #1
 8025f4c:	701a      	strb	r2, [r3, #0]
 8025f4e:	e0c9      	b.n	80260e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8025f50:	687a      	ldr	r2, [r7, #4]
 8025f52:	68fb      	ldr	r3, [r7, #12]
 8025f54:	212c      	movs	r1, #44	; 0x2c
 8025f56:	fb01 f303 	mul.w	r3, r1, r3
 8025f5a:	4413      	add	r3, r2
 8025f5c:	3361      	adds	r3, #97	; 0x61
 8025f5e:	781b      	ldrb	r3, [r3, #0]
 8025f60:	2b05      	cmp	r3, #5
 8025f62:	d109      	bne.n	8025f78 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8025f64:	687a      	ldr	r2, [r7, #4]
 8025f66:	68fb      	ldr	r3, [r7, #12]
 8025f68:	212c      	movs	r1, #44	; 0x2c
 8025f6a:	fb01 f303 	mul.w	r3, r1, r3
 8025f6e:	4413      	add	r3, r2
 8025f70:	3360      	adds	r3, #96	; 0x60
 8025f72:	2205      	movs	r2, #5
 8025f74:	701a      	strb	r2, [r3, #0]
 8025f76:	e0b5      	b.n	80260e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025f78:	687a      	ldr	r2, [r7, #4]
 8025f7a:	68fb      	ldr	r3, [r7, #12]
 8025f7c:	212c      	movs	r1, #44	; 0x2c
 8025f7e:	fb01 f303 	mul.w	r3, r1, r3
 8025f82:	4413      	add	r3, r2
 8025f84:	3361      	adds	r3, #97	; 0x61
 8025f86:	781b      	ldrb	r3, [r3, #0]
 8025f88:	2b06      	cmp	r3, #6
 8025f8a:	d009      	beq.n	8025fa0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025f8c:	687a      	ldr	r2, [r7, #4]
 8025f8e:	68fb      	ldr	r3, [r7, #12]
 8025f90:	212c      	movs	r1, #44	; 0x2c
 8025f92:	fb01 f303 	mul.w	r3, r1, r3
 8025f96:	4413      	add	r3, r2
 8025f98:	3361      	adds	r3, #97	; 0x61
 8025f9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025f9c:	2b08      	cmp	r3, #8
 8025f9e:	d150      	bne.n	8026042 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8025fa0:	687a      	ldr	r2, [r7, #4]
 8025fa2:	68fb      	ldr	r3, [r7, #12]
 8025fa4:	212c      	movs	r1, #44	; 0x2c
 8025fa6:	fb01 f303 	mul.w	r3, r1, r3
 8025faa:	4413      	add	r3, r2
 8025fac:	335c      	adds	r3, #92	; 0x5c
 8025fae:	681b      	ldr	r3, [r3, #0]
 8025fb0:	1c5a      	adds	r2, r3, #1
 8025fb2:	6879      	ldr	r1, [r7, #4]
 8025fb4:	68fb      	ldr	r3, [r7, #12]
 8025fb6:	202c      	movs	r0, #44	; 0x2c
 8025fb8:	fb00 f303 	mul.w	r3, r0, r3
 8025fbc:	440b      	add	r3, r1
 8025fbe:	335c      	adds	r3, #92	; 0x5c
 8025fc0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025fc2:	687a      	ldr	r2, [r7, #4]
 8025fc4:	68fb      	ldr	r3, [r7, #12]
 8025fc6:	212c      	movs	r1, #44	; 0x2c
 8025fc8:	fb01 f303 	mul.w	r3, r1, r3
 8025fcc:	4413      	add	r3, r2
 8025fce:	335c      	adds	r3, #92	; 0x5c
 8025fd0:	681b      	ldr	r3, [r3, #0]
 8025fd2:	2b02      	cmp	r3, #2
 8025fd4:	d912      	bls.n	8025ffc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8025fd6:	687a      	ldr	r2, [r7, #4]
 8025fd8:	68fb      	ldr	r3, [r7, #12]
 8025fda:	212c      	movs	r1, #44	; 0x2c
 8025fdc:	fb01 f303 	mul.w	r3, r1, r3
 8025fe0:	4413      	add	r3, r2
 8025fe2:	335c      	adds	r3, #92	; 0x5c
 8025fe4:	2200      	movs	r2, #0
 8025fe6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025fe8:	687a      	ldr	r2, [r7, #4]
 8025fea:	68fb      	ldr	r3, [r7, #12]
 8025fec:	212c      	movs	r1, #44	; 0x2c
 8025fee:	fb01 f303 	mul.w	r3, r1, r3
 8025ff2:	4413      	add	r3, r2
 8025ff4:	3360      	adds	r3, #96	; 0x60
 8025ff6:	2204      	movs	r2, #4
 8025ff8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025ffa:	e073      	b.n	80260e4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025ffc:	687a      	ldr	r2, [r7, #4]
 8025ffe:	68fb      	ldr	r3, [r7, #12]
 8026000:	212c      	movs	r1, #44	; 0x2c
 8026002:	fb01 f303 	mul.w	r3, r1, r3
 8026006:	4413      	add	r3, r2
 8026008:	3360      	adds	r3, #96	; 0x60
 802600a:	2202      	movs	r2, #2
 802600c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 802600e:	68fb      	ldr	r3, [r7, #12]
 8026010:	015a      	lsls	r2, r3, #5
 8026012:	693b      	ldr	r3, [r7, #16]
 8026014:	4413      	add	r3, r2
 8026016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802601a:	681b      	ldr	r3, [r3, #0]
 802601c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802601e:	68bb      	ldr	r3, [r7, #8]
 8026020:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8026024:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8026026:	68bb      	ldr	r3, [r7, #8]
 8026028:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802602c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 802602e:	68fb      	ldr	r3, [r7, #12]
 8026030:	015a      	lsls	r2, r3, #5
 8026032:	693b      	ldr	r3, [r7, #16]
 8026034:	4413      	add	r3, r2
 8026036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802603a:	461a      	mov	r2, r3
 802603c:	68bb      	ldr	r3, [r7, #8]
 802603e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8026040:	e050      	b.n	80260e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8026042:	687a      	ldr	r2, [r7, #4]
 8026044:	68fb      	ldr	r3, [r7, #12]
 8026046:	212c      	movs	r1, #44	; 0x2c
 8026048:	fb01 f303 	mul.w	r3, r1, r3
 802604c:	4413      	add	r3, r2
 802604e:	3361      	adds	r3, #97	; 0x61
 8026050:	781b      	ldrb	r3, [r3, #0]
 8026052:	2b03      	cmp	r3, #3
 8026054:	d122      	bne.n	802609c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8026056:	687a      	ldr	r2, [r7, #4]
 8026058:	68fb      	ldr	r3, [r7, #12]
 802605a:	212c      	movs	r1, #44	; 0x2c
 802605c:	fb01 f303 	mul.w	r3, r1, r3
 8026060:	4413      	add	r3, r2
 8026062:	3360      	adds	r3, #96	; 0x60
 8026064:	2202      	movs	r2, #2
 8026066:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8026068:	68fb      	ldr	r3, [r7, #12]
 802606a:	015a      	lsls	r2, r3, #5
 802606c:	693b      	ldr	r3, [r7, #16]
 802606e:	4413      	add	r3, r2
 8026070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026074:	681b      	ldr	r3, [r3, #0]
 8026076:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8026078:	68bb      	ldr	r3, [r7, #8]
 802607a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802607e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8026080:	68bb      	ldr	r3, [r7, #8]
 8026082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8026086:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8026088:	68fb      	ldr	r3, [r7, #12]
 802608a:	015a      	lsls	r2, r3, #5
 802608c:	693b      	ldr	r3, [r7, #16]
 802608e:	4413      	add	r3, r2
 8026090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026094:	461a      	mov	r2, r3
 8026096:	68bb      	ldr	r3, [r7, #8]
 8026098:	6013      	str	r3, [r2, #0]
 802609a:	e023      	b.n	80260e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 802609c:	687a      	ldr	r2, [r7, #4]
 802609e:	68fb      	ldr	r3, [r7, #12]
 80260a0:	212c      	movs	r1, #44	; 0x2c
 80260a2:	fb01 f303 	mul.w	r3, r1, r3
 80260a6:	4413      	add	r3, r2
 80260a8:	3361      	adds	r3, #97	; 0x61
 80260aa:	781b      	ldrb	r3, [r3, #0]
 80260ac:	2b07      	cmp	r3, #7
 80260ae:	d119      	bne.n	80260e4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80260b0:	687a      	ldr	r2, [r7, #4]
 80260b2:	68fb      	ldr	r3, [r7, #12]
 80260b4:	212c      	movs	r1, #44	; 0x2c
 80260b6:	fb01 f303 	mul.w	r3, r1, r3
 80260ba:	4413      	add	r3, r2
 80260bc:	335c      	adds	r3, #92	; 0x5c
 80260be:	681b      	ldr	r3, [r3, #0]
 80260c0:	1c5a      	adds	r2, r3, #1
 80260c2:	6879      	ldr	r1, [r7, #4]
 80260c4:	68fb      	ldr	r3, [r7, #12]
 80260c6:	202c      	movs	r0, #44	; 0x2c
 80260c8:	fb00 f303 	mul.w	r3, r0, r3
 80260cc:	440b      	add	r3, r1
 80260ce:	335c      	adds	r3, #92	; 0x5c
 80260d0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80260d2:	687a      	ldr	r2, [r7, #4]
 80260d4:	68fb      	ldr	r3, [r7, #12]
 80260d6:	212c      	movs	r1, #44	; 0x2c
 80260d8:	fb01 f303 	mul.w	r3, r1, r3
 80260dc:	4413      	add	r3, r2
 80260de:	3360      	adds	r3, #96	; 0x60
 80260e0:	2204      	movs	r2, #4
 80260e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80260e4:	68fb      	ldr	r3, [r7, #12]
 80260e6:	015a      	lsls	r2, r3, #5
 80260e8:	693b      	ldr	r3, [r7, #16]
 80260ea:	4413      	add	r3, r2
 80260ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260f0:	461a      	mov	r2, r3
 80260f2:	2302      	movs	r3, #2
 80260f4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80260f6:	68fb      	ldr	r3, [r7, #12]
 80260f8:	b2d9      	uxtb	r1, r3
 80260fa:	687a      	ldr	r2, [r7, #4]
 80260fc:	68fb      	ldr	r3, [r7, #12]
 80260fe:	202c      	movs	r0, #44	; 0x2c
 8026100:	fb00 f303 	mul.w	r3, r0, r3
 8026104:	4413      	add	r3, r2
 8026106:	3360      	adds	r3, #96	; 0x60
 8026108:	781b      	ldrb	r3, [r3, #0]
 802610a:	461a      	mov	r2, r3
 802610c:	6878      	ldr	r0, [r7, #4]
 802610e:	f013 fc69 	bl	80399e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8026112:	e061      	b.n	80261d8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8026114:	68fb      	ldr	r3, [r7, #12]
 8026116:	015a      	lsls	r2, r3, #5
 8026118:	693b      	ldr	r3, [r7, #16]
 802611a:	4413      	add	r3, r2
 802611c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026120:	689b      	ldr	r3, [r3, #8]
 8026122:	f003 0310 	and.w	r3, r3, #16
 8026126:	2b10      	cmp	r3, #16
 8026128:	d156      	bne.n	80261d8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 802612a:	687a      	ldr	r2, [r7, #4]
 802612c:	68fb      	ldr	r3, [r7, #12]
 802612e:	212c      	movs	r1, #44	; 0x2c
 8026130:	fb01 f303 	mul.w	r3, r1, r3
 8026134:	4413      	add	r3, r2
 8026136:	333f      	adds	r3, #63	; 0x3f
 8026138:	781b      	ldrb	r3, [r3, #0]
 802613a:	2b03      	cmp	r3, #3
 802613c:	d111      	bne.n	8026162 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 802613e:	687a      	ldr	r2, [r7, #4]
 8026140:	68fb      	ldr	r3, [r7, #12]
 8026142:	212c      	movs	r1, #44	; 0x2c
 8026144:	fb01 f303 	mul.w	r3, r1, r3
 8026148:	4413      	add	r3, r2
 802614a:	335c      	adds	r3, #92	; 0x5c
 802614c:	2200      	movs	r2, #0
 802614e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026150:	687b      	ldr	r3, [r7, #4]
 8026152:	681b      	ldr	r3, [r3, #0]
 8026154:	68fa      	ldr	r2, [r7, #12]
 8026156:	b2d2      	uxtb	r2, r2
 8026158:	4611      	mov	r1, r2
 802615a:	4618      	mov	r0, r3
 802615c:	f006 fa03 	bl	802c566 <USB_HC_Halt>
 8026160:	e031      	b.n	80261c6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8026162:	687a      	ldr	r2, [r7, #4]
 8026164:	68fb      	ldr	r3, [r7, #12]
 8026166:	212c      	movs	r1, #44	; 0x2c
 8026168:	fb01 f303 	mul.w	r3, r1, r3
 802616c:	4413      	add	r3, r2
 802616e:	333f      	adds	r3, #63	; 0x3f
 8026170:	781b      	ldrb	r3, [r3, #0]
 8026172:	2b00      	cmp	r3, #0
 8026174:	d009      	beq.n	802618a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8026176:	687a      	ldr	r2, [r7, #4]
 8026178:	68fb      	ldr	r3, [r7, #12]
 802617a:	212c      	movs	r1, #44	; 0x2c
 802617c:	fb01 f303 	mul.w	r3, r1, r3
 8026180:	4413      	add	r3, r2
 8026182:	333f      	adds	r3, #63	; 0x3f
 8026184:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8026186:	2b02      	cmp	r3, #2
 8026188:	d11d      	bne.n	80261c6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 802618a:	687a      	ldr	r2, [r7, #4]
 802618c:	68fb      	ldr	r3, [r7, #12]
 802618e:	212c      	movs	r1, #44	; 0x2c
 8026190:	fb01 f303 	mul.w	r3, r1, r3
 8026194:	4413      	add	r3, r2
 8026196:	335c      	adds	r3, #92	; 0x5c
 8026198:	2200      	movs	r2, #0
 802619a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 802619c:	687b      	ldr	r3, [r7, #4]
 802619e:	691b      	ldr	r3, [r3, #16]
 80261a0:	2b00      	cmp	r3, #0
 80261a2:	d110      	bne.n	80261c6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80261a4:	687a      	ldr	r2, [r7, #4]
 80261a6:	68fb      	ldr	r3, [r7, #12]
 80261a8:	212c      	movs	r1, #44	; 0x2c
 80261aa:	fb01 f303 	mul.w	r3, r1, r3
 80261ae:	4413      	add	r3, r2
 80261b0:	3361      	adds	r3, #97	; 0x61
 80261b2:	2203      	movs	r2, #3
 80261b4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80261b6:	687b      	ldr	r3, [r7, #4]
 80261b8:	681b      	ldr	r3, [r3, #0]
 80261ba:	68fa      	ldr	r2, [r7, #12]
 80261bc:	b2d2      	uxtb	r2, r2
 80261be:	4611      	mov	r1, r2
 80261c0:	4618      	mov	r0, r3
 80261c2:	f006 f9d0 	bl	802c566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80261c6:	68fb      	ldr	r3, [r7, #12]
 80261c8:	015a      	lsls	r2, r3, #5
 80261ca:	693b      	ldr	r3, [r7, #16]
 80261cc:	4413      	add	r3, r2
 80261ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261d2:	461a      	mov	r2, r3
 80261d4:	2310      	movs	r3, #16
 80261d6:	6093      	str	r3, [r2, #8]
}
 80261d8:	bf00      	nop
 80261da:	3718      	adds	r7, #24
 80261dc:	46bd      	mov	sp, r7
 80261de:	bd80      	pop	{r7, pc}

080261e0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80261e0:	b580      	push	{r7, lr}
 80261e2:	b088      	sub	sp, #32
 80261e4:	af00      	add	r7, sp, #0
 80261e6:	6078      	str	r0, [r7, #4]
 80261e8:	460b      	mov	r3, r1
 80261ea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80261ec:	687b      	ldr	r3, [r7, #4]
 80261ee:	681b      	ldr	r3, [r3, #0]
 80261f0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80261f2:	69fb      	ldr	r3, [r7, #28]
 80261f4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80261f6:	78fb      	ldrb	r3, [r7, #3]
 80261f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80261fa:	697b      	ldr	r3, [r7, #20]
 80261fc:	015a      	lsls	r2, r3, #5
 80261fe:	69bb      	ldr	r3, [r7, #24]
 8026200:	4413      	add	r3, r2
 8026202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026206:	689b      	ldr	r3, [r3, #8]
 8026208:	f003 0304 	and.w	r3, r3, #4
 802620c:	2b04      	cmp	r3, #4
 802620e:	d11a      	bne.n	8026246 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8026210:	697b      	ldr	r3, [r7, #20]
 8026212:	015a      	lsls	r2, r3, #5
 8026214:	69bb      	ldr	r3, [r7, #24]
 8026216:	4413      	add	r3, r2
 8026218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802621c:	461a      	mov	r2, r3
 802621e:	2304      	movs	r3, #4
 8026220:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8026222:	687a      	ldr	r2, [r7, #4]
 8026224:	697b      	ldr	r3, [r7, #20]
 8026226:	212c      	movs	r1, #44	; 0x2c
 8026228:	fb01 f303 	mul.w	r3, r1, r3
 802622c:	4413      	add	r3, r2
 802622e:	3361      	adds	r3, #97	; 0x61
 8026230:	2206      	movs	r2, #6
 8026232:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026234:	687b      	ldr	r3, [r7, #4]
 8026236:	681b      	ldr	r3, [r3, #0]
 8026238:	697a      	ldr	r2, [r7, #20]
 802623a:	b2d2      	uxtb	r2, r2
 802623c:	4611      	mov	r1, r2
 802623e:	4618      	mov	r0, r3
 8026240:	f006 f991 	bl	802c566 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8026244:	e331      	b.n	80268aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8026246:	697b      	ldr	r3, [r7, #20]
 8026248:	015a      	lsls	r2, r3, #5
 802624a:	69bb      	ldr	r3, [r7, #24]
 802624c:	4413      	add	r3, r2
 802624e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026252:	689b      	ldr	r3, [r3, #8]
 8026254:	f003 0320 	and.w	r3, r3, #32
 8026258:	2b20      	cmp	r3, #32
 802625a:	d12e      	bne.n	80262ba <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 802625c:	697b      	ldr	r3, [r7, #20]
 802625e:	015a      	lsls	r2, r3, #5
 8026260:	69bb      	ldr	r3, [r7, #24]
 8026262:	4413      	add	r3, r2
 8026264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026268:	461a      	mov	r2, r3
 802626a:	2320      	movs	r3, #32
 802626c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 802626e:	687a      	ldr	r2, [r7, #4]
 8026270:	697b      	ldr	r3, [r7, #20]
 8026272:	212c      	movs	r1, #44	; 0x2c
 8026274:	fb01 f303 	mul.w	r3, r1, r3
 8026278:	4413      	add	r3, r2
 802627a:	333d      	adds	r3, #61	; 0x3d
 802627c:	781b      	ldrb	r3, [r3, #0]
 802627e:	2b01      	cmp	r3, #1
 8026280:	f040 8313 	bne.w	80268aa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8026284:	687a      	ldr	r2, [r7, #4]
 8026286:	697b      	ldr	r3, [r7, #20]
 8026288:	212c      	movs	r1, #44	; 0x2c
 802628a:	fb01 f303 	mul.w	r3, r1, r3
 802628e:	4413      	add	r3, r2
 8026290:	333d      	adds	r3, #61	; 0x3d
 8026292:	2200      	movs	r2, #0
 8026294:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026296:	687a      	ldr	r2, [r7, #4]
 8026298:	697b      	ldr	r3, [r7, #20]
 802629a:	212c      	movs	r1, #44	; 0x2c
 802629c:	fb01 f303 	mul.w	r3, r1, r3
 80262a0:	4413      	add	r3, r2
 80262a2:	3360      	adds	r3, #96	; 0x60
 80262a4:	2202      	movs	r2, #2
 80262a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80262a8:	687b      	ldr	r3, [r7, #4]
 80262aa:	681b      	ldr	r3, [r3, #0]
 80262ac:	697a      	ldr	r2, [r7, #20]
 80262ae:	b2d2      	uxtb	r2, r2
 80262b0:	4611      	mov	r1, r2
 80262b2:	4618      	mov	r0, r3
 80262b4:	f006 f957 	bl	802c566 <USB_HC_Halt>
}
 80262b8:	e2f7      	b.n	80268aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80262ba:	697b      	ldr	r3, [r7, #20]
 80262bc:	015a      	lsls	r2, r3, #5
 80262be:	69bb      	ldr	r3, [r7, #24]
 80262c0:	4413      	add	r3, r2
 80262c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80262c6:	689b      	ldr	r3, [r3, #8]
 80262c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80262cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80262d0:	d112      	bne.n	80262f8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80262d2:	697b      	ldr	r3, [r7, #20]
 80262d4:	015a      	lsls	r2, r3, #5
 80262d6:	69bb      	ldr	r3, [r7, #24]
 80262d8:	4413      	add	r3, r2
 80262da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80262de:	461a      	mov	r2, r3
 80262e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80262e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80262e6:	687b      	ldr	r3, [r7, #4]
 80262e8:	681b      	ldr	r3, [r3, #0]
 80262ea:	697a      	ldr	r2, [r7, #20]
 80262ec:	b2d2      	uxtb	r2, r2
 80262ee:	4611      	mov	r1, r2
 80262f0:	4618      	mov	r0, r3
 80262f2:	f006 f938 	bl	802c566 <USB_HC_Halt>
}
 80262f6:	e2d8      	b.n	80268aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80262f8:	697b      	ldr	r3, [r7, #20]
 80262fa:	015a      	lsls	r2, r3, #5
 80262fc:	69bb      	ldr	r3, [r7, #24]
 80262fe:	4413      	add	r3, r2
 8026300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026304:	689b      	ldr	r3, [r3, #8]
 8026306:	f003 0301 	and.w	r3, r3, #1
 802630a:	2b01      	cmp	r3, #1
 802630c:	d140      	bne.n	8026390 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 802630e:	687a      	ldr	r2, [r7, #4]
 8026310:	697b      	ldr	r3, [r7, #20]
 8026312:	212c      	movs	r1, #44	; 0x2c
 8026314:	fb01 f303 	mul.w	r3, r1, r3
 8026318:	4413      	add	r3, r2
 802631a:	335c      	adds	r3, #92	; 0x5c
 802631c:	2200      	movs	r2, #0
 802631e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8026320:	697b      	ldr	r3, [r7, #20]
 8026322:	015a      	lsls	r2, r3, #5
 8026324:	69bb      	ldr	r3, [r7, #24]
 8026326:	4413      	add	r3, r2
 8026328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802632c:	689b      	ldr	r3, [r3, #8]
 802632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026332:	2b40      	cmp	r3, #64	; 0x40
 8026334:	d111      	bne.n	802635a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8026336:	687a      	ldr	r2, [r7, #4]
 8026338:	697b      	ldr	r3, [r7, #20]
 802633a:	212c      	movs	r1, #44	; 0x2c
 802633c:	fb01 f303 	mul.w	r3, r1, r3
 8026340:	4413      	add	r3, r2
 8026342:	333d      	adds	r3, #61	; 0x3d
 8026344:	2201      	movs	r2, #1
 8026346:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8026348:	697b      	ldr	r3, [r7, #20]
 802634a:	015a      	lsls	r2, r3, #5
 802634c:	69bb      	ldr	r3, [r7, #24]
 802634e:	4413      	add	r3, r2
 8026350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026354:	461a      	mov	r2, r3
 8026356:	2340      	movs	r3, #64	; 0x40
 8026358:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 802635a:	697b      	ldr	r3, [r7, #20]
 802635c:	015a      	lsls	r2, r3, #5
 802635e:	69bb      	ldr	r3, [r7, #24]
 8026360:	4413      	add	r3, r2
 8026362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026366:	461a      	mov	r2, r3
 8026368:	2301      	movs	r3, #1
 802636a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 802636c:	687a      	ldr	r2, [r7, #4]
 802636e:	697b      	ldr	r3, [r7, #20]
 8026370:	212c      	movs	r1, #44	; 0x2c
 8026372:	fb01 f303 	mul.w	r3, r1, r3
 8026376:	4413      	add	r3, r2
 8026378:	3361      	adds	r3, #97	; 0x61
 802637a:	2201      	movs	r2, #1
 802637c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802637e:	687b      	ldr	r3, [r7, #4]
 8026380:	681b      	ldr	r3, [r3, #0]
 8026382:	697a      	ldr	r2, [r7, #20]
 8026384:	b2d2      	uxtb	r2, r2
 8026386:	4611      	mov	r1, r2
 8026388:	4618      	mov	r0, r3
 802638a:	f006 f8ec 	bl	802c566 <USB_HC_Halt>
}
 802638e:	e28c      	b.n	80268aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8026390:	697b      	ldr	r3, [r7, #20]
 8026392:	015a      	lsls	r2, r3, #5
 8026394:	69bb      	ldr	r3, [r7, #24]
 8026396:	4413      	add	r3, r2
 8026398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802639c:	689b      	ldr	r3, [r3, #8]
 802639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80263a2:	2b40      	cmp	r3, #64	; 0x40
 80263a4:	d12c      	bne.n	8026400 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80263a6:	687a      	ldr	r2, [r7, #4]
 80263a8:	697b      	ldr	r3, [r7, #20]
 80263aa:	212c      	movs	r1, #44	; 0x2c
 80263ac:	fb01 f303 	mul.w	r3, r1, r3
 80263b0:	4413      	add	r3, r2
 80263b2:	3361      	adds	r3, #97	; 0x61
 80263b4:	2204      	movs	r2, #4
 80263b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80263b8:	687a      	ldr	r2, [r7, #4]
 80263ba:	697b      	ldr	r3, [r7, #20]
 80263bc:	212c      	movs	r1, #44	; 0x2c
 80263be:	fb01 f303 	mul.w	r3, r1, r3
 80263c2:	4413      	add	r3, r2
 80263c4:	333d      	adds	r3, #61	; 0x3d
 80263c6:	2201      	movs	r2, #1
 80263c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80263ca:	687a      	ldr	r2, [r7, #4]
 80263cc:	697b      	ldr	r3, [r7, #20]
 80263ce:	212c      	movs	r1, #44	; 0x2c
 80263d0:	fb01 f303 	mul.w	r3, r1, r3
 80263d4:	4413      	add	r3, r2
 80263d6:	335c      	adds	r3, #92	; 0x5c
 80263d8:	2200      	movs	r2, #0
 80263da:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80263dc:	687b      	ldr	r3, [r7, #4]
 80263de:	681b      	ldr	r3, [r3, #0]
 80263e0:	697a      	ldr	r2, [r7, #20]
 80263e2:	b2d2      	uxtb	r2, r2
 80263e4:	4611      	mov	r1, r2
 80263e6:	4618      	mov	r0, r3
 80263e8:	f006 f8bd 	bl	802c566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80263ec:	697b      	ldr	r3, [r7, #20]
 80263ee:	015a      	lsls	r2, r3, #5
 80263f0:	69bb      	ldr	r3, [r7, #24]
 80263f2:	4413      	add	r3, r2
 80263f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80263f8:	461a      	mov	r2, r3
 80263fa:	2340      	movs	r3, #64	; 0x40
 80263fc:	6093      	str	r3, [r2, #8]
}
 80263fe:	e254      	b.n	80268aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8026400:	697b      	ldr	r3, [r7, #20]
 8026402:	015a      	lsls	r2, r3, #5
 8026404:	69bb      	ldr	r3, [r7, #24]
 8026406:	4413      	add	r3, r2
 8026408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802640c:	689b      	ldr	r3, [r3, #8]
 802640e:	f003 0308 	and.w	r3, r3, #8
 8026412:	2b08      	cmp	r3, #8
 8026414:	d11a      	bne.n	802644c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8026416:	697b      	ldr	r3, [r7, #20]
 8026418:	015a      	lsls	r2, r3, #5
 802641a:	69bb      	ldr	r3, [r7, #24]
 802641c:	4413      	add	r3, r2
 802641e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026422:	461a      	mov	r2, r3
 8026424:	2308      	movs	r3, #8
 8026426:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8026428:	687a      	ldr	r2, [r7, #4]
 802642a:	697b      	ldr	r3, [r7, #20]
 802642c:	212c      	movs	r1, #44	; 0x2c
 802642e:	fb01 f303 	mul.w	r3, r1, r3
 8026432:	4413      	add	r3, r2
 8026434:	3361      	adds	r3, #97	; 0x61
 8026436:	2205      	movs	r2, #5
 8026438:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802643a:	687b      	ldr	r3, [r7, #4]
 802643c:	681b      	ldr	r3, [r3, #0]
 802643e:	697a      	ldr	r2, [r7, #20]
 8026440:	b2d2      	uxtb	r2, r2
 8026442:	4611      	mov	r1, r2
 8026444:	4618      	mov	r0, r3
 8026446:	f006 f88e 	bl	802c566 <USB_HC_Halt>
}
 802644a:	e22e      	b.n	80268aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 802644c:	697b      	ldr	r3, [r7, #20]
 802644e:	015a      	lsls	r2, r3, #5
 8026450:	69bb      	ldr	r3, [r7, #24]
 8026452:	4413      	add	r3, r2
 8026454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026458:	689b      	ldr	r3, [r3, #8]
 802645a:	f003 0310 	and.w	r3, r3, #16
 802645e:	2b10      	cmp	r3, #16
 8026460:	d140      	bne.n	80264e4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8026462:	687a      	ldr	r2, [r7, #4]
 8026464:	697b      	ldr	r3, [r7, #20]
 8026466:	212c      	movs	r1, #44	; 0x2c
 8026468:	fb01 f303 	mul.w	r3, r1, r3
 802646c:	4413      	add	r3, r2
 802646e:	335c      	adds	r3, #92	; 0x5c
 8026470:	2200      	movs	r2, #0
 8026472:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8026474:	687a      	ldr	r2, [r7, #4]
 8026476:	697b      	ldr	r3, [r7, #20]
 8026478:	212c      	movs	r1, #44	; 0x2c
 802647a:	fb01 f303 	mul.w	r3, r1, r3
 802647e:	4413      	add	r3, r2
 8026480:	3361      	adds	r3, #97	; 0x61
 8026482:	2203      	movs	r2, #3
 8026484:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8026486:	687a      	ldr	r2, [r7, #4]
 8026488:	697b      	ldr	r3, [r7, #20]
 802648a:	212c      	movs	r1, #44	; 0x2c
 802648c:	fb01 f303 	mul.w	r3, r1, r3
 8026490:	4413      	add	r3, r2
 8026492:	333d      	adds	r3, #61	; 0x3d
 8026494:	781b      	ldrb	r3, [r3, #0]
 8026496:	2b00      	cmp	r3, #0
 8026498:	d112      	bne.n	80264c0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 802649a:	687a      	ldr	r2, [r7, #4]
 802649c:	697b      	ldr	r3, [r7, #20]
 802649e:	212c      	movs	r1, #44	; 0x2c
 80264a0:	fb01 f303 	mul.w	r3, r1, r3
 80264a4:	4413      	add	r3, r2
 80264a6:	333c      	adds	r3, #60	; 0x3c
 80264a8:	781b      	ldrb	r3, [r3, #0]
 80264aa:	2b00      	cmp	r3, #0
 80264ac:	d108      	bne.n	80264c0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80264ae:	687a      	ldr	r2, [r7, #4]
 80264b0:	697b      	ldr	r3, [r7, #20]
 80264b2:	212c      	movs	r1, #44	; 0x2c
 80264b4:	fb01 f303 	mul.w	r3, r1, r3
 80264b8:	4413      	add	r3, r2
 80264ba:	333d      	adds	r3, #61	; 0x3d
 80264bc:	2201      	movs	r2, #1
 80264be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80264c0:	687b      	ldr	r3, [r7, #4]
 80264c2:	681b      	ldr	r3, [r3, #0]
 80264c4:	697a      	ldr	r2, [r7, #20]
 80264c6:	b2d2      	uxtb	r2, r2
 80264c8:	4611      	mov	r1, r2
 80264ca:	4618      	mov	r0, r3
 80264cc:	f006 f84b 	bl	802c566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80264d0:	697b      	ldr	r3, [r7, #20]
 80264d2:	015a      	lsls	r2, r3, #5
 80264d4:	69bb      	ldr	r3, [r7, #24]
 80264d6:	4413      	add	r3, r2
 80264d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80264dc:	461a      	mov	r2, r3
 80264de:	2310      	movs	r3, #16
 80264e0:	6093      	str	r3, [r2, #8]
}
 80264e2:	e1e2      	b.n	80268aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80264e4:	697b      	ldr	r3, [r7, #20]
 80264e6:	015a      	lsls	r2, r3, #5
 80264e8:	69bb      	ldr	r3, [r7, #24]
 80264ea:	4413      	add	r3, r2
 80264ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80264f0:	689b      	ldr	r3, [r3, #8]
 80264f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80264f6:	2b80      	cmp	r3, #128	; 0x80
 80264f8:	d164      	bne.n	80265c4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80264fa:	687b      	ldr	r3, [r7, #4]
 80264fc:	691b      	ldr	r3, [r3, #16]
 80264fe:	2b00      	cmp	r3, #0
 8026500:	d111      	bne.n	8026526 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8026502:	687a      	ldr	r2, [r7, #4]
 8026504:	697b      	ldr	r3, [r7, #20]
 8026506:	212c      	movs	r1, #44	; 0x2c
 8026508:	fb01 f303 	mul.w	r3, r1, r3
 802650c:	4413      	add	r3, r2
 802650e:	3361      	adds	r3, #97	; 0x61
 8026510:	2206      	movs	r2, #6
 8026512:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026514:	687b      	ldr	r3, [r7, #4]
 8026516:	681b      	ldr	r3, [r3, #0]
 8026518:	697a      	ldr	r2, [r7, #20]
 802651a:	b2d2      	uxtb	r2, r2
 802651c:	4611      	mov	r1, r2
 802651e:	4618      	mov	r0, r3
 8026520:	f006 f821 	bl	802c566 <USB_HC_Halt>
 8026524:	e044      	b.n	80265b0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8026526:	687a      	ldr	r2, [r7, #4]
 8026528:	697b      	ldr	r3, [r7, #20]
 802652a:	212c      	movs	r1, #44	; 0x2c
 802652c:	fb01 f303 	mul.w	r3, r1, r3
 8026530:	4413      	add	r3, r2
 8026532:	335c      	adds	r3, #92	; 0x5c
 8026534:	681b      	ldr	r3, [r3, #0]
 8026536:	1c5a      	adds	r2, r3, #1
 8026538:	6879      	ldr	r1, [r7, #4]
 802653a:	697b      	ldr	r3, [r7, #20]
 802653c:	202c      	movs	r0, #44	; 0x2c
 802653e:	fb00 f303 	mul.w	r3, r0, r3
 8026542:	440b      	add	r3, r1
 8026544:	335c      	adds	r3, #92	; 0x5c
 8026546:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8026548:	687a      	ldr	r2, [r7, #4]
 802654a:	697b      	ldr	r3, [r7, #20]
 802654c:	212c      	movs	r1, #44	; 0x2c
 802654e:	fb01 f303 	mul.w	r3, r1, r3
 8026552:	4413      	add	r3, r2
 8026554:	335c      	adds	r3, #92	; 0x5c
 8026556:	681b      	ldr	r3, [r3, #0]
 8026558:	2b02      	cmp	r3, #2
 802655a:	d920      	bls.n	802659e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 802655c:	687a      	ldr	r2, [r7, #4]
 802655e:	697b      	ldr	r3, [r7, #20]
 8026560:	212c      	movs	r1, #44	; 0x2c
 8026562:	fb01 f303 	mul.w	r3, r1, r3
 8026566:	4413      	add	r3, r2
 8026568:	335c      	adds	r3, #92	; 0x5c
 802656a:	2200      	movs	r2, #0
 802656c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 802656e:	687a      	ldr	r2, [r7, #4]
 8026570:	697b      	ldr	r3, [r7, #20]
 8026572:	212c      	movs	r1, #44	; 0x2c
 8026574:	fb01 f303 	mul.w	r3, r1, r3
 8026578:	4413      	add	r3, r2
 802657a:	3360      	adds	r3, #96	; 0x60
 802657c:	2204      	movs	r2, #4
 802657e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8026580:	697b      	ldr	r3, [r7, #20]
 8026582:	b2d9      	uxtb	r1, r3
 8026584:	687a      	ldr	r2, [r7, #4]
 8026586:	697b      	ldr	r3, [r7, #20]
 8026588:	202c      	movs	r0, #44	; 0x2c
 802658a:	fb00 f303 	mul.w	r3, r0, r3
 802658e:	4413      	add	r3, r2
 8026590:	3360      	adds	r3, #96	; 0x60
 8026592:	781b      	ldrb	r3, [r3, #0]
 8026594:	461a      	mov	r2, r3
 8026596:	6878      	ldr	r0, [r7, #4]
 8026598:	f013 fa24 	bl	80399e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 802659c:	e008      	b.n	80265b0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 802659e:	687a      	ldr	r2, [r7, #4]
 80265a0:	697b      	ldr	r3, [r7, #20]
 80265a2:	212c      	movs	r1, #44	; 0x2c
 80265a4:	fb01 f303 	mul.w	r3, r1, r3
 80265a8:	4413      	add	r3, r2
 80265aa:	3360      	adds	r3, #96	; 0x60
 80265ac:	2202      	movs	r2, #2
 80265ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80265b0:	697b      	ldr	r3, [r7, #20]
 80265b2:	015a      	lsls	r2, r3, #5
 80265b4:	69bb      	ldr	r3, [r7, #24]
 80265b6:	4413      	add	r3, r2
 80265b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80265bc:	461a      	mov	r2, r3
 80265be:	2380      	movs	r3, #128	; 0x80
 80265c0:	6093      	str	r3, [r2, #8]
}
 80265c2:	e172      	b.n	80268aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80265c4:	697b      	ldr	r3, [r7, #20]
 80265c6:	015a      	lsls	r2, r3, #5
 80265c8:	69bb      	ldr	r3, [r7, #24]
 80265ca:	4413      	add	r3, r2
 80265cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80265d0:	689b      	ldr	r3, [r3, #8]
 80265d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80265d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80265da:	d11b      	bne.n	8026614 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80265dc:	687a      	ldr	r2, [r7, #4]
 80265de:	697b      	ldr	r3, [r7, #20]
 80265e0:	212c      	movs	r1, #44	; 0x2c
 80265e2:	fb01 f303 	mul.w	r3, r1, r3
 80265e6:	4413      	add	r3, r2
 80265e8:	3361      	adds	r3, #97	; 0x61
 80265ea:	2208      	movs	r2, #8
 80265ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80265ee:	687b      	ldr	r3, [r7, #4]
 80265f0:	681b      	ldr	r3, [r3, #0]
 80265f2:	697a      	ldr	r2, [r7, #20]
 80265f4:	b2d2      	uxtb	r2, r2
 80265f6:	4611      	mov	r1, r2
 80265f8:	4618      	mov	r0, r3
 80265fa:	f005 ffb4 	bl	802c566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80265fe:	697b      	ldr	r3, [r7, #20]
 8026600:	015a      	lsls	r2, r3, #5
 8026602:	69bb      	ldr	r3, [r7, #24]
 8026604:	4413      	add	r3, r2
 8026606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802660a:	461a      	mov	r2, r3
 802660c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026610:	6093      	str	r3, [r2, #8]
}
 8026612:	e14a      	b.n	80268aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8026614:	697b      	ldr	r3, [r7, #20]
 8026616:	015a      	lsls	r2, r3, #5
 8026618:	69bb      	ldr	r3, [r7, #24]
 802661a:	4413      	add	r3, r2
 802661c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026620:	689b      	ldr	r3, [r3, #8]
 8026622:	f003 0302 	and.w	r3, r3, #2
 8026626:	2b02      	cmp	r3, #2
 8026628:	f040 813f 	bne.w	80268aa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 802662c:	687a      	ldr	r2, [r7, #4]
 802662e:	697b      	ldr	r3, [r7, #20]
 8026630:	212c      	movs	r1, #44	; 0x2c
 8026632:	fb01 f303 	mul.w	r3, r1, r3
 8026636:	4413      	add	r3, r2
 8026638:	3361      	adds	r3, #97	; 0x61
 802663a:	781b      	ldrb	r3, [r3, #0]
 802663c:	2b01      	cmp	r3, #1
 802663e:	d17d      	bne.n	802673c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8026640:	687a      	ldr	r2, [r7, #4]
 8026642:	697b      	ldr	r3, [r7, #20]
 8026644:	212c      	movs	r1, #44	; 0x2c
 8026646:	fb01 f303 	mul.w	r3, r1, r3
 802664a:	4413      	add	r3, r2
 802664c:	3360      	adds	r3, #96	; 0x60
 802664e:	2201      	movs	r2, #1
 8026650:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8026652:	687a      	ldr	r2, [r7, #4]
 8026654:	697b      	ldr	r3, [r7, #20]
 8026656:	212c      	movs	r1, #44	; 0x2c
 8026658:	fb01 f303 	mul.w	r3, r1, r3
 802665c:	4413      	add	r3, r2
 802665e:	333f      	adds	r3, #63	; 0x3f
 8026660:	781b      	ldrb	r3, [r3, #0]
 8026662:	2b02      	cmp	r3, #2
 8026664:	d00a      	beq.n	802667c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8026666:	687a      	ldr	r2, [r7, #4]
 8026668:	697b      	ldr	r3, [r7, #20]
 802666a:	212c      	movs	r1, #44	; 0x2c
 802666c:	fb01 f303 	mul.w	r3, r1, r3
 8026670:	4413      	add	r3, r2
 8026672:	333f      	adds	r3, #63	; 0x3f
 8026674:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8026676:	2b03      	cmp	r3, #3
 8026678:	f040 8100 	bne.w	802687c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 802667c:	687b      	ldr	r3, [r7, #4]
 802667e:	691b      	ldr	r3, [r3, #16]
 8026680:	2b00      	cmp	r3, #0
 8026682:	d113      	bne.n	80266ac <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8026684:	687a      	ldr	r2, [r7, #4]
 8026686:	697b      	ldr	r3, [r7, #20]
 8026688:	212c      	movs	r1, #44	; 0x2c
 802668a:	fb01 f303 	mul.w	r3, r1, r3
 802668e:	4413      	add	r3, r2
 8026690:	3355      	adds	r3, #85	; 0x55
 8026692:	781b      	ldrb	r3, [r3, #0]
 8026694:	f083 0301 	eor.w	r3, r3, #1
 8026698:	b2d8      	uxtb	r0, r3
 802669a:	687a      	ldr	r2, [r7, #4]
 802669c:	697b      	ldr	r3, [r7, #20]
 802669e:	212c      	movs	r1, #44	; 0x2c
 80266a0:	fb01 f303 	mul.w	r3, r1, r3
 80266a4:	4413      	add	r3, r2
 80266a6:	3355      	adds	r3, #85	; 0x55
 80266a8:	4602      	mov	r2, r0
 80266aa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80266ac:	687b      	ldr	r3, [r7, #4]
 80266ae:	691b      	ldr	r3, [r3, #16]
 80266b0:	2b01      	cmp	r3, #1
 80266b2:	f040 80e3 	bne.w	802687c <HCD_HC_OUT_IRQHandler+0x69c>
 80266b6:	687a      	ldr	r2, [r7, #4]
 80266b8:	697b      	ldr	r3, [r7, #20]
 80266ba:	212c      	movs	r1, #44	; 0x2c
 80266bc:	fb01 f303 	mul.w	r3, r1, r3
 80266c0:	4413      	add	r3, r2
 80266c2:	334c      	adds	r3, #76	; 0x4c
 80266c4:	681b      	ldr	r3, [r3, #0]
 80266c6:	2b00      	cmp	r3, #0
 80266c8:	f000 80d8 	beq.w	802687c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80266cc:	687a      	ldr	r2, [r7, #4]
 80266ce:	697b      	ldr	r3, [r7, #20]
 80266d0:	212c      	movs	r1, #44	; 0x2c
 80266d2:	fb01 f303 	mul.w	r3, r1, r3
 80266d6:	4413      	add	r3, r2
 80266d8:	334c      	adds	r3, #76	; 0x4c
 80266da:	681b      	ldr	r3, [r3, #0]
 80266dc:	6879      	ldr	r1, [r7, #4]
 80266de:	697a      	ldr	r2, [r7, #20]
 80266e0:	202c      	movs	r0, #44	; 0x2c
 80266e2:	fb00 f202 	mul.w	r2, r0, r2
 80266e6:	440a      	add	r2, r1
 80266e8:	3240      	adds	r2, #64	; 0x40
 80266ea:	8812      	ldrh	r2, [r2, #0]
 80266ec:	4413      	add	r3, r2
 80266ee:	3b01      	subs	r3, #1
 80266f0:	6879      	ldr	r1, [r7, #4]
 80266f2:	697a      	ldr	r2, [r7, #20]
 80266f4:	202c      	movs	r0, #44	; 0x2c
 80266f6:	fb00 f202 	mul.w	r2, r0, r2
 80266fa:	440a      	add	r2, r1
 80266fc:	3240      	adds	r2, #64	; 0x40
 80266fe:	8812      	ldrh	r2, [r2, #0]
 8026700:	fbb3 f3f2 	udiv	r3, r3, r2
 8026704:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8026706:	68fb      	ldr	r3, [r7, #12]
 8026708:	f003 0301 	and.w	r3, r3, #1
 802670c:	2b00      	cmp	r3, #0
 802670e:	f000 80b5 	beq.w	802687c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8026712:	687a      	ldr	r2, [r7, #4]
 8026714:	697b      	ldr	r3, [r7, #20]
 8026716:	212c      	movs	r1, #44	; 0x2c
 8026718:	fb01 f303 	mul.w	r3, r1, r3
 802671c:	4413      	add	r3, r2
 802671e:	3355      	adds	r3, #85	; 0x55
 8026720:	781b      	ldrb	r3, [r3, #0]
 8026722:	f083 0301 	eor.w	r3, r3, #1
 8026726:	b2d8      	uxtb	r0, r3
 8026728:	687a      	ldr	r2, [r7, #4]
 802672a:	697b      	ldr	r3, [r7, #20]
 802672c:	212c      	movs	r1, #44	; 0x2c
 802672e:	fb01 f303 	mul.w	r3, r1, r3
 8026732:	4413      	add	r3, r2
 8026734:	3355      	adds	r3, #85	; 0x55
 8026736:	4602      	mov	r2, r0
 8026738:	701a      	strb	r2, [r3, #0]
 802673a:	e09f      	b.n	802687c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 802673c:	687a      	ldr	r2, [r7, #4]
 802673e:	697b      	ldr	r3, [r7, #20]
 8026740:	212c      	movs	r1, #44	; 0x2c
 8026742:	fb01 f303 	mul.w	r3, r1, r3
 8026746:	4413      	add	r3, r2
 8026748:	3361      	adds	r3, #97	; 0x61
 802674a:	781b      	ldrb	r3, [r3, #0]
 802674c:	2b03      	cmp	r3, #3
 802674e:	d109      	bne.n	8026764 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026750:	687a      	ldr	r2, [r7, #4]
 8026752:	697b      	ldr	r3, [r7, #20]
 8026754:	212c      	movs	r1, #44	; 0x2c
 8026756:	fb01 f303 	mul.w	r3, r1, r3
 802675a:	4413      	add	r3, r2
 802675c:	3360      	adds	r3, #96	; 0x60
 802675e:	2202      	movs	r2, #2
 8026760:	701a      	strb	r2, [r3, #0]
 8026762:	e08b      	b.n	802687c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8026764:	687a      	ldr	r2, [r7, #4]
 8026766:	697b      	ldr	r3, [r7, #20]
 8026768:	212c      	movs	r1, #44	; 0x2c
 802676a:	fb01 f303 	mul.w	r3, r1, r3
 802676e:	4413      	add	r3, r2
 8026770:	3361      	adds	r3, #97	; 0x61
 8026772:	781b      	ldrb	r3, [r3, #0]
 8026774:	2b04      	cmp	r3, #4
 8026776:	d109      	bne.n	802678c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8026778:	687a      	ldr	r2, [r7, #4]
 802677a:	697b      	ldr	r3, [r7, #20]
 802677c:	212c      	movs	r1, #44	; 0x2c
 802677e:	fb01 f303 	mul.w	r3, r1, r3
 8026782:	4413      	add	r3, r2
 8026784:	3360      	adds	r3, #96	; 0x60
 8026786:	2202      	movs	r2, #2
 8026788:	701a      	strb	r2, [r3, #0]
 802678a:	e077      	b.n	802687c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 802678c:	687a      	ldr	r2, [r7, #4]
 802678e:	697b      	ldr	r3, [r7, #20]
 8026790:	212c      	movs	r1, #44	; 0x2c
 8026792:	fb01 f303 	mul.w	r3, r1, r3
 8026796:	4413      	add	r3, r2
 8026798:	3361      	adds	r3, #97	; 0x61
 802679a:	781b      	ldrb	r3, [r3, #0]
 802679c:	2b05      	cmp	r3, #5
 802679e:	d109      	bne.n	80267b4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80267a0:	687a      	ldr	r2, [r7, #4]
 80267a2:	697b      	ldr	r3, [r7, #20]
 80267a4:	212c      	movs	r1, #44	; 0x2c
 80267a6:	fb01 f303 	mul.w	r3, r1, r3
 80267aa:	4413      	add	r3, r2
 80267ac:	3360      	adds	r3, #96	; 0x60
 80267ae:	2205      	movs	r2, #5
 80267b0:	701a      	strb	r2, [r3, #0]
 80267b2:	e063      	b.n	802687c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80267b4:	687a      	ldr	r2, [r7, #4]
 80267b6:	697b      	ldr	r3, [r7, #20]
 80267b8:	212c      	movs	r1, #44	; 0x2c
 80267ba:	fb01 f303 	mul.w	r3, r1, r3
 80267be:	4413      	add	r3, r2
 80267c0:	3361      	adds	r3, #97	; 0x61
 80267c2:	781b      	ldrb	r3, [r3, #0]
 80267c4:	2b06      	cmp	r3, #6
 80267c6:	d009      	beq.n	80267dc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80267c8:	687a      	ldr	r2, [r7, #4]
 80267ca:	697b      	ldr	r3, [r7, #20]
 80267cc:	212c      	movs	r1, #44	; 0x2c
 80267ce:	fb01 f303 	mul.w	r3, r1, r3
 80267d2:	4413      	add	r3, r2
 80267d4:	3361      	adds	r3, #97	; 0x61
 80267d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80267d8:	2b08      	cmp	r3, #8
 80267da:	d14f      	bne.n	802687c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80267dc:	687a      	ldr	r2, [r7, #4]
 80267de:	697b      	ldr	r3, [r7, #20]
 80267e0:	212c      	movs	r1, #44	; 0x2c
 80267e2:	fb01 f303 	mul.w	r3, r1, r3
 80267e6:	4413      	add	r3, r2
 80267e8:	335c      	adds	r3, #92	; 0x5c
 80267ea:	681b      	ldr	r3, [r3, #0]
 80267ec:	1c5a      	adds	r2, r3, #1
 80267ee:	6879      	ldr	r1, [r7, #4]
 80267f0:	697b      	ldr	r3, [r7, #20]
 80267f2:	202c      	movs	r0, #44	; 0x2c
 80267f4:	fb00 f303 	mul.w	r3, r0, r3
 80267f8:	440b      	add	r3, r1
 80267fa:	335c      	adds	r3, #92	; 0x5c
 80267fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80267fe:	687a      	ldr	r2, [r7, #4]
 8026800:	697b      	ldr	r3, [r7, #20]
 8026802:	212c      	movs	r1, #44	; 0x2c
 8026804:	fb01 f303 	mul.w	r3, r1, r3
 8026808:	4413      	add	r3, r2
 802680a:	335c      	adds	r3, #92	; 0x5c
 802680c:	681b      	ldr	r3, [r3, #0]
 802680e:	2b02      	cmp	r3, #2
 8026810:	d912      	bls.n	8026838 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8026812:	687a      	ldr	r2, [r7, #4]
 8026814:	697b      	ldr	r3, [r7, #20]
 8026816:	212c      	movs	r1, #44	; 0x2c
 8026818:	fb01 f303 	mul.w	r3, r1, r3
 802681c:	4413      	add	r3, r2
 802681e:	335c      	adds	r3, #92	; 0x5c
 8026820:	2200      	movs	r2, #0
 8026822:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8026824:	687a      	ldr	r2, [r7, #4]
 8026826:	697b      	ldr	r3, [r7, #20]
 8026828:	212c      	movs	r1, #44	; 0x2c
 802682a:	fb01 f303 	mul.w	r3, r1, r3
 802682e:	4413      	add	r3, r2
 8026830:	3360      	adds	r3, #96	; 0x60
 8026832:	2204      	movs	r2, #4
 8026834:	701a      	strb	r2, [r3, #0]
 8026836:	e021      	b.n	802687c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026838:	687a      	ldr	r2, [r7, #4]
 802683a:	697b      	ldr	r3, [r7, #20]
 802683c:	212c      	movs	r1, #44	; 0x2c
 802683e:	fb01 f303 	mul.w	r3, r1, r3
 8026842:	4413      	add	r3, r2
 8026844:	3360      	adds	r3, #96	; 0x60
 8026846:	2202      	movs	r2, #2
 8026848:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 802684a:	697b      	ldr	r3, [r7, #20]
 802684c:	015a      	lsls	r2, r3, #5
 802684e:	69bb      	ldr	r3, [r7, #24]
 8026850:	4413      	add	r3, r2
 8026852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026856:	681b      	ldr	r3, [r3, #0]
 8026858:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802685a:	693b      	ldr	r3, [r7, #16]
 802685c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8026860:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8026862:	693b      	ldr	r3, [r7, #16]
 8026864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8026868:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 802686a:	697b      	ldr	r3, [r7, #20]
 802686c:	015a      	lsls	r2, r3, #5
 802686e:	69bb      	ldr	r3, [r7, #24]
 8026870:	4413      	add	r3, r2
 8026872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026876:	461a      	mov	r2, r3
 8026878:	693b      	ldr	r3, [r7, #16]
 802687a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 802687c:	697b      	ldr	r3, [r7, #20]
 802687e:	015a      	lsls	r2, r3, #5
 8026880:	69bb      	ldr	r3, [r7, #24]
 8026882:	4413      	add	r3, r2
 8026884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026888:	461a      	mov	r2, r3
 802688a:	2302      	movs	r3, #2
 802688c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 802688e:	697b      	ldr	r3, [r7, #20]
 8026890:	b2d9      	uxtb	r1, r3
 8026892:	687a      	ldr	r2, [r7, #4]
 8026894:	697b      	ldr	r3, [r7, #20]
 8026896:	202c      	movs	r0, #44	; 0x2c
 8026898:	fb00 f303 	mul.w	r3, r0, r3
 802689c:	4413      	add	r3, r2
 802689e:	3360      	adds	r3, #96	; 0x60
 80268a0:	781b      	ldrb	r3, [r3, #0]
 80268a2:	461a      	mov	r2, r3
 80268a4:	6878      	ldr	r0, [r7, #4]
 80268a6:	f013 f89d 	bl	80399e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80268aa:	bf00      	nop
 80268ac:	3720      	adds	r7, #32
 80268ae:	46bd      	mov	sp, r7
 80268b0:	bd80      	pop	{r7, pc}

080268b2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80268b2:	b580      	push	{r7, lr}
 80268b4:	b08a      	sub	sp, #40	; 0x28
 80268b6:	af00      	add	r7, sp, #0
 80268b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80268ba:	687b      	ldr	r3, [r7, #4]
 80268bc:	681b      	ldr	r3, [r3, #0]
 80268be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80268c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80268c2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80268c4:	687b      	ldr	r3, [r7, #4]
 80268c6:	681b      	ldr	r3, [r3, #0]
 80268c8:	6a1b      	ldr	r3, [r3, #32]
 80268ca:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80268cc:	69fb      	ldr	r3, [r7, #28]
 80268ce:	f003 030f 	and.w	r3, r3, #15
 80268d2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80268d4:	69fb      	ldr	r3, [r7, #28]
 80268d6:	0c5b      	lsrs	r3, r3, #17
 80268d8:	f003 030f 	and.w	r3, r3, #15
 80268dc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80268de:	69fb      	ldr	r3, [r7, #28]
 80268e0:	091b      	lsrs	r3, r3, #4
 80268e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80268e6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80268e8:	697b      	ldr	r3, [r7, #20]
 80268ea:	2b02      	cmp	r3, #2
 80268ec:	d004      	beq.n	80268f8 <HCD_RXQLVL_IRQHandler+0x46>
 80268ee:	697b      	ldr	r3, [r7, #20]
 80268f0:	2b05      	cmp	r3, #5
 80268f2:	f000 80a9 	beq.w	8026a48 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80268f6:	e0aa      	b.n	8026a4e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80268f8:	693b      	ldr	r3, [r7, #16]
 80268fa:	2b00      	cmp	r3, #0
 80268fc:	f000 80a6 	beq.w	8026a4c <HCD_RXQLVL_IRQHandler+0x19a>
 8026900:	687a      	ldr	r2, [r7, #4]
 8026902:	69bb      	ldr	r3, [r7, #24]
 8026904:	212c      	movs	r1, #44	; 0x2c
 8026906:	fb01 f303 	mul.w	r3, r1, r3
 802690a:	4413      	add	r3, r2
 802690c:	3344      	adds	r3, #68	; 0x44
 802690e:	681b      	ldr	r3, [r3, #0]
 8026910:	2b00      	cmp	r3, #0
 8026912:	f000 809b 	beq.w	8026a4c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8026916:	687a      	ldr	r2, [r7, #4]
 8026918:	69bb      	ldr	r3, [r7, #24]
 802691a:	212c      	movs	r1, #44	; 0x2c
 802691c:	fb01 f303 	mul.w	r3, r1, r3
 8026920:	4413      	add	r3, r2
 8026922:	3350      	adds	r3, #80	; 0x50
 8026924:	681a      	ldr	r2, [r3, #0]
 8026926:	693b      	ldr	r3, [r7, #16]
 8026928:	441a      	add	r2, r3
 802692a:	6879      	ldr	r1, [r7, #4]
 802692c:	69bb      	ldr	r3, [r7, #24]
 802692e:	202c      	movs	r0, #44	; 0x2c
 8026930:	fb00 f303 	mul.w	r3, r0, r3
 8026934:	440b      	add	r3, r1
 8026936:	334c      	adds	r3, #76	; 0x4c
 8026938:	681b      	ldr	r3, [r3, #0]
 802693a:	429a      	cmp	r2, r3
 802693c:	d87a      	bhi.n	8026a34 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 802693e:	687b      	ldr	r3, [r7, #4]
 8026940:	6818      	ldr	r0, [r3, #0]
 8026942:	687a      	ldr	r2, [r7, #4]
 8026944:	69bb      	ldr	r3, [r7, #24]
 8026946:	212c      	movs	r1, #44	; 0x2c
 8026948:	fb01 f303 	mul.w	r3, r1, r3
 802694c:	4413      	add	r3, r2
 802694e:	3344      	adds	r3, #68	; 0x44
 8026950:	681b      	ldr	r3, [r3, #0]
 8026952:	693a      	ldr	r2, [r7, #16]
 8026954:	b292      	uxth	r2, r2
 8026956:	4619      	mov	r1, r3
 8026958:	f005 f962 	bl	802bc20 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 802695c:	687a      	ldr	r2, [r7, #4]
 802695e:	69bb      	ldr	r3, [r7, #24]
 8026960:	212c      	movs	r1, #44	; 0x2c
 8026962:	fb01 f303 	mul.w	r3, r1, r3
 8026966:	4413      	add	r3, r2
 8026968:	3344      	adds	r3, #68	; 0x44
 802696a:	681a      	ldr	r2, [r3, #0]
 802696c:	693b      	ldr	r3, [r7, #16]
 802696e:	441a      	add	r2, r3
 8026970:	6879      	ldr	r1, [r7, #4]
 8026972:	69bb      	ldr	r3, [r7, #24]
 8026974:	202c      	movs	r0, #44	; 0x2c
 8026976:	fb00 f303 	mul.w	r3, r0, r3
 802697a:	440b      	add	r3, r1
 802697c:	3344      	adds	r3, #68	; 0x44
 802697e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8026980:	687a      	ldr	r2, [r7, #4]
 8026982:	69bb      	ldr	r3, [r7, #24]
 8026984:	212c      	movs	r1, #44	; 0x2c
 8026986:	fb01 f303 	mul.w	r3, r1, r3
 802698a:	4413      	add	r3, r2
 802698c:	3350      	adds	r3, #80	; 0x50
 802698e:	681a      	ldr	r2, [r3, #0]
 8026990:	693b      	ldr	r3, [r7, #16]
 8026992:	441a      	add	r2, r3
 8026994:	6879      	ldr	r1, [r7, #4]
 8026996:	69bb      	ldr	r3, [r7, #24]
 8026998:	202c      	movs	r0, #44	; 0x2c
 802699a:	fb00 f303 	mul.w	r3, r0, r3
 802699e:	440b      	add	r3, r1
 80269a0:	3350      	adds	r3, #80	; 0x50
 80269a2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80269a4:	69bb      	ldr	r3, [r7, #24]
 80269a6:	015a      	lsls	r2, r3, #5
 80269a8:	6a3b      	ldr	r3, [r7, #32]
 80269aa:	4413      	add	r3, r2
 80269ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80269b0:	691b      	ldr	r3, [r3, #16]
 80269b2:	0cdb      	lsrs	r3, r3, #19
 80269b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80269b8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80269ba:	687a      	ldr	r2, [r7, #4]
 80269bc:	69bb      	ldr	r3, [r7, #24]
 80269be:	212c      	movs	r1, #44	; 0x2c
 80269c0:	fb01 f303 	mul.w	r3, r1, r3
 80269c4:	4413      	add	r3, r2
 80269c6:	3340      	adds	r3, #64	; 0x40
 80269c8:	881b      	ldrh	r3, [r3, #0]
 80269ca:	461a      	mov	r2, r3
 80269cc:	693b      	ldr	r3, [r7, #16]
 80269ce:	4293      	cmp	r3, r2
 80269d0:	d13c      	bne.n	8026a4c <HCD_RXQLVL_IRQHandler+0x19a>
 80269d2:	68fb      	ldr	r3, [r7, #12]
 80269d4:	2b00      	cmp	r3, #0
 80269d6:	d039      	beq.n	8026a4c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80269d8:	69bb      	ldr	r3, [r7, #24]
 80269da:	015a      	lsls	r2, r3, #5
 80269dc:	6a3b      	ldr	r3, [r7, #32]
 80269de:	4413      	add	r3, r2
 80269e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80269e4:	681b      	ldr	r3, [r3, #0]
 80269e6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80269e8:	68bb      	ldr	r3, [r7, #8]
 80269ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80269ee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80269f0:	68bb      	ldr	r3, [r7, #8]
 80269f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80269f6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80269f8:	69bb      	ldr	r3, [r7, #24]
 80269fa:	015a      	lsls	r2, r3, #5
 80269fc:	6a3b      	ldr	r3, [r7, #32]
 80269fe:	4413      	add	r3, r2
 8026a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026a04:	461a      	mov	r2, r3
 8026a06:	68bb      	ldr	r3, [r7, #8]
 8026a08:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8026a0a:	687a      	ldr	r2, [r7, #4]
 8026a0c:	69bb      	ldr	r3, [r7, #24]
 8026a0e:	212c      	movs	r1, #44	; 0x2c
 8026a10:	fb01 f303 	mul.w	r3, r1, r3
 8026a14:	4413      	add	r3, r2
 8026a16:	3354      	adds	r3, #84	; 0x54
 8026a18:	781b      	ldrb	r3, [r3, #0]
 8026a1a:	f083 0301 	eor.w	r3, r3, #1
 8026a1e:	b2d8      	uxtb	r0, r3
 8026a20:	687a      	ldr	r2, [r7, #4]
 8026a22:	69bb      	ldr	r3, [r7, #24]
 8026a24:	212c      	movs	r1, #44	; 0x2c
 8026a26:	fb01 f303 	mul.w	r3, r1, r3
 8026a2a:	4413      	add	r3, r2
 8026a2c:	3354      	adds	r3, #84	; 0x54
 8026a2e:	4602      	mov	r2, r0
 8026a30:	701a      	strb	r2, [r3, #0]
      break;
 8026a32:	e00b      	b.n	8026a4c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8026a34:	687a      	ldr	r2, [r7, #4]
 8026a36:	69bb      	ldr	r3, [r7, #24]
 8026a38:	212c      	movs	r1, #44	; 0x2c
 8026a3a:	fb01 f303 	mul.w	r3, r1, r3
 8026a3e:	4413      	add	r3, r2
 8026a40:	3360      	adds	r3, #96	; 0x60
 8026a42:	2204      	movs	r2, #4
 8026a44:	701a      	strb	r2, [r3, #0]
      break;
 8026a46:	e001      	b.n	8026a4c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8026a48:	bf00      	nop
 8026a4a:	e000      	b.n	8026a4e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8026a4c:	bf00      	nop
  }
}
 8026a4e:	bf00      	nop
 8026a50:	3728      	adds	r7, #40	; 0x28
 8026a52:	46bd      	mov	sp, r7
 8026a54:	bd80      	pop	{r7, pc}

08026a56 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8026a56:	b580      	push	{r7, lr}
 8026a58:	b086      	sub	sp, #24
 8026a5a:	af00      	add	r7, sp, #0
 8026a5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8026a5e:	687b      	ldr	r3, [r7, #4]
 8026a60:	681b      	ldr	r3, [r3, #0]
 8026a62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026a64:	697b      	ldr	r3, [r7, #20]
 8026a66:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8026a68:	693b      	ldr	r3, [r7, #16]
 8026a6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026a6e:	681b      	ldr	r3, [r3, #0]
 8026a70:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8026a72:	693b      	ldr	r3, [r7, #16]
 8026a74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026a78:	681b      	ldr	r3, [r3, #0]
 8026a7a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8026a7c:	68bb      	ldr	r3, [r7, #8]
 8026a7e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8026a82:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8026a84:	68fb      	ldr	r3, [r7, #12]
 8026a86:	f003 0302 	and.w	r3, r3, #2
 8026a8a:	2b02      	cmp	r3, #2
 8026a8c:	d10b      	bne.n	8026aa6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8026a8e:	68fb      	ldr	r3, [r7, #12]
 8026a90:	f003 0301 	and.w	r3, r3, #1
 8026a94:	2b01      	cmp	r3, #1
 8026a96:	d102      	bne.n	8026a9e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8026a98:	6878      	ldr	r0, [r7, #4]
 8026a9a:	f012 ff87 	bl	80399ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8026a9e:	68bb      	ldr	r3, [r7, #8]
 8026aa0:	f043 0302 	orr.w	r3, r3, #2
 8026aa4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8026aa6:	68fb      	ldr	r3, [r7, #12]
 8026aa8:	f003 0308 	and.w	r3, r3, #8
 8026aac:	2b08      	cmp	r3, #8
 8026aae:	d132      	bne.n	8026b16 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8026ab0:	68bb      	ldr	r3, [r7, #8]
 8026ab2:	f043 0308 	orr.w	r3, r3, #8
 8026ab6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8026ab8:	68fb      	ldr	r3, [r7, #12]
 8026aba:	f003 0304 	and.w	r3, r3, #4
 8026abe:	2b04      	cmp	r3, #4
 8026ac0:	d126      	bne.n	8026b10 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	699b      	ldr	r3, [r3, #24]
 8026ac6:	2b02      	cmp	r3, #2
 8026ac8:	d113      	bne.n	8026af2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8026aca:	68fb      	ldr	r3, [r7, #12]
 8026acc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8026ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8026ad4:	d106      	bne.n	8026ae4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8026ad6:	687b      	ldr	r3, [r7, #4]
 8026ad8:	681b      	ldr	r3, [r3, #0]
 8026ada:	2102      	movs	r1, #2
 8026adc:	4618      	mov	r0, r3
 8026ade:	f005 fa07 	bl	802bef0 <USB_InitFSLSPClkSel>
 8026ae2:	e011      	b.n	8026b08 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8026ae4:	687b      	ldr	r3, [r7, #4]
 8026ae6:	681b      	ldr	r3, [r3, #0]
 8026ae8:	2101      	movs	r1, #1
 8026aea:	4618      	mov	r0, r3
 8026aec:	f005 fa00 	bl	802bef0 <USB_InitFSLSPClkSel>
 8026af0:	e00a      	b.n	8026b08 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8026af2:	687b      	ldr	r3, [r7, #4]
 8026af4:	68db      	ldr	r3, [r3, #12]
 8026af6:	2b01      	cmp	r3, #1
 8026af8:	d106      	bne.n	8026b08 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8026afa:	693b      	ldr	r3, [r7, #16]
 8026afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8026b00:	461a      	mov	r2, r3
 8026b02:	f64e 2360 	movw	r3, #60000	; 0xea60
 8026b06:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8026b08:	6878      	ldr	r0, [r7, #4]
 8026b0a:	f012 ff7d 	bl	8039a08 <HAL_HCD_PortEnabled_Callback>
 8026b0e:	e002      	b.n	8026b16 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8026b10:	6878      	ldr	r0, [r7, #4]
 8026b12:	f012 ff87 	bl	8039a24 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8026b16:	68fb      	ldr	r3, [r7, #12]
 8026b18:	f003 0320 	and.w	r3, r3, #32
 8026b1c:	2b20      	cmp	r3, #32
 8026b1e:	d103      	bne.n	8026b28 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8026b20:	68bb      	ldr	r3, [r7, #8]
 8026b22:	f043 0320 	orr.w	r3, r3, #32
 8026b26:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8026b28:	693b      	ldr	r3, [r7, #16]
 8026b2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026b2e:	461a      	mov	r2, r3
 8026b30:	68bb      	ldr	r3, [r7, #8]
 8026b32:	6013      	str	r3, [r2, #0]
}
 8026b34:	bf00      	nop
 8026b36:	3718      	adds	r7, #24
 8026b38:	46bd      	mov	sp, r7
 8026b3a:	bd80      	pop	{r7, pc}

08026b3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8026b3c:	b580      	push	{r7, lr}
 8026b3e:	b084      	sub	sp, #16
 8026b40:	af00      	add	r7, sp, #0
 8026b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8026b44:	4b19      	ldr	r3, [pc, #100]	; (8026bac <HAL_PWREx_ConfigSupply+0x70>)
 8026b46:	68db      	ldr	r3, [r3, #12]
 8026b48:	f003 0304 	and.w	r3, r3, #4
 8026b4c:	2b04      	cmp	r3, #4
 8026b4e:	d00a      	beq.n	8026b66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8026b50:	4b16      	ldr	r3, [pc, #88]	; (8026bac <HAL_PWREx_ConfigSupply+0x70>)
 8026b52:	68db      	ldr	r3, [r3, #12]
 8026b54:	f003 0307 	and.w	r3, r3, #7
 8026b58:	687a      	ldr	r2, [r7, #4]
 8026b5a:	429a      	cmp	r2, r3
 8026b5c:	d001      	beq.n	8026b62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8026b5e:	2301      	movs	r3, #1
 8026b60:	e01f      	b.n	8026ba2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8026b62:	2300      	movs	r3, #0
 8026b64:	e01d      	b.n	8026ba2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8026b66:	4b11      	ldr	r3, [pc, #68]	; (8026bac <HAL_PWREx_ConfigSupply+0x70>)
 8026b68:	68db      	ldr	r3, [r3, #12]
 8026b6a:	f023 0207 	bic.w	r2, r3, #7
 8026b6e:	490f      	ldr	r1, [pc, #60]	; (8026bac <HAL_PWREx_ConfigSupply+0x70>)
 8026b70:	687b      	ldr	r3, [r7, #4]
 8026b72:	4313      	orrs	r3, r2
 8026b74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8026b76:	f7fb fab1 	bl	80220dc <HAL_GetTick>
 8026b7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8026b7c:	e009      	b.n	8026b92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8026b7e:	f7fb faad 	bl	80220dc <HAL_GetTick>
 8026b82:	4602      	mov	r2, r0
 8026b84:	68fb      	ldr	r3, [r7, #12]
 8026b86:	1ad3      	subs	r3, r2, r3
 8026b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8026b8c:	d901      	bls.n	8026b92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8026b8e:	2301      	movs	r3, #1
 8026b90:	e007      	b.n	8026ba2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8026b92:	4b06      	ldr	r3, [pc, #24]	; (8026bac <HAL_PWREx_ConfigSupply+0x70>)
 8026b94:	685b      	ldr	r3, [r3, #4]
 8026b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8026b9e:	d1ee      	bne.n	8026b7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8026ba0:	2300      	movs	r3, #0
}
 8026ba2:	4618      	mov	r0, r3
 8026ba4:	3710      	adds	r7, #16
 8026ba6:	46bd      	mov	sp, r7
 8026ba8:	bd80      	pop	{r7, pc}
 8026baa:	bf00      	nop
 8026bac:	58024800 	.word	0x58024800

08026bb0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8026bb0:	b480      	push	{r7}
 8026bb2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8026bb4:	4b05      	ldr	r3, [pc, #20]	; (8026bcc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8026bb6:	68db      	ldr	r3, [r3, #12]
 8026bb8:	4a04      	ldr	r2, [pc, #16]	; (8026bcc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8026bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8026bbe:	60d3      	str	r3, [r2, #12]
}
 8026bc0:	bf00      	nop
 8026bc2:	46bd      	mov	sp, r7
 8026bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bc8:	4770      	bx	lr
 8026bca:	bf00      	nop
 8026bcc:	58024800 	.word	0x58024800

08026bd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026bd0:	b580      	push	{r7, lr}
 8026bd2:	b08c      	sub	sp, #48	; 0x30
 8026bd4:	af00      	add	r7, sp, #0
 8026bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8026bd8:	687b      	ldr	r3, [r7, #4]
 8026bda:	2b00      	cmp	r3, #0
 8026bdc:	d101      	bne.n	8026be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8026bde:	2301      	movs	r3, #1
 8026be0:	e39d      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026be2:	687b      	ldr	r3, [r7, #4]
 8026be4:	681b      	ldr	r3, [r3, #0]
 8026be6:	f003 0301 	and.w	r3, r3, #1
 8026bea:	2b00      	cmp	r3, #0
 8026bec:	f000 8087 	beq.w	8026cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8026bf0:	4b88      	ldr	r3, [pc, #544]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026bf2:	691b      	ldr	r3, [r3, #16]
 8026bf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8026bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8026bfa:	4b86      	ldr	r3, [pc, #536]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8026c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026c02:	2b10      	cmp	r3, #16
 8026c04:	d007      	beq.n	8026c16 <HAL_RCC_OscConfig+0x46>
 8026c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026c08:	2b18      	cmp	r3, #24
 8026c0a:	d110      	bne.n	8026c2e <HAL_RCC_OscConfig+0x5e>
 8026c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026c0e:	f003 0303 	and.w	r3, r3, #3
 8026c12:	2b02      	cmp	r3, #2
 8026c14:	d10b      	bne.n	8026c2e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026c16:	4b7f      	ldr	r3, [pc, #508]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c18:	681b      	ldr	r3, [r3, #0]
 8026c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026c1e:	2b00      	cmp	r3, #0
 8026c20:	d06c      	beq.n	8026cfc <HAL_RCC_OscConfig+0x12c>
 8026c22:	687b      	ldr	r3, [r7, #4]
 8026c24:	685b      	ldr	r3, [r3, #4]
 8026c26:	2b00      	cmp	r3, #0
 8026c28:	d168      	bne.n	8026cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8026c2a:	2301      	movs	r3, #1
 8026c2c:	e377      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026c2e:	687b      	ldr	r3, [r7, #4]
 8026c30:	685b      	ldr	r3, [r3, #4]
 8026c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026c36:	d106      	bne.n	8026c46 <HAL_RCC_OscConfig+0x76>
 8026c38:	4b76      	ldr	r3, [pc, #472]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c3a:	681b      	ldr	r3, [r3, #0]
 8026c3c:	4a75      	ldr	r2, [pc, #468]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026c42:	6013      	str	r3, [r2, #0]
 8026c44:	e02e      	b.n	8026ca4 <HAL_RCC_OscConfig+0xd4>
 8026c46:	687b      	ldr	r3, [r7, #4]
 8026c48:	685b      	ldr	r3, [r3, #4]
 8026c4a:	2b00      	cmp	r3, #0
 8026c4c:	d10c      	bne.n	8026c68 <HAL_RCC_OscConfig+0x98>
 8026c4e:	4b71      	ldr	r3, [pc, #452]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c50:	681b      	ldr	r3, [r3, #0]
 8026c52:	4a70      	ldr	r2, [pc, #448]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026c58:	6013      	str	r3, [r2, #0]
 8026c5a:	4b6e      	ldr	r3, [pc, #440]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c5c:	681b      	ldr	r3, [r3, #0]
 8026c5e:	4a6d      	ldr	r2, [pc, #436]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026c64:	6013      	str	r3, [r2, #0]
 8026c66:	e01d      	b.n	8026ca4 <HAL_RCC_OscConfig+0xd4>
 8026c68:	687b      	ldr	r3, [r7, #4]
 8026c6a:	685b      	ldr	r3, [r3, #4]
 8026c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8026c70:	d10c      	bne.n	8026c8c <HAL_RCC_OscConfig+0xbc>
 8026c72:	4b68      	ldr	r3, [pc, #416]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c74:	681b      	ldr	r3, [r3, #0]
 8026c76:	4a67      	ldr	r2, [pc, #412]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026c7c:	6013      	str	r3, [r2, #0]
 8026c7e:	4b65      	ldr	r3, [pc, #404]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c80:	681b      	ldr	r3, [r3, #0]
 8026c82:	4a64      	ldr	r2, [pc, #400]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026c88:	6013      	str	r3, [r2, #0]
 8026c8a:	e00b      	b.n	8026ca4 <HAL_RCC_OscConfig+0xd4>
 8026c8c:	4b61      	ldr	r3, [pc, #388]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c8e:	681b      	ldr	r3, [r3, #0]
 8026c90:	4a60      	ldr	r2, [pc, #384]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026c96:	6013      	str	r3, [r2, #0]
 8026c98:	4b5e      	ldr	r3, [pc, #376]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c9a:	681b      	ldr	r3, [r3, #0]
 8026c9c:	4a5d      	ldr	r2, [pc, #372]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8026ca4:	687b      	ldr	r3, [r7, #4]
 8026ca6:	685b      	ldr	r3, [r3, #4]
 8026ca8:	2b00      	cmp	r3, #0
 8026caa:	d013      	beq.n	8026cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026cac:	f7fb fa16 	bl	80220dc <HAL_GetTick>
 8026cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8026cb2:	e008      	b.n	8026cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026cb4:	f7fb fa12 	bl	80220dc <HAL_GetTick>
 8026cb8:	4602      	mov	r2, r0
 8026cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026cbc:	1ad3      	subs	r3, r2, r3
 8026cbe:	2b64      	cmp	r3, #100	; 0x64
 8026cc0:	d901      	bls.n	8026cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8026cc2:	2303      	movs	r3, #3
 8026cc4:	e32b      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8026cc6:	4b53      	ldr	r3, [pc, #332]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026cc8:	681b      	ldr	r3, [r3, #0]
 8026cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026cce:	2b00      	cmp	r3, #0
 8026cd0:	d0f0      	beq.n	8026cb4 <HAL_RCC_OscConfig+0xe4>
 8026cd2:	e014      	b.n	8026cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026cd4:	f7fb fa02 	bl	80220dc <HAL_GetTick>
 8026cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8026cda:	e008      	b.n	8026cee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026cdc:	f7fb f9fe 	bl	80220dc <HAL_GetTick>
 8026ce0:	4602      	mov	r2, r0
 8026ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026ce4:	1ad3      	subs	r3, r2, r3
 8026ce6:	2b64      	cmp	r3, #100	; 0x64
 8026ce8:	d901      	bls.n	8026cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8026cea:	2303      	movs	r3, #3
 8026cec:	e317      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8026cee:	4b49      	ldr	r3, [pc, #292]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026cf0:	681b      	ldr	r3, [r3, #0]
 8026cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026cf6:	2b00      	cmp	r3, #0
 8026cf8:	d1f0      	bne.n	8026cdc <HAL_RCC_OscConfig+0x10c>
 8026cfa:	e000      	b.n	8026cfe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8026cfe:	687b      	ldr	r3, [r7, #4]
 8026d00:	681b      	ldr	r3, [r3, #0]
 8026d02:	f003 0302 	and.w	r3, r3, #2
 8026d06:	2b00      	cmp	r3, #0
 8026d08:	f000 808c 	beq.w	8026e24 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8026d0c:	4b41      	ldr	r3, [pc, #260]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026d0e:	691b      	ldr	r3, [r3, #16]
 8026d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8026d14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8026d16:	4b3f      	ldr	r3, [pc, #252]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d1a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8026d1c:	6a3b      	ldr	r3, [r7, #32]
 8026d1e:	2b00      	cmp	r3, #0
 8026d20:	d007      	beq.n	8026d32 <HAL_RCC_OscConfig+0x162>
 8026d22:	6a3b      	ldr	r3, [r7, #32]
 8026d24:	2b18      	cmp	r3, #24
 8026d26:	d137      	bne.n	8026d98 <HAL_RCC_OscConfig+0x1c8>
 8026d28:	69fb      	ldr	r3, [r7, #28]
 8026d2a:	f003 0303 	and.w	r3, r3, #3
 8026d2e:	2b00      	cmp	r3, #0
 8026d30:	d132      	bne.n	8026d98 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8026d32:	4b38      	ldr	r3, [pc, #224]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026d34:	681b      	ldr	r3, [r3, #0]
 8026d36:	f003 0304 	and.w	r3, r3, #4
 8026d3a:	2b00      	cmp	r3, #0
 8026d3c:	d005      	beq.n	8026d4a <HAL_RCC_OscConfig+0x17a>
 8026d3e:	687b      	ldr	r3, [r7, #4]
 8026d40:	68db      	ldr	r3, [r3, #12]
 8026d42:	2b00      	cmp	r3, #0
 8026d44:	d101      	bne.n	8026d4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8026d46:	2301      	movs	r3, #1
 8026d48:	e2e9      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8026d4a:	4b32      	ldr	r3, [pc, #200]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026d4c:	681b      	ldr	r3, [r3, #0]
 8026d4e:	f023 0219 	bic.w	r2, r3, #25
 8026d52:	687b      	ldr	r3, [r7, #4]
 8026d54:	68db      	ldr	r3, [r3, #12]
 8026d56:	492f      	ldr	r1, [pc, #188]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026d58:	4313      	orrs	r3, r2
 8026d5a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8026d5c:	f7fb f9be 	bl	80220dc <HAL_GetTick>
 8026d60:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8026d62:	e008      	b.n	8026d76 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026d64:	f7fb f9ba 	bl	80220dc <HAL_GetTick>
 8026d68:	4602      	mov	r2, r0
 8026d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026d6c:	1ad3      	subs	r3, r2, r3
 8026d6e:	2b02      	cmp	r3, #2
 8026d70:	d901      	bls.n	8026d76 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8026d72:	2303      	movs	r3, #3
 8026d74:	e2d3      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8026d76:	4b27      	ldr	r3, [pc, #156]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026d78:	681b      	ldr	r3, [r3, #0]
 8026d7a:	f003 0304 	and.w	r3, r3, #4
 8026d7e:	2b00      	cmp	r3, #0
 8026d80:	d0f0      	beq.n	8026d64 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026d82:	4b24      	ldr	r3, [pc, #144]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026d84:	685b      	ldr	r3, [r3, #4]
 8026d86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8026d8a:	687b      	ldr	r3, [r7, #4]
 8026d8c:	691b      	ldr	r3, [r3, #16]
 8026d8e:	061b      	lsls	r3, r3, #24
 8026d90:	4920      	ldr	r1, [pc, #128]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026d92:	4313      	orrs	r3, r2
 8026d94:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8026d96:	e045      	b.n	8026e24 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8026d98:	687b      	ldr	r3, [r7, #4]
 8026d9a:	68db      	ldr	r3, [r3, #12]
 8026d9c:	2b00      	cmp	r3, #0
 8026d9e:	d026      	beq.n	8026dee <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8026da0:	4b1c      	ldr	r3, [pc, #112]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026da2:	681b      	ldr	r3, [r3, #0]
 8026da4:	f023 0219 	bic.w	r2, r3, #25
 8026da8:	687b      	ldr	r3, [r7, #4]
 8026daa:	68db      	ldr	r3, [r3, #12]
 8026dac:	4919      	ldr	r1, [pc, #100]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026dae:	4313      	orrs	r3, r2
 8026db0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026db2:	f7fb f993 	bl	80220dc <HAL_GetTick>
 8026db6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8026db8:	e008      	b.n	8026dcc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026dba:	f7fb f98f 	bl	80220dc <HAL_GetTick>
 8026dbe:	4602      	mov	r2, r0
 8026dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026dc2:	1ad3      	subs	r3, r2, r3
 8026dc4:	2b02      	cmp	r3, #2
 8026dc6:	d901      	bls.n	8026dcc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8026dc8:	2303      	movs	r3, #3
 8026dca:	e2a8      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8026dcc:	4b11      	ldr	r3, [pc, #68]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026dce:	681b      	ldr	r3, [r3, #0]
 8026dd0:	f003 0304 	and.w	r3, r3, #4
 8026dd4:	2b00      	cmp	r3, #0
 8026dd6:	d0f0      	beq.n	8026dba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026dd8:	4b0e      	ldr	r3, [pc, #56]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026dda:	685b      	ldr	r3, [r3, #4]
 8026ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8026de0:	687b      	ldr	r3, [r7, #4]
 8026de2:	691b      	ldr	r3, [r3, #16]
 8026de4:	061b      	lsls	r3, r3, #24
 8026de6:	490b      	ldr	r1, [pc, #44]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026de8:	4313      	orrs	r3, r2
 8026dea:	604b      	str	r3, [r1, #4]
 8026dec:	e01a      	b.n	8026e24 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8026dee:	4b09      	ldr	r3, [pc, #36]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026df0:	681b      	ldr	r3, [r3, #0]
 8026df2:	4a08      	ldr	r2, [pc, #32]	; (8026e14 <HAL_RCC_OscConfig+0x244>)
 8026df4:	f023 0301 	bic.w	r3, r3, #1
 8026df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026dfa:	f7fb f96f 	bl	80220dc <HAL_GetTick>
 8026dfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8026e00:	e00a      	b.n	8026e18 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026e02:	f7fb f96b 	bl	80220dc <HAL_GetTick>
 8026e06:	4602      	mov	r2, r0
 8026e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026e0a:	1ad3      	subs	r3, r2, r3
 8026e0c:	2b02      	cmp	r3, #2
 8026e0e:	d903      	bls.n	8026e18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8026e10:	2303      	movs	r3, #3
 8026e12:	e284      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
 8026e14:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8026e18:	4b96      	ldr	r3, [pc, #600]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026e1a:	681b      	ldr	r3, [r3, #0]
 8026e1c:	f003 0304 	and.w	r3, r3, #4
 8026e20:	2b00      	cmp	r3, #0
 8026e22:	d1ee      	bne.n	8026e02 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8026e24:	687b      	ldr	r3, [r7, #4]
 8026e26:	681b      	ldr	r3, [r3, #0]
 8026e28:	f003 0310 	and.w	r3, r3, #16
 8026e2c:	2b00      	cmp	r3, #0
 8026e2e:	d06a      	beq.n	8026f06 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8026e30:	4b90      	ldr	r3, [pc, #576]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026e32:	691b      	ldr	r3, [r3, #16]
 8026e34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8026e38:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8026e3a:	4b8e      	ldr	r3, [pc, #568]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026e3e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8026e40:	69bb      	ldr	r3, [r7, #24]
 8026e42:	2b08      	cmp	r3, #8
 8026e44:	d007      	beq.n	8026e56 <HAL_RCC_OscConfig+0x286>
 8026e46:	69bb      	ldr	r3, [r7, #24]
 8026e48:	2b18      	cmp	r3, #24
 8026e4a:	d11b      	bne.n	8026e84 <HAL_RCC_OscConfig+0x2b4>
 8026e4c:	697b      	ldr	r3, [r7, #20]
 8026e4e:	f003 0303 	and.w	r3, r3, #3
 8026e52:	2b01      	cmp	r3, #1
 8026e54:	d116      	bne.n	8026e84 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8026e56:	4b87      	ldr	r3, [pc, #540]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026e58:	681b      	ldr	r3, [r3, #0]
 8026e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026e5e:	2b00      	cmp	r3, #0
 8026e60:	d005      	beq.n	8026e6e <HAL_RCC_OscConfig+0x29e>
 8026e62:	687b      	ldr	r3, [r7, #4]
 8026e64:	69db      	ldr	r3, [r3, #28]
 8026e66:	2b80      	cmp	r3, #128	; 0x80
 8026e68:	d001      	beq.n	8026e6e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8026e6a:	2301      	movs	r3, #1
 8026e6c:	e257      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8026e6e:	4b81      	ldr	r3, [pc, #516]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026e70:	68db      	ldr	r3, [r3, #12]
 8026e72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8026e76:	687b      	ldr	r3, [r7, #4]
 8026e78:	6a1b      	ldr	r3, [r3, #32]
 8026e7a:	061b      	lsls	r3, r3, #24
 8026e7c:	497d      	ldr	r1, [pc, #500]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026e7e:	4313      	orrs	r3, r2
 8026e80:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8026e82:	e040      	b.n	8026f06 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8026e84:	687b      	ldr	r3, [r7, #4]
 8026e86:	69db      	ldr	r3, [r3, #28]
 8026e88:	2b00      	cmp	r3, #0
 8026e8a:	d023      	beq.n	8026ed4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8026e8c:	4b79      	ldr	r3, [pc, #484]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026e8e:	681b      	ldr	r3, [r3, #0]
 8026e90:	4a78      	ldr	r2, [pc, #480]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026e98:	f7fb f920 	bl	80220dc <HAL_GetTick>
 8026e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8026e9e:	e008      	b.n	8026eb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8026ea0:	f7fb f91c 	bl	80220dc <HAL_GetTick>
 8026ea4:	4602      	mov	r2, r0
 8026ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026ea8:	1ad3      	subs	r3, r2, r3
 8026eaa:	2b02      	cmp	r3, #2
 8026eac:	d901      	bls.n	8026eb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8026eae:	2303      	movs	r3, #3
 8026eb0:	e235      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8026eb2:	4b70      	ldr	r3, [pc, #448]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026eb4:	681b      	ldr	r3, [r3, #0]
 8026eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026eba:	2b00      	cmp	r3, #0
 8026ebc:	d0f0      	beq.n	8026ea0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8026ebe:	4b6d      	ldr	r3, [pc, #436]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026ec0:	68db      	ldr	r3, [r3, #12]
 8026ec2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8026ec6:	687b      	ldr	r3, [r7, #4]
 8026ec8:	6a1b      	ldr	r3, [r3, #32]
 8026eca:	061b      	lsls	r3, r3, #24
 8026ecc:	4969      	ldr	r1, [pc, #420]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026ece:	4313      	orrs	r3, r2
 8026ed0:	60cb      	str	r3, [r1, #12]
 8026ed2:	e018      	b.n	8026f06 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8026ed4:	4b67      	ldr	r3, [pc, #412]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026ed6:	681b      	ldr	r3, [r3, #0]
 8026ed8:	4a66      	ldr	r2, [pc, #408]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8026ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026ee0:	f7fb f8fc 	bl	80220dc <HAL_GetTick>
 8026ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8026ee6:	e008      	b.n	8026efa <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8026ee8:	f7fb f8f8 	bl	80220dc <HAL_GetTick>
 8026eec:	4602      	mov	r2, r0
 8026eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026ef0:	1ad3      	subs	r3, r2, r3
 8026ef2:	2b02      	cmp	r3, #2
 8026ef4:	d901      	bls.n	8026efa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8026ef6:	2303      	movs	r3, #3
 8026ef8:	e211      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8026efa:	4b5e      	ldr	r3, [pc, #376]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026efc:	681b      	ldr	r3, [r3, #0]
 8026efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026f02:	2b00      	cmp	r3, #0
 8026f04:	d1f0      	bne.n	8026ee8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8026f06:	687b      	ldr	r3, [r7, #4]
 8026f08:	681b      	ldr	r3, [r3, #0]
 8026f0a:	f003 0308 	and.w	r3, r3, #8
 8026f0e:	2b00      	cmp	r3, #0
 8026f10:	d036      	beq.n	8026f80 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8026f12:	687b      	ldr	r3, [r7, #4]
 8026f14:	695b      	ldr	r3, [r3, #20]
 8026f16:	2b00      	cmp	r3, #0
 8026f18:	d019      	beq.n	8026f4e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8026f1a:	4b56      	ldr	r3, [pc, #344]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026f1e:	4a55      	ldr	r2, [pc, #340]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026f20:	f043 0301 	orr.w	r3, r3, #1
 8026f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026f26:	f7fb f8d9 	bl	80220dc <HAL_GetTick>
 8026f2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8026f2c:	e008      	b.n	8026f40 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026f2e:	f7fb f8d5 	bl	80220dc <HAL_GetTick>
 8026f32:	4602      	mov	r2, r0
 8026f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026f36:	1ad3      	subs	r3, r2, r3
 8026f38:	2b02      	cmp	r3, #2
 8026f3a:	d901      	bls.n	8026f40 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8026f3c:	2303      	movs	r3, #3
 8026f3e:	e1ee      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8026f40:	4b4c      	ldr	r3, [pc, #304]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026f44:	f003 0302 	and.w	r3, r3, #2
 8026f48:	2b00      	cmp	r3, #0
 8026f4a:	d0f0      	beq.n	8026f2e <HAL_RCC_OscConfig+0x35e>
 8026f4c:	e018      	b.n	8026f80 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8026f4e:	4b49      	ldr	r3, [pc, #292]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026f52:	4a48      	ldr	r2, [pc, #288]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026f54:	f023 0301 	bic.w	r3, r3, #1
 8026f58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026f5a:	f7fb f8bf 	bl	80220dc <HAL_GetTick>
 8026f5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8026f60:	e008      	b.n	8026f74 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026f62:	f7fb f8bb 	bl	80220dc <HAL_GetTick>
 8026f66:	4602      	mov	r2, r0
 8026f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026f6a:	1ad3      	subs	r3, r2, r3
 8026f6c:	2b02      	cmp	r3, #2
 8026f6e:	d901      	bls.n	8026f74 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8026f70:	2303      	movs	r3, #3
 8026f72:	e1d4      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8026f74:	4b3f      	ldr	r3, [pc, #252]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026f78:	f003 0302 	and.w	r3, r3, #2
 8026f7c:	2b00      	cmp	r3, #0
 8026f7e:	d1f0      	bne.n	8026f62 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8026f80:	687b      	ldr	r3, [r7, #4]
 8026f82:	681b      	ldr	r3, [r3, #0]
 8026f84:	f003 0320 	and.w	r3, r3, #32
 8026f88:	2b00      	cmp	r3, #0
 8026f8a:	d036      	beq.n	8026ffa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8026f8c:	687b      	ldr	r3, [r7, #4]
 8026f8e:	699b      	ldr	r3, [r3, #24]
 8026f90:	2b00      	cmp	r3, #0
 8026f92:	d019      	beq.n	8026fc8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8026f94:	4b37      	ldr	r3, [pc, #220]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026f96:	681b      	ldr	r3, [r3, #0]
 8026f98:	4a36      	ldr	r2, [pc, #216]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026f9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8026f9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8026fa0:	f7fb f89c 	bl	80220dc <HAL_GetTick>
 8026fa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8026fa6:	e008      	b.n	8026fba <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8026fa8:	f7fb f898 	bl	80220dc <HAL_GetTick>
 8026fac:	4602      	mov	r2, r0
 8026fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026fb0:	1ad3      	subs	r3, r2, r3
 8026fb2:	2b02      	cmp	r3, #2
 8026fb4:	d901      	bls.n	8026fba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8026fb6:	2303      	movs	r3, #3
 8026fb8:	e1b1      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8026fba:	4b2e      	ldr	r3, [pc, #184]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026fbc:	681b      	ldr	r3, [r3, #0]
 8026fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026fc2:	2b00      	cmp	r3, #0
 8026fc4:	d0f0      	beq.n	8026fa8 <HAL_RCC_OscConfig+0x3d8>
 8026fc6:	e018      	b.n	8026ffa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8026fc8:	4b2a      	ldr	r3, [pc, #168]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026fca:	681b      	ldr	r3, [r3, #0]
 8026fcc:	4a29      	ldr	r2, [pc, #164]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026fd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8026fd4:	f7fb f882 	bl	80220dc <HAL_GetTick>
 8026fd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8026fda:	e008      	b.n	8026fee <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8026fdc:	f7fb f87e 	bl	80220dc <HAL_GetTick>
 8026fe0:	4602      	mov	r2, r0
 8026fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026fe4:	1ad3      	subs	r3, r2, r3
 8026fe6:	2b02      	cmp	r3, #2
 8026fe8:	d901      	bls.n	8026fee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8026fea:	2303      	movs	r3, #3
 8026fec:	e197      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8026fee:	4b21      	ldr	r3, [pc, #132]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8026ff0:	681b      	ldr	r3, [r3, #0]
 8026ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026ff6:	2b00      	cmp	r3, #0
 8026ff8:	d1f0      	bne.n	8026fdc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8026ffa:	687b      	ldr	r3, [r7, #4]
 8026ffc:	681b      	ldr	r3, [r3, #0]
 8026ffe:	f003 0304 	and.w	r3, r3, #4
 8027002:	2b00      	cmp	r3, #0
 8027004:	f000 8086 	beq.w	8027114 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8027008:	4b1b      	ldr	r3, [pc, #108]	; (8027078 <HAL_RCC_OscConfig+0x4a8>)
 802700a:	681b      	ldr	r3, [r3, #0]
 802700c:	4a1a      	ldr	r2, [pc, #104]	; (8027078 <HAL_RCC_OscConfig+0x4a8>)
 802700e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8027014:	f7fb f862 	bl	80220dc <HAL_GetTick>
 8027018:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802701a:	e008      	b.n	802702e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802701c:	f7fb f85e 	bl	80220dc <HAL_GetTick>
 8027020:	4602      	mov	r2, r0
 8027022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027024:	1ad3      	subs	r3, r2, r3
 8027026:	2b64      	cmp	r3, #100	; 0x64
 8027028:	d901      	bls.n	802702e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 802702a:	2303      	movs	r3, #3
 802702c:	e177      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802702e:	4b12      	ldr	r3, [pc, #72]	; (8027078 <HAL_RCC_OscConfig+0x4a8>)
 8027030:	681b      	ldr	r3, [r3, #0]
 8027032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027036:	2b00      	cmp	r3, #0
 8027038:	d0f0      	beq.n	802701c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802703a:	687b      	ldr	r3, [r7, #4]
 802703c:	689b      	ldr	r3, [r3, #8]
 802703e:	2b01      	cmp	r3, #1
 8027040:	d106      	bne.n	8027050 <HAL_RCC_OscConfig+0x480>
 8027042:	4b0c      	ldr	r3, [pc, #48]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8027044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027046:	4a0b      	ldr	r2, [pc, #44]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8027048:	f043 0301 	orr.w	r3, r3, #1
 802704c:	6713      	str	r3, [r2, #112]	; 0x70
 802704e:	e032      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e6>
 8027050:	687b      	ldr	r3, [r7, #4]
 8027052:	689b      	ldr	r3, [r3, #8]
 8027054:	2b00      	cmp	r3, #0
 8027056:	d111      	bne.n	802707c <HAL_RCC_OscConfig+0x4ac>
 8027058:	4b06      	ldr	r3, [pc, #24]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 802705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802705c:	4a05      	ldr	r2, [pc, #20]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 802705e:	f023 0301 	bic.w	r3, r3, #1
 8027062:	6713      	str	r3, [r2, #112]	; 0x70
 8027064:	4b03      	ldr	r3, [pc, #12]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 8027066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027068:	4a02      	ldr	r2, [pc, #8]	; (8027074 <HAL_RCC_OscConfig+0x4a4>)
 802706a:	f023 0304 	bic.w	r3, r3, #4
 802706e:	6713      	str	r3, [r2, #112]	; 0x70
 8027070:	e021      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e6>
 8027072:	bf00      	nop
 8027074:	58024400 	.word	0x58024400
 8027078:	58024800 	.word	0x58024800
 802707c:	687b      	ldr	r3, [r7, #4]
 802707e:	689b      	ldr	r3, [r3, #8]
 8027080:	2b05      	cmp	r3, #5
 8027082:	d10c      	bne.n	802709e <HAL_RCC_OscConfig+0x4ce>
 8027084:	4b83      	ldr	r3, [pc, #524]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027088:	4a82      	ldr	r2, [pc, #520]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 802708a:	f043 0304 	orr.w	r3, r3, #4
 802708e:	6713      	str	r3, [r2, #112]	; 0x70
 8027090:	4b80      	ldr	r3, [pc, #512]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027094:	4a7f      	ldr	r2, [pc, #508]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027096:	f043 0301 	orr.w	r3, r3, #1
 802709a:	6713      	str	r3, [r2, #112]	; 0x70
 802709c:	e00b      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e6>
 802709e:	4b7d      	ldr	r3, [pc, #500]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80270a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80270a2:	4a7c      	ldr	r2, [pc, #496]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80270a4:	f023 0301 	bic.w	r3, r3, #1
 80270a8:	6713      	str	r3, [r2, #112]	; 0x70
 80270aa:	4b7a      	ldr	r3, [pc, #488]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80270ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80270ae:	4a79      	ldr	r2, [pc, #484]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80270b0:	f023 0304 	bic.w	r3, r3, #4
 80270b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80270b6:	687b      	ldr	r3, [r7, #4]
 80270b8:	689b      	ldr	r3, [r3, #8]
 80270ba:	2b00      	cmp	r3, #0
 80270bc:	d015      	beq.n	80270ea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80270be:	f7fb f80d 	bl	80220dc <HAL_GetTick>
 80270c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80270c4:	e00a      	b.n	80270dc <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80270c6:	f7fb f809 	bl	80220dc <HAL_GetTick>
 80270ca:	4602      	mov	r2, r0
 80270cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80270ce:	1ad3      	subs	r3, r2, r3
 80270d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80270d4:	4293      	cmp	r3, r2
 80270d6:	d901      	bls.n	80270dc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80270d8:	2303      	movs	r3, #3
 80270da:	e120      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80270dc:	4b6d      	ldr	r3, [pc, #436]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80270de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80270e0:	f003 0302 	and.w	r3, r3, #2
 80270e4:	2b00      	cmp	r3, #0
 80270e6:	d0ee      	beq.n	80270c6 <HAL_RCC_OscConfig+0x4f6>
 80270e8:	e014      	b.n	8027114 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80270ea:	f7fa fff7 	bl	80220dc <HAL_GetTick>
 80270ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80270f0:	e00a      	b.n	8027108 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80270f2:	f7fa fff3 	bl	80220dc <HAL_GetTick>
 80270f6:	4602      	mov	r2, r0
 80270f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80270fa:	1ad3      	subs	r3, r2, r3
 80270fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8027100:	4293      	cmp	r3, r2
 8027102:	d901      	bls.n	8027108 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8027104:	2303      	movs	r3, #3
 8027106:	e10a      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8027108:	4b62      	ldr	r3, [pc, #392]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 802710a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802710c:	f003 0302 	and.w	r3, r3, #2
 8027110:	2b00      	cmp	r3, #0
 8027112:	d1ee      	bne.n	80270f2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8027114:	687b      	ldr	r3, [r7, #4]
 8027116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027118:	2b00      	cmp	r3, #0
 802711a:	f000 80ff 	beq.w	802731c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 802711e:	4b5d      	ldr	r3, [pc, #372]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027120:	691b      	ldr	r3, [r3, #16]
 8027122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8027126:	2b18      	cmp	r3, #24
 8027128:	f000 80ba 	beq.w	80272a0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802712c:	687b      	ldr	r3, [r7, #4]
 802712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027130:	2b02      	cmp	r3, #2
 8027132:	f040 8095 	bne.w	8027260 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027136:	4b57      	ldr	r3, [pc, #348]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027138:	681b      	ldr	r3, [r3, #0]
 802713a:	4a56      	ldr	r2, [pc, #344]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 802713c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027142:	f7fa ffcb 	bl	80220dc <HAL_GetTick>
 8027146:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8027148:	e008      	b.n	802715c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802714a:	f7fa ffc7 	bl	80220dc <HAL_GetTick>
 802714e:	4602      	mov	r2, r0
 8027150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027152:	1ad3      	subs	r3, r2, r3
 8027154:	2b02      	cmp	r3, #2
 8027156:	d901      	bls.n	802715c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8027158:	2303      	movs	r3, #3
 802715a:	e0e0      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802715c:	4b4d      	ldr	r3, [pc, #308]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 802715e:	681b      	ldr	r3, [r3, #0]
 8027160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027164:	2b00      	cmp	r3, #0
 8027166:	d1f0      	bne.n	802714a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8027168:	4b4a      	ldr	r3, [pc, #296]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 802716a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802716c:	4b4a      	ldr	r3, [pc, #296]	; (8027298 <HAL_RCC_OscConfig+0x6c8>)
 802716e:	4013      	ands	r3, r2
 8027170:	687a      	ldr	r2, [r7, #4]
 8027172:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8027174:	687a      	ldr	r2, [r7, #4]
 8027176:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8027178:	0112      	lsls	r2, r2, #4
 802717a:	430a      	orrs	r2, r1
 802717c:	4945      	ldr	r1, [pc, #276]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 802717e:	4313      	orrs	r3, r2
 8027180:	628b      	str	r3, [r1, #40]	; 0x28
 8027182:	687b      	ldr	r3, [r7, #4]
 8027184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027186:	3b01      	subs	r3, #1
 8027188:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802718c:	687b      	ldr	r3, [r7, #4]
 802718e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027190:	3b01      	subs	r3, #1
 8027192:	025b      	lsls	r3, r3, #9
 8027194:	b29b      	uxth	r3, r3
 8027196:	431a      	orrs	r2, r3
 8027198:	687b      	ldr	r3, [r7, #4]
 802719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802719c:	3b01      	subs	r3, #1
 802719e:	041b      	lsls	r3, r3, #16
 80271a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80271a4:	431a      	orrs	r2, r3
 80271a6:	687b      	ldr	r3, [r7, #4]
 80271a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80271aa:	3b01      	subs	r3, #1
 80271ac:	061b      	lsls	r3, r3, #24
 80271ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80271b2:	4938      	ldr	r1, [pc, #224]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80271b4:	4313      	orrs	r3, r2
 80271b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80271b8:	4b36      	ldr	r3, [pc, #216]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80271ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80271bc:	4a35      	ldr	r2, [pc, #212]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80271be:	f023 0301 	bic.w	r3, r3, #1
 80271c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80271c4:	4b33      	ldr	r3, [pc, #204]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80271c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80271c8:	4b34      	ldr	r3, [pc, #208]	; (802729c <HAL_RCC_OscConfig+0x6cc>)
 80271ca:	4013      	ands	r3, r2
 80271cc:	687a      	ldr	r2, [r7, #4]
 80271ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80271d0:	00d2      	lsls	r2, r2, #3
 80271d2:	4930      	ldr	r1, [pc, #192]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80271d4:	4313      	orrs	r3, r2
 80271d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80271d8:	4b2e      	ldr	r3, [pc, #184]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80271da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80271dc:	f023 020c 	bic.w	r2, r3, #12
 80271e0:	687b      	ldr	r3, [r7, #4]
 80271e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271e4:	492b      	ldr	r1, [pc, #172]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80271e6:	4313      	orrs	r3, r2
 80271e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80271ea:	4b2a      	ldr	r3, [pc, #168]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80271ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80271ee:	f023 0202 	bic.w	r2, r3, #2
 80271f2:	687b      	ldr	r3, [r7, #4]
 80271f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80271f6:	4927      	ldr	r1, [pc, #156]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80271f8:	4313      	orrs	r3, r2
 80271fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80271fc:	4b25      	ldr	r3, [pc, #148]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 80271fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027200:	4a24      	ldr	r2, [pc, #144]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027206:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027208:	4b22      	ldr	r3, [pc, #136]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 802720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802720c:	4a21      	ldr	r2, [pc, #132]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 802720e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027212:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8027214:	4b1f      	ldr	r3, [pc, #124]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027218:	4a1e      	ldr	r2, [pc, #120]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 802721a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802721e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8027220:	4b1c      	ldr	r3, [pc, #112]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027224:	4a1b      	ldr	r2, [pc, #108]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027226:	f043 0301 	orr.w	r3, r3, #1
 802722a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802722c:	4b19      	ldr	r3, [pc, #100]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 802722e:	681b      	ldr	r3, [r3, #0]
 8027230:	4a18      	ldr	r2, [pc, #96]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027238:	f7fa ff50 	bl	80220dc <HAL_GetTick>
 802723c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802723e:	e008      	b.n	8027252 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027240:	f7fa ff4c 	bl	80220dc <HAL_GetTick>
 8027244:	4602      	mov	r2, r0
 8027246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027248:	1ad3      	subs	r3, r2, r3
 802724a:	2b02      	cmp	r3, #2
 802724c:	d901      	bls.n	8027252 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 802724e:	2303      	movs	r3, #3
 8027250:	e065      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8027252:	4b10      	ldr	r3, [pc, #64]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027254:	681b      	ldr	r3, [r3, #0]
 8027256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802725a:	2b00      	cmp	r3, #0
 802725c:	d0f0      	beq.n	8027240 <HAL_RCC_OscConfig+0x670>
 802725e:	e05d      	b.n	802731c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027260:	4b0c      	ldr	r3, [pc, #48]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027262:	681b      	ldr	r3, [r3, #0]
 8027264:	4a0b      	ldr	r2, [pc, #44]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802726a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802726c:	f7fa ff36 	bl	80220dc <HAL_GetTick>
 8027270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8027272:	e008      	b.n	8027286 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027274:	f7fa ff32 	bl	80220dc <HAL_GetTick>
 8027278:	4602      	mov	r2, r0
 802727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802727c:	1ad3      	subs	r3, r2, r3
 802727e:	2b02      	cmp	r3, #2
 8027280:	d901      	bls.n	8027286 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8027282:	2303      	movs	r3, #3
 8027284:	e04b      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8027286:	4b03      	ldr	r3, [pc, #12]	; (8027294 <HAL_RCC_OscConfig+0x6c4>)
 8027288:	681b      	ldr	r3, [r3, #0]
 802728a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802728e:	2b00      	cmp	r3, #0
 8027290:	d1f0      	bne.n	8027274 <HAL_RCC_OscConfig+0x6a4>
 8027292:	e043      	b.n	802731c <HAL_RCC_OscConfig+0x74c>
 8027294:	58024400 	.word	0x58024400
 8027298:	fffffc0c 	.word	0xfffffc0c
 802729c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80272a0:	4b21      	ldr	r3, [pc, #132]	; (8027328 <HAL_RCC_OscConfig+0x758>)
 80272a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80272a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80272a6:	4b20      	ldr	r3, [pc, #128]	; (8027328 <HAL_RCC_OscConfig+0x758>)
 80272a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80272aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80272ac:	687b      	ldr	r3, [r7, #4]
 80272ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80272b0:	2b01      	cmp	r3, #1
 80272b2:	d031      	beq.n	8027318 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80272b4:	693b      	ldr	r3, [r7, #16]
 80272b6:	f003 0203 	and.w	r2, r3, #3
 80272ba:	687b      	ldr	r3, [r7, #4]
 80272bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80272be:	429a      	cmp	r2, r3
 80272c0:	d12a      	bne.n	8027318 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80272c2:	693b      	ldr	r3, [r7, #16]
 80272c4:	091b      	lsrs	r3, r3, #4
 80272c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80272ca:	687b      	ldr	r3, [r7, #4]
 80272cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80272ce:	429a      	cmp	r2, r3
 80272d0:	d122      	bne.n	8027318 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80272d2:	68fb      	ldr	r3, [r7, #12]
 80272d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80272d8:	687b      	ldr	r3, [r7, #4]
 80272da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80272dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80272de:	429a      	cmp	r2, r3
 80272e0:	d11a      	bne.n	8027318 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80272e2:	68fb      	ldr	r3, [r7, #12]
 80272e4:	0a5b      	lsrs	r3, r3, #9
 80272e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80272ea:	687b      	ldr	r3, [r7, #4]
 80272ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80272ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80272f0:	429a      	cmp	r2, r3
 80272f2:	d111      	bne.n	8027318 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80272f4:	68fb      	ldr	r3, [r7, #12]
 80272f6:	0c1b      	lsrs	r3, r3, #16
 80272f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80272fc:	687b      	ldr	r3, [r7, #4]
 80272fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027300:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8027302:	429a      	cmp	r2, r3
 8027304:	d108      	bne.n	8027318 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8027306:	68fb      	ldr	r3, [r7, #12]
 8027308:	0e1b      	lsrs	r3, r3, #24
 802730a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802730e:	687b      	ldr	r3, [r7, #4]
 8027310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027312:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8027314:	429a      	cmp	r2, r3
 8027316:	d001      	beq.n	802731c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8027318:	2301      	movs	r3, #1
 802731a:	e000      	b.n	802731e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 802731c:	2300      	movs	r3, #0
}
 802731e:	4618      	mov	r0, r3
 8027320:	3730      	adds	r7, #48	; 0x30
 8027322:	46bd      	mov	sp, r7
 8027324:	bd80      	pop	{r7, pc}
 8027326:	bf00      	nop
 8027328:	58024400 	.word	0x58024400

0802732c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802732c:	b580      	push	{r7, lr}
 802732e:	b086      	sub	sp, #24
 8027330:	af00      	add	r7, sp, #0
 8027332:	6078      	str	r0, [r7, #4]
 8027334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8027336:	687b      	ldr	r3, [r7, #4]
 8027338:	2b00      	cmp	r3, #0
 802733a:	d101      	bne.n	8027340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802733c:	2301      	movs	r3, #1
 802733e:	e19c      	b.n	802767a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8027340:	4b8a      	ldr	r3, [pc, #552]	; (802756c <HAL_RCC_ClockConfig+0x240>)
 8027342:	681b      	ldr	r3, [r3, #0]
 8027344:	f003 030f 	and.w	r3, r3, #15
 8027348:	683a      	ldr	r2, [r7, #0]
 802734a:	429a      	cmp	r2, r3
 802734c:	d910      	bls.n	8027370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802734e:	4b87      	ldr	r3, [pc, #540]	; (802756c <HAL_RCC_ClockConfig+0x240>)
 8027350:	681b      	ldr	r3, [r3, #0]
 8027352:	f023 020f 	bic.w	r2, r3, #15
 8027356:	4985      	ldr	r1, [pc, #532]	; (802756c <HAL_RCC_ClockConfig+0x240>)
 8027358:	683b      	ldr	r3, [r7, #0]
 802735a:	4313      	orrs	r3, r2
 802735c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802735e:	4b83      	ldr	r3, [pc, #524]	; (802756c <HAL_RCC_ClockConfig+0x240>)
 8027360:	681b      	ldr	r3, [r3, #0]
 8027362:	f003 030f 	and.w	r3, r3, #15
 8027366:	683a      	ldr	r2, [r7, #0]
 8027368:	429a      	cmp	r2, r3
 802736a:	d001      	beq.n	8027370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 802736c:	2301      	movs	r3, #1
 802736e:	e184      	b.n	802767a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8027370:	687b      	ldr	r3, [r7, #4]
 8027372:	681b      	ldr	r3, [r3, #0]
 8027374:	f003 0304 	and.w	r3, r3, #4
 8027378:	2b00      	cmp	r3, #0
 802737a:	d010      	beq.n	802739e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 802737c:	687b      	ldr	r3, [r7, #4]
 802737e:	691a      	ldr	r2, [r3, #16]
 8027380:	4b7b      	ldr	r3, [pc, #492]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 8027382:	699b      	ldr	r3, [r3, #24]
 8027384:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8027388:	429a      	cmp	r2, r3
 802738a:	d908      	bls.n	802739e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 802738c:	4b78      	ldr	r3, [pc, #480]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 802738e:	699b      	ldr	r3, [r3, #24]
 8027390:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8027394:	687b      	ldr	r3, [r7, #4]
 8027396:	691b      	ldr	r3, [r3, #16]
 8027398:	4975      	ldr	r1, [pc, #468]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 802739a:	4313      	orrs	r3, r2
 802739c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802739e:	687b      	ldr	r3, [r7, #4]
 80273a0:	681b      	ldr	r3, [r3, #0]
 80273a2:	f003 0308 	and.w	r3, r3, #8
 80273a6:	2b00      	cmp	r3, #0
 80273a8:	d010      	beq.n	80273cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80273aa:	687b      	ldr	r3, [r7, #4]
 80273ac:	695a      	ldr	r2, [r3, #20]
 80273ae:	4b70      	ldr	r3, [pc, #448]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 80273b0:	69db      	ldr	r3, [r3, #28]
 80273b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80273b6:	429a      	cmp	r2, r3
 80273b8:	d908      	bls.n	80273cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80273ba:	4b6d      	ldr	r3, [pc, #436]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 80273bc:	69db      	ldr	r3, [r3, #28]
 80273be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80273c2:	687b      	ldr	r3, [r7, #4]
 80273c4:	695b      	ldr	r3, [r3, #20]
 80273c6:	496a      	ldr	r1, [pc, #424]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 80273c8:	4313      	orrs	r3, r2
 80273ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80273cc:	687b      	ldr	r3, [r7, #4]
 80273ce:	681b      	ldr	r3, [r3, #0]
 80273d0:	f003 0310 	and.w	r3, r3, #16
 80273d4:	2b00      	cmp	r3, #0
 80273d6:	d010      	beq.n	80273fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80273d8:	687b      	ldr	r3, [r7, #4]
 80273da:	699a      	ldr	r2, [r3, #24]
 80273dc:	4b64      	ldr	r3, [pc, #400]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 80273de:	69db      	ldr	r3, [r3, #28]
 80273e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80273e4:	429a      	cmp	r2, r3
 80273e6:	d908      	bls.n	80273fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80273e8:	4b61      	ldr	r3, [pc, #388]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 80273ea:	69db      	ldr	r3, [r3, #28]
 80273ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80273f0:	687b      	ldr	r3, [r7, #4]
 80273f2:	699b      	ldr	r3, [r3, #24]
 80273f4:	495e      	ldr	r1, [pc, #376]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 80273f6:	4313      	orrs	r3, r2
 80273f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80273fa:	687b      	ldr	r3, [r7, #4]
 80273fc:	681b      	ldr	r3, [r3, #0]
 80273fe:	f003 0320 	and.w	r3, r3, #32
 8027402:	2b00      	cmp	r3, #0
 8027404:	d010      	beq.n	8027428 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8027406:	687b      	ldr	r3, [r7, #4]
 8027408:	69da      	ldr	r2, [r3, #28]
 802740a:	4b59      	ldr	r3, [pc, #356]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 802740c:	6a1b      	ldr	r3, [r3, #32]
 802740e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8027412:	429a      	cmp	r2, r3
 8027414:	d908      	bls.n	8027428 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8027416:	4b56      	ldr	r3, [pc, #344]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 8027418:	6a1b      	ldr	r3, [r3, #32]
 802741a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802741e:	687b      	ldr	r3, [r7, #4]
 8027420:	69db      	ldr	r3, [r3, #28]
 8027422:	4953      	ldr	r1, [pc, #332]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 8027424:	4313      	orrs	r3, r2
 8027426:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8027428:	687b      	ldr	r3, [r7, #4]
 802742a:	681b      	ldr	r3, [r3, #0]
 802742c:	f003 0302 	and.w	r3, r3, #2
 8027430:	2b00      	cmp	r3, #0
 8027432:	d010      	beq.n	8027456 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8027434:	687b      	ldr	r3, [r7, #4]
 8027436:	68da      	ldr	r2, [r3, #12]
 8027438:	4b4d      	ldr	r3, [pc, #308]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 802743a:	699b      	ldr	r3, [r3, #24]
 802743c:	f003 030f 	and.w	r3, r3, #15
 8027440:	429a      	cmp	r2, r3
 8027442:	d908      	bls.n	8027456 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8027444:	4b4a      	ldr	r3, [pc, #296]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 8027446:	699b      	ldr	r3, [r3, #24]
 8027448:	f023 020f 	bic.w	r2, r3, #15
 802744c:	687b      	ldr	r3, [r7, #4]
 802744e:	68db      	ldr	r3, [r3, #12]
 8027450:	4947      	ldr	r1, [pc, #284]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 8027452:	4313      	orrs	r3, r2
 8027454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8027456:	687b      	ldr	r3, [r7, #4]
 8027458:	681b      	ldr	r3, [r3, #0]
 802745a:	f003 0301 	and.w	r3, r3, #1
 802745e:	2b00      	cmp	r3, #0
 8027460:	d055      	beq.n	802750e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8027462:	4b43      	ldr	r3, [pc, #268]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 8027464:	699b      	ldr	r3, [r3, #24]
 8027466:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 802746a:	687b      	ldr	r3, [r7, #4]
 802746c:	689b      	ldr	r3, [r3, #8]
 802746e:	4940      	ldr	r1, [pc, #256]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 8027470:	4313      	orrs	r3, r2
 8027472:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8027474:	687b      	ldr	r3, [r7, #4]
 8027476:	685b      	ldr	r3, [r3, #4]
 8027478:	2b02      	cmp	r3, #2
 802747a:	d107      	bne.n	802748c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 802747c:	4b3c      	ldr	r3, [pc, #240]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 802747e:	681b      	ldr	r3, [r3, #0]
 8027480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027484:	2b00      	cmp	r3, #0
 8027486:	d121      	bne.n	80274cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8027488:	2301      	movs	r3, #1
 802748a:	e0f6      	b.n	802767a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802748c:	687b      	ldr	r3, [r7, #4]
 802748e:	685b      	ldr	r3, [r3, #4]
 8027490:	2b03      	cmp	r3, #3
 8027492:	d107      	bne.n	80274a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8027494:	4b36      	ldr	r3, [pc, #216]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 8027496:	681b      	ldr	r3, [r3, #0]
 8027498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802749c:	2b00      	cmp	r3, #0
 802749e:	d115      	bne.n	80274cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80274a0:	2301      	movs	r3, #1
 80274a2:	e0ea      	b.n	802767a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80274a4:	687b      	ldr	r3, [r7, #4]
 80274a6:	685b      	ldr	r3, [r3, #4]
 80274a8:	2b01      	cmp	r3, #1
 80274aa:	d107      	bne.n	80274bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80274ac:	4b30      	ldr	r3, [pc, #192]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 80274ae:	681b      	ldr	r3, [r3, #0]
 80274b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80274b4:	2b00      	cmp	r3, #0
 80274b6:	d109      	bne.n	80274cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80274b8:	2301      	movs	r3, #1
 80274ba:	e0de      	b.n	802767a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80274bc:	4b2c      	ldr	r3, [pc, #176]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 80274be:	681b      	ldr	r3, [r3, #0]
 80274c0:	f003 0304 	and.w	r3, r3, #4
 80274c4:	2b00      	cmp	r3, #0
 80274c6:	d101      	bne.n	80274cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80274c8:	2301      	movs	r3, #1
 80274ca:	e0d6      	b.n	802767a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80274cc:	4b28      	ldr	r3, [pc, #160]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 80274ce:	691b      	ldr	r3, [r3, #16]
 80274d0:	f023 0207 	bic.w	r2, r3, #7
 80274d4:	687b      	ldr	r3, [r7, #4]
 80274d6:	685b      	ldr	r3, [r3, #4]
 80274d8:	4925      	ldr	r1, [pc, #148]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 80274da:	4313      	orrs	r3, r2
 80274dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80274de:	f7fa fdfd 	bl	80220dc <HAL_GetTick>
 80274e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80274e4:	e00a      	b.n	80274fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80274e6:	f7fa fdf9 	bl	80220dc <HAL_GetTick>
 80274ea:	4602      	mov	r2, r0
 80274ec:	697b      	ldr	r3, [r7, #20]
 80274ee:	1ad3      	subs	r3, r2, r3
 80274f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80274f4:	4293      	cmp	r3, r2
 80274f6:	d901      	bls.n	80274fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80274f8:	2303      	movs	r3, #3
 80274fa:	e0be      	b.n	802767a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80274fc:	4b1c      	ldr	r3, [pc, #112]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 80274fe:	691b      	ldr	r3, [r3, #16]
 8027500:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8027504:	687b      	ldr	r3, [r7, #4]
 8027506:	685b      	ldr	r3, [r3, #4]
 8027508:	00db      	lsls	r3, r3, #3
 802750a:	429a      	cmp	r2, r3
 802750c:	d1eb      	bne.n	80274e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802750e:	687b      	ldr	r3, [r7, #4]
 8027510:	681b      	ldr	r3, [r3, #0]
 8027512:	f003 0302 	and.w	r3, r3, #2
 8027516:	2b00      	cmp	r3, #0
 8027518:	d010      	beq.n	802753c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 802751a:	687b      	ldr	r3, [r7, #4]
 802751c:	68da      	ldr	r2, [r3, #12]
 802751e:	4b14      	ldr	r3, [pc, #80]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 8027520:	699b      	ldr	r3, [r3, #24]
 8027522:	f003 030f 	and.w	r3, r3, #15
 8027526:	429a      	cmp	r2, r3
 8027528:	d208      	bcs.n	802753c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802752a:	4b11      	ldr	r3, [pc, #68]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 802752c:	699b      	ldr	r3, [r3, #24]
 802752e:	f023 020f 	bic.w	r2, r3, #15
 8027532:	687b      	ldr	r3, [r7, #4]
 8027534:	68db      	ldr	r3, [r3, #12]
 8027536:	490e      	ldr	r1, [pc, #56]	; (8027570 <HAL_RCC_ClockConfig+0x244>)
 8027538:	4313      	orrs	r3, r2
 802753a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802753c:	4b0b      	ldr	r3, [pc, #44]	; (802756c <HAL_RCC_ClockConfig+0x240>)
 802753e:	681b      	ldr	r3, [r3, #0]
 8027540:	f003 030f 	and.w	r3, r3, #15
 8027544:	683a      	ldr	r2, [r7, #0]
 8027546:	429a      	cmp	r2, r3
 8027548:	d214      	bcs.n	8027574 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802754a:	4b08      	ldr	r3, [pc, #32]	; (802756c <HAL_RCC_ClockConfig+0x240>)
 802754c:	681b      	ldr	r3, [r3, #0]
 802754e:	f023 020f 	bic.w	r2, r3, #15
 8027552:	4906      	ldr	r1, [pc, #24]	; (802756c <HAL_RCC_ClockConfig+0x240>)
 8027554:	683b      	ldr	r3, [r7, #0]
 8027556:	4313      	orrs	r3, r2
 8027558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802755a:	4b04      	ldr	r3, [pc, #16]	; (802756c <HAL_RCC_ClockConfig+0x240>)
 802755c:	681b      	ldr	r3, [r3, #0]
 802755e:	f003 030f 	and.w	r3, r3, #15
 8027562:	683a      	ldr	r2, [r7, #0]
 8027564:	429a      	cmp	r2, r3
 8027566:	d005      	beq.n	8027574 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8027568:	2301      	movs	r3, #1
 802756a:	e086      	b.n	802767a <HAL_RCC_ClockConfig+0x34e>
 802756c:	52002000 	.word	0x52002000
 8027570:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8027574:	687b      	ldr	r3, [r7, #4]
 8027576:	681b      	ldr	r3, [r3, #0]
 8027578:	f003 0304 	and.w	r3, r3, #4
 802757c:	2b00      	cmp	r3, #0
 802757e:	d010      	beq.n	80275a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8027580:	687b      	ldr	r3, [r7, #4]
 8027582:	691a      	ldr	r2, [r3, #16]
 8027584:	4b3f      	ldr	r3, [pc, #252]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 8027586:	699b      	ldr	r3, [r3, #24]
 8027588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802758c:	429a      	cmp	r2, r3
 802758e:	d208      	bcs.n	80275a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8027590:	4b3c      	ldr	r3, [pc, #240]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 8027592:	699b      	ldr	r3, [r3, #24]
 8027594:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8027598:	687b      	ldr	r3, [r7, #4]
 802759a:	691b      	ldr	r3, [r3, #16]
 802759c:	4939      	ldr	r1, [pc, #228]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 802759e:	4313      	orrs	r3, r2
 80275a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80275a2:	687b      	ldr	r3, [r7, #4]
 80275a4:	681b      	ldr	r3, [r3, #0]
 80275a6:	f003 0308 	and.w	r3, r3, #8
 80275aa:	2b00      	cmp	r3, #0
 80275ac:	d010      	beq.n	80275d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80275ae:	687b      	ldr	r3, [r7, #4]
 80275b0:	695a      	ldr	r2, [r3, #20]
 80275b2:	4b34      	ldr	r3, [pc, #208]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 80275b4:	69db      	ldr	r3, [r3, #28]
 80275b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80275ba:	429a      	cmp	r2, r3
 80275bc:	d208      	bcs.n	80275d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80275be:	4b31      	ldr	r3, [pc, #196]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 80275c0:	69db      	ldr	r3, [r3, #28]
 80275c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80275c6:	687b      	ldr	r3, [r7, #4]
 80275c8:	695b      	ldr	r3, [r3, #20]
 80275ca:	492e      	ldr	r1, [pc, #184]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 80275cc:	4313      	orrs	r3, r2
 80275ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80275d0:	687b      	ldr	r3, [r7, #4]
 80275d2:	681b      	ldr	r3, [r3, #0]
 80275d4:	f003 0310 	and.w	r3, r3, #16
 80275d8:	2b00      	cmp	r3, #0
 80275da:	d010      	beq.n	80275fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80275dc:	687b      	ldr	r3, [r7, #4]
 80275de:	699a      	ldr	r2, [r3, #24]
 80275e0:	4b28      	ldr	r3, [pc, #160]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 80275e2:	69db      	ldr	r3, [r3, #28]
 80275e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80275e8:	429a      	cmp	r2, r3
 80275ea:	d208      	bcs.n	80275fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80275ec:	4b25      	ldr	r3, [pc, #148]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 80275ee:	69db      	ldr	r3, [r3, #28]
 80275f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80275f4:	687b      	ldr	r3, [r7, #4]
 80275f6:	699b      	ldr	r3, [r3, #24]
 80275f8:	4922      	ldr	r1, [pc, #136]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 80275fa:	4313      	orrs	r3, r2
 80275fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80275fe:	687b      	ldr	r3, [r7, #4]
 8027600:	681b      	ldr	r3, [r3, #0]
 8027602:	f003 0320 	and.w	r3, r3, #32
 8027606:	2b00      	cmp	r3, #0
 8027608:	d010      	beq.n	802762c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 802760a:	687b      	ldr	r3, [r7, #4]
 802760c:	69da      	ldr	r2, [r3, #28]
 802760e:	4b1d      	ldr	r3, [pc, #116]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 8027610:	6a1b      	ldr	r3, [r3, #32]
 8027612:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8027616:	429a      	cmp	r2, r3
 8027618:	d208      	bcs.n	802762c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 802761a:	4b1a      	ldr	r3, [pc, #104]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 802761c:	6a1b      	ldr	r3, [r3, #32]
 802761e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8027622:	687b      	ldr	r3, [r7, #4]
 8027624:	69db      	ldr	r3, [r3, #28]
 8027626:	4917      	ldr	r1, [pc, #92]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 8027628:	4313      	orrs	r3, r2
 802762a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802762c:	f000 f834 	bl	8027698 <HAL_RCC_GetSysClockFreq>
 8027630:	4602      	mov	r2, r0
 8027632:	4b14      	ldr	r3, [pc, #80]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 8027634:	699b      	ldr	r3, [r3, #24]
 8027636:	0a1b      	lsrs	r3, r3, #8
 8027638:	f003 030f 	and.w	r3, r3, #15
 802763c:	4912      	ldr	r1, [pc, #72]	; (8027688 <HAL_RCC_ClockConfig+0x35c>)
 802763e:	5ccb      	ldrb	r3, [r1, r3]
 8027640:	f003 031f 	and.w	r3, r3, #31
 8027644:	fa22 f303 	lsr.w	r3, r2, r3
 8027648:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802764a:	4b0e      	ldr	r3, [pc, #56]	; (8027684 <HAL_RCC_ClockConfig+0x358>)
 802764c:	699b      	ldr	r3, [r3, #24]
 802764e:	f003 030f 	and.w	r3, r3, #15
 8027652:	4a0d      	ldr	r2, [pc, #52]	; (8027688 <HAL_RCC_ClockConfig+0x35c>)
 8027654:	5cd3      	ldrb	r3, [r2, r3]
 8027656:	f003 031f 	and.w	r3, r3, #31
 802765a:	693a      	ldr	r2, [r7, #16]
 802765c:	fa22 f303 	lsr.w	r3, r2, r3
 8027660:	4a0a      	ldr	r2, [pc, #40]	; (802768c <HAL_RCC_ClockConfig+0x360>)
 8027662:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8027664:	4a0a      	ldr	r2, [pc, #40]	; (8027690 <HAL_RCC_ClockConfig+0x364>)
 8027666:	693b      	ldr	r3, [r7, #16]
 8027668:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 802766a:	4b0a      	ldr	r3, [pc, #40]	; (8027694 <HAL_RCC_ClockConfig+0x368>)
 802766c:	681b      	ldr	r3, [r3, #0]
 802766e:	4618      	mov	r0, r3
 8027670:	f7fa fb0a 	bl	8021c88 <HAL_InitTick>
 8027674:	4603      	mov	r3, r0
 8027676:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8027678:	7bfb      	ldrb	r3, [r7, #15]
}
 802767a:	4618      	mov	r0, r3
 802767c:	3718      	adds	r7, #24
 802767e:	46bd      	mov	sp, r7
 8027680:	bd80      	pop	{r7, pc}
 8027682:	bf00      	nop
 8027684:	58024400 	.word	0x58024400
 8027688:	0803b950 	.word	0x0803b950
 802768c:	24000004 	.word	0x24000004
 8027690:	24000000 	.word	0x24000000
 8027694:	24000008 	.word	0x24000008

08027698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8027698:	b480      	push	{r7}
 802769a:	b089      	sub	sp, #36	; 0x24
 802769c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 802769e:	4bb3      	ldr	r3, [pc, #716]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80276a0:	691b      	ldr	r3, [r3, #16]
 80276a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80276a6:	2b18      	cmp	r3, #24
 80276a8:	f200 8155 	bhi.w	8027956 <HAL_RCC_GetSysClockFreq+0x2be>
 80276ac:	a201      	add	r2, pc, #4	; (adr r2, 80276b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80276ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80276b2:	bf00      	nop
 80276b4:	08027719 	.word	0x08027719
 80276b8:	08027957 	.word	0x08027957
 80276bc:	08027957 	.word	0x08027957
 80276c0:	08027957 	.word	0x08027957
 80276c4:	08027957 	.word	0x08027957
 80276c8:	08027957 	.word	0x08027957
 80276cc:	08027957 	.word	0x08027957
 80276d0:	08027957 	.word	0x08027957
 80276d4:	0802773f 	.word	0x0802773f
 80276d8:	08027957 	.word	0x08027957
 80276dc:	08027957 	.word	0x08027957
 80276e0:	08027957 	.word	0x08027957
 80276e4:	08027957 	.word	0x08027957
 80276e8:	08027957 	.word	0x08027957
 80276ec:	08027957 	.word	0x08027957
 80276f0:	08027957 	.word	0x08027957
 80276f4:	08027745 	.word	0x08027745
 80276f8:	08027957 	.word	0x08027957
 80276fc:	08027957 	.word	0x08027957
 8027700:	08027957 	.word	0x08027957
 8027704:	08027957 	.word	0x08027957
 8027708:	08027957 	.word	0x08027957
 802770c:	08027957 	.word	0x08027957
 8027710:	08027957 	.word	0x08027957
 8027714:	0802774b 	.word	0x0802774b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8027718:	4b94      	ldr	r3, [pc, #592]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802771a:	681b      	ldr	r3, [r3, #0]
 802771c:	f003 0320 	and.w	r3, r3, #32
 8027720:	2b00      	cmp	r3, #0
 8027722:	d009      	beq.n	8027738 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8027724:	4b91      	ldr	r3, [pc, #580]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8027726:	681b      	ldr	r3, [r3, #0]
 8027728:	08db      	lsrs	r3, r3, #3
 802772a:	f003 0303 	and.w	r3, r3, #3
 802772e:	4a90      	ldr	r2, [pc, #576]	; (8027970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8027730:	fa22 f303 	lsr.w	r3, r2, r3
 8027734:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8027736:	e111      	b.n	802795c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8027738:	4b8d      	ldr	r3, [pc, #564]	; (8027970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 802773a:	61bb      	str	r3, [r7, #24]
    break;
 802773c:	e10e      	b.n	802795c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 802773e:	4b8d      	ldr	r3, [pc, #564]	; (8027974 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8027740:	61bb      	str	r3, [r7, #24]
    break;
 8027742:	e10b      	b.n	802795c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8027744:	4b8c      	ldr	r3, [pc, #560]	; (8027978 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8027746:	61bb      	str	r3, [r7, #24]
    break;
 8027748:	e108      	b.n	802795c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 802774a:	4b88      	ldr	r3, [pc, #544]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802774e:	f003 0303 	and.w	r3, r3, #3
 8027752:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8027754:	4b85      	ldr	r3, [pc, #532]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8027756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027758:	091b      	lsrs	r3, r3, #4
 802775a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802775e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8027760:	4b82      	ldr	r3, [pc, #520]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8027762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027764:	f003 0301 	and.w	r3, r3, #1
 8027768:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 802776a:	4b80      	ldr	r3, [pc, #512]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802776c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802776e:	08db      	lsrs	r3, r3, #3
 8027770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8027774:	68fa      	ldr	r2, [r7, #12]
 8027776:	fb02 f303 	mul.w	r3, r2, r3
 802777a:	ee07 3a90 	vmov	s15, r3
 802777e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8027782:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8027786:	693b      	ldr	r3, [r7, #16]
 8027788:	2b00      	cmp	r3, #0
 802778a:	f000 80e1 	beq.w	8027950 <HAL_RCC_GetSysClockFreq+0x2b8>
 802778e:	697b      	ldr	r3, [r7, #20]
 8027790:	2b02      	cmp	r3, #2
 8027792:	f000 8083 	beq.w	802789c <HAL_RCC_GetSysClockFreq+0x204>
 8027796:	697b      	ldr	r3, [r7, #20]
 8027798:	2b02      	cmp	r3, #2
 802779a:	f200 80a1 	bhi.w	80278e0 <HAL_RCC_GetSysClockFreq+0x248>
 802779e:	697b      	ldr	r3, [r7, #20]
 80277a0:	2b00      	cmp	r3, #0
 80277a2:	d003      	beq.n	80277ac <HAL_RCC_GetSysClockFreq+0x114>
 80277a4:	697b      	ldr	r3, [r7, #20]
 80277a6:	2b01      	cmp	r3, #1
 80277a8:	d056      	beq.n	8027858 <HAL_RCC_GetSysClockFreq+0x1c0>
 80277aa:	e099      	b.n	80278e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80277ac:	4b6f      	ldr	r3, [pc, #444]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80277ae:	681b      	ldr	r3, [r3, #0]
 80277b0:	f003 0320 	and.w	r3, r3, #32
 80277b4:	2b00      	cmp	r3, #0
 80277b6:	d02d      	beq.n	8027814 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80277b8:	4b6c      	ldr	r3, [pc, #432]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80277ba:	681b      	ldr	r3, [r3, #0]
 80277bc:	08db      	lsrs	r3, r3, #3
 80277be:	f003 0303 	and.w	r3, r3, #3
 80277c2:	4a6b      	ldr	r2, [pc, #428]	; (8027970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80277c4:	fa22 f303 	lsr.w	r3, r2, r3
 80277c8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80277ca:	687b      	ldr	r3, [r7, #4]
 80277cc:	ee07 3a90 	vmov	s15, r3
 80277d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80277d4:	693b      	ldr	r3, [r7, #16]
 80277d6:	ee07 3a90 	vmov	s15, r3
 80277da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80277de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80277e2:	4b62      	ldr	r3, [pc, #392]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80277e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80277e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80277ea:	ee07 3a90 	vmov	s15, r3
 80277ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80277f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80277f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 802797c <HAL_RCC_GetSysClockFreq+0x2e4>
 80277fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80277fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8027802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8027806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802780a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802780e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8027812:	e087      	b.n	8027924 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8027814:	693b      	ldr	r3, [r7, #16]
 8027816:	ee07 3a90 	vmov	s15, r3
 802781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802781e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8027980 <HAL_RCC_GetSysClockFreq+0x2e8>
 8027822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8027826:	4b51      	ldr	r3, [pc, #324]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8027828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802782a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802782e:	ee07 3a90 	vmov	s15, r3
 8027832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8027836:	ed97 6a02 	vldr	s12, [r7, #8]
 802783a:	eddf 5a50 	vldr	s11, [pc, #320]	; 802797c <HAL_RCC_GetSysClockFreq+0x2e4>
 802783e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8027842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8027846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802784a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802784e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8027856:	e065      	b.n	8027924 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8027858:	693b      	ldr	r3, [r7, #16]
 802785a:	ee07 3a90 	vmov	s15, r3
 802785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8027862:	eddf 6a48 	vldr	s13, [pc, #288]	; 8027984 <HAL_RCC_GetSysClockFreq+0x2ec>
 8027866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802786a:	4b40      	ldr	r3, [pc, #256]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802786c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802786e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027872:	ee07 3a90 	vmov	s15, r3
 8027876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802787a:	ed97 6a02 	vldr	s12, [r7, #8]
 802787e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 802797c <HAL_RCC_GetSysClockFreq+0x2e4>
 8027882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8027886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802788a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802788e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802789a:	e043      	b.n	8027924 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 802789c:	693b      	ldr	r3, [r7, #16]
 802789e:	ee07 3a90 	vmov	s15, r3
 80278a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80278a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8027988 <HAL_RCC_GetSysClockFreq+0x2f0>
 80278aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80278ae:	4b2f      	ldr	r3, [pc, #188]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80278b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80278b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80278b6:	ee07 3a90 	vmov	s15, r3
 80278ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80278be:	ed97 6a02 	vldr	s12, [r7, #8]
 80278c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 802797c <HAL_RCC_GetSysClockFreq+0x2e4>
 80278c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80278ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80278ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80278d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80278d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80278da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80278de:	e021      	b.n	8027924 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80278e0:	693b      	ldr	r3, [r7, #16]
 80278e2:	ee07 3a90 	vmov	s15, r3
 80278e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80278ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8027984 <HAL_RCC_GetSysClockFreq+0x2ec>
 80278ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80278f2:	4b1e      	ldr	r3, [pc, #120]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80278f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80278f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80278fa:	ee07 3a90 	vmov	s15, r3
 80278fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8027902:	ed97 6a02 	vldr	s12, [r7, #8]
 8027906:	eddf 5a1d 	vldr	s11, [pc, #116]	; 802797c <HAL_RCC_GetSysClockFreq+0x2e4>
 802790a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802790e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8027912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8027916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802791a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802791e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8027922:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8027924:	4b11      	ldr	r3, [pc, #68]	; (802796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8027926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027928:	0a5b      	lsrs	r3, r3, #9
 802792a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802792e:	3301      	adds	r3, #1
 8027930:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8027932:	683b      	ldr	r3, [r7, #0]
 8027934:	ee07 3a90 	vmov	s15, r3
 8027938:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802793c:	edd7 6a07 	vldr	s13, [r7, #28]
 8027940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8027944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8027948:	ee17 3a90 	vmov	r3, s15
 802794c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 802794e:	e005      	b.n	802795c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8027950:	2300      	movs	r3, #0
 8027952:	61bb      	str	r3, [r7, #24]
    break;
 8027954:	e002      	b.n	802795c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8027956:	4b07      	ldr	r3, [pc, #28]	; (8027974 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8027958:	61bb      	str	r3, [r7, #24]
    break;
 802795a:	bf00      	nop
  }

  return sysclockfreq;
 802795c:	69bb      	ldr	r3, [r7, #24]
}
 802795e:	4618      	mov	r0, r3
 8027960:	3724      	adds	r7, #36	; 0x24
 8027962:	46bd      	mov	sp, r7
 8027964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027968:	4770      	bx	lr
 802796a:	bf00      	nop
 802796c:	58024400 	.word	0x58024400
 8027970:	03d09000 	.word	0x03d09000
 8027974:	003d0900 	.word	0x003d0900
 8027978:	007a1200 	.word	0x007a1200
 802797c:	46000000 	.word	0x46000000
 8027980:	4c742400 	.word	0x4c742400
 8027984:	4a742400 	.word	0x4a742400
 8027988:	4af42400 	.word	0x4af42400

0802798c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802798c:	b580      	push	{r7, lr}
 802798e:	b082      	sub	sp, #8
 8027990:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8027992:	f7ff fe81 	bl	8027698 <HAL_RCC_GetSysClockFreq>
 8027996:	4602      	mov	r2, r0
 8027998:	4b10      	ldr	r3, [pc, #64]	; (80279dc <HAL_RCC_GetHCLKFreq+0x50>)
 802799a:	699b      	ldr	r3, [r3, #24]
 802799c:	0a1b      	lsrs	r3, r3, #8
 802799e:	f003 030f 	and.w	r3, r3, #15
 80279a2:	490f      	ldr	r1, [pc, #60]	; (80279e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80279a4:	5ccb      	ldrb	r3, [r1, r3]
 80279a6:	f003 031f 	and.w	r3, r3, #31
 80279aa:	fa22 f303 	lsr.w	r3, r2, r3
 80279ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80279b0:	4b0a      	ldr	r3, [pc, #40]	; (80279dc <HAL_RCC_GetHCLKFreq+0x50>)
 80279b2:	699b      	ldr	r3, [r3, #24]
 80279b4:	f003 030f 	and.w	r3, r3, #15
 80279b8:	4a09      	ldr	r2, [pc, #36]	; (80279e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80279ba:	5cd3      	ldrb	r3, [r2, r3]
 80279bc:	f003 031f 	and.w	r3, r3, #31
 80279c0:	687a      	ldr	r2, [r7, #4]
 80279c2:	fa22 f303 	lsr.w	r3, r2, r3
 80279c6:	4a07      	ldr	r2, [pc, #28]	; (80279e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80279c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80279ca:	4a07      	ldr	r2, [pc, #28]	; (80279e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80279cc:	687b      	ldr	r3, [r7, #4]
 80279ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80279d0:	4b04      	ldr	r3, [pc, #16]	; (80279e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80279d2:	681b      	ldr	r3, [r3, #0]
}
 80279d4:	4618      	mov	r0, r3
 80279d6:	3708      	adds	r7, #8
 80279d8:	46bd      	mov	sp, r7
 80279da:	bd80      	pop	{r7, pc}
 80279dc:	58024400 	.word	0x58024400
 80279e0:	0803b950 	.word	0x0803b950
 80279e4:	24000004 	.word	0x24000004
 80279e8:	24000000 	.word	0x24000000

080279ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80279ec:	b580      	push	{r7, lr}
 80279ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80279f0:	f7ff ffcc 	bl	802798c <HAL_RCC_GetHCLKFreq>
 80279f4:	4602      	mov	r2, r0
 80279f6:	4b06      	ldr	r3, [pc, #24]	; (8027a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80279f8:	69db      	ldr	r3, [r3, #28]
 80279fa:	091b      	lsrs	r3, r3, #4
 80279fc:	f003 0307 	and.w	r3, r3, #7
 8027a00:	4904      	ldr	r1, [pc, #16]	; (8027a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8027a02:	5ccb      	ldrb	r3, [r1, r3]
 8027a04:	f003 031f 	and.w	r3, r3, #31
 8027a08:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8027a0c:	4618      	mov	r0, r3
 8027a0e:	bd80      	pop	{r7, pc}
 8027a10:	58024400 	.word	0x58024400
 8027a14:	0803b950 	.word	0x0803b950

08027a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8027a18:	b580      	push	{r7, lr}
 8027a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8027a1c:	f7ff ffb6 	bl	802798c <HAL_RCC_GetHCLKFreq>
 8027a20:	4602      	mov	r2, r0
 8027a22:	4b06      	ldr	r3, [pc, #24]	; (8027a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8027a24:	69db      	ldr	r3, [r3, #28]
 8027a26:	0a1b      	lsrs	r3, r3, #8
 8027a28:	f003 0307 	and.w	r3, r3, #7
 8027a2c:	4904      	ldr	r1, [pc, #16]	; (8027a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8027a2e:	5ccb      	ldrb	r3, [r1, r3]
 8027a30:	f003 031f 	and.w	r3, r3, #31
 8027a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8027a38:	4618      	mov	r0, r3
 8027a3a:	bd80      	pop	{r7, pc}
 8027a3c:	58024400 	.word	0x58024400
 8027a40:	0803b950 	.word	0x0803b950

08027a44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8027a44:	b480      	push	{r7}
 8027a46:	b083      	sub	sp, #12
 8027a48:	af00      	add	r7, sp, #0
 8027a4a:	6078      	str	r0, [r7, #4]
 8027a4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8027a4e:	687b      	ldr	r3, [r7, #4]
 8027a50:	223f      	movs	r2, #63	; 0x3f
 8027a52:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027a54:	4b1a      	ldr	r3, [pc, #104]	; (8027ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8027a56:	691b      	ldr	r3, [r3, #16]
 8027a58:	f003 0207 	and.w	r2, r3, #7
 8027a5c:	687b      	ldr	r3, [r7, #4]
 8027a5e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8027a60:	4b17      	ldr	r3, [pc, #92]	; (8027ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8027a62:	699b      	ldr	r3, [r3, #24]
 8027a64:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8027a68:	687b      	ldr	r3, [r7, #4]
 8027a6a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8027a6c:	4b14      	ldr	r3, [pc, #80]	; (8027ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8027a6e:	699b      	ldr	r3, [r3, #24]
 8027a70:	f003 020f 	and.w	r2, r3, #15
 8027a74:	687b      	ldr	r3, [r7, #4]
 8027a76:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8027a78:	4b11      	ldr	r3, [pc, #68]	; (8027ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8027a7a:	699b      	ldr	r3, [r3, #24]
 8027a7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8027a80:	687b      	ldr	r3, [r7, #4]
 8027a82:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8027a84:	4b0e      	ldr	r3, [pc, #56]	; (8027ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8027a86:	69db      	ldr	r3, [r3, #28]
 8027a88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8027a8c:	687b      	ldr	r3, [r7, #4]
 8027a8e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8027a90:	4b0b      	ldr	r3, [pc, #44]	; (8027ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8027a92:	69db      	ldr	r3, [r3, #28]
 8027a94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8027a98:	687b      	ldr	r3, [r7, #4]
 8027a9a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8027a9c:	4b08      	ldr	r3, [pc, #32]	; (8027ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8027a9e:	6a1b      	ldr	r3, [r3, #32]
 8027aa0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8027aa4:	687b      	ldr	r3, [r7, #4]
 8027aa6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027aa8:	4b06      	ldr	r3, [pc, #24]	; (8027ac4 <HAL_RCC_GetClockConfig+0x80>)
 8027aaa:	681b      	ldr	r3, [r3, #0]
 8027aac:	f003 020f 	and.w	r2, r3, #15
 8027ab0:	683b      	ldr	r3, [r7, #0]
 8027ab2:	601a      	str	r2, [r3, #0]
}
 8027ab4:	bf00      	nop
 8027ab6:	370c      	adds	r7, #12
 8027ab8:	46bd      	mov	sp, r7
 8027aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027abe:	4770      	bx	lr
 8027ac0:	58024400 	.word	0x58024400
 8027ac4:	52002000 	.word	0x52002000

08027ac8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027ac8:	b580      	push	{r7, lr}
 8027aca:	b086      	sub	sp, #24
 8027acc:	af00      	add	r7, sp, #0
 8027ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8027ad0:	2300      	movs	r3, #0
 8027ad2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8027ad4:	2300      	movs	r3, #0
 8027ad6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8027ad8:	687b      	ldr	r3, [r7, #4]
 8027ada:	681b      	ldr	r3, [r3, #0]
 8027adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027ae0:	2b00      	cmp	r3, #0
 8027ae2:	d03f      	beq.n	8027b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8027ae4:	687b      	ldr	r3, [r7, #4]
 8027ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8027ae8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8027aec:	d02a      	beq.n	8027b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8027aee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8027af2:	d824      	bhi.n	8027b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8027af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8027af8:	d018      	beq.n	8027b2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8027afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8027afe:	d81e      	bhi.n	8027b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8027b00:	2b00      	cmp	r3, #0
 8027b02:	d003      	beq.n	8027b0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8027b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8027b08:	d007      	beq.n	8027b1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8027b0a:	e018      	b.n	8027b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027b0c:	4ba4      	ldr	r3, [pc, #656]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027b10:	4aa3      	ldr	r2, [pc, #652]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8027b18:	e015      	b.n	8027b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8027b1a:	687b      	ldr	r3, [r7, #4]
 8027b1c:	3304      	adds	r3, #4
 8027b1e:	2102      	movs	r1, #2
 8027b20:	4618      	mov	r0, r3
 8027b22:	f001 f989 	bl	8028e38 <RCCEx_PLL2_Config>
 8027b26:	4603      	mov	r3, r0
 8027b28:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8027b2a:	e00c      	b.n	8027b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8027b2c:	687b      	ldr	r3, [r7, #4]
 8027b2e:	3324      	adds	r3, #36	; 0x24
 8027b30:	2102      	movs	r1, #2
 8027b32:	4618      	mov	r0, r3
 8027b34:	f001 fa32 	bl	8028f9c <RCCEx_PLL3_Config>
 8027b38:	4603      	mov	r3, r0
 8027b3a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8027b3c:	e003      	b.n	8027b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8027b3e:	2301      	movs	r3, #1
 8027b40:	75fb      	strb	r3, [r7, #23]
      break;
 8027b42:	e000      	b.n	8027b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8027b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027b46:	7dfb      	ldrb	r3, [r7, #23]
 8027b48:	2b00      	cmp	r3, #0
 8027b4a:	d109      	bne.n	8027b60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8027b4c:	4b94      	ldr	r3, [pc, #592]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027b50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8027b54:	687b      	ldr	r3, [r7, #4]
 8027b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8027b58:	4991      	ldr	r1, [pc, #580]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027b5a:	4313      	orrs	r3, r2
 8027b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8027b5e:	e001      	b.n	8027b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027b60:	7dfb      	ldrb	r3, [r7, #23]
 8027b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8027b64:	687b      	ldr	r3, [r7, #4]
 8027b66:	681b      	ldr	r3, [r3, #0]
 8027b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027b6c:	2b00      	cmp	r3, #0
 8027b6e:	d03d      	beq.n	8027bec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8027b70:	687b      	ldr	r3, [r7, #4]
 8027b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027b74:	2b04      	cmp	r3, #4
 8027b76:	d826      	bhi.n	8027bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8027b78:	a201      	add	r2, pc, #4	; (adr r2, 8027b80 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8027b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027b7e:	bf00      	nop
 8027b80:	08027b95 	.word	0x08027b95
 8027b84:	08027ba3 	.word	0x08027ba3
 8027b88:	08027bb5 	.word	0x08027bb5
 8027b8c:	08027bcd 	.word	0x08027bcd
 8027b90:	08027bcd 	.word	0x08027bcd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027b94:	4b82      	ldr	r3, [pc, #520]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027b98:	4a81      	ldr	r2, [pc, #516]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027ba0:	e015      	b.n	8027bce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8027ba2:	687b      	ldr	r3, [r7, #4]
 8027ba4:	3304      	adds	r3, #4
 8027ba6:	2100      	movs	r1, #0
 8027ba8:	4618      	mov	r0, r3
 8027baa:	f001 f945 	bl	8028e38 <RCCEx_PLL2_Config>
 8027bae:	4603      	mov	r3, r0
 8027bb0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027bb2:	e00c      	b.n	8027bce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8027bb4:	687b      	ldr	r3, [r7, #4]
 8027bb6:	3324      	adds	r3, #36	; 0x24
 8027bb8:	2100      	movs	r1, #0
 8027bba:	4618      	mov	r0, r3
 8027bbc:	f001 f9ee 	bl	8028f9c <RCCEx_PLL3_Config>
 8027bc0:	4603      	mov	r3, r0
 8027bc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027bc4:	e003      	b.n	8027bce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8027bc6:	2301      	movs	r3, #1
 8027bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8027bca:	e000      	b.n	8027bce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8027bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027bce:	7dfb      	ldrb	r3, [r7, #23]
 8027bd0:	2b00      	cmp	r3, #0
 8027bd2:	d109      	bne.n	8027be8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8027bd4:	4b72      	ldr	r3, [pc, #456]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027bd8:	f023 0207 	bic.w	r2, r3, #7
 8027bdc:	687b      	ldr	r3, [r7, #4]
 8027bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027be0:	496f      	ldr	r1, [pc, #444]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027be2:	4313      	orrs	r3, r2
 8027be4:	650b      	str	r3, [r1, #80]	; 0x50
 8027be6:	e001      	b.n	8027bec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027be8:	7dfb      	ldrb	r3, [r7, #23]
 8027bea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8027bec:	687b      	ldr	r3, [r7, #4]
 8027bee:	681b      	ldr	r3, [r3, #0]
 8027bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027bf4:	2b00      	cmp	r3, #0
 8027bf6:	d051      	beq.n	8027c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8027bf8:	687b      	ldr	r3, [r7, #4]
 8027bfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8027bfe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8027c02:	d036      	beq.n	8027c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8027c04:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8027c08:	d830      	bhi.n	8027c6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8027c0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8027c0e:	d032      	beq.n	8027c76 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8027c10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8027c14:	d82a      	bhi.n	8027c6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8027c16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8027c1a:	d02e      	beq.n	8027c7a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8027c1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8027c20:	d824      	bhi.n	8027c6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8027c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027c26:	d018      	beq.n	8027c5a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8027c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027c2c:	d81e      	bhi.n	8027c6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8027c2e:	2b00      	cmp	r3, #0
 8027c30:	d003      	beq.n	8027c3a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8027c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8027c36:	d007      	beq.n	8027c48 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8027c38:	e018      	b.n	8027c6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027c3a:	4b59      	ldr	r3, [pc, #356]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027c3e:	4a58      	ldr	r2, [pc, #352]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027c44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027c46:	e019      	b.n	8027c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8027c48:	687b      	ldr	r3, [r7, #4]
 8027c4a:	3304      	adds	r3, #4
 8027c4c:	2100      	movs	r1, #0
 8027c4e:	4618      	mov	r0, r3
 8027c50:	f001 f8f2 	bl	8028e38 <RCCEx_PLL2_Config>
 8027c54:	4603      	mov	r3, r0
 8027c56:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8027c58:	e010      	b.n	8027c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8027c5a:	687b      	ldr	r3, [r7, #4]
 8027c5c:	3324      	adds	r3, #36	; 0x24
 8027c5e:	2100      	movs	r1, #0
 8027c60:	4618      	mov	r0, r3
 8027c62:	f001 f99b 	bl	8028f9c <RCCEx_PLL3_Config>
 8027c66:	4603      	mov	r3, r0
 8027c68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027c6a:	e007      	b.n	8027c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8027c6c:	2301      	movs	r3, #1
 8027c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8027c70:	e004      	b.n	8027c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8027c72:	bf00      	nop
 8027c74:	e002      	b.n	8027c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8027c76:	bf00      	nop
 8027c78:	e000      	b.n	8027c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8027c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027c7c:	7dfb      	ldrb	r3, [r7, #23]
 8027c7e:	2b00      	cmp	r3, #0
 8027c80:	d10a      	bne.n	8027c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8027c82:	4b47      	ldr	r3, [pc, #284]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027c86:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8027c8a:	687b      	ldr	r3, [r7, #4]
 8027c8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8027c90:	4943      	ldr	r1, [pc, #268]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027c92:	4313      	orrs	r3, r2
 8027c94:	658b      	str	r3, [r1, #88]	; 0x58
 8027c96:	e001      	b.n	8027c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027c98:	7dfb      	ldrb	r3, [r7, #23]
 8027c9a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8027c9c:	687b      	ldr	r3, [r7, #4]
 8027c9e:	681b      	ldr	r3, [r3, #0]
 8027ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8027ca4:	2b00      	cmp	r3, #0
 8027ca6:	d051      	beq.n	8027d4c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8027ca8:	687b      	ldr	r3, [r7, #4]
 8027caa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8027cae:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8027cb2:	d036      	beq.n	8027d22 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8027cb4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8027cb8:	d830      	bhi.n	8027d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8027cba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8027cbe:	d032      	beq.n	8027d26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8027cc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8027cc4:	d82a      	bhi.n	8027d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8027cc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8027cca:	d02e      	beq.n	8027d2a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8027ccc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8027cd0:	d824      	bhi.n	8027d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8027cd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8027cd6:	d018      	beq.n	8027d0a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8027cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8027cdc:	d81e      	bhi.n	8027d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8027cde:	2b00      	cmp	r3, #0
 8027ce0:	d003      	beq.n	8027cea <HAL_RCCEx_PeriphCLKConfig+0x222>
 8027ce2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8027ce6:	d007      	beq.n	8027cf8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8027ce8:	e018      	b.n	8027d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027cea:	4b2d      	ldr	r3, [pc, #180]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027cee:	4a2c      	ldr	r2, [pc, #176]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027cf6:	e019      	b.n	8027d2c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8027cf8:	687b      	ldr	r3, [r7, #4]
 8027cfa:	3304      	adds	r3, #4
 8027cfc:	2100      	movs	r1, #0
 8027cfe:	4618      	mov	r0, r3
 8027d00:	f001 f89a 	bl	8028e38 <RCCEx_PLL2_Config>
 8027d04:	4603      	mov	r3, r0
 8027d06:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8027d08:	e010      	b.n	8027d2c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8027d0a:	687b      	ldr	r3, [r7, #4]
 8027d0c:	3324      	adds	r3, #36	; 0x24
 8027d0e:	2100      	movs	r1, #0
 8027d10:	4618      	mov	r0, r3
 8027d12:	f001 f943 	bl	8028f9c <RCCEx_PLL3_Config>
 8027d16:	4603      	mov	r3, r0
 8027d18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027d1a:	e007      	b.n	8027d2c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8027d1c:	2301      	movs	r3, #1
 8027d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8027d20:	e004      	b.n	8027d2c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8027d22:	bf00      	nop
 8027d24:	e002      	b.n	8027d2c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8027d26:	bf00      	nop
 8027d28:	e000      	b.n	8027d2c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8027d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027d2c:	7dfb      	ldrb	r3, [r7, #23]
 8027d2e:	2b00      	cmp	r3, #0
 8027d30:	d10a      	bne.n	8027d48 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8027d32:	4b1b      	ldr	r3, [pc, #108]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027d36:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8027d3a:	687b      	ldr	r3, [r7, #4]
 8027d3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8027d40:	4917      	ldr	r1, [pc, #92]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027d42:	4313      	orrs	r3, r2
 8027d44:	658b      	str	r3, [r1, #88]	; 0x58
 8027d46:	e001      	b.n	8027d4c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027d48:	7dfb      	ldrb	r3, [r7, #23]
 8027d4a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8027d4c:	687b      	ldr	r3, [r7, #4]
 8027d4e:	681b      	ldr	r3, [r3, #0]
 8027d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027d54:	2b00      	cmp	r3, #0
 8027d56:	d035      	beq.n	8027dc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8027d58:	687b      	ldr	r3, [r7, #4]
 8027d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027d5c:	2b30      	cmp	r3, #48	; 0x30
 8027d5e:	d01c      	beq.n	8027d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8027d60:	2b30      	cmp	r3, #48	; 0x30
 8027d62:	d817      	bhi.n	8027d94 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8027d64:	2b20      	cmp	r3, #32
 8027d66:	d00c      	beq.n	8027d82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8027d68:	2b20      	cmp	r3, #32
 8027d6a:	d813      	bhi.n	8027d94 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8027d6c:	2b00      	cmp	r3, #0
 8027d6e:	d019      	beq.n	8027da4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8027d70:	2b10      	cmp	r3, #16
 8027d72:	d10f      	bne.n	8027d94 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027d74:	4b0a      	ldr	r3, [pc, #40]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027d78:	4a09      	ldr	r2, [pc, #36]	; (8027da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8027d80:	e011      	b.n	8027da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8027d82:	687b      	ldr	r3, [r7, #4]
 8027d84:	3304      	adds	r3, #4
 8027d86:	2102      	movs	r1, #2
 8027d88:	4618      	mov	r0, r3
 8027d8a:	f001 f855 	bl	8028e38 <RCCEx_PLL2_Config>
 8027d8e:	4603      	mov	r3, r0
 8027d90:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8027d92:	e008      	b.n	8027da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8027d94:	2301      	movs	r3, #1
 8027d96:	75fb      	strb	r3, [r7, #23]
      break;
 8027d98:	e005      	b.n	8027da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8027d9a:	bf00      	nop
 8027d9c:	e003      	b.n	8027da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8027d9e:	bf00      	nop
 8027da0:	58024400 	.word	0x58024400
      break;
 8027da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027da6:	7dfb      	ldrb	r3, [r7, #23]
 8027da8:	2b00      	cmp	r3, #0
 8027daa:	d109      	bne.n	8027dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8027dac:	4ba3      	ldr	r3, [pc, #652]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027db0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8027db4:	687b      	ldr	r3, [r7, #4]
 8027db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027db8:	49a0      	ldr	r1, [pc, #640]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027dba:	4313      	orrs	r3, r2
 8027dbc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8027dbe:	e001      	b.n	8027dc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027dc0:	7dfb      	ldrb	r3, [r7, #23]
 8027dc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8027dc4:	687b      	ldr	r3, [r7, #4]
 8027dc6:	681b      	ldr	r3, [r3, #0]
 8027dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8027dcc:	2b00      	cmp	r3, #0
 8027dce:	d047      	beq.n	8027e60 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8027dd0:	687b      	ldr	r3, [r7, #4]
 8027dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8027dd8:	d030      	beq.n	8027e3c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8027dda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8027dde:	d82a      	bhi.n	8027e36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8027de0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8027de4:	d02c      	beq.n	8027e40 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8027de6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8027dea:	d824      	bhi.n	8027e36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8027dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027df0:	d018      	beq.n	8027e24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8027df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027df6:	d81e      	bhi.n	8027e36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8027df8:	2b00      	cmp	r3, #0
 8027dfa:	d003      	beq.n	8027e04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8027dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8027e00:	d007      	beq.n	8027e12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8027e02:	e018      	b.n	8027e36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027e04:	4b8d      	ldr	r3, [pc, #564]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027e08:	4a8c      	ldr	r2, [pc, #560]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8027e10:	e017      	b.n	8027e42 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8027e12:	687b      	ldr	r3, [r7, #4]
 8027e14:	3304      	adds	r3, #4
 8027e16:	2100      	movs	r1, #0
 8027e18:	4618      	mov	r0, r3
 8027e1a:	f001 f80d 	bl	8028e38 <RCCEx_PLL2_Config>
 8027e1e:	4603      	mov	r3, r0
 8027e20:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8027e22:	e00e      	b.n	8027e42 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8027e24:	687b      	ldr	r3, [r7, #4]
 8027e26:	3324      	adds	r3, #36	; 0x24
 8027e28:	2100      	movs	r1, #0
 8027e2a:	4618      	mov	r0, r3
 8027e2c:	f001 f8b6 	bl	8028f9c <RCCEx_PLL3_Config>
 8027e30:	4603      	mov	r3, r0
 8027e32:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8027e34:	e005      	b.n	8027e42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8027e36:	2301      	movs	r3, #1
 8027e38:	75fb      	strb	r3, [r7, #23]
      break;
 8027e3a:	e002      	b.n	8027e42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8027e3c:	bf00      	nop
 8027e3e:	e000      	b.n	8027e42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8027e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027e42:	7dfb      	ldrb	r3, [r7, #23]
 8027e44:	2b00      	cmp	r3, #0
 8027e46:	d109      	bne.n	8027e5c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8027e48:	4b7c      	ldr	r3, [pc, #496]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027e4c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8027e50:	687b      	ldr	r3, [r7, #4]
 8027e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027e54:	4979      	ldr	r1, [pc, #484]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027e56:	4313      	orrs	r3, r2
 8027e58:	650b      	str	r3, [r1, #80]	; 0x50
 8027e5a:	e001      	b.n	8027e60 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027e5c:	7dfb      	ldrb	r3, [r7, #23]
 8027e5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8027e60:	687b      	ldr	r3, [r7, #4]
 8027e62:	681b      	ldr	r3, [r3, #0]
 8027e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8027e68:	2b00      	cmp	r3, #0
 8027e6a:	d049      	beq.n	8027f00 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8027e6c:	687b      	ldr	r3, [r7, #4]
 8027e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027e74:	d02e      	beq.n	8027ed4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8027e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027e7a:	d828      	bhi.n	8027ece <HAL_RCCEx_PeriphCLKConfig+0x406>
 8027e7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8027e80:	d02a      	beq.n	8027ed8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8027e82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8027e86:	d822      	bhi.n	8027ece <HAL_RCCEx_PeriphCLKConfig+0x406>
 8027e88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8027e8c:	d026      	beq.n	8027edc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8027e8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8027e92:	d81c      	bhi.n	8027ece <HAL_RCCEx_PeriphCLKConfig+0x406>
 8027e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8027e98:	d010      	beq.n	8027ebc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8027e9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8027e9e:	d816      	bhi.n	8027ece <HAL_RCCEx_PeriphCLKConfig+0x406>
 8027ea0:	2b00      	cmp	r3, #0
 8027ea2:	d01d      	beq.n	8027ee0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8027ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027ea8:	d111      	bne.n	8027ece <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8027eaa:	687b      	ldr	r3, [r7, #4]
 8027eac:	3304      	adds	r3, #4
 8027eae:	2101      	movs	r1, #1
 8027eb0:	4618      	mov	r0, r3
 8027eb2:	f000 ffc1 	bl	8028e38 <RCCEx_PLL2_Config>
 8027eb6:	4603      	mov	r3, r0
 8027eb8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8027eba:	e012      	b.n	8027ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8027ebc:	687b      	ldr	r3, [r7, #4]
 8027ebe:	3324      	adds	r3, #36	; 0x24
 8027ec0:	2101      	movs	r1, #1
 8027ec2:	4618      	mov	r0, r3
 8027ec4:	f001 f86a 	bl	8028f9c <RCCEx_PLL3_Config>
 8027ec8:	4603      	mov	r3, r0
 8027eca:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8027ecc:	e009      	b.n	8027ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8027ece:	2301      	movs	r3, #1
 8027ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8027ed2:	e006      	b.n	8027ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8027ed4:	bf00      	nop
 8027ed6:	e004      	b.n	8027ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8027ed8:	bf00      	nop
 8027eda:	e002      	b.n	8027ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8027edc:	bf00      	nop
 8027ede:	e000      	b.n	8027ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8027ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027ee2:	7dfb      	ldrb	r3, [r7, #23]
 8027ee4:	2b00      	cmp	r3, #0
 8027ee6:	d109      	bne.n	8027efc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8027ee8:	4b54      	ldr	r3, [pc, #336]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027eec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8027ef0:	687b      	ldr	r3, [r7, #4]
 8027ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027ef4:	4951      	ldr	r1, [pc, #324]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027ef6:	4313      	orrs	r3, r2
 8027ef8:	650b      	str	r3, [r1, #80]	; 0x50
 8027efa:	e001      	b.n	8027f00 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027efc:	7dfb      	ldrb	r3, [r7, #23]
 8027efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8027f00:	687b      	ldr	r3, [r7, #4]
 8027f02:	681b      	ldr	r3, [r3, #0]
 8027f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027f08:	2b00      	cmp	r3, #0
 8027f0a:	d04b      	beq.n	8027fa4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8027f0c:	687b      	ldr	r3, [r7, #4]
 8027f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8027f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8027f16:	d02e      	beq.n	8027f76 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8027f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8027f1c:	d828      	bhi.n	8027f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8027f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027f22:	d02a      	beq.n	8027f7a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8027f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027f28:	d822      	bhi.n	8027f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8027f2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8027f2e:	d026      	beq.n	8027f7e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8027f30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8027f34:	d81c      	bhi.n	8027f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8027f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027f3a:	d010      	beq.n	8027f5e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8027f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027f40:	d816      	bhi.n	8027f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8027f42:	2b00      	cmp	r3, #0
 8027f44:	d01d      	beq.n	8027f82 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8027f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8027f4a:	d111      	bne.n	8027f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8027f4c:	687b      	ldr	r3, [r7, #4]
 8027f4e:	3304      	adds	r3, #4
 8027f50:	2101      	movs	r1, #1
 8027f52:	4618      	mov	r0, r3
 8027f54:	f000 ff70 	bl	8028e38 <RCCEx_PLL2_Config>
 8027f58:	4603      	mov	r3, r0
 8027f5a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8027f5c:	e012      	b.n	8027f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8027f5e:	687b      	ldr	r3, [r7, #4]
 8027f60:	3324      	adds	r3, #36	; 0x24
 8027f62:	2101      	movs	r1, #1
 8027f64:	4618      	mov	r0, r3
 8027f66:	f001 f819 	bl	8028f9c <RCCEx_PLL3_Config>
 8027f6a:	4603      	mov	r3, r0
 8027f6c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8027f6e:	e009      	b.n	8027f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8027f70:	2301      	movs	r3, #1
 8027f72:	75fb      	strb	r3, [r7, #23]
      break;
 8027f74:	e006      	b.n	8027f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8027f76:	bf00      	nop
 8027f78:	e004      	b.n	8027f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8027f7a:	bf00      	nop
 8027f7c:	e002      	b.n	8027f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8027f7e:	bf00      	nop
 8027f80:	e000      	b.n	8027f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8027f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027f84:	7dfb      	ldrb	r3, [r7, #23]
 8027f86:	2b00      	cmp	r3, #0
 8027f88:	d10a      	bne.n	8027fa0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8027f8a:	4b2c      	ldr	r3, [pc, #176]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027f8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8027f92:	687b      	ldr	r3, [r7, #4]
 8027f94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8027f98:	4928      	ldr	r1, [pc, #160]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027f9a:	4313      	orrs	r3, r2
 8027f9c:	658b      	str	r3, [r1, #88]	; 0x58
 8027f9e:	e001      	b.n	8027fa4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027fa0:	7dfb      	ldrb	r3, [r7, #23]
 8027fa2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8027fa4:	687b      	ldr	r3, [r7, #4]
 8027fa6:	681b      	ldr	r3, [r3, #0]
 8027fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8027fac:	2b00      	cmp	r3, #0
 8027fae:	d02f      	beq.n	8028010 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8027fb0:	687b      	ldr	r3, [r7, #4]
 8027fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027fb8:	d00e      	beq.n	8027fd8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8027fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027fbe:	d814      	bhi.n	8027fea <HAL_RCCEx_PeriphCLKConfig+0x522>
 8027fc0:	2b00      	cmp	r3, #0
 8027fc2:	d015      	beq.n	8027ff0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8027fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8027fc8:	d10f      	bne.n	8027fea <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027fca:	4b1c      	ldr	r3, [pc, #112]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027fce:	4a1b      	ldr	r2, [pc, #108]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8027fd6:	e00c      	b.n	8027ff2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8027fd8:	687b      	ldr	r3, [r7, #4]
 8027fda:	3304      	adds	r3, #4
 8027fdc:	2101      	movs	r1, #1
 8027fde:	4618      	mov	r0, r3
 8027fe0:	f000 ff2a 	bl	8028e38 <RCCEx_PLL2_Config>
 8027fe4:	4603      	mov	r3, r0
 8027fe6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8027fe8:	e003      	b.n	8027ff2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8027fea:	2301      	movs	r3, #1
 8027fec:	75fb      	strb	r3, [r7, #23]
      break;
 8027fee:	e000      	b.n	8027ff2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8027ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027ff2:	7dfb      	ldrb	r3, [r7, #23]
 8027ff4:	2b00      	cmp	r3, #0
 8027ff6:	d109      	bne.n	802800c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8027ff8:	4b10      	ldr	r3, [pc, #64]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027ffc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8028000:	687b      	ldr	r3, [r7, #4]
 8028002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028004:	490d      	ldr	r1, [pc, #52]	; (802803c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8028006:	4313      	orrs	r3, r2
 8028008:	650b      	str	r3, [r1, #80]	; 0x50
 802800a:	e001      	b.n	8028010 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802800c:	7dfb      	ldrb	r3, [r7, #23]
 802800e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8028010:	687b      	ldr	r3, [r7, #4]
 8028012:	681b      	ldr	r3, [r3, #0]
 8028014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8028018:	2b00      	cmp	r3, #0
 802801a:	d034      	beq.n	8028086 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 802801c:	687b      	ldr	r3, [r7, #4]
 802801e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028020:	2b03      	cmp	r3, #3
 8028022:	d81d      	bhi.n	8028060 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8028024:	a201      	add	r2, pc, #4	; (adr r2, 802802c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8028026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802802a:	bf00      	nop
 802802c:	08028067 	.word	0x08028067
 8028030:	08028041 	.word	0x08028041
 8028034:	0802804f 	.word	0x0802804f
 8028038:	08028067 	.word	0x08028067
 802803c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8028040:	4bb1      	ldr	r3, [pc, #708]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028044:	4ab0      	ldr	r2, [pc, #704]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802804a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 802804c:	e00c      	b.n	8028068 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 802804e:	687b      	ldr	r3, [r7, #4]
 8028050:	3304      	adds	r3, #4
 8028052:	2102      	movs	r1, #2
 8028054:	4618      	mov	r0, r3
 8028056:	f000 feef 	bl	8028e38 <RCCEx_PLL2_Config>
 802805a:	4603      	mov	r3, r0
 802805c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 802805e:	e003      	b.n	8028068 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8028060:	2301      	movs	r3, #1
 8028062:	75fb      	strb	r3, [r7, #23]
      break;
 8028064:	e000      	b.n	8028068 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8028066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8028068:	7dfb      	ldrb	r3, [r7, #23]
 802806a:	2b00      	cmp	r3, #0
 802806c:	d109      	bne.n	8028082 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 802806e:	4ba6      	ldr	r3, [pc, #664]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028072:	f023 0203 	bic.w	r2, r3, #3
 8028076:	687b      	ldr	r3, [r7, #4]
 8028078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802807a:	49a3      	ldr	r1, [pc, #652]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 802807c:	4313      	orrs	r3, r2
 802807e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8028080:	e001      	b.n	8028086 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028082:	7dfb      	ldrb	r3, [r7, #23]
 8028084:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8028086:	687b      	ldr	r3, [r7, #4]
 8028088:	681b      	ldr	r3, [r3, #0]
 802808a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802808e:	2b00      	cmp	r3, #0
 8028090:	f000 8086 	beq.w	80281a0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8028094:	4b9d      	ldr	r3, [pc, #628]	; (802830c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8028096:	681b      	ldr	r3, [r3, #0]
 8028098:	4a9c      	ldr	r2, [pc, #624]	; (802830c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 802809a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802809e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80280a0:	f7fa f81c 	bl	80220dc <HAL_GetTick>
 80280a4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80280a6:	e009      	b.n	80280bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80280a8:	f7fa f818 	bl	80220dc <HAL_GetTick>
 80280ac:	4602      	mov	r2, r0
 80280ae:	693b      	ldr	r3, [r7, #16]
 80280b0:	1ad3      	subs	r3, r2, r3
 80280b2:	2b64      	cmp	r3, #100	; 0x64
 80280b4:	d902      	bls.n	80280bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80280b6:	2303      	movs	r3, #3
 80280b8:	75fb      	strb	r3, [r7, #23]
        break;
 80280ba:	e005      	b.n	80280c8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80280bc:	4b93      	ldr	r3, [pc, #588]	; (802830c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80280be:	681b      	ldr	r3, [r3, #0]
 80280c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80280c4:	2b00      	cmp	r3, #0
 80280c6:	d0ef      	beq.n	80280a8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80280c8:	7dfb      	ldrb	r3, [r7, #23]
 80280ca:	2b00      	cmp	r3, #0
 80280cc:	d166      	bne.n	802819c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80280ce:	4b8e      	ldr	r3, [pc, #568]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80280d2:	687b      	ldr	r3, [r7, #4]
 80280d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80280d8:	4053      	eors	r3, r2
 80280da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80280de:	2b00      	cmp	r3, #0
 80280e0:	d013      	beq.n	802810a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80280e2:	4b89      	ldr	r3, [pc, #548]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80280ea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80280ec:	4b86      	ldr	r3, [pc, #536]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280f0:	4a85      	ldr	r2, [pc, #532]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80280f6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80280f8:	4b83      	ldr	r3, [pc, #524]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280fc:	4a82      	ldr	r2, [pc, #520]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8028102:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8028104:	4a80      	ldr	r2, [pc, #512]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028106:	68fb      	ldr	r3, [r7, #12]
 8028108:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 802810a:	687b      	ldr	r3, [r7, #4]
 802810c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8028110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8028114:	d115      	bne.n	8028142 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028116:	f7f9 ffe1 	bl	80220dc <HAL_GetTick>
 802811a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802811c:	e00b      	b.n	8028136 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802811e:	f7f9 ffdd 	bl	80220dc <HAL_GetTick>
 8028122:	4602      	mov	r2, r0
 8028124:	693b      	ldr	r3, [r7, #16]
 8028126:	1ad3      	subs	r3, r2, r3
 8028128:	f241 3288 	movw	r2, #5000	; 0x1388
 802812c:	4293      	cmp	r3, r2
 802812e:	d902      	bls.n	8028136 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8028130:	2303      	movs	r3, #3
 8028132:	75fb      	strb	r3, [r7, #23]
            break;
 8028134:	e005      	b.n	8028142 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8028136:	4b74      	ldr	r3, [pc, #464]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802813a:	f003 0302 	and.w	r3, r3, #2
 802813e:	2b00      	cmp	r3, #0
 8028140:	d0ed      	beq.n	802811e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8028142:	7dfb      	ldrb	r3, [r7, #23]
 8028144:	2b00      	cmp	r3, #0
 8028146:	d126      	bne.n	8028196 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8028148:	687b      	ldr	r3, [r7, #4]
 802814a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 802814e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8028156:	d10d      	bne.n	8028174 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8028158:	4b6b      	ldr	r3, [pc, #428]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 802815a:	691b      	ldr	r3, [r3, #16]
 802815c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8028160:	687b      	ldr	r3, [r7, #4]
 8028162:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8028166:	0919      	lsrs	r1, r3, #4
 8028168:	4b69      	ldr	r3, [pc, #420]	; (8028310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802816a:	400b      	ands	r3, r1
 802816c:	4966      	ldr	r1, [pc, #408]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 802816e:	4313      	orrs	r3, r2
 8028170:	610b      	str	r3, [r1, #16]
 8028172:	e005      	b.n	8028180 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8028174:	4b64      	ldr	r3, [pc, #400]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028176:	691b      	ldr	r3, [r3, #16]
 8028178:	4a63      	ldr	r2, [pc, #396]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 802817a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802817e:	6113      	str	r3, [r2, #16]
 8028180:	4b61      	ldr	r3, [pc, #388]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028182:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8028184:	687b      	ldr	r3, [r7, #4]
 8028186:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 802818a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802818e:	495e      	ldr	r1, [pc, #376]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028190:	4313      	orrs	r3, r2
 8028192:	670b      	str	r3, [r1, #112]	; 0x70
 8028194:	e004      	b.n	80281a0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8028196:	7dfb      	ldrb	r3, [r7, #23]
 8028198:	75bb      	strb	r3, [r7, #22]
 802819a:	e001      	b.n	80281a0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 802819c:	7dfb      	ldrb	r3, [r7, #23]
 802819e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80281a0:	687b      	ldr	r3, [r7, #4]
 80281a2:	681b      	ldr	r3, [r3, #0]
 80281a4:	f003 0301 	and.w	r3, r3, #1
 80281a8:	2b00      	cmp	r3, #0
 80281aa:	d07e      	beq.n	80282aa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80281ac:	687b      	ldr	r3, [r7, #4]
 80281ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80281b0:	2b28      	cmp	r3, #40	; 0x28
 80281b2:	d867      	bhi.n	8028284 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80281b4:	a201      	add	r2, pc, #4	; (adr r2, 80281bc <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80281b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80281ba:	bf00      	nop
 80281bc:	0802828b 	.word	0x0802828b
 80281c0:	08028285 	.word	0x08028285
 80281c4:	08028285 	.word	0x08028285
 80281c8:	08028285 	.word	0x08028285
 80281cc:	08028285 	.word	0x08028285
 80281d0:	08028285 	.word	0x08028285
 80281d4:	08028285 	.word	0x08028285
 80281d8:	08028285 	.word	0x08028285
 80281dc:	08028261 	.word	0x08028261
 80281e0:	08028285 	.word	0x08028285
 80281e4:	08028285 	.word	0x08028285
 80281e8:	08028285 	.word	0x08028285
 80281ec:	08028285 	.word	0x08028285
 80281f0:	08028285 	.word	0x08028285
 80281f4:	08028285 	.word	0x08028285
 80281f8:	08028285 	.word	0x08028285
 80281fc:	08028273 	.word	0x08028273
 8028200:	08028285 	.word	0x08028285
 8028204:	08028285 	.word	0x08028285
 8028208:	08028285 	.word	0x08028285
 802820c:	08028285 	.word	0x08028285
 8028210:	08028285 	.word	0x08028285
 8028214:	08028285 	.word	0x08028285
 8028218:	08028285 	.word	0x08028285
 802821c:	0802828b 	.word	0x0802828b
 8028220:	08028285 	.word	0x08028285
 8028224:	08028285 	.word	0x08028285
 8028228:	08028285 	.word	0x08028285
 802822c:	08028285 	.word	0x08028285
 8028230:	08028285 	.word	0x08028285
 8028234:	08028285 	.word	0x08028285
 8028238:	08028285 	.word	0x08028285
 802823c:	0802828b 	.word	0x0802828b
 8028240:	08028285 	.word	0x08028285
 8028244:	08028285 	.word	0x08028285
 8028248:	08028285 	.word	0x08028285
 802824c:	08028285 	.word	0x08028285
 8028250:	08028285 	.word	0x08028285
 8028254:	08028285 	.word	0x08028285
 8028258:	08028285 	.word	0x08028285
 802825c:	0802828b 	.word	0x0802828b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8028260:	687b      	ldr	r3, [r7, #4]
 8028262:	3304      	adds	r3, #4
 8028264:	2101      	movs	r1, #1
 8028266:	4618      	mov	r0, r3
 8028268:	f000 fde6 	bl	8028e38 <RCCEx_PLL2_Config>
 802826c:	4603      	mov	r3, r0
 802826e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8028270:	e00c      	b.n	802828c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8028272:	687b      	ldr	r3, [r7, #4]
 8028274:	3324      	adds	r3, #36	; 0x24
 8028276:	2101      	movs	r1, #1
 8028278:	4618      	mov	r0, r3
 802827a:	f000 fe8f 	bl	8028f9c <RCCEx_PLL3_Config>
 802827e:	4603      	mov	r3, r0
 8028280:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8028282:	e003      	b.n	802828c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8028284:	2301      	movs	r3, #1
 8028286:	75fb      	strb	r3, [r7, #23]
      break;
 8028288:	e000      	b.n	802828c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 802828a:	bf00      	nop
    }

    if(ret == HAL_OK)
 802828c:	7dfb      	ldrb	r3, [r7, #23]
 802828e:	2b00      	cmp	r3, #0
 8028290:	d109      	bne.n	80282a6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8028292:	4b1d      	ldr	r3, [pc, #116]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028296:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 802829a:	687b      	ldr	r3, [r7, #4]
 802829c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802829e:	491a      	ldr	r1, [pc, #104]	; (8028308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80282a0:	4313      	orrs	r3, r2
 80282a2:	654b      	str	r3, [r1, #84]	; 0x54
 80282a4:	e001      	b.n	80282aa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80282a6:	7dfb      	ldrb	r3, [r7, #23]
 80282a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80282aa:	687b      	ldr	r3, [r7, #4]
 80282ac:	681b      	ldr	r3, [r3, #0]
 80282ae:	f003 0302 	and.w	r3, r3, #2
 80282b2:	2b00      	cmp	r3, #0
 80282b4:	d03e      	beq.n	8028334 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80282b6:	687b      	ldr	r3, [r7, #4]
 80282b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80282ba:	2b05      	cmp	r3, #5
 80282bc:	d820      	bhi.n	8028300 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80282be:	a201      	add	r2, pc, #4	; (adr r2, 80282c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80282c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80282c4:	08028315 	.word	0x08028315
 80282c8:	080282dd 	.word	0x080282dd
 80282cc:	080282ef 	.word	0x080282ef
 80282d0:	08028315 	.word	0x08028315
 80282d4:	08028315 	.word	0x08028315
 80282d8:	08028315 	.word	0x08028315
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80282dc:	687b      	ldr	r3, [r7, #4]
 80282de:	3304      	adds	r3, #4
 80282e0:	2101      	movs	r1, #1
 80282e2:	4618      	mov	r0, r3
 80282e4:	f000 fda8 	bl	8028e38 <RCCEx_PLL2_Config>
 80282e8:	4603      	mov	r3, r0
 80282ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80282ec:	e013      	b.n	8028316 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80282ee:	687b      	ldr	r3, [r7, #4]
 80282f0:	3324      	adds	r3, #36	; 0x24
 80282f2:	2101      	movs	r1, #1
 80282f4:	4618      	mov	r0, r3
 80282f6:	f000 fe51 	bl	8028f9c <RCCEx_PLL3_Config>
 80282fa:	4603      	mov	r3, r0
 80282fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80282fe:	e00a      	b.n	8028316 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8028300:	2301      	movs	r3, #1
 8028302:	75fb      	strb	r3, [r7, #23]
      break;
 8028304:	e007      	b.n	8028316 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8028306:	bf00      	nop
 8028308:	58024400 	.word	0x58024400
 802830c:	58024800 	.word	0x58024800
 8028310:	00ffffcf 	.word	0x00ffffcf
      break;
 8028314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8028316:	7dfb      	ldrb	r3, [r7, #23]
 8028318:	2b00      	cmp	r3, #0
 802831a:	d109      	bne.n	8028330 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 802831c:	4b9f      	ldr	r3, [pc, #636]	; (802859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 802831e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028320:	f023 0207 	bic.w	r2, r3, #7
 8028324:	687b      	ldr	r3, [r7, #4]
 8028326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028328:	499c      	ldr	r1, [pc, #624]	; (802859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 802832a:	4313      	orrs	r3, r2
 802832c:	654b      	str	r3, [r1, #84]	; 0x54
 802832e:	e001      	b.n	8028334 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028330:	7dfb      	ldrb	r3, [r7, #23]
 8028332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8028334:	687b      	ldr	r3, [r7, #4]
 8028336:	681b      	ldr	r3, [r3, #0]
 8028338:	f003 0304 	and.w	r3, r3, #4
 802833c:	2b00      	cmp	r3, #0
 802833e:	d039      	beq.n	80283b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8028340:	687b      	ldr	r3, [r7, #4]
 8028342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8028346:	2b05      	cmp	r3, #5
 8028348:	d820      	bhi.n	802838c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 802834a:	a201      	add	r2, pc, #4	; (adr r2, 8028350 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 802834c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028350:	08028393 	.word	0x08028393
 8028354:	08028369 	.word	0x08028369
 8028358:	0802837b 	.word	0x0802837b
 802835c:	08028393 	.word	0x08028393
 8028360:	08028393 	.word	0x08028393
 8028364:	08028393 	.word	0x08028393
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8028368:	687b      	ldr	r3, [r7, #4]
 802836a:	3304      	adds	r3, #4
 802836c:	2101      	movs	r1, #1
 802836e:	4618      	mov	r0, r3
 8028370:	f000 fd62 	bl	8028e38 <RCCEx_PLL2_Config>
 8028374:	4603      	mov	r3, r0
 8028376:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8028378:	e00c      	b.n	8028394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 802837a:	687b      	ldr	r3, [r7, #4]
 802837c:	3324      	adds	r3, #36	; 0x24
 802837e:	2101      	movs	r1, #1
 8028380:	4618      	mov	r0, r3
 8028382:	f000 fe0b 	bl	8028f9c <RCCEx_PLL3_Config>
 8028386:	4603      	mov	r3, r0
 8028388:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 802838a:	e003      	b.n	8028394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 802838c:	2301      	movs	r3, #1
 802838e:	75fb      	strb	r3, [r7, #23]
      break;
 8028390:	e000      	b.n	8028394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8028392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8028394:	7dfb      	ldrb	r3, [r7, #23]
 8028396:	2b00      	cmp	r3, #0
 8028398:	d10a      	bne.n	80283b0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 802839a:	4b80      	ldr	r3, [pc, #512]	; (802859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 802839c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802839e:	f023 0207 	bic.w	r2, r3, #7
 80283a2:	687b      	ldr	r3, [r7, #4]
 80283a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80283a8:	497c      	ldr	r1, [pc, #496]	; (802859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80283aa:	4313      	orrs	r3, r2
 80283ac:	658b      	str	r3, [r1, #88]	; 0x58
 80283ae:	e001      	b.n	80283b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80283b0:	7dfb      	ldrb	r3, [r7, #23]
 80283b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80283b4:	687b      	ldr	r3, [r7, #4]
 80283b6:	681b      	ldr	r3, [r3, #0]
 80283b8:	f003 0320 	and.w	r3, r3, #32
 80283bc:	2b00      	cmp	r3, #0
 80283be:	d04b      	beq.n	8028458 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80283c0:	687b      	ldr	r3, [r7, #4]
 80283c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80283c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80283ca:	d02e      	beq.n	802842a <HAL_RCCEx_PeriphCLKConfig+0x962>
 80283cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80283d0:	d828      	bhi.n	8028424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80283d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80283d6:	d02a      	beq.n	802842e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80283d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80283dc:	d822      	bhi.n	8028424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80283de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80283e2:	d026      	beq.n	8028432 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80283e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80283e8:	d81c      	bhi.n	8028424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80283ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80283ee:	d010      	beq.n	8028412 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80283f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80283f4:	d816      	bhi.n	8028424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80283f6:	2b00      	cmp	r3, #0
 80283f8:	d01d      	beq.n	8028436 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80283fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80283fe:	d111      	bne.n	8028424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8028400:	687b      	ldr	r3, [r7, #4]
 8028402:	3304      	adds	r3, #4
 8028404:	2100      	movs	r1, #0
 8028406:	4618      	mov	r0, r3
 8028408:	f000 fd16 	bl	8028e38 <RCCEx_PLL2_Config>
 802840c:	4603      	mov	r3, r0
 802840e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8028410:	e012      	b.n	8028438 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8028412:	687b      	ldr	r3, [r7, #4]
 8028414:	3324      	adds	r3, #36	; 0x24
 8028416:	2102      	movs	r1, #2
 8028418:	4618      	mov	r0, r3
 802841a:	f000 fdbf 	bl	8028f9c <RCCEx_PLL3_Config>
 802841e:	4603      	mov	r3, r0
 8028420:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8028422:	e009      	b.n	8028438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8028424:	2301      	movs	r3, #1
 8028426:	75fb      	strb	r3, [r7, #23]
      break;
 8028428:	e006      	b.n	8028438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 802842a:	bf00      	nop
 802842c:	e004      	b.n	8028438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 802842e:	bf00      	nop
 8028430:	e002      	b.n	8028438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8028432:	bf00      	nop
 8028434:	e000      	b.n	8028438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8028436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8028438:	7dfb      	ldrb	r3, [r7, #23]
 802843a:	2b00      	cmp	r3, #0
 802843c:	d10a      	bne.n	8028454 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 802843e:	4b57      	ldr	r3, [pc, #348]	; (802859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8028440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028442:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8028446:	687b      	ldr	r3, [r7, #4]
 8028448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802844c:	4953      	ldr	r1, [pc, #332]	; (802859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 802844e:	4313      	orrs	r3, r2
 8028450:	654b      	str	r3, [r1, #84]	; 0x54
 8028452:	e001      	b.n	8028458 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028454:	7dfb      	ldrb	r3, [r7, #23]
 8028456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8028458:	687b      	ldr	r3, [r7, #4]
 802845a:	681b      	ldr	r3, [r3, #0]
 802845c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028460:	2b00      	cmp	r3, #0
 8028462:	d04b      	beq.n	80284fc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8028464:	687b      	ldr	r3, [r7, #4]
 8028466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802846a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 802846e:	d02e      	beq.n	80284ce <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8028470:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8028474:	d828      	bhi.n	80284c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8028476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802847a:	d02a      	beq.n	80284d2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 802847c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028480:	d822      	bhi.n	80284c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8028482:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8028486:	d026      	beq.n	80284d6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8028488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802848c:	d81c      	bhi.n	80284c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 802848e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028492:	d010      	beq.n	80284b6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8028494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028498:	d816      	bhi.n	80284c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 802849a:	2b00      	cmp	r3, #0
 802849c:	d01d      	beq.n	80284da <HAL_RCCEx_PeriphCLKConfig+0xa12>
 802849e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80284a2:	d111      	bne.n	80284c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80284a4:	687b      	ldr	r3, [r7, #4]
 80284a6:	3304      	adds	r3, #4
 80284a8:	2100      	movs	r1, #0
 80284aa:	4618      	mov	r0, r3
 80284ac:	f000 fcc4 	bl	8028e38 <RCCEx_PLL2_Config>
 80284b0:	4603      	mov	r3, r0
 80284b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80284b4:	e012      	b.n	80284dc <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80284b6:	687b      	ldr	r3, [r7, #4]
 80284b8:	3324      	adds	r3, #36	; 0x24
 80284ba:	2102      	movs	r1, #2
 80284bc:	4618      	mov	r0, r3
 80284be:	f000 fd6d 	bl	8028f9c <RCCEx_PLL3_Config>
 80284c2:	4603      	mov	r3, r0
 80284c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80284c6:	e009      	b.n	80284dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80284c8:	2301      	movs	r3, #1
 80284ca:	75fb      	strb	r3, [r7, #23]
      break;
 80284cc:	e006      	b.n	80284dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80284ce:	bf00      	nop
 80284d0:	e004      	b.n	80284dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80284d2:	bf00      	nop
 80284d4:	e002      	b.n	80284dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80284d6:	bf00      	nop
 80284d8:	e000      	b.n	80284dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80284da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80284dc:	7dfb      	ldrb	r3, [r7, #23]
 80284de:	2b00      	cmp	r3, #0
 80284e0:	d10a      	bne.n	80284f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80284e2:	4b2e      	ldr	r3, [pc, #184]	; (802859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80284e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80284e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80284ea:	687b      	ldr	r3, [r7, #4]
 80284ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80284f0:	492a      	ldr	r1, [pc, #168]	; (802859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80284f2:	4313      	orrs	r3, r2
 80284f4:	658b      	str	r3, [r1, #88]	; 0x58
 80284f6:	e001      	b.n	80284fc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80284f8:	7dfb      	ldrb	r3, [r7, #23]
 80284fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80284fc:	687b      	ldr	r3, [r7, #4]
 80284fe:	681b      	ldr	r3, [r3, #0]
 8028500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028504:	2b00      	cmp	r3, #0
 8028506:	d04d      	beq.n	80285a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8028508:	687b      	ldr	r3, [r7, #4]
 802850a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802850e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8028512:	d02e      	beq.n	8028572 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8028514:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8028518:	d828      	bhi.n	802856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 802851a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802851e:	d02a      	beq.n	8028576 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8028520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028524:	d822      	bhi.n	802856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8028526:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 802852a:	d026      	beq.n	802857a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 802852c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8028530:	d81c      	bhi.n	802856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8028532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8028536:	d010      	beq.n	802855a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8028538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802853c:	d816      	bhi.n	802856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 802853e:	2b00      	cmp	r3, #0
 8028540:	d01d      	beq.n	802857e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8028542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028546:	d111      	bne.n	802856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8028548:	687b      	ldr	r3, [r7, #4]
 802854a:	3304      	adds	r3, #4
 802854c:	2100      	movs	r1, #0
 802854e:	4618      	mov	r0, r3
 8028550:	f000 fc72 	bl	8028e38 <RCCEx_PLL2_Config>
 8028554:	4603      	mov	r3, r0
 8028556:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8028558:	e012      	b.n	8028580 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 802855a:	687b      	ldr	r3, [r7, #4]
 802855c:	3324      	adds	r3, #36	; 0x24
 802855e:	2102      	movs	r1, #2
 8028560:	4618      	mov	r0, r3
 8028562:	f000 fd1b 	bl	8028f9c <RCCEx_PLL3_Config>
 8028566:	4603      	mov	r3, r0
 8028568:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 802856a:	e009      	b.n	8028580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 802856c:	2301      	movs	r3, #1
 802856e:	75fb      	strb	r3, [r7, #23]
      break;
 8028570:	e006      	b.n	8028580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8028572:	bf00      	nop
 8028574:	e004      	b.n	8028580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8028576:	bf00      	nop
 8028578:	e002      	b.n	8028580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 802857a:	bf00      	nop
 802857c:	e000      	b.n	8028580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 802857e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8028580:	7dfb      	ldrb	r3, [r7, #23]
 8028582:	2b00      	cmp	r3, #0
 8028584:	d10c      	bne.n	80285a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8028586:	4b05      	ldr	r3, [pc, #20]	; (802859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8028588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802858a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802858e:	687b      	ldr	r3, [r7, #4]
 8028590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8028594:	4901      	ldr	r1, [pc, #4]	; (802859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8028596:	4313      	orrs	r3, r2
 8028598:	658b      	str	r3, [r1, #88]	; 0x58
 802859a:	e003      	b.n	80285a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 802859c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80285a0:	7dfb      	ldrb	r3, [r7, #23]
 80285a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80285a4:	687b      	ldr	r3, [r7, #4]
 80285a6:	681b      	ldr	r3, [r3, #0]
 80285a8:	f003 0308 	and.w	r3, r3, #8
 80285ac:	2b00      	cmp	r3, #0
 80285ae:	d018      	beq.n	80285e2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80285b0:	687b      	ldr	r3, [r7, #4]
 80285b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80285b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80285b8:	d10a      	bne.n	80285d0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80285ba:	687b      	ldr	r3, [r7, #4]
 80285bc:	3324      	adds	r3, #36	; 0x24
 80285be:	2102      	movs	r1, #2
 80285c0:	4618      	mov	r0, r3
 80285c2:	f000 fceb 	bl	8028f9c <RCCEx_PLL3_Config>
 80285c6:	4603      	mov	r3, r0
 80285c8:	2b00      	cmp	r3, #0
 80285ca:	d001      	beq.n	80285d0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80285cc:	2301      	movs	r3, #1
 80285ce:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80285d0:	4b8a      	ldr	r3, [pc, #552]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80285d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80285d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80285d8:	687b      	ldr	r3, [r7, #4]
 80285da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80285dc:	4987      	ldr	r1, [pc, #540]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80285de:	4313      	orrs	r3, r2
 80285e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80285e2:	687b      	ldr	r3, [r7, #4]
 80285e4:	681b      	ldr	r3, [r3, #0]
 80285e6:	f003 0310 	and.w	r3, r3, #16
 80285ea:	2b00      	cmp	r3, #0
 80285ec:	d01a      	beq.n	8028624 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80285ee:	687b      	ldr	r3, [r7, #4]
 80285f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80285f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80285f8:	d10a      	bne.n	8028610 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80285fa:	687b      	ldr	r3, [r7, #4]
 80285fc:	3324      	adds	r3, #36	; 0x24
 80285fe:	2102      	movs	r1, #2
 8028600:	4618      	mov	r0, r3
 8028602:	f000 fccb 	bl	8028f9c <RCCEx_PLL3_Config>
 8028606:	4603      	mov	r3, r0
 8028608:	2b00      	cmp	r3, #0
 802860a:	d001      	beq.n	8028610 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 802860c:	2301      	movs	r3, #1
 802860e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8028610:	4b7a      	ldr	r3, [pc, #488]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8028618:	687b      	ldr	r3, [r7, #4]
 802861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802861e:	4977      	ldr	r1, [pc, #476]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028620:	4313      	orrs	r3, r2
 8028622:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8028624:	687b      	ldr	r3, [r7, #4]
 8028626:	681b      	ldr	r3, [r3, #0]
 8028628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802862c:	2b00      	cmp	r3, #0
 802862e:	d034      	beq.n	802869a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8028630:	687b      	ldr	r3, [r7, #4]
 8028632:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8028636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802863a:	d01d      	beq.n	8028678 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 802863c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8028640:	d817      	bhi.n	8028672 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8028642:	2b00      	cmp	r3, #0
 8028644:	d003      	beq.n	802864e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8028646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802864a:	d009      	beq.n	8028660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 802864c:	e011      	b.n	8028672 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 802864e:	687b      	ldr	r3, [r7, #4]
 8028650:	3304      	adds	r3, #4
 8028652:	2100      	movs	r1, #0
 8028654:	4618      	mov	r0, r3
 8028656:	f000 fbef 	bl	8028e38 <RCCEx_PLL2_Config>
 802865a:	4603      	mov	r3, r0
 802865c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 802865e:	e00c      	b.n	802867a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8028660:	687b      	ldr	r3, [r7, #4]
 8028662:	3324      	adds	r3, #36	; 0x24
 8028664:	2102      	movs	r1, #2
 8028666:	4618      	mov	r0, r3
 8028668:	f000 fc98 	bl	8028f9c <RCCEx_PLL3_Config>
 802866c:	4603      	mov	r3, r0
 802866e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8028670:	e003      	b.n	802867a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8028672:	2301      	movs	r3, #1
 8028674:	75fb      	strb	r3, [r7, #23]
      break;
 8028676:	e000      	b.n	802867a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8028678:	bf00      	nop
    }

    if(ret == HAL_OK)
 802867a:	7dfb      	ldrb	r3, [r7, #23]
 802867c:	2b00      	cmp	r3, #0
 802867e:	d10a      	bne.n	8028696 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8028680:	4b5e      	ldr	r3, [pc, #376]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8028688:	687b      	ldr	r3, [r7, #4]
 802868a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802868e:	495b      	ldr	r1, [pc, #364]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028690:	4313      	orrs	r3, r2
 8028692:	658b      	str	r3, [r1, #88]	; 0x58
 8028694:	e001      	b.n	802869a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028696:	7dfb      	ldrb	r3, [r7, #23]
 8028698:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 802869a:	687b      	ldr	r3, [r7, #4]
 802869c:	681b      	ldr	r3, [r3, #0]
 802869e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80286a2:	2b00      	cmp	r3, #0
 80286a4:	d033      	beq.n	802870e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80286a6:	687b      	ldr	r3, [r7, #4]
 80286a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80286ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80286b0:	d01c      	beq.n	80286ec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80286b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80286b6:	d816      	bhi.n	80286e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80286b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80286bc:	d003      	beq.n	80286c6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80286be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80286c2:	d007      	beq.n	80286d4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80286c4:	e00f      	b.n	80286e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80286c6:	4b4d      	ldr	r3, [pc, #308]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80286c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80286ca:	4a4c      	ldr	r2, [pc, #304]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80286cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80286d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80286d2:	e00c      	b.n	80286ee <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80286d4:	687b      	ldr	r3, [r7, #4]
 80286d6:	3324      	adds	r3, #36	; 0x24
 80286d8:	2101      	movs	r1, #1
 80286da:	4618      	mov	r0, r3
 80286dc:	f000 fc5e 	bl	8028f9c <RCCEx_PLL3_Config>
 80286e0:	4603      	mov	r3, r0
 80286e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80286e4:	e003      	b.n	80286ee <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80286e6:	2301      	movs	r3, #1
 80286e8:	75fb      	strb	r3, [r7, #23]
      break;
 80286ea:	e000      	b.n	80286ee <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80286ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80286ee:	7dfb      	ldrb	r3, [r7, #23]
 80286f0:	2b00      	cmp	r3, #0
 80286f2:	d10a      	bne.n	802870a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80286f4:	4b41      	ldr	r3, [pc, #260]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80286f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80286f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80286fc:	687b      	ldr	r3, [r7, #4]
 80286fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8028702:	493e      	ldr	r1, [pc, #248]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028704:	4313      	orrs	r3, r2
 8028706:	654b      	str	r3, [r1, #84]	; 0x54
 8028708:	e001      	b.n	802870e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802870a:	7dfb      	ldrb	r3, [r7, #23]
 802870c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 802870e:	687b      	ldr	r3, [r7, #4]
 8028710:	681b      	ldr	r3, [r3, #0]
 8028712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8028716:	2b00      	cmp	r3, #0
 8028718:	d029      	beq.n	802876e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 802871a:	687b      	ldr	r3, [r7, #4]
 802871c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802871e:	2b00      	cmp	r3, #0
 8028720:	d003      	beq.n	802872a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8028722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8028726:	d007      	beq.n	8028738 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8028728:	e00f      	b.n	802874a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802872a:	4b34      	ldr	r3, [pc, #208]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 802872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802872e:	4a33      	ldr	r2, [pc, #204]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8028734:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8028736:	e00b      	b.n	8028750 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8028738:	687b      	ldr	r3, [r7, #4]
 802873a:	3304      	adds	r3, #4
 802873c:	2102      	movs	r1, #2
 802873e:	4618      	mov	r0, r3
 8028740:	f000 fb7a 	bl	8028e38 <RCCEx_PLL2_Config>
 8028744:	4603      	mov	r3, r0
 8028746:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8028748:	e002      	b.n	8028750 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 802874a:	2301      	movs	r3, #1
 802874c:	75fb      	strb	r3, [r7, #23]
      break;
 802874e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8028750:	7dfb      	ldrb	r3, [r7, #23]
 8028752:	2b00      	cmp	r3, #0
 8028754:	d109      	bne.n	802876a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8028756:	4b29      	ldr	r3, [pc, #164]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802875a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802875e:	687b      	ldr	r3, [r7, #4]
 8028760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028762:	4926      	ldr	r1, [pc, #152]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028764:	4313      	orrs	r3, r2
 8028766:	64cb      	str	r3, [r1, #76]	; 0x4c
 8028768:	e001      	b.n	802876e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802876a:	7dfb      	ldrb	r3, [r7, #23]
 802876c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 802876e:	687b      	ldr	r3, [r7, #4]
 8028770:	681b      	ldr	r3, [r3, #0]
 8028772:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8028776:	2b00      	cmp	r3, #0
 8028778:	d00a      	beq.n	8028790 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 802877a:	687b      	ldr	r3, [r7, #4]
 802877c:	3324      	adds	r3, #36	; 0x24
 802877e:	2102      	movs	r1, #2
 8028780:	4618      	mov	r0, r3
 8028782:	f000 fc0b 	bl	8028f9c <RCCEx_PLL3_Config>
 8028786:	4603      	mov	r3, r0
 8028788:	2b00      	cmp	r3, #0
 802878a:	d001      	beq.n	8028790 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 802878c:	2301      	movs	r3, #1
 802878e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8028790:	687b      	ldr	r3, [r7, #4]
 8028792:	681b      	ldr	r3, [r3, #0]
 8028794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028798:	2b00      	cmp	r3, #0
 802879a:	d033      	beq.n	8028804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 802879c:	687b      	ldr	r3, [r7, #4]
 802879e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80287a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80287a4:	d017      	beq.n	80287d6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80287a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80287aa:	d811      	bhi.n	80287d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80287ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80287b0:	d013      	beq.n	80287da <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80287b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80287b6:	d80b      	bhi.n	80287d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80287b8:	2b00      	cmp	r3, #0
 80287ba:	d010      	beq.n	80287de <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80287bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80287c0:	d106      	bne.n	80287d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80287c2:	4b0e      	ldr	r3, [pc, #56]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80287c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80287c6:	4a0d      	ldr	r2, [pc, #52]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80287c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80287cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80287ce:	e007      	b.n	80287e0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80287d0:	2301      	movs	r3, #1
 80287d2:	75fb      	strb	r3, [r7, #23]
      break;
 80287d4:	e004      	b.n	80287e0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80287d6:	bf00      	nop
 80287d8:	e002      	b.n	80287e0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80287da:	bf00      	nop
 80287dc:	e000      	b.n	80287e0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80287de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80287e0:	7dfb      	ldrb	r3, [r7, #23]
 80287e2:	2b00      	cmp	r3, #0
 80287e4:	d10c      	bne.n	8028800 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80287e6:	4b05      	ldr	r3, [pc, #20]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80287e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80287ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80287ee:	687b      	ldr	r3, [r7, #4]
 80287f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80287f2:	4902      	ldr	r1, [pc, #8]	; (80287fc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80287f4:	4313      	orrs	r3, r2
 80287f6:	654b      	str	r3, [r1, #84]	; 0x54
 80287f8:	e004      	b.n	8028804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80287fa:	bf00      	nop
 80287fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028800:	7dfb      	ldrb	r3, [r7, #23]
 8028802:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8028804:	687b      	ldr	r3, [r7, #4]
 8028806:	681b      	ldr	r3, [r3, #0]
 8028808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802880c:	2b00      	cmp	r3, #0
 802880e:	d008      	beq.n	8028822 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8028810:	4b29      	ldr	r3, [pc, #164]	; (80288b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028814:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8028818:	687b      	ldr	r3, [r7, #4]
 802881a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802881c:	4926      	ldr	r1, [pc, #152]	; (80288b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 802881e:	4313      	orrs	r3, r2
 8028820:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8028822:	687b      	ldr	r3, [r7, #4]
 8028824:	681b      	ldr	r3, [r3, #0]
 8028826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802882a:	2b00      	cmp	r3, #0
 802882c:	d008      	beq.n	8028840 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 802882e:	4b22      	ldr	r3, [pc, #136]	; (80288b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028832:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8028836:	687b      	ldr	r3, [r7, #4]
 8028838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802883a:	491f      	ldr	r1, [pc, #124]	; (80288b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 802883c:	4313      	orrs	r3, r2
 802883e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8028840:	687b      	ldr	r3, [r7, #4]
 8028842:	681b      	ldr	r3, [r3, #0]
 8028844:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8028848:	2b00      	cmp	r3, #0
 802884a:	d00d      	beq.n	8028868 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 802884c:	4b1a      	ldr	r3, [pc, #104]	; (80288b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 802884e:	691b      	ldr	r3, [r3, #16]
 8028850:	4a19      	ldr	r2, [pc, #100]	; (80288b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028852:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8028856:	6113      	str	r3, [r2, #16]
 8028858:	4b17      	ldr	r3, [pc, #92]	; (80288b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 802885a:	691a      	ldr	r2, [r3, #16]
 802885c:	687b      	ldr	r3, [r7, #4]
 802885e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8028862:	4915      	ldr	r1, [pc, #84]	; (80288b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028864:	4313      	orrs	r3, r2
 8028866:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8028868:	687b      	ldr	r3, [r7, #4]
 802886a:	681b      	ldr	r3, [r3, #0]
 802886c:	2b00      	cmp	r3, #0
 802886e:	da08      	bge.n	8028882 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8028870:	4b11      	ldr	r3, [pc, #68]	; (80288b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028874:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8028878:	687b      	ldr	r3, [r7, #4]
 802887a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802887c:	490e      	ldr	r1, [pc, #56]	; (80288b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 802887e:	4313      	orrs	r3, r2
 8028880:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8028882:	687b      	ldr	r3, [r7, #4]
 8028884:	681b      	ldr	r3, [r3, #0]
 8028886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802888a:	2b00      	cmp	r3, #0
 802888c:	d009      	beq.n	80288a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 802888e:	4b0a      	ldr	r3, [pc, #40]	; (80288b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028892:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8028896:	687b      	ldr	r3, [r7, #4]
 8028898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802889c:	4906      	ldr	r1, [pc, #24]	; (80288b8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 802889e:	4313      	orrs	r3, r2
 80288a0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80288a2:	7dbb      	ldrb	r3, [r7, #22]
 80288a4:	2b00      	cmp	r3, #0
 80288a6:	d101      	bne.n	80288ac <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80288a8:	2300      	movs	r3, #0
 80288aa:	e000      	b.n	80288ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80288ac:	2301      	movs	r3, #1
}
 80288ae:	4618      	mov	r0, r3
 80288b0:	3718      	adds	r7, #24
 80288b2:	46bd      	mov	sp, r7
 80288b4:	bd80      	pop	{r7, pc}
 80288b6:	bf00      	nop
 80288b8:	58024400 	.word	0x58024400

080288bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80288bc:	b580      	push	{r7, lr}
 80288be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80288c0:	f7ff f864 	bl	802798c <HAL_RCC_GetHCLKFreq>
 80288c4:	4602      	mov	r2, r0
 80288c6:	4b06      	ldr	r3, [pc, #24]	; (80288e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80288c8:	6a1b      	ldr	r3, [r3, #32]
 80288ca:	091b      	lsrs	r3, r3, #4
 80288cc:	f003 0307 	and.w	r3, r3, #7
 80288d0:	4904      	ldr	r1, [pc, #16]	; (80288e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80288d2:	5ccb      	ldrb	r3, [r1, r3]
 80288d4:	f003 031f 	and.w	r3, r3, #31
 80288d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80288dc:	4618      	mov	r0, r3
 80288de:	bd80      	pop	{r7, pc}
 80288e0:	58024400 	.word	0x58024400
 80288e4:	0803b950 	.word	0x0803b950

080288e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80288e8:	b480      	push	{r7}
 80288ea:	b089      	sub	sp, #36	; 0x24
 80288ec:	af00      	add	r7, sp, #0
 80288ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80288f0:	4ba1      	ldr	r3, [pc, #644]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80288f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80288f4:	f003 0303 	and.w	r3, r3, #3
 80288f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80288fa:	4b9f      	ldr	r3, [pc, #636]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80288fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80288fe:	0b1b      	lsrs	r3, r3, #12
 8028900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8028904:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8028906:	4b9c      	ldr	r3, [pc, #624]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802890a:	091b      	lsrs	r3, r3, #4
 802890c:	f003 0301 	and.w	r3, r3, #1
 8028910:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8028912:	4b99      	ldr	r3, [pc, #612]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028916:	08db      	lsrs	r3, r3, #3
 8028918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802891c:	693a      	ldr	r2, [r7, #16]
 802891e:	fb02 f303 	mul.w	r3, r2, r3
 8028922:	ee07 3a90 	vmov	s15, r3
 8028926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802892a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 802892e:	697b      	ldr	r3, [r7, #20]
 8028930:	2b00      	cmp	r3, #0
 8028932:	f000 8111 	beq.w	8028b58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8028936:	69bb      	ldr	r3, [r7, #24]
 8028938:	2b02      	cmp	r3, #2
 802893a:	f000 8083 	beq.w	8028a44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 802893e:	69bb      	ldr	r3, [r7, #24]
 8028940:	2b02      	cmp	r3, #2
 8028942:	f200 80a1 	bhi.w	8028a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8028946:	69bb      	ldr	r3, [r7, #24]
 8028948:	2b00      	cmp	r3, #0
 802894a:	d003      	beq.n	8028954 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 802894c:	69bb      	ldr	r3, [r7, #24]
 802894e:	2b01      	cmp	r3, #1
 8028950:	d056      	beq.n	8028a00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8028952:	e099      	b.n	8028a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8028954:	4b88      	ldr	r3, [pc, #544]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028956:	681b      	ldr	r3, [r3, #0]
 8028958:	f003 0320 	and.w	r3, r3, #32
 802895c:	2b00      	cmp	r3, #0
 802895e:	d02d      	beq.n	80289bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8028960:	4b85      	ldr	r3, [pc, #532]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028962:	681b      	ldr	r3, [r3, #0]
 8028964:	08db      	lsrs	r3, r3, #3
 8028966:	f003 0303 	and.w	r3, r3, #3
 802896a:	4a84      	ldr	r2, [pc, #528]	; (8028b7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 802896c:	fa22 f303 	lsr.w	r3, r2, r3
 8028970:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8028972:	68bb      	ldr	r3, [r7, #8]
 8028974:	ee07 3a90 	vmov	s15, r3
 8028978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802897c:	697b      	ldr	r3, [r7, #20]
 802897e:	ee07 3a90 	vmov	s15, r3
 8028982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802898a:	4b7b      	ldr	r3, [pc, #492]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802898e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028992:	ee07 3a90 	vmov	s15, r3
 8028996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802899a:	ed97 6a03 	vldr	s12, [r7, #12]
 802899e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8028b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80289a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80289a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80289aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80289ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80289b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80289b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80289ba:	e087      	b.n	8028acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80289bc:	697b      	ldr	r3, [r7, #20]
 80289be:	ee07 3a90 	vmov	s15, r3
 80289c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80289c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8028b84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80289ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80289ce:	4b6a      	ldr	r3, [pc, #424]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80289d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80289d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80289d6:	ee07 3a90 	vmov	s15, r3
 80289da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80289de:	ed97 6a03 	vldr	s12, [r7, #12]
 80289e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8028b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80289e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80289ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80289ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80289f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80289f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80289fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80289fe:	e065      	b.n	8028acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8028a00:	697b      	ldr	r3, [r7, #20]
 8028a02:	ee07 3a90 	vmov	s15, r3
 8028a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028a0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8028b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8028a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028a12:	4b59      	ldr	r3, [pc, #356]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028a1a:	ee07 3a90 	vmov	s15, r3
 8028a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8028a26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8028b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8028a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028a42:	e043      	b.n	8028acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8028a44:	697b      	ldr	r3, [r7, #20]
 8028a46:	ee07 3a90 	vmov	s15, r3
 8028a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028a4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8028b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8028a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028a56:	4b48      	ldr	r3, [pc, #288]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028a5e:	ee07 3a90 	vmov	s15, r3
 8028a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8028a6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8028b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8028a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028a82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028a86:	e021      	b.n	8028acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8028a88:	697b      	ldr	r3, [r7, #20]
 8028a8a:	ee07 3a90 	vmov	s15, r3
 8028a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028a92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8028b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8028a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028a9a:	4b37      	ldr	r3, [pc, #220]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028aa2:	ee07 3a90 	vmov	s15, r3
 8028aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8028aae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8028b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8028ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028aca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8028acc:	4b2a      	ldr	r3, [pc, #168]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028ad0:	0a5b      	lsrs	r3, r3, #9
 8028ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028ad6:	ee07 3a90 	vmov	s15, r3
 8028ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8028aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028af2:	ee17 2a90 	vmov	r2, s15
 8028af6:	687b      	ldr	r3, [r7, #4]
 8028af8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8028afa:	4b1f      	ldr	r3, [pc, #124]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028afe:	0c1b      	lsrs	r3, r3, #16
 8028b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028b04:	ee07 3a90 	vmov	s15, r3
 8028b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8028b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028b20:	ee17 2a90 	vmov	r2, s15
 8028b24:	687b      	ldr	r3, [r7, #4]
 8028b26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8028b28:	4b13      	ldr	r3, [pc, #76]	; (8028b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028b2c:	0e1b      	lsrs	r3, r3, #24
 8028b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028b32:	ee07 3a90 	vmov	s15, r3
 8028b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8028b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028b4e:	ee17 2a90 	vmov	r2, s15
 8028b52:	687b      	ldr	r3, [r7, #4]
 8028b54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8028b56:	e008      	b.n	8028b6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8028b58:	687b      	ldr	r3, [r7, #4]
 8028b5a:	2200      	movs	r2, #0
 8028b5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8028b5e:	687b      	ldr	r3, [r7, #4]
 8028b60:	2200      	movs	r2, #0
 8028b62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8028b64:	687b      	ldr	r3, [r7, #4]
 8028b66:	2200      	movs	r2, #0
 8028b68:	609a      	str	r2, [r3, #8]
}
 8028b6a:	bf00      	nop
 8028b6c:	3724      	adds	r7, #36	; 0x24
 8028b6e:	46bd      	mov	sp, r7
 8028b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b74:	4770      	bx	lr
 8028b76:	bf00      	nop
 8028b78:	58024400 	.word	0x58024400
 8028b7c:	03d09000 	.word	0x03d09000
 8028b80:	46000000 	.word	0x46000000
 8028b84:	4c742400 	.word	0x4c742400
 8028b88:	4a742400 	.word	0x4a742400
 8028b8c:	4af42400 	.word	0x4af42400

08028b90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8028b90:	b480      	push	{r7}
 8028b92:	b089      	sub	sp, #36	; 0x24
 8028b94:	af00      	add	r7, sp, #0
 8028b96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8028b98:	4ba1      	ldr	r3, [pc, #644]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028b9c:	f003 0303 	and.w	r3, r3, #3
 8028ba0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8028ba2:	4b9f      	ldr	r3, [pc, #636]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028ba6:	0d1b      	lsrs	r3, r3, #20
 8028ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8028bac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8028bae:	4b9c      	ldr	r3, [pc, #624]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028bb2:	0a1b      	lsrs	r3, r3, #8
 8028bb4:	f003 0301 	and.w	r3, r3, #1
 8028bb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8028bba:	4b99      	ldr	r3, [pc, #612]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028bbe:	08db      	lsrs	r3, r3, #3
 8028bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8028bc4:	693a      	ldr	r2, [r7, #16]
 8028bc6:	fb02 f303 	mul.w	r3, r2, r3
 8028bca:	ee07 3a90 	vmov	s15, r3
 8028bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028bd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8028bd6:	697b      	ldr	r3, [r7, #20]
 8028bd8:	2b00      	cmp	r3, #0
 8028bda:	f000 8111 	beq.w	8028e00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8028bde:	69bb      	ldr	r3, [r7, #24]
 8028be0:	2b02      	cmp	r3, #2
 8028be2:	f000 8083 	beq.w	8028cec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8028be6:	69bb      	ldr	r3, [r7, #24]
 8028be8:	2b02      	cmp	r3, #2
 8028bea:	f200 80a1 	bhi.w	8028d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8028bee:	69bb      	ldr	r3, [r7, #24]
 8028bf0:	2b00      	cmp	r3, #0
 8028bf2:	d003      	beq.n	8028bfc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8028bf4:	69bb      	ldr	r3, [r7, #24]
 8028bf6:	2b01      	cmp	r3, #1
 8028bf8:	d056      	beq.n	8028ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8028bfa:	e099      	b.n	8028d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8028bfc:	4b88      	ldr	r3, [pc, #544]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028bfe:	681b      	ldr	r3, [r3, #0]
 8028c00:	f003 0320 	and.w	r3, r3, #32
 8028c04:	2b00      	cmp	r3, #0
 8028c06:	d02d      	beq.n	8028c64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8028c08:	4b85      	ldr	r3, [pc, #532]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028c0a:	681b      	ldr	r3, [r3, #0]
 8028c0c:	08db      	lsrs	r3, r3, #3
 8028c0e:	f003 0303 	and.w	r3, r3, #3
 8028c12:	4a84      	ldr	r2, [pc, #528]	; (8028e24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8028c14:	fa22 f303 	lsr.w	r3, r2, r3
 8028c18:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8028c1a:	68bb      	ldr	r3, [r7, #8]
 8028c1c:	ee07 3a90 	vmov	s15, r3
 8028c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028c24:	697b      	ldr	r3, [r7, #20]
 8028c26:	ee07 3a90 	vmov	s15, r3
 8028c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028c32:	4b7b      	ldr	r3, [pc, #492]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028c3a:	ee07 3a90 	vmov	s15, r3
 8028c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8028c46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8028e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8028c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028c5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8028c62:	e087      	b.n	8028d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8028c64:	697b      	ldr	r3, [r7, #20]
 8028c66:	ee07 3a90 	vmov	s15, r3
 8028c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028c6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8028e2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8028c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028c76:	4b6a      	ldr	r3, [pc, #424]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028c7e:	ee07 3a90 	vmov	s15, r3
 8028c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8028c8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8028e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8028c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028ca2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028ca6:	e065      	b.n	8028d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8028ca8:	697b      	ldr	r3, [r7, #20]
 8028caa:	ee07 3a90 	vmov	s15, r3
 8028cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028cb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8028e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8028cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028cba:	4b59      	ldr	r3, [pc, #356]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028cc2:	ee07 3a90 	vmov	s15, r3
 8028cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8028cce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8028e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8028cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028ce6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028cea:	e043      	b.n	8028d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8028cec:	697b      	ldr	r3, [r7, #20]
 8028cee:	ee07 3a90 	vmov	s15, r3
 8028cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028cf6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8028e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8028cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028cfe:	4b48      	ldr	r3, [pc, #288]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028d06:	ee07 3a90 	vmov	s15, r3
 8028d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8028d12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8028e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8028d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028d2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028d2e:	e021      	b.n	8028d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8028d30:	697b      	ldr	r3, [r7, #20]
 8028d32:	ee07 3a90 	vmov	s15, r3
 8028d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028d3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8028e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8028d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028d42:	4b37      	ldr	r3, [pc, #220]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028d4a:	ee07 3a90 	vmov	s15, r3
 8028d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8028d56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8028e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8028d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028d6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028d72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8028d74:	4b2a      	ldr	r3, [pc, #168]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028d78:	0a5b      	lsrs	r3, r3, #9
 8028d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028d7e:	ee07 3a90 	vmov	s15, r3
 8028d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8028d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028d9a:	ee17 2a90 	vmov	r2, s15
 8028d9e:	687b      	ldr	r3, [r7, #4]
 8028da0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8028da2:	4b1f      	ldr	r3, [pc, #124]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028da6:	0c1b      	lsrs	r3, r3, #16
 8028da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028dac:	ee07 3a90 	vmov	s15, r3
 8028db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028db4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028db8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028dbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8028dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028dc8:	ee17 2a90 	vmov	r2, s15
 8028dcc:	687b      	ldr	r3, [r7, #4]
 8028dce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8028dd0:	4b13      	ldr	r3, [pc, #76]	; (8028e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028dd4:	0e1b      	lsrs	r3, r3, #24
 8028dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028dda:	ee07 3a90 	vmov	s15, r3
 8028dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8028dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028df6:	ee17 2a90 	vmov	r2, s15
 8028dfa:	687b      	ldr	r3, [r7, #4]
 8028dfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8028dfe:	e008      	b.n	8028e12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8028e00:	687b      	ldr	r3, [r7, #4]
 8028e02:	2200      	movs	r2, #0
 8028e04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8028e06:	687b      	ldr	r3, [r7, #4]
 8028e08:	2200      	movs	r2, #0
 8028e0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8028e0c:	687b      	ldr	r3, [r7, #4]
 8028e0e:	2200      	movs	r2, #0
 8028e10:	609a      	str	r2, [r3, #8]
}
 8028e12:	bf00      	nop
 8028e14:	3724      	adds	r7, #36	; 0x24
 8028e16:	46bd      	mov	sp, r7
 8028e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028e1c:	4770      	bx	lr
 8028e1e:	bf00      	nop
 8028e20:	58024400 	.word	0x58024400
 8028e24:	03d09000 	.word	0x03d09000
 8028e28:	46000000 	.word	0x46000000
 8028e2c:	4c742400 	.word	0x4c742400
 8028e30:	4a742400 	.word	0x4a742400
 8028e34:	4af42400 	.word	0x4af42400

08028e38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8028e38:	b580      	push	{r7, lr}
 8028e3a:	b084      	sub	sp, #16
 8028e3c:	af00      	add	r7, sp, #0
 8028e3e:	6078      	str	r0, [r7, #4]
 8028e40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8028e42:	2300      	movs	r3, #0
 8028e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8028e46:	4b53      	ldr	r3, [pc, #332]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028e4a:	f003 0303 	and.w	r3, r3, #3
 8028e4e:	2b03      	cmp	r3, #3
 8028e50:	d101      	bne.n	8028e56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8028e52:	2301      	movs	r3, #1
 8028e54:	e099      	b.n	8028f8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8028e56:	4b4f      	ldr	r3, [pc, #316]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028e58:	681b      	ldr	r3, [r3, #0]
 8028e5a:	4a4e      	ldr	r2, [pc, #312]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028e5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8028e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028e62:	f7f9 f93b 	bl	80220dc <HAL_GetTick>
 8028e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8028e68:	e008      	b.n	8028e7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8028e6a:	f7f9 f937 	bl	80220dc <HAL_GetTick>
 8028e6e:	4602      	mov	r2, r0
 8028e70:	68bb      	ldr	r3, [r7, #8]
 8028e72:	1ad3      	subs	r3, r2, r3
 8028e74:	2b02      	cmp	r3, #2
 8028e76:	d901      	bls.n	8028e7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8028e78:	2303      	movs	r3, #3
 8028e7a:	e086      	b.n	8028f8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8028e7c:	4b45      	ldr	r3, [pc, #276]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028e7e:	681b      	ldr	r3, [r3, #0]
 8028e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8028e84:	2b00      	cmp	r3, #0
 8028e86:	d1f0      	bne.n	8028e6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8028e88:	4b42      	ldr	r3, [pc, #264]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028e8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8028e90:	687b      	ldr	r3, [r7, #4]
 8028e92:	681b      	ldr	r3, [r3, #0]
 8028e94:	031b      	lsls	r3, r3, #12
 8028e96:	493f      	ldr	r1, [pc, #252]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028e98:	4313      	orrs	r3, r2
 8028e9a:	628b      	str	r3, [r1, #40]	; 0x28
 8028e9c:	687b      	ldr	r3, [r7, #4]
 8028e9e:	685b      	ldr	r3, [r3, #4]
 8028ea0:	3b01      	subs	r3, #1
 8028ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8028ea6:	687b      	ldr	r3, [r7, #4]
 8028ea8:	689b      	ldr	r3, [r3, #8]
 8028eaa:	3b01      	subs	r3, #1
 8028eac:	025b      	lsls	r3, r3, #9
 8028eae:	b29b      	uxth	r3, r3
 8028eb0:	431a      	orrs	r2, r3
 8028eb2:	687b      	ldr	r3, [r7, #4]
 8028eb4:	68db      	ldr	r3, [r3, #12]
 8028eb6:	3b01      	subs	r3, #1
 8028eb8:	041b      	lsls	r3, r3, #16
 8028eba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8028ebe:	431a      	orrs	r2, r3
 8028ec0:	687b      	ldr	r3, [r7, #4]
 8028ec2:	691b      	ldr	r3, [r3, #16]
 8028ec4:	3b01      	subs	r3, #1
 8028ec6:	061b      	lsls	r3, r3, #24
 8028ec8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8028ecc:	4931      	ldr	r1, [pc, #196]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028ece:	4313      	orrs	r3, r2
 8028ed0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8028ed2:	4b30      	ldr	r3, [pc, #192]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ed6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8028eda:	687b      	ldr	r3, [r7, #4]
 8028edc:	695b      	ldr	r3, [r3, #20]
 8028ede:	492d      	ldr	r1, [pc, #180]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028ee0:	4313      	orrs	r3, r2
 8028ee2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8028ee4:	4b2b      	ldr	r3, [pc, #172]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ee8:	f023 0220 	bic.w	r2, r3, #32
 8028eec:	687b      	ldr	r3, [r7, #4]
 8028eee:	699b      	ldr	r3, [r3, #24]
 8028ef0:	4928      	ldr	r1, [pc, #160]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028ef2:	4313      	orrs	r3, r2
 8028ef4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8028ef6:	4b27      	ldr	r3, [pc, #156]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028efa:	4a26      	ldr	r2, [pc, #152]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028efc:	f023 0310 	bic.w	r3, r3, #16
 8028f00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8028f02:	4b24      	ldr	r3, [pc, #144]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028f06:	4b24      	ldr	r3, [pc, #144]	; (8028f98 <RCCEx_PLL2_Config+0x160>)
 8028f08:	4013      	ands	r3, r2
 8028f0a:	687a      	ldr	r2, [r7, #4]
 8028f0c:	69d2      	ldr	r2, [r2, #28]
 8028f0e:	00d2      	lsls	r2, r2, #3
 8028f10:	4920      	ldr	r1, [pc, #128]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f12:	4313      	orrs	r3, r2
 8028f14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8028f16:	4b1f      	ldr	r3, [pc, #124]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028f1a:	4a1e      	ldr	r2, [pc, #120]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f1c:	f043 0310 	orr.w	r3, r3, #16
 8028f20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8028f22:	683b      	ldr	r3, [r7, #0]
 8028f24:	2b00      	cmp	r3, #0
 8028f26:	d106      	bne.n	8028f36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8028f28:	4b1a      	ldr	r3, [pc, #104]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028f2c:	4a19      	ldr	r2, [pc, #100]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8028f32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8028f34:	e00f      	b.n	8028f56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8028f36:	683b      	ldr	r3, [r7, #0]
 8028f38:	2b01      	cmp	r3, #1
 8028f3a:	d106      	bne.n	8028f4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8028f3c:	4b15      	ldr	r3, [pc, #84]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028f40:	4a14      	ldr	r2, [pc, #80]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028f46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8028f48:	e005      	b.n	8028f56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8028f4a:	4b12      	ldr	r3, [pc, #72]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028f4e:	4a11      	ldr	r2, [pc, #68]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8028f54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8028f56:	4b0f      	ldr	r3, [pc, #60]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f58:	681b      	ldr	r3, [r3, #0]
 8028f5a:	4a0e      	ldr	r2, [pc, #56]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8028f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028f62:	f7f9 f8bb 	bl	80220dc <HAL_GetTick>
 8028f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8028f68:	e008      	b.n	8028f7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8028f6a:	f7f9 f8b7 	bl	80220dc <HAL_GetTick>
 8028f6e:	4602      	mov	r2, r0
 8028f70:	68bb      	ldr	r3, [r7, #8]
 8028f72:	1ad3      	subs	r3, r2, r3
 8028f74:	2b02      	cmp	r3, #2
 8028f76:	d901      	bls.n	8028f7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8028f78:	2303      	movs	r3, #3
 8028f7a:	e006      	b.n	8028f8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8028f7c:	4b05      	ldr	r3, [pc, #20]	; (8028f94 <RCCEx_PLL2_Config+0x15c>)
 8028f7e:	681b      	ldr	r3, [r3, #0]
 8028f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8028f84:	2b00      	cmp	r3, #0
 8028f86:	d0f0      	beq.n	8028f6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8028f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8028f8a:	4618      	mov	r0, r3
 8028f8c:	3710      	adds	r7, #16
 8028f8e:	46bd      	mov	sp, r7
 8028f90:	bd80      	pop	{r7, pc}
 8028f92:	bf00      	nop
 8028f94:	58024400 	.word	0x58024400
 8028f98:	ffff0007 	.word	0xffff0007

08028f9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8028f9c:	b580      	push	{r7, lr}
 8028f9e:	b084      	sub	sp, #16
 8028fa0:	af00      	add	r7, sp, #0
 8028fa2:	6078      	str	r0, [r7, #4]
 8028fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8028fa6:	2300      	movs	r3, #0
 8028fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8028faa:	4b53      	ldr	r3, [pc, #332]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8028fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028fae:	f003 0303 	and.w	r3, r3, #3
 8028fb2:	2b03      	cmp	r3, #3
 8028fb4:	d101      	bne.n	8028fba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8028fb6:	2301      	movs	r3, #1
 8028fb8:	e099      	b.n	80290ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8028fba:	4b4f      	ldr	r3, [pc, #316]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8028fbc:	681b      	ldr	r3, [r3, #0]
 8028fbe:	4a4e      	ldr	r2, [pc, #312]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8028fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028fc6:	f7f9 f889 	bl	80220dc <HAL_GetTick>
 8028fca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8028fcc:	e008      	b.n	8028fe0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8028fce:	f7f9 f885 	bl	80220dc <HAL_GetTick>
 8028fd2:	4602      	mov	r2, r0
 8028fd4:	68bb      	ldr	r3, [r7, #8]
 8028fd6:	1ad3      	subs	r3, r2, r3
 8028fd8:	2b02      	cmp	r3, #2
 8028fda:	d901      	bls.n	8028fe0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8028fdc:	2303      	movs	r3, #3
 8028fde:	e086      	b.n	80290ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8028fe0:	4b45      	ldr	r3, [pc, #276]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8028fe2:	681b      	ldr	r3, [r3, #0]
 8028fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8028fe8:	2b00      	cmp	r3, #0
 8028fea:	d1f0      	bne.n	8028fce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8028fec:	4b42      	ldr	r3, [pc, #264]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8028fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028ff0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8028ff4:	687b      	ldr	r3, [r7, #4]
 8028ff6:	681b      	ldr	r3, [r3, #0]
 8028ff8:	051b      	lsls	r3, r3, #20
 8028ffa:	493f      	ldr	r1, [pc, #252]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8028ffc:	4313      	orrs	r3, r2
 8028ffe:	628b      	str	r3, [r1, #40]	; 0x28
 8029000:	687b      	ldr	r3, [r7, #4]
 8029002:	685b      	ldr	r3, [r3, #4]
 8029004:	3b01      	subs	r3, #1
 8029006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802900a:	687b      	ldr	r3, [r7, #4]
 802900c:	689b      	ldr	r3, [r3, #8]
 802900e:	3b01      	subs	r3, #1
 8029010:	025b      	lsls	r3, r3, #9
 8029012:	b29b      	uxth	r3, r3
 8029014:	431a      	orrs	r2, r3
 8029016:	687b      	ldr	r3, [r7, #4]
 8029018:	68db      	ldr	r3, [r3, #12]
 802901a:	3b01      	subs	r3, #1
 802901c:	041b      	lsls	r3, r3, #16
 802901e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8029022:	431a      	orrs	r2, r3
 8029024:	687b      	ldr	r3, [r7, #4]
 8029026:	691b      	ldr	r3, [r3, #16]
 8029028:	3b01      	subs	r3, #1
 802902a:	061b      	lsls	r3, r3, #24
 802902c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8029030:	4931      	ldr	r1, [pc, #196]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8029032:	4313      	orrs	r3, r2
 8029034:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8029036:	4b30      	ldr	r3, [pc, #192]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8029038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802903a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 802903e:	687b      	ldr	r3, [r7, #4]
 8029040:	695b      	ldr	r3, [r3, #20]
 8029042:	492d      	ldr	r1, [pc, #180]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8029044:	4313      	orrs	r3, r2
 8029046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8029048:	4b2b      	ldr	r3, [pc, #172]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 802904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802904c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8029050:	687b      	ldr	r3, [r7, #4]
 8029052:	699b      	ldr	r3, [r3, #24]
 8029054:	4928      	ldr	r1, [pc, #160]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8029056:	4313      	orrs	r3, r2
 8029058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 802905a:	4b27      	ldr	r3, [pc, #156]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 802905c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802905e:	4a26      	ldr	r2, [pc, #152]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8029060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8029066:	4b24      	ldr	r3, [pc, #144]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8029068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802906a:	4b24      	ldr	r3, [pc, #144]	; (80290fc <RCCEx_PLL3_Config+0x160>)
 802906c:	4013      	ands	r3, r2
 802906e:	687a      	ldr	r2, [r7, #4]
 8029070:	69d2      	ldr	r2, [r2, #28]
 8029072:	00d2      	lsls	r2, r2, #3
 8029074:	4920      	ldr	r1, [pc, #128]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8029076:	4313      	orrs	r3, r2
 8029078:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 802907a:	4b1f      	ldr	r3, [pc, #124]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 802907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802907e:	4a1e      	ldr	r2, [pc, #120]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8029080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8029084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8029086:	683b      	ldr	r3, [r7, #0]
 8029088:	2b00      	cmp	r3, #0
 802908a:	d106      	bne.n	802909a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 802908c:	4b1a      	ldr	r3, [pc, #104]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 802908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029090:	4a19      	ldr	r2, [pc, #100]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 8029092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8029096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8029098:	e00f      	b.n	80290ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 802909a:	683b      	ldr	r3, [r7, #0]
 802909c:	2b01      	cmp	r3, #1
 802909e:	d106      	bne.n	80290ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80290a0:	4b15      	ldr	r3, [pc, #84]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 80290a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80290a4:	4a14      	ldr	r2, [pc, #80]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 80290a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80290aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80290ac:	e005      	b.n	80290ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80290ae:	4b12      	ldr	r3, [pc, #72]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 80290b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80290b2:	4a11      	ldr	r2, [pc, #68]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 80290b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80290b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80290ba:	4b0f      	ldr	r3, [pc, #60]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 80290bc:	681b      	ldr	r3, [r3, #0]
 80290be:	4a0e      	ldr	r2, [pc, #56]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 80290c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80290c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80290c6:	f7f9 f809 	bl	80220dc <HAL_GetTick>
 80290ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80290cc:	e008      	b.n	80290e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80290ce:	f7f9 f805 	bl	80220dc <HAL_GetTick>
 80290d2:	4602      	mov	r2, r0
 80290d4:	68bb      	ldr	r3, [r7, #8]
 80290d6:	1ad3      	subs	r3, r2, r3
 80290d8:	2b02      	cmp	r3, #2
 80290da:	d901      	bls.n	80290e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80290dc:	2303      	movs	r3, #3
 80290de:	e006      	b.n	80290ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80290e0:	4b05      	ldr	r3, [pc, #20]	; (80290f8 <RCCEx_PLL3_Config+0x15c>)
 80290e2:	681b      	ldr	r3, [r3, #0]
 80290e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80290e8:	2b00      	cmp	r3, #0
 80290ea:	d0f0      	beq.n	80290ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80290ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80290ee:	4618      	mov	r0, r3
 80290f0:	3710      	adds	r7, #16
 80290f2:	46bd      	mov	sp, r7
 80290f4:	bd80      	pop	{r7, pc}
 80290f6:	bf00      	nop
 80290f8:	58024400 	.word	0x58024400
 80290fc:	ffff0007 	.word	0xffff0007

08029100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8029100:	b580      	push	{r7, lr}
 8029102:	b082      	sub	sp, #8
 8029104:	af00      	add	r7, sp, #0
 8029106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029108:	687b      	ldr	r3, [r7, #4]
 802910a:	2b00      	cmp	r3, #0
 802910c:	d101      	bne.n	8029112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802910e:	2301      	movs	r3, #1
 8029110:	e049      	b.n	80291a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029112:	687b      	ldr	r3, [r7, #4]
 8029114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029118:	b2db      	uxtb	r3, r3
 802911a:	2b00      	cmp	r3, #0
 802911c:	d106      	bne.n	802912c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802911e:	687b      	ldr	r3, [r7, #4]
 8029120:	2200      	movs	r2, #0
 8029122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8029126:	6878      	ldr	r0, [r7, #4]
 8029128:	f000 f841 	bl	80291ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802912c:	687b      	ldr	r3, [r7, #4]
 802912e:	2202      	movs	r2, #2
 8029130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029134:	687b      	ldr	r3, [r7, #4]
 8029136:	681a      	ldr	r2, [r3, #0]
 8029138:	687b      	ldr	r3, [r7, #4]
 802913a:	3304      	adds	r3, #4
 802913c:	4619      	mov	r1, r3
 802913e:	4610      	mov	r0, r2
 8029140:	f000 fa0e 	bl	8029560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8029144:	687b      	ldr	r3, [r7, #4]
 8029146:	2201      	movs	r2, #1
 8029148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802914c:	687b      	ldr	r3, [r7, #4]
 802914e:	2201      	movs	r2, #1
 8029150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8029154:	687b      	ldr	r3, [r7, #4]
 8029156:	2201      	movs	r2, #1
 8029158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 802915c:	687b      	ldr	r3, [r7, #4]
 802915e:	2201      	movs	r2, #1
 8029160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8029164:	687b      	ldr	r3, [r7, #4]
 8029166:	2201      	movs	r2, #1
 8029168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802916c:	687b      	ldr	r3, [r7, #4]
 802916e:	2201      	movs	r2, #1
 8029170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8029174:	687b      	ldr	r3, [r7, #4]
 8029176:	2201      	movs	r2, #1
 8029178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802917c:	687b      	ldr	r3, [r7, #4]
 802917e:	2201      	movs	r2, #1
 8029180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8029184:	687b      	ldr	r3, [r7, #4]
 8029186:	2201      	movs	r2, #1
 8029188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802918c:	687b      	ldr	r3, [r7, #4]
 802918e:	2201      	movs	r2, #1
 8029190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8029194:	687b      	ldr	r3, [r7, #4]
 8029196:	2201      	movs	r2, #1
 8029198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802919c:	687b      	ldr	r3, [r7, #4]
 802919e:	2201      	movs	r2, #1
 80291a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80291a4:	2300      	movs	r3, #0
}
 80291a6:	4618      	mov	r0, r3
 80291a8:	3708      	adds	r7, #8
 80291aa:	46bd      	mov	sp, r7
 80291ac:	bd80      	pop	{r7, pc}

080291ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80291ae:	b480      	push	{r7}
 80291b0:	b083      	sub	sp, #12
 80291b2:	af00      	add	r7, sp, #0
 80291b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80291b6:	bf00      	nop
 80291b8:	370c      	adds	r7, #12
 80291ba:	46bd      	mov	sp, r7
 80291bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291c0:	4770      	bx	lr
	...

080291c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80291c4:	b480      	push	{r7}
 80291c6:	b085      	sub	sp, #20
 80291c8:	af00      	add	r7, sp, #0
 80291ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80291cc:	687b      	ldr	r3, [r7, #4]
 80291ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80291d2:	b2db      	uxtb	r3, r3
 80291d4:	2b01      	cmp	r3, #1
 80291d6:	d001      	beq.n	80291dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80291d8:	2301      	movs	r3, #1
 80291da:	e05e      	b.n	802929a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80291dc:	687b      	ldr	r3, [r7, #4]
 80291de:	2202      	movs	r2, #2
 80291e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80291e4:	687b      	ldr	r3, [r7, #4]
 80291e6:	681b      	ldr	r3, [r3, #0]
 80291e8:	68da      	ldr	r2, [r3, #12]
 80291ea:	687b      	ldr	r3, [r7, #4]
 80291ec:	681b      	ldr	r3, [r3, #0]
 80291ee:	f042 0201 	orr.w	r2, r2, #1
 80291f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80291f4:	687b      	ldr	r3, [r7, #4]
 80291f6:	681b      	ldr	r3, [r3, #0]
 80291f8:	4a2b      	ldr	r2, [pc, #172]	; (80292a8 <HAL_TIM_Base_Start_IT+0xe4>)
 80291fa:	4293      	cmp	r3, r2
 80291fc:	d02c      	beq.n	8029258 <HAL_TIM_Base_Start_IT+0x94>
 80291fe:	687b      	ldr	r3, [r7, #4]
 8029200:	681b      	ldr	r3, [r3, #0]
 8029202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029206:	d027      	beq.n	8029258 <HAL_TIM_Base_Start_IT+0x94>
 8029208:	687b      	ldr	r3, [r7, #4]
 802920a:	681b      	ldr	r3, [r3, #0]
 802920c:	4a27      	ldr	r2, [pc, #156]	; (80292ac <HAL_TIM_Base_Start_IT+0xe8>)
 802920e:	4293      	cmp	r3, r2
 8029210:	d022      	beq.n	8029258 <HAL_TIM_Base_Start_IT+0x94>
 8029212:	687b      	ldr	r3, [r7, #4]
 8029214:	681b      	ldr	r3, [r3, #0]
 8029216:	4a26      	ldr	r2, [pc, #152]	; (80292b0 <HAL_TIM_Base_Start_IT+0xec>)
 8029218:	4293      	cmp	r3, r2
 802921a:	d01d      	beq.n	8029258 <HAL_TIM_Base_Start_IT+0x94>
 802921c:	687b      	ldr	r3, [r7, #4]
 802921e:	681b      	ldr	r3, [r3, #0]
 8029220:	4a24      	ldr	r2, [pc, #144]	; (80292b4 <HAL_TIM_Base_Start_IT+0xf0>)
 8029222:	4293      	cmp	r3, r2
 8029224:	d018      	beq.n	8029258 <HAL_TIM_Base_Start_IT+0x94>
 8029226:	687b      	ldr	r3, [r7, #4]
 8029228:	681b      	ldr	r3, [r3, #0]
 802922a:	4a23      	ldr	r2, [pc, #140]	; (80292b8 <HAL_TIM_Base_Start_IT+0xf4>)
 802922c:	4293      	cmp	r3, r2
 802922e:	d013      	beq.n	8029258 <HAL_TIM_Base_Start_IT+0x94>
 8029230:	687b      	ldr	r3, [r7, #4]
 8029232:	681b      	ldr	r3, [r3, #0]
 8029234:	4a21      	ldr	r2, [pc, #132]	; (80292bc <HAL_TIM_Base_Start_IT+0xf8>)
 8029236:	4293      	cmp	r3, r2
 8029238:	d00e      	beq.n	8029258 <HAL_TIM_Base_Start_IT+0x94>
 802923a:	687b      	ldr	r3, [r7, #4]
 802923c:	681b      	ldr	r3, [r3, #0]
 802923e:	4a20      	ldr	r2, [pc, #128]	; (80292c0 <HAL_TIM_Base_Start_IT+0xfc>)
 8029240:	4293      	cmp	r3, r2
 8029242:	d009      	beq.n	8029258 <HAL_TIM_Base_Start_IT+0x94>
 8029244:	687b      	ldr	r3, [r7, #4]
 8029246:	681b      	ldr	r3, [r3, #0]
 8029248:	4a1e      	ldr	r2, [pc, #120]	; (80292c4 <HAL_TIM_Base_Start_IT+0x100>)
 802924a:	4293      	cmp	r3, r2
 802924c:	d004      	beq.n	8029258 <HAL_TIM_Base_Start_IT+0x94>
 802924e:	687b      	ldr	r3, [r7, #4]
 8029250:	681b      	ldr	r3, [r3, #0]
 8029252:	4a1d      	ldr	r2, [pc, #116]	; (80292c8 <HAL_TIM_Base_Start_IT+0x104>)
 8029254:	4293      	cmp	r3, r2
 8029256:	d115      	bne.n	8029284 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8029258:	687b      	ldr	r3, [r7, #4]
 802925a:	681b      	ldr	r3, [r3, #0]
 802925c:	689a      	ldr	r2, [r3, #8]
 802925e:	4b1b      	ldr	r3, [pc, #108]	; (80292cc <HAL_TIM_Base_Start_IT+0x108>)
 8029260:	4013      	ands	r3, r2
 8029262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029264:	68fb      	ldr	r3, [r7, #12]
 8029266:	2b06      	cmp	r3, #6
 8029268:	d015      	beq.n	8029296 <HAL_TIM_Base_Start_IT+0xd2>
 802926a:	68fb      	ldr	r3, [r7, #12]
 802926c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029270:	d011      	beq.n	8029296 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8029272:	687b      	ldr	r3, [r7, #4]
 8029274:	681b      	ldr	r3, [r3, #0]
 8029276:	681a      	ldr	r2, [r3, #0]
 8029278:	687b      	ldr	r3, [r7, #4]
 802927a:	681b      	ldr	r3, [r3, #0]
 802927c:	f042 0201 	orr.w	r2, r2, #1
 8029280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029282:	e008      	b.n	8029296 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8029284:	687b      	ldr	r3, [r7, #4]
 8029286:	681b      	ldr	r3, [r3, #0]
 8029288:	681a      	ldr	r2, [r3, #0]
 802928a:	687b      	ldr	r3, [r7, #4]
 802928c:	681b      	ldr	r3, [r3, #0]
 802928e:	f042 0201 	orr.w	r2, r2, #1
 8029292:	601a      	str	r2, [r3, #0]
 8029294:	e000      	b.n	8029298 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029296:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8029298:	2300      	movs	r3, #0
}
 802929a:	4618      	mov	r0, r3
 802929c:	3714      	adds	r7, #20
 802929e:	46bd      	mov	sp, r7
 80292a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292a4:	4770      	bx	lr
 80292a6:	bf00      	nop
 80292a8:	40010000 	.word	0x40010000
 80292ac:	40000400 	.word	0x40000400
 80292b0:	40000800 	.word	0x40000800
 80292b4:	40000c00 	.word	0x40000c00
 80292b8:	40010400 	.word	0x40010400
 80292bc:	40001800 	.word	0x40001800
 80292c0:	40014000 	.word	0x40014000
 80292c4:	4000e000 	.word	0x4000e000
 80292c8:	4000e400 	.word	0x4000e400
 80292cc:	00010007 	.word	0x00010007

080292d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80292d0:	b580      	push	{r7, lr}
 80292d2:	b082      	sub	sp, #8
 80292d4:	af00      	add	r7, sp, #0
 80292d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80292d8:	687b      	ldr	r3, [r7, #4]
 80292da:	681b      	ldr	r3, [r3, #0]
 80292dc:	691b      	ldr	r3, [r3, #16]
 80292de:	f003 0302 	and.w	r3, r3, #2
 80292e2:	2b02      	cmp	r3, #2
 80292e4:	d122      	bne.n	802932c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80292e6:	687b      	ldr	r3, [r7, #4]
 80292e8:	681b      	ldr	r3, [r3, #0]
 80292ea:	68db      	ldr	r3, [r3, #12]
 80292ec:	f003 0302 	and.w	r3, r3, #2
 80292f0:	2b02      	cmp	r3, #2
 80292f2:	d11b      	bne.n	802932c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80292f4:	687b      	ldr	r3, [r7, #4]
 80292f6:	681b      	ldr	r3, [r3, #0]
 80292f8:	f06f 0202 	mvn.w	r2, #2
 80292fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80292fe:	687b      	ldr	r3, [r7, #4]
 8029300:	2201      	movs	r2, #1
 8029302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8029304:	687b      	ldr	r3, [r7, #4]
 8029306:	681b      	ldr	r3, [r3, #0]
 8029308:	699b      	ldr	r3, [r3, #24]
 802930a:	f003 0303 	and.w	r3, r3, #3
 802930e:	2b00      	cmp	r3, #0
 8029310:	d003      	beq.n	802931a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8029312:	6878      	ldr	r0, [r7, #4]
 8029314:	f000 f905 	bl	8029522 <HAL_TIM_IC_CaptureCallback>
 8029318:	e005      	b.n	8029326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802931a:	6878      	ldr	r0, [r7, #4]
 802931c:	f000 f8f7 	bl	802950e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029320:	6878      	ldr	r0, [r7, #4]
 8029322:	f000 f908 	bl	8029536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029326:	687b      	ldr	r3, [r7, #4]
 8029328:	2200      	movs	r2, #0
 802932a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802932c:	687b      	ldr	r3, [r7, #4]
 802932e:	681b      	ldr	r3, [r3, #0]
 8029330:	691b      	ldr	r3, [r3, #16]
 8029332:	f003 0304 	and.w	r3, r3, #4
 8029336:	2b04      	cmp	r3, #4
 8029338:	d122      	bne.n	8029380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802933a:	687b      	ldr	r3, [r7, #4]
 802933c:	681b      	ldr	r3, [r3, #0]
 802933e:	68db      	ldr	r3, [r3, #12]
 8029340:	f003 0304 	and.w	r3, r3, #4
 8029344:	2b04      	cmp	r3, #4
 8029346:	d11b      	bne.n	8029380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8029348:	687b      	ldr	r3, [r7, #4]
 802934a:	681b      	ldr	r3, [r3, #0]
 802934c:	f06f 0204 	mvn.w	r2, #4
 8029350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8029352:	687b      	ldr	r3, [r7, #4]
 8029354:	2202      	movs	r2, #2
 8029356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8029358:	687b      	ldr	r3, [r7, #4]
 802935a:	681b      	ldr	r3, [r3, #0]
 802935c:	699b      	ldr	r3, [r3, #24]
 802935e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029362:	2b00      	cmp	r3, #0
 8029364:	d003      	beq.n	802936e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029366:	6878      	ldr	r0, [r7, #4]
 8029368:	f000 f8db 	bl	8029522 <HAL_TIM_IC_CaptureCallback>
 802936c:	e005      	b.n	802937a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802936e:	6878      	ldr	r0, [r7, #4]
 8029370:	f000 f8cd 	bl	802950e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029374:	6878      	ldr	r0, [r7, #4]
 8029376:	f000 f8de 	bl	8029536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802937a:	687b      	ldr	r3, [r7, #4]
 802937c:	2200      	movs	r2, #0
 802937e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8029380:	687b      	ldr	r3, [r7, #4]
 8029382:	681b      	ldr	r3, [r3, #0]
 8029384:	691b      	ldr	r3, [r3, #16]
 8029386:	f003 0308 	and.w	r3, r3, #8
 802938a:	2b08      	cmp	r3, #8
 802938c:	d122      	bne.n	80293d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802938e:	687b      	ldr	r3, [r7, #4]
 8029390:	681b      	ldr	r3, [r3, #0]
 8029392:	68db      	ldr	r3, [r3, #12]
 8029394:	f003 0308 	and.w	r3, r3, #8
 8029398:	2b08      	cmp	r3, #8
 802939a:	d11b      	bne.n	80293d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802939c:	687b      	ldr	r3, [r7, #4]
 802939e:	681b      	ldr	r3, [r3, #0]
 80293a0:	f06f 0208 	mvn.w	r2, #8
 80293a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80293a6:	687b      	ldr	r3, [r7, #4]
 80293a8:	2204      	movs	r2, #4
 80293aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80293ac:	687b      	ldr	r3, [r7, #4]
 80293ae:	681b      	ldr	r3, [r3, #0]
 80293b0:	69db      	ldr	r3, [r3, #28]
 80293b2:	f003 0303 	and.w	r3, r3, #3
 80293b6:	2b00      	cmp	r3, #0
 80293b8:	d003      	beq.n	80293c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80293ba:	6878      	ldr	r0, [r7, #4]
 80293bc:	f000 f8b1 	bl	8029522 <HAL_TIM_IC_CaptureCallback>
 80293c0:	e005      	b.n	80293ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80293c2:	6878      	ldr	r0, [r7, #4]
 80293c4:	f000 f8a3 	bl	802950e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80293c8:	6878      	ldr	r0, [r7, #4]
 80293ca:	f000 f8b4 	bl	8029536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80293ce:	687b      	ldr	r3, [r7, #4]
 80293d0:	2200      	movs	r2, #0
 80293d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80293d4:	687b      	ldr	r3, [r7, #4]
 80293d6:	681b      	ldr	r3, [r3, #0]
 80293d8:	691b      	ldr	r3, [r3, #16]
 80293da:	f003 0310 	and.w	r3, r3, #16
 80293de:	2b10      	cmp	r3, #16
 80293e0:	d122      	bne.n	8029428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80293e2:	687b      	ldr	r3, [r7, #4]
 80293e4:	681b      	ldr	r3, [r3, #0]
 80293e6:	68db      	ldr	r3, [r3, #12]
 80293e8:	f003 0310 	and.w	r3, r3, #16
 80293ec:	2b10      	cmp	r3, #16
 80293ee:	d11b      	bne.n	8029428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80293f0:	687b      	ldr	r3, [r7, #4]
 80293f2:	681b      	ldr	r3, [r3, #0]
 80293f4:	f06f 0210 	mvn.w	r2, #16
 80293f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80293fa:	687b      	ldr	r3, [r7, #4]
 80293fc:	2208      	movs	r2, #8
 80293fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8029400:	687b      	ldr	r3, [r7, #4]
 8029402:	681b      	ldr	r3, [r3, #0]
 8029404:	69db      	ldr	r3, [r3, #28]
 8029406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802940a:	2b00      	cmp	r3, #0
 802940c:	d003      	beq.n	8029416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802940e:	6878      	ldr	r0, [r7, #4]
 8029410:	f000 f887 	bl	8029522 <HAL_TIM_IC_CaptureCallback>
 8029414:	e005      	b.n	8029422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029416:	6878      	ldr	r0, [r7, #4]
 8029418:	f000 f879 	bl	802950e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802941c:	6878      	ldr	r0, [r7, #4]
 802941e:	f000 f88a 	bl	8029536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029422:	687b      	ldr	r3, [r7, #4]
 8029424:	2200      	movs	r2, #0
 8029426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8029428:	687b      	ldr	r3, [r7, #4]
 802942a:	681b      	ldr	r3, [r3, #0]
 802942c:	691b      	ldr	r3, [r3, #16]
 802942e:	f003 0301 	and.w	r3, r3, #1
 8029432:	2b01      	cmp	r3, #1
 8029434:	d10e      	bne.n	8029454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8029436:	687b      	ldr	r3, [r7, #4]
 8029438:	681b      	ldr	r3, [r3, #0]
 802943a:	68db      	ldr	r3, [r3, #12]
 802943c:	f003 0301 	and.w	r3, r3, #1
 8029440:	2b01      	cmp	r3, #1
 8029442:	d107      	bne.n	8029454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029444:	687b      	ldr	r3, [r7, #4]
 8029446:	681b      	ldr	r3, [r3, #0]
 8029448:	f06f 0201 	mvn.w	r2, #1
 802944c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802944e:	6878      	ldr	r0, [r7, #4]
 8029450:	f7f8 fb12 	bl	8021a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029454:	687b      	ldr	r3, [r7, #4]
 8029456:	681b      	ldr	r3, [r3, #0]
 8029458:	691b      	ldr	r3, [r3, #16]
 802945a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802945e:	2b80      	cmp	r3, #128	; 0x80
 8029460:	d10e      	bne.n	8029480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029462:	687b      	ldr	r3, [r7, #4]
 8029464:	681b      	ldr	r3, [r3, #0]
 8029466:	68db      	ldr	r3, [r3, #12]
 8029468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802946c:	2b80      	cmp	r3, #128	; 0x80
 802946e:	d107      	bne.n	8029480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8029470:	687b      	ldr	r3, [r7, #4]
 8029472:	681b      	ldr	r3, [r3, #0]
 8029474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8029478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802947a:	6878      	ldr	r0, [r7, #4]
 802947c:	f000 f920 	bl	80296c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8029480:	687b      	ldr	r3, [r7, #4]
 8029482:	681b      	ldr	r3, [r3, #0]
 8029484:	691b      	ldr	r3, [r3, #16]
 8029486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802948a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802948e:	d10e      	bne.n	80294ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029490:	687b      	ldr	r3, [r7, #4]
 8029492:	681b      	ldr	r3, [r3, #0]
 8029494:	68db      	ldr	r3, [r3, #12]
 8029496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802949a:	2b80      	cmp	r3, #128	; 0x80
 802949c:	d107      	bne.n	80294ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 802949e:	687b      	ldr	r3, [r7, #4]
 80294a0:	681b      	ldr	r3, [r3, #0]
 80294a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80294a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80294a8:	6878      	ldr	r0, [r7, #4]
 80294aa:	f000 f913 	bl	80296d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80294ae:	687b      	ldr	r3, [r7, #4]
 80294b0:	681b      	ldr	r3, [r3, #0]
 80294b2:	691b      	ldr	r3, [r3, #16]
 80294b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80294b8:	2b40      	cmp	r3, #64	; 0x40
 80294ba:	d10e      	bne.n	80294da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80294bc:	687b      	ldr	r3, [r7, #4]
 80294be:	681b      	ldr	r3, [r3, #0]
 80294c0:	68db      	ldr	r3, [r3, #12]
 80294c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80294c6:	2b40      	cmp	r3, #64	; 0x40
 80294c8:	d107      	bne.n	80294da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80294ca:	687b      	ldr	r3, [r7, #4]
 80294cc:	681b      	ldr	r3, [r3, #0]
 80294ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80294d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80294d4:	6878      	ldr	r0, [r7, #4]
 80294d6:	f000 f838 	bl	802954a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80294da:	687b      	ldr	r3, [r7, #4]
 80294dc:	681b      	ldr	r3, [r3, #0]
 80294de:	691b      	ldr	r3, [r3, #16]
 80294e0:	f003 0320 	and.w	r3, r3, #32
 80294e4:	2b20      	cmp	r3, #32
 80294e6:	d10e      	bne.n	8029506 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80294e8:	687b      	ldr	r3, [r7, #4]
 80294ea:	681b      	ldr	r3, [r3, #0]
 80294ec:	68db      	ldr	r3, [r3, #12]
 80294ee:	f003 0320 	and.w	r3, r3, #32
 80294f2:	2b20      	cmp	r3, #32
 80294f4:	d107      	bne.n	8029506 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80294f6:	687b      	ldr	r3, [r7, #4]
 80294f8:	681b      	ldr	r3, [r3, #0]
 80294fa:	f06f 0220 	mvn.w	r2, #32
 80294fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8029500:	6878      	ldr	r0, [r7, #4]
 8029502:	f000 f8d3 	bl	80296ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8029506:	bf00      	nop
 8029508:	3708      	adds	r7, #8
 802950a:	46bd      	mov	sp, r7
 802950c:	bd80      	pop	{r7, pc}

0802950e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802950e:	b480      	push	{r7}
 8029510:	b083      	sub	sp, #12
 8029512:	af00      	add	r7, sp, #0
 8029514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8029516:	bf00      	nop
 8029518:	370c      	adds	r7, #12
 802951a:	46bd      	mov	sp, r7
 802951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029520:	4770      	bx	lr

08029522 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029522:	b480      	push	{r7}
 8029524:	b083      	sub	sp, #12
 8029526:	af00      	add	r7, sp, #0
 8029528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802952a:	bf00      	nop
 802952c:	370c      	adds	r7, #12
 802952e:	46bd      	mov	sp, r7
 8029530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029534:	4770      	bx	lr

08029536 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8029536:	b480      	push	{r7}
 8029538:	b083      	sub	sp, #12
 802953a:	af00      	add	r7, sp, #0
 802953c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802953e:	bf00      	nop
 8029540:	370c      	adds	r7, #12
 8029542:	46bd      	mov	sp, r7
 8029544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029548:	4770      	bx	lr

0802954a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802954a:	b480      	push	{r7}
 802954c:	b083      	sub	sp, #12
 802954e:	af00      	add	r7, sp, #0
 8029550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8029552:	bf00      	nop
 8029554:	370c      	adds	r7, #12
 8029556:	46bd      	mov	sp, r7
 8029558:	f85d 7b04 	ldr.w	r7, [sp], #4
 802955c:	4770      	bx	lr
	...

08029560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8029560:	b480      	push	{r7}
 8029562:	b085      	sub	sp, #20
 8029564:	af00      	add	r7, sp, #0
 8029566:	6078      	str	r0, [r7, #4]
 8029568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802956a:	687b      	ldr	r3, [r7, #4]
 802956c:	681b      	ldr	r3, [r3, #0]
 802956e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029570:	687b      	ldr	r3, [r7, #4]
 8029572:	4a44      	ldr	r2, [pc, #272]	; (8029684 <TIM_Base_SetConfig+0x124>)
 8029574:	4293      	cmp	r3, r2
 8029576:	d013      	beq.n	80295a0 <TIM_Base_SetConfig+0x40>
 8029578:	687b      	ldr	r3, [r7, #4]
 802957a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802957e:	d00f      	beq.n	80295a0 <TIM_Base_SetConfig+0x40>
 8029580:	687b      	ldr	r3, [r7, #4]
 8029582:	4a41      	ldr	r2, [pc, #260]	; (8029688 <TIM_Base_SetConfig+0x128>)
 8029584:	4293      	cmp	r3, r2
 8029586:	d00b      	beq.n	80295a0 <TIM_Base_SetConfig+0x40>
 8029588:	687b      	ldr	r3, [r7, #4]
 802958a:	4a40      	ldr	r2, [pc, #256]	; (802968c <TIM_Base_SetConfig+0x12c>)
 802958c:	4293      	cmp	r3, r2
 802958e:	d007      	beq.n	80295a0 <TIM_Base_SetConfig+0x40>
 8029590:	687b      	ldr	r3, [r7, #4]
 8029592:	4a3f      	ldr	r2, [pc, #252]	; (8029690 <TIM_Base_SetConfig+0x130>)
 8029594:	4293      	cmp	r3, r2
 8029596:	d003      	beq.n	80295a0 <TIM_Base_SetConfig+0x40>
 8029598:	687b      	ldr	r3, [r7, #4]
 802959a:	4a3e      	ldr	r2, [pc, #248]	; (8029694 <TIM_Base_SetConfig+0x134>)
 802959c:	4293      	cmp	r3, r2
 802959e:	d108      	bne.n	80295b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80295a0:	68fb      	ldr	r3, [r7, #12]
 80295a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80295a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80295a8:	683b      	ldr	r3, [r7, #0]
 80295aa:	685b      	ldr	r3, [r3, #4]
 80295ac:	68fa      	ldr	r2, [r7, #12]
 80295ae:	4313      	orrs	r3, r2
 80295b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80295b2:	687b      	ldr	r3, [r7, #4]
 80295b4:	4a33      	ldr	r2, [pc, #204]	; (8029684 <TIM_Base_SetConfig+0x124>)
 80295b6:	4293      	cmp	r3, r2
 80295b8:	d027      	beq.n	802960a <TIM_Base_SetConfig+0xaa>
 80295ba:	687b      	ldr	r3, [r7, #4]
 80295bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80295c0:	d023      	beq.n	802960a <TIM_Base_SetConfig+0xaa>
 80295c2:	687b      	ldr	r3, [r7, #4]
 80295c4:	4a30      	ldr	r2, [pc, #192]	; (8029688 <TIM_Base_SetConfig+0x128>)
 80295c6:	4293      	cmp	r3, r2
 80295c8:	d01f      	beq.n	802960a <TIM_Base_SetConfig+0xaa>
 80295ca:	687b      	ldr	r3, [r7, #4]
 80295cc:	4a2f      	ldr	r2, [pc, #188]	; (802968c <TIM_Base_SetConfig+0x12c>)
 80295ce:	4293      	cmp	r3, r2
 80295d0:	d01b      	beq.n	802960a <TIM_Base_SetConfig+0xaa>
 80295d2:	687b      	ldr	r3, [r7, #4]
 80295d4:	4a2e      	ldr	r2, [pc, #184]	; (8029690 <TIM_Base_SetConfig+0x130>)
 80295d6:	4293      	cmp	r3, r2
 80295d8:	d017      	beq.n	802960a <TIM_Base_SetConfig+0xaa>
 80295da:	687b      	ldr	r3, [r7, #4]
 80295dc:	4a2d      	ldr	r2, [pc, #180]	; (8029694 <TIM_Base_SetConfig+0x134>)
 80295de:	4293      	cmp	r3, r2
 80295e0:	d013      	beq.n	802960a <TIM_Base_SetConfig+0xaa>
 80295e2:	687b      	ldr	r3, [r7, #4]
 80295e4:	4a2c      	ldr	r2, [pc, #176]	; (8029698 <TIM_Base_SetConfig+0x138>)
 80295e6:	4293      	cmp	r3, r2
 80295e8:	d00f      	beq.n	802960a <TIM_Base_SetConfig+0xaa>
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	4a2b      	ldr	r2, [pc, #172]	; (802969c <TIM_Base_SetConfig+0x13c>)
 80295ee:	4293      	cmp	r3, r2
 80295f0:	d00b      	beq.n	802960a <TIM_Base_SetConfig+0xaa>
 80295f2:	687b      	ldr	r3, [r7, #4]
 80295f4:	4a2a      	ldr	r2, [pc, #168]	; (80296a0 <TIM_Base_SetConfig+0x140>)
 80295f6:	4293      	cmp	r3, r2
 80295f8:	d007      	beq.n	802960a <TIM_Base_SetConfig+0xaa>
 80295fa:	687b      	ldr	r3, [r7, #4]
 80295fc:	4a29      	ldr	r2, [pc, #164]	; (80296a4 <TIM_Base_SetConfig+0x144>)
 80295fe:	4293      	cmp	r3, r2
 8029600:	d003      	beq.n	802960a <TIM_Base_SetConfig+0xaa>
 8029602:	687b      	ldr	r3, [r7, #4]
 8029604:	4a28      	ldr	r2, [pc, #160]	; (80296a8 <TIM_Base_SetConfig+0x148>)
 8029606:	4293      	cmp	r3, r2
 8029608:	d108      	bne.n	802961c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802960a:	68fb      	ldr	r3, [r7, #12]
 802960c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8029612:	683b      	ldr	r3, [r7, #0]
 8029614:	68db      	ldr	r3, [r3, #12]
 8029616:	68fa      	ldr	r2, [r7, #12]
 8029618:	4313      	orrs	r3, r2
 802961a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802961c:	68fb      	ldr	r3, [r7, #12]
 802961e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8029622:	683b      	ldr	r3, [r7, #0]
 8029624:	695b      	ldr	r3, [r3, #20]
 8029626:	4313      	orrs	r3, r2
 8029628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802962a:	687b      	ldr	r3, [r7, #4]
 802962c:	68fa      	ldr	r2, [r7, #12]
 802962e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8029630:	683b      	ldr	r3, [r7, #0]
 8029632:	689a      	ldr	r2, [r3, #8]
 8029634:	687b      	ldr	r3, [r7, #4]
 8029636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8029638:	683b      	ldr	r3, [r7, #0]
 802963a:	681a      	ldr	r2, [r3, #0]
 802963c:	687b      	ldr	r3, [r7, #4]
 802963e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8029640:	687b      	ldr	r3, [r7, #4]
 8029642:	4a10      	ldr	r2, [pc, #64]	; (8029684 <TIM_Base_SetConfig+0x124>)
 8029644:	4293      	cmp	r3, r2
 8029646:	d00f      	beq.n	8029668 <TIM_Base_SetConfig+0x108>
 8029648:	687b      	ldr	r3, [r7, #4]
 802964a:	4a12      	ldr	r2, [pc, #72]	; (8029694 <TIM_Base_SetConfig+0x134>)
 802964c:	4293      	cmp	r3, r2
 802964e:	d00b      	beq.n	8029668 <TIM_Base_SetConfig+0x108>
 8029650:	687b      	ldr	r3, [r7, #4]
 8029652:	4a11      	ldr	r2, [pc, #68]	; (8029698 <TIM_Base_SetConfig+0x138>)
 8029654:	4293      	cmp	r3, r2
 8029656:	d007      	beq.n	8029668 <TIM_Base_SetConfig+0x108>
 8029658:	687b      	ldr	r3, [r7, #4]
 802965a:	4a10      	ldr	r2, [pc, #64]	; (802969c <TIM_Base_SetConfig+0x13c>)
 802965c:	4293      	cmp	r3, r2
 802965e:	d003      	beq.n	8029668 <TIM_Base_SetConfig+0x108>
 8029660:	687b      	ldr	r3, [r7, #4]
 8029662:	4a0f      	ldr	r2, [pc, #60]	; (80296a0 <TIM_Base_SetConfig+0x140>)
 8029664:	4293      	cmp	r3, r2
 8029666:	d103      	bne.n	8029670 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029668:	683b      	ldr	r3, [r7, #0]
 802966a:	691a      	ldr	r2, [r3, #16]
 802966c:	687b      	ldr	r3, [r7, #4]
 802966e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8029670:	687b      	ldr	r3, [r7, #4]
 8029672:	2201      	movs	r2, #1
 8029674:	615a      	str	r2, [r3, #20]
}
 8029676:	bf00      	nop
 8029678:	3714      	adds	r7, #20
 802967a:	46bd      	mov	sp, r7
 802967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029680:	4770      	bx	lr
 8029682:	bf00      	nop
 8029684:	40010000 	.word	0x40010000
 8029688:	40000400 	.word	0x40000400
 802968c:	40000800 	.word	0x40000800
 8029690:	40000c00 	.word	0x40000c00
 8029694:	40010400 	.word	0x40010400
 8029698:	40014000 	.word	0x40014000
 802969c:	40014400 	.word	0x40014400
 80296a0:	40014800 	.word	0x40014800
 80296a4:	4000e000 	.word	0x4000e000
 80296a8:	4000e400 	.word	0x4000e400

080296ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80296ac:	b480      	push	{r7}
 80296ae:	b083      	sub	sp, #12
 80296b0:	af00      	add	r7, sp, #0
 80296b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80296b4:	bf00      	nop
 80296b6:	370c      	adds	r7, #12
 80296b8:	46bd      	mov	sp, r7
 80296ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80296be:	4770      	bx	lr

080296c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80296c0:	b480      	push	{r7}
 80296c2:	b083      	sub	sp, #12
 80296c4:	af00      	add	r7, sp, #0
 80296c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80296c8:	bf00      	nop
 80296ca:	370c      	adds	r7, #12
 80296cc:	46bd      	mov	sp, r7
 80296ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80296d2:	4770      	bx	lr

080296d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80296d4:	b480      	push	{r7}
 80296d6:	b083      	sub	sp, #12
 80296d8:	af00      	add	r7, sp, #0
 80296da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80296dc:	bf00      	nop
 80296de:	370c      	adds	r7, #12
 80296e0:	46bd      	mov	sp, r7
 80296e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80296e6:	4770      	bx	lr

080296e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80296e8:	b580      	push	{r7, lr}
 80296ea:	b082      	sub	sp, #8
 80296ec:	af00      	add	r7, sp, #0
 80296ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80296f0:	687b      	ldr	r3, [r7, #4]
 80296f2:	2b00      	cmp	r3, #0
 80296f4:	d101      	bne.n	80296fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80296f6:	2301      	movs	r3, #1
 80296f8:	e042      	b.n	8029780 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80296fa:	687b      	ldr	r3, [r7, #4]
 80296fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8029700:	2b00      	cmp	r3, #0
 8029702:	d106      	bne.n	8029712 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8029704:	687b      	ldr	r3, [r7, #4]
 8029706:	2200      	movs	r2, #0
 8029708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802970c:	6878      	ldr	r0, [r7, #4]
 802970e:	f7f8 f9e9 	bl	8021ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8029712:	687b      	ldr	r3, [r7, #4]
 8029714:	2224      	movs	r2, #36	; 0x24
 8029716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 802971a:	687b      	ldr	r3, [r7, #4]
 802971c:	681b      	ldr	r3, [r3, #0]
 802971e:	681a      	ldr	r2, [r3, #0]
 8029720:	687b      	ldr	r3, [r7, #4]
 8029722:	681b      	ldr	r3, [r3, #0]
 8029724:	f022 0201 	bic.w	r2, r2, #1
 8029728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 802972a:	6878      	ldr	r0, [r7, #4]
 802972c:	f000 fc84 	bl	802a038 <UART_SetConfig>
 8029730:	4603      	mov	r3, r0
 8029732:	2b01      	cmp	r3, #1
 8029734:	d101      	bne.n	802973a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8029736:	2301      	movs	r3, #1
 8029738:	e022      	b.n	8029780 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 802973a:	687b      	ldr	r3, [r7, #4]
 802973c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802973e:	2b00      	cmp	r3, #0
 8029740:	d002      	beq.n	8029748 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8029742:	6878      	ldr	r0, [r7, #4]
 8029744:	f001 fae4 	bl	802ad10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8029748:	687b      	ldr	r3, [r7, #4]
 802974a:	681b      	ldr	r3, [r3, #0]
 802974c:	685a      	ldr	r2, [r3, #4]
 802974e:	687b      	ldr	r3, [r7, #4]
 8029750:	681b      	ldr	r3, [r3, #0]
 8029752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8029756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8029758:	687b      	ldr	r3, [r7, #4]
 802975a:	681b      	ldr	r3, [r3, #0]
 802975c:	689a      	ldr	r2, [r3, #8]
 802975e:	687b      	ldr	r3, [r7, #4]
 8029760:	681b      	ldr	r3, [r3, #0]
 8029762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8029766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8029768:	687b      	ldr	r3, [r7, #4]
 802976a:	681b      	ldr	r3, [r3, #0]
 802976c:	681a      	ldr	r2, [r3, #0]
 802976e:	687b      	ldr	r3, [r7, #4]
 8029770:	681b      	ldr	r3, [r3, #0]
 8029772:	f042 0201 	orr.w	r2, r2, #1
 8029776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8029778:	6878      	ldr	r0, [r7, #4]
 802977a:	f001 fb6b 	bl	802ae54 <UART_CheckIdleState>
 802977e:	4603      	mov	r3, r0
}
 8029780:	4618      	mov	r0, r3
 8029782:	3708      	adds	r7, #8
 8029784:	46bd      	mov	sp, r7
 8029786:	bd80      	pop	{r7, pc}

08029788 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8029788:	b580      	push	{r7, lr}
 802978a:	b08a      	sub	sp, #40	; 0x28
 802978c:	af00      	add	r7, sp, #0
 802978e:	60f8      	str	r0, [r7, #12]
 8029790:	60b9      	str	r1, [r7, #8]
 8029792:	4613      	mov	r3, r2
 8029794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8029796:	68fb      	ldr	r3, [r7, #12]
 8029798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802979c:	2b20      	cmp	r3, #32
 802979e:	d17a      	bne.n	8029896 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80297a0:	68bb      	ldr	r3, [r7, #8]
 80297a2:	2b00      	cmp	r3, #0
 80297a4:	d002      	beq.n	80297ac <HAL_UART_Transmit_DMA+0x24>
 80297a6:	88fb      	ldrh	r3, [r7, #6]
 80297a8:	2b00      	cmp	r3, #0
 80297aa:	d101      	bne.n	80297b0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80297ac:	2301      	movs	r3, #1
 80297ae:	e073      	b.n	8029898 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80297b0:	68fb      	ldr	r3, [r7, #12]
 80297b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80297b6:	2b01      	cmp	r3, #1
 80297b8:	d101      	bne.n	80297be <HAL_UART_Transmit_DMA+0x36>
 80297ba:	2302      	movs	r3, #2
 80297bc:	e06c      	b.n	8029898 <HAL_UART_Transmit_DMA+0x110>
 80297be:	68fb      	ldr	r3, [r7, #12]
 80297c0:	2201      	movs	r2, #1
 80297c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80297c6:	68fb      	ldr	r3, [r7, #12]
 80297c8:	68ba      	ldr	r2, [r7, #8]
 80297ca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80297cc:	68fb      	ldr	r3, [r7, #12]
 80297ce:	88fa      	ldrh	r2, [r7, #6]
 80297d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80297d4:	68fb      	ldr	r3, [r7, #12]
 80297d6:	88fa      	ldrh	r2, [r7, #6]
 80297d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80297dc:	68fb      	ldr	r3, [r7, #12]
 80297de:	2200      	movs	r2, #0
 80297e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80297e4:	68fb      	ldr	r3, [r7, #12]
 80297e6:	2221      	movs	r2, #33	; 0x21
 80297e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80297ec:	68fb      	ldr	r3, [r7, #12]
 80297ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80297f0:	2b00      	cmp	r3, #0
 80297f2:	d02c      	beq.n	802984e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80297f4:	68fb      	ldr	r3, [r7, #12]
 80297f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80297f8:	4a29      	ldr	r2, [pc, #164]	; (80298a0 <HAL_UART_Transmit_DMA+0x118>)
 80297fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80297fc:	68fb      	ldr	r3, [r7, #12]
 80297fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8029800:	4a28      	ldr	r2, [pc, #160]	; (80298a4 <HAL_UART_Transmit_DMA+0x11c>)
 8029802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8029804:	68fb      	ldr	r3, [r7, #12]
 8029806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8029808:	4a27      	ldr	r2, [pc, #156]	; (80298a8 <HAL_UART_Transmit_DMA+0x120>)
 802980a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 802980c:	68fb      	ldr	r3, [r7, #12]
 802980e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8029810:	2200      	movs	r2, #0
 8029812:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8029814:	68fb      	ldr	r3, [r7, #12]
 8029816:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8029818:	68fb      	ldr	r3, [r7, #12]
 802981a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802981c:	4619      	mov	r1, r3
 802981e:	68fb      	ldr	r3, [r7, #12]
 8029820:	681b      	ldr	r3, [r3, #0]
 8029822:	3328      	adds	r3, #40	; 0x28
 8029824:	461a      	mov	r2, r3
 8029826:	88fb      	ldrh	r3, [r7, #6]
 8029828:	f7f9 f8c2 	bl	80229b0 <HAL_DMA_Start_IT>
 802982c:	4603      	mov	r3, r0
 802982e:	2b00      	cmp	r3, #0
 8029830:	d00d      	beq.n	802984e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8029832:	68fb      	ldr	r3, [r7, #12]
 8029834:	2210      	movs	r2, #16
 8029836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 802983a:	68fb      	ldr	r3, [r7, #12]
 802983c:	2200      	movs	r2, #0
 802983e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8029842:	68fb      	ldr	r3, [r7, #12]
 8029844:	2220      	movs	r2, #32
 8029846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 802984a:	2301      	movs	r3, #1
 802984c:	e024      	b.n	8029898 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 802984e:	68fb      	ldr	r3, [r7, #12]
 8029850:	681b      	ldr	r3, [r3, #0]
 8029852:	2240      	movs	r2, #64	; 0x40
 8029854:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8029856:	68fb      	ldr	r3, [r7, #12]
 8029858:	2200      	movs	r2, #0
 802985a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 802985e:	68fb      	ldr	r3, [r7, #12]
 8029860:	681b      	ldr	r3, [r3, #0]
 8029862:	3308      	adds	r3, #8
 8029864:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029866:	697b      	ldr	r3, [r7, #20]
 8029868:	e853 3f00 	ldrex	r3, [r3]
 802986c:	613b      	str	r3, [r7, #16]
   return(result);
 802986e:	693b      	ldr	r3, [r7, #16]
 8029870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029874:	627b      	str	r3, [r7, #36]	; 0x24
 8029876:	68fb      	ldr	r3, [r7, #12]
 8029878:	681b      	ldr	r3, [r3, #0]
 802987a:	3308      	adds	r3, #8
 802987c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802987e:	623a      	str	r2, [r7, #32]
 8029880:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029882:	69f9      	ldr	r1, [r7, #28]
 8029884:	6a3a      	ldr	r2, [r7, #32]
 8029886:	e841 2300 	strex	r3, r2, [r1]
 802988a:	61bb      	str	r3, [r7, #24]
   return(result);
 802988c:	69bb      	ldr	r3, [r7, #24]
 802988e:	2b00      	cmp	r3, #0
 8029890:	d1e5      	bne.n	802985e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8029892:	2300      	movs	r3, #0
 8029894:	e000      	b.n	8029898 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8029896:	2302      	movs	r3, #2
  }
}
 8029898:	4618      	mov	r0, r3
 802989a:	3728      	adds	r7, #40	; 0x28
 802989c:	46bd      	mov	sp, r7
 802989e:	bd80      	pop	{r7, pc}
 80298a0:	0802b31d 	.word	0x0802b31d
 80298a4:	0802b3b3 	.word	0x0802b3b3
 80298a8:	0802b529 	.word	0x0802b529

080298ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80298ac:	b580      	push	{r7, lr}
 80298ae:	b0ba      	sub	sp, #232	; 0xe8
 80298b0:	af00      	add	r7, sp, #0
 80298b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80298b4:	687b      	ldr	r3, [r7, #4]
 80298b6:	681b      	ldr	r3, [r3, #0]
 80298b8:	69db      	ldr	r3, [r3, #28]
 80298ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80298be:	687b      	ldr	r3, [r7, #4]
 80298c0:	681b      	ldr	r3, [r3, #0]
 80298c2:	681b      	ldr	r3, [r3, #0]
 80298c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80298c8:	687b      	ldr	r3, [r7, #4]
 80298ca:	681b      	ldr	r3, [r3, #0]
 80298cc:	689b      	ldr	r3, [r3, #8]
 80298ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80298d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80298d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80298da:	4013      	ands	r3, r2
 80298dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80298e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80298e4:	2b00      	cmp	r3, #0
 80298e6:	d11b      	bne.n	8029920 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80298e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80298ec:	f003 0320 	and.w	r3, r3, #32
 80298f0:	2b00      	cmp	r3, #0
 80298f2:	d015      	beq.n	8029920 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80298f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80298f8:	f003 0320 	and.w	r3, r3, #32
 80298fc:	2b00      	cmp	r3, #0
 80298fe:	d105      	bne.n	802990c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8029900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8029908:	2b00      	cmp	r3, #0
 802990a:	d009      	beq.n	8029920 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 802990c:	687b      	ldr	r3, [r7, #4]
 802990e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029910:	2b00      	cmp	r3, #0
 8029912:	f000 835a 	beq.w	8029fca <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8029916:	687b      	ldr	r3, [r7, #4]
 8029918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802991a:	6878      	ldr	r0, [r7, #4]
 802991c:	4798      	blx	r3
      }
      return;
 802991e:	e354      	b.n	8029fca <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8029920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8029924:	2b00      	cmp	r3, #0
 8029926:	f000 811f 	beq.w	8029b68 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 802992a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 802992e:	4b8b      	ldr	r3, [pc, #556]	; (8029b5c <HAL_UART_IRQHandler+0x2b0>)
 8029930:	4013      	ands	r3, r2
 8029932:	2b00      	cmp	r3, #0
 8029934:	d106      	bne.n	8029944 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8029936:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 802993a:	4b89      	ldr	r3, [pc, #548]	; (8029b60 <HAL_UART_IRQHandler+0x2b4>)
 802993c:	4013      	ands	r3, r2
 802993e:	2b00      	cmp	r3, #0
 8029940:	f000 8112 	beq.w	8029b68 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8029944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029948:	f003 0301 	and.w	r3, r3, #1
 802994c:	2b00      	cmp	r3, #0
 802994e:	d011      	beq.n	8029974 <HAL_UART_IRQHandler+0xc8>
 8029950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029958:	2b00      	cmp	r3, #0
 802995a:	d00b      	beq.n	8029974 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 802995c:	687b      	ldr	r3, [r7, #4]
 802995e:	681b      	ldr	r3, [r3, #0]
 8029960:	2201      	movs	r2, #1
 8029962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8029964:	687b      	ldr	r3, [r7, #4]
 8029966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802996a:	f043 0201 	orr.w	r2, r3, #1
 802996e:	687b      	ldr	r3, [r7, #4]
 8029970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8029974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029978:	f003 0302 	and.w	r3, r3, #2
 802997c:	2b00      	cmp	r3, #0
 802997e:	d011      	beq.n	80299a4 <HAL_UART_IRQHandler+0xf8>
 8029980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029984:	f003 0301 	and.w	r3, r3, #1
 8029988:	2b00      	cmp	r3, #0
 802998a:	d00b      	beq.n	80299a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 802998c:	687b      	ldr	r3, [r7, #4]
 802998e:	681b      	ldr	r3, [r3, #0]
 8029990:	2202      	movs	r2, #2
 8029992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8029994:	687b      	ldr	r3, [r7, #4]
 8029996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802999a:	f043 0204 	orr.w	r2, r3, #4
 802999e:	687b      	ldr	r3, [r7, #4]
 80299a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80299a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80299a8:	f003 0304 	and.w	r3, r3, #4
 80299ac:	2b00      	cmp	r3, #0
 80299ae:	d011      	beq.n	80299d4 <HAL_UART_IRQHandler+0x128>
 80299b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80299b4:	f003 0301 	and.w	r3, r3, #1
 80299b8:	2b00      	cmp	r3, #0
 80299ba:	d00b      	beq.n	80299d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80299bc:	687b      	ldr	r3, [r7, #4]
 80299be:	681b      	ldr	r3, [r3, #0]
 80299c0:	2204      	movs	r2, #4
 80299c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80299c4:	687b      	ldr	r3, [r7, #4]
 80299c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80299ca:	f043 0202 	orr.w	r2, r3, #2
 80299ce:	687b      	ldr	r3, [r7, #4]
 80299d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80299d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80299d8:	f003 0308 	and.w	r3, r3, #8
 80299dc:	2b00      	cmp	r3, #0
 80299de:	d017      	beq.n	8029a10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80299e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80299e4:	f003 0320 	and.w	r3, r3, #32
 80299e8:	2b00      	cmp	r3, #0
 80299ea:	d105      	bne.n	80299f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80299ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80299f0:	4b5a      	ldr	r3, [pc, #360]	; (8029b5c <HAL_UART_IRQHandler+0x2b0>)
 80299f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80299f4:	2b00      	cmp	r3, #0
 80299f6:	d00b      	beq.n	8029a10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80299f8:	687b      	ldr	r3, [r7, #4]
 80299fa:	681b      	ldr	r3, [r3, #0]
 80299fc:	2208      	movs	r2, #8
 80299fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8029a00:	687b      	ldr	r3, [r7, #4]
 8029a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8029a06:	f043 0208 	orr.w	r2, r3, #8
 8029a0a:	687b      	ldr	r3, [r7, #4]
 8029a0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8029a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8029a18:	2b00      	cmp	r3, #0
 8029a1a:	d012      	beq.n	8029a42 <HAL_UART_IRQHandler+0x196>
 8029a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029a20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8029a24:	2b00      	cmp	r3, #0
 8029a26:	d00c      	beq.n	8029a42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8029a28:	687b      	ldr	r3, [r7, #4]
 8029a2a:	681b      	ldr	r3, [r3, #0]
 8029a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8029a30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8029a32:	687b      	ldr	r3, [r7, #4]
 8029a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8029a38:	f043 0220 	orr.w	r2, r3, #32
 8029a3c:	687b      	ldr	r3, [r7, #4]
 8029a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8029a42:	687b      	ldr	r3, [r7, #4]
 8029a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8029a48:	2b00      	cmp	r3, #0
 8029a4a:	f000 82c0 	beq.w	8029fce <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8029a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a52:	f003 0320 	and.w	r3, r3, #32
 8029a56:	2b00      	cmp	r3, #0
 8029a58:	d013      	beq.n	8029a82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8029a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029a5e:	f003 0320 	and.w	r3, r3, #32
 8029a62:	2b00      	cmp	r3, #0
 8029a64:	d105      	bne.n	8029a72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8029a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8029a6e:	2b00      	cmp	r3, #0
 8029a70:	d007      	beq.n	8029a82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8029a72:	687b      	ldr	r3, [r7, #4]
 8029a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029a76:	2b00      	cmp	r3, #0
 8029a78:	d003      	beq.n	8029a82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8029a7a:	687b      	ldr	r3, [r7, #4]
 8029a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029a7e:	6878      	ldr	r0, [r7, #4]
 8029a80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8029a82:	687b      	ldr	r3, [r7, #4]
 8029a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8029a88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8029a8c:	687b      	ldr	r3, [r7, #4]
 8029a8e:	681b      	ldr	r3, [r3, #0]
 8029a90:	689b      	ldr	r3, [r3, #8]
 8029a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029a96:	2b40      	cmp	r3, #64	; 0x40
 8029a98:	d005      	beq.n	8029aa6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8029a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8029a9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8029aa2:	2b00      	cmp	r3, #0
 8029aa4:	d04f      	beq.n	8029b46 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8029aa6:	6878      	ldr	r0, [r7, #4]
 8029aa8:	f001 fbd2 	bl	802b250 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029aac:	687b      	ldr	r3, [r7, #4]
 8029aae:	681b      	ldr	r3, [r3, #0]
 8029ab0:	689b      	ldr	r3, [r3, #8]
 8029ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029ab6:	2b40      	cmp	r3, #64	; 0x40
 8029ab8:	d141      	bne.n	8029b3e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029aba:	687b      	ldr	r3, [r7, #4]
 8029abc:	681b      	ldr	r3, [r3, #0]
 8029abe:	3308      	adds	r3, #8
 8029ac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8029ac8:	e853 3f00 	ldrex	r3, [r3]
 8029acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8029ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8029adc:	687b      	ldr	r3, [r7, #4]
 8029ade:	681b      	ldr	r3, [r3, #0]
 8029ae0:	3308      	adds	r3, #8
 8029ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8029ae6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8029aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029aee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8029af2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8029af6:	e841 2300 	strex	r3, r2, [r1]
 8029afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8029afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8029b02:	2b00      	cmp	r3, #0
 8029b04:	d1d9      	bne.n	8029aba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8029b06:	687b      	ldr	r3, [r7, #4]
 8029b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029b0a:	2b00      	cmp	r3, #0
 8029b0c:	d013      	beq.n	8029b36 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8029b0e:	687b      	ldr	r3, [r7, #4]
 8029b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029b12:	4a14      	ldr	r2, [pc, #80]	; (8029b64 <HAL_UART_IRQHandler+0x2b8>)
 8029b14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8029b16:	687b      	ldr	r3, [r7, #4]
 8029b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029b1a:	4618      	mov	r0, r3
 8029b1c:	f7f9 fcd0 	bl	80234c0 <HAL_DMA_Abort_IT>
 8029b20:	4603      	mov	r3, r0
 8029b22:	2b00      	cmp	r3, #0
 8029b24:	d017      	beq.n	8029b56 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8029b26:	687b      	ldr	r3, [r7, #4]
 8029b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029b2c:	687a      	ldr	r2, [r7, #4]
 8029b2e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8029b30:	4610      	mov	r0, r2
 8029b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b34:	e00f      	b.n	8029b56 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8029b36:	6878      	ldr	r0, [r7, #4]
 8029b38:	f000 fa74 	bl	802a024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b3c:	e00b      	b.n	8029b56 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8029b3e:	6878      	ldr	r0, [r7, #4]
 8029b40:	f000 fa70 	bl	802a024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b44:	e007      	b.n	8029b56 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8029b46:	6878      	ldr	r0, [r7, #4]
 8029b48:	f000 fa6c 	bl	802a024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029b4c:	687b      	ldr	r3, [r7, #4]
 8029b4e:	2200      	movs	r2, #0
 8029b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8029b54:	e23b      	b.n	8029fce <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b56:	bf00      	nop
    return;
 8029b58:	e239      	b.n	8029fce <HAL_UART_IRQHandler+0x722>
 8029b5a:	bf00      	nop
 8029b5c:	10000001 	.word	0x10000001
 8029b60:	04000120 	.word	0x04000120
 8029b64:	0802b5a9 	.word	0x0802b5a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029b68:	687b      	ldr	r3, [r7, #4]
 8029b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029b6c:	2b01      	cmp	r3, #1
 8029b6e:	f040 81ce 	bne.w	8029f0e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8029b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029b76:	f003 0310 	and.w	r3, r3, #16
 8029b7a:	2b00      	cmp	r3, #0
 8029b7c:	f000 81c7 	beq.w	8029f0e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8029b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029b84:	f003 0310 	and.w	r3, r3, #16
 8029b88:	2b00      	cmp	r3, #0
 8029b8a:	f000 81c0 	beq.w	8029f0e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8029b8e:	687b      	ldr	r3, [r7, #4]
 8029b90:	681b      	ldr	r3, [r3, #0]
 8029b92:	2210      	movs	r2, #16
 8029b94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b96:	687b      	ldr	r3, [r7, #4]
 8029b98:	681b      	ldr	r3, [r3, #0]
 8029b9a:	689b      	ldr	r3, [r3, #8]
 8029b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029ba0:	2b40      	cmp	r3, #64	; 0x40
 8029ba2:	f040 813b 	bne.w	8029e1c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8029ba6:	687b      	ldr	r3, [r7, #4]
 8029ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029baa:	681b      	ldr	r3, [r3, #0]
 8029bac:	4a8b      	ldr	r2, [pc, #556]	; (8029ddc <HAL_UART_IRQHandler+0x530>)
 8029bae:	4293      	cmp	r3, r2
 8029bb0:	d059      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029bb2:	687b      	ldr	r3, [r7, #4]
 8029bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029bb6:	681b      	ldr	r3, [r3, #0]
 8029bb8:	4a89      	ldr	r2, [pc, #548]	; (8029de0 <HAL_UART_IRQHandler+0x534>)
 8029bba:	4293      	cmp	r3, r2
 8029bbc:	d053      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029bbe:	687b      	ldr	r3, [r7, #4]
 8029bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029bc2:	681b      	ldr	r3, [r3, #0]
 8029bc4:	4a87      	ldr	r2, [pc, #540]	; (8029de4 <HAL_UART_IRQHandler+0x538>)
 8029bc6:	4293      	cmp	r3, r2
 8029bc8:	d04d      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029bca:	687b      	ldr	r3, [r7, #4]
 8029bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029bce:	681b      	ldr	r3, [r3, #0]
 8029bd0:	4a85      	ldr	r2, [pc, #532]	; (8029de8 <HAL_UART_IRQHandler+0x53c>)
 8029bd2:	4293      	cmp	r3, r2
 8029bd4:	d047      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029bd6:	687b      	ldr	r3, [r7, #4]
 8029bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029bda:	681b      	ldr	r3, [r3, #0]
 8029bdc:	4a83      	ldr	r2, [pc, #524]	; (8029dec <HAL_UART_IRQHandler+0x540>)
 8029bde:	4293      	cmp	r3, r2
 8029be0:	d041      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029be2:	687b      	ldr	r3, [r7, #4]
 8029be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029be6:	681b      	ldr	r3, [r3, #0]
 8029be8:	4a81      	ldr	r2, [pc, #516]	; (8029df0 <HAL_UART_IRQHandler+0x544>)
 8029bea:	4293      	cmp	r3, r2
 8029bec:	d03b      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029bee:	687b      	ldr	r3, [r7, #4]
 8029bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029bf2:	681b      	ldr	r3, [r3, #0]
 8029bf4:	4a7f      	ldr	r2, [pc, #508]	; (8029df4 <HAL_UART_IRQHandler+0x548>)
 8029bf6:	4293      	cmp	r3, r2
 8029bf8:	d035      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029bfa:	687b      	ldr	r3, [r7, #4]
 8029bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029bfe:	681b      	ldr	r3, [r3, #0]
 8029c00:	4a7d      	ldr	r2, [pc, #500]	; (8029df8 <HAL_UART_IRQHandler+0x54c>)
 8029c02:	4293      	cmp	r3, r2
 8029c04:	d02f      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029c06:	687b      	ldr	r3, [r7, #4]
 8029c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c0a:	681b      	ldr	r3, [r3, #0]
 8029c0c:	4a7b      	ldr	r2, [pc, #492]	; (8029dfc <HAL_UART_IRQHandler+0x550>)
 8029c0e:	4293      	cmp	r3, r2
 8029c10:	d029      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029c12:	687b      	ldr	r3, [r7, #4]
 8029c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c16:	681b      	ldr	r3, [r3, #0]
 8029c18:	4a79      	ldr	r2, [pc, #484]	; (8029e00 <HAL_UART_IRQHandler+0x554>)
 8029c1a:	4293      	cmp	r3, r2
 8029c1c:	d023      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029c1e:	687b      	ldr	r3, [r7, #4]
 8029c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c22:	681b      	ldr	r3, [r3, #0]
 8029c24:	4a77      	ldr	r2, [pc, #476]	; (8029e04 <HAL_UART_IRQHandler+0x558>)
 8029c26:	4293      	cmp	r3, r2
 8029c28:	d01d      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029c2a:	687b      	ldr	r3, [r7, #4]
 8029c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c2e:	681b      	ldr	r3, [r3, #0]
 8029c30:	4a75      	ldr	r2, [pc, #468]	; (8029e08 <HAL_UART_IRQHandler+0x55c>)
 8029c32:	4293      	cmp	r3, r2
 8029c34:	d017      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029c36:	687b      	ldr	r3, [r7, #4]
 8029c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c3a:	681b      	ldr	r3, [r3, #0]
 8029c3c:	4a73      	ldr	r2, [pc, #460]	; (8029e0c <HAL_UART_IRQHandler+0x560>)
 8029c3e:	4293      	cmp	r3, r2
 8029c40:	d011      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029c42:	687b      	ldr	r3, [r7, #4]
 8029c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c46:	681b      	ldr	r3, [r3, #0]
 8029c48:	4a71      	ldr	r2, [pc, #452]	; (8029e10 <HAL_UART_IRQHandler+0x564>)
 8029c4a:	4293      	cmp	r3, r2
 8029c4c:	d00b      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029c4e:	687b      	ldr	r3, [r7, #4]
 8029c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c52:	681b      	ldr	r3, [r3, #0]
 8029c54:	4a6f      	ldr	r2, [pc, #444]	; (8029e14 <HAL_UART_IRQHandler+0x568>)
 8029c56:	4293      	cmp	r3, r2
 8029c58:	d005      	beq.n	8029c66 <HAL_UART_IRQHandler+0x3ba>
 8029c5a:	687b      	ldr	r3, [r7, #4]
 8029c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c5e:	681b      	ldr	r3, [r3, #0]
 8029c60:	4a6d      	ldr	r2, [pc, #436]	; (8029e18 <HAL_UART_IRQHandler+0x56c>)
 8029c62:	4293      	cmp	r3, r2
 8029c64:	d105      	bne.n	8029c72 <HAL_UART_IRQHandler+0x3c6>
 8029c66:	687b      	ldr	r3, [r7, #4]
 8029c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c6a:	681b      	ldr	r3, [r3, #0]
 8029c6c:	685b      	ldr	r3, [r3, #4]
 8029c6e:	b29b      	uxth	r3, r3
 8029c70:	e004      	b.n	8029c7c <HAL_UART_IRQHandler+0x3d0>
 8029c72:	687b      	ldr	r3, [r7, #4]
 8029c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c76:	681b      	ldr	r3, [r3, #0]
 8029c78:	685b      	ldr	r3, [r3, #4]
 8029c7a:	b29b      	uxth	r3, r3
 8029c7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8029c80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8029c84:	2b00      	cmp	r3, #0
 8029c86:	f000 81a4 	beq.w	8029fd2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8029c8a:	687b      	ldr	r3, [r7, #4]
 8029c8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8029c90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029c94:	429a      	cmp	r2, r3
 8029c96:	f080 819c 	bcs.w	8029fd2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8029c9a:	687b      	ldr	r3, [r7, #4]
 8029c9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029ca0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8029ca4:	687b      	ldr	r3, [r7, #4]
 8029ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029ca8:	69db      	ldr	r3, [r3, #28]
 8029caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029cae:	f000 8086 	beq.w	8029dbe <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8029cb2:	687b      	ldr	r3, [r7, #4]
 8029cb4:	681b      	ldr	r3, [r3, #0]
 8029cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029cbe:	e853 3f00 	ldrex	r3, [r3]
 8029cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8029cc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8029cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029cce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8029cd2:	687b      	ldr	r3, [r7, #4]
 8029cd4:	681b      	ldr	r3, [r3, #0]
 8029cd6:	461a      	mov	r2, r3
 8029cd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8029cdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8029ce0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029ce4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8029ce8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8029cec:	e841 2300 	strex	r3, r2, [r1]
 8029cf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8029cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8029cf8:	2b00      	cmp	r3, #0
 8029cfa:	d1da      	bne.n	8029cb2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029cfc:	687b      	ldr	r3, [r7, #4]
 8029cfe:	681b      	ldr	r3, [r3, #0]
 8029d00:	3308      	adds	r3, #8
 8029d02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029d06:	e853 3f00 	ldrex	r3, [r3]
 8029d0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8029d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029d0e:	f023 0301 	bic.w	r3, r3, #1
 8029d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029d16:	687b      	ldr	r3, [r7, #4]
 8029d18:	681b      	ldr	r3, [r3, #0]
 8029d1a:	3308      	adds	r3, #8
 8029d1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8029d20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8029d24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029d26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8029d28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8029d2c:	e841 2300 	strex	r3, r2, [r1]
 8029d30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8029d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8029d34:	2b00      	cmp	r3, #0
 8029d36:	d1e1      	bne.n	8029cfc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029d38:	687b      	ldr	r3, [r7, #4]
 8029d3a:	681b      	ldr	r3, [r3, #0]
 8029d3c:	3308      	adds	r3, #8
 8029d3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8029d42:	e853 3f00 	ldrex	r3, [r3]
 8029d46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8029d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8029d52:	687b      	ldr	r3, [r7, #4]
 8029d54:	681b      	ldr	r3, [r3, #0]
 8029d56:	3308      	adds	r3, #8
 8029d58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8029d5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8029d5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029d60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8029d62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8029d64:	e841 2300 	strex	r3, r2, [r1]
 8029d68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8029d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8029d6c:	2b00      	cmp	r3, #0
 8029d6e:	d1e3      	bne.n	8029d38 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8029d70:	687b      	ldr	r3, [r7, #4]
 8029d72:	2220      	movs	r2, #32
 8029d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029d78:	687b      	ldr	r3, [r7, #4]
 8029d7a:	2200      	movs	r2, #0
 8029d7c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029d7e:	687b      	ldr	r3, [r7, #4]
 8029d80:	681b      	ldr	r3, [r3, #0]
 8029d82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d86:	e853 3f00 	ldrex	r3, [r3]
 8029d8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8029d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029d8e:	f023 0310 	bic.w	r3, r3, #16
 8029d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8029d96:	687b      	ldr	r3, [r7, #4]
 8029d98:	681b      	ldr	r3, [r3, #0]
 8029d9a:	461a      	mov	r2, r3
 8029d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8029da0:	65bb      	str	r3, [r7, #88]	; 0x58
 8029da2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029da4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8029da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029da8:	e841 2300 	strex	r3, r2, [r1]
 8029dac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8029dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029db0:	2b00      	cmp	r3, #0
 8029db2:	d1e4      	bne.n	8029d7e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8029db4:	687b      	ldr	r3, [r7, #4]
 8029db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029db8:	4618      	mov	r0, r3
 8029dba:	f7f9 f863 	bl	8022e84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8029dbe:	687b      	ldr	r3, [r7, #4]
 8029dc0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8029dc4:	687b      	ldr	r3, [r7, #4]
 8029dc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8029dca:	b29b      	uxth	r3, r3
 8029dcc:	1ad3      	subs	r3, r2, r3
 8029dce:	b29b      	uxth	r3, r3
 8029dd0:	4619      	mov	r1, r3
 8029dd2:	6878      	ldr	r0, [r7, #4]
 8029dd4:	f7f7 fa4e 	bl	8021274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8029dd8:	e0fb      	b.n	8029fd2 <HAL_UART_IRQHandler+0x726>
 8029dda:	bf00      	nop
 8029ddc:	40020010 	.word	0x40020010
 8029de0:	40020028 	.word	0x40020028
 8029de4:	40020040 	.word	0x40020040
 8029de8:	40020058 	.word	0x40020058
 8029dec:	40020070 	.word	0x40020070
 8029df0:	40020088 	.word	0x40020088
 8029df4:	400200a0 	.word	0x400200a0
 8029df8:	400200b8 	.word	0x400200b8
 8029dfc:	40020410 	.word	0x40020410
 8029e00:	40020428 	.word	0x40020428
 8029e04:	40020440 	.word	0x40020440
 8029e08:	40020458 	.word	0x40020458
 8029e0c:	40020470 	.word	0x40020470
 8029e10:	40020488 	.word	0x40020488
 8029e14:	400204a0 	.word	0x400204a0
 8029e18:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8029e1c:	687b      	ldr	r3, [r7, #4]
 8029e1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8029e22:	687b      	ldr	r3, [r7, #4]
 8029e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8029e28:	b29b      	uxth	r3, r3
 8029e2a:	1ad3      	subs	r3, r2, r3
 8029e2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8029e30:	687b      	ldr	r3, [r7, #4]
 8029e32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8029e36:	b29b      	uxth	r3, r3
 8029e38:	2b00      	cmp	r3, #0
 8029e3a:	f000 80cc 	beq.w	8029fd6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8029e3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029e42:	2b00      	cmp	r3, #0
 8029e44:	f000 80c7 	beq.w	8029fd6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8029e48:	687b      	ldr	r3, [r7, #4]
 8029e4a:	681b      	ldr	r3, [r3, #0]
 8029e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029e50:	e853 3f00 	ldrex	r3, [r3]
 8029e54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8029e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029e58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8029e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8029e60:	687b      	ldr	r3, [r7, #4]
 8029e62:	681b      	ldr	r3, [r3, #0]
 8029e64:	461a      	mov	r2, r3
 8029e66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8029e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8029e6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029e6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8029e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029e72:	e841 2300 	strex	r3, r2, [r1]
 8029e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8029e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029e7a:	2b00      	cmp	r3, #0
 8029e7c:	d1e4      	bne.n	8029e48 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8029e7e:	687b      	ldr	r3, [r7, #4]
 8029e80:	681b      	ldr	r3, [r3, #0]
 8029e82:	3308      	adds	r3, #8
 8029e84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e88:	e853 3f00 	ldrex	r3, [r3]
 8029e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8029e8e:	6a3a      	ldr	r2, [r7, #32]
 8029e90:	4b54      	ldr	r3, [pc, #336]	; (8029fe4 <HAL_UART_IRQHandler+0x738>)
 8029e92:	4013      	ands	r3, r2
 8029e94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8029e98:	687b      	ldr	r3, [r7, #4]
 8029e9a:	681b      	ldr	r3, [r3, #0]
 8029e9c:	3308      	adds	r3, #8
 8029e9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8029ea2:	633a      	str	r2, [r7, #48]	; 0x30
 8029ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8029ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029eaa:	e841 2300 	strex	r3, r2, [r1]
 8029eae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8029eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029eb2:	2b00      	cmp	r3, #0
 8029eb4:	d1e3      	bne.n	8029e7e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8029eb6:	687b      	ldr	r3, [r7, #4]
 8029eb8:	2220      	movs	r2, #32
 8029eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029ebe:	687b      	ldr	r3, [r7, #4]
 8029ec0:	2200      	movs	r2, #0
 8029ec2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8029ec4:	687b      	ldr	r3, [r7, #4]
 8029ec6:	2200      	movs	r2, #0
 8029ec8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029eca:	687b      	ldr	r3, [r7, #4]
 8029ecc:	681b      	ldr	r3, [r3, #0]
 8029ece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029ed0:	693b      	ldr	r3, [r7, #16]
 8029ed2:	e853 3f00 	ldrex	r3, [r3]
 8029ed6:	60fb      	str	r3, [r7, #12]
   return(result);
 8029ed8:	68fb      	ldr	r3, [r7, #12]
 8029eda:	f023 0310 	bic.w	r3, r3, #16
 8029ede:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029ee2:	687b      	ldr	r3, [r7, #4]
 8029ee4:	681b      	ldr	r3, [r3, #0]
 8029ee6:	461a      	mov	r2, r3
 8029ee8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8029eec:	61fb      	str	r3, [r7, #28]
 8029eee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029ef0:	69b9      	ldr	r1, [r7, #24]
 8029ef2:	69fa      	ldr	r2, [r7, #28]
 8029ef4:	e841 2300 	strex	r3, r2, [r1]
 8029ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8029efa:	697b      	ldr	r3, [r7, #20]
 8029efc:	2b00      	cmp	r3, #0
 8029efe:	d1e4      	bne.n	8029eca <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8029f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029f04:	4619      	mov	r1, r3
 8029f06:	6878      	ldr	r0, [r7, #4]
 8029f08:	f7f7 f9b4 	bl	8021274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8029f0c:	e063      	b.n	8029fd6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8029f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029f16:	2b00      	cmp	r3, #0
 8029f18:	d00e      	beq.n	8029f38 <HAL_UART_IRQHandler+0x68c>
 8029f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8029f22:	2b00      	cmp	r3, #0
 8029f24:	d008      	beq.n	8029f38 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8029f26:	687b      	ldr	r3, [r7, #4]
 8029f28:	681b      	ldr	r3, [r3, #0]
 8029f2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8029f2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8029f30:	6878      	ldr	r0, [r7, #4]
 8029f32:	f001 fb7a 	bl	802b62a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8029f36:	e051      	b.n	8029fdc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8029f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029f40:	2b00      	cmp	r3, #0
 8029f42:	d014      	beq.n	8029f6e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8029f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029f4c:	2b00      	cmp	r3, #0
 8029f4e:	d105      	bne.n	8029f5c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8029f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8029f58:	2b00      	cmp	r3, #0
 8029f5a:	d008      	beq.n	8029f6e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8029f5c:	687b      	ldr	r3, [r7, #4]
 8029f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029f60:	2b00      	cmp	r3, #0
 8029f62:	d03a      	beq.n	8029fda <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8029f64:	687b      	ldr	r3, [r7, #4]
 8029f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029f68:	6878      	ldr	r0, [r7, #4]
 8029f6a:	4798      	blx	r3
    }
    return;
 8029f6c:	e035      	b.n	8029fda <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8029f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029f76:	2b00      	cmp	r3, #0
 8029f78:	d009      	beq.n	8029f8e <HAL_UART_IRQHandler+0x6e2>
 8029f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029f82:	2b00      	cmp	r3, #0
 8029f84:	d003      	beq.n	8029f8e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8029f86:	6878      	ldr	r0, [r7, #4]
 8029f88:	f001 fb24 	bl	802b5d4 <UART_EndTransmit_IT>
    return;
 8029f8c:	e026      	b.n	8029fdc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8029f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8029f96:	2b00      	cmp	r3, #0
 8029f98:	d009      	beq.n	8029fae <HAL_UART_IRQHandler+0x702>
 8029f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029f9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8029fa2:	2b00      	cmp	r3, #0
 8029fa4:	d003      	beq.n	8029fae <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8029fa6:	6878      	ldr	r0, [r7, #4]
 8029fa8:	f001 fb53 	bl	802b652 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8029fac:	e016      	b.n	8029fdc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8029fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8029fb6:	2b00      	cmp	r3, #0
 8029fb8:	d010      	beq.n	8029fdc <HAL_UART_IRQHandler+0x730>
 8029fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029fbe:	2b00      	cmp	r3, #0
 8029fc0:	da0c      	bge.n	8029fdc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8029fc2:	6878      	ldr	r0, [r7, #4]
 8029fc4:	f001 fb3b 	bl	802b63e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8029fc8:	e008      	b.n	8029fdc <HAL_UART_IRQHandler+0x730>
      return;
 8029fca:	bf00      	nop
 8029fcc:	e006      	b.n	8029fdc <HAL_UART_IRQHandler+0x730>
    return;
 8029fce:	bf00      	nop
 8029fd0:	e004      	b.n	8029fdc <HAL_UART_IRQHandler+0x730>
      return;
 8029fd2:	bf00      	nop
 8029fd4:	e002      	b.n	8029fdc <HAL_UART_IRQHandler+0x730>
      return;
 8029fd6:	bf00      	nop
 8029fd8:	e000      	b.n	8029fdc <HAL_UART_IRQHandler+0x730>
    return;
 8029fda:	bf00      	nop
  }
}
 8029fdc:	37e8      	adds	r7, #232	; 0xe8
 8029fde:	46bd      	mov	sp, r7
 8029fe0:	bd80      	pop	{r7, pc}
 8029fe2:	bf00      	nop
 8029fe4:	effffffe 	.word	0xeffffffe

08029fe8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8029fe8:	b480      	push	{r7}
 8029fea:	b083      	sub	sp, #12
 8029fec:	af00      	add	r7, sp, #0
 8029fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8029ff0:	bf00      	nop
 8029ff2:	370c      	adds	r7, #12
 8029ff4:	46bd      	mov	sp, r7
 8029ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ffa:	4770      	bx	lr

08029ffc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8029ffc:	b480      	push	{r7}
 8029ffe:	b083      	sub	sp, #12
 802a000:	af00      	add	r7, sp, #0
 802a002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 802a004:	bf00      	nop
 802a006:	370c      	adds	r7, #12
 802a008:	46bd      	mov	sp, r7
 802a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a00e:	4770      	bx	lr

0802a010 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 802a010:	b480      	push	{r7}
 802a012:	b083      	sub	sp, #12
 802a014:	af00      	add	r7, sp, #0
 802a016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 802a018:	bf00      	nop
 802a01a:	370c      	adds	r7, #12
 802a01c:	46bd      	mov	sp, r7
 802a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a022:	4770      	bx	lr

0802a024 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802a024:	b480      	push	{r7}
 802a026:	b083      	sub	sp, #12
 802a028:	af00      	add	r7, sp, #0
 802a02a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 802a02c:	bf00      	nop
 802a02e:	370c      	adds	r7, #12
 802a030:	46bd      	mov	sp, r7
 802a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a036:	4770      	bx	lr

0802a038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 802a038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802a03c:	b092      	sub	sp, #72	; 0x48
 802a03e:	af00      	add	r7, sp, #0
 802a040:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 802a042:	2300      	movs	r3, #0
 802a044:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802a048:	697b      	ldr	r3, [r7, #20]
 802a04a:	689a      	ldr	r2, [r3, #8]
 802a04c:	697b      	ldr	r3, [r7, #20]
 802a04e:	691b      	ldr	r3, [r3, #16]
 802a050:	431a      	orrs	r2, r3
 802a052:	697b      	ldr	r3, [r7, #20]
 802a054:	695b      	ldr	r3, [r3, #20]
 802a056:	431a      	orrs	r2, r3
 802a058:	697b      	ldr	r3, [r7, #20]
 802a05a:	69db      	ldr	r3, [r3, #28]
 802a05c:	4313      	orrs	r3, r2
 802a05e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802a060:	697b      	ldr	r3, [r7, #20]
 802a062:	681b      	ldr	r3, [r3, #0]
 802a064:	681a      	ldr	r2, [r3, #0]
 802a066:	4bbe      	ldr	r3, [pc, #760]	; (802a360 <UART_SetConfig+0x328>)
 802a068:	4013      	ands	r3, r2
 802a06a:	697a      	ldr	r2, [r7, #20]
 802a06c:	6812      	ldr	r2, [r2, #0]
 802a06e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802a070:	430b      	orrs	r3, r1
 802a072:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802a074:	697b      	ldr	r3, [r7, #20]
 802a076:	681b      	ldr	r3, [r3, #0]
 802a078:	685b      	ldr	r3, [r3, #4]
 802a07a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802a07e:	697b      	ldr	r3, [r7, #20]
 802a080:	68da      	ldr	r2, [r3, #12]
 802a082:	697b      	ldr	r3, [r7, #20]
 802a084:	681b      	ldr	r3, [r3, #0]
 802a086:	430a      	orrs	r2, r1
 802a088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802a08a:	697b      	ldr	r3, [r7, #20]
 802a08c:	699b      	ldr	r3, [r3, #24]
 802a08e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 802a090:	697b      	ldr	r3, [r7, #20]
 802a092:	681b      	ldr	r3, [r3, #0]
 802a094:	4ab3      	ldr	r2, [pc, #716]	; (802a364 <UART_SetConfig+0x32c>)
 802a096:	4293      	cmp	r3, r2
 802a098:	d004      	beq.n	802a0a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802a09a:	697b      	ldr	r3, [r7, #20]
 802a09c:	6a1b      	ldr	r3, [r3, #32]
 802a09e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802a0a0:	4313      	orrs	r3, r2
 802a0a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 802a0a4:	697b      	ldr	r3, [r7, #20]
 802a0a6:	681b      	ldr	r3, [r3, #0]
 802a0a8:	689a      	ldr	r2, [r3, #8]
 802a0aa:	4baf      	ldr	r3, [pc, #700]	; (802a368 <UART_SetConfig+0x330>)
 802a0ac:	4013      	ands	r3, r2
 802a0ae:	697a      	ldr	r2, [r7, #20]
 802a0b0:	6812      	ldr	r2, [r2, #0]
 802a0b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802a0b4:	430b      	orrs	r3, r1
 802a0b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 802a0b8:	697b      	ldr	r3, [r7, #20]
 802a0ba:	681b      	ldr	r3, [r3, #0]
 802a0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a0be:	f023 010f 	bic.w	r1, r3, #15
 802a0c2:	697b      	ldr	r3, [r7, #20]
 802a0c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802a0c6:	697b      	ldr	r3, [r7, #20]
 802a0c8:	681b      	ldr	r3, [r3, #0]
 802a0ca:	430a      	orrs	r2, r1
 802a0cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802a0ce:	697b      	ldr	r3, [r7, #20]
 802a0d0:	681b      	ldr	r3, [r3, #0]
 802a0d2:	4aa6      	ldr	r2, [pc, #664]	; (802a36c <UART_SetConfig+0x334>)
 802a0d4:	4293      	cmp	r3, r2
 802a0d6:	d177      	bne.n	802a1c8 <UART_SetConfig+0x190>
 802a0d8:	4ba5      	ldr	r3, [pc, #660]	; (802a370 <UART_SetConfig+0x338>)
 802a0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a0dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802a0e0:	2b28      	cmp	r3, #40	; 0x28
 802a0e2:	d86d      	bhi.n	802a1c0 <UART_SetConfig+0x188>
 802a0e4:	a201      	add	r2, pc, #4	; (adr r2, 802a0ec <UART_SetConfig+0xb4>)
 802a0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a0ea:	bf00      	nop
 802a0ec:	0802a191 	.word	0x0802a191
 802a0f0:	0802a1c1 	.word	0x0802a1c1
 802a0f4:	0802a1c1 	.word	0x0802a1c1
 802a0f8:	0802a1c1 	.word	0x0802a1c1
 802a0fc:	0802a1c1 	.word	0x0802a1c1
 802a100:	0802a1c1 	.word	0x0802a1c1
 802a104:	0802a1c1 	.word	0x0802a1c1
 802a108:	0802a1c1 	.word	0x0802a1c1
 802a10c:	0802a199 	.word	0x0802a199
 802a110:	0802a1c1 	.word	0x0802a1c1
 802a114:	0802a1c1 	.word	0x0802a1c1
 802a118:	0802a1c1 	.word	0x0802a1c1
 802a11c:	0802a1c1 	.word	0x0802a1c1
 802a120:	0802a1c1 	.word	0x0802a1c1
 802a124:	0802a1c1 	.word	0x0802a1c1
 802a128:	0802a1c1 	.word	0x0802a1c1
 802a12c:	0802a1a1 	.word	0x0802a1a1
 802a130:	0802a1c1 	.word	0x0802a1c1
 802a134:	0802a1c1 	.word	0x0802a1c1
 802a138:	0802a1c1 	.word	0x0802a1c1
 802a13c:	0802a1c1 	.word	0x0802a1c1
 802a140:	0802a1c1 	.word	0x0802a1c1
 802a144:	0802a1c1 	.word	0x0802a1c1
 802a148:	0802a1c1 	.word	0x0802a1c1
 802a14c:	0802a1a9 	.word	0x0802a1a9
 802a150:	0802a1c1 	.word	0x0802a1c1
 802a154:	0802a1c1 	.word	0x0802a1c1
 802a158:	0802a1c1 	.word	0x0802a1c1
 802a15c:	0802a1c1 	.word	0x0802a1c1
 802a160:	0802a1c1 	.word	0x0802a1c1
 802a164:	0802a1c1 	.word	0x0802a1c1
 802a168:	0802a1c1 	.word	0x0802a1c1
 802a16c:	0802a1b1 	.word	0x0802a1b1
 802a170:	0802a1c1 	.word	0x0802a1c1
 802a174:	0802a1c1 	.word	0x0802a1c1
 802a178:	0802a1c1 	.word	0x0802a1c1
 802a17c:	0802a1c1 	.word	0x0802a1c1
 802a180:	0802a1c1 	.word	0x0802a1c1
 802a184:	0802a1c1 	.word	0x0802a1c1
 802a188:	0802a1c1 	.word	0x0802a1c1
 802a18c:	0802a1b9 	.word	0x0802a1b9
 802a190:	2301      	movs	r3, #1
 802a192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a196:	e326      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a198:	2304      	movs	r3, #4
 802a19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a19e:	e322      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a1a0:	2308      	movs	r3, #8
 802a1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a1a6:	e31e      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a1a8:	2310      	movs	r3, #16
 802a1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a1ae:	e31a      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a1b0:	2320      	movs	r3, #32
 802a1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a1b6:	e316      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a1b8:	2340      	movs	r3, #64	; 0x40
 802a1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a1be:	e312      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a1c0:	2380      	movs	r3, #128	; 0x80
 802a1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a1c6:	e30e      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a1c8:	697b      	ldr	r3, [r7, #20]
 802a1ca:	681b      	ldr	r3, [r3, #0]
 802a1cc:	4a69      	ldr	r2, [pc, #420]	; (802a374 <UART_SetConfig+0x33c>)
 802a1ce:	4293      	cmp	r3, r2
 802a1d0:	d130      	bne.n	802a234 <UART_SetConfig+0x1fc>
 802a1d2:	4b67      	ldr	r3, [pc, #412]	; (802a370 <UART_SetConfig+0x338>)
 802a1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a1d6:	f003 0307 	and.w	r3, r3, #7
 802a1da:	2b05      	cmp	r3, #5
 802a1dc:	d826      	bhi.n	802a22c <UART_SetConfig+0x1f4>
 802a1de:	a201      	add	r2, pc, #4	; (adr r2, 802a1e4 <UART_SetConfig+0x1ac>)
 802a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a1e4:	0802a1fd 	.word	0x0802a1fd
 802a1e8:	0802a205 	.word	0x0802a205
 802a1ec:	0802a20d 	.word	0x0802a20d
 802a1f0:	0802a215 	.word	0x0802a215
 802a1f4:	0802a21d 	.word	0x0802a21d
 802a1f8:	0802a225 	.word	0x0802a225
 802a1fc:	2300      	movs	r3, #0
 802a1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a202:	e2f0      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a204:	2304      	movs	r3, #4
 802a206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a20a:	e2ec      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a20c:	2308      	movs	r3, #8
 802a20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a212:	e2e8      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a214:	2310      	movs	r3, #16
 802a216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a21a:	e2e4      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a21c:	2320      	movs	r3, #32
 802a21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a222:	e2e0      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a224:	2340      	movs	r3, #64	; 0x40
 802a226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a22a:	e2dc      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a22c:	2380      	movs	r3, #128	; 0x80
 802a22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a232:	e2d8      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a234:	697b      	ldr	r3, [r7, #20]
 802a236:	681b      	ldr	r3, [r3, #0]
 802a238:	4a4f      	ldr	r2, [pc, #316]	; (802a378 <UART_SetConfig+0x340>)
 802a23a:	4293      	cmp	r3, r2
 802a23c:	d130      	bne.n	802a2a0 <UART_SetConfig+0x268>
 802a23e:	4b4c      	ldr	r3, [pc, #304]	; (802a370 <UART_SetConfig+0x338>)
 802a240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a242:	f003 0307 	and.w	r3, r3, #7
 802a246:	2b05      	cmp	r3, #5
 802a248:	d826      	bhi.n	802a298 <UART_SetConfig+0x260>
 802a24a:	a201      	add	r2, pc, #4	; (adr r2, 802a250 <UART_SetConfig+0x218>)
 802a24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a250:	0802a269 	.word	0x0802a269
 802a254:	0802a271 	.word	0x0802a271
 802a258:	0802a279 	.word	0x0802a279
 802a25c:	0802a281 	.word	0x0802a281
 802a260:	0802a289 	.word	0x0802a289
 802a264:	0802a291 	.word	0x0802a291
 802a268:	2300      	movs	r3, #0
 802a26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a26e:	e2ba      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a270:	2304      	movs	r3, #4
 802a272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a276:	e2b6      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a278:	2308      	movs	r3, #8
 802a27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a27e:	e2b2      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a280:	2310      	movs	r3, #16
 802a282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a286:	e2ae      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a288:	2320      	movs	r3, #32
 802a28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a28e:	e2aa      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a290:	2340      	movs	r3, #64	; 0x40
 802a292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a296:	e2a6      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a298:	2380      	movs	r3, #128	; 0x80
 802a29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a29e:	e2a2      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a2a0:	697b      	ldr	r3, [r7, #20]
 802a2a2:	681b      	ldr	r3, [r3, #0]
 802a2a4:	4a35      	ldr	r2, [pc, #212]	; (802a37c <UART_SetConfig+0x344>)
 802a2a6:	4293      	cmp	r3, r2
 802a2a8:	d130      	bne.n	802a30c <UART_SetConfig+0x2d4>
 802a2aa:	4b31      	ldr	r3, [pc, #196]	; (802a370 <UART_SetConfig+0x338>)
 802a2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a2ae:	f003 0307 	and.w	r3, r3, #7
 802a2b2:	2b05      	cmp	r3, #5
 802a2b4:	d826      	bhi.n	802a304 <UART_SetConfig+0x2cc>
 802a2b6:	a201      	add	r2, pc, #4	; (adr r2, 802a2bc <UART_SetConfig+0x284>)
 802a2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a2bc:	0802a2d5 	.word	0x0802a2d5
 802a2c0:	0802a2dd 	.word	0x0802a2dd
 802a2c4:	0802a2e5 	.word	0x0802a2e5
 802a2c8:	0802a2ed 	.word	0x0802a2ed
 802a2cc:	0802a2f5 	.word	0x0802a2f5
 802a2d0:	0802a2fd 	.word	0x0802a2fd
 802a2d4:	2300      	movs	r3, #0
 802a2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a2da:	e284      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a2dc:	2304      	movs	r3, #4
 802a2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a2e2:	e280      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a2e4:	2308      	movs	r3, #8
 802a2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a2ea:	e27c      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a2ec:	2310      	movs	r3, #16
 802a2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a2f2:	e278      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a2f4:	2320      	movs	r3, #32
 802a2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a2fa:	e274      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a2fc:	2340      	movs	r3, #64	; 0x40
 802a2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a302:	e270      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a304:	2380      	movs	r3, #128	; 0x80
 802a306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a30a:	e26c      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a30c:	697b      	ldr	r3, [r7, #20]
 802a30e:	681b      	ldr	r3, [r3, #0]
 802a310:	4a1b      	ldr	r2, [pc, #108]	; (802a380 <UART_SetConfig+0x348>)
 802a312:	4293      	cmp	r3, r2
 802a314:	d142      	bne.n	802a39c <UART_SetConfig+0x364>
 802a316:	4b16      	ldr	r3, [pc, #88]	; (802a370 <UART_SetConfig+0x338>)
 802a318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a31a:	f003 0307 	and.w	r3, r3, #7
 802a31e:	2b05      	cmp	r3, #5
 802a320:	d838      	bhi.n	802a394 <UART_SetConfig+0x35c>
 802a322:	a201      	add	r2, pc, #4	; (adr r2, 802a328 <UART_SetConfig+0x2f0>)
 802a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a328:	0802a341 	.word	0x0802a341
 802a32c:	0802a349 	.word	0x0802a349
 802a330:	0802a351 	.word	0x0802a351
 802a334:	0802a359 	.word	0x0802a359
 802a338:	0802a385 	.word	0x0802a385
 802a33c:	0802a38d 	.word	0x0802a38d
 802a340:	2300      	movs	r3, #0
 802a342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a346:	e24e      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a348:	2304      	movs	r3, #4
 802a34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a34e:	e24a      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a350:	2308      	movs	r3, #8
 802a352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a356:	e246      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a358:	2310      	movs	r3, #16
 802a35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a35e:	e242      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a360:	cfff69f3 	.word	0xcfff69f3
 802a364:	58000c00 	.word	0x58000c00
 802a368:	11fff4ff 	.word	0x11fff4ff
 802a36c:	40011000 	.word	0x40011000
 802a370:	58024400 	.word	0x58024400
 802a374:	40004400 	.word	0x40004400
 802a378:	40004800 	.word	0x40004800
 802a37c:	40004c00 	.word	0x40004c00
 802a380:	40005000 	.word	0x40005000
 802a384:	2320      	movs	r3, #32
 802a386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a38a:	e22c      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a38c:	2340      	movs	r3, #64	; 0x40
 802a38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a392:	e228      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a394:	2380      	movs	r3, #128	; 0x80
 802a396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a39a:	e224      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a39c:	697b      	ldr	r3, [r7, #20]
 802a39e:	681b      	ldr	r3, [r3, #0]
 802a3a0:	4ab1      	ldr	r2, [pc, #708]	; (802a668 <UART_SetConfig+0x630>)
 802a3a2:	4293      	cmp	r3, r2
 802a3a4:	d176      	bne.n	802a494 <UART_SetConfig+0x45c>
 802a3a6:	4bb1      	ldr	r3, [pc, #708]	; (802a66c <UART_SetConfig+0x634>)
 802a3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a3aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802a3ae:	2b28      	cmp	r3, #40	; 0x28
 802a3b0:	d86c      	bhi.n	802a48c <UART_SetConfig+0x454>
 802a3b2:	a201      	add	r2, pc, #4	; (adr r2, 802a3b8 <UART_SetConfig+0x380>)
 802a3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a3b8:	0802a45d 	.word	0x0802a45d
 802a3bc:	0802a48d 	.word	0x0802a48d
 802a3c0:	0802a48d 	.word	0x0802a48d
 802a3c4:	0802a48d 	.word	0x0802a48d
 802a3c8:	0802a48d 	.word	0x0802a48d
 802a3cc:	0802a48d 	.word	0x0802a48d
 802a3d0:	0802a48d 	.word	0x0802a48d
 802a3d4:	0802a48d 	.word	0x0802a48d
 802a3d8:	0802a465 	.word	0x0802a465
 802a3dc:	0802a48d 	.word	0x0802a48d
 802a3e0:	0802a48d 	.word	0x0802a48d
 802a3e4:	0802a48d 	.word	0x0802a48d
 802a3e8:	0802a48d 	.word	0x0802a48d
 802a3ec:	0802a48d 	.word	0x0802a48d
 802a3f0:	0802a48d 	.word	0x0802a48d
 802a3f4:	0802a48d 	.word	0x0802a48d
 802a3f8:	0802a46d 	.word	0x0802a46d
 802a3fc:	0802a48d 	.word	0x0802a48d
 802a400:	0802a48d 	.word	0x0802a48d
 802a404:	0802a48d 	.word	0x0802a48d
 802a408:	0802a48d 	.word	0x0802a48d
 802a40c:	0802a48d 	.word	0x0802a48d
 802a410:	0802a48d 	.word	0x0802a48d
 802a414:	0802a48d 	.word	0x0802a48d
 802a418:	0802a475 	.word	0x0802a475
 802a41c:	0802a48d 	.word	0x0802a48d
 802a420:	0802a48d 	.word	0x0802a48d
 802a424:	0802a48d 	.word	0x0802a48d
 802a428:	0802a48d 	.word	0x0802a48d
 802a42c:	0802a48d 	.word	0x0802a48d
 802a430:	0802a48d 	.word	0x0802a48d
 802a434:	0802a48d 	.word	0x0802a48d
 802a438:	0802a47d 	.word	0x0802a47d
 802a43c:	0802a48d 	.word	0x0802a48d
 802a440:	0802a48d 	.word	0x0802a48d
 802a444:	0802a48d 	.word	0x0802a48d
 802a448:	0802a48d 	.word	0x0802a48d
 802a44c:	0802a48d 	.word	0x0802a48d
 802a450:	0802a48d 	.word	0x0802a48d
 802a454:	0802a48d 	.word	0x0802a48d
 802a458:	0802a485 	.word	0x0802a485
 802a45c:	2301      	movs	r3, #1
 802a45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a462:	e1c0      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a464:	2304      	movs	r3, #4
 802a466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a46a:	e1bc      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a46c:	2308      	movs	r3, #8
 802a46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a472:	e1b8      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a474:	2310      	movs	r3, #16
 802a476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a47a:	e1b4      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a47c:	2320      	movs	r3, #32
 802a47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a482:	e1b0      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a484:	2340      	movs	r3, #64	; 0x40
 802a486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a48a:	e1ac      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a48c:	2380      	movs	r3, #128	; 0x80
 802a48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a492:	e1a8      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a494:	697b      	ldr	r3, [r7, #20]
 802a496:	681b      	ldr	r3, [r3, #0]
 802a498:	4a75      	ldr	r2, [pc, #468]	; (802a670 <UART_SetConfig+0x638>)
 802a49a:	4293      	cmp	r3, r2
 802a49c:	d130      	bne.n	802a500 <UART_SetConfig+0x4c8>
 802a49e:	4b73      	ldr	r3, [pc, #460]	; (802a66c <UART_SetConfig+0x634>)
 802a4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a4a2:	f003 0307 	and.w	r3, r3, #7
 802a4a6:	2b05      	cmp	r3, #5
 802a4a8:	d826      	bhi.n	802a4f8 <UART_SetConfig+0x4c0>
 802a4aa:	a201      	add	r2, pc, #4	; (adr r2, 802a4b0 <UART_SetConfig+0x478>)
 802a4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a4b0:	0802a4c9 	.word	0x0802a4c9
 802a4b4:	0802a4d1 	.word	0x0802a4d1
 802a4b8:	0802a4d9 	.word	0x0802a4d9
 802a4bc:	0802a4e1 	.word	0x0802a4e1
 802a4c0:	0802a4e9 	.word	0x0802a4e9
 802a4c4:	0802a4f1 	.word	0x0802a4f1
 802a4c8:	2300      	movs	r3, #0
 802a4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4ce:	e18a      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a4d0:	2304      	movs	r3, #4
 802a4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4d6:	e186      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a4d8:	2308      	movs	r3, #8
 802a4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4de:	e182      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a4e0:	2310      	movs	r3, #16
 802a4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4e6:	e17e      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a4e8:	2320      	movs	r3, #32
 802a4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4ee:	e17a      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a4f0:	2340      	movs	r3, #64	; 0x40
 802a4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4f6:	e176      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a4f8:	2380      	movs	r3, #128	; 0x80
 802a4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4fe:	e172      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a500:	697b      	ldr	r3, [r7, #20]
 802a502:	681b      	ldr	r3, [r3, #0]
 802a504:	4a5b      	ldr	r2, [pc, #364]	; (802a674 <UART_SetConfig+0x63c>)
 802a506:	4293      	cmp	r3, r2
 802a508:	d130      	bne.n	802a56c <UART_SetConfig+0x534>
 802a50a:	4b58      	ldr	r3, [pc, #352]	; (802a66c <UART_SetConfig+0x634>)
 802a50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a50e:	f003 0307 	and.w	r3, r3, #7
 802a512:	2b05      	cmp	r3, #5
 802a514:	d826      	bhi.n	802a564 <UART_SetConfig+0x52c>
 802a516:	a201      	add	r2, pc, #4	; (adr r2, 802a51c <UART_SetConfig+0x4e4>)
 802a518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a51c:	0802a535 	.word	0x0802a535
 802a520:	0802a53d 	.word	0x0802a53d
 802a524:	0802a545 	.word	0x0802a545
 802a528:	0802a54d 	.word	0x0802a54d
 802a52c:	0802a555 	.word	0x0802a555
 802a530:	0802a55d 	.word	0x0802a55d
 802a534:	2300      	movs	r3, #0
 802a536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a53a:	e154      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a53c:	2304      	movs	r3, #4
 802a53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a542:	e150      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a544:	2308      	movs	r3, #8
 802a546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a54a:	e14c      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a54c:	2310      	movs	r3, #16
 802a54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a552:	e148      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a554:	2320      	movs	r3, #32
 802a556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a55a:	e144      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a55c:	2340      	movs	r3, #64	; 0x40
 802a55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a562:	e140      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a564:	2380      	movs	r3, #128	; 0x80
 802a566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a56a:	e13c      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a56c:	697b      	ldr	r3, [r7, #20]
 802a56e:	681b      	ldr	r3, [r3, #0]
 802a570:	4a41      	ldr	r2, [pc, #260]	; (802a678 <UART_SetConfig+0x640>)
 802a572:	4293      	cmp	r3, r2
 802a574:	f040 8082 	bne.w	802a67c <UART_SetConfig+0x644>
 802a578:	4b3c      	ldr	r3, [pc, #240]	; (802a66c <UART_SetConfig+0x634>)
 802a57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a57c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802a580:	2b28      	cmp	r3, #40	; 0x28
 802a582:	d86d      	bhi.n	802a660 <UART_SetConfig+0x628>
 802a584:	a201      	add	r2, pc, #4	; (adr r2, 802a58c <UART_SetConfig+0x554>)
 802a586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a58a:	bf00      	nop
 802a58c:	0802a631 	.word	0x0802a631
 802a590:	0802a661 	.word	0x0802a661
 802a594:	0802a661 	.word	0x0802a661
 802a598:	0802a661 	.word	0x0802a661
 802a59c:	0802a661 	.word	0x0802a661
 802a5a0:	0802a661 	.word	0x0802a661
 802a5a4:	0802a661 	.word	0x0802a661
 802a5a8:	0802a661 	.word	0x0802a661
 802a5ac:	0802a639 	.word	0x0802a639
 802a5b0:	0802a661 	.word	0x0802a661
 802a5b4:	0802a661 	.word	0x0802a661
 802a5b8:	0802a661 	.word	0x0802a661
 802a5bc:	0802a661 	.word	0x0802a661
 802a5c0:	0802a661 	.word	0x0802a661
 802a5c4:	0802a661 	.word	0x0802a661
 802a5c8:	0802a661 	.word	0x0802a661
 802a5cc:	0802a641 	.word	0x0802a641
 802a5d0:	0802a661 	.word	0x0802a661
 802a5d4:	0802a661 	.word	0x0802a661
 802a5d8:	0802a661 	.word	0x0802a661
 802a5dc:	0802a661 	.word	0x0802a661
 802a5e0:	0802a661 	.word	0x0802a661
 802a5e4:	0802a661 	.word	0x0802a661
 802a5e8:	0802a661 	.word	0x0802a661
 802a5ec:	0802a649 	.word	0x0802a649
 802a5f0:	0802a661 	.word	0x0802a661
 802a5f4:	0802a661 	.word	0x0802a661
 802a5f8:	0802a661 	.word	0x0802a661
 802a5fc:	0802a661 	.word	0x0802a661
 802a600:	0802a661 	.word	0x0802a661
 802a604:	0802a661 	.word	0x0802a661
 802a608:	0802a661 	.word	0x0802a661
 802a60c:	0802a651 	.word	0x0802a651
 802a610:	0802a661 	.word	0x0802a661
 802a614:	0802a661 	.word	0x0802a661
 802a618:	0802a661 	.word	0x0802a661
 802a61c:	0802a661 	.word	0x0802a661
 802a620:	0802a661 	.word	0x0802a661
 802a624:	0802a661 	.word	0x0802a661
 802a628:	0802a661 	.word	0x0802a661
 802a62c:	0802a659 	.word	0x0802a659
 802a630:	2301      	movs	r3, #1
 802a632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a636:	e0d6      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a638:	2304      	movs	r3, #4
 802a63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a63e:	e0d2      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a640:	2308      	movs	r3, #8
 802a642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a646:	e0ce      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a648:	2310      	movs	r3, #16
 802a64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a64e:	e0ca      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a650:	2320      	movs	r3, #32
 802a652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a656:	e0c6      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a658:	2340      	movs	r3, #64	; 0x40
 802a65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a65e:	e0c2      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a660:	2380      	movs	r3, #128	; 0x80
 802a662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a666:	e0be      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a668:	40011400 	.word	0x40011400
 802a66c:	58024400 	.word	0x58024400
 802a670:	40007800 	.word	0x40007800
 802a674:	40007c00 	.word	0x40007c00
 802a678:	40011800 	.word	0x40011800
 802a67c:	697b      	ldr	r3, [r7, #20]
 802a67e:	681b      	ldr	r3, [r3, #0]
 802a680:	4aad      	ldr	r2, [pc, #692]	; (802a938 <UART_SetConfig+0x900>)
 802a682:	4293      	cmp	r3, r2
 802a684:	d176      	bne.n	802a774 <UART_SetConfig+0x73c>
 802a686:	4bad      	ldr	r3, [pc, #692]	; (802a93c <UART_SetConfig+0x904>)
 802a688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a68a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802a68e:	2b28      	cmp	r3, #40	; 0x28
 802a690:	d86c      	bhi.n	802a76c <UART_SetConfig+0x734>
 802a692:	a201      	add	r2, pc, #4	; (adr r2, 802a698 <UART_SetConfig+0x660>)
 802a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a698:	0802a73d 	.word	0x0802a73d
 802a69c:	0802a76d 	.word	0x0802a76d
 802a6a0:	0802a76d 	.word	0x0802a76d
 802a6a4:	0802a76d 	.word	0x0802a76d
 802a6a8:	0802a76d 	.word	0x0802a76d
 802a6ac:	0802a76d 	.word	0x0802a76d
 802a6b0:	0802a76d 	.word	0x0802a76d
 802a6b4:	0802a76d 	.word	0x0802a76d
 802a6b8:	0802a745 	.word	0x0802a745
 802a6bc:	0802a76d 	.word	0x0802a76d
 802a6c0:	0802a76d 	.word	0x0802a76d
 802a6c4:	0802a76d 	.word	0x0802a76d
 802a6c8:	0802a76d 	.word	0x0802a76d
 802a6cc:	0802a76d 	.word	0x0802a76d
 802a6d0:	0802a76d 	.word	0x0802a76d
 802a6d4:	0802a76d 	.word	0x0802a76d
 802a6d8:	0802a74d 	.word	0x0802a74d
 802a6dc:	0802a76d 	.word	0x0802a76d
 802a6e0:	0802a76d 	.word	0x0802a76d
 802a6e4:	0802a76d 	.word	0x0802a76d
 802a6e8:	0802a76d 	.word	0x0802a76d
 802a6ec:	0802a76d 	.word	0x0802a76d
 802a6f0:	0802a76d 	.word	0x0802a76d
 802a6f4:	0802a76d 	.word	0x0802a76d
 802a6f8:	0802a755 	.word	0x0802a755
 802a6fc:	0802a76d 	.word	0x0802a76d
 802a700:	0802a76d 	.word	0x0802a76d
 802a704:	0802a76d 	.word	0x0802a76d
 802a708:	0802a76d 	.word	0x0802a76d
 802a70c:	0802a76d 	.word	0x0802a76d
 802a710:	0802a76d 	.word	0x0802a76d
 802a714:	0802a76d 	.word	0x0802a76d
 802a718:	0802a75d 	.word	0x0802a75d
 802a71c:	0802a76d 	.word	0x0802a76d
 802a720:	0802a76d 	.word	0x0802a76d
 802a724:	0802a76d 	.word	0x0802a76d
 802a728:	0802a76d 	.word	0x0802a76d
 802a72c:	0802a76d 	.word	0x0802a76d
 802a730:	0802a76d 	.word	0x0802a76d
 802a734:	0802a76d 	.word	0x0802a76d
 802a738:	0802a765 	.word	0x0802a765
 802a73c:	2301      	movs	r3, #1
 802a73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a742:	e050      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a744:	2304      	movs	r3, #4
 802a746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a74a:	e04c      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a74c:	2308      	movs	r3, #8
 802a74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a752:	e048      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a754:	2310      	movs	r3, #16
 802a756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a75a:	e044      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a75c:	2320      	movs	r3, #32
 802a75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a762:	e040      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a764:	2340      	movs	r3, #64	; 0x40
 802a766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a76a:	e03c      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a76c:	2380      	movs	r3, #128	; 0x80
 802a76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a772:	e038      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a774:	697b      	ldr	r3, [r7, #20]
 802a776:	681b      	ldr	r3, [r3, #0]
 802a778:	4a71      	ldr	r2, [pc, #452]	; (802a940 <UART_SetConfig+0x908>)
 802a77a:	4293      	cmp	r3, r2
 802a77c:	d130      	bne.n	802a7e0 <UART_SetConfig+0x7a8>
 802a77e:	4b6f      	ldr	r3, [pc, #444]	; (802a93c <UART_SetConfig+0x904>)
 802a780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802a782:	f003 0307 	and.w	r3, r3, #7
 802a786:	2b05      	cmp	r3, #5
 802a788:	d826      	bhi.n	802a7d8 <UART_SetConfig+0x7a0>
 802a78a:	a201      	add	r2, pc, #4	; (adr r2, 802a790 <UART_SetConfig+0x758>)
 802a78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a790:	0802a7a9 	.word	0x0802a7a9
 802a794:	0802a7b1 	.word	0x0802a7b1
 802a798:	0802a7b9 	.word	0x0802a7b9
 802a79c:	0802a7c1 	.word	0x0802a7c1
 802a7a0:	0802a7c9 	.word	0x0802a7c9
 802a7a4:	0802a7d1 	.word	0x0802a7d1
 802a7a8:	2302      	movs	r3, #2
 802a7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a7ae:	e01a      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a7b0:	2304      	movs	r3, #4
 802a7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a7b6:	e016      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a7b8:	2308      	movs	r3, #8
 802a7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a7be:	e012      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a7c0:	2310      	movs	r3, #16
 802a7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a7c6:	e00e      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a7c8:	2320      	movs	r3, #32
 802a7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a7ce:	e00a      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a7d0:	2340      	movs	r3, #64	; 0x40
 802a7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a7d6:	e006      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a7d8:	2380      	movs	r3, #128	; 0x80
 802a7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a7de:	e002      	b.n	802a7e6 <UART_SetConfig+0x7ae>
 802a7e0:	2380      	movs	r3, #128	; 0x80
 802a7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802a7e6:	697b      	ldr	r3, [r7, #20]
 802a7e8:	681b      	ldr	r3, [r3, #0]
 802a7ea:	4a55      	ldr	r2, [pc, #340]	; (802a940 <UART_SetConfig+0x908>)
 802a7ec:	4293      	cmp	r3, r2
 802a7ee:	f040 80f8 	bne.w	802a9e2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 802a7f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802a7f6:	2b20      	cmp	r3, #32
 802a7f8:	dc46      	bgt.n	802a888 <UART_SetConfig+0x850>
 802a7fa:	2b02      	cmp	r3, #2
 802a7fc:	db75      	blt.n	802a8ea <UART_SetConfig+0x8b2>
 802a7fe:	3b02      	subs	r3, #2
 802a800:	2b1e      	cmp	r3, #30
 802a802:	d872      	bhi.n	802a8ea <UART_SetConfig+0x8b2>
 802a804:	a201      	add	r2, pc, #4	; (adr r2, 802a80c <UART_SetConfig+0x7d4>)
 802a806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a80a:	bf00      	nop
 802a80c:	0802a88f 	.word	0x0802a88f
 802a810:	0802a8eb 	.word	0x0802a8eb
 802a814:	0802a897 	.word	0x0802a897
 802a818:	0802a8eb 	.word	0x0802a8eb
 802a81c:	0802a8eb 	.word	0x0802a8eb
 802a820:	0802a8eb 	.word	0x0802a8eb
 802a824:	0802a8a7 	.word	0x0802a8a7
 802a828:	0802a8eb 	.word	0x0802a8eb
 802a82c:	0802a8eb 	.word	0x0802a8eb
 802a830:	0802a8eb 	.word	0x0802a8eb
 802a834:	0802a8eb 	.word	0x0802a8eb
 802a838:	0802a8eb 	.word	0x0802a8eb
 802a83c:	0802a8eb 	.word	0x0802a8eb
 802a840:	0802a8eb 	.word	0x0802a8eb
 802a844:	0802a8b7 	.word	0x0802a8b7
 802a848:	0802a8eb 	.word	0x0802a8eb
 802a84c:	0802a8eb 	.word	0x0802a8eb
 802a850:	0802a8eb 	.word	0x0802a8eb
 802a854:	0802a8eb 	.word	0x0802a8eb
 802a858:	0802a8eb 	.word	0x0802a8eb
 802a85c:	0802a8eb 	.word	0x0802a8eb
 802a860:	0802a8eb 	.word	0x0802a8eb
 802a864:	0802a8eb 	.word	0x0802a8eb
 802a868:	0802a8eb 	.word	0x0802a8eb
 802a86c:	0802a8eb 	.word	0x0802a8eb
 802a870:	0802a8eb 	.word	0x0802a8eb
 802a874:	0802a8eb 	.word	0x0802a8eb
 802a878:	0802a8eb 	.word	0x0802a8eb
 802a87c:	0802a8eb 	.word	0x0802a8eb
 802a880:	0802a8eb 	.word	0x0802a8eb
 802a884:	0802a8dd 	.word	0x0802a8dd
 802a888:	2b40      	cmp	r3, #64	; 0x40
 802a88a:	d02a      	beq.n	802a8e2 <UART_SetConfig+0x8aa>
 802a88c:	e02d      	b.n	802a8ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 802a88e:	f7fe f815 	bl	80288bc <HAL_RCCEx_GetD3PCLK1Freq>
 802a892:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802a894:	e02f      	b.n	802a8f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802a896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a89a:	4618      	mov	r0, r3
 802a89c:	f7fe f824 	bl	80288e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802a8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802a8a4:	e027      	b.n	802a8f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802a8a6:	f107 0318 	add.w	r3, r7, #24
 802a8aa:	4618      	mov	r0, r3
 802a8ac:	f7fe f970 	bl	8028b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802a8b0:	69fb      	ldr	r3, [r7, #28]
 802a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802a8b4:	e01f      	b.n	802a8f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802a8b6:	4b21      	ldr	r3, [pc, #132]	; (802a93c <UART_SetConfig+0x904>)
 802a8b8:	681b      	ldr	r3, [r3, #0]
 802a8ba:	f003 0320 	and.w	r3, r3, #32
 802a8be:	2b00      	cmp	r3, #0
 802a8c0:	d009      	beq.n	802a8d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802a8c2:	4b1e      	ldr	r3, [pc, #120]	; (802a93c <UART_SetConfig+0x904>)
 802a8c4:	681b      	ldr	r3, [r3, #0]
 802a8c6:	08db      	lsrs	r3, r3, #3
 802a8c8:	f003 0303 	and.w	r3, r3, #3
 802a8cc:	4a1d      	ldr	r2, [pc, #116]	; (802a944 <UART_SetConfig+0x90c>)
 802a8ce:	fa22 f303 	lsr.w	r3, r2, r3
 802a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802a8d4:	e00f      	b.n	802a8f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 802a8d6:	4b1b      	ldr	r3, [pc, #108]	; (802a944 <UART_SetConfig+0x90c>)
 802a8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802a8da:	e00c      	b.n	802a8f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802a8dc:	4b1a      	ldr	r3, [pc, #104]	; (802a948 <UART_SetConfig+0x910>)
 802a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802a8e0:	e009      	b.n	802a8f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802a8e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802a8e8:	e005      	b.n	802a8f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 802a8ea:	2300      	movs	r3, #0
 802a8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802a8ee:	2301      	movs	r3, #1
 802a8f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802a8f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 802a8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a8f8:	2b00      	cmp	r3, #0
 802a8fa:	f000 81ee 	beq.w	802acda <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 802a8fe:	697b      	ldr	r3, [r7, #20]
 802a900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a902:	4a12      	ldr	r2, [pc, #72]	; (802a94c <UART_SetConfig+0x914>)
 802a904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802a908:	461a      	mov	r2, r3
 802a90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a90c:	fbb3 f3f2 	udiv	r3, r3, r2
 802a910:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802a912:	697b      	ldr	r3, [r7, #20]
 802a914:	685a      	ldr	r2, [r3, #4]
 802a916:	4613      	mov	r3, r2
 802a918:	005b      	lsls	r3, r3, #1
 802a91a:	4413      	add	r3, r2
 802a91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802a91e:	429a      	cmp	r2, r3
 802a920:	d305      	bcc.n	802a92e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 802a922:	697b      	ldr	r3, [r7, #20]
 802a924:	685b      	ldr	r3, [r3, #4]
 802a926:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802a928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802a92a:	429a      	cmp	r2, r3
 802a92c:	d910      	bls.n	802a950 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 802a92e:	2301      	movs	r3, #1
 802a930:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802a934:	e1d1      	b.n	802acda <UART_SetConfig+0xca2>
 802a936:	bf00      	nop
 802a938:	40011c00 	.word	0x40011c00
 802a93c:	58024400 	.word	0x58024400
 802a940:	58000c00 	.word	0x58000c00
 802a944:	03d09000 	.word	0x03d09000
 802a948:	003d0900 	.word	0x003d0900
 802a94c:	0803b968 	.word	0x0803b968
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802a950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a952:	2200      	movs	r2, #0
 802a954:	60bb      	str	r3, [r7, #8]
 802a956:	60fa      	str	r2, [r7, #12]
 802a958:	697b      	ldr	r3, [r7, #20]
 802a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a95c:	4ac0      	ldr	r2, [pc, #768]	; (802ac60 <UART_SetConfig+0xc28>)
 802a95e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802a962:	b29b      	uxth	r3, r3
 802a964:	2200      	movs	r2, #0
 802a966:	603b      	str	r3, [r7, #0]
 802a968:	607a      	str	r2, [r7, #4]
 802a96a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802a96e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802a972:	f7f5 fd35 	bl	80203e0 <__aeabi_uldivmod>
 802a976:	4602      	mov	r2, r0
 802a978:	460b      	mov	r3, r1
 802a97a:	4610      	mov	r0, r2
 802a97c:	4619      	mov	r1, r3
 802a97e:	f04f 0200 	mov.w	r2, #0
 802a982:	f04f 0300 	mov.w	r3, #0
 802a986:	020b      	lsls	r3, r1, #8
 802a988:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802a98c:	0202      	lsls	r2, r0, #8
 802a98e:	6979      	ldr	r1, [r7, #20]
 802a990:	6849      	ldr	r1, [r1, #4]
 802a992:	0849      	lsrs	r1, r1, #1
 802a994:	2000      	movs	r0, #0
 802a996:	460c      	mov	r4, r1
 802a998:	4605      	mov	r5, r0
 802a99a:	eb12 0804 	adds.w	r8, r2, r4
 802a99e:	eb43 0905 	adc.w	r9, r3, r5
 802a9a2:	697b      	ldr	r3, [r7, #20]
 802a9a4:	685b      	ldr	r3, [r3, #4]
 802a9a6:	2200      	movs	r2, #0
 802a9a8:	469a      	mov	sl, r3
 802a9aa:	4693      	mov	fp, r2
 802a9ac:	4652      	mov	r2, sl
 802a9ae:	465b      	mov	r3, fp
 802a9b0:	4640      	mov	r0, r8
 802a9b2:	4649      	mov	r1, r9
 802a9b4:	f7f5 fd14 	bl	80203e0 <__aeabi_uldivmod>
 802a9b8:	4602      	mov	r2, r0
 802a9ba:	460b      	mov	r3, r1
 802a9bc:	4613      	mov	r3, r2
 802a9be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 802a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a9c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802a9c6:	d308      	bcc.n	802a9da <UART_SetConfig+0x9a2>
 802a9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a9ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802a9ce:	d204      	bcs.n	802a9da <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 802a9d0:	697b      	ldr	r3, [r7, #20]
 802a9d2:	681b      	ldr	r3, [r3, #0]
 802a9d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802a9d6:	60da      	str	r2, [r3, #12]
 802a9d8:	e17f      	b.n	802acda <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 802a9da:	2301      	movs	r3, #1
 802a9dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802a9e0:	e17b      	b.n	802acda <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802a9e2:	697b      	ldr	r3, [r7, #20]
 802a9e4:	69db      	ldr	r3, [r3, #28]
 802a9e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802a9ea:	f040 80bd 	bne.w	802ab68 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 802a9ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802a9f2:	2b20      	cmp	r3, #32
 802a9f4:	dc48      	bgt.n	802aa88 <UART_SetConfig+0xa50>
 802a9f6:	2b00      	cmp	r3, #0
 802a9f8:	db7b      	blt.n	802aaf2 <UART_SetConfig+0xaba>
 802a9fa:	2b20      	cmp	r3, #32
 802a9fc:	d879      	bhi.n	802aaf2 <UART_SetConfig+0xaba>
 802a9fe:	a201      	add	r2, pc, #4	; (adr r2, 802aa04 <UART_SetConfig+0x9cc>)
 802aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802aa04:	0802aa8f 	.word	0x0802aa8f
 802aa08:	0802aa97 	.word	0x0802aa97
 802aa0c:	0802aaf3 	.word	0x0802aaf3
 802aa10:	0802aaf3 	.word	0x0802aaf3
 802aa14:	0802aa9f 	.word	0x0802aa9f
 802aa18:	0802aaf3 	.word	0x0802aaf3
 802aa1c:	0802aaf3 	.word	0x0802aaf3
 802aa20:	0802aaf3 	.word	0x0802aaf3
 802aa24:	0802aaaf 	.word	0x0802aaaf
 802aa28:	0802aaf3 	.word	0x0802aaf3
 802aa2c:	0802aaf3 	.word	0x0802aaf3
 802aa30:	0802aaf3 	.word	0x0802aaf3
 802aa34:	0802aaf3 	.word	0x0802aaf3
 802aa38:	0802aaf3 	.word	0x0802aaf3
 802aa3c:	0802aaf3 	.word	0x0802aaf3
 802aa40:	0802aaf3 	.word	0x0802aaf3
 802aa44:	0802aabf 	.word	0x0802aabf
 802aa48:	0802aaf3 	.word	0x0802aaf3
 802aa4c:	0802aaf3 	.word	0x0802aaf3
 802aa50:	0802aaf3 	.word	0x0802aaf3
 802aa54:	0802aaf3 	.word	0x0802aaf3
 802aa58:	0802aaf3 	.word	0x0802aaf3
 802aa5c:	0802aaf3 	.word	0x0802aaf3
 802aa60:	0802aaf3 	.word	0x0802aaf3
 802aa64:	0802aaf3 	.word	0x0802aaf3
 802aa68:	0802aaf3 	.word	0x0802aaf3
 802aa6c:	0802aaf3 	.word	0x0802aaf3
 802aa70:	0802aaf3 	.word	0x0802aaf3
 802aa74:	0802aaf3 	.word	0x0802aaf3
 802aa78:	0802aaf3 	.word	0x0802aaf3
 802aa7c:	0802aaf3 	.word	0x0802aaf3
 802aa80:	0802aaf3 	.word	0x0802aaf3
 802aa84:	0802aae5 	.word	0x0802aae5
 802aa88:	2b40      	cmp	r3, #64	; 0x40
 802aa8a:	d02e      	beq.n	802aaea <UART_SetConfig+0xab2>
 802aa8c:	e031      	b.n	802aaf2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802aa8e:	f7fc ffad 	bl	80279ec <HAL_RCC_GetPCLK1Freq>
 802aa92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802aa94:	e033      	b.n	802aafe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802aa96:	f7fc ffbf 	bl	8027a18 <HAL_RCC_GetPCLK2Freq>
 802aa9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802aa9c:	e02f      	b.n	802aafe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802aa9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802aaa2:	4618      	mov	r0, r3
 802aaa4:	f7fd ff20 	bl	80288e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802aaac:	e027      	b.n	802aafe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802aaae:	f107 0318 	add.w	r3, r7, #24
 802aab2:	4618      	mov	r0, r3
 802aab4:	f7fe f86c 	bl	8028b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802aab8:	69fb      	ldr	r3, [r7, #28]
 802aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802aabc:	e01f      	b.n	802aafe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802aabe:	4b69      	ldr	r3, [pc, #420]	; (802ac64 <UART_SetConfig+0xc2c>)
 802aac0:	681b      	ldr	r3, [r3, #0]
 802aac2:	f003 0320 	and.w	r3, r3, #32
 802aac6:	2b00      	cmp	r3, #0
 802aac8:	d009      	beq.n	802aade <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802aaca:	4b66      	ldr	r3, [pc, #408]	; (802ac64 <UART_SetConfig+0xc2c>)
 802aacc:	681b      	ldr	r3, [r3, #0]
 802aace:	08db      	lsrs	r3, r3, #3
 802aad0:	f003 0303 	and.w	r3, r3, #3
 802aad4:	4a64      	ldr	r2, [pc, #400]	; (802ac68 <UART_SetConfig+0xc30>)
 802aad6:	fa22 f303 	lsr.w	r3, r2, r3
 802aada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802aadc:	e00f      	b.n	802aafe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 802aade:	4b62      	ldr	r3, [pc, #392]	; (802ac68 <UART_SetConfig+0xc30>)
 802aae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802aae2:	e00c      	b.n	802aafe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802aae4:	4b61      	ldr	r3, [pc, #388]	; (802ac6c <UART_SetConfig+0xc34>)
 802aae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802aae8:	e009      	b.n	802aafe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802aaea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802aaf0:	e005      	b.n	802aafe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 802aaf2:	2300      	movs	r3, #0
 802aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802aaf6:	2301      	movs	r3, #1
 802aaf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802aafc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 802aafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ab00:	2b00      	cmp	r3, #0
 802ab02:	f000 80ea 	beq.w	802acda <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802ab06:	697b      	ldr	r3, [r7, #20]
 802ab08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ab0a:	4a55      	ldr	r2, [pc, #340]	; (802ac60 <UART_SetConfig+0xc28>)
 802ab0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802ab10:	461a      	mov	r2, r3
 802ab12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ab14:	fbb3 f3f2 	udiv	r3, r3, r2
 802ab18:	005a      	lsls	r2, r3, #1
 802ab1a:	697b      	ldr	r3, [r7, #20]
 802ab1c:	685b      	ldr	r3, [r3, #4]
 802ab1e:	085b      	lsrs	r3, r3, #1
 802ab20:	441a      	add	r2, r3
 802ab22:	697b      	ldr	r3, [r7, #20]
 802ab24:	685b      	ldr	r3, [r3, #4]
 802ab26:	fbb2 f3f3 	udiv	r3, r2, r3
 802ab2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802ab2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ab2e:	2b0f      	cmp	r3, #15
 802ab30:	d916      	bls.n	802ab60 <UART_SetConfig+0xb28>
 802ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ab34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802ab38:	d212      	bcs.n	802ab60 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ab3c:	b29b      	uxth	r3, r3
 802ab3e:	f023 030f 	bic.w	r3, r3, #15
 802ab42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802ab44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ab46:	085b      	lsrs	r3, r3, #1
 802ab48:	b29b      	uxth	r3, r3
 802ab4a:	f003 0307 	and.w	r3, r3, #7
 802ab4e:	b29a      	uxth	r2, r3
 802ab50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802ab52:	4313      	orrs	r3, r2
 802ab54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 802ab56:	697b      	ldr	r3, [r7, #20]
 802ab58:	681b      	ldr	r3, [r3, #0]
 802ab5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802ab5c:	60da      	str	r2, [r3, #12]
 802ab5e:	e0bc      	b.n	802acda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 802ab60:	2301      	movs	r3, #1
 802ab62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802ab66:	e0b8      	b.n	802acda <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 802ab68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802ab6c:	2b20      	cmp	r3, #32
 802ab6e:	dc4b      	bgt.n	802ac08 <UART_SetConfig+0xbd0>
 802ab70:	2b00      	cmp	r3, #0
 802ab72:	f2c0 8087 	blt.w	802ac84 <UART_SetConfig+0xc4c>
 802ab76:	2b20      	cmp	r3, #32
 802ab78:	f200 8084 	bhi.w	802ac84 <UART_SetConfig+0xc4c>
 802ab7c:	a201      	add	r2, pc, #4	; (adr r2, 802ab84 <UART_SetConfig+0xb4c>)
 802ab7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ab82:	bf00      	nop
 802ab84:	0802ac0f 	.word	0x0802ac0f
 802ab88:	0802ac17 	.word	0x0802ac17
 802ab8c:	0802ac85 	.word	0x0802ac85
 802ab90:	0802ac85 	.word	0x0802ac85
 802ab94:	0802ac1f 	.word	0x0802ac1f
 802ab98:	0802ac85 	.word	0x0802ac85
 802ab9c:	0802ac85 	.word	0x0802ac85
 802aba0:	0802ac85 	.word	0x0802ac85
 802aba4:	0802ac2f 	.word	0x0802ac2f
 802aba8:	0802ac85 	.word	0x0802ac85
 802abac:	0802ac85 	.word	0x0802ac85
 802abb0:	0802ac85 	.word	0x0802ac85
 802abb4:	0802ac85 	.word	0x0802ac85
 802abb8:	0802ac85 	.word	0x0802ac85
 802abbc:	0802ac85 	.word	0x0802ac85
 802abc0:	0802ac85 	.word	0x0802ac85
 802abc4:	0802ac3f 	.word	0x0802ac3f
 802abc8:	0802ac85 	.word	0x0802ac85
 802abcc:	0802ac85 	.word	0x0802ac85
 802abd0:	0802ac85 	.word	0x0802ac85
 802abd4:	0802ac85 	.word	0x0802ac85
 802abd8:	0802ac85 	.word	0x0802ac85
 802abdc:	0802ac85 	.word	0x0802ac85
 802abe0:	0802ac85 	.word	0x0802ac85
 802abe4:	0802ac85 	.word	0x0802ac85
 802abe8:	0802ac85 	.word	0x0802ac85
 802abec:	0802ac85 	.word	0x0802ac85
 802abf0:	0802ac85 	.word	0x0802ac85
 802abf4:	0802ac85 	.word	0x0802ac85
 802abf8:	0802ac85 	.word	0x0802ac85
 802abfc:	0802ac85 	.word	0x0802ac85
 802ac00:	0802ac85 	.word	0x0802ac85
 802ac04:	0802ac77 	.word	0x0802ac77
 802ac08:	2b40      	cmp	r3, #64	; 0x40
 802ac0a:	d037      	beq.n	802ac7c <UART_SetConfig+0xc44>
 802ac0c:	e03a      	b.n	802ac84 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802ac0e:	f7fc feed 	bl	80279ec <HAL_RCC_GetPCLK1Freq>
 802ac12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802ac14:	e03c      	b.n	802ac90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802ac16:	f7fc feff 	bl	8027a18 <HAL_RCC_GetPCLK2Freq>
 802ac1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802ac1c:	e038      	b.n	802ac90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802ac1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802ac22:	4618      	mov	r0, r3
 802ac24:	f7fd fe60 	bl	80288e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802ac28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ac2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ac2c:	e030      	b.n	802ac90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802ac2e:	f107 0318 	add.w	r3, r7, #24
 802ac32:	4618      	mov	r0, r3
 802ac34:	f7fd ffac 	bl	8028b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802ac38:	69fb      	ldr	r3, [r7, #28]
 802ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ac3c:	e028      	b.n	802ac90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802ac3e:	4b09      	ldr	r3, [pc, #36]	; (802ac64 <UART_SetConfig+0xc2c>)
 802ac40:	681b      	ldr	r3, [r3, #0]
 802ac42:	f003 0320 	and.w	r3, r3, #32
 802ac46:	2b00      	cmp	r3, #0
 802ac48:	d012      	beq.n	802ac70 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802ac4a:	4b06      	ldr	r3, [pc, #24]	; (802ac64 <UART_SetConfig+0xc2c>)
 802ac4c:	681b      	ldr	r3, [r3, #0]
 802ac4e:	08db      	lsrs	r3, r3, #3
 802ac50:	f003 0303 	and.w	r3, r3, #3
 802ac54:	4a04      	ldr	r2, [pc, #16]	; (802ac68 <UART_SetConfig+0xc30>)
 802ac56:	fa22 f303 	lsr.w	r3, r2, r3
 802ac5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802ac5c:	e018      	b.n	802ac90 <UART_SetConfig+0xc58>
 802ac5e:	bf00      	nop
 802ac60:	0803b968 	.word	0x0803b968
 802ac64:	58024400 	.word	0x58024400
 802ac68:	03d09000 	.word	0x03d09000
 802ac6c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 802ac70:	4b24      	ldr	r3, [pc, #144]	; (802ad04 <UART_SetConfig+0xccc>)
 802ac72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ac74:	e00c      	b.n	802ac90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802ac76:	4b24      	ldr	r3, [pc, #144]	; (802ad08 <UART_SetConfig+0xcd0>)
 802ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ac7a:	e009      	b.n	802ac90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802ac7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802ac80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ac82:	e005      	b.n	802ac90 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 802ac84:	2300      	movs	r3, #0
 802ac86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802ac88:	2301      	movs	r3, #1
 802ac8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802ac8e:	bf00      	nop
    }

    if (pclk != 0U)
 802ac90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ac92:	2b00      	cmp	r3, #0
 802ac94:	d021      	beq.n	802acda <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802ac96:	697b      	ldr	r3, [r7, #20]
 802ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ac9a:	4a1c      	ldr	r2, [pc, #112]	; (802ad0c <UART_SetConfig+0xcd4>)
 802ac9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802aca0:	461a      	mov	r2, r3
 802aca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802aca4:	fbb3 f2f2 	udiv	r2, r3, r2
 802aca8:	697b      	ldr	r3, [r7, #20]
 802acaa:	685b      	ldr	r3, [r3, #4]
 802acac:	085b      	lsrs	r3, r3, #1
 802acae:	441a      	add	r2, r3
 802acb0:	697b      	ldr	r3, [r7, #20]
 802acb2:	685b      	ldr	r3, [r3, #4]
 802acb4:	fbb2 f3f3 	udiv	r3, r2, r3
 802acb8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802acba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802acbc:	2b0f      	cmp	r3, #15
 802acbe:	d909      	bls.n	802acd4 <UART_SetConfig+0xc9c>
 802acc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802acc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802acc6:	d205      	bcs.n	802acd4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802acc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802acca:	b29a      	uxth	r2, r3
 802accc:	697b      	ldr	r3, [r7, #20]
 802acce:	681b      	ldr	r3, [r3, #0]
 802acd0:	60da      	str	r2, [r3, #12]
 802acd2:	e002      	b.n	802acda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 802acd4:	2301      	movs	r3, #1
 802acd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 802acda:	697b      	ldr	r3, [r7, #20]
 802acdc:	2201      	movs	r2, #1
 802acde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 802ace2:	697b      	ldr	r3, [r7, #20]
 802ace4:	2201      	movs	r2, #1
 802ace6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802acea:	697b      	ldr	r3, [r7, #20]
 802acec:	2200      	movs	r2, #0
 802acee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 802acf0:	697b      	ldr	r3, [r7, #20]
 802acf2:	2200      	movs	r2, #0
 802acf4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 802acf6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 802acfa:	4618      	mov	r0, r3
 802acfc:	3748      	adds	r7, #72	; 0x48
 802acfe:	46bd      	mov	sp, r7
 802ad00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802ad04:	03d09000 	.word	0x03d09000
 802ad08:	003d0900 	.word	0x003d0900
 802ad0c:	0803b968 	.word	0x0803b968

0802ad10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 802ad10:	b480      	push	{r7}
 802ad12:	b083      	sub	sp, #12
 802ad14:	af00      	add	r7, sp, #0
 802ad16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 802ad18:	687b      	ldr	r3, [r7, #4]
 802ad1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ad1c:	f003 0301 	and.w	r3, r3, #1
 802ad20:	2b00      	cmp	r3, #0
 802ad22:	d00a      	beq.n	802ad3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802ad24:	687b      	ldr	r3, [r7, #4]
 802ad26:	681b      	ldr	r3, [r3, #0]
 802ad28:	685b      	ldr	r3, [r3, #4]
 802ad2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 802ad2e:	687b      	ldr	r3, [r7, #4]
 802ad30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802ad32:	687b      	ldr	r3, [r7, #4]
 802ad34:	681b      	ldr	r3, [r3, #0]
 802ad36:	430a      	orrs	r2, r1
 802ad38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 802ad3a:	687b      	ldr	r3, [r7, #4]
 802ad3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ad3e:	f003 0302 	and.w	r3, r3, #2
 802ad42:	2b00      	cmp	r3, #0
 802ad44:	d00a      	beq.n	802ad5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 802ad46:	687b      	ldr	r3, [r7, #4]
 802ad48:	681b      	ldr	r3, [r3, #0]
 802ad4a:	685b      	ldr	r3, [r3, #4]
 802ad4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 802ad50:	687b      	ldr	r3, [r7, #4]
 802ad52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ad54:	687b      	ldr	r3, [r7, #4]
 802ad56:	681b      	ldr	r3, [r3, #0]
 802ad58:	430a      	orrs	r2, r1
 802ad5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 802ad5c:	687b      	ldr	r3, [r7, #4]
 802ad5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ad60:	f003 0304 	and.w	r3, r3, #4
 802ad64:	2b00      	cmp	r3, #0
 802ad66:	d00a      	beq.n	802ad7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 802ad68:	687b      	ldr	r3, [r7, #4]
 802ad6a:	681b      	ldr	r3, [r3, #0]
 802ad6c:	685b      	ldr	r3, [r3, #4]
 802ad6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 802ad72:	687b      	ldr	r3, [r7, #4]
 802ad74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802ad76:	687b      	ldr	r3, [r7, #4]
 802ad78:	681b      	ldr	r3, [r3, #0]
 802ad7a:	430a      	orrs	r2, r1
 802ad7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 802ad7e:	687b      	ldr	r3, [r7, #4]
 802ad80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ad82:	f003 0308 	and.w	r3, r3, #8
 802ad86:	2b00      	cmp	r3, #0
 802ad88:	d00a      	beq.n	802ada0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802ad8a:	687b      	ldr	r3, [r7, #4]
 802ad8c:	681b      	ldr	r3, [r3, #0]
 802ad8e:	685b      	ldr	r3, [r3, #4]
 802ad90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 802ad94:	687b      	ldr	r3, [r7, #4]
 802ad96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802ad98:	687b      	ldr	r3, [r7, #4]
 802ad9a:	681b      	ldr	r3, [r3, #0]
 802ad9c:	430a      	orrs	r2, r1
 802ad9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 802ada0:	687b      	ldr	r3, [r7, #4]
 802ada2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ada4:	f003 0310 	and.w	r3, r3, #16
 802ada8:	2b00      	cmp	r3, #0
 802adaa:	d00a      	beq.n	802adc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 802adac:	687b      	ldr	r3, [r7, #4]
 802adae:	681b      	ldr	r3, [r3, #0]
 802adb0:	689b      	ldr	r3, [r3, #8]
 802adb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 802adb6:	687b      	ldr	r3, [r7, #4]
 802adb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802adba:	687b      	ldr	r3, [r7, #4]
 802adbc:	681b      	ldr	r3, [r3, #0]
 802adbe:	430a      	orrs	r2, r1
 802adc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802adc2:	687b      	ldr	r3, [r7, #4]
 802adc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802adc6:	f003 0320 	and.w	r3, r3, #32
 802adca:	2b00      	cmp	r3, #0
 802adcc:	d00a      	beq.n	802ade4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802adce:	687b      	ldr	r3, [r7, #4]
 802add0:	681b      	ldr	r3, [r3, #0]
 802add2:	689b      	ldr	r3, [r3, #8]
 802add4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 802add8:	687b      	ldr	r3, [r7, #4]
 802adda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802addc:	687b      	ldr	r3, [r7, #4]
 802adde:	681b      	ldr	r3, [r3, #0]
 802ade0:	430a      	orrs	r2, r1
 802ade2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802ade4:	687b      	ldr	r3, [r7, #4]
 802ade6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ade8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802adec:	2b00      	cmp	r3, #0
 802adee:	d01a      	beq.n	802ae26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 802adf0:	687b      	ldr	r3, [r7, #4]
 802adf2:	681b      	ldr	r3, [r3, #0]
 802adf4:	685b      	ldr	r3, [r3, #4]
 802adf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 802adfa:	687b      	ldr	r3, [r7, #4]
 802adfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802adfe:	687b      	ldr	r3, [r7, #4]
 802ae00:	681b      	ldr	r3, [r3, #0]
 802ae02:	430a      	orrs	r2, r1
 802ae04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802ae06:	687b      	ldr	r3, [r7, #4]
 802ae08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ae0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802ae0e:	d10a      	bne.n	802ae26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 802ae10:	687b      	ldr	r3, [r7, #4]
 802ae12:	681b      	ldr	r3, [r3, #0]
 802ae14:	685b      	ldr	r3, [r3, #4]
 802ae16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 802ae1a:	687b      	ldr	r3, [r7, #4]
 802ae1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802ae1e:	687b      	ldr	r3, [r7, #4]
 802ae20:	681b      	ldr	r3, [r3, #0]
 802ae22:	430a      	orrs	r2, r1
 802ae24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802ae26:	687b      	ldr	r3, [r7, #4]
 802ae28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ae2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802ae2e:	2b00      	cmp	r3, #0
 802ae30:	d00a      	beq.n	802ae48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802ae32:	687b      	ldr	r3, [r7, #4]
 802ae34:	681b      	ldr	r3, [r3, #0]
 802ae36:	685b      	ldr	r3, [r3, #4]
 802ae38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 802ae3c:	687b      	ldr	r3, [r7, #4]
 802ae3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802ae40:	687b      	ldr	r3, [r7, #4]
 802ae42:	681b      	ldr	r3, [r3, #0]
 802ae44:	430a      	orrs	r2, r1
 802ae46:	605a      	str	r2, [r3, #4]
  }
}
 802ae48:	bf00      	nop
 802ae4a:	370c      	adds	r7, #12
 802ae4c:	46bd      	mov	sp, r7
 802ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae52:	4770      	bx	lr

0802ae54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802ae54:	b580      	push	{r7, lr}
 802ae56:	b086      	sub	sp, #24
 802ae58:	af02      	add	r7, sp, #8
 802ae5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802ae5c:	687b      	ldr	r3, [r7, #4]
 802ae5e:	2200      	movs	r2, #0
 802ae60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802ae64:	f7f7 f93a 	bl	80220dc <HAL_GetTick>
 802ae68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802ae6a:	687b      	ldr	r3, [r7, #4]
 802ae6c:	681b      	ldr	r3, [r3, #0]
 802ae6e:	681b      	ldr	r3, [r3, #0]
 802ae70:	f003 0308 	and.w	r3, r3, #8
 802ae74:	2b08      	cmp	r3, #8
 802ae76:	d10e      	bne.n	802ae96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802ae78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802ae7c:	9300      	str	r3, [sp, #0]
 802ae7e:	68fb      	ldr	r3, [r7, #12]
 802ae80:	2200      	movs	r2, #0
 802ae82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802ae86:	6878      	ldr	r0, [r7, #4]
 802ae88:	f000 f82f 	bl	802aeea <UART_WaitOnFlagUntilTimeout>
 802ae8c:	4603      	mov	r3, r0
 802ae8e:	2b00      	cmp	r3, #0
 802ae90:	d001      	beq.n	802ae96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802ae92:	2303      	movs	r3, #3
 802ae94:	e025      	b.n	802aee2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802ae96:	687b      	ldr	r3, [r7, #4]
 802ae98:	681b      	ldr	r3, [r3, #0]
 802ae9a:	681b      	ldr	r3, [r3, #0]
 802ae9c:	f003 0304 	and.w	r3, r3, #4
 802aea0:	2b04      	cmp	r3, #4
 802aea2:	d10e      	bne.n	802aec2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802aea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802aea8:	9300      	str	r3, [sp, #0]
 802aeaa:	68fb      	ldr	r3, [r7, #12]
 802aeac:	2200      	movs	r2, #0
 802aeae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 802aeb2:	6878      	ldr	r0, [r7, #4]
 802aeb4:	f000 f819 	bl	802aeea <UART_WaitOnFlagUntilTimeout>
 802aeb8:	4603      	mov	r3, r0
 802aeba:	2b00      	cmp	r3, #0
 802aebc:	d001      	beq.n	802aec2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802aebe:	2303      	movs	r3, #3
 802aec0:	e00f      	b.n	802aee2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802aec2:	687b      	ldr	r3, [r7, #4]
 802aec4:	2220      	movs	r2, #32
 802aec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 802aeca:	687b      	ldr	r3, [r7, #4]
 802aecc:	2220      	movs	r2, #32
 802aece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802aed2:	687b      	ldr	r3, [r7, #4]
 802aed4:	2200      	movs	r2, #0
 802aed6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 802aed8:	687b      	ldr	r3, [r7, #4]
 802aeda:	2200      	movs	r2, #0
 802aedc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802aee0:	2300      	movs	r3, #0
}
 802aee2:	4618      	mov	r0, r3
 802aee4:	3710      	adds	r7, #16
 802aee6:	46bd      	mov	sp, r7
 802aee8:	bd80      	pop	{r7, pc}

0802aeea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802aeea:	b580      	push	{r7, lr}
 802aeec:	b09c      	sub	sp, #112	; 0x70
 802aeee:	af00      	add	r7, sp, #0
 802aef0:	60f8      	str	r0, [r7, #12]
 802aef2:	60b9      	str	r1, [r7, #8]
 802aef4:	603b      	str	r3, [r7, #0]
 802aef6:	4613      	mov	r3, r2
 802aef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802aefa:	e0a9      	b.n	802b050 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802aefc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802aefe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802af02:	f000 80a5 	beq.w	802b050 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802af06:	f7f7 f8e9 	bl	80220dc <HAL_GetTick>
 802af0a:	4602      	mov	r2, r0
 802af0c:	683b      	ldr	r3, [r7, #0]
 802af0e:	1ad3      	subs	r3, r2, r3
 802af10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802af12:	429a      	cmp	r2, r3
 802af14:	d302      	bcc.n	802af1c <UART_WaitOnFlagUntilTimeout+0x32>
 802af16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802af18:	2b00      	cmp	r3, #0
 802af1a:	d140      	bne.n	802af9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 802af1c:	68fb      	ldr	r3, [r7, #12]
 802af1e:	681b      	ldr	r3, [r3, #0]
 802af20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802af22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802af24:	e853 3f00 	ldrex	r3, [r3]
 802af28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 802af2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802af2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802af30:	667b      	str	r3, [r7, #100]	; 0x64
 802af32:	68fb      	ldr	r3, [r7, #12]
 802af34:	681b      	ldr	r3, [r3, #0]
 802af36:	461a      	mov	r2, r3
 802af38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802af3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 802af3c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802af3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802af40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802af42:	e841 2300 	strex	r3, r2, [r1]
 802af46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 802af48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802af4a:	2b00      	cmp	r3, #0
 802af4c:	d1e6      	bne.n	802af1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802af4e:	68fb      	ldr	r3, [r7, #12]
 802af50:	681b      	ldr	r3, [r3, #0]
 802af52:	3308      	adds	r3, #8
 802af54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802af56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802af58:	e853 3f00 	ldrex	r3, [r3]
 802af5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802af5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802af60:	f023 0301 	bic.w	r3, r3, #1
 802af64:	663b      	str	r3, [r7, #96]	; 0x60
 802af66:	68fb      	ldr	r3, [r7, #12]
 802af68:	681b      	ldr	r3, [r3, #0]
 802af6a:	3308      	adds	r3, #8
 802af6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802af6e:	64ba      	str	r2, [r7, #72]	; 0x48
 802af70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802af72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802af74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802af76:	e841 2300 	strex	r3, r2, [r1]
 802af7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 802af7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802af7e:	2b00      	cmp	r3, #0
 802af80:	d1e5      	bne.n	802af4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 802af82:	68fb      	ldr	r3, [r7, #12]
 802af84:	2220      	movs	r2, #32
 802af86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 802af8a:	68fb      	ldr	r3, [r7, #12]
 802af8c:	2220      	movs	r2, #32
 802af8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 802af92:	68fb      	ldr	r3, [r7, #12]
 802af94:	2200      	movs	r2, #0
 802af96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 802af9a:	2303      	movs	r3, #3
 802af9c:	e069      	b.n	802b072 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 802af9e:	68fb      	ldr	r3, [r7, #12]
 802afa0:	681b      	ldr	r3, [r3, #0]
 802afa2:	681b      	ldr	r3, [r3, #0]
 802afa4:	f003 0304 	and.w	r3, r3, #4
 802afa8:	2b00      	cmp	r3, #0
 802afaa:	d051      	beq.n	802b050 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802afac:	68fb      	ldr	r3, [r7, #12]
 802afae:	681b      	ldr	r3, [r3, #0]
 802afb0:	69db      	ldr	r3, [r3, #28]
 802afb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802afb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802afba:	d149      	bne.n	802b050 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802afbc:	68fb      	ldr	r3, [r7, #12]
 802afbe:	681b      	ldr	r3, [r3, #0]
 802afc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802afc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 802afc6:	68fb      	ldr	r3, [r7, #12]
 802afc8:	681b      	ldr	r3, [r3, #0]
 802afca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802afcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802afce:	e853 3f00 	ldrex	r3, [r3]
 802afd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802afd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802afda:	66fb      	str	r3, [r7, #108]	; 0x6c
 802afdc:	68fb      	ldr	r3, [r7, #12]
 802afde:	681b      	ldr	r3, [r3, #0]
 802afe0:	461a      	mov	r2, r3
 802afe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802afe4:	637b      	str	r3, [r7, #52]	; 0x34
 802afe6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802afe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802afea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802afec:	e841 2300 	strex	r3, r2, [r1]
 802aff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802aff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802aff4:	2b00      	cmp	r3, #0
 802aff6:	d1e6      	bne.n	802afc6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802aff8:	68fb      	ldr	r3, [r7, #12]
 802affa:	681b      	ldr	r3, [r3, #0]
 802affc:	3308      	adds	r3, #8
 802affe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b000:	697b      	ldr	r3, [r7, #20]
 802b002:	e853 3f00 	ldrex	r3, [r3]
 802b006:	613b      	str	r3, [r7, #16]
   return(result);
 802b008:	693b      	ldr	r3, [r7, #16]
 802b00a:	f023 0301 	bic.w	r3, r3, #1
 802b00e:	66bb      	str	r3, [r7, #104]	; 0x68
 802b010:	68fb      	ldr	r3, [r7, #12]
 802b012:	681b      	ldr	r3, [r3, #0]
 802b014:	3308      	adds	r3, #8
 802b016:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802b018:	623a      	str	r2, [r7, #32]
 802b01a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b01c:	69f9      	ldr	r1, [r7, #28]
 802b01e:	6a3a      	ldr	r2, [r7, #32]
 802b020:	e841 2300 	strex	r3, r2, [r1]
 802b024:	61bb      	str	r3, [r7, #24]
   return(result);
 802b026:	69bb      	ldr	r3, [r7, #24]
 802b028:	2b00      	cmp	r3, #0
 802b02a:	d1e5      	bne.n	802aff8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 802b02c:	68fb      	ldr	r3, [r7, #12]
 802b02e:	2220      	movs	r2, #32
 802b030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 802b034:	68fb      	ldr	r3, [r7, #12]
 802b036:	2220      	movs	r2, #32
 802b038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802b03c:	68fb      	ldr	r3, [r7, #12]
 802b03e:	2220      	movs	r2, #32
 802b040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802b044:	68fb      	ldr	r3, [r7, #12]
 802b046:	2200      	movs	r2, #0
 802b048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 802b04c:	2303      	movs	r3, #3
 802b04e:	e010      	b.n	802b072 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802b050:	68fb      	ldr	r3, [r7, #12]
 802b052:	681b      	ldr	r3, [r3, #0]
 802b054:	69da      	ldr	r2, [r3, #28]
 802b056:	68bb      	ldr	r3, [r7, #8]
 802b058:	4013      	ands	r3, r2
 802b05a:	68ba      	ldr	r2, [r7, #8]
 802b05c:	429a      	cmp	r2, r3
 802b05e:	bf0c      	ite	eq
 802b060:	2301      	moveq	r3, #1
 802b062:	2300      	movne	r3, #0
 802b064:	b2db      	uxtb	r3, r3
 802b066:	461a      	mov	r2, r3
 802b068:	79fb      	ldrb	r3, [r7, #7]
 802b06a:	429a      	cmp	r2, r3
 802b06c:	f43f af46 	beq.w	802aefc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802b070:	2300      	movs	r3, #0
}
 802b072:	4618      	mov	r0, r3
 802b074:	3770      	adds	r7, #112	; 0x70
 802b076:	46bd      	mov	sp, r7
 802b078:	bd80      	pop	{r7, pc}
	...

0802b07c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802b07c:	b580      	push	{r7, lr}
 802b07e:	b096      	sub	sp, #88	; 0x58
 802b080:	af00      	add	r7, sp, #0
 802b082:	60f8      	str	r0, [r7, #12]
 802b084:	60b9      	str	r1, [r7, #8]
 802b086:	4613      	mov	r3, r2
 802b088:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 802b08a:	68fb      	ldr	r3, [r7, #12]
 802b08c:	68ba      	ldr	r2, [r7, #8]
 802b08e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 802b090:	68fb      	ldr	r3, [r7, #12]
 802b092:	88fa      	ldrh	r2, [r7, #6]
 802b094:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802b098:	68fb      	ldr	r3, [r7, #12]
 802b09a:	2200      	movs	r2, #0
 802b09c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 802b0a0:	68fb      	ldr	r3, [r7, #12]
 802b0a2:	2222      	movs	r2, #34	; 0x22
 802b0a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 802b0a8:	68fb      	ldr	r3, [r7, #12]
 802b0aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b0ac:	2b00      	cmp	r3, #0
 802b0ae:	d02c      	beq.n	802b10a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 802b0b0:	68fb      	ldr	r3, [r7, #12]
 802b0b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b0b4:	4a42      	ldr	r2, [pc, #264]	; (802b1c0 <UART_Start_Receive_DMA+0x144>)
 802b0b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 802b0b8:	68fb      	ldr	r3, [r7, #12]
 802b0ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b0bc:	4a41      	ldr	r2, [pc, #260]	; (802b1c4 <UART_Start_Receive_DMA+0x148>)
 802b0be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 802b0c0:	68fb      	ldr	r3, [r7, #12]
 802b0c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b0c4:	4a40      	ldr	r2, [pc, #256]	; (802b1c8 <UART_Start_Receive_DMA+0x14c>)
 802b0c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 802b0c8:	68fb      	ldr	r3, [r7, #12]
 802b0ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b0cc:	2200      	movs	r2, #0
 802b0ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 802b0d0:	68fb      	ldr	r3, [r7, #12]
 802b0d2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 802b0d4:	68fb      	ldr	r3, [r7, #12]
 802b0d6:	681b      	ldr	r3, [r3, #0]
 802b0d8:	3324      	adds	r3, #36	; 0x24
 802b0da:	4619      	mov	r1, r3
 802b0dc:	68fb      	ldr	r3, [r7, #12]
 802b0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802b0e0:	461a      	mov	r2, r3
 802b0e2:	88fb      	ldrh	r3, [r7, #6]
 802b0e4:	f7f7 fc64 	bl	80229b0 <HAL_DMA_Start_IT>
 802b0e8:	4603      	mov	r3, r0
 802b0ea:	2b00      	cmp	r3, #0
 802b0ec:	d00d      	beq.n	802b10a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 802b0ee:	68fb      	ldr	r3, [r7, #12]
 802b0f0:	2210      	movs	r2, #16
 802b0f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 802b0f6:	68fb      	ldr	r3, [r7, #12]
 802b0f8:	2200      	movs	r2, #0
 802b0fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 802b0fe:	68fb      	ldr	r3, [r7, #12]
 802b100:	2220      	movs	r2, #32
 802b102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 802b106:	2301      	movs	r3, #1
 802b108:	e055      	b.n	802b1b6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 802b10a:	68fb      	ldr	r3, [r7, #12]
 802b10c:	2200      	movs	r2, #0
 802b10e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 802b112:	68fb      	ldr	r3, [r7, #12]
 802b114:	691b      	ldr	r3, [r3, #16]
 802b116:	2b00      	cmp	r3, #0
 802b118:	d018      	beq.n	802b14c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802b11a:	68fb      	ldr	r3, [r7, #12]
 802b11c:	681b      	ldr	r3, [r3, #0]
 802b11e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b122:	e853 3f00 	ldrex	r3, [r3]
 802b126:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802b128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b12a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b12e:	657b      	str	r3, [r7, #84]	; 0x54
 802b130:	68fb      	ldr	r3, [r7, #12]
 802b132:	681b      	ldr	r3, [r3, #0]
 802b134:	461a      	mov	r2, r3
 802b136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b138:	64bb      	str	r3, [r7, #72]	; 0x48
 802b13a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b13c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802b13e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b140:	e841 2300 	strex	r3, r2, [r1]
 802b144:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 802b146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b148:	2b00      	cmp	r3, #0
 802b14a:	d1e6      	bne.n	802b11a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802b14c:	68fb      	ldr	r3, [r7, #12]
 802b14e:	681b      	ldr	r3, [r3, #0]
 802b150:	3308      	adds	r3, #8
 802b152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b156:	e853 3f00 	ldrex	r3, [r3]
 802b15a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b15e:	f043 0301 	orr.w	r3, r3, #1
 802b162:	653b      	str	r3, [r7, #80]	; 0x50
 802b164:	68fb      	ldr	r3, [r7, #12]
 802b166:	681b      	ldr	r3, [r3, #0]
 802b168:	3308      	adds	r3, #8
 802b16a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b16c:	637a      	str	r2, [r7, #52]	; 0x34
 802b16e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802b172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802b174:	e841 2300 	strex	r3, r2, [r1]
 802b178:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802b17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b17c:	2b00      	cmp	r3, #0
 802b17e:	d1e5      	bne.n	802b14c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802b180:	68fb      	ldr	r3, [r7, #12]
 802b182:	681b      	ldr	r3, [r3, #0]
 802b184:	3308      	adds	r3, #8
 802b186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b188:	697b      	ldr	r3, [r7, #20]
 802b18a:	e853 3f00 	ldrex	r3, [r3]
 802b18e:	613b      	str	r3, [r7, #16]
   return(result);
 802b190:	693b      	ldr	r3, [r7, #16]
 802b192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b196:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b198:	68fb      	ldr	r3, [r7, #12]
 802b19a:	681b      	ldr	r3, [r3, #0]
 802b19c:	3308      	adds	r3, #8
 802b19e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b1a0:	623a      	str	r2, [r7, #32]
 802b1a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b1a4:	69f9      	ldr	r1, [r7, #28]
 802b1a6:	6a3a      	ldr	r2, [r7, #32]
 802b1a8:	e841 2300 	strex	r3, r2, [r1]
 802b1ac:	61bb      	str	r3, [r7, #24]
   return(result);
 802b1ae:	69bb      	ldr	r3, [r7, #24]
 802b1b0:	2b00      	cmp	r3, #0
 802b1b2:	d1e5      	bne.n	802b180 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 802b1b4:	2300      	movs	r3, #0
}
 802b1b6:	4618      	mov	r0, r3
 802b1b8:	3758      	adds	r7, #88	; 0x58
 802b1ba:	46bd      	mov	sp, r7
 802b1bc:	bd80      	pop	{r7, pc}
 802b1be:	bf00      	nop
 802b1c0:	0802b3cf 	.word	0x0802b3cf
 802b1c4:	0802b4f1 	.word	0x0802b4f1
 802b1c8:	0802b529 	.word	0x0802b529

0802b1cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 802b1cc:	b480      	push	{r7}
 802b1ce:	b08f      	sub	sp, #60	; 0x3c
 802b1d0:	af00      	add	r7, sp, #0
 802b1d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 802b1d4:	687b      	ldr	r3, [r7, #4]
 802b1d6:	681b      	ldr	r3, [r3, #0]
 802b1d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b1da:	6a3b      	ldr	r3, [r7, #32]
 802b1dc:	e853 3f00 	ldrex	r3, [r3]
 802b1e0:	61fb      	str	r3, [r7, #28]
   return(result);
 802b1e2:	69fb      	ldr	r3, [r7, #28]
 802b1e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 802b1e8:	637b      	str	r3, [r7, #52]	; 0x34
 802b1ea:	687b      	ldr	r3, [r7, #4]
 802b1ec:	681b      	ldr	r3, [r3, #0]
 802b1ee:	461a      	mov	r2, r3
 802b1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 802b1f4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b1f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802b1f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802b1fa:	e841 2300 	strex	r3, r2, [r1]
 802b1fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b202:	2b00      	cmp	r3, #0
 802b204:	d1e6      	bne.n	802b1d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 802b206:	687b      	ldr	r3, [r7, #4]
 802b208:	681b      	ldr	r3, [r3, #0]
 802b20a:	3308      	adds	r3, #8
 802b20c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b20e:	68fb      	ldr	r3, [r7, #12]
 802b210:	e853 3f00 	ldrex	r3, [r3]
 802b214:	60bb      	str	r3, [r7, #8]
   return(result);
 802b216:	68bb      	ldr	r3, [r7, #8]
 802b218:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 802b21c:	633b      	str	r3, [r7, #48]	; 0x30
 802b21e:	687b      	ldr	r3, [r7, #4]
 802b220:	681b      	ldr	r3, [r3, #0]
 802b222:	3308      	adds	r3, #8
 802b224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b226:	61ba      	str	r2, [r7, #24]
 802b228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b22a:	6979      	ldr	r1, [r7, #20]
 802b22c:	69ba      	ldr	r2, [r7, #24]
 802b22e:	e841 2300 	strex	r3, r2, [r1]
 802b232:	613b      	str	r3, [r7, #16]
   return(result);
 802b234:	693b      	ldr	r3, [r7, #16]
 802b236:	2b00      	cmp	r3, #0
 802b238:	d1e5      	bne.n	802b206 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802b23a:	687b      	ldr	r3, [r7, #4]
 802b23c:	2220      	movs	r2, #32
 802b23e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 802b242:	bf00      	nop
 802b244:	373c      	adds	r7, #60	; 0x3c
 802b246:	46bd      	mov	sp, r7
 802b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b24c:	4770      	bx	lr
	...

0802b250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802b250:	b480      	push	{r7}
 802b252:	b095      	sub	sp, #84	; 0x54
 802b254:	af00      	add	r7, sp, #0
 802b256:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802b258:	687b      	ldr	r3, [r7, #4]
 802b25a:	681b      	ldr	r3, [r3, #0]
 802b25c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b260:	e853 3f00 	ldrex	r3, [r3]
 802b264:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802b266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802b26c:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b26e:	687b      	ldr	r3, [r7, #4]
 802b270:	681b      	ldr	r3, [r3, #0]
 802b272:	461a      	mov	r2, r3
 802b274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b276:	643b      	str	r3, [r7, #64]	; 0x40
 802b278:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b27a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802b27c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802b27e:	e841 2300 	strex	r3, r2, [r1]
 802b282:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802b284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b286:	2b00      	cmp	r3, #0
 802b288:	d1e6      	bne.n	802b258 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802b28a:	687b      	ldr	r3, [r7, #4]
 802b28c:	681b      	ldr	r3, [r3, #0]
 802b28e:	3308      	adds	r3, #8
 802b290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b292:	6a3b      	ldr	r3, [r7, #32]
 802b294:	e853 3f00 	ldrex	r3, [r3]
 802b298:	61fb      	str	r3, [r7, #28]
   return(result);
 802b29a:	69fa      	ldr	r2, [r7, #28]
 802b29c:	4b1e      	ldr	r3, [pc, #120]	; (802b318 <UART_EndRxTransfer+0xc8>)
 802b29e:	4013      	ands	r3, r2
 802b2a0:	64bb      	str	r3, [r7, #72]	; 0x48
 802b2a2:	687b      	ldr	r3, [r7, #4]
 802b2a4:	681b      	ldr	r3, [r3, #0]
 802b2a6:	3308      	adds	r3, #8
 802b2a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b2aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 802b2ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b2ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802b2b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802b2b2:	e841 2300 	strex	r3, r2, [r1]
 802b2b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2ba:	2b00      	cmp	r3, #0
 802b2bc:	d1e5      	bne.n	802b28a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802b2be:	687b      	ldr	r3, [r7, #4]
 802b2c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802b2c2:	2b01      	cmp	r3, #1
 802b2c4:	d118      	bne.n	802b2f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802b2c6:	687b      	ldr	r3, [r7, #4]
 802b2c8:	681b      	ldr	r3, [r3, #0]
 802b2ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b2cc:	68fb      	ldr	r3, [r7, #12]
 802b2ce:	e853 3f00 	ldrex	r3, [r3]
 802b2d2:	60bb      	str	r3, [r7, #8]
   return(result);
 802b2d4:	68bb      	ldr	r3, [r7, #8]
 802b2d6:	f023 0310 	bic.w	r3, r3, #16
 802b2da:	647b      	str	r3, [r7, #68]	; 0x44
 802b2dc:	687b      	ldr	r3, [r7, #4]
 802b2de:	681b      	ldr	r3, [r3, #0]
 802b2e0:	461a      	mov	r2, r3
 802b2e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b2e4:	61bb      	str	r3, [r7, #24]
 802b2e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b2e8:	6979      	ldr	r1, [r7, #20]
 802b2ea:	69ba      	ldr	r2, [r7, #24]
 802b2ec:	e841 2300 	strex	r3, r2, [r1]
 802b2f0:	613b      	str	r3, [r7, #16]
   return(result);
 802b2f2:	693b      	ldr	r3, [r7, #16]
 802b2f4:	2b00      	cmp	r3, #0
 802b2f6:	d1e6      	bne.n	802b2c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802b2f8:	687b      	ldr	r3, [r7, #4]
 802b2fa:	2220      	movs	r2, #32
 802b2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802b300:	687b      	ldr	r3, [r7, #4]
 802b302:	2200      	movs	r2, #0
 802b304:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 802b306:	687b      	ldr	r3, [r7, #4]
 802b308:	2200      	movs	r2, #0
 802b30a:	671a      	str	r2, [r3, #112]	; 0x70
}
 802b30c:	bf00      	nop
 802b30e:	3754      	adds	r7, #84	; 0x54
 802b310:	46bd      	mov	sp, r7
 802b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b316:	4770      	bx	lr
 802b318:	effffffe 	.word	0xeffffffe

0802b31c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 802b31c:	b580      	push	{r7, lr}
 802b31e:	b090      	sub	sp, #64	; 0x40
 802b320:	af00      	add	r7, sp, #0
 802b322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802b324:	687b      	ldr	r3, [r7, #4]
 802b326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b328:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 802b32a:	687b      	ldr	r3, [r7, #4]
 802b32c:	69db      	ldr	r3, [r3, #28]
 802b32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b332:	d037      	beq.n	802b3a4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 802b334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b336:	2200      	movs	r2, #0
 802b338:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 802b33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b33e:	681b      	ldr	r3, [r3, #0]
 802b340:	3308      	adds	r3, #8
 802b342:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b346:	e853 3f00 	ldrex	r3, [r3]
 802b34a:	623b      	str	r3, [r7, #32]
   return(result);
 802b34c:	6a3b      	ldr	r3, [r7, #32]
 802b34e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802b352:	63bb      	str	r3, [r7, #56]	; 0x38
 802b354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b356:	681b      	ldr	r3, [r3, #0]
 802b358:	3308      	adds	r3, #8
 802b35a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802b35c:	633a      	str	r2, [r7, #48]	; 0x30
 802b35e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b360:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802b362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b364:	e841 2300 	strex	r3, r2, [r1]
 802b368:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b36c:	2b00      	cmp	r3, #0
 802b36e:	d1e5      	bne.n	802b33c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 802b370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b372:	681b      	ldr	r3, [r3, #0]
 802b374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b376:	693b      	ldr	r3, [r7, #16]
 802b378:	e853 3f00 	ldrex	r3, [r3]
 802b37c:	60fb      	str	r3, [r7, #12]
   return(result);
 802b37e:	68fb      	ldr	r3, [r7, #12]
 802b380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b384:	637b      	str	r3, [r7, #52]	; 0x34
 802b386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b388:	681b      	ldr	r3, [r3, #0]
 802b38a:	461a      	mov	r2, r3
 802b38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b38e:	61fb      	str	r3, [r7, #28]
 802b390:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b392:	69b9      	ldr	r1, [r7, #24]
 802b394:	69fa      	ldr	r2, [r7, #28]
 802b396:	e841 2300 	strex	r3, r2, [r1]
 802b39a:	617b      	str	r3, [r7, #20]
   return(result);
 802b39c:	697b      	ldr	r3, [r7, #20]
 802b39e:	2b00      	cmp	r3, #0
 802b3a0:	d1e6      	bne.n	802b370 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 802b3a2:	e002      	b.n	802b3aa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 802b3a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802b3a6:	f7f5 ff4f 	bl	8021248 <HAL_UART_TxCpltCallback>
}
 802b3aa:	bf00      	nop
 802b3ac:	3740      	adds	r7, #64	; 0x40
 802b3ae:	46bd      	mov	sp, r7
 802b3b0:	bd80      	pop	{r7, pc}

0802b3b2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 802b3b2:	b580      	push	{r7, lr}
 802b3b4:	b084      	sub	sp, #16
 802b3b6:	af00      	add	r7, sp, #0
 802b3b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802b3ba:	687b      	ldr	r3, [r7, #4]
 802b3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b3be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 802b3c0:	68f8      	ldr	r0, [r7, #12]
 802b3c2:	f7fe fe11 	bl	8029fe8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802b3c6:	bf00      	nop
 802b3c8:	3710      	adds	r7, #16
 802b3ca:	46bd      	mov	sp, r7
 802b3cc:	bd80      	pop	{r7, pc}

0802b3ce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 802b3ce:	b580      	push	{r7, lr}
 802b3d0:	b09c      	sub	sp, #112	; 0x70
 802b3d2:	af00      	add	r7, sp, #0
 802b3d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802b3d6:	687b      	ldr	r3, [r7, #4]
 802b3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b3da:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 802b3dc:	687b      	ldr	r3, [r7, #4]
 802b3de:	69db      	ldr	r3, [r3, #28]
 802b3e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b3e4:	d071      	beq.n	802b4ca <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 802b3e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b3e8:	2200      	movs	r2, #0
 802b3ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802b3ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b3f0:	681b      	ldr	r3, [r3, #0]
 802b3f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b3f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b3f6:	e853 3f00 	ldrex	r3, [r3]
 802b3fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802b3fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b3fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802b402:	66bb      	str	r3, [r7, #104]	; 0x68
 802b404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b406:	681b      	ldr	r3, [r3, #0]
 802b408:	461a      	mov	r2, r3
 802b40a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802b40c:	65bb      	str	r3, [r7, #88]	; 0x58
 802b40e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802b412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802b414:	e841 2300 	strex	r3, r2, [r1]
 802b418:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802b41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b41c:	2b00      	cmp	r3, #0
 802b41e:	d1e6      	bne.n	802b3ee <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802b420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b422:	681b      	ldr	r3, [r3, #0]
 802b424:	3308      	adds	r3, #8
 802b426:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b42a:	e853 3f00 	ldrex	r3, [r3]
 802b42e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802b430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b432:	f023 0301 	bic.w	r3, r3, #1
 802b436:	667b      	str	r3, [r7, #100]	; 0x64
 802b438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b43a:	681b      	ldr	r3, [r3, #0]
 802b43c:	3308      	adds	r3, #8
 802b43e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 802b440:	647a      	str	r2, [r7, #68]	; 0x44
 802b442:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b444:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802b446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802b448:	e841 2300 	strex	r3, r2, [r1]
 802b44c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802b44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b450:	2b00      	cmp	r3, #0
 802b452:	d1e5      	bne.n	802b420 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802b454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b456:	681b      	ldr	r3, [r3, #0]
 802b458:	3308      	adds	r3, #8
 802b45a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b45e:	e853 3f00 	ldrex	r3, [r3]
 802b462:	623b      	str	r3, [r7, #32]
   return(result);
 802b464:	6a3b      	ldr	r3, [r7, #32]
 802b466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802b46a:	663b      	str	r3, [r7, #96]	; 0x60
 802b46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b46e:	681b      	ldr	r3, [r3, #0]
 802b470:	3308      	adds	r3, #8
 802b472:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802b474:	633a      	str	r2, [r7, #48]	; 0x30
 802b476:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b478:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802b47a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b47c:	e841 2300 	strex	r3, r2, [r1]
 802b480:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b484:	2b00      	cmp	r3, #0
 802b486:	d1e5      	bne.n	802b454 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 802b488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b48a:	2220      	movs	r2, #32
 802b48c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802b490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802b494:	2b01      	cmp	r3, #1
 802b496:	d118      	bne.n	802b4ca <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802b498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b49a:	681b      	ldr	r3, [r3, #0]
 802b49c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b49e:	693b      	ldr	r3, [r7, #16]
 802b4a0:	e853 3f00 	ldrex	r3, [r3]
 802b4a4:	60fb      	str	r3, [r7, #12]
   return(result);
 802b4a6:	68fb      	ldr	r3, [r7, #12]
 802b4a8:	f023 0310 	bic.w	r3, r3, #16
 802b4ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 802b4ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b4b0:	681b      	ldr	r3, [r3, #0]
 802b4b2:	461a      	mov	r2, r3
 802b4b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802b4b6:	61fb      	str	r3, [r7, #28]
 802b4b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b4ba:	69b9      	ldr	r1, [r7, #24]
 802b4bc:	69fa      	ldr	r2, [r7, #28]
 802b4be:	e841 2300 	strex	r3, r2, [r1]
 802b4c2:	617b      	str	r3, [r7, #20]
   return(result);
 802b4c4:	697b      	ldr	r3, [r7, #20]
 802b4c6:	2b00      	cmp	r3, #0
 802b4c8:	d1e6      	bne.n	802b498 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802b4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b4cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802b4ce:	2b01      	cmp	r3, #1
 802b4d0:	d107      	bne.n	802b4e2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802b4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b4d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802b4d8:	4619      	mov	r1, r3
 802b4da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 802b4dc:	f7f5 feca 	bl	8021274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 802b4e0:	e002      	b.n	802b4e8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 802b4e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 802b4e4:	f7fe fd8a 	bl	8029ffc <HAL_UART_RxCpltCallback>
}
 802b4e8:	bf00      	nop
 802b4ea:	3770      	adds	r7, #112	; 0x70
 802b4ec:	46bd      	mov	sp, r7
 802b4ee:	bd80      	pop	{r7, pc}

0802b4f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 802b4f0:	b580      	push	{r7, lr}
 802b4f2:	b084      	sub	sp, #16
 802b4f4:	af00      	add	r7, sp, #0
 802b4f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802b4f8:	687b      	ldr	r3, [r7, #4]
 802b4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b4fc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802b4fe:	68fb      	ldr	r3, [r7, #12]
 802b500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802b502:	2b01      	cmp	r3, #1
 802b504:	d109      	bne.n	802b51a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 802b506:	68fb      	ldr	r3, [r7, #12]
 802b508:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802b50c:	085b      	lsrs	r3, r3, #1
 802b50e:	b29b      	uxth	r3, r3
 802b510:	4619      	mov	r1, r3
 802b512:	68f8      	ldr	r0, [r7, #12]
 802b514:	f7f5 feae 	bl	8021274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 802b518:	e002      	b.n	802b520 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 802b51a:	68f8      	ldr	r0, [r7, #12]
 802b51c:	f7fe fd78 	bl	802a010 <HAL_UART_RxHalfCpltCallback>
}
 802b520:	bf00      	nop
 802b522:	3710      	adds	r7, #16
 802b524:	46bd      	mov	sp, r7
 802b526:	bd80      	pop	{r7, pc}

0802b528 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 802b528:	b580      	push	{r7, lr}
 802b52a:	b086      	sub	sp, #24
 802b52c:	af00      	add	r7, sp, #0
 802b52e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802b530:	687b      	ldr	r3, [r7, #4]
 802b532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b534:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 802b536:	697b      	ldr	r3, [r7, #20]
 802b538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b53c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 802b53e:	697b      	ldr	r3, [r7, #20]
 802b540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802b544:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 802b546:	697b      	ldr	r3, [r7, #20]
 802b548:	681b      	ldr	r3, [r3, #0]
 802b54a:	689b      	ldr	r3, [r3, #8]
 802b54c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b550:	2b80      	cmp	r3, #128	; 0x80
 802b552:	d109      	bne.n	802b568 <UART_DMAError+0x40>
 802b554:	693b      	ldr	r3, [r7, #16]
 802b556:	2b21      	cmp	r3, #33	; 0x21
 802b558:	d106      	bne.n	802b568 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 802b55a:	697b      	ldr	r3, [r7, #20]
 802b55c:	2200      	movs	r2, #0
 802b55e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 802b562:	6978      	ldr	r0, [r7, #20]
 802b564:	f7ff fe32 	bl	802b1cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 802b568:	697b      	ldr	r3, [r7, #20]
 802b56a:	681b      	ldr	r3, [r3, #0]
 802b56c:	689b      	ldr	r3, [r3, #8]
 802b56e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b572:	2b40      	cmp	r3, #64	; 0x40
 802b574:	d109      	bne.n	802b58a <UART_DMAError+0x62>
 802b576:	68fb      	ldr	r3, [r7, #12]
 802b578:	2b22      	cmp	r3, #34	; 0x22
 802b57a:	d106      	bne.n	802b58a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 802b57c:	697b      	ldr	r3, [r7, #20]
 802b57e:	2200      	movs	r2, #0
 802b580:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 802b584:	6978      	ldr	r0, [r7, #20]
 802b586:	f7ff fe63 	bl	802b250 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 802b58a:	697b      	ldr	r3, [r7, #20]
 802b58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802b590:	f043 0210 	orr.w	r2, r3, #16
 802b594:	697b      	ldr	r3, [r7, #20]
 802b596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802b59a:	6978      	ldr	r0, [r7, #20]
 802b59c:	f7fe fd42 	bl	802a024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802b5a0:	bf00      	nop
 802b5a2:	3718      	adds	r7, #24
 802b5a4:	46bd      	mov	sp, r7
 802b5a6:	bd80      	pop	{r7, pc}

0802b5a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802b5a8:	b580      	push	{r7, lr}
 802b5aa:	b084      	sub	sp, #16
 802b5ac:	af00      	add	r7, sp, #0
 802b5ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802b5b0:	687b      	ldr	r3, [r7, #4]
 802b5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b5b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 802b5b6:	68fb      	ldr	r3, [r7, #12]
 802b5b8:	2200      	movs	r2, #0
 802b5ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 802b5be:	68fb      	ldr	r3, [r7, #12]
 802b5c0:	2200      	movs	r2, #0
 802b5c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802b5c6:	68f8      	ldr	r0, [r7, #12]
 802b5c8:	f7fe fd2c 	bl	802a024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802b5cc:	bf00      	nop
 802b5ce:	3710      	adds	r7, #16
 802b5d0:	46bd      	mov	sp, r7
 802b5d2:	bd80      	pop	{r7, pc}

0802b5d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802b5d4:	b580      	push	{r7, lr}
 802b5d6:	b088      	sub	sp, #32
 802b5d8:	af00      	add	r7, sp, #0
 802b5da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 802b5dc:	687b      	ldr	r3, [r7, #4]
 802b5de:	681b      	ldr	r3, [r3, #0]
 802b5e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b5e2:	68fb      	ldr	r3, [r7, #12]
 802b5e4:	e853 3f00 	ldrex	r3, [r3]
 802b5e8:	60bb      	str	r3, [r7, #8]
   return(result);
 802b5ea:	68bb      	ldr	r3, [r7, #8]
 802b5ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802b5f0:	61fb      	str	r3, [r7, #28]
 802b5f2:	687b      	ldr	r3, [r7, #4]
 802b5f4:	681b      	ldr	r3, [r3, #0]
 802b5f6:	461a      	mov	r2, r3
 802b5f8:	69fb      	ldr	r3, [r7, #28]
 802b5fa:	61bb      	str	r3, [r7, #24]
 802b5fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b5fe:	6979      	ldr	r1, [r7, #20]
 802b600:	69ba      	ldr	r2, [r7, #24]
 802b602:	e841 2300 	strex	r3, r2, [r1]
 802b606:	613b      	str	r3, [r7, #16]
   return(result);
 802b608:	693b      	ldr	r3, [r7, #16]
 802b60a:	2b00      	cmp	r3, #0
 802b60c:	d1e6      	bne.n	802b5dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802b60e:	687b      	ldr	r3, [r7, #4]
 802b610:	2220      	movs	r2, #32
 802b612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 802b616:	687b      	ldr	r3, [r7, #4]
 802b618:	2200      	movs	r2, #0
 802b61a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802b61c:	6878      	ldr	r0, [r7, #4]
 802b61e:	f7f5 fe13 	bl	8021248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802b622:	bf00      	nop
 802b624:	3720      	adds	r7, #32
 802b626:	46bd      	mov	sp, r7
 802b628:	bd80      	pop	{r7, pc}

0802b62a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 802b62a:	b480      	push	{r7}
 802b62c:	b083      	sub	sp, #12
 802b62e:	af00      	add	r7, sp, #0
 802b630:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 802b632:	bf00      	nop
 802b634:	370c      	adds	r7, #12
 802b636:	46bd      	mov	sp, r7
 802b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b63c:	4770      	bx	lr

0802b63e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 802b63e:	b480      	push	{r7}
 802b640:	b083      	sub	sp, #12
 802b642:	af00      	add	r7, sp, #0
 802b644:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 802b646:	bf00      	nop
 802b648:	370c      	adds	r7, #12
 802b64a:	46bd      	mov	sp, r7
 802b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b650:	4770      	bx	lr

0802b652 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 802b652:	b480      	push	{r7}
 802b654:	b083      	sub	sp, #12
 802b656:	af00      	add	r7, sp, #0
 802b658:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 802b65a:	bf00      	nop
 802b65c:	370c      	adds	r7, #12
 802b65e:	46bd      	mov	sp, r7
 802b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b664:	4770      	bx	lr

0802b666 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 802b666:	b480      	push	{r7}
 802b668:	b085      	sub	sp, #20
 802b66a:	af00      	add	r7, sp, #0
 802b66c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802b66e:	687b      	ldr	r3, [r7, #4]
 802b670:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802b674:	2b01      	cmp	r3, #1
 802b676:	d101      	bne.n	802b67c <HAL_UARTEx_DisableFifoMode+0x16>
 802b678:	2302      	movs	r3, #2
 802b67a:	e027      	b.n	802b6cc <HAL_UARTEx_DisableFifoMode+0x66>
 802b67c:	687b      	ldr	r3, [r7, #4]
 802b67e:	2201      	movs	r2, #1
 802b680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802b684:	687b      	ldr	r3, [r7, #4]
 802b686:	2224      	movs	r2, #36	; 0x24
 802b688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802b68c:	687b      	ldr	r3, [r7, #4]
 802b68e:	681b      	ldr	r3, [r3, #0]
 802b690:	681b      	ldr	r3, [r3, #0]
 802b692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802b694:	687b      	ldr	r3, [r7, #4]
 802b696:	681b      	ldr	r3, [r3, #0]
 802b698:	681a      	ldr	r2, [r3, #0]
 802b69a:	687b      	ldr	r3, [r7, #4]
 802b69c:	681b      	ldr	r3, [r3, #0]
 802b69e:	f022 0201 	bic.w	r2, r2, #1
 802b6a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802b6a4:	68fb      	ldr	r3, [r7, #12]
 802b6a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802b6aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802b6ac:	687b      	ldr	r3, [r7, #4]
 802b6ae:	2200      	movs	r2, #0
 802b6b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802b6b2:	687b      	ldr	r3, [r7, #4]
 802b6b4:	681b      	ldr	r3, [r3, #0]
 802b6b6:	68fa      	ldr	r2, [r7, #12]
 802b6b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802b6ba:	687b      	ldr	r3, [r7, #4]
 802b6bc:	2220      	movs	r2, #32
 802b6be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802b6c2:	687b      	ldr	r3, [r7, #4]
 802b6c4:	2200      	movs	r2, #0
 802b6c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802b6ca:	2300      	movs	r3, #0
}
 802b6cc:	4618      	mov	r0, r3
 802b6ce:	3714      	adds	r7, #20
 802b6d0:	46bd      	mov	sp, r7
 802b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6d6:	4770      	bx	lr

0802b6d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802b6d8:	b580      	push	{r7, lr}
 802b6da:	b084      	sub	sp, #16
 802b6dc:	af00      	add	r7, sp, #0
 802b6de:	6078      	str	r0, [r7, #4]
 802b6e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802b6e2:	687b      	ldr	r3, [r7, #4]
 802b6e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802b6e8:	2b01      	cmp	r3, #1
 802b6ea:	d101      	bne.n	802b6f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802b6ec:	2302      	movs	r3, #2
 802b6ee:	e02d      	b.n	802b74c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802b6f0:	687b      	ldr	r3, [r7, #4]
 802b6f2:	2201      	movs	r2, #1
 802b6f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802b6f8:	687b      	ldr	r3, [r7, #4]
 802b6fa:	2224      	movs	r2, #36	; 0x24
 802b6fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802b700:	687b      	ldr	r3, [r7, #4]
 802b702:	681b      	ldr	r3, [r3, #0]
 802b704:	681b      	ldr	r3, [r3, #0]
 802b706:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802b708:	687b      	ldr	r3, [r7, #4]
 802b70a:	681b      	ldr	r3, [r3, #0]
 802b70c:	681a      	ldr	r2, [r3, #0]
 802b70e:	687b      	ldr	r3, [r7, #4]
 802b710:	681b      	ldr	r3, [r3, #0]
 802b712:	f022 0201 	bic.w	r2, r2, #1
 802b716:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802b718:	687b      	ldr	r3, [r7, #4]
 802b71a:	681b      	ldr	r3, [r3, #0]
 802b71c:	689b      	ldr	r3, [r3, #8]
 802b71e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 802b722:	687b      	ldr	r3, [r7, #4]
 802b724:	681b      	ldr	r3, [r3, #0]
 802b726:	683a      	ldr	r2, [r7, #0]
 802b728:	430a      	orrs	r2, r1
 802b72a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802b72c:	6878      	ldr	r0, [r7, #4]
 802b72e:	f000 f8ab 	bl	802b888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802b732:	687b      	ldr	r3, [r7, #4]
 802b734:	681b      	ldr	r3, [r3, #0]
 802b736:	68fa      	ldr	r2, [r7, #12]
 802b738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802b73a:	687b      	ldr	r3, [r7, #4]
 802b73c:	2220      	movs	r2, #32
 802b73e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802b742:	687b      	ldr	r3, [r7, #4]
 802b744:	2200      	movs	r2, #0
 802b746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802b74a:	2300      	movs	r3, #0
}
 802b74c:	4618      	mov	r0, r3
 802b74e:	3710      	adds	r7, #16
 802b750:	46bd      	mov	sp, r7
 802b752:	bd80      	pop	{r7, pc}

0802b754 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802b754:	b580      	push	{r7, lr}
 802b756:	b084      	sub	sp, #16
 802b758:	af00      	add	r7, sp, #0
 802b75a:	6078      	str	r0, [r7, #4]
 802b75c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802b75e:	687b      	ldr	r3, [r7, #4]
 802b760:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802b764:	2b01      	cmp	r3, #1
 802b766:	d101      	bne.n	802b76c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802b768:	2302      	movs	r3, #2
 802b76a:	e02d      	b.n	802b7c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802b76c:	687b      	ldr	r3, [r7, #4]
 802b76e:	2201      	movs	r2, #1
 802b770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802b774:	687b      	ldr	r3, [r7, #4]
 802b776:	2224      	movs	r2, #36	; 0x24
 802b778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802b77c:	687b      	ldr	r3, [r7, #4]
 802b77e:	681b      	ldr	r3, [r3, #0]
 802b780:	681b      	ldr	r3, [r3, #0]
 802b782:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802b784:	687b      	ldr	r3, [r7, #4]
 802b786:	681b      	ldr	r3, [r3, #0]
 802b788:	681a      	ldr	r2, [r3, #0]
 802b78a:	687b      	ldr	r3, [r7, #4]
 802b78c:	681b      	ldr	r3, [r3, #0]
 802b78e:	f022 0201 	bic.w	r2, r2, #1
 802b792:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802b794:	687b      	ldr	r3, [r7, #4]
 802b796:	681b      	ldr	r3, [r3, #0]
 802b798:	689b      	ldr	r3, [r3, #8]
 802b79a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 802b79e:	687b      	ldr	r3, [r7, #4]
 802b7a0:	681b      	ldr	r3, [r3, #0]
 802b7a2:	683a      	ldr	r2, [r7, #0]
 802b7a4:	430a      	orrs	r2, r1
 802b7a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802b7a8:	6878      	ldr	r0, [r7, #4]
 802b7aa:	f000 f86d 	bl	802b888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802b7ae:	687b      	ldr	r3, [r7, #4]
 802b7b0:	681b      	ldr	r3, [r3, #0]
 802b7b2:	68fa      	ldr	r2, [r7, #12]
 802b7b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802b7b6:	687b      	ldr	r3, [r7, #4]
 802b7b8:	2220      	movs	r2, #32
 802b7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802b7be:	687b      	ldr	r3, [r7, #4]
 802b7c0:	2200      	movs	r2, #0
 802b7c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802b7c6:	2300      	movs	r3, #0
}
 802b7c8:	4618      	mov	r0, r3
 802b7ca:	3710      	adds	r7, #16
 802b7cc:	46bd      	mov	sp, r7
 802b7ce:	bd80      	pop	{r7, pc}

0802b7d0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802b7d0:	b580      	push	{r7, lr}
 802b7d2:	b08c      	sub	sp, #48	; 0x30
 802b7d4:	af00      	add	r7, sp, #0
 802b7d6:	60f8      	str	r0, [r7, #12]
 802b7d8:	60b9      	str	r1, [r7, #8]
 802b7da:	4613      	mov	r3, r2
 802b7dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802b7de:	68fb      	ldr	r3, [r7, #12]
 802b7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802b7e4:	2b20      	cmp	r3, #32
 802b7e6:	d14a      	bne.n	802b87e <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 802b7e8:	68bb      	ldr	r3, [r7, #8]
 802b7ea:	2b00      	cmp	r3, #0
 802b7ec:	d002      	beq.n	802b7f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 802b7ee:	88fb      	ldrh	r3, [r7, #6]
 802b7f0:	2b00      	cmp	r3, #0
 802b7f2:	d101      	bne.n	802b7f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 802b7f4:	2301      	movs	r3, #1
 802b7f6:	e043      	b.n	802b880 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 802b7f8:	68fb      	ldr	r3, [r7, #12]
 802b7fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802b7fe:	2b01      	cmp	r3, #1
 802b800:	d101      	bne.n	802b806 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 802b802:	2302      	movs	r3, #2
 802b804:	e03c      	b.n	802b880 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 802b806:	68fb      	ldr	r3, [r7, #12]
 802b808:	2201      	movs	r2, #1
 802b80a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 802b80e:	68fb      	ldr	r3, [r7, #12]
 802b810:	2201      	movs	r2, #1
 802b812:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 802b814:	88fb      	ldrh	r3, [r7, #6]
 802b816:	461a      	mov	r2, r3
 802b818:	68b9      	ldr	r1, [r7, #8]
 802b81a:	68f8      	ldr	r0, [r7, #12]
 802b81c:	f7ff fc2e 	bl	802b07c <UART_Start_Receive_DMA>
 802b820:	4603      	mov	r3, r0
 802b822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 802b826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b82a:	2b00      	cmp	r3, #0
 802b82c:	d124      	bne.n	802b878 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802b82e:	68fb      	ldr	r3, [r7, #12]
 802b830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802b832:	2b01      	cmp	r3, #1
 802b834:	d11d      	bne.n	802b872 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 802b836:	68fb      	ldr	r3, [r7, #12]
 802b838:	681b      	ldr	r3, [r3, #0]
 802b83a:	2210      	movs	r2, #16
 802b83c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802b83e:	68fb      	ldr	r3, [r7, #12]
 802b840:	681b      	ldr	r3, [r3, #0]
 802b842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b844:	69bb      	ldr	r3, [r7, #24]
 802b846:	e853 3f00 	ldrex	r3, [r3]
 802b84a:	617b      	str	r3, [r7, #20]
   return(result);
 802b84c:	697b      	ldr	r3, [r7, #20]
 802b84e:	f043 0310 	orr.w	r3, r3, #16
 802b852:	62bb      	str	r3, [r7, #40]	; 0x28
 802b854:	68fb      	ldr	r3, [r7, #12]
 802b856:	681b      	ldr	r3, [r3, #0]
 802b858:	461a      	mov	r2, r3
 802b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b85c:	627b      	str	r3, [r7, #36]	; 0x24
 802b85e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b860:	6a39      	ldr	r1, [r7, #32]
 802b862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b864:	e841 2300 	strex	r3, r2, [r1]
 802b868:	61fb      	str	r3, [r7, #28]
   return(result);
 802b86a:	69fb      	ldr	r3, [r7, #28]
 802b86c:	2b00      	cmp	r3, #0
 802b86e:	d1e6      	bne.n	802b83e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 802b870:	e002      	b.n	802b878 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 802b872:	2301      	movs	r3, #1
 802b874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 802b878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b87c:	e000      	b.n	802b880 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 802b87e:	2302      	movs	r3, #2
  }
}
 802b880:	4618      	mov	r0, r3
 802b882:	3730      	adds	r7, #48	; 0x30
 802b884:	46bd      	mov	sp, r7
 802b886:	bd80      	pop	{r7, pc}

0802b888 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 802b888:	b480      	push	{r7}
 802b88a:	b085      	sub	sp, #20
 802b88c:	af00      	add	r7, sp, #0
 802b88e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 802b890:	687b      	ldr	r3, [r7, #4]
 802b892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b894:	2b00      	cmp	r3, #0
 802b896:	d108      	bne.n	802b8aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 802b898:	687b      	ldr	r3, [r7, #4]
 802b89a:	2201      	movs	r2, #1
 802b89c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 802b8a0:	687b      	ldr	r3, [r7, #4]
 802b8a2:	2201      	movs	r2, #1
 802b8a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 802b8a8:	e031      	b.n	802b90e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 802b8aa:	2310      	movs	r3, #16
 802b8ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802b8ae:	2310      	movs	r3, #16
 802b8b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802b8b2:	687b      	ldr	r3, [r7, #4]
 802b8b4:	681b      	ldr	r3, [r3, #0]
 802b8b6:	689b      	ldr	r3, [r3, #8]
 802b8b8:	0e5b      	lsrs	r3, r3, #25
 802b8ba:	b2db      	uxtb	r3, r3
 802b8bc:	f003 0307 	and.w	r3, r3, #7
 802b8c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802b8c2:	687b      	ldr	r3, [r7, #4]
 802b8c4:	681b      	ldr	r3, [r3, #0]
 802b8c6:	689b      	ldr	r3, [r3, #8]
 802b8c8:	0f5b      	lsrs	r3, r3, #29
 802b8ca:	b2db      	uxtb	r3, r3
 802b8cc:	f003 0307 	and.w	r3, r3, #7
 802b8d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802b8d2:	7bbb      	ldrb	r3, [r7, #14]
 802b8d4:	7b3a      	ldrb	r2, [r7, #12]
 802b8d6:	4911      	ldr	r1, [pc, #68]	; (802b91c <UARTEx_SetNbDataToProcess+0x94>)
 802b8d8:	5c8a      	ldrb	r2, [r1, r2]
 802b8da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802b8de:	7b3a      	ldrb	r2, [r7, #12]
 802b8e0:	490f      	ldr	r1, [pc, #60]	; (802b920 <UARTEx_SetNbDataToProcess+0x98>)
 802b8e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802b8e4:	fb93 f3f2 	sdiv	r3, r3, r2
 802b8e8:	b29a      	uxth	r2, r3
 802b8ea:	687b      	ldr	r3, [r7, #4]
 802b8ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802b8f0:	7bfb      	ldrb	r3, [r7, #15]
 802b8f2:	7b7a      	ldrb	r2, [r7, #13]
 802b8f4:	4909      	ldr	r1, [pc, #36]	; (802b91c <UARTEx_SetNbDataToProcess+0x94>)
 802b8f6:	5c8a      	ldrb	r2, [r1, r2]
 802b8f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 802b8fc:	7b7a      	ldrb	r2, [r7, #13]
 802b8fe:	4908      	ldr	r1, [pc, #32]	; (802b920 <UARTEx_SetNbDataToProcess+0x98>)
 802b900:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802b902:	fb93 f3f2 	sdiv	r3, r3, r2
 802b906:	b29a      	uxth	r2, r3
 802b908:	687b      	ldr	r3, [r7, #4]
 802b90a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 802b90e:	bf00      	nop
 802b910:	3714      	adds	r7, #20
 802b912:	46bd      	mov	sp, r7
 802b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b918:	4770      	bx	lr
 802b91a:	bf00      	nop
 802b91c:	0803b980 	.word	0x0803b980
 802b920:	0803b988 	.word	0x0803b988

0802b924 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802b924:	b084      	sub	sp, #16
 802b926:	b580      	push	{r7, lr}
 802b928:	b084      	sub	sp, #16
 802b92a:	af00      	add	r7, sp, #0
 802b92c:	6078      	str	r0, [r7, #4]
 802b92e:	f107 001c 	add.w	r0, r7, #28
 802b932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b938:	2b01      	cmp	r3, #1
 802b93a:	d120      	bne.n	802b97e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802b93c:	687b      	ldr	r3, [r7, #4]
 802b93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802b944:	687b      	ldr	r3, [r7, #4]
 802b946:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802b948:	687b      	ldr	r3, [r7, #4]
 802b94a:	68da      	ldr	r2, [r3, #12]
 802b94c:	4b2a      	ldr	r3, [pc, #168]	; (802b9f8 <USB_CoreInit+0xd4>)
 802b94e:	4013      	ands	r3, r2
 802b950:	687a      	ldr	r2, [r7, #4]
 802b952:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802b954:	687b      	ldr	r3, [r7, #4]
 802b956:	68db      	ldr	r3, [r3, #12]
 802b958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802b95c:	687b      	ldr	r3, [r7, #4]
 802b95e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802b960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b962:	2b01      	cmp	r3, #1
 802b964:	d105      	bne.n	802b972 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802b966:	687b      	ldr	r3, [r7, #4]
 802b968:	68db      	ldr	r3, [r3, #12]
 802b96a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802b96e:	687b      	ldr	r3, [r7, #4]
 802b970:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802b972:	6878      	ldr	r0, [r7, #4]
 802b974:	f000 f9ce 	bl	802bd14 <USB_CoreReset>
 802b978:	4603      	mov	r3, r0
 802b97a:	73fb      	strb	r3, [r7, #15]
 802b97c:	e01a      	b.n	802b9b4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802b97e:	687b      	ldr	r3, [r7, #4]
 802b980:	68db      	ldr	r3, [r3, #12]
 802b982:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802b986:	687b      	ldr	r3, [r7, #4]
 802b988:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802b98a:	6878      	ldr	r0, [r7, #4]
 802b98c:	f000 f9c2 	bl	802bd14 <USB_CoreReset>
 802b990:	4603      	mov	r3, r0
 802b992:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802b994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b996:	2b00      	cmp	r3, #0
 802b998:	d106      	bne.n	802b9a8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802b99a:	687b      	ldr	r3, [r7, #4]
 802b99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b99e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802b9a2:	687b      	ldr	r3, [r7, #4]
 802b9a4:	639a      	str	r2, [r3, #56]	; 0x38
 802b9a6:	e005      	b.n	802b9b4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802b9a8:	687b      	ldr	r3, [r7, #4]
 802b9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b9ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802b9b0:	687b      	ldr	r3, [r7, #4]
 802b9b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9b6:	2b01      	cmp	r3, #1
 802b9b8:	d116      	bne.n	802b9e8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 802b9ba:	687b      	ldr	r3, [r7, #4]
 802b9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802b9be:	b29a      	uxth	r2, r3
 802b9c0:	687b      	ldr	r3, [r7, #4]
 802b9c2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 802b9c4:	687b      	ldr	r3, [r7, #4]
 802b9c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802b9c8:	4b0c      	ldr	r3, [pc, #48]	; (802b9fc <USB_CoreInit+0xd8>)
 802b9ca:	4313      	orrs	r3, r2
 802b9cc:	687a      	ldr	r2, [r7, #4]
 802b9ce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802b9d0:	687b      	ldr	r3, [r7, #4]
 802b9d2:	689b      	ldr	r3, [r3, #8]
 802b9d4:	f043 0206 	orr.w	r2, r3, #6
 802b9d8:	687b      	ldr	r3, [r7, #4]
 802b9da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802b9dc:	687b      	ldr	r3, [r7, #4]
 802b9de:	689b      	ldr	r3, [r3, #8]
 802b9e0:	f043 0220 	orr.w	r2, r3, #32
 802b9e4:	687b      	ldr	r3, [r7, #4]
 802b9e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802b9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 802b9ea:	4618      	mov	r0, r3
 802b9ec:	3710      	adds	r7, #16
 802b9ee:	46bd      	mov	sp, r7
 802b9f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802b9f4:	b004      	add	sp, #16
 802b9f6:	4770      	bx	lr
 802b9f8:	ffbdffbf 	.word	0xffbdffbf
 802b9fc:	03ee0000 	.word	0x03ee0000

0802ba00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802ba00:	b480      	push	{r7}
 802ba02:	b083      	sub	sp, #12
 802ba04:	af00      	add	r7, sp, #0
 802ba06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802ba08:	687b      	ldr	r3, [r7, #4]
 802ba0a:	689b      	ldr	r3, [r3, #8]
 802ba0c:	f043 0201 	orr.w	r2, r3, #1
 802ba10:	687b      	ldr	r3, [r7, #4]
 802ba12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802ba14:	2300      	movs	r3, #0
}
 802ba16:	4618      	mov	r0, r3
 802ba18:	370c      	adds	r7, #12
 802ba1a:	46bd      	mov	sp, r7
 802ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba20:	4770      	bx	lr

0802ba22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802ba22:	b480      	push	{r7}
 802ba24:	b083      	sub	sp, #12
 802ba26:	af00      	add	r7, sp, #0
 802ba28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802ba2a:	687b      	ldr	r3, [r7, #4]
 802ba2c:	689b      	ldr	r3, [r3, #8]
 802ba2e:	f023 0201 	bic.w	r2, r3, #1
 802ba32:	687b      	ldr	r3, [r7, #4]
 802ba34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802ba36:	2300      	movs	r3, #0
}
 802ba38:	4618      	mov	r0, r3
 802ba3a:	370c      	adds	r7, #12
 802ba3c:	46bd      	mov	sp, r7
 802ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba42:	4770      	bx	lr

0802ba44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802ba44:	b580      	push	{r7, lr}
 802ba46:	b084      	sub	sp, #16
 802ba48:	af00      	add	r7, sp, #0
 802ba4a:	6078      	str	r0, [r7, #4]
 802ba4c:	460b      	mov	r3, r1
 802ba4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802ba50:	2300      	movs	r3, #0
 802ba52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802ba54:	687b      	ldr	r3, [r7, #4]
 802ba56:	68db      	ldr	r3, [r3, #12]
 802ba58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802ba5c:	687b      	ldr	r3, [r7, #4]
 802ba5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802ba60:	78fb      	ldrb	r3, [r7, #3]
 802ba62:	2b01      	cmp	r3, #1
 802ba64:	d115      	bne.n	802ba92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802ba66:	687b      	ldr	r3, [r7, #4]
 802ba68:	68db      	ldr	r3, [r3, #12]
 802ba6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802ba6e:	687b      	ldr	r3, [r7, #4]
 802ba70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802ba72:	2001      	movs	r0, #1
 802ba74:	f7f6 fb3e 	bl	80220f4 <HAL_Delay>
      ms++;
 802ba78:	68fb      	ldr	r3, [r7, #12]
 802ba7a:	3301      	adds	r3, #1
 802ba7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802ba7e:	6878      	ldr	r0, [r7, #4]
 802ba80:	f000 f939 	bl	802bcf6 <USB_GetMode>
 802ba84:	4603      	mov	r3, r0
 802ba86:	2b01      	cmp	r3, #1
 802ba88:	d01e      	beq.n	802bac8 <USB_SetCurrentMode+0x84>
 802ba8a:	68fb      	ldr	r3, [r7, #12]
 802ba8c:	2b31      	cmp	r3, #49	; 0x31
 802ba8e:	d9f0      	bls.n	802ba72 <USB_SetCurrentMode+0x2e>
 802ba90:	e01a      	b.n	802bac8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802ba92:	78fb      	ldrb	r3, [r7, #3]
 802ba94:	2b00      	cmp	r3, #0
 802ba96:	d115      	bne.n	802bac4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802ba98:	687b      	ldr	r3, [r7, #4]
 802ba9a:	68db      	ldr	r3, [r3, #12]
 802ba9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802baa0:	687b      	ldr	r3, [r7, #4]
 802baa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802baa4:	2001      	movs	r0, #1
 802baa6:	f7f6 fb25 	bl	80220f4 <HAL_Delay>
      ms++;
 802baaa:	68fb      	ldr	r3, [r7, #12]
 802baac:	3301      	adds	r3, #1
 802baae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802bab0:	6878      	ldr	r0, [r7, #4]
 802bab2:	f000 f920 	bl	802bcf6 <USB_GetMode>
 802bab6:	4603      	mov	r3, r0
 802bab8:	2b00      	cmp	r3, #0
 802baba:	d005      	beq.n	802bac8 <USB_SetCurrentMode+0x84>
 802babc:	68fb      	ldr	r3, [r7, #12]
 802babe:	2b31      	cmp	r3, #49	; 0x31
 802bac0:	d9f0      	bls.n	802baa4 <USB_SetCurrentMode+0x60>
 802bac2:	e001      	b.n	802bac8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802bac4:	2301      	movs	r3, #1
 802bac6:	e005      	b.n	802bad4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802bac8:	68fb      	ldr	r3, [r7, #12]
 802baca:	2b32      	cmp	r3, #50	; 0x32
 802bacc:	d101      	bne.n	802bad2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802bace:	2301      	movs	r3, #1
 802bad0:	e000      	b.n	802bad4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802bad2:	2300      	movs	r3, #0
}
 802bad4:	4618      	mov	r0, r3
 802bad6:	3710      	adds	r7, #16
 802bad8:	46bd      	mov	sp, r7
 802bada:	bd80      	pop	{r7, pc}

0802badc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802badc:	b480      	push	{r7}
 802bade:	b085      	sub	sp, #20
 802bae0:	af00      	add	r7, sp, #0
 802bae2:	6078      	str	r0, [r7, #4]
 802bae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802bae6:	2300      	movs	r3, #0
 802bae8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802baea:	68fb      	ldr	r3, [r7, #12]
 802baec:	3301      	adds	r3, #1
 802baee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802baf0:	68fb      	ldr	r3, [r7, #12]
 802baf2:	4a13      	ldr	r2, [pc, #76]	; (802bb40 <USB_FlushTxFifo+0x64>)
 802baf4:	4293      	cmp	r3, r2
 802baf6:	d901      	bls.n	802bafc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802baf8:	2303      	movs	r3, #3
 802bafa:	e01b      	b.n	802bb34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802bafc:	687b      	ldr	r3, [r7, #4]
 802bafe:	691b      	ldr	r3, [r3, #16]
 802bb00:	2b00      	cmp	r3, #0
 802bb02:	daf2      	bge.n	802baea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802bb04:	2300      	movs	r3, #0
 802bb06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802bb08:	683b      	ldr	r3, [r7, #0]
 802bb0a:	019b      	lsls	r3, r3, #6
 802bb0c:	f043 0220 	orr.w	r2, r3, #32
 802bb10:	687b      	ldr	r3, [r7, #4]
 802bb12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802bb14:	68fb      	ldr	r3, [r7, #12]
 802bb16:	3301      	adds	r3, #1
 802bb18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802bb1a:	68fb      	ldr	r3, [r7, #12]
 802bb1c:	4a08      	ldr	r2, [pc, #32]	; (802bb40 <USB_FlushTxFifo+0x64>)
 802bb1e:	4293      	cmp	r3, r2
 802bb20:	d901      	bls.n	802bb26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802bb22:	2303      	movs	r3, #3
 802bb24:	e006      	b.n	802bb34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802bb26:	687b      	ldr	r3, [r7, #4]
 802bb28:	691b      	ldr	r3, [r3, #16]
 802bb2a:	f003 0320 	and.w	r3, r3, #32
 802bb2e:	2b20      	cmp	r3, #32
 802bb30:	d0f0      	beq.n	802bb14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802bb32:	2300      	movs	r3, #0
}
 802bb34:	4618      	mov	r0, r3
 802bb36:	3714      	adds	r7, #20
 802bb38:	46bd      	mov	sp, r7
 802bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb3e:	4770      	bx	lr
 802bb40:	00030d40 	.word	0x00030d40

0802bb44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802bb44:	b480      	push	{r7}
 802bb46:	b085      	sub	sp, #20
 802bb48:	af00      	add	r7, sp, #0
 802bb4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802bb4c:	2300      	movs	r3, #0
 802bb4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802bb50:	68fb      	ldr	r3, [r7, #12]
 802bb52:	3301      	adds	r3, #1
 802bb54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802bb56:	68fb      	ldr	r3, [r7, #12]
 802bb58:	4a11      	ldr	r2, [pc, #68]	; (802bba0 <USB_FlushRxFifo+0x5c>)
 802bb5a:	4293      	cmp	r3, r2
 802bb5c:	d901      	bls.n	802bb62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802bb5e:	2303      	movs	r3, #3
 802bb60:	e018      	b.n	802bb94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802bb62:	687b      	ldr	r3, [r7, #4]
 802bb64:	691b      	ldr	r3, [r3, #16]
 802bb66:	2b00      	cmp	r3, #0
 802bb68:	daf2      	bge.n	802bb50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802bb6a:	2300      	movs	r3, #0
 802bb6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802bb6e:	687b      	ldr	r3, [r7, #4]
 802bb70:	2210      	movs	r2, #16
 802bb72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802bb74:	68fb      	ldr	r3, [r7, #12]
 802bb76:	3301      	adds	r3, #1
 802bb78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802bb7a:	68fb      	ldr	r3, [r7, #12]
 802bb7c:	4a08      	ldr	r2, [pc, #32]	; (802bba0 <USB_FlushRxFifo+0x5c>)
 802bb7e:	4293      	cmp	r3, r2
 802bb80:	d901      	bls.n	802bb86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802bb82:	2303      	movs	r3, #3
 802bb84:	e006      	b.n	802bb94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802bb86:	687b      	ldr	r3, [r7, #4]
 802bb88:	691b      	ldr	r3, [r3, #16]
 802bb8a:	f003 0310 	and.w	r3, r3, #16
 802bb8e:	2b10      	cmp	r3, #16
 802bb90:	d0f0      	beq.n	802bb74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802bb92:	2300      	movs	r3, #0
}
 802bb94:	4618      	mov	r0, r3
 802bb96:	3714      	adds	r7, #20
 802bb98:	46bd      	mov	sp, r7
 802bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb9e:	4770      	bx	lr
 802bba0:	00030d40 	.word	0x00030d40

0802bba4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802bba4:	b480      	push	{r7}
 802bba6:	b089      	sub	sp, #36	; 0x24
 802bba8:	af00      	add	r7, sp, #0
 802bbaa:	60f8      	str	r0, [r7, #12]
 802bbac:	60b9      	str	r1, [r7, #8]
 802bbae:	4611      	mov	r1, r2
 802bbb0:	461a      	mov	r2, r3
 802bbb2:	460b      	mov	r3, r1
 802bbb4:	71fb      	strb	r3, [r7, #7]
 802bbb6:	4613      	mov	r3, r2
 802bbb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802bbba:	68fb      	ldr	r3, [r7, #12]
 802bbbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802bbbe:	68bb      	ldr	r3, [r7, #8]
 802bbc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802bbc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802bbc6:	2b00      	cmp	r3, #0
 802bbc8:	d123      	bne.n	802bc12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802bbca:	88bb      	ldrh	r3, [r7, #4]
 802bbcc:	3303      	adds	r3, #3
 802bbce:	089b      	lsrs	r3, r3, #2
 802bbd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802bbd2:	2300      	movs	r3, #0
 802bbd4:	61bb      	str	r3, [r7, #24]
 802bbd6:	e018      	b.n	802bc0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802bbd8:	79fb      	ldrb	r3, [r7, #7]
 802bbda:	031a      	lsls	r2, r3, #12
 802bbdc:	697b      	ldr	r3, [r7, #20]
 802bbde:	4413      	add	r3, r2
 802bbe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802bbe4:	461a      	mov	r2, r3
 802bbe6:	69fb      	ldr	r3, [r7, #28]
 802bbe8:	681b      	ldr	r3, [r3, #0]
 802bbea:	6013      	str	r3, [r2, #0]
      pSrc++;
 802bbec:	69fb      	ldr	r3, [r7, #28]
 802bbee:	3301      	adds	r3, #1
 802bbf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802bbf2:	69fb      	ldr	r3, [r7, #28]
 802bbf4:	3301      	adds	r3, #1
 802bbf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802bbf8:	69fb      	ldr	r3, [r7, #28]
 802bbfa:	3301      	adds	r3, #1
 802bbfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802bbfe:	69fb      	ldr	r3, [r7, #28]
 802bc00:	3301      	adds	r3, #1
 802bc02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802bc04:	69bb      	ldr	r3, [r7, #24]
 802bc06:	3301      	adds	r3, #1
 802bc08:	61bb      	str	r3, [r7, #24]
 802bc0a:	69ba      	ldr	r2, [r7, #24]
 802bc0c:	693b      	ldr	r3, [r7, #16]
 802bc0e:	429a      	cmp	r2, r3
 802bc10:	d3e2      	bcc.n	802bbd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802bc12:	2300      	movs	r3, #0
}
 802bc14:	4618      	mov	r0, r3
 802bc16:	3724      	adds	r7, #36	; 0x24
 802bc18:	46bd      	mov	sp, r7
 802bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bc1e:	4770      	bx	lr

0802bc20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802bc20:	b480      	push	{r7}
 802bc22:	b08b      	sub	sp, #44	; 0x2c
 802bc24:	af00      	add	r7, sp, #0
 802bc26:	60f8      	str	r0, [r7, #12]
 802bc28:	60b9      	str	r1, [r7, #8]
 802bc2a:	4613      	mov	r3, r2
 802bc2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802bc2e:	68fb      	ldr	r3, [r7, #12]
 802bc30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802bc32:	68bb      	ldr	r3, [r7, #8]
 802bc34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802bc36:	88fb      	ldrh	r3, [r7, #6]
 802bc38:	089b      	lsrs	r3, r3, #2
 802bc3a:	b29b      	uxth	r3, r3
 802bc3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802bc3e:	88fb      	ldrh	r3, [r7, #6]
 802bc40:	f003 0303 	and.w	r3, r3, #3
 802bc44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802bc46:	2300      	movs	r3, #0
 802bc48:	623b      	str	r3, [r7, #32]
 802bc4a:	e014      	b.n	802bc76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802bc4c:	69bb      	ldr	r3, [r7, #24]
 802bc4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802bc52:	681a      	ldr	r2, [r3, #0]
 802bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc56:	601a      	str	r2, [r3, #0]
    pDest++;
 802bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc5a:	3301      	adds	r3, #1
 802bc5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc60:	3301      	adds	r3, #1
 802bc62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802bc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc66:	3301      	adds	r3, #1
 802bc68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc6c:	3301      	adds	r3, #1
 802bc6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802bc70:	6a3b      	ldr	r3, [r7, #32]
 802bc72:	3301      	adds	r3, #1
 802bc74:	623b      	str	r3, [r7, #32]
 802bc76:	6a3a      	ldr	r2, [r7, #32]
 802bc78:	697b      	ldr	r3, [r7, #20]
 802bc7a:	429a      	cmp	r2, r3
 802bc7c:	d3e6      	bcc.n	802bc4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802bc7e:	8bfb      	ldrh	r3, [r7, #30]
 802bc80:	2b00      	cmp	r3, #0
 802bc82:	d01e      	beq.n	802bcc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802bc84:	2300      	movs	r3, #0
 802bc86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802bc88:	69bb      	ldr	r3, [r7, #24]
 802bc8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802bc8e:	461a      	mov	r2, r3
 802bc90:	f107 0310 	add.w	r3, r7, #16
 802bc94:	6812      	ldr	r2, [r2, #0]
 802bc96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802bc98:	693a      	ldr	r2, [r7, #16]
 802bc9a:	6a3b      	ldr	r3, [r7, #32]
 802bc9c:	b2db      	uxtb	r3, r3
 802bc9e:	00db      	lsls	r3, r3, #3
 802bca0:	fa22 f303 	lsr.w	r3, r2, r3
 802bca4:	b2da      	uxtb	r2, r3
 802bca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bca8:	701a      	strb	r2, [r3, #0]
      i++;
 802bcaa:	6a3b      	ldr	r3, [r7, #32]
 802bcac:	3301      	adds	r3, #1
 802bcae:	623b      	str	r3, [r7, #32]
      pDest++;
 802bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bcb2:	3301      	adds	r3, #1
 802bcb4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802bcb6:	8bfb      	ldrh	r3, [r7, #30]
 802bcb8:	3b01      	subs	r3, #1
 802bcba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802bcbc:	8bfb      	ldrh	r3, [r7, #30]
 802bcbe:	2b00      	cmp	r3, #0
 802bcc0:	d1ea      	bne.n	802bc98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802bcc4:	4618      	mov	r0, r3
 802bcc6:	372c      	adds	r7, #44	; 0x2c
 802bcc8:	46bd      	mov	sp, r7
 802bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bcce:	4770      	bx	lr

0802bcd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802bcd0:	b480      	push	{r7}
 802bcd2:	b085      	sub	sp, #20
 802bcd4:	af00      	add	r7, sp, #0
 802bcd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802bcd8:	687b      	ldr	r3, [r7, #4]
 802bcda:	695b      	ldr	r3, [r3, #20]
 802bcdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802bcde:	687b      	ldr	r3, [r7, #4]
 802bce0:	699b      	ldr	r3, [r3, #24]
 802bce2:	68fa      	ldr	r2, [r7, #12]
 802bce4:	4013      	ands	r3, r2
 802bce6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802bce8:	68fb      	ldr	r3, [r7, #12]
}
 802bcea:	4618      	mov	r0, r3
 802bcec:	3714      	adds	r7, #20
 802bcee:	46bd      	mov	sp, r7
 802bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bcf4:	4770      	bx	lr

0802bcf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802bcf6:	b480      	push	{r7}
 802bcf8:	b083      	sub	sp, #12
 802bcfa:	af00      	add	r7, sp, #0
 802bcfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802bcfe:	687b      	ldr	r3, [r7, #4]
 802bd00:	695b      	ldr	r3, [r3, #20]
 802bd02:	f003 0301 	and.w	r3, r3, #1
}
 802bd06:	4618      	mov	r0, r3
 802bd08:	370c      	adds	r7, #12
 802bd0a:	46bd      	mov	sp, r7
 802bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bd10:	4770      	bx	lr
	...

0802bd14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802bd14:	b480      	push	{r7}
 802bd16:	b085      	sub	sp, #20
 802bd18:	af00      	add	r7, sp, #0
 802bd1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802bd1c:	2300      	movs	r3, #0
 802bd1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802bd20:	68fb      	ldr	r3, [r7, #12]
 802bd22:	3301      	adds	r3, #1
 802bd24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802bd26:	68fb      	ldr	r3, [r7, #12]
 802bd28:	4a13      	ldr	r2, [pc, #76]	; (802bd78 <USB_CoreReset+0x64>)
 802bd2a:	4293      	cmp	r3, r2
 802bd2c:	d901      	bls.n	802bd32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802bd2e:	2303      	movs	r3, #3
 802bd30:	e01b      	b.n	802bd6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802bd32:	687b      	ldr	r3, [r7, #4]
 802bd34:	691b      	ldr	r3, [r3, #16]
 802bd36:	2b00      	cmp	r3, #0
 802bd38:	daf2      	bge.n	802bd20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802bd3a:	2300      	movs	r3, #0
 802bd3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802bd3e:	687b      	ldr	r3, [r7, #4]
 802bd40:	691b      	ldr	r3, [r3, #16]
 802bd42:	f043 0201 	orr.w	r2, r3, #1
 802bd46:	687b      	ldr	r3, [r7, #4]
 802bd48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802bd4a:	68fb      	ldr	r3, [r7, #12]
 802bd4c:	3301      	adds	r3, #1
 802bd4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802bd50:	68fb      	ldr	r3, [r7, #12]
 802bd52:	4a09      	ldr	r2, [pc, #36]	; (802bd78 <USB_CoreReset+0x64>)
 802bd54:	4293      	cmp	r3, r2
 802bd56:	d901      	bls.n	802bd5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802bd58:	2303      	movs	r3, #3
 802bd5a:	e006      	b.n	802bd6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802bd5c:	687b      	ldr	r3, [r7, #4]
 802bd5e:	691b      	ldr	r3, [r3, #16]
 802bd60:	f003 0301 	and.w	r3, r3, #1
 802bd64:	2b01      	cmp	r3, #1
 802bd66:	d0f0      	beq.n	802bd4a <USB_CoreReset+0x36>

  return HAL_OK;
 802bd68:	2300      	movs	r3, #0
}
 802bd6a:	4618      	mov	r0, r3
 802bd6c:	3714      	adds	r7, #20
 802bd6e:	46bd      	mov	sp, r7
 802bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bd74:	4770      	bx	lr
 802bd76:	bf00      	nop
 802bd78:	00030d40 	.word	0x00030d40

0802bd7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802bd7c:	b084      	sub	sp, #16
 802bd7e:	b580      	push	{r7, lr}
 802bd80:	b086      	sub	sp, #24
 802bd82:	af00      	add	r7, sp, #0
 802bd84:	6078      	str	r0, [r7, #4]
 802bd86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802bd8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802bd8e:	2300      	movs	r3, #0
 802bd90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802bd92:	687b      	ldr	r3, [r7, #4]
 802bd94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802bd96:	68fb      	ldr	r3, [r7, #12]
 802bd98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802bd9c:	461a      	mov	r2, r3
 802bd9e:	2300      	movs	r3, #0
 802bda0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 802bda2:	687b      	ldr	r3, [r7, #4]
 802bda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bda6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 802bdaa:	687b      	ldr	r3, [r7, #4]
 802bdac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 802bdae:	687b      	ldr	r3, [r7, #4]
 802bdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bdb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 802bdb6:	687b      	ldr	r3, [r7, #4]
 802bdb8:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 802bdba:	687b      	ldr	r3, [r7, #4]
 802bdbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802bdbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802bdc2:	2b00      	cmp	r3, #0
 802bdc4:	d018      	beq.n	802bdf8 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 802bdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bdc8:	2b01      	cmp	r3, #1
 802bdca:	d10a      	bne.n	802bde2 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 802bdcc:	68fb      	ldr	r3, [r7, #12]
 802bdce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802bdd2:	681b      	ldr	r3, [r3, #0]
 802bdd4:	68fa      	ldr	r2, [r7, #12]
 802bdd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802bdda:	f043 0304 	orr.w	r3, r3, #4
 802bdde:	6013      	str	r3, [r2, #0]
 802bde0:	e014      	b.n	802be0c <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802bde2:	68fb      	ldr	r3, [r7, #12]
 802bde4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802bde8:	681b      	ldr	r3, [r3, #0]
 802bdea:	68fa      	ldr	r2, [r7, #12]
 802bdec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802bdf0:	f023 0304 	bic.w	r3, r3, #4
 802bdf4:	6013      	str	r3, [r2, #0]
 802bdf6:	e009      	b.n	802be0c <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802bdf8:	68fb      	ldr	r3, [r7, #12]
 802bdfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802bdfe:	681b      	ldr	r3, [r3, #0]
 802be00:	68fa      	ldr	r2, [r7, #12]
 802be02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802be06:	f023 0304 	bic.w	r3, r3, #4
 802be0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802be0c:	2110      	movs	r1, #16
 802be0e:	6878      	ldr	r0, [r7, #4]
 802be10:	f7ff fe64 	bl	802badc <USB_FlushTxFifo>
 802be14:	4603      	mov	r3, r0
 802be16:	2b00      	cmp	r3, #0
 802be18:	d001      	beq.n	802be1e <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 802be1a:	2301      	movs	r3, #1
 802be1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802be1e:	6878      	ldr	r0, [r7, #4]
 802be20:	f7ff fe90 	bl	802bb44 <USB_FlushRxFifo>
 802be24:	4603      	mov	r3, r0
 802be26:	2b00      	cmp	r3, #0
 802be28:	d001      	beq.n	802be2e <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 802be2a:	2301      	movs	r3, #1
 802be2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802be2e:	2300      	movs	r3, #0
 802be30:	613b      	str	r3, [r7, #16]
 802be32:	e015      	b.n	802be60 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802be34:	693b      	ldr	r3, [r7, #16]
 802be36:	015a      	lsls	r2, r3, #5
 802be38:	68fb      	ldr	r3, [r7, #12]
 802be3a:	4413      	add	r3, r2
 802be3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802be40:	461a      	mov	r2, r3
 802be42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802be46:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 802be48:	693b      	ldr	r3, [r7, #16]
 802be4a:	015a      	lsls	r2, r3, #5
 802be4c:	68fb      	ldr	r3, [r7, #12]
 802be4e:	4413      	add	r3, r2
 802be50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802be54:	461a      	mov	r2, r3
 802be56:	2300      	movs	r3, #0
 802be58:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802be5a:	693b      	ldr	r3, [r7, #16]
 802be5c:	3301      	adds	r3, #1
 802be5e:	613b      	str	r3, [r7, #16]
 802be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802be62:	693a      	ldr	r2, [r7, #16]
 802be64:	429a      	cmp	r2, r3
 802be66:	d3e5      	bcc.n	802be34 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802be68:	687b      	ldr	r3, [r7, #4]
 802be6a:	2200      	movs	r2, #0
 802be6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802be6e:	687b      	ldr	r3, [r7, #4]
 802be70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802be74:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802be76:	687b      	ldr	r3, [r7, #4]
 802be78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802be7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802be7e:	2b00      	cmp	r3, #0
 802be80:	d00b      	beq.n	802be9a <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802be82:	687b      	ldr	r3, [r7, #4]
 802be84:	f44f 7200 	mov.w	r2, #512	; 0x200
 802be88:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802be8a:	687b      	ldr	r3, [r7, #4]
 802be8c:	4a13      	ldr	r2, [pc, #76]	; (802bedc <USB_HostInit+0x160>)
 802be8e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802be90:	687b      	ldr	r3, [r7, #4]
 802be92:	4a13      	ldr	r2, [pc, #76]	; (802bee0 <USB_HostInit+0x164>)
 802be94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 802be98:	e009      	b.n	802beae <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 802be9a:	687b      	ldr	r3, [r7, #4]
 802be9c:	2280      	movs	r2, #128	; 0x80
 802be9e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802bea0:	687b      	ldr	r3, [r7, #4]
 802bea2:	4a10      	ldr	r2, [pc, #64]	; (802bee4 <USB_HostInit+0x168>)
 802bea4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802bea6:	687b      	ldr	r3, [r7, #4]
 802bea8:	4a0f      	ldr	r2, [pc, #60]	; (802bee8 <USB_HostInit+0x16c>)
 802beaa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802beae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802beb0:	2b00      	cmp	r3, #0
 802beb2:	d105      	bne.n	802bec0 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802beb4:	687b      	ldr	r3, [r7, #4]
 802beb6:	699b      	ldr	r3, [r3, #24]
 802beb8:	f043 0210 	orr.w	r2, r3, #16
 802bebc:	687b      	ldr	r3, [r7, #4]
 802bebe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 802bec0:	687b      	ldr	r3, [r7, #4]
 802bec2:	699a      	ldr	r2, [r3, #24]
 802bec4:	4b09      	ldr	r3, [pc, #36]	; (802beec <USB_HostInit+0x170>)
 802bec6:	4313      	orrs	r3, r2
 802bec8:	687a      	ldr	r2, [r7, #4]
 802beca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 802becc:	7dfb      	ldrb	r3, [r7, #23]
}
 802bece:	4618      	mov	r0, r3
 802bed0:	3718      	adds	r7, #24
 802bed2:	46bd      	mov	sp, r7
 802bed4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802bed8:	b004      	add	sp, #16
 802beda:	4770      	bx	lr
 802bedc:	01000200 	.word	0x01000200
 802bee0:	00e00300 	.word	0x00e00300
 802bee4:	00600080 	.word	0x00600080
 802bee8:	004000e0 	.word	0x004000e0
 802beec:	a3200008 	.word	0xa3200008

0802bef0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 802bef0:	b480      	push	{r7}
 802bef2:	b085      	sub	sp, #20
 802bef4:	af00      	add	r7, sp, #0
 802bef6:	6078      	str	r0, [r7, #4]
 802bef8:	460b      	mov	r3, r1
 802befa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802befc:	687b      	ldr	r3, [r7, #4]
 802befe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 802bf00:	68fb      	ldr	r3, [r7, #12]
 802bf02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802bf06:	681b      	ldr	r3, [r3, #0]
 802bf08:	68fa      	ldr	r2, [r7, #12]
 802bf0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802bf0e:	f023 0303 	bic.w	r3, r3, #3
 802bf12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 802bf14:	68fb      	ldr	r3, [r7, #12]
 802bf16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802bf1a:	681a      	ldr	r2, [r3, #0]
 802bf1c:	78fb      	ldrb	r3, [r7, #3]
 802bf1e:	f003 0303 	and.w	r3, r3, #3
 802bf22:	68f9      	ldr	r1, [r7, #12]
 802bf24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802bf28:	4313      	orrs	r3, r2
 802bf2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802bf2c:	78fb      	ldrb	r3, [r7, #3]
 802bf2e:	2b01      	cmp	r3, #1
 802bf30:	d107      	bne.n	802bf42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802bf32:	68fb      	ldr	r3, [r7, #12]
 802bf34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802bf38:	461a      	mov	r2, r3
 802bf3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802bf3e:	6053      	str	r3, [r2, #4]
 802bf40:	e009      	b.n	802bf56 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802bf42:	78fb      	ldrb	r3, [r7, #3]
 802bf44:	2b02      	cmp	r3, #2
 802bf46:	d106      	bne.n	802bf56 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 802bf48:	68fb      	ldr	r3, [r7, #12]
 802bf4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802bf4e:	461a      	mov	r2, r3
 802bf50:	f241 7370 	movw	r3, #6000	; 0x1770
 802bf54:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802bf56:	2300      	movs	r3, #0
}
 802bf58:	4618      	mov	r0, r3
 802bf5a:	3714      	adds	r7, #20
 802bf5c:	46bd      	mov	sp, r7
 802bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bf62:	4770      	bx	lr

0802bf64 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802bf64:	b580      	push	{r7, lr}
 802bf66:	b084      	sub	sp, #16
 802bf68:	af00      	add	r7, sp, #0
 802bf6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802bf6c:	687b      	ldr	r3, [r7, #4]
 802bf6e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 802bf70:	2300      	movs	r3, #0
 802bf72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802bf74:	68fb      	ldr	r3, [r7, #12]
 802bf76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802bf7a:	681b      	ldr	r3, [r3, #0]
 802bf7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802bf7e:	68bb      	ldr	r3, [r7, #8]
 802bf80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802bf84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802bf86:	68bb      	ldr	r3, [r7, #8]
 802bf88:	68fa      	ldr	r2, [r7, #12]
 802bf8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802bf8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802bf92:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802bf94:	2064      	movs	r0, #100	; 0x64
 802bf96:	f7f6 f8ad 	bl	80220f4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 802bf9a:	68bb      	ldr	r3, [r7, #8]
 802bf9c:	68fa      	ldr	r2, [r7, #12]
 802bf9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802bfa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802bfa6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 802bfa8:	200a      	movs	r0, #10
 802bfaa:	f7f6 f8a3 	bl	80220f4 <HAL_Delay>

  return HAL_OK;
 802bfae:	2300      	movs	r3, #0
}
 802bfb0:	4618      	mov	r0, r3
 802bfb2:	3710      	adds	r7, #16
 802bfb4:	46bd      	mov	sp, r7
 802bfb6:	bd80      	pop	{r7, pc}

0802bfb8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 802bfb8:	b480      	push	{r7}
 802bfba:	b085      	sub	sp, #20
 802bfbc:	af00      	add	r7, sp, #0
 802bfbe:	6078      	str	r0, [r7, #4]
 802bfc0:	460b      	mov	r3, r1
 802bfc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802bfc4:	687b      	ldr	r3, [r7, #4]
 802bfc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802bfc8:	2300      	movs	r3, #0
 802bfca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802bfcc:	68fb      	ldr	r3, [r7, #12]
 802bfce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802bfd2:	681b      	ldr	r3, [r3, #0]
 802bfd4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802bfd6:	68bb      	ldr	r3, [r7, #8]
 802bfd8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802bfdc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 802bfde:	68bb      	ldr	r3, [r7, #8]
 802bfe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802bfe4:	2b00      	cmp	r3, #0
 802bfe6:	d109      	bne.n	802bffc <USB_DriveVbus+0x44>
 802bfe8:	78fb      	ldrb	r3, [r7, #3]
 802bfea:	2b01      	cmp	r3, #1
 802bfec:	d106      	bne.n	802bffc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 802bfee:	68bb      	ldr	r3, [r7, #8]
 802bff0:	68fa      	ldr	r2, [r7, #12]
 802bff2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802bff6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802bffa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802bffc:	68bb      	ldr	r3, [r7, #8]
 802bffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802c002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c006:	d109      	bne.n	802c01c <USB_DriveVbus+0x64>
 802c008:	78fb      	ldrb	r3, [r7, #3]
 802c00a:	2b00      	cmp	r3, #0
 802c00c:	d106      	bne.n	802c01c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802c00e:	68bb      	ldr	r3, [r7, #8]
 802c010:	68fa      	ldr	r2, [r7, #12]
 802c012:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802c016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802c01a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802c01c:	2300      	movs	r3, #0
}
 802c01e:	4618      	mov	r0, r3
 802c020:	3714      	adds	r7, #20
 802c022:	46bd      	mov	sp, r7
 802c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c028:	4770      	bx	lr

0802c02a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802c02a:	b480      	push	{r7}
 802c02c:	b085      	sub	sp, #20
 802c02e:	af00      	add	r7, sp, #0
 802c030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c032:	687b      	ldr	r3, [r7, #4]
 802c034:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802c036:	2300      	movs	r3, #0
 802c038:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802c03a:	68fb      	ldr	r3, [r7, #12]
 802c03c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802c040:	681b      	ldr	r3, [r3, #0]
 802c042:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802c044:	68bb      	ldr	r3, [r7, #8]
 802c046:	0c5b      	lsrs	r3, r3, #17
 802c048:	f003 0303 	and.w	r3, r3, #3
}
 802c04c:	4618      	mov	r0, r3
 802c04e:	3714      	adds	r7, #20
 802c050:	46bd      	mov	sp, r7
 802c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c056:	4770      	bx	lr

0802c058 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 802c058:	b480      	push	{r7}
 802c05a:	b085      	sub	sp, #20
 802c05c:	af00      	add	r7, sp, #0
 802c05e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c060:	687b      	ldr	r3, [r7, #4]
 802c062:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802c064:	68fb      	ldr	r3, [r7, #12]
 802c066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c06a:	689b      	ldr	r3, [r3, #8]
 802c06c:	b29b      	uxth	r3, r3
}
 802c06e:	4618      	mov	r0, r3
 802c070:	3714      	adds	r7, #20
 802c072:	46bd      	mov	sp, r7
 802c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c078:	4770      	bx	lr
	...

0802c07c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802c07c:	b580      	push	{r7, lr}
 802c07e:	b088      	sub	sp, #32
 802c080:	af00      	add	r7, sp, #0
 802c082:	6078      	str	r0, [r7, #4]
 802c084:	4608      	mov	r0, r1
 802c086:	4611      	mov	r1, r2
 802c088:	461a      	mov	r2, r3
 802c08a:	4603      	mov	r3, r0
 802c08c:	70fb      	strb	r3, [r7, #3]
 802c08e:	460b      	mov	r3, r1
 802c090:	70bb      	strb	r3, [r7, #2]
 802c092:	4613      	mov	r3, r2
 802c094:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802c096:	2300      	movs	r3, #0
 802c098:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c09a:	687b      	ldr	r3, [r7, #4]
 802c09c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 802c09e:	78fb      	ldrb	r3, [r7, #3]
 802c0a0:	015a      	lsls	r2, r3, #5
 802c0a2:	693b      	ldr	r3, [r7, #16]
 802c0a4:	4413      	add	r3, r2
 802c0a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c0aa:	461a      	mov	r2, r3
 802c0ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802c0b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802c0b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802c0b6:	2b03      	cmp	r3, #3
 802c0b8:	d87e      	bhi.n	802c1b8 <USB_HC_Init+0x13c>
 802c0ba:	a201      	add	r2, pc, #4	; (adr r2, 802c0c0 <USB_HC_Init+0x44>)
 802c0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c0c0:	0802c0d1 	.word	0x0802c0d1
 802c0c4:	0802c17b 	.word	0x0802c17b
 802c0c8:	0802c0d1 	.word	0x0802c0d1
 802c0cc:	0802c13d 	.word	0x0802c13d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802c0d0:	78fb      	ldrb	r3, [r7, #3]
 802c0d2:	015a      	lsls	r2, r3, #5
 802c0d4:	693b      	ldr	r3, [r7, #16]
 802c0d6:	4413      	add	r3, r2
 802c0d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c0dc:	461a      	mov	r2, r3
 802c0de:	f240 439d 	movw	r3, #1181	; 0x49d
 802c0e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 802c0e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802c0e8:	2b00      	cmp	r3, #0
 802c0ea:	da10      	bge.n	802c10e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802c0ec:	78fb      	ldrb	r3, [r7, #3]
 802c0ee:	015a      	lsls	r2, r3, #5
 802c0f0:	693b      	ldr	r3, [r7, #16]
 802c0f2:	4413      	add	r3, r2
 802c0f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c0f8:	68db      	ldr	r3, [r3, #12]
 802c0fa:	78fa      	ldrb	r2, [r7, #3]
 802c0fc:	0151      	lsls	r1, r2, #5
 802c0fe:	693a      	ldr	r2, [r7, #16]
 802c100:	440a      	add	r2, r1
 802c102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802c10a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 802c10c:	e057      	b.n	802c1be <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802c10e:	687b      	ldr	r3, [r7, #4]
 802c110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802c112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802c116:	2b00      	cmp	r3, #0
 802c118:	d051      	beq.n	802c1be <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 802c11a:	78fb      	ldrb	r3, [r7, #3]
 802c11c:	015a      	lsls	r2, r3, #5
 802c11e:	693b      	ldr	r3, [r7, #16]
 802c120:	4413      	add	r3, r2
 802c122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c126:	68db      	ldr	r3, [r3, #12]
 802c128:	78fa      	ldrb	r2, [r7, #3]
 802c12a:	0151      	lsls	r1, r2, #5
 802c12c:	693a      	ldr	r2, [r7, #16]
 802c12e:	440a      	add	r2, r1
 802c130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c134:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802c138:	60d3      	str	r3, [r2, #12]
      break;
 802c13a:	e040      	b.n	802c1be <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802c13c:	78fb      	ldrb	r3, [r7, #3]
 802c13e:	015a      	lsls	r2, r3, #5
 802c140:	693b      	ldr	r3, [r7, #16]
 802c142:	4413      	add	r3, r2
 802c144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c148:	461a      	mov	r2, r3
 802c14a:	f240 639d 	movw	r3, #1693	; 0x69d
 802c14e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802c150:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802c154:	2b00      	cmp	r3, #0
 802c156:	da34      	bge.n	802c1c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802c158:	78fb      	ldrb	r3, [r7, #3]
 802c15a:	015a      	lsls	r2, r3, #5
 802c15c:	693b      	ldr	r3, [r7, #16]
 802c15e:	4413      	add	r3, r2
 802c160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c164:	68db      	ldr	r3, [r3, #12]
 802c166:	78fa      	ldrb	r2, [r7, #3]
 802c168:	0151      	lsls	r1, r2, #5
 802c16a:	693a      	ldr	r2, [r7, #16]
 802c16c:	440a      	add	r2, r1
 802c16e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802c176:	60d3      	str	r3, [r2, #12]
      }

      break;
 802c178:	e023      	b.n	802c1c2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802c17a:	78fb      	ldrb	r3, [r7, #3]
 802c17c:	015a      	lsls	r2, r3, #5
 802c17e:	693b      	ldr	r3, [r7, #16]
 802c180:	4413      	add	r3, r2
 802c182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c186:	461a      	mov	r2, r3
 802c188:	f240 2325 	movw	r3, #549	; 0x225
 802c18c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802c18e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802c192:	2b00      	cmp	r3, #0
 802c194:	da17      	bge.n	802c1c6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802c196:	78fb      	ldrb	r3, [r7, #3]
 802c198:	015a      	lsls	r2, r3, #5
 802c19a:	693b      	ldr	r3, [r7, #16]
 802c19c:	4413      	add	r3, r2
 802c19e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c1a2:	68db      	ldr	r3, [r3, #12]
 802c1a4:	78fa      	ldrb	r2, [r7, #3]
 802c1a6:	0151      	lsls	r1, r2, #5
 802c1a8:	693a      	ldr	r2, [r7, #16]
 802c1aa:	440a      	add	r2, r1
 802c1ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c1b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802c1b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 802c1b6:	e006      	b.n	802c1c6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 802c1b8:	2301      	movs	r3, #1
 802c1ba:	77fb      	strb	r3, [r7, #31]
      break;
 802c1bc:	e004      	b.n	802c1c8 <USB_HC_Init+0x14c>
      break;
 802c1be:	bf00      	nop
 802c1c0:	e002      	b.n	802c1c8 <USB_HC_Init+0x14c>
      break;
 802c1c2:	bf00      	nop
 802c1c4:	e000      	b.n	802c1c8 <USB_HC_Init+0x14c>
      break;
 802c1c6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 802c1c8:	78fb      	ldrb	r3, [r7, #3]
 802c1ca:	015a      	lsls	r2, r3, #5
 802c1cc:	693b      	ldr	r3, [r7, #16]
 802c1ce:	4413      	add	r3, r2
 802c1d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c1d4:	68db      	ldr	r3, [r3, #12]
 802c1d6:	78fa      	ldrb	r2, [r7, #3]
 802c1d8:	0151      	lsls	r1, r2, #5
 802c1da:	693a      	ldr	r2, [r7, #16]
 802c1dc:	440a      	add	r2, r1
 802c1de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c1e2:	f043 0302 	orr.w	r3, r3, #2
 802c1e6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 802c1e8:	693b      	ldr	r3, [r7, #16]
 802c1ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c1ee:	699a      	ldr	r2, [r3, #24]
 802c1f0:	78fb      	ldrb	r3, [r7, #3]
 802c1f2:	f003 030f 	and.w	r3, r3, #15
 802c1f6:	2101      	movs	r1, #1
 802c1f8:	fa01 f303 	lsl.w	r3, r1, r3
 802c1fc:	6939      	ldr	r1, [r7, #16]
 802c1fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802c202:	4313      	orrs	r3, r2
 802c204:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 802c206:	687b      	ldr	r3, [r7, #4]
 802c208:	699b      	ldr	r3, [r3, #24]
 802c20a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802c20e:	687b      	ldr	r3, [r7, #4]
 802c210:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 802c212:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802c216:	2b00      	cmp	r3, #0
 802c218:	da03      	bge.n	802c222 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 802c21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802c21e:	61bb      	str	r3, [r7, #24]
 802c220:	e001      	b.n	802c226 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 802c222:	2300      	movs	r3, #0
 802c224:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 802c226:	6878      	ldr	r0, [r7, #4]
 802c228:	f7ff feff 	bl	802c02a <USB_GetHostSpeed>
 802c22c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 802c22e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802c232:	2b02      	cmp	r3, #2
 802c234:	d106      	bne.n	802c244 <USB_HC_Init+0x1c8>
 802c236:	68fb      	ldr	r3, [r7, #12]
 802c238:	2b02      	cmp	r3, #2
 802c23a:	d003      	beq.n	802c244 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 802c23c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802c240:	617b      	str	r3, [r7, #20]
 802c242:	e001      	b.n	802c248 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802c244:	2300      	movs	r3, #0
 802c246:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802c248:	787b      	ldrb	r3, [r7, #1]
 802c24a:	059b      	lsls	r3, r3, #22
 802c24c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802c250:	78bb      	ldrb	r3, [r7, #2]
 802c252:	02db      	lsls	r3, r3, #11
 802c254:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802c258:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802c25a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802c25e:	049b      	lsls	r3, r3, #18
 802c260:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802c264:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802c266:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802c268:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802c26c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802c26e:	69bb      	ldr	r3, [r7, #24]
 802c270:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802c272:	78fb      	ldrb	r3, [r7, #3]
 802c274:	0159      	lsls	r1, r3, #5
 802c276:	693b      	ldr	r3, [r7, #16]
 802c278:	440b      	add	r3, r1
 802c27a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c27e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802c280:	697b      	ldr	r3, [r7, #20]
 802c282:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802c284:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 802c286:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802c28a:	2b03      	cmp	r3, #3
 802c28c:	d003      	beq.n	802c296 <USB_HC_Init+0x21a>
 802c28e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802c292:	2b01      	cmp	r3, #1
 802c294:	d10f      	bne.n	802c2b6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 802c296:	78fb      	ldrb	r3, [r7, #3]
 802c298:	015a      	lsls	r2, r3, #5
 802c29a:	693b      	ldr	r3, [r7, #16]
 802c29c:	4413      	add	r3, r2
 802c29e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c2a2:	681b      	ldr	r3, [r3, #0]
 802c2a4:	78fa      	ldrb	r2, [r7, #3]
 802c2a6:	0151      	lsls	r1, r2, #5
 802c2a8:	693a      	ldr	r2, [r7, #16]
 802c2aa:	440a      	add	r2, r1
 802c2ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c2b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802c2b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 802c2b6:	7ffb      	ldrb	r3, [r7, #31]
}
 802c2b8:	4618      	mov	r0, r3
 802c2ba:	3720      	adds	r7, #32
 802c2bc:	46bd      	mov	sp, r7
 802c2be:	bd80      	pop	{r7, pc}

0802c2c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 802c2c0:	b580      	push	{r7, lr}
 802c2c2:	b08c      	sub	sp, #48	; 0x30
 802c2c4:	af02      	add	r7, sp, #8
 802c2c6:	60f8      	str	r0, [r7, #12]
 802c2c8:	60b9      	str	r1, [r7, #8]
 802c2ca:	4613      	mov	r3, r2
 802c2cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c2ce:	68fb      	ldr	r3, [r7, #12]
 802c2d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 802c2d2:	68bb      	ldr	r3, [r7, #8]
 802c2d4:	785b      	ldrb	r3, [r3, #1]
 802c2d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 802c2d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 802c2dc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802c2de:	68fb      	ldr	r3, [r7, #12]
 802c2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802c2e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802c2e6:	2b00      	cmp	r3, #0
 802c2e8:	d02d      	beq.n	802c346 <USB_HC_StartXfer+0x86>
 802c2ea:	68bb      	ldr	r3, [r7, #8]
 802c2ec:	791b      	ldrb	r3, [r3, #4]
 802c2ee:	2b00      	cmp	r3, #0
 802c2f0:	d129      	bne.n	802c346 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 802c2f2:	79fb      	ldrb	r3, [r7, #7]
 802c2f4:	2b01      	cmp	r3, #1
 802c2f6:	d117      	bne.n	802c328 <USB_HC_StartXfer+0x68>
 802c2f8:	68bb      	ldr	r3, [r7, #8]
 802c2fa:	79db      	ldrb	r3, [r3, #7]
 802c2fc:	2b00      	cmp	r3, #0
 802c2fe:	d003      	beq.n	802c308 <USB_HC_StartXfer+0x48>
 802c300:	68bb      	ldr	r3, [r7, #8]
 802c302:	79db      	ldrb	r3, [r3, #7]
 802c304:	2b02      	cmp	r3, #2
 802c306:	d10f      	bne.n	802c328 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 802c308:	69fb      	ldr	r3, [r7, #28]
 802c30a:	015a      	lsls	r2, r3, #5
 802c30c:	6a3b      	ldr	r3, [r7, #32]
 802c30e:	4413      	add	r3, r2
 802c310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c314:	68db      	ldr	r3, [r3, #12]
 802c316:	69fa      	ldr	r2, [r7, #28]
 802c318:	0151      	lsls	r1, r2, #5
 802c31a:	6a3a      	ldr	r2, [r7, #32]
 802c31c:	440a      	add	r2, r1
 802c31e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802c326:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 802c328:	79fb      	ldrb	r3, [r7, #7]
 802c32a:	2b00      	cmp	r3, #0
 802c32c:	d10b      	bne.n	802c346 <USB_HC_StartXfer+0x86>
 802c32e:	68bb      	ldr	r3, [r7, #8]
 802c330:	795b      	ldrb	r3, [r3, #5]
 802c332:	2b01      	cmp	r3, #1
 802c334:	d107      	bne.n	802c346 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 802c336:	68bb      	ldr	r3, [r7, #8]
 802c338:	785b      	ldrb	r3, [r3, #1]
 802c33a:	4619      	mov	r1, r3
 802c33c:	68f8      	ldr	r0, [r7, #12]
 802c33e:	f000 fa0f 	bl	802c760 <USB_DoPing>
      return HAL_OK;
 802c342:	2300      	movs	r3, #0
 802c344:	e0f8      	b.n	802c538 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 802c346:	68bb      	ldr	r3, [r7, #8]
 802c348:	695b      	ldr	r3, [r3, #20]
 802c34a:	2b00      	cmp	r3, #0
 802c34c:	d018      	beq.n	802c380 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802c34e:	68bb      	ldr	r3, [r7, #8]
 802c350:	695b      	ldr	r3, [r3, #20]
 802c352:	68ba      	ldr	r2, [r7, #8]
 802c354:	8912      	ldrh	r2, [r2, #8]
 802c356:	4413      	add	r3, r2
 802c358:	3b01      	subs	r3, #1
 802c35a:	68ba      	ldr	r2, [r7, #8]
 802c35c:	8912      	ldrh	r2, [r2, #8]
 802c35e:	fbb3 f3f2 	udiv	r3, r3, r2
 802c362:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 802c364:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802c366:	8b7b      	ldrh	r3, [r7, #26]
 802c368:	429a      	cmp	r2, r3
 802c36a:	d90b      	bls.n	802c384 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 802c36c:	8b7b      	ldrh	r3, [r7, #26]
 802c36e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802c370:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802c372:	68ba      	ldr	r2, [r7, #8]
 802c374:	8912      	ldrh	r2, [r2, #8]
 802c376:	fb03 f202 	mul.w	r2, r3, r2
 802c37a:	68bb      	ldr	r3, [r7, #8]
 802c37c:	611a      	str	r2, [r3, #16]
 802c37e:	e001      	b.n	802c384 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 802c380:	2301      	movs	r3, #1
 802c382:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 802c384:	68bb      	ldr	r3, [r7, #8]
 802c386:	78db      	ldrb	r3, [r3, #3]
 802c388:	2b00      	cmp	r3, #0
 802c38a:	d007      	beq.n	802c39c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802c38c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802c38e:	68ba      	ldr	r2, [r7, #8]
 802c390:	8912      	ldrh	r2, [r2, #8]
 802c392:	fb03 f202 	mul.w	r2, r3, r2
 802c396:	68bb      	ldr	r3, [r7, #8]
 802c398:	611a      	str	r2, [r3, #16]
 802c39a:	e003      	b.n	802c3a4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 802c39c:	68bb      	ldr	r3, [r7, #8]
 802c39e:	695a      	ldr	r2, [r3, #20]
 802c3a0:	68bb      	ldr	r3, [r7, #8]
 802c3a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802c3a4:	68bb      	ldr	r3, [r7, #8]
 802c3a6:	691b      	ldr	r3, [r3, #16]
 802c3a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802c3ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802c3ae:	04d9      	lsls	r1, r3, #19
 802c3b0:	4b63      	ldr	r3, [pc, #396]	; (802c540 <USB_HC_StartXfer+0x280>)
 802c3b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802c3b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 802c3b6:	68bb      	ldr	r3, [r7, #8]
 802c3b8:	7a9b      	ldrb	r3, [r3, #10]
 802c3ba:	075b      	lsls	r3, r3, #29
 802c3bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802c3c0:	69f9      	ldr	r1, [r7, #28]
 802c3c2:	0148      	lsls	r0, r1, #5
 802c3c4:	6a39      	ldr	r1, [r7, #32]
 802c3c6:	4401      	add	r1, r0
 802c3c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802c3cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802c3ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 802c3d0:	79fb      	ldrb	r3, [r7, #7]
 802c3d2:	2b00      	cmp	r3, #0
 802c3d4:	d009      	beq.n	802c3ea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 802c3d6:	68bb      	ldr	r3, [r7, #8]
 802c3d8:	68d9      	ldr	r1, [r3, #12]
 802c3da:	69fb      	ldr	r3, [r7, #28]
 802c3dc:	015a      	lsls	r2, r3, #5
 802c3de:	6a3b      	ldr	r3, [r7, #32]
 802c3e0:	4413      	add	r3, r2
 802c3e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c3e6:	460a      	mov	r2, r1
 802c3e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 802c3ea:	6a3b      	ldr	r3, [r7, #32]
 802c3ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c3f0:	689b      	ldr	r3, [r3, #8]
 802c3f2:	f003 0301 	and.w	r3, r3, #1
 802c3f6:	2b00      	cmp	r3, #0
 802c3f8:	bf0c      	ite	eq
 802c3fa:	2301      	moveq	r3, #1
 802c3fc:	2300      	movne	r3, #0
 802c3fe:	b2db      	uxtb	r3, r3
 802c400:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 802c402:	69fb      	ldr	r3, [r7, #28]
 802c404:	015a      	lsls	r2, r3, #5
 802c406:	6a3b      	ldr	r3, [r7, #32]
 802c408:	4413      	add	r3, r2
 802c40a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c40e:	681b      	ldr	r3, [r3, #0]
 802c410:	69fa      	ldr	r2, [r7, #28]
 802c412:	0151      	lsls	r1, r2, #5
 802c414:	6a3a      	ldr	r2, [r7, #32]
 802c416:	440a      	add	r2, r1
 802c418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c41c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802c420:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 802c422:	69fb      	ldr	r3, [r7, #28]
 802c424:	015a      	lsls	r2, r3, #5
 802c426:	6a3b      	ldr	r3, [r7, #32]
 802c428:	4413      	add	r3, r2
 802c42a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c42e:	681a      	ldr	r2, [r3, #0]
 802c430:	7e7b      	ldrb	r3, [r7, #25]
 802c432:	075b      	lsls	r3, r3, #29
 802c434:	69f9      	ldr	r1, [r7, #28]
 802c436:	0148      	lsls	r0, r1, #5
 802c438:	6a39      	ldr	r1, [r7, #32]
 802c43a:	4401      	add	r1, r0
 802c43c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 802c440:	4313      	orrs	r3, r2
 802c442:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 802c444:	69fb      	ldr	r3, [r7, #28]
 802c446:	015a      	lsls	r2, r3, #5
 802c448:	6a3b      	ldr	r3, [r7, #32]
 802c44a:	4413      	add	r3, r2
 802c44c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c450:	681b      	ldr	r3, [r3, #0]
 802c452:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802c454:	693b      	ldr	r3, [r7, #16]
 802c456:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802c45a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 802c45c:	68bb      	ldr	r3, [r7, #8]
 802c45e:	78db      	ldrb	r3, [r3, #3]
 802c460:	2b00      	cmp	r3, #0
 802c462:	d004      	beq.n	802c46e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 802c464:	693b      	ldr	r3, [r7, #16]
 802c466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802c46a:	613b      	str	r3, [r7, #16]
 802c46c:	e003      	b.n	802c476 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 802c46e:	693b      	ldr	r3, [r7, #16]
 802c470:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802c474:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802c476:	693b      	ldr	r3, [r7, #16]
 802c478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c47c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 802c47e:	69fb      	ldr	r3, [r7, #28]
 802c480:	015a      	lsls	r2, r3, #5
 802c482:	6a3b      	ldr	r3, [r7, #32]
 802c484:	4413      	add	r3, r2
 802c486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c48a:	461a      	mov	r2, r3
 802c48c:	693b      	ldr	r3, [r7, #16]
 802c48e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 802c490:	79fb      	ldrb	r3, [r7, #7]
 802c492:	2b00      	cmp	r3, #0
 802c494:	d001      	beq.n	802c49a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 802c496:	2300      	movs	r3, #0
 802c498:	e04e      	b.n	802c538 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 802c49a:	68bb      	ldr	r3, [r7, #8]
 802c49c:	78db      	ldrb	r3, [r3, #3]
 802c49e:	2b00      	cmp	r3, #0
 802c4a0:	d149      	bne.n	802c536 <USB_HC_StartXfer+0x276>
 802c4a2:	68bb      	ldr	r3, [r7, #8]
 802c4a4:	695b      	ldr	r3, [r3, #20]
 802c4a6:	2b00      	cmp	r3, #0
 802c4a8:	d045      	beq.n	802c536 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 802c4aa:	68bb      	ldr	r3, [r7, #8]
 802c4ac:	79db      	ldrb	r3, [r3, #7]
 802c4ae:	2b03      	cmp	r3, #3
 802c4b0:	d830      	bhi.n	802c514 <USB_HC_StartXfer+0x254>
 802c4b2:	a201      	add	r2, pc, #4	; (adr r2, 802c4b8 <USB_HC_StartXfer+0x1f8>)
 802c4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c4b8:	0802c4c9 	.word	0x0802c4c9
 802c4bc:	0802c4ed 	.word	0x0802c4ed
 802c4c0:	0802c4c9 	.word	0x0802c4c9
 802c4c4:	0802c4ed 	.word	0x0802c4ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802c4c8:	68bb      	ldr	r3, [r7, #8]
 802c4ca:	695b      	ldr	r3, [r3, #20]
 802c4cc:	3303      	adds	r3, #3
 802c4ce:	089b      	lsrs	r3, r3, #2
 802c4d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 802c4d2:	8afa      	ldrh	r2, [r7, #22]
 802c4d4:	68fb      	ldr	r3, [r7, #12]
 802c4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c4d8:	b29b      	uxth	r3, r3
 802c4da:	429a      	cmp	r2, r3
 802c4dc:	d91c      	bls.n	802c518 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 802c4de:	68fb      	ldr	r3, [r7, #12]
 802c4e0:	699b      	ldr	r3, [r3, #24]
 802c4e2:	f043 0220 	orr.w	r2, r3, #32
 802c4e6:	68fb      	ldr	r3, [r7, #12]
 802c4e8:	619a      	str	r2, [r3, #24]
        }
        break;
 802c4ea:	e015      	b.n	802c518 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802c4ec:	68bb      	ldr	r3, [r7, #8]
 802c4ee:	695b      	ldr	r3, [r3, #20]
 802c4f0:	3303      	adds	r3, #3
 802c4f2:	089b      	lsrs	r3, r3, #2
 802c4f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 802c4f6:	8afa      	ldrh	r2, [r7, #22]
 802c4f8:	6a3b      	ldr	r3, [r7, #32]
 802c4fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c4fe:	691b      	ldr	r3, [r3, #16]
 802c500:	b29b      	uxth	r3, r3
 802c502:	429a      	cmp	r2, r3
 802c504:	d90a      	bls.n	802c51c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 802c506:	68fb      	ldr	r3, [r7, #12]
 802c508:	699b      	ldr	r3, [r3, #24]
 802c50a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 802c50e:	68fb      	ldr	r3, [r7, #12]
 802c510:	619a      	str	r2, [r3, #24]
        }
        break;
 802c512:	e003      	b.n	802c51c <USB_HC_StartXfer+0x25c>

      default:
        break;
 802c514:	bf00      	nop
 802c516:	e002      	b.n	802c51e <USB_HC_StartXfer+0x25e>
        break;
 802c518:	bf00      	nop
 802c51a:	e000      	b.n	802c51e <USB_HC_StartXfer+0x25e>
        break;
 802c51c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 802c51e:	68bb      	ldr	r3, [r7, #8]
 802c520:	68d9      	ldr	r1, [r3, #12]
 802c522:	68bb      	ldr	r3, [r7, #8]
 802c524:	785a      	ldrb	r2, [r3, #1]
 802c526:	68bb      	ldr	r3, [r7, #8]
 802c528:	695b      	ldr	r3, [r3, #20]
 802c52a:	b29b      	uxth	r3, r3
 802c52c:	2000      	movs	r0, #0
 802c52e:	9000      	str	r0, [sp, #0]
 802c530:	68f8      	ldr	r0, [r7, #12]
 802c532:	f7ff fb37 	bl	802bba4 <USB_WritePacket>
  }

  return HAL_OK;
 802c536:	2300      	movs	r3, #0
}
 802c538:	4618      	mov	r0, r3
 802c53a:	3728      	adds	r7, #40	; 0x28
 802c53c:	46bd      	mov	sp, r7
 802c53e:	bd80      	pop	{r7, pc}
 802c540:	1ff80000 	.word	0x1ff80000

0802c544 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802c544:	b480      	push	{r7}
 802c546:	b085      	sub	sp, #20
 802c548:	af00      	add	r7, sp, #0
 802c54a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c54c:	687b      	ldr	r3, [r7, #4]
 802c54e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802c550:	68fb      	ldr	r3, [r7, #12]
 802c552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c556:	695b      	ldr	r3, [r3, #20]
 802c558:	b29b      	uxth	r3, r3
}
 802c55a:	4618      	mov	r0, r3
 802c55c:	3714      	adds	r7, #20
 802c55e:	46bd      	mov	sp, r7
 802c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c564:	4770      	bx	lr

0802c566 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 802c566:	b480      	push	{r7}
 802c568:	b089      	sub	sp, #36	; 0x24
 802c56a:	af00      	add	r7, sp, #0
 802c56c:	6078      	str	r0, [r7, #4]
 802c56e:	460b      	mov	r3, r1
 802c570:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c572:	687b      	ldr	r3, [r7, #4]
 802c574:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 802c576:	78fb      	ldrb	r3, [r7, #3]
 802c578:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 802c57a:	2300      	movs	r3, #0
 802c57c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802c57e:	69bb      	ldr	r3, [r7, #24]
 802c580:	015a      	lsls	r2, r3, #5
 802c582:	69fb      	ldr	r3, [r7, #28]
 802c584:	4413      	add	r3, r2
 802c586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c58a:	681b      	ldr	r3, [r3, #0]
 802c58c:	0c9b      	lsrs	r3, r3, #18
 802c58e:	f003 0303 	and.w	r3, r3, #3
 802c592:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 802c594:	69bb      	ldr	r3, [r7, #24]
 802c596:	015a      	lsls	r2, r3, #5
 802c598:	69fb      	ldr	r3, [r7, #28]
 802c59a:	4413      	add	r3, r2
 802c59c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c5a0:	681b      	ldr	r3, [r3, #0]
 802c5a2:	0fdb      	lsrs	r3, r3, #31
 802c5a4:	f003 0301 	and.w	r3, r3, #1
 802c5a8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 802c5aa:	687b      	ldr	r3, [r7, #4]
 802c5ac:	689b      	ldr	r3, [r3, #8]
 802c5ae:	f003 0320 	and.w	r3, r3, #32
 802c5b2:	2b20      	cmp	r3, #32
 802c5b4:	d104      	bne.n	802c5c0 <USB_HC_Halt+0x5a>
 802c5b6:	693b      	ldr	r3, [r7, #16]
 802c5b8:	2b00      	cmp	r3, #0
 802c5ba:	d101      	bne.n	802c5c0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 802c5bc:	2300      	movs	r3, #0
 802c5be:	e0c8      	b.n	802c752 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 802c5c0:	697b      	ldr	r3, [r7, #20]
 802c5c2:	2b00      	cmp	r3, #0
 802c5c4:	d002      	beq.n	802c5cc <USB_HC_Halt+0x66>
 802c5c6:	697b      	ldr	r3, [r7, #20]
 802c5c8:	2b02      	cmp	r3, #2
 802c5ca:	d163      	bne.n	802c694 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802c5cc:	69bb      	ldr	r3, [r7, #24]
 802c5ce:	015a      	lsls	r2, r3, #5
 802c5d0:	69fb      	ldr	r3, [r7, #28]
 802c5d2:	4413      	add	r3, r2
 802c5d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c5d8:	681b      	ldr	r3, [r3, #0]
 802c5da:	69ba      	ldr	r2, [r7, #24]
 802c5dc:	0151      	lsls	r1, r2, #5
 802c5de:	69fa      	ldr	r2, [r7, #28]
 802c5e0:	440a      	add	r2, r1
 802c5e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c5e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802c5ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802c5ec:	687b      	ldr	r3, [r7, #4]
 802c5ee:	689b      	ldr	r3, [r3, #8]
 802c5f0:	f003 0320 	and.w	r3, r3, #32
 802c5f4:	2b00      	cmp	r3, #0
 802c5f6:	f040 80ab 	bne.w	802c750 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802c5fa:	687b      	ldr	r3, [r7, #4]
 802c5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c5fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802c602:	2b00      	cmp	r3, #0
 802c604:	d133      	bne.n	802c66e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802c606:	69bb      	ldr	r3, [r7, #24]
 802c608:	015a      	lsls	r2, r3, #5
 802c60a:	69fb      	ldr	r3, [r7, #28]
 802c60c:	4413      	add	r3, r2
 802c60e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c612:	681b      	ldr	r3, [r3, #0]
 802c614:	69ba      	ldr	r2, [r7, #24]
 802c616:	0151      	lsls	r1, r2, #5
 802c618:	69fa      	ldr	r2, [r7, #28]
 802c61a:	440a      	add	r2, r1
 802c61c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c624:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802c626:	69bb      	ldr	r3, [r7, #24]
 802c628:	015a      	lsls	r2, r3, #5
 802c62a:	69fb      	ldr	r3, [r7, #28]
 802c62c:	4413      	add	r3, r2
 802c62e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c632:	681b      	ldr	r3, [r3, #0]
 802c634:	69ba      	ldr	r2, [r7, #24]
 802c636:	0151      	lsls	r1, r2, #5
 802c638:	69fa      	ldr	r2, [r7, #28]
 802c63a:	440a      	add	r2, r1
 802c63c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c644:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 802c646:	68fb      	ldr	r3, [r7, #12]
 802c648:	3301      	adds	r3, #1
 802c64a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 802c64c:	68fb      	ldr	r3, [r7, #12]
 802c64e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c652:	d81d      	bhi.n	802c690 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802c654:	69bb      	ldr	r3, [r7, #24]
 802c656:	015a      	lsls	r2, r3, #5
 802c658:	69fb      	ldr	r3, [r7, #28]
 802c65a:	4413      	add	r3, r2
 802c65c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c660:	681b      	ldr	r3, [r3, #0]
 802c662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c666:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802c66a:	d0ec      	beq.n	802c646 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802c66c:	e070      	b.n	802c750 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802c66e:	69bb      	ldr	r3, [r7, #24]
 802c670:	015a      	lsls	r2, r3, #5
 802c672:	69fb      	ldr	r3, [r7, #28]
 802c674:	4413      	add	r3, r2
 802c676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c67a:	681b      	ldr	r3, [r3, #0]
 802c67c:	69ba      	ldr	r2, [r7, #24]
 802c67e:	0151      	lsls	r1, r2, #5
 802c680:	69fa      	ldr	r2, [r7, #28]
 802c682:	440a      	add	r2, r1
 802c684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c688:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c68c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802c68e:	e05f      	b.n	802c750 <USB_HC_Halt+0x1ea>
            break;
 802c690:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802c692:	e05d      	b.n	802c750 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802c694:	69bb      	ldr	r3, [r7, #24]
 802c696:	015a      	lsls	r2, r3, #5
 802c698:	69fb      	ldr	r3, [r7, #28]
 802c69a:	4413      	add	r3, r2
 802c69c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c6a0:	681b      	ldr	r3, [r3, #0]
 802c6a2:	69ba      	ldr	r2, [r7, #24]
 802c6a4:	0151      	lsls	r1, r2, #5
 802c6a6:	69fa      	ldr	r2, [r7, #28]
 802c6a8:	440a      	add	r2, r1
 802c6aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c6ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802c6b2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 802c6b4:	69fb      	ldr	r3, [r7, #28]
 802c6b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c6ba:	691b      	ldr	r3, [r3, #16]
 802c6bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802c6c0:	2b00      	cmp	r3, #0
 802c6c2:	d133      	bne.n	802c72c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802c6c4:	69bb      	ldr	r3, [r7, #24]
 802c6c6:	015a      	lsls	r2, r3, #5
 802c6c8:	69fb      	ldr	r3, [r7, #28]
 802c6ca:	4413      	add	r3, r2
 802c6cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c6d0:	681b      	ldr	r3, [r3, #0]
 802c6d2:	69ba      	ldr	r2, [r7, #24]
 802c6d4:	0151      	lsls	r1, r2, #5
 802c6d6:	69fa      	ldr	r2, [r7, #28]
 802c6d8:	440a      	add	r2, r1
 802c6da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c6de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c6e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802c6e4:	69bb      	ldr	r3, [r7, #24]
 802c6e6:	015a      	lsls	r2, r3, #5
 802c6e8:	69fb      	ldr	r3, [r7, #28]
 802c6ea:	4413      	add	r3, r2
 802c6ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c6f0:	681b      	ldr	r3, [r3, #0]
 802c6f2:	69ba      	ldr	r2, [r7, #24]
 802c6f4:	0151      	lsls	r1, r2, #5
 802c6f6:	69fa      	ldr	r2, [r7, #28]
 802c6f8:	440a      	add	r2, r1
 802c6fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c6fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c702:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 802c704:	68fb      	ldr	r3, [r7, #12]
 802c706:	3301      	adds	r3, #1
 802c708:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 802c70a:	68fb      	ldr	r3, [r7, #12]
 802c70c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c710:	d81d      	bhi.n	802c74e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802c712:	69bb      	ldr	r3, [r7, #24]
 802c714:	015a      	lsls	r2, r3, #5
 802c716:	69fb      	ldr	r3, [r7, #28]
 802c718:	4413      	add	r3, r2
 802c71a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c71e:	681b      	ldr	r3, [r3, #0]
 802c720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802c728:	d0ec      	beq.n	802c704 <USB_HC_Halt+0x19e>
 802c72a:	e011      	b.n	802c750 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802c72c:	69bb      	ldr	r3, [r7, #24]
 802c72e:	015a      	lsls	r2, r3, #5
 802c730:	69fb      	ldr	r3, [r7, #28]
 802c732:	4413      	add	r3, r2
 802c734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c738:	681b      	ldr	r3, [r3, #0]
 802c73a:	69ba      	ldr	r2, [r7, #24]
 802c73c:	0151      	lsls	r1, r2, #5
 802c73e:	69fa      	ldr	r2, [r7, #28]
 802c740:	440a      	add	r2, r1
 802c742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c74a:	6013      	str	r3, [r2, #0]
 802c74c:	e000      	b.n	802c750 <USB_HC_Halt+0x1ea>
          break;
 802c74e:	bf00      	nop
    }
  }

  return HAL_OK;
 802c750:	2300      	movs	r3, #0
}
 802c752:	4618      	mov	r0, r3
 802c754:	3724      	adds	r7, #36	; 0x24
 802c756:	46bd      	mov	sp, r7
 802c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c75c:	4770      	bx	lr
	...

0802c760 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 802c760:	b480      	push	{r7}
 802c762:	b087      	sub	sp, #28
 802c764:	af00      	add	r7, sp, #0
 802c766:	6078      	str	r0, [r7, #4]
 802c768:	460b      	mov	r3, r1
 802c76a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c76c:	687b      	ldr	r3, [r7, #4]
 802c76e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 802c770:	78fb      	ldrb	r3, [r7, #3]
 802c772:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 802c774:	2301      	movs	r3, #1
 802c776:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802c778:	68fb      	ldr	r3, [r7, #12]
 802c77a:	04da      	lsls	r2, r3, #19
 802c77c:	4b15      	ldr	r3, [pc, #84]	; (802c7d4 <USB_DoPing+0x74>)
 802c77e:	4013      	ands	r3, r2
 802c780:	693a      	ldr	r2, [r7, #16]
 802c782:	0151      	lsls	r1, r2, #5
 802c784:	697a      	ldr	r2, [r7, #20]
 802c786:	440a      	add	r2, r1
 802c788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c78c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c790:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 802c792:	693b      	ldr	r3, [r7, #16]
 802c794:	015a      	lsls	r2, r3, #5
 802c796:	697b      	ldr	r3, [r7, #20]
 802c798:	4413      	add	r3, r2
 802c79a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c79e:	681b      	ldr	r3, [r3, #0]
 802c7a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802c7a2:	68bb      	ldr	r3, [r7, #8]
 802c7a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802c7a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802c7aa:	68bb      	ldr	r3, [r7, #8]
 802c7ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c7b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 802c7b2:	693b      	ldr	r3, [r7, #16]
 802c7b4:	015a      	lsls	r2, r3, #5
 802c7b6:	697b      	ldr	r3, [r7, #20]
 802c7b8:	4413      	add	r3, r2
 802c7ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c7be:	461a      	mov	r2, r3
 802c7c0:	68bb      	ldr	r3, [r7, #8]
 802c7c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 802c7c4:	2300      	movs	r3, #0
}
 802c7c6:	4618      	mov	r0, r3
 802c7c8:	371c      	adds	r7, #28
 802c7ca:	46bd      	mov	sp, r7
 802c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c7d0:	4770      	bx	lr
 802c7d2:	bf00      	nop
 802c7d4:	1ff80000 	.word	0x1ff80000

0802c7d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 802c7d8:	b580      	push	{r7, lr}
 802c7da:	b088      	sub	sp, #32
 802c7dc:	af00      	add	r7, sp, #0
 802c7de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 802c7e0:	2300      	movs	r3, #0
 802c7e2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c7e4:	687b      	ldr	r3, [r7, #4]
 802c7e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 802c7e8:	2300      	movs	r3, #0
 802c7ea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 802c7ec:	6878      	ldr	r0, [r7, #4]
 802c7ee:	f7ff f918 	bl	802ba22 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802c7f2:	2110      	movs	r1, #16
 802c7f4:	6878      	ldr	r0, [r7, #4]
 802c7f6:	f7ff f971 	bl	802badc <USB_FlushTxFifo>
 802c7fa:	4603      	mov	r3, r0
 802c7fc:	2b00      	cmp	r3, #0
 802c7fe:	d001      	beq.n	802c804 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 802c800:	2301      	movs	r3, #1
 802c802:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802c804:	6878      	ldr	r0, [r7, #4]
 802c806:	f7ff f99d 	bl	802bb44 <USB_FlushRxFifo>
 802c80a:	4603      	mov	r3, r0
 802c80c:	2b00      	cmp	r3, #0
 802c80e:	d001      	beq.n	802c814 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 802c810:	2301      	movs	r3, #1
 802c812:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802c814:	2300      	movs	r3, #0
 802c816:	61bb      	str	r3, [r7, #24]
 802c818:	e01f      	b.n	802c85a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 802c81a:	69bb      	ldr	r3, [r7, #24]
 802c81c:	015a      	lsls	r2, r3, #5
 802c81e:	697b      	ldr	r3, [r7, #20]
 802c820:	4413      	add	r3, r2
 802c822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c826:	681b      	ldr	r3, [r3, #0]
 802c828:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802c82a:	693b      	ldr	r3, [r7, #16]
 802c82c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802c830:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802c832:	693b      	ldr	r3, [r7, #16]
 802c834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c838:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802c83a:	693b      	ldr	r3, [r7, #16]
 802c83c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802c840:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802c842:	69bb      	ldr	r3, [r7, #24]
 802c844:	015a      	lsls	r2, r3, #5
 802c846:	697b      	ldr	r3, [r7, #20]
 802c848:	4413      	add	r3, r2
 802c84a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c84e:	461a      	mov	r2, r3
 802c850:	693b      	ldr	r3, [r7, #16]
 802c852:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802c854:	69bb      	ldr	r3, [r7, #24]
 802c856:	3301      	adds	r3, #1
 802c858:	61bb      	str	r3, [r7, #24]
 802c85a:	69bb      	ldr	r3, [r7, #24]
 802c85c:	2b0f      	cmp	r3, #15
 802c85e:	d9dc      	bls.n	802c81a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802c860:	2300      	movs	r3, #0
 802c862:	61bb      	str	r3, [r7, #24]
 802c864:	e034      	b.n	802c8d0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 802c866:	69bb      	ldr	r3, [r7, #24]
 802c868:	015a      	lsls	r2, r3, #5
 802c86a:	697b      	ldr	r3, [r7, #20]
 802c86c:	4413      	add	r3, r2
 802c86e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c872:	681b      	ldr	r3, [r3, #0]
 802c874:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 802c876:	693b      	ldr	r3, [r7, #16]
 802c878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802c87c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 802c87e:	693b      	ldr	r3, [r7, #16]
 802c880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c884:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802c886:	693b      	ldr	r3, [r7, #16]
 802c888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802c88c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802c88e:	69bb      	ldr	r3, [r7, #24]
 802c890:	015a      	lsls	r2, r3, #5
 802c892:	697b      	ldr	r3, [r7, #20]
 802c894:	4413      	add	r3, r2
 802c896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c89a:	461a      	mov	r2, r3
 802c89c:	693b      	ldr	r3, [r7, #16]
 802c89e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 802c8a0:	68fb      	ldr	r3, [r7, #12]
 802c8a2:	3301      	adds	r3, #1
 802c8a4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 802c8a6:	68fb      	ldr	r3, [r7, #12]
 802c8a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c8ac:	d80c      	bhi.n	802c8c8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802c8ae:	69bb      	ldr	r3, [r7, #24]
 802c8b0:	015a      	lsls	r2, r3, #5
 802c8b2:	697b      	ldr	r3, [r7, #20]
 802c8b4:	4413      	add	r3, r2
 802c8b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c8ba:	681b      	ldr	r3, [r3, #0]
 802c8bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c8c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802c8c4:	d0ec      	beq.n	802c8a0 <USB_StopHost+0xc8>
 802c8c6:	e000      	b.n	802c8ca <USB_StopHost+0xf2>
        break;
 802c8c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802c8ca:	69bb      	ldr	r3, [r7, #24]
 802c8cc:	3301      	adds	r3, #1
 802c8ce:	61bb      	str	r3, [r7, #24]
 802c8d0:	69bb      	ldr	r3, [r7, #24]
 802c8d2:	2b0f      	cmp	r3, #15
 802c8d4:	d9c7      	bls.n	802c866 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802c8d6:	697b      	ldr	r3, [r7, #20]
 802c8d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c8dc:	461a      	mov	r2, r3
 802c8de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802c8e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802c8e4:	687b      	ldr	r3, [r7, #4]
 802c8e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802c8ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802c8ec:	6878      	ldr	r0, [r7, #4]
 802c8ee:	f7ff f887 	bl	802ba00 <USB_EnableGlobalInt>

  return ret;
 802c8f2:	7ffb      	ldrb	r3, [r7, #31]
}
 802c8f4:	4618      	mov	r0, r3
 802c8f6:	3720      	adds	r7, #32
 802c8f8:	46bd      	mov	sp, r7
 802c8fa:	bd80      	pop	{r7, pc}

0802c8fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 802c8fc:	b580      	push	{r7, lr}
 802c8fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 802c900:	4904      	ldr	r1, [pc, #16]	; (802c914 <MX_FATFS_Init+0x18>)
 802c902:	4805      	ldr	r0, [pc, #20]	; (802c918 <MX_FATFS_Init+0x1c>)
 802c904:	f009 f95c 	bl	8035bc0 <FATFS_LinkDriver>
 802c908:	4603      	mov	r3, r0
 802c90a:	461a      	mov	r2, r3
 802c90c:	4b03      	ldr	r3, [pc, #12]	; (802c91c <MX_FATFS_Init+0x20>)
 802c90e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 802c910:	bf00      	nop
 802c912:	bd80      	pop	{r7, pc}
 802c914:	24000b50 	.word	0x24000b50
 802c918:	0803b990 	.word	0x0803b990
 802c91c:	24000b4c 	.word	0x24000b4c

0802c920 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 802c920:	b480      	push	{r7}
 802c922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 802c924:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 802c926:	4618      	mov	r0, r3
 802c928:	46bd      	mov	sp, r7
 802c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c92e:	4770      	bx	lr

0802c930 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 802c930:	b480      	push	{r7}
 802c932:	b083      	sub	sp, #12
 802c934:	af00      	add	r7, sp, #0
 802c936:	4603      	mov	r3, r0
 802c938:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 802c93a:	2300      	movs	r3, #0
}
 802c93c:	4618      	mov	r0, r3
 802c93e:	370c      	adds	r7, #12
 802c940:	46bd      	mov	sp, r7
 802c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c946:	4770      	bx	lr

0802c948 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 802c948:	b580      	push	{r7, lr}
 802c94a:	b084      	sub	sp, #16
 802c94c:	af00      	add	r7, sp, #0
 802c94e:	4603      	mov	r3, r0
 802c950:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 802c952:	2301      	movs	r3, #1
 802c954:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 802c956:	79fb      	ldrb	r3, [r7, #7]
 802c958:	4619      	mov	r1, r3
 802c95a:	4808      	ldr	r0, [pc, #32]	; (802c97c <USBH_status+0x34>)
 802c95c:	f000 fe73 	bl	802d646 <USBH_MSC_UnitIsReady>
 802c960:	4603      	mov	r3, r0
 802c962:	2b00      	cmp	r3, #0
 802c964:	d002      	beq.n	802c96c <USBH_status+0x24>
  {
    res = RES_OK;
 802c966:	2300      	movs	r3, #0
 802c968:	73fb      	strb	r3, [r7, #15]
 802c96a:	e001      	b.n	802c970 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 802c96c:	2301      	movs	r3, #1
 802c96e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 802c970:	7bfb      	ldrb	r3, [r7, #15]
}
 802c972:	4618      	mov	r0, r3
 802c974:	3710      	adds	r7, #16
 802c976:	46bd      	mov	sp, r7
 802c978:	bd80      	pop	{r7, pc}
 802c97a:	bf00      	nop
 802c97c:	24006aec 	.word	0x24006aec

0802c980 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 802c980:	b580      	push	{r7, lr}
 802c982:	b094      	sub	sp, #80	; 0x50
 802c984:	af02      	add	r7, sp, #8
 802c986:	60b9      	str	r1, [r7, #8]
 802c988:	607a      	str	r2, [r7, #4]
 802c98a:	603b      	str	r3, [r7, #0]
 802c98c:	4603      	mov	r3, r0
 802c98e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802c990:	2301      	movs	r3, #1
 802c992:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 802c996:	7bf9      	ldrb	r1, [r7, #15]
 802c998:	683b      	ldr	r3, [r7, #0]
 802c99a:	9300      	str	r3, [sp, #0]
 802c99c:	68bb      	ldr	r3, [r7, #8]
 802c99e:	687a      	ldr	r2, [r7, #4]
 802c9a0:	4813      	ldr	r0, [pc, #76]	; (802c9f0 <USBH_read+0x70>)
 802c9a2:	f000 fe9a 	bl	802d6da <USBH_MSC_Read>
 802c9a6:	4603      	mov	r3, r0
 802c9a8:	2b00      	cmp	r3, #0
 802c9aa:	d103      	bne.n	802c9b4 <USBH_read+0x34>
  {
    res = RES_OK;
 802c9ac:	2300      	movs	r3, #0
 802c9ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 802c9b2:	e017      	b.n	802c9e4 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 802c9b4:	f107 0210 	add.w	r2, r7, #16
 802c9b8:	7bfb      	ldrb	r3, [r7, #15]
 802c9ba:	4619      	mov	r1, r3
 802c9bc:	480c      	ldr	r0, [pc, #48]	; (802c9f0 <USBH_read+0x70>)
 802c9be:	f000 fe68 	bl	802d692 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 802c9c2:	7f7b      	ldrb	r3, [r7, #29]
 802c9c4:	2b3a      	cmp	r3, #58	; 0x3a
 802c9c6:	d005      	beq.n	802c9d4 <USBH_read+0x54>
 802c9c8:	2b3a      	cmp	r3, #58	; 0x3a
 802c9ca:	dc07      	bgt.n	802c9dc <USBH_read+0x5c>
 802c9cc:	2b04      	cmp	r3, #4
 802c9ce:	d001      	beq.n	802c9d4 <USBH_read+0x54>
 802c9d0:	2b28      	cmp	r3, #40	; 0x28
 802c9d2:	d103      	bne.n	802c9dc <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 802c9d4:	2303      	movs	r3, #3
 802c9d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802c9da:	e003      	b.n	802c9e4 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 802c9dc:	2301      	movs	r3, #1
 802c9de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802c9e2:	bf00      	nop
    }
  }

  return res;
 802c9e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 802c9e8:	4618      	mov	r0, r3
 802c9ea:	3748      	adds	r7, #72	; 0x48
 802c9ec:	46bd      	mov	sp, r7
 802c9ee:	bd80      	pop	{r7, pc}
 802c9f0:	24006aec 	.word	0x24006aec

0802c9f4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 802c9f4:	b580      	push	{r7, lr}
 802c9f6:	b094      	sub	sp, #80	; 0x50
 802c9f8:	af02      	add	r7, sp, #8
 802c9fa:	60b9      	str	r1, [r7, #8]
 802c9fc:	607a      	str	r2, [r7, #4]
 802c9fe:	603b      	str	r3, [r7, #0]
 802ca00:	4603      	mov	r3, r0
 802ca02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802ca04:	2301      	movs	r3, #1
 802ca06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 802ca0a:	7bf9      	ldrb	r1, [r7, #15]
 802ca0c:	683b      	ldr	r3, [r7, #0]
 802ca0e:	9300      	str	r3, [sp, #0]
 802ca10:	68bb      	ldr	r3, [r7, #8]
 802ca12:	687a      	ldr	r2, [r7, #4]
 802ca14:	4817      	ldr	r0, [pc, #92]	; (802ca74 <USBH_write+0x80>)
 802ca16:	f000 fec9 	bl	802d7ac <USBH_MSC_Write>
 802ca1a:	4603      	mov	r3, r0
 802ca1c:	2b00      	cmp	r3, #0
 802ca1e:	d103      	bne.n	802ca28 <USBH_write+0x34>
  {
    res = RES_OK;
 802ca20:	2300      	movs	r3, #0
 802ca22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 802ca26:	e01f      	b.n	802ca68 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 802ca28:	f107 0210 	add.w	r2, r7, #16
 802ca2c:	7bfb      	ldrb	r3, [r7, #15]
 802ca2e:	4619      	mov	r1, r3
 802ca30:	4810      	ldr	r0, [pc, #64]	; (802ca74 <USBH_write+0x80>)
 802ca32:	f000 fe2e 	bl	802d692 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 802ca36:	7f7b      	ldrb	r3, [r7, #29]
 802ca38:	2b3a      	cmp	r3, #58	; 0x3a
 802ca3a:	d00d      	beq.n	802ca58 <USBH_write+0x64>
 802ca3c:	2b3a      	cmp	r3, #58	; 0x3a
 802ca3e:	dc0f      	bgt.n	802ca60 <USBH_write+0x6c>
 802ca40:	2b28      	cmp	r3, #40	; 0x28
 802ca42:	d009      	beq.n	802ca58 <USBH_write+0x64>
 802ca44:	2b28      	cmp	r3, #40	; 0x28
 802ca46:	dc0b      	bgt.n	802ca60 <USBH_write+0x6c>
 802ca48:	2b04      	cmp	r3, #4
 802ca4a:	d005      	beq.n	802ca58 <USBH_write+0x64>
 802ca4c:	2b27      	cmp	r3, #39	; 0x27
 802ca4e:	d107      	bne.n	802ca60 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 802ca50:	2302      	movs	r3, #2
 802ca52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802ca56:	e007      	b.n	802ca68 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 802ca58:	2303      	movs	r3, #3
 802ca5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802ca5e:	e003      	b.n	802ca68 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 802ca60:	2301      	movs	r3, #1
 802ca62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802ca66:	bf00      	nop
    }
  }

  return res;
 802ca68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 802ca6c:	4618      	mov	r0, r3
 802ca6e:	3748      	adds	r7, #72	; 0x48
 802ca70:	46bd      	mov	sp, r7
 802ca72:	bd80      	pop	{r7, pc}
 802ca74:	24006aec 	.word	0x24006aec

0802ca78 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 802ca78:	b580      	push	{r7, lr}
 802ca7a:	b090      	sub	sp, #64	; 0x40
 802ca7c:	af00      	add	r7, sp, #0
 802ca7e:	4603      	mov	r3, r0
 802ca80:	603a      	str	r2, [r7, #0]
 802ca82:	71fb      	strb	r3, [r7, #7]
 802ca84:	460b      	mov	r3, r1
 802ca86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 802ca88:	2301      	movs	r3, #1
 802ca8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 802ca8e:	79bb      	ldrb	r3, [r7, #6]
 802ca90:	2b03      	cmp	r3, #3
 802ca92:	d852      	bhi.n	802cb3a <USBH_ioctl+0xc2>
 802ca94:	a201      	add	r2, pc, #4	; (adr r2, 802ca9c <USBH_ioctl+0x24>)
 802ca96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ca9a:	bf00      	nop
 802ca9c:	0802caad 	.word	0x0802caad
 802caa0:	0802cab5 	.word	0x0802cab5
 802caa4:	0802cadf 	.word	0x0802cadf
 802caa8:	0802cb0b 	.word	0x0802cb0b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 802caac:	2300      	movs	r3, #0
 802caae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802cab2:	e045      	b.n	802cb40 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 802cab4:	f107 0208 	add.w	r2, r7, #8
 802cab8:	79fb      	ldrb	r3, [r7, #7]
 802caba:	4619      	mov	r1, r3
 802cabc:	4823      	ldr	r0, [pc, #140]	; (802cb4c <USBH_ioctl+0xd4>)
 802cabe:	f000 fde8 	bl	802d692 <USBH_MSC_GetLUNInfo>
 802cac2:	4603      	mov	r3, r0
 802cac4:	2b00      	cmp	r3, #0
 802cac6:	d106      	bne.n	802cad6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 802cac8:	68fa      	ldr	r2, [r7, #12]
 802caca:	683b      	ldr	r3, [r7, #0]
 802cacc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 802cace:	2300      	movs	r3, #0
 802cad0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 802cad4:	e034      	b.n	802cb40 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 802cad6:	2301      	movs	r3, #1
 802cad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802cadc:	e030      	b.n	802cb40 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 802cade:	f107 0208 	add.w	r2, r7, #8
 802cae2:	79fb      	ldrb	r3, [r7, #7]
 802cae4:	4619      	mov	r1, r3
 802cae6:	4819      	ldr	r0, [pc, #100]	; (802cb4c <USBH_ioctl+0xd4>)
 802cae8:	f000 fdd3 	bl	802d692 <USBH_MSC_GetLUNInfo>
 802caec:	4603      	mov	r3, r0
 802caee:	2b00      	cmp	r3, #0
 802caf0:	d107      	bne.n	802cb02 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 802caf2:	8a3b      	ldrh	r3, [r7, #16]
 802caf4:	461a      	mov	r2, r3
 802caf6:	683b      	ldr	r3, [r7, #0]
 802caf8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 802cafa:	2300      	movs	r3, #0
 802cafc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 802cb00:	e01e      	b.n	802cb40 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 802cb02:	2301      	movs	r3, #1
 802cb04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802cb08:	e01a      	b.n	802cb40 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 802cb0a:	f107 0208 	add.w	r2, r7, #8
 802cb0e:	79fb      	ldrb	r3, [r7, #7]
 802cb10:	4619      	mov	r1, r3
 802cb12:	480e      	ldr	r0, [pc, #56]	; (802cb4c <USBH_ioctl+0xd4>)
 802cb14:	f000 fdbd 	bl	802d692 <USBH_MSC_GetLUNInfo>
 802cb18:	4603      	mov	r3, r0
 802cb1a:	2b00      	cmp	r3, #0
 802cb1c:	d109      	bne.n	802cb32 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 802cb1e:	8a3b      	ldrh	r3, [r7, #16]
 802cb20:	0a5b      	lsrs	r3, r3, #9
 802cb22:	b29b      	uxth	r3, r3
 802cb24:	461a      	mov	r2, r3
 802cb26:	683b      	ldr	r3, [r7, #0]
 802cb28:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 802cb2a:	2300      	movs	r3, #0
 802cb2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 802cb30:	e006      	b.n	802cb40 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 802cb32:	2301      	movs	r3, #1
 802cb34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802cb38:	e002      	b.n	802cb40 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 802cb3a:	2304      	movs	r3, #4
 802cb3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 802cb40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 802cb44:	4618      	mov	r0, r3
 802cb46:	3740      	adds	r7, #64	; 0x40
 802cb48:	46bd      	mov	sp, r7
 802cb4a:	bd80      	pop	{r7, pc}
 802cb4c:	24006aec 	.word	0x24006aec

0802cb50 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 802cb50:	b590      	push	{r4, r7, lr}
 802cb52:	b089      	sub	sp, #36	; 0x24
 802cb54:	af04      	add	r7, sp, #16
 802cb56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 802cb58:	687b      	ldr	r3, [r7, #4]
 802cb5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cb5e:	7919      	ldrb	r1, [r3, #4]
 802cb60:	2350      	movs	r3, #80	; 0x50
 802cb62:	2206      	movs	r2, #6
 802cb64:	6878      	ldr	r0, [r7, #4]
 802cb66:	f001 fd5f 	bl	802e628 <USBH_FindInterface>
 802cb6a:	4603      	mov	r3, r0
 802cb6c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 802cb6e:	7bfb      	ldrb	r3, [r7, #15]
 802cb70:	2bff      	cmp	r3, #255	; 0xff
 802cb72:	d002      	beq.n	802cb7a <USBH_MSC_InterfaceInit+0x2a>
 802cb74:	7bfb      	ldrb	r3, [r7, #15]
 802cb76:	2b01      	cmp	r3, #1
 802cb78:	d901      	bls.n	802cb7e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802cb7a:	2302      	movs	r3, #2
 802cb7c:	e106      	b.n	802cd8c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 802cb7e:	7bfb      	ldrb	r3, [r7, #15]
 802cb80:	4619      	mov	r1, r3
 802cb82:	6878      	ldr	r0, [r7, #4]
 802cb84:	f001 fd34 	bl	802e5f0 <USBH_SelectInterface>
 802cb88:	4603      	mov	r3, r0
 802cb8a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 802cb8c:	7bbb      	ldrb	r3, [r7, #14]
 802cb8e:	2b00      	cmp	r3, #0
 802cb90:	d001      	beq.n	802cb96 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 802cb92:	2302      	movs	r3, #2
 802cb94:	e0fa      	b.n	802cd8c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 802cb96:	687b      	ldr	r3, [r7, #4]
 802cb98:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 802cb9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 802cba0:	f00d f9a2 	bl	8039ee8 <malloc>
 802cba4:	4603      	mov	r3, r0
 802cba6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802cba8:	687b      	ldr	r3, [r7, #4]
 802cbaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cbae:	69db      	ldr	r3, [r3, #28]
 802cbb0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 802cbb2:	68bb      	ldr	r3, [r7, #8]
 802cbb4:	2b00      	cmp	r3, #0
 802cbb6:	d101      	bne.n	802cbbc <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 802cbb8:	2302      	movs	r3, #2
 802cbba:	e0e7      	b.n	802cd8c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 802cbbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 802cbc0:	2100      	movs	r1, #0
 802cbc2:	68b8      	ldr	r0, [r7, #8]
 802cbc4:	f00d f9ae 	bl	8039f24 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802cbc8:	7bfb      	ldrb	r3, [r7, #15]
 802cbca:	687a      	ldr	r2, [r7, #4]
 802cbcc:	211a      	movs	r1, #26
 802cbce:	fb01 f303 	mul.w	r3, r1, r3
 802cbd2:	4413      	add	r3, r2
 802cbd4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802cbd8:	781b      	ldrb	r3, [r3, #0]
 802cbda:	b25b      	sxtb	r3, r3
 802cbdc:	2b00      	cmp	r3, #0
 802cbde:	da16      	bge.n	802cc0e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 802cbe0:	7bfb      	ldrb	r3, [r7, #15]
 802cbe2:	687a      	ldr	r2, [r7, #4]
 802cbe4:	211a      	movs	r1, #26
 802cbe6:	fb01 f303 	mul.w	r3, r1, r3
 802cbea:	4413      	add	r3, r2
 802cbec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802cbf0:	781a      	ldrb	r2, [r3, #0]
 802cbf2:	68bb      	ldr	r3, [r7, #8]
 802cbf4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802cbf6:	7bfb      	ldrb	r3, [r7, #15]
 802cbf8:	687a      	ldr	r2, [r7, #4]
 802cbfa:	211a      	movs	r1, #26
 802cbfc:	fb01 f303 	mul.w	r3, r1, r3
 802cc00:	4413      	add	r3, r2
 802cc02:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802cc06:	881a      	ldrh	r2, [r3, #0]
 802cc08:	68bb      	ldr	r3, [r7, #8]
 802cc0a:	815a      	strh	r2, [r3, #10]
 802cc0c:	e015      	b.n	802cc3a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 802cc0e:	7bfb      	ldrb	r3, [r7, #15]
 802cc10:	687a      	ldr	r2, [r7, #4]
 802cc12:	211a      	movs	r1, #26
 802cc14:	fb01 f303 	mul.w	r3, r1, r3
 802cc18:	4413      	add	r3, r2
 802cc1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802cc1e:	781a      	ldrb	r2, [r3, #0]
 802cc20:	68bb      	ldr	r3, [r7, #8]
 802cc22:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802cc24:	7bfb      	ldrb	r3, [r7, #15]
 802cc26:	687a      	ldr	r2, [r7, #4]
 802cc28:	211a      	movs	r1, #26
 802cc2a:	fb01 f303 	mul.w	r3, r1, r3
 802cc2e:	4413      	add	r3, r2
 802cc30:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802cc34:	881a      	ldrh	r2, [r3, #0]
 802cc36:	68bb      	ldr	r3, [r7, #8]
 802cc38:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802cc3a:	7bfb      	ldrb	r3, [r7, #15]
 802cc3c:	687a      	ldr	r2, [r7, #4]
 802cc3e:	211a      	movs	r1, #26
 802cc40:	fb01 f303 	mul.w	r3, r1, r3
 802cc44:	4413      	add	r3, r2
 802cc46:	f203 3356 	addw	r3, r3, #854	; 0x356
 802cc4a:	781b      	ldrb	r3, [r3, #0]
 802cc4c:	b25b      	sxtb	r3, r3
 802cc4e:	2b00      	cmp	r3, #0
 802cc50:	da16      	bge.n	802cc80 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 802cc52:	7bfb      	ldrb	r3, [r7, #15]
 802cc54:	687a      	ldr	r2, [r7, #4]
 802cc56:	211a      	movs	r1, #26
 802cc58:	fb01 f303 	mul.w	r3, r1, r3
 802cc5c:	4413      	add	r3, r2
 802cc5e:	f203 3356 	addw	r3, r3, #854	; 0x356
 802cc62:	781a      	ldrb	r2, [r3, #0]
 802cc64:	68bb      	ldr	r3, [r7, #8]
 802cc66:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802cc68:	7bfb      	ldrb	r3, [r7, #15]
 802cc6a:	687a      	ldr	r2, [r7, #4]
 802cc6c:	211a      	movs	r1, #26
 802cc6e:	fb01 f303 	mul.w	r3, r1, r3
 802cc72:	4413      	add	r3, r2
 802cc74:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802cc78:	881a      	ldrh	r2, [r3, #0]
 802cc7a:	68bb      	ldr	r3, [r7, #8]
 802cc7c:	815a      	strh	r2, [r3, #10]
 802cc7e:	e015      	b.n	802ccac <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 802cc80:	7bfb      	ldrb	r3, [r7, #15]
 802cc82:	687a      	ldr	r2, [r7, #4]
 802cc84:	211a      	movs	r1, #26
 802cc86:	fb01 f303 	mul.w	r3, r1, r3
 802cc8a:	4413      	add	r3, r2
 802cc8c:	f203 3356 	addw	r3, r3, #854	; 0x356
 802cc90:	781a      	ldrb	r2, [r3, #0]
 802cc92:	68bb      	ldr	r3, [r7, #8]
 802cc94:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802cc96:	7bfb      	ldrb	r3, [r7, #15]
 802cc98:	687a      	ldr	r2, [r7, #4]
 802cc9a:	211a      	movs	r1, #26
 802cc9c:	fb01 f303 	mul.w	r3, r1, r3
 802cca0:	4413      	add	r3, r2
 802cca2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802cca6:	881a      	ldrh	r2, [r3, #0]
 802cca8:	68bb      	ldr	r3, [r7, #8]
 802ccaa:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 802ccac:	68bb      	ldr	r3, [r7, #8]
 802ccae:	2200      	movs	r2, #0
 802ccb0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 802ccb2:	68bb      	ldr	r3, [r7, #8]
 802ccb4:	2200      	movs	r2, #0
 802ccb6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 802ccb8:	68bb      	ldr	r3, [r7, #8]
 802ccba:	2200      	movs	r2, #0
 802ccbc:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 802ccbe:	68bb      	ldr	r3, [r7, #8]
 802ccc0:	799b      	ldrb	r3, [r3, #6]
 802ccc2:	4619      	mov	r1, r3
 802ccc4:	6878      	ldr	r0, [r7, #4]
 802ccc6:	f003 f9d6 	bl	8030076 <USBH_AllocPipe>
 802ccca:	4603      	mov	r3, r0
 802cccc:	461a      	mov	r2, r3
 802ccce:	68bb      	ldr	r3, [r7, #8]
 802ccd0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 802ccd2:	68bb      	ldr	r3, [r7, #8]
 802ccd4:	79db      	ldrb	r3, [r3, #7]
 802ccd6:	4619      	mov	r1, r3
 802ccd8:	6878      	ldr	r0, [r7, #4]
 802ccda:	f003 f9cc 	bl	8030076 <USBH_AllocPipe>
 802ccde:	4603      	mov	r3, r0
 802cce0:	461a      	mov	r2, r3
 802cce2:	68bb      	ldr	r3, [r7, #8]
 802cce4:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 802cce6:	6878      	ldr	r0, [r7, #4]
 802cce8:	f000 fe04 	bl	802d8f4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 802ccec:	68bb      	ldr	r3, [r7, #8]
 802ccee:	799b      	ldrb	r3, [r3, #6]
 802ccf0:	2b00      	cmp	r3, #0
 802ccf2:	d01e      	beq.n	802cd32 <USBH_MSC_InterfaceInit+0x1e2>
 802ccf4:	68bb      	ldr	r3, [r7, #8]
 802ccf6:	891b      	ldrh	r3, [r3, #8]
 802ccf8:	2b00      	cmp	r3, #0
 802ccfa:	d01a      	beq.n	802cd32 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 802ccfc:	68bb      	ldr	r3, [r7, #8]
 802ccfe:	7959      	ldrb	r1, [r3, #5]
 802cd00:	68bb      	ldr	r3, [r7, #8]
 802cd02:	7998      	ldrb	r0, [r3, #6]
 802cd04:	687b      	ldr	r3, [r7, #4]
 802cd06:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802cd0a:	687b      	ldr	r3, [r7, #4]
 802cd0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802cd10:	68ba      	ldr	r2, [r7, #8]
 802cd12:	8912      	ldrh	r2, [r2, #8]
 802cd14:	9202      	str	r2, [sp, #8]
 802cd16:	2202      	movs	r2, #2
 802cd18:	9201      	str	r2, [sp, #4]
 802cd1a:	9300      	str	r3, [sp, #0]
 802cd1c:	4623      	mov	r3, r4
 802cd1e:	4602      	mov	r2, r0
 802cd20:	6878      	ldr	r0, [r7, #4]
 802cd22:	f003 f979 	bl	8030018 <USBH_OpenPipe>
 802cd26:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 802cd28:	68bb      	ldr	r3, [r7, #8]
 802cd2a:	79db      	ldrb	r3, [r3, #7]
 802cd2c:	2b00      	cmp	r3, #0
 802cd2e:	d02c      	beq.n	802cd8a <USBH_MSC_InterfaceInit+0x23a>
 802cd30:	e001      	b.n	802cd36 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 802cd32:	2303      	movs	r3, #3
 802cd34:	e02a      	b.n	802cd8c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 802cd36:	68bb      	ldr	r3, [r7, #8]
 802cd38:	895b      	ldrh	r3, [r3, #10]
 802cd3a:	2b00      	cmp	r3, #0
 802cd3c:	d025      	beq.n	802cd8a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 802cd3e:	68bb      	ldr	r3, [r7, #8]
 802cd40:	7919      	ldrb	r1, [r3, #4]
 802cd42:	68bb      	ldr	r3, [r7, #8]
 802cd44:	79d8      	ldrb	r0, [r3, #7]
 802cd46:	687b      	ldr	r3, [r7, #4]
 802cd48:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802cd4c:	687b      	ldr	r3, [r7, #4]
 802cd4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802cd52:	68ba      	ldr	r2, [r7, #8]
 802cd54:	8952      	ldrh	r2, [r2, #10]
 802cd56:	9202      	str	r2, [sp, #8]
 802cd58:	2202      	movs	r2, #2
 802cd5a:	9201      	str	r2, [sp, #4]
 802cd5c:	9300      	str	r3, [sp, #0]
 802cd5e:	4623      	mov	r3, r4
 802cd60:	4602      	mov	r2, r0
 802cd62:	6878      	ldr	r0, [r7, #4]
 802cd64:	f003 f958 	bl	8030018 <USBH_OpenPipe>
 802cd68:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 802cd6a:	68bb      	ldr	r3, [r7, #8]
 802cd6c:	791b      	ldrb	r3, [r3, #4]
 802cd6e:	2200      	movs	r2, #0
 802cd70:	4619      	mov	r1, r3
 802cd72:	6878      	ldr	r0, [r7, #4]
 802cd74:	f00c ffda 	bl	8039d2c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 802cd78:	68bb      	ldr	r3, [r7, #8]
 802cd7a:	795b      	ldrb	r3, [r3, #5]
 802cd7c:	2200      	movs	r2, #0
 802cd7e:	4619      	mov	r1, r3
 802cd80:	6878      	ldr	r0, [r7, #4]
 802cd82:	f00c ffd3 	bl	8039d2c <USBH_LL_SetToggle>

  return USBH_OK;
 802cd86:	2300      	movs	r3, #0
 802cd88:	e000      	b.n	802cd8c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 802cd8a:	2303      	movs	r3, #3
}
 802cd8c:	4618      	mov	r0, r3
 802cd8e:	3714      	adds	r7, #20
 802cd90:	46bd      	mov	sp, r7
 802cd92:	bd90      	pop	{r4, r7, pc}

0802cd94 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 802cd94:	b580      	push	{r7, lr}
 802cd96:	b084      	sub	sp, #16
 802cd98:	af00      	add	r7, sp, #0
 802cd9a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802cd9c:	687b      	ldr	r3, [r7, #4]
 802cd9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cda2:	69db      	ldr	r3, [r3, #28]
 802cda4:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 802cda6:	68fb      	ldr	r3, [r7, #12]
 802cda8:	795b      	ldrb	r3, [r3, #5]
 802cdaa:	2b00      	cmp	r3, #0
 802cdac:	d00e      	beq.n	802cdcc <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 802cdae:	68fb      	ldr	r3, [r7, #12]
 802cdb0:	795b      	ldrb	r3, [r3, #5]
 802cdb2:	4619      	mov	r1, r3
 802cdb4:	6878      	ldr	r0, [r7, #4]
 802cdb6:	f003 f94e 	bl	8030056 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 802cdba:	68fb      	ldr	r3, [r7, #12]
 802cdbc:	795b      	ldrb	r3, [r3, #5]
 802cdbe:	4619      	mov	r1, r3
 802cdc0:	6878      	ldr	r0, [r7, #4]
 802cdc2:	f003 f979 	bl	80300b8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 802cdc6:	68fb      	ldr	r3, [r7, #12]
 802cdc8:	2200      	movs	r2, #0
 802cdca:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 802cdcc:	68fb      	ldr	r3, [r7, #12]
 802cdce:	791b      	ldrb	r3, [r3, #4]
 802cdd0:	2b00      	cmp	r3, #0
 802cdd2:	d00e      	beq.n	802cdf2 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 802cdd4:	68fb      	ldr	r3, [r7, #12]
 802cdd6:	791b      	ldrb	r3, [r3, #4]
 802cdd8:	4619      	mov	r1, r3
 802cdda:	6878      	ldr	r0, [r7, #4]
 802cddc:	f003 f93b 	bl	8030056 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 802cde0:	68fb      	ldr	r3, [r7, #12]
 802cde2:	791b      	ldrb	r3, [r3, #4]
 802cde4:	4619      	mov	r1, r3
 802cde6:	6878      	ldr	r0, [r7, #4]
 802cde8:	f003 f966 	bl	80300b8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 802cdec:	68fb      	ldr	r3, [r7, #12]
 802cdee:	2200      	movs	r2, #0
 802cdf0:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 802cdf2:	687b      	ldr	r3, [r7, #4]
 802cdf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cdf8:	69db      	ldr	r3, [r3, #28]
 802cdfa:	2b00      	cmp	r3, #0
 802cdfc:	d00b      	beq.n	802ce16 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 802cdfe:	687b      	ldr	r3, [r7, #4]
 802ce00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ce04:	69db      	ldr	r3, [r3, #28]
 802ce06:	4618      	mov	r0, r3
 802ce08:	f00d f876 	bl	8039ef8 <free>
    phost->pActiveClass->pData = 0U;
 802ce0c:	687b      	ldr	r3, [r7, #4]
 802ce0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ce12:	2200      	movs	r2, #0
 802ce14:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802ce16:	2300      	movs	r3, #0
}
 802ce18:	4618      	mov	r0, r3
 802ce1a:	3710      	adds	r7, #16
 802ce1c:	46bd      	mov	sp, r7
 802ce1e:	bd80      	pop	{r7, pc}

0802ce20 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 802ce20:	b580      	push	{r7, lr}
 802ce22:	b084      	sub	sp, #16
 802ce24:	af00      	add	r7, sp, #0
 802ce26:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802ce28:	687b      	ldr	r3, [r7, #4]
 802ce2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ce2e:	69db      	ldr	r3, [r3, #28]
 802ce30:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 802ce32:	2301      	movs	r3, #1
 802ce34:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 802ce36:	68bb      	ldr	r3, [r7, #8]
 802ce38:	7b9b      	ldrb	r3, [r3, #14]
 802ce3a:	2b03      	cmp	r3, #3
 802ce3c:	d041      	beq.n	802cec2 <USBH_MSC_ClassRequest+0xa2>
 802ce3e:	2b03      	cmp	r3, #3
 802ce40:	dc4b      	bgt.n	802ceda <USBH_MSC_ClassRequest+0xba>
 802ce42:	2b00      	cmp	r3, #0
 802ce44:	d001      	beq.n	802ce4a <USBH_MSC_ClassRequest+0x2a>
 802ce46:	2b02      	cmp	r3, #2
 802ce48:	d147      	bne.n	802ceda <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 802ce4a:	68bb      	ldr	r3, [r7, #8]
 802ce4c:	4619      	mov	r1, r3
 802ce4e:	6878      	ldr	r0, [r7, #4]
 802ce50:	f000 fd32 	bl	802d8b8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 802ce54:	4603      	mov	r3, r0
 802ce56:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 802ce58:	7bfb      	ldrb	r3, [r7, #15]
 802ce5a:	2b03      	cmp	r3, #3
 802ce5c:	d104      	bne.n	802ce68 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 802ce5e:	68bb      	ldr	r3, [r7, #8]
 802ce60:	2200      	movs	r2, #0
 802ce62:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 802ce64:	2300      	movs	r3, #0
 802ce66:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 802ce68:	7bfb      	ldrb	r3, [r7, #15]
 802ce6a:	2b00      	cmp	r3, #0
 802ce6c:	d137      	bne.n	802cede <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 802ce6e:	68bb      	ldr	r3, [r7, #8]
 802ce70:	781b      	ldrb	r3, [r3, #0]
 802ce72:	2b02      	cmp	r3, #2
 802ce74:	d804      	bhi.n	802ce80 <USBH_MSC_ClassRequest+0x60>
 802ce76:	68bb      	ldr	r3, [r7, #8]
 802ce78:	781b      	ldrb	r3, [r3, #0]
 802ce7a:	3301      	adds	r3, #1
 802ce7c:	b2da      	uxtb	r2, r3
 802ce7e:	e000      	b.n	802ce82 <USBH_MSC_ClassRequest+0x62>
 802ce80:	2202      	movs	r2, #2
 802ce82:	68bb      	ldr	r3, [r7, #8]
 802ce84:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 802ce86:	2300      	movs	r3, #0
 802ce88:	73bb      	strb	r3, [r7, #14]
 802ce8a:	e014      	b.n	802ceb6 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 802ce8c:	7bbb      	ldrb	r3, [r7, #14]
 802ce8e:	68ba      	ldr	r2, [r7, #8]
 802ce90:	2134      	movs	r1, #52	; 0x34
 802ce92:	fb01 f303 	mul.w	r3, r1, r3
 802ce96:	4413      	add	r3, r2
 802ce98:	3392      	adds	r3, #146	; 0x92
 802ce9a:	2202      	movs	r2, #2
 802ce9c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 802ce9e:	7bbb      	ldrb	r3, [r7, #14]
 802cea0:	68ba      	ldr	r2, [r7, #8]
 802cea2:	2134      	movs	r1, #52	; 0x34
 802cea4:	fb01 f303 	mul.w	r3, r1, r3
 802cea8:	4413      	add	r3, r2
 802ceaa:	33c1      	adds	r3, #193	; 0xc1
 802ceac:	2200      	movs	r2, #0
 802ceae:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 802ceb0:	7bbb      	ldrb	r3, [r7, #14]
 802ceb2:	3301      	adds	r3, #1
 802ceb4:	73bb      	strb	r3, [r7, #14]
 802ceb6:	68bb      	ldr	r3, [r7, #8]
 802ceb8:	781b      	ldrb	r3, [r3, #0]
 802ceba:	7bba      	ldrb	r2, [r7, #14]
 802cebc:	429a      	cmp	r2, r3
 802cebe:	d3e5      	bcc.n	802ce8c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 802cec0:	e00d      	b.n	802cede <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 802cec2:	2100      	movs	r1, #0
 802cec4:	6878      	ldr	r0, [r7, #4]
 802cec6:	f002 fa96 	bl	802f3f6 <USBH_ClrFeature>
 802ceca:	4603      	mov	r3, r0
 802cecc:	2b00      	cmp	r3, #0
 802cece:	d108      	bne.n	802cee2 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 802ced0:	68bb      	ldr	r3, [r7, #8]
 802ced2:	7bda      	ldrb	r2, [r3, #15]
 802ced4:	68bb      	ldr	r3, [r7, #8]
 802ced6:	739a      	strb	r2, [r3, #14]
      }
      break;
 802ced8:	e003      	b.n	802cee2 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 802ceda:	bf00      	nop
 802cedc:	e002      	b.n	802cee4 <USBH_MSC_ClassRequest+0xc4>
      break;
 802cede:	bf00      	nop
 802cee0:	e000      	b.n	802cee4 <USBH_MSC_ClassRequest+0xc4>
      break;
 802cee2:	bf00      	nop
  }

  return status;
 802cee4:	7bfb      	ldrb	r3, [r7, #15]
}
 802cee6:	4618      	mov	r0, r3
 802cee8:	3710      	adds	r7, #16
 802ceea:	46bd      	mov	sp, r7
 802ceec:	bd80      	pop	{r7, pc}
	...

0802cef0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 802cef0:	b580      	push	{r7, lr}
 802cef2:	b086      	sub	sp, #24
 802cef4:	af00      	add	r7, sp, #0
 802cef6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802cef8:	687b      	ldr	r3, [r7, #4]
 802cefa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cefe:	69db      	ldr	r3, [r3, #28]
 802cf00:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 802cf02:	2301      	movs	r3, #1
 802cf04:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 802cf06:	2301      	movs	r3, #1
 802cf08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 802cf0a:	2301      	movs	r3, #1
 802cf0c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 802cf0e:	693b      	ldr	r3, [r7, #16]
 802cf10:	7b1b      	ldrb	r3, [r3, #12]
 802cf12:	2b00      	cmp	r3, #0
 802cf14:	d003      	beq.n	802cf1e <USBH_MSC_Process+0x2e>
 802cf16:	2b01      	cmp	r3, #1
 802cf18:	f000 828d 	beq.w	802d436 <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 802cf1c:	e28e      	b.n	802d43c <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 802cf1e:	693b      	ldr	r3, [r7, #16]
 802cf20:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 802cf24:	693b      	ldr	r3, [r7, #16]
 802cf26:	781b      	ldrb	r3, [r3, #0]
 802cf28:	b29b      	uxth	r3, r3
 802cf2a:	429a      	cmp	r2, r3
 802cf2c:	f080 8267 	bcs.w	802d3fe <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 802cf30:	693b      	ldr	r3, [r7, #16]
 802cf32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cf36:	4619      	mov	r1, r3
 802cf38:	693a      	ldr	r2, [r7, #16]
 802cf3a:	2334      	movs	r3, #52	; 0x34
 802cf3c:	fb01 f303 	mul.w	r3, r1, r3
 802cf40:	4413      	add	r3, r2
 802cf42:	3391      	adds	r3, #145	; 0x91
 802cf44:	2201      	movs	r2, #1
 802cf46:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 802cf48:	693b      	ldr	r3, [r7, #16]
 802cf4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cf4e:	4619      	mov	r1, r3
 802cf50:	693a      	ldr	r2, [r7, #16]
 802cf52:	2334      	movs	r3, #52	; 0x34
 802cf54:	fb01 f303 	mul.w	r3, r1, r3
 802cf58:	4413      	add	r3, r2
 802cf5a:	3390      	adds	r3, #144	; 0x90
 802cf5c:	781b      	ldrb	r3, [r3, #0]
 802cf5e:	2b08      	cmp	r3, #8
 802cf60:	f200 8235 	bhi.w	802d3ce <USBH_MSC_Process+0x4de>
 802cf64:	a201      	add	r2, pc, #4	; (adr r2, 802cf6c <USBH_MSC_Process+0x7c>)
 802cf66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802cf6a:	bf00      	nop
 802cf6c:	0802cf91 	.word	0x0802cf91
 802cf70:	0802d3cf 	.word	0x0802d3cf
 802cf74:	0802d059 	.word	0x0802d059
 802cf78:	0802d1dd 	.word	0x0802d1dd
 802cf7c:	0802cfb7 	.word	0x0802cfb7
 802cf80:	0802d2a9 	.word	0x0802d2a9
 802cf84:	0802d3cf 	.word	0x0802d3cf
 802cf88:	0802d3cf 	.word	0x0802d3cf
 802cf8c:	0802d3bd 	.word	0x0802d3bd
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 802cf90:	693b      	ldr	r3, [r7, #16]
 802cf92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cf96:	4619      	mov	r1, r3
 802cf98:	693a      	ldr	r2, [r7, #16]
 802cf9a:	2334      	movs	r3, #52	; 0x34
 802cf9c:	fb01 f303 	mul.w	r3, r1, r3
 802cfa0:	4413      	add	r3, r2
 802cfa2:	3390      	adds	r3, #144	; 0x90
 802cfa4:	2204      	movs	r2, #4
 802cfa6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 802cfa8:	687b      	ldr	r3, [r7, #4]
 802cfaa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 802cfae:	693b      	ldr	r3, [r7, #16]
 802cfb0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 802cfb4:	e214      	b.n	802d3e0 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 802cfb6:	693b      	ldr	r3, [r7, #16]
 802cfb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cfbc:	b2d9      	uxtb	r1, r3
 802cfbe:	693b      	ldr	r3, [r7, #16]
 802cfc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cfc4:	461a      	mov	r2, r3
 802cfc6:	2334      	movs	r3, #52	; 0x34
 802cfc8:	fb02 f303 	mul.w	r3, r2, r3
 802cfcc:	3398      	adds	r3, #152	; 0x98
 802cfce:	693a      	ldr	r2, [r7, #16]
 802cfd0:	4413      	add	r3, r2
 802cfd2:	3307      	adds	r3, #7
 802cfd4:	461a      	mov	r2, r3
 802cfd6:	6878      	ldr	r0, [r7, #4]
 802cfd8:	f001 f836 	bl	802e048 <USBH_MSC_SCSI_Inquiry>
 802cfdc:	4603      	mov	r3, r0
 802cfde:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 802cfe0:	7bfb      	ldrb	r3, [r7, #15]
 802cfe2:	2b00      	cmp	r3, #0
 802cfe4:	d10b      	bne.n	802cffe <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 802cfe6:	693b      	ldr	r3, [r7, #16]
 802cfe8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cfec:	4619      	mov	r1, r3
 802cfee:	693a      	ldr	r2, [r7, #16]
 802cff0:	2334      	movs	r3, #52	; 0x34
 802cff2:	fb01 f303 	mul.w	r3, r1, r3
 802cff6:	4413      	add	r3, r2
 802cff8:	3390      	adds	r3, #144	; 0x90
 802cffa:	2202      	movs	r2, #2
 802cffc:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 802cffe:	7bfb      	ldrb	r3, [r7, #15]
 802d000:	2b02      	cmp	r3, #2
 802d002:	d10c      	bne.n	802d01e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 802d004:	693b      	ldr	r3, [r7, #16]
 802d006:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d00a:	4619      	mov	r1, r3
 802d00c:	693a      	ldr	r2, [r7, #16]
 802d00e:	2334      	movs	r3, #52	; 0x34
 802d010:	fb01 f303 	mul.w	r3, r1, r3
 802d014:	4413      	add	r3, r2
 802d016:	3390      	adds	r3, #144	; 0x90
 802d018:	2205      	movs	r2, #5
 802d01a:	701a      	strb	r2, [r3, #0]
            break;
 802d01c:	e1d9      	b.n	802d3d2 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 802d01e:	7bfb      	ldrb	r3, [r7, #15]
 802d020:	2b04      	cmp	r3, #4
 802d022:	f040 81d6 	bne.w	802d3d2 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802d026:	693b      	ldr	r3, [r7, #16]
 802d028:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d02c:	4619      	mov	r1, r3
 802d02e:	693a      	ldr	r2, [r7, #16]
 802d030:	2334      	movs	r3, #52	; 0x34
 802d032:	fb01 f303 	mul.w	r3, r1, r3
 802d036:	4413      	add	r3, r2
 802d038:	3390      	adds	r3, #144	; 0x90
 802d03a:	2201      	movs	r2, #1
 802d03c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 802d03e:	693b      	ldr	r3, [r7, #16]
 802d040:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d044:	4619      	mov	r1, r3
 802d046:	693a      	ldr	r2, [r7, #16]
 802d048:	2334      	movs	r3, #52	; 0x34
 802d04a:	fb01 f303 	mul.w	r3, r1, r3
 802d04e:	4413      	add	r3, r2
 802d050:	3391      	adds	r3, #145	; 0x91
 802d052:	2202      	movs	r2, #2
 802d054:	701a      	strb	r2, [r3, #0]
            break;
 802d056:	e1bc      	b.n	802d3d2 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 802d058:	693b      	ldr	r3, [r7, #16]
 802d05a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d05e:	b2db      	uxtb	r3, r3
 802d060:	4619      	mov	r1, r3
 802d062:	6878      	ldr	r0, [r7, #4]
 802d064:	f000 ff32 	bl	802decc <USBH_MSC_SCSI_TestUnitReady>
 802d068:	4603      	mov	r3, r0
 802d06a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 802d06c:	7bbb      	ldrb	r3, [r7, #14]
 802d06e:	2b00      	cmp	r3, #0
 802d070:	d149      	bne.n	802d106 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 802d072:	693b      	ldr	r3, [r7, #16]
 802d074:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d078:	4619      	mov	r1, r3
 802d07a:	693a      	ldr	r2, [r7, #16]
 802d07c:	2334      	movs	r3, #52	; 0x34
 802d07e:	fb01 f303 	mul.w	r3, r1, r3
 802d082:	4413      	add	r3, r2
 802d084:	3392      	adds	r3, #146	; 0x92
 802d086:	781b      	ldrb	r3, [r3, #0]
 802d088:	2b00      	cmp	r3, #0
 802d08a:	d00c      	beq.n	802d0a6 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 802d08c:	693b      	ldr	r3, [r7, #16]
 802d08e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d092:	4619      	mov	r1, r3
 802d094:	693a      	ldr	r2, [r7, #16]
 802d096:	2334      	movs	r3, #52	; 0x34
 802d098:	fb01 f303 	mul.w	r3, r1, r3
 802d09c:	4413      	add	r3, r2
 802d09e:	33c1      	adds	r3, #193	; 0xc1
 802d0a0:	2201      	movs	r2, #1
 802d0a2:	701a      	strb	r2, [r3, #0]
 802d0a4:	e00b      	b.n	802d0be <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 802d0a6:	693b      	ldr	r3, [r7, #16]
 802d0a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d0ac:	4619      	mov	r1, r3
 802d0ae:	693a      	ldr	r2, [r7, #16]
 802d0b0:	2334      	movs	r3, #52	; 0x34
 802d0b2:	fb01 f303 	mul.w	r3, r1, r3
 802d0b6:	4413      	add	r3, r2
 802d0b8:	33c1      	adds	r3, #193	; 0xc1
 802d0ba:	2200      	movs	r2, #0
 802d0bc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 802d0be:	693b      	ldr	r3, [r7, #16]
 802d0c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d0c4:	4619      	mov	r1, r3
 802d0c6:	693a      	ldr	r2, [r7, #16]
 802d0c8:	2334      	movs	r3, #52	; 0x34
 802d0ca:	fb01 f303 	mul.w	r3, r1, r3
 802d0ce:	4413      	add	r3, r2
 802d0d0:	3390      	adds	r3, #144	; 0x90
 802d0d2:	2203      	movs	r2, #3
 802d0d4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 802d0d6:	693b      	ldr	r3, [r7, #16]
 802d0d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d0dc:	4619      	mov	r1, r3
 802d0de:	693a      	ldr	r2, [r7, #16]
 802d0e0:	2334      	movs	r3, #52	; 0x34
 802d0e2:	fb01 f303 	mul.w	r3, r1, r3
 802d0e6:	4413      	add	r3, r2
 802d0e8:	3391      	adds	r3, #145	; 0x91
 802d0ea:	2200      	movs	r2, #0
 802d0ec:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 802d0ee:	693b      	ldr	r3, [r7, #16]
 802d0f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d0f4:	4619      	mov	r1, r3
 802d0f6:	693a      	ldr	r2, [r7, #16]
 802d0f8:	2334      	movs	r3, #52	; 0x34
 802d0fa:	fb01 f303 	mul.w	r3, r1, r3
 802d0fe:	4413      	add	r3, r2
 802d100:	3392      	adds	r3, #146	; 0x92
 802d102:	2200      	movs	r2, #0
 802d104:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 802d106:	7bbb      	ldrb	r3, [r7, #14]
 802d108:	2b02      	cmp	r3, #2
 802d10a:	d14a      	bne.n	802d1a2 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 802d10c:	693b      	ldr	r3, [r7, #16]
 802d10e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d112:	4619      	mov	r1, r3
 802d114:	693a      	ldr	r2, [r7, #16]
 802d116:	2334      	movs	r3, #52	; 0x34
 802d118:	fb01 f303 	mul.w	r3, r1, r3
 802d11c:	4413      	add	r3, r2
 802d11e:	3392      	adds	r3, #146	; 0x92
 802d120:	781b      	ldrb	r3, [r3, #0]
 802d122:	2b02      	cmp	r3, #2
 802d124:	d00c      	beq.n	802d140 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 802d126:	693b      	ldr	r3, [r7, #16]
 802d128:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d12c:	4619      	mov	r1, r3
 802d12e:	693a      	ldr	r2, [r7, #16]
 802d130:	2334      	movs	r3, #52	; 0x34
 802d132:	fb01 f303 	mul.w	r3, r1, r3
 802d136:	4413      	add	r3, r2
 802d138:	33c1      	adds	r3, #193	; 0xc1
 802d13a:	2201      	movs	r2, #1
 802d13c:	701a      	strb	r2, [r3, #0]
 802d13e:	e00b      	b.n	802d158 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 802d140:	693b      	ldr	r3, [r7, #16]
 802d142:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d146:	4619      	mov	r1, r3
 802d148:	693a      	ldr	r2, [r7, #16]
 802d14a:	2334      	movs	r3, #52	; 0x34
 802d14c:	fb01 f303 	mul.w	r3, r1, r3
 802d150:	4413      	add	r3, r2
 802d152:	33c1      	adds	r3, #193	; 0xc1
 802d154:	2200      	movs	r2, #0
 802d156:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 802d158:	693b      	ldr	r3, [r7, #16]
 802d15a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d15e:	4619      	mov	r1, r3
 802d160:	693a      	ldr	r2, [r7, #16]
 802d162:	2334      	movs	r3, #52	; 0x34
 802d164:	fb01 f303 	mul.w	r3, r1, r3
 802d168:	4413      	add	r3, r2
 802d16a:	3390      	adds	r3, #144	; 0x90
 802d16c:	2205      	movs	r2, #5
 802d16e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 802d170:	693b      	ldr	r3, [r7, #16]
 802d172:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d176:	4619      	mov	r1, r3
 802d178:	693a      	ldr	r2, [r7, #16]
 802d17a:	2334      	movs	r3, #52	; 0x34
 802d17c:	fb01 f303 	mul.w	r3, r1, r3
 802d180:	4413      	add	r3, r2
 802d182:	3391      	adds	r3, #145	; 0x91
 802d184:	2201      	movs	r2, #1
 802d186:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 802d188:	693b      	ldr	r3, [r7, #16]
 802d18a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d18e:	4619      	mov	r1, r3
 802d190:	693a      	ldr	r2, [r7, #16]
 802d192:	2334      	movs	r3, #52	; 0x34
 802d194:	fb01 f303 	mul.w	r3, r1, r3
 802d198:	4413      	add	r3, r2
 802d19a:	3392      	adds	r3, #146	; 0x92
 802d19c:	2202      	movs	r2, #2
 802d19e:	701a      	strb	r2, [r3, #0]
            break;
 802d1a0:	e119      	b.n	802d3d6 <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 802d1a2:	7bbb      	ldrb	r3, [r7, #14]
 802d1a4:	2b04      	cmp	r3, #4
 802d1a6:	f040 8116 	bne.w	802d3d6 <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802d1aa:	693b      	ldr	r3, [r7, #16]
 802d1ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d1b0:	4619      	mov	r1, r3
 802d1b2:	693a      	ldr	r2, [r7, #16]
 802d1b4:	2334      	movs	r3, #52	; 0x34
 802d1b6:	fb01 f303 	mul.w	r3, r1, r3
 802d1ba:	4413      	add	r3, r2
 802d1bc:	3390      	adds	r3, #144	; 0x90
 802d1be:	2201      	movs	r2, #1
 802d1c0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 802d1c2:	693b      	ldr	r3, [r7, #16]
 802d1c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d1c8:	4619      	mov	r1, r3
 802d1ca:	693a      	ldr	r2, [r7, #16]
 802d1cc:	2334      	movs	r3, #52	; 0x34
 802d1ce:	fb01 f303 	mul.w	r3, r1, r3
 802d1d2:	4413      	add	r3, r2
 802d1d4:	3391      	adds	r3, #145	; 0x91
 802d1d6:	2202      	movs	r2, #2
 802d1d8:	701a      	strb	r2, [r3, #0]
            break;
 802d1da:	e0fc      	b.n	802d3d6 <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 802d1dc:	693b      	ldr	r3, [r7, #16]
 802d1de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d1e2:	b2d9      	uxtb	r1, r3
 802d1e4:	693b      	ldr	r3, [r7, #16]
 802d1e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d1ea:	461a      	mov	r2, r3
 802d1ec:	2334      	movs	r3, #52	; 0x34
 802d1ee:	fb02 f303 	mul.w	r3, r2, r3
 802d1f2:	3390      	adds	r3, #144	; 0x90
 802d1f4:	693a      	ldr	r2, [r7, #16]
 802d1f6:	4413      	add	r3, r2
 802d1f8:	3304      	adds	r3, #4
 802d1fa:	461a      	mov	r2, r3
 802d1fc:	6878      	ldr	r0, [r7, #4]
 802d1fe:	f000 fea8 	bl	802df52 <USBH_MSC_SCSI_ReadCapacity>
 802d202:	4603      	mov	r3, r0
 802d204:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 802d206:	7bfb      	ldrb	r3, [r7, #15]
 802d208:	2b00      	cmp	r3, #0
 802d20a:	d120      	bne.n	802d24e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802d20c:	693b      	ldr	r3, [r7, #16]
 802d20e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d212:	4619      	mov	r1, r3
 802d214:	693a      	ldr	r2, [r7, #16]
 802d216:	2334      	movs	r3, #52	; 0x34
 802d218:	fb01 f303 	mul.w	r3, r1, r3
 802d21c:	4413      	add	r3, r2
 802d21e:	3390      	adds	r3, #144	; 0x90
 802d220:	2201      	movs	r2, #1
 802d222:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 802d224:	693b      	ldr	r3, [r7, #16]
 802d226:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d22a:	4619      	mov	r1, r3
 802d22c:	693a      	ldr	r2, [r7, #16]
 802d22e:	2334      	movs	r3, #52	; 0x34
 802d230:	fb01 f303 	mul.w	r3, r1, r3
 802d234:	4413      	add	r3, r2
 802d236:	3391      	adds	r3, #145	; 0x91
 802d238:	2200      	movs	r2, #0
 802d23a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 802d23c:	693b      	ldr	r3, [r7, #16]
 802d23e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d242:	3301      	adds	r3, #1
 802d244:	b29a      	uxth	r2, r3
 802d246:	693b      	ldr	r3, [r7, #16]
 802d248:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 802d24c:	e0c5      	b.n	802d3da <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 802d24e:	7bfb      	ldrb	r3, [r7, #15]
 802d250:	2b02      	cmp	r3, #2
 802d252:	d10c      	bne.n	802d26e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 802d254:	693b      	ldr	r3, [r7, #16]
 802d256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d25a:	4619      	mov	r1, r3
 802d25c:	693a      	ldr	r2, [r7, #16]
 802d25e:	2334      	movs	r3, #52	; 0x34
 802d260:	fb01 f303 	mul.w	r3, r1, r3
 802d264:	4413      	add	r3, r2
 802d266:	3390      	adds	r3, #144	; 0x90
 802d268:	2205      	movs	r2, #5
 802d26a:	701a      	strb	r2, [r3, #0]
            break;
 802d26c:	e0b5      	b.n	802d3da <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 802d26e:	7bfb      	ldrb	r3, [r7, #15]
 802d270:	2b04      	cmp	r3, #4
 802d272:	f040 80b2 	bne.w	802d3da <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802d276:	693b      	ldr	r3, [r7, #16]
 802d278:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d27c:	4619      	mov	r1, r3
 802d27e:	693a      	ldr	r2, [r7, #16]
 802d280:	2334      	movs	r3, #52	; 0x34
 802d282:	fb01 f303 	mul.w	r3, r1, r3
 802d286:	4413      	add	r3, r2
 802d288:	3390      	adds	r3, #144	; 0x90
 802d28a:	2201      	movs	r2, #1
 802d28c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 802d28e:	693b      	ldr	r3, [r7, #16]
 802d290:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d294:	4619      	mov	r1, r3
 802d296:	693a      	ldr	r2, [r7, #16]
 802d298:	2334      	movs	r3, #52	; 0x34
 802d29a:	fb01 f303 	mul.w	r3, r1, r3
 802d29e:	4413      	add	r3, r2
 802d2a0:	3391      	adds	r3, #145	; 0x91
 802d2a2:	2202      	movs	r2, #2
 802d2a4:	701a      	strb	r2, [r3, #0]
            break;
 802d2a6:	e098      	b.n	802d3da <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 802d2a8:	693b      	ldr	r3, [r7, #16]
 802d2aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d2ae:	b2d9      	uxtb	r1, r3
 802d2b0:	693b      	ldr	r3, [r7, #16]
 802d2b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d2b6:	461a      	mov	r2, r3
 802d2b8:	2334      	movs	r3, #52	; 0x34
 802d2ba:	fb02 f303 	mul.w	r3, r2, r3
 802d2be:	3398      	adds	r3, #152	; 0x98
 802d2c0:	693a      	ldr	r2, [r7, #16]
 802d2c2:	4413      	add	r3, r2
 802d2c4:	3304      	adds	r3, #4
 802d2c6:	461a      	mov	r2, r3
 802d2c8:	6878      	ldr	r0, [r7, #4]
 802d2ca:	f000 ff62 	bl	802e192 <USBH_MSC_SCSI_RequestSense>
 802d2ce:	4603      	mov	r3, r0
 802d2d0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 802d2d2:	7bfb      	ldrb	r3, [r7, #15]
 802d2d4:	2b00      	cmp	r3, #0
 802d2d6:	d145      	bne.n	802d364 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 802d2d8:	693b      	ldr	r3, [r7, #16]
 802d2da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d2de:	4619      	mov	r1, r3
 802d2e0:	693a      	ldr	r2, [r7, #16]
 802d2e2:	2334      	movs	r3, #52	; 0x34
 802d2e4:	fb01 f303 	mul.w	r3, r1, r3
 802d2e8:	4413      	add	r3, r2
 802d2ea:	339c      	adds	r3, #156	; 0x9c
 802d2ec:	781b      	ldrb	r3, [r3, #0]
 802d2ee:	2b06      	cmp	r3, #6
 802d2f0:	d00c      	beq.n	802d30c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 802d2f2:	693b      	ldr	r3, [r7, #16]
 802d2f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d2f8:	4619      	mov	r1, r3
 802d2fa:	693a      	ldr	r2, [r7, #16]
 802d2fc:	2334      	movs	r3, #52	; 0x34
 802d2fe:	fb01 f303 	mul.w	r3, r1, r3
 802d302:	4413      	add	r3, r2
 802d304:	339c      	adds	r3, #156	; 0x9c
 802d306:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 802d308:	2b02      	cmp	r3, #2
 802d30a:	d117      	bne.n	802d33c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 802d30c:	687b      	ldr	r3, [r7, #4]
 802d30e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 802d312:	693b      	ldr	r3, [r7, #16]
 802d314:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 802d318:	1ad3      	subs	r3, r2, r3
 802d31a:	f242 720f 	movw	r2, #9999	; 0x270f
 802d31e:	4293      	cmp	r3, r2
 802d320:	d80c      	bhi.n	802d33c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 802d322:	693b      	ldr	r3, [r7, #16]
 802d324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d328:	4619      	mov	r1, r3
 802d32a:	693a      	ldr	r2, [r7, #16]
 802d32c:	2334      	movs	r3, #52	; 0x34
 802d32e:	fb01 f303 	mul.w	r3, r1, r3
 802d332:	4413      	add	r3, r2
 802d334:	3390      	adds	r3, #144	; 0x90
 802d336:	2202      	movs	r2, #2
 802d338:	701a      	strb	r2, [r3, #0]
                  break;
 802d33a:	e051      	b.n	802d3e0 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802d33c:	693b      	ldr	r3, [r7, #16]
 802d33e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d342:	4619      	mov	r1, r3
 802d344:	693a      	ldr	r2, [r7, #16]
 802d346:	2334      	movs	r3, #52	; 0x34
 802d348:	fb01 f303 	mul.w	r3, r1, r3
 802d34c:	4413      	add	r3, r2
 802d34e:	3390      	adds	r3, #144	; 0x90
 802d350:	2201      	movs	r2, #1
 802d352:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 802d354:	693b      	ldr	r3, [r7, #16]
 802d356:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d35a:	3301      	adds	r3, #1
 802d35c:	b29a      	uxth	r2, r3
 802d35e:	693b      	ldr	r3, [r7, #16]
 802d360:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 802d364:	7bfb      	ldrb	r3, [r7, #15]
 802d366:	2b02      	cmp	r3, #2
 802d368:	d10c      	bne.n	802d384 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 802d36a:	693b      	ldr	r3, [r7, #16]
 802d36c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d370:	4619      	mov	r1, r3
 802d372:	693a      	ldr	r2, [r7, #16]
 802d374:	2334      	movs	r3, #52	; 0x34
 802d376:	fb01 f303 	mul.w	r3, r1, r3
 802d37a:	4413      	add	r3, r2
 802d37c:	3390      	adds	r3, #144	; 0x90
 802d37e:	2208      	movs	r2, #8
 802d380:	701a      	strb	r2, [r3, #0]
            break;
 802d382:	e02c      	b.n	802d3de <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 802d384:	7bfb      	ldrb	r3, [r7, #15]
 802d386:	2b04      	cmp	r3, #4
 802d388:	d129      	bne.n	802d3de <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802d38a:	693b      	ldr	r3, [r7, #16]
 802d38c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d390:	4619      	mov	r1, r3
 802d392:	693a      	ldr	r2, [r7, #16]
 802d394:	2334      	movs	r3, #52	; 0x34
 802d396:	fb01 f303 	mul.w	r3, r1, r3
 802d39a:	4413      	add	r3, r2
 802d39c:	3390      	adds	r3, #144	; 0x90
 802d39e:	2201      	movs	r2, #1
 802d3a0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 802d3a2:	693b      	ldr	r3, [r7, #16]
 802d3a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d3a8:	4619      	mov	r1, r3
 802d3aa:	693a      	ldr	r2, [r7, #16]
 802d3ac:	2334      	movs	r3, #52	; 0x34
 802d3ae:	fb01 f303 	mul.w	r3, r1, r3
 802d3b2:	4413      	add	r3, r2
 802d3b4:	3391      	adds	r3, #145	; 0x91
 802d3b6:	2202      	movs	r2, #2
 802d3b8:	701a      	strb	r2, [r3, #0]
            break;
 802d3ba:	e010      	b.n	802d3de <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 802d3bc:	693b      	ldr	r3, [r7, #16]
 802d3be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d3c2:	3301      	adds	r3, #1
 802d3c4:	b29a      	uxth	r2, r3
 802d3c6:	693b      	ldr	r3, [r7, #16]
 802d3c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 802d3cc:	e008      	b.n	802d3e0 <USBH_MSC_Process+0x4f0>
            break;
 802d3ce:	bf00      	nop
 802d3d0:	e006      	b.n	802d3e0 <USBH_MSC_Process+0x4f0>
            break;
 802d3d2:	bf00      	nop
 802d3d4:	e004      	b.n	802d3e0 <USBH_MSC_Process+0x4f0>
            break;
 802d3d6:	bf00      	nop
 802d3d8:	e002      	b.n	802d3e0 <USBH_MSC_Process+0x4f0>
            break;
 802d3da:	bf00      	nop
 802d3dc:	e000      	b.n	802d3e0 <USBH_MSC_Process+0x4f0>
            break;
 802d3de:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 802d3e0:	687b      	ldr	r3, [r7, #4]
 802d3e2:	2204      	movs	r2, #4
 802d3e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802d3e8:	687b      	ldr	r3, [r7, #4]
 802d3ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802d3ee:	687b      	ldr	r3, [r7, #4]
 802d3f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802d3f4:	2200      	movs	r2, #0
 802d3f6:	4619      	mov	r1, r3
 802d3f8:	f008 ff6e 	bl	80362d8 <osMessagePut>
      break;
 802d3fc:	e01e      	b.n	802d43c <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 802d3fe:	693b      	ldr	r3, [r7, #16]
 802d400:	2200      	movs	r2, #0
 802d402:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 802d406:	693b      	ldr	r3, [r7, #16]
 802d408:	2201      	movs	r2, #1
 802d40a:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 802d40c:	687b      	ldr	r3, [r7, #4]
 802d40e:	2204      	movs	r2, #4
 802d410:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802d414:	687b      	ldr	r3, [r7, #4]
 802d416:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802d41a:	687b      	ldr	r3, [r7, #4]
 802d41c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802d420:	2200      	movs	r2, #0
 802d422:	4619      	mov	r1, r3
 802d424:	f008 ff58 	bl	80362d8 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802d428:	687b      	ldr	r3, [r7, #4]
 802d42a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802d42e:	2102      	movs	r1, #2
 802d430:	6878      	ldr	r0, [r7, #4]
 802d432:	4798      	blx	r3
      break;
 802d434:	e002      	b.n	802d43c <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 802d436:	2300      	movs	r3, #0
 802d438:	75fb      	strb	r3, [r7, #23]
      break;
 802d43a:	bf00      	nop
  }
  return error;
 802d43c:	7dfb      	ldrb	r3, [r7, #23]
}
 802d43e:	4618      	mov	r0, r3
 802d440:	3718      	adds	r7, #24
 802d442:	46bd      	mov	sp, r7
 802d444:	bd80      	pop	{r7, pc}
 802d446:	bf00      	nop

0802d448 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 802d448:	b480      	push	{r7}
 802d44a:	b083      	sub	sp, #12
 802d44c:	af00      	add	r7, sp, #0
 802d44e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 802d450:	2300      	movs	r3, #0
}
 802d452:	4618      	mov	r0, r3
 802d454:	370c      	adds	r7, #12
 802d456:	46bd      	mov	sp, r7
 802d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d45c:	4770      	bx	lr

0802d45e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 802d45e:	b580      	push	{r7, lr}
 802d460:	b088      	sub	sp, #32
 802d462:	af02      	add	r7, sp, #8
 802d464:	6078      	str	r0, [r7, #4]
 802d466:	460b      	mov	r3, r1
 802d468:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d46a:	687b      	ldr	r3, [r7, #4]
 802d46c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d470:	69db      	ldr	r3, [r3, #28]
 802d472:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 802d474:	2301      	movs	r3, #1
 802d476:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 802d478:	2301      	movs	r3, #1
 802d47a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 802d47c:	78fb      	ldrb	r3, [r7, #3]
 802d47e:	693a      	ldr	r2, [r7, #16]
 802d480:	2134      	movs	r1, #52	; 0x34
 802d482:	fb01 f303 	mul.w	r3, r1, r3
 802d486:	4413      	add	r3, r2
 802d488:	3390      	adds	r3, #144	; 0x90
 802d48a:	781b      	ldrb	r3, [r3, #0]
 802d48c:	2b07      	cmp	r3, #7
 802d48e:	d04b      	beq.n	802d528 <USBH_MSC_RdWrProcess+0xca>
 802d490:	2b07      	cmp	r3, #7
 802d492:	f300 80d2 	bgt.w	802d63a <USBH_MSC_RdWrProcess+0x1dc>
 802d496:	2b05      	cmp	r3, #5
 802d498:	f000 8089 	beq.w	802d5ae <USBH_MSC_RdWrProcess+0x150>
 802d49c:	2b06      	cmp	r3, #6
 802d49e:	f040 80cc 	bne.w	802d63a <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 802d4a2:	78f9      	ldrb	r1, [r7, #3]
 802d4a4:	2300      	movs	r3, #0
 802d4a6:	9300      	str	r3, [sp, #0]
 802d4a8:	2300      	movs	r3, #0
 802d4aa:	2200      	movs	r2, #0
 802d4ac:	6878      	ldr	r0, [r7, #4]
 802d4ae:	f000 ff54 	bl	802e35a <USBH_MSC_SCSI_Read>
 802d4b2:	4603      	mov	r3, r0
 802d4b4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 802d4b6:	7bfb      	ldrb	r3, [r7, #15]
 802d4b8:	2b00      	cmp	r3, #0
 802d4ba:	d10b      	bne.n	802d4d4 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 802d4bc:	78fb      	ldrb	r3, [r7, #3]
 802d4be:	693a      	ldr	r2, [r7, #16]
 802d4c0:	2134      	movs	r1, #52	; 0x34
 802d4c2:	fb01 f303 	mul.w	r3, r1, r3
 802d4c6:	4413      	add	r3, r2
 802d4c8:	3390      	adds	r3, #144	; 0x90
 802d4ca:	2201      	movs	r2, #1
 802d4cc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 802d4ce:	2300      	movs	r3, #0
 802d4d0:	75fb      	strb	r3, [r7, #23]
 802d4d2:	e01a      	b.n	802d50a <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 802d4d4:	7bfb      	ldrb	r3, [r7, #15]
 802d4d6:	2b02      	cmp	r3, #2
 802d4d8:	d109      	bne.n	802d4ee <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 802d4da:	78fb      	ldrb	r3, [r7, #3]
 802d4dc:	693a      	ldr	r2, [r7, #16]
 802d4de:	2134      	movs	r1, #52	; 0x34
 802d4e0:	fb01 f303 	mul.w	r3, r1, r3
 802d4e4:	4413      	add	r3, r2
 802d4e6:	3390      	adds	r3, #144	; 0x90
 802d4e8:	2205      	movs	r2, #5
 802d4ea:	701a      	strb	r2, [r3, #0]
 802d4ec:	e00d      	b.n	802d50a <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 802d4ee:	7bfb      	ldrb	r3, [r7, #15]
 802d4f0:	2b04      	cmp	r3, #4
 802d4f2:	d10a      	bne.n	802d50a <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 802d4f4:	78fb      	ldrb	r3, [r7, #3]
 802d4f6:	693a      	ldr	r2, [r7, #16]
 802d4f8:	2134      	movs	r1, #52	; 0x34
 802d4fa:	fb01 f303 	mul.w	r3, r1, r3
 802d4fe:	4413      	add	r3, r2
 802d500:	3390      	adds	r3, #144	; 0x90
 802d502:	2208      	movs	r2, #8
 802d504:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 802d506:	2302      	movs	r3, #2
 802d508:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 802d50a:	687b      	ldr	r3, [r7, #4]
 802d50c:	2204      	movs	r2, #4
 802d50e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802d512:	687b      	ldr	r3, [r7, #4]
 802d514:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802d518:	687b      	ldr	r3, [r7, #4]
 802d51a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802d51e:	2200      	movs	r2, #0
 802d520:	4619      	mov	r1, r3
 802d522:	f008 fed9 	bl	80362d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802d526:	e089      	b.n	802d63c <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 802d528:	78f9      	ldrb	r1, [r7, #3]
 802d52a:	2300      	movs	r3, #0
 802d52c:	9300      	str	r3, [sp, #0]
 802d52e:	2300      	movs	r3, #0
 802d530:	2200      	movs	r2, #0
 802d532:	6878      	ldr	r0, [r7, #4]
 802d534:	f000 fea6 	bl	802e284 <USBH_MSC_SCSI_Write>
 802d538:	4603      	mov	r3, r0
 802d53a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 802d53c:	7bfb      	ldrb	r3, [r7, #15]
 802d53e:	2b00      	cmp	r3, #0
 802d540:	d10b      	bne.n	802d55a <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 802d542:	78fb      	ldrb	r3, [r7, #3]
 802d544:	693a      	ldr	r2, [r7, #16]
 802d546:	2134      	movs	r1, #52	; 0x34
 802d548:	fb01 f303 	mul.w	r3, r1, r3
 802d54c:	4413      	add	r3, r2
 802d54e:	3390      	adds	r3, #144	; 0x90
 802d550:	2201      	movs	r2, #1
 802d552:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 802d554:	2300      	movs	r3, #0
 802d556:	75fb      	strb	r3, [r7, #23]
 802d558:	e01a      	b.n	802d590 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 802d55a:	7bfb      	ldrb	r3, [r7, #15]
 802d55c:	2b02      	cmp	r3, #2
 802d55e:	d109      	bne.n	802d574 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 802d560:	78fb      	ldrb	r3, [r7, #3]
 802d562:	693a      	ldr	r2, [r7, #16]
 802d564:	2134      	movs	r1, #52	; 0x34
 802d566:	fb01 f303 	mul.w	r3, r1, r3
 802d56a:	4413      	add	r3, r2
 802d56c:	3390      	adds	r3, #144	; 0x90
 802d56e:	2205      	movs	r2, #5
 802d570:	701a      	strb	r2, [r3, #0]
 802d572:	e00d      	b.n	802d590 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 802d574:	7bfb      	ldrb	r3, [r7, #15]
 802d576:	2b04      	cmp	r3, #4
 802d578:	d10a      	bne.n	802d590 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 802d57a:	78fb      	ldrb	r3, [r7, #3]
 802d57c:	693a      	ldr	r2, [r7, #16]
 802d57e:	2134      	movs	r1, #52	; 0x34
 802d580:	fb01 f303 	mul.w	r3, r1, r3
 802d584:	4413      	add	r3, r2
 802d586:	3390      	adds	r3, #144	; 0x90
 802d588:	2208      	movs	r2, #8
 802d58a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 802d58c:	2302      	movs	r3, #2
 802d58e:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 802d590:	687b      	ldr	r3, [r7, #4]
 802d592:	2204      	movs	r2, #4
 802d594:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802d598:	687b      	ldr	r3, [r7, #4]
 802d59a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802d59e:	687b      	ldr	r3, [r7, #4]
 802d5a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802d5a4:	2200      	movs	r2, #0
 802d5a6:	4619      	mov	r1, r3
 802d5a8:	f008 fe96 	bl	80362d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802d5ac:	e046      	b.n	802d63c <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 802d5ae:	78fb      	ldrb	r3, [r7, #3]
 802d5b0:	2234      	movs	r2, #52	; 0x34
 802d5b2:	fb02 f303 	mul.w	r3, r2, r3
 802d5b6:	3398      	adds	r3, #152	; 0x98
 802d5b8:	693a      	ldr	r2, [r7, #16]
 802d5ba:	4413      	add	r3, r2
 802d5bc:	1d1a      	adds	r2, r3, #4
 802d5be:	78fb      	ldrb	r3, [r7, #3]
 802d5c0:	4619      	mov	r1, r3
 802d5c2:	6878      	ldr	r0, [r7, #4]
 802d5c4:	f000 fde5 	bl	802e192 <USBH_MSC_SCSI_RequestSense>
 802d5c8:	4603      	mov	r3, r0
 802d5ca:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 802d5cc:	7bfb      	ldrb	r3, [r7, #15]
 802d5ce:	2b00      	cmp	r3, #0
 802d5d0:	d113      	bne.n	802d5fa <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 802d5d2:	78fb      	ldrb	r3, [r7, #3]
 802d5d4:	693a      	ldr	r2, [r7, #16]
 802d5d6:	2134      	movs	r1, #52	; 0x34
 802d5d8:	fb01 f303 	mul.w	r3, r1, r3
 802d5dc:	4413      	add	r3, r2
 802d5de:	3390      	adds	r3, #144	; 0x90
 802d5e0:	2201      	movs	r2, #1
 802d5e2:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 802d5e4:	78fb      	ldrb	r3, [r7, #3]
 802d5e6:	693a      	ldr	r2, [r7, #16]
 802d5e8:	2134      	movs	r1, #52	; 0x34
 802d5ea:	fb01 f303 	mul.w	r3, r1, r3
 802d5ee:	4413      	add	r3, r2
 802d5f0:	3391      	adds	r3, #145	; 0x91
 802d5f2:	2202      	movs	r2, #2
 802d5f4:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 802d5f6:	2302      	movs	r3, #2
 802d5f8:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 802d5fa:	7bfb      	ldrb	r3, [r7, #15]
 802d5fc:	2b02      	cmp	r3, #2
 802d5fe:	d00d      	beq.n	802d61c <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 802d600:	7bfb      	ldrb	r3, [r7, #15]
 802d602:	2b04      	cmp	r3, #4
 802d604:	d10a      	bne.n	802d61c <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 802d606:	78fb      	ldrb	r3, [r7, #3]
 802d608:	693a      	ldr	r2, [r7, #16]
 802d60a:	2134      	movs	r1, #52	; 0x34
 802d60c:	fb01 f303 	mul.w	r3, r1, r3
 802d610:	4413      	add	r3, r2
 802d612:	3390      	adds	r3, #144	; 0x90
 802d614:	2208      	movs	r2, #8
 802d616:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 802d618:	2302      	movs	r3, #2
 802d61a:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 802d61c:	687b      	ldr	r3, [r7, #4]
 802d61e:	2204      	movs	r2, #4
 802d620:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802d624:	687b      	ldr	r3, [r7, #4]
 802d626:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802d62a:	687b      	ldr	r3, [r7, #4]
 802d62c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802d630:	2200      	movs	r2, #0
 802d632:	4619      	mov	r1, r3
 802d634:	f008 fe50 	bl	80362d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802d638:	e000      	b.n	802d63c <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 802d63a:	bf00      	nop

  }
  return error;
 802d63c:	7dfb      	ldrb	r3, [r7, #23]
}
 802d63e:	4618      	mov	r0, r3
 802d640:	3718      	adds	r7, #24
 802d642:	46bd      	mov	sp, r7
 802d644:	bd80      	pop	{r7, pc}

0802d646 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 802d646:	b480      	push	{r7}
 802d648:	b085      	sub	sp, #20
 802d64a:	af00      	add	r7, sp, #0
 802d64c:	6078      	str	r0, [r7, #4]
 802d64e:	460b      	mov	r3, r1
 802d650:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d652:	687b      	ldr	r3, [r7, #4]
 802d654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d658:	69db      	ldr	r3, [r3, #28]
 802d65a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 802d65c:	687b      	ldr	r3, [r7, #4]
 802d65e:	781b      	ldrb	r3, [r3, #0]
 802d660:	b2db      	uxtb	r3, r3
 802d662:	2b0b      	cmp	r3, #11
 802d664:	d10c      	bne.n	802d680 <USBH_MSC_UnitIsReady+0x3a>
 802d666:	78fb      	ldrb	r3, [r7, #3]
 802d668:	68ba      	ldr	r2, [r7, #8]
 802d66a:	2134      	movs	r1, #52	; 0x34
 802d66c:	fb01 f303 	mul.w	r3, r1, r3
 802d670:	4413      	add	r3, r2
 802d672:	3391      	adds	r3, #145	; 0x91
 802d674:	781b      	ldrb	r3, [r3, #0]
 802d676:	2b00      	cmp	r3, #0
 802d678:	d102      	bne.n	802d680 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 802d67a:	2301      	movs	r3, #1
 802d67c:	73fb      	strb	r3, [r7, #15]
 802d67e:	e001      	b.n	802d684 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 802d680:	2300      	movs	r3, #0
 802d682:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 802d684:	7bfb      	ldrb	r3, [r7, #15]
}
 802d686:	4618      	mov	r0, r3
 802d688:	3714      	adds	r7, #20
 802d68a:	46bd      	mov	sp, r7
 802d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d690:	4770      	bx	lr

0802d692 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 802d692:	b580      	push	{r7, lr}
 802d694:	b086      	sub	sp, #24
 802d696:	af00      	add	r7, sp, #0
 802d698:	60f8      	str	r0, [r7, #12]
 802d69a:	460b      	mov	r3, r1
 802d69c:	607a      	str	r2, [r7, #4]
 802d69e:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d6a0:	68fb      	ldr	r3, [r7, #12]
 802d6a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d6a6:	69db      	ldr	r3, [r3, #28]
 802d6a8:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 802d6aa:	68fb      	ldr	r3, [r7, #12]
 802d6ac:	781b      	ldrb	r3, [r3, #0]
 802d6ae:	b2db      	uxtb	r3, r3
 802d6b0:	2b0b      	cmp	r3, #11
 802d6b2:	d10d      	bne.n	802d6d0 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 802d6b4:	7afb      	ldrb	r3, [r7, #11]
 802d6b6:	2234      	movs	r2, #52	; 0x34
 802d6b8:	fb02 f303 	mul.w	r3, r2, r3
 802d6bc:	3390      	adds	r3, #144	; 0x90
 802d6be:	697a      	ldr	r2, [r7, #20]
 802d6c0:	4413      	add	r3, r2
 802d6c2:	2234      	movs	r2, #52	; 0x34
 802d6c4:	4619      	mov	r1, r3
 802d6c6:	6878      	ldr	r0, [r7, #4]
 802d6c8:	f00c fc1e 	bl	8039f08 <memcpy>
    return USBH_OK;
 802d6cc:	2300      	movs	r3, #0
 802d6ce:	e000      	b.n	802d6d2 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 802d6d0:	2302      	movs	r3, #2
  }
}
 802d6d2:	4618      	mov	r0, r3
 802d6d4:	3718      	adds	r7, #24
 802d6d6:	46bd      	mov	sp, r7
 802d6d8:	bd80      	pop	{r7, pc}

0802d6da <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 802d6da:	b580      	push	{r7, lr}
 802d6dc:	b088      	sub	sp, #32
 802d6de:	af02      	add	r7, sp, #8
 802d6e0:	60f8      	str	r0, [r7, #12]
 802d6e2:	607a      	str	r2, [r7, #4]
 802d6e4:	603b      	str	r3, [r7, #0]
 802d6e6:	460b      	mov	r3, r1
 802d6e8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d6ea:	68fb      	ldr	r3, [r7, #12]
 802d6ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d6f0:	69db      	ldr	r3, [r3, #28]
 802d6f2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 802d6f4:	68fb      	ldr	r3, [r7, #12]
 802d6f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802d6fa:	b2db      	uxtb	r3, r3
 802d6fc:	2b00      	cmp	r3, #0
 802d6fe:	d00e      	beq.n	802d71e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 802d700:	68fb      	ldr	r3, [r7, #12]
 802d702:	781b      	ldrb	r3, [r3, #0]
 802d704:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 802d706:	2b0b      	cmp	r3, #11
 802d708:	d109      	bne.n	802d71e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 802d70a:	7afb      	ldrb	r3, [r7, #11]
 802d70c:	697a      	ldr	r2, [r7, #20]
 802d70e:	2134      	movs	r1, #52	; 0x34
 802d710:	fb01 f303 	mul.w	r3, r1, r3
 802d714:	4413      	add	r3, r2
 802d716:	3390      	adds	r3, #144	; 0x90
 802d718:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 802d71a:	2b01      	cmp	r3, #1
 802d71c:	d001      	beq.n	802d722 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 802d71e:	2302      	movs	r3, #2
 802d720:	e040      	b.n	802d7a4 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 802d722:	697b      	ldr	r3, [r7, #20]
 802d724:	2206      	movs	r2, #6
 802d726:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 802d728:	7afb      	ldrb	r3, [r7, #11]
 802d72a:	697a      	ldr	r2, [r7, #20]
 802d72c:	2134      	movs	r1, #52	; 0x34
 802d72e:	fb01 f303 	mul.w	r3, r1, r3
 802d732:	4413      	add	r3, r2
 802d734:	3390      	adds	r3, #144	; 0x90
 802d736:	2206      	movs	r2, #6
 802d738:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 802d73a:	7afb      	ldrb	r3, [r7, #11]
 802d73c:	b29a      	uxth	r2, r3
 802d73e:	697b      	ldr	r3, [r7, #20]
 802d740:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 802d744:	7af9      	ldrb	r1, [r7, #11]
 802d746:	6a3b      	ldr	r3, [r7, #32]
 802d748:	9300      	str	r3, [sp, #0]
 802d74a:	683b      	ldr	r3, [r7, #0]
 802d74c:	687a      	ldr	r2, [r7, #4]
 802d74e:	68f8      	ldr	r0, [r7, #12]
 802d750:	f000 fe03 	bl	802e35a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 802d754:	68fb      	ldr	r3, [r7, #12]
 802d756:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d75a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 802d75c:	e016      	b.n	802d78c <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 802d75e:	68fb      	ldr	r3, [r7, #12]
 802d760:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 802d764:	693b      	ldr	r3, [r7, #16]
 802d766:	1ad2      	subs	r2, r2, r3
 802d768:	6a3b      	ldr	r3, [r7, #32]
 802d76a:	f242 7110 	movw	r1, #10000	; 0x2710
 802d76e:	fb01 f303 	mul.w	r3, r1, r3
 802d772:	429a      	cmp	r2, r3
 802d774:	d805      	bhi.n	802d782 <USBH_MSC_Read+0xa8>
 802d776:	68fb      	ldr	r3, [r7, #12]
 802d778:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802d77c:	b2db      	uxtb	r3, r3
 802d77e:	2b00      	cmp	r3, #0
 802d780:	d104      	bne.n	802d78c <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 802d782:	697b      	ldr	r3, [r7, #20]
 802d784:	2201      	movs	r2, #1
 802d786:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 802d788:	2302      	movs	r3, #2
 802d78a:	e00b      	b.n	802d7a4 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 802d78c:	7afb      	ldrb	r3, [r7, #11]
 802d78e:	4619      	mov	r1, r3
 802d790:	68f8      	ldr	r0, [r7, #12]
 802d792:	f7ff fe64 	bl	802d45e <USBH_MSC_RdWrProcess>
 802d796:	4603      	mov	r3, r0
 802d798:	2b01      	cmp	r3, #1
 802d79a:	d0e0      	beq.n	802d75e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 802d79c:	697b      	ldr	r3, [r7, #20]
 802d79e:	2201      	movs	r2, #1
 802d7a0:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 802d7a2:	2300      	movs	r3, #0
}
 802d7a4:	4618      	mov	r0, r3
 802d7a6:	3718      	adds	r7, #24
 802d7a8:	46bd      	mov	sp, r7
 802d7aa:	bd80      	pop	{r7, pc}

0802d7ac <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 802d7ac:	b580      	push	{r7, lr}
 802d7ae:	b088      	sub	sp, #32
 802d7b0:	af02      	add	r7, sp, #8
 802d7b2:	60f8      	str	r0, [r7, #12]
 802d7b4:	607a      	str	r2, [r7, #4]
 802d7b6:	603b      	str	r3, [r7, #0]
 802d7b8:	460b      	mov	r3, r1
 802d7ba:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d7bc:	68fb      	ldr	r3, [r7, #12]
 802d7be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d7c2:	69db      	ldr	r3, [r3, #28]
 802d7c4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 802d7c6:	68fb      	ldr	r3, [r7, #12]
 802d7c8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802d7cc:	b2db      	uxtb	r3, r3
 802d7ce:	2b00      	cmp	r3, #0
 802d7d0:	d00e      	beq.n	802d7f0 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 802d7d2:	68fb      	ldr	r3, [r7, #12]
 802d7d4:	781b      	ldrb	r3, [r3, #0]
 802d7d6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 802d7d8:	2b0b      	cmp	r3, #11
 802d7da:	d109      	bne.n	802d7f0 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 802d7dc:	7afb      	ldrb	r3, [r7, #11]
 802d7de:	697a      	ldr	r2, [r7, #20]
 802d7e0:	2134      	movs	r1, #52	; 0x34
 802d7e2:	fb01 f303 	mul.w	r3, r1, r3
 802d7e6:	4413      	add	r3, r2
 802d7e8:	3390      	adds	r3, #144	; 0x90
 802d7ea:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 802d7ec:	2b01      	cmp	r3, #1
 802d7ee:	d001      	beq.n	802d7f4 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 802d7f0:	2302      	movs	r3, #2
 802d7f2:	e040      	b.n	802d876 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 802d7f4:	697b      	ldr	r3, [r7, #20]
 802d7f6:	2207      	movs	r2, #7
 802d7f8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 802d7fa:	7afb      	ldrb	r3, [r7, #11]
 802d7fc:	697a      	ldr	r2, [r7, #20]
 802d7fe:	2134      	movs	r1, #52	; 0x34
 802d800:	fb01 f303 	mul.w	r3, r1, r3
 802d804:	4413      	add	r3, r2
 802d806:	3390      	adds	r3, #144	; 0x90
 802d808:	2207      	movs	r2, #7
 802d80a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 802d80c:	7afb      	ldrb	r3, [r7, #11]
 802d80e:	b29a      	uxth	r2, r3
 802d810:	697b      	ldr	r3, [r7, #20]
 802d812:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 802d816:	7af9      	ldrb	r1, [r7, #11]
 802d818:	6a3b      	ldr	r3, [r7, #32]
 802d81a:	9300      	str	r3, [sp, #0]
 802d81c:	683b      	ldr	r3, [r7, #0]
 802d81e:	687a      	ldr	r2, [r7, #4]
 802d820:	68f8      	ldr	r0, [r7, #12]
 802d822:	f000 fd2f 	bl	802e284 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 802d826:	68fb      	ldr	r3, [r7, #12]
 802d828:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d82c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 802d82e:	e016      	b.n	802d85e <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 802d830:	68fb      	ldr	r3, [r7, #12]
 802d832:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 802d836:	693b      	ldr	r3, [r7, #16]
 802d838:	1ad2      	subs	r2, r2, r3
 802d83a:	6a3b      	ldr	r3, [r7, #32]
 802d83c:	f242 7110 	movw	r1, #10000	; 0x2710
 802d840:	fb01 f303 	mul.w	r3, r1, r3
 802d844:	429a      	cmp	r2, r3
 802d846:	d805      	bhi.n	802d854 <USBH_MSC_Write+0xa8>
 802d848:	68fb      	ldr	r3, [r7, #12]
 802d84a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802d84e:	b2db      	uxtb	r3, r3
 802d850:	2b00      	cmp	r3, #0
 802d852:	d104      	bne.n	802d85e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 802d854:	697b      	ldr	r3, [r7, #20]
 802d856:	2201      	movs	r2, #1
 802d858:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 802d85a:	2302      	movs	r3, #2
 802d85c:	e00b      	b.n	802d876 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 802d85e:	7afb      	ldrb	r3, [r7, #11]
 802d860:	4619      	mov	r1, r3
 802d862:	68f8      	ldr	r0, [r7, #12]
 802d864:	f7ff fdfb 	bl	802d45e <USBH_MSC_RdWrProcess>
 802d868:	4603      	mov	r3, r0
 802d86a:	2b01      	cmp	r3, #1
 802d86c:	d0e0      	beq.n	802d830 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 802d86e:	697b      	ldr	r3, [r7, #20]
 802d870:	2201      	movs	r2, #1
 802d872:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 802d874:	2300      	movs	r3, #0
}
 802d876:	4618      	mov	r0, r3
 802d878:	3718      	adds	r7, #24
 802d87a:	46bd      	mov	sp, r7
 802d87c:	bd80      	pop	{r7, pc}

0802d87e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 802d87e:	b580      	push	{r7, lr}
 802d880:	b082      	sub	sp, #8
 802d882:	af00      	add	r7, sp, #0
 802d884:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 802d886:	687b      	ldr	r3, [r7, #4]
 802d888:	2221      	movs	r2, #33	; 0x21
 802d88a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 802d88c:	687b      	ldr	r3, [r7, #4]
 802d88e:	22ff      	movs	r2, #255	; 0xff
 802d890:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802d892:	687b      	ldr	r3, [r7, #4]
 802d894:	2200      	movs	r2, #0
 802d896:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802d898:	687b      	ldr	r3, [r7, #4]
 802d89a:	2200      	movs	r2, #0
 802d89c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 802d89e:	687b      	ldr	r3, [r7, #4]
 802d8a0:	2200      	movs	r2, #0
 802d8a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 802d8a4:	2200      	movs	r2, #0
 802d8a6:	2100      	movs	r1, #0
 802d8a8:	6878      	ldr	r0, [r7, #4]
 802d8aa:	f002 f873 	bl	802f994 <USBH_CtlReq>
 802d8ae:	4603      	mov	r3, r0
}
 802d8b0:	4618      	mov	r0, r3
 802d8b2:	3708      	adds	r7, #8
 802d8b4:	46bd      	mov	sp, r7
 802d8b6:	bd80      	pop	{r7, pc}

0802d8b8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 802d8b8:	b580      	push	{r7, lr}
 802d8ba:	b082      	sub	sp, #8
 802d8bc:	af00      	add	r7, sp, #0
 802d8be:	6078      	str	r0, [r7, #4]
 802d8c0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 802d8c2:	687b      	ldr	r3, [r7, #4]
 802d8c4:	22a1      	movs	r2, #161	; 0xa1
 802d8c6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 802d8c8:	687b      	ldr	r3, [r7, #4]
 802d8ca:	22fe      	movs	r2, #254	; 0xfe
 802d8cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802d8ce:	687b      	ldr	r3, [r7, #4]
 802d8d0:	2200      	movs	r2, #0
 802d8d2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802d8d4:	687b      	ldr	r3, [r7, #4]
 802d8d6:	2200      	movs	r2, #0
 802d8d8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 802d8da:	687b      	ldr	r3, [r7, #4]
 802d8dc:	2201      	movs	r2, #1
 802d8de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 802d8e0:	2201      	movs	r2, #1
 802d8e2:	6839      	ldr	r1, [r7, #0]
 802d8e4:	6878      	ldr	r0, [r7, #4]
 802d8e6:	f002 f855 	bl	802f994 <USBH_CtlReq>
 802d8ea:	4603      	mov	r3, r0
}
 802d8ec:	4618      	mov	r0, r3
 802d8ee:	3708      	adds	r7, #8
 802d8f0:	46bd      	mov	sp, r7
 802d8f2:	bd80      	pop	{r7, pc}

0802d8f4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 802d8f4:	b480      	push	{r7}
 802d8f6:	b085      	sub	sp, #20
 802d8f8:	af00      	add	r7, sp, #0
 802d8fa:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d8fc:	687b      	ldr	r3, [r7, #4]
 802d8fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d902:	69db      	ldr	r3, [r3, #28]
 802d904:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 802d906:	68fb      	ldr	r3, [r7, #12]
 802d908:	4a09      	ldr	r2, [pc, #36]	; (802d930 <USBH_MSC_BOT_Init+0x3c>)
 802d90a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 802d90c:	68fb      	ldr	r3, [r7, #12]
 802d90e:	4a09      	ldr	r2, [pc, #36]	; (802d934 <USBH_MSC_BOT_Init+0x40>)
 802d910:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 802d912:	68fb      	ldr	r3, [r7, #12]
 802d914:	2201      	movs	r2, #1
 802d916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 802d91a:	68fb      	ldr	r3, [r7, #12]
 802d91c:	2201      	movs	r2, #1
 802d91e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 802d922:	2300      	movs	r3, #0
}
 802d924:	4618      	mov	r0, r3
 802d926:	3714      	adds	r7, #20
 802d928:	46bd      	mov	sp, r7
 802d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d92e:	4770      	bx	lr
 802d930:	43425355 	.word	0x43425355
 802d934:	20304050 	.word	0x20304050

0802d938 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 802d938:	b580      	push	{r7, lr}
 802d93a:	b088      	sub	sp, #32
 802d93c:	af02      	add	r7, sp, #8
 802d93e:	6078      	str	r0, [r7, #4]
 802d940:	460b      	mov	r3, r1
 802d942:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 802d944:	2301      	movs	r3, #1
 802d946:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 802d948:	2301      	movs	r3, #1
 802d94a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 802d94c:	2301      	movs	r3, #1
 802d94e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802d950:	2300      	movs	r3, #0
 802d952:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d954:	687b      	ldr	r3, [r7, #4]
 802d956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d95a:	69db      	ldr	r3, [r3, #28]
 802d95c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 802d95e:	2300      	movs	r3, #0
 802d960:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 802d962:	693b      	ldr	r3, [r7, #16]
 802d964:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802d968:	3b01      	subs	r3, #1
 802d96a:	2b0a      	cmp	r3, #10
 802d96c:	f200 822a 	bhi.w	802ddc4 <USBH_MSC_BOT_Process+0x48c>
 802d970:	a201      	add	r2, pc, #4	; (adr r2, 802d978 <USBH_MSC_BOT_Process+0x40>)
 802d972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d976:	bf00      	nop
 802d978:	0802d9a5 	.word	0x0802d9a5
 802d97c:	0802d9cd 	.word	0x0802d9cd
 802d980:	0802da8b 	.word	0x0802da8b
 802d984:	0802daa9 	.word	0x0802daa9
 802d988:	0802db65 	.word	0x0802db65
 802d98c:	0802db87 	.word	0x0802db87
 802d990:	0802dc73 	.word	0x0802dc73
 802d994:	0802dc8f 	.word	0x0802dc8f
 802d998:	0802dd19 	.word	0x0802dd19
 802d99c:	0802dd49 	.word	0x0802dd49
 802d9a0:	0802ddab 	.word	0x0802ddab
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 802d9a4:	693b      	ldr	r3, [r7, #16]
 802d9a6:	78fa      	ldrb	r2, [r7, #3]
 802d9a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 802d9ac:	693b      	ldr	r3, [r7, #16]
 802d9ae:	2202      	movs	r2, #2
 802d9b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 802d9b4:	693b      	ldr	r3, [r7, #16]
 802d9b6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 802d9ba:	693b      	ldr	r3, [r7, #16]
 802d9bc:	795b      	ldrb	r3, [r3, #5]
 802d9be:	2201      	movs	r2, #1
 802d9c0:	9200      	str	r2, [sp, #0]
 802d9c2:	221f      	movs	r2, #31
 802d9c4:	6878      	ldr	r0, [r7, #4]
 802d9c6:	f002 fae4 	bl	802ff92 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 802d9ca:	e20a      	b.n	802dde2 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 802d9cc:	693b      	ldr	r3, [r7, #16]
 802d9ce:	795b      	ldrb	r3, [r3, #5]
 802d9d0:	4619      	mov	r1, r3
 802d9d2:	6878      	ldr	r0, [r7, #4]
 802d9d4:	f00c f980 	bl	8039cd8 <USBH_LL_GetURBState>
 802d9d8:	4603      	mov	r3, r0
 802d9da:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 802d9dc:	7d3b      	ldrb	r3, [r7, #20]
 802d9de:	2b01      	cmp	r3, #1
 802d9e0:	d126      	bne.n	802da30 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 802d9e2:	693b      	ldr	r3, [r7, #16]
 802d9e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d9e6:	2b00      	cmp	r3, #0
 802d9e8:	d00f      	beq.n	802da0a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 802d9ea:	693b      	ldr	r3, [r7, #16]
 802d9ec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 802d9f0:	b25b      	sxtb	r3, r3
 802d9f2:	2b00      	cmp	r3, #0
 802d9f4:	da04      	bge.n	802da00 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 802d9f6:	693b      	ldr	r3, [r7, #16]
 802d9f8:	2203      	movs	r2, #3
 802d9fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 802d9fe:	e008      	b.n	802da12 <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 802da00:	693b      	ldr	r3, [r7, #16]
 802da02:	2205      	movs	r2, #5
 802da04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 802da08:	e003      	b.n	802da12 <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 802da0a:	693b      	ldr	r3, [r7, #16]
 802da0c:	2207      	movs	r2, #7
 802da0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802da12:	687b      	ldr	r3, [r7, #4]
 802da14:	2202      	movs	r2, #2
 802da16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802da1a:	687b      	ldr	r3, [r7, #4]
 802da1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802da20:	687b      	ldr	r3, [r7, #4]
 802da22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802da26:	2200      	movs	r2, #0
 802da28:	4619      	mov	r1, r3
 802da2a:	f008 fc55 	bl	80362d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802da2e:	e1cb      	b.n	802ddc8 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 802da30:	7d3b      	ldrb	r3, [r7, #20]
 802da32:	2b02      	cmp	r3, #2
 802da34:	d112      	bne.n	802da5c <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 802da36:	693b      	ldr	r3, [r7, #16]
 802da38:	2201      	movs	r2, #1
 802da3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802da3e:	687b      	ldr	r3, [r7, #4]
 802da40:	2202      	movs	r2, #2
 802da42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802da46:	687b      	ldr	r3, [r7, #4]
 802da48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802da4c:	687b      	ldr	r3, [r7, #4]
 802da4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802da52:	2200      	movs	r2, #0
 802da54:	4619      	mov	r1, r3
 802da56:	f008 fc3f 	bl	80362d8 <osMessagePut>
      break;
 802da5a:	e1b5      	b.n	802ddc8 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 802da5c:	7d3b      	ldrb	r3, [r7, #20]
 802da5e:	2b05      	cmp	r3, #5
 802da60:	f040 81b2 	bne.w	802ddc8 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 802da64:	693b      	ldr	r3, [r7, #16]
 802da66:	220a      	movs	r2, #10
 802da68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802da6c:	687b      	ldr	r3, [r7, #4]
 802da6e:	2202      	movs	r2, #2
 802da70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802da74:	687b      	ldr	r3, [r7, #4]
 802da76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802da7a:	687b      	ldr	r3, [r7, #4]
 802da7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802da80:	2200      	movs	r2, #0
 802da82:	4619      	mov	r1, r3
 802da84:	f008 fc28 	bl	80362d8 <osMessagePut>
      break;
 802da88:	e19e      	b.n	802ddc8 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 802da8a:	693b      	ldr	r3, [r7, #16]
 802da8c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 802da90:	693b      	ldr	r3, [r7, #16]
 802da92:	895a      	ldrh	r2, [r3, #10]
 802da94:	693b      	ldr	r3, [r7, #16]
 802da96:	791b      	ldrb	r3, [r3, #4]
 802da98:	6878      	ldr	r0, [r7, #4]
 802da9a:	f002 fa9f 	bl	802ffdc <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 802da9e:	693b      	ldr	r3, [r7, #16]
 802daa0:	2204      	movs	r2, #4
 802daa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 802daa6:	e19c      	b.n	802dde2 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 802daa8:	693b      	ldr	r3, [r7, #16]
 802daaa:	791b      	ldrb	r3, [r3, #4]
 802daac:	4619      	mov	r1, r3
 802daae:	6878      	ldr	r0, [r7, #4]
 802dab0:	f00c f912 	bl	8039cd8 <USBH_LL_GetURBState>
 802dab4:	4603      	mov	r3, r0
 802dab6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 802dab8:	7d3b      	ldrb	r3, [r7, #20]
 802daba:	2b01      	cmp	r3, #1
 802dabc:	d13b      	bne.n	802db36 <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 802dabe:	693b      	ldr	r3, [r7, #16]
 802dac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dac2:	693a      	ldr	r2, [r7, #16]
 802dac4:	8952      	ldrh	r2, [r2, #10]
 802dac6:	4293      	cmp	r3, r2
 802dac8:	d910      	bls.n	802daec <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 802daca:	693b      	ldr	r3, [r7, #16]
 802dacc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dad0:	693a      	ldr	r2, [r7, #16]
 802dad2:	8952      	ldrh	r2, [r2, #10]
 802dad4:	441a      	add	r2, r3
 802dad6:	693b      	ldr	r3, [r7, #16]
 802dad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 802dadc:	693b      	ldr	r3, [r7, #16]
 802dade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dae0:	693a      	ldr	r2, [r7, #16]
 802dae2:	8952      	ldrh	r2, [r2, #10]
 802dae4:	1a9a      	subs	r2, r3, r2
 802dae6:	693b      	ldr	r3, [r7, #16]
 802dae8:	65da      	str	r2, [r3, #92]	; 0x5c
 802daea:	e002      	b.n	802daf2 <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 802daec:	693b      	ldr	r3, [r7, #16]
 802daee:	2200      	movs	r2, #0
 802daf0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 802daf2:	693b      	ldr	r3, [r7, #16]
 802daf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802daf6:	2b00      	cmp	r3, #0
 802daf8:	d00a      	beq.n	802db10 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 802dafa:	693b      	ldr	r3, [r7, #16]
 802dafc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 802db00:	693b      	ldr	r3, [r7, #16]
 802db02:	895a      	ldrh	r2, [r3, #10]
 802db04:	693b      	ldr	r3, [r7, #16]
 802db06:	791b      	ldrb	r3, [r3, #4]
 802db08:	6878      	ldr	r0, [r7, #4]
 802db0a:	f002 fa67 	bl	802ffdc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 802db0e:	e15d      	b.n	802ddcc <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 802db10:	693b      	ldr	r3, [r7, #16]
 802db12:	2207      	movs	r2, #7
 802db14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802db18:	687b      	ldr	r3, [r7, #4]
 802db1a:	2202      	movs	r2, #2
 802db1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802db20:	687b      	ldr	r3, [r7, #4]
 802db22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802db26:	687b      	ldr	r3, [r7, #4]
 802db28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802db2c:	2200      	movs	r2, #0
 802db2e:	4619      	mov	r1, r3
 802db30:	f008 fbd2 	bl	80362d8 <osMessagePut>
      break;
 802db34:	e14a      	b.n	802ddcc <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 802db36:	7d3b      	ldrb	r3, [r7, #20]
 802db38:	2b05      	cmp	r3, #5
 802db3a:	f040 8147 	bne.w	802ddcc <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 802db3e:	693b      	ldr	r3, [r7, #16]
 802db40:	2209      	movs	r2, #9
 802db42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802db46:	687b      	ldr	r3, [r7, #4]
 802db48:	2202      	movs	r2, #2
 802db4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802db4e:	687b      	ldr	r3, [r7, #4]
 802db50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802db54:	687b      	ldr	r3, [r7, #4]
 802db56:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802db5a:	2200      	movs	r2, #0
 802db5c:	4619      	mov	r1, r3
 802db5e:	f008 fbbb 	bl	80362d8 <osMessagePut>
      break;
 802db62:	e133      	b.n	802ddcc <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 802db64:	693b      	ldr	r3, [r7, #16]
 802db66:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 802db6a:	693b      	ldr	r3, [r7, #16]
 802db6c:	891a      	ldrh	r2, [r3, #8]
 802db6e:	693b      	ldr	r3, [r7, #16]
 802db70:	795b      	ldrb	r3, [r3, #5]
 802db72:	2001      	movs	r0, #1
 802db74:	9000      	str	r0, [sp, #0]
 802db76:	6878      	ldr	r0, [r7, #4]
 802db78:	f002 fa0b 	bl	802ff92 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 802db7c:	693b      	ldr	r3, [r7, #16]
 802db7e:	2206      	movs	r2, #6
 802db80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 802db84:	e12d      	b.n	802dde2 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 802db86:	693b      	ldr	r3, [r7, #16]
 802db88:	795b      	ldrb	r3, [r3, #5]
 802db8a:	4619      	mov	r1, r3
 802db8c:	6878      	ldr	r0, [r7, #4]
 802db8e:	f00c f8a3 	bl	8039cd8 <USBH_LL_GetURBState>
 802db92:	4603      	mov	r3, r0
 802db94:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 802db96:	7d3b      	ldrb	r3, [r7, #20]
 802db98:	2b01      	cmp	r3, #1
 802db9a:	d13d      	bne.n	802dc18 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 802db9c:	693b      	ldr	r3, [r7, #16]
 802db9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dba0:	693a      	ldr	r2, [r7, #16]
 802dba2:	8912      	ldrh	r2, [r2, #8]
 802dba4:	4293      	cmp	r3, r2
 802dba6:	d910      	bls.n	802dbca <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 802dba8:	693b      	ldr	r3, [r7, #16]
 802dbaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dbae:	693a      	ldr	r2, [r7, #16]
 802dbb0:	8912      	ldrh	r2, [r2, #8]
 802dbb2:	441a      	add	r2, r3
 802dbb4:	693b      	ldr	r3, [r7, #16]
 802dbb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 802dbba:	693b      	ldr	r3, [r7, #16]
 802dbbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dbbe:	693a      	ldr	r2, [r7, #16]
 802dbc0:	8912      	ldrh	r2, [r2, #8]
 802dbc2:	1a9a      	subs	r2, r3, r2
 802dbc4:	693b      	ldr	r3, [r7, #16]
 802dbc6:	65da      	str	r2, [r3, #92]	; 0x5c
 802dbc8:	e002      	b.n	802dbd0 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 802dbca:	693b      	ldr	r3, [r7, #16]
 802dbcc:	2200      	movs	r2, #0
 802dbce:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 802dbd0:	693b      	ldr	r3, [r7, #16]
 802dbd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dbd4:	2b00      	cmp	r3, #0
 802dbd6:	d00c      	beq.n	802dbf2 <USBH_MSC_BOT_Process+0x2ba>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 802dbd8:	693b      	ldr	r3, [r7, #16]
 802dbda:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 802dbde:	693b      	ldr	r3, [r7, #16]
 802dbe0:	891a      	ldrh	r2, [r3, #8]
 802dbe2:	693b      	ldr	r3, [r7, #16]
 802dbe4:	795b      	ldrb	r3, [r3, #5]
 802dbe6:	2001      	movs	r0, #1
 802dbe8:	9000      	str	r0, [sp, #0]
 802dbea:	6878      	ldr	r0, [r7, #4]
 802dbec:	f002 f9d1 	bl	802ff92 <USBH_BulkSendData>
 802dbf0:	e003      	b.n	802dbfa <USBH_MSC_BOT_Process+0x2c2>
                                  MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 802dbf2:	693b      	ldr	r3, [r7, #16]
 802dbf4:	2207      	movs	r2, #7
 802dbf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802dbfa:	687b      	ldr	r3, [r7, #4]
 802dbfc:	2202      	movs	r2, #2
 802dbfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802dc02:	687b      	ldr	r3, [r7, #4]
 802dc04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802dc08:	687b      	ldr	r3, [r7, #4]
 802dc0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802dc0e:	2200      	movs	r2, #0
 802dc10:	4619      	mov	r1, r3
 802dc12:	f008 fb61 	bl	80362d8 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 802dc16:	e0db      	b.n	802ddd0 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 802dc18:	7d3b      	ldrb	r3, [r7, #20]
 802dc1a:	2b02      	cmp	r3, #2
 802dc1c:	d112      	bne.n	802dc44 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 802dc1e:	693b      	ldr	r3, [r7, #16]
 802dc20:	2205      	movs	r2, #5
 802dc22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802dc26:	687b      	ldr	r3, [r7, #4]
 802dc28:	2202      	movs	r2, #2
 802dc2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802dc2e:	687b      	ldr	r3, [r7, #4]
 802dc30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802dc34:	687b      	ldr	r3, [r7, #4]
 802dc36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802dc3a:	2200      	movs	r2, #0
 802dc3c:	4619      	mov	r1, r3
 802dc3e:	f008 fb4b 	bl	80362d8 <osMessagePut>
      break;
 802dc42:	e0c5      	b.n	802ddd0 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 802dc44:	7d3b      	ldrb	r3, [r7, #20]
 802dc46:	2b05      	cmp	r3, #5
 802dc48:	f040 80c2 	bne.w	802ddd0 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 802dc4c:	693b      	ldr	r3, [r7, #16]
 802dc4e:	220a      	movs	r2, #10
 802dc50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802dc54:	687b      	ldr	r3, [r7, #4]
 802dc56:	2202      	movs	r2, #2
 802dc58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802dc5c:	687b      	ldr	r3, [r7, #4]
 802dc5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802dc62:	687b      	ldr	r3, [r7, #4]
 802dc64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802dc68:	2200      	movs	r2, #0
 802dc6a:	4619      	mov	r1, r3
 802dc6c:	f008 fb34 	bl	80362d8 <osMessagePut>
      break;
 802dc70:	e0ae      	b.n	802ddd0 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 802dc72:	693b      	ldr	r3, [r7, #16]
 802dc74:	f103 0178 	add.w	r1, r3, #120	; 0x78
 802dc78:	693b      	ldr	r3, [r7, #16]
 802dc7a:	791b      	ldrb	r3, [r3, #4]
 802dc7c:	220d      	movs	r2, #13
 802dc7e:	6878      	ldr	r0, [r7, #4]
 802dc80:	f002 f9ac 	bl	802ffdc <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 802dc84:	693b      	ldr	r3, [r7, #16]
 802dc86:	2208      	movs	r2, #8
 802dc88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 802dc8c:	e0a9      	b.n	802dde2 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 802dc8e:	693b      	ldr	r3, [r7, #16]
 802dc90:	791b      	ldrb	r3, [r3, #4]
 802dc92:	4619      	mov	r1, r3
 802dc94:	6878      	ldr	r0, [r7, #4]
 802dc96:	f00c f81f 	bl	8039cd8 <USBH_LL_GetURBState>
 802dc9a:	4603      	mov	r3, r0
 802dc9c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 802dc9e:	7d3b      	ldrb	r3, [r7, #20]
 802dca0:	2b01      	cmp	r3, #1
 802dca2:	d123      	bne.n	802dcec <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 802dca4:	693b      	ldr	r3, [r7, #16]
 802dca6:	2201      	movs	r2, #1
 802dca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 802dcac:	693b      	ldr	r3, [r7, #16]
 802dcae:	2201      	movs	r2, #1
 802dcb0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 802dcb4:	6878      	ldr	r0, [r7, #4]
 802dcb6:	f000 f8c5 	bl	802de44 <USBH_MSC_DecodeCSW>
 802dcba:	4603      	mov	r3, r0
 802dcbc:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 802dcbe:	7d7b      	ldrb	r3, [r7, #21]
 802dcc0:	2b00      	cmp	r3, #0
 802dcc2:	d102      	bne.n	802dcca <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 802dcc4:	2300      	movs	r3, #0
 802dcc6:	75fb      	strb	r3, [r7, #23]
 802dcc8:	e001      	b.n	802dcce <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 802dcca:	2302      	movs	r3, #2
 802dccc:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802dcce:	687b      	ldr	r3, [r7, #4]
 802dcd0:	2202      	movs	r2, #2
 802dcd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802dcd6:	687b      	ldr	r3, [r7, #4]
 802dcd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802dcdc:	687b      	ldr	r3, [r7, #4]
 802dcde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802dce2:	2200      	movs	r2, #0
 802dce4:	4619      	mov	r1, r3
 802dce6:	f008 faf7 	bl	80362d8 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 802dcea:	e073      	b.n	802ddd4 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 802dcec:	7d3b      	ldrb	r3, [r7, #20]
 802dcee:	2b05      	cmp	r3, #5
 802dcf0:	d170      	bne.n	802ddd4 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 802dcf2:	693b      	ldr	r3, [r7, #16]
 802dcf4:	2209      	movs	r2, #9
 802dcf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802dcfa:	687b      	ldr	r3, [r7, #4]
 802dcfc:	2202      	movs	r2, #2
 802dcfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802dd02:	687b      	ldr	r3, [r7, #4]
 802dd04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802dd08:	687b      	ldr	r3, [r7, #4]
 802dd0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802dd0e:	2200      	movs	r2, #0
 802dd10:	4619      	mov	r1, r3
 802dd12:	f008 fae1 	bl	80362d8 <osMessagePut>
      break;
 802dd16:	e05d      	b.n	802ddd4 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 802dd18:	78fb      	ldrb	r3, [r7, #3]
 802dd1a:	2200      	movs	r2, #0
 802dd1c:	4619      	mov	r1, r3
 802dd1e:	6878      	ldr	r0, [r7, #4]
 802dd20:	f000 f864 	bl	802ddec <USBH_MSC_BOT_Abort>
 802dd24:	4603      	mov	r3, r0
 802dd26:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 802dd28:	7dbb      	ldrb	r3, [r7, #22]
 802dd2a:	2b00      	cmp	r3, #0
 802dd2c:	d104      	bne.n	802dd38 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 802dd2e:	693b      	ldr	r3, [r7, #16]
 802dd30:	2207      	movs	r2, #7
 802dd32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 802dd36:	e04f      	b.n	802ddd8 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 802dd38:	7dbb      	ldrb	r3, [r7, #22]
 802dd3a:	2b04      	cmp	r3, #4
 802dd3c:	d14c      	bne.n	802ddd8 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 802dd3e:	693b      	ldr	r3, [r7, #16]
 802dd40:	220b      	movs	r2, #11
 802dd42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 802dd46:	e047      	b.n	802ddd8 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 802dd48:	78fb      	ldrb	r3, [r7, #3]
 802dd4a:	2201      	movs	r2, #1
 802dd4c:	4619      	mov	r1, r3
 802dd4e:	6878      	ldr	r0, [r7, #4]
 802dd50:	f000 f84c 	bl	802ddec <USBH_MSC_BOT_Abort>
 802dd54:	4603      	mov	r3, r0
 802dd56:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 802dd58:	7dbb      	ldrb	r3, [r7, #22]
 802dd5a:	2b00      	cmp	r3, #0
 802dd5c:	d11d      	bne.n	802dd9a <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 802dd5e:	693b      	ldr	r3, [r7, #16]
 802dd60:	795b      	ldrb	r3, [r3, #5]
 802dd62:	4619      	mov	r1, r3
 802dd64:	6878      	ldr	r0, [r7, #4]
 802dd66:	f00c f811 	bl	8039d8c <USBH_LL_GetToggle>
 802dd6a:	4603      	mov	r3, r0
 802dd6c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 802dd6e:	693b      	ldr	r3, [r7, #16]
 802dd70:	7959      	ldrb	r1, [r3, #5]
 802dd72:	7bfb      	ldrb	r3, [r7, #15]
 802dd74:	f1c3 0301 	rsb	r3, r3, #1
 802dd78:	b2db      	uxtb	r3, r3
 802dd7a:	461a      	mov	r2, r3
 802dd7c:	6878      	ldr	r0, [r7, #4]
 802dd7e:	f00b ffd5 	bl	8039d2c <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 802dd82:	693b      	ldr	r3, [r7, #16]
 802dd84:	791b      	ldrb	r3, [r3, #4]
 802dd86:	2200      	movs	r2, #0
 802dd88:	4619      	mov	r1, r3
 802dd8a:	6878      	ldr	r0, [r7, #4]
 802dd8c:	f00b ffce 	bl	8039d2c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 802dd90:	693b      	ldr	r3, [r7, #16]
 802dd92:	2209      	movs	r2, #9
 802dd94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 802dd98:	e020      	b.n	802dddc <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 802dd9a:	7dbb      	ldrb	r3, [r7, #22]
 802dd9c:	2b04      	cmp	r3, #4
 802dd9e:	d11d      	bne.n	802dddc <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 802dda0:	693b      	ldr	r3, [r7, #16]
 802dda2:	220b      	movs	r2, #11
 802dda4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 802dda8:	e018      	b.n	802dddc <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 802ddaa:	6878      	ldr	r0, [r7, #4]
 802ddac:	f7ff fd67 	bl	802d87e <USBH_MSC_BOT_REQ_Reset>
 802ddb0:	4603      	mov	r3, r0
 802ddb2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 802ddb4:	7dfb      	ldrb	r3, [r7, #23]
 802ddb6:	2b00      	cmp	r3, #0
 802ddb8:	d112      	bne.n	802dde0 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 802ddba:	693b      	ldr	r3, [r7, #16]
 802ddbc:	2201      	movs	r2, #1
 802ddbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 802ddc2:	e00d      	b.n	802dde0 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 802ddc4:	bf00      	nop
 802ddc6:	e00c      	b.n	802dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802ddc8:	bf00      	nop
 802ddca:	e00a      	b.n	802dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802ddcc:	bf00      	nop
 802ddce:	e008      	b.n	802dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802ddd0:	bf00      	nop
 802ddd2:	e006      	b.n	802dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802ddd4:	bf00      	nop
 802ddd6:	e004      	b.n	802dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802ddd8:	bf00      	nop
 802ddda:	e002      	b.n	802dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802dddc:	bf00      	nop
 802ddde:	e000      	b.n	802dde2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802dde0:	bf00      	nop
  }
  return status;
 802dde2:	7dfb      	ldrb	r3, [r7, #23]
}
 802dde4:	4618      	mov	r0, r3
 802dde6:	3718      	adds	r7, #24
 802dde8:	46bd      	mov	sp, r7
 802ddea:	bd80      	pop	{r7, pc}

0802ddec <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 802ddec:	b580      	push	{r7, lr}
 802ddee:	b084      	sub	sp, #16
 802ddf0:	af00      	add	r7, sp, #0
 802ddf2:	6078      	str	r0, [r7, #4]
 802ddf4:	460b      	mov	r3, r1
 802ddf6:	70fb      	strb	r3, [r7, #3]
 802ddf8:	4613      	mov	r3, r2
 802ddfa:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 802ddfc:	2302      	movs	r3, #2
 802ddfe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802de00:	687b      	ldr	r3, [r7, #4]
 802de02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802de06:	69db      	ldr	r3, [r3, #28]
 802de08:	60bb      	str	r3, [r7, #8]

  switch (dir)
 802de0a:	78bb      	ldrb	r3, [r7, #2]
 802de0c:	2b00      	cmp	r3, #0
 802de0e:	d002      	beq.n	802de16 <USBH_MSC_BOT_Abort+0x2a>
 802de10:	2b01      	cmp	r3, #1
 802de12:	d009      	beq.n	802de28 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 802de14:	e011      	b.n	802de3a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 802de16:	68bb      	ldr	r3, [r7, #8]
 802de18:	79db      	ldrb	r3, [r3, #7]
 802de1a:	4619      	mov	r1, r3
 802de1c:	6878      	ldr	r0, [r7, #4]
 802de1e:	f001 faea 	bl	802f3f6 <USBH_ClrFeature>
 802de22:	4603      	mov	r3, r0
 802de24:	73fb      	strb	r3, [r7, #15]
      break;
 802de26:	e008      	b.n	802de3a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 802de28:	68bb      	ldr	r3, [r7, #8]
 802de2a:	799b      	ldrb	r3, [r3, #6]
 802de2c:	4619      	mov	r1, r3
 802de2e:	6878      	ldr	r0, [r7, #4]
 802de30:	f001 fae1 	bl	802f3f6 <USBH_ClrFeature>
 802de34:	4603      	mov	r3, r0
 802de36:	73fb      	strb	r3, [r7, #15]
      break;
 802de38:	bf00      	nop
  }
  return status;
 802de3a:	7bfb      	ldrb	r3, [r7, #15]
}
 802de3c:	4618      	mov	r0, r3
 802de3e:	3710      	adds	r7, #16
 802de40:	46bd      	mov	sp, r7
 802de42:	bd80      	pop	{r7, pc}

0802de44 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 802de44:	b580      	push	{r7, lr}
 802de46:	b084      	sub	sp, #16
 802de48:	af00      	add	r7, sp, #0
 802de4a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802de4c:	687b      	ldr	r3, [r7, #4]
 802de4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802de52:	69db      	ldr	r3, [r3, #28]
 802de54:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 802de56:	2301      	movs	r3, #1
 802de58:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 802de5a:	68bb      	ldr	r3, [r7, #8]
 802de5c:	791b      	ldrb	r3, [r3, #4]
 802de5e:	4619      	mov	r1, r3
 802de60:	6878      	ldr	r0, [r7, #4]
 802de62:	f00b fea7 	bl	8039bb4 <USBH_LL_GetLastXferSize>
 802de66:	4603      	mov	r3, r0
 802de68:	2b0d      	cmp	r3, #13
 802de6a:	d002      	beq.n	802de72 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 802de6c:	2302      	movs	r3, #2
 802de6e:	73fb      	strb	r3, [r7, #15]
 802de70:	e024      	b.n	802debc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 802de72:	68bb      	ldr	r3, [r7, #8]
 802de74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802de76:	4a14      	ldr	r2, [pc, #80]	; (802dec8 <USBH_MSC_DecodeCSW+0x84>)
 802de78:	4293      	cmp	r3, r2
 802de7a:	d11d      	bne.n	802deb8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 802de7c:	68bb      	ldr	r3, [r7, #8]
 802de7e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 802de80:	68bb      	ldr	r3, [r7, #8]
 802de82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802de84:	429a      	cmp	r2, r3
 802de86:	d119      	bne.n	802debc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 802de88:	68bb      	ldr	r3, [r7, #8]
 802de8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802de8e:	2b00      	cmp	r3, #0
 802de90:	d102      	bne.n	802de98 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 802de92:	2300      	movs	r3, #0
 802de94:	73fb      	strb	r3, [r7, #15]
 802de96:	e011      	b.n	802debc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 802de98:	68bb      	ldr	r3, [r7, #8]
 802de9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802de9e:	2b01      	cmp	r3, #1
 802dea0:	d102      	bne.n	802dea8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 802dea2:	2301      	movs	r3, #1
 802dea4:	73fb      	strb	r3, [r7, #15]
 802dea6:	e009      	b.n	802debc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 802dea8:	68bb      	ldr	r3, [r7, #8]
 802deaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802deae:	2b02      	cmp	r3, #2
 802deb0:	d104      	bne.n	802debc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 802deb2:	2302      	movs	r3, #2
 802deb4:	73fb      	strb	r3, [r7, #15]
 802deb6:	e001      	b.n	802debc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 802deb8:	2302      	movs	r3, #2
 802deba:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 802debc:	7bfb      	ldrb	r3, [r7, #15]
}
 802debe:	4618      	mov	r0, r3
 802dec0:	3710      	adds	r7, #16
 802dec2:	46bd      	mov	sp, r7
 802dec4:	bd80      	pop	{r7, pc}
 802dec6:	bf00      	nop
 802dec8:	53425355 	.word	0x53425355

0802decc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 802decc:	b580      	push	{r7, lr}
 802dece:	b084      	sub	sp, #16
 802ded0:	af00      	add	r7, sp, #0
 802ded2:	6078      	str	r0, [r7, #4]
 802ded4:	460b      	mov	r3, r1
 802ded6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 802ded8:	2302      	movs	r3, #2
 802deda:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802dedc:	687b      	ldr	r3, [r7, #4]
 802dede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802dee2:	69db      	ldr	r3, [r3, #28]
 802dee4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 802dee6:	68bb      	ldr	r3, [r7, #8]
 802dee8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 802deec:	2b01      	cmp	r3, #1
 802deee:	d002      	beq.n	802def6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 802def0:	2b02      	cmp	r3, #2
 802def2:	d021      	beq.n	802df38 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 802def4:	e028      	b.n	802df48 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 802def6:	68bb      	ldr	r3, [r7, #8]
 802def8:	2200      	movs	r2, #0
 802defa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 802defc:	68bb      	ldr	r3, [r7, #8]
 802defe:	2200      	movs	r2, #0
 802df00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802df04:	68bb      	ldr	r3, [r7, #8]
 802df06:	220a      	movs	r2, #10
 802df08:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 802df0c:	68bb      	ldr	r3, [r7, #8]
 802df0e:	3363      	adds	r3, #99	; 0x63
 802df10:	2210      	movs	r2, #16
 802df12:	2100      	movs	r1, #0
 802df14:	4618      	mov	r0, r3
 802df16:	f00c f805 	bl	8039f24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 802df1a:	68bb      	ldr	r3, [r7, #8]
 802df1c:	2200      	movs	r2, #0
 802df1e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802df22:	68bb      	ldr	r3, [r7, #8]
 802df24:	2201      	movs	r2, #1
 802df26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802df2a:	68bb      	ldr	r3, [r7, #8]
 802df2c:	2202      	movs	r2, #2
 802df2e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 802df32:	2301      	movs	r3, #1
 802df34:	73fb      	strb	r3, [r7, #15]
      break;
 802df36:	e007      	b.n	802df48 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 802df38:	78fb      	ldrb	r3, [r7, #3]
 802df3a:	4619      	mov	r1, r3
 802df3c:	6878      	ldr	r0, [r7, #4]
 802df3e:	f7ff fcfb 	bl	802d938 <USBH_MSC_BOT_Process>
 802df42:	4603      	mov	r3, r0
 802df44:	73fb      	strb	r3, [r7, #15]
      break;
 802df46:	bf00      	nop
  }

  return error;
 802df48:	7bfb      	ldrb	r3, [r7, #15]
}
 802df4a:	4618      	mov	r0, r3
 802df4c:	3710      	adds	r7, #16
 802df4e:	46bd      	mov	sp, r7
 802df50:	bd80      	pop	{r7, pc}

0802df52 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 802df52:	b580      	push	{r7, lr}
 802df54:	b086      	sub	sp, #24
 802df56:	af00      	add	r7, sp, #0
 802df58:	60f8      	str	r0, [r7, #12]
 802df5a:	460b      	mov	r3, r1
 802df5c:	607a      	str	r2, [r7, #4]
 802df5e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 802df60:	2301      	movs	r3, #1
 802df62:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802df64:	68fb      	ldr	r3, [r7, #12]
 802df66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802df6a:	69db      	ldr	r3, [r3, #28]
 802df6c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 802df6e:	693b      	ldr	r3, [r7, #16]
 802df70:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 802df74:	2b01      	cmp	r3, #1
 802df76:	d002      	beq.n	802df7e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 802df78:	2b02      	cmp	r3, #2
 802df7a:	d027      	beq.n	802dfcc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 802df7c:	e05f      	b.n	802e03e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 802df7e:	693b      	ldr	r3, [r7, #16]
 802df80:	2208      	movs	r2, #8
 802df82:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 802df84:	693b      	ldr	r3, [r7, #16]
 802df86:	2280      	movs	r2, #128	; 0x80
 802df88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802df8c:	693b      	ldr	r3, [r7, #16]
 802df8e:	220a      	movs	r2, #10
 802df90:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 802df94:	693b      	ldr	r3, [r7, #16]
 802df96:	3363      	adds	r3, #99	; 0x63
 802df98:	2210      	movs	r2, #16
 802df9a:	2100      	movs	r1, #0
 802df9c:	4618      	mov	r0, r3
 802df9e:	f00b ffc1 	bl	8039f24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 802dfa2:	693b      	ldr	r3, [r7, #16]
 802dfa4:	2225      	movs	r2, #37	; 0x25
 802dfa6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802dfaa:	693b      	ldr	r3, [r7, #16]
 802dfac:	2201      	movs	r2, #1
 802dfae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802dfb2:	693b      	ldr	r3, [r7, #16]
 802dfb4:	2202      	movs	r2, #2
 802dfb6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 802dfba:	693b      	ldr	r3, [r7, #16]
 802dfbc:	f103 0210 	add.w	r2, r3, #16
 802dfc0:	693b      	ldr	r3, [r7, #16]
 802dfc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 802dfc6:	2301      	movs	r3, #1
 802dfc8:	75fb      	strb	r3, [r7, #23]
      break;
 802dfca:	e038      	b.n	802e03e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 802dfcc:	7afb      	ldrb	r3, [r7, #11]
 802dfce:	4619      	mov	r1, r3
 802dfd0:	68f8      	ldr	r0, [r7, #12]
 802dfd2:	f7ff fcb1 	bl	802d938 <USBH_MSC_BOT_Process>
 802dfd6:	4603      	mov	r3, r0
 802dfd8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 802dfda:	7dfb      	ldrb	r3, [r7, #23]
 802dfdc:	2b00      	cmp	r3, #0
 802dfde:	d12d      	bne.n	802e03c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 802dfe0:	693b      	ldr	r3, [r7, #16]
 802dfe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dfe6:	3303      	adds	r3, #3
 802dfe8:	781b      	ldrb	r3, [r3, #0]
 802dfea:	461a      	mov	r2, r3
 802dfec:	693b      	ldr	r3, [r7, #16]
 802dfee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dff2:	3302      	adds	r3, #2
 802dff4:	781b      	ldrb	r3, [r3, #0]
 802dff6:	021b      	lsls	r3, r3, #8
 802dff8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 802dffa:	693b      	ldr	r3, [r7, #16]
 802dffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e000:	3301      	adds	r3, #1
 802e002:	781b      	ldrb	r3, [r3, #0]
 802e004:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 802e006:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 802e008:	693b      	ldr	r3, [r7, #16]
 802e00a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e00e:	781b      	ldrb	r3, [r3, #0]
 802e010:	061b      	lsls	r3, r3, #24
 802e012:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 802e014:	687b      	ldr	r3, [r7, #4]
 802e016:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 802e018:	693b      	ldr	r3, [r7, #16]
 802e01a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e01e:	3307      	adds	r3, #7
 802e020:	781b      	ldrb	r3, [r3, #0]
 802e022:	b29a      	uxth	r2, r3
 802e024:	693b      	ldr	r3, [r7, #16]
 802e026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e02a:	3306      	adds	r3, #6
 802e02c:	781b      	ldrb	r3, [r3, #0]
 802e02e:	b29b      	uxth	r3, r3
 802e030:	021b      	lsls	r3, r3, #8
 802e032:	b29b      	uxth	r3, r3
 802e034:	4313      	orrs	r3, r2
 802e036:	b29a      	uxth	r2, r3
 802e038:	687b      	ldr	r3, [r7, #4]
 802e03a:	809a      	strh	r2, [r3, #4]
      break;
 802e03c:	bf00      	nop
  }

  return error;
 802e03e:	7dfb      	ldrb	r3, [r7, #23]
}
 802e040:	4618      	mov	r0, r3
 802e042:	3718      	adds	r7, #24
 802e044:	46bd      	mov	sp, r7
 802e046:	bd80      	pop	{r7, pc}

0802e048 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 802e048:	b580      	push	{r7, lr}
 802e04a:	b086      	sub	sp, #24
 802e04c:	af00      	add	r7, sp, #0
 802e04e:	60f8      	str	r0, [r7, #12]
 802e050:	460b      	mov	r3, r1
 802e052:	607a      	str	r2, [r7, #4]
 802e054:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 802e056:	2302      	movs	r3, #2
 802e058:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802e05a:	68fb      	ldr	r3, [r7, #12]
 802e05c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802e060:	69db      	ldr	r3, [r3, #28]
 802e062:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 802e064:	693b      	ldr	r3, [r7, #16]
 802e066:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 802e06a:	2b01      	cmp	r3, #1
 802e06c:	d002      	beq.n	802e074 <USBH_MSC_SCSI_Inquiry+0x2c>
 802e06e:	2b02      	cmp	r3, #2
 802e070:	d03d      	beq.n	802e0ee <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 802e072:	e089      	b.n	802e188 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 802e074:	693b      	ldr	r3, [r7, #16]
 802e076:	2224      	movs	r2, #36	; 0x24
 802e078:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 802e07a:	693b      	ldr	r3, [r7, #16]
 802e07c:	2280      	movs	r2, #128	; 0x80
 802e07e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802e082:	693b      	ldr	r3, [r7, #16]
 802e084:	220a      	movs	r2, #10
 802e086:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 802e08a:	693b      	ldr	r3, [r7, #16]
 802e08c:	3363      	adds	r3, #99	; 0x63
 802e08e:	220a      	movs	r2, #10
 802e090:	2100      	movs	r1, #0
 802e092:	4618      	mov	r0, r3
 802e094:	f00b ff46 	bl	8039f24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 802e098:	693b      	ldr	r3, [r7, #16]
 802e09a:	2212      	movs	r2, #18
 802e09c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 802e0a0:	7afb      	ldrb	r3, [r7, #11]
 802e0a2:	015b      	lsls	r3, r3, #5
 802e0a4:	b2da      	uxtb	r2, r3
 802e0a6:	693b      	ldr	r3, [r7, #16]
 802e0a8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 802e0ac:	693b      	ldr	r3, [r7, #16]
 802e0ae:	2200      	movs	r2, #0
 802e0b0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 802e0b4:	693b      	ldr	r3, [r7, #16]
 802e0b6:	2200      	movs	r2, #0
 802e0b8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 802e0bc:	693b      	ldr	r3, [r7, #16]
 802e0be:	2224      	movs	r2, #36	; 0x24
 802e0c0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 802e0c4:	693b      	ldr	r3, [r7, #16]
 802e0c6:	2200      	movs	r2, #0
 802e0c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802e0cc:	693b      	ldr	r3, [r7, #16]
 802e0ce:	2201      	movs	r2, #1
 802e0d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802e0d4:	693b      	ldr	r3, [r7, #16]
 802e0d6:	2202      	movs	r2, #2
 802e0d8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 802e0dc:	693b      	ldr	r3, [r7, #16]
 802e0de:	f103 0210 	add.w	r2, r3, #16
 802e0e2:	693b      	ldr	r3, [r7, #16]
 802e0e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 802e0e8:	2301      	movs	r3, #1
 802e0ea:	75fb      	strb	r3, [r7, #23]
      break;
 802e0ec:	e04c      	b.n	802e188 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 802e0ee:	7afb      	ldrb	r3, [r7, #11]
 802e0f0:	4619      	mov	r1, r3
 802e0f2:	68f8      	ldr	r0, [r7, #12]
 802e0f4:	f7ff fc20 	bl	802d938 <USBH_MSC_BOT_Process>
 802e0f8:	4603      	mov	r3, r0
 802e0fa:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 802e0fc:	7dfb      	ldrb	r3, [r7, #23]
 802e0fe:	2b00      	cmp	r3, #0
 802e100:	d141      	bne.n	802e186 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 802e102:	2222      	movs	r2, #34	; 0x22
 802e104:	2100      	movs	r1, #0
 802e106:	6878      	ldr	r0, [r7, #4]
 802e108:	f00b ff0c 	bl	8039f24 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 802e10c:	693b      	ldr	r3, [r7, #16]
 802e10e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e112:	781b      	ldrb	r3, [r3, #0]
 802e114:	f003 031f 	and.w	r3, r3, #31
 802e118:	b2da      	uxtb	r2, r3
 802e11a:	687b      	ldr	r3, [r7, #4]
 802e11c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 802e11e:	693b      	ldr	r3, [r7, #16]
 802e120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e124:	781b      	ldrb	r3, [r3, #0]
 802e126:	095b      	lsrs	r3, r3, #5
 802e128:	b2da      	uxtb	r2, r3
 802e12a:	687b      	ldr	r3, [r7, #4]
 802e12c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 802e12e:	693b      	ldr	r3, [r7, #16]
 802e130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e134:	3301      	adds	r3, #1
 802e136:	781b      	ldrb	r3, [r3, #0]
 802e138:	b25b      	sxtb	r3, r3
 802e13a:	2b00      	cmp	r3, #0
 802e13c:	da03      	bge.n	802e146 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 802e13e:	687b      	ldr	r3, [r7, #4]
 802e140:	2201      	movs	r2, #1
 802e142:	709a      	strb	r2, [r3, #2]
 802e144:	e002      	b.n	802e14c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 802e146:	687b      	ldr	r3, [r7, #4]
 802e148:	2200      	movs	r2, #0
 802e14a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 802e14c:	687b      	ldr	r3, [r7, #4]
 802e14e:	1cd8      	adds	r0, r3, #3
 802e150:	693b      	ldr	r3, [r7, #16]
 802e152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e156:	3308      	adds	r3, #8
 802e158:	2208      	movs	r2, #8
 802e15a:	4619      	mov	r1, r3
 802e15c:	f00b fed4 	bl	8039f08 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 802e160:	687b      	ldr	r3, [r7, #4]
 802e162:	f103 000c 	add.w	r0, r3, #12
 802e166:	693b      	ldr	r3, [r7, #16]
 802e168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e16c:	3310      	adds	r3, #16
 802e16e:	2210      	movs	r2, #16
 802e170:	4619      	mov	r1, r3
 802e172:	f00b fec9 	bl	8039f08 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 802e176:	687b      	ldr	r3, [r7, #4]
 802e178:	331d      	adds	r3, #29
 802e17a:	693a      	ldr	r2, [r7, #16]
 802e17c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 802e180:	3220      	adds	r2, #32
 802e182:	6812      	ldr	r2, [r2, #0]
 802e184:	601a      	str	r2, [r3, #0]
      break;
 802e186:	bf00      	nop
  }

  return error;
 802e188:	7dfb      	ldrb	r3, [r7, #23]
}
 802e18a:	4618      	mov	r0, r3
 802e18c:	3718      	adds	r7, #24
 802e18e:	46bd      	mov	sp, r7
 802e190:	bd80      	pop	{r7, pc}

0802e192 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 802e192:	b580      	push	{r7, lr}
 802e194:	b086      	sub	sp, #24
 802e196:	af00      	add	r7, sp, #0
 802e198:	60f8      	str	r0, [r7, #12]
 802e19a:	460b      	mov	r3, r1
 802e19c:	607a      	str	r2, [r7, #4]
 802e19e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 802e1a0:	2302      	movs	r3, #2
 802e1a2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802e1a4:	68fb      	ldr	r3, [r7, #12]
 802e1a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802e1aa:	69db      	ldr	r3, [r3, #28]
 802e1ac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 802e1ae:	693b      	ldr	r3, [r7, #16]
 802e1b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 802e1b4:	2b01      	cmp	r3, #1
 802e1b6:	d002      	beq.n	802e1be <USBH_MSC_SCSI_RequestSense+0x2c>
 802e1b8:	2b02      	cmp	r3, #2
 802e1ba:	d03d      	beq.n	802e238 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 802e1bc:	e05d      	b.n	802e27a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 802e1be:	693b      	ldr	r3, [r7, #16]
 802e1c0:	220e      	movs	r2, #14
 802e1c2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 802e1c4:	693b      	ldr	r3, [r7, #16]
 802e1c6:	2280      	movs	r2, #128	; 0x80
 802e1c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802e1cc:	693b      	ldr	r3, [r7, #16]
 802e1ce:	220a      	movs	r2, #10
 802e1d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 802e1d4:	693b      	ldr	r3, [r7, #16]
 802e1d6:	3363      	adds	r3, #99	; 0x63
 802e1d8:	2210      	movs	r2, #16
 802e1da:	2100      	movs	r1, #0
 802e1dc:	4618      	mov	r0, r3
 802e1de:	f00b fea1 	bl	8039f24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 802e1e2:	693b      	ldr	r3, [r7, #16]
 802e1e4:	2203      	movs	r2, #3
 802e1e6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 802e1ea:	7afb      	ldrb	r3, [r7, #11]
 802e1ec:	015b      	lsls	r3, r3, #5
 802e1ee:	b2da      	uxtb	r2, r3
 802e1f0:	693b      	ldr	r3, [r7, #16]
 802e1f2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 802e1f6:	693b      	ldr	r3, [r7, #16]
 802e1f8:	2200      	movs	r2, #0
 802e1fa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 802e1fe:	693b      	ldr	r3, [r7, #16]
 802e200:	2200      	movs	r2, #0
 802e202:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 802e206:	693b      	ldr	r3, [r7, #16]
 802e208:	220e      	movs	r2, #14
 802e20a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 802e20e:	693b      	ldr	r3, [r7, #16]
 802e210:	2200      	movs	r2, #0
 802e212:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802e216:	693b      	ldr	r3, [r7, #16]
 802e218:	2201      	movs	r2, #1
 802e21a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802e21e:	693b      	ldr	r3, [r7, #16]
 802e220:	2202      	movs	r2, #2
 802e222:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 802e226:	693b      	ldr	r3, [r7, #16]
 802e228:	f103 0210 	add.w	r2, r3, #16
 802e22c:	693b      	ldr	r3, [r7, #16]
 802e22e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 802e232:	2301      	movs	r3, #1
 802e234:	75fb      	strb	r3, [r7, #23]
      break;
 802e236:	e020      	b.n	802e27a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 802e238:	7afb      	ldrb	r3, [r7, #11]
 802e23a:	4619      	mov	r1, r3
 802e23c:	68f8      	ldr	r0, [r7, #12]
 802e23e:	f7ff fb7b 	bl	802d938 <USBH_MSC_BOT_Process>
 802e242:	4603      	mov	r3, r0
 802e244:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 802e246:	7dfb      	ldrb	r3, [r7, #23]
 802e248:	2b00      	cmp	r3, #0
 802e24a:	d115      	bne.n	802e278 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 802e24c:	693b      	ldr	r3, [r7, #16]
 802e24e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e252:	3302      	adds	r3, #2
 802e254:	781b      	ldrb	r3, [r3, #0]
 802e256:	f003 030f 	and.w	r3, r3, #15
 802e25a:	b2da      	uxtb	r2, r3
 802e25c:	687b      	ldr	r3, [r7, #4]
 802e25e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 802e260:	693b      	ldr	r3, [r7, #16]
 802e262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e266:	7b1a      	ldrb	r2, [r3, #12]
 802e268:	687b      	ldr	r3, [r7, #4]
 802e26a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 802e26c:	693b      	ldr	r3, [r7, #16]
 802e26e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e272:	7b5a      	ldrb	r2, [r3, #13]
 802e274:	687b      	ldr	r3, [r7, #4]
 802e276:	709a      	strb	r2, [r3, #2]
      break;
 802e278:	bf00      	nop
  }

  return error;
 802e27a:	7dfb      	ldrb	r3, [r7, #23]
}
 802e27c:	4618      	mov	r0, r3
 802e27e:	3718      	adds	r7, #24
 802e280:	46bd      	mov	sp, r7
 802e282:	bd80      	pop	{r7, pc}

0802e284 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 802e284:	b580      	push	{r7, lr}
 802e286:	b086      	sub	sp, #24
 802e288:	af00      	add	r7, sp, #0
 802e28a:	60f8      	str	r0, [r7, #12]
 802e28c:	607a      	str	r2, [r7, #4]
 802e28e:	603b      	str	r3, [r7, #0]
 802e290:	460b      	mov	r3, r1
 802e292:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 802e294:	2302      	movs	r3, #2
 802e296:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802e298:	68fb      	ldr	r3, [r7, #12]
 802e29a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802e29e:	69db      	ldr	r3, [r3, #28]
 802e2a0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 802e2a2:	693b      	ldr	r3, [r7, #16]
 802e2a4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 802e2a8:	2b01      	cmp	r3, #1
 802e2aa:	d002      	beq.n	802e2b2 <USBH_MSC_SCSI_Write+0x2e>
 802e2ac:	2b02      	cmp	r3, #2
 802e2ae:	d047      	beq.n	802e340 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 802e2b0:	e04e      	b.n	802e350 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 802e2b2:	693b      	ldr	r3, [r7, #16]
 802e2b4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 802e2b8:	461a      	mov	r2, r3
 802e2ba:	6a3b      	ldr	r3, [r7, #32]
 802e2bc:	fb03 f202 	mul.w	r2, r3, r2
 802e2c0:	693b      	ldr	r3, [r7, #16]
 802e2c2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 802e2c4:	693b      	ldr	r3, [r7, #16]
 802e2c6:	2200      	movs	r2, #0
 802e2c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802e2cc:	693b      	ldr	r3, [r7, #16]
 802e2ce:	220a      	movs	r2, #10
 802e2d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 802e2d4:	693b      	ldr	r3, [r7, #16]
 802e2d6:	3363      	adds	r3, #99	; 0x63
 802e2d8:	2210      	movs	r2, #16
 802e2da:	2100      	movs	r1, #0
 802e2dc:	4618      	mov	r0, r3
 802e2de:	f00b fe21 	bl	8039f24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 802e2e2:	693b      	ldr	r3, [r7, #16]
 802e2e4:	222a      	movs	r2, #42	; 0x2a
 802e2e6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 802e2ea:	79fa      	ldrb	r2, [r7, #7]
 802e2ec:	693b      	ldr	r3, [r7, #16]
 802e2ee:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 802e2f2:	79ba      	ldrb	r2, [r7, #6]
 802e2f4:	693b      	ldr	r3, [r7, #16]
 802e2f6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 802e2fa:	797a      	ldrb	r2, [r7, #5]
 802e2fc:	693b      	ldr	r3, [r7, #16]
 802e2fe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 802e302:	1d3b      	adds	r3, r7, #4
 802e304:	781a      	ldrb	r2, [r3, #0]
 802e306:	693b      	ldr	r3, [r7, #16]
 802e308:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 802e30c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 802e310:	693b      	ldr	r3, [r7, #16]
 802e312:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 802e316:	f107 0320 	add.w	r3, r7, #32
 802e31a:	781a      	ldrb	r2, [r3, #0]
 802e31c:	693b      	ldr	r3, [r7, #16]
 802e31e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802e322:	693b      	ldr	r3, [r7, #16]
 802e324:	2201      	movs	r2, #1
 802e326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802e32a:	693b      	ldr	r3, [r7, #16]
 802e32c:	2202      	movs	r2, #2
 802e32e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 802e332:	693b      	ldr	r3, [r7, #16]
 802e334:	683a      	ldr	r2, [r7, #0]
 802e336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 802e33a:	2301      	movs	r3, #1
 802e33c:	75fb      	strb	r3, [r7, #23]
      break;
 802e33e:	e007      	b.n	802e350 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 802e340:	7afb      	ldrb	r3, [r7, #11]
 802e342:	4619      	mov	r1, r3
 802e344:	68f8      	ldr	r0, [r7, #12]
 802e346:	f7ff faf7 	bl	802d938 <USBH_MSC_BOT_Process>
 802e34a:	4603      	mov	r3, r0
 802e34c:	75fb      	strb	r3, [r7, #23]
      break;
 802e34e:	bf00      	nop
  }

  return error;
 802e350:	7dfb      	ldrb	r3, [r7, #23]
}
 802e352:	4618      	mov	r0, r3
 802e354:	3718      	adds	r7, #24
 802e356:	46bd      	mov	sp, r7
 802e358:	bd80      	pop	{r7, pc}

0802e35a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 802e35a:	b580      	push	{r7, lr}
 802e35c:	b086      	sub	sp, #24
 802e35e:	af00      	add	r7, sp, #0
 802e360:	60f8      	str	r0, [r7, #12]
 802e362:	607a      	str	r2, [r7, #4]
 802e364:	603b      	str	r3, [r7, #0]
 802e366:	460b      	mov	r3, r1
 802e368:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 802e36a:	2302      	movs	r3, #2
 802e36c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802e36e:	68fb      	ldr	r3, [r7, #12]
 802e370:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802e374:	69db      	ldr	r3, [r3, #28]
 802e376:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 802e378:	693b      	ldr	r3, [r7, #16]
 802e37a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 802e37e:	2b01      	cmp	r3, #1
 802e380:	d002      	beq.n	802e388 <USBH_MSC_SCSI_Read+0x2e>
 802e382:	2b02      	cmp	r3, #2
 802e384:	d047      	beq.n	802e416 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 802e386:	e04e      	b.n	802e426 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 802e388:	693b      	ldr	r3, [r7, #16]
 802e38a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 802e38e:	461a      	mov	r2, r3
 802e390:	6a3b      	ldr	r3, [r7, #32]
 802e392:	fb03 f202 	mul.w	r2, r3, r2
 802e396:	693b      	ldr	r3, [r7, #16]
 802e398:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 802e39a:	693b      	ldr	r3, [r7, #16]
 802e39c:	2280      	movs	r2, #128	; 0x80
 802e39e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802e3a2:	693b      	ldr	r3, [r7, #16]
 802e3a4:	220a      	movs	r2, #10
 802e3a6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 802e3aa:	693b      	ldr	r3, [r7, #16]
 802e3ac:	3363      	adds	r3, #99	; 0x63
 802e3ae:	2210      	movs	r2, #16
 802e3b0:	2100      	movs	r1, #0
 802e3b2:	4618      	mov	r0, r3
 802e3b4:	f00b fdb6 	bl	8039f24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 802e3b8:	693b      	ldr	r3, [r7, #16]
 802e3ba:	2228      	movs	r2, #40	; 0x28
 802e3bc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 802e3c0:	79fa      	ldrb	r2, [r7, #7]
 802e3c2:	693b      	ldr	r3, [r7, #16]
 802e3c4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 802e3c8:	79ba      	ldrb	r2, [r7, #6]
 802e3ca:	693b      	ldr	r3, [r7, #16]
 802e3cc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 802e3d0:	797a      	ldrb	r2, [r7, #5]
 802e3d2:	693b      	ldr	r3, [r7, #16]
 802e3d4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 802e3d8:	1d3b      	adds	r3, r7, #4
 802e3da:	781a      	ldrb	r2, [r3, #0]
 802e3dc:	693b      	ldr	r3, [r7, #16]
 802e3de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 802e3e2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 802e3e6:	693b      	ldr	r3, [r7, #16]
 802e3e8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 802e3ec:	f107 0320 	add.w	r3, r7, #32
 802e3f0:	781a      	ldrb	r2, [r3, #0]
 802e3f2:	693b      	ldr	r3, [r7, #16]
 802e3f4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802e3f8:	693b      	ldr	r3, [r7, #16]
 802e3fa:	2201      	movs	r2, #1
 802e3fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802e400:	693b      	ldr	r3, [r7, #16]
 802e402:	2202      	movs	r2, #2
 802e404:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 802e408:	693b      	ldr	r3, [r7, #16]
 802e40a:	683a      	ldr	r2, [r7, #0]
 802e40c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 802e410:	2301      	movs	r3, #1
 802e412:	75fb      	strb	r3, [r7, #23]
      break;
 802e414:	e007      	b.n	802e426 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 802e416:	7afb      	ldrb	r3, [r7, #11]
 802e418:	4619      	mov	r1, r3
 802e41a:	68f8      	ldr	r0, [r7, #12]
 802e41c:	f7ff fa8c 	bl	802d938 <USBH_MSC_BOT_Process>
 802e420:	4603      	mov	r3, r0
 802e422:	75fb      	strb	r3, [r7, #23]
      break;
 802e424:	bf00      	nop
  }

  return error;
 802e426:	7dfb      	ldrb	r3, [r7, #23]
}
 802e428:	4618      	mov	r0, r3
 802e42a:	3718      	adds	r7, #24
 802e42c:	46bd      	mov	sp, r7
 802e42e:	bd80      	pop	{r7, pc}

0802e430 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 802e430:	b5b0      	push	{r4, r5, r7, lr}
 802e432:	b090      	sub	sp, #64	; 0x40
 802e434:	af00      	add	r7, sp, #0
 802e436:	60f8      	str	r0, [r7, #12]
 802e438:	60b9      	str	r1, [r7, #8]
 802e43a:	4613      	mov	r3, r2
 802e43c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802e43e:	68fb      	ldr	r3, [r7, #12]
 802e440:	2b00      	cmp	r3, #0
 802e442:	d101      	bne.n	802e448 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 802e444:	2302      	movs	r3, #2
 802e446:	e04d      	b.n	802e4e4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 802e448:	68fb      	ldr	r3, [r7, #12]
 802e44a:	79fa      	ldrb	r2, [r7, #7]
 802e44c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802e450:	68fb      	ldr	r3, [r7, #12]
 802e452:	2200      	movs	r2, #0
 802e454:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 802e458:	68fb      	ldr	r3, [r7, #12]
 802e45a:	2200      	movs	r2, #0
 802e45c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 802e460:	68f8      	ldr	r0, [r7, #12]
 802e462:	f000 f847 	bl	802e4f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 802e466:	68fb      	ldr	r3, [r7, #12]
 802e468:	2200      	movs	r2, #0
 802e46a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802e46e:	68fb      	ldr	r3, [r7, #12]
 802e470:	2200      	movs	r2, #0
 802e472:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802e476:	68fb      	ldr	r3, [r7, #12]
 802e478:	2200      	movs	r2, #0
 802e47a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802e47e:	68fb      	ldr	r3, [r7, #12]
 802e480:	2200      	movs	r2, #0
 802e482:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 802e486:	68bb      	ldr	r3, [r7, #8]
 802e488:	2b00      	cmp	r3, #0
 802e48a:	d003      	beq.n	802e494 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802e48c:	68fb      	ldr	r3, [r7, #12]
 802e48e:	68ba      	ldr	r2, [r7, #8]
 802e490:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 802e494:	4b15      	ldr	r3, [pc, #84]	; (802e4ec <USBH_Init+0xbc>)
 802e496:	f107 0430 	add.w	r4, r7, #48	; 0x30
 802e49a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802e49c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 802e4a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802e4a4:	2100      	movs	r1, #0
 802e4a6:	4618      	mov	r0, r3
 802e4a8:	f007 feee 	bl	8036288 <osMessageCreate>
 802e4ac:	4602      	mov	r2, r0
 802e4ae:	68fb      	ldr	r3, [r7, #12]
 802e4b0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 802e4b4:	4b0e      	ldr	r3, [pc, #56]	; (802e4f0 <USBH_Init+0xc0>)
 802e4b6:	f107 0414 	add.w	r4, r7, #20
 802e4ba:	461d      	mov	r5, r3
 802e4bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802e4be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802e4c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802e4c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 802e4c8:	f107 0314 	add.w	r3, r7, #20
 802e4cc:	68f9      	ldr	r1, [r7, #12]
 802e4ce:	4618      	mov	r0, r3
 802e4d0:	f007 fcdf 	bl	8035e92 <osThreadCreate>
 802e4d4:	4602      	mov	r2, r0
 802e4d6:	68fb      	ldr	r3, [r7, #12]
 802e4d8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 802e4dc:	68f8      	ldr	r0, [r7, #12]
 802e4de:	f00b faaf 	bl	8039a40 <USBH_LL_Init>

  return USBH_OK;
 802e4e2:	2300      	movs	r3, #0
}
 802e4e4:	4618      	mov	r0, r3
 802e4e6:	3740      	adds	r7, #64	; 0x40
 802e4e8:	46bd      	mov	sp, r7
 802e4ea:	bdb0      	pop	{r4, r5, r7, pc}
 802e4ec:	0803b870 	.word	0x0803b870
 802e4f0:	0803b880 	.word	0x0803b880

0802e4f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 802e4f4:	b480      	push	{r7}
 802e4f6:	b085      	sub	sp, #20
 802e4f8:	af00      	add	r7, sp, #0
 802e4fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802e4fc:	2300      	movs	r3, #0
 802e4fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802e500:	2300      	movs	r3, #0
 802e502:	60fb      	str	r3, [r7, #12]
 802e504:	e009      	b.n	802e51a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 802e506:	687a      	ldr	r2, [r7, #4]
 802e508:	68fb      	ldr	r3, [r7, #12]
 802e50a:	33e0      	adds	r3, #224	; 0xe0
 802e50c:	009b      	lsls	r3, r3, #2
 802e50e:	4413      	add	r3, r2
 802e510:	2200      	movs	r2, #0
 802e512:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802e514:	68fb      	ldr	r3, [r7, #12]
 802e516:	3301      	adds	r3, #1
 802e518:	60fb      	str	r3, [r7, #12]
 802e51a:	68fb      	ldr	r3, [r7, #12]
 802e51c:	2b0f      	cmp	r3, #15
 802e51e:	d9f2      	bls.n	802e506 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802e520:	2300      	movs	r3, #0
 802e522:	60fb      	str	r3, [r7, #12]
 802e524:	e009      	b.n	802e53a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802e526:	687a      	ldr	r2, [r7, #4]
 802e528:	68fb      	ldr	r3, [r7, #12]
 802e52a:	4413      	add	r3, r2
 802e52c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802e530:	2200      	movs	r2, #0
 802e532:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802e534:	68fb      	ldr	r3, [r7, #12]
 802e536:	3301      	adds	r3, #1
 802e538:	60fb      	str	r3, [r7, #12]
 802e53a:	68fb      	ldr	r3, [r7, #12]
 802e53c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802e540:	d3f1      	bcc.n	802e526 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 802e542:	687b      	ldr	r3, [r7, #4]
 802e544:	2200      	movs	r2, #0
 802e546:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802e548:	687b      	ldr	r3, [r7, #4]
 802e54a:	2200      	movs	r2, #0
 802e54c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 802e54e:	687b      	ldr	r3, [r7, #4]
 802e550:	2201      	movs	r2, #1
 802e552:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 802e554:	687b      	ldr	r3, [r7, #4]
 802e556:	2200      	movs	r2, #0
 802e558:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 802e55c:	687b      	ldr	r3, [r7, #4]
 802e55e:	2201      	movs	r2, #1
 802e560:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 802e562:	687b      	ldr	r3, [r7, #4]
 802e564:	2240      	movs	r2, #64	; 0x40
 802e566:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802e568:	687b      	ldr	r3, [r7, #4]
 802e56a:	2200      	movs	r2, #0
 802e56c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802e56e:	687b      	ldr	r3, [r7, #4]
 802e570:	2200      	movs	r2, #0
 802e572:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802e576:	687b      	ldr	r3, [r7, #4]
 802e578:	2201      	movs	r2, #1
 802e57a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802e57e:	687b      	ldr	r3, [r7, #4]
 802e580:	2200      	movs	r2, #0
 802e582:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 802e586:	687b      	ldr	r3, [r7, #4]
 802e588:	2200      	movs	r2, #0
 802e58a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802e58e:	2300      	movs	r3, #0
}
 802e590:	4618      	mov	r0, r3
 802e592:	3714      	adds	r7, #20
 802e594:	46bd      	mov	sp, r7
 802e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e59a:	4770      	bx	lr

0802e59c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802e59c:	b480      	push	{r7}
 802e59e:	b085      	sub	sp, #20
 802e5a0:	af00      	add	r7, sp, #0
 802e5a2:	6078      	str	r0, [r7, #4]
 802e5a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 802e5a6:	2300      	movs	r3, #0
 802e5a8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802e5aa:	683b      	ldr	r3, [r7, #0]
 802e5ac:	2b00      	cmp	r3, #0
 802e5ae:	d016      	beq.n	802e5de <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802e5b0:	687b      	ldr	r3, [r7, #4]
 802e5b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802e5b6:	2b00      	cmp	r3, #0
 802e5b8:	d10e      	bne.n	802e5d8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802e5ba:	687b      	ldr	r3, [r7, #4]
 802e5bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802e5c0:	1c59      	adds	r1, r3, #1
 802e5c2:	687a      	ldr	r2, [r7, #4]
 802e5c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 802e5c8:	687a      	ldr	r2, [r7, #4]
 802e5ca:	33de      	adds	r3, #222	; 0xde
 802e5cc:	6839      	ldr	r1, [r7, #0]
 802e5ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802e5d2:	2300      	movs	r3, #0
 802e5d4:	73fb      	strb	r3, [r7, #15]
 802e5d6:	e004      	b.n	802e5e2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 802e5d8:	2302      	movs	r3, #2
 802e5da:	73fb      	strb	r3, [r7, #15]
 802e5dc:	e001      	b.n	802e5e2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802e5de:	2302      	movs	r3, #2
 802e5e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802e5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 802e5e4:	4618      	mov	r0, r3
 802e5e6:	3714      	adds	r7, #20
 802e5e8:	46bd      	mov	sp, r7
 802e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e5ee:	4770      	bx	lr

0802e5f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802e5f0:	b480      	push	{r7}
 802e5f2:	b085      	sub	sp, #20
 802e5f4:	af00      	add	r7, sp, #0
 802e5f6:	6078      	str	r0, [r7, #4]
 802e5f8:	460b      	mov	r3, r1
 802e5fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802e5fc:	2300      	movs	r3, #0
 802e5fe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802e600:	687b      	ldr	r3, [r7, #4]
 802e602:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 802e606:	78fa      	ldrb	r2, [r7, #3]
 802e608:	429a      	cmp	r2, r3
 802e60a:	d204      	bcs.n	802e616 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 802e60c:	687b      	ldr	r3, [r7, #4]
 802e60e:	78fa      	ldrb	r2, [r7, #3]
 802e610:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 802e614:	e001      	b.n	802e61a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 802e616:	2302      	movs	r3, #2
 802e618:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802e61a:	7bfb      	ldrb	r3, [r7, #15]
}
 802e61c:	4618      	mov	r0, r3
 802e61e:	3714      	adds	r7, #20
 802e620:	46bd      	mov	sp, r7
 802e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e626:	4770      	bx	lr

0802e628 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 802e628:	b480      	push	{r7}
 802e62a:	b087      	sub	sp, #28
 802e62c:	af00      	add	r7, sp, #0
 802e62e:	6078      	str	r0, [r7, #4]
 802e630:	4608      	mov	r0, r1
 802e632:	4611      	mov	r1, r2
 802e634:	461a      	mov	r2, r3
 802e636:	4603      	mov	r3, r0
 802e638:	70fb      	strb	r3, [r7, #3]
 802e63a:	460b      	mov	r3, r1
 802e63c:	70bb      	strb	r3, [r7, #2]
 802e63e:	4613      	mov	r3, r2
 802e640:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 802e642:	2300      	movs	r3, #0
 802e644:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 802e646:	2300      	movs	r3, #0
 802e648:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 802e64a:	687b      	ldr	r3, [r7, #4]
 802e64c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802e650:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802e652:	e025      	b.n	802e6a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 802e654:	7dfb      	ldrb	r3, [r7, #23]
 802e656:	221a      	movs	r2, #26
 802e658:	fb02 f303 	mul.w	r3, r2, r3
 802e65c:	3308      	adds	r3, #8
 802e65e:	68fa      	ldr	r2, [r7, #12]
 802e660:	4413      	add	r3, r2
 802e662:	3302      	adds	r3, #2
 802e664:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802e666:	693b      	ldr	r3, [r7, #16]
 802e668:	795b      	ldrb	r3, [r3, #5]
 802e66a:	78fa      	ldrb	r2, [r7, #3]
 802e66c:	429a      	cmp	r2, r3
 802e66e:	d002      	beq.n	802e676 <USBH_FindInterface+0x4e>
 802e670:	78fb      	ldrb	r3, [r7, #3]
 802e672:	2bff      	cmp	r3, #255	; 0xff
 802e674:	d111      	bne.n	802e69a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802e676:	693b      	ldr	r3, [r7, #16]
 802e678:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802e67a:	78ba      	ldrb	r2, [r7, #2]
 802e67c:	429a      	cmp	r2, r3
 802e67e:	d002      	beq.n	802e686 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802e680:	78bb      	ldrb	r3, [r7, #2]
 802e682:	2bff      	cmp	r3, #255	; 0xff
 802e684:	d109      	bne.n	802e69a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802e686:	693b      	ldr	r3, [r7, #16]
 802e688:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802e68a:	787a      	ldrb	r2, [r7, #1]
 802e68c:	429a      	cmp	r2, r3
 802e68e:	d002      	beq.n	802e696 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802e690:	787b      	ldrb	r3, [r7, #1]
 802e692:	2bff      	cmp	r3, #255	; 0xff
 802e694:	d101      	bne.n	802e69a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 802e696:	7dfb      	ldrb	r3, [r7, #23]
 802e698:	e006      	b.n	802e6a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 802e69a:	7dfb      	ldrb	r3, [r7, #23]
 802e69c:	3301      	adds	r3, #1
 802e69e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802e6a0:	7dfb      	ldrb	r3, [r7, #23]
 802e6a2:	2b01      	cmp	r3, #1
 802e6a4:	d9d6      	bls.n	802e654 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 802e6a6:	23ff      	movs	r3, #255	; 0xff
}
 802e6a8:	4618      	mov	r0, r3
 802e6aa:	371c      	adds	r7, #28
 802e6ac:	46bd      	mov	sp, r7
 802e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e6b2:	4770      	bx	lr

0802e6b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 802e6b4:	b580      	push	{r7, lr}
 802e6b6:	b082      	sub	sp, #8
 802e6b8:	af00      	add	r7, sp, #0
 802e6ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 802e6bc:	6878      	ldr	r0, [r7, #4]
 802e6be:	f00b fa01 	bl	8039ac4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 802e6c2:	2101      	movs	r1, #1
 802e6c4:	6878      	ldr	r0, [r7, #4]
 802e6c6:	f00b fb1a 	bl	8039cfe <USBH_LL_DriverVBUS>

  return USBH_OK;
 802e6ca:	2300      	movs	r3, #0
}
 802e6cc:	4618      	mov	r0, r3
 802e6ce:	3708      	adds	r7, #8
 802e6d0:	46bd      	mov	sp, r7
 802e6d2:	bd80      	pop	{r7, pc}

0802e6d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 802e6d4:	b580      	push	{r7, lr}
 802e6d6:	b088      	sub	sp, #32
 802e6d8:	af04      	add	r7, sp, #16
 802e6da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802e6dc:	2302      	movs	r3, #2
 802e6de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802e6e0:	2300      	movs	r3, #0
 802e6e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 802e6e4:	687b      	ldr	r3, [r7, #4]
 802e6e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802e6ea:	b2db      	uxtb	r3, r3
 802e6ec:	2b01      	cmp	r3, #1
 802e6ee:	d102      	bne.n	802e6f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802e6f0:	687b      	ldr	r3, [r7, #4]
 802e6f2:	2203      	movs	r2, #3
 802e6f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 802e6f6:	687b      	ldr	r3, [r7, #4]
 802e6f8:	781b      	ldrb	r3, [r3, #0]
 802e6fa:	b2db      	uxtb	r3, r3
 802e6fc:	2b0b      	cmp	r3, #11
 802e6fe:	f200 8247 	bhi.w	802eb90 <USBH_Process+0x4bc>
 802e702:	a201      	add	r2, pc, #4	; (adr r2, 802e708 <USBH_Process+0x34>)
 802e704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802e708:	0802e739 	.word	0x0802e739
 802e70c:	0802e787 	.word	0x0802e787
 802e710:	0802e80b 	.word	0x0802e80b
 802e714:	0802eb0f 	.word	0x0802eb0f
 802e718:	0802eb91 	.word	0x0802eb91
 802e71c:	0802e8cb 	.word	0x0802e8cb
 802e720:	0802ea99 	.word	0x0802ea99
 802e724:	0802e91d 	.word	0x0802e91d
 802e728:	0802e959 	.word	0x0802e959
 802e72c:	0802e993 	.word	0x0802e993
 802e730:	0802e9f1 	.word	0x0802e9f1
 802e734:	0802eaf7 	.word	0x0802eaf7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 802e738:	687b      	ldr	r3, [r7, #4]
 802e73a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802e73e:	b2db      	uxtb	r3, r3
 802e740:	2b00      	cmp	r3, #0
 802e742:	f000 8227 	beq.w	802eb94 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 802e746:	687b      	ldr	r3, [r7, #4]
 802e748:	2201      	movs	r2, #1
 802e74a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 802e74c:	20c8      	movs	r0, #200	; 0xc8
 802e74e:	f00b fb4d 	bl	8039dec <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 802e752:	6878      	ldr	r0, [r7, #4]
 802e754:	f00b fa13 	bl	8039b7e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 802e758:	687b      	ldr	r3, [r7, #4]
 802e75a:	2200      	movs	r2, #0
 802e75c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 802e760:	687b      	ldr	r3, [r7, #4]
 802e762:	2200      	movs	r2, #0
 802e764:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802e768:	687b      	ldr	r3, [r7, #4]
 802e76a:	2201      	movs	r2, #1
 802e76c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e770:	687b      	ldr	r3, [r7, #4]
 802e772:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e776:	687b      	ldr	r3, [r7, #4]
 802e778:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e77c:	2200      	movs	r2, #0
 802e77e:	4619      	mov	r1, r3
 802e780:	f007 fdaa 	bl	80362d8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802e784:	e206      	b.n	802eb94 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 802e786:	687b      	ldr	r3, [r7, #4]
 802e788:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802e78c:	2b01      	cmp	r3, #1
 802e78e:	d107      	bne.n	802e7a0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 802e790:	687b      	ldr	r3, [r7, #4]
 802e792:	2200      	movs	r2, #0
 802e794:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 802e798:	687b      	ldr	r3, [r7, #4]
 802e79a:	2202      	movs	r2, #2
 802e79c:	701a      	strb	r2, [r3, #0]
 802e79e:	e025      	b.n	802e7ec <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 802e7a0:	687b      	ldr	r3, [r7, #4]
 802e7a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802e7a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802e7aa:	d914      	bls.n	802e7d6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 802e7ac:	687b      	ldr	r3, [r7, #4]
 802e7ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802e7b2:	3301      	adds	r3, #1
 802e7b4:	b2da      	uxtb	r2, r3
 802e7b6:	687b      	ldr	r3, [r7, #4]
 802e7b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802e7bc:	687b      	ldr	r3, [r7, #4]
 802e7be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802e7c2:	2b03      	cmp	r3, #3
 802e7c4:	d903      	bls.n	802e7ce <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 802e7c6:	687b      	ldr	r3, [r7, #4]
 802e7c8:	220d      	movs	r2, #13
 802e7ca:	701a      	strb	r2, [r3, #0]
 802e7cc:	e00e      	b.n	802e7ec <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 802e7ce:	687b      	ldr	r3, [r7, #4]
 802e7d0:	2200      	movs	r2, #0
 802e7d2:	701a      	strb	r2, [r3, #0]
 802e7d4:	e00a      	b.n	802e7ec <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 802e7d6:	687b      	ldr	r3, [r7, #4]
 802e7d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802e7dc:	f103 020a 	add.w	r2, r3, #10
 802e7e0:	687b      	ldr	r3, [r7, #4]
 802e7e2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 802e7e6:	200a      	movs	r0, #10
 802e7e8:	f00b fb00 	bl	8039dec <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802e7ec:	687b      	ldr	r3, [r7, #4]
 802e7ee:	2201      	movs	r2, #1
 802e7f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e7f4:	687b      	ldr	r3, [r7, #4]
 802e7f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e7fa:	687b      	ldr	r3, [r7, #4]
 802e7fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e800:	2200      	movs	r2, #0
 802e802:	4619      	mov	r1, r3
 802e804:	f007 fd68 	bl	80362d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802e808:	e1cb      	b.n	802eba2 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802e80a:	687b      	ldr	r3, [r7, #4]
 802e80c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802e810:	2b00      	cmp	r3, #0
 802e812:	d005      	beq.n	802e820 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 802e814:	687b      	ldr	r3, [r7, #4]
 802e816:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802e81a:	2104      	movs	r1, #4
 802e81c:	6878      	ldr	r0, [r7, #4]
 802e81e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 802e820:	2064      	movs	r0, #100	; 0x64
 802e822:	f00b fae3 	bl	8039dec <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 802e826:	6878      	ldr	r0, [r7, #4]
 802e828:	f00b f982 	bl	8039b30 <USBH_LL_GetSpeed>
 802e82c:	4603      	mov	r3, r0
 802e82e:	461a      	mov	r2, r3
 802e830:	687b      	ldr	r3, [r7, #4]
 802e832:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802e836:	687b      	ldr	r3, [r7, #4]
 802e838:	2205      	movs	r2, #5
 802e83a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 802e83c:	2100      	movs	r1, #0
 802e83e:	6878      	ldr	r0, [r7, #4]
 802e840:	f001 fc19 	bl	8030076 <USBH_AllocPipe>
 802e844:	4603      	mov	r3, r0
 802e846:	461a      	mov	r2, r3
 802e848:	687b      	ldr	r3, [r7, #4]
 802e84a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 802e84c:	2180      	movs	r1, #128	; 0x80
 802e84e:	6878      	ldr	r0, [r7, #4]
 802e850:	f001 fc11 	bl	8030076 <USBH_AllocPipe>
 802e854:	4603      	mov	r3, r0
 802e856:	461a      	mov	r2, r3
 802e858:	687b      	ldr	r3, [r7, #4]
 802e85a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802e85c:	687b      	ldr	r3, [r7, #4]
 802e85e:	7919      	ldrb	r1, [r3, #4]
 802e860:	687b      	ldr	r3, [r7, #4]
 802e862:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802e866:	687b      	ldr	r3, [r7, #4]
 802e868:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802e86c:	687a      	ldr	r2, [r7, #4]
 802e86e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802e870:	b292      	uxth	r2, r2
 802e872:	9202      	str	r2, [sp, #8]
 802e874:	2200      	movs	r2, #0
 802e876:	9201      	str	r2, [sp, #4]
 802e878:	9300      	str	r3, [sp, #0]
 802e87a:	4603      	mov	r3, r0
 802e87c:	2280      	movs	r2, #128	; 0x80
 802e87e:	6878      	ldr	r0, [r7, #4]
 802e880:	f001 fbca 	bl	8030018 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802e884:	687b      	ldr	r3, [r7, #4]
 802e886:	7959      	ldrb	r1, [r3, #5]
 802e888:	687b      	ldr	r3, [r7, #4]
 802e88a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802e88e:	687b      	ldr	r3, [r7, #4]
 802e890:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802e894:	687a      	ldr	r2, [r7, #4]
 802e896:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802e898:	b292      	uxth	r2, r2
 802e89a:	9202      	str	r2, [sp, #8]
 802e89c:	2200      	movs	r2, #0
 802e89e:	9201      	str	r2, [sp, #4]
 802e8a0:	9300      	str	r3, [sp, #0]
 802e8a2:	4603      	mov	r3, r0
 802e8a4:	2200      	movs	r2, #0
 802e8a6:	6878      	ldr	r0, [r7, #4]
 802e8a8:	f001 fbb6 	bl	8030018 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802e8ac:	687b      	ldr	r3, [r7, #4]
 802e8ae:	2201      	movs	r2, #1
 802e8b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e8b4:	687b      	ldr	r3, [r7, #4]
 802e8b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e8ba:	687b      	ldr	r3, [r7, #4]
 802e8bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e8c0:	2200      	movs	r2, #0
 802e8c2:	4619      	mov	r1, r3
 802e8c4:	f007 fd08 	bl	80362d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802e8c8:	e16b      	b.n	802eba2 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802e8ca:	6878      	ldr	r0, [r7, #4]
 802e8cc:	f000 f96e 	bl	802ebac <USBH_HandleEnum>
 802e8d0:	4603      	mov	r3, r0
 802e8d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 802e8d4:	7bbb      	ldrb	r3, [r7, #14]
 802e8d6:	b2db      	uxtb	r3, r3
 802e8d8:	2b00      	cmp	r3, #0
 802e8da:	f040 815d 	bne.w	802eb98 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802e8de:	687b      	ldr	r3, [r7, #4]
 802e8e0:	2200      	movs	r2, #0
 802e8e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 802e8e6:	687b      	ldr	r3, [r7, #4]
 802e8e8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802e8ec:	2b01      	cmp	r3, #1
 802e8ee:	d103      	bne.n	802e8f8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 802e8f0:	687b      	ldr	r3, [r7, #4]
 802e8f2:	2208      	movs	r2, #8
 802e8f4:	701a      	strb	r2, [r3, #0]
 802e8f6:	e002      	b.n	802e8fe <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 802e8f8:	687b      	ldr	r3, [r7, #4]
 802e8fa:	2207      	movs	r2, #7
 802e8fc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802e8fe:	687b      	ldr	r3, [r7, #4]
 802e900:	2205      	movs	r2, #5
 802e902:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e906:	687b      	ldr	r3, [r7, #4]
 802e908:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e90c:	687b      	ldr	r3, [r7, #4]
 802e90e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e912:	2200      	movs	r2, #0
 802e914:	4619      	mov	r1, r3
 802e916:	f007 fcdf 	bl	80362d8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802e91a:	e13d      	b.n	802eb98 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 802e91c:	687b      	ldr	r3, [r7, #4]
 802e91e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802e922:	2b00      	cmp	r3, #0
 802e924:	f000 813a 	beq.w	802eb9c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 802e928:	687b      	ldr	r3, [r7, #4]
 802e92a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802e92e:	2101      	movs	r1, #1
 802e930:	6878      	ldr	r0, [r7, #4]
 802e932:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 802e934:	687b      	ldr	r3, [r7, #4]
 802e936:	2208      	movs	r2, #8
 802e938:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802e93a:	687b      	ldr	r3, [r7, #4]
 802e93c:	2205      	movs	r2, #5
 802e93e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e942:	687b      	ldr	r3, [r7, #4]
 802e944:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e948:	687b      	ldr	r3, [r7, #4]
 802e94a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e94e:	2200      	movs	r2, #0
 802e950:	4619      	mov	r1, r3
 802e952:	f007 fcc1 	bl	80362d8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 802e956:	e121      	b.n	802eb9c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 802e958:	687b      	ldr	r3, [r7, #4]
 802e95a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 802e95e:	b29b      	uxth	r3, r3
 802e960:	4619      	mov	r1, r3
 802e962:	6878      	ldr	r0, [r7, #4]
 802e964:	f000 fd00 	bl	802f368 <USBH_SetCfg>
 802e968:	4603      	mov	r3, r0
 802e96a:	2b00      	cmp	r3, #0
 802e96c:	d102      	bne.n	802e974 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802e96e:	687b      	ldr	r3, [r7, #4]
 802e970:	2209      	movs	r2, #9
 802e972:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802e974:	687b      	ldr	r3, [r7, #4]
 802e976:	2201      	movs	r2, #1
 802e978:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e97c:	687b      	ldr	r3, [r7, #4]
 802e97e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e982:	687b      	ldr	r3, [r7, #4]
 802e984:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e988:	2200      	movs	r2, #0
 802e98a:	4619      	mov	r1, r3
 802e98c:	f007 fca4 	bl	80362d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802e990:	e107      	b.n	802eba2 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 802e992:	687b      	ldr	r3, [r7, #4]
 802e994:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 802e998:	f003 0320 	and.w	r3, r3, #32
 802e99c:	2b00      	cmp	r3, #0
 802e99e:	d015      	beq.n	802e9cc <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 802e9a0:	2101      	movs	r1, #1
 802e9a2:	6878      	ldr	r0, [r7, #4]
 802e9a4:	f000 fd03 	bl	802f3ae <USBH_SetFeature>
 802e9a8:	4603      	mov	r3, r0
 802e9aa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802e9ac:	7bbb      	ldrb	r3, [r7, #14]
 802e9ae:	b2db      	uxtb	r3, r3
 802e9b0:	2b00      	cmp	r3, #0
 802e9b2:	d103      	bne.n	802e9bc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802e9b4:	687b      	ldr	r3, [r7, #4]
 802e9b6:	220a      	movs	r2, #10
 802e9b8:	701a      	strb	r2, [r3, #0]
 802e9ba:	e00a      	b.n	802e9d2 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 802e9bc:	7bbb      	ldrb	r3, [r7, #14]
 802e9be:	b2db      	uxtb	r3, r3
 802e9c0:	2b03      	cmp	r3, #3
 802e9c2:	d106      	bne.n	802e9d2 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 802e9c4:	687b      	ldr	r3, [r7, #4]
 802e9c6:	220a      	movs	r2, #10
 802e9c8:	701a      	strb	r2, [r3, #0]
 802e9ca:	e002      	b.n	802e9d2 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 802e9cc:	687b      	ldr	r3, [r7, #4]
 802e9ce:	220a      	movs	r2, #10
 802e9d0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802e9d2:	687b      	ldr	r3, [r7, #4]
 802e9d4:	2201      	movs	r2, #1
 802e9d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e9da:	687b      	ldr	r3, [r7, #4]
 802e9dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e9e0:	687b      	ldr	r3, [r7, #4]
 802e9e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e9e6:	2200      	movs	r2, #0
 802e9e8:	4619      	mov	r1, r3
 802e9ea:	f007 fc75 	bl	80362d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802e9ee:	e0d8      	b.n	802eba2 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802e9f0:	687b      	ldr	r3, [r7, #4]
 802e9f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802e9f6:	2b00      	cmp	r3, #0
 802e9f8:	d03f      	beq.n	802ea7a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 802e9fa:	687b      	ldr	r3, [r7, #4]
 802e9fc:	2200      	movs	r2, #0
 802e9fe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802ea02:	2300      	movs	r3, #0
 802ea04:	73fb      	strb	r3, [r7, #15]
 802ea06:	e016      	b.n	802ea36 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 802ea08:	7bfa      	ldrb	r2, [r7, #15]
 802ea0a:	687b      	ldr	r3, [r7, #4]
 802ea0c:	32de      	adds	r2, #222	; 0xde
 802ea0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ea12:	791a      	ldrb	r2, [r3, #4]
 802ea14:	687b      	ldr	r3, [r7, #4]
 802ea16:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 802ea1a:	429a      	cmp	r2, r3
 802ea1c:	d108      	bne.n	802ea30 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 802ea1e:	7bfa      	ldrb	r2, [r7, #15]
 802ea20:	687b      	ldr	r3, [r7, #4]
 802ea22:	32de      	adds	r2, #222	; 0xde
 802ea24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802ea28:	687b      	ldr	r3, [r7, #4]
 802ea2a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 802ea2e:	e005      	b.n	802ea3c <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802ea30:	7bfb      	ldrb	r3, [r7, #15]
 802ea32:	3301      	adds	r3, #1
 802ea34:	73fb      	strb	r3, [r7, #15]
 802ea36:	7bfb      	ldrb	r3, [r7, #15]
 802ea38:	2b00      	cmp	r3, #0
 802ea3a:	d0e5      	beq.n	802ea08 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 802ea3c:	687b      	ldr	r3, [r7, #4]
 802ea3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ea42:	2b00      	cmp	r3, #0
 802ea44:	d016      	beq.n	802ea74 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 802ea46:	687b      	ldr	r3, [r7, #4]
 802ea48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ea4c:	689b      	ldr	r3, [r3, #8]
 802ea4e:	6878      	ldr	r0, [r7, #4]
 802ea50:	4798      	blx	r3
 802ea52:	4603      	mov	r3, r0
 802ea54:	2b00      	cmp	r3, #0
 802ea56:	d109      	bne.n	802ea6c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 802ea58:	687b      	ldr	r3, [r7, #4]
 802ea5a:	2206      	movs	r2, #6
 802ea5c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 802ea5e:	687b      	ldr	r3, [r7, #4]
 802ea60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802ea64:	2103      	movs	r1, #3
 802ea66:	6878      	ldr	r0, [r7, #4]
 802ea68:	4798      	blx	r3
 802ea6a:	e006      	b.n	802ea7a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 802ea6c:	687b      	ldr	r3, [r7, #4]
 802ea6e:	220d      	movs	r2, #13
 802ea70:	701a      	strb	r2, [r3, #0]
 802ea72:	e002      	b.n	802ea7a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 802ea74:	687b      	ldr	r3, [r7, #4]
 802ea76:	220d      	movs	r2, #13
 802ea78:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802ea7a:	687b      	ldr	r3, [r7, #4]
 802ea7c:	2205      	movs	r2, #5
 802ea7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802ea82:	687b      	ldr	r3, [r7, #4]
 802ea84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802ea88:	687b      	ldr	r3, [r7, #4]
 802ea8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802ea8e:	2200      	movs	r2, #0
 802ea90:	4619      	mov	r1, r3
 802ea92:	f007 fc21 	bl	80362d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802ea96:	e084      	b.n	802eba2 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 802ea98:	687b      	ldr	r3, [r7, #4]
 802ea9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ea9e:	2b00      	cmp	r3, #0
 802eaa0:	d017      	beq.n	802ead2 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 802eaa2:	687b      	ldr	r3, [r7, #4]
 802eaa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802eaa8:	691b      	ldr	r3, [r3, #16]
 802eaaa:	6878      	ldr	r0, [r7, #4]
 802eaac:	4798      	blx	r3
 802eaae:	4603      	mov	r3, r0
 802eab0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802eab2:	7bbb      	ldrb	r3, [r7, #14]
 802eab4:	b2db      	uxtb	r3, r3
 802eab6:	2b00      	cmp	r3, #0
 802eab8:	d103      	bne.n	802eac2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 802eaba:	687b      	ldr	r3, [r7, #4]
 802eabc:	220b      	movs	r2, #11
 802eabe:	701a      	strb	r2, [r3, #0]
 802eac0:	e00a      	b.n	802ead8 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 802eac2:	7bbb      	ldrb	r3, [r7, #14]
 802eac4:	b2db      	uxtb	r3, r3
 802eac6:	2b02      	cmp	r3, #2
 802eac8:	d106      	bne.n	802ead8 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 802eaca:	687b      	ldr	r3, [r7, #4]
 802eacc:	220d      	movs	r2, #13
 802eace:	701a      	strb	r2, [r3, #0]
 802ead0:	e002      	b.n	802ead8 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 802ead2:	687b      	ldr	r3, [r7, #4]
 802ead4:	220d      	movs	r2, #13
 802ead6:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802ead8:	687b      	ldr	r3, [r7, #4]
 802eada:	2205      	movs	r2, #5
 802eadc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802eae0:	687b      	ldr	r3, [r7, #4]
 802eae2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802eae6:	687b      	ldr	r3, [r7, #4]
 802eae8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802eaec:	2200      	movs	r2, #0
 802eaee:	4619      	mov	r1, r3
 802eaf0:	f007 fbf2 	bl	80362d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802eaf4:	e055      	b.n	802eba2 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 802eaf6:	687b      	ldr	r3, [r7, #4]
 802eaf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802eafc:	2b00      	cmp	r3, #0
 802eafe:	d04f      	beq.n	802eba0 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 802eb00:	687b      	ldr	r3, [r7, #4]
 802eb02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802eb06:	695b      	ldr	r3, [r3, #20]
 802eb08:	6878      	ldr	r0, [r7, #4]
 802eb0a:	4798      	blx	r3
      }
      break;
 802eb0c:	e048      	b.n	802eba0 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 802eb0e:	687b      	ldr	r3, [r7, #4]
 802eb10:	2200      	movs	r2, #0
 802eb12:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 802eb16:	6878      	ldr	r0, [r7, #4]
 802eb18:	f7ff fcec 	bl	802e4f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 802eb1c:	687b      	ldr	r3, [r7, #4]
 802eb1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802eb22:	2b00      	cmp	r3, #0
 802eb24:	d009      	beq.n	802eb3a <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 802eb26:	687b      	ldr	r3, [r7, #4]
 802eb28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802eb2c:	68db      	ldr	r3, [r3, #12]
 802eb2e:	6878      	ldr	r0, [r7, #4]
 802eb30:	4798      	blx	r3
        phost->pActiveClass = NULL;
 802eb32:	687b      	ldr	r3, [r7, #4]
 802eb34:	2200      	movs	r2, #0
 802eb36:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 802eb3a:	687b      	ldr	r3, [r7, #4]
 802eb3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802eb40:	2b00      	cmp	r3, #0
 802eb42:	d005      	beq.n	802eb50 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 802eb44:	687b      	ldr	r3, [r7, #4]
 802eb46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802eb4a:	2105      	movs	r1, #5
 802eb4c:	6878      	ldr	r0, [r7, #4]
 802eb4e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 802eb50:	687b      	ldr	r3, [r7, #4]
 802eb52:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 802eb56:	b2db      	uxtb	r3, r3
 802eb58:	2b01      	cmp	r3, #1
 802eb5a:	d107      	bne.n	802eb6c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 802eb5c:	687b      	ldr	r3, [r7, #4]
 802eb5e:	2200      	movs	r2, #0
 802eb60:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 802eb64:	6878      	ldr	r0, [r7, #4]
 802eb66:	f7ff fda5 	bl	802e6b4 <USBH_Start>
 802eb6a:	e002      	b.n	802eb72 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 802eb6c:	6878      	ldr	r0, [r7, #4]
 802eb6e:	f00a ffa9 	bl	8039ac4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802eb72:	687b      	ldr	r3, [r7, #4]
 802eb74:	2201      	movs	r2, #1
 802eb76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802eb7a:	687b      	ldr	r3, [r7, #4]
 802eb7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802eb80:	687b      	ldr	r3, [r7, #4]
 802eb82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802eb86:	2200      	movs	r2, #0
 802eb88:	4619      	mov	r1, r3
 802eb8a:	f007 fba5 	bl	80362d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802eb8e:	e008      	b.n	802eba2 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 802eb90:	bf00      	nop
 802eb92:	e006      	b.n	802eba2 <USBH_Process+0x4ce>
      break;
 802eb94:	bf00      	nop
 802eb96:	e004      	b.n	802eba2 <USBH_Process+0x4ce>
      break;
 802eb98:	bf00      	nop
 802eb9a:	e002      	b.n	802eba2 <USBH_Process+0x4ce>
    break;
 802eb9c:	bf00      	nop
 802eb9e:	e000      	b.n	802eba2 <USBH_Process+0x4ce>
      break;
 802eba0:	bf00      	nop
  }
  return USBH_OK;
 802eba2:	2300      	movs	r3, #0
}
 802eba4:	4618      	mov	r0, r3
 802eba6:	3710      	adds	r7, #16
 802eba8:	46bd      	mov	sp, r7
 802ebaa:	bd80      	pop	{r7, pc}

0802ebac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 802ebac:	b580      	push	{r7, lr}
 802ebae:	b088      	sub	sp, #32
 802ebb0:	af04      	add	r7, sp, #16
 802ebb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 802ebb4:	2301      	movs	r3, #1
 802ebb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 802ebb8:	2301      	movs	r3, #1
 802ebba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 802ebbc:	687b      	ldr	r3, [r7, #4]
 802ebbe:	785b      	ldrb	r3, [r3, #1]
 802ebc0:	2b07      	cmp	r3, #7
 802ebc2:	f200 8208 	bhi.w	802efd6 <USBH_HandleEnum+0x42a>
 802ebc6:	a201      	add	r2, pc, #4	; (adr r2, 802ebcc <USBH_HandleEnum+0x20>)
 802ebc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ebcc:	0802ebed 	.word	0x0802ebed
 802ebd0:	0802ecab 	.word	0x0802ecab
 802ebd4:	0802ed15 	.word	0x0802ed15
 802ebd8:	0802eda3 	.word	0x0802eda3
 802ebdc:	0802ee0d 	.word	0x0802ee0d
 802ebe0:	0802ee7d 	.word	0x0802ee7d
 802ebe4:	0802ef19 	.word	0x0802ef19
 802ebe8:	0802ef97 	.word	0x0802ef97
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802ebec:	2108      	movs	r1, #8
 802ebee:	6878      	ldr	r0, [r7, #4]
 802ebf0:	f000 faea 	bl	802f1c8 <USBH_Get_DevDesc>
 802ebf4:	4603      	mov	r3, r0
 802ebf6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ebf8:	7bbb      	ldrb	r3, [r7, #14]
 802ebfa:	2b00      	cmp	r3, #0
 802ebfc:	d130      	bne.n	802ec60 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802ebfe:	687b      	ldr	r3, [r7, #4]
 802ec00:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 802ec04:	687b      	ldr	r3, [r7, #4]
 802ec06:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 802ec08:	687b      	ldr	r3, [r7, #4]
 802ec0a:	2201      	movs	r2, #1
 802ec0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802ec0e:	687b      	ldr	r3, [r7, #4]
 802ec10:	7919      	ldrb	r1, [r3, #4]
 802ec12:	687b      	ldr	r3, [r7, #4]
 802ec14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ec18:	687b      	ldr	r3, [r7, #4]
 802ec1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802ec1e:	687a      	ldr	r2, [r7, #4]
 802ec20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802ec22:	b292      	uxth	r2, r2
 802ec24:	9202      	str	r2, [sp, #8]
 802ec26:	2200      	movs	r2, #0
 802ec28:	9201      	str	r2, [sp, #4]
 802ec2a:	9300      	str	r3, [sp, #0]
 802ec2c:	4603      	mov	r3, r0
 802ec2e:	2280      	movs	r2, #128	; 0x80
 802ec30:	6878      	ldr	r0, [r7, #4]
 802ec32:	f001 f9f1 	bl	8030018 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802ec36:	687b      	ldr	r3, [r7, #4]
 802ec38:	7959      	ldrb	r1, [r3, #5]
 802ec3a:	687b      	ldr	r3, [r7, #4]
 802ec3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ec40:	687b      	ldr	r3, [r7, #4]
 802ec42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802ec46:	687a      	ldr	r2, [r7, #4]
 802ec48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802ec4a:	b292      	uxth	r2, r2
 802ec4c:	9202      	str	r2, [sp, #8]
 802ec4e:	2200      	movs	r2, #0
 802ec50:	9201      	str	r2, [sp, #4]
 802ec52:	9300      	str	r3, [sp, #0]
 802ec54:	4603      	mov	r3, r0
 802ec56:	2200      	movs	r2, #0
 802ec58:	6878      	ldr	r0, [r7, #4]
 802ec5a:	f001 f9dd 	bl	8030018 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802ec5e:	e1bc      	b.n	802efda <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ec60:	7bbb      	ldrb	r3, [r7, #14]
 802ec62:	2b03      	cmp	r3, #3
 802ec64:	f040 81b9 	bne.w	802efda <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 802ec68:	687b      	ldr	r3, [r7, #4]
 802ec6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ec6e:	3301      	adds	r3, #1
 802ec70:	b2da      	uxtb	r2, r3
 802ec72:	687b      	ldr	r3, [r7, #4]
 802ec74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802ec78:	687b      	ldr	r3, [r7, #4]
 802ec7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ec7e:	2b03      	cmp	r3, #3
 802ec80:	d903      	bls.n	802ec8a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 802ec82:	687b      	ldr	r3, [r7, #4]
 802ec84:	220d      	movs	r2, #13
 802ec86:	701a      	strb	r2, [r3, #0]
      break;
 802ec88:	e1a7      	b.n	802efda <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ec8a:	687b      	ldr	r3, [r7, #4]
 802ec8c:	795b      	ldrb	r3, [r3, #5]
 802ec8e:	4619      	mov	r1, r3
 802ec90:	6878      	ldr	r0, [r7, #4]
 802ec92:	f001 fa11 	bl	80300b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ec96:	687b      	ldr	r3, [r7, #4]
 802ec98:	791b      	ldrb	r3, [r3, #4]
 802ec9a:	4619      	mov	r1, r3
 802ec9c:	6878      	ldr	r0, [r7, #4]
 802ec9e:	f001 fa0b 	bl	80300b8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 802eca2:	687b      	ldr	r3, [r7, #4]
 802eca4:	2200      	movs	r2, #0
 802eca6:	701a      	strb	r2, [r3, #0]
      break;
 802eca8:	e197      	b.n	802efda <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 802ecaa:	2112      	movs	r1, #18
 802ecac:	6878      	ldr	r0, [r7, #4]
 802ecae:	f000 fa8b 	bl	802f1c8 <USBH_Get_DevDesc>
 802ecb2:	4603      	mov	r3, r0
 802ecb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ecb6:	7bbb      	ldrb	r3, [r7, #14]
 802ecb8:	2b00      	cmp	r3, #0
 802ecba:	d103      	bne.n	802ecc4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 802ecbc:	687b      	ldr	r3, [r7, #4]
 802ecbe:	2202      	movs	r2, #2
 802ecc0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802ecc2:	e18c      	b.n	802efde <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ecc4:	7bbb      	ldrb	r3, [r7, #14]
 802ecc6:	2b03      	cmp	r3, #3
 802ecc8:	f040 8189 	bne.w	802efde <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 802eccc:	687b      	ldr	r3, [r7, #4]
 802ecce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ecd2:	3301      	adds	r3, #1
 802ecd4:	b2da      	uxtb	r2, r3
 802ecd6:	687b      	ldr	r3, [r7, #4]
 802ecd8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802ecdc:	687b      	ldr	r3, [r7, #4]
 802ecde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ece2:	2b03      	cmp	r3, #3
 802ece4:	d903      	bls.n	802ecee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 802ece6:	687b      	ldr	r3, [r7, #4]
 802ece8:	220d      	movs	r2, #13
 802ecea:	701a      	strb	r2, [r3, #0]
      break;
 802ecec:	e177      	b.n	802efde <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ecee:	687b      	ldr	r3, [r7, #4]
 802ecf0:	795b      	ldrb	r3, [r3, #5]
 802ecf2:	4619      	mov	r1, r3
 802ecf4:	6878      	ldr	r0, [r7, #4]
 802ecf6:	f001 f9df 	bl	80300b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ecfa:	687b      	ldr	r3, [r7, #4]
 802ecfc:	791b      	ldrb	r3, [r3, #4]
 802ecfe:	4619      	mov	r1, r3
 802ed00:	6878      	ldr	r0, [r7, #4]
 802ed02:	f001 f9d9 	bl	80300b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802ed06:	687b      	ldr	r3, [r7, #4]
 802ed08:	2200      	movs	r2, #0
 802ed0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802ed0c:	687b      	ldr	r3, [r7, #4]
 802ed0e:	2200      	movs	r2, #0
 802ed10:	701a      	strb	r2, [r3, #0]
      break;
 802ed12:	e164      	b.n	802efde <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 802ed14:	2101      	movs	r1, #1
 802ed16:	6878      	ldr	r0, [r7, #4]
 802ed18:	f000 fb02 	bl	802f320 <USBH_SetAddress>
 802ed1c:	4603      	mov	r3, r0
 802ed1e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ed20:	7bbb      	ldrb	r3, [r7, #14]
 802ed22:	2b00      	cmp	r3, #0
 802ed24:	d132      	bne.n	802ed8c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 802ed26:	2002      	movs	r0, #2
 802ed28:	f00b f860 	bl	8039dec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 802ed2c:	687b      	ldr	r3, [r7, #4]
 802ed2e:	2201      	movs	r2, #1
 802ed30:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 802ed34:	687b      	ldr	r3, [r7, #4]
 802ed36:	2203      	movs	r2, #3
 802ed38:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802ed3a:	687b      	ldr	r3, [r7, #4]
 802ed3c:	7919      	ldrb	r1, [r3, #4]
 802ed3e:	687b      	ldr	r3, [r7, #4]
 802ed40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ed44:	687b      	ldr	r3, [r7, #4]
 802ed46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802ed4a:	687a      	ldr	r2, [r7, #4]
 802ed4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802ed4e:	b292      	uxth	r2, r2
 802ed50:	9202      	str	r2, [sp, #8]
 802ed52:	2200      	movs	r2, #0
 802ed54:	9201      	str	r2, [sp, #4]
 802ed56:	9300      	str	r3, [sp, #0]
 802ed58:	4603      	mov	r3, r0
 802ed5a:	2280      	movs	r2, #128	; 0x80
 802ed5c:	6878      	ldr	r0, [r7, #4]
 802ed5e:	f001 f95b 	bl	8030018 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802ed62:	687b      	ldr	r3, [r7, #4]
 802ed64:	7959      	ldrb	r1, [r3, #5]
 802ed66:	687b      	ldr	r3, [r7, #4]
 802ed68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ed6c:	687b      	ldr	r3, [r7, #4]
 802ed6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802ed72:	687a      	ldr	r2, [r7, #4]
 802ed74:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802ed76:	b292      	uxth	r2, r2
 802ed78:	9202      	str	r2, [sp, #8]
 802ed7a:	2200      	movs	r2, #0
 802ed7c:	9201      	str	r2, [sp, #4]
 802ed7e:	9300      	str	r3, [sp, #0]
 802ed80:	4603      	mov	r3, r0
 802ed82:	2200      	movs	r2, #0
 802ed84:	6878      	ldr	r0, [r7, #4]
 802ed86:	f001 f947 	bl	8030018 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802ed8a:	e12a      	b.n	802efe2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ed8c:	7bbb      	ldrb	r3, [r7, #14]
 802ed8e:	2b03      	cmp	r3, #3
 802ed90:	f040 8127 	bne.w	802efe2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 802ed94:	687b      	ldr	r3, [r7, #4]
 802ed96:	220d      	movs	r2, #13
 802ed98:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 802ed9a:	687b      	ldr	r3, [r7, #4]
 802ed9c:	2200      	movs	r2, #0
 802ed9e:	705a      	strb	r2, [r3, #1]
      break;
 802eda0:	e11f      	b.n	802efe2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 802eda2:	2109      	movs	r1, #9
 802eda4:	6878      	ldr	r0, [r7, #4]
 802eda6:	f000 fa37 	bl	802f218 <USBH_Get_CfgDesc>
 802edaa:	4603      	mov	r3, r0
 802edac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802edae:	7bbb      	ldrb	r3, [r7, #14]
 802edb0:	2b00      	cmp	r3, #0
 802edb2:	d103      	bne.n	802edbc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 802edb4:	687b      	ldr	r3, [r7, #4]
 802edb6:	2204      	movs	r2, #4
 802edb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802edba:	e114      	b.n	802efe6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802edbc:	7bbb      	ldrb	r3, [r7, #14]
 802edbe:	2b03      	cmp	r3, #3
 802edc0:	f040 8111 	bne.w	802efe6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 802edc4:	687b      	ldr	r3, [r7, #4]
 802edc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802edca:	3301      	adds	r3, #1
 802edcc:	b2da      	uxtb	r2, r3
 802edce:	687b      	ldr	r3, [r7, #4]
 802edd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802edd4:	687b      	ldr	r3, [r7, #4]
 802edd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802edda:	2b03      	cmp	r3, #3
 802eddc:	d903      	bls.n	802ede6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 802edde:	687b      	ldr	r3, [r7, #4]
 802ede0:	220d      	movs	r2, #13
 802ede2:	701a      	strb	r2, [r3, #0]
      break;
 802ede4:	e0ff      	b.n	802efe6 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ede6:	687b      	ldr	r3, [r7, #4]
 802ede8:	795b      	ldrb	r3, [r3, #5]
 802edea:	4619      	mov	r1, r3
 802edec:	6878      	ldr	r0, [r7, #4]
 802edee:	f001 f963 	bl	80300b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802edf2:	687b      	ldr	r3, [r7, #4]
 802edf4:	791b      	ldrb	r3, [r3, #4]
 802edf6:	4619      	mov	r1, r3
 802edf8:	6878      	ldr	r0, [r7, #4]
 802edfa:	f001 f95d 	bl	80300b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802edfe:	687b      	ldr	r3, [r7, #4]
 802ee00:	2200      	movs	r2, #0
 802ee02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802ee04:	687b      	ldr	r3, [r7, #4]
 802ee06:	2200      	movs	r2, #0
 802ee08:	701a      	strb	r2, [r3, #0]
      break;
 802ee0a:	e0ec      	b.n	802efe6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 802ee0c:	687b      	ldr	r3, [r7, #4]
 802ee0e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 802ee12:	4619      	mov	r1, r3
 802ee14:	6878      	ldr	r0, [r7, #4]
 802ee16:	f000 f9ff 	bl	802f218 <USBH_Get_CfgDesc>
 802ee1a:	4603      	mov	r3, r0
 802ee1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ee1e:	7bbb      	ldrb	r3, [r7, #14]
 802ee20:	2b00      	cmp	r3, #0
 802ee22:	d103      	bne.n	802ee2c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802ee24:	687b      	ldr	r3, [r7, #4]
 802ee26:	2205      	movs	r2, #5
 802ee28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802ee2a:	e0de      	b.n	802efea <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ee2c:	7bbb      	ldrb	r3, [r7, #14]
 802ee2e:	2b03      	cmp	r3, #3
 802ee30:	f040 80db 	bne.w	802efea <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 802ee34:	687b      	ldr	r3, [r7, #4]
 802ee36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ee3a:	3301      	adds	r3, #1
 802ee3c:	b2da      	uxtb	r2, r3
 802ee3e:	687b      	ldr	r3, [r7, #4]
 802ee40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802ee44:	687b      	ldr	r3, [r7, #4]
 802ee46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ee4a:	2b03      	cmp	r3, #3
 802ee4c:	d903      	bls.n	802ee56 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 802ee4e:	687b      	ldr	r3, [r7, #4]
 802ee50:	220d      	movs	r2, #13
 802ee52:	701a      	strb	r2, [r3, #0]
      break;
 802ee54:	e0c9      	b.n	802efea <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ee56:	687b      	ldr	r3, [r7, #4]
 802ee58:	795b      	ldrb	r3, [r3, #5]
 802ee5a:	4619      	mov	r1, r3
 802ee5c:	6878      	ldr	r0, [r7, #4]
 802ee5e:	f001 f92b 	bl	80300b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ee62:	687b      	ldr	r3, [r7, #4]
 802ee64:	791b      	ldrb	r3, [r3, #4]
 802ee66:	4619      	mov	r1, r3
 802ee68:	6878      	ldr	r0, [r7, #4]
 802ee6a:	f001 f925 	bl	80300b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802ee6e:	687b      	ldr	r3, [r7, #4]
 802ee70:	2200      	movs	r2, #0
 802ee72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802ee74:	687b      	ldr	r3, [r7, #4]
 802ee76:	2200      	movs	r2, #0
 802ee78:	701a      	strb	r2, [r3, #0]
      break;
 802ee7a:	e0b6      	b.n	802efea <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 802ee7c:	687b      	ldr	r3, [r7, #4]
 802ee7e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 802ee82:	2b00      	cmp	r3, #0
 802ee84:	d036      	beq.n	802eef4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802ee86:	687b      	ldr	r3, [r7, #4]
 802ee88:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 802ee8c:	687b      	ldr	r3, [r7, #4]
 802ee8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802ee92:	23ff      	movs	r3, #255	; 0xff
 802ee94:	6878      	ldr	r0, [r7, #4]
 802ee96:	f000 f9e3 	bl	802f260 <USBH_Get_StringDesc>
 802ee9a:	4603      	mov	r3, r0
 802ee9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802ee9e:	7bbb      	ldrb	r3, [r7, #14]
 802eea0:	2b00      	cmp	r3, #0
 802eea2:	d111      	bne.n	802eec8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802eea4:	687b      	ldr	r3, [r7, #4]
 802eea6:	2206      	movs	r2, #6
 802eea8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802eeaa:	687b      	ldr	r3, [r7, #4]
 802eeac:	2205      	movs	r2, #5
 802eeae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802eeb2:	687b      	ldr	r3, [r7, #4]
 802eeb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802eeb8:	687b      	ldr	r3, [r7, #4]
 802eeba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802eebe:	2200      	movs	r2, #0
 802eec0:	4619      	mov	r1, r3
 802eec2:	f007 fa09 	bl	80362d8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802eec6:	e092      	b.n	802efee <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802eec8:	7bbb      	ldrb	r3, [r7, #14]
 802eeca:	2b03      	cmp	r3, #3
 802eecc:	f040 808f 	bne.w	802efee <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802eed0:	687b      	ldr	r3, [r7, #4]
 802eed2:	2206      	movs	r2, #6
 802eed4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802eed6:	687b      	ldr	r3, [r7, #4]
 802eed8:	2205      	movs	r2, #5
 802eeda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802eede:	687b      	ldr	r3, [r7, #4]
 802eee0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802eee4:	687b      	ldr	r3, [r7, #4]
 802eee6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802eeea:	2200      	movs	r2, #0
 802eeec:	4619      	mov	r1, r3
 802eeee:	f007 f9f3 	bl	80362d8 <osMessagePut>
      break;
 802eef2:	e07c      	b.n	802efee <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802eef4:	687b      	ldr	r3, [r7, #4]
 802eef6:	2206      	movs	r2, #6
 802eef8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802eefa:	687b      	ldr	r3, [r7, #4]
 802eefc:	2205      	movs	r2, #5
 802eefe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802ef02:	687b      	ldr	r3, [r7, #4]
 802ef04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802ef08:	687b      	ldr	r3, [r7, #4]
 802ef0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802ef0e:	2200      	movs	r2, #0
 802ef10:	4619      	mov	r1, r3
 802ef12:	f007 f9e1 	bl	80362d8 <osMessagePut>
      break;
 802ef16:	e06a      	b.n	802efee <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 802ef18:	687b      	ldr	r3, [r7, #4]
 802ef1a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 802ef1e:	2b00      	cmp	r3, #0
 802ef20:	d027      	beq.n	802ef72 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802ef22:	687b      	ldr	r3, [r7, #4]
 802ef24:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 802ef28:	687b      	ldr	r3, [r7, #4]
 802ef2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802ef2e:	23ff      	movs	r3, #255	; 0xff
 802ef30:	6878      	ldr	r0, [r7, #4]
 802ef32:	f000 f995 	bl	802f260 <USBH_Get_StringDesc>
 802ef36:	4603      	mov	r3, r0
 802ef38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802ef3a:	7bbb      	ldrb	r3, [r7, #14]
 802ef3c:	2b00      	cmp	r3, #0
 802ef3e:	d103      	bne.n	802ef48 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802ef40:	687b      	ldr	r3, [r7, #4]
 802ef42:	2207      	movs	r2, #7
 802ef44:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802ef46:	e054      	b.n	802eff2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ef48:	7bbb      	ldrb	r3, [r7, #14]
 802ef4a:	2b03      	cmp	r3, #3
 802ef4c:	d151      	bne.n	802eff2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802ef4e:	687b      	ldr	r3, [r7, #4]
 802ef50:	2207      	movs	r2, #7
 802ef52:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802ef54:	687b      	ldr	r3, [r7, #4]
 802ef56:	2205      	movs	r2, #5
 802ef58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802ef5c:	687b      	ldr	r3, [r7, #4]
 802ef5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802ef62:	687b      	ldr	r3, [r7, #4]
 802ef64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802ef68:	2200      	movs	r2, #0
 802ef6a:	4619      	mov	r1, r3
 802ef6c:	f007 f9b4 	bl	80362d8 <osMessagePut>
      break;
 802ef70:	e03f      	b.n	802eff2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802ef72:	687b      	ldr	r3, [r7, #4]
 802ef74:	2207      	movs	r2, #7
 802ef76:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802ef78:	687b      	ldr	r3, [r7, #4]
 802ef7a:	2205      	movs	r2, #5
 802ef7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802ef80:	687b      	ldr	r3, [r7, #4]
 802ef82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802ef86:	687b      	ldr	r3, [r7, #4]
 802ef88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802ef8c:	2200      	movs	r2, #0
 802ef8e:	4619      	mov	r1, r3
 802ef90:	f007 f9a2 	bl	80362d8 <osMessagePut>
      break;
 802ef94:	e02d      	b.n	802eff2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 802ef96:	687b      	ldr	r3, [r7, #4]
 802ef98:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802ef9c:	2b00      	cmp	r3, #0
 802ef9e:	d017      	beq.n	802efd0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802efa0:	687b      	ldr	r3, [r7, #4]
 802efa2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 802efa6:	687b      	ldr	r3, [r7, #4]
 802efa8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802efac:	23ff      	movs	r3, #255	; 0xff
 802efae:	6878      	ldr	r0, [r7, #4]
 802efb0:	f000 f956 	bl	802f260 <USBH_Get_StringDesc>
 802efb4:	4603      	mov	r3, r0
 802efb6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802efb8:	7bbb      	ldrb	r3, [r7, #14]
 802efba:	2b00      	cmp	r3, #0
 802efbc:	d102      	bne.n	802efc4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 802efbe:	2300      	movs	r3, #0
 802efc0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 802efc2:	e018      	b.n	802eff6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802efc4:	7bbb      	ldrb	r3, [r7, #14]
 802efc6:	2b03      	cmp	r3, #3
 802efc8:	d115      	bne.n	802eff6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 802efca:	2300      	movs	r3, #0
 802efcc:	73fb      	strb	r3, [r7, #15]
      break;
 802efce:	e012      	b.n	802eff6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 802efd0:	2300      	movs	r3, #0
 802efd2:	73fb      	strb	r3, [r7, #15]
      break;
 802efd4:	e00f      	b.n	802eff6 <USBH_HandleEnum+0x44a>

    default:
      break;
 802efd6:	bf00      	nop
 802efd8:	e00e      	b.n	802eff8 <USBH_HandleEnum+0x44c>
      break;
 802efda:	bf00      	nop
 802efdc:	e00c      	b.n	802eff8 <USBH_HandleEnum+0x44c>
      break;
 802efde:	bf00      	nop
 802efe0:	e00a      	b.n	802eff8 <USBH_HandleEnum+0x44c>
      break;
 802efe2:	bf00      	nop
 802efe4:	e008      	b.n	802eff8 <USBH_HandleEnum+0x44c>
      break;
 802efe6:	bf00      	nop
 802efe8:	e006      	b.n	802eff8 <USBH_HandleEnum+0x44c>
      break;
 802efea:	bf00      	nop
 802efec:	e004      	b.n	802eff8 <USBH_HandleEnum+0x44c>
      break;
 802efee:	bf00      	nop
 802eff0:	e002      	b.n	802eff8 <USBH_HandleEnum+0x44c>
      break;
 802eff2:	bf00      	nop
 802eff4:	e000      	b.n	802eff8 <USBH_HandleEnum+0x44c>
      break;
 802eff6:	bf00      	nop
  }
  return Status;
 802eff8:	7bfb      	ldrb	r3, [r7, #15]
}
 802effa:	4618      	mov	r0, r3
 802effc:	3710      	adds	r7, #16
 802effe:	46bd      	mov	sp, r7
 802f000:	bd80      	pop	{r7, pc}
 802f002:	bf00      	nop

0802f004 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802f004:	b480      	push	{r7}
 802f006:	b083      	sub	sp, #12
 802f008:	af00      	add	r7, sp, #0
 802f00a:	6078      	str	r0, [r7, #4]
 802f00c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 802f00e:	687b      	ldr	r3, [r7, #4]
 802f010:	683a      	ldr	r2, [r7, #0]
 802f012:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802f016:	bf00      	nop
 802f018:	370c      	adds	r7, #12
 802f01a:	46bd      	mov	sp, r7
 802f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f020:	4770      	bx	lr

0802f022 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802f022:	b580      	push	{r7, lr}
 802f024:	b082      	sub	sp, #8
 802f026:	af00      	add	r7, sp, #0
 802f028:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802f02a:	687b      	ldr	r3, [r7, #4]
 802f02c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802f030:	1c5a      	adds	r2, r3, #1
 802f032:	687b      	ldr	r3, [r7, #4]
 802f034:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802f038:	6878      	ldr	r0, [r7, #4]
 802f03a:	f000 f804 	bl	802f046 <USBH_HandleSof>
}
 802f03e:	bf00      	nop
 802f040:	3708      	adds	r7, #8
 802f042:	46bd      	mov	sp, r7
 802f044:	bd80      	pop	{r7, pc}

0802f046 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802f046:	b580      	push	{r7, lr}
 802f048:	b082      	sub	sp, #8
 802f04a:	af00      	add	r7, sp, #0
 802f04c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 802f04e:	687b      	ldr	r3, [r7, #4]
 802f050:	781b      	ldrb	r3, [r3, #0]
 802f052:	b2db      	uxtb	r3, r3
 802f054:	2b0b      	cmp	r3, #11
 802f056:	d10a      	bne.n	802f06e <USBH_HandleSof+0x28>
 802f058:	687b      	ldr	r3, [r7, #4]
 802f05a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802f05e:	2b00      	cmp	r3, #0
 802f060:	d005      	beq.n	802f06e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802f062:	687b      	ldr	r3, [r7, #4]
 802f064:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802f068:	699b      	ldr	r3, [r3, #24]
 802f06a:	6878      	ldr	r0, [r7, #4]
 802f06c:	4798      	blx	r3
  }
}
 802f06e:	bf00      	nop
 802f070:	3708      	adds	r7, #8
 802f072:	46bd      	mov	sp, r7
 802f074:	bd80      	pop	{r7, pc}

0802f076 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802f076:	b580      	push	{r7, lr}
 802f078:	b082      	sub	sp, #8
 802f07a:	af00      	add	r7, sp, #0
 802f07c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 802f07e:	687b      	ldr	r3, [r7, #4]
 802f080:	2201      	movs	r2, #1
 802f082:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802f086:	687b      	ldr	r3, [r7, #4]
 802f088:	2201      	movs	r2, #1
 802f08a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802f08e:	687b      	ldr	r3, [r7, #4]
 802f090:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802f094:	687b      	ldr	r3, [r7, #4]
 802f096:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802f09a:	2200      	movs	r2, #0
 802f09c:	4619      	mov	r1, r3
 802f09e:	f007 f91b 	bl	80362d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 802f0a2:	bf00      	nop
}
 802f0a4:	3708      	adds	r7, #8
 802f0a6:	46bd      	mov	sp, r7
 802f0a8:	bd80      	pop	{r7, pc}

0802f0aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 802f0aa:	b480      	push	{r7}
 802f0ac:	b083      	sub	sp, #12
 802f0ae:	af00      	add	r7, sp, #0
 802f0b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802f0b2:	687b      	ldr	r3, [r7, #4]
 802f0b4:	2200      	movs	r2, #0
 802f0b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 802f0ba:	bf00      	nop
}
 802f0bc:	370c      	adds	r7, #12
 802f0be:	46bd      	mov	sp, r7
 802f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f0c4:	4770      	bx	lr

0802f0c6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 802f0c6:	b580      	push	{r7, lr}
 802f0c8:	b082      	sub	sp, #8
 802f0ca:	af00      	add	r7, sp, #0
 802f0cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 802f0ce:	687b      	ldr	r3, [r7, #4]
 802f0d0:	2201      	movs	r2, #1
 802f0d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802f0d6:	687b      	ldr	r3, [r7, #4]
 802f0d8:	2200      	movs	r2, #0
 802f0da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802f0de:	687b      	ldr	r3, [r7, #4]
 802f0e0:	2200      	movs	r2, #0
 802f0e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802f0e6:	687b      	ldr	r3, [r7, #4]
 802f0e8:	2201      	movs	r2, #1
 802f0ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802f0ee:	687b      	ldr	r3, [r7, #4]
 802f0f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802f0f4:	687b      	ldr	r3, [r7, #4]
 802f0f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802f0fa:	2200      	movs	r2, #0
 802f0fc:	4619      	mov	r1, r3
 802f0fe:	f007 f8eb 	bl	80362d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802f102:	2300      	movs	r3, #0
}
 802f104:	4618      	mov	r0, r3
 802f106:	3708      	adds	r7, #8
 802f108:	46bd      	mov	sp, r7
 802f10a:	bd80      	pop	{r7, pc}

0802f10c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 802f10c:	b580      	push	{r7, lr}
 802f10e:	b082      	sub	sp, #8
 802f110:	af00      	add	r7, sp, #0
 802f112:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802f114:	687b      	ldr	r3, [r7, #4]
 802f116:	2201      	movs	r2, #1
 802f118:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 802f11c:	687b      	ldr	r3, [r7, #4]
 802f11e:	2200      	movs	r2, #0
 802f120:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 802f124:	687b      	ldr	r3, [r7, #4]
 802f126:	2200      	movs	r2, #0
 802f128:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 802f12c:	6878      	ldr	r0, [r7, #4]
 802f12e:	f00a fce4 	bl	8039afa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802f132:	687b      	ldr	r3, [r7, #4]
 802f134:	791b      	ldrb	r3, [r3, #4]
 802f136:	4619      	mov	r1, r3
 802f138:	6878      	ldr	r0, [r7, #4]
 802f13a:	f000 ffbd 	bl	80300b8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802f13e:	687b      	ldr	r3, [r7, #4]
 802f140:	795b      	ldrb	r3, [r3, #5]
 802f142:	4619      	mov	r1, r3
 802f144:	6878      	ldr	r0, [r7, #4]
 802f146:	f000 ffb7 	bl	80300b8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802f14a:	687b      	ldr	r3, [r7, #4]
 802f14c:	2201      	movs	r2, #1
 802f14e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802f152:	687b      	ldr	r3, [r7, #4]
 802f154:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802f158:	687b      	ldr	r3, [r7, #4]
 802f15a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802f15e:	2200      	movs	r2, #0
 802f160:	4619      	mov	r1, r3
 802f162:	f007 f8b9 	bl	80362d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802f166:	2300      	movs	r3, #0
}
 802f168:	4618      	mov	r0, r3
 802f16a:	3708      	adds	r7, #8
 802f16c:	46bd      	mov	sp, r7
 802f16e:	bd80      	pop	{r7, pc}

0802f170 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 802f170:	b580      	push	{r7, lr}
 802f172:	b086      	sub	sp, #24
 802f174:	af00      	add	r7, sp, #0
 802f176:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 802f178:	687b      	ldr	r3, [r7, #4]
 802f17a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 802f17e:	f107 030c 	add.w	r3, r7, #12
 802f182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802f186:	4618      	mov	r0, r3
 802f188:	f007 f8e6 	bl	8036358 <osMessageGet>
    if (event.status == osEventMessage)
 802f18c:	68fb      	ldr	r3, [r7, #12]
 802f18e:	2b10      	cmp	r3, #16
 802f190:	d1f2      	bne.n	802f178 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 802f192:	6878      	ldr	r0, [r7, #4]
 802f194:	f7ff fa9e 	bl	802e6d4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 802f198:	e7ee      	b.n	802f178 <USBH_Process_OS+0x8>

0802f19a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 802f19a:	b580      	push	{r7, lr}
 802f19c:	b082      	sub	sp, #8
 802f19e:	af00      	add	r7, sp, #0
 802f1a0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802f1a2:	687b      	ldr	r3, [r7, #4]
 802f1a4:	2201      	movs	r2, #1
 802f1a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802f1aa:	687b      	ldr	r3, [r7, #4]
 802f1ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802f1b0:	687b      	ldr	r3, [r7, #4]
 802f1b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802f1b6:	2200      	movs	r2, #0
 802f1b8:	4619      	mov	r1, r3
 802f1ba:	f007 f88d 	bl	80362d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 802f1be:	2300      	movs	r3, #0
}
 802f1c0:	4618      	mov	r0, r3
 802f1c2:	3708      	adds	r7, #8
 802f1c4:	46bd      	mov	sp, r7
 802f1c6:	bd80      	pop	{r7, pc}

0802f1c8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 802f1c8:	b580      	push	{r7, lr}
 802f1ca:	b086      	sub	sp, #24
 802f1cc:	af02      	add	r7, sp, #8
 802f1ce:	6078      	str	r0, [r7, #4]
 802f1d0:	460b      	mov	r3, r1
 802f1d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 802f1d4:	687b      	ldr	r3, [r7, #4]
 802f1d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802f1da:	78fb      	ldrb	r3, [r7, #3]
 802f1dc:	b29b      	uxth	r3, r3
 802f1de:	9300      	str	r3, [sp, #0]
 802f1e0:	4613      	mov	r3, r2
 802f1e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 802f1e6:	2100      	movs	r1, #0
 802f1e8:	6878      	ldr	r0, [r7, #4]
 802f1ea:	f000 f864 	bl	802f2b6 <USBH_GetDescriptor>
 802f1ee:	4603      	mov	r3, r0
 802f1f0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 802f1f2:	7bfb      	ldrb	r3, [r7, #15]
 802f1f4:	2b00      	cmp	r3, #0
 802f1f6:	d10a      	bne.n	802f20e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 802f1f8:	687b      	ldr	r3, [r7, #4]
 802f1fa:	f203 3026 	addw	r0, r3, #806	; 0x326
 802f1fe:	687b      	ldr	r3, [r7, #4]
 802f200:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802f204:	78fa      	ldrb	r2, [r7, #3]
 802f206:	b292      	uxth	r2, r2
 802f208:	4619      	mov	r1, r3
 802f20a:	f000 f919 	bl	802f440 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802f20e:	7bfb      	ldrb	r3, [r7, #15]
}
 802f210:	4618      	mov	r0, r3
 802f212:	3710      	adds	r7, #16
 802f214:	46bd      	mov	sp, r7
 802f216:	bd80      	pop	{r7, pc}

0802f218 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 802f218:	b580      	push	{r7, lr}
 802f21a:	b086      	sub	sp, #24
 802f21c:	af02      	add	r7, sp, #8
 802f21e:	6078      	str	r0, [r7, #4]
 802f220:	460b      	mov	r3, r1
 802f222:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 802f224:	687b      	ldr	r3, [r7, #4]
 802f226:	331c      	adds	r3, #28
 802f228:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802f22a:	887b      	ldrh	r3, [r7, #2]
 802f22c:	9300      	str	r3, [sp, #0]
 802f22e:	68bb      	ldr	r3, [r7, #8]
 802f230:	f44f 7200 	mov.w	r2, #512	; 0x200
 802f234:	2100      	movs	r1, #0
 802f236:	6878      	ldr	r0, [r7, #4]
 802f238:	f000 f83d 	bl	802f2b6 <USBH_GetDescriptor>
 802f23c:	4603      	mov	r3, r0
 802f23e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 802f240:	7bfb      	ldrb	r3, [r7, #15]
 802f242:	2b00      	cmp	r3, #0
 802f244:	d107      	bne.n	802f256 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 802f246:	887b      	ldrh	r3, [r7, #2]
 802f248:	461a      	mov	r2, r3
 802f24a:	68b9      	ldr	r1, [r7, #8]
 802f24c:	6878      	ldr	r0, [r7, #4]
 802f24e:	f000 f987 	bl	802f560 <USBH_ParseCfgDesc>
 802f252:	4603      	mov	r3, r0
 802f254:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802f256:	7bfb      	ldrb	r3, [r7, #15]
}
 802f258:	4618      	mov	r0, r3
 802f25a:	3710      	adds	r7, #16
 802f25c:	46bd      	mov	sp, r7
 802f25e:	bd80      	pop	{r7, pc}

0802f260 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 802f260:	b580      	push	{r7, lr}
 802f262:	b088      	sub	sp, #32
 802f264:	af02      	add	r7, sp, #8
 802f266:	60f8      	str	r0, [r7, #12]
 802f268:	607a      	str	r2, [r7, #4]
 802f26a:	461a      	mov	r2, r3
 802f26c:	460b      	mov	r3, r1
 802f26e:	72fb      	strb	r3, [r7, #11]
 802f270:	4613      	mov	r3, r2
 802f272:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 802f274:	7afb      	ldrb	r3, [r7, #11]
 802f276:	b29b      	uxth	r3, r3
 802f278:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802f27c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 802f27e:	68fb      	ldr	r3, [r7, #12]
 802f280:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802f284:	893b      	ldrh	r3, [r7, #8]
 802f286:	9300      	str	r3, [sp, #0]
 802f288:	460b      	mov	r3, r1
 802f28a:	2100      	movs	r1, #0
 802f28c:	68f8      	ldr	r0, [r7, #12]
 802f28e:	f000 f812 	bl	802f2b6 <USBH_GetDescriptor>
 802f292:	4603      	mov	r3, r0
 802f294:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 802f296:	7dfb      	ldrb	r3, [r7, #23]
 802f298:	2b00      	cmp	r3, #0
 802f29a:	d107      	bne.n	802f2ac <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 802f29c:	68fb      	ldr	r3, [r7, #12]
 802f29e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802f2a2:	893a      	ldrh	r2, [r7, #8]
 802f2a4:	6879      	ldr	r1, [r7, #4]
 802f2a6:	4618      	mov	r0, r3
 802f2a8:	f000 fb26 	bl	802f8f8 <USBH_ParseStringDesc>
  }

  return status;
 802f2ac:	7dfb      	ldrb	r3, [r7, #23]
}
 802f2ae:	4618      	mov	r0, r3
 802f2b0:	3718      	adds	r7, #24
 802f2b2:	46bd      	mov	sp, r7
 802f2b4:	bd80      	pop	{r7, pc}

0802f2b6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 802f2b6:	b580      	push	{r7, lr}
 802f2b8:	b084      	sub	sp, #16
 802f2ba:	af00      	add	r7, sp, #0
 802f2bc:	60f8      	str	r0, [r7, #12]
 802f2be:	607b      	str	r3, [r7, #4]
 802f2c0:	460b      	mov	r3, r1
 802f2c2:	72fb      	strb	r3, [r7, #11]
 802f2c4:	4613      	mov	r3, r2
 802f2c6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802f2c8:	68fb      	ldr	r3, [r7, #12]
 802f2ca:	789b      	ldrb	r3, [r3, #2]
 802f2cc:	2b01      	cmp	r3, #1
 802f2ce:	d11c      	bne.n	802f30a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802f2d0:	7afb      	ldrb	r3, [r7, #11]
 802f2d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802f2d6:	b2da      	uxtb	r2, r3
 802f2d8:	68fb      	ldr	r3, [r7, #12]
 802f2da:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802f2dc:	68fb      	ldr	r3, [r7, #12]
 802f2de:	2206      	movs	r2, #6
 802f2e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802f2e2:	68fb      	ldr	r3, [r7, #12]
 802f2e4:	893a      	ldrh	r2, [r7, #8]
 802f2e6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802f2e8:	893b      	ldrh	r3, [r7, #8]
 802f2ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802f2ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802f2f2:	d104      	bne.n	802f2fe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 802f2f4:	68fb      	ldr	r3, [r7, #12]
 802f2f6:	f240 4209 	movw	r2, #1033	; 0x409
 802f2fa:	829a      	strh	r2, [r3, #20]
 802f2fc:	e002      	b.n	802f304 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802f2fe:	68fb      	ldr	r3, [r7, #12]
 802f300:	2200      	movs	r2, #0
 802f302:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 802f304:	68fb      	ldr	r3, [r7, #12]
 802f306:	8b3a      	ldrh	r2, [r7, #24]
 802f308:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802f30a:	8b3b      	ldrh	r3, [r7, #24]
 802f30c:	461a      	mov	r2, r3
 802f30e:	6879      	ldr	r1, [r7, #4]
 802f310:	68f8      	ldr	r0, [r7, #12]
 802f312:	f000 fb3f 	bl	802f994 <USBH_CtlReq>
 802f316:	4603      	mov	r3, r0
}
 802f318:	4618      	mov	r0, r3
 802f31a:	3710      	adds	r7, #16
 802f31c:	46bd      	mov	sp, r7
 802f31e:	bd80      	pop	{r7, pc}

0802f320 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 802f320:	b580      	push	{r7, lr}
 802f322:	b082      	sub	sp, #8
 802f324:	af00      	add	r7, sp, #0
 802f326:	6078      	str	r0, [r7, #4]
 802f328:	460b      	mov	r3, r1
 802f32a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802f32c:	687b      	ldr	r3, [r7, #4]
 802f32e:	789b      	ldrb	r3, [r3, #2]
 802f330:	2b01      	cmp	r3, #1
 802f332:	d10f      	bne.n	802f354 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 802f334:	687b      	ldr	r3, [r7, #4]
 802f336:	2200      	movs	r2, #0
 802f338:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802f33a:	687b      	ldr	r3, [r7, #4]
 802f33c:	2205      	movs	r2, #5
 802f33e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 802f340:	78fb      	ldrb	r3, [r7, #3]
 802f342:	b29a      	uxth	r2, r3
 802f344:	687b      	ldr	r3, [r7, #4]
 802f346:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802f348:	687b      	ldr	r3, [r7, #4]
 802f34a:	2200      	movs	r2, #0
 802f34c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802f34e:	687b      	ldr	r3, [r7, #4]
 802f350:	2200      	movs	r2, #0
 802f352:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802f354:	2200      	movs	r2, #0
 802f356:	2100      	movs	r1, #0
 802f358:	6878      	ldr	r0, [r7, #4]
 802f35a:	f000 fb1b 	bl	802f994 <USBH_CtlReq>
 802f35e:	4603      	mov	r3, r0
}
 802f360:	4618      	mov	r0, r3
 802f362:	3708      	adds	r7, #8
 802f364:	46bd      	mov	sp, r7
 802f366:	bd80      	pop	{r7, pc}

0802f368 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 802f368:	b580      	push	{r7, lr}
 802f36a:	b082      	sub	sp, #8
 802f36c:	af00      	add	r7, sp, #0
 802f36e:	6078      	str	r0, [r7, #4]
 802f370:	460b      	mov	r3, r1
 802f372:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 802f374:	687b      	ldr	r3, [r7, #4]
 802f376:	789b      	ldrb	r3, [r3, #2]
 802f378:	2b01      	cmp	r3, #1
 802f37a:	d10e      	bne.n	802f39a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802f37c:	687b      	ldr	r3, [r7, #4]
 802f37e:	2200      	movs	r2, #0
 802f380:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802f382:	687b      	ldr	r3, [r7, #4]
 802f384:	2209      	movs	r2, #9
 802f386:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 802f388:	687b      	ldr	r3, [r7, #4]
 802f38a:	887a      	ldrh	r2, [r7, #2]
 802f38c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802f38e:	687b      	ldr	r3, [r7, #4]
 802f390:	2200      	movs	r2, #0
 802f392:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802f394:	687b      	ldr	r3, [r7, #4]
 802f396:	2200      	movs	r2, #0
 802f398:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802f39a:	2200      	movs	r2, #0
 802f39c:	2100      	movs	r1, #0
 802f39e:	6878      	ldr	r0, [r7, #4]
 802f3a0:	f000 faf8 	bl	802f994 <USBH_CtlReq>
 802f3a4:	4603      	mov	r3, r0
}
 802f3a6:	4618      	mov	r0, r3
 802f3a8:	3708      	adds	r7, #8
 802f3aa:	46bd      	mov	sp, r7
 802f3ac:	bd80      	pop	{r7, pc}

0802f3ae <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802f3ae:	b580      	push	{r7, lr}
 802f3b0:	b082      	sub	sp, #8
 802f3b2:	af00      	add	r7, sp, #0
 802f3b4:	6078      	str	r0, [r7, #4]
 802f3b6:	460b      	mov	r3, r1
 802f3b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802f3ba:	687b      	ldr	r3, [r7, #4]
 802f3bc:	789b      	ldrb	r3, [r3, #2]
 802f3be:	2b01      	cmp	r3, #1
 802f3c0:	d10f      	bne.n	802f3e2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802f3c2:	687b      	ldr	r3, [r7, #4]
 802f3c4:	2200      	movs	r2, #0
 802f3c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802f3c8:	687b      	ldr	r3, [r7, #4]
 802f3ca:	2203      	movs	r2, #3
 802f3cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802f3ce:	78fb      	ldrb	r3, [r7, #3]
 802f3d0:	b29a      	uxth	r2, r3
 802f3d2:	687b      	ldr	r3, [r7, #4]
 802f3d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802f3d6:	687b      	ldr	r3, [r7, #4]
 802f3d8:	2200      	movs	r2, #0
 802f3da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802f3dc:	687b      	ldr	r3, [r7, #4]
 802f3de:	2200      	movs	r2, #0
 802f3e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802f3e2:	2200      	movs	r2, #0
 802f3e4:	2100      	movs	r1, #0
 802f3e6:	6878      	ldr	r0, [r7, #4]
 802f3e8:	f000 fad4 	bl	802f994 <USBH_CtlReq>
 802f3ec:	4603      	mov	r3, r0
}
 802f3ee:	4618      	mov	r0, r3
 802f3f0:	3708      	adds	r7, #8
 802f3f2:	46bd      	mov	sp, r7
 802f3f4:	bd80      	pop	{r7, pc}

0802f3f6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 802f3f6:	b580      	push	{r7, lr}
 802f3f8:	b082      	sub	sp, #8
 802f3fa:	af00      	add	r7, sp, #0
 802f3fc:	6078      	str	r0, [r7, #4]
 802f3fe:	460b      	mov	r3, r1
 802f400:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802f402:	687b      	ldr	r3, [r7, #4]
 802f404:	789b      	ldrb	r3, [r3, #2]
 802f406:	2b01      	cmp	r3, #1
 802f408:	d10f      	bne.n	802f42a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802f40a:	687b      	ldr	r3, [r7, #4]
 802f40c:	2202      	movs	r2, #2
 802f40e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802f410:	687b      	ldr	r3, [r7, #4]
 802f412:	2201      	movs	r2, #1
 802f414:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 802f416:	687b      	ldr	r3, [r7, #4]
 802f418:	2200      	movs	r2, #0
 802f41a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802f41c:	78fb      	ldrb	r3, [r7, #3]
 802f41e:	b29a      	uxth	r2, r3
 802f420:	687b      	ldr	r3, [r7, #4]
 802f422:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802f424:	687b      	ldr	r3, [r7, #4]
 802f426:	2200      	movs	r2, #0
 802f428:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 802f42a:	2200      	movs	r2, #0
 802f42c:	2100      	movs	r1, #0
 802f42e:	6878      	ldr	r0, [r7, #4]
 802f430:	f000 fab0 	bl	802f994 <USBH_CtlReq>
 802f434:	4603      	mov	r3, r0
}
 802f436:	4618      	mov	r0, r3
 802f438:	3708      	adds	r7, #8
 802f43a:	46bd      	mov	sp, r7
 802f43c:	bd80      	pop	{r7, pc}
	...

0802f440 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802f440:	b480      	push	{r7}
 802f442:	b085      	sub	sp, #20
 802f444:	af00      	add	r7, sp, #0
 802f446:	60f8      	str	r0, [r7, #12]
 802f448:	60b9      	str	r1, [r7, #8]
 802f44a:	4613      	mov	r3, r2
 802f44c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802f44e:	68bb      	ldr	r3, [r7, #8]
 802f450:	781a      	ldrb	r2, [r3, #0]
 802f452:	68fb      	ldr	r3, [r7, #12]
 802f454:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 802f456:	68bb      	ldr	r3, [r7, #8]
 802f458:	785a      	ldrb	r2, [r3, #1]
 802f45a:	68fb      	ldr	r3, [r7, #12]
 802f45c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 802f45e:	68bb      	ldr	r3, [r7, #8]
 802f460:	3302      	adds	r3, #2
 802f462:	781b      	ldrb	r3, [r3, #0]
 802f464:	b29a      	uxth	r2, r3
 802f466:	68bb      	ldr	r3, [r7, #8]
 802f468:	3303      	adds	r3, #3
 802f46a:	781b      	ldrb	r3, [r3, #0]
 802f46c:	b29b      	uxth	r3, r3
 802f46e:	021b      	lsls	r3, r3, #8
 802f470:	b29b      	uxth	r3, r3
 802f472:	4313      	orrs	r3, r2
 802f474:	b29a      	uxth	r2, r3
 802f476:	68fb      	ldr	r3, [r7, #12]
 802f478:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 802f47a:	68bb      	ldr	r3, [r7, #8]
 802f47c:	791a      	ldrb	r2, [r3, #4]
 802f47e:	68fb      	ldr	r3, [r7, #12]
 802f480:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802f482:	68bb      	ldr	r3, [r7, #8]
 802f484:	795a      	ldrb	r2, [r3, #5]
 802f486:	68fb      	ldr	r3, [r7, #12]
 802f488:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 802f48a:	68bb      	ldr	r3, [r7, #8]
 802f48c:	799a      	ldrb	r2, [r3, #6]
 802f48e:	68fb      	ldr	r3, [r7, #12]
 802f490:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802f492:	68bb      	ldr	r3, [r7, #8]
 802f494:	79da      	ldrb	r2, [r3, #7]
 802f496:	68fb      	ldr	r3, [r7, #12]
 802f498:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 802f49a:	68fb      	ldr	r3, [r7, #12]
 802f49c:	79db      	ldrb	r3, [r3, #7]
 802f49e:	2b20      	cmp	r3, #32
 802f4a0:	dc0e      	bgt.n	802f4c0 <USBH_ParseDevDesc+0x80>
 802f4a2:	2b08      	cmp	r3, #8
 802f4a4:	db13      	blt.n	802f4ce <USBH_ParseDevDesc+0x8e>
 802f4a6:	3b08      	subs	r3, #8
 802f4a8:	2201      	movs	r2, #1
 802f4aa:	409a      	lsls	r2, r3
 802f4ac:	4b2b      	ldr	r3, [pc, #172]	; (802f55c <USBH_ParseDevDesc+0x11c>)
 802f4ae:	4013      	ands	r3, r2
 802f4b0:	2b00      	cmp	r3, #0
 802f4b2:	bf14      	ite	ne
 802f4b4:	2301      	movne	r3, #1
 802f4b6:	2300      	moveq	r3, #0
 802f4b8:	b2db      	uxtb	r3, r3
 802f4ba:	2b00      	cmp	r3, #0
 802f4bc:	d102      	bne.n	802f4c4 <USBH_ParseDevDesc+0x84>
 802f4be:	e006      	b.n	802f4ce <USBH_ParseDevDesc+0x8e>
 802f4c0:	2b40      	cmp	r3, #64	; 0x40
 802f4c2:	d104      	bne.n	802f4ce <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 802f4c4:	68fb      	ldr	r3, [r7, #12]
 802f4c6:	79da      	ldrb	r2, [r3, #7]
 802f4c8:	68fb      	ldr	r3, [r7, #12]
 802f4ca:	71da      	strb	r2, [r3, #7]
      break;
 802f4cc:	e003      	b.n	802f4d6 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 802f4ce:	68fb      	ldr	r3, [r7, #12]
 802f4d0:	2240      	movs	r2, #64	; 0x40
 802f4d2:	71da      	strb	r2, [r3, #7]
      break;
 802f4d4:	bf00      	nop
  }

  if (length > 8U)
 802f4d6:	88fb      	ldrh	r3, [r7, #6]
 802f4d8:	2b08      	cmp	r3, #8
 802f4da:	d939      	bls.n	802f550 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802f4dc:	68bb      	ldr	r3, [r7, #8]
 802f4de:	3308      	adds	r3, #8
 802f4e0:	781b      	ldrb	r3, [r3, #0]
 802f4e2:	b29a      	uxth	r2, r3
 802f4e4:	68bb      	ldr	r3, [r7, #8]
 802f4e6:	3309      	adds	r3, #9
 802f4e8:	781b      	ldrb	r3, [r3, #0]
 802f4ea:	b29b      	uxth	r3, r3
 802f4ec:	021b      	lsls	r3, r3, #8
 802f4ee:	b29b      	uxth	r3, r3
 802f4f0:	4313      	orrs	r3, r2
 802f4f2:	b29a      	uxth	r2, r3
 802f4f4:	68fb      	ldr	r3, [r7, #12]
 802f4f6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802f4f8:	68bb      	ldr	r3, [r7, #8]
 802f4fa:	330a      	adds	r3, #10
 802f4fc:	781b      	ldrb	r3, [r3, #0]
 802f4fe:	b29a      	uxth	r2, r3
 802f500:	68bb      	ldr	r3, [r7, #8]
 802f502:	330b      	adds	r3, #11
 802f504:	781b      	ldrb	r3, [r3, #0]
 802f506:	b29b      	uxth	r3, r3
 802f508:	021b      	lsls	r3, r3, #8
 802f50a:	b29b      	uxth	r3, r3
 802f50c:	4313      	orrs	r3, r2
 802f50e:	b29a      	uxth	r2, r3
 802f510:	68fb      	ldr	r3, [r7, #12]
 802f512:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 802f514:	68bb      	ldr	r3, [r7, #8]
 802f516:	330c      	adds	r3, #12
 802f518:	781b      	ldrb	r3, [r3, #0]
 802f51a:	b29a      	uxth	r2, r3
 802f51c:	68bb      	ldr	r3, [r7, #8]
 802f51e:	330d      	adds	r3, #13
 802f520:	781b      	ldrb	r3, [r3, #0]
 802f522:	b29b      	uxth	r3, r3
 802f524:	021b      	lsls	r3, r3, #8
 802f526:	b29b      	uxth	r3, r3
 802f528:	4313      	orrs	r3, r2
 802f52a:	b29a      	uxth	r2, r3
 802f52c:	68fb      	ldr	r3, [r7, #12]
 802f52e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802f530:	68bb      	ldr	r3, [r7, #8]
 802f532:	7b9a      	ldrb	r2, [r3, #14]
 802f534:	68fb      	ldr	r3, [r7, #12]
 802f536:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802f538:	68bb      	ldr	r3, [r7, #8]
 802f53a:	7bda      	ldrb	r2, [r3, #15]
 802f53c:	68fb      	ldr	r3, [r7, #12]
 802f53e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802f540:	68bb      	ldr	r3, [r7, #8]
 802f542:	7c1a      	ldrb	r2, [r3, #16]
 802f544:	68fb      	ldr	r3, [r7, #12]
 802f546:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802f548:	68bb      	ldr	r3, [r7, #8]
 802f54a:	7c5a      	ldrb	r2, [r3, #17]
 802f54c:	68fb      	ldr	r3, [r7, #12]
 802f54e:	745a      	strb	r2, [r3, #17]
  }
}
 802f550:	bf00      	nop
 802f552:	3714      	adds	r7, #20
 802f554:	46bd      	mov	sp, r7
 802f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f55a:	4770      	bx	lr
 802f55c:	01000101 	.word	0x01000101

0802f560 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 802f560:	b580      	push	{r7, lr}
 802f562:	b08c      	sub	sp, #48	; 0x30
 802f564:	af00      	add	r7, sp, #0
 802f566:	60f8      	str	r0, [r7, #12]
 802f568:	60b9      	str	r1, [r7, #8]
 802f56a:	4613      	mov	r3, r2
 802f56c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 802f56e:	68fb      	ldr	r3, [r7, #12]
 802f570:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802f574:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 802f576:	2300      	movs	r3, #0
 802f578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802f57c:	68bb      	ldr	r3, [r7, #8]
 802f57e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 802f580:	2300      	movs	r3, #0
 802f582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 802f586:	2300      	movs	r3, #0
 802f588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802f58c:	68bb      	ldr	r3, [r7, #8]
 802f58e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 802f590:	68bb      	ldr	r3, [r7, #8]
 802f592:	781a      	ldrb	r2, [r3, #0]
 802f594:	6a3b      	ldr	r3, [r7, #32]
 802f596:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 802f598:	68bb      	ldr	r3, [r7, #8]
 802f59a:	785a      	ldrb	r2, [r3, #1]
 802f59c:	6a3b      	ldr	r3, [r7, #32]
 802f59e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 802f5a0:	68bb      	ldr	r3, [r7, #8]
 802f5a2:	3302      	adds	r3, #2
 802f5a4:	781b      	ldrb	r3, [r3, #0]
 802f5a6:	b29a      	uxth	r2, r3
 802f5a8:	68bb      	ldr	r3, [r7, #8]
 802f5aa:	3303      	adds	r3, #3
 802f5ac:	781b      	ldrb	r3, [r3, #0]
 802f5ae:	b29b      	uxth	r3, r3
 802f5b0:	021b      	lsls	r3, r3, #8
 802f5b2:	b29b      	uxth	r3, r3
 802f5b4:	4313      	orrs	r3, r2
 802f5b6:	b29b      	uxth	r3, r3
 802f5b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802f5bc:	bf28      	it	cs
 802f5be:	f44f 7380 	movcs.w	r3, #256	; 0x100
 802f5c2:	b29a      	uxth	r2, r3
 802f5c4:	6a3b      	ldr	r3, [r7, #32]
 802f5c6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 802f5c8:	68bb      	ldr	r3, [r7, #8]
 802f5ca:	791a      	ldrb	r2, [r3, #4]
 802f5cc:	6a3b      	ldr	r3, [r7, #32]
 802f5ce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 802f5d0:	68bb      	ldr	r3, [r7, #8]
 802f5d2:	795a      	ldrb	r2, [r3, #5]
 802f5d4:	6a3b      	ldr	r3, [r7, #32]
 802f5d6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 802f5d8:	68bb      	ldr	r3, [r7, #8]
 802f5da:	799a      	ldrb	r2, [r3, #6]
 802f5dc:	6a3b      	ldr	r3, [r7, #32]
 802f5de:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 802f5e0:	68bb      	ldr	r3, [r7, #8]
 802f5e2:	79da      	ldrb	r2, [r3, #7]
 802f5e4:	6a3b      	ldr	r3, [r7, #32]
 802f5e6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 802f5e8:	68bb      	ldr	r3, [r7, #8]
 802f5ea:	7a1a      	ldrb	r2, [r3, #8]
 802f5ec:	6a3b      	ldr	r3, [r7, #32]
 802f5ee:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 802f5f0:	6a3b      	ldr	r3, [r7, #32]
 802f5f2:	781b      	ldrb	r3, [r3, #0]
 802f5f4:	2b09      	cmp	r3, #9
 802f5f6:	d002      	beq.n	802f5fe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 802f5f8:	6a3b      	ldr	r3, [r7, #32]
 802f5fa:	2209      	movs	r2, #9
 802f5fc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 802f5fe:	88fb      	ldrh	r3, [r7, #6]
 802f600:	2b09      	cmp	r3, #9
 802f602:	f240 809d 	bls.w	802f740 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 802f606:	2309      	movs	r3, #9
 802f608:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 802f60a:	2300      	movs	r3, #0
 802f60c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802f60e:	e081      	b.n	802f714 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802f610:	f107 0316 	add.w	r3, r7, #22
 802f614:	4619      	mov	r1, r3
 802f616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802f618:	f000 f9a1 	bl	802f95e <USBH_GetNextDesc>
 802f61c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 802f61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f620:	785b      	ldrb	r3, [r3, #1]
 802f622:	2b04      	cmp	r3, #4
 802f624:	d176      	bne.n	802f714 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 802f626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f628:	781b      	ldrb	r3, [r3, #0]
 802f62a:	2b09      	cmp	r3, #9
 802f62c:	d002      	beq.n	802f634 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 802f62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f630:	2209      	movs	r2, #9
 802f632:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 802f634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f638:	221a      	movs	r2, #26
 802f63a:	fb02 f303 	mul.w	r3, r2, r3
 802f63e:	3308      	adds	r3, #8
 802f640:	6a3a      	ldr	r2, [r7, #32]
 802f642:	4413      	add	r3, r2
 802f644:	3302      	adds	r3, #2
 802f646:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802f648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802f64a:	69f8      	ldr	r0, [r7, #28]
 802f64c:	f000 f87e 	bl	802f74c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 802f650:	2300      	movs	r3, #0
 802f652:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 802f656:	2300      	movs	r3, #0
 802f658:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802f65a:	e043      	b.n	802f6e4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802f65c:	f107 0316 	add.w	r3, r7, #22
 802f660:	4619      	mov	r1, r3
 802f662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802f664:	f000 f97b 	bl	802f95e <USBH_GetNextDesc>
 802f668:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802f66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f66c:	785b      	ldrb	r3, [r3, #1]
 802f66e:	2b05      	cmp	r3, #5
 802f670:	d138      	bne.n	802f6e4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 802f672:	69fb      	ldr	r3, [r7, #28]
 802f674:	795b      	ldrb	r3, [r3, #5]
 802f676:	2b01      	cmp	r3, #1
 802f678:	d10f      	bne.n	802f69a <USBH_ParseCfgDesc+0x13a>
 802f67a:	69fb      	ldr	r3, [r7, #28]
 802f67c:	799b      	ldrb	r3, [r3, #6]
 802f67e:	2b02      	cmp	r3, #2
 802f680:	d10b      	bne.n	802f69a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802f682:	69fb      	ldr	r3, [r7, #28]
 802f684:	79db      	ldrb	r3, [r3, #7]
 802f686:	2b00      	cmp	r3, #0
 802f688:	d10f      	bne.n	802f6aa <USBH_ParseCfgDesc+0x14a>
 802f68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f68c:	781b      	ldrb	r3, [r3, #0]
 802f68e:	2b09      	cmp	r3, #9
 802f690:	d00b      	beq.n	802f6aa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 802f692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f694:	2209      	movs	r2, #9
 802f696:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802f698:	e007      	b.n	802f6aa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 802f69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f69c:	781b      	ldrb	r3, [r3, #0]
 802f69e:	2b07      	cmp	r3, #7
 802f6a0:	d004      	beq.n	802f6ac <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 802f6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f6a4:	2207      	movs	r2, #7
 802f6a6:	701a      	strb	r2, [r3, #0]
 802f6a8:	e000      	b.n	802f6ac <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802f6aa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 802f6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f6b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802f6b4:	3201      	adds	r2, #1
 802f6b6:	00d2      	lsls	r2, r2, #3
 802f6b8:	211a      	movs	r1, #26
 802f6ba:	fb01 f303 	mul.w	r3, r1, r3
 802f6be:	4413      	add	r3, r2
 802f6c0:	3308      	adds	r3, #8
 802f6c2:	6a3a      	ldr	r2, [r7, #32]
 802f6c4:	4413      	add	r3, r2
 802f6c6:	3304      	adds	r3, #4
 802f6c8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 802f6ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802f6cc:	69b9      	ldr	r1, [r7, #24]
 802f6ce:	68f8      	ldr	r0, [r7, #12]
 802f6d0:	f000 f86c 	bl	802f7ac <USBH_ParseEPDesc>
 802f6d4:	4603      	mov	r3, r0
 802f6d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 802f6da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802f6de:	3301      	adds	r3, #1
 802f6e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802f6e4:	69fb      	ldr	r3, [r7, #28]
 802f6e6:	791b      	ldrb	r3, [r3, #4]
 802f6e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802f6ec:	429a      	cmp	r2, r3
 802f6ee:	d204      	bcs.n	802f6fa <USBH_ParseCfgDesc+0x19a>
 802f6f0:	6a3b      	ldr	r3, [r7, #32]
 802f6f2:	885a      	ldrh	r2, [r3, #2]
 802f6f4:	8afb      	ldrh	r3, [r7, #22]
 802f6f6:	429a      	cmp	r2, r3
 802f6f8:	d8b0      	bhi.n	802f65c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 802f6fa:	69fb      	ldr	r3, [r7, #28]
 802f6fc:	791b      	ldrb	r3, [r3, #4]
 802f6fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802f702:	429a      	cmp	r2, r3
 802f704:	d201      	bcs.n	802f70a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 802f706:	2303      	movs	r3, #3
 802f708:	e01c      	b.n	802f744 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 802f70a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f70e:	3301      	adds	r3, #1
 802f710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802f714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f718:	2b01      	cmp	r3, #1
 802f71a:	d805      	bhi.n	802f728 <USBH_ParseCfgDesc+0x1c8>
 802f71c:	6a3b      	ldr	r3, [r7, #32]
 802f71e:	885a      	ldrh	r2, [r3, #2]
 802f720:	8afb      	ldrh	r3, [r7, #22]
 802f722:	429a      	cmp	r2, r3
 802f724:	f63f af74 	bhi.w	802f610 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 802f728:	6a3b      	ldr	r3, [r7, #32]
 802f72a:	791b      	ldrb	r3, [r3, #4]
 802f72c:	2b02      	cmp	r3, #2
 802f72e:	bf28      	it	cs
 802f730:	2302      	movcs	r3, #2
 802f732:	b2db      	uxtb	r3, r3
 802f734:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802f738:	429a      	cmp	r2, r3
 802f73a:	d201      	bcs.n	802f740 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 802f73c:	2303      	movs	r3, #3
 802f73e:	e001      	b.n	802f744 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 802f740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802f744:	4618      	mov	r0, r3
 802f746:	3730      	adds	r7, #48	; 0x30
 802f748:	46bd      	mov	sp, r7
 802f74a:	bd80      	pop	{r7, pc}

0802f74c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 802f74c:	b480      	push	{r7}
 802f74e:	b083      	sub	sp, #12
 802f750:	af00      	add	r7, sp, #0
 802f752:	6078      	str	r0, [r7, #4]
 802f754:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 802f756:	683b      	ldr	r3, [r7, #0]
 802f758:	781a      	ldrb	r2, [r3, #0]
 802f75a:	687b      	ldr	r3, [r7, #4]
 802f75c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 802f75e:	683b      	ldr	r3, [r7, #0]
 802f760:	785a      	ldrb	r2, [r3, #1]
 802f762:	687b      	ldr	r3, [r7, #4]
 802f764:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 802f766:	683b      	ldr	r3, [r7, #0]
 802f768:	789a      	ldrb	r2, [r3, #2]
 802f76a:	687b      	ldr	r3, [r7, #4]
 802f76c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 802f76e:	683b      	ldr	r3, [r7, #0]
 802f770:	78da      	ldrb	r2, [r3, #3]
 802f772:	687b      	ldr	r3, [r7, #4]
 802f774:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 802f776:	683b      	ldr	r3, [r7, #0]
 802f778:	791a      	ldrb	r2, [r3, #4]
 802f77a:	687b      	ldr	r3, [r7, #4]
 802f77c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 802f77e:	683b      	ldr	r3, [r7, #0]
 802f780:	795a      	ldrb	r2, [r3, #5]
 802f782:	687b      	ldr	r3, [r7, #4]
 802f784:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 802f786:	683b      	ldr	r3, [r7, #0]
 802f788:	799a      	ldrb	r2, [r3, #6]
 802f78a:	687b      	ldr	r3, [r7, #4]
 802f78c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 802f78e:	683b      	ldr	r3, [r7, #0]
 802f790:	79da      	ldrb	r2, [r3, #7]
 802f792:	687b      	ldr	r3, [r7, #4]
 802f794:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 802f796:	683b      	ldr	r3, [r7, #0]
 802f798:	7a1a      	ldrb	r2, [r3, #8]
 802f79a:	687b      	ldr	r3, [r7, #4]
 802f79c:	721a      	strb	r2, [r3, #8]
}
 802f79e:	bf00      	nop
 802f7a0:	370c      	adds	r7, #12
 802f7a2:	46bd      	mov	sp, r7
 802f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f7a8:	4770      	bx	lr
	...

0802f7ac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 802f7ac:	b480      	push	{r7}
 802f7ae:	b087      	sub	sp, #28
 802f7b0:	af00      	add	r7, sp, #0
 802f7b2:	60f8      	str	r0, [r7, #12]
 802f7b4:	60b9      	str	r1, [r7, #8]
 802f7b6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 802f7b8:	2300      	movs	r3, #0
 802f7ba:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802f7bc:	687b      	ldr	r3, [r7, #4]
 802f7be:	781a      	ldrb	r2, [r3, #0]
 802f7c0:	68bb      	ldr	r3, [r7, #8]
 802f7c2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802f7c4:	687b      	ldr	r3, [r7, #4]
 802f7c6:	785a      	ldrb	r2, [r3, #1]
 802f7c8:	68bb      	ldr	r3, [r7, #8]
 802f7ca:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802f7cc:	687b      	ldr	r3, [r7, #4]
 802f7ce:	789a      	ldrb	r2, [r3, #2]
 802f7d0:	68bb      	ldr	r3, [r7, #8]
 802f7d2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802f7d4:	687b      	ldr	r3, [r7, #4]
 802f7d6:	78da      	ldrb	r2, [r3, #3]
 802f7d8:	68bb      	ldr	r3, [r7, #8]
 802f7da:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802f7dc:	687b      	ldr	r3, [r7, #4]
 802f7de:	3304      	adds	r3, #4
 802f7e0:	781b      	ldrb	r3, [r3, #0]
 802f7e2:	b29a      	uxth	r2, r3
 802f7e4:	687b      	ldr	r3, [r7, #4]
 802f7e6:	3305      	adds	r3, #5
 802f7e8:	781b      	ldrb	r3, [r3, #0]
 802f7ea:	b29b      	uxth	r3, r3
 802f7ec:	021b      	lsls	r3, r3, #8
 802f7ee:	b29b      	uxth	r3, r3
 802f7f0:	4313      	orrs	r3, r2
 802f7f2:	b29a      	uxth	r2, r3
 802f7f4:	68bb      	ldr	r3, [r7, #8]
 802f7f6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 802f7f8:	687b      	ldr	r3, [r7, #4]
 802f7fa:	799a      	ldrb	r2, [r3, #6]
 802f7fc:	68bb      	ldr	r3, [r7, #8]
 802f7fe:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 802f800:	68bb      	ldr	r3, [r7, #8]
 802f802:	889b      	ldrh	r3, [r3, #4]
 802f804:	2b00      	cmp	r3, #0
 802f806:	d102      	bne.n	802f80e <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 802f808:	2303      	movs	r3, #3
 802f80a:	75fb      	strb	r3, [r7, #23]
 802f80c:	e031      	b.n	802f872 <USBH_ParseEPDesc+0xc6>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 802f80e:	68bb      	ldr	r3, [r7, #8]
 802f810:	889a      	ldrh	r2, [r3, #4]
 802f812:	4b38      	ldr	r3, [pc, #224]	; (802f8f4 <USBH_ParseEPDesc+0x148>)
 802f814:	4013      	ands	r3, r2
 802f816:	b29a      	uxth	r2, r3
 802f818:	68bb      	ldr	r3, [r7, #8]
 802f81a:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 802f81c:	68bb      	ldr	r3, [r7, #8]
 802f81e:	889b      	ldrh	r3, [r3, #4]
 802f820:	b21a      	sxth	r2, r3
 802f822:	687b      	ldr	r3, [r7, #4]
 802f824:	3304      	adds	r3, #4
 802f826:	781b      	ldrb	r3, [r3, #0]
 802f828:	b299      	uxth	r1, r3
 802f82a:	687b      	ldr	r3, [r7, #4]
 802f82c:	3305      	adds	r3, #5
 802f82e:	781b      	ldrb	r3, [r3, #0]
 802f830:	b29b      	uxth	r3, r3
 802f832:	021b      	lsls	r3, r3, #8
 802f834:	b29b      	uxth	r3, r3
 802f836:	430b      	orrs	r3, r1
 802f838:	b29b      	uxth	r3, r3
 802f83a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802f83e:	2b00      	cmp	r3, #0
 802f840:	d110      	bne.n	802f864 <USBH_ParseEPDesc+0xb8>
 802f842:	687b      	ldr	r3, [r7, #4]
 802f844:	3304      	adds	r3, #4
 802f846:	781b      	ldrb	r3, [r3, #0]
 802f848:	b299      	uxth	r1, r3
 802f84a:	687b      	ldr	r3, [r7, #4]
 802f84c:	3305      	adds	r3, #5
 802f84e:	781b      	ldrb	r3, [r3, #0]
 802f850:	b29b      	uxth	r3, r3
 802f852:	021b      	lsls	r3, r3, #8
 802f854:	b29b      	uxth	r3, r3
 802f856:	430b      	orrs	r3, r1
 802f858:	b29b      	uxth	r3, r3
 802f85a:	b21b      	sxth	r3, r3
 802f85c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f860:	b21b      	sxth	r3, r3
 802f862:	e001      	b.n	802f868 <USBH_ParseEPDesc+0xbc>
 802f864:	f44f 7300 	mov.w	r3, #512	; 0x200
 802f868:	4313      	orrs	r3, r2
 802f86a:	b21b      	sxth	r3, r3
 802f86c:	b29a      	uxth	r2, r3
 802f86e:	68bb      	ldr	r3, [r7, #8]
 802f870:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 802f872:	68fb      	ldr	r3, [r7, #12]
 802f874:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802f878:	2b00      	cmp	r3, #0
 802f87a:	d116      	bne.n	802f8aa <USBH_ParseEPDesc+0xfe>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802f87c:	68bb      	ldr	r3, [r7, #8]
 802f87e:	78db      	ldrb	r3, [r3, #3]
 802f880:	f003 0303 	and.w	r3, r3, #3
 802f884:	2b01      	cmp	r3, #1
 802f886:	d005      	beq.n	802f894 <USBH_ParseEPDesc+0xe8>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 802f888:	68bb      	ldr	r3, [r7, #8]
 802f88a:	78db      	ldrb	r3, [r3, #3]
 802f88c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802f890:	2b03      	cmp	r3, #3
 802f892:	d127      	bne.n	802f8e4 <USBH_ParseEPDesc+0x138>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802f894:	68bb      	ldr	r3, [r7, #8]
 802f896:	799b      	ldrb	r3, [r3, #6]
 802f898:	2b00      	cmp	r3, #0
 802f89a:	d003      	beq.n	802f8a4 <USBH_ParseEPDesc+0xf8>
 802f89c:	68bb      	ldr	r3, [r7, #8]
 802f89e:	799b      	ldrb	r3, [r3, #6]
 802f8a0:	2b10      	cmp	r3, #16
 802f8a2:	d91f      	bls.n	802f8e4 <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 802f8a4:	2303      	movs	r3, #3
 802f8a6:	75fb      	strb	r3, [r7, #23]
 802f8a8:	e01c      	b.n	802f8e4 <USBH_ParseEPDesc+0x138>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 802f8aa:	68bb      	ldr	r3, [r7, #8]
 802f8ac:	78db      	ldrb	r3, [r3, #3]
 802f8ae:	f003 0303 	and.w	r3, r3, #3
 802f8b2:	2b01      	cmp	r3, #1
 802f8b4:	d10a      	bne.n	802f8cc <USBH_ParseEPDesc+0x120>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802f8b6:	68bb      	ldr	r3, [r7, #8]
 802f8b8:	799b      	ldrb	r3, [r3, #6]
 802f8ba:	2b00      	cmp	r3, #0
 802f8bc:	d003      	beq.n	802f8c6 <USBH_ParseEPDesc+0x11a>
 802f8be:	68bb      	ldr	r3, [r7, #8]
 802f8c0:	799b      	ldrb	r3, [r3, #6]
 802f8c2:	2b10      	cmp	r3, #16
 802f8c4:	d90e      	bls.n	802f8e4 <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 802f8c6:	2303      	movs	r3, #3
 802f8c8:	75fb      	strb	r3, [r7, #23]
 802f8ca:	e00b      	b.n	802f8e4 <USBH_ParseEPDesc+0x138>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 802f8cc:	68bb      	ldr	r3, [r7, #8]
 802f8ce:	78db      	ldrb	r3, [r3, #3]
 802f8d0:	f003 0303 	and.w	r3, r3, #3
 802f8d4:	2b03      	cmp	r3, #3
 802f8d6:	d105      	bne.n	802f8e4 <USBH_ParseEPDesc+0x138>
    {
      if (ep_descriptor->bInterval == 0U)
 802f8d8:	68bb      	ldr	r3, [r7, #8]
 802f8da:	799b      	ldrb	r3, [r3, #6]
 802f8dc:	2b00      	cmp	r3, #0
 802f8de:	d101      	bne.n	802f8e4 <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 802f8e0:	2303      	movs	r3, #3
 802f8e2:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 802f8e4:	7dfb      	ldrb	r3, [r7, #23]
}
 802f8e6:	4618      	mov	r0, r3
 802f8e8:	371c      	adds	r7, #28
 802f8ea:	46bd      	mov	sp, r7
 802f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f8f0:	4770      	bx	lr
 802f8f2:	bf00      	nop
 802f8f4:	fffff800 	.word	0xfffff800

0802f8f8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802f8f8:	b480      	push	{r7}
 802f8fa:	b087      	sub	sp, #28
 802f8fc:	af00      	add	r7, sp, #0
 802f8fe:	60f8      	str	r0, [r7, #12]
 802f900:	60b9      	str	r1, [r7, #8]
 802f902:	4613      	mov	r3, r2
 802f904:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 802f906:	68fb      	ldr	r3, [r7, #12]
 802f908:	3301      	adds	r3, #1
 802f90a:	781b      	ldrb	r3, [r3, #0]
 802f90c:	2b03      	cmp	r3, #3
 802f90e:	d120      	bne.n	802f952 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 802f910:	68fb      	ldr	r3, [r7, #12]
 802f912:	781b      	ldrb	r3, [r3, #0]
 802f914:	1e9a      	subs	r2, r3, #2
 802f916:	88fb      	ldrh	r3, [r7, #6]
 802f918:	4293      	cmp	r3, r2
 802f91a:	bf28      	it	cs
 802f91c:	4613      	movcs	r3, r2
 802f91e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 802f920:	68fb      	ldr	r3, [r7, #12]
 802f922:	3302      	adds	r3, #2
 802f924:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 802f926:	2300      	movs	r3, #0
 802f928:	82fb      	strh	r3, [r7, #22]
 802f92a:	e00b      	b.n	802f944 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802f92c:	8afb      	ldrh	r3, [r7, #22]
 802f92e:	68fa      	ldr	r2, [r7, #12]
 802f930:	4413      	add	r3, r2
 802f932:	781a      	ldrb	r2, [r3, #0]
 802f934:	68bb      	ldr	r3, [r7, #8]
 802f936:	701a      	strb	r2, [r3, #0]
      pdest++;
 802f938:	68bb      	ldr	r3, [r7, #8]
 802f93a:	3301      	adds	r3, #1
 802f93c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 802f93e:	8afb      	ldrh	r3, [r7, #22]
 802f940:	3302      	adds	r3, #2
 802f942:	82fb      	strh	r3, [r7, #22]
 802f944:	8afa      	ldrh	r2, [r7, #22]
 802f946:	8abb      	ldrh	r3, [r7, #20]
 802f948:	429a      	cmp	r2, r3
 802f94a:	d3ef      	bcc.n	802f92c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 802f94c:	68bb      	ldr	r3, [r7, #8]
 802f94e:	2200      	movs	r2, #0
 802f950:	701a      	strb	r2, [r3, #0]
  }
}
 802f952:	bf00      	nop
 802f954:	371c      	adds	r7, #28
 802f956:	46bd      	mov	sp, r7
 802f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f95c:	4770      	bx	lr

0802f95e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802f95e:	b480      	push	{r7}
 802f960:	b085      	sub	sp, #20
 802f962:	af00      	add	r7, sp, #0
 802f964:	6078      	str	r0, [r7, #4]
 802f966:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 802f968:	683b      	ldr	r3, [r7, #0]
 802f96a:	881a      	ldrh	r2, [r3, #0]
 802f96c:	687b      	ldr	r3, [r7, #4]
 802f96e:	781b      	ldrb	r3, [r3, #0]
 802f970:	b29b      	uxth	r3, r3
 802f972:	4413      	add	r3, r2
 802f974:	b29a      	uxth	r2, r3
 802f976:	683b      	ldr	r3, [r7, #0]
 802f978:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 802f97a:	687b      	ldr	r3, [r7, #4]
 802f97c:	781b      	ldrb	r3, [r3, #0]
 802f97e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802f980:	687b      	ldr	r3, [r7, #4]
 802f982:	4413      	add	r3, r2
 802f984:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802f986:	68fb      	ldr	r3, [r7, #12]
}
 802f988:	4618      	mov	r0, r3
 802f98a:	3714      	adds	r7, #20
 802f98c:	46bd      	mov	sp, r7
 802f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f992:	4770      	bx	lr

0802f994 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 802f994:	b580      	push	{r7, lr}
 802f996:	b086      	sub	sp, #24
 802f998:	af00      	add	r7, sp, #0
 802f99a:	60f8      	str	r0, [r7, #12]
 802f99c:	60b9      	str	r1, [r7, #8]
 802f99e:	4613      	mov	r3, r2
 802f9a0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 802f9a2:	2301      	movs	r3, #1
 802f9a4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 802f9a6:	68fb      	ldr	r3, [r7, #12]
 802f9a8:	789b      	ldrb	r3, [r3, #2]
 802f9aa:	2b01      	cmp	r3, #1
 802f9ac:	d002      	beq.n	802f9b4 <USBH_CtlReq+0x20>
 802f9ae:	2b02      	cmp	r3, #2
 802f9b0:	d01d      	beq.n	802f9ee <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 802f9b2:	e043      	b.n	802fa3c <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 802f9b4:	68fb      	ldr	r3, [r7, #12]
 802f9b6:	68ba      	ldr	r2, [r7, #8]
 802f9b8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802f9ba:	68fb      	ldr	r3, [r7, #12]
 802f9bc:	88fa      	ldrh	r2, [r7, #6]
 802f9be:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802f9c0:	68fb      	ldr	r3, [r7, #12]
 802f9c2:	2201      	movs	r2, #1
 802f9c4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 802f9c6:	68fb      	ldr	r3, [r7, #12]
 802f9c8:	2202      	movs	r2, #2
 802f9ca:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802f9cc:	2301      	movs	r3, #1
 802f9ce:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802f9d0:	68fb      	ldr	r3, [r7, #12]
 802f9d2:	2203      	movs	r2, #3
 802f9d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802f9d8:	68fb      	ldr	r3, [r7, #12]
 802f9da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802f9de:	68fb      	ldr	r3, [r7, #12]
 802f9e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802f9e4:	2200      	movs	r2, #0
 802f9e6:	4619      	mov	r1, r3
 802f9e8:	f006 fc76 	bl	80362d8 <osMessagePut>
      break;
 802f9ec:	e026      	b.n	802fa3c <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 802f9ee:	68f8      	ldr	r0, [r7, #12]
 802f9f0:	f000 f82a 	bl	802fa48 <USBH_HandleControl>
 802f9f4:	4603      	mov	r3, r0
 802f9f6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802f9f8:	7dfb      	ldrb	r3, [r7, #23]
 802f9fa:	2b00      	cmp	r3, #0
 802f9fc:	d002      	beq.n	802fa04 <USBH_CtlReq+0x70>
 802f9fe:	7dfb      	ldrb	r3, [r7, #23]
 802fa00:	2b03      	cmp	r3, #3
 802fa02:	d106      	bne.n	802fa12 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 802fa04:	68fb      	ldr	r3, [r7, #12]
 802fa06:	2201      	movs	r2, #1
 802fa08:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 802fa0a:	68fb      	ldr	r3, [r7, #12]
 802fa0c:	2200      	movs	r2, #0
 802fa0e:	761a      	strb	r2, [r3, #24]
 802fa10:	e005      	b.n	802fa1e <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 802fa12:	7dfb      	ldrb	r3, [r7, #23]
 802fa14:	2b02      	cmp	r3, #2
 802fa16:	d102      	bne.n	802fa1e <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 802fa18:	68fb      	ldr	r3, [r7, #12]
 802fa1a:	2201      	movs	r2, #1
 802fa1c:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fa1e:	68fb      	ldr	r3, [r7, #12]
 802fa20:	2203      	movs	r2, #3
 802fa22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fa26:	68fb      	ldr	r3, [r7, #12]
 802fa28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fa2c:	68fb      	ldr	r3, [r7, #12]
 802fa2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fa32:	2200      	movs	r2, #0
 802fa34:	4619      	mov	r1, r3
 802fa36:	f006 fc4f 	bl	80362d8 <osMessagePut>
      break;
 802fa3a:	bf00      	nop
  }
  return status;
 802fa3c:	7dfb      	ldrb	r3, [r7, #23]
}
 802fa3e:	4618      	mov	r0, r3
 802fa40:	3718      	adds	r7, #24
 802fa42:	46bd      	mov	sp, r7
 802fa44:	bd80      	pop	{r7, pc}
	...

0802fa48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 802fa48:	b580      	push	{r7, lr}
 802fa4a:	b086      	sub	sp, #24
 802fa4c:	af02      	add	r7, sp, #8
 802fa4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 802fa50:	2301      	movs	r3, #1
 802fa52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802fa54:	2300      	movs	r3, #0
 802fa56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 802fa58:	687b      	ldr	r3, [r7, #4]
 802fa5a:	7e1b      	ldrb	r3, [r3, #24]
 802fa5c:	3b01      	subs	r3, #1
 802fa5e:	2b0a      	cmp	r3, #10
 802fa60:	f200 8229 	bhi.w	802feb6 <USBH_HandleControl+0x46e>
 802fa64:	a201      	add	r2, pc, #4	; (adr r2, 802fa6c <USBH_HandleControl+0x24>)
 802fa66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fa6a:	bf00      	nop
 802fa6c:	0802fa99 	.word	0x0802fa99
 802fa70:	0802fab3 	.word	0x0802fab3
 802fa74:	0802fb55 	.word	0x0802fb55
 802fa78:	0802fb7b 	.word	0x0802fb7b
 802fa7c:	0802fc07 	.word	0x0802fc07
 802fa80:	0802fc31 	.word	0x0802fc31
 802fa84:	0802fcf3 	.word	0x0802fcf3
 802fa88:	0802fd15 	.word	0x0802fd15
 802fa8c:	0802fda7 	.word	0x0802fda7
 802fa90:	0802fdcd 	.word	0x0802fdcd
 802fa94:	0802fe5f 	.word	0x0802fe5f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 802fa98:	687b      	ldr	r3, [r7, #4]
 802fa9a:	f103 0110 	add.w	r1, r3, #16
 802fa9e:	687b      	ldr	r3, [r7, #4]
 802faa0:	795b      	ldrb	r3, [r3, #5]
 802faa2:	461a      	mov	r2, r3
 802faa4:	6878      	ldr	r0, [r7, #4]
 802faa6:	f000 fa17 	bl	802fed8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 802faaa:	687b      	ldr	r3, [r7, #4]
 802faac:	2202      	movs	r2, #2
 802faae:	761a      	strb	r2, [r3, #24]
      break;
 802fab0:	e20c      	b.n	802fecc <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802fab2:	687b      	ldr	r3, [r7, #4]
 802fab4:	795b      	ldrb	r3, [r3, #5]
 802fab6:	4619      	mov	r1, r3
 802fab8:	6878      	ldr	r0, [r7, #4]
 802faba:	f00a f90d 	bl	8039cd8 <USBH_LL_GetURBState>
 802fabe:	4603      	mov	r3, r0
 802fac0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802fac2:	7bbb      	ldrb	r3, [r7, #14]
 802fac4:	2b01      	cmp	r3, #1
 802fac6:	d12c      	bne.n	802fb22 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 802fac8:	687b      	ldr	r3, [r7, #4]
 802faca:	7c1b      	ldrb	r3, [r3, #16]
 802facc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802fad0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802fad2:	687b      	ldr	r3, [r7, #4]
 802fad4:	8adb      	ldrh	r3, [r3, #22]
 802fad6:	2b00      	cmp	r3, #0
 802fad8:	d00a      	beq.n	802faf0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 802fada:	7b7b      	ldrb	r3, [r7, #13]
 802fadc:	2b80      	cmp	r3, #128	; 0x80
 802fade:	d103      	bne.n	802fae8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802fae0:	687b      	ldr	r3, [r7, #4]
 802fae2:	2203      	movs	r2, #3
 802fae4:	761a      	strb	r2, [r3, #24]
 802fae6:	e00d      	b.n	802fb04 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 802fae8:	687b      	ldr	r3, [r7, #4]
 802faea:	2205      	movs	r2, #5
 802faec:	761a      	strb	r2, [r3, #24]
 802faee:	e009      	b.n	802fb04 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 802faf0:	7b7b      	ldrb	r3, [r7, #13]
 802faf2:	2b80      	cmp	r3, #128	; 0x80
 802faf4:	d103      	bne.n	802fafe <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 802faf6:	687b      	ldr	r3, [r7, #4]
 802faf8:	2209      	movs	r2, #9
 802fafa:	761a      	strb	r2, [r3, #24]
 802fafc:	e002      	b.n	802fb04 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 802fafe:	687b      	ldr	r3, [r7, #4]
 802fb00:	2207      	movs	r2, #7
 802fb02:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fb04:	687b      	ldr	r3, [r7, #4]
 802fb06:	2203      	movs	r2, #3
 802fb08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fb0c:	687b      	ldr	r3, [r7, #4]
 802fb0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fb12:	687b      	ldr	r3, [r7, #4]
 802fb14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fb18:	2200      	movs	r2, #0
 802fb1a:	4619      	mov	r1, r3
 802fb1c:	f006 fbdc 	bl	80362d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802fb20:	e1cb      	b.n	802feba <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802fb22:	7bbb      	ldrb	r3, [r7, #14]
 802fb24:	2b04      	cmp	r3, #4
 802fb26:	d003      	beq.n	802fb30 <USBH_HandleControl+0xe8>
 802fb28:	7bbb      	ldrb	r3, [r7, #14]
 802fb2a:	2b02      	cmp	r3, #2
 802fb2c:	f040 81c5 	bne.w	802feba <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 802fb30:	687b      	ldr	r3, [r7, #4]
 802fb32:	220b      	movs	r2, #11
 802fb34:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fb36:	687b      	ldr	r3, [r7, #4]
 802fb38:	2203      	movs	r2, #3
 802fb3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fb3e:	687b      	ldr	r3, [r7, #4]
 802fb40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fb44:	687b      	ldr	r3, [r7, #4]
 802fb46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fb4a:	2200      	movs	r2, #0
 802fb4c:	4619      	mov	r1, r3
 802fb4e:	f006 fbc3 	bl	80362d8 <osMessagePut>
      break;
 802fb52:	e1b2      	b.n	802feba <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 802fb54:	687b      	ldr	r3, [r7, #4]
 802fb56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802fb5a:	b29a      	uxth	r2, r3
 802fb5c:	687b      	ldr	r3, [r7, #4]
 802fb5e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802fb60:	687b      	ldr	r3, [r7, #4]
 802fb62:	6899      	ldr	r1, [r3, #8]
 802fb64:	687b      	ldr	r3, [r7, #4]
 802fb66:	899a      	ldrh	r2, [r3, #12]
 802fb68:	687b      	ldr	r3, [r7, #4]
 802fb6a:	791b      	ldrb	r3, [r3, #4]
 802fb6c:	6878      	ldr	r0, [r7, #4]
 802fb6e:	f000 f9f2 	bl	802ff56 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802fb72:	687b      	ldr	r3, [r7, #4]
 802fb74:	2204      	movs	r2, #4
 802fb76:	761a      	strb	r2, [r3, #24]
      break;
 802fb78:	e1a8      	b.n	802fecc <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802fb7a:	687b      	ldr	r3, [r7, #4]
 802fb7c:	791b      	ldrb	r3, [r3, #4]
 802fb7e:	4619      	mov	r1, r3
 802fb80:	6878      	ldr	r0, [r7, #4]
 802fb82:	f00a f8a9 	bl	8039cd8 <USBH_LL_GetURBState>
 802fb86:	4603      	mov	r3, r0
 802fb88:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802fb8a:	7bbb      	ldrb	r3, [r7, #14]
 802fb8c:	2b01      	cmp	r3, #1
 802fb8e:	d110      	bne.n	802fbb2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802fb90:	687b      	ldr	r3, [r7, #4]
 802fb92:	2209      	movs	r2, #9
 802fb94:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fb96:	687b      	ldr	r3, [r7, #4]
 802fb98:	2203      	movs	r2, #3
 802fb9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fb9e:	687b      	ldr	r3, [r7, #4]
 802fba0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fba4:	687b      	ldr	r3, [r7, #4]
 802fba6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fbaa:	2200      	movs	r2, #0
 802fbac:	4619      	mov	r1, r3
 802fbae:	f006 fb93 	bl	80362d8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802fbb2:	7bbb      	ldrb	r3, [r7, #14]
 802fbb4:	2b05      	cmp	r3, #5
 802fbb6:	d110      	bne.n	802fbda <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802fbb8:	2303      	movs	r3, #3
 802fbba:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fbbc:	687b      	ldr	r3, [r7, #4]
 802fbbe:	2203      	movs	r2, #3
 802fbc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fbc4:	687b      	ldr	r3, [r7, #4]
 802fbc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fbca:	687b      	ldr	r3, [r7, #4]
 802fbcc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fbd0:	2200      	movs	r2, #0
 802fbd2:	4619      	mov	r1, r3
 802fbd4:	f006 fb80 	bl	80362d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802fbd8:	e171      	b.n	802febe <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 802fbda:	7bbb      	ldrb	r3, [r7, #14]
 802fbdc:	2b04      	cmp	r3, #4
 802fbde:	f040 816e 	bne.w	802febe <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 802fbe2:	687b      	ldr	r3, [r7, #4]
 802fbe4:	220b      	movs	r2, #11
 802fbe6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fbe8:	687b      	ldr	r3, [r7, #4]
 802fbea:	2203      	movs	r2, #3
 802fbec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fbf0:	687b      	ldr	r3, [r7, #4]
 802fbf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fbf6:	687b      	ldr	r3, [r7, #4]
 802fbf8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fbfc:	2200      	movs	r2, #0
 802fbfe:	4619      	mov	r1, r3
 802fc00:	f006 fb6a 	bl	80362d8 <osMessagePut>
      break;
 802fc04:	e15b      	b.n	802febe <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 802fc06:	687b      	ldr	r3, [r7, #4]
 802fc08:	6899      	ldr	r1, [r3, #8]
 802fc0a:	687b      	ldr	r3, [r7, #4]
 802fc0c:	899a      	ldrh	r2, [r3, #12]
 802fc0e:	687b      	ldr	r3, [r7, #4]
 802fc10:	795b      	ldrb	r3, [r3, #5]
 802fc12:	2001      	movs	r0, #1
 802fc14:	9000      	str	r0, [sp, #0]
 802fc16:	6878      	ldr	r0, [r7, #4]
 802fc18:	f000 f978 	bl	802ff0c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 802fc1c:	687b      	ldr	r3, [r7, #4]
 802fc1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802fc22:	b29a      	uxth	r2, r3
 802fc24:	687b      	ldr	r3, [r7, #4]
 802fc26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 802fc28:	687b      	ldr	r3, [r7, #4]
 802fc2a:	2206      	movs	r2, #6
 802fc2c:	761a      	strb	r2, [r3, #24]
      break;
 802fc2e:	e14d      	b.n	802fecc <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802fc30:	687b      	ldr	r3, [r7, #4]
 802fc32:	795b      	ldrb	r3, [r3, #5]
 802fc34:	4619      	mov	r1, r3
 802fc36:	6878      	ldr	r0, [r7, #4]
 802fc38:	f00a f84e 	bl	8039cd8 <USBH_LL_GetURBState>
 802fc3c:	4603      	mov	r3, r0
 802fc3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802fc40:	7bbb      	ldrb	r3, [r7, #14]
 802fc42:	2b01      	cmp	r3, #1
 802fc44:	d111      	bne.n	802fc6a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 802fc46:	687b      	ldr	r3, [r7, #4]
 802fc48:	2207      	movs	r2, #7
 802fc4a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fc4c:	687b      	ldr	r3, [r7, #4]
 802fc4e:	2203      	movs	r2, #3
 802fc50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fc54:	687b      	ldr	r3, [r7, #4]
 802fc56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fc5a:	687b      	ldr	r3, [r7, #4]
 802fc5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fc60:	2200      	movs	r2, #0
 802fc62:	4619      	mov	r1, r3
 802fc64:	f006 fb38 	bl	80362d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802fc68:	e12b      	b.n	802fec2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 802fc6a:	7bbb      	ldrb	r3, [r7, #14]
 802fc6c:	2b05      	cmp	r3, #5
 802fc6e:	d113      	bne.n	802fc98 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 802fc70:	687b      	ldr	r3, [r7, #4]
 802fc72:	220c      	movs	r2, #12
 802fc74:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 802fc76:	2303      	movs	r3, #3
 802fc78:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fc7a:	687b      	ldr	r3, [r7, #4]
 802fc7c:	2203      	movs	r2, #3
 802fc7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fc82:	687b      	ldr	r3, [r7, #4]
 802fc84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fc88:	687b      	ldr	r3, [r7, #4]
 802fc8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fc8e:	2200      	movs	r2, #0
 802fc90:	4619      	mov	r1, r3
 802fc92:	f006 fb21 	bl	80362d8 <osMessagePut>
      break;
 802fc96:	e114      	b.n	802fec2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 802fc98:	7bbb      	ldrb	r3, [r7, #14]
 802fc9a:	2b02      	cmp	r3, #2
 802fc9c:	d111      	bne.n	802fcc2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 802fc9e:	687b      	ldr	r3, [r7, #4]
 802fca0:	2205      	movs	r2, #5
 802fca2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fca4:	687b      	ldr	r3, [r7, #4]
 802fca6:	2203      	movs	r2, #3
 802fca8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fcac:	687b      	ldr	r3, [r7, #4]
 802fcae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fcb2:	687b      	ldr	r3, [r7, #4]
 802fcb4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fcb8:	2200      	movs	r2, #0
 802fcba:	4619      	mov	r1, r3
 802fcbc:	f006 fb0c 	bl	80362d8 <osMessagePut>
      break;
 802fcc0:	e0ff      	b.n	802fec2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 802fcc2:	7bbb      	ldrb	r3, [r7, #14]
 802fcc4:	2b04      	cmp	r3, #4
 802fcc6:	f040 80fc 	bne.w	802fec2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 802fcca:	687b      	ldr	r3, [r7, #4]
 802fccc:	220b      	movs	r2, #11
 802fcce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802fcd0:	2302      	movs	r3, #2
 802fcd2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fcd4:	687b      	ldr	r3, [r7, #4]
 802fcd6:	2203      	movs	r2, #3
 802fcd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fcdc:	687b      	ldr	r3, [r7, #4]
 802fcde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fce2:	687b      	ldr	r3, [r7, #4]
 802fce4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fce8:	2200      	movs	r2, #0
 802fcea:	4619      	mov	r1, r3
 802fcec:	f006 faf4 	bl	80362d8 <osMessagePut>
      break;
 802fcf0:	e0e7      	b.n	802fec2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 802fcf2:	687b      	ldr	r3, [r7, #4]
 802fcf4:	791b      	ldrb	r3, [r3, #4]
 802fcf6:	2200      	movs	r2, #0
 802fcf8:	2100      	movs	r1, #0
 802fcfa:	6878      	ldr	r0, [r7, #4]
 802fcfc:	f000 f92b 	bl	802ff56 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802fd00:	687b      	ldr	r3, [r7, #4]
 802fd02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802fd06:	b29a      	uxth	r2, r3
 802fd08:	687b      	ldr	r3, [r7, #4]
 802fd0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 802fd0c:	687b      	ldr	r3, [r7, #4]
 802fd0e:	2208      	movs	r2, #8
 802fd10:	761a      	strb	r2, [r3, #24]

      break;
 802fd12:	e0db      	b.n	802fecc <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802fd14:	687b      	ldr	r3, [r7, #4]
 802fd16:	791b      	ldrb	r3, [r3, #4]
 802fd18:	4619      	mov	r1, r3
 802fd1a:	6878      	ldr	r0, [r7, #4]
 802fd1c:	f009 ffdc 	bl	8039cd8 <USBH_LL_GetURBState>
 802fd20:	4603      	mov	r3, r0
 802fd22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802fd24:	7bbb      	ldrb	r3, [r7, #14]
 802fd26:	2b01      	cmp	r3, #1
 802fd28:	d113      	bne.n	802fd52 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 802fd2a:	687b      	ldr	r3, [r7, #4]
 802fd2c:	220d      	movs	r2, #13
 802fd2e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802fd30:	2300      	movs	r3, #0
 802fd32:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fd34:	687b      	ldr	r3, [r7, #4]
 802fd36:	2203      	movs	r2, #3
 802fd38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fd3c:	687b      	ldr	r3, [r7, #4]
 802fd3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fd42:	687b      	ldr	r3, [r7, #4]
 802fd44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fd48:	2200      	movs	r2, #0
 802fd4a:	4619      	mov	r1, r3
 802fd4c:	f006 fac4 	bl	80362d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802fd50:	e0b9      	b.n	802fec6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 802fd52:	7bbb      	ldrb	r3, [r7, #14]
 802fd54:	2b04      	cmp	r3, #4
 802fd56:	d111      	bne.n	802fd7c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 802fd58:	687b      	ldr	r3, [r7, #4]
 802fd5a:	220b      	movs	r2, #11
 802fd5c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fd5e:	687b      	ldr	r3, [r7, #4]
 802fd60:	2203      	movs	r2, #3
 802fd62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fd66:	687b      	ldr	r3, [r7, #4]
 802fd68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fd6c:	687b      	ldr	r3, [r7, #4]
 802fd6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fd72:	2200      	movs	r2, #0
 802fd74:	4619      	mov	r1, r3
 802fd76:	f006 faaf 	bl	80362d8 <osMessagePut>
      break;
 802fd7a:	e0a4      	b.n	802fec6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 802fd7c:	7bbb      	ldrb	r3, [r7, #14]
 802fd7e:	2b05      	cmp	r3, #5
 802fd80:	f040 80a1 	bne.w	802fec6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 802fd84:	2303      	movs	r3, #3
 802fd86:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fd88:	687b      	ldr	r3, [r7, #4]
 802fd8a:	2203      	movs	r2, #3
 802fd8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fd90:	687b      	ldr	r3, [r7, #4]
 802fd92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fd96:	687b      	ldr	r3, [r7, #4]
 802fd98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fd9c:	2200      	movs	r2, #0
 802fd9e:	4619      	mov	r1, r3
 802fda0:	f006 fa9a 	bl	80362d8 <osMessagePut>
      break;
 802fda4:	e08f      	b.n	802fec6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 802fda6:	687b      	ldr	r3, [r7, #4]
 802fda8:	795b      	ldrb	r3, [r3, #5]
 802fdaa:	2201      	movs	r2, #1
 802fdac:	9200      	str	r2, [sp, #0]
 802fdae:	2200      	movs	r2, #0
 802fdb0:	2100      	movs	r1, #0
 802fdb2:	6878      	ldr	r0, [r7, #4]
 802fdb4:	f000 f8aa 	bl	802ff0c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802fdb8:	687b      	ldr	r3, [r7, #4]
 802fdba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802fdbe:	b29a      	uxth	r2, r3
 802fdc0:	687b      	ldr	r3, [r7, #4]
 802fdc2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 802fdc4:	687b      	ldr	r3, [r7, #4]
 802fdc6:	220a      	movs	r2, #10
 802fdc8:	761a      	strb	r2, [r3, #24]
      break;
 802fdca:	e07f      	b.n	802fecc <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802fdcc:	687b      	ldr	r3, [r7, #4]
 802fdce:	795b      	ldrb	r3, [r3, #5]
 802fdd0:	4619      	mov	r1, r3
 802fdd2:	6878      	ldr	r0, [r7, #4]
 802fdd4:	f009 ff80 	bl	8039cd8 <USBH_LL_GetURBState>
 802fdd8:	4603      	mov	r3, r0
 802fdda:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 802fddc:	7bbb      	ldrb	r3, [r7, #14]
 802fdde:	2b01      	cmp	r3, #1
 802fde0:	d113      	bne.n	802fe0a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 802fde2:	2300      	movs	r3, #0
 802fde4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 802fde6:	687b      	ldr	r3, [r7, #4]
 802fde8:	220d      	movs	r2, #13
 802fdea:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fdec:	687b      	ldr	r3, [r7, #4]
 802fdee:	2203      	movs	r2, #3
 802fdf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fdf4:	687b      	ldr	r3, [r7, #4]
 802fdf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fdfa:	687b      	ldr	r3, [r7, #4]
 802fdfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fe00:	2200      	movs	r2, #0
 802fe02:	4619      	mov	r1, r3
 802fe04:	f006 fa68 	bl	80362d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802fe08:	e05f      	b.n	802feca <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 802fe0a:	7bbb      	ldrb	r3, [r7, #14]
 802fe0c:	2b02      	cmp	r3, #2
 802fe0e:	d111      	bne.n	802fe34 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 802fe10:	687b      	ldr	r3, [r7, #4]
 802fe12:	2209      	movs	r2, #9
 802fe14:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fe16:	687b      	ldr	r3, [r7, #4]
 802fe18:	2203      	movs	r2, #3
 802fe1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fe1e:	687b      	ldr	r3, [r7, #4]
 802fe20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fe24:	687b      	ldr	r3, [r7, #4]
 802fe26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fe2a:	2200      	movs	r2, #0
 802fe2c:	4619      	mov	r1, r3
 802fe2e:	f006 fa53 	bl	80362d8 <osMessagePut>
      break;
 802fe32:	e04a      	b.n	802feca <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 802fe34:	7bbb      	ldrb	r3, [r7, #14]
 802fe36:	2b04      	cmp	r3, #4
 802fe38:	d147      	bne.n	802feca <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 802fe3a:	687b      	ldr	r3, [r7, #4]
 802fe3c:	220b      	movs	r2, #11
 802fe3e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fe40:	687b      	ldr	r3, [r7, #4]
 802fe42:	2203      	movs	r2, #3
 802fe44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fe48:	687b      	ldr	r3, [r7, #4]
 802fe4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fe4e:	687b      	ldr	r3, [r7, #4]
 802fe50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fe54:	2200      	movs	r2, #0
 802fe56:	4619      	mov	r1, r3
 802fe58:	f006 fa3e 	bl	80362d8 <osMessagePut>
      break;
 802fe5c:	e035      	b.n	802feca <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802fe5e:	687b      	ldr	r3, [r7, #4]
 802fe60:	7e5b      	ldrb	r3, [r3, #25]
 802fe62:	3301      	adds	r3, #1
 802fe64:	b2da      	uxtb	r2, r3
 802fe66:	687b      	ldr	r3, [r7, #4]
 802fe68:	765a      	strb	r2, [r3, #25]
 802fe6a:	687b      	ldr	r3, [r7, #4]
 802fe6c:	7e5b      	ldrb	r3, [r3, #25]
 802fe6e:	2b02      	cmp	r3, #2
 802fe70:	d806      	bhi.n	802fe80 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802fe72:	687b      	ldr	r3, [r7, #4]
 802fe74:	2201      	movs	r2, #1
 802fe76:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 802fe78:	687b      	ldr	r3, [r7, #4]
 802fe7a:	2201      	movs	r2, #1
 802fe7c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802fe7e:	e025      	b.n	802fecc <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802fe80:	687b      	ldr	r3, [r7, #4]
 802fe82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802fe86:	2106      	movs	r1, #6
 802fe88:	6878      	ldr	r0, [r7, #4]
 802fe8a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 802fe8c:	687b      	ldr	r3, [r7, #4]
 802fe8e:	2200      	movs	r2, #0
 802fe90:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802fe92:	687b      	ldr	r3, [r7, #4]
 802fe94:	795b      	ldrb	r3, [r3, #5]
 802fe96:	4619      	mov	r1, r3
 802fe98:	6878      	ldr	r0, [r7, #4]
 802fe9a:	f000 f90d 	bl	80300b8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802fe9e:	687b      	ldr	r3, [r7, #4]
 802fea0:	791b      	ldrb	r3, [r3, #4]
 802fea2:	4619      	mov	r1, r3
 802fea4:	6878      	ldr	r0, [r7, #4]
 802fea6:	f000 f907 	bl	80300b8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 802feaa:	687b      	ldr	r3, [r7, #4]
 802feac:	2200      	movs	r2, #0
 802feae:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 802feb0:	2302      	movs	r3, #2
 802feb2:	73fb      	strb	r3, [r7, #15]
      break;
 802feb4:	e00a      	b.n	802fecc <USBH_HandleControl+0x484>

    default:
      break;
 802feb6:	bf00      	nop
 802feb8:	e008      	b.n	802fecc <USBH_HandleControl+0x484>
      break;
 802feba:	bf00      	nop
 802febc:	e006      	b.n	802fecc <USBH_HandleControl+0x484>
      break;
 802febe:	bf00      	nop
 802fec0:	e004      	b.n	802fecc <USBH_HandleControl+0x484>
      break;
 802fec2:	bf00      	nop
 802fec4:	e002      	b.n	802fecc <USBH_HandleControl+0x484>
      break;
 802fec6:	bf00      	nop
 802fec8:	e000      	b.n	802fecc <USBH_HandleControl+0x484>
      break;
 802feca:	bf00      	nop
  }

  return status;
 802fecc:	7bfb      	ldrb	r3, [r7, #15]
}
 802fece:	4618      	mov	r0, r3
 802fed0:	3710      	adds	r7, #16
 802fed2:	46bd      	mov	sp, r7
 802fed4:	bd80      	pop	{r7, pc}
 802fed6:	bf00      	nop

0802fed8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 802fed8:	b580      	push	{r7, lr}
 802feda:	b088      	sub	sp, #32
 802fedc:	af04      	add	r7, sp, #16
 802fede:	60f8      	str	r0, [r7, #12]
 802fee0:	60b9      	str	r1, [r7, #8]
 802fee2:	4613      	mov	r3, r2
 802fee4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802fee6:	79f9      	ldrb	r1, [r7, #7]
 802fee8:	2300      	movs	r3, #0
 802feea:	9303      	str	r3, [sp, #12]
 802feec:	2308      	movs	r3, #8
 802feee:	9302      	str	r3, [sp, #8]
 802fef0:	68bb      	ldr	r3, [r7, #8]
 802fef2:	9301      	str	r3, [sp, #4]
 802fef4:	2300      	movs	r3, #0
 802fef6:	9300      	str	r3, [sp, #0]
 802fef8:	2300      	movs	r3, #0
 802fefa:	2200      	movs	r2, #0
 802fefc:	68f8      	ldr	r0, [r7, #12]
 802fefe:	f009 feba 	bl	8039c76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802ff02:	2300      	movs	r3, #0
}
 802ff04:	4618      	mov	r0, r3
 802ff06:	3710      	adds	r7, #16
 802ff08:	46bd      	mov	sp, r7
 802ff0a:	bd80      	pop	{r7, pc}

0802ff0c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 802ff0c:	b580      	push	{r7, lr}
 802ff0e:	b088      	sub	sp, #32
 802ff10:	af04      	add	r7, sp, #16
 802ff12:	60f8      	str	r0, [r7, #12]
 802ff14:	60b9      	str	r1, [r7, #8]
 802ff16:	4611      	mov	r1, r2
 802ff18:	461a      	mov	r2, r3
 802ff1a:	460b      	mov	r3, r1
 802ff1c:	80fb      	strh	r3, [r7, #6]
 802ff1e:	4613      	mov	r3, r2
 802ff20:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802ff22:	68fb      	ldr	r3, [r7, #12]
 802ff24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802ff28:	2b00      	cmp	r3, #0
 802ff2a:	d001      	beq.n	802ff30 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 802ff2c:	2300      	movs	r3, #0
 802ff2e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802ff30:	7979      	ldrb	r1, [r7, #5]
 802ff32:	7e3b      	ldrb	r3, [r7, #24]
 802ff34:	9303      	str	r3, [sp, #12]
 802ff36:	88fb      	ldrh	r3, [r7, #6]
 802ff38:	9302      	str	r3, [sp, #8]
 802ff3a:	68bb      	ldr	r3, [r7, #8]
 802ff3c:	9301      	str	r3, [sp, #4]
 802ff3e:	2301      	movs	r3, #1
 802ff40:	9300      	str	r3, [sp, #0]
 802ff42:	2300      	movs	r3, #0
 802ff44:	2200      	movs	r2, #0
 802ff46:	68f8      	ldr	r0, [r7, #12]
 802ff48:	f009 fe95 	bl	8039c76 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 802ff4c:	2300      	movs	r3, #0
}
 802ff4e:	4618      	mov	r0, r3
 802ff50:	3710      	adds	r7, #16
 802ff52:	46bd      	mov	sp, r7
 802ff54:	bd80      	pop	{r7, pc}

0802ff56 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 802ff56:	b580      	push	{r7, lr}
 802ff58:	b088      	sub	sp, #32
 802ff5a:	af04      	add	r7, sp, #16
 802ff5c:	60f8      	str	r0, [r7, #12]
 802ff5e:	60b9      	str	r1, [r7, #8]
 802ff60:	4611      	mov	r1, r2
 802ff62:	461a      	mov	r2, r3
 802ff64:	460b      	mov	r3, r1
 802ff66:	80fb      	strh	r3, [r7, #6]
 802ff68:	4613      	mov	r3, r2
 802ff6a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802ff6c:	7979      	ldrb	r1, [r7, #5]
 802ff6e:	2300      	movs	r3, #0
 802ff70:	9303      	str	r3, [sp, #12]
 802ff72:	88fb      	ldrh	r3, [r7, #6]
 802ff74:	9302      	str	r3, [sp, #8]
 802ff76:	68bb      	ldr	r3, [r7, #8]
 802ff78:	9301      	str	r3, [sp, #4]
 802ff7a:	2301      	movs	r3, #1
 802ff7c:	9300      	str	r3, [sp, #0]
 802ff7e:	2300      	movs	r3, #0
 802ff80:	2201      	movs	r2, #1
 802ff82:	68f8      	ldr	r0, [r7, #12]
 802ff84:	f009 fe77 	bl	8039c76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802ff88:	2300      	movs	r3, #0

}
 802ff8a:	4618      	mov	r0, r3
 802ff8c:	3710      	adds	r7, #16
 802ff8e:	46bd      	mov	sp, r7
 802ff90:	bd80      	pop	{r7, pc}

0802ff92 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802ff92:	b580      	push	{r7, lr}
 802ff94:	b088      	sub	sp, #32
 802ff96:	af04      	add	r7, sp, #16
 802ff98:	60f8      	str	r0, [r7, #12]
 802ff9a:	60b9      	str	r1, [r7, #8]
 802ff9c:	4611      	mov	r1, r2
 802ff9e:	461a      	mov	r2, r3
 802ffa0:	460b      	mov	r3, r1
 802ffa2:	80fb      	strh	r3, [r7, #6]
 802ffa4:	4613      	mov	r3, r2
 802ffa6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802ffa8:	68fb      	ldr	r3, [r7, #12]
 802ffaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802ffae:	2b00      	cmp	r3, #0
 802ffb0:	d001      	beq.n	802ffb6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 802ffb2:	2300      	movs	r3, #0
 802ffb4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802ffb6:	7979      	ldrb	r1, [r7, #5]
 802ffb8:	7e3b      	ldrb	r3, [r7, #24]
 802ffba:	9303      	str	r3, [sp, #12]
 802ffbc:	88fb      	ldrh	r3, [r7, #6]
 802ffbe:	9302      	str	r3, [sp, #8]
 802ffc0:	68bb      	ldr	r3, [r7, #8]
 802ffc2:	9301      	str	r3, [sp, #4]
 802ffc4:	2301      	movs	r3, #1
 802ffc6:	9300      	str	r3, [sp, #0]
 802ffc8:	2302      	movs	r3, #2
 802ffca:	2200      	movs	r2, #0
 802ffcc:	68f8      	ldr	r0, [r7, #12]
 802ffce:	f009 fe52 	bl	8039c76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 802ffd2:	2300      	movs	r3, #0
}
 802ffd4:	4618      	mov	r0, r3
 802ffd6:	3710      	adds	r7, #16
 802ffd8:	46bd      	mov	sp, r7
 802ffda:	bd80      	pop	{r7, pc}

0802ffdc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 802ffdc:	b580      	push	{r7, lr}
 802ffde:	b088      	sub	sp, #32
 802ffe0:	af04      	add	r7, sp, #16
 802ffe2:	60f8      	str	r0, [r7, #12]
 802ffe4:	60b9      	str	r1, [r7, #8]
 802ffe6:	4611      	mov	r1, r2
 802ffe8:	461a      	mov	r2, r3
 802ffea:	460b      	mov	r3, r1
 802ffec:	80fb      	strh	r3, [r7, #6]
 802ffee:	4613      	mov	r3, r2
 802fff0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802fff2:	7979      	ldrb	r1, [r7, #5]
 802fff4:	2300      	movs	r3, #0
 802fff6:	9303      	str	r3, [sp, #12]
 802fff8:	88fb      	ldrh	r3, [r7, #6]
 802fffa:	9302      	str	r3, [sp, #8]
 802fffc:	68bb      	ldr	r3, [r7, #8]
 802fffe:	9301      	str	r3, [sp, #4]
 8030000:	2301      	movs	r3, #1
 8030002:	9300      	str	r3, [sp, #0]
 8030004:	2302      	movs	r3, #2
 8030006:	2201      	movs	r2, #1
 8030008:	68f8      	ldr	r0, [r7, #12]
 803000a:	f009 fe34 	bl	8039c76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 803000e:	2300      	movs	r3, #0
}
 8030010:	4618      	mov	r0, r3
 8030012:	3710      	adds	r7, #16
 8030014:	46bd      	mov	sp, r7
 8030016:	bd80      	pop	{r7, pc}

08030018 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8030018:	b580      	push	{r7, lr}
 803001a:	b086      	sub	sp, #24
 803001c:	af04      	add	r7, sp, #16
 803001e:	6078      	str	r0, [r7, #4]
 8030020:	4608      	mov	r0, r1
 8030022:	4611      	mov	r1, r2
 8030024:	461a      	mov	r2, r3
 8030026:	4603      	mov	r3, r0
 8030028:	70fb      	strb	r3, [r7, #3]
 803002a:	460b      	mov	r3, r1
 803002c:	70bb      	strb	r3, [r7, #2]
 803002e:	4613      	mov	r3, r2
 8030030:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8030032:	7878      	ldrb	r0, [r7, #1]
 8030034:	78ba      	ldrb	r2, [r7, #2]
 8030036:	78f9      	ldrb	r1, [r7, #3]
 8030038:	8b3b      	ldrh	r3, [r7, #24]
 803003a:	9302      	str	r3, [sp, #8]
 803003c:	7d3b      	ldrb	r3, [r7, #20]
 803003e:	9301      	str	r3, [sp, #4]
 8030040:	7c3b      	ldrb	r3, [r7, #16]
 8030042:	9300      	str	r3, [sp, #0]
 8030044:	4603      	mov	r3, r0
 8030046:	6878      	ldr	r0, [r7, #4]
 8030048:	f009 fdc7 	bl	8039bda <USBH_LL_OpenPipe>

  return USBH_OK;
 803004c:	2300      	movs	r3, #0
}
 803004e:	4618      	mov	r0, r3
 8030050:	3708      	adds	r7, #8
 8030052:	46bd      	mov	sp, r7
 8030054:	bd80      	pop	{r7, pc}

08030056 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8030056:	b580      	push	{r7, lr}
 8030058:	b082      	sub	sp, #8
 803005a:	af00      	add	r7, sp, #0
 803005c:	6078      	str	r0, [r7, #4]
 803005e:	460b      	mov	r3, r1
 8030060:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8030062:	78fb      	ldrb	r3, [r7, #3]
 8030064:	4619      	mov	r1, r3
 8030066:	6878      	ldr	r0, [r7, #4]
 8030068:	f009 fde6 	bl	8039c38 <USBH_LL_ClosePipe>

  return USBH_OK;
 803006c:	2300      	movs	r3, #0
}
 803006e:	4618      	mov	r0, r3
 8030070:	3708      	adds	r7, #8
 8030072:	46bd      	mov	sp, r7
 8030074:	bd80      	pop	{r7, pc}

08030076 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8030076:	b580      	push	{r7, lr}
 8030078:	b084      	sub	sp, #16
 803007a:	af00      	add	r7, sp, #0
 803007c:	6078      	str	r0, [r7, #4]
 803007e:	460b      	mov	r3, r1
 8030080:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8030082:	6878      	ldr	r0, [r7, #4]
 8030084:	f000 f836 	bl	80300f4 <USBH_GetFreePipe>
 8030088:	4603      	mov	r3, r0
 803008a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 803008c:	89fb      	ldrh	r3, [r7, #14]
 803008e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8030092:	4293      	cmp	r3, r2
 8030094:	d00a      	beq.n	80300ac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8030096:	78fa      	ldrb	r2, [r7, #3]
 8030098:	89fb      	ldrh	r3, [r7, #14]
 803009a:	f003 030f 	and.w	r3, r3, #15
 803009e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80300a2:	6879      	ldr	r1, [r7, #4]
 80300a4:	33e0      	adds	r3, #224	; 0xe0
 80300a6:	009b      	lsls	r3, r3, #2
 80300a8:	440b      	add	r3, r1
 80300aa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80300ac:	89fb      	ldrh	r3, [r7, #14]
 80300ae:	b2db      	uxtb	r3, r3
}
 80300b0:	4618      	mov	r0, r3
 80300b2:	3710      	adds	r7, #16
 80300b4:	46bd      	mov	sp, r7
 80300b6:	bd80      	pop	{r7, pc}

080300b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80300b8:	b480      	push	{r7}
 80300ba:	b083      	sub	sp, #12
 80300bc:	af00      	add	r7, sp, #0
 80300be:	6078      	str	r0, [r7, #4]
 80300c0:	460b      	mov	r3, r1
 80300c2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80300c4:	78fb      	ldrb	r3, [r7, #3]
 80300c6:	2b0f      	cmp	r3, #15
 80300c8:	d80d      	bhi.n	80300e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80300ca:	78fb      	ldrb	r3, [r7, #3]
 80300cc:	687a      	ldr	r2, [r7, #4]
 80300ce:	33e0      	adds	r3, #224	; 0xe0
 80300d0:	009b      	lsls	r3, r3, #2
 80300d2:	4413      	add	r3, r2
 80300d4:	685a      	ldr	r2, [r3, #4]
 80300d6:	78fb      	ldrb	r3, [r7, #3]
 80300d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80300dc:	6879      	ldr	r1, [r7, #4]
 80300de:	33e0      	adds	r3, #224	; 0xe0
 80300e0:	009b      	lsls	r3, r3, #2
 80300e2:	440b      	add	r3, r1
 80300e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80300e6:	2300      	movs	r3, #0
}
 80300e8:	4618      	mov	r0, r3
 80300ea:	370c      	adds	r7, #12
 80300ec:	46bd      	mov	sp, r7
 80300ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80300f2:	4770      	bx	lr

080300f4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80300f4:	b480      	push	{r7}
 80300f6:	b085      	sub	sp, #20
 80300f8:	af00      	add	r7, sp, #0
 80300fa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80300fc:	2300      	movs	r3, #0
 80300fe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8030100:	2300      	movs	r3, #0
 8030102:	73fb      	strb	r3, [r7, #15]
 8030104:	e00f      	b.n	8030126 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8030106:	7bfb      	ldrb	r3, [r7, #15]
 8030108:	687a      	ldr	r2, [r7, #4]
 803010a:	33e0      	adds	r3, #224	; 0xe0
 803010c:	009b      	lsls	r3, r3, #2
 803010e:	4413      	add	r3, r2
 8030110:	685b      	ldr	r3, [r3, #4]
 8030112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8030116:	2b00      	cmp	r3, #0
 8030118:	d102      	bne.n	8030120 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 803011a:	7bfb      	ldrb	r3, [r7, #15]
 803011c:	b29b      	uxth	r3, r3
 803011e:	e007      	b.n	8030130 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8030120:	7bfb      	ldrb	r3, [r7, #15]
 8030122:	3301      	adds	r3, #1
 8030124:	73fb      	strb	r3, [r7, #15]
 8030126:	7bfb      	ldrb	r3, [r7, #15]
 8030128:	2b0f      	cmp	r3, #15
 803012a:	d9ec      	bls.n	8030106 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 803012c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8030130:	4618      	mov	r0, r3
 8030132:	3714      	adds	r7, #20
 8030134:	46bd      	mov	sp, r7
 8030136:	f85d 7b04 	ldr.w	r7, [sp], #4
 803013a:	4770      	bx	lr

0803013c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 803013c:	b580      	push	{r7, lr}
 803013e:	b084      	sub	sp, #16
 8030140:	af00      	add	r7, sp, #0
 8030142:	4603      	mov	r3, r0
 8030144:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8030146:	79fb      	ldrb	r3, [r7, #7]
 8030148:	4a08      	ldr	r2, [pc, #32]	; (803016c <disk_status+0x30>)
 803014a:	009b      	lsls	r3, r3, #2
 803014c:	4413      	add	r3, r2
 803014e:	685b      	ldr	r3, [r3, #4]
 8030150:	685b      	ldr	r3, [r3, #4]
 8030152:	79fa      	ldrb	r2, [r7, #7]
 8030154:	4905      	ldr	r1, [pc, #20]	; (803016c <disk_status+0x30>)
 8030156:	440a      	add	r2, r1
 8030158:	7a12      	ldrb	r2, [r2, #8]
 803015a:	4610      	mov	r0, r2
 803015c:	4798      	blx	r3
 803015e:	4603      	mov	r3, r0
 8030160:	73fb      	strb	r3, [r7, #15]
  return stat;
 8030162:	7bfb      	ldrb	r3, [r7, #15]
}
 8030164:	4618      	mov	r0, r3
 8030166:	3710      	adds	r7, #16
 8030168:	46bd      	mov	sp, r7
 803016a:	bd80      	pop	{r7, pc}
 803016c:	24002c28 	.word	0x24002c28

08030170 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8030170:	b580      	push	{r7, lr}
 8030172:	b084      	sub	sp, #16
 8030174:	af00      	add	r7, sp, #0
 8030176:	4603      	mov	r3, r0
 8030178:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 803017a:	2300      	movs	r3, #0
 803017c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 803017e:	79fb      	ldrb	r3, [r7, #7]
 8030180:	4a0d      	ldr	r2, [pc, #52]	; (80301b8 <disk_initialize+0x48>)
 8030182:	5cd3      	ldrb	r3, [r2, r3]
 8030184:	2b00      	cmp	r3, #0
 8030186:	d111      	bne.n	80301ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8030188:	79fb      	ldrb	r3, [r7, #7]
 803018a:	4a0b      	ldr	r2, [pc, #44]	; (80301b8 <disk_initialize+0x48>)
 803018c:	2101      	movs	r1, #1
 803018e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8030190:	79fb      	ldrb	r3, [r7, #7]
 8030192:	4a09      	ldr	r2, [pc, #36]	; (80301b8 <disk_initialize+0x48>)
 8030194:	009b      	lsls	r3, r3, #2
 8030196:	4413      	add	r3, r2
 8030198:	685b      	ldr	r3, [r3, #4]
 803019a:	681b      	ldr	r3, [r3, #0]
 803019c:	79fa      	ldrb	r2, [r7, #7]
 803019e:	4906      	ldr	r1, [pc, #24]	; (80301b8 <disk_initialize+0x48>)
 80301a0:	440a      	add	r2, r1
 80301a2:	7a12      	ldrb	r2, [r2, #8]
 80301a4:	4610      	mov	r0, r2
 80301a6:	4798      	blx	r3
 80301a8:	4603      	mov	r3, r0
 80301aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80301ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80301ae:	4618      	mov	r0, r3
 80301b0:	3710      	adds	r7, #16
 80301b2:	46bd      	mov	sp, r7
 80301b4:	bd80      	pop	{r7, pc}
 80301b6:	bf00      	nop
 80301b8:	24002c28 	.word	0x24002c28

080301bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80301bc:	b590      	push	{r4, r7, lr}
 80301be:	b087      	sub	sp, #28
 80301c0:	af00      	add	r7, sp, #0
 80301c2:	60b9      	str	r1, [r7, #8]
 80301c4:	607a      	str	r2, [r7, #4]
 80301c6:	603b      	str	r3, [r7, #0]
 80301c8:	4603      	mov	r3, r0
 80301ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80301cc:	7bfb      	ldrb	r3, [r7, #15]
 80301ce:	4a0a      	ldr	r2, [pc, #40]	; (80301f8 <disk_read+0x3c>)
 80301d0:	009b      	lsls	r3, r3, #2
 80301d2:	4413      	add	r3, r2
 80301d4:	685b      	ldr	r3, [r3, #4]
 80301d6:	689c      	ldr	r4, [r3, #8]
 80301d8:	7bfb      	ldrb	r3, [r7, #15]
 80301da:	4a07      	ldr	r2, [pc, #28]	; (80301f8 <disk_read+0x3c>)
 80301dc:	4413      	add	r3, r2
 80301de:	7a18      	ldrb	r0, [r3, #8]
 80301e0:	683b      	ldr	r3, [r7, #0]
 80301e2:	687a      	ldr	r2, [r7, #4]
 80301e4:	68b9      	ldr	r1, [r7, #8]
 80301e6:	47a0      	blx	r4
 80301e8:	4603      	mov	r3, r0
 80301ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80301ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80301ee:	4618      	mov	r0, r3
 80301f0:	371c      	adds	r7, #28
 80301f2:	46bd      	mov	sp, r7
 80301f4:	bd90      	pop	{r4, r7, pc}
 80301f6:	bf00      	nop
 80301f8:	24002c28 	.word	0x24002c28

080301fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80301fc:	b590      	push	{r4, r7, lr}
 80301fe:	b087      	sub	sp, #28
 8030200:	af00      	add	r7, sp, #0
 8030202:	60b9      	str	r1, [r7, #8]
 8030204:	607a      	str	r2, [r7, #4]
 8030206:	603b      	str	r3, [r7, #0]
 8030208:	4603      	mov	r3, r0
 803020a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 803020c:	7bfb      	ldrb	r3, [r7, #15]
 803020e:	4a0a      	ldr	r2, [pc, #40]	; (8030238 <disk_write+0x3c>)
 8030210:	009b      	lsls	r3, r3, #2
 8030212:	4413      	add	r3, r2
 8030214:	685b      	ldr	r3, [r3, #4]
 8030216:	68dc      	ldr	r4, [r3, #12]
 8030218:	7bfb      	ldrb	r3, [r7, #15]
 803021a:	4a07      	ldr	r2, [pc, #28]	; (8030238 <disk_write+0x3c>)
 803021c:	4413      	add	r3, r2
 803021e:	7a18      	ldrb	r0, [r3, #8]
 8030220:	683b      	ldr	r3, [r7, #0]
 8030222:	687a      	ldr	r2, [r7, #4]
 8030224:	68b9      	ldr	r1, [r7, #8]
 8030226:	47a0      	blx	r4
 8030228:	4603      	mov	r3, r0
 803022a:	75fb      	strb	r3, [r7, #23]
  return res;
 803022c:	7dfb      	ldrb	r3, [r7, #23]
}
 803022e:	4618      	mov	r0, r3
 8030230:	371c      	adds	r7, #28
 8030232:	46bd      	mov	sp, r7
 8030234:	bd90      	pop	{r4, r7, pc}
 8030236:	bf00      	nop
 8030238:	24002c28 	.word	0x24002c28

0803023c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 803023c:	b580      	push	{r7, lr}
 803023e:	b084      	sub	sp, #16
 8030240:	af00      	add	r7, sp, #0
 8030242:	4603      	mov	r3, r0
 8030244:	603a      	str	r2, [r7, #0]
 8030246:	71fb      	strb	r3, [r7, #7]
 8030248:	460b      	mov	r3, r1
 803024a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 803024c:	79fb      	ldrb	r3, [r7, #7]
 803024e:	4a09      	ldr	r2, [pc, #36]	; (8030274 <disk_ioctl+0x38>)
 8030250:	009b      	lsls	r3, r3, #2
 8030252:	4413      	add	r3, r2
 8030254:	685b      	ldr	r3, [r3, #4]
 8030256:	691b      	ldr	r3, [r3, #16]
 8030258:	79fa      	ldrb	r2, [r7, #7]
 803025a:	4906      	ldr	r1, [pc, #24]	; (8030274 <disk_ioctl+0x38>)
 803025c:	440a      	add	r2, r1
 803025e:	7a10      	ldrb	r0, [r2, #8]
 8030260:	79b9      	ldrb	r1, [r7, #6]
 8030262:	683a      	ldr	r2, [r7, #0]
 8030264:	4798      	blx	r3
 8030266:	4603      	mov	r3, r0
 8030268:	73fb      	strb	r3, [r7, #15]
  return res;
 803026a:	7bfb      	ldrb	r3, [r7, #15]
}
 803026c:	4618      	mov	r0, r3
 803026e:	3710      	adds	r7, #16
 8030270:	46bd      	mov	sp, r7
 8030272:	bd80      	pop	{r7, pc}
 8030274:	24002c28 	.word	0x24002c28

08030278 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8030278:	b480      	push	{r7}
 803027a:	b085      	sub	sp, #20
 803027c:	af00      	add	r7, sp, #0
 803027e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8030280:	687b      	ldr	r3, [r7, #4]
 8030282:	3301      	adds	r3, #1
 8030284:	781b      	ldrb	r3, [r3, #0]
 8030286:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8030288:	89fb      	ldrh	r3, [r7, #14]
 803028a:	021b      	lsls	r3, r3, #8
 803028c:	b21a      	sxth	r2, r3
 803028e:	687b      	ldr	r3, [r7, #4]
 8030290:	781b      	ldrb	r3, [r3, #0]
 8030292:	b21b      	sxth	r3, r3
 8030294:	4313      	orrs	r3, r2
 8030296:	b21b      	sxth	r3, r3
 8030298:	81fb      	strh	r3, [r7, #14]
	return rv;
 803029a:	89fb      	ldrh	r3, [r7, #14]
}
 803029c:	4618      	mov	r0, r3
 803029e:	3714      	adds	r7, #20
 80302a0:	46bd      	mov	sp, r7
 80302a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80302a6:	4770      	bx	lr

080302a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80302a8:	b480      	push	{r7}
 80302aa:	b085      	sub	sp, #20
 80302ac:	af00      	add	r7, sp, #0
 80302ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80302b0:	687b      	ldr	r3, [r7, #4]
 80302b2:	3303      	adds	r3, #3
 80302b4:	781b      	ldrb	r3, [r3, #0]
 80302b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80302b8:	68fb      	ldr	r3, [r7, #12]
 80302ba:	021b      	lsls	r3, r3, #8
 80302bc:	687a      	ldr	r2, [r7, #4]
 80302be:	3202      	adds	r2, #2
 80302c0:	7812      	ldrb	r2, [r2, #0]
 80302c2:	4313      	orrs	r3, r2
 80302c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80302c6:	68fb      	ldr	r3, [r7, #12]
 80302c8:	021b      	lsls	r3, r3, #8
 80302ca:	687a      	ldr	r2, [r7, #4]
 80302cc:	3201      	adds	r2, #1
 80302ce:	7812      	ldrb	r2, [r2, #0]
 80302d0:	4313      	orrs	r3, r2
 80302d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80302d4:	68fb      	ldr	r3, [r7, #12]
 80302d6:	021b      	lsls	r3, r3, #8
 80302d8:	687a      	ldr	r2, [r7, #4]
 80302da:	7812      	ldrb	r2, [r2, #0]
 80302dc:	4313      	orrs	r3, r2
 80302de:	60fb      	str	r3, [r7, #12]
	return rv;
 80302e0:	68fb      	ldr	r3, [r7, #12]
}
 80302e2:	4618      	mov	r0, r3
 80302e4:	3714      	adds	r7, #20
 80302e6:	46bd      	mov	sp, r7
 80302e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80302ec:	4770      	bx	lr

080302ee <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80302ee:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80302f2:	b09d      	sub	sp, #116	; 0x74
 80302f4:	af00      	add	r7, sp, #0
 80302f6:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 80302f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80302fa:	3307      	adds	r3, #7
 80302fc:	781b      	ldrb	r3, [r3, #0]
 80302fe:	b2db      	uxtb	r3, r3
 8030300:	2200      	movs	r2, #0
 8030302:	469a      	mov	sl, r3
 8030304:	4693      	mov	fp, r2
 8030306:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 803030a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 803030e:	f04f 0000 	mov.w	r0, #0
 8030312:	f04f 0100 	mov.w	r1, #0
 8030316:	0219      	lsls	r1, r3, #8
 8030318:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 803031c:	0210      	lsls	r0, r2, #8
 803031e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8030320:	3306      	adds	r3, #6
 8030322:	781b      	ldrb	r3, [r3, #0]
 8030324:	b2db      	uxtb	r3, r3
 8030326:	2200      	movs	r2, #0
 8030328:	461c      	mov	r4, r3
 803032a:	4615      	mov	r5, r2
 803032c:	ea40 0804 	orr.w	r8, r0, r4
 8030330:	ea41 0905 	orr.w	r9, r1, r5
 8030334:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 8030338:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 803033c:	f04f 0000 	mov.w	r0, #0
 8030340:	f04f 0100 	mov.w	r1, #0
 8030344:	0219      	lsls	r1, r3, #8
 8030346:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 803034a:	0210      	lsls	r0, r2, #8
 803034c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803034e:	3305      	adds	r3, #5
 8030350:	781b      	ldrb	r3, [r3, #0]
 8030352:	b2db      	uxtb	r3, r3
 8030354:	2200      	movs	r2, #0
 8030356:	65bb      	str	r3, [r7, #88]	; 0x58
 8030358:	65fa      	str	r2, [r7, #92]	; 0x5c
 803035a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 803035e:	4623      	mov	r3, r4
 8030360:	4303      	orrs	r3, r0
 8030362:	62bb      	str	r3, [r7, #40]	; 0x28
 8030364:	462b      	mov	r3, r5
 8030366:	430b      	orrs	r3, r1
 8030368:	62fb      	str	r3, [r7, #44]	; 0x2c
 803036a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 803036e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8030372:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8030376:	f04f 0000 	mov.w	r0, #0
 803037a:	f04f 0100 	mov.w	r1, #0
 803037e:	0219      	lsls	r1, r3, #8
 8030380:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8030384:	0210      	lsls	r0, r2, #8
 8030386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8030388:	3304      	adds	r3, #4
 803038a:	781b      	ldrb	r3, [r3, #0]
 803038c:	b2db      	uxtb	r3, r3
 803038e:	2200      	movs	r2, #0
 8030390:	653b      	str	r3, [r7, #80]	; 0x50
 8030392:	657a      	str	r2, [r7, #84]	; 0x54
 8030394:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8030398:	4623      	mov	r3, r4
 803039a:	4303      	orrs	r3, r0
 803039c:	623b      	str	r3, [r7, #32]
 803039e:	462b      	mov	r3, r5
 80303a0:	430b      	orrs	r3, r1
 80303a2:	627b      	str	r3, [r7, #36]	; 0x24
 80303a4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80303a8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 80303ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80303b0:	f04f 0000 	mov.w	r0, #0
 80303b4:	f04f 0100 	mov.w	r1, #0
 80303b8:	0219      	lsls	r1, r3, #8
 80303ba:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80303be:	0210      	lsls	r0, r2, #8
 80303c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80303c2:	3303      	adds	r3, #3
 80303c4:	781b      	ldrb	r3, [r3, #0]
 80303c6:	b2db      	uxtb	r3, r3
 80303c8:	2200      	movs	r2, #0
 80303ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80303cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80303ce:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80303d2:	4623      	mov	r3, r4
 80303d4:	4303      	orrs	r3, r0
 80303d6:	61bb      	str	r3, [r7, #24]
 80303d8:	462b      	mov	r3, r5
 80303da:	430b      	orrs	r3, r1
 80303dc:	61fb      	str	r3, [r7, #28]
 80303de:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80303e2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 80303e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80303ea:	f04f 0000 	mov.w	r0, #0
 80303ee:	f04f 0100 	mov.w	r1, #0
 80303f2:	0219      	lsls	r1, r3, #8
 80303f4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80303f8:	0210      	lsls	r0, r2, #8
 80303fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80303fc:	3302      	adds	r3, #2
 80303fe:	781b      	ldrb	r3, [r3, #0]
 8030400:	b2db      	uxtb	r3, r3
 8030402:	2200      	movs	r2, #0
 8030404:	643b      	str	r3, [r7, #64]	; 0x40
 8030406:	647a      	str	r2, [r7, #68]	; 0x44
 8030408:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 803040c:	4623      	mov	r3, r4
 803040e:	4303      	orrs	r3, r0
 8030410:	613b      	str	r3, [r7, #16]
 8030412:	462b      	mov	r3, r5
 8030414:	430b      	orrs	r3, r1
 8030416:	617b      	str	r3, [r7, #20]
 8030418:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 803041c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8030420:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8030424:	f04f 0200 	mov.w	r2, #0
 8030428:	f04f 0300 	mov.w	r3, #0
 803042c:	020b      	lsls	r3, r1, #8
 803042e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8030432:	0202      	lsls	r2, r0, #8
 8030434:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8030436:	3101      	adds	r1, #1
 8030438:	7809      	ldrb	r1, [r1, #0]
 803043a:	b2c9      	uxtb	r1, r1
 803043c:	2000      	movs	r0, #0
 803043e:	63b9      	str	r1, [r7, #56]	; 0x38
 8030440:	63f8      	str	r0, [r7, #60]	; 0x3c
 8030442:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8030446:	4621      	mov	r1, r4
 8030448:	4311      	orrs	r1, r2
 803044a:	60b9      	str	r1, [r7, #8]
 803044c:	4629      	mov	r1, r5
 803044e:	4319      	orrs	r1, r3
 8030450:	60f9      	str	r1, [r7, #12]
 8030452:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8030456:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 803045a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 803045e:	f04f 0200 	mov.w	r2, #0
 8030462:	f04f 0300 	mov.w	r3, #0
 8030466:	020b      	lsls	r3, r1, #8
 8030468:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 803046c:	0202      	lsls	r2, r0, #8
 803046e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8030470:	7809      	ldrb	r1, [r1, #0]
 8030472:	b2c9      	uxtb	r1, r1
 8030474:	2000      	movs	r0, #0
 8030476:	6339      	str	r1, [r7, #48]	; 0x30
 8030478:	6378      	str	r0, [r7, #52]	; 0x34
 803047a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 803047e:	4621      	mov	r1, r4
 8030480:	4311      	orrs	r1, r2
 8030482:	6039      	str	r1, [r7, #0]
 8030484:	4629      	mov	r1, r5
 8030486:	4319      	orrs	r1, r3
 8030488:	6079      	str	r1, [r7, #4]
 803048a:	e9d7 3400 	ldrd	r3, r4, [r7]
 803048e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8030492:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8030496:	4610      	mov	r0, r2
 8030498:	4619      	mov	r1, r3
 803049a:	3774      	adds	r7, #116	; 0x74
 803049c:	46bd      	mov	sp, r7
 803049e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80304a2:	4770      	bx	lr

080304a4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80304a4:	b480      	push	{r7}
 80304a6:	b083      	sub	sp, #12
 80304a8:	af00      	add	r7, sp, #0
 80304aa:	6078      	str	r0, [r7, #4]
 80304ac:	460b      	mov	r3, r1
 80304ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80304b0:	687b      	ldr	r3, [r7, #4]
 80304b2:	1c5a      	adds	r2, r3, #1
 80304b4:	607a      	str	r2, [r7, #4]
 80304b6:	887a      	ldrh	r2, [r7, #2]
 80304b8:	b2d2      	uxtb	r2, r2
 80304ba:	701a      	strb	r2, [r3, #0]
 80304bc:	887b      	ldrh	r3, [r7, #2]
 80304be:	0a1b      	lsrs	r3, r3, #8
 80304c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80304c2:	687b      	ldr	r3, [r7, #4]
 80304c4:	1c5a      	adds	r2, r3, #1
 80304c6:	607a      	str	r2, [r7, #4]
 80304c8:	887a      	ldrh	r2, [r7, #2]
 80304ca:	b2d2      	uxtb	r2, r2
 80304cc:	701a      	strb	r2, [r3, #0]
}
 80304ce:	bf00      	nop
 80304d0:	370c      	adds	r7, #12
 80304d2:	46bd      	mov	sp, r7
 80304d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80304d8:	4770      	bx	lr

080304da <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80304da:	b480      	push	{r7}
 80304dc:	b083      	sub	sp, #12
 80304de:	af00      	add	r7, sp, #0
 80304e0:	6078      	str	r0, [r7, #4]
 80304e2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80304e4:	687b      	ldr	r3, [r7, #4]
 80304e6:	1c5a      	adds	r2, r3, #1
 80304e8:	607a      	str	r2, [r7, #4]
 80304ea:	683a      	ldr	r2, [r7, #0]
 80304ec:	b2d2      	uxtb	r2, r2
 80304ee:	701a      	strb	r2, [r3, #0]
 80304f0:	683b      	ldr	r3, [r7, #0]
 80304f2:	0a1b      	lsrs	r3, r3, #8
 80304f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80304f6:	687b      	ldr	r3, [r7, #4]
 80304f8:	1c5a      	adds	r2, r3, #1
 80304fa:	607a      	str	r2, [r7, #4]
 80304fc:	683a      	ldr	r2, [r7, #0]
 80304fe:	b2d2      	uxtb	r2, r2
 8030500:	701a      	strb	r2, [r3, #0]
 8030502:	683b      	ldr	r3, [r7, #0]
 8030504:	0a1b      	lsrs	r3, r3, #8
 8030506:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8030508:	687b      	ldr	r3, [r7, #4]
 803050a:	1c5a      	adds	r2, r3, #1
 803050c:	607a      	str	r2, [r7, #4]
 803050e:	683a      	ldr	r2, [r7, #0]
 8030510:	b2d2      	uxtb	r2, r2
 8030512:	701a      	strb	r2, [r3, #0]
 8030514:	683b      	ldr	r3, [r7, #0]
 8030516:	0a1b      	lsrs	r3, r3, #8
 8030518:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 803051a:	687b      	ldr	r3, [r7, #4]
 803051c:	1c5a      	adds	r2, r3, #1
 803051e:	607a      	str	r2, [r7, #4]
 8030520:	683a      	ldr	r2, [r7, #0]
 8030522:	b2d2      	uxtb	r2, r2
 8030524:	701a      	strb	r2, [r3, #0]
}
 8030526:	bf00      	nop
 8030528:	370c      	adds	r7, #12
 803052a:	46bd      	mov	sp, r7
 803052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030530:	4770      	bx	lr

08030532 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8030532:	b480      	push	{r7}
 8030534:	b085      	sub	sp, #20
 8030536:	af00      	add	r7, sp, #0
 8030538:	60f8      	str	r0, [r7, #12]
 803053a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 803053e:	68fb      	ldr	r3, [r7, #12]
 8030540:	1c5a      	adds	r2, r3, #1
 8030542:	60fa      	str	r2, [r7, #12]
 8030544:	783a      	ldrb	r2, [r7, #0]
 8030546:	701a      	strb	r2, [r3, #0]
 8030548:	e9d7 0100 	ldrd	r0, r1, [r7]
 803054c:	f04f 0200 	mov.w	r2, #0
 8030550:	f04f 0300 	mov.w	r3, #0
 8030554:	0a02      	lsrs	r2, r0, #8
 8030556:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 803055a:	0a0b      	lsrs	r3, r1, #8
 803055c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8030560:	68fb      	ldr	r3, [r7, #12]
 8030562:	1c5a      	adds	r2, r3, #1
 8030564:	60fa      	str	r2, [r7, #12]
 8030566:	783a      	ldrb	r2, [r7, #0]
 8030568:	701a      	strb	r2, [r3, #0]
 803056a:	e9d7 0100 	ldrd	r0, r1, [r7]
 803056e:	f04f 0200 	mov.w	r2, #0
 8030572:	f04f 0300 	mov.w	r3, #0
 8030576:	0a02      	lsrs	r2, r0, #8
 8030578:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 803057c:	0a0b      	lsrs	r3, r1, #8
 803057e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8030582:	68fb      	ldr	r3, [r7, #12]
 8030584:	1c5a      	adds	r2, r3, #1
 8030586:	60fa      	str	r2, [r7, #12]
 8030588:	783a      	ldrb	r2, [r7, #0]
 803058a:	701a      	strb	r2, [r3, #0]
 803058c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8030590:	f04f 0200 	mov.w	r2, #0
 8030594:	f04f 0300 	mov.w	r3, #0
 8030598:	0a02      	lsrs	r2, r0, #8
 803059a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 803059e:	0a0b      	lsrs	r3, r1, #8
 80305a0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80305a4:	68fb      	ldr	r3, [r7, #12]
 80305a6:	1c5a      	adds	r2, r3, #1
 80305a8:	60fa      	str	r2, [r7, #12]
 80305aa:	783a      	ldrb	r2, [r7, #0]
 80305ac:	701a      	strb	r2, [r3, #0]
 80305ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80305b2:	f04f 0200 	mov.w	r2, #0
 80305b6:	f04f 0300 	mov.w	r3, #0
 80305ba:	0a02      	lsrs	r2, r0, #8
 80305bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80305c0:	0a0b      	lsrs	r3, r1, #8
 80305c2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80305c6:	68fb      	ldr	r3, [r7, #12]
 80305c8:	1c5a      	adds	r2, r3, #1
 80305ca:	60fa      	str	r2, [r7, #12]
 80305cc:	783a      	ldrb	r2, [r7, #0]
 80305ce:	701a      	strb	r2, [r3, #0]
 80305d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80305d4:	f04f 0200 	mov.w	r2, #0
 80305d8:	f04f 0300 	mov.w	r3, #0
 80305dc:	0a02      	lsrs	r2, r0, #8
 80305de:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80305e2:	0a0b      	lsrs	r3, r1, #8
 80305e4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80305e8:	68fb      	ldr	r3, [r7, #12]
 80305ea:	1c5a      	adds	r2, r3, #1
 80305ec:	60fa      	str	r2, [r7, #12]
 80305ee:	783a      	ldrb	r2, [r7, #0]
 80305f0:	701a      	strb	r2, [r3, #0]
 80305f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80305f6:	f04f 0200 	mov.w	r2, #0
 80305fa:	f04f 0300 	mov.w	r3, #0
 80305fe:	0a02      	lsrs	r2, r0, #8
 8030600:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8030604:	0a0b      	lsrs	r3, r1, #8
 8030606:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 803060a:	68fb      	ldr	r3, [r7, #12]
 803060c:	1c5a      	adds	r2, r3, #1
 803060e:	60fa      	str	r2, [r7, #12]
 8030610:	783a      	ldrb	r2, [r7, #0]
 8030612:	701a      	strb	r2, [r3, #0]
 8030614:	e9d7 0100 	ldrd	r0, r1, [r7]
 8030618:	f04f 0200 	mov.w	r2, #0
 803061c:	f04f 0300 	mov.w	r3, #0
 8030620:	0a02      	lsrs	r2, r0, #8
 8030622:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8030626:	0a0b      	lsrs	r3, r1, #8
 8030628:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 803062c:	68fb      	ldr	r3, [r7, #12]
 803062e:	1c5a      	adds	r2, r3, #1
 8030630:	60fa      	str	r2, [r7, #12]
 8030632:	783a      	ldrb	r2, [r7, #0]
 8030634:	701a      	strb	r2, [r3, #0]
}
 8030636:	bf00      	nop
 8030638:	3714      	adds	r7, #20
 803063a:	46bd      	mov	sp, r7
 803063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030640:	4770      	bx	lr

08030642 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8030642:	b480      	push	{r7}
 8030644:	b087      	sub	sp, #28
 8030646:	af00      	add	r7, sp, #0
 8030648:	60f8      	str	r0, [r7, #12]
 803064a:	60b9      	str	r1, [r7, #8]
 803064c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 803064e:	68fb      	ldr	r3, [r7, #12]
 8030650:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8030652:	68bb      	ldr	r3, [r7, #8]
 8030654:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8030656:	687b      	ldr	r3, [r7, #4]
 8030658:	2b00      	cmp	r3, #0
 803065a:	d00d      	beq.n	8030678 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 803065c:	693a      	ldr	r2, [r7, #16]
 803065e:	1c53      	adds	r3, r2, #1
 8030660:	613b      	str	r3, [r7, #16]
 8030662:	697b      	ldr	r3, [r7, #20]
 8030664:	1c59      	adds	r1, r3, #1
 8030666:	6179      	str	r1, [r7, #20]
 8030668:	7812      	ldrb	r2, [r2, #0]
 803066a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 803066c:	687b      	ldr	r3, [r7, #4]
 803066e:	3b01      	subs	r3, #1
 8030670:	607b      	str	r3, [r7, #4]
 8030672:	687b      	ldr	r3, [r7, #4]
 8030674:	2b00      	cmp	r3, #0
 8030676:	d1f1      	bne.n	803065c <mem_cpy+0x1a>
	}
}
 8030678:	bf00      	nop
 803067a:	371c      	adds	r7, #28
 803067c:	46bd      	mov	sp, r7
 803067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030682:	4770      	bx	lr

08030684 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8030684:	b480      	push	{r7}
 8030686:	b087      	sub	sp, #28
 8030688:	af00      	add	r7, sp, #0
 803068a:	60f8      	str	r0, [r7, #12]
 803068c:	60b9      	str	r1, [r7, #8]
 803068e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8030690:	68fb      	ldr	r3, [r7, #12]
 8030692:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8030694:	697b      	ldr	r3, [r7, #20]
 8030696:	1c5a      	adds	r2, r3, #1
 8030698:	617a      	str	r2, [r7, #20]
 803069a:	68ba      	ldr	r2, [r7, #8]
 803069c:	b2d2      	uxtb	r2, r2
 803069e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80306a0:	687b      	ldr	r3, [r7, #4]
 80306a2:	3b01      	subs	r3, #1
 80306a4:	607b      	str	r3, [r7, #4]
 80306a6:	687b      	ldr	r3, [r7, #4]
 80306a8:	2b00      	cmp	r3, #0
 80306aa:	d1f3      	bne.n	8030694 <mem_set+0x10>
}
 80306ac:	bf00      	nop
 80306ae:	bf00      	nop
 80306b0:	371c      	adds	r7, #28
 80306b2:	46bd      	mov	sp, r7
 80306b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80306b8:	4770      	bx	lr

080306ba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80306ba:	b480      	push	{r7}
 80306bc:	b089      	sub	sp, #36	; 0x24
 80306be:	af00      	add	r7, sp, #0
 80306c0:	60f8      	str	r0, [r7, #12]
 80306c2:	60b9      	str	r1, [r7, #8]
 80306c4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80306c6:	68fb      	ldr	r3, [r7, #12]
 80306c8:	61fb      	str	r3, [r7, #28]
 80306ca:	68bb      	ldr	r3, [r7, #8]
 80306cc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80306ce:	2300      	movs	r3, #0
 80306d0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80306d2:	69fb      	ldr	r3, [r7, #28]
 80306d4:	1c5a      	adds	r2, r3, #1
 80306d6:	61fa      	str	r2, [r7, #28]
 80306d8:	781b      	ldrb	r3, [r3, #0]
 80306da:	4619      	mov	r1, r3
 80306dc:	69bb      	ldr	r3, [r7, #24]
 80306de:	1c5a      	adds	r2, r3, #1
 80306e0:	61ba      	str	r2, [r7, #24]
 80306e2:	781b      	ldrb	r3, [r3, #0]
 80306e4:	1acb      	subs	r3, r1, r3
 80306e6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80306e8:	687b      	ldr	r3, [r7, #4]
 80306ea:	3b01      	subs	r3, #1
 80306ec:	607b      	str	r3, [r7, #4]
 80306ee:	687b      	ldr	r3, [r7, #4]
 80306f0:	2b00      	cmp	r3, #0
 80306f2:	d002      	beq.n	80306fa <mem_cmp+0x40>
 80306f4:	697b      	ldr	r3, [r7, #20]
 80306f6:	2b00      	cmp	r3, #0
 80306f8:	d0eb      	beq.n	80306d2 <mem_cmp+0x18>

	return r;
 80306fa:	697b      	ldr	r3, [r7, #20]
}
 80306fc:	4618      	mov	r0, r3
 80306fe:	3724      	adds	r7, #36	; 0x24
 8030700:	46bd      	mov	sp, r7
 8030702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030706:	4770      	bx	lr

08030708 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8030708:	b480      	push	{r7}
 803070a:	b083      	sub	sp, #12
 803070c:	af00      	add	r7, sp, #0
 803070e:	6078      	str	r0, [r7, #4]
 8030710:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8030712:	e002      	b.n	803071a <chk_chr+0x12>
 8030714:	687b      	ldr	r3, [r7, #4]
 8030716:	3301      	adds	r3, #1
 8030718:	607b      	str	r3, [r7, #4]
 803071a:	687b      	ldr	r3, [r7, #4]
 803071c:	781b      	ldrb	r3, [r3, #0]
 803071e:	2b00      	cmp	r3, #0
 8030720:	d005      	beq.n	803072e <chk_chr+0x26>
 8030722:	687b      	ldr	r3, [r7, #4]
 8030724:	781b      	ldrb	r3, [r3, #0]
 8030726:	461a      	mov	r2, r3
 8030728:	683b      	ldr	r3, [r7, #0]
 803072a:	4293      	cmp	r3, r2
 803072c:	d1f2      	bne.n	8030714 <chk_chr+0xc>
	return *str;
 803072e:	687b      	ldr	r3, [r7, #4]
 8030730:	781b      	ldrb	r3, [r3, #0]
}
 8030732:	4618      	mov	r0, r3
 8030734:	370c      	adds	r7, #12
 8030736:	46bd      	mov	sp, r7
 8030738:	f85d 7b04 	ldr.w	r7, [sp], #4
 803073c:	4770      	bx	lr

0803073e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 803073e:	b580      	push	{r7, lr}
 8030740:	b082      	sub	sp, #8
 8030742:	af00      	add	r7, sp, #0
 8030744:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8030746:	687b      	ldr	r3, [r7, #4]
 8030748:	2b00      	cmp	r3, #0
 803074a:	d009      	beq.n	8030760 <lock_fs+0x22>
 803074c:	687b      	ldr	r3, [r7, #4]
 803074e:	699b      	ldr	r3, [r3, #24]
 8030750:	4618      	mov	r0, r3
 8030752:	f005 fb36 	bl	8035dc2 <ff_req_grant>
 8030756:	4603      	mov	r3, r0
 8030758:	2b00      	cmp	r3, #0
 803075a:	d001      	beq.n	8030760 <lock_fs+0x22>
 803075c:	2301      	movs	r3, #1
 803075e:	e000      	b.n	8030762 <lock_fs+0x24>
 8030760:	2300      	movs	r3, #0
}
 8030762:	4618      	mov	r0, r3
 8030764:	3708      	adds	r7, #8
 8030766:	46bd      	mov	sp, r7
 8030768:	bd80      	pop	{r7, pc}

0803076a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 803076a:	b580      	push	{r7, lr}
 803076c:	b082      	sub	sp, #8
 803076e:	af00      	add	r7, sp, #0
 8030770:	6078      	str	r0, [r7, #4]
 8030772:	460b      	mov	r3, r1
 8030774:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8030776:	687b      	ldr	r3, [r7, #4]
 8030778:	2b00      	cmp	r3, #0
 803077a:	d00d      	beq.n	8030798 <unlock_fs+0x2e>
 803077c:	78fb      	ldrb	r3, [r7, #3]
 803077e:	2b0c      	cmp	r3, #12
 8030780:	d00a      	beq.n	8030798 <unlock_fs+0x2e>
 8030782:	78fb      	ldrb	r3, [r7, #3]
 8030784:	2b0b      	cmp	r3, #11
 8030786:	d007      	beq.n	8030798 <unlock_fs+0x2e>
 8030788:	78fb      	ldrb	r3, [r7, #3]
 803078a:	2b0f      	cmp	r3, #15
 803078c:	d004      	beq.n	8030798 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 803078e:	687b      	ldr	r3, [r7, #4]
 8030790:	699b      	ldr	r3, [r3, #24]
 8030792:	4618      	mov	r0, r3
 8030794:	f005 fb2a 	bl	8035dec <ff_rel_grant>
	}
}
 8030798:	bf00      	nop
 803079a:	3708      	adds	r7, #8
 803079c:	46bd      	mov	sp, r7
 803079e:	bd80      	pop	{r7, pc}

080307a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80307a0:	b480      	push	{r7}
 80307a2:	b085      	sub	sp, #20
 80307a4:	af00      	add	r7, sp, #0
 80307a6:	6078      	str	r0, [r7, #4]
 80307a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80307aa:	2300      	movs	r3, #0
 80307ac:	60bb      	str	r3, [r7, #8]
 80307ae:	68bb      	ldr	r3, [r7, #8]
 80307b0:	60fb      	str	r3, [r7, #12]
 80307b2:	e029      	b.n	8030808 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80307b4:	4a27      	ldr	r2, [pc, #156]	; (8030854 <chk_lock+0xb4>)
 80307b6:	68fb      	ldr	r3, [r7, #12]
 80307b8:	011b      	lsls	r3, r3, #4
 80307ba:	4413      	add	r3, r2
 80307bc:	681b      	ldr	r3, [r3, #0]
 80307be:	2b00      	cmp	r3, #0
 80307c0:	d01d      	beq.n	80307fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80307c2:	4a24      	ldr	r2, [pc, #144]	; (8030854 <chk_lock+0xb4>)
 80307c4:	68fb      	ldr	r3, [r7, #12]
 80307c6:	011b      	lsls	r3, r3, #4
 80307c8:	4413      	add	r3, r2
 80307ca:	681a      	ldr	r2, [r3, #0]
 80307cc:	687b      	ldr	r3, [r7, #4]
 80307ce:	681b      	ldr	r3, [r3, #0]
 80307d0:	429a      	cmp	r2, r3
 80307d2:	d116      	bne.n	8030802 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80307d4:	4a1f      	ldr	r2, [pc, #124]	; (8030854 <chk_lock+0xb4>)
 80307d6:	68fb      	ldr	r3, [r7, #12]
 80307d8:	011b      	lsls	r3, r3, #4
 80307da:	4413      	add	r3, r2
 80307dc:	3304      	adds	r3, #4
 80307de:	681a      	ldr	r2, [r3, #0]
 80307e0:	687b      	ldr	r3, [r7, #4]
 80307e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80307e4:	429a      	cmp	r2, r3
 80307e6:	d10c      	bne.n	8030802 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80307e8:	4a1a      	ldr	r2, [pc, #104]	; (8030854 <chk_lock+0xb4>)
 80307ea:	68fb      	ldr	r3, [r7, #12]
 80307ec:	011b      	lsls	r3, r3, #4
 80307ee:	4413      	add	r3, r2
 80307f0:	3308      	adds	r3, #8
 80307f2:	681a      	ldr	r2, [r3, #0]
 80307f4:	687b      	ldr	r3, [r7, #4]
 80307f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 80307f8:	429a      	cmp	r2, r3
 80307fa:	d102      	bne.n	8030802 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80307fc:	e007      	b.n	803080e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80307fe:	2301      	movs	r3, #1
 8030800:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8030802:	68fb      	ldr	r3, [r7, #12]
 8030804:	3301      	adds	r3, #1
 8030806:	60fb      	str	r3, [r7, #12]
 8030808:	68fb      	ldr	r3, [r7, #12]
 803080a:	2b01      	cmp	r3, #1
 803080c:	d9d2      	bls.n	80307b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 803080e:	68fb      	ldr	r3, [r7, #12]
 8030810:	2b02      	cmp	r3, #2
 8030812:	d109      	bne.n	8030828 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8030814:	68bb      	ldr	r3, [r7, #8]
 8030816:	2b00      	cmp	r3, #0
 8030818:	d102      	bne.n	8030820 <chk_lock+0x80>
 803081a:	683b      	ldr	r3, [r7, #0]
 803081c:	2b02      	cmp	r3, #2
 803081e:	d101      	bne.n	8030824 <chk_lock+0x84>
 8030820:	2300      	movs	r3, #0
 8030822:	e010      	b.n	8030846 <chk_lock+0xa6>
 8030824:	2312      	movs	r3, #18
 8030826:	e00e      	b.n	8030846 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8030828:	683b      	ldr	r3, [r7, #0]
 803082a:	2b00      	cmp	r3, #0
 803082c:	d108      	bne.n	8030840 <chk_lock+0xa0>
 803082e:	4a09      	ldr	r2, [pc, #36]	; (8030854 <chk_lock+0xb4>)
 8030830:	68fb      	ldr	r3, [r7, #12]
 8030832:	011b      	lsls	r3, r3, #4
 8030834:	4413      	add	r3, r2
 8030836:	330c      	adds	r3, #12
 8030838:	881b      	ldrh	r3, [r3, #0]
 803083a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803083e:	d101      	bne.n	8030844 <chk_lock+0xa4>
 8030840:	2310      	movs	r3, #16
 8030842:	e000      	b.n	8030846 <chk_lock+0xa6>
 8030844:	2300      	movs	r3, #0
}
 8030846:	4618      	mov	r0, r3
 8030848:	3714      	adds	r7, #20
 803084a:	46bd      	mov	sp, r7
 803084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030850:	4770      	bx	lr
 8030852:	bf00      	nop
 8030854:	24002c08 	.word	0x24002c08

08030858 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8030858:	b480      	push	{r7}
 803085a:	b083      	sub	sp, #12
 803085c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 803085e:	2300      	movs	r3, #0
 8030860:	607b      	str	r3, [r7, #4]
 8030862:	e002      	b.n	803086a <enq_lock+0x12>
 8030864:	687b      	ldr	r3, [r7, #4]
 8030866:	3301      	adds	r3, #1
 8030868:	607b      	str	r3, [r7, #4]
 803086a:	687b      	ldr	r3, [r7, #4]
 803086c:	2b01      	cmp	r3, #1
 803086e:	d806      	bhi.n	803087e <enq_lock+0x26>
 8030870:	4a09      	ldr	r2, [pc, #36]	; (8030898 <enq_lock+0x40>)
 8030872:	687b      	ldr	r3, [r7, #4]
 8030874:	011b      	lsls	r3, r3, #4
 8030876:	4413      	add	r3, r2
 8030878:	681b      	ldr	r3, [r3, #0]
 803087a:	2b00      	cmp	r3, #0
 803087c:	d1f2      	bne.n	8030864 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 803087e:	687b      	ldr	r3, [r7, #4]
 8030880:	2b02      	cmp	r3, #2
 8030882:	bf14      	ite	ne
 8030884:	2301      	movne	r3, #1
 8030886:	2300      	moveq	r3, #0
 8030888:	b2db      	uxtb	r3, r3
}
 803088a:	4618      	mov	r0, r3
 803088c:	370c      	adds	r7, #12
 803088e:	46bd      	mov	sp, r7
 8030890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030894:	4770      	bx	lr
 8030896:	bf00      	nop
 8030898:	24002c08 	.word	0x24002c08

0803089c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 803089c:	b480      	push	{r7}
 803089e:	b085      	sub	sp, #20
 80308a0:	af00      	add	r7, sp, #0
 80308a2:	6078      	str	r0, [r7, #4]
 80308a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80308a6:	2300      	movs	r3, #0
 80308a8:	60fb      	str	r3, [r7, #12]
 80308aa:	e01f      	b.n	80308ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80308ac:	4a41      	ldr	r2, [pc, #260]	; (80309b4 <inc_lock+0x118>)
 80308ae:	68fb      	ldr	r3, [r7, #12]
 80308b0:	011b      	lsls	r3, r3, #4
 80308b2:	4413      	add	r3, r2
 80308b4:	681a      	ldr	r2, [r3, #0]
 80308b6:	687b      	ldr	r3, [r7, #4]
 80308b8:	681b      	ldr	r3, [r3, #0]
 80308ba:	429a      	cmp	r2, r3
 80308bc:	d113      	bne.n	80308e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80308be:	4a3d      	ldr	r2, [pc, #244]	; (80309b4 <inc_lock+0x118>)
 80308c0:	68fb      	ldr	r3, [r7, #12]
 80308c2:	011b      	lsls	r3, r3, #4
 80308c4:	4413      	add	r3, r2
 80308c6:	3304      	adds	r3, #4
 80308c8:	681a      	ldr	r2, [r3, #0]
 80308ca:	687b      	ldr	r3, [r7, #4]
 80308cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80308ce:	429a      	cmp	r2, r3
 80308d0:	d109      	bne.n	80308e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80308d2:	4a38      	ldr	r2, [pc, #224]	; (80309b4 <inc_lock+0x118>)
 80308d4:	68fb      	ldr	r3, [r7, #12]
 80308d6:	011b      	lsls	r3, r3, #4
 80308d8:	4413      	add	r3, r2
 80308da:	3308      	adds	r3, #8
 80308dc:	681a      	ldr	r2, [r3, #0]
 80308de:	687b      	ldr	r3, [r7, #4]
 80308e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80308e2:	429a      	cmp	r2, r3
 80308e4:	d006      	beq.n	80308f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80308e6:	68fb      	ldr	r3, [r7, #12]
 80308e8:	3301      	adds	r3, #1
 80308ea:	60fb      	str	r3, [r7, #12]
 80308ec:	68fb      	ldr	r3, [r7, #12]
 80308ee:	2b01      	cmp	r3, #1
 80308f0:	d9dc      	bls.n	80308ac <inc_lock+0x10>
 80308f2:	e000      	b.n	80308f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80308f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80308f6:	68fb      	ldr	r3, [r7, #12]
 80308f8:	2b02      	cmp	r3, #2
 80308fa:	d132      	bne.n	8030962 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80308fc:	2300      	movs	r3, #0
 80308fe:	60fb      	str	r3, [r7, #12]
 8030900:	e002      	b.n	8030908 <inc_lock+0x6c>
 8030902:	68fb      	ldr	r3, [r7, #12]
 8030904:	3301      	adds	r3, #1
 8030906:	60fb      	str	r3, [r7, #12]
 8030908:	68fb      	ldr	r3, [r7, #12]
 803090a:	2b01      	cmp	r3, #1
 803090c:	d806      	bhi.n	803091c <inc_lock+0x80>
 803090e:	4a29      	ldr	r2, [pc, #164]	; (80309b4 <inc_lock+0x118>)
 8030910:	68fb      	ldr	r3, [r7, #12]
 8030912:	011b      	lsls	r3, r3, #4
 8030914:	4413      	add	r3, r2
 8030916:	681b      	ldr	r3, [r3, #0]
 8030918:	2b00      	cmp	r3, #0
 803091a:	d1f2      	bne.n	8030902 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 803091c:	68fb      	ldr	r3, [r7, #12]
 803091e:	2b02      	cmp	r3, #2
 8030920:	d101      	bne.n	8030926 <inc_lock+0x8a>
 8030922:	2300      	movs	r3, #0
 8030924:	e040      	b.n	80309a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8030926:	687b      	ldr	r3, [r7, #4]
 8030928:	681a      	ldr	r2, [r3, #0]
 803092a:	4922      	ldr	r1, [pc, #136]	; (80309b4 <inc_lock+0x118>)
 803092c:	68fb      	ldr	r3, [r7, #12]
 803092e:	011b      	lsls	r3, r3, #4
 8030930:	440b      	add	r3, r1
 8030932:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8030934:	687b      	ldr	r3, [r7, #4]
 8030936:	689a      	ldr	r2, [r3, #8]
 8030938:	491e      	ldr	r1, [pc, #120]	; (80309b4 <inc_lock+0x118>)
 803093a:	68fb      	ldr	r3, [r7, #12]
 803093c:	011b      	lsls	r3, r3, #4
 803093e:	440b      	add	r3, r1
 8030940:	3304      	adds	r3, #4
 8030942:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8030944:	687b      	ldr	r3, [r7, #4]
 8030946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8030948:	491a      	ldr	r1, [pc, #104]	; (80309b4 <inc_lock+0x118>)
 803094a:	68fb      	ldr	r3, [r7, #12]
 803094c:	011b      	lsls	r3, r3, #4
 803094e:	440b      	add	r3, r1
 8030950:	3308      	adds	r3, #8
 8030952:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8030954:	4a17      	ldr	r2, [pc, #92]	; (80309b4 <inc_lock+0x118>)
 8030956:	68fb      	ldr	r3, [r7, #12]
 8030958:	011b      	lsls	r3, r3, #4
 803095a:	4413      	add	r3, r2
 803095c:	330c      	adds	r3, #12
 803095e:	2200      	movs	r2, #0
 8030960:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8030962:	683b      	ldr	r3, [r7, #0]
 8030964:	2b00      	cmp	r3, #0
 8030966:	d009      	beq.n	803097c <inc_lock+0xe0>
 8030968:	4a12      	ldr	r2, [pc, #72]	; (80309b4 <inc_lock+0x118>)
 803096a:	68fb      	ldr	r3, [r7, #12]
 803096c:	011b      	lsls	r3, r3, #4
 803096e:	4413      	add	r3, r2
 8030970:	330c      	adds	r3, #12
 8030972:	881b      	ldrh	r3, [r3, #0]
 8030974:	2b00      	cmp	r3, #0
 8030976:	d001      	beq.n	803097c <inc_lock+0xe0>
 8030978:	2300      	movs	r3, #0
 803097a:	e015      	b.n	80309a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 803097c:	683b      	ldr	r3, [r7, #0]
 803097e:	2b00      	cmp	r3, #0
 8030980:	d108      	bne.n	8030994 <inc_lock+0xf8>
 8030982:	4a0c      	ldr	r2, [pc, #48]	; (80309b4 <inc_lock+0x118>)
 8030984:	68fb      	ldr	r3, [r7, #12]
 8030986:	011b      	lsls	r3, r3, #4
 8030988:	4413      	add	r3, r2
 803098a:	330c      	adds	r3, #12
 803098c:	881b      	ldrh	r3, [r3, #0]
 803098e:	3301      	adds	r3, #1
 8030990:	b29a      	uxth	r2, r3
 8030992:	e001      	b.n	8030998 <inc_lock+0xfc>
 8030994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8030998:	4906      	ldr	r1, [pc, #24]	; (80309b4 <inc_lock+0x118>)
 803099a:	68fb      	ldr	r3, [r7, #12]
 803099c:	011b      	lsls	r3, r3, #4
 803099e:	440b      	add	r3, r1
 80309a0:	330c      	adds	r3, #12
 80309a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80309a4:	68fb      	ldr	r3, [r7, #12]
 80309a6:	3301      	adds	r3, #1
}
 80309a8:	4618      	mov	r0, r3
 80309aa:	3714      	adds	r7, #20
 80309ac:	46bd      	mov	sp, r7
 80309ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80309b2:	4770      	bx	lr
 80309b4:	24002c08 	.word	0x24002c08

080309b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80309b8:	b480      	push	{r7}
 80309ba:	b085      	sub	sp, #20
 80309bc:	af00      	add	r7, sp, #0
 80309be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80309c0:	687b      	ldr	r3, [r7, #4]
 80309c2:	3b01      	subs	r3, #1
 80309c4:	607b      	str	r3, [r7, #4]
 80309c6:	687b      	ldr	r3, [r7, #4]
 80309c8:	2b01      	cmp	r3, #1
 80309ca:	d825      	bhi.n	8030a18 <dec_lock+0x60>
		n = Files[i].ctr;
 80309cc:	4a17      	ldr	r2, [pc, #92]	; (8030a2c <dec_lock+0x74>)
 80309ce:	687b      	ldr	r3, [r7, #4]
 80309d0:	011b      	lsls	r3, r3, #4
 80309d2:	4413      	add	r3, r2
 80309d4:	330c      	adds	r3, #12
 80309d6:	881b      	ldrh	r3, [r3, #0]
 80309d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80309da:	89fb      	ldrh	r3, [r7, #14]
 80309dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80309e0:	d101      	bne.n	80309e6 <dec_lock+0x2e>
 80309e2:	2300      	movs	r3, #0
 80309e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80309e6:	89fb      	ldrh	r3, [r7, #14]
 80309e8:	2b00      	cmp	r3, #0
 80309ea:	d002      	beq.n	80309f2 <dec_lock+0x3a>
 80309ec:	89fb      	ldrh	r3, [r7, #14]
 80309ee:	3b01      	subs	r3, #1
 80309f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80309f2:	4a0e      	ldr	r2, [pc, #56]	; (8030a2c <dec_lock+0x74>)
 80309f4:	687b      	ldr	r3, [r7, #4]
 80309f6:	011b      	lsls	r3, r3, #4
 80309f8:	4413      	add	r3, r2
 80309fa:	330c      	adds	r3, #12
 80309fc:	89fa      	ldrh	r2, [r7, #14]
 80309fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8030a00:	89fb      	ldrh	r3, [r7, #14]
 8030a02:	2b00      	cmp	r3, #0
 8030a04:	d105      	bne.n	8030a12 <dec_lock+0x5a>
 8030a06:	4a09      	ldr	r2, [pc, #36]	; (8030a2c <dec_lock+0x74>)
 8030a08:	687b      	ldr	r3, [r7, #4]
 8030a0a:	011b      	lsls	r3, r3, #4
 8030a0c:	4413      	add	r3, r2
 8030a0e:	2200      	movs	r2, #0
 8030a10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8030a12:	2300      	movs	r3, #0
 8030a14:	737b      	strb	r3, [r7, #13]
 8030a16:	e001      	b.n	8030a1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8030a18:	2302      	movs	r3, #2
 8030a1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8030a1c:	7b7b      	ldrb	r3, [r7, #13]
}
 8030a1e:	4618      	mov	r0, r3
 8030a20:	3714      	adds	r7, #20
 8030a22:	46bd      	mov	sp, r7
 8030a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a28:	4770      	bx	lr
 8030a2a:	bf00      	nop
 8030a2c:	24002c08 	.word	0x24002c08

08030a30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8030a30:	b480      	push	{r7}
 8030a32:	b085      	sub	sp, #20
 8030a34:	af00      	add	r7, sp, #0
 8030a36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8030a38:	2300      	movs	r3, #0
 8030a3a:	60fb      	str	r3, [r7, #12]
 8030a3c:	e010      	b.n	8030a60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8030a3e:	4a0d      	ldr	r2, [pc, #52]	; (8030a74 <clear_lock+0x44>)
 8030a40:	68fb      	ldr	r3, [r7, #12]
 8030a42:	011b      	lsls	r3, r3, #4
 8030a44:	4413      	add	r3, r2
 8030a46:	681b      	ldr	r3, [r3, #0]
 8030a48:	687a      	ldr	r2, [r7, #4]
 8030a4a:	429a      	cmp	r2, r3
 8030a4c:	d105      	bne.n	8030a5a <clear_lock+0x2a>
 8030a4e:	4a09      	ldr	r2, [pc, #36]	; (8030a74 <clear_lock+0x44>)
 8030a50:	68fb      	ldr	r3, [r7, #12]
 8030a52:	011b      	lsls	r3, r3, #4
 8030a54:	4413      	add	r3, r2
 8030a56:	2200      	movs	r2, #0
 8030a58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8030a5a:	68fb      	ldr	r3, [r7, #12]
 8030a5c:	3301      	adds	r3, #1
 8030a5e:	60fb      	str	r3, [r7, #12]
 8030a60:	68fb      	ldr	r3, [r7, #12]
 8030a62:	2b01      	cmp	r3, #1
 8030a64:	d9eb      	bls.n	8030a3e <clear_lock+0xe>
	}
}
 8030a66:	bf00      	nop
 8030a68:	bf00      	nop
 8030a6a:	3714      	adds	r7, #20
 8030a6c:	46bd      	mov	sp, r7
 8030a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a72:	4770      	bx	lr
 8030a74:	24002c08 	.word	0x24002c08

08030a78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8030a78:	b580      	push	{r7, lr}
 8030a7a:	b086      	sub	sp, #24
 8030a7c:	af00      	add	r7, sp, #0
 8030a7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8030a80:	2300      	movs	r3, #0
 8030a82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8030a84:	687b      	ldr	r3, [r7, #4]
 8030a86:	78db      	ldrb	r3, [r3, #3]
 8030a88:	2b00      	cmp	r3, #0
 8030a8a:	d034      	beq.n	8030af6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8030a8c:	687b      	ldr	r3, [r7, #4]
 8030a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8030a90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8030a92:	687b      	ldr	r3, [r7, #4]
 8030a94:	7858      	ldrb	r0, [r3, #1]
 8030a96:	687b      	ldr	r3, [r7, #4]
 8030a98:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030a9c:	2301      	movs	r3, #1
 8030a9e:	697a      	ldr	r2, [r7, #20]
 8030aa0:	f7ff fbac 	bl	80301fc <disk_write>
 8030aa4:	4603      	mov	r3, r0
 8030aa6:	2b00      	cmp	r3, #0
 8030aa8:	d002      	beq.n	8030ab0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8030aaa:	2301      	movs	r3, #1
 8030aac:	73fb      	strb	r3, [r7, #15]
 8030aae:	e022      	b.n	8030af6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8030ab0:	687b      	ldr	r3, [r7, #4]
 8030ab2:	2200      	movs	r2, #0
 8030ab4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8030ab6:	687b      	ldr	r3, [r7, #4]
 8030ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030aba:	697a      	ldr	r2, [r7, #20]
 8030abc:	1ad2      	subs	r2, r2, r3
 8030abe:	687b      	ldr	r3, [r7, #4]
 8030ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030ac2:	429a      	cmp	r2, r3
 8030ac4:	d217      	bcs.n	8030af6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8030ac6:	687b      	ldr	r3, [r7, #4]
 8030ac8:	789b      	ldrb	r3, [r3, #2]
 8030aca:	613b      	str	r3, [r7, #16]
 8030acc:	e010      	b.n	8030af0 <sync_window+0x78>
					wsect += fs->fsize;
 8030ace:	687b      	ldr	r3, [r7, #4]
 8030ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030ad2:	697a      	ldr	r2, [r7, #20]
 8030ad4:	4413      	add	r3, r2
 8030ad6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8030ad8:	687b      	ldr	r3, [r7, #4]
 8030ada:	7858      	ldrb	r0, [r3, #1]
 8030adc:	687b      	ldr	r3, [r7, #4]
 8030ade:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030ae2:	2301      	movs	r3, #1
 8030ae4:	697a      	ldr	r2, [r7, #20]
 8030ae6:	f7ff fb89 	bl	80301fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8030aea:	693b      	ldr	r3, [r7, #16]
 8030aec:	3b01      	subs	r3, #1
 8030aee:	613b      	str	r3, [r7, #16]
 8030af0:	693b      	ldr	r3, [r7, #16]
 8030af2:	2b01      	cmp	r3, #1
 8030af4:	d8eb      	bhi.n	8030ace <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8030af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8030af8:	4618      	mov	r0, r3
 8030afa:	3718      	adds	r7, #24
 8030afc:	46bd      	mov	sp, r7
 8030afe:	bd80      	pop	{r7, pc}

08030b00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8030b00:	b580      	push	{r7, lr}
 8030b02:	b084      	sub	sp, #16
 8030b04:	af00      	add	r7, sp, #0
 8030b06:	6078      	str	r0, [r7, #4]
 8030b08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8030b0a:	2300      	movs	r3, #0
 8030b0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8030b0e:	687b      	ldr	r3, [r7, #4]
 8030b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8030b12:	683a      	ldr	r2, [r7, #0]
 8030b14:	429a      	cmp	r2, r3
 8030b16:	d01b      	beq.n	8030b50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8030b18:	6878      	ldr	r0, [r7, #4]
 8030b1a:	f7ff ffad 	bl	8030a78 <sync_window>
 8030b1e:	4603      	mov	r3, r0
 8030b20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8030b22:	7bfb      	ldrb	r3, [r7, #15]
 8030b24:	2b00      	cmp	r3, #0
 8030b26:	d113      	bne.n	8030b50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8030b28:	687b      	ldr	r3, [r7, #4]
 8030b2a:	7858      	ldrb	r0, [r3, #1]
 8030b2c:	687b      	ldr	r3, [r7, #4]
 8030b2e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030b32:	2301      	movs	r3, #1
 8030b34:	683a      	ldr	r2, [r7, #0]
 8030b36:	f7ff fb41 	bl	80301bc <disk_read>
 8030b3a:	4603      	mov	r3, r0
 8030b3c:	2b00      	cmp	r3, #0
 8030b3e:	d004      	beq.n	8030b4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8030b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8030b44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8030b46:	2301      	movs	r3, #1
 8030b48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8030b4a:	687b      	ldr	r3, [r7, #4]
 8030b4c:	683a      	ldr	r2, [r7, #0]
 8030b4e:	64da      	str	r2, [r3, #76]	; 0x4c
		}
	}
	return res;
 8030b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8030b52:	4618      	mov	r0, r3
 8030b54:	3710      	adds	r7, #16
 8030b56:	46bd      	mov	sp, r7
 8030b58:	bd80      	pop	{r7, pc}
	...

08030b5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8030b5c:	b580      	push	{r7, lr}
 8030b5e:	b084      	sub	sp, #16
 8030b60:	af00      	add	r7, sp, #0
 8030b62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8030b64:	6878      	ldr	r0, [r7, #4]
 8030b66:	f7ff ff87 	bl	8030a78 <sync_window>
 8030b6a:	4603      	mov	r3, r0
 8030b6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8030b6e:	7bfb      	ldrb	r3, [r7, #15]
 8030b70:	2b00      	cmp	r3, #0
 8030b72:	d159      	bne.n	8030c28 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8030b74:	687b      	ldr	r3, [r7, #4]
 8030b76:	781b      	ldrb	r3, [r3, #0]
 8030b78:	2b03      	cmp	r3, #3
 8030b7a:	d149      	bne.n	8030c10 <sync_fs+0xb4>
 8030b7c:	687b      	ldr	r3, [r7, #4]
 8030b7e:	791b      	ldrb	r3, [r3, #4]
 8030b80:	2b01      	cmp	r3, #1
 8030b82:	d145      	bne.n	8030c10 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8030b84:	687b      	ldr	r3, [r7, #4]
 8030b86:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8030b8a:	687b      	ldr	r3, [r7, #4]
 8030b8c:	899b      	ldrh	r3, [r3, #12]
 8030b8e:	461a      	mov	r2, r3
 8030b90:	2100      	movs	r1, #0
 8030b92:	f7ff fd77 	bl	8030684 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8030b96:	687b      	ldr	r3, [r7, #4]
 8030b98:	3350      	adds	r3, #80	; 0x50
 8030b9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8030b9e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8030ba2:	4618      	mov	r0, r3
 8030ba4:	f7ff fc7e 	bl	80304a4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8030ba8:	687b      	ldr	r3, [r7, #4]
 8030baa:	3350      	adds	r3, #80	; 0x50
 8030bac:	4921      	ldr	r1, [pc, #132]	; (8030c34 <sync_fs+0xd8>)
 8030bae:	4618      	mov	r0, r3
 8030bb0:	f7ff fc93 	bl	80304da <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8030bb4:	687b      	ldr	r3, [r7, #4]
 8030bb6:	3350      	adds	r3, #80	; 0x50
 8030bb8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8030bbc:	491e      	ldr	r1, [pc, #120]	; (8030c38 <sync_fs+0xdc>)
 8030bbe:	4618      	mov	r0, r3
 8030bc0:	f7ff fc8b 	bl	80304da <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8030bc4:	687b      	ldr	r3, [r7, #4]
 8030bc6:	3350      	adds	r3, #80	; 0x50
 8030bc8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8030bcc:	687b      	ldr	r3, [r7, #4]
 8030bce:	6a1b      	ldr	r3, [r3, #32]
 8030bd0:	4619      	mov	r1, r3
 8030bd2:	4610      	mov	r0, r2
 8030bd4:	f7ff fc81 	bl	80304da <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8030bd8:	687b      	ldr	r3, [r7, #4]
 8030bda:	3350      	adds	r3, #80	; 0x50
 8030bdc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8030be0:	687b      	ldr	r3, [r7, #4]
 8030be2:	69db      	ldr	r3, [r3, #28]
 8030be4:	4619      	mov	r1, r3
 8030be6:	4610      	mov	r0, r2
 8030be8:	f7ff fc77 	bl	80304da <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8030bec:	687b      	ldr	r3, [r7, #4]
 8030bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030bf0:	1c5a      	adds	r2, r3, #1
 8030bf2:	687b      	ldr	r3, [r7, #4]
 8030bf4:	64da      	str	r2, [r3, #76]	; 0x4c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8030bf6:	687b      	ldr	r3, [r7, #4]
 8030bf8:	7858      	ldrb	r0, [r3, #1]
 8030bfa:	687b      	ldr	r3, [r7, #4]
 8030bfc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030c00:	687b      	ldr	r3, [r7, #4]
 8030c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8030c04:	2301      	movs	r3, #1
 8030c06:	f7ff faf9 	bl	80301fc <disk_write>
			fs->fsi_flag = 0;
 8030c0a:	687b      	ldr	r3, [r7, #4]
 8030c0c:	2200      	movs	r2, #0
 8030c0e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8030c10:	687b      	ldr	r3, [r7, #4]
 8030c12:	785b      	ldrb	r3, [r3, #1]
 8030c14:	2200      	movs	r2, #0
 8030c16:	2100      	movs	r1, #0
 8030c18:	4618      	mov	r0, r3
 8030c1a:	f7ff fb0f 	bl	803023c <disk_ioctl>
 8030c1e:	4603      	mov	r3, r0
 8030c20:	2b00      	cmp	r3, #0
 8030c22:	d001      	beq.n	8030c28 <sync_fs+0xcc>
 8030c24:	2301      	movs	r3, #1
 8030c26:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8030c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8030c2a:	4618      	mov	r0, r3
 8030c2c:	3710      	adds	r7, #16
 8030c2e:	46bd      	mov	sp, r7
 8030c30:	bd80      	pop	{r7, pc}
 8030c32:	bf00      	nop
 8030c34:	41615252 	.word	0x41615252
 8030c38:	61417272 	.word	0x61417272

08030c3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8030c3c:	b480      	push	{r7}
 8030c3e:	b083      	sub	sp, #12
 8030c40:	af00      	add	r7, sp, #0
 8030c42:	6078      	str	r0, [r7, #4]
 8030c44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8030c46:	683b      	ldr	r3, [r7, #0]
 8030c48:	3b02      	subs	r3, #2
 8030c4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8030c4c:	687b      	ldr	r3, [r7, #4]
 8030c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030c50:	3b02      	subs	r3, #2
 8030c52:	683a      	ldr	r2, [r7, #0]
 8030c54:	429a      	cmp	r2, r3
 8030c56:	d301      	bcc.n	8030c5c <clust2sect+0x20>
 8030c58:	2300      	movs	r3, #0
 8030c5a:	e008      	b.n	8030c6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8030c5c:	687b      	ldr	r3, [r7, #4]
 8030c5e:	895b      	ldrh	r3, [r3, #10]
 8030c60:	461a      	mov	r2, r3
 8030c62:	683b      	ldr	r3, [r7, #0]
 8030c64:	fb03 f202 	mul.w	r2, r3, r2
 8030c68:	687b      	ldr	r3, [r7, #4]
 8030c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8030c6c:	4413      	add	r3, r2
}
 8030c6e:	4618      	mov	r0, r3
 8030c70:	370c      	adds	r7, #12
 8030c72:	46bd      	mov	sp, r7
 8030c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030c78:	4770      	bx	lr
	...

08030c7c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8030c7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8030c80:	b088      	sub	sp, #32
 8030c82:	af00      	add	r7, sp, #0
 8030c84:	6078      	str	r0, [r7, #4]
 8030c86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8030c88:	687b      	ldr	r3, [r7, #4]
 8030c8a:	681b      	ldr	r3, [r3, #0]
 8030c8c:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8030c8e:	683b      	ldr	r3, [r7, #0]
 8030c90:	2b01      	cmp	r3, #1
 8030c92:	d904      	bls.n	8030c9e <get_fat+0x22>
 8030c94:	69bb      	ldr	r3, [r7, #24]
 8030c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030c98:	683a      	ldr	r2, [r7, #0]
 8030c9a:	429a      	cmp	r2, r3
 8030c9c:	d302      	bcc.n	8030ca4 <get_fat+0x28>
		val = 1;	/* Internal error */
 8030c9e:	2301      	movs	r3, #1
 8030ca0:	61fb      	str	r3, [r7, #28]
 8030ca2:	e13a      	b.n	8030f1a <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8030ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8030ca8:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8030caa:	69bb      	ldr	r3, [r7, #24]
 8030cac:	781b      	ldrb	r3, [r3, #0]
 8030cae:	3b01      	subs	r3, #1
 8030cb0:	2b03      	cmp	r3, #3
 8030cb2:	f200 8126 	bhi.w	8030f02 <get_fat+0x286>
 8030cb6:	a201      	add	r2, pc, #4	; (adr r2, 8030cbc <get_fat+0x40>)
 8030cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030cbc:	08030ccd 	.word	0x08030ccd
 8030cc0:	08030d7b 	.word	0x08030d7b
 8030cc4:	08030dc7 	.word	0x08030dc7
 8030cc8:	08030e17 	.word	0x08030e17
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8030ccc:	683b      	ldr	r3, [r7, #0]
 8030cce:	60fb      	str	r3, [r7, #12]
 8030cd0:	68fb      	ldr	r3, [r7, #12]
 8030cd2:	085b      	lsrs	r3, r3, #1
 8030cd4:	68fa      	ldr	r2, [r7, #12]
 8030cd6:	4413      	add	r3, r2
 8030cd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8030cda:	69bb      	ldr	r3, [r7, #24]
 8030cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030cde:	69bb      	ldr	r3, [r7, #24]
 8030ce0:	899b      	ldrh	r3, [r3, #12]
 8030ce2:	4619      	mov	r1, r3
 8030ce4:	68fb      	ldr	r3, [r7, #12]
 8030ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8030cea:	4413      	add	r3, r2
 8030cec:	4619      	mov	r1, r3
 8030cee:	69b8      	ldr	r0, [r7, #24]
 8030cf0:	f7ff ff06 	bl	8030b00 <move_window>
 8030cf4:	4603      	mov	r3, r0
 8030cf6:	2b00      	cmp	r3, #0
 8030cf8:	f040 8106 	bne.w	8030f08 <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 8030cfc:	68fb      	ldr	r3, [r7, #12]
 8030cfe:	1c5a      	adds	r2, r3, #1
 8030d00:	60fa      	str	r2, [r7, #12]
 8030d02:	69ba      	ldr	r2, [r7, #24]
 8030d04:	8992      	ldrh	r2, [r2, #12]
 8030d06:	fbb3 f1f2 	udiv	r1, r3, r2
 8030d0a:	fb01 f202 	mul.w	r2, r1, r2
 8030d0e:	1a9b      	subs	r3, r3, r2
 8030d10:	69ba      	ldr	r2, [r7, #24]
 8030d12:	4413      	add	r3, r2
 8030d14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8030d18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8030d1a:	69bb      	ldr	r3, [r7, #24]
 8030d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030d1e:	69bb      	ldr	r3, [r7, #24]
 8030d20:	899b      	ldrh	r3, [r3, #12]
 8030d22:	4619      	mov	r1, r3
 8030d24:	68fb      	ldr	r3, [r7, #12]
 8030d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8030d2a:	4413      	add	r3, r2
 8030d2c:	4619      	mov	r1, r3
 8030d2e:	69b8      	ldr	r0, [r7, #24]
 8030d30:	f7ff fee6 	bl	8030b00 <move_window>
 8030d34:	4603      	mov	r3, r0
 8030d36:	2b00      	cmp	r3, #0
 8030d38:	f040 80e8 	bne.w	8030f0c <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 8030d3c:	69bb      	ldr	r3, [r7, #24]
 8030d3e:	899b      	ldrh	r3, [r3, #12]
 8030d40:	461a      	mov	r2, r3
 8030d42:	68fb      	ldr	r3, [r7, #12]
 8030d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8030d48:	fb01 f202 	mul.w	r2, r1, r2
 8030d4c:	1a9b      	subs	r3, r3, r2
 8030d4e:	69ba      	ldr	r2, [r7, #24]
 8030d50:	4413      	add	r3, r2
 8030d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8030d56:	021b      	lsls	r3, r3, #8
 8030d58:	461a      	mov	r2, r3
 8030d5a:	68bb      	ldr	r3, [r7, #8]
 8030d5c:	4313      	orrs	r3, r2
 8030d5e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8030d60:	683b      	ldr	r3, [r7, #0]
 8030d62:	f003 0301 	and.w	r3, r3, #1
 8030d66:	2b00      	cmp	r3, #0
 8030d68:	d002      	beq.n	8030d70 <get_fat+0xf4>
 8030d6a:	68bb      	ldr	r3, [r7, #8]
 8030d6c:	091b      	lsrs	r3, r3, #4
 8030d6e:	e002      	b.n	8030d76 <get_fat+0xfa>
 8030d70:	68bb      	ldr	r3, [r7, #8]
 8030d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8030d76:	61fb      	str	r3, [r7, #28]
			break;
 8030d78:	e0cf      	b.n	8030f1a <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8030d7a:	69bb      	ldr	r3, [r7, #24]
 8030d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030d7e:	69bb      	ldr	r3, [r7, #24]
 8030d80:	899b      	ldrh	r3, [r3, #12]
 8030d82:	085b      	lsrs	r3, r3, #1
 8030d84:	b29b      	uxth	r3, r3
 8030d86:	4619      	mov	r1, r3
 8030d88:	683b      	ldr	r3, [r7, #0]
 8030d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8030d8e:	4413      	add	r3, r2
 8030d90:	4619      	mov	r1, r3
 8030d92:	69b8      	ldr	r0, [r7, #24]
 8030d94:	f7ff feb4 	bl	8030b00 <move_window>
 8030d98:	4603      	mov	r3, r0
 8030d9a:	2b00      	cmp	r3, #0
 8030d9c:	f040 80b8 	bne.w	8030f10 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8030da0:	69bb      	ldr	r3, [r7, #24]
 8030da2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030da6:	683b      	ldr	r3, [r7, #0]
 8030da8:	005b      	lsls	r3, r3, #1
 8030daa:	69ba      	ldr	r2, [r7, #24]
 8030dac:	8992      	ldrh	r2, [r2, #12]
 8030dae:	fbb3 f0f2 	udiv	r0, r3, r2
 8030db2:	fb00 f202 	mul.w	r2, r0, r2
 8030db6:	1a9b      	subs	r3, r3, r2
 8030db8:	440b      	add	r3, r1
 8030dba:	4618      	mov	r0, r3
 8030dbc:	f7ff fa5c 	bl	8030278 <ld_word>
 8030dc0:	4603      	mov	r3, r0
 8030dc2:	61fb      	str	r3, [r7, #28]
			break;
 8030dc4:	e0a9      	b.n	8030f1a <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8030dc6:	69bb      	ldr	r3, [r7, #24]
 8030dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030dca:	69bb      	ldr	r3, [r7, #24]
 8030dcc:	899b      	ldrh	r3, [r3, #12]
 8030dce:	089b      	lsrs	r3, r3, #2
 8030dd0:	b29b      	uxth	r3, r3
 8030dd2:	4619      	mov	r1, r3
 8030dd4:	683b      	ldr	r3, [r7, #0]
 8030dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8030dda:	4413      	add	r3, r2
 8030ddc:	4619      	mov	r1, r3
 8030dde:	69b8      	ldr	r0, [r7, #24]
 8030de0:	f7ff fe8e 	bl	8030b00 <move_window>
 8030de4:	4603      	mov	r3, r0
 8030de6:	2b00      	cmp	r3, #0
 8030de8:	f040 8094 	bne.w	8030f14 <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8030dec:	69bb      	ldr	r3, [r7, #24]
 8030dee:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030df2:	683b      	ldr	r3, [r7, #0]
 8030df4:	009b      	lsls	r3, r3, #2
 8030df6:	69ba      	ldr	r2, [r7, #24]
 8030df8:	8992      	ldrh	r2, [r2, #12]
 8030dfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8030dfe:	fb00 f202 	mul.w	r2, r0, r2
 8030e02:	1a9b      	subs	r3, r3, r2
 8030e04:	440b      	add	r3, r1
 8030e06:	4618      	mov	r0, r3
 8030e08:	f7ff fa4e 	bl	80302a8 <ld_dword>
 8030e0c:	4603      	mov	r3, r0
 8030e0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8030e12:	61fb      	str	r3, [r7, #28]
			break;
 8030e14:	e081      	b.n	8030f1a <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8030e16:	687b      	ldr	r3, [r7, #4]
 8030e18:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8030e1c:	4313      	orrs	r3, r2
 8030e1e:	d070      	beq.n	8030f02 <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8030e20:	687b      	ldr	r3, [r7, #4]
 8030e22:	689b      	ldr	r3, [r3, #8]
 8030e24:	683a      	ldr	r2, [r7, #0]
 8030e26:	1ad3      	subs	r3, r2, r3
 8030e28:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8030e2a:	687b      	ldr	r3, [r7, #4]
 8030e2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8030e30:	1e54      	subs	r4, r2, #1
 8030e32:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 8030e36:	69bb      	ldr	r3, [r7, #24]
 8030e38:	899b      	ldrh	r3, [r3, #12]
 8030e3a:	b29b      	uxth	r3, r3
 8030e3c:	2200      	movs	r2, #0
 8030e3e:	4698      	mov	r8, r3
 8030e40:	4691      	mov	r9, r2
 8030e42:	4642      	mov	r2, r8
 8030e44:	464b      	mov	r3, r9
 8030e46:	4620      	mov	r0, r4
 8030e48:	4629      	mov	r1, r5
 8030e4a:	f7ef fac9 	bl	80203e0 <__aeabi_uldivmod>
 8030e4e:	4602      	mov	r2, r0
 8030e50:	460b      	mov	r3, r1
 8030e52:	69bb      	ldr	r3, [r7, #24]
 8030e54:	895b      	ldrh	r3, [r3, #10]
 8030e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8030e5a:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8030e5c:	687b      	ldr	r3, [r7, #4]
 8030e5e:	79db      	ldrb	r3, [r3, #7]
 8030e60:	2b02      	cmp	r3, #2
 8030e62:	d10e      	bne.n	8030e82 <get_fat+0x206>
					if (cofs <= clen) {
 8030e64:	697a      	ldr	r2, [r7, #20]
 8030e66:	693b      	ldr	r3, [r7, #16]
 8030e68:	429a      	cmp	r2, r3
 8030e6a:	d80a      	bhi.n	8030e82 <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8030e6c:	697a      	ldr	r2, [r7, #20]
 8030e6e:	693b      	ldr	r3, [r7, #16]
 8030e70:	429a      	cmp	r2, r3
 8030e72:	d002      	beq.n	8030e7a <get_fat+0x1fe>
 8030e74:	683b      	ldr	r3, [r7, #0]
 8030e76:	3301      	adds	r3, #1
 8030e78:	e001      	b.n	8030e7e <get_fat+0x202>
 8030e7a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8030e7e:	61fb      	str	r3, [r7, #28]
						break;
 8030e80:	e04b      	b.n	8030f1a <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8030e82:	687b      	ldr	r3, [r7, #4]
 8030e84:	79db      	ldrb	r3, [r3, #7]
 8030e86:	2b03      	cmp	r3, #3
 8030e88:	d108      	bne.n	8030e9c <get_fat+0x220>
 8030e8a:	687b      	ldr	r3, [r7, #4]
 8030e8c:	699b      	ldr	r3, [r3, #24]
 8030e8e:	697a      	ldr	r2, [r7, #20]
 8030e90:	429a      	cmp	r2, r3
 8030e92:	d203      	bcs.n	8030e9c <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 8030e94:	683b      	ldr	r3, [r7, #0]
 8030e96:	3301      	adds	r3, #1
 8030e98:	61fb      	str	r3, [r7, #28]
					break;
 8030e9a:	e03e      	b.n	8030f1a <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8030e9c:	687b      	ldr	r3, [r7, #4]
 8030e9e:	79db      	ldrb	r3, [r3, #7]
 8030ea0:	2b02      	cmp	r3, #2
 8030ea2:	d02e      	beq.n	8030f02 <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8030ea4:	687b      	ldr	r3, [r7, #4]
 8030ea6:	69db      	ldr	r3, [r3, #28]
 8030ea8:	2b00      	cmp	r3, #0
 8030eaa:	d003      	beq.n	8030eb4 <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8030eac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8030eb0:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8030eb2:	e032      	b.n	8030f1a <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8030eb4:	69bb      	ldr	r3, [r7, #24]
 8030eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030eb8:	69bb      	ldr	r3, [r7, #24]
 8030eba:	899b      	ldrh	r3, [r3, #12]
 8030ebc:	089b      	lsrs	r3, r3, #2
 8030ebe:	b29b      	uxth	r3, r3
 8030ec0:	4619      	mov	r1, r3
 8030ec2:	683b      	ldr	r3, [r7, #0]
 8030ec4:	fbb3 f3f1 	udiv	r3, r3, r1
 8030ec8:	4413      	add	r3, r2
 8030eca:	4619      	mov	r1, r3
 8030ecc:	69b8      	ldr	r0, [r7, #24]
 8030ece:	f7ff fe17 	bl	8030b00 <move_window>
 8030ed2:	4603      	mov	r3, r0
 8030ed4:	2b00      	cmp	r3, #0
 8030ed6:	d11f      	bne.n	8030f18 <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8030ed8:	69bb      	ldr	r3, [r7, #24]
 8030eda:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030ede:	683b      	ldr	r3, [r7, #0]
 8030ee0:	009b      	lsls	r3, r3, #2
 8030ee2:	69ba      	ldr	r2, [r7, #24]
 8030ee4:	8992      	ldrh	r2, [r2, #12]
 8030ee6:	fbb3 f0f2 	udiv	r0, r3, r2
 8030eea:	fb00 f202 	mul.w	r2, r0, r2
 8030eee:	1a9b      	subs	r3, r3, r2
 8030ef0:	440b      	add	r3, r1
 8030ef2:	4618      	mov	r0, r3
 8030ef4:	f7ff f9d8 	bl	80302a8 <ld_dword>
 8030ef8:	4603      	mov	r3, r0
 8030efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8030efe:	61fb      	str	r3, [r7, #28]
					break;
 8030f00:	e00b      	b.n	8030f1a <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8030f02:	2301      	movs	r3, #1
 8030f04:	61fb      	str	r3, [r7, #28]
 8030f06:	e008      	b.n	8030f1a <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8030f08:	bf00      	nop
 8030f0a:	e006      	b.n	8030f1a <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8030f0c:	bf00      	nop
 8030f0e:	e004      	b.n	8030f1a <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8030f10:	bf00      	nop
 8030f12:	e002      	b.n	8030f1a <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8030f14:	bf00      	nop
 8030f16:	e000      	b.n	8030f1a <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8030f18:	bf00      	nop
		}
	}

	return val;
 8030f1a:	69fb      	ldr	r3, [r7, #28]
}
 8030f1c:	4618      	mov	r0, r3
 8030f1e:	3720      	adds	r7, #32
 8030f20:	46bd      	mov	sp, r7
 8030f22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8030f26:	bf00      	nop

08030f28 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8030f28:	b590      	push	{r4, r7, lr}
 8030f2a:	b089      	sub	sp, #36	; 0x24
 8030f2c:	af00      	add	r7, sp, #0
 8030f2e:	60f8      	str	r0, [r7, #12]
 8030f30:	60b9      	str	r1, [r7, #8]
 8030f32:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8030f34:	2302      	movs	r3, #2
 8030f36:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8030f38:	68bb      	ldr	r3, [r7, #8]
 8030f3a:	2b01      	cmp	r3, #1
 8030f3c:	f240 8106 	bls.w	803114c <put_fat+0x224>
 8030f40:	68fb      	ldr	r3, [r7, #12]
 8030f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030f44:	68ba      	ldr	r2, [r7, #8]
 8030f46:	429a      	cmp	r2, r3
 8030f48:	f080 8100 	bcs.w	803114c <put_fat+0x224>
		switch (fs->fs_type) {
 8030f4c:	68fb      	ldr	r3, [r7, #12]
 8030f4e:	781b      	ldrb	r3, [r3, #0]
 8030f50:	2b04      	cmp	r3, #4
 8030f52:	f300 8104 	bgt.w	803115e <put_fat+0x236>
 8030f56:	2b03      	cmp	r3, #3
 8030f58:	f280 80b3 	bge.w	80310c2 <put_fat+0x19a>
 8030f5c:	2b01      	cmp	r3, #1
 8030f5e:	d003      	beq.n	8030f68 <put_fat+0x40>
 8030f60:	2b02      	cmp	r3, #2
 8030f62:	f000 8083 	beq.w	803106c <put_fat+0x144>
 8030f66:	e0fa      	b.n	803115e <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8030f68:	68bb      	ldr	r3, [r7, #8]
 8030f6a:	61bb      	str	r3, [r7, #24]
 8030f6c:	69bb      	ldr	r3, [r7, #24]
 8030f6e:	085b      	lsrs	r3, r3, #1
 8030f70:	69ba      	ldr	r2, [r7, #24]
 8030f72:	4413      	add	r3, r2
 8030f74:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8030f76:	68fb      	ldr	r3, [r7, #12]
 8030f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030f7a:	68fb      	ldr	r3, [r7, #12]
 8030f7c:	899b      	ldrh	r3, [r3, #12]
 8030f7e:	4619      	mov	r1, r3
 8030f80:	69bb      	ldr	r3, [r7, #24]
 8030f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8030f86:	4413      	add	r3, r2
 8030f88:	4619      	mov	r1, r3
 8030f8a:	68f8      	ldr	r0, [r7, #12]
 8030f8c:	f7ff fdb8 	bl	8030b00 <move_window>
 8030f90:	4603      	mov	r3, r0
 8030f92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8030f94:	7ffb      	ldrb	r3, [r7, #31]
 8030f96:	2b00      	cmp	r3, #0
 8030f98:	f040 80da 	bne.w	8031150 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 8030f9c:	68fb      	ldr	r3, [r7, #12]
 8030f9e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030fa2:	69bb      	ldr	r3, [r7, #24]
 8030fa4:	1c5a      	adds	r2, r3, #1
 8030fa6:	61ba      	str	r2, [r7, #24]
 8030fa8:	68fa      	ldr	r2, [r7, #12]
 8030faa:	8992      	ldrh	r2, [r2, #12]
 8030fac:	fbb3 f0f2 	udiv	r0, r3, r2
 8030fb0:	fb00 f202 	mul.w	r2, r0, r2
 8030fb4:	1a9b      	subs	r3, r3, r2
 8030fb6:	440b      	add	r3, r1
 8030fb8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8030fba:	68bb      	ldr	r3, [r7, #8]
 8030fbc:	f003 0301 	and.w	r3, r3, #1
 8030fc0:	2b00      	cmp	r3, #0
 8030fc2:	d00d      	beq.n	8030fe0 <put_fat+0xb8>
 8030fc4:	697b      	ldr	r3, [r7, #20]
 8030fc6:	781b      	ldrb	r3, [r3, #0]
 8030fc8:	b25b      	sxtb	r3, r3
 8030fca:	f003 030f 	and.w	r3, r3, #15
 8030fce:	b25a      	sxtb	r2, r3
 8030fd0:	687b      	ldr	r3, [r7, #4]
 8030fd2:	b2db      	uxtb	r3, r3
 8030fd4:	011b      	lsls	r3, r3, #4
 8030fd6:	b25b      	sxtb	r3, r3
 8030fd8:	4313      	orrs	r3, r2
 8030fda:	b25b      	sxtb	r3, r3
 8030fdc:	b2db      	uxtb	r3, r3
 8030fde:	e001      	b.n	8030fe4 <put_fat+0xbc>
 8030fe0:	687b      	ldr	r3, [r7, #4]
 8030fe2:	b2db      	uxtb	r3, r3
 8030fe4:	697a      	ldr	r2, [r7, #20]
 8030fe6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8030fe8:	68fb      	ldr	r3, [r7, #12]
 8030fea:	2201      	movs	r2, #1
 8030fec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8030fee:	68fb      	ldr	r3, [r7, #12]
 8030ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030ff2:	68fb      	ldr	r3, [r7, #12]
 8030ff4:	899b      	ldrh	r3, [r3, #12]
 8030ff6:	4619      	mov	r1, r3
 8030ff8:	69bb      	ldr	r3, [r7, #24]
 8030ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8030ffe:	4413      	add	r3, r2
 8031000:	4619      	mov	r1, r3
 8031002:	68f8      	ldr	r0, [r7, #12]
 8031004:	f7ff fd7c 	bl	8030b00 <move_window>
 8031008:	4603      	mov	r3, r0
 803100a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 803100c:	7ffb      	ldrb	r3, [r7, #31]
 803100e:	2b00      	cmp	r3, #0
 8031010:	f040 80a0 	bne.w	8031154 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 8031014:	68fb      	ldr	r3, [r7, #12]
 8031016:	f103 0150 	add.w	r1, r3, #80	; 0x50
 803101a:	68fb      	ldr	r3, [r7, #12]
 803101c:	899b      	ldrh	r3, [r3, #12]
 803101e:	461a      	mov	r2, r3
 8031020:	69bb      	ldr	r3, [r7, #24]
 8031022:	fbb3 f0f2 	udiv	r0, r3, r2
 8031026:	fb00 f202 	mul.w	r2, r0, r2
 803102a:	1a9b      	subs	r3, r3, r2
 803102c:	440b      	add	r3, r1
 803102e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8031030:	68bb      	ldr	r3, [r7, #8]
 8031032:	f003 0301 	and.w	r3, r3, #1
 8031036:	2b00      	cmp	r3, #0
 8031038:	d003      	beq.n	8031042 <put_fat+0x11a>
 803103a:	687b      	ldr	r3, [r7, #4]
 803103c:	091b      	lsrs	r3, r3, #4
 803103e:	b2db      	uxtb	r3, r3
 8031040:	e00e      	b.n	8031060 <put_fat+0x138>
 8031042:	697b      	ldr	r3, [r7, #20]
 8031044:	781b      	ldrb	r3, [r3, #0]
 8031046:	b25b      	sxtb	r3, r3
 8031048:	f023 030f 	bic.w	r3, r3, #15
 803104c:	b25a      	sxtb	r2, r3
 803104e:	687b      	ldr	r3, [r7, #4]
 8031050:	0a1b      	lsrs	r3, r3, #8
 8031052:	b25b      	sxtb	r3, r3
 8031054:	f003 030f 	and.w	r3, r3, #15
 8031058:	b25b      	sxtb	r3, r3
 803105a:	4313      	orrs	r3, r2
 803105c:	b25b      	sxtb	r3, r3
 803105e:	b2db      	uxtb	r3, r3
 8031060:	697a      	ldr	r2, [r7, #20]
 8031062:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8031064:	68fb      	ldr	r3, [r7, #12]
 8031066:	2201      	movs	r2, #1
 8031068:	70da      	strb	r2, [r3, #3]
			break;
 803106a:	e078      	b.n	803115e <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 803106c:	68fb      	ldr	r3, [r7, #12]
 803106e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8031070:	68fb      	ldr	r3, [r7, #12]
 8031072:	899b      	ldrh	r3, [r3, #12]
 8031074:	085b      	lsrs	r3, r3, #1
 8031076:	b29b      	uxth	r3, r3
 8031078:	4619      	mov	r1, r3
 803107a:	68bb      	ldr	r3, [r7, #8]
 803107c:	fbb3 f3f1 	udiv	r3, r3, r1
 8031080:	4413      	add	r3, r2
 8031082:	4619      	mov	r1, r3
 8031084:	68f8      	ldr	r0, [r7, #12]
 8031086:	f7ff fd3b 	bl	8030b00 <move_window>
 803108a:	4603      	mov	r3, r0
 803108c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 803108e:	7ffb      	ldrb	r3, [r7, #31]
 8031090:	2b00      	cmp	r3, #0
 8031092:	d161      	bne.n	8031158 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8031094:	68fb      	ldr	r3, [r7, #12]
 8031096:	f103 0150 	add.w	r1, r3, #80	; 0x50
 803109a:	68bb      	ldr	r3, [r7, #8]
 803109c:	005b      	lsls	r3, r3, #1
 803109e:	68fa      	ldr	r2, [r7, #12]
 80310a0:	8992      	ldrh	r2, [r2, #12]
 80310a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80310a6:	fb00 f202 	mul.w	r2, r0, r2
 80310aa:	1a9b      	subs	r3, r3, r2
 80310ac:	440b      	add	r3, r1
 80310ae:	687a      	ldr	r2, [r7, #4]
 80310b0:	b292      	uxth	r2, r2
 80310b2:	4611      	mov	r1, r2
 80310b4:	4618      	mov	r0, r3
 80310b6:	f7ff f9f5 	bl	80304a4 <st_word>
			fs->wflag = 1;
 80310ba:	68fb      	ldr	r3, [r7, #12]
 80310bc:	2201      	movs	r2, #1
 80310be:	70da      	strb	r2, [r3, #3]
			break;
 80310c0:	e04d      	b.n	803115e <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80310c2:	68fb      	ldr	r3, [r7, #12]
 80310c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80310c6:	68fb      	ldr	r3, [r7, #12]
 80310c8:	899b      	ldrh	r3, [r3, #12]
 80310ca:	089b      	lsrs	r3, r3, #2
 80310cc:	b29b      	uxth	r3, r3
 80310ce:	4619      	mov	r1, r3
 80310d0:	68bb      	ldr	r3, [r7, #8]
 80310d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80310d6:	4413      	add	r3, r2
 80310d8:	4619      	mov	r1, r3
 80310da:	68f8      	ldr	r0, [r7, #12]
 80310dc:	f7ff fd10 	bl	8030b00 <move_window>
 80310e0:	4603      	mov	r3, r0
 80310e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80310e4:	7ffb      	ldrb	r3, [r7, #31]
 80310e6:	2b00      	cmp	r3, #0
 80310e8:	d138      	bne.n	803115c <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80310ea:	68fb      	ldr	r3, [r7, #12]
 80310ec:	781b      	ldrb	r3, [r3, #0]
 80310ee:	2b04      	cmp	r3, #4
 80310f0:	d017      	beq.n	8031122 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80310f2:	687b      	ldr	r3, [r7, #4]
 80310f4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80310f8:	68fb      	ldr	r3, [r7, #12]
 80310fa:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80310fe:	68bb      	ldr	r3, [r7, #8]
 8031100:	009b      	lsls	r3, r3, #2
 8031102:	68fa      	ldr	r2, [r7, #12]
 8031104:	8992      	ldrh	r2, [r2, #12]
 8031106:	fbb3 f0f2 	udiv	r0, r3, r2
 803110a:	fb00 f202 	mul.w	r2, r0, r2
 803110e:	1a9b      	subs	r3, r3, r2
 8031110:	440b      	add	r3, r1
 8031112:	4618      	mov	r0, r3
 8031114:	f7ff f8c8 	bl	80302a8 <ld_dword>
 8031118:	4603      	mov	r3, r0
 803111a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 803111e:	4323      	orrs	r3, r4
 8031120:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8031122:	68fb      	ldr	r3, [r7, #12]
 8031124:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8031128:	68bb      	ldr	r3, [r7, #8]
 803112a:	009b      	lsls	r3, r3, #2
 803112c:	68fa      	ldr	r2, [r7, #12]
 803112e:	8992      	ldrh	r2, [r2, #12]
 8031130:	fbb3 f0f2 	udiv	r0, r3, r2
 8031134:	fb00 f202 	mul.w	r2, r0, r2
 8031138:	1a9b      	subs	r3, r3, r2
 803113a:	440b      	add	r3, r1
 803113c:	6879      	ldr	r1, [r7, #4]
 803113e:	4618      	mov	r0, r3
 8031140:	f7ff f9cb 	bl	80304da <st_dword>
			fs->wflag = 1;
 8031144:	68fb      	ldr	r3, [r7, #12]
 8031146:	2201      	movs	r2, #1
 8031148:	70da      	strb	r2, [r3, #3]
			break;
 803114a:	e008      	b.n	803115e <put_fat+0x236>
		}
	}
 803114c:	bf00      	nop
 803114e:	e006      	b.n	803115e <put_fat+0x236>
			if (res != FR_OK) break;
 8031150:	bf00      	nop
 8031152:	e004      	b.n	803115e <put_fat+0x236>
			if (res != FR_OK) break;
 8031154:	bf00      	nop
 8031156:	e002      	b.n	803115e <put_fat+0x236>
			if (res != FR_OK) break;
 8031158:	bf00      	nop
 803115a:	e000      	b.n	803115e <put_fat+0x236>
			if (res != FR_OK) break;
 803115c:	bf00      	nop
	return res;
 803115e:	7ffb      	ldrb	r3, [r7, #31]
}
 8031160:	4618      	mov	r0, r3
 8031162:	3724      	adds	r7, #36	; 0x24
 8031164:	46bd      	mov	sp, r7
 8031166:	bd90      	pop	{r4, r7, pc}

08031168 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8031168:	b580      	push	{r7, lr}
 803116a:	b08a      	sub	sp, #40	; 0x28
 803116c:	af00      	add	r7, sp, #0
 803116e:	60f8      	str	r0, [r7, #12]
 8031170:	60b9      	str	r1, [r7, #8]
 8031172:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8031174:	68bb      	ldr	r3, [r7, #8]
 8031176:	3b02      	subs	r3, #2
 8031178:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 803117a:	68fb      	ldr	r3, [r7, #12]
 803117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803117e:	3b02      	subs	r3, #2
 8031180:	68ba      	ldr	r2, [r7, #8]
 8031182:	429a      	cmp	r2, r3
 8031184:	d301      	bcc.n	803118a <find_bitmap+0x22>
 8031186:	2300      	movs	r3, #0
 8031188:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 803118a:	68bb      	ldr	r3, [r7, #8]
 803118c:	61fb      	str	r3, [r7, #28]
 803118e:	69fb      	ldr	r3, [r7, #28]
 8031190:	61bb      	str	r3, [r7, #24]
 8031192:	2300      	movs	r3, #0
 8031194:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8031196:	68fb      	ldr	r3, [r7, #12]
 8031198:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 803119a:	69fb      	ldr	r3, [r7, #28]
 803119c:	08db      	lsrs	r3, r3, #3
 803119e:	68f9      	ldr	r1, [r7, #12]
 80311a0:	8989      	ldrh	r1, [r1, #12]
 80311a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80311a6:	4413      	add	r3, r2
 80311a8:	4619      	mov	r1, r3
 80311aa:	68f8      	ldr	r0, [r7, #12]
 80311ac:	f7ff fca8 	bl	8030b00 <move_window>
 80311b0:	4603      	mov	r3, r0
 80311b2:	2b00      	cmp	r3, #0
 80311b4:	d002      	beq.n	80311bc <find_bitmap+0x54>
 80311b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80311ba:	e058      	b.n	803126e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80311bc:	69fb      	ldr	r3, [r7, #28]
 80311be:	08db      	lsrs	r3, r3, #3
 80311c0:	68fa      	ldr	r2, [r7, #12]
 80311c2:	8992      	ldrh	r2, [r2, #12]
 80311c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80311c8:	fb01 f202 	mul.w	r2, r1, r2
 80311cc:	1a9b      	subs	r3, r3, r2
 80311ce:	623b      	str	r3, [r7, #32]
 80311d0:	69fb      	ldr	r3, [r7, #28]
 80311d2:	f003 0307 	and.w	r3, r3, #7
 80311d6:	2201      	movs	r2, #1
 80311d8:	fa02 f303 	lsl.w	r3, r2, r3
 80311dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80311e0:	68fa      	ldr	r2, [r7, #12]
 80311e2:	6a3b      	ldr	r3, [r7, #32]
 80311e4:	4413      	add	r3, r2
 80311e6:	3350      	adds	r3, #80	; 0x50
 80311e8:	781a      	ldrb	r2, [r3, #0]
 80311ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80311ee:	4013      	ands	r3, r2
 80311f0:	74fb      	strb	r3, [r7, #19]
 80311f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80311f6:	005b      	lsls	r3, r3, #1
 80311f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80311fc:	69fb      	ldr	r3, [r7, #28]
 80311fe:	3301      	adds	r3, #1
 8031200:	61fb      	str	r3, [r7, #28]
 8031202:	68fb      	ldr	r3, [r7, #12]
 8031204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031206:	3b02      	subs	r3, #2
 8031208:	69fa      	ldr	r2, [r7, #28]
 803120a:	429a      	cmp	r2, r3
 803120c:	d307      	bcc.n	803121e <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 803120e:	2300      	movs	r3, #0
 8031210:	61fb      	str	r3, [r7, #28]
 8031212:	2300      	movs	r3, #0
 8031214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8031218:	68fb      	ldr	r3, [r7, #12]
 803121a:	899b      	ldrh	r3, [r3, #12]
 803121c:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 803121e:	7cfb      	ldrb	r3, [r7, #19]
 8031220:	2b00      	cmp	r3, #0
 8031222:	d109      	bne.n	8031238 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8031224:	697b      	ldr	r3, [r7, #20]
 8031226:	3301      	adds	r3, #1
 8031228:	617b      	str	r3, [r7, #20]
 803122a:	697a      	ldr	r2, [r7, #20]
 803122c:	687b      	ldr	r3, [r7, #4]
 803122e:	429a      	cmp	r2, r3
 8031230:	d106      	bne.n	8031240 <find_bitmap+0xd8>
 8031232:	69bb      	ldr	r3, [r7, #24]
 8031234:	3302      	adds	r3, #2
 8031236:	e01a      	b.n	803126e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8031238:	69fb      	ldr	r3, [r7, #28]
 803123a:	61bb      	str	r3, [r7, #24]
 803123c:	2300      	movs	r3, #0
 803123e:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8031240:	69fa      	ldr	r2, [r7, #28]
 8031242:	68bb      	ldr	r3, [r7, #8]
 8031244:	429a      	cmp	r2, r3
 8031246:	d101      	bne.n	803124c <find_bitmap+0xe4>
 8031248:	2300      	movs	r3, #0
 803124a:	e010      	b.n	803126e <find_bitmap+0x106>
			} while (bm);
 803124c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8031250:	2b00      	cmp	r3, #0
 8031252:	d1c5      	bne.n	80311e0 <find_bitmap+0x78>
			bm = 1;
 8031254:	2301      	movs	r3, #1
 8031256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 803125a:	6a3b      	ldr	r3, [r7, #32]
 803125c:	3301      	adds	r3, #1
 803125e:	623b      	str	r3, [r7, #32]
 8031260:	68fb      	ldr	r3, [r7, #12]
 8031262:	899b      	ldrh	r3, [r3, #12]
 8031264:	461a      	mov	r2, r3
 8031266:	6a3b      	ldr	r3, [r7, #32]
 8031268:	4293      	cmp	r3, r2
 803126a:	d3b9      	bcc.n	80311e0 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 803126c:	e793      	b.n	8031196 <find_bitmap+0x2e>
	}
}
 803126e:	4618      	mov	r0, r3
 8031270:	3728      	adds	r7, #40	; 0x28
 8031272:	46bd      	mov	sp, r7
 8031274:	bd80      	pop	{r7, pc}

08031276 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8031276:	b580      	push	{r7, lr}
 8031278:	b088      	sub	sp, #32
 803127a:	af00      	add	r7, sp, #0
 803127c:	60f8      	str	r0, [r7, #12]
 803127e:	60b9      	str	r1, [r7, #8]
 8031280:	607a      	str	r2, [r7, #4]
 8031282:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8031284:	68bb      	ldr	r3, [r7, #8]
 8031286:	3b02      	subs	r3, #2
 8031288:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 803128a:	68fb      	ldr	r3, [r7, #12]
 803128c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 803128e:	68bb      	ldr	r3, [r7, #8]
 8031290:	08db      	lsrs	r3, r3, #3
 8031292:	68f9      	ldr	r1, [r7, #12]
 8031294:	8989      	ldrh	r1, [r1, #12]
 8031296:	fbb3 f3f1 	udiv	r3, r3, r1
 803129a:	4413      	add	r3, r2
 803129c:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 803129e:	68bb      	ldr	r3, [r7, #8]
 80312a0:	08db      	lsrs	r3, r3, #3
 80312a2:	68fa      	ldr	r2, [r7, #12]
 80312a4:	8992      	ldrh	r2, [r2, #12]
 80312a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80312aa:	fb01 f202 	mul.w	r2, r1, r2
 80312ae:	1a9b      	subs	r3, r3, r2
 80312b0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80312b2:	68bb      	ldr	r3, [r7, #8]
 80312b4:	f003 0307 	and.w	r3, r3, #7
 80312b8:	2201      	movs	r2, #1
 80312ba:	fa02 f303 	lsl.w	r3, r2, r3
 80312be:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80312c0:	697b      	ldr	r3, [r7, #20]
 80312c2:	1c5a      	adds	r2, r3, #1
 80312c4:	617a      	str	r2, [r7, #20]
 80312c6:	4619      	mov	r1, r3
 80312c8:	68f8      	ldr	r0, [r7, #12]
 80312ca:	f7ff fc19 	bl	8030b00 <move_window>
 80312ce:	4603      	mov	r3, r0
 80312d0:	2b00      	cmp	r3, #0
 80312d2:	d001      	beq.n	80312d8 <change_bitmap+0x62>
 80312d4:	2301      	movs	r3, #1
 80312d6:	e03f      	b.n	8031358 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80312d8:	68fa      	ldr	r2, [r7, #12]
 80312da:	69bb      	ldr	r3, [r7, #24]
 80312dc:	4413      	add	r3, r2
 80312de:	3350      	adds	r3, #80	; 0x50
 80312e0:	781a      	ldrb	r2, [r3, #0]
 80312e2:	7ffb      	ldrb	r3, [r7, #31]
 80312e4:	4013      	ands	r3, r2
 80312e6:	b2db      	uxtb	r3, r3
 80312e8:	2b00      	cmp	r3, #0
 80312ea:	bf14      	ite	ne
 80312ec:	2301      	movne	r3, #1
 80312ee:	2300      	moveq	r3, #0
 80312f0:	b2db      	uxtb	r3, r3
 80312f2:	461a      	mov	r2, r3
 80312f4:	683b      	ldr	r3, [r7, #0]
 80312f6:	4293      	cmp	r3, r2
 80312f8:	d101      	bne.n	80312fe <change_bitmap+0x88>
 80312fa:	2302      	movs	r3, #2
 80312fc:	e02c      	b.n	8031358 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 80312fe:	68fa      	ldr	r2, [r7, #12]
 8031300:	69bb      	ldr	r3, [r7, #24]
 8031302:	4413      	add	r3, r2
 8031304:	3350      	adds	r3, #80	; 0x50
 8031306:	781a      	ldrb	r2, [r3, #0]
 8031308:	7ffb      	ldrb	r3, [r7, #31]
 803130a:	4053      	eors	r3, r2
 803130c:	b2d9      	uxtb	r1, r3
 803130e:	68fa      	ldr	r2, [r7, #12]
 8031310:	69bb      	ldr	r3, [r7, #24]
 8031312:	4413      	add	r3, r2
 8031314:	3350      	adds	r3, #80	; 0x50
 8031316:	460a      	mov	r2, r1
 8031318:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 803131a:	68fb      	ldr	r3, [r7, #12]
 803131c:	2201      	movs	r2, #1
 803131e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8031320:	687b      	ldr	r3, [r7, #4]
 8031322:	3b01      	subs	r3, #1
 8031324:	607b      	str	r3, [r7, #4]
 8031326:	687b      	ldr	r3, [r7, #4]
 8031328:	2b00      	cmp	r3, #0
 803132a:	d101      	bne.n	8031330 <change_bitmap+0xba>
 803132c:	2300      	movs	r3, #0
 803132e:	e013      	b.n	8031358 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8031330:	7ffb      	ldrb	r3, [r7, #31]
 8031332:	005b      	lsls	r3, r3, #1
 8031334:	77fb      	strb	r3, [r7, #31]
 8031336:	7ffb      	ldrb	r3, [r7, #31]
 8031338:	2b00      	cmp	r3, #0
 803133a:	d1cd      	bne.n	80312d8 <change_bitmap+0x62>
			bm = 1;
 803133c:	2301      	movs	r3, #1
 803133e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8031340:	69bb      	ldr	r3, [r7, #24]
 8031342:	3301      	adds	r3, #1
 8031344:	61bb      	str	r3, [r7, #24]
 8031346:	68fb      	ldr	r3, [r7, #12]
 8031348:	899b      	ldrh	r3, [r3, #12]
 803134a:	461a      	mov	r2, r3
 803134c:	69bb      	ldr	r3, [r7, #24]
 803134e:	4293      	cmp	r3, r2
 8031350:	d3c2      	bcc.n	80312d8 <change_bitmap+0x62>
		i = 0;
 8031352:	2300      	movs	r3, #0
 8031354:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8031356:	e7b3      	b.n	80312c0 <change_bitmap+0x4a>
	}
}
 8031358:	4618      	mov	r0, r3
 803135a:	3720      	adds	r7, #32
 803135c:	46bd      	mov	sp, r7
 803135e:	bd80      	pop	{r7, pc}

08031360 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8031360:	b580      	push	{r7, lr}
 8031362:	b086      	sub	sp, #24
 8031364:	af00      	add	r7, sp, #0
 8031366:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8031368:	687b      	ldr	r3, [r7, #4]
 803136a:	79db      	ldrb	r3, [r3, #7]
 803136c:	2b03      	cmp	r3, #3
 803136e:	d121      	bne.n	80313b4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8031370:	687b      	ldr	r3, [r7, #4]
 8031372:	689b      	ldr	r3, [r3, #8]
 8031374:	617b      	str	r3, [r7, #20]
 8031376:	687b      	ldr	r3, [r7, #4]
 8031378:	699b      	ldr	r3, [r3, #24]
 803137a:	613b      	str	r3, [r7, #16]
 803137c:	e014      	b.n	80313a8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 803137e:	687b      	ldr	r3, [r7, #4]
 8031380:	6818      	ldr	r0, [r3, #0]
 8031382:	697b      	ldr	r3, [r7, #20]
 8031384:	3301      	adds	r3, #1
 8031386:	461a      	mov	r2, r3
 8031388:	6979      	ldr	r1, [r7, #20]
 803138a:	f7ff fdcd 	bl	8030f28 <put_fat>
 803138e:	4603      	mov	r3, r0
 8031390:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8031392:	7bfb      	ldrb	r3, [r7, #15]
 8031394:	2b00      	cmp	r3, #0
 8031396:	d001      	beq.n	803139c <fill_first_frag+0x3c>
 8031398:	7bfb      	ldrb	r3, [r7, #15]
 803139a:	e00c      	b.n	80313b6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 803139c:	697b      	ldr	r3, [r7, #20]
 803139e:	3301      	adds	r3, #1
 80313a0:	617b      	str	r3, [r7, #20]
 80313a2:	693b      	ldr	r3, [r7, #16]
 80313a4:	3b01      	subs	r3, #1
 80313a6:	613b      	str	r3, [r7, #16]
 80313a8:	693b      	ldr	r3, [r7, #16]
 80313aa:	2b00      	cmp	r3, #0
 80313ac:	d1e7      	bne.n	803137e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80313ae:	687b      	ldr	r3, [r7, #4]
 80313b0:	2200      	movs	r2, #0
 80313b2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 80313b4:	2300      	movs	r3, #0
}
 80313b6:	4618      	mov	r0, r3
 80313b8:	3718      	adds	r7, #24
 80313ba:	46bd      	mov	sp, r7
 80313bc:	bd80      	pop	{r7, pc}

080313be <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 80313be:	b580      	push	{r7, lr}
 80313c0:	b086      	sub	sp, #24
 80313c2:	af00      	add	r7, sp, #0
 80313c4:	60f8      	str	r0, [r7, #12]
 80313c6:	60b9      	str	r1, [r7, #8]
 80313c8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80313ca:	e020      	b.n	803140e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80313cc:	68fb      	ldr	r3, [r7, #12]
 80313ce:	6818      	ldr	r0, [r3, #0]
 80313d0:	68fb      	ldr	r3, [r7, #12]
 80313d2:	69db      	ldr	r3, [r3, #28]
 80313d4:	68ba      	ldr	r2, [r7, #8]
 80313d6:	1ad3      	subs	r3, r2, r3
 80313d8:	1c59      	adds	r1, r3, #1
 80313da:	68fb      	ldr	r3, [r7, #12]
 80313dc:	69db      	ldr	r3, [r3, #28]
 80313de:	2b01      	cmp	r3, #1
 80313e0:	d905      	bls.n	80313ee <fill_last_frag+0x30>
 80313e2:	68fb      	ldr	r3, [r7, #12]
 80313e4:	69db      	ldr	r3, [r3, #28]
 80313e6:	68ba      	ldr	r2, [r7, #8]
 80313e8:	1ad3      	subs	r3, r2, r3
 80313ea:	3302      	adds	r3, #2
 80313ec:	e000      	b.n	80313f0 <fill_last_frag+0x32>
 80313ee:	687b      	ldr	r3, [r7, #4]
 80313f0:	461a      	mov	r2, r3
 80313f2:	f7ff fd99 	bl	8030f28 <put_fat>
 80313f6:	4603      	mov	r3, r0
 80313f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80313fa:	7dfb      	ldrb	r3, [r7, #23]
 80313fc:	2b00      	cmp	r3, #0
 80313fe:	d001      	beq.n	8031404 <fill_last_frag+0x46>
 8031400:	7dfb      	ldrb	r3, [r7, #23]
 8031402:	e009      	b.n	8031418 <fill_last_frag+0x5a>
		obj->n_frag--;
 8031404:	68fb      	ldr	r3, [r7, #12]
 8031406:	69db      	ldr	r3, [r3, #28]
 8031408:	1e5a      	subs	r2, r3, #1
 803140a:	68fb      	ldr	r3, [r7, #12]
 803140c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 803140e:	68fb      	ldr	r3, [r7, #12]
 8031410:	69db      	ldr	r3, [r3, #28]
 8031412:	2b00      	cmp	r3, #0
 8031414:	d1da      	bne.n	80313cc <fill_last_frag+0xe>
	}
	return FR_OK;
 8031416:	2300      	movs	r3, #0
}
 8031418:	4618      	mov	r0, r3
 803141a:	3718      	adds	r7, #24
 803141c:	46bd      	mov	sp, r7
 803141e:	bd80      	pop	{r7, pc}

08031420 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8031420:	b580      	push	{r7, lr}
 8031422:	b08a      	sub	sp, #40	; 0x28
 8031424:	af00      	add	r7, sp, #0
 8031426:	60f8      	str	r0, [r7, #12]
 8031428:	60b9      	str	r1, [r7, #8]
 803142a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 803142c:	2300      	movs	r3, #0
 803142e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8031430:	68fb      	ldr	r3, [r7, #12]
 8031432:	681b      	ldr	r3, [r3, #0]
 8031434:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8031436:	68bb      	ldr	r3, [r7, #8]
 8031438:	627b      	str	r3, [r7, #36]	; 0x24
 803143a:	68bb      	ldr	r3, [r7, #8]
 803143c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 803143e:	68bb      	ldr	r3, [r7, #8]
 8031440:	2b01      	cmp	r3, #1
 8031442:	d904      	bls.n	803144e <remove_chain+0x2e>
 8031444:	69bb      	ldr	r3, [r7, #24]
 8031446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031448:	68ba      	ldr	r2, [r7, #8]
 803144a:	429a      	cmp	r2, r3
 803144c:	d301      	bcc.n	8031452 <remove_chain+0x32>
 803144e:	2302      	movs	r3, #2
 8031450:	e096      	b.n	8031580 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8031452:	687b      	ldr	r3, [r7, #4]
 8031454:	2b00      	cmp	r3, #0
 8031456:	d014      	beq.n	8031482 <remove_chain+0x62>
 8031458:	69bb      	ldr	r3, [r7, #24]
 803145a:	781b      	ldrb	r3, [r3, #0]
 803145c:	2b04      	cmp	r3, #4
 803145e:	d103      	bne.n	8031468 <remove_chain+0x48>
 8031460:	68fb      	ldr	r3, [r7, #12]
 8031462:	79db      	ldrb	r3, [r3, #7]
 8031464:	2b02      	cmp	r3, #2
 8031466:	d00c      	beq.n	8031482 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8031468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803146c:	6879      	ldr	r1, [r7, #4]
 803146e:	69b8      	ldr	r0, [r7, #24]
 8031470:	f7ff fd5a 	bl	8030f28 <put_fat>
 8031474:	4603      	mov	r3, r0
 8031476:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8031478:	7ffb      	ldrb	r3, [r7, #31]
 803147a:	2b00      	cmp	r3, #0
 803147c:	d001      	beq.n	8031482 <remove_chain+0x62>
 803147e:	7ffb      	ldrb	r3, [r7, #31]
 8031480:	e07e      	b.n	8031580 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8031482:	68b9      	ldr	r1, [r7, #8]
 8031484:	68f8      	ldr	r0, [r7, #12]
 8031486:	f7ff fbf9 	bl	8030c7c <get_fat>
 803148a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 803148c:	697b      	ldr	r3, [r7, #20]
 803148e:	2b00      	cmp	r3, #0
 8031490:	d055      	beq.n	803153e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8031492:	697b      	ldr	r3, [r7, #20]
 8031494:	2b01      	cmp	r3, #1
 8031496:	d101      	bne.n	803149c <remove_chain+0x7c>
 8031498:	2302      	movs	r3, #2
 803149a:	e071      	b.n	8031580 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 803149c:	697b      	ldr	r3, [r7, #20]
 803149e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80314a2:	d101      	bne.n	80314a8 <remove_chain+0x88>
 80314a4:	2301      	movs	r3, #1
 80314a6:	e06b      	b.n	8031580 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80314a8:	69bb      	ldr	r3, [r7, #24]
 80314aa:	781b      	ldrb	r3, [r3, #0]
 80314ac:	2b04      	cmp	r3, #4
 80314ae:	d00b      	beq.n	80314c8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80314b0:	2200      	movs	r2, #0
 80314b2:	68b9      	ldr	r1, [r7, #8]
 80314b4:	69b8      	ldr	r0, [r7, #24]
 80314b6:	f7ff fd37 	bl	8030f28 <put_fat>
 80314ba:	4603      	mov	r3, r0
 80314bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80314be:	7ffb      	ldrb	r3, [r7, #31]
 80314c0:	2b00      	cmp	r3, #0
 80314c2:	d001      	beq.n	80314c8 <remove_chain+0xa8>
 80314c4:	7ffb      	ldrb	r3, [r7, #31]
 80314c6:	e05b      	b.n	8031580 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80314c8:	69bb      	ldr	r3, [r7, #24]
 80314ca:	6a1a      	ldr	r2, [r3, #32]
 80314cc:	69bb      	ldr	r3, [r7, #24]
 80314ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80314d0:	3b02      	subs	r3, #2
 80314d2:	429a      	cmp	r2, r3
 80314d4:	d20b      	bcs.n	80314ee <remove_chain+0xce>
			fs->free_clst++;
 80314d6:	69bb      	ldr	r3, [r7, #24]
 80314d8:	6a1b      	ldr	r3, [r3, #32]
 80314da:	1c5a      	adds	r2, r3, #1
 80314dc:	69bb      	ldr	r3, [r7, #24]
 80314de:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 80314e0:	69bb      	ldr	r3, [r7, #24]
 80314e2:	791b      	ldrb	r3, [r3, #4]
 80314e4:	f043 0301 	orr.w	r3, r3, #1
 80314e8:	b2da      	uxtb	r2, r3
 80314ea:	69bb      	ldr	r3, [r7, #24]
 80314ec:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80314ee:	6a3b      	ldr	r3, [r7, #32]
 80314f0:	3301      	adds	r3, #1
 80314f2:	697a      	ldr	r2, [r7, #20]
 80314f4:	429a      	cmp	r2, r3
 80314f6:	d102      	bne.n	80314fe <remove_chain+0xde>
			ecl = nxt;
 80314f8:	697b      	ldr	r3, [r7, #20]
 80314fa:	623b      	str	r3, [r7, #32]
 80314fc:	e017      	b.n	803152e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80314fe:	69bb      	ldr	r3, [r7, #24]
 8031500:	781b      	ldrb	r3, [r3, #0]
 8031502:	2b04      	cmp	r3, #4
 8031504:	d10f      	bne.n	8031526 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8031506:	6a3a      	ldr	r2, [r7, #32]
 8031508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803150a:	1ad3      	subs	r3, r2, r3
 803150c:	1c5a      	adds	r2, r3, #1
 803150e:	2300      	movs	r3, #0
 8031510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8031512:	69b8      	ldr	r0, [r7, #24]
 8031514:	f7ff feaf 	bl	8031276 <change_bitmap>
 8031518:	4603      	mov	r3, r0
 803151a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 803151c:	7ffb      	ldrb	r3, [r7, #31]
 803151e:	2b00      	cmp	r3, #0
 8031520:	d001      	beq.n	8031526 <remove_chain+0x106>
 8031522:	7ffb      	ldrb	r3, [r7, #31]
 8031524:	e02c      	b.n	8031580 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8031526:	697b      	ldr	r3, [r7, #20]
 8031528:	623b      	str	r3, [r7, #32]
 803152a:	6a3b      	ldr	r3, [r7, #32]
 803152c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 803152e:	697b      	ldr	r3, [r7, #20]
 8031530:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8031532:	69bb      	ldr	r3, [r7, #24]
 8031534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031536:	68ba      	ldr	r2, [r7, #8]
 8031538:	429a      	cmp	r2, r3
 803153a:	d3a2      	bcc.n	8031482 <remove_chain+0x62>
 803153c:	e000      	b.n	8031540 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 803153e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8031540:	69bb      	ldr	r3, [r7, #24]
 8031542:	781b      	ldrb	r3, [r3, #0]
 8031544:	2b04      	cmp	r3, #4
 8031546:	d11a      	bne.n	803157e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8031548:	687b      	ldr	r3, [r7, #4]
 803154a:	2b00      	cmp	r3, #0
 803154c:	d103      	bne.n	8031556 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 803154e:	68fb      	ldr	r3, [r7, #12]
 8031550:	2200      	movs	r2, #0
 8031552:	71da      	strb	r2, [r3, #7]
 8031554:	e013      	b.n	803157e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8031556:	68fb      	ldr	r3, [r7, #12]
 8031558:	79db      	ldrb	r3, [r3, #7]
 803155a:	2b03      	cmp	r3, #3
 803155c:	d10f      	bne.n	803157e <remove_chain+0x15e>
 803155e:	68fb      	ldr	r3, [r7, #12]
 8031560:	689b      	ldr	r3, [r3, #8]
 8031562:	687a      	ldr	r2, [r7, #4]
 8031564:	429a      	cmp	r2, r3
 8031566:	d30a      	bcc.n	803157e <remove_chain+0x15e>
 8031568:	68fb      	ldr	r3, [r7, #12]
 803156a:	689a      	ldr	r2, [r3, #8]
 803156c:	68fb      	ldr	r3, [r7, #12]
 803156e:	699b      	ldr	r3, [r3, #24]
 8031570:	4413      	add	r3, r2
 8031572:	687a      	ldr	r2, [r7, #4]
 8031574:	429a      	cmp	r2, r3
 8031576:	d802      	bhi.n	803157e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8031578:	68fb      	ldr	r3, [r7, #12]
 803157a:	2202      	movs	r2, #2
 803157c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 803157e:	2300      	movs	r3, #0
}
 8031580:	4618      	mov	r0, r3
 8031582:	3728      	adds	r7, #40	; 0x28
 8031584:	46bd      	mov	sp, r7
 8031586:	bd80      	pop	{r7, pc}

08031588 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8031588:	b580      	push	{r7, lr}
 803158a:	b088      	sub	sp, #32
 803158c:	af00      	add	r7, sp, #0
 803158e:	6078      	str	r0, [r7, #4]
 8031590:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8031592:	687b      	ldr	r3, [r7, #4]
 8031594:	681b      	ldr	r3, [r3, #0]
 8031596:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8031598:	683b      	ldr	r3, [r7, #0]
 803159a:	2b00      	cmp	r3, #0
 803159c:	d10d      	bne.n	80315ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 803159e:	693b      	ldr	r3, [r7, #16]
 80315a0:	69db      	ldr	r3, [r3, #28]
 80315a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80315a4:	69bb      	ldr	r3, [r7, #24]
 80315a6:	2b00      	cmp	r3, #0
 80315a8:	d004      	beq.n	80315b4 <create_chain+0x2c>
 80315aa:	693b      	ldr	r3, [r7, #16]
 80315ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80315ae:	69ba      	ldr	r2, [r7, #24]
 80315b0:	429a      	cmp	r2, r3
 80315b2:	d31b      	bcc.n	80315ec <create_chain+0x64>
 80315b4:	2301      	movs	r3, #1
 80315b6:	61bb      	str	r3, [r7, #24]
 80315b8:	e018      	b.n	80315ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80315ba:	6839      	ldr	r1, [r7, #0]
 80315bc:	6878      	ldr	r0, [r7, #4]
 80315be:	f7ff fb5d 	bl	8030c7c <get_fat>
 80315c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80315c4:	68fb      	ldr	r3, [r7, #12]
 80315c6:	2b01      	cmp	r3, #1
 80315c8:	d801      	bhi.n	80315ce <create_chain+0x46>
 80315ca:	2301      	movs	r3, #1
 80315cc:	e0d9      	b.n	8031782 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80315ce:	68fb      	ldr	r3, [r7, #12]
 80315d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80315d4:	d101      	bne.n	80315da <create_chain+0x52>
 80315d6:	68fb      	ldr	r3, [r7, #12]
 80315d8:	e0d3      	b.n	8031782 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80315da:	693b      	ldr	r3, [r7, #16]
 80315dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80315de:	68fa      	ldr	r2, [r7, #12]
 80315e0:	429a      	cmp	r2, r3
 80315e2:	d201      	bcs.n	80315e8 <create_chain+0x60>
 80315e4:	68fb      	ldr	r3, [r7, #12]
 80315e6:	e0cc      	b.n	8031782 <create_chain+0x1fa>
		scl = clst;
 80315e8:	683b      	ldr	r3, [r7, #0]
 80315ea:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80315ec:	693b      	ldr	r3, [r7, #16]
 80315ee:	781b      	ldrb	r3, [r3, #0]
 80315f0:	2b04      	cmp	r3, #4
 80315f2:	d164      	bne.n	80316be <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80315f4:	2201      	movs	r2, #1
 80315f6:	69b9      	ldr	r1, [r7, #24]
 80315f8:	6938      	ldr	r0, [r7, #16]
 80315fa:	f7ff fdb5 	bl	8031168 <find_bitmap>
 80315fe:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8031600:	69fb      	ldr	r3, [r7, #28]
 8031602:	2b00      	cmp	r3, #0
 8031604:	d003      	beq.n	803160e <create_chain+0x86>
 8031606:	69fb      	ldr	r3, [r7, #28]
 8031608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803160c:	d101      	bne.n	8031612 <create_chain+0x8a>
 803160e:	69fb      	ldr	r3, [r7, #28]
 8031610:	e0b7      	b.n	8031782 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8031612:	2301      	movs	r3, #1
 8031614:	2201      	movs	r2, #1
 8031616:	69f9      	ldr	r1, [r7, #28]
 8031618:	6938      	ldr	r0, [r7, #16]
 803161a:	f7ff fe2c 	bl	8031276 <change_bitmap>
 803161e:	4603      	mov	r3, r0
 8031620:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8031622:	7dfb      	ldrb	r3, [r7, #23]
 8031624:	2b02      	cmp	r3, #2
 8031626:	d101      	bne.n	803162c <create_chain+0xa4>
 8031628:	2301      	movs	r3, #1
 803162a:	e0aa      	b.n	8031782 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 803162c:	7dfb      	ldrb	r3, [r7, #23]
 803162e:	2b01      	cmp	r3, #1
 8031630:	d102      	bne.n	8031638 <create_chain+0xb0>
 8031632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8031636:	e0a4      	b.n	8031782 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8031638:	683b      	ldr	r3, [r7, #0]
 803163a:	2b00      	cmp	r3, #0
 803163c:	d103      	bne.n	8031646 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 803163e:	687b      	ldr	r3, [r7, #4]
 8031640:	2202      	movs	r2, #2
 8031642:	71da      	strb	r2, [r3, #7]
 8031644:	e011      	b.n	803166a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8031646:	687b      	ldr	r3, [r7, #4]
 8031648:	79db      	ldrb	r3, [r3, #7]
 803164a:	2b02      	cmp	r3, #2
 803164c:	d10d      	bne.n	803166a <create_chain+0xe2>
 803164e:	69bb      	ldr	r3, [r7, #24]
 8031650:	3301      	adds	r3, #1
 8031652:	69fa      	ldr	r2, [r7, #28]
 8031654:	429a      	cmp	r2, r3
 8031656:	d008      	beq.n	803166a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8031658:	687b      	ldr	r3, [r7, #4]
 803165a:	689b      	ldr	r3, [r3, #8]
 803165c:	69ba      	ldr	r2, [r7, #24]
 803165e:	1ad2      	subs	r2, r2, r3
 8031660:	687b      	ldr	r3, [r7, #4]
 8031662:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8031664:	687b      	ldr	r3, [r7, #4]
 8031666:	2203      	movs	r2, #3
 8031668:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 803166a:	687b      	ldr	r3, [r7, #4]
 803166c:	79db      	ldrb	r3, [r3, #7]
 803166e:	2b02      	cmp	r3, #2
 8031670:	d064      	beq.n	803173c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8031672:	683b      	ldr	r3, [r7, #0]
 8031674:	3301      	adds	r3, #1
 8031676:	69fa      	ldr	r2, [r7, #28]
 8031678:	429a      	cmp	r2, r3
 803167a:	d10b      	bne.n	8031694 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 803167c:	687b      	ldr	r3, [r7, #4]
 803167e:	69db      	ldr	r3, [r3, #28]
 8031680:	2b00      	cmp	r3, #0
 8031682:	d003      	beq.n	803168c <create_chain+0x104>
 8031684:	687b      	ldr	r3, [r7, #4]
 8031686:	69db      	ldr	r3, [r3, #28]
 8031688:	3301      	adds	r3, #1
 803168a:	e000      	b.n	803168e <create_chain+0x106>
 803168c:	2302      	movs	r3, #2
 803168e:	687a      	ldr	r2, [r7, #4]
 8031690:	61d3      	str	r3, [r2, #28]
 8031692:	e053      	b.n	803173c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8031694:	687b      	ldr	r3, [r7, #4]
 8031696:	69db      	ldr	r3, [r3, #28]
 8031698:	2b00      	cmp	r3, #0
 803169a:	d102      	bne.n	80316a2 <create_chain+0x11a>
 803169c:	687b      	ldr	r3, [r7, #4]
 803169e:	2201      	movs	r2, #1
 80316a0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80316a2:	69fa      	ldr	r2, [r7, #28]
 80316a4:	6839      	ldr	r1, [r7, #0]
 80316a6:	6878      	ldr	r0, [r7, #4]
 80316a8:	f7ff fe89 	bl	80313be <fill_last_frag>
 80316ac:	4603      	mov	r3, r0
 80316ae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80316b0:	7dfb      	ldrb	r3, [r7, #23]
 80316b2:	2b00      	cmp	r3, #0
 80316b4:	d142      	bne.n	803173c <create_chain+0x1b4>
 80316b6:	687b      	ldr	r3, [r7, #4]
 80316b8:	2201      	movs	r2, #1
 80316ba:	61da      	str	r2, [r3, #28]
 80316bc:	e03e      	b.n	803173c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80316be:	69bb      	ldr	r3, [r7, #24]
 80316c0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80316c2:	69fb      	ldr	r3, [r7, #28]
 80316c4:	3301      	adds	r3, #1
 80316c6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80316c8:	693b      	ldr	r3, [r7, #16]
 80316ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80316cc:	69fa      	ldr	r2, [r7, #28]
 80316ce:	429a      	cmp	r2, r3
 80316d0:	d307      	bcc.n	80316e2 <create_chain+0x15a>
				ncl = 2;
 80316d2:	2302      	movs	r3, #2
 80316d4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80316d6:	69fa      	ldr	r2, [r7, #28]
 80316d8:	69bb      	ldr	r3, [r7, #24]
 80316da:	429a      	cmp	r2, r3
 80316dc:	d901      	bls.n	80316e2 <create_chain+0x15a>
 80316de:	2300      	movs	r3, #0
 80316e0:	e04f      	b.n	8031782 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80316e2:	69f9      	ldr	r1, [r7, #28]
 80316e4:	6878      	ldr	r0, [r7, #4]
 80316e6:	f7ff fac9 	bl	8030c7c <get_fat>
 80316ea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80316ec:	68fb      	ldr	r3, [r7, #12]
 80316ee:	2b00      	cmp	r3, #0
 80316f0:	d00e      	beq.n	8031710 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80316f2:	68fb      	ldr	r3, [r7, #12]
 80316f4:	2b01      	cmp	r3, #1
 80316f6:	d003      	beq.n	8031700 <create_chain+0x178>
 80316f8:	68fb      	ldr	r3, [r7, #12]
 80316fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80316fe:	d101      	bne.n	8031704 <create_chain+0x17c>
 8031700:	68fb      	ldr	r3, [r7, #12]
 8031702:	e03e      	b.n	8031782 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8031704:	69fa      	ldr	r2, [r7, #28]
 8031706:	69bb      	ldr	r3, [r7, #24]
 8031708:	429a      	cmp	r2, r3
 803170a:	d1da      	bne.n	80316c2 <create_chain+0x13a>
 803170c:	2300      	movs	r3, #0
 803170e:	e038      	b.n	8031782 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8031710:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8031712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8031716:	69f9      	ldr	r1, [r7, #28]
 8031718:	6938      	ldr	r0, [r7, #16]
 803171a:	f7ff fc05 	bl	8030f28 <put_fat>
 803171e:	4603      	mov	r3, r0
 8031720:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8031722:	7dfb      	ldrb	r3, [r7, #23]
 8031724:	2b00      	cmp	r3, #0
 8031726:	d109      	bne.n	803173c <create_chain+0x1b4>
 8031728:	683b      	ldr	r3, [r7, #0]
 803172a:	2b00      	cmp	r3, #0
 803172c:	d006      	beq.n	803173c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 803172e:	69fa      	ldr	r2, [r7, #28]
 8031730:	6839      	ldr	r1, [r7, #0]
 8031732:	6938      	ldr	r0, [r7, #16]
 8031734:	f7ff fbf8 	bl	8030f28 <put_fat>
 8031738:	4603      	mov	r3, r0
 803173a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 803173c:	7dfb      	ldrb	r3, [r7, #23]
 803173e:	2b00      	cmp	r3, #0
 8031740:	d116      	bne.n	8031770 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8031742:	693b      	ldr	r3, [r7, #16]
 8031744:	69fa      	ldr	r2, [r7, #28]
 8031746:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8031748:	693b      	ldr	r3, [r7, #16]
 803174a:	6a1a      	ldr	r2, [r3, #32]
 803174c:	693b      	ldr	r3, [r7, #16]
 803174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031750:	3b02      	subs	r3, #2
 8031752:	429a      	cmp	r2, r3
 8031754:	d804      	bhi.n	8031760 <create_chain+0x1d8>
 8031756:	693b      	ldr	r3, [r7, #16]
 8031758:	6a1b      	ldr	r3, [r3, #32]
 803175a:	1e5a      	subs	r2, r3, #1
 803175c:	693b      	ldr	r3, [r7, #16]
 803175e:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 8031760:	693b      	ldr	r3, [r7, #16]
 8031762:	791b      	ldrb	r3, [r3, #4]
 8031764:	f043 0301 	orr.w	r3, r3, #1
 8031768:	b2da      	uxtb	r2, r3
 803176a:	693b      	ldr	r3, [r7, #16]
 803176c:	711a      	strb	r2, [r3, #4]
 803176e:	e007      	b.n	8031780 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8031770:	7dfb      	ldrb	r3, [r7, #23]
 8031772:	2b01      	cmp	r3, #1
 8031774:	d102      	bne.n	803177c <create_chain+0x1f4>
 8031776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803177a:	e000      	b.n	803177e <create_chain+0x1f6>
 803177c:	2301      	movs	r3, #1
 803177e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8031780:	69fb      	ldr	r3, [r7, #28]
}
 8031782:	4618      	mov	r0, r3
 8031784:	3720      	adds	r7, #32
 8031786:	46bd      	mov	sp, r7
 8031788:	bd80      	pop	{r7, pc}

0803178a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 803178a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 803178e:	b088      	sub	sp, #32
 8031790:	af00      	add	r7, sp, #0
 8031792:	60f8      	str	r0, [r7, #12]
 8031794:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8031798:	68fb      	ldr	r3, [r7, #12]
 803179a:	681b      	ldr	r3, [r3, #0]
 803179c:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 803179e:	68fb      	ldr	r3, [r7, #12]
 80317a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80317a2:	3304      	adds	r3, #4
 80317a4:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80317a6:	697b      	ldr	r3, [r7, #20]
 80317a8:	899b      	ldrh	r3, [r3, #12]
 80317aa:	b29b      	uxth	r3, r3
 80317ac:	2200      	movs	r2, #0
 80317ae:	4698      	mov	r8, r3
 80317b0:	4691      	mov	r9, r2
 80317b2:	4642      	mov	r2, r8
 80317b4:	464b      	mov	r3, r9
 80317b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80317ba:	f7ee fe11 	bl	80203e0 <__aeabi_uldivmod>
 80317be:	4602      	mov	r2, r0
 80317c0:	460b      	mov	r3, r1
 80317c2:	4610      	mov	r0, r2
 80317c4:	4619      	mov	r1, r3
 80317c6:	697b      	ldr	r3, [r7, #20]
 80317c8:	895b      	ldrh	r3, [r3, #10]
 80317ca:	b29b      	uxth	r3, r3
 80317cc:	2200      	movs	r2, #0
 80317ce:	461c      	mov	r4, r3
 80317d0:	4615      	mov	r5, r2
 80317d2:	4622      	mov	r2, r4
 80317d4:	462b      	mov	r3, r5
 80317d6:	f7ee fe03 	bl	80203e0 <__aeabi_uldivmod>
 80317da:	4602      	mov	r2, r0
 80317dc:	460b      	mov	r3, r1
 80317de:	4613      	mov	r3, r2
 80317e0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80317e2:	69bb      	ldr	r3, [r7, #24]
 80317e4:	1d1a      	adds	r2, r3, #4
 80317e6:	61ba      	str	r2, [r7, #24]
 80317e8:	681b      	ldr	r3, [r3, #0]
 80317ea:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80317ec:	693b      	ldr	r3, [r7, #16]
 80317ee:	2b00      	cmp	r3, #0
 80317f0:	d101      	bne.n	80317f6 <clmt_clust+0x6c>
 80317f2:	2300      	movs	r3, #0
 80317f4:	e010      	b.n	8031818 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 80317f6:	69fa      	ldr	r2, [r7, #28]
 80317f8:	693b      	ldr	r3, [r7, #16]
 80317fa:	429a      	cmp	r2, r3
 80317fc:	d307      	bcc.n	803180e <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 80317fe:	69fa      	ldr	r2, [r7, #28]
 8031800:	693b      	ldr	r3, [r7, #16]
 8031802:	1ad3      	subs	r3, r2, r3
 8031804:	61fb      	str	r3, [r7, #28]
 8031806:	69bb      	ldr	r3, [r7, #24]
 8031808:	3304      	adds	r3, #4
 803180a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 803180c:	e7e9      	b.n	80317e2 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 803180e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8031810:	69bb      	ldr	r3, [r7, #24]
 8031812:	681a      	ldr	r2, [r3, #0]
 8031814:	69fb      	ldr	r3, [r7, #28]
 8031816:	4413      	add	r3, r2
}
 8031818:	4618      	mov	r0, r3
 803181a:	3720      	adds	r7, #32
 803181c:	46bd      	mov	sp, r7
 803181e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08031822 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8031822:	b580      	push	{r7, lr}
 8031824:	b086      	sub	sp, #24
 8031826:	af00      	add	r7, sp, #0
 8031828:	6078      	str	r0, [r7, #4]
 803182a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 803182c:	687b      	ldr	r3, [r7, #4]
 803182e:	681b      	ldr	r3, [r3, #0]
 8031830:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8031832:	693b      	ldr	r3, [r7, #16]
 8031834:	781b      	ldrb	r3, [r3, #0]
 8031836:	2b04      	cmp	r3, #4
 8031838:	d102      	bne.n	8031840 <dir_sdi+0x1e>
 803183a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803183e:	e001      	b.n	8031844 <dir_sdi+0x22>
 8031840:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8031844:	683b      	ldr	r3, [r7, #0]
 8031846:	429a      	cmp	r2, r3
 8031848:	d904      	bls.n	8031854 <dir_sdi+0x32>
 803184a:	683b      	ldr	r3, [r7, #0]
 803184c:	f003 031f 	and.w	r3, r3, #31
 8031850:	2b00      	cmp	r3, #0
 8031852:	d001      	beq.n	8031858 <dir_sdi+0x36>
		return FR_INT_ERR;
 8031854:	2302      	movs	r3, #2
 8031856:	e074      	b.n	8031942 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8031858:	687b      	ldr	r3, [r7, #4]
 803185a:	683a      	ldr	r2, [r7, #0]
 803185c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 803185e:	687b      	ldr	r3, [r7, #4]
 8031860:	689b      	ldr	r3, [r3, #8]
 8031862:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8031864:	697b      	ldr	r3, [r7, #20]
 8031866:	2b00      	cmp	r3, #0
 8031868:	d109      	bne.n	803187e <dir_sdi+0x5c>
 803186a:	693b      	ldr	r3, [r7, #16]
 803186c:	781b      	ldrb	r3, [r3, #0]
 803186e:	2b02      	cmp	r3, #2
 8031870:	d905      	bls.n	803187e <dir_sdi+0x5c>
		clst = fs->dirbase;
 8031872:	693b      	ldr	r3, [r7, #16]
 8031874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031876:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8031878:	687b      	ldr	r3, [r7, #4]
 803187a:	2200      	movs	r2, #0
 803187c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 803187e:	697b      	ldr	r3, [r7, #20]
 8031880:	2b00      	cmp	r3, #0
 8031882:	d10c      	bne.n	803189e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8031884:	683b      	ldr	r3, [r7, #0]
 8031886:	095b      	lsrs	r3, r3, #5
 8031888:	693a      	ldr	r2, [r7, #16]
 803188a:	8912      	ldrh	r2, [r2, #8]
 803188c:	4293      	cmp	r3, r2
 803188e:	d301      	bcc.n	8031894 <dir_sdi+0x72>
 8031890:	2302      	movs	r3, #2
 8031892:	e056      	b.n	8031942 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8031894:	693b      	ldr	r3, [r7, #16]
 8031896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8031898:	687b      	ldr	r3, [r7, #4]
 803189a:	639a      	str	r2, [r3, #56]	; 0x38
 803189c:	e02d      	b.n	80318fa <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 803189e:	693b      	ldr	r3, [r7, #16]
 80318a0:	895b      	ldrh	r3, [r3, #10]
 80318a2:	461a      	mov	r2, r3
 80318a4:	693b      	ldr	r3, [r7, #16]
 80318a6:	899b      	ldrh	r3, [r3, #12]
 80318a8:	fb02 f303 	mul.w	r3, r2, r3
 80318ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80318ae:	e019      	b.n	80318e4 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80318b0:	687b      	ldr	r3, [r7, #4]
 80318b2:	6979      	ldr	r1, [r7, #20]
 80318b4:	4618      	mov	r0, r3
 80318b6:	f7ff f9e1 	bl	8030c7c <get_fat>
 80318ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80318bc:	697b      	ldr	r3, [r7, #20]
 80318be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80318c2:	d101      	bne.n	80318c8 <dir_sdi+0xa6>
 80318c4:	2301      	movs	r3, #1
 80318c6:	e03c      	b.n	8031942 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80318c8:	697b      	ldr	r3, [r7, #20]
 80318ca:	2b01      	cmp	r3, #1
 80318cc:	d904      	bls.n	80318d8 <dir_sdi+0xb6>
 80318ce:	693b      	ldr	r3, [r7, #16]
 80318d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80318d2:	697a      	ldr	r2, [r7, #20]
 80318d4:	429a      	cmp	r2, r3
 80318d6:	d301      	bcc.n	80318dc <dir_sdi+0xba>
 80318d8:	2302      	movs	r3, #2
 80318da:	e032      	b.n	8031942 <dir_sdi+0x120>
			ofs -= csz;
 80318dc:	683a      	ldr	r2, [r7, #0]
 80318de:	68fb      	ldr	r3, [r7, #12]
 80318e0:	1ad3      	subs	r3, r2, r3
 80318e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80318e4:	683a      	ldr	r2, [r7, #0]
 80318e6:	68fb      	ldr	r3, [r7, #12]
 80318e8:	429a      	cmp	r2, r3
 80318ea:	d2e1      	bcs.n	80318b0 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 80318ec:	6979      	ldr	r1, [r7, #20]
 80318ee:	6938      	ldr	r0, [r7, #16]
 80318f0:	f7ff f9a4 	bl	8030c3c <clust2sect>
 80318f4:	4602      	mov	r2, r0
 80318f6:	687b      	ldr	r3, [r7, #4]
 80318f8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 80318fa:	687b      	ldr	r3, [r7, #4]
 80318fc:	697a      	ldr	r2, [r7, #20]
 80318fe:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8031900:	687b      	ldr	r3, [r7, #4]
 8031902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031904:	2b00      	cmp	r3, #0
 8031906:	d101      	bne.n	803190c <dir_sdi+0xea>
 8031908:	2302      	movs	r3, #2
 803190a:	e01a      	b.n	8031942 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 803190c:	687b      	ldr	r3, [r7, #4]
 803190e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8031910:	693b      	ldr	r3, [r7, #16]
 8031912:	899b      	ldrh	r3, [r3, #12]
 8031914:	4619      	mov	r1, r3
 8031916:	683b      	ldr	r3, [r7, #0]
 8031918:	fbb3 f3f1 	udiv	r3, r3, r1
 803191c:	441a      	add	r2, r3
 803191e:	687b      	ldr	r3, [r7, #4]
 8031920:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8031922:	693b      	ldr	r3, [r7, #16]
 8031924:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8031928:	693b      	ldr	r3, [r7, #16]
 803192a:	899b      	ldrh	r3, [r3, #12]
 803192c:	461a      	mov	r2, r3
 803192e:	683b      	ldr	r3, [r7, #0]
 8031930:	fbb3 f0f2 	udiv	r0, r3, r2
 8031934:	fb00 f202 	mul.w	r2, r0, r2
 8031938:	1a9b      	subs	r3, r3, r2
 803193a:	18ca      	adds	r2, r1, r3
 803193c:	687b      	ldr	r3, [r7, #4]
 803193e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8031940:	2300      	movs	r3, #0
}
 8031942:	4618      	mov	r0, r3
 8031944:	3718      	adds	r7, #24
 8031946:	46bd      	mov	sp, r7
 8031948:	bd80      	pop	{r7, pc}

0803194a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 803194a:	b580      	push	{r7, lr}
 803194c:	b086      	sub	sp, #24
 803194e:	af00      	add	r7, sp, #0
 8031950:	6078      	str	r0, [r7, #4]
 8031952:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8031954:	687b      	ldr	r3, [r7, #4]
 8031956:	681b      	ldr	r3, [r3, #0]
 8031958:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 803195a:	687b      	ldr	r3, [r7, #4]
 803195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803195e:	3320      	adds	r3, #32
 8031960:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8031962:	687b      	ldr	r3, [r7, #4]
 8031964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031966:	2b00      	cmp	r3, #0
 8031968:	d00b      	beq.n	8031982 <dir_next+0x38>
 803196a:	68fb      	ldr	r3, [r7, #12]
 803196c:	781b      	ldrb	r3, [r3, #0]
 803196e:	2b04      	cmp	r3, #4
 8031970:	d102      	bne.n	8031978 <dir_next+0x2e>
 8031972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8031976:	e001      	b.n	803197c <dir_next+0x32>
 8031978:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 803197c:	68bb      	ldr	r3, [r7, #8]
 803197e:	429a      	cmp	r2, r3
 8031980:	d801      	bhi.n	8031986 <dir_next+0x3c>
 8031982:	2304      	movs	r3, #4
 8031984:	e0c3      	b.n	8031b0e <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8031986:	68fb      	ldr	r3, [r7, #12]
 8031988:	899b      	ldrh	r3, [r3, #12]
 803198a:	461a      	mov	r2, r3
 803198c:	68bb      	ldr	r3, [r7, #8]
 803198e:	fbb3 f1f2 	udiv	r1, r3, r2
 8031992:	fb01 f202 	mul.w	r2, r1, r2
 8031996:	1a9b      	subs	r3, r3, r2
 8031998:	2b00      	cmp	r3, #0
 803199a:	f040 80a5 	bne.w	8031ae8 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 803199e:	687b      	ldr	r3, [r7, #4]
 80319a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80319a2:	1c5a      	adds	r2, r3, #1
 80319a4:	687b      	ldr	r3, [r7, #4]
 80319a6:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 80319a8:	687b      	ldr	r3, [r7, #4]
 80319aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80319ac:	2b00      	cmp	r3, #0
 80319ae:	d10b      	bne.n	80319c8 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80319b0:	68bb      	ldr	r3, [r7, #8]
 80319b2:	095b      	lsrs	r3, r3, #5
 80319b4:	68fa      	ldr	r2, [r7, #12]
 80319b6:	8912      	ldrh	r2, [r2, #8]
 80319b8:	4293      	cmp	r3, r2
 80319ba:	f0c0 8095 	bcc.w	8031ae8 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 80319be:	687b      	ldr	r3, [r7, #4]
 80319c0:	2200      	movs	r2, #0
 80319c2:	639a      	str	r2, [r3, #56]	; 0x38
 80319c4:	2304      	movs	r3, #4
 80319c6:	e0a2      	b.n	8031b0e <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80319c8:	68fb      	ldr	r3, [r7, #12]
 80319ca:	899b      	ldrh	r3, [r3, #12]
 80319cc:	461a      	mov	r2, r3
 80319ce:	68bb      	ldr	r3, [r7, #8]
 80319d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80319d4:	68fa      	ldr	r2, [r7, #12]
 80319d6:	8952      	ldrh	r2, [r2, #10]
 80319d8:	3a01      	subs	r2, #1
 80319da:	4013      	ands	r3, r2
 80319dc:	2b00      	cmp	r3, #0
 80319de:	f040 8083 	bne.w	8031ae8 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80319e2:	687a      	ldr	r2, [r7, #4]
 80319e4:	687b      	ldr	r3, [r7, #4]
 80319e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80319e8:	4619      	mov	r1, r3
 80319ea:	4610      	mov	r0, r2
 80319ec:	f7ff f946 	bl	8030c7c <get_fat>
 80319f0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80319f2:	697b      	ldr	r3, [r7, #20]
 80319f4:	2b01      	cmp	r3, #1
 80319f6:	d801      	bhi.n	80319fc <dir_next+0xb2>
 80319f8:	2302      	movs	r3, #2
 80319fa:	e088      	b.n	8031b0e <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80319fc:	697b      	ldr	r3, [r7, #20]
 80319fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8031a02:	d101      	bne.n	8031a08 <dir_next+0xbe>
 8031a04:	2301      	movs	r3, #1
 8031a06:	e082      	b.n	8031b0e <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8031a08:	68fb      	ldr	r3, [r7, #12]
 8031a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031a0c:	697a      	ldr	r2, [r7, #20]
 8031a0e:	429a      	cmp	r2, r3
 8031a10:	d360      	bcc.n	8031ad4 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8031a12:	683b      	ldr	r3, [r7, #0]
 8031a14:	2b00      	cmp	r3, #0
 8031a16:	d104      	bne.n	8031a22 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8031a18:	687b      	ldr	r3, [r7, #4]
 8031a1a:	2200      	movs	r2, #0
 8031a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8031a1e:	2304      	movs	r3, #4
 8031a20:	e075      	b.n	8031b0e <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8031a22:	687a      	ldr	r2, [r7, #4]
 8031a24:	687b      	ldr	r3, [r7, #4]
 8031a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031a28:	4619      	mov	r1, r3
 8031a2a:	4610      	mov	r0, r2
 8031a2c:	f7ff fdac 	bl	8031588 <create_chain>
 8031a30:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8031a32:	697b      	ldr	r3, [r7, #20]
 8031a34:	2b00      	cmp	r3, #0
 8031a36:	d101      	bne.n	8031a3c <dir_next+0xf2>
 8031a38:	2307      	movs	r3, #7
 8031a3a:	e068      	b.n	8031b0e <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8031a3c:	697b      	ldr	r3, [r7, #20]
 8031a3e:	2b01      	cmp	r3, #1
 8031a40:	d101      	bne.n	8031a46 <dir_next+0xfc>
 8031a42:	2302      	movs	r3, #2
 8031a44:	e063      	b.n	8031b0e <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8031a46:	697b      	ldr	r3, [r7, #20]
 8031a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8031a4c:	d101      	bne.n	8031a52 <dir_next+0x108>
 8031a4e:	2301      	movs	r3, #1
 8031a50:	e05d      	b.n	8031b0e <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8031a52:	687b      	ldr	r3, [r7, #4]
 8031a54:	79db      	ldrb	r3, [r3, #7]
 8031a56:	f043 0304 	orr.w	r3, r3, #4
 8031a5a:	b2da      	uxtb	r2, r3
 8031a5c:	687b      	ldr	r3, [r7, #4]
 8031a5e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8031a60:	68f8      	ldr	r0, [r7, #12]
 8031a62:	f7ff f809 	bl	8030a78 <sync_window>
 8031a66:	4603      	mov	r3, r0
 8031a68:	2b00      	cmp	r3, #0
 8031a6a:	d001      	beq.n	8031a70 <dir_next+0x126>
 8031a6c:	2301      	movs	r3, #1
 8031a6e:	e04e      	b.n	8031b0e <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8031a70:	68fb      	ldr	r3, [r7, #12]
 8031a72:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8031a76:	68fb      	ldr	r3, [r7, #12]
 8031a78:	899b      	ldrh	r3, [r3, #12]
 8031a7a:	461a      	mov	r2, r3
 8031a7c:	2100      	movs	r1, #0
 8031a7e:	f7fe fe01 	bl	8030684 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8031a82:	2300      	movs	r3, #0
 8031a84:	613b      	str	r3, [r7, #16]
 8031a86:	6979      	ldr	r1, [r7, #20]
 8031a88:	68f8      	ldr	r0, [r7, #12]
 8031a8a:	f7ff f8d7 	bl	8030c3c <clust2sect>
 8031a8e:	4602      	mov	r2, r0
 8031a90:	68fb      	ldr	r3, [r7, #12]
 8031a92:	64da      	str	r2, [r3, #76]	; 0x4c
 8031a94:	e012      	b.n	8031abc <dir_next+0x172>
						fs->wflag = 1;
 8031a96:	68fb      	ldr	r3, [r7, #12]
 8031a98:	2201      	movs	r2, #1
 8031a9a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8031a9c:	68f8      	ldr	r0, [r7, #12]
 8031a9e:	f7fe ffeb 	bl	8030a78 <sync_window>
 8031aa2:	4603      	mov	r3, r0
 8031aa4:	2b00      	cmp	r3, #0
 8031aa6:	d001      	beq.n	8031aac <dir_next+0x162>
 8031aa8:	2301      	movs	r3, #1
 8031aaa:	e030      	b.n	8031b0e <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8031aac:	693b      	ldr	r3, [r7, #16]
 8031aae:	3301      	adds	r3, #1
 8031ab0:	613b      	str	r3, [r7, #16]
 8031ab2:	68fb      	ldr	r3, [r7, #12]
 8031ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031ab6:	1c5a      	adds	r2, r3, #1
 8031ab8:	68fb      	ldr	r3, [r7, #12]
 8031aba:	64da      	str	r2, [r3, #76]	; 0x4c
 8031abc:	68fb      	ldr	r3, [r7, #12]
 8031abe:	895b      	ldrh	r3, [r3, #10]
 8031ac0:	461a      	mov	r2, r3
 8031ac2:	693b      	ldr	r3, [r7, #16]
 8031ac4:	4293      	cmp	r3, r2
 8031ac6:	d3e6      	bcc.n	8031a96 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8031ac8:	68fb      	ldr	r3, [r7, #12]
 8031aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8031acc:	693b      	ldr	r3, [r7, #16]
 8031ace:	1ad2      	subs	r2, r2, r3
 8031ad0:	68fb      	ldr	r3, [r7, #12]
 8031ad2:	64da      	str	r2, [r3, #76]	; 0x4c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8031ad4:	687b      	ldr	r3, [r7, #4]
 8031ad6:	697a      	ldr	r2, [r7, #20]
 8031ad8:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8031ada:	6979      	ldr	r1, [r7, #20]
 8031adc:	68f8      	ldr	r0, [r7, #12]
 8031ade:	f7ff f8ad 	bl	8030c3c <clust2sect>
 8031ae2:	4602      	mov	r2, r0
 8031ae4:	687b      	ldr	r3, [r7, #4]
 8031ae6:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8031ae8:	687b      	ldr	r3, [r7, #4]
 8031aea:	68ba      	ldr	r2, [r7, #8]
 8031aec:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8031aee:	68fb      	ldr	r3, [r7, #12]
 8031af0:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8031af4:	68fb      	ldr	r3, [r7, #12]
 8031af6:	899b      	ldrh	r3, [r3, #12]
 8031af8:	461a      	mov	r2, r3
 8031afa:	68bb      	ldr	r3, [r7, #8]
 8031afc:	fbb3 f0f2 	udiv	r0, r3, r2
 8031b00:	fb00 f202 	mul.w	r2, r0, r2
 8031b04:	1a9b      	subs	r3, r3, r2
 8031b06:	18ca      	adds	r2, r1, r3
 8031b08:	687b      	ldr	r3, [r7, #4]
 8031b0a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8031b0c:	2300      	movs	r3, #0
}
 8031b0e:	4618      	mov	r0, r3
 8031b10:	3718      	adds	r7, #24
 8031b12:	46bd      	mov	sp, r7
 8031b14:	bd80      	pop	{r7, pc}

08031b16 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8031b16:	b580      	push	{r7, lr}
 8031b18:	b086      	sub	sp, #24
 8031b1a:	af00      	add	r7, sp, #0
 8031b1c:	6078      	str	r0, [r7, #4]
 8031b1e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8031b20:	687b      	ldr	r3, [r7, #4]
 8031b22:	681b      	ldr	r3, [r3, #0]
 8031b24:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8031b26:	2100      	movs	r1, #0
 8031b28:	6878      	ldr	r0, [r7, #4]
 8031b2a:	f7ff fe7a 	bl	8031822 <dir_sdi>
 8031b2e:	4603      	mov	r3, r0
 8031b30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8031b32:	7dfb      	ldrb	r3, [r7, #23]
 8031b34:	2b00      	cmp	r3, #0
 8031b36:	d140      	bne.n	8031bba <dir_alloc+0xa4>
		n = 0;
 8031b38:	2300      	movs	r3, #0
 8031b3a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8031b3c:	687b      	ldr	r3, [r7, #4]
 8031b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031b40:	4619      	mov	r1, r3
 8031b42:	68f8      	ldr	r0, [r7, #12]
 8031b44:	f7fe ffdc 	bl	8030b00 <move_window>
 8031b48:	4603      	mov	r3, r0
 8031b4a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8031b4c:	7dfb      	ldrb	r3, [r7, #23]
 8031b4e:	2b00      	cmp	r3, #0
 8031b50:	d132      	bne.n	8031bb8 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8031b52:	68fb      	ldr	r3, [r7, #12]
 8031b54:	781b      	ldrb	r3, [r3, #0]
 8031b56:	2b04      	cmp	r3, #4
 8031b58:	d108      	bne.n	8031b6c <dir_alloc+0x56>
 8031b5a:	687b      	ldr	r3, [r7, #4]
 8031b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031b5e:	781b      	ldrb	r3, [r3, #0]
 8031b60:	b25b      	sxtb	r3, r3
 8031b62:	43db      	mvns	r3, r3
 8031b64:	b2db      	uxtb	r3, r3
 8031b66:	09db      	lsrs	r3, r3, #7
 8031b68:	b2db      	uxtb	r3, r3
 8031b6a:	e00f      	b.n	8031b8c <dir_alloc+0x76>
 8031b6c:	687b      	ldr	r3, [r7, #4]
 8031b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031b70:	781b      	ldrb	r3, [r3, #0]
 8031b72:	2be5      	cmp	r3, #229	; 0xe5
 8031b74:	d004      	beq.n	8031b80 <dir_alloc+0x6a>
 8031b76:	687b      	ldr	r3, [r7, #4]
 8031b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031b7a:	781b      	ldrb	r3, [r3, #0]
 8031b7c:	2b00      	cmp	r3, #0
 8031b7e:	d101      	bne.n	8031b84 <dir_alloc+0x6e>
 8031b80:	2301      	movs	r3, #1
 8031b82:	e000      	b.n	8031b86 <dir_alloc+0x70>
 8031b84:	2300      	movs	r3, #0
 8031b86:	f003 0301 	and.w	r3, r3, #1
 8031b8a:	b2db      	uxtb	r3, r3
 8031b8c:	2b00      	cmp	r3, #0
 8031b8e:	d007      	beq.n	8031ba0 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8031b90:	693b      	ldr	r3, [r7, #16]
 8031b92:	3301      	adds	r3, #1
 8031b94:	613b      	str	r3, [r7, #16]
 8031b96:	693a      	ldr	r2, [r7, #16]
 8031b98:	683b      	ldr	r3, [r7, #0]
 8031b9a:	429a      	cmp	r2, r3
 8031b9c:	d102      	bne.n	8031ba4 <dir_alloc+0x8e>
 8031b9e:	e00c      	b.n	8031bba <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8031ba0:	2300      	movs	r3, #0
 8031ba2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8031ba4:	2101      	movs	r1, #1
 8031ba6:	6878      	ldr	r0, [r7, #4]
 8031ba8:	f7ff fecf 	bl	803194a <dir_next>
 8031bac:	4603      	mov	r3, r0
 8031bae:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8031bb0:	7dfb      	ldrb	r3, [r7, #23]
 8031bb2:	2b00      	cmp	r3, #0
 8031bb4:	d0c2      	beq.n	8031b3c <dir_alloc+0x26>
 8031bb6:	e000      	b.n	8031bba <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8031bb8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8031bba:	7dfb      	ldrb	r3, [r7, #23]
 8031bbc:	2b04      	cmp	r3, #4
 8031bbe:	d101      	bne.n	8031bc4 <dir_alloc+0xae>
 8031bc0:	2307      	movs	r3, #7
 8031bc2:	75fb      	strb	r3, [r7, #23]
	return res;
 8031bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8031bc6:	4618      	mov	r0, r3
 8031bc8:	3718      	adds	r7, #24
 8031bca:	46bd      	mov	sp, r7
 8031bcc:	bd80      	pop	{r7, pc}

08031bce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8031bce:	b580      	push	{r7, lr}
 8031bd0:	b084      	sub	sp, #16
 8031bd2:	af00      	add	r7, sp, #0
 8031bd4:	6078      	str	r0, [r7, #4]
 8031bd6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8031bd8:	683b      	ldr	r3, [r7, #0]
 8031bda:	331a      	adds	r3, #26
 8031bdc:	4618      	mov	r0, r3
 8031bde:	f7fe fb4b 	bl	8030278 <ld_word>
 8031be2:	4603      	mov	r3, r0
 8031be4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8031be6:	687b      	ldr	r3, [r7, #4]
 8031be8:	781b      	ldrb	r3, [r3, #0]
 8031bea:	2b03      	cmp	r3, #3
 8031bec:	d109      	bne.n	8031c02 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8031bee:	683b      	ldr	r3, [r7, #0]
 8031bf0:	3314      	adds	r3, #20
 8031bf2:	4618      	mov	r0, r3
 8031bf4:	f7fe fb40 	bl	8030278 <ld_word>
 8031bf8:	4603      	mov	r3, r0
 8031bfa:	041b      	lsls	r3, r3, #16
 8031bfc:	68fa      	ldr	r2, [r7, #12]
 8031bfe:	4313      	orrs	r3, r2
 8031c00:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8031c02:	68fb      	ldr	r3, [r7, #12]
}
 8031c04:	4618      	mov	r0, r3
 8031c06:	3710      	adds	r7, #16
 8031c08:	46bd      	mov	sp, r7
 8031c0a:	bd80      	pop	{r7, pc}

08031c0c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8031c0c:	b580      	push	{r7, lr}
 8031c0e:	b084      	sub	sp, #16
 8031c10:	af00      	add	r7, sp, #0
 8031c12:	60f8      	str	r0, [r7, #12]
 8031c14:	60b9      	str	r1, [r7, #8]
 8031c16:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8031c18:	68bb      	ldr	r3, [r7, #8]
 8031c1a:	331a      	adds	r3, #26
 8031c1c:	687a      	ldr	r2, [r7, #4]
 8031c1e:	b292      	uxth	r2, r2
 8031c20:	4611      	mov	r1, r2
 8031c22:	4618      	mov	r0, r3
 8031c24:	f7fe fc3e 	bl	80304a4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8031c28:	68fb      	ldr	r3, [r7, #12]
 8031c2a:	781b      	ldrb	r3, [r3, #0]
 8031c2c:	2b03      	cmp	r3, #3
 8031c2e:	d109      	bne.n	8031c44 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8031c30:	68bb      	ldr	r3, [r7, #8]
 8031c32:	f103 0214 	add.w	r2, r3, #20
 8031c36:	687b      	ldr	r3, [r7, #4]
 8031c38:	0c1b      	lsrs	r3, r3, #16
 8031c3a:	b29b      	uxth	r3, r3
 8031c3c:	4619      	mov	r1, r3
 8031c3e:	4610      	mov	r0, r2
 8031c40:	f7fe fc30 	bl	80304a4 <st_word>
	}
}
 8031c44:	bf00      	nop
 8031c46:	3710      	adds	r7, #16
 8031c48:	46bd      	mov	sp, r7
 8031c4a:	bd80      	pop	{r7, pc}

08031c4c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8031c4c:	b590      	push	{r4, r7, lr}
 8031c4e:	b087      	sub	sp, #28
 8031c50:	af00      	add	r7, sp, #0
 8031c52:	6078      	str	r0, [r7, #4]
 8031c54:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8031c56:	683b      	ldr	r3, [r7, #0]
 8031c58:	331a      	adds	r3, #26
 8031c5a:	4618      	mov	r0, r3
 8031c5c:	f7fe fb0c 	bl	8030278 <ld_word>
 8031c60:	4603      	mov	r3, r0
 8031c62:	2b00      	cmp	r3, #0
 8031c64:	d001      	beq.n	8031c6a <cmp_lfn+0x1e>
 8031c66:	2300      	movs	r3, #0
 8031c68:	e059      	b.n	8031d1e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8031c6a:	683b      	ldr	r3, [r7, #0]
 8031c6c:	781b      	ldrb	r3, [r3, #0]
 8031c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8031c72:	1e5a      	subs	r2, r3, #1
 8031c74:	4613      	mov	r3, r2
 8031c76:	005b      	lsls	r3, r3, #1
 8031c78:	4413      	add	r3, r2
 8031c7a:	009b      	lsls	r3, r3, #2
 8031c7c:	4413      	add	r3, r2
 8031c7e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8031c80:	2301      	movs	r3, #1
 8031c82:	81fb      	strh	r3, [r7, #14]
 8031c84:	2300      	movs	r3, #0
 8031c86:	613b      	str	r3, [r7, #16]
 8031c88:	e033      	b.n	8031cf2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8031c8a:	4a27      	ldr	r2, [pc, #156]	; (8031d28 <cmp_lfn+0xdc>)
 8031c8c:	693b      	ldr	r3, [r7, #16]
 8031c8e:	4413      	add	r3, r2
 8031c90:	781b      	ldrb	r3, [r3, #0]
 8031c92:	461a      	mov	r2, r3
 8031c94:	683b      	ldr	r3, [r7, #0]
 8031c96:	4413      	add	r3, r2
 8031c98:	4618      	mov	r0, r3
 8031c9a:	f7fe faed 	bl	8030278 <ld_word>
 8031c9e:	4603      	mov	r3, r0
 8031ca0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8031ca2:	89fb      	ldrh	r3, [r7, #14]
 8031ca4:	2b00      	cmp	r3, #0
 8031ca6:	d01a      	beq.n	8031cde <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8031ca8:	697b      	ldr	r3, [r7, #20]
 8031caa:	2bfe      	cmp	r3, #254	; 0xfe
 8031cac:	d812      	bhi.n	8031cd4 <cmp_lfn+0x88>
 8031cae:	89bb      	ldrh	r3, [r7, #12]
 8031cb0:	4618      	mov	r0, r3
 8031cb2:	f003 ffd1 	bl	8035c58 <ff_wtoupper>
 8031cb6:	4603      	mov	r3, r0
 8031cb8:	461c      	mov	r4, r3
 8031cba:	697b      	ldr	r3, [r7, #20]
 8031cbc:	1c5a      	adds	r2, r3, #1
 8031cbe:	617a      	str	r2, [r7, #20]
 8031cc0:	005b      	lsls	r3, r3, #1
 8031cc2:	687a      	ldr	r2, [r7, #4]
 8031cc4:	4413      	add	r3, r2
 8031cc6:	881b      	ldrh	r3, [r3, #0]
 8031cc8:	4618      	mov	r0, r3
 8031cca:	f003 ffc5 	bl	8035c58 <ff_wtoupper>
 8031cce:	4603      	mov	r3, r0
 8031cd0:	429c      	cmp	r4, r3
 8031cd2:	d001      	beq.n	8031cd8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8031cd4:	2300      	movs	r3, #0
 8031cd6:	e022      	b.n	8031d1e <cmp_lfn+0xd2>
			}
			wc = uc;
 8031cd8:	89bb      	ldrh	r3, [r7, #12]
 8031cda:	81fb      	strh	r3, [r7, #14]
 8031cdc:	e006      	b.n	8031cec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8031cde:	89bb      	ldrh	r3, [r7, #12]
 8031ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031ce4:	4293      	cmp	r3, r2
 8031ce6:	d001      	beq.n	8031cec <cmp_lfn+0xa0>
 8031ce8:	2300      	movs	r3, #0
 8031cea:	e018      	b.n	8031d1e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8031cec:	693b      	ldr	r3, [r7, #16]
 8031cee:	3301      	adds	r3, #1
 8031cf0:	613b      	str	r3, [r7, #16]
 8031cf2:	693b      	ldr	r3, [r7, #16]
 8031cf4:	2b0c      	cmp	r3, #12
 8031cf6:	d9c8      	bls.n	8031c8a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8031cf8:	683b      	ldr	r3, [r7, #0]
 8031cfa:	781b      	ldrb	r3, [r3, #0]
 8031cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8031d00:	2b00      	cmp	r3, #0
 8031d02:	d00b      	beq.n	8031d1c <cmp_lfn+0xd0>
 8031d04:	89fb      	ldrh	r3, [r7, #14]
 8031d06:	2b00      	cmp	r3, #0
 8031d08:	d008      	beq.n	8031d1c <cmp_lfn+0xd0>
 8031d0a:	697b      	ldr	r3, [r7, #20]
 8031d0c:	005b      	lsls	r3, r3, #1
 8031d0e:	687a      	ldr	r2, [r7, #4]
 8031d10:	4413      	add	r3, r2
 8031d12:	881b      	ldrh	r3, [r3, #0]
 8031d14:	2b00      	cmp	r3, #0
 8031d16:	d001      	beq.n	8031d1c <cmp_lfn+0xd0>
 8031d18:	2300      	movs	r3, #0
 8031d1a:	e000      	b.n	8031d1e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8031d1c:	2301      	movs	r3, #1
}
 8031d1e:	4618      	mov	r0, r3
 8031d20:	371c      	adds	r7, #28
 8031d22:	46bd      	mov	sp, r7
 8031d24:	bd90      	pop	{r4, r7, pc}
 8031d26:	bf00      	nop
 8031d28:	0803ba24 	.word	0x0803ba24

08031d2c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8031d2c:	b580      	push	{r7, lr}
 8031d2e:	b086      	sub	sp, #24
 8031d30:	af00      	add	r7, sp, #0
 8031d32:	6078      	str	r0, [r7, #4]
 8031d34:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8031d36:	683b      	ldr	r3, [r7, #0]
 8031d38:	331a      	adds	r3, #26
 8031d3a:	4618      	mov	r0, r3
 8031d3c:	f7fe fa9c 	bl	8030278 <ld_word>
 8031d40:	4603      	mov	r3, r0
 8031d42:	2b00      	cmp	r3, #0
 8031d44:	d001      	beq.n	8031d4a <pick_lfn+0x1e>
 8031d46:	2300      	movs	r3, #0
 8031d48:	e04d      	b.n	8031de6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8031d4a:	683b      	ldr	r3, [r7, #0]
 8031d4c:	781b      	ldrb	r3, [r3, #0]
 8031d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8031d52:	1e5a      	subs	r2, r3, #1
 8031d54:	4613      	mov	r3, r2
 8031d56:	005b      	lsls	r3, r3, #1
 8031d58:	4413      	add	r3, r2
 8031d5a:	009b      	lsls	r3, r3, #2
 8031d5c:	4413      	add	r3, r2
 8031d5e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8031d60:	2301      	movs	r3, #1
 8031d62:	81fb      	strh	r3, [r7, #14]
 8031d64:	2300      	movs	r3, #0
 8031d66:	613b      	str	r3, [r7, #16]
 8031d68:	e028      	b.n	8031dbc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8031d6a:	4a21      	ldr	r2, [pc, #132]	; (8031df0 <pick_lfn+0xc4>)
 8031d6c:	693b      	ldr	r3, [r7, #16]
 8031d6e:	4413      	add	r3, r2
 8031d70:	781b      	ldrb	r3, [r3, #0]
 8031d72:	461a      	mov	r2, r3
 8031d74:	683b      	ldr	r3, [r7, #0]
 8031d76:	4413      	add	r3, r2
 8031d78:	4618      	mov	r0, r3
 8031d7a:	f7fe fa7d 	bl	8030278 <ld_word>
 8031d7e:	4603      	mov	r3, r0
 8031d80:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8031d82:	89fb      	ldrh	r3, [r7, #14]
 8031d84:	2b00      	cmp	r3, #0
 8031d86:	d00f      	beq.n	8031da8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8031d88:	697b      	ldr	r3, [r7, #20]
 8031d8a:	2bfe      	cmp	r3, #254	; 0xfe
 8031d8c:	d901      	bls.n	8031d92 <pick_lfn+0x66>
 8031d8e:	2300      	movs	r3, #0
 8031d90:	e029      	b.n	8031de6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8031d92:	89bb      	ldrh	r3, [r7, #12]
 8031d94:	81fb      	strh	r3, [r7, #14]
 8031d96:	697b      	ldr	r3, [r7, #20]
 8031d98:	1c5a      	adds	r2, r3, #1
 8031d9a:	617a      	str	r2, [r7, #20]
 8031d9c:	005b      	lsls	r3, r3, #1
 8031d9e:	687a      	ldr	r2, [r7, #4]
 8031da0:	4413      	add	r3, r2
 8031da2:	89fa      	ldrh	r2, [r7, #14]
 8031da4:	801a      	strh	r2, [r3, #0]
 8031da6:	e006      	b.n	8031db6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8031da8:	89bb      	ldrh	r3, [r7, #12]
 8031daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031dae:	4293      	cmp	r3, r2
 8031db0:	d001      	beq.n	8031db6 <pick_lfn+0x8a>
 8031db2:	2300      	movs	r3, #0
 8031db4:	e017      	b.n	8031de6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8031db6:	693b      	ldr	r3, [r7, #16]
 8031db8:	3301      	adds	r3, #1
 8031dba:	613b      	str	r3, [r7, #16]
 8031dbc:	693b      	ldr	r3, [r7, #16]
 8031dbe:	2b0c      	cmp	r3, #12
 8031dc0:	d9d3      	bls.n	8031d6a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8031dc2:	683b      	ldr	r3, [r7, #0]
 8031dc4:	781b      	ldrb	r3, [r3, #0]
 8031dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8031dca:	2b00      	cmp	r3, #0
 8031dcc:	d00a      	beq.n	8031de4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8031dce:	697b      	ldr	r3, [r7, #20]
 8031dd0:	2bfe      	cmp	r3, #254	; 0xfe
 8031dd2:	d901      	bls.n	8031dd8 <pick_lfn+0xac>
 8031dd4:	2300      	movs	r3, #0
 8031dd6:	e006      	b.n	8031de6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8031dd8:	697b      	ldr	r3, [r7, #20]
 8031dda:	005b      	lsls	r3, r3, #1
 8031ddc:	687a      	ldr	r2, [r7, #4]
 8031dde:	4413      	add	r3, r2
 8031de0:	2200      	movs	r2, #0
 8031de2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8031de4:	2301      	movs	r3, #1
}
 8031de6:	4618      	mov	r0, r3
 8031de8:	3718      	adds	r7, #24
 8031dea:	46bd      	mov	sp, r7
 8031dec:	bd80      	pop	{r7, pc}
 8031dee:	bf00      	nop
 8031df0:	0803ba24 	.word	0x0803ba24

08031df4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8031df4:	b580      	push	{r7, lr}
 8031df6:	b088      	sub	sp, #32
 8031df8:	af00      	add	r7, sp, #0
 8031dfa:	60f8      	str	r0, [r7, #12]
 8031dfc:	60b9      	str	r1, [r7, #8]
 8031dfe:	4611      	mov	r1, r2
 8031e00:	461a      	mov	r2, r3
 8031e02:	460b      	mov	r3, r1
 8031e04:	71fb      	strb	r3, [r7, #7]
 8031e06:	4613      	mov	r3, r2
 8031e08:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8031e0a:	68bb      	ldr	r3, [r7, #8]
 8031e0c:	330d      	adds	r3, #13
 8031e0e:	79ba      	ldrb	r2, [r7, #6]
 8031e10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8031e12:	68bb      	ldr	r3, [r7, #8]
 8031e14:	330b      	adds	r3, #11
 8031e16:	220f      	movs	r2, #15
 8031e18:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8031e1a:	68bb      	ldr	r3, [r7, #8]
 8031e1c:	330c      	adds	r3, #12
 8031e1e:	2200      	movs	r2, #0
 8031e20:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8031e22:	68bb      	ldr	r3, [r7, #8]
 8031e24:	331a      	adds	r3, #26
 8031e26:	2100      	movs	r1, #0
 8031e28:	4618      	mov	r0, r3
 8031e2a:	f7fe fb3b 	bl	80304a4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8031e2e:	79fb      	ldrb	r3, [r7, #7]
 8031e30:	1e5a      	subs	r2, r3, #1
 8031e32:	4613      	mov	r3, r2
 8031e34:	005b      	lsls	r3, r3, #1
 8031e36:	4413      	add	r3, r2
 8031e38:	009b      	lsls	r3, r3, #2
 8031e3a:	4413      	add	r3, r2
 8031e3c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8031e3e:	2300      	movs	r3, #0
 8031e40:	82fb      	strh	r3, [r7, #22]
 8031e42:	2300      	movs	r3, #0
 8031e44:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8031e46:	8afb      	ldrh	r3, [r7, #22]
 8031e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031e4c:	4293      	cmp	r3, r2
 8031e4e:	d007      	beq.n	8031e60 <put_lfn+0x6c>
 8031e50:	69fb      	ldr	r3, [r7, #28]
 8031e52:	1c5a      	adds	r2, r3, #1
 8031e54:	61fa      	str	r2, [r7, #28]
 8031e56:	005b      	lsls	r3, r3, #1
 8031e58:	68fa      	ldr	r2, [r7, #12]
 8031e5a:	4413      	add	r3, r2
 8031e5c:	881b      	ldrh	r3, [r3, #0]
 8031e5e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8031e60:	4a17      	ldr	r2, [pc, #92]	; (8031ec0 <put_lfn+0xcc>)
 8031e62:	69bb      	ldr	r3, [r7, #24]
 8031e64:	4413      	add	r3, r2
 8031e66:	781b      	ldrb	r3, [r3, #0]
 8031e68:	461a      	mov	r2, r3
 8031e6a:	68bb      	ldr	r3, [r7, #8]
 8031e6c:	4413      	add	r3, r2
 8031e6e:	8afa      	ldrh	r2, [r7, #22]
 8031e70:	4611      	mov	r1, r2
 8031e72:	4618      	mov	r0, r3
 8031e74:	f7fe fb16 	bl	80304a4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8031e78:	8afb      	ldrh	r3, [r7, #22]
 8031e7a:	2b00      	cmp	r3, #0
 8031e7c:	d102      	bne.n	8031e84 <put_lfn+0x90>
 8031e7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8031e82:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8031e84:	69bb      	ldr	r3, [r7, #24]
 8031e86:	3301      	adds	r3, #1
 8031e88:	61bb      	str	r3, [r7, #24]
 8031e8a:	69bb      	ldr	r3, [r7, #24]
 8031e8c:	2b0c      	cmp	r3, #12
 8031e8e:	d9da      	bls.n	8031e46 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8031e90:	8afb      	ldrh	r3, [r7, #22]
 8031e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031e96:	4293      	cmp	r3, r2
 8031e98:	d006      	beq.n	8031ea8 <put_lfn+0xb4>
 8031e9a:	69fb      	ldr	r3, [r7, #28]
 8031e9c:	005b      	lsls	r3, r3, #1
 8031e9e:	68fa      	ldr	r2, [r7, #12]
 8031ea0:	4413      	add	r3, r2
 8031ea2:	881b      	ldrh	r3, [r3, #0]
 8031ea4:	2b00      	cmp	r3, #0
 8031ea6:	d103      	bne.n	8031eb0 <put_lfn+0xbc>
 8031ea8:	79fb      	ldrb	r3, [r7, #7]
 8031eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8031eae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8031eb0:	68bb      	ldr	r3, [r7, #8]
 8031eb2:	79fa      	ldrb	r2, [r7, #7]
 8031eb4:	701a      	strb	r2, [r3, #0]
}
 8031eb6:	bf00      	nop
 8031eb8:	3720      	adds	r7, #32
 8031eba:	46bd      	mov	sp, r7
 8031ebc:	bd80      	pop	{r7, pc}
 8031ebe:	bf00      	nop
 8031ec0:	0803ba24 	.word	0x0803ba24

08031ec4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8031ec4:	b580      	push	{r7, lr}
 8031ec6:	b08c      	sub	sp, #48	; 0x30
 8031ec8:	af00      	add	r7, sp, #0
 8031eca:	60f8      	str	r0, [r7, #12]
 8031ecc:	60b9      	str	r1, [r7, #8]
 8031ece:	607a      	str	r2, [r7, #4]
 8031ed0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8031ed2:	220b      	movs	r2, #11
 8031ed4:	68b9      	ldr	r1, [r7, #8]
 8031ed6:	68f8      	ldr	r0, [r7, #12]
 8031ed8:	f7fe fbb3 	bl	8030642 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8031edc:	683b      	ldr	r3, [r7, #0]
 8031ede:	2b05      	cmp	r3, #5
 8031ee0:	d929      	bls.n	8031f36 <gen_numname+0x72>
		sr = seq;
 8031ee2:	683b      	ldr	r3, [r7, #0]
 8031ee4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8031ee6:	e020      	b.n	8031f2a <gen_numname+0x66>
			wc = *lfn++;
 8031ee8:	687b      	ldr	r3, [r7, #4]
 8031eea:	1c9a      	adds	r2, r3, #2
 8031eec:	607a      	str	r2, [r7, #4]
 8031eee:	881b      	ldrh	r3, [r3, #0]
 8031ef0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8031ef2:	2300      	movs	r3, #0
 8031ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8031ef6:	e015      	b.n	8031f24 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8031ef8:	69fb      	ldr	r3, [r7, #28]
 8031efa:	005a      	lsls	r2, r3, #1
 8031efc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8031efe:	f003 0301 	and.w	r3, r3, #1
 8031f02:	4413      	add	r3, r2
 8031f04:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8031f06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8031f08:	085b      	lsrs	r3, r3, #1
 8031f0a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8031f0c:	69fb      	ldr	r3, [r7, #28]
 8031f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8031f12:	2b00      	cmp	r3, #0
 8031f14:	d003      	beq.n	8031f1e <gen_numname+0x5a>
 8031f16:	69fa      	ldr	r2, [r7, #28]
 8031f18:	4b30      	ldr	r3, [pc, #192]	; (8031fdc <gen_numname+0x118>)
 8031f1a:	4053      	eors	r3, r2
 8031f1c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8031f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031f20:	3301      	adds	r3, #1
 8031f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8031f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031f26:	2b0f      	cmp	r3, #15
 8031f28:	d9e6      	bls.n	8031ef8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8031f2a:	687b      	ldr	r3, [r7, #4]
 8031f2c:	881b      	ldrh	r3, [r3, #0]
 8031f2e:	2b00      	cmp	r3, #0
 8031f30:	d1da      	bne.n	8031ee8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8031f32:	69fb      	ldr	r3, [r7, #28]
 8031f34:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8031f36:	2307      	movs	r3, #7
 8031f38:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8031f3a:	683b      	ldr	r3, [r7, #0]
 8031f3c:	b2db      	uxtb	r3, r3
 8031f3e:	f003 030f 	and.w	r3, r3, #15
 8031f42:	b2db      	uxtb	r3, r3
 8031f44:	3330      	adds	r3, #48	; 0x30
 8031f46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8031f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8031f4e:	2b39      	cmp	r3, #57	; 0x39
 8031f50:	d904      	bls.n	8031f5c <gen_numname+0x98>
 8031f52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8031f56:	3307      	adds	r3, #7
 8031f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8031f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031f5e:	1e5a      	subs	r2, r3, #1
 8031f60:	62ba      	str	r2, [r7, #40]	; 0x28
 8031f62:	3330      	adds	r3, #48	; 0x30
 8031f64:	443b      	add	r3, r7
 8031f66:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8031f6a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8031f6e:	683b      	ldr	r3, [r7, #0]
 8031f70:	091b      	lsrs	r3, r3, #4
 8031f72:	603b      	str	r3, [r7, #0]
	} while (seq);
 8031f74:	683b      	ldr	r3, [r7, #0]
 8031f76:	2b00      	cmp	r3, #0
 8031f78:	d1df      	bne.n	8031f3a <gen_numname+0x76>
	ns[i] = '~';
 8031f7a:	f107 0214 	add.w	r2, r7, #20
 8031f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031f80:	4413      	add	r3, r2
 8031f82:	227e      	movs	r2, #126	; 0x7e
 8031f84:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8031f86:	2300      	movs	r3, #0
 8031f88:	627b      	str	r3, [r7, #36]	; 0x24
 8031f8a:	e002      	b.n	8031f92 <gen_numname+0xce>
 8031f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031f8e:	3301      	adds	r3, #1
 8031f90:	627b      	str	r3, [r7, #36]	; 0x24
 8031f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031f96:	429a      	cmp	r2, r3
 8031f98:	d205      	bcs.n	8031fa6 <gen_numname+0xe2>
 8031f9a:	68fa      	ldr	r2, [r7, #12]
 8031f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031f9e:	4413      	add	r3, r2
 8031fa0:	781b      	ldrb	r3, [r3, #0]
 8031fa2:	2b20      	cmp	r3, #32
 8031fa4:	d1f2      	bne.n	8031f8c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8031fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031fa8:	2b07      	cmp	r3, #7
 8031faa:	d807      	bhi.n	8031fbc <gen_numname+0xf8>
 8031fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031fae:	1c5a      	adds	r2, r3, #1
 8031fb0:	62ba      	str	r2, [r7, #40]	; 0x28
 8031fb2:	3330      	adds	r3, #48	; 0x30
 8031fb4:	443b      	add	r3, r7
 8031fb6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8031fba:	e000      	b.n	8031fbe <gen_numname+0xfa>
 8031fbc:	2120      	movs	r1, #32
 8031fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031fc0:	1c5a      	adds	r2, r3, #1
 8031fc2:	627a      	str	r2, [r7, #36]	; 0x24
 8031fc4:	68fa      	ldr	r2, [r7, #12]
 8031fc6:	4413      	add	r3, r2
 8031fc8:	460a      	mov	r2, r1
 8031fca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8031fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031fce:	2b07      	cmp	r3, #7
 8031fd0:	d9e9      	bls.n	8031fa6 <gen_numname+0xe2>
}
 8031fd2:	bf00      	nop
 8031fd4:	bf00      	nop
 8031fd6:	3730      	adds	r7, #48	; 0x30
 8031fd8:	46bd      	mov	sp, r7
 8031fda:	bd80      	pop	{r7, pc}
 8031fdc:	00011021 	.word	0x00011021

08031fe0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8031fe0:	b480      	push	{r7}
 8031fe2:	b085      	sub	sp, #20
 8031fe4:	af00      	add	r7, sp, #0
 8031fe6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8031fe8:	2300      	movs	r3, #0
 8031fea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8031fec:	230b      	movs	r3, #11
 8031fee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8031ff0:	7bfb      	ldrb	r3, [r7, #15]
 8031ff2:	b2da      	uxtb	r2, r3
 8031ff4:	0852      	lsrs	r2, r2, #1
 8031ff6:	01db      	lsls	r3, r3, #7
 8031ff8:	4313      	orrs	r3, r2
 8031ffa:	b2da      	uxtb	r2, r3
 8031ffc:	687b      	ldr	r3, [r7, #4]
 8031ffe:	1c59      	adds	r1, r3, #1
 8032000:	6079      	str	r1, [r7, #4]
 8032002:	781b      	ldrb	r3, [r3, #0]
 8032004:	4413      	add	r3, r2
 8032006:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8032008:	68bb      	ldr	r3, [r7, #8]
 803200a:	3b01      	subs	r3, #1
 803200c:	60bb      	str	r3, [r7, #8]
 803200e:	68bb      	ldr	r3, [r7, #8]
 8032010:	2b00      	cmp	r3, #0
 8032012:	d1ed      	bne.n	8031ff0 <sum_sfn+0x10>
	return sum;
 8032014:	7bfb      	ldrb	r3, [r7, #15]
}
 8032016:	4618      	mov	r0, r3
 8032018:	3714      	adds	r7, #20
 803201a:	46bd      	mov	sp, r7
 803201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032020:	4770      	bx	lr

08032022 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8032022:	b480      	push	{r7}
 8032024:	b087      	sub	sp, #28
 8032026:	af00      	add	r7, sp, #0
 8032028:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 803202a:	687b      	ldr	r3, [r7, #4]
 803202c:	3301      	adds	r3, #1
 803202e:	781b      	ldrb	r3, [r3, #0]
 8032030:	3301      	adds	r3, #1
 8032032:	015b      	lsls	r3, r3, #5
 8032034:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8032036:	2300      	movs	r3, #0
 8032038:	827b      	strh	r3, [r7, #18]
 803203a:	2300      	movs	r3, #0
 803203c:	617b      	str	r3, [r7, #20]
 803203e:	e018      	b.n	8032072 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8032040:	697b      	ldr	r3, [r7, #20]
 8032042:	2b02      	cmp	r3, #2
 8032044:	d103      	bne.n	803204e <xdir_sum+0x2c>
			i++;
 8032046:	697b      	ldr	r3, [r7, #20]
 8032048:	3301      	adds	r3, #1
 803204a:	617b      	str	r3, [r7, #20]
 803204c:	e00e      	b.n	803206c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 803204e:	8a7b      	ldrh	r3, [r7, #18]
 8032050:	03db      	lsls	r3, r3, #15
 8032052:	b29a      	uxth	r2, r3
 8032054:	8a7b      	ldrh	r3, [r7, #18]
 8032056:	085b      	lsrs	r3, r3, #1
 8032058:	b29b      	uxth	r3, r3
 803205a:	4413      	add	r3, r2
 803205c:	b29a      	uxth	r2, r3
 803205e:	6879      	ldr	r1, [r7, #4]
 8032060:	697b      	ldr	r3, [r7, #20]
 8032062:	440b      	add	r3, r1
 8032064:	781b      	ldrb	r3, [r3, #0]
 8032066:	b29b      	uxth	r3, r3
 8032068:	4413      	add	r3, r2
 803206a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 803206c:	697b      	ldr	r3, [r7, #20]
 803206e:	3301      	adds	r3, #1
 8032070:	617b      	str	r3, [r7, #20]
 8032072:	697a      	ldr	r2, [r7, #20]
 8032074:	68fb      	ldr	r3, [r7, #12]
 8032076:	429a      	cmp	r2, r3
 8032078:	d3e2      	bcc.n	8032040 <xdir_sum+0x1e>
		}
	}
	return sum;
 803207a:	8a7b      	ldrh	r3, [r7, #18]
}
 803207c:	4618      	mov	r0, r3
 803207e:	371c      	adds	r7, #28
 8032080:	46bd      	mov	sp, r7
 8032082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032086:	4770      	bx	lr

08032088 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8032088:	b580      	push	{r7, lr}
 803208a:	b084      	sub	sp, #16
 803208c:	af00      	add	r7, sp, #0
 803208e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8032090:	2300      	movs	r3, #0
 8032092:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8032094:	e01f      	b.n	80320d6 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8032096:	89bb      	ldrh	r3, [r7, #12]
 8032098:	4618      	mov	r0, r3
 803209a:	f003 fddd 	bl	8035c58 <ff_wtoupper>
 803209e:	4603      	mov	r3, r0
 80320a0:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80320a2:	89fb      	ldrh	r3, [r7, #14]
 80320a4:	03db      	lsls	r3, r3, #15
 80320a6:	b29a      	uxth	r2, r3
 80320a8:	89fb      	ldrh	r3, [r7, #14]
 80320aa:	085b      	lsrs	r3, r3, #1
 80320ac:	b29b      	uxth	r3, r3
 80320ae:	4413      	add	r3, r2
 80320b0:	b29a      	uxth	r2, r3
 80320b2:	89bb      	ldrh	r3, [r7, #12]
 80320b4:	b2db      	uxtb	r3, r3
 80320b6:	b29b      	uxth	r3, r3
 80320b8:	4413      	add	r3, r2
 80320ba:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80320bc:	89fb      	ldrh	r3, [r7, #14]
 80320be:	03db      	lsls	r3, r3, #15
 80320c0:	b29a      	uxth	r2, r3
 80320c2:	89fb      	ldrh	r3, [r7, #14]
 80320c4:	085b      	lsrs	r3, r3, #1
 80320c6:	b29b      	uxth	r3, r3
 80320c8:	4413      	add	r3, r2
 80320ca:	b29a      	uxth	r2, r3
 80320cc:	89bb      	ldrh	r3, [r7, #12]
 80320ce:	0a1b      	lsrs	r3, r3, #8
 80320d0:	b29b      	uxth	r3, r3
 80320d2:	4413      	add	r3, r2
 80320d4:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 80320d6:	687b      	ldr	r3, [r7, #4]
 80320d8:	1c9a      	adds	r2, r3, #2
 80320da:	607a      	str	r2, [r7, #4]
 80320dc:	881b      	ldrh	r3, [r3, #0]
 80320de:	81bb      	strh	r3, [r7, #12]
 80320e0:	89bb      	ldrh	r3, [r7, #12]
 80320e2:	2b00      	cmp	r3, #0
 80320e4:	d1d7      	bne.n	8032096 <xname_sum+0xe>
	}
	return sum;
 80320e6:	89fb      	ldrh	r3, [r7, #14]
}
 80320e8:	4618      	mov	r0, r3
 80320ea:	3710      	adds	r7, #16
 80320ec:	46bd      	mov	sp, r7
 80320ee:	bd80      	pop	{r7, pc}

080320f0 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 80320f0:	b580      	push	{r7, lr}
 80320f2:	b086      	sub	sp, #24
 80320f4:	af00      	add	r7, sp, #0
 80320f6:	6078      	str	r0, [r7, #4]
 80320f8:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 80320fa:	2300      	movs	r3, #0
 80320fc:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 80320fe:	2340      	movs	r3, #64	; 0x40
 8032100:	613b      	str	r3, [r7, #16]
 8032102:	2300      	movs	r3, #0
 8032104:	60fb      	str	r3, [r7, #12]
 8032106:	e02c      	b.n	8032162 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8032108:	693b      	ldr	r3, [r7, #16]
 803210a:	f003 031f 	and.w	r3, r3, #31
 803210e:	2b00      	cmp	r3, #0
 8032110:	d102      	bne.n	8032118 <get_xdir_info+0x28>
 8032112:	693b      	ldr	r3, [r7, #16]
 8032114:	3302      	adds	r3, #2
 8032116:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 8032118:	687a      	ldr	r2, [r7, #4]
 803211a:	693b      	ldr	r3, [r7, #16]
 803211c:	4413      	add	r3, r2
 803211e:	4618      	mov	r0, r3
 8032120:	f7fe f8aa 	bl	8030278 <ld_word>
 8032124:	4603      	mov	r3, r0
 8032126:	2100      	movs	r1, #0
 8032128:	4618      	mov	r0, r3
 803212a:	f003 fd59 	bl	8035be0 <ff_convert>
 803212e:	4603      	mov	r3, r0
 8032130:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8032132:	897b      	ldrh	r3, [r7, #10]
 8032134:	2b00      	cmp	r3, #0
 8032136:	d002      	beq.n	803213e <get_xdir_info+0x4e>
 8032138:	697b      	ldr	r3, [r7, #20]
 803213a:	2bfe      	cmp	r3, #254	; 0xfe
 803213c:	d902      	bls.n	8032144 <get_xdir_info+0x54>
 803213e:	2300      	movs	r3, #0
 8032140:	617b      	str	r3, [r7, #20]
 8032142:	e015      	b.n	8032170 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 8032144:	697b      	ldr	r3, [r7, #20]
 8032146:	1c5a      	adds	r2, r3, #1
 8032148:	617a      	str	r2, [r7, #20]
 803214a:	897a      	ldrh	r2, [r7, #10]
 803214c:	b2d1      	uxtb	r1, r2
 803214e:	683a      	ldr	r2, [r7, #0]
 8032150:	4413      	add	r3, r2
 8032152:	460a      	mov	r2, r1
 8032154:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8032156:	693b      	ldr	r3, [r7, #16]
 8032158:	3302      	adds	r3, #2
 803215a:	613b      	str	r3, [r7, #16]
 803215c:	68fb      	ldr	r3, [r7, #12]
 803215e:	3301      	adds	r3, #1
 8032160:	60fb      	str	r3, [r7, #12]
 8032162:	687b      	ldr	r3, [r7, #4]
 8032164:	3323      	adds	r3, #35	; 0x23
 8032166:	781b      	ldrb	r3, [r3, #0]
 8032168:	461a      	mov	r2, r3
 803216a:	68fb      	ldr	r3, [r7, #12]
 803216c:	4293      	cmp	r3, r2
 803216e:	d3cb      	bcc.n	8032108 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8032170:	697b      	ldr	r3, [r7, #20]
 8032172:	2b00      	cmp	r3, #0
 8032174:	d106      	bne.n	8032184 <get_xdir_info+0x94>
 8032176:	697b      	ldr	r3, [r7, #20]
 8032178:	1c5a      	adds	r2, r3, #1
 803217a:	617a      	str	r2, [r7, #20]
 803217c:	683a      	ldr	r2, [r7, #0]
 803217e:	4413      	add	r3, r2
 8032180:	223f      	movs	r2, #63	; 0x3f
 8032182:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 8032184:	683a      	ldr	r2, [r7, #0]
 8032186:	697b      	ldr	r3, [r7, #20]
 8032188:	4413      	add	r3, r2
 803218a:	331a      	adds	r3, #26
 803218c:	2200      	movs	r2, #0
 803218e:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 8032190:	683b      	ldr	r3, [r7, #0]
 8032192:	2200      	movs	r2, #0
 8032194:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 8032196:	687b      	ldr	r3, [r7, #4]
 8032198:	791a      	ldrb	r2, [r3, #4]
 803219a:	683b      	ldr	r3, [r7, #0]
 803219c:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 803219e:	683b      	ldr	r3, [r7, #0]
 80321a0:	7b1b      	ldrb	r3, [r3, #12]
 80321a2:	f003 0310 	and.w	r3, r3, #16
 80321a6:	2b00      	cmp	r3, #0
 80321a8:	d107      	bne.n	80321ba <get_xdir_info+0xca>
 80321aa:	687b      	ldr	r3, [r7, #4]
 80321ac:	3338      	adds	r3, #56	; 0x38
 80321ae:	4618      	mov	r0, r3
 80321b0:	f7fe f89d 	bl	80302ee <ld_qword>
 80321b4:	4602      	mov	r2, r0
 80321b6:	460b      	mov	r3, r1
 80321b8:	e003      	b.n	80321c2 <get_xdir_info+0xd2>
 80321ba:	f04f 0200 	mov.w	r2, #0
 80321be:	f04f 0300 	mov.w	r3, #0
 80321c2:	6839      	ldr	r1, [r7, #0]
 80321c4:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 80321c8:	687b      	ldr	r3, [r7, #4]
 80321ca:	330c      	adds	r3, #12
 80321cc:	4618      	mov	r0, r3
 80321ce:	f7fe f853 	bl	8030278 <ld_word>
 80321d2:	4603      	mov	r3, r0
 80321d4:	461a      	mov	r2, r3
 80321d6:	683b      	ldr	r3, [r7, #0]
 80321d8:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 80321da:	687b      	ldr	r3, [r7, #4]
 80321dc:	330e      	adds	r3, #14
 80321de:	4618      	mov	r0, r3
 80321e0:	f7fe f84a 	bl	8030278 <ld_word>
 80321e4:	4603      	mov	r3, r0
 80321e6:	461a      	mov	r2, r3
 80321e8:	683b      	ldr	r3, [r7, #0]
 80321ea:	811a      	strh	r2, [r3, #8]
}
 80321ec:	bf00      	nop
 80321ee:	3718      	adds	r7, #24
 80321f0:	46bd      	mov	sp, r7
 80321f2:	bd80      	pop	{r7, pc}

080321f4 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80321f4:	b590      	push	{r4, r7, lr}
 80321f6:	b087      	sub	sp, #28
 80321f8:	af00      	add	r7, sp, #0
 80321fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80321fc:	687b      	ldr	r3, [r7, #4]
 80321fe:	681b      	ldr	r3, [r3, #0]
 8032200:	695b      	ldr	r3, [r3, #20]
 8032202:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8032204:	687b      	ldr	r3, [r7, #4]
 8032206:	681a      	ldr	r2, [r3, #0]
 8032208:	687b      	ldr	r3, [r7, #4]
 803220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803220c:	4619      	mov	r1, r3
 803220e:	4610      	mov	r0, r2
 8032210:	f7fe fc76 	bl	8030b00 <move_window>
 8032214:	4603      	mov	r3, r0
 8032216:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8032218:	7bfb      	ldrb	r3, [r7, #15]
 803221a:	2b00      	cmp	r3, #0
 803221c:	d001      	beq.n	8032222 <load_xdir+0x2e>
 803221e:	7bfb      	ldrb	r3, [r7, #15]
 8032220:	e09f      	b.n	8032362 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8032222:	687b      	ldr	r3, [r7, #4]
 8032224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032226:	781b      	ldrb	r3, [r3, #0]
 8032228:	2b85      	cmp	r3, #133	; 0x85
 803222a:	d001      	beq.n	8032230 <load_xdir+0x3c>
 803222c:	2302      	movs	r3, #2
 803222e:	e098      	b.n	8032362 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8032230:	687b      	ldr	r3, [r7, #4]
 8032232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032234:	2220      	movs	r2, #32
 8032236:	4619      	mov	r1, r3
 8032238:	6938      	ldr	r0, [r7, #16]
 803223a:	f7fe fa02 	bl	8030642 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 803223e:	693b      	ldr	r3, [r7, #16]
 8032240:	3301      	adds	r3, #1
 8032242:	781b      	ldrb	r3, [r3, #0]
 8032244:	3301      	adds	r3, #1
 8032246:	015b      	lsls	r3, r3, #5
 8032248:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 803224a:	68bb      	ldr	r3, [r7, #8]
 803224c:	2b5f      	cmp	r3, #95	; 0x5f
 803224e:	d903      	bls.n	8032258 <load_xdir+0x64>
 8032250:	68bb      	ldr	r3, [r7, #8]
 8032252:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8032256:	d901      	bls.n	803225c <load_xdir+0x68>
 8032258:	2302      	movs	r3, #2
 803225a:	e082      	b.n	8032362 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 803225c:	2100      	movs	r1, #0
 803225e:	6878      	ldr	r0, [r7, #4]
 8032260:	f7ff fb73 	bl	803194a <dir_next>
 8032264:	4603      	mov	r3, r0
 8032266:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8032268:	7bfb      	ldrb	r3, [r7, #15]
 803226a:	2b00      	cmp	r3, #0
 803226c:	d001      	beq.n	8032272 <load_xdir+0x7e>
 803226e:	7bfb      	ldrb	r3, [r7, #15]
 8032270:	e077      	b.n	8032362 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8032272:	687b      	ldr	r3, [r7, #4]
 8032274:	681a      	ldr	r2, [r3, #0]
 8032276:	687b      	ldr	r3, [r7, #4]
 8032278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803227a:	4619      	mov	r1, r3
 803227c:	4610      	mov	r0, r2
 803227e:	f7fe fc3f 	bl	8030b00 <move_window>
 8032282:	4603      	mov	r3, r0
 8032284:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8032286:	7bfb      	ldrb	r3, [r7, #15]
 8032288:	2b00      	cmp	r3, #0
 803228a:	d001      	beq.n	8032290 <load_xdir+0x9c>
 803228c:	7bfb      	ldrb	r3, [r7, #15]
 803228e:	e068      	b.n	8032362 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8032290:	687b      	ldr	r3, [r7, #4]
 8032292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032294:	781b      	ldrb	r3, [r3, #0]
 8032296:	2bc0      	cmp	r3, #192	; 0xc0
 8032298:	d001      	beq.n	803229e <load_xdir+0xaa>
 803229a:	2302      	movs	r3, #2
 803229c:	e061      	b.n	8032362 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 803229e:	693b      	ldr	r3, [r7, #16]
 80322a0:	f103 0020 	add.w	r0, r3, #32
 80322a4:	687b      	ldr	r3, [r7, #4]
 80322a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80322a8:	2220      	movs	r2, #32
 80322aa:	4619      	mov	r1, r3
 80322ac:	f7fe f9c9 	bl	8030642 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80322b0:	693b      	ldr	r3, [r7, #16]
 80322b2:	3323      	adds	r3, #35	; 0x23
 80322b4:	781b      	ldrb	r3, [r3, #0]
 80322b6:	332c      	adds	r3, #44	; 0x2c
 80322b8:	4a2c      	ldr	r2, [pc, #176]	; (803236c <load_xdir+0x178>)
 80322ba:	fba2 2303 	umull	r2, r3, r2, r3
 80322be:	08db      	lsrs	r3, r3, #3
 80322c0:	015b      	lsls	r3, r3, #5
 80322c2:	68ba      	ldr	r2, [r7, #8]
 80322c4:	429a      	cmp	r2, r3
 80322c6:	d201      	bcs.n	80322cc <load_xdir+0xd8>
 80322c8:	2302      	movs	r3, #2
 80322ca:	e04a      	b.n	8032362 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 80322cc:	2340      	movs	r3, #64	; 0x40
 80322ce:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 80322d0:	2100      	movs	r1, #0
 80322d2:	6878      	ldr	r0, [r7, #4]
 80322d4:	f7ff fb39 	bl	803194a <dir_next>
 80322d8:	4603      	mov	r3, r0
 80322da:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80322dc:	7bfb      	ldrb	r3, [r7, #15]
 80322de:	2b00      	cmp	r3, #0
 80322e0:	d001      	beq.n	80322e6 <load_xdir+0xf2>
 80322e2:	7bfb      	ldrb	r3, [r7, #15]
 80322e4:	e03d      	b.n	8032362 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 80322e6:	687b      	ldr	r3, [r7, #4]
 80322e8:	681a      	ldr	r2, [r3, #0]
 80322ea:	687b      	ldr	r3, [r7, #4]
 80322ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80322ee:	4619      	mov	r1, r3
 80322f0:	4610      	mov	r0, r2
 80322f2:	f7fe fc05 	bl	8030b00 <move_window>
 80322f6:	4603      	mov	r3, r0
 80322f8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80322fa:	7bfb      	ldrb	r3, [r7, #15]
 80322fc:	2b00      	cmp	r3, #0
 80322fe:	d001      	beq.n	8032304 <load_xdir+0x110>
 8032300:	7bfb      	ldrb	r3, [r7, #15]
 8032302:	e02e      	b.n	8032362 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8032304:	687b      	ldr	r3, [r7, #4]
 8032306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032308:	781b      	ldrb	r3, [r3, #0]
 803230a:	2bc1      	cmp	r3, #193	; 0xc1
 803230c:	d001      	beq.n	8032312 <load_xdir+0x11e>
 803230e:	2302      	movs	r3, #2
 8032310:	e027      	b.n	8032362 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8032312:	697b      	ldr	r3, [r7, #20]
 8032314:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8032318:	d208      	bcs.n	803232c <load_xdir+0x138>
 803231a:	693a      	ldr	r2, [r7, #16]
 803231c:	697b      	ldr	r3, [r7, #20]
 803231e:	18d0      	adds	r0, r2, r3
 8032320:	687b      	ldr	r3, [r7, #4]
 8032322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032324:	2220      	movs	r2, #32
 8032326:	4619      	mov	r1, r3
 8032328:	f7fe f98b 	bl	8030642 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 803232c:	697b      	ldr	r3, [r7, #20]
 803232e:	3320      	adds	r3, #32
 8032330:	617b      	str	r3, [r7, #20]
 8032332:	697a      	ldr	r2, [r7, #20]
 8032334:	68bb      	ldr	r3, [r7, #8]
 8032336:	429a      	cmp	r2, r3
 8032338:	d3ca      	bcc.n	80322d0 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 803233a:	697b      	ldr	r3, [r7, #20]
 803233c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8032340:	d80e      	bhi.n	8032360 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8032342:	6938      	ldr	r0, [r7, #16]
 8032344:	f7ff fe6d 	bl	8032022 <xdir_sum>
 8032348:	4603      	mov	r3, r0
 803234a:	461c      	mov	r4, r3
 803234c:	693b      	ldr	r3, [r7, #16]
 803234e:	3302      	adds	r3, #2
 8032350:	4618      	mov	r0, r3
 8032352:	f7fd ff91 	bl	8030278 <ld_word>
 8032356:	4603      	mov	r3, r0
 8032358:	429c      	cmp	r4, r3
 803235a:	d001      	beq.n	8032360 <load_xdir+0x16c>
 803235c:	2302      	movs	r3, #2
 803235e:	e000      	b.n	8032362 <load_xdir+0x16e>
	}
	return FR_OK;
 8032360:	2300      	movs	r3, #0
}
 8032362:	4618      	mov	r0, r3
 8032364:	371c      	adds	r7, #28
 8032366:	46bd      	mov	sp, r7
 8032368:	bd90      	pop	{r4, r7, pc}
 803236a:	bf00      	nop
 803236c:	88888889 	.word	0x88888889

08032370 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8032370:	b5b0      	push	{r4, r5, r7, lr}
 8032372:	b084      	sub	sp, #16
 8032374:	af00      	add	r7, sp, #0
 8032376:	6078      	str	r0, [r7, #4]
 8032378:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 803237a:	6839      	ldr	r1, [r7, #0]
 803237c:	6808      	ldr	r0, [r1, #0]
 803237e:	6879      	ldr	r1, [r7, #4]
 8032380:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8032382:	6839      	ldr	r1, [r7, #0]
 8032384:	6a08      	ldr	r0, [r1, #32]
 8032386:	6879      	ldr	r1, [r7, #4]
 8032388:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 803238a:	6839      	ldr	r1, [r7, #0]
 803238c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 803238e:	b2c8      	uxtb	r0, r1
 8032390:	6879      	ldr	r1, [r7, #4]
 8032392:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8032394:	6839      	ldr	r1, [r7, #0]
 8032396:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8032398:	2000      	movs	r0, #0
 803239a:	460c      	mov	r4, r1
 803239c:	4605      	mov	r5, r0
 803239e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80323a2:	2300      	movs	r3, #0
 80323a4:	6879      	ldr	r1, [r7, #4]
 80323a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 80323aa:	683b      	ldr	r3, [r7, #0]
 80323ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80323ae:	687b      	ldr	r3, [r7, #4]
 80323b0:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80323b2:	687b      	ldr	r3, [r7, #4]
 80323b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80323b6:	4619      	mov	r1, r3
 80323b8:	6878      	ldr	r0, [r7, #4]
 80323ba:	f7ff fa32 	bl	8031822 <dir_sdi>
 80323be:	4603      	mov	r3, r0
 80323c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80323c2:	7bfb      	ldrb	r3, [r7, #15]
 80323c4:	2b00      	cmp	r3, #0
 80323c6:	d104      	bne.n	80323d2 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 80323c8:	6878      	ldr	r0, [r7, #4]
 80323ca:	f7ff ff13 	bl	80321f4 <load_xdir>
 80323ce:	4603      	mov	r3, r0
 80323d0:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80323d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80323d4:	4618      	mov	r0, r3
 80323d6:	3710      	adds	r7, #16
 80323d8:	46bd      	mov	sp, r7
 80323da:	bdb0      	pop	{r4, r5, r7, pc}

080323dc <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 80323dc:	b590      	push	{r4, r7, lr}
 80323de:	b087      	sub	sp, #28
 80323e0:	af00      	add	r7, sp, #0
 80323e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80323e4:	687b      	ldr	r3, [r7, #4]
 80323e6:	681b      	ldr	r3, [r3, #0]
 80323e8:	695b      	ldr	r3, [r3, #20]
 80323ea:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80323ec:	68fb      	ldr	r3, [r7, #12]
 80323ee:	1c9c      	adds	r4, r3, #2
 80323f0:	68f8      	ldr	r0, [r7, #12]
 80323f2:	f7ff fe16 	bl	8032022 <xdir_sum>
 80323f6:	4603      	mov	r3, r0
 80323f8:	4619      	mov	r1, r3
 80323fa:	4620      	mov	r0, r4
 80323fc:	f7fe f852 	bl	80304a4 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8032400:	68fb      	ldr	r3, [r7, #12]
 8032402:	3301      	adds	r3, #1
 8032404:	781b      	ldrb	r3, [r3, #0]
 8032406:	3301      	adds	r3, #1
 8032408:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 803240a:	687b      	ldr	r3, [r7, #4]
 803240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803240e:	4619      	mov	r1, r3
 8032410:	6878      	ldr	r0, [r7, #4]
 8032412:	f7ff fa06 	bl	8031822 <dir_sdi>
 8032416:	4603      	mov	r3, r0
 8032418:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 803241a:	e026      	b.n	803246a <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 803241c:	687b      	ldr	r3, [r7, #4]
 803241e:	681a      	ldr	r2, [r3, #0]
 8032420:	687b      	ldr	r3, [r7, #4]
 8032422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032424:	4619      	mov	r1, r3
 8032426:	4610      	mov	r0, r2
 8032428:	f7fe fb6a 	bl	8030b00 <move_window>
 803242c:	4603      	mov	r3, r0
 803242e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8032430:	7dfb      	ldrb	r3, [r7, #23]
 8032432:	2b00      	cmp	r3, #0
 8032434:	d11d      	bne.n	8032472 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8032436:	687b      	ldr	r3, [r7, #4]
 8032438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803243a:	2220      	movs	r2, #32
 803243c:	68f9      	ldr	r1, [r7, #12]
 803243e:	4618      	mov	r0, r3
 8032440:	f7fe f8ff 	bl	8030642 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8032444:	687b      	ldr	r3, [r7, #4]
 8032446:	681b      	ldr	r3, [r3, #0]
 8032448:	2201      	movs	r2, #1
 803244a:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 803244c:	693b      	ldr	r3, [r7, #16]
 803244e:	3b01      	subs	r3, #1
 8032450:	613b      	str	r3, [r7, #16]
 8032452:	693b      	ldr	r3, [r7, #16]
 8032454:	2b00      	cmp	r3, #0
 8032456:	d00e      	beq.n	8032476 <store_xdir+0x9a>
		dirb += SZDIRE;
 8032458:	68fb      	ldr	r3, [r7, #12]
 803245a:	3320      	adds	r3, #32
 803245c:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 803245e:	2100      	movs	r1, #0
 8032460:	6878      	ldr	r0, [r7, #4]
 8032462:	f7ff fa72 	bl	803194a <dir_next>
 8032466:	4603      	mov	r3, r0
 8032468:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 803246a:	7dfb      	ldrb	r3, [r7, #23]
 803246c:	2b00      	cmp	r3, #0
 803246e:	d0d5      	beq.n	803241c <store_xdir+0x40>
 8032470:	e002      	b.n	8032478 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8032472:	bf00      	nop
 8032474:	e000      	b.n	8032478 <store_xdir+0x9c>
		if (--nent == 0) break;
 8032476:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8032478:	7dfb      	ldrb	r3, [r7, #23]
 803247a:	2b00      	cmp	r3, #0
 803247c:	d002      	beq.n	8032484 <store_xdir+0xa8>
 803247e:	7dfb      	ldrb	r3, [r7, #23]
 8032480:	2b01      	cmp	r3, #1
 8032482:	d101      	bne.n	8032488 <store_xdir+0xac>
 8032484:	7dfb      	ldrb	r3, [r7, #23]
 8032486:	e000      	b.n	803248a <store_xdir+0xae>
 8032488:	2302      	movs	r3, #2
}
 803248a:	4618      	mov	r0, r3
 803248c:	371c      	adds	r7, #28
 803248e:	46bd      	mov	sp, r7
 8032490:	bd90      	pop	{r4, r7, pc}

08032492 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8032492:	b590      	push	{r4, r7, lr}
 8032494:	b085      	sub	sp, #20
 8032496:	af00      	add	r7, sp, #0
 8032498:	6078      	str	r0, [r7, #4]
 803249a:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 803249c:	2240      	movs	r2, #64	; 0x40
 803249e:	2100      	movs	r1, #0
 80324a0:	6878      	ldr	r0, [r7, #4]
 80324a2:	f7fe f8ef 	bl	8030684 <mem_set>
	dirb[XDIR_Type] = 0x85;
 80324a6:	687b      	ldr	r3, [r7, #4]
 80324a8:	2285      	movs	r2, #133	; 0x85
 80324aa:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80324ac:	687b      	ldr	r3, [r7, #4]
 80324ae:	3320      	adds	r3, #32
 80324b0:	22c0      	movs	r2, #192	; 0xc0
 80324b2:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 80324b4:	2300      	movs	r3, #0
 80324b6:	72bb      	strb	r3, [r7, #10]
 80324b8:	2301      	movs	r3, #1
 80324ba:	72fb      	strb	r3, [r7, #11]
 80324bc:	2301      	movs	r3, #1
 80324be:	813b      	strh	r3, [r7, #8]
 80324c0:	2340      	movs	r3, #64	; 0x40
 80324c2:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80324c4:	68fb      	ldr	r3, [r7, #12]
 80324c6:	1c5a      	adds	r2, r3, #1
 80324c8:	60fa      	str	r2, [r7, #12]
 80324ca:	687a      	ldr	r2, [r7, #4]
 80324cc:	4413      	add	r3, r2
 80324ce:	22c1      	movs	r2, #193	; 0xc1
 80324d0:	701a      	strb	r2, [r3, #0]
 80324d2:	68fb      	ldr	r3, [r7, #12]
 80324d4:	1c5a      	adds	r2, r3, #1
 80324d6:	60fa      	str	r2, [r7, #12]
 80324d8:	687a      	ldr	r2, [r7, #4]
 80324da:	4413      	add	r3, r2
 80324dc:	2200      	movs	r2, #0
 80324de:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80324e0:	893b      	ldrh	r3, [r7, #8]
 80324e2:	2b00      	cmp	r3, #0
 80324e4:	d00b      	beq.n	80324fe <create_xdir+0x6c>
 80324e6:	7abb      	ldrb	r3, [r7, #10]
 80324e8:	005b      	lsls	r3, r3, #1
 80324ea:	683a      	ldr	r2, [r7, #0]
 80324ec:	4413      	add	r3, r2
 80324ee:	881b      	ldrh	r3, [r3, #0]
 80324f0:	813b      	strh	r3, [r7, #8]
 80324f2:	893b      	ldrh	r3, [r7, #8]
 80324f4:	2b00      	cmp	r3, #0
 80324f6:	d002      	beq.n	80324fe <create_xdir+0x6c>
 80324f8:	7abb      	ldrb	r3, [r7, #10]
 80324fa:	3301      	adds	r3, #1
 80324fc:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 80324fe:	687a      	ldr	r2, [r7, #4]
 8032500:	68fb      	ldr	r3, [r7, #12]
 8032502:	4413      	add	r3, r2
 8032504:	893a      	ldrh	r2, [r7, #8]
 8032506:	4611      	mov	r1, r2
 8032508:	4618      	mov	r0, r3
 803250a:	f7fd ffcb 	bl	80304a4 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 803250e:	68fb      	ldr	r3, [r7, #12]
 8032510:	3302      	adds	r3, #2
 8032512:	60fb      	str	r3, [r7, #12]
 8032514:	68fb      	ldr	r3, [r7, #12]
 8032516:	f003 031f 	and.w	r3, r3, #31
 803251a:	2b00      	cmp	r3, #0
 803251c:	d1e0      	bne.n	80324e0 <create_xdir+0x4e>
		nb++;
 803251e:	7afb      	ldrb	r3, [r7, #11]
 8032520:	3301      	adds	r3, #1
 8032522:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8032524:	7abb      	ldrb	r3, [r7, #10]
 8032526:	005b      	lsls	r3, r3, #1
 8032528:	683a      	ldr	r2, [r7, #0]
 803252a:	4413      	add	r3, r2
 803252c:	881b      	ldrh	r3, [r3, #0]
 803252e:	2b00      	cmp	r3, #0
 8032530:	d1c8      	bne.n	80324c4 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8032532:	687b      	ldr	r3, [r7, #4]
 8032534:	3323      	adds	r3, #35	; 0x23
 8032536:	7aba      	ldrb	r2, [r7, #10]
 8032538:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 803253a:	687b      	ldr	r3, [r7, #4]
 803253c:	3301      	adds	r3, #1
 803253e:	7afa      	ldrb	r2, [r7, #11]
 8032540:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8032542:	687b      	ldr	r3, [r7, #4]
 8032544:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8032548:	6838      	ldr	r0, [r7, #0]
 803254a:	f7ff fd9d 	bl	8032088 <xname_sum>
 803254e:	4603      	mov	r3, r0
 8032550:	4619      	mov	r1, r3
 8032552:	4620      	mov	r0, r4
 8032554:	f7fd ffa6 	bl	80304a4 <st_word>
}
 8032558:	bf00      	nop
 803255a:	3714      	adds	r7, #20
 803255c:	46bd      	mov	sp, r7
 803255e:	bd90      	pop	{r4, r7, pc}

08032560 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8032560:	b580      	push	{r7, lr}
 8032562:	b086      	sub	sp, #24
 8032564:	af00      	add	r7, sp, #0
 8032566:	6078      	str	r0, [r7, #4]
 8032568:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 803256a:	2304      	movs	r3, #4
 803256c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 803256e:	687b      	ldr	r3, [r7, #4]
 8032570:	681b      	ldr	r3, [r3, #0]
 8032572:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8032574:	23ff      	movs	r3, #255	; 0xff
 8032576:	757b      	strb	r3, [r7, #21]
 8032578:	23ff      	movs	r3, #255	; 0xff
 803257a:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 803257c:	e09f      	b.n	80326be <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 803257e:	687b      	ldr	r3, [r7, #4]
 8032580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032582:	4619      	mov	r1, r3
 8032584:	6938      	ldr	r0, [r7, #16]
 8032586:	f7fe fabb 	bl	8030b00 <move_window>
 803258a:	4603      	mov	r3, r0
 803258c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 803258e:	7dfb      	ldrb	r3, [r7, #23]
 8032590:	2b00      	cmp	r3, #0
 8032592:	f040 809a 	bne.w	80326ca <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8032596:	687b      	ldr	r3, [r7, #4]
 8032598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803259a:	781b      	ldrb	r3, [r3, #0]
 803259c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 803259e:	7dbb      	ldrb	r3, [r7, #22]
 80325a0:	2b00      	cmp	r3, #0
 80325a2:	d102      	bne.n	80325aa <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80325a4:	2304      	movs	r3, #4
 80325a6:	75fb      	strb	r3, [r7, #23]
 80325a8:	e096      	b.n	80326d8 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80325aa:	693b      	ldr	r3, [r7, #16]
 80325ac:	781b      	ldrb	r3, [r3, #0]
 80325ae:	2b04      	cmp	r3, #4
 80325b0:	d118      	bne.n	80325e4 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 80325b2:	7dbb      	ldrb	r3, [r7, #22]
 80325b4:	2b85      	cmp	r3, #133	; 0x85
 80325b6:	d179      	bne.n	80326ac <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80325b8:	687b      	ldr	r3, [r7, #4]
 80325ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80325bc:	687b      	ldr	r3, [r7, #4]
 80325be:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80325c0:	6878      	ldr	r0, [r7, #4]
 80325c2:	f7ff fe17 	bl	80321f4 <load_xdir>
 80325c6:	4603      	mov	r3, r0
 80325c8:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80325ca:	7dfb      	ldrb	r3, [r7, #23]
 80325cc:	2b00      	cmp	r3, #0
 80325ce:	d17e      	bne.n	80326ce <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80325d0:	693b      	ldr	r3, [r7, #16]
 80325d2:	695b      	ldr	r3, [r3, #20]
 80325d4:	3304      	adds	r3, #4
 80325d6:	781b      	ldrb	r3, [r3, #0]
 80325d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80325dc:	b2da      	uxtb	r2, r3
 80325de:	687b      	ldr	r3, [r7, #4]
 80325e0:	719a      	strb	r2, [r3, #6]
					}
					break;
 80325e2:	e074      	b.n	80326ce <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80325e4:	687b      	ldr	r3, [r7, #4]
 80325e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80325e8:	330b      	adds	r3, #11
 80325ea:	781b      	ldrb	r3, [r3, #0]
 80325ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80325f0:	73fb      	strb	r3, [r7, #15]
 80325f2:	687b      	ldr	r3, [r7, #4]
 80325f4:	7bfa      	ldrb	r2, [r7, #15]
 80325f6:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80325f8:	7dbb      	ldrb	r3, [r7, #22]
 80325fa:	2be5      	cmp	r3, #229	; 0xe5
 80325fc:	d00e      	beq.n	803261c <dir_read+0xbc>
 80325fe:	7dbb      	ldrb	r3, [r7, #22]
 8032600:	2b2e      	cmp	r3, #46	; 0x2e
 8032602:	d00b      	beq.n	803261c <dir_read+0xbc>
 8032604:	7bfb      	ldrb	r3, [r7, #15]
 8032606:	f023 0320 	bic.w	r3, r3, #32
 803260a:	2b08      	cmp	r3, #8
 803260c:	bf0c      	ite	eq
 803260e:	2301      	moveq	r3, #1
 8032610:	2300      	movne	r3, #0
 8032612:	b2db      	uxtb	r3, r3
 8032614:	461a      	mov	r2, r3
 8032616:	683b      	ldr	r3, [r7, #0]
 8032618:	4293      	cmp	r3, r2
 803261a:	d002      	beq.n	8032622 <dir_read+0xc2>
				ord = 0xFF;
 803261c:	23ff      	movs	r3, #255	; 0xff
 803261e:	757b      	strb	r3, [r7, #21]
 8032620:	e044      	b.n	80326ac <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8032622:	7bfb      	ldrb	r3, [r7, #15]
 8032624:	2b0f      	cmp	r3, #15
 8032626:	d12f      	bne.n	8032688 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8032628:	7dbb      	ldrb	r3, [r7, #22]
 803262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803262e:	2b00      	cmp	r3, #0
 8032630:	d00d      	beq.n	803264e <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8032632:	687b      	ldr	r3, [r7, #4]
 8032634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032636:	7b5b      	ldrb	r3, [r3, #13]
 8032638:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 803263a:	7dbb      	ldrb	r3, [r7, #22]
 803263c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8032640:	75bb      	strb	r3, [r7, #22]
 8032642:	7dbb      	ldrb	r3, [r7, #22]
 8032644:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8032646:	687b      	ldr	r3, [r7, #4]
 8032648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803264a:	687b      	ldr	r3, [r7, #4]
 803264c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 803264e:	7dba      	ldrb	r2, [r7, #22]
 8032650:	7d7b      	ldrb	r3, [r7, #21]
 8032652:	429a      	cmp	r2, r3
 8032654:	d115      	bne.n	8032682 <dir_read+0x122>
 8032656:	687b      	ldr	r3, [r7, #4]
 8032658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803265a:	330d      	adds	r3, #13
 803265c:	781b      	ldrb	r3, [r3, #0]
 803265e:	7d3a      	ldrb	r2, [r7, #20]
 8032660:	429a      	cmp	r2, r3
 8032662:	d10e      	bne.n	8032682 <dir_read+0x122>
 8032664:	693b      	ldr	r3, [r7, #16]
 8032666:	691a      	ldr	r2, [r3, #16]
 8032668:	687b      	ldr	r3, [r7, #4]
 803266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803266c:	4619      	mov	r1, r3
 803266e:	4610      	mov	r0, r2
 8032670:	f7ff fb5c 	bl	8031d2c <pick_lfn>
 8032674:	4603      	mov	r3, r0
 8032676:	2b00      	cmp	r3, #0
 8032678:	d003      	beq.n	8032682 <dir_read+0x122>
 803267a:	7d7b      	ldrb	r3, [r7, #21]
 803267c:	3b01      	subs	r3, #1
 803267e:	b2db      	uxtb	r3, r3
 8032680:	e000      	b.n	8032684 <dir_read+0x124>
 8032682:	23ff      	movs	r3, #255	; 0xff
 8032684:	757b      	strb	r3, [r7, #21]
 8032686:	e011      	b.n	80326ac <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8032688:	7d7b      	ldrb	r3, [r7, #21]
 803268a:	2b00      	cmp	r3, #0
 803268c:	d109      	bne.n	80326a2 <dir_read+0x142>
 803268e:	687b      	ldr	r3, [r7, #4]
 8032690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032692:	4618      	mov	r0, r3
 8032694:	f7ff fca4 	bl	8031fe0 <sum_sfn>
 8032698:	4603      	mov	r3, r0
 803269a:	461a      	mov	r2, r3
 803269c:	7d3b      	ldrb	r3, [r7, #20]
 803269e:	4293      	cmp	r3, r2
 80326a0:	d017      	beq.n	80326d2 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80326a2:	687b      	ldr	r3, [r7, #4]
 80326a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80326a8:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 80326aa:	e012      	b.n	80326d2 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80326ac:	2100      	movs	r1, #0
 80326ae:	6878      	ldr	r0, [r7, #4]
 80326b0:	f7ff f94b 	bl	803194a <dir_next>
 80326b4:	4603      	mov	r3, r0
 80326b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80326b8:	7dfb      	ldrb	r3, [r7, #23]
 80326ba:	2b00      	cmp	r3, #0
 80326bc:	d10b      	bne.n	80326d6 <dir_read+0x176>
	while (dp->sect) {
 80326be:	687b      	ldr	r3, [r7, #4]
 80326c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80326c2:	2b00      	cmp	r3, #0
 80326c4:	f47f af5b 	bne.w	803257e <dir_read+0x1e>
 80326c8:	e006      	b.n	80326d8 <dir_read+0x178>
		if (res != FR_OK) break;
 80326ca:	bf00      	nop
 80326cc:	e004      	b.n	80326d8 <dir_read+0x178>
					break;
 80326ce:	bf00      	nop
 80326d0:	e002      	b.n	80326d8 <dir_read+0x178>
					break;
 80326d2:	bf00      	nop
 80326d4:	e000      	b.n	80326d8 <dir_read+0x178>
		if (res != FR_OK) break;
 80326d6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80326d8:	7dfb      	ldrb	r3, [r7, #23]
 80326da:	2b00      	cmp	r3, #0
 80326dc:	d002      	beq.n	80326e4 <dir_read+0x184>
 80326de:	687b      	ldr	r3, [r7, #4]
 80326e0:	2200      	movs	r2, #0
 80326e2:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 80326e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80326e6:	4618      	mov	r0, r3
 80326e8:	3718      	adds	r7, #24
 80326ea:	46bd      	mov	sp, r7
 80326ec:	bd80      	pop	{r7, pc}

080326ee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80326ee:	b590      	push	{r4, r7, lr}
 80326f0:	b089      	sub	sp, #36	; 0x24
 80326f2:	af00      	add	r7, sp, #0
 80326f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80326f6:	687b      	ldr	r3, [r7, #4]
 80326f8:	681b      	ldr	r3, [r3, #0]
 80326fa:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80326fc:	2100      	movs	r1, #0
 80326fe:	6878      	ldr	r0, [r7, #4]
 8032700:	f7ff f88f 	bl	8031822 <dir_sdi>
 8032704:	4603      	mov	r3, r0
 8032706:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8032708:	7ffb      	ldrb	r3, [r7, #31]
 803270a:	2b00      	cmp	r3, #0
 803270c:	d001      	beq.n	8032712 <dir_find+0x24>
 803270e:	7ffb      	ldrb	r3, [r7, #31]
 8032710:	e112      	b.n	8032938 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8032712:	68fb      	ldr	r3, [r7, #12]
 8032714:	781b      	ldrb	r3, [r3, #0]
 8032716:	2b04      	cmp	r3, #4
 8032718:	d164      	bne.n	80327e4 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 803271a:	68fb      	ldr	r3, [r7, #12]
 803271c:	691b      	ldr	r3, [r3, #16]
 803271e:	4618      	mov	r0, r3
 8032720:	f7ff fcb2 	bl	8032088 <xname_sum>
 8032724:	4603      	mov	r3, r0
 8032726:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8032728:	e04f      	b.n	80327ca <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 803272a:	68fb      	ldr	r3, [r7, #12]
 803272c:	695b      	ldr	r3, [r3, #20]
 803272e:	3324      	adds	r3, #36	; 0x24
 8032730:	4618      	mov	r0, r3
 8032732:	f7fd fda1 	bl	8030278 <ld_word>
 8032736:	4603      	mov	r3, r0
 8032738:	461a      	mov	r2, r3
 803273a:	893b      	ldrh	r3, [r7, #8]
 803273c:	4293      	cmp	r3, r2
 803273e:	d000      	beq.n	8032742 <dir_find+0x54>
 8032740:	e043      	b.n	80327ca <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8032742:	68fb      	ldr	r3, [r7, #12]
 8032744:	695b      	ldr	r3, [r3, #20]
 8032746:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 803274a:	76fb      	strb	r3, [r7, #27]
 803274c:	2340      	movs	r3, #64	; 0x40
 803274e:	617b      	str	r3, [r7, #20]
 8032750:	2300      	movs	r3, #0
 8032752:	613b      	str	r3, [r7, #16]
 8032754:	e029      	b.n	80327aa <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8032756:	697b      	ldr	r3, [r7, #20]
 8032758:	f003 031f 	and.w	r3, r3, #31
 803275c:	2b00      	cmp	r3, #0
 803275e:	d102      	bne.n	8032766 <dir_find+0x78>
 8032760:	697b      	ldr	r3, [r7, #20]
 8032762:	3302      	adds	r3, #2
 8032764:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8032766:	68fb      	ldr	r3, [r7, #12]
 8032768:	695a      	ldr	r2, [r3, #20]
 803276a:	697b      	ldr	r3, [r7, #20]
 803276c:	4413      	add	r3, r2
 803276e:	4618      	mov	r0, r3
 8032770:	f7fd fd82 	bl	8030278 <ld_word>
 8032774:	4603      	mov	r3, r0
 8032776:	4618      	mov	r0, r3
 8032778:	f003 fa6e 	bl	8035c58 <ff_wtoupper>
 803277c:	4603      	mov	r3, r0
 803277e:	461c      	mov	r4, r3
 8032780:	68fb      	ldr	r3, [r7, #12]
 8032782:	691a      	ldr	r2, [r3, #16]
 8032784:	693b      	ldr	r3, [r7, #16]
 8032786:	005b      	lsls	r3, r3, #1
 8032788:	4413      	add	r3, r2
 803278a:	881b      	ldrh	r3, [r3, #0]
 803278c:	4618      	mov	r0, r3
 803278e:	f003 fa63 	bl	8035c58 <ff_wtoupper>
 8032792:	4603      	mov	r3, r0
 8032794:	429c      	cmp	r4, r3
 8032796:	d10c      	bne.n	80327b2 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8032798:	7efb      	ldrb	r3, [r7, #27]
 803279a:	3b01      	subs	r3, #1
 803279c:	76fb      	strb	r3, [r7, #27]
 803279e:	697b      	ldr	r3, [r7, #20]
 80327a0:	3302      	adds	r3, #2
 80327a2:	617b      	str	r3, [r7, #20]
 80327a4:	693b      	ldr	r3, [r7, #16]
 80327a6:	3301      	adds	r3, #1
 80327a8:	613b      	str	r3, [r7, #16]
 80327aa:	7efb      	ldrb	r3, [r7, #27]
 80327ac:	2b00      	cmp	r3, #0
 80327ae:	d1d2      	bne.n	8032756 <dir_find+0x68>
 80327b0:	e000      	b.n	80327b4 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80327b2:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80327b4:	7efb      	ldrb	r3, [r7, #27]
 80327b6:	2b00      	cmp	r3, #0
 80327b8:	d107      	bne.n	80327ca <dir_find+0xdc>
 80327ba:	68fb      	ldr	r3, [r7, #12]
 80327bc:	691a      	ldr	r2, [r3, #16]
 80327be:	693b      	ldr	r3, [r7, #16]
 80327c0:	005b      	lsls	r3, r3, #1
 80327c2:	4413      	add	r3, r2
 80327c4:	881b      	ldrh	r3, [r3, #0]
 80327c6:	2b00      	cmp	r3, #0
 80327c8:	d009      	beq.n	80327de <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80327ca:	2100      	movs	r1, #0
 80327cc:	6878      	ldr	r0, [r7, #4]
 80327ce:	f7ff fec7 	bl	8032560 <dir_read>
 80327d2:	4603      	mov	r3, r0
 80327d4:	77fb      	strb	r3, [r7, #31]
 80327d6:	7ffb      	ldrb	r3, [r7, #31]
 80327d8:	2b00      	cmp	r3, #0
 80327da:	d0a6      	beq.n	803272a <dir_find+0x3c>
 80327dc:	e000      	b.n	80327e0 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80327de:	bf00      	nop
		}
		return res;
 80327e0:	7ffb      	ldrb	r3, [r7, #31]
 80327e2:	e0a9      	b.n	8032938 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80327e4:	23ff      	movs	r3, #255	; 0xff
 80327e6:	773b      	strb	r3, [r7, #28]
 80327e8:	7f3b      	ldrb	r3, [r7, #28]
 80327ea:	777b      	strb	r3, [r7, #29]
 80327ec:	687b      	ldr	r3, [r7, #4]
 80327ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80327f2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80327f4:	687b      	ldr	r3, [r7, #4]
 80327f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80327f8:	4619      	mov	r1, r3
 80327fa:	68f8      	ldr	r0, [r7, #12]
 80327fc:	f7fe f980 	bl	8030b00 <move_window>
 8032800:	4603      	mov	r3, r0
 8032802:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8032804:	7ffb      	ldrb	r3, [r7, #31]
 8032806:	2b00      	cmp	r3, #0
 8032808:	f040 8090 	bne.w	803292c <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 803280c:	687b      	ldr	r3, [r7, #4]
 803280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032810:	781b      	ldrb	r3, [r3, #0]
 8032812:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8032814:	7fbb      	ldrb	r3, [r7, #30]
 8032816:	2b00      	cmp	r3, #0
 8032818:	d102      	bne.n	8032820 <dir_find+0x132>
 803281a:	2304      	movs	r3, #4
 803281c:	77fb      	strb	r3, [r7, #31]
 803281e:	e08a      	b.n	8032936 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8032820:	687b      	ldr	r3, [r7, #4]
 8032822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032824:	330b      	adds	r3, #11
 8032826:	781b      	ldrb	r3, [r3, #0]
 8032828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803282c:	72fb      	strb	r3, [r7, #11]
 803282e:	687b      	ldr	r3, [r7, #4]
 8032830:	7afa      	ldrb	r2, [r7, #11]
 8032832:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8032834:	7fbb      	ldrb	r3, [r7, #30]
 8032836:	2be5      	cmp	r3, #229	; 0xe5
 8032838:	d007      	beq.n	803284a <dir_find+0x15c>
 803283a:	7afb      	ldrb	r3, [r7, #11]
 803283c:	f003 0308 	and.w	r3, r3, #8
 8032840:	2b00      	cmp	r3, #0
 8032842:	d009      	beq.n	8032858 <dir_find+0x16a>
 8032844:	7afb      	ldrb	r3, [r7, #11]
 8032846:	2b0f      	cmp	r3, #15
 8032848:	d006      	beq.n	8032858 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 803284a:	23ff      	movs	r3, #255	; 0xff
 803284c:	777b      	strb	r3, [r7, #29]
 803284e:	687b      	ldr	r3, [r7, #4]
 8032850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8032854:	64da      	str	r2, [r3, #76]	; 0x4c
 8032856:	e05e      	b.n	8032916 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8032858:	7afb      	ldrb	r3, [r7, #11]
 803285a:	2b0f      	cmp	r3, #15
 803285c:	d136      	bne.n	80328cc <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 803285e:	687b      	ldr	r3, [r7, #4]
 8032860:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8032864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8032868:	2b00      	cmp	r3, #0
 803286a:	d154      	bne.n	8032916 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 803286c:	7fbb      	ldrb	r3, [r7, #30]
 803286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8032872:	2b00      	cmp	r3, #0
 8032874:	d00d      	beq.n	8032892 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8032876:	687b      	ldr	r3, [r7, #4]
 8032878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803287a:	7b5b      	ldrb	r3, [r3, #13]
 803287c:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 803287e:	7fbb      	ldrb	r3, [r7, #30]
 8032880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8032884:	77bb      	strb	r3, [r7, #30]
 8032886:	7fbb      	ldrb	r3, [r7, #30]
 8032888:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 803288a:	687b      	ldr	r3, [r7, #4]
 803288c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803288e:	687b      	ldr	r3, [r7, #4]
 8032890:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8032892:	7fba      	ldrb	r2, [r7, #30]
 8032894:	7f7b      	ldrb	r3, [r7, #29]
 8032896:	429a      	cmp	r2, r3
 8032898:	d115      	bne.n	80328c6 <dir_find+0x1d8>
 803289a:	687b      	ldr	r3, [r7, #4]
 803289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803289e:	330d      	adds	r3, #13
 80328a0:	781b      	ldrb	r3, [r3, #0]
 80328a2:	7f3a      	ldrb	r2, [r7, #28]
 80328a4:	429a      	cmp	r2, r3
 80328a6:	d10e      	bne.n	80328c6 <dir_find+0x1d8>
 80328a8:	68fb      	ldr	r3, [r7, #12]
 80328aa:	691a      	ldr	r2, [r3, #16]
 80328ac:	687b      	ldr	r3, [r7, #4]
 80328ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80328b0:	4619      	mov	r1, r3
 80328b2:	4610      	mov	r0, r2
 80328b4:	f7ff f9ca 	bl	8031c4c <cmp_lfn>
 80328b8:	4603      	mov	r3, r0
 80328ba:	2b00      	cmp	r3, #0
 80328bc:	d003      	beq.n	80328c6 <dir_find+0x1d8>
 80328be:	7f7b      	ldrb	r3, [r7, #29]
 80328c0:	3b01      	subs	r3, #1
 80328c2:	b2db      	uxtb	r3, r3
 80328c4:	e000      	b.n	80328c8 <dir_find+0x1da>
 80328c6:	23ff      	movs	r3, #255	; 0xff
 80328c8:	777b      	strb	r3, [r7, #29]
 80328ca:	e024      	b.n	8032916 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80328cc:	7f7b      	ldrb	r3, [r7, #29]
 80328ce:	2b00      	cmp	r3, #0
 80328d0:	d109      	bne.n	80328e6 <dir_find+0x1f8>
 80328d2:	687b      	ldr	r3, [r7, #4]
 80328d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80328d6:	4618      	mov	r0, r3
 80328d8:	f7ff fb82 	bl	8031fe0 <sum_sfn>
 80328dc:	4603      	mov	r3, r0
 80328de:	461a      	mov	r2, r3
 80328e0:	7f3b      	ldrb	r3, [r7, #28]
 80328e2:	4293      	cmp	r3, r2
 80328e4:	d024      	beq.n	8032930 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80328e6:	687b      	ldr	r3, [r7, #4]
 80328e8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80328ec:	f003 0301 	and.w	r3, r3, #1
 80328f0:	2b00      	cmp	r3, #0
 80328f2:	d10a      	bne.n	803290a <dir_find+0x21c>
 80328f4:	687b      	ldr	r3, [r7, #4]
 80328f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80328f8:	687b      	ldr	r3, [r7, #4]
 80328fa:	3340      	adds	r3, #64	; 0x40
 80328fc:	220b      	movs	r2, #11
 80328fe:	4619      	mov	r1, r3
 8032900:	f7fd fedb 	bl	80306ba <mem_cmp>
 8032904:	4603      	mov	r3, r0
 8032906:	2b00      	cmp	r3, #0
 8032908:	d014      	beq.n	8032934 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 803290a:	23ff      	movs	r3, #255	; 0xff
 803290c:	777b      	strb	r3, [r7, #29]
 803290e:	687b      	ldr	r3, [r7, #4]
 8032910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8032914:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8032916:	2100      	movs	r1, #0
 8032918:	6878      	ldr	r0, [r7, #4]
 803291a:	f7ff f816 	bl	803194a <dir_next>
 803291e:	4603      	mov	r3, r0
 8032920:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8032922:	7ffb      	ldrb	r3, [r7, #31]
 8032924:	2b00      	cmp	r3, #0
 8032926:	f43f af65 	beq.w	80327f4 <dir_find+0x106>
 803292a:	e004      	b.n	8032936 <dir_find+0x248>
		if (res != FR_OK) break;
 803292c:	bf00      	nop
 803292e:	e002      	b.n	8032936 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8032930:	bf00      	nop
 8032932:	e000      	b.n	8032936 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8032934:	bf00      	nop

	return res;
 8032936:	7ffb      	ldrb	r3, [r7, #31]
}
 8032938:	4618      	mov	r0, r3
 803293a:	3724      	adds	r7, #36	; 0x24
 803293c:	46bd      	mov	sp, r7
 803293e:	bd90      	pop	{r4, r7, pc}

08032940 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8032940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8032944:	b0a0      	sub	sp, #128	; 0x80
 8032946:	af00      	add	r7, sp, #0
 8032948:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 803294a:	687b      	ldr	r3, [r7, #4]
 803294c:	681b      	ldr	r3, [r3, #0]
 803294e:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8032950:	687b      	ldr	r3, [r7, #4]
 8032952:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8032956:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 803295a:	2b00      	cmp	r3, #0
 803295c:	d001      	beq.n	8032962 <dir_register+0x22>
 803295e:	2306      	movs	r3, #6
 8032960:	e192      	b.n	8032c88 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8032962:	2300      	movs	r3, #0
 8032964:	677b      	str	r3, [r7, #116]	; 0x74
 8032966:	e002      	b.n	803296e <dir_register+0x2e>
 8032968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803296a:	3301      	adds	r3, #1
 803296c:	677b      	str	r3, [r7, #116]	; 0x74
 803296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032970:	691a      	ldr	r2, [r3, #16]
 8032972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8032974:	005b      	lsls	r3, r3, #1
 8032976:	4413      	add	r3, r2
 8032978:	881b      	ldrh	r3, [r3, #0]
 803297a:	2b00      	cmp	r3, #0
 803297c:	d1f4      	bne.n	8032968 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 803297e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032980:	781b      	ldrb	r3, [r3, #0]
 8032982:	2b04      	cmp	r3, #4
 8032984:	f040 80a3 	bne.w	8032ace <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8032988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803298a:	330e      	adds	r3, #14
 803298c:	4aa4      	ldr	r2, [pc, #656]	; (8032c20 <dir_register+0x2e0>)
 803298e:	fba2 2303 	umull	r2, r3, r2, r3
 8032992:	08db      	lsrs	r3, r3, #3
 8032994:	3302      	adds	r3, #2
 8032996:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8032998:	6f39      	ldr	r1, [r7, #112]	; 0x70
 803299a:	6878      	ldr	r0, [r7, #4]
 803299c:	f7ff f8bb 	bl	8031b16 <dir_alloc>
 80329a0:	4603      	mov	r3, r0
 80329a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 80329a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80329aa:	2b00      	cmp	r3, #0
 80329ac:	d002      	beq.n	80329b4 <dir_register+0x74>
 80329ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80329b2:	e169      	b.n	8032c88 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 80329b4:	687b      	ldr	r3, [r7, #4]
 80329b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80329b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80329ba:	3b01      	subs	r3, #1
 80329bc:	015b      	lsls	r3, r3, #5
 80329be:	1ad2      	subs	r2, r2, r3
 80329c0:	687b      	ldr	r3, [r7, #4]
 80329c2:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 80329c4:	687b      	ldr	r3, [r7, #4]
 80329c6:	689b      	ldr	r3, [r3, #8]
 80329c8:	2b00      	cmp	r3, #0
 80329ca:	d076      	beq.n	8032aba <dir_register+0x17a>
 80329cc:	687b      	ldr	r3, [r7, #4]
 80329ce:	79db      	ldrb	r3, [r3, #7]
 80329d0:	f003 0304 	and.w	r3, r3, #4
 80329d4:	2b00      	cmp	r3, #0
 80329d6:	d070      	beq.n	8032aba <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 80329d8:	687b      	ldr	r3, [r7, #4]
 80329da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80329de:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80329e0:	8949      	ldrh	r1, [r1, #10]
 80329e2:	4608      	mov	r0, r1
 80329e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80329e6:	8989      	ldrh	r1, [r1, #12]
 80329e8:	fb00 f101 	mul.w	r1, r0, r1
 80329ec:	2000      	movs	r0, #0
 80329ee:	460c      	mov	r4, r1
 80329f0:	4605      	mov	r5, r0
 80329f2:	eb12 0804 	adds.w	r8, r2, r4
 80329f6:	eb43 0905 	adc.w	r9, r3, r5
 80329fa:	687b      	ldr	r3, [r7, #4]
 80329fc:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8032a00:	687b      	ldr	r3, [r7, #4]
 8032a02:	4618      	mov	r0, r3
 8032a04:	f7fe fcac 	bl	8031360 <fill_first_frag>
 8032a08:	4603      	mov	r3, r0
 8032a0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8032a0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032a12:	2b00      	cmp	r3, #0
 8032a14:	d002      	beq.n	8032a1c <dir_register+0xdc>
 8032a16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032a1a:	e135      	b.n	8032c88 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8032a1c:	6878      	ldr	r0, [r7, #4]
 8032a1e:	687b      	ldr	r3, [r7, #4]
 8032a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8032a26:	4619      	mov	r1, r3
 8032a28:	f7fe fcc9 	bl	80313be <fill_last_frag>
 8032a2c:	4603      	mov	r3, r0
 8032a2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8032a32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032a36:	2b00      	cmp	r3, #0
 8032a38:	d002      	beq.n	8032a40 <dir_register+0x100>
 8032a3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032a3e:	e123      	b.n	8032c88 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8032a40:	687a      	ldr	r2, [r7, #4]
 8032a42:	f107 0308 	add.w	r3, r7, #8
 8032a46:	4611      	mov	r1, r2
 8032a48:	4618      	mov	r0, r3
 8032a4a:	f7ff fc91 	bl	8032370 <load_obj_dir>
 8032a4e:	4603      	mov	r3, r0
 8032a50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8032a54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032a58:	2b00      	cmp	r3, #0
 8032a5a:	d002      	beq.n	8032a62 <dir_register+0x122>
 8032a5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032a60:	e112      	b.n	8032c88 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8032a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032a64:	695b      	ldr	r3, [r3, #20]
 8032a66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8032a6a:	687b      	ldr	r3, [r7, #4]
 8032a6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8032a70:	4608      	mov	r0, r1
 8032a72:	f7fd fd5e 	bl	8030532 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8032a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032a78:	695b      	ldr	r3, [r3, #20]
 8032a7a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8032a7e:	687b      	ldr	r3, [r7, #4]
 8032a80:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8032a84:	4608      	mov	r0, r1
 8032a86:	f7fd fd54 	bl	8030532 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8032a8a:	687b      	ldr	r3, [r7, #4]
 8032a8c:	79da      	ldrb	r2, [r3, #7]
 8032a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032a90:	695b      	ldr	r3, [r3, #20]
 8032a92:	3321      	adds	r3, #33	; 0x21
 8032a94:	f042 0201 	orr.w	r2, r2, #1
 8032a98:	b2d2      	uxtb	r2, r2
 8032a9a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8032a9c:	f107 0308 	add.w	r3, r7, #8
 8032aa0:	4618      	mov	r0, r3
 8032aa2:	f7ff fc9b 	bl	80323dc <store_xdir>
 8032aa6:	4603      	mov	r3, r0
 8032aa8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8032aac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032ab0:	2b00      	cmp	r3, #0
 8032ab2:	d002      	beq.n	8032aba <dir_register+0x17a>
 8032ab4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032ab8:	e0e6      	b.n	8032c88 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8032aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032abc:	695a      	ldr	r2, [r3, #20]
 8032abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032ac0:	691b      	ldr	r3, [r3, #16]
 8032ac2:	4619      	mov	r1, r3
 8032ac4:	4610      	mov	r0, r2
 8032ac6:	f7ff fce4 	bl	8032492 <create_xdir>
		return FR_OK;
 8032aca:	2300      	movs	r3, #0
 8032acc:	e0dc      	b.n	8032c88 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8032ace:	687b      	ldr	r3, [r7, #4]
 8032ad0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8032ad4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8032ad8:	220c      	movs	r2, #12
 8032ada:	4618      	mov	r0, r3
 8032adc:	f7fd fdb1 	bl	8030642 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8032ae0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8032ae4:	f003 0301 	and.w	r3, r3, #1
 8032ae8:	2b00      	cmp	r3, #0
 8032aea:	d033      	beq.n	8032b54 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8032aec:	687b      	ldr	r3, [r7, #4]
 8032aee:	2240      	movs	r2, #64	; 0x40
 8032af0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8032af4:	2301      	movs	r3, #1
 8032af6:	67bb      	str	r3, [r7, #120]	; 0x78
 8032af8:	e016      	b.n	8032b28 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8032afa:	687b      	ldr	r3, [r7, #4]
 8032afc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8032b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032b02:	691a      	ldr	r2, [r3, #16]
 8032b04:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8032b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8032b0a:	f7ff f9db 	bl	8031ec4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8032b0e:	6878      	ldr	r0, [r7, #4]
 8032b10:	f7ff fded 	bl	80326ee <dir_find>
 8032b14:	4603      	mov	r3, r0
 8032b16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8032b1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032b1e:	2b00      	cmp	r3, #0
 8032b20:	d106      	bne.n	8032b30 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 8032b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8032b24:	3301      	adds	r3, #1
 8032b26:	67bb      	str	r3, [r7, #120]	; 0x78
 8032b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8032b2a:	2b63      	cmp	r3, #99	; 0x63
 8032b2c:	d9e5      	bls.n	8032afa <dir_register+0x1ba>
 8032b2e:	e000      	b.n	8032b32 <dir_register+0x1f2>
			if (res != FR_OK) break;
 8032b30:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8032b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8032b34:	2b64      	cmp	r3, #100	; 0x64
 8032b36:	d101      	bne.n	8032b3c <dir_register+0x1fc>
 8032b38:	2307      	movs	r3, #7
 8032b3a:	e0a5      	b.n	8032c88 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8032b3c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032b40:	2b04      	cmp	r3, #4
 8032b42:	d002      	beq.n	8032b4a <dir_register+0x20a>
 8032b44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032b48:	e09e      	b.n	8032c88 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8032b4a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8032b4e:	687b      	ldr	r3, [r7, #4]
 8032b50:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8032b54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8032b58:	f003 0302 	and.w	r3, r3, #2
 8032b5c:	2b00      	cmp	r3, #0
 8032b5e:	d007      	beq.n	8032b70 <dir_register+0x230>
 8032b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8032b62:	330c      	adds	r3, #12
 8032b64:	4a2f      	ldr	r2, [pc, #188]	; (8032c24 <dir_register+0x2e4>)
 8032b66:	fba2 2303 	umull	r2, r3, r2, r3
 8032b6a:	089b      	lsrs	r3, r3, #2
 8032b6c:	3301      	adds	r3, #1
 8032b6e:	e000      	b.n	8032b72 <dir_register+0x232>
 8032b70:	2301      	movs	r3, #1
 8032b72:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8032b74:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8032b76:	6878      	ldr	r0, [r7, #4]
 8032b78:	f7fe ffcd 	bl	8031b16 <dir_alloc>
 8032b7c:	4603      	mov	r3, r0
 8032b7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8032b82:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032b86:	2b00      	cmp	r3, #0
 8032b88:	d14f      	bne.n	8032c2a <dir_register+0x2ea>
 8032b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8032b8c:	3b01      	subs	r3, #1
 8032b8e:	673b      	str	r3, [r7, #112]	; 0x70
 8032b90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8032b92:	2b00      	cmp	r3, #0
 8032b94:	d049      	beq.n	8032c2a <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8032b96:	687b      	ldr	r3, [r7, #4]
 8032b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8032b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8032b9c:	015b      	lsls	r3, r3, #5
 8032b9e:	1ad3      	subs	r3, r2, r3
 8032ba0:	4619      	mov	r1, r3
 8032ba2:	6878      	ldr	r0, [r7, #4]
 8032ba4:	f7fe fe3d 	bl	8031822 <dir_sdi>
 8032ba8:	4603      	mov	r3, r0
 8032baa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8032bae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032bb2:	2b00      	cmp	r3, #0
 8032bb4:	d139      	bne.n	8032c2a <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8032bb6:	687b      	ldr	r3, [r7, #4]
 8032bb8:	3340      	adds	r3, #64	; 0x40
 8032bba:	4618      	mov	r0, r3
 8032bbc:	f7ff fa10 	bl	8031fe0 <sum_sfn>
 8032bc0:	4603      	mov	r3, r0
 8032bc2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8032bc6:	687b      	ldr	r3, [r7, #4]
 8032bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032bca:	4619      	mov	r1, r3
 8032bcc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8032bce:	f7fd ff97 	bl	8030b00 <move_window>
 8032bd2:	4603      	mov	r3, r0
 8032bd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8032bd8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032bdc:	2b00      	cmp	r3, #0
 8032bde:	d123      	bne.n	8032c28 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8032be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032be2:	6918      	ldr	r0, [r3, #16]
 8032be4:	687b      	ldr	r3, [r7, #4]
 8032be6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8032be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8032bea:	b2da      	uxtb	r2, r3
 8032bec:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8032bf0:	f7ff f900 	bl	8031df4 <put_lfn>
				fs->wflag = 1;
 8032bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032bf6:	2201      	movs	r2, #1
 8032bf8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8032bfa:	2100      	movs	r1, #0
 8032bfc:	6878      	ldr	r0, [r7, #4]
 8032bfe:	f7fe fea4 	bl	803194a <dir_next>
 8032c02:	4603      	mov	r3, r0
 8032c04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8032c08:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032c0c:	2b00      	cmp	r3, #0
 8032c0e:	d10c      	bne.n	8032c2a <dir_register+0x2ea>
 8032c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8032c12:	3b01      	subs	r3, #1
 8032c14:	673b      	str	r3, [r7, #112]	; 0x70
 8032c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8032c18:	2b00      	cmp	r3, #0
 8032c1a:	d1d4      	bne.n	8032bc6 <dir_register+0x286>
 8032c1c:	e005      	b.n	8032c2a <dir_register+0x2ea>
 8032c1e:	bf00      	nop
 8032c20:	88888889 	.word	0x88888889
 8032c24:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8032c28:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8032c2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032c2e:	2b00      	cmp	r3, #0
 8032c30:	d128      	bne.n	8032c84 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 8032c32:	687b      	ldr	r3, [r7, #4]
 8032c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032c36:	4619      	mov	r1, r3
 8032c38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8032c3a:	f7fd ff61 	bl	8030b00 <move_window>
 8032c3e:	4603      	mov	r3, r0
 8032c40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8032c44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032c48:	2b00      	cmp	r3, #0
 8032c4a:	d11b      	bne.n	8032c84 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8032c4c:	687b      	ldr	r3, [r7, #4]
 8032c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032c50:	2220      	movs	r2, #32
 8032c52:	2100      	movs	r1, #0
 8032c54:	4618      	mov	r0, r3
 8032c56:	f7fd fd15 	bl	8030684 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8032c5a:	687b      	ldr	r3, [r7, #4]
 8032c5c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8032c5e:	687b      	ldr	r3, [r7, #4]
 8032c60:	3340      	adds	r3, #64	; 0x40
 8032c62:	220b      	movs	r2, #11
 8032c64:	4619      	mov	r1, r3
 8032c66:	f7fd fcec 	bl	8030642 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8032c6a:	687b      	ldr	r3, [r7, #4]
 8032c6c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8032c70:	687b      	ldr	r3, [r7, #4]
 8032c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032c74:	330c      	adds	r3, #12
 8032c76:	f002 0218 	and.w	r2, r2, #24
 8032c7a:	b2d2      	uxtb	r2, r2
 8032c7c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8032c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032c80:	2201      	movs	r2, #1
 8032c82:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8032c84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8032c88:	4618      	mov	r0, r3
 8032c8a:	3780      	adds	r7, #128	; 0x80
 8032c8c:	46bd      	mov	sp, r7
 8032c8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8032c92:	bf00      	nop

08032c94 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8032c94:	b580      	push	{r7, lr}
 8032c96:	b086      	sub	sp, #24
 8032c98:	af00      	add	r7, sp, #0
 8032c9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8032c9c:	687b      	ldr	r3, [r7, #4]
 8032c9e:	681b      	ldr	r3, [r3, #0]
 8032ca0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8032ca2:	687b      	ldr	r3, [r7, #4]
 8032ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032ca6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8032ca8:	687b      	ldr	r3, [r7, #4]
 8032caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8032cb0:	d007      	beq.n	8032cc2 <dir_remove+0x2e>
 8032cb2:	687b      	ldr	r3, [r7, #4]
 8032cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032cb6:	4619      	mov	r1, r3
 8032cb8:	6878      	ldr	r0, [r7, #4]
 8032cba:	f7fe fdb2 	bl	8031822 <dir_sdi>
 8032cbe:	4603      	mov	r3, r0
 8032cc0:	e000      	b.n	8032cc4 <dir_remove+0x30>
 8032cc2:	2300      	movs	r3, #0
 8032cc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8032cc6:	7dfb      	ldrb	r3, [r7, #23]
 8032cc8:	2b00      	cmp	r3, #0
 8032cca:	d136      	bne.n	8032d3a <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 8032ccc:	687b      	ldr	r3, [r7, #4]
 8032cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032cd0:	4619      	mov	r1, r3
 8032cd2:	6938      	ldr	r0, [r7, #16]
 8032cd4:	f7fd ff14 	bl	8030b00 <move_window>
 8032cd8:	4603      	mov	r3, r0
 8032cda:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8032cdc:	7dfb      	ldrb	r3, [r7, #23]
 8032cde:	2b00      	cmp	r3, #0
 8032ce0:	d123      	bne.n	8032d2a <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8032ce2:	693b      	ldr	r3, [r7, #16]
 8032ce4:	781b      	ldrb	r3, [r3, #0]
 8032ce6:	2b04      	cmp	r3, #4
 8032ce8:	d109      	bne.n	8032cfe <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 8032cea:	687b      	ldr	r3, [r7, #4]
 8032cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032cee:	781a      	ldrb	r2, [r3, #0]
 8032cf0:	687b      	ldr	r3, [r7, #4]
 8032cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032cf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8032cf8:	b2d2      	uxtb	r2, r2
 8032cfa:	701a      	strb	r2, [r3, #0]
 8032cfc:	e003      	b.n	8032d06 <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8032cfe:	687b      	ldr	r3, [r7, #4]
 8032d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032d02:	22e5      	movs	r2, #229	; 0xe5
 8032d04:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8032d06:	693b      	ldr	r3, [r7, #16]
 8032d08:	2201      	movs	r2, #1
 8032d0a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8032d0c:	687b      	ldr	r3, [r7, #4]
 8032d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032d10:	68fa      	ldr	r2, [r7, #12]
 8032d12:	429a      	cmp	r2, r3
 8032d14:	d90b      	bls.n	8032d2e <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 8032d16:	2100      	movs	r1, #0
 8032d18:	6878      	ldr	r0, [r7, #4]
 8032d1a:	f7fe fe16 	bl	803194a <dir_next>
 8032d1e:	4603      	mov	r3, r0
 8032d20:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8032d22:	7dfb      	ldrb	r3, [r7, #23]
 8032d24:	2b00      	cmp	r3, #0
 8032d26:	d0d1      	beq.n	8032ccc <dir_remove+0x38>
 8032d28:	e002      	b.n	8032d30 <dir_remove+0x9c>
			if (res != FR_OK) break;
 8032d2a:	bf00      	nop
 8032d2c:	e000      	b.n	8032d30 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8032d2e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8032d30:	7dfb      	ldrb	r3, [r7, #23]
 8032d32:	2b04      	cmp	r3, #4
 8032d34:	d101      	bne.n	8032d3a <dir_remove+0xa6>
 8032d36:	2302      	movs	r3, #2
 8032d38:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8032d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8032d3c:	4618      	mov	r0, r3
 8032d3e:	3718      	adds	r7, #24
 8032d40:	46bd      	mov	sp, r7
 8032d42:	bd80      	pop	{r7, pc}

08032d44 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8032d44:	b5b0      	push	{r4, r5, r7, lr}
 8032d46:	b088      	sub	sp, #32
 8032d48:	af00      	add	r7, sp, #0
 8032d4a:	6078      	str	r0, [r7, #4]
 8032d4c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8032d4e:	687b      	ldr	r3, [r7, #4]
 8032d50:	681b      	ldr	r3, [r3, #0]
 8032d52:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8032d54:	683b      	ldr	r3, [r7, #0]
 8032d56:	2200      	movs	r2, #0
 8032d58:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8032d5a:	687b      	ldr	r3, [r7, #4]
 8032d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032d5e:	2b00      	cmp	r3, #0
 8032d60:	f000 80d8 	beq.w	8032f14 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8032d64:	693b      	ldr	r3, [r7, #16]
 8032d66:	781b      	ldrb	r3, [r3, #0]
 8032d68:	2b04      	cmp	r3, #4
 8032d6a:	d106      	bne.n	8032d7a <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 8032d6c:	693b      	ldr	r3, [r7, #16]
 8032d6e:	695b      	ldr	r3, [r3, #20]
 8032d70:	6839      	ldr	r1, [r7, #0]
 8032d72:	4618      	mov	r0, r3
 8032d74:	f7ff f9bc 	bl	80320f0 <get_xdir_info>
		return;
 8032d78:	e0cd      	b.n	8032f16 <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8032d7a:	687b      	ldr	r3, [r7, #4]
 8032d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8032d82:	d032      	beq.n	8032dea <get_fileinfo+0xa6>
			i = j = 0;
 8032d84:	2300      	movs	r3, #0
 8032d86:	61bb      	str	r3, [r7, #24]
 8032d88:	69bb      	ldr	r3, [r7, #24]
 8032d8a:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8032d8c:	e01b      	b.n	8032dc6 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8032d8e:	89fb      	ldrh	r3, [r7, #14]
 8032d90:	2100      	movs	r1, #0
 8032d92:	4618      	mov	r0, r3
 8032d94:	f002 ff24 	bl	8035be0 <ff_convert>
 8032d98:	4603      	mov	r3, r0
 8032d9a:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8032d9c:	89fb      	ldrh	r3, [r7, #14]
 8032d9e:	2b00      	cmp	r3, #0
 8032da0:	d102      	bne.n	8032da8 <get_fileinfo+0x64>
 8032da2:	2300      	movs	r3, #0
 8032da4:	61fb      	str	r3, [r7, #28]
 8032da6:	e01a      	b.n	8032dde <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8032da8:	69fb      	ldr	r3, [r7, #28]
 8032daa:	2bfe      	cmp	r3, #254	; 0xfe
 8032dac:	d902      	bls.n	8032db4 <get_fileinfo+0x70>
 8032dae:	2300      	movs	r3, #0
 8032db0:	61fb      	str	r3, [r7, #28]
 8032db2:	e014      	b.n	8032dde <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 8032db4:	69fb      	ldr	r3, [r7, #28]
 8032db6:	1c5a      	adds	r2, r3, #1
 8032db8:	61fa      	str	r2, [r7, #28]
 8032dba:	89fa      	ldrh	r2, [r7, #14]
 8032dbc:	b2d1      	uxtb	r1, r2
 8032dbe:	683a      	ldr	r2, [r7, #0]
 8032dc0:	4413      	add	r3, r2
 8032dc2:	460a      	mov	r2, r1
 8032dc4:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8032dc6:	693b      	ldr	r3, [r7, #16]
 8032dc8:	691a      	ldr	r2, [r3, #16]
 8032dca:	69bb      	ldr	r3, [r7, #24]
 8032dcc:	1c59      	adds	r1, r3, #1
 8032dce:	61b9      	str	r1, [r7, #24]
 8032dd0:	005b      	lsls	r3, r3, #1
 8032dd2:	4413      	add	r3, r2
 8032dd4:	881b      	ldrh	r3, [r3, #0]
 8032dd6:	81fb      	strh	r3, [r7, #14]
 8032dd8:	89fb      	ldrh	r3, [r7, #14]
 8032dda:	2b00      	cmp	r3, #0
 8032ddc:	d1d7      	bne.n	8032d8e <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8032dde:	683a      	ldr	r2, [r7, #0]
 8032de0:	69fb      	ldr	r3, [r7, #28]
 8032de2:	4413      	add	r3, r2
 8032de4:	331a      	adds	r3, #26
 8032de6:	2200      	movs	r2, #0
 8032de8:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8032dea:	2300      	movs	r3, #0
 8032dec:	61bb      	str	r3, [r7, #24]
 8032dee:	69bb      	ldr	r3, [r7, #24]
 8032df0:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8032df2:	683a      	ldr	r2, [r7, #0]
 8032df4:	69fb      	ldr	r3, [r7, #28]
 8032df6:	4413      	add	r3, r2
 8032df8:	331a      	adds	r3, #26
 8032dfa:	781b      	ldrb	r3, [r3, #0]
 8032dfc:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8032dfe:	e04c      	b.n	8032e9a <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 8032e00:	687b      	ldr	r3, [r7, #4]
 8032e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8032e04:	69fb      	ldr	r3, [r7, #28]
 8032e06:	1c59      	adds	r1, r3, #1
 8032e08:	61f9      	str	r1, [r7, #28]
 8032e0a:	4413      	add	r3, r2
 8032e0c:	781b      	ldrb	r3, [r3, #0]
 8032e0e:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8032e10:	7dfb      	ldrb	r3, [r7, #23]
 8032e12:	2b20      	cmp	r3, #32
 8032e14:	d100      	bne.n	8032e18 <get_fileinfo+0xd4>
 8032e16:	e040      	b.n	8032e9a <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8032e18:	7dfb      	ldrb	r3, [r7, #23]
 8032e1a:	2b05      	cmp	r3, #5
 8032e1c:	d101      	bne.n	8032e22 <get_fileinfo+0xde>
 8032e1e:	23e5      	movs	r3, #229	; 0xe5
 8032e20:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8032e22:	69fb      	ldr	r3, [r7, #28]
 8032e24:	2b09      	cmp	r3, #9
 8032e26:	d10f      	bne.n	8032e48 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 8032e28:	89bb      	ldrh	r3, [r7, #12]
 8032e2a:	2b00      	cmp	r3, #0
 8032e2c:	d105      	bne.n	8032e3a <get_fileinfo+0xf6>
 8032e2e:	683a      	ldr	r2, [r7, #0]
 8032e30:	69bb      	ldr	r3, [r7, #24]
 8032e32:	4413      	add	r3, r2
 8032e34:	331a      	adds	r3, #26
 8032e36:	222e      	movs	r2, #46	; 0x2e
 8032e38:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8032e3a:	69bb      	ldr	r3, [r7, #24]
 8032e3c:	1c5a      	adds	r2, r3, #1
 8032e3e:	61ba      	str	r2, [r7, #24]
 8032e40:	683a      	ldr	r2, [r7, #0]
 8032e42:	4413      	add	r3, r2
 8032e44:	222e      	movs	r2, #46	; 0x2e
 8032e46:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8032e48:	683a      	ldr	r2, [r7, #0]
 8032e4a:	69bb      	ldr	r3, [r7, #24]
 8032e4c:	4413      	add	r3, r2
 8032e4e:	330d      	adds	r3, #13
 8032e50:	7dfa      	ldrb	r2, [r7, #23]
 8032e52:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8032e54:	89bb      	ldrh	r3, [r7, #12]
 8032e56:	2b00      	cmp	r3, #0
 8032e58:	d11c      	bne.n	8032e94 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8032e5a:	7dfb      	ldrb	r3, [r7, #23]
 8032e5c:	2b40      	cmp	r3, #64	; 0x40
 8032e5e:	d913      	bls.n	8032e88 <get_fileinfo+0x144>
 8032e60:	7dfb      	ldrb	r3, [r7, #23]
 8032e62:	2b5a      	cmp	r3, #90	; 0x5a
 8032e64:	d810      	bhi.n	8032e88 <get_fileinfo+0x144>
 8032e66:	687b      	ldr	r3, [r7, #4]
 8032e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032e6a:	330c      	adds	r3, #12
 8032e6c:	781b      	ldrb	r3, [r3, #0]
 8032e6e:	461a      	mov	r2, r3
 8032e70:	69fb      	ldr	r3, [r7, #28]
 8032e72:	2b08      	cmp	r3, #8
 8032e74:	d901      	bls.n	8032e7a <get_fileinfo+0x136>
 8032e76:	2310      	movs	r3, #16
 8032e78:	e000      	b.n	8032e7c <get_fileinfo+0x138>
 8032e7a:	2308      	movs	r3, #8
 8032e7c:	4013      	ands	r3, r2
 8032e7e:	2b00      	cmp	r3, #0
 8032e80:	d002      	beq.n	8032e88 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 8032e82:	7dfb      	ldrb	r3, [r7, #23]
 8032e84:	3320      	adds	r3, #32
 8032e86:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8032e88:	683a      	ldr	r2, [r7, #0]
 8032e8a:	69bb      	ldr	r3, [r7, #24]
 8032e8c:	4413      	add	r3, r2
 8032e8e:	331a      	adds	r3, #26
 8032e90:	7dfa      	ldrb	r2, [r7, #23]
 8032e92:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8032e94:	69bb      	ldr	r3, [r7, #24]
 8032e96:	3301      	adds	r3, #1
 8032e98:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8032e9a:	69fb      	ldr	r3, [r7, #28]
 8032e9c:	2b0a      	cmp	r3, #10
 8032e9e:	d9af      	bls.n	8032e00 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 8032ea0:	89bb      	ldrh	r3, [r7, #12]
 8032ea2:	2b00      	cmp	r3, #0
 8032ea4:	d10d      	bne.n	8032ec2 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 8032ea6:	683a      	ldr	r2, [r7, #0]
 8032ea8:	69bb      	ldr	r3, [r7, #24]
 8032eaa:	4413      	add	r3, r2
 8032eac:	331a      	adds	r3, #26
 8032eae:	2200      	movs	r2, #0
 8032eb0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8032eb2:	687b      	ldr	r3, [r7, #4]
 8032eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032eb6:	330c      	adds	r3, #12
 8032eb8:	781b      	ldrb	r3, [r3, #0]
 8032eba:	2b00      	cmp	r3, #0
 8032ebc:	d101      	bne.n	8032ec2 <get_fileinfo+0x17e>
 8032ebe:	2300      	movs	r3, #0
 8032ec0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8032ec2:	683a      	ldr	r2, [r7, #0]
 8032ec4:	69bb      	ldr	r3, [r7, #24]
 8032ec6:	4413      	add	r3, r2
 8032ec8:	330d      	adds	r3, #13
 8032eca:	2200      	movs	r2, #0
 8032ecc:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8032ece:	687b      	ldr	r3, [r7, #4]
 8032ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032ed2:	7ada      	ldrb	r2, [r3, #11]
 8032ed4:	683b      	ldr	r3, [r7, #0]
 8032ed6:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8032ed8:	687b      	ldr	r3, [r7, #4]
 8032eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032edc:	331c      	adds	r3, #28
 8032ede:	4618      	mov	r0, r3
 8032ee0:	f7fd f9e2 	bl	80302a8 <ld_dword>
 8032ee4:	4603      	mov	r3, r0
 8032ee6:	2200      	movs	r2, #0
 8032ee8:	461c      	mov	r4, r3
 8032eea:	4615      	mov	r5, r2
 8032eec:	683b      	ldr	r3, [r7, #0]
 8032eee:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8032ef2:	687b      	ldr	r3, [r7, #4]
 8032ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032ef6:	3316      	adds	r3, #22
 8032ef8:	4618      	mov	r0, r3
 8032efa:	f7fd f9d5 	bl	80302a8 <ld_dword>
 8032efe:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8032f00:	68bb      	ldr	r3, [r7, #8]
 8032f02:	b29a      	uxth	r2, r3
 8032f04:	683b      	ldr	r3, [r7, #0]
 8032f06:	815a      	strh	r2, [r3, #10]
 8032f08:	68bb      	ldr	r3, [r7, #8]
 8032f0a:	0c1b      	lsrs	r3, r3, #16
 8032f0c:	b29a      	uxth	r2, r3
 8032f0e:	683b      	ldr	r3, [r7, #0]
 8032f10:	811a      	strh	r2, [r3, #8]
 8032f12:	e000      	b.n	8032f16 <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8032f14:	bf00      	nop
}
 8032f16:	3720      	adds	r7, #32
 8032f18:	46bd      	mov	sp, r7
 8032f1a:	bdb0      	pop	{r4, r5, r7, pc}

08032f1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8032f1c:	b580      	push	{r7, lr}
 8032f1e:	b08a      	sub	sp, #40	; 0x28
 8032f20:	af00      	add	r7, sp, #0
 8032f22:	6078      	str	r0, [r7, #4]
 8032f24:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8032f26:	683b      	ldr	r3, [r7, #0]
 8032f28:	681b      	ldr	r3, [r3, #0]
 8032f2a:	613b      	str	r3, [r7, #16]
 8032f2c:	687b      	ldr	r3, [r7, #4]
 8032f2e:	681b      	ldr	r3, [r3, #0]
 8032f30:	691b      	ldr	r3, [r3, #16]
 8032f32:	60fb      	str	r3, [r7, #12]
 8032f34:	2300      	movs	r3, #0
 8032f36:	617b      	str	r3, [r7, #20]
 8032f38:	697b      	ldr	r3, [r7, #20]
 8032f3a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8032f3c:	69bb      	ldr	r3, [r7, #24]
 8032f3e:	1c5a      	adds	r2, r3, #1
 8032f40:	61ba      	str	r2, [r7, #24]
 8032f42:	693a      	ldr	r2, [r7, #16]
 8032f44:	4413      	add	r3, r2
 8032f46:	781b      	ldrb	r3, [r3, #0]
 8032f48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8032f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f4c:	2b1f      	cmp	r3, #31
 8032f4e:	d940      	bls.n	8032fd2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8032f50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f52:	2b2f      	cmp	r3, #47	; 0x2f
 8032f54:	d006      	beq.n	8032f64 <create_name+0x48>
 8032f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f58:	2b5c      	cmp	r3, #92	; 0x5c
 8032f5a:	d110      	bne.n	8032f7e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8032f5c:	e002      	b.n	8032f64 <create_name+0x48>
 8032f5e:	69bb      	ldr	r3, [r7, #24]
 8032f60:	3301      	adds	r3, #1
 8032f62:	61bb      	str	r3, [r7, #24]
 8032f64:	693a      	ldr	r2, [r7, #16]
 8032f66:	69bb      	ldr	r3, [r7, #24]
 8032f68:	4413      	add	r3, r2
 8032f6a:	781b      	ldrb	r3, [r3, #0]
 8032f6c:	2b2f      	cmp	r3, #47	; 0x2f
 8032f6e:	d0f6      	beq.n	8032f5e <create_name+0x42>
 8032f70:	693a      	ldr	r2, [r7, #16]
 8032f72:	69bb      	ldr	r3, [r7, #24]
 8032f74:	4413      	add	r3, r2
 8032f76:	781b      	ldrb	r3, [r3, #0]
 8032f78:	2b5c      	cmp	r3, #92	; 0x5c
 8032f7a:	d0f0      	beq.n	8032f5e <create_name+0x42>
			break;
 8032f7c:	e02a      	b.n	8032fd4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8032f7e:	697b      	ldr	r3, [r7, #20]
 8032f80:	2bfe      	cmp	r3, #254	; 0xfe
 8032f82:	d901      	bls.n	8032f88 <create_name+0x6c>
 8032f84:	2306      	movs	r3, #6
 8032f86:	e1ca      	b.n	803331e <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8032f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f8a:	b2db      	uxtb	r3, r3
 8032f8c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8032f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f90:	2101      	movs	r1, #1
 8032f92:	4618      	mov	r0, r3
 8032f94:	f002 fe24 	bl	8035be0 <ff_convert>
 8032f98:	4603      	mov	r3, r0
 8032f9a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8032f9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f9e:	2b00      	cmp	r3, #0
 8032fa0:	d101      	bne.n	8032fa6 <create_name+0x8a>
 8032fa2:	2306      	movs	r3, #6
 8032fa4:	e1bb      	b.n	803331e <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8032fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8032faa:	d809      	bhi.n	8032fc0 <create_name+0xa4>
 8032fac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032fae:	4619      	mov	r1, r3
 8032fb0:	489e      	ldr	r0, [pc, #632]	; (803322c <create_name+0x310>)
 8032fb2:	f7fd fba9 	bl	8030708 <chk_chr>
 8032fb6:	4603      	mov	r3, r0
 8032fb8:	2b00      	cmp	r3, #0
 8032fba:	d001      	beq.n	8032fc0 <create_name+0xa4>
 8032fbc:	2306      	movs	r3, #6
 8032fbe:	e1ae      	b.n	803331e <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8032fc0:	697b      	ldr	r3, [r7, #20]
 8032fc2:	1c5a      	adds	r2, r3, #1
 8032fc4:	617a      	str	r2, [r7, #20]
 8032fc6:	005b      	lsls	r3, r3, #1
 8032fc8:	68fa      	ldr	r2, [r7, #12]
 8032fca:	4413      	add	r3, r2
 8032fcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8032fce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8032fd0:	e7b4      	b.n	8032f3c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8032fd2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8032fd4:	693a      	ldr	r2, [r7, #16]
 8032fd6:	69bb      	ldr	r3, [r7, #24]
 8032fd8:	441a      	add	r2, r3
 8032fda:	683b      	ldr	r3, [r7, #0]
 8032fdc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8032fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032fe0:	2b1f      	cmp	r3, #31
 8032fe2:	d801      	bhi.n	8032fe8 <create_name+0xcc>
 8032fe4:	2304      	movs	r3, #4
 8032fe6:	e000      	b.n	8032fea <create_name+0xce>
 8032fe8:	2300      	movs	r3, #0
 8032fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8032fee:	697b      	ldr	r3, [r7, #20]
 8032ff0:	2b01      	cmp	r3, #1
 8032ff2:	d109      	bne.n	8033008 <create_name+0xec>
 8032ff4:	697a      	ldr	r2, [r7, #20]
 8032ff6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8032ffa:	4413      	add	r3, r2
 8032ffc:	005b      	lsls	r3, r3, #1
 8032ffe:	68fa      	ldr	r2, [r7, #12]
 8033000:	4413      	add	r3, r2
 8033002:	881b      	ldrh	r3, [r3, #0]
 8033004:	2b2e      	cmp	r3, #46	; 0x2e
 8033006:	d015      	beq.n	8033034 <create_name+0x118>
 8033008:	697b      	ldr	r3, [r7, #20]
 803300a:	2b02      	cmp	r3, #2
 803300c:	d14d      	bne.n	80330aa <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 803300e:	697a      	ldr	r2, [r7, #20]
 8033010:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8033014:	4413      	add	r3, r2
 8033016:	005b      	lsls	r3, r3, #1
 8033018:	68fa      	ldr	r2, [r7, #12]
 803301a:	4413      	add	r3, r2
 803301c:	881b      	ldrh	r3, [r3, #0]
 803301e:	2b2e      	cmp	r3, #46	; 0x2e
 8033020:	d143      	bne.n	80330aa <create_name+0x18e>
 8033022:	697a      	ldr	r2, [r7, #20]
 8033024:	4b82      	ldr	r3, [pc, #520]	; (8033230 <create_name+0x314>)
 8033026:	4413      	add	r3, r2
 8033028:	005b      	lsls	r3, r3, #1
 803302a:	68fa      	ldr	r2, [r7, #12]
 803302c:	4413      	add	r3, r2
 803302e:	881b      	ldrh	r3, [r3, #0]
 8033030:	2b2e      	cmp	r3, #46	; 0x2e
 8033032:	d13a      	bne.n	80330aa <create_name+0x18e>
		lfn[di] = 0;
 8033034:	697b      	ldr	r3, [r7, #20]
 8033036:	005b      	lsls	r3, r3, #1
 8033038:	68fa      	ldr	r2, [r7, #12]
 803303a:	4413      	add	r3, r2
 803303c:	2200      	movs	r2, #0
 803303e:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8033040:	2300      	movs	r3, #0
 8033042:	623b      	str	r3, [r7, #32]
 8033044:	e00f      	b.n	8033066 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8033046:	6a3a      	ldr	r2, [r7, #32]
 8033048:	697b      	ldr	r3, [r7, #20]
 803304a:	429a      	cmp	r2, r3
 803304c:	d201      	bcs.n	8033052 <create_name+0x136>
 803304e:	212e      	movs	r1, #46	; 0x2e
 8033050:	e000      	b.n	8033054 <create_name+0x138>
 8033052:	2120      	movs	r1, #32
 8033054:	687a      	ldr	r2, [r7, #4]
 8033056:	6a3b      	ldr	r3, [r7, #32]
 8033058:	4413      	add	r3, r2
 803305a:	3340      	adds	r3, #64	; 0x40
 803305c:	460a      	mov	r2, r1
 803305e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8033060:	6a3b      	ldr	r3, [r7, #32]
 8033062:	3301      	adds	r3, #1
 8033064:	623b      	str	r3, [r7, #32]
 8033066:	6a3b      	ldr	r3, [r7, #32]
 8033068:	2b0a      	cmp	r3, #10
 803306a:	d9ec      	bls.n	8033046 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 803306c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8033070:	f043 0320 	orr.w	r3, r3, #32
 8033074:	b2d9      	uxtb	r1, r3
 8033076:	687a      	ldr	r2, [r7, #4]
 8033078:	6a3b      	ldr	r3, [r7, #32]
 803307a:	4413      	add	r3, r2
 803307c:	3340      	adds	r3, #64	; 0x40
 803307e:	460a      	mov	r2, r1
 8033080:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8033082:	2300      	movs	r3, #0
 8033084:	e14b      	b.n	803331e <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8033086:	697a      	ldr	r2, [r7, #20]
 8033088:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 803308c:	4413      	add	r3, r2
 803308e:	005b      	lsls	r3, r3, #1
 8033090:	68fa      	ldr	r2, [r7, #12]
 8033092:	4413      	add	r3, r2
 8033094:	881b      	ldrh	r3, [r3, #0]
 8033096:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8033098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803309a:	2b20      	cmp	r3, #32
 803309c:	d002      	beq.n	80330a4 <create_name+0x188>
 803309e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80330a0:	2b2e      	cmp	r3, #46	; 0x2e
 80330a2:	d106      	bne.n	80330b2 <create_name+0x196>
		di--;
 80330a4:	697b      	ldr	r3, [r7, #20]
 80330a6:	3b01      	subs	r3, #1
 80330a8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80330aa:	697b      	ldr	r3, [r7, #20]
 80330ac:	2b00      	cmp	r3, #0
 80330ae:	d1ea      	bne.n	8033086 <create_name+0x16a>
 80330b0:	e000      	b.n	80330b4 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 80330b2:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80330b4:	697b      	ldr	r3, [r7, #20]
 80330b6:	005b      	lsls	r3, r3, #1
 80330b8:	68fa      	ldr	r2, [r7, #12]
 80330ba:	4413      	add	r3, r2
 80330bc:	2200      	movs	r2, #0
 80330be:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80330c0:	697b      	ldr	r3, [r7, #20]
 80330c2:	2b00      	cmp	r3, #0
 80330c4:	d101      	bne.n	80330ca <create_name+0x1ae>
 80330c6:	2306      	movs	r3, #6
 80330c8:	e129      	b.n	803331e <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80330ca:	687b      	ldr	r3, [r7, #4]
 80330cc:	3340      	adds	r3, #64	; 0x40
 80330ce:	220b      	movs	r2, #11
 80330d0:	2120      	movs	r1, #32
 80330d2:	4618      	mov	r0, r3
 80330d4:	f7fd fad6 	bl	8030684 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80330d8:	2300      	movs	r3, #0
 80330da:	61bb      	str	r3, [r7, #24]
 80330dc:	e002      	b.n	80330e4 <create_name+0x1c8>
 80330de:	69bb      	ldr	r3, [r7, #24]
 80330e0:	3301      	adds	r3, #1
 80330e2:	61bb      	str	r3, [r7, #24]
 80330e4:	69bb      	ldr	r3, [r7, #24]
 80330e6:	005b      	lsls	r3, r3, #1
 80330e8:	68fa      	ldr	r2, [r7, #12]
 80330ea:	4413      	add	r3, r2
 80330ec:	881b      	ldrh	r3, [r3, #0]
 80330ee:	2b20      	cmp	r3, #32
 80330f0:	d0f5      	beq.n	80330de <create_name+0x1c2>
 80330f2:	69bb      	ldr	r3, [r7, #24]
 80330f4:	005b      	lsls	r3, r3, #1
 80330f6:	68fa      	ldr	r2, [r7, #12]
 80330f8:	4413      	add	r3, r2
 80330fa:	881b      	ldrh	r3, [r3, #0]
 80330fc:	2b2e      	cmp	r3, #46	; 0x2e
 80330fe:	d0ee      	beq.n	80330de <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8033100:	69bb      	ldr	r3, [r7, #24]
 8033102:	2b00      	cmp	r3, #0
 8033104:	d009      	beq.n	803311a <create_name+0x1fe>
 8033106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 803310a:	f043 0303 	orr.w	r3, r3, #3
 803310e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8033112:	e002      	b.n	803311a <create_name+0x1fe>
 8033114:	697b      	ldr	r3, [r7, #20]
 8033116:	3b01      	subs	r3, #1
 8033118:	617b      	str	r3, [r7, #20]
 803311a:	697b      	ldr	r3, [r7, #20]
 803311c:	2b00      	cmp	r3, #0
 803311e:	d009      	beq.n	8033134 <create_name+0x218>
 8033120:	697a      	ldr	r2, [r7, #20]
 8033122:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8033126:	4413      	add	r3, r2
 8033128:	005b      	lsls	r3, r3, #1
 803312a:	68fa      	ldr	r2, [r7, #12]
 803312c:	4413      	add	r3, r2
 803312e:	881b      	ldrh	r3, [r3, #0]
 8033130:	2b2e      	cmp	r3, #46	; 0x2e
 8033132:	d1ef      	bne.n	8033114 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8033134:	2300      	movs	r3, #0
 8033136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 803313a:	2300      	movs	r3, #0
 803313c:	623b      	str	r3, [r7, #32]
 803313e:	2308      	movs	r3, #8
 8033140:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8033142:	69bb      	ldr	r3, [r7, #24]
 8033144:	1c5a      	adds	r2, r3, #1
 8033146:	61ba      	str	r2, [r7, #24]
 8033148:	005b      	lsls	r3, r3, #1
 803314a:	68fa      	ldr	r2, [r7, #12]
 803314c:	4413      	add	r3, r2
 803314e:	881b      	ldrh	r3, [r3, #0]
 8033150:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8033152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033154:	2b00      	cmp	r3, #0
 8033156:	f000 8098 	beq.w	803328a <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 803315a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803315c:	2b20      	cmp	r3, #32
 803315e:	d006      	beq.n	803316e <create_name+0x252>
 8033160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033162:	2b2e      	cmp	r3, #46	; 0x2e
 8033164:	d10a      	bne.n	803317c <create_name+0x260>
 8033166:	69ba      	ldr	r2, [r7, #24]
 8033168:	697b      	ldr	r3, [r7, #20]
 803316a:	429a      	cmp	r2, r3
 803316c:	d006      	beq.n	803317c <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 803316e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8033172:	f043 0303 	orr.w	r3, r3, #3
 8033176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 803317a:	e085      	b.n	8033288 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 803317c:	6a3a      	ldr	r2, [r7, #32]
 803317e:	69fb      	ldr	r3, [r7, #28]
 8033180:	429a      	cmp	r2, r3
 8033182:	d203      	bcs.n	803318c <create_name+0x270>
 8033184:	69ba      	ldr	r2, [r7, #24]
 8033186:	697b      	ldr	r3, [r7, #20]
 8033188:	429a      	cmp	r2, r3
 803318a:	d123      	bne.n	80331d4 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 803318c:	69fb      	ldr	r3, [r7, #28]
 803318e:	2b0b      	cmp	r3, #11
 8033190:	d106      	bne.n	80331a0 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 8033192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8033196:	f043 0303 	orr.w	r3, r3, #3
 803319a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 803319e:	e077      	b.n	8033290 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80331a0:	69ba      	ldr	r2, [r7, #24]
 80331a2:	697b      	ldr	r3, [r7, #20]
 80331a4:	429a      	cmp	r2, r3
 80331a6:	d005      	beq.n	80331b4 <create_name+0x298>
 80331a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80331ac:	f043 0303 	orr.w	r3, r3, #3
 80331b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80331b4:	69ba      	ldr	r2, [r7, #24]
 80331b6:	697b      	ldr	r3, [r7, #20]
 80331b8:	429a      	cmp	r2, r3
 80331ba:	d868      	bhi.n	803328e <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80331bc:	697b      	ldr	r3, [r7, #20]
 80331be:	61bb      	str	r3, [r7, #24]
 80331c0:	2308      	movs	r3, #8
 80331c2:	623b      	str	r3, [r7, #32]
 80331c4:	230b      	movs	r3, #11
 80331c6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80331c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80331cc:	009b      	lsls	r3, r3, #2
 80331ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80331d2:	e059      	b.n	8033288 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80331d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80331d6:	2b7f      	cmp	r3, #127	; 0x7f
 80331d8:	d914      	bls.n	8033204 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80331da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80331dc:	2100      	movs	r1, #0
 80331de:	4618      	mov	r0, r3
 80331e0:	f002 fcfe 	bl	8035be0 <ff_convert>
 80331e4:	4603      	mov	r3, r0
 80331e6:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80331e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80331ea:	2b00      	cmp	r3, #0
 80331ec:	d004      	beq.n	80331f8 <create_name+0x2dc>
 80331ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80331f0:	3b80      	subs	r3, #128	; 0x80
 80331f2:	4a10      	ldr	r2, [pc, #64]	; (8033234 <create_name+0x318>)
 80331f4:	5cd3      	ldrb	r3, [r2, r3]
 80331f6:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80331f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80331fc:	f043 0302 	orr.w	r3, r3, #2
 8033200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8033204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033206:	2b00      	cmp	r3, #0
 8033208:	d007      	beq.n	803321a <create_name+0x2fe>
 803320a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803320c:	4619      	mov	r1, r3
 803320e:	480a      	ldr	r0, [pc, #40]	; (8033238 <create_name+0x31c>)
 8033210:	f7fd fa7a 	bl	8030708 <chk_chr>
 8033214:	4603      	mov	r3, r0
 8033216:	2b00      	cmp	r3, #0
 8033218:	d010      	beq.n	803323c <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 803321a:	235f      	movs	r3, #95	; 0x5f
 803321c:	84bb      	strh	r3, [r7, #36]	; 0x24
 803321e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8033222:	f043 0303 	orr.w	r3, r3, #3
 8033226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 803322a:	e023      	b.n	8033274 <create_name+0x358>
 803322c:	0803b89c 	.word	0x0803b89c
 8033230:	7ffffffe 	.word	0x7ffffffe
 8033234:	0803b9a4 	.word	0x0803b9a4
 8033238:	0803b8a8 	.word	0x0803b8a8
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 803323c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803323e:	2b40      	cmp	r3, #64	; 0x40
 8033240:	d909      	bls.n	8033256 <create_name+0x33a>
 8033242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033244:	2b5a      	cmp	r3, #90	; 0x5a
 8033246:	d806      	bhi.n	8033256 <create_name+0x33a>
					b |= 2;
 8033248:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 803324c:	f043 0302 	orr.w	r3, r3, #2
 8033250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8033254:	e00e      	b.n	8033274 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8033256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033258:	2b60      	cmp	r3, #96	; 0x60
 803325a:	d90b      	bls.n	8033274 <create_name+0x358>
 803325c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803325e:	2b7a      	cmp	r3, #122	; 0x7a
 8033260:	d808      	bhi.n	8033274 <create_name+0x358>
						b |= 1; w -= 0x20;
 8033262:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8033266:	f043 0301 	orr.w	r3, r3, #1
 803326a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 803326e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033270:	3b20      	subs	r3, #32
 8033272:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8033274:	6a3b      	ldr	r3, [r7, #32]
 8033276:	1c5a      	adds	r2, r3, #1
 8033278:	623a      	str	r2, [r7, #32]
 803327a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 803327c:	b2d1      	uxtb	r1, r2
 803327e:	687a      	ldr	r2, [r7, #4]
 8033280:	4413      	add	r3, r2
 8033282:	460a      	mov	r2, r1
 8033284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8033288:	e75b      	b.n	8033142 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 803328a:	bf00      	nop
 803328c:	e000      	b.n	8033290 <create_name+0x374>
			if (si > di) break;			/* No extension */
 803328e:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8033290:	687b      	ldr	r3, [r7, #4]
 8033292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8033296:	2be5      	cmp	r3, #229	; 0xe5
 8033298:	d103      	bne.n	80332a2 <create_name+0x386>
 803329a:	687b      	ldr	r3, [r7, #4]
 803329c:	2205      	movs	r2, #5
 803329e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 80332a2:	69fb      	ldr	r3, [r7, #28]
 80332a4:	2b08      	cmp	r3, #8
 80332a6:	d104      	bne.n	80332b2 <create_name+0x396>
 80332a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80332ac:	009b      	lsls	r3, r3, #2
 80332ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80332b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80332b6:	f003 030c 	and.w	r3, r3, #12
 80332ba:	2b0c      	cmp	r3, #12
 80332bc:	d005      	beq.n	80332ca <create_name+0x3ae>
 80332be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80332c2:	f003 0303 	and.w	r3, r3, #3
 80332c6:	2b03      	cmp	r3, #3
 80332c8:	d105      	bne.n	80332d6 <create_name+0x3ba>
 80332ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80332ce:	f043 0302 	orr.w	r3, r3, #2
 80332d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80332d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80332da:	f003 0302 	and.w	r3, r3, #2
 80332de:	2b00      	cmp	r3, #0
 80332e0:	d117      	bne.n	8033312 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80332e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80332e6:	f003 0303 	and.w	r3, r3, #3
 80332ea:	2b01      	cmp	r3, #1
 80332ec:	d105      	bne.n	80332fa <create_name+0x3de>
 80332ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80332f2:	f043 0310 	orr.w	r3, r3, #16
 80332f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80332fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80332fe:	f003 030c 	and.w	r3, r3, #12
 8033302:	2b04      	cmp	r3, #4
 8033304:	d105      	bne.n	8033312 <create_name+0x3f6>
 8033306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 803330a:	f043 0308 	orr.w	r3, r3, #8
 803330e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8033312:	687b      	ldr	r3, [r7, #4]
 8033314:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8033318:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 803331c:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 803331e:	4618      	mov	r0, r3
 8033320:	3728      	adds	r7, #40	; 0x28
 8033322:	46bd      	mov	sp, r7
 8033324:	bd80      	pop	{r7, pc}
 8033326:	bf00      	nop

08033328 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8033328:	b5b0      	push	{r4, r5, r7, lr}
 803332a:	b09a      	sub	sp, #104	; 0x68
 803332c:	af00      	add	r7, sp, #0
 803332e:	6078      	str	r0, [r7, #4]
 8033330:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8033332:	687b      	ldr	r3, [r7, #4]
 8033334:	663b      	str	r3, [r7, #96]	; 0x60
	FATFS *fs = obj->fs;
 8033336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033338:	681b      	ldr	r3, [r3, #0]
 803333a:	65fb      	str	r3, [r7, #92]	; 0x5c


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 803333c:	683b      	ldr	r3, [r7, #0]
 803333e:	781b      	ldrb	r3, [r3, #0]
 8033340:	2b2f      	cmp	r3, #47	; 0x2f
 8033342:	d00b      	beq.n	803335c <follow_path+0x34>
 8033344:	683b      	ldr	r3, [r7, #0]
 8033346:	781b      	ldrb	r3, [r3, #0]
 8033348:	2b5c      	cmp	r3, #92	; 0x5c
 803334a:	d007      	beq.n	803335c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 803334c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803334e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8033350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033352:	609a      	str	r2, [r3, #8]
 8033354:	e00d      	b.n	8033372 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8033356:	683b      	ldr	r3, [r7, #0]
 8033358:	3301      	adds	r3, #1
 803335a:	603b      	str	r3, [r7, #0]
 803335c:	683b      	ldr	r3, [r7, #0]
 803335e:	781b      	ldrb	r3, [r3, #0]
 8033360:	2b2f      	cmp	r3, #47	; 0x2f
 8033362:	d0f8      	beq.n	8033356 <follow_path+0x2e>
 8033364:	683b      	ldr	r3, [r7, #0]
 8033366:	781b      	ldrb	r3, [r3, #0]
 8033368:	2b5c      	cmp	r3, #92	; 0x5c
 803336a:	d0f4      	beq.n	8033356 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 803336c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803336e:	2200      	movs	r2, #0
 8033370:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8033372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033374:	2200      	movs	r2, #0
 8033376:	61da      	str	r2, [r3, #28]
#if _FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
 8033378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803337a:	781b      	ldrb	r3, [r3, #0]
 803337c:	2b04      	cmp	r3, #4
 803337e:	d135      	bne.n	80333ec <follow_path+0xc4>
 8033380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033382:	689b      	ldr	r3, [r3, #8]
 8033384:	2b00      	cmp	r3, #0
 8033386:	d031      	beq.n	80333ec <follow_path+0xc4>
		DIR dj;

		obj->c_scl = fs->cdc_scl;
 8033388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803338a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 803338c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803338e:	621a      	str	r2, [r3, #32]
		obj->c_size = fs->cdc_size;
 8033390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8033394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033396:	625a      	str	r2, [r3, #36]	; 0x24
		obj->c_ofs = fs->cdc_ofs;
 8033398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803339a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803339c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803339e:	629a      	str	r2, [r3, #40]	; 0x28
		res = load_obj_dir(&dj, obj);
 80333a0:	f107 0308 	add.w	r3, r7, #8
 80333a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80333a6:	4618      	mov	r0, r3
 80333a8:	f7fe ffe2 	bl	8032370 <load_obj_dir>
 80333ac:	4603      	mov	r3, r0
 80333ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res != FR_OK) return res;
 80333b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80333b6:	2b00      	cmp	r3, #0
 80333b8:	d002      	beq.n	80333c0 <follow_path+0x98>
 80333ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80333be:	e0c6      	b.n	803354e <follow_path+0x226>
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 80333c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80333c2:	695b      	ldr	r3, [r3, #20]
 80333c4:	3338      	adds	r3, #56	; 0x38
 80333c6:	4618      	mov	r0, r3
 80333c8:	f7fc ff6e 	bl	80302a8 <ld_dword>
 80333cc:	4603      	mov	r3, r0
 80333ce:	2200      	movs	r2, #0
 80333d0:	461c      	mov	r4, r3
 80333d2:	4615      	mov	r5, r2
 80333d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80333d6:	e9c3 4504 	strd	r4, r5, [r3, #16]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80333da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80333dc:	695b      	ldr	r3, [r3, #20]
 80333de:	3321      	adds	r3, #33	; 0x21
 80333e0:	781b      	ldrb	r3, [r3, #0]
 80333e2:	f003 0302 	and.w	r3, r3, #2
 80333e6:	b2da      	uxtb	r2, r3
 80333e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80333ea:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80333ec:	683b      	ldr	r3, [r7, #0]
 80333ee:	781b      	ldrb	r3, [r3, #0]
 80333f0:	2b1f      	cmp	r3, #31
 80333f2:	d80b      	bhi.n	803340c <follow_path+0xe4>
		dp->fn[NSFLAG] = NS_NONAME;
 80333f4:	687b      	ldr	r3, [r7, #4]
 80333f6:	2280      	movs	r2, #128	; 0x80
 80333f8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 80333fc:	2100      	movs	r1, #0
 80333fe:	6878      	ldr	r0, [r7, #4]
 8033400:	f7fe fa0f 	bl	8031822 <dir_sdi>
 8033404:	4603      	mov	r3, r0
 8033406:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 803340a:	e09e      	b.n	803354a <follow_path+0x222>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 803340c:	463b      	mov	r3, r7
 803340e:	4619      	mov	r1, r3
 8033410:	6878      	ldr	r0, [r7, #4]
 8033412:	f7ff fd83 	bl	8032f1c <create_name>
 8033416:	4603      	mov	r3, r0
 8033418:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (res != FR_OK) break;
 803341c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033420:	2b00      	cmp	r3, #0
 8033422:	f040 808d 	bne.w	8033540 <follow_path+0x218>
			res = dir_find(dp);				/* Find an object with the segment name */
 8033426:	6878      	ldr	r0, [r7, #4]
 8033428:	f7ff f961 	bl	80326ee <dir_find>
 803342c:	4603      	mov	r3, r0
 803342e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			ns = dp->fn[NSFLAG];
 8033432:	687b      	ldr	r3, [r7, #4]
 8033434:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8033438:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			if (res != FR_OK) {				/* Failed to find the object */
 803343c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033440:	2b00      	cmp	r3, #0
 8033442:	d021      	beq.n	8033488 <follow_path+0x160>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8033444:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033448:	2b04      	cmp	r3, #4
 803344a:	d17b      	bne.n	8033544 <follow_path+0x21c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 803344c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8033450:	f003 0320 	and.w	r3, r3, #32
 8033454:	2b00      	cmp	r3, #0
 8033456:	d00d      	beq.n	8033474 <follow_path+0x14c>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8033458:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 803345c:	f003 0304 	and.w	r3, r3, #4
 8033460:	2b00      	cmp	r3, #0
 8033462:	d06b      	beq.n	803353c <follow_path+0x214>
						dp->fn[NSFLAG] = NS_NONAME;
 8033464:	687b      	ldr	r3, [r7, #4]
 8033466:	2280      	movs	r2, #128	; 0x80
 8033468:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
						res = FR_OK;
 803346c:	2300      	movs	r3, #0
 803346e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8033472:	e067      	b.n	8033544 <follow_path+0x21c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8033474:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8033478:	f003 0304 	and.w	r3, r3, #4
 803347c:	2b00      	cmp	r3, #0
 803347e:	d161      	bne.n	8033544 <follow_path+0x21c>
 8033480:	2305      	movs	r3, #5
 8033482:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8033486:	e05d      	b.n	8033544 <follow_path+0x21c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8033488:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 803348c:	f003 0304 	and.w	r3, r3, #4
 8033490:	2b00      	cmp	r3, #0
 8033492:	d159      	bne.n	8033548 <follow_path+0x220>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8033494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033496:	799b      	ldrb	r3, [r3, #6]
 8033498:	f003 0310 	and.w	r3, r3, #16
 803349c:	2b00      	cmp	r3, #0
 803349e:	d103      	bne.n	80334a8 <follow_path+0x180>
				res = FR_NO_PATH; break;
 80334a0:	2305      	movs	r3, #5
 80334a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80334a6:	e050      	b.n	803354a <follow_path+0x222>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 80334a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80334aa:	781b      	ldrb	r3, [r3, #0]
 80334ac:	2b04      	cmp	r3, #4
 80334ae:	d130      	bne.n	8033512 <follow_path+0x1ea>
				obj->c_scl = obj->sclust;
 80334b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80334b2:	689a      	ldr	r2, [r3, #8]
 80334b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80334b6:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80334b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80334ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80334be:	4613      	mov	r3, r2
 80334c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80334c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80334c6:	79d2      	ldrb	r2, [r2, #7]
 80334c8:	431a      	orrs	r2, r3
 80334ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80334cc:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 80334ce:	687b      	ldr	r3, [r7, #4]
 80334d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80334d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80334d4:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 80334d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80334d8:	695b      	ldr	r3, [r3, #20]
 80334da:	3334      	adds	r3, #52	; 0x34
 80334dc:	4618      	mov	r0, r3
 80334de:	f7fc fee3 	bl	80302a8 <ld_dword>
 80334e2:	4602      	mov	r2, r0
 80334e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80334e6:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80334e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80334ea:	695b      	ldr	r3, [r3, #20]
 80334ec:	3321      	adds	r3, #33	; 0x21
 80334ee:	781b      	ldrb	r3, [r3, #0]
 80334f0:	f003 0302 	and.w	r3, r3, #2
 80334f4:	b2da      	uxtb	r2, r3
 80334f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80334f8:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80334fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80334fc:	695b      	ldr	r3, [r3, #20]
 80334fe:	3338      	adds	r3, #56	; 0x38
 8033500:	4618      	mov	r0, r3
 8033502:	f7fc fef4 	bl	80302ee <ld_qword>
 8033506:	4602      	mov	r2, r0
 8033508:	460b      	mov	r3, r1
 803350a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 803350c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8033510:	e77c      	b.n	803340c <follow_path+0xe4>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8033512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033514:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8033518:	687b      	ldr	r3, [r7, #4]
 803351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803351c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 803351e:	8992      	ldrh	r2, [r2, #12]
 8033520:	fbb3 f0f2 	udiv	r0, r3, r2
 8033524:	fb00 f202 	mul.w	r2, r0, r2
 8033528:	1a9b      	subs	r3, r3, r2
 803352a:	440b      	add	r3, r1
 803352c:	4619      	mov	r1, r3
 803352e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8033530:	f7fe fb4d 	bl	8031bce <ld_clust>
 8033534:	4602      	mov	r2, r0
 8033536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033538:	609a      	str	r2, [r3, #8]
 803353a:	e767      	b.n	803340c <follow_path+0xe4>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 803353c:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 803353e:	e765      	b.n	803340c <follow_path+0xe4>
			if (res != FR_OK) break;
 8033540:	bf00      	nop
 8033542:	e002      	b.n	803354a <follow_path+0x222>
				break;
 8033544:	bf00      	nop
 8033546:	e000      	b.n	803354a <follow_path+0x222>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8033548:	bf00      	nop
			}
		}
	}

	return res;
 803354a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 803354e:	4618      	mov	r0, r3
 8033550:	3768      	adds	r7, #104	; 0x68
 8033552:	46bd      	mov	sp, r7
 8033554:	bdb0      	pop	{r4, r5, r7, pc}

08033556 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8033556:	b480      	push	{r7}
 8033558:	b087      	sub	sp, #28
 803355a:	af00      	add	r7, sp, #0
 803355c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 803355e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8033562:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8033564:	687b      	ldr	r3, [r7, #4]
 8033566:	681b      	ldr	r3, [r3, #0]
 8033568:	2b00      	cmp	r3, #0
 803356a:	d031      	beq.n	80335d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 803356c:	687b      	ldr	r3, [r7, #4]
 803356e:	681b      	ldr	r3, [r3, #0]
 8033570:	617b      	str	r3, [r7, #20]
 8033572:	e002      	b.n	803357a <get_ldnumber+0x24>
 8033574:	697b      	ldr	r3, [r7, #20]
 8033576:	3301      	adds	r3, #1
 8033578:	617b      	str	r3, [r7, #20]
 803357a:	697b      	ldr	r3, [r7, #20]
 803357c:	781b      	ldrb	r3, [r3, #0]
 803357e:	2b1f      	cmp	r3, #31
 8033580:	d903      	bls.n	803358a <get_ldnumber+0x34>
 8033582:	697b      	ldr	r3, [r7, #20]
 8033584:	781b      	ldrb	r3, [r3, #0]
 8033586:	2b3a      	cmp	r3, #58	; 0x3a
 8033588:	d1f4      	bne.n	8033574 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 803358a:	697b      	ldr	r3, [r7, #20]
 803358c:	781b      	ldrb	r3, [r3, #0]
 803358e:	2b3a      	cmp	r3, #58	; 0x3a
 8033590:	d11c      	bne.n	80335cc <get_ldnumber+0x76>
			tp = *path;
 8033592:	687b      	ldr	r3, [r7, #4]
 8033594:	681b      	ldr	r3, [r3, #0]
 8033596:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8033598:	68fb      	ldr	r3, [r7, #12]
 803359a:	1c5a      	adds	r2, r3, #1
 803359c:	60fa      	str	r2, [r7, #12]
 803359e:	781b      	ldrb	r3, [r3, #0]
 80335a0:	3b30      	subs	r3, #48	; 0x30
 80335a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80335a4:	68bb      	ldr	r3, [r7, #8]
 80335a6:	2b09      	cmp	r3, #9
 80335a8:	d80e      	bhi.n	80335c8 <get_ldnumber+0x72>
 80335aa:	68fa      	ldr	r2, [r7, #12]
 80335ac:	697b      	ldr	r3, [r7, #20]
 80335ae:	429a      	cmp	r2, r3
 80335b0:	d10a      	bne.n	80335c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80335b2:	68bb      	ldr	r3, [r7, #8]
 80335b4:	2b00      	cmp	r3, #0
 80335b6:	d107      	bne.n	80335c8 <get_ldnumber+0x72>
					vol = (int)i;
 80335b8:	68bb      	ldr	r3, [r7, #8]
 80335ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80335bc:	697b      	ldr	r3, [r7, #20]
 80335be:	3301      	adds	r3, #1
 80335c0:	617b      	str	r3, [r7, #20]
 80335c2:	687b      	ldr	r3, [r7, #4]
 80335c4:	697a      	ldr	r2, [r7, #20]
 80335c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80335c8:	693b      	ldr	r3, [r7, #16]
 80335ca:	e002      	b.n	80335d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80335cc:	2300      	movs	r3, #0
 80335ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80335d0:	693b      	ldr	r3, [r7, #16]
}
 80335d2:	4618      	mov	r0, r3
 80335d4:	371c      	adds	r7, #28
 80335d6:	46bd      	mov	sp, r7
 80335d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80335dc:	4770      	bx	lr
	...

080335e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80335e0:	b580      	push	{r7, lr}
 80335e2:	b082      	sub	sp, #8
 80335e4:	af00      	add	r7, sp, #0
 80335e6:	6078      	str	r0, [r7, #4]
 80335e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80335ea:	687b      	ldr	r3, [r7, #4]
 80335ec:	2200      	movs	r2, #0
 80335ee:	70da      	strb	r2, [r3, #3]
 80335f0:	687b      	ldr	r3, [r7, #4]
 80335f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80335f6:	64da      	str	r2, [r3, #76]	; 0x4c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80335f8:	6839      	ldr	r1, [r7, #0]
 80335fa:	6878      	ldr	r0, [r7, #4]
 80335fc:	f7fd fa80 	bl	8030b00 <move_window>
 8033600:	4603      	mov	r3, r0
 8033602:	2b00      	cmp	r3, #0
 8033604:	d001      	beq.n	803360a <check_fs+0x2a>
 8033606:	2304      	movs	r3, #4
 8033608:	e044      	b.n	8033694 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 803360a:	687b      	ldr	r3, [r7, #4]
 803360c:	3350      	adds	r3, #80	; 0x50
 803360e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8033612:	4618      	mov	r0, r3
 8033614:	f7fc fe30 	bl	8030278 <ld_word>
 8033618:	4603      	mov	r3, r0
 803361a:	461a      	mov	r2, r3
 803361c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8033620:	429a      	cmp	r2, r3
 8033622:	d001      	beq.n	8033628 <check_fs+0x48>
 8033624:	2303      	movs	r3, #3
 8033626:	e035      	b.n	8033694 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8033628:	687b      	ldr	r3, [r7, #4]
 803362a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 803362e:	2be9      	cmp	r3, #233	; 0xe9
 8033630:	d009      	beq.n	8033646 <check_fs+0x66>
 8033632:	687b      	ldr	r3, [r7, #4]
 8033634:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8033638:	2beb      	cmp	r3, #235	; 0xeb
 803363a:	d11e      	bne.n	803367a <check_fs+0x9a>
 803363c:	687b      	ldr	r3, [r7, #4]
 803363e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8033642:	2b90      	cmp	r3, #144	; 0x90
 8033644:	d119      	bne.n	803367a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8033646:	687b      	ldr	r3, [r7, #4]
 8033648:	3350      	adds	r3, #80	; 0x50
 803364a:	3336      	adds	r3, #54	; 0x36
 803364c:	4618      	mov	r0, r3
 803364e:	f7fc fe2b 	bl	80302a8 <ld_dword>
 8033652:	4603      	mov	r3, r0
 8033654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8033658:	4a10      	ldr	r2, [pc, #64]	; (803369c <check_fs+0xbc>)
 803365a:	4293      	cmp	r3, r2
 803365c:	d101      	bne.n	8033662 <check_fs+0x82>
 803365e:	2300      	movs	r3, #0
 8033660:	e018      	b.n	8033694 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8033662:	687b      	ldr	r3, [r7, #4]
 8033664:	3350      	adds	r3, #80	; 0x50
 8033666:	3352      	adds	r3, #82	; 0x52
 8033668:	4618      	mov	r0, r3
 803366a:	f7fc fe1d 	bl	80302a8 <ld_dword>
 803366e:	4603      	mov	r3, r0
 8033670:	4a0b      	ldr	r2, [pc, #44]	; (80336a0 <check_fs+0xc0>)
 8033672:	4293      	cmp	r3, r2
 8033674:	d101      	bne.n	803367a <check_fs+0x9a>
 8033676:	2300      	movs	r3, #0
 8033678:	e00c      	b.n	8033694 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 803367a:	687b      	ldr	r3, [r7, #4]
 803367c:	3350      	adds	r3, #80	; 0x50
 803367e:	220b      	movs	r2, #11
 8033680:	4908      	ldr	r1, [pc, #32]	; (80336a4 <check_fs+0xc4>)
 8033682:	4618      	mov	r0, r3
 8033684:	f7fd f819 	bl	80306ba <mem_cmp>
 8033688:	4603      	mov	r3, r0
 803368a:	2b00      	cmp	r3, #0
 803368c:	d101      	bne.n	8033692 <check_fs+0xb2>
 803368e:	2301      	movs	r3, #1
 8033690:	e000      	b.n	8033694 <check_fs+0xb4>
#endif
	return 2;
 8033692:	2302      	movs	r3, #2
}
 8033694:	4618      	mov	r0, r3
 8033696:	3708      	adds	r7, #8
 8033698:	46bd      	mov	sp, r7
 803369a:	bd80      	pop	{r7, pc}
 803369c:	00544146 	.word	0x00544146
 80336a0:	33544146 	.word	0x33544146
 80336a4:	0803b8b0 	.word	0x0803b8b0

080336a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80336a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80336ac:	b09c      	sub	sp, #112	; 0x70
 80336ae:	af00      	add	r7, sp, #0
 80336b0:	61f8      	str	r0, [r7, #28]
 80336b2:	61b9      	str	r1, [r7, #24]
 80336b4:	4613      	mov	r3, r2
 80336b6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80336b8:	69bb      	ldr	r3, [r7, #24]
 80336ba:	2200      	movs	r2, #0
 80336bc:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80336be:	69f8      	ldr	r0, [r7, #28]
 80336c0:	f7ff ff49 	bl	8033556 <get_ldnumber>
 80336c4:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 80336c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80336c8:	2b00      	cmp	r3, #0
 80336ca:	da01      	bge.n	80336d0 <find_volume+0x28>
 80336cc:	230b      	movs	r3, #11
 80336ce:	e37b      	b.n	8033dc8 <find_volume+0x720>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80336d0:	4aa2      	ldr	r2, [pc, #648]	; (803395c <find_volume+0x2b4>)
 80336d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80336d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80336d8:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80336da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80336dc:	2b00      	cmp	r3, #0
 80336de:	d101      	bne.n	80336e4 <find_volume+0x3c>
 80336e0:	230c      	movs	r3, #12
 80336e2:	e371      	b.n	8033dc8 <find_volume+0x720>

	ENTER_FF(fs);						/* Lock the volume */
 80336e4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80336e6:	f7fd f82a 	bl	803073e <lock_fs>
 80336ea:	4603      	mov	r3, r0
 80336ec:	2b00      	cmp	r3, #0
 80336ee:	d101      	bne.n	80336f4 <find_volume+0x4c>
 80336f0:	230f      	movs	r3, #15
 80336f2:	e369      	b.n	8033dc8 <find_volume+0x720>
	*rfs = fs;							/* Return pointer to the file system object */
 80336f4:	69bb      	ldr	r3, [r7, #24]
 80336f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80336f8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80336fa:	7dfb      	ldrb	r3, [r7, #23]
 80336fc:	f023 0301 	bic.w	r3, r3, #1
 8033700:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8033702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033704:	781b      	ldrb	r3, [r3, #0]
 8033706:	2b00      	cmp	r3, #0
 8033708:	d01a      	beq.n	8033740 <find_volume+0x98>
		stat = disk_status(fs->drv);
 803370a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803370c:	785b      	ldrb	r3, [r3, #1]
 803370e:	4618      	mov	r0, r3
 8033710:	f7fc fd14 	bl	803013c <disk_status>
 8033714:	4603      	mov	r3, r0
 8033716:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 803371a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 803371e:	f003 0301 	and.w	r3, r3, #1
 8033722:	2b00      	cmp	r3, #0
 8033724:	d10c      	bne.n	8033740 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8033726:	7dfb      	ldrb	r3, [r7, #23]
 8033728:	2b00      	cmp	r3, #0
 803372a:	d007      	beq.n	803373c <find_volume+0x94>
 803372c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8033730:	f003 0304 	and.w	r3, r3, #4
 8033734:	2b00      	cmp	r3, #0
 8033736:	d001      	beq.n	803373c <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 8033738:	230a      	movs	r3, #10
 803373a:	e345      	b.n	8033dc8 <find_volume+0x720>
			}
			return FR_OK;				/* The file system object is valid */
 803373c:	2300      	movs	r3, #0
 803373e:	e343      	b.n	8033dc8 <find_volume+0x720>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8033740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033742:	2200      	movs	r2, #0
 8033744:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8033746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8033748:	b2da      	uxtb	r2, r3
 803374a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803374c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 803374e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033750:	785b      	ldrb	r3, [r3, #1]
 8033752:	4618      	mov	r0, r3
 8033754:	f7fc fd0c 	bl	8030170 <disk_initialize>
 8033758:	4603      	mov	r3, r0
 803375a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 803375e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8033762:	f003 0301 	and.w	r3, r3, #1
 8033766:	2b00      	cmp	r3, #0
 8033768:	d001      	beq.n	803376e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 803376a:	2303      	movs	r3, #3
 803376c:	e32c      	b.n	8033dc8 <find_volume+0x720>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 803376e:	7dfb      	ldrb	r3, [r7, #23]
 8033770:	2b00      	cmp	r3, #0
 8033772:	d007      	beq.n	8033784 <find_volume+0xdc>
 8033774:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8033778:	f003 0304 	and.w	r3, r3, #4
 803377c:	2b00      	cmp	r3, #0
 803377e:	d001      	beq.n	8033784 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8033780:	230a      	movs	r3, #10
 8033782:	e321      	b.n	8033dc8 <find_volume+0x720>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8033784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033786:	7858      	ldrb	r0, [r3, #1]
 8033788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803378a:	330c      	adds	r3, #12
 803378c:	461a      	mov	r2, r3
 803378e:	2102      	movs	r1, #2
 8033790:	f7fc fd54 	bl	803023c <disk_ioctl>
 8033794:	4603      	mov	r3, r0
 8033796:	2b00      	cmp	r3, #0
 8033798:	d001      	beq.n	803379e <find_volume+0xf6>
 803379a:	2301      	movs	r3, #1
 803379c:	e314      	b.n	8033dc8 <find_volume+0x720>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 803379e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80337a0:	899b      	ldrh	r3, [r3, #12]
 80337a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80337a6:	d80d      	bhi.n	80337c4 <find_volume+0x11c>
 80337a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80337aa:	899b      	ldrh	r3, [r3, #12]
 80337ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80337b0:	d308      	bcc.n	80337c4 <find_volume+0x11c>
 80337b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80337b4:	899b      	ldrh	r3, [r3, #12]
 80337b6:	461a      	mov	r2, r3
 80337b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80337ba:	899b      	ldrh	r3, [r3, #12]
 80337bc:	3b01      	subs	r3, #1
 80337be:	4013      	ands	r3, r2
 80337c0:	2b00      	cmp	r3, #0
 80337c2:	d001      	beq.n	80337c8 <find_volume+0x120>
 80337c4:	2301      	movs	r3, #1
 80337c6:	e2ff      	b.n	8033dc8 <find_volume+0x720>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80337c8:	2300      	movs	r3, #0
 80337ca:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80337cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80337ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80337d0:	f7ff ff06 	bl	80335e0 <check_fs>
 80337d4:	4603      	mov	r3, r0
 80337d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80337da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80337de:	2b02      	cmp	r3, #2
 80337e0:	d14d      	bne.n	803387e <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80337e2:	2300      	movs	r3, #0
 80337e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80337e6:	e020      	b.n	803382a <find_volume+0x182>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80337e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80337ea:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80337ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80337f0:	011b      	lsls	r3, r3, #4
 80337f2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80337f6:	4413      	add	r3, r2
 80337f8:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80337fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80337fc:	3304      	adds	r3, #4
 80337fe:	781b      	ldrb	r3, [r3, #0]
 8033800:	2b00      	cmp	r3, #0
 8033802:	d006      	beq.n	8033812 <find_volume+0x16a>
 8033804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8033806:	3308      	adds	r3, #8
 8033808:	4618      	mov	r0, r3
 803380a:	f7fc fd4d 	bl	80302a8 <ld_dword>
 803380e:	4602      	mov	r2, r0
 8033810:	e000      	b.n	8033814 <find_volume+0x16c>
 8033812:	2200      	movs	r2, #0
 8033814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033816:	009b      	lsls	r3, r3, #2
 8033818:	3360      	adds	r3, #96	; 0x60
 803381a:	f107 0110 	add.w	r1, r7, #16
 803381e:	440b      	add	r3, r1
 8033820:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8033824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033826:	3301      	adds	r3, #1
 8033828:	65bb      	str	r3, [r7, #88]	; 0x58
 803382a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803382c:	2b03      	cmp	r3, #3
 803382e:	d9db      	bls.n	80337e8 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8033830:	2300      	movs	r3, #0
 8033832:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 8033834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033836:	2b00      	cmp	r3, #0
 8033838:	d002      	beq.n	8033840 <find_volume+0x198>
 803383a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803383c:	3b01      	subs	r3, #1
 803383e:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8033840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033842:	009b      	lsls	r3, r3, #2
 8033844:	3360      	adds	r3, #96	; 0x60
 8033846:	f107 0210 	add.w	r2, r7, #16
 803384a:	4413      	add	r3, r2
 803384c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8033850:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8033852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8033854:	2b00      	cmp	r3, #0
 8033856:	d005      	beq.n	8033864 <find_volume+0x1bc>
 8033858:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 803385a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 803385c:	f7ff fec0 	bl	80335e0 <check_fs>
 8033860:	4603      	mov	r3, r0
 8033862:	e000      	b.n	8033866 <find_volume+0x1be>
 8033864:	2303      	movs	r3, #3
 8033866:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 803386a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 803386e:	2b01      	cmp	r3, #1
 8033870:	d905      	bls.n	803387e <find_volume+0x1d6>
 8033872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033874:	3301      	adds	r3, #1
 8033876:	65bb      	str	r3, [r7, #88]	; 0x58
 8033878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803387a:	2b03      	cmp	r3, #3
 803387c:	d9e0      	bls.n	8033840 <find_volume+0x198>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 803387e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8033882:	2b04      	cmp	r3, #4
 8033884:	d101      	bne.n	803388a <find_volume+0x1e2>
 8033886:	2301      	movs	r3, #1
 8033888:	e29e      	b.n	8033dc8 <find_volume+0x720>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 803388a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 803388e:	2b01      	cmp	r3, #1
 8033890:	d901      	bls.n	8033896 <find_volume+0x1ee>
 8033892:	230d      	movs	r3, #13
 8033894:	e298      	b.n	8033dc8 <find_volume+0x720>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8033896:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 803389a:	2b01      	cmp	r3, #1
 803389c:	f040 8100 	bne.w	8033aa0 <find_volume+0x3f8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80338a0:	230b      	movs	r3, #11
 80338a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80338a4:	e002      	b.n	80338ac <find_volume+0x204>
 80338a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80338a8:	3301      	adds	r3, #1
 80338aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80338ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80338ae:	2b3f      	cmp	r3, #63	; 0x3f
 80338b0:	d806      	bhi.n	80338c0 <find_volume+0x218>
 80338b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80338b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80338b6:	4413      	add	r3, r2
 80338b8:	3350      	adds	r3, #80	; 0x50
 80338ba:	781b      	ldrb	r3, [r3, #0]
 80338bc:	2b00      	cmp	r3, #0
 80338be:	d0f2      	beq.n	80338a6 <find_volume+0x1fe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 80338c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80338c2:	2b3f      	cmp	r3, #63	; 0x3f
 80338c4:	d801      	bhi.n	80338ca <find_volume+0x222>
 80338c6:	230d      	movs	r3, #13
 80338c8:	e27e      	b.n	8033dc8 <find_volume+0x720>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80338ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80338cc:	3350      	adds	r3, #80	; 0x50
 80338ce:	3368      	adds	r3, #104	; 0x68
 80338d0:	4618      	mov	r0, r3
 80338d2:	f7fc fcd1 	bl	8030278 <ld_word>
 80338d6:	4603      	mov	r3, r0
 80338d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80338dc:	d001      	beq.n	80338e2 <find_volume+0x23a>
 80338de:	230d      	movs	r3, #13
 80338e0:	e272      	b.n	8033dc8 <find_volume+0x720>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80338e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80338e4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80338e8:	461a      	mov	r2, r3
 80338ea:	2301      	movs	r3, #1
 80338ec:	4093      	lsls	r3, r2
 80338ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80338f0:	8992      	ldrh	r2, [r2, #12]
 80338f2:	4293      	cmp	r3, r2
 80338f4:	d001      	beq.n	80338fa <find_volume+0x252>
			return FR_NO_FILESYSTEM;
 80338f6:	230d      	movs	r3, #13
 80338f8:	e266      	b.n	8033dc8 <find_volume+0x720>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80338fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80338fc:	3350      	adds	r3, #80	; 0x50
 80338fe:	3348      	adds	r3, #72	; 0x48
 8033900:	4618      	mov	r0, r3
 8033902:	f7fc fcf4 	bl	80302ee <ld_qword>
 8033906:	4602      	mov	r2, r0
 8033908:	460b      	mov	r3, r1
 803390a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 803390c:	2000      	movs	r0, #0
 803390e:	60b9      	str	r1, [r7, #8]
 8033910:	60f8      	str	r0, [r7, #12]
 8033912:	68b9      	ldr	r1, [r7, #8]
 8033914:	1851      	adds	r1, r2, r1
 8033916:	6039      	str	r1, [r7, #0]
 8033918:	68f9      	ldr	r1, [r7, #12]
 803391a:	eb43 0101 	adc.w	r1, r3, r1
 803391e:	6079      	str	r1, [r7, #4]
 8033920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8033924:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8033928:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 803392c:	2b01      	cmp	r3, #1
 803392e:	d301      	bcc.n	8033934 <find_volume+0x28c>
 8033930:	230d      	movs	r3, #13
 8033932:	e249      	b.n	8033dc8 <find_volume+0x720>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8033934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033936:	3350      	adds	r3, #80	; 0x50
 8033938:	3354      	adds	r3, #84	; 0x54
 803393a:	4618      	mov	r0, r3
 803393c:	f7fc fcb4 	bl	80302a8 <ld_dword>
 8033940:	4602      	mov	r2, r0
 8033942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033944:	639a      	str	r2, [r3, #56]	; 0x38

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8033946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033948:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 803394c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803394e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8033950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033952:	789b      	ldrb	r3, [r3, #2]
 8033954:	2b01      	cmp	r3, #1
 8033956:	d003      	beq.n	8033960 <find_volume+0x2b8>
 8033958:	230d      	movs	r3, #13
 803395a:	e235      	b.n	8033dc8 <find_volume+0x720>
 803395c:	24002c00 	.word	0x24002c00

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8033960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033962:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8033966:	461a      	mov	r2, r3
 8033968:	2301      	movs	r3, #1
 803396a:	4093      	lsls	r3, r2
 803396c:	b29a      	uxth	r2, r3
 803396e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033970:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8033972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033974:	895b      	ldrh	r3, [r3, #10]
 8033976:	2b00      	cmp	r3, #0
 8033978:	d101      	bne.n	803397e <find_volume+0x2d6>
 803397a:	230d      	movs	r3, #13
 803397c:	e224      	b.n	8033dc8 <find_volume+0x720>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 803397e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033980:	3350      	adds	r3, #80	; 0x50
 8033982:	335c      	adds	r3, #92	; 0x5c
 8033984:	4618      	mov	r0, r3
 8033986:	f7fc fc8f 	bl	80302a8 <ld_dword>
 803398a:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 803398c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803398e:	4a9a      	ldr	r2, [pc, #616]	; (8033bf8 <find_volume+0x550>)
 8033990:	4293      	cmp	r3, r2
 8033992:	d901      	bls.n	8033998 <find_volume+0x2f0>
 8033994:	230d      	movs	r3, #13
 8033996:	e217      	b.n	8033dc8 <find_volume+0x720>
		fs->n_fatent = nclst + 2;
 8033998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803399a:	1c9a      	adds	r2, r3, #2
 803399c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803399e:	635a      	str	r2, [r3, #52]	; 0x34

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80339a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80339a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80339a4:	63da      	str	r2, [r3, #60]	; 0x3c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80339a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80339a8:	3350      	adds	r3, #80	; 0x50
 80339aa:	3358      	adds	r3, #88	; 0x58
 80339ac:	4618      	mov	r0, r3
 80339ae:	f7fc fc7b 	bl	80302a8 <ld_dword>
 80339b2:	4602      	mov	r2, r0
 80339b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80339b6:	441a      	add	r2, r3
 80339b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80339ba:	649a      	str	r2, [r3, #72]	; 0x48
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80339bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80339be:	3350      	adds	r3, #80	; 0x50
 80339c0:	3350      	adds	r3, #80	; 0x50
 80339c2:	4618      	mov	r0, r3
 80339c4:	f7fc fc70 	bl	80302a8 <ld_dword>
 80339c8:	4602      	mov	r2, r0
 80339ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80339cc:	441a      	add	r2, r3
 80339ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80339d0:	641a      	str	r2, [r3, #64]	; 0x40
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80339d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80339d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80339d6:	2200      	movs	r2, #0
 80339d8:	469a      	mov	sl, r3
 80339da:	4693      	mov	fp, r2
 80339dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80339de:	895b      	ldrh	r3, [r3, #10]
 80339e0:	461a      	mov	r2, r3
 80339e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80339e4:	fb02 f303 	mul.w	r3, r2, r3
 80339e8:	2200      	movs	r2, #0
 80339ea:	4698      	mov	r8, r3
 80339ec:	4691      	mov	r9, r2
 80339ee:	eb1a 0408 	adds.w	r4, sl, r8
 80339f2:	eb4b 0509 	adc.w	r5, fp, r9
 80339f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80339fa:	42a2      	cmp	r2, r4
 80339fc:	41ab      	sbcs	r3, r5
 80339fe:	d201      	bcs.n	8033a04 <find_volume+0x35c>
 8033a00:	230d      	movs	r3, #13
 8033a02:	e1e1      	b.n	8033dc8 <find_volume+0x720>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8033a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a06:	3350      	adds	r3, #80	; 0x50
 8033a08:	3360      	adds	r3, #96	; 0x60
 8033a0a:	4618      	mov	r0, r3
 8033a0c:	f7fc fc4c 	bl	80302a8 <ld_dword>
 8033a10:	4602      	mov	r2, r0
 8033a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a14:	645a      	str	r2, [r3, #68]	; 0x44

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8033a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033a1a:	4619      	mov	r1, r3
 8033a1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8033a1e:	f7fd f90d 	bl	8030c3c <clust2sect>
 8033a22:	4603      	mov	r3, r0
 8033a24:	4619      	mov	r1, r3
 8033a26:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8033a28:	f7fd f86a 	bl	8030b00 <move_window>
 8033a2c:	4603      	mov	r3, r0
 8033a2e:	2b00      	cmp	r3, #0
 8033a30:	d001      	beq.n	8033a36 <find_volume+0x38e>
 8033a32:	2301      	movs	r3, #1
 8033a34:	e1c8      	b.n	8033dc8 <find_volume+0x720>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8033a36:	2300      	movs	r3, #0
 8033a38:	65bb      	str	r3, [r7, #88]	; 0x58
 8033a3a:	e015      	b.n	8033a68 <find_volume+0x3c0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8033a3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033a40:	4413      	add	r3, r2
 8033a42:	3350      	adds	r3, #80	; 0x50
 8033a44:	781b      	ldrb	r3, [r3, #0]
 8033a46:	2b81      	cmp	r3, #129	; 0x81
 8033a48:	d10b      	bne.n	8033a62 <find_volume+0x3ba>
 8033a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a4c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8033a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033a52:	3314      	adds	r3, #20
 8033a54:	4413      	add	r3, r2
 8033a56:	4618      	mov	r0, r3
 8033a58:	f7fc fc26 	bl	80302a8 <ld_dword>
 8033a5c:	4603      	mov	r3, r0
 8033a5e:	2b02      	cmp	r3, #2
 8033a60:	d009      	beq.n	8033a76 <find_volume+0x3ce>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8033a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033a64:	3320      	adds	r3, #32
 8033a66:	65bb      	str	r3, [r7, #88]	; 0x58
 8033a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a6a:	899b      	ldrh	r3, [r3, #12]
 8033a6c:	461a      	mov	r2, r3
 8033a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033a70:	4293      	cmp	r3, r2
 8033a72:	d3e3      	bcc.n	8033a3c <find_volume+0x394>
 8033a74:	e000      	b.n	8033a78 <find_volume+0x3d0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8033a76:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8033a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a7a:	899b      	ldrh	r3, [r3, #12]
 8033a7c:	461a      	mov	r2, r3
 8033a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033a80:	4293      	cmp	r3, r2
 8033a82:	d101      	bne.n	8033a88 <find_volume+0x3e0>
 8033a84:	230d      	movs	r3, #13
 8033a86:	e19f      	b.n	8033dc8 <find_volume+0x720>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8033a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8033a8e:	621a      	str	r2, [r3, #32]
 8033a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a92:	6a1a      	ldr	r2, [r3, #32]
 8033a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a96:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8033a98:	2304      	movs	r3, #4
 8033a9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8033a9e:	e17e      	b.n	8033d9e <find_volume+0x6f6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8033aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033aa2:	3350      	adds	r3, #80	; 0x50
 8033aa4:	330b      	adds	r3, #11
 8033aa6:	4618      	mov	r0, r3
 8033aa8:	f7fc fbe6 	bl	8030278 <ld_word>
 8033aac:	4603      	mov	r3, r0
 8033aae:	461a      	mov	r2, r3
 8033ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033ab2:	899b      	ldrh	r3, [r3, #12]
 8033ab4:	429a      	cmp	r2, r3
 8033ab6:	d001      	beq.n	8033abc <find_volume+0x414>
 8033ab8:	230d      	movs	r3, #13
 8033aba:	e185      	b.n	8033dc8 <find_volume+0x720>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8033abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033abe:	3350      	adds	r3, #80	; 0x50
 8033ac0:	3316      	adds	r3, #22
 8033ac2:	4618      	mov	r0, r3
 8033ac4:	f7fc fbd8 	bl	8030278 <ld_word>
 8033ac8:	4603      	mov	r3, r0
 8033aca:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8033acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033ace:	2b00      	cmp	r3, #0
 8033ad0:	d106      	bne.n	8033ae0 <find_volume+0x438>
 8033ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033ad4:	3350      	adds	r3, #80	; 0x50
 8033ad6:	3324      	adds	r3, #36	; 0x24
 8033ad8:	4618      	mov	r0, r3
 8033ada:	f7fc fbe5 	bl	80302a8 <ld_dword>
 8033ade:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8033ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033ae2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8033ae4:	639a      	str	r2, [r3, #56]	; 0x38

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8033ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033ae8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8033aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033aee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8033af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033af2:	789b      	ldrb	r3, [r3, #2]
 8033af4:	2b01      	cmp	r3, #1
 8033af6:	d005      	beq.n	8033b04 <find_volume+0x45c>
 8033af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033afa:	789b      	ldrb	r3, [r3, #2]
 8033afc:	2b02      	cmp	r3, #2
 8033afe:	d001      	beq.n	8033b04 <find_volume+0x45c>
 8033b00:	230d      	movs	r3, #13
 8033b02:	e161      	b.n	8033dc8 <find_volume+0x720>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8033b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b06:	789b      	ldrb	r3, [r3, #2]
 8033b08:	461a      	mov	r2, r3
 8033b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033b0c:	fb02 f303 	mul.w	r3, r2, r3
 8033b10:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8033b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8033b18:	b29a      	uxth	r2, r3
 8033b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8033b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b20:	895b      	ldrh	r3, [r3, #10]
 8033b22:	2b00      	cmp	r3, #0
 8033b24:	d008      	beq.n	8033b38 <find_volume+0x490>
 8033b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b28:	895b      	ldrh	r3, [r3, #10]
 8033b2a:	461a      	mov	r2, r3
 8033b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b2e:	895b      	ldrh	r3, [r3, #10]
 8033b30:	3b01      	subs	r3, #1
 8033b32:	4013      	ands	r3, r2
 8033b34:	2b00      	cmp	r3, #0
 8033b36:	d001      	beq.n	8033b3c <find_volume+0x494>
 8033b38:	230d      	movs	r3, #13
 8033b3a:	e145      	b.n	8033dc8 <find_volume+0x720>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8033b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b3e:	3350      	adds	r3, #80	; 0x50
 8033b40:	3311      	adds	r3, #17
 8033b42:	4618      	mov	r0, r3
 8033b44:	f7fc fb98 	bl	8030278 <ld_word>
 8033b48:	4603      	mov	r3, r0
 8033b4a:	461a      	mov	r2, r3
 8033b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8033b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b52:	891b      	ldrh	r3, [r3, #8]
 8033b54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033b56:	8992      	ldrh	r2, [r2, #12]
 8033b58:	0952      	lsrs	r2, r2, #5
 8033b5a:	b292      	uxth	r2, r2
 8033b5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8033b60:	fb01 f202 	mul.w	r2, r1, r2
 8033b64:	1a9b      	subs	r3, r3, r2
 8033b66:	b29b      	uxth	r3, r3
 8033b68:	2b00      	cmp	r3, #0
 8033b6a:	d001      	beq.n	8033b70 <find_volume+0x4c8>
 8033b6c:	230d      	movs	r3, #13
 8033b6e:	e12b      	b.n	8033dc8 <find_volume+0x720>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8033b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b72:	3350      	adds	r3, #80	; 0x50
 8033b74:	3313      	adds	r3, #19
 8033b76:	4618      	mov	r0, r3
 8033b78:	f7fc fb7e 	bl	8030278 <ld_word>
 8033b7c:	4603      	mov	r3, r0
 8033b7e:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8033b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033b82:	2b00      	cmp	r3, #0
 8033b84:	d106      	bne.n	8033b94 <find_volume+0x4ec>
 8033b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b88:	3350      	adds	r3, #80	; 0x50
 8033b8a:	3320      	adds	r3, #32
 8033b8c:	4618      	mov	r0, r3
 8033b8e:	f7fc fb8b 	bl	80302a8 <ld_dword>
 8033b92:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8033b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b96:	3350      	adds	r3, #80	; 0x50
 8033b98:	330e      	adds	r3, #14
 8033b9a:	4618      	mov	r0, r3
 8033b9c:	f7fc fb6c 	bl	8030278 <ld_word>
 8033ba0:	4603      	mov	r3, r0
 8033ba2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8033ba6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8033baa:	2b00      	cmp	r3, #0
 8033bac:	d101      	bne.n	8033bb2 <find_volume+0x50a>
 8033bae:	230d      	movs	r3, #13
 8033bb0:	e10a      	b.n	8033dc8 <find_volume+0x720>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8033bb2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8033bb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033bb8:	4413      	add	r3, r2
 8033bba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033bbc:	8911      	ldrh	r1, [r2, #8]
 8033bbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033bc0:	8992      	ldrh	r2, [r2, #12]
 8033bc2:	0952      	lsrs	r2, r2, #5
 8033bc4:	b292      	uxth	r2, r2
 8033bc6:	fbb1 f2f2 	udiv	r2, r1, r2
 8033bca:	b292      	uxth	r2, r2
 8033bcc:	4413      	add	r3, r2
 8033bce:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8033bd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8033bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8033bd4:	429a      	cmp	r2, r3
 8033bd6:	d201      	bcs.n	8033bdc <find_volume+0x534>
 8033bd8:	230d      	movs	r3, #13
 8033bda:	e0f5      	b.n	8033dc8 <find_volume+0x720>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8033bdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8033bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8033be0:	1ad3      	subs	r3, r2, r3
 8033be2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033be4:	8952      	ldrh	r2, [r2, #10]
 8033be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8033bea:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8033bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033bee:	2b00      	cmp	r3, #0
 8033bf0:	d104      	bne.n	8033bfc <find_volume+0x554>
 8033bf2:	230d      	movs	r3, #13
 8033bf4:	e0e8      	b.n	8033dc8 <find_volume+0x720>
 8033bf6:	bf00      	nop
 8033bf8:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 8033bfc:	2303      	movs	r3, #3
 8033bfe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8033c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033c04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8033c08:	4293      	cmp	r3, r2
 8033c0a:	d802      	bhi.n	8033c12 <find_volume+0x56a>
 8033c0c:	2302      	movs	r3, #2
 8033c0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8033c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033c14:	f640 72f5 	movw	r2, #4085	; 0xff5
 8033c18:	4293      	cmp	r3, r2
 8033c1a:	d802      	bhi.n	8033c22 <find_volume+0x57a>
 8033c1c:	2301      	movs	r3, #1
 8033c1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8033c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033c24:	1c9a      	adds	r2, r3, #2
 8033c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c28:	635a      	str	r2, [r3, #52]	; 0x34
		fs->volbase = bsect;							/* Volume start sector */
 8033c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8033c2e:	63da      	str	r2, [r3, #60]	; 0x3c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8033c30:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8033c34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8033c36:	441a      	add	r2, r3
 8033c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c3a:	641a      	str	r2, [r3, #64]	; 0x40
		fs->database = bsect + sysect;					/* Data start sector */
 8033c3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8033c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8033c40:	441a      	add	r2, r3
 8033c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c44:	649a      	str	r2, [r3, #72]	; 0x48
		if (fmt == FS_FAT32) {
 8033c46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8033c4a:	2b03      	cmp	r3, #3
 8033c4c:	d11e      	bne.n	8033c8c <find_volume+0x5e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8033c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c50:	3350      	adds	r3, #80	; 0x50
 8033c52:	332a      	adds	r3, #42	; 0x2a
 8033c54:	4618      	mov	r0, r3
 8033c56:	f7fc fb0f 	bl	8030278 <ld_word>
 8033c5a:	4603      	mov	r3, r0
 8033c5c:	2b00      	cmp	r3, #0
 8033c5e:	d001      	beq.n	8033c64 <find_volume+0x5bc>
 8033c60:	230d      	movs	r3, #13
 8033c62:	e0b1      	b.n	8033dc8 <find_volume+0x720>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8033c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c66:	891b      	ldrh	r3, [r3, #8]
 8033c68:	2b00      	cmp	r3, #0
 8033c6a:	d001      	beq.n	8033c70 <find_volume+0x5c8>
 8033c6c:	230d      	movs	r3, #13
 8033c6e:	e0ab      	b.n	8033dc8 <find_volume+0x720>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8033c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c72:	3350      	adds	r3, #80	; 0x50
 8033c74:	332c      	adds	r3, #44	; 0x2c
 8033c76:	4618      	mov	r0, r3
 8033c78:	f7fc fb16 	bl	80302a8 <ld_dword>
 8033c7c:	4602      	mov	r2, r0
 8033c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c80:	645a      	str	r2, [r3, #68]	; 0x44
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8033c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033c86:	009b      	lsls	r3, r3, #2
 8033c88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8033c8a:	e01f      	b.n	8033ccc <find_volume+0x624>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8033c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c8e:	891b      	ldrh	r3, [r3, #8]
 8033c90:	2b00      	cmp	r3, #0
 8033c92:	d101      	bne.n	8033c98 <find_volume+0x5f0>
 8033c94:	230d      	movs	r3, #13
 8033c96:	e097      	b.n	8033dc8 <find_volume+0x720>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8033c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8033c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033c9e:	441a      	add	r2, r3
 8033ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033ca2:	645a      	str	r2, [r3, #68]	; 0x44
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8033ca4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8033ca8:	2b02      	cmp	r3, #2
 8033caa:	d103      	bne.n	8033cb4 <find_volume+0x60c>
 8033cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033cb0:	005b      	lsls	r3, r3, #1
 8033cb2:	e00a      	b.n	8033cca <find_volume+0x622>
 8033cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8033cb8:	4613      	mov	r3, r2
 8033cba:	005b      	lsls	r3, r3, #1
 8033cbc:	4413      	add	r3, r2
 8033cbe:	085a      	lsrs	r2, r3, #1
 8033cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033cc4:	f003 0301 	and.w	r3, r3, #1
 8033cc8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8033cca:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8033ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8033cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cd2:	899b      	ldrh	r3, [r3, #12]
 8033cd4:	4619      	mov	r1, r3
 8033cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033cd8:	440b      	add	r3, r1
 8033cda:	3b01      	subs	r3, #1
 8033cdc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8033cde:	8989      	ldrh	r1, [r1, #12]
 8033ce0:	fbb3 f3f1 	udiv	r3, r3, r1
 8033ce4:	429a      	cmp	r2, r3
 8033ce6:	d201      	bcs.n	8033cec <find_volume+0x644>
 8033ce8:	230d      	movs	r3, #13
 8033cea:	e06d      	b.n	8033dc8 <find_volume+0x720>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8033cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8033cf2:	621a      	str	r2, [r3, #32]
 8033cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cf6:	6a1a      	ldr	r2, [r3, #32]
 8033cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cfa:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 8033cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cfe:	2280      	movs	r2, #128	; 0x80
 8033d00:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8033d02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8033d06:	2b03      	cmp	r3, #3
 8033d08:	d149      	bne.n	8033d9e <find_volume+0x6f6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8033d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d0c:	3350      	adds	r3, #80	; 0x50
 8033d0e:	3330      	adds	r3, #48	; 0x30
 8033d10:	4618      	mov	r0, r3
 8033d12:	f7fc fab1 	bl	8030278 <ld_word>
 8033d16:	4603      	mov	r3, r0
 8033d18:	2b01      	cmp	r3, #1
 8033d1a:	d140      	bne.n	8033d9e <find_volume+0x6f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8033d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8033d1e:	3301      	adds	r3, #1
 8033d20:	4619      	mov	r1, r3
 8033d22:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8033d24:	f7fc feec 	bl	8030b00 <move_window>
 8033d28:	4603      	mov	r3, r0
 8033d2a:	2b00      	cmp	r3, #0
 8033d2c:	d137      	bne.n	8033d9e <find_volume+0x6f6>
		{
			fs->fsi_flag = 0;
 8033d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d30:	2200      	movs	r2, #0
 8033d32:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8033d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d36:	3350      	adds	r3, #80	; 0x50
 8033d38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8033d3c:	4618      	mov	r0, r3
 8033d3e:	f7fc fa9b 	bl	8030278 <ld_word>
 8033d42:	4603      	mov	r3, r0
 8033d44:	461a      	mov	r2, r3
 8033d46:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8033d4a:	429a      	cmp	r2, r3
 8033d4c:	d127      	bne.n	8033d9e <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8033d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d50:	3350      	adds	r3, #80	; 0x50
 8033d52:	4618      	mov	r0, r3
 8033d54:	f7fc faa8 	bl	80302a8 <ld_dword>
 8033d58:	4603      	mov	r3, r0
 8033d5a:	4a1e      	ldr	r2, [pc, #120]	; (8033dd4 <find_volume+0x72c>)
 8033d5c:	4293      	cmp	r3, r2
 8033d5e:	d11e      	bne.n	8033d9e <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8033d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d62:	3350      	adds	r3, #80	; 0x50
 8033d64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8033d68:	4618      	mov	r0, r3
 8033d6a:	f7fc fa9d 	bl	80302a8 <ld_dword>
 8033d6e:	4603      	mov	r3, r0
 8033d70:	4a19      	ldr	r2, [pc, #100]	; (8033dd8 <find_volume+0x730>)
 8033d72:	4293      	cmp	r3, r2
 8033d74:	d113      	bne.n	8033d9e <find_volume+0x6f6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8033d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d78:	3350      	adds	r3, #80	; 0x50
 8033d7a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8033d7e:	4618      	mov	r0, r3
 8033d80:	f7fc fa92 	bl	80302a8 <ld_dword>
 8033d84:	4602      	mov	r2, r0
 8033d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d88:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8033d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d8c:	3350      	adds	r3, #80	; 0x50
 8033d8e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8033d92:	4618      	mov	r0, r3
 8033d94:	f7fc fa88 	bl	80302a8 <ld_dword>
 8033d98:	4602      	mov	r2, r0
 8033d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d9c:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8033d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033da0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8033da4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8033da6:	4b0d      	ldr	r3, [pc, #52]	; (8033ddc <find_volume+0x734>)
 8033da8:	881b      	ldrh	r3, [r3, #0]
 8033daa:	3301      	adds	r3, #1
 8033dac:	b29a      	uxth	r2, r3
 8033dae:	4b0b      	ldr	r3, [pc, #44]	; (8033ddc <find_volume+0x734>)
 8033db0:	801a      	strh	r2, [r3, #0]
 8033db2:	4b0a      	ldr	r3, [pc, #40]	; (8033ddc <find_volume+0x734>)
 8033db4:	881a      	ldrh	r2, [r3, #0]
 8033db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033db8:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8033dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033dbc:	2200      	movs	r2, #0
 8033dbe:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8033dc0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8033dc2:	f7fc fe35 	bl	8030a30 <clear_lock>
#endif
	return FR_OK;
 8033dc6:	2300      	movs	r3, #0
}
 8033dc8:	4618      	mov	r0, r3
 8033dca:	3770      	adds	r7, #112	; 0x70
 8033dcc:	46bd      	mov	sp, r7
 8033dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8033dd2:	bf00      	nop
 8033dd4:	41615252 	.word	0x41615252
 8033dd8:	61417272 	.word	0x61417272
 8033ddc:	24002c04 	.word	0x24002c04

08033de0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8033de0:	b580      	push	{r7, lr}
 8033de2:	b084      	sub	sp, #16
 8033de4:	af00      	add	r7, sp, #0
 8033de6:	6078      	str	r0, [r7, #4]
 8033de8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8033dea:	2309      	movs	r3, #9
 8033dec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8033dee:	687b      	ldr	r3, [r7, #4]
 8033df0:	2b00      	cmp	r3, #0
 8033df2:	d02e      	beq.n	8033e52 <validate+0x72>
 8033df4:	687b      	ldr	r3, [r7, #4]
 8033df6:	681b      	ldr	r3, [r3, #0]
 8033df8:	2b00      	cmp	r3, #0
 8033dfa:	d02a      	beq.n	8033e52 <validate+0x72>
 8033dfc:	687b      	ldr	r3, [r7, #4]
 8033dfe:	681b      	ldr	r3, [r3, #0]
 8033e00:	781b      	ldrb	r3, [r3, #0]
 8033e02:	2b00      	cmp	r3, #0
 8033e04:	d025      	beq.n	8033e52 <validate+0x72>
 8033e06:	687b      	ldr	r3, [r7, #4]
 8033e08:	889a      	ldrh	r2, [r3, #4]
 8033e0a:	687b      	ldr	r3, [r7, #4]
 8033e0c:	681b      	ldr	r3, [r3, #0]
 8033e0e:	88db      	ldrh	r3, [r3, #6]
 8033e10:	429a      	cmp	r2, r3
 8033e12:	d11e      	bne.n	8033e52 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8033e14:	687b      	ldr	r3, [r7, #4]
 8033e16:	681b      	ldr	r3, [r3, #0]
 8033e18:	4618      	mov	r0, r3
 8033e1a:	f7fc fc90 	bl	803073e <lock_fs>
 8033e1e:	4603      	mov	r3, r0
 8033e20:	2b00      	cmp	r3, #0
 8033e22:	d014      	beq.n	8033e4e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8033e24:	687b      	ldr	r3, [r7, #4]
 8033e26:	681b      	ldr	r3, [r3, #0]
 8033e28:	785b      	ldrb	r3, [r3, #1]
 8033e2a:	4618      	mov	r0, r3
 8033e2c:	f7fc f986 	bl	803013c <disk_status>
 8033e30:	4603      	mov	r3, r0
 8033e32:	f003 0301 	and.w	r3, r3, #1
 8033e36:	2b00      	cmp	r3, #0
 8033e38:	d102      	bne.n	8033e40 <validate+0x60>
				res = FR_OK;
 8033e3a:	2300      	movs	r3, #0
 8033e3c:	73fb      	strb	r3, [r7, #15]
 8033e3e:	e008      	b.n	8033e52 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8033e40:	687b      	ldr	r3, [r7, #4]
 8033e42:	681b      	ldr	r3, [r3, #0]
 8033e44:	2100      	movs	r1, #0
 8033e46:	4618      	mov	r0, r3
 8033e48:	f7fc fc8f 	bl	803076a <unlock_fs>
 8033e4c:	e001      	b.n	8033e52 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8033e4e:	230f      	movs	r3, #15
 8033e50:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8033e52:	7bfb      	ldrb	r3, [r7, #15]
 8033e54:	2b00      	cmp	r3, #0
 8033e56:	d102      	bne.n	8033e5e <validate+0x7e>
 8033e58:	687b      	ldr	r3, [r7, #4]
 8033e5a:	681b      	ldr	r3, [r3, #0]
 8033e5c:	e000      	b.n	8033e60 <validate+0x80>
 8033e5e:	2300      	movs	r3, #0
 8033e60:	683a      	ldr	r2, [r7, #0]
 8033e62:	6013      	str	r3, [r2, #0]
	return res;
 8033e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8033e66:	4618      	mov	r0, r3
 8033e68:	3710      	adds	r7, #16
 8033e6a:	46bd      	mov	sp, r7
 8033e6c:	bd80      	pop	{r7, pc}
	...

08033e70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8033e70:	b580      	push	{r7, lr}
 8033e72:	b088      	sub	sp, #32
 8033e74:	af00      	add	r7, sp, #0
 8033e76:	60f8      	str	r0, [r7, #12]
 8033e78:	60b9      	str	r1, [r7, #8]
 8033e7a:	4613      	mov	r3, r2
 8033e7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8033e7e:	68bb      	ldr	r3, [r7, #8]
 8033e80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8033e82:	f107 0310 	add.w	r3, r7, #16
 8033e86:	4618      	mov	r0, r3
 8033e88:	f7ff fb65 	bl	8033556 <get_ldnumber>
 8033e8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8033e8e:	69fb      	ldr	r3, [r7, #28]
 8033e90:	2b00      	cmp	r3, #0
 8033e92:	da01      	bge.n	8033e98 <f_mount+0x28>
 8033e94:	230b      	movs	r3, #11
 8033e96:	e048      	b.n	8033f2a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8033e98:	4a26      	ldr	r2, [pc, #152]	; (8033f34 <f_mount+0xc4>)
 8033e9a:	69fb      	ldr	r3, [r7, #28]
 8033e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8033ea0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8033ea2:	69bb      	ldr	r3, [r7, #24]
 8033ea4:	2b00      	cmp	r3, #0
 8033ea6:	d00f      	beq.n	8033ec8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8033ea8:	69b8      	ldr	r0, [r7, #24]
 8033eaa:	f7fc fdc1 	bl	8030a30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8033eae:	69bb      	ldr	r3, [r7, #24]
 8033eb0:	699b      	ldr	r3, [r3, #24]
 8033eb2:	4618      	mov	r0, r3
 8033eb4:	f001 ff79 	bl	8035daa <ff_del_syncobj>
 8033eb8:	4603      	mov	r3, r0
 8033eba:	2b00      	cmp	r3, #0
 8033ebc:	d101      	bne.n	8033ec2 <f_mount+0x52>
 8033ebe:	2302      	movs	r3, #2
 8033ec0:	e033      	b.n	8033f2a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8033ec2:	69bb      	ldr	r3, [r7, #24]
 8033ec4:	2200      	movs	r2, #0
 8033ec6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8033ec8:	68fb      	ldr	r3, [r7, #12]
 8033eca:	2b00      	cmp	r3, #0
 8033ecc:	d00f      	beq.n	8033eee <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8033ece:	68fb      	ldr	r3, [r7, #12]
 8033ed0:	2200      	movs	r2, #0
 8033ed2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8033ed4:	69fb      	ldr	r3, [r7, #28]
 8033ed6:	b2da      	uxtb	r2, r3
 8033ed8:	68fb      	ldr	r3, [r7, #12]
 8033eda:	3318      	adds	r3, #24
 8033edc:	4619      	mov	r1, r3
 8033ede:	4610      	mov	r0, r2
 8033ee0:	f001 ff44 	bl	8035d6c <ff_cre_syncobj>
 8033ee4:	4603      	mov	r3, r0
 8033ee6:	2b00      	cmp	r3, #0
 8033ee8:	d101      	bne.n	8033eee <f_mount+0x7e>
 8033eea:	2302      	movs	r3, #2
 8033eec:	e01d      	b.n	8033f2a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8033eee:	68fa      	ldr	r2, [r7, #12]
 8033ef0:	4910      	ldr	r1, [pc, #64]	; (8033f34 <f_mount+0xc4>)
 8033ef2:	69fb      	ldr	r3, [r7, #28]
 8033ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8033ef8:	68fb      	ldr	r3, [r7, #12]
 8033efa:	2b00      	cmp	r3, #0
 8033efc:	d002      	beq.n	8033f04 <f_mount+0x94>
 8033efe:	79fb      	ldrb	r3, [r7, #7]
 8033f00:	2b01      	cmp	r3, #1
 8033f02:	d001      	beq.n	8033f08 <f_mount+0x98>
 8033f04:	2300      	movs	r3, #0
 8033f06:	e010      	b.n	8033f2a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8033f08:	f107 010c 	add.w	r1, r7, #12
 8033f0c:	f107 0308 	add.w	r3, r7, #8
 8033f10:	2200      	movs	r2, #0
 8033f12:	4618      	mov	r0, r3
 8033f14:	f7ff fbc8 	bl	80336a8 <find_volume>
 8033f18:	4603      	mov	r3, r0
 8033f1a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8033f1c:	68fb      	ldr	r3, [r7, #12]
 8033f1e:	7dfa      	ldrb	r2, [r7, #23]
 8033f20:	4611      	mov	r1, r2
 8033f22:	4618      	mov	r0, r3
 8033f24:	f7fc fc21 	bl	803076a <unlock_fs>
 8033f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8033f2a:	4618      	mov	r0, r3
 8033f2c:	3720      	adds	r7, #32
 8033f2e:	46bd      	mov	sp, r7
 8033f30:	bd80      	pop	{r7, pc}
 8033f32:	bf00      	nop
 8033f34:	24002c00 	.word	0x24002c00

08033f38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8033f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8033f3c:	b0aa      	sub	sp, #168	; 0xa8
 8033f3e:	af00      	add	r7, sp, #0
 8033f40:	6278      	str	r0, [r7, #36]	; 0x24
 8033f42:	6239      	str	r1, [r7, #32]
 8033f44:	4613      	mov	r3, r2
 8033f46:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8033f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f4a:	2b00      	cmp	r3, #0
 8033f4c:	d101      	bne.n	8033f52 <f_open+0x1a>
 8033f4e:	2309      	movs	r3, #9
 8033f50:	e2e6      	b.n	8034520 <f_open+0x5e8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8033f52:	7ffb      	ldrb	r3, [r7, #31]
 8033f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8033f58:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 8033f5a:	7ffb      	ldrb	r3, [r7, #31]
 8033f5c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8033f60:	f107 0020 	add.w	r0, r7, #32
 8033f64:	461a      	mov	r2, r3
 8033f66:	f7ff fb9f 	bl	80336a8 <find_volume>
 8033f6a:	4603      	mov	r3, r0
 8033f6c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	if (res == FR_OK) {
 8033f70:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8033f74:	2b00      	cmp	r3, #0
 8033f76:	f040 82c3 	bne.w	8034500 <f_open+0x5c8>
		dj.obj.fs = fs;
 8033f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033f7c:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
 8033f7e:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8033f82:	f001 ff3e 	bl	8035e02 <ff_memalloc>
 8033f86:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8033f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8033f8e:	2b00      	cmp	r3, #0
 8033f90:	d106      	bne.n	8033fa0 <f_open+0x68>
 8033f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033f94:	2111      	movs	r1, #17
 8033f96:	4618      	mov	r0, r3
 8033f98:	f7fc fbe7 	bl	803076a <unlock_fs>
 8033f9c:	2311      	movs	r3, #17
 8033f9e:	e2bf      	b.n	8034520 <f_open+0x5e8>
 8033fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033fa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8033fa6:	611a      	str	r2, [r3, #16]
 8033fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8033faa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8033fae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8033fb2:	6153      	str	r3, [r2, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8033fb4:	6a3b      	ldr	r3, [r7, #32]
 8033fb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8033fba:	4619      	mov	r1, r3
 8033fbc:	4610      	mov	r0, r2
 8033fbe:	f7ff f9b3 	bl	8033328 <follow_path>
 8033fc2:	4603      	mov	r3, r0
 8033fc4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8033fc8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8033fcc:	2b00      	cmp	r3, #0
 8033fce:	d11a      	bne.n	8034006 <f_open+0xce>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8033fd0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8033fd4:	b25b      	sxtb	r3, r3
 8033fd6:	2b00      	cmp	r3, #0
 8033fd8:	da03      	bge.n	8033fe2 <f_open+0xaa>
				res = FR_INVALID_NAME;
 8033fda:	2306      	movs	r3, #6
 8033fdc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8033fe0:	e011      	b.n	8034006 <f_open+0xce>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8033fe2:	7ffb      	ldrb	r3, [r7, #31]
 8033fe4:	f023 0301 	bic.w	r3, r3, #1
 8033fe8:	2b00      	cmp	r3, #0
 8033fea:	bf14      	ite	ne
 8033fec:	2301      	movne	r3, #1
 8033fee:	2300      	moveq	r3, #0
 8033ff0:	b2db      	uxtb	r3, r3
 8033ff2:	461a      	mov	r2, r3
 8033ff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8033ff8:	4611      	mov	r1, r2
 8033ffa:	4618      	mov	r0, r3
 8033ffc:	f7fc fbd0 	bl	80307a0 <chk_lock>
 8034000:	4603      	mov	r3, r0
 8034002:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8034006:	7ffb      	ldrb	r3, [r7, #31]
 8034008:	f003 031c 	and.w	r3, r3, #28
 803400c:	2b00      	cmp	r3, #0
 803400e:	f000 8117 	beq.w	8034240 <f_open+0x308>
			if (res != FR_OK) {					/* No file, create new */
 8034012:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8034016:	2b00      	cmp	r3, #0
 8034018:	d017      	beq.n	803404a <f_open+0x112>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 803401a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 803401e:	2b04      	cmp	r3, #4
 8034020:	d10e      	bne.n	8034040 <f_open+0x108>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8034022:	f7fc fc19 	bl	8030858 <enq_lock>
 8034026:	4603      	mov	r3, r0
 8034028:	2b00      	cmp	r3, #0
 803402a:	d006      	beq.n	803403a <f_open+0x102>
 803402c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8034030:	4618      	mov	r0, r3
 8034032:	f7fe fc85 	bl	8032940 <dir_register>
 8034036:	4603      	mov	r3, r0
 8034038:	e000      	b.n	803403c <f_open+0x104>
 803403a:	2312      	movs	r3, #18
 803403c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8034040:	7ffb      	ldrb	r3, [r7, #31]
 8034042:	f043 0308 	orr.w	r3, r3, #8
 8034046:	77fb      	strb	r3, [r7, #31]
 8034048:	e011      	b.n	803406e <f_open+0x136>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 803404a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 803404e:	f003 0311 	and.w	r3, r3, #17
 8034052:	2b00      	cmp	r3, #0
 8034054:	d003      	beq.n	803405e <f_open+0x126>
					res = FR_DENIED;
 8034056:	2307      	movs	r3, #7
 8034058:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 803405c:	e007      	b.n	803406e <f_open+0x136>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 803405e:	7ffb      	ldrb	r3, [r7, #31]
 8034060:	f003 0304 	and.w	r3, r3, #4
 8034064:	2b00      	cmp	r3, #0
 8034066:	d002      	beq.n	803406e <f_open+0x136>
 8034068:	2308      	movs	r3, #8
 803406a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 803406e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8034072:	2b00      	cmp	r3, #0
 8034074:	f040 8100 	bne.w	8034278 <f_open+0x340>
 8034078:	7ffb      	ldrb	r3, [r7, #31]
 803407a:	f003 0308 	and.w	r3, r3, #8
 803407e:	2b00      	cmp	r3, #0
 8034080:	f000 80fa 	beq.w	8034278 <f_open+0x340>
				dw = GET_FATTIME();
 8034084:	f7f8 fc4c 	bl	802c920 <get_fattime>
 8034088:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 803408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803408e:	781b      	ldrb	r3, [r3, #0]
 8034090:	2b04      	cmp	r3, #4
 8034092:	f040 8085 	bne.w	80341a0 <f_open+0x268>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8034096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803409a:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 803409c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803409e:	695b      	ldr	r3, [r3, #20]
 80340a0:	3334      	adds	r3, #52	; 0x34
 80340a2:	4618      	mov	r0, r3
 80340a4:	f7fc f900 	bl	80302a8 <ld_dword>
 80340a8:	4602      	mov	r2, r0
 80340aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80340ac:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80340ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80340b0:	695b      	ldr	r3, [r3, #20]
 80340b2:	3338      	adds	r3, #56	; 0x38
 80340b4:	4618      	mov	r0, r3
 80340b6:	f7fc f91a 	bl	80302ee <ld_qword>
 80340ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80340bc:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80340c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80340c2:	695b      	ldr	r3, [r3, #20]
 80340c4:	3321      	adds	r3, #33	; 0x21
 80340c6:	781b      	ldrb	r3, [r3, #0]
 80340c8:	f003 0302 	and.w	r3, r3, #2
 80340cc:	b2db      	uxtb	r3, r3
 80340ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80340d0:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 80340d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80340d4:	2200      	movs	r2, #0
 80340d6:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80340d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80340da:	695b      	ldr	r3, [r3, #20]
 80340dc:	3308      	adds	r3, #8
 80340de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80340e2:	4618      	mov	r0, r3
 80340e4:	f7fc f9f9 	bl	80304da <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80340e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80340ea:	695b      	ldr	r3, [r3, #20]
 80340ec:	f103 0214 	add.w	r2, r3, #20
 80340f0:	2300      	movs	r3, #0
 80340f2:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80340f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80340f6:	695b      	ldr	r3, [r3, #20]
 80340f8:	330c      	adds	r3, #12
 80340fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80340fe:	4618      	mov	r0, r3
 8034100:	f7fc f9eb 	bl	80304da <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8034104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034106:	695b      	ldr	r3, [r3, #20]
 8034108:	f103 0215 	add.w	r2, r3, #21
 803410c:	2300      	movs	r3, #0
 803410e:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8034110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034112:	695b      	ldr	r3, [r3, #20]
 8034114:	1d1a      	adds	r2, r3, #4
 8034116:	2320      	movs	r3, #32
 8034118:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 803411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803411c:	695b      	ldr	r3, [r3, #20]
 803411e:	3334      	adds	r3, #52	; 0x34
 8034120:	2100      	movs	r1, #0
 8034122:	4618      	mov	r0, r3
 8034124:	f7fc f9d9 	bl	80304da <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8034128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803412a:	695b      	ldr	r3, [r3, #20]
 803412c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8034130:	f04f 0200 	mov.w	r2, #0
 8034134:	f04f 0300 	mov.w	r3, #0
 8034138:	4608      	mov	r0, r1
 803413a:	f7fc f9fa 	bl	8030532 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 803413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034140:	695b      	ldr	r3, [r3, #20]
 8034142:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8034146:	f04f 0200 	mov.w	r2, #0
 803414a:	f04f 0300 	mov.w	r3, #0
 803414e:	4608      	mov	r0, r1
 8034150:	f7fc f9ef 	bl	8030532 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8034154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034156:	695b      	ldr	r3, [r3, #20]
 8034158:	f103 0221 	add.w	r2, r3, #33	; 0x21
 803415c:	2301      	movs	r3, #1
 803415e:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 8034160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8034164:	4618      	mov	r0, r3
 8034166:	f7fe f939 	bl	80323dc <store_xdir>
 803416a:	4603      	mov	r3, r0
 803416c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8034170:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8034174:	2b00      	cmp	r3, #0
 8034176:	d17f      	bne.n	8034278 <f_open+0x340>
 8034178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803417a:	689b      	ldr	r3, [r3, #8]
 803417c:	2b00      	cmp	r3, #0
 803417e:	d07b      	beq.n	8034278 <f_open+0x340>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8034180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8034182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034184:	689b      	ldr	r3, [r3, #8]
 8034186:	2200      	movs	r2, #0
 8034188:	4619      	mov	r1, r3
 803418a:	f7fd f949 	bl	8031420 <remove_chain>
 803418e:	4603      	mov	r3, r0
 8034190:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8034194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034196:	689b      	ldr	r3, [r3, #8]
 8034198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803419a:	3b01      	subs	r3, #1
 803419c:	61d3      	str	r3, [r2, #28]
 803419e:	e06b      	b.n	8034278 <f_open+0x340>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80341a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80341a2:	330e      	adds	r3, #14
 80341a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80341a8:	4618      	mov	r0, r3
 80341aa:	f7fc f996 	bl	80304da <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80341ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80341b0:	3316      	adds	r3, #22
 80341b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80341b6:	4618      	mov	r0, r3
 80341b8:	f7fc f98f 	bl	80304da <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80341bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80341be:	f103 020b 	add.w	r2, r3, #11
 80341c2:	2320      	movs	r3, #32
 80341c4:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80341c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80341c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80341ca:	4619      	mov	r1, r3
 80341cc:	4610      	mov	r0, r2
 80341ce:	f7fd fcfe 	bl	8031bce <ld_clust>
 80341d2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80341d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80341d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80341da:	2200      	movs	r2, #0
 80341dc:	4619      	mov	r1, r3
 80341de:	f7fd fd15 	bl	8031c0c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80341e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80341e4:	331c      	adds	r3, #28
 80341e6:	2100      	movs	r1, #0
 80341e8:	4618      	mov	r0, r3
 80341ea:	f7fc f976 	bl	80304da <st_dword>
					fs->wflag = 1;
 80341ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80341f0:	2301      	movs	r3, #1
 80341f2:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80341f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80341f8:	2b00      	cmp	r3, #0
 80341fa:	d03d      	beq.n	8034278 <f_open+0x340>
						dw = fs->winsect;
 80341fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80341fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8034200:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						res = remove_chain(&dj.obj, cl, 0);
 8034204:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8034208:	2200      	movs	r2, #0
 803420a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 803420e:	4618      	mov	r0, r3
 8034210:	f7fd f906 	bl	8031420 <remove_chain>
 8034214:	4603      	mov	r3, r0
 8034216:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						if (res == FR_OK) {
 803421a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 803421e:	2b00      	cmp	r3, #0
 8034220:	d12a      	bne.n	8034278 <f_open+0x340>
							res = move_window(fs, dw);
 8034222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034224:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8034228:	4618      	mov	r0, r3
 803422a:	f7fc fc69 	bl	8030b00 <move_window>
 803422e:	4603      	mov	r3, r0
 8034230:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8034234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 803423a:	3b01      	subs	r3, #1
 803423c:	61d3      	str	r3, [r2, #28]
 803423e:	e01b      	b.n	8034278 <f_open+0x340>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8034240:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8034244:	2b00      	cmp	r3, #0
 8034246:	d117      	bne.n	8034278 <f_open+0x340>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8034248:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 803424c:	f003 0310 	and.w	r3, r3, #16
 8034250:	2b00      	cmp	r3, #0
 8034252:	d003      	beq.n	803425c <f_open+0x324>
					res = FR_NO_FILE;
 8034254:	2304      	movs	r3, #4
 8034256:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 803425a:	e00d      	b.n	8034278 <f_open+0x340>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 803425c:	7ffb      	ldrb	r3, [r7, #31]
 803425e:	f003 0302 	and.w	r3, r3, #2
 8034262:	2b00      	cmp	r3, #0
 8034264:	d008      	beq.n	8034278 <f_open+0x340>
 8034266:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 803426a:	f003 0301 	and.w	r3, r3, #1
 803426e:	2b00      	cmp	r3, #0
 8034270:	d002      	beq.n	8034278 <f_open+0x340>
						res = FR_DENIED;
 8034272:	2307      	movs	r3, #7
 8034274:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					}
				}
			}
		}
		if (res == FR_OK) {
 8034278:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 803427c:	2b00      	cmp	r3, #0
 803427e:	d128      	bne.n	80342d2 <f_open+0x39a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8034280:	7ffb      	ldrb	r3, [r7, #31]
 8034282:	f003 0308 	and.w	r3, r3, #8
 8034286:	2b00      	cmp	r3, #0
 8034288:	d003      	beq.n	8034292 <f_open+0x35a>
				mode |= FA_MODIFIED;
 803428a:	7ffb      	ldrb	r3, [r7, #31]
 803428c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8034290:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8034292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8034296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034298:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 803429a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 803429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803429e:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80342a0:	7ffb      	ldrb	r3, [r7, #31]
 80342a2:	f023 0301 	bic.w	r3, r3, #1
 80342a6:	2b00      	cmp	r3, #0
 80342a8:	bf14      	ite	ne
 80342aa:	2301      	movne	r3, #1
 80342ac:	2300      	moveq	r3, #0
 80342ae:	b2db      	uxtb	r3, r3
 80342b0:	461a      	mov	r2, r3
 80342b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80342b6:	4611      	mov	r1, r2
 80342b8:	4618      	mov	r0, r3
 80342ba:	f7fc faef 	bl	803089c <inc_lock>
 80342be:	4602      	mov	r2, r0
 80342c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80342c2:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80342c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80342c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80342c8:	2b00      	cmp	r3, #0
 80342ca:	d102      	bne.n	80342d2 <f_open+0x39a>
 80342cc:	2302      	movs	r3, #2
 80342ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
		}
#endif

		if (res == FR_OK) {
 80342d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80342d6:	2b00      	cmp	r3, #0
 80342d8:	f040 810e 	bne.w	80344f8 <f_open+0x5c0>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80342dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80342de:	781b      	ldrb	r3, [r3, #0]
 80342e0:	2b04      	cmp	r3, #4
 80342e2:	d12d      	bne.n	8034340 <f_open+0x408>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80342e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80342e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80342e8:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80342ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80342ee:	4613      	mov	r3, r2
 80342f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80342f4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80342f8:	431a      	orrs	r2, r3
 80342fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80342fc:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80342fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8034300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034302:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8034304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034306:	695b      	ldr	r3, [r3, #20]
 8034308:	3334      	adds	r3, #52	; 0x34
 803430a:	4618      	mov	r0, r3
 803430c:	f7fb ffcc 	bl	80302a8 <ld_dword>
 8034310:	4602      	mov	r2, r0
 8034312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034314:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8034316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034318:	695b      	ldr	r3, [r3, #20]
 803431a:	3338      	adds	r3, #56	; 0x38
 803431c:	4618      	mov	r0, r3
 803431e:	f7fb ffe6 	bl	80302ee <ld_qword>
 8034322:	4602      	mov	r2, r0
 8034324:	460b      	mov	r3, r1
 8034326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8034328:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 803432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803432e:	695b      	ldr	r3, [r3, #20]
 8034330:	3321      	adds	r3, #33	; 0x21
 8034332:	781b      	ldrb	r3, [r3, #0]
 8034334:	f003 0302 	and.w	r3, r3, #2
 8034338:	b2da      	uxtb	r2, r3
 803433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803433c:	71da      	strb	r2, [r3, #7]
 803433e:	e016      	b.n	803436e <f_open+0x436>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8034340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8034344:	4619      	mov	r1, r3
 8034346:	4610      	mov	r0, r2
 8034348:	f7fd fc41 	bl	8031bce <ld_clust>
 803434c:	4602      	mov	r2, r0
 803434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034350:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8034352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8034354:	331c      	adds	r3, #28
 8034356:	4618      	mov	r0, r3
 8034358:	f7fb ffa6 	bl	80302a8 <ld_dword>
 803435c:	4603      	mov	r3, r0
 803435e:	2200      	movs	r2, #0
 8034360:	613b      	str	r3, [r7, #16]
 8034362:	617a      	str	r2, [r7, #20]
 8034364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034366:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 803436a:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 803436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034370:	2200      	movs	r2, #0
 8034372:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8034374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034378:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 803437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803437c:	88da      	ldrh	r2, [r3, #6]
 803437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034380:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8034382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034384:	7ffa      	ldrb	r2, [r7, #31]
 8034386:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 803438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803438c:	2200      	movs	r2, #0
 803438e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8034392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034394:	2200      	movs	r2, #0
 8034396:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8034398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803439a:	f04f 0200 	mov.w	r2, #0
 803439e:	f04f 0300 	mov.w	r3, #0
 80343a2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80343a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80343a8:	3354      	adds	r3, #84	; 0x54
 80343aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80343ae:	2100      	movs	r1, #0
 80343b0:	4618      	mov	r0, r3
 80343b2:	f7fc f967 	bl	8030684 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80343b6:	7ffb      	ldrb	r3, [r7, #31]
 80343b8:	f003 0320 	and.w	r3, r3, #32
 80343bc:	2b00      	cmp	r3, #0
 80343be:	f000 809b 	beq.w	80344f8 <f_open+0x5c0>
 80343c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80343c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80343c8:	4313      	orrs	r3, r2
 80343ca:	f000 8095 	beq.w	80344f8 <f_open+0x5c0>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80343ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80343d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80343d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80343d6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80343da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80343dc:	895b      	ldrh	r3, [r3, #10]
 80343de:	461a      	mov	r2, r3
 80343e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80343e2:	899b      	ldrh	r3, [r3, #12]
 80343e4:	fb02 f303 	mul.w	r3, r2, r3
 80343e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80343ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80343ee:	689b      	ldr	r3, [r3, #8]
 80343f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80343f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80343f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80343fa:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 80343fe:	e023      	b.n	8034448 <f_open+0x510>
					clst = get_fat(&fp->obj, clst);
 8034400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034402:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8034406:	4618      	mov	r0, r3
 8034408:	f7fc fc38 	bl	8030c7c <get_fat>
 803440c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
					if (clst <= 1) res = FR_INT_ERR;
 8034410:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8034414:	2b01      	cmp	r3, #1
 8034416:	d802      	bhi.n	803441e <f_open+0x4e6>
 8034418:	2302      	movs	r3, #2
 803441a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 803441e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8034422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8034426:	d102      	bne.n	803442e <f_open+0x4f6>
 8034428:	2301      	movs	r3, #1
 803442a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 803442e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8034432:	2200      	movs	r2, #0
 8034434:	4698      	mov	r8, r3
 8034436:	4691      	mov	r9, r2
 8034438:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 803443c:	ebb2 0a08 	subs.w	sl, r2, r8
 8034440:	eb63 0b09 	sbc.w	fp, r3, r9
 8034444:	e9c7 ab26 	strd	sl, fp, [r7, #152]	; 0x98
 8034448:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 803444c:	2b00      	cmp	r3, #0
 803444e:	d10a      	bne.n	8034466 <f_open+0x52e>
 8034450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8034454:	2200      	movs	r2, #0
 8034456:	461c      	mov	r4, r3
 8034458:	4615      	mov	r5, r2
 803445a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 803445e:	4294      	cmp	r4, r2
 8034460:	eb75 0303 	sbcs.w	r3, r5, r3
 8034464:	d3cc      	bcc.n	8034400 <f_open+0x4c8>
				}
				fp->clust = clst;
 8034466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034468:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 803446c:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 803446e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8034472:	2b00      	cmp	r3, #0
 8034474:	d140      	bne.n	80344f8 <f_open+0x5c0>
 8034476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034478:	899b      	ldrh	r3, [r3, #12]
 803447a:	b29b      	uxth	r3, r3
 803447c:	2200      	movs	r2, #0
 803447e:	60bb      	str	r3, [r7, #8]
 8034480:	60fa      	str	r2, [r7, #12]
 8034482:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8034486:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 803448a:	f7eb ffa9 	bl	80203e0 <__aeabi_uldivmod>
 803448e:	4313      	orrs	r3, r2
 8034490:	d032      	beq.n	80344f8 <f_open+0x5c0>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8034492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034494:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8034498:	4618      	mov	r0, r3
 803449a:	f7fc fbcf 	bl	8030c3c <clust2sect>
 803449e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 80344a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80344a6:	2b00      	cmp	r3, #0
 80344a8:	d103      	bne.n	80344b2 <f_open+0x57a>
						res = FR_INT_ERR;
 80344aa:	2302      	movs	r3, #2
 80344ac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80344b0:	e022      	b.n	80344f8 <f_open+0x5c0>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80344b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80344b4:	899b      	ldrh	r3, [r3, #12]
 80344b6:	b29b      	uxth	r3, r3
 80344b8:	2200      	movs	r2, #0
 80344ba:	603b      	str	r3, [r7, #0]
 80344bc:	607a      	str	r2, [r7, #4]
 80344be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80344c2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80344c6:	f7eb ff8b 	bl	80203e0 <__aeabi_uldivmod>
 80344ca:	4602      	mov	r2, r0
 80344cc:	460b      	mov	r3, r1
 80344ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80344d2:	441a      	add	r2, r3
 80344d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80344d6:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80344d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80344da:	7858      	ldrb	r0, [r3, #1]
 80344dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80344de:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80344e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80344e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80344e6:	2301      	movs	r3, #1
 80344e8:	f7fb fe68 	bl	80301bc <disk_read>
 80344ec:	4603      	mov	r3, r0
 80344ee:	2b00      	cmp	r3, #0
 80344f0:	d002      	beq.n	80344f8 <f_open+0x5c0>
 80344f2:	2301      	movs	r3, #1
 80344f4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
#endif
		}

		FREE_NAMBUF();
 80344f8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80344fc:	f001 fc8d 	bl	8035e1a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8034500:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8034504:	2b00      	cmp	r3, #0
 8034506:	d002      	beq.n	803450e <f_open+0x5d6>
 8034508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803450a:	2200      	movs	r2, #0
 803450c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 803450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034510:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8034514:	4611      	mov	r1, r2
 8034516:	4618      	mov	r0, r3
 8034518:	f7fc f927 	bl	803076a <unlock_fs>
 803451c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8034520:	4618      	mov	r0, r3
 8034522:	37a8      	adds	r7, #168	; 0xa8
 8034524:	46bd      	mov	sp, r7
 8034526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0803452a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 803452a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 803452e:	b098      	sub	sp, #96	; 0x60
 8034530:	af00      	add	r7, sp, #0
 8034532:	62f8      	str	r0, [r7, #44]	; 0x2c
 8034534:	62b9      	str	r1, [r7, #40]	; 0x28
 8034536:	627a      	str	r2, [r7, #36]	; 0x24
 8034538:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 803453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803453c:	64fb      	str	r3, [r7, #76]	; 0x4c


	*br = 0;	/* Clear read byte counter */
 803453e:	6a3a      	ldr	r2, [r7, #32]
 8034540:	2300      	movs	r3, #0
 8034542:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8034544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 803454a:	4619      	mov	r1, r3
 803454c:	4610      	mov	r0, r2
 803454e:	f7ff fc47 	bl	8033de0 <validate>
 8034552:	4603      	mov	r3, r0
 8034554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8034558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 803455c:	2b00      	cmp	r3, #0
 803455e:	d108      	bne.n	8034572 <f_read+0x48>
 8034560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034562:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8034566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 803456a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 803456e:	2b00      	cmp	r3, #0
 8034570:	d009      	beq.n	8034586 <f_read+0x5c>
 8034572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034574:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8034578:	4611      	mov	r1, r2
 803457a:	4618      	mov	r0, r3
 803457c:	f7fc f8f5 	bl	803076a <unlock_fs>
 8034580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8034584:	e193      	b.n	80348ae <f_read+0x384>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8034586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034588:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 803458c:	f003 0301 	and.w	r3, r3, #1
 8034590:	2b00      	cmp	r3, #0
 8034592:	d106      	bne.n	80345a2 <f_read+0x78>
 8034594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034596:	2107      	movs	r1, #7
 8034598:	4618      	mov	r0, r3
 803459a:	f7fc f8e6 	bl	803076a <unlock_fs>
 803459e:	2307      	movs	r3, #7
 80345a0:	e185      	b.n	80348ae <f_read+0x384>
	remain = fp->obj.objsize - fp->fptr;
 80345a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80345a4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80345a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80345aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80345ae:	ebb0 0802 	subs.w	r8, r0, r2
 80345b2:	eb61 0903 	sbc.w	r9, r1, r3
 80345b6:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80345ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80345bc:	2200      	movs	r2, #0
 80345be:	461c      	mov	r4, r3
 80345c0:	4615      	mov	r5, r2
 80345c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80345c6:	42a2      	cmp	r2, r4
 80345c8:	41ab      	sbcs	r3, r5
 80345ca:	f080 8166 	bcs.w	803489a <f_read+0x370>
 80345ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80345d0:	627b      	str	r3, [r7, #36]	; 0x24

	for ( ;  btr;								/* Repeat until all data read */
 80345d2:	e162      	b.n	803489a <f_read+0x370>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80345d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80345d6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80345da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80345dc:	899b      	ldrh	r3, [r3, #12]
 80345de:	b29b      	uxth	r3, r3
 80345e0:	2200      	movs	r2, #0
 80345e2:	61bb      	str	r3, [r7, #24]
 80345e4:	61fa      	str	r2, [r7, #28]
 80345e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80345ea:	f7eb fef9 	bl	80203e0 <__aeabi_uldivmod>
 80345ee:	4313      	orrs	r3, r2
 80345f0:	f040 8107 	bne.w	8034802 <f_read+0x2d8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80345f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80345f6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80345fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80345fc:	899b      	ldrh	r3, [r3, #12]
 80345fe:	b29b      	uxth	r3, r3
 8034600:	2200      	movs	r2, #0
 8034602:	613b      	str	r3, [r7, #16]
 8034604:	617a      	str	r2, [r7, #20]
 8034606:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 803460a:	f7eb fee9 	bl	80203e0 <__aeabi_uldivmod>
 803460e:	4602      	mov	r2, r0
 8034610:	460b      	mov	r3, r1
 8034612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034614:	895b      	ldrh	r3, [r3, #10]
 8034616:	3b01      	subs	r3, #1
 8034618:	4013      	ands	r3, r2
 803461a:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 803461c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803461e:	2b00      	cmp	r3, #0
 8034620:	d13c      	bne.n	803469c <f_read+0x172>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8034622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034624:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034628:	4313      	orrs	r3, r2
 803462a:	d103      	bne.n	8034634 <f_read+0x10a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 803462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803462e:	689b      	ldr	r3, [r3, #8]
 8034630:	65bb      	str	r3, [r7, #88]	; 0x58
 8034632:	e013      	b.n	803465c <f_read+0x132>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8034634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8034638:	2b00      	cmp	r3, #0
 803463a:	d007      	beq.n	803464c <f_read+0x122>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 803463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803463e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8034644:	f7fd f8a1 	bl	803178a <clmt_clust>
 8034648:	65b8      	str	r0, [r7, #88]	; 0x58
 803464a:	e007      	b.n	803465c <f_read+0x132>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 803464c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034652:	4619      	mov	r1, r3
 8034654:	4610      	mov	r0, r2
 8034656:	f7fc fb11 	bl	8030c7c <get_fat>
 803465a:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 803465c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803465e:	2b01      	cmp	r3, #1
 8034660:	d80a      	bhi.n	8034678 <f_read+0x14e>
 8034662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034664:	2202      	movs	r2, #2
 8034666:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 803466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803466c:	2102      	movs	r1, #2
 803466e:	4618      	mov	r0, r3
 8034670:	f7fc f87b 	bl	803076a <unlock_fs>
 8034674:	2302      	movs	r3, #2
 8034676:	e11a      	b.n	80348ae <f_read+0x384>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8034678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803467a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803467e:	d10a      	bne.n	8034696 <f_read+0x16c>
 8034680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034682:	2201      	movs	r2, #1
 8034684:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8034688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803468a:	2101      	movs	r1, #1
 803468c:	4618      	mov	r0, r3
 803468e:	f7fc f86c 	bl	803076a <unlock_fs>
 8034692:	2301      	movs	r3, #1
 8034694:	e10b      	b.n	80348ae <f_read+0x384>
				fp->clust = clst;				/* Update current cluster */
 8034696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034698:	6dba      	ldr	r2, [r7, #88]	; 0x58
 803469a:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 803469c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80346a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80346a2:	4619      	mov	r1, r3
 80346a4:	4610      	mov	r0, r2
 80346a6:	f7fc fac9 	bl	8030c3c <clust2sect>
 80346aa:	63b8      	str	r0, [r7, #56]	; 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 80346ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80346ae:	2b00      	cmp	r3, #0
 80346b0:	d10a      	bne.n	80346c8 <f_read+0x19e>
 80346b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80346b4:	2202      	movs	r2, #2
 80346b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80346ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80346bc:	2102      	movs	r1, #2
 80346be:	4618      	mov	r0, r3
 80346c0:	f7fc f853 	bl	803076a <unlock_fs>
 80346c4:	2302      	movs	r3, #2
 80346c6:	e0f2      	b.n	80348ae <f_read+0x384>
			sect += csect;
 80346c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80346ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80346cc:	4413      	add	r3, r2
 80346ce:	63bb      	str	r3, [r7, #56]	; 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80346d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80346d2:	899b      	ldrh	r3, [r3, #12]
 80346d4:	461a      	mov	r2, r3
 80346d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80346d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80346dc:	653b      	str	r3, [r7, #80]	; 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 80346de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80346e0:	2b00      	cmp	r3, #0
 80346e2:	d048      	beq.n	8034776 <f_read+0x24c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80346e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80346e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80346e8:	4413      	add	r3, r2
 80346ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80346ec:	8952      	ldrh	r2, [r2, #10]
 80346ee:	4293      	cmp	r3, r2
 80346f0:	d905      	bls.n	80346fe <f_read+0x1d4>
					cc = fs->csize - csect;
 80346f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80346f4:	895b      	ldrh	r3, [r3, #10]
 80346f6:	461a      	mov	r2, r3
 80346f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80346fa:	1ad3      	subs	r3, r2, r3
 80346fc:	653b      	str	r3, [r7, #80]	; 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80346fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034700:	7858      	ldrb	r0, [r3, #1]
 8034702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8034704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8034706:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8034708:	f7fb fd58 	bl	80301bc <disk_read>
 803470c:	4603      	mov	r3, r0
 803470e:	2b00      	cmp	r3, #0
 8034710:	d00a      	beq.n	8034728 <f_read+0x1fe>
 8034712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034714:	2201      	movs	r2, #1
 8034716:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 803471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803471c:	2101      	movs	r1, #1
 803471e:	4618      	mov	r0, r3
 8034720:	f7fc f823 	bl	803076a <unlock_fs>
 8034724:	2301      	movs	r3, #1
 8034726:	e0c2      	b.n	80348ae <f_read+0x384>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8034728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803472a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 803472e:	b25b      	sxtb	r3, r3
 8034730:	2b00      	cmp	r3, #0
 8034732:	da18      	bge.n	8034766 <f_read+0x23c>
 8034734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8034738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803473a:	1ad3      	subs	r3, r2, r3
 803473c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 803473e:	429a      	cmp	r2, r3
 8034740:	d911      	bls.n	8034766 <f_read+0x23c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8034742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8034746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8034748:	1ad3      	subs	r3, r2, r3
 803474a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803474c:	8992      	ldrh	r2, [r2, #12]
 803474e:	fb02 f303 	mul.w	r3, r2, r3
 8034752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8034754:	18d0      	adds	r0, r2, r3
 8034756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034758:	f103 0154 	add.w	r1, r3, #84	; 0x54
 803475c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803475e:	899b      	ldrh	r3, [r3, #12]
 8034760:	461a      	mov	r2, r3
 8034762:	f7fb ff6e 	bl	8030642 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8034766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034768:	899b      	ldrh	r3, [r3, #12]
 803476a:	461a      	mov	r2, r3
 803476c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803476e:	fb02 f303 	mul.w	r3, r2, r3
 8034772:	657b      	str	r3, [r7, #84]	; 0x54
				continue;
 8034774:	e071      	b.n	803485a <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8034776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803477a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803477c:	429a      	cmp	r2, r3
 803477e:	d03d      	beq.n	80347fc <f_read+0x2d2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8034780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034786:	b25b      	sxtb	r3, r3
 8034788:	2b00      	cmp	r3, #0
 803478a:	da20      	bge.n	80347ce <f_read+0x2a4>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 803478c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803478e:	7858      	ldrb	r0, [r3, #1]
 8034790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034792:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8034796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803479a:	2301      	movs	r3, #1
 803479c:	f7fb fd2e 	bl	80301fc <disk_write>
 80347a0:	4603      	mov	r3, r0
 80347a2:	2b00      	cmp	r3, #0
 80347a4:	d00a      	beq.n	80347bc <f_read+0x292>
 80347a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80347a8:	2201      	movs	r2, #1
 80347aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80347ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80347b0:	2101      	movs	r1, #1
 80347b2:	4618      	mov	r0, r3
 80347b4:	f7fb ffd9 	bl	803076a <unlock_fs>
 80347b8:	2301      	movs	r3, #1
 80347ba:	e078      	b.n	80348ae <f_read+0x384>
					fp->flag &= (BYTE)~FA_DIRTY;
 80347bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80347be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80347c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80347c6:	b2da      	uxtb	r2, r3
 80347c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80347ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80347ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80347d0:	7858      	ldrb	r0, [r3, #1]
 80347d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80347d4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80347d8:	2301      	movs	r3, #1
 80347da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80347dc:	f7fb fcee 	bl	80301bc <disk_read>
 80347e0:	4603      	mov	r3, r0
 80347e2:	2b00      	cmp	r3, #0
 80347e4:	d00a      	beq.n	80347fc <f_read+0x2d2>
 80347e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80347e8:	2201      	movs	r2, #1
 80347ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80347ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80347f0:	2101      	movs	r1, #1
 80347f2:	4618      	mov	r0, r3
 80347f4:	f7fb ffb9 	bl	803076a <unlock_fs>
 80347f8:	2301      	movs	r3, #1
 80347fa:	e058      	b.n	80348ae <f_read+0x384>
			}
#endif
			fp->sect = sect;
 80347fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80347fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8034800:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8034802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034804:	899b      	ldrh	r3, [r3, #12]
 8034806:	4618      	mov	r0, r3
 8034808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803480a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 803480e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034810:	899b      	ldrh	r3, [r3, #12]
 8034812:	fbb2 f1f3 	udiv	r1, r2, r3
 8034816:	fb01 f303 	mul.w	r3, r1, r3
 803481a:	1ad3      	subs	r3, r2, r3
 803481c:	1ac3      	subs	r3, r0, r3
 803481e:	657b      	str	r3, [r7, #84]	; 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8034820:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8034822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034824:	429a      	cmp	r2, r3
 8034826:	d901      	bls.n	803482c <f_read+0x302>
 8034828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803482a:	657b      	str	r3, [r7, #84]	; 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 803482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803482e:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8034832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034834:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8034838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803483a:	899b      	ldrh	r3, [r3, #12]
 803483c:	b29b      	uxth	r3, r3
 803483e:	2200      	movs	r2, #0
 8034840:	60bb      	str	r3, [r7, #8]
 8034842:	60fa      	str	r2, [r7, #12]
 8034844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8034848:	f7eb fdca 	bl	80203e0 <__aeabi_uldivmod>
 803484c:	4613      	mov	r3, r2
 803484e:	4423      	add	r3, r4
 8034850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8034852:	4619      	mov	r1, r3
 8034854:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8034856:	f7fb fef4 	bl	8030642 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 803485a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 803485c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803485e:	4413      	add	r3, r2
 8034860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8034862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034864:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 803486a:	2000      	movs	r0, #0
 803486c:	468a      	mov	sl, r1
 803486e:	4683      	mov	fp, r0
 8034870:	eb12 010a 	adds.w	r1, r2, sl
 8034874:	6039      	str	r1, [r7, #0]
 8034876:	eb43 030b 	adc.w	r3, r3, fp
 803487a:	607b      	str	r3, [r7, #4]
 803487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803487e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8034882:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 8034886:	6a3b      	ldr	r3, [r7, #32]
 8034888:	681a      	ldr	r2, [r3, #0]
 803488a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803488c:	441a      	add	r2, r3
 803488e:	6a3b      	ldr	r3, [r7, #32]
 8034890:	601a      	str	r2, [r3, #0]
 8034892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8034896:	1ad3      	subs	r3, r2, r3
 8034898:	627b      	str	r3, [r7, #36]	; 0x24
	for ( ;  btr;								/* Repeat until all data read */
 803489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803489c:	2b00      	cmp	r3, #0
 803489e:	f47f ae99 	bne.w	80345d4 <f_read+0xaa>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80348a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80348a4:	2100      	movs	r1, #0
 80348a6:	4618      	mov	r0, r3
 80348a8:	f7fb ff5f 	bl	803076a <unlock_fs>
 80348ac:	2300      	movs	r3, #0
}
 80348ae:	4618      	mov	r0, r3
 80348b0:	3760      	adds	r7, #96	; 0x60
 80348b2:	46bd      	mov	sp, r7
 80348b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080348b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80348b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80348bc:	b091      	sub	sp, #68	; 0x44
 80348be:	af00      	add	r7, sp, #0
 80348c0:	61f8      	str	r0, [r7, #28]
 80348c2:	61b9      	str	r1, [r7, #24]
 80348c4:	617a      	str	r2, [r7, #20]
 80348c6:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80348c8:	69bb      	ldr	r3, [r7, #24]
 80348ca:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 80348cc:	693b      	ldr	r3, [r7, #16]
 80348ce:	2200      	movs	r2, #0
 80348d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80348d2:	69fb      	ldr	r3, [r7, #28]
 80348d4:	f107 0220 	add.w	r2, r7, #32
 80348d8:	4611      	mov	r1, r2
 80348da:	4618      	mov	r0, r3
 80348dc:	f7ff fa80 	bl	8033de0 <validate>
 80348e0:	4603      	mov	r3, r0
 80348e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80348e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80348ea:	2b00      	cmp	r3, #0
 80348ec:	d108      	bne.n	8034900 <f_write+0x48>
 80348ee:	69fb      	ldr	r3, [r7, #28]
 80348f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80348f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80348f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80348fc:	2b00      	cmp	r3, #0
 80348fe:	d009      	beq.n	8034914 <f_write+0x5c>
 8034900:	6a3b      	ldr	r3, [r7, #32]
 8034902:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8034906:	4611      	mov	r1, r2
 8034908:	4618      	mov	r0, r3
 803490a:	f7fb ff2e 	bl	803076a <unlock_fs>
 803490e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8034912:	e1d2      	b.n	8034cba <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8034914:	69fb      	ldr	r3, [r7, #28]
 8034916:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 803491a:	f003 0302 	and.w	r3, r3, #2
 803491e:	2b00      	cmp	r3, #0
 8034920:	d106      	bne.n	8034930 <f_write+0x78>
 8034922:	6a3b      	ldr	r3, [r7, #32]
 8034924:	2107      	movs	r1, #7
 8034926:	4618      	mov	r0, r3
 8034928:	f7fb ff1f 	bl	803076a <unlock_fs>
 803492c:	2307      	movs	r3, #7
 803492e:	e1c4      	b.n	8034cba <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8034930:	6a3b      	ldr	r3, [r7, #32]
 8034932:	781b      	ldrb	r3, [r3, #0]
 8034934:	2b04      	cmp	r3, #4
 8034936:	f000 81ab 	beq.w	8034c90 <f_write+0x3d8>
 803493a:	69fb      	ldr	r3, [r7, #28]
 803493c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034940:	697b      	ldr	r3, [r7, #20]
 8034942:	18d1      	adds	r1, r2, r3
 8034944:	69fb      	ldr	r3, [r7, #28]
 8034946:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 803494a:	4613      	mov	r3, r2
 803494c:	4299      	cmp	r1, r3
 803494e:	f080 819f 	bcs.w	8034c90 <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8034952:	69fb      	ldr	r3, [r7, #28]
 8034954:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034958:	4613      	mov	r3, r2
 803495a:	43db      	mvns	r3, r3
 803495c:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 803495e:	e197      	b.n	8034c90 <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8034960:	69fb      	ldr	r3, [r7, #28]
 8034962:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8034966:	6a3b      	ldr	r3, [r7, #32]
 8034968:	899b      	ldrh	r3, [r3, #12]
 803496a:	b29b      	uxth	r3, r3
 803496c:	2200      	movs	r2, #0
 803496e:	461d      	mov	r5, r3
 8034970:	4616      	mov	r6, r2
 8034972:	462a      	mov	r2, r5
 8034974:	4633      	mov	r3, r6
 8034976:	f7eb fd33 	bl	80203e0 <__aeabi_uldivmod>
 803497a:	4313      	orrs	r3, r2
 803497c:	f040 8128 	bne.w	8034bd0 <f_write+0x318>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8034980:	69fb      	ldr	r3, [r7, #28]
 8034982:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8034986:	6a3b      	ldr	r3, [r7, #32]
 8034988:	899b      	ldrh	r3, [r3, #12]
 803498a:	b29b      	uxth	r3, r3
 803498c:	2200      	movs	r2, #0
 803498e:	60bb      	str	r3, [r7, #8]
 8034990:	60fa      	str	r2, [r7, #12]
 8034992:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8034996:	f7eb fd23 	bl	80203e0 <__aeabi_uldivmod>
 803499a:	4602      	mov	r2, r0
 803499c:	460b      	mov	r3, r1
 803499e:	6a3b      	ldr	r3, [r7, #32]
 80349a0:	895b      	ldrh	r3, [r3, #10]
 80349a2:	3b01      	subs	r3, #1
 80349a4:	4013      	ands	r3, r2
 80349a6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 80349a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80349aa:	2b00      	cmp	r3, #0
 80349ac:	d150      	bne.n	8034a50 <f_write+0x198>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80349ae:	69fb      	ldr	r3, [r7, #28]
 80349b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80349b4:	4313      	orrs	r3, r2
 80349b6:	d10c      	bne.n	80349d2 <f_write+0x11a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80349b8:	69fb      	ldr	r3, [r7, #28]
 80349ba:	689b      	ldr	r3, [r3, #8]
 80349bc:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 80349be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80349c0:	2b00      	cmp	r3, #0
 80349c2:	d11a      	bne.n	80349fa <f_write+0x142>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80349c4:	69fb      	ldr	r3, [r7, #28]
 80349c6:	2100      	movs	r1, #0
 80349c8:	4618      	mov	r0, r3
 80349ca:	f7fc fddd 	bl	8031588 <create_chain>
 80349ce:	63b8      	str	r0, [r7, #56]	; 0x38
 80349d0:	e013      	b.n	80349fa <f_write+0x142>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80349d2:	69fb      	ldr	r3, [r7, #28]
 80349d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80349d6:	2b00      	cmp	r3, #0
 80349d8:	d007      	beq.n	80349ea <f_write+0x132>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80349da:	69fb      	ldr	r3, [r7, #28]
 80349dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80349e0:	69f8      	ldr	r0, [r7, #28]
 80349e2:	f7fc fed2 	bl	803178a <clmt_clust>
 80349e6:	63b8      	str	r0, [r7, #56]	; 0x38
 80349e8:	e007      	b.n	80349fa <f_write+0x142>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80349ea:	69fa      	ldr	r2, [r7, #28]
 80349ec:	69fb      	ldr	r3, [r7, #28]
 80349ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80349f0:	4619      	mov	r1, r3
 80349f2:	4610      	mov	r0, r2
 80349f4:	f7fc fdc8 	bl	8031588 <create_chain>
 80349f8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80349fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80349fc:	2b00      	cmp	r3, #0
 80349fe:	f000 814c 	beq.w	8034c9a <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8034a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8034a04:	2b01      	cmp	r3, #1
 8034a06:	d10a      	bne.n	8034a1e <f_write+0x166>
 8034a08:	69fb      	ldr	r3, [r7, #28]
 8034a0a:	2202      	movs	r2, #2
 8034a0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8034a10:	6a3b      	ldr	r3, [r7, #32]
 8034a12:	2102      	movs	r1, #2
 8034a14:	4618      	mov	r0, r3
 8034a16:	f7fb fea8 	bl	803076a <unlock_fs>
 8034a1a:	2302      	movs	r3, #2
 8034a1c:	e14d      	b.n	8034cba <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8034a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8034a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8034a24:	d10a      	bne.n	8034a3c <f_write+0x184>
 8034a26:	69fb      	ldr	r3, [r7, #28]
 8034a28:	2201      	movs	r2, #1
 8034a2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8034a2e:	6a3b      	ldr	r3, [r7, #32]
 8034a30:	2101      	movs	r1, #1
 8034a32:	4618      	mov	r0, r3
 8034a34:	f7fb fe99 	bl	803076a <unlock_fs>
 8034a38:	2301      	movs	r3, #1
 8034a3a:	e13e      	b.n	8034cba <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 8034a3c:	69fb      	ldr	r3, [r7, #28]
 8034a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8034a40:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8034a42:	69fb      	ldr	r3, [r7, #28]
 8034a44:	689b      	ldr	r3, [r3, #8]
 8034a46:	2b00      	cmp	r3, #0
 8034a48:	d102      	bne.n	8034a50 <f_write+0x198>
 8034a4a:	69fb      	ldr	r3, [r7, #28]
 8034a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8034a4e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8034a50:	69fb      	ldr	r3, [r7, #28]
 8034a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034a56:	b25b      	sxtb	r3, r3
 8034a58:	2b00      	cmp	r3, #0
 8034a5a:	da20      	bge.n	8034a9e <f_write+0x1e6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8034a5c:	6a3b      	ldr	r3, [r7, #32]
 8034a5e:	7858      	ldrb	r0, [r3, #1]
 8034a60:	69fb      	ldr	r3, [r7, #28]
 8034a62:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8034a66:	69fb      	ldr	r3, [r7, #28]
 8034a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8034a6a:	2301      	movs	r3, #1
 8034a6c:	f7fb fbc6 	bl	80301fc <disk_write>
 8034a70:	4603      	mov	r3, r0
 8034a72:	2b00      	cmp	r3, #0
 8034a74:	d00a      	beq.n	8034a8c <f_write+0x1d4>
 8034a76:	69fb      	ldr	r3, [r7, #28]
 8034a78:	2201      	movs	r2, #1
 8034a7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8034a7e:	6a3b      	ldr	r3, [r7, #32]
 8034a80:	2101      	movs	r1, #1
 8034a82:	4618      	mov	r0, r3
 8034a84:	f7fb fe71 	bl	803076a <unlock_fs>
 8034a88:	2301      	movs	r3, #1
 8034a8a:	e116      	b.n	8034cba <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 8034a8c:	69fb      	ldr	r3, [r7, #28]
 8034a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034a96:	b2da      	uxtb	r2, r3
 8034a98:	69fb      	ldr	r3, [r7, #28]
 8034a9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8034a9e:	6a3a      	ldr	r2, [r7, #32]
 8034aa0:	69fb      	ldr	r3, [r7, #28]
 8034aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034aa4:	4619      	mov	r1, r3
 8034aa6:	4610      	mov	r0, r2
 8034aa8:	f7fc f8c8 	bl	8030c3c <clust2sect>
 8034aac:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 8034aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034ab0:	2b00      	cmp	r3, #0
 8034ab2:	d10a      	bne.n	8034aca <f_write+0x212>
 8034ab4:	69fb      	ldr	r3, [r7, #28]
 8034ab6:	2202      	movs	r2, #2
 8034ab8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8034abc:	6a3b      	ldr	r3, [r7, #32]
 8034abe:	2102      	movs	r1, #2
 8034ac0:	4618      	mov	r0, r3
 8034ac2:	f7fb fe52 	bl	803076a <unlock_fs>
 8034ac6:	2302      	movs	r3, #2
 8034ac8:	e0f7      	b.n	8034cba <f_write+0x402>
			sect += csect;
 8034aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034ace:	4413      	add	r3, r2
 8034ad0:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8034ad2:	6a3b      	ldr	r3, [r7, #32]
 8034ad4:	899b      	ldrh	r3, [r3, #12]
 8034ad6:	461a      	mov	r2, r3
 8034ad8:	697b      	ldr	r3, [r7, #20]
 8034ada:	fbb3 f3f2 	udiv	r3, r3, r2
 8034ade:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 8034ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034ae2:	2b00      	cmp	r3, #0
 8034ae4:	d04b      	beq.n	8034b7e <f_write+0x2c6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8034ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8034ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034aea:	4413      	add	r3, r2
 8034aec:	6a3a      	ldr	r2, [r7, #32]
 8034aee:	8952      	ldrh	r2, [r2, #10]
 8034af0:	4293      	cmp	r3, r2
 8034af2:	d905      	bls.n	8034b00 <f_write+0x248>
					cc = fs->csize - csect;
 8034af4:	6a3b      	ldr	r3, [r7, #32]
 8034af6:	895b      	ldrh	r3, [r3, #10]
 8034af8:	461a      	mov	r2, r3
 8034afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034afc:	1ad3      	subs	r3, r2, r3
 8034afe:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8034b00:	6a3b      	ldr	r3, [r7, #32]
 8034b02:	7858      	ldrb	r0, [r3, #1]
 8034b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034b08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8034b0a:	f7fb fb77 	bl	80301fc <disk_write>
 8034b0e:	4603      	mov	r3, r0
 8034b10:	2b00      	cmp	r3, #0
 8034b12:	d00a      	beq.n	8034b2a <f_write+0x272>
 8034b14:	69fb      	ldr	r3, [r7, #28]
 8034b16:	2201      	movs	r2, #1
 8034b18:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8034b1c:	6a3b      	ldr	r3, [r7, #32]
 8034b1e:	2101      	movs	r1, #1
 8034b20:	4618      	mov	r0, r3
 8034b22:	f7fb fe22 	bl	803076a <unlock_fs>
 8034b26:	2301      	movs	r3, #1
 8034b28:	e0c7      	b.n	8034cba <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8034b2a:	69fb      	ldr	r3, [r7, #28]
 8034b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8034b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b30:	1ad3      	subs	r3, r2, r3
 8034b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8034b34:	429a      	cmp	r2, r3
 8034b36:	d91a      	bls.n	8034b6e <f_write+0x2b6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8034b38:	69fb      	ldr	r3, [r7, #28]
 8034b3a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8034b3e:	69fb      	ldr	r3, [r7, #28]
 8034b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8034b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b44:	1ad3      	subs	r3, r2, r3
 8034b46:	6a3a      	ldr	r2, [r7, #32]
 8034b48:	8992      	ldrh	r2, [r2, #12]
 8034b4a:	fb02 f303 	mul.w	r3, r2, r3
 8034b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034b50:	18d1      	adds	r1, r2, r3
 8034b52:	6a3b      	ldr	r3, [r7, #32]
 8034b54:	899b      	ldrh	r3, [r3, #12]
 8034b56:	461a      	mov	r2, r3
 8034b58:	f7fb fd73 	bl	8030642 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8034b5c:	69fb      	ldr	r3, [r7, #28]
 8034b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034b66:	b2da      	uxtb	r2, r3
 8034b68:	69fb      	ldr	r3, [r7, #28]
 8034b6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8034b6e:	6a3b      	ldr	r3, [r7, #32]
 8034b70:	899b      	ldrh	r3, [r3, #12]
 8034b72:	461a      	mov	r2, r3
 8034b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034b76:	fb02 f303 	mul.w	r3, r2, r3
 8034b7a:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 8034b7c:	e05d      	b.n	8034c3a <f_write+0x382>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8034b7e:	69fb      	ldr	r3, [r7, #28]
 8034b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034b84:	429a      	cmp	r2, r3
 8034b86:	d020      	beq.n	8034bca <f_write+0x312>
				fp->fptr < fp->obj.objsize &&
 8034b88:	69fb      	ldr	r3, [r7, #28]
 8034b8a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8034b8e:	69fb      	ldr	r3, [r7, #28]
 8034b90:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8034b94:	4290      	cmp	r0, r2
 8034b96:	eb71 0303 	sbcs.w	r3, r1, r3
 8034b9a:	d216      	bcs.n	8034bca <f_write+0x312>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8034b9c:	6a3b      	ldr	r3, [r7, #32]
 8034b9e:	7858      	ldrb	r0, [r3, #1]
 8034ba0:	69fb      	ldr	r3, [r7, #28]
 8034ba2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8034ba6:	2301      	movs	r3, #1
 8034ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034baa:	f7fb fb07 	bl	80301bc <disk_read>
 8034bae:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8034bb0:	2b00      	cmp	r3, #0
 8034bb2:	d00a      	beq.n	8034bca <f_write+0x312>
					ABORT(fs, FR_DISK_ERR);
 8034bb4:	69fb      	ldr	r3, [r7, #28]
 8034bb6:	2201      	movs	r2, #1
 8034bb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8034bbc:	6a3b      	ldr	r3, [r7, #32]
 8034bbe:	2101      	movs	r1, #1
 8034bc0:	4618      	mov	r0, r3
 8034bc2:	f7fb fdd2 	bl	803076a <unlock_fs>
 8034bc6:	2301      	movs	r3, #1
 8034bc8:	e077      	b.n	8034cba <f_write+0x402>
			}
#endif
			fp->sect = sect;
 8034bca:	69fb      	ldr	r3, [r7, #28]
 8034bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034bce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8034bd0:	6a3b      	ldr	r3, [r7, #32]
 8034bd2:	899b      	ldrh	r3, [r3, #12]
 8034bd4:	4618      	mov	r0, r3
 8034bd6:	69fb      	ldr	r3, [r7, #28]
 8034bd8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034bdc:	6a3b      	ldr	r3, [r7, #32]
 8034bde:	899b      	ldrh	r3, [r3, #12]
 8034be0:	fbb2 f1f3 	udiv	r1, r2, r3
 8034be4:	fb01 f303 	mul.w	r3, r1, r3
 8034be8:	1ad3      	subs	r3, r2, r3
 8034bea:	1ac3      	subs	r3, r0, r3
 8034bec:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8034bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8034bf0:	697b      	ldr	r3, [r7, #20]
 8034bf2:	429a      	cmp	r2, r3
 8034bf4:	d901      	bls.n	8034bfa <f_write+0x342>
 8034bf6:	697b      	ldr	r3, [r7, #20]
 8034bf8:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8034bfa:	69fb      	ldr	r3, [r7, #28]
 8034bfc:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8034c00:	69fb      	ldr	r3, [r7, #28]
 8034c02:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8034c06:	6a3b      	ldr	r3, [r7, #32]
 8034c08:	899b      	ldrh	r3, [r3, #12]
 8034c0a:	b29b      	uxth	r3, r3
 8034c0c:	2200      	movs	r2, #0
 8034c0e:	603b      	str	r3, [r7, #0]
 8034c10:	607a      	str	r2, [r7, #4]
 8034c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8034c16:	f7eb fbe3 	bl	80203e0 <__aeabi_uldivmod>
 8034c1a:	4613      	mov	r3, r2
 8034c1c:	4423      	add	r3, r4
 8034c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8034c20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8034c22:	4618      	mov	r0, r3
 8034c24:	f7fb fd0d 	bl	8030642 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8034c28:	69fb      	ldr	r3, [r7, #28]
 8034c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034c2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8034c32:	b2da      	uxtb	r2, r3
 8034c34:	69fb      	ldr	r3, [r7, #28]
 8034c36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8034c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034c3e:	4413      	add	r3, r2
 8034c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8034c42:	69fb      	ldr	r3, [r7, #28]
 8034c44:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034c48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8034c4a:	2000      	movs	r0, #0
 8034c4c:	4688      	mov	r8, r1
 8034c4e:	4681      	mov	r9, r0
 8034c50:	eb12 0a08 	adds.w	sl, r2, r8
 8034c54:	eb43 0b09 	adc.w	fp, r3, r9
 8034c58:	69fb      	ldr	r3, [r7, #28]
 8034c5a:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8034c5e:	69fb      	ldr	r3, [r7, #28]
 8034c60:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8034c64:	69fb      	ldr	r3, [r7, #28]
 8034c66:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034c6a:	4290      	cmp	r0, r2
 8034c6c:	eb71 0403 	sbcs.w	r4, r1, r3
 8034c70:	d201      	bcs.n	8034c76 <f_write+0x3be>
 8034c72:	4610      	mov	r0, r2
 8034c74:	4619      	mov	r1, r3
 8034c76:	69fb      	ldr	r3, [r7, #28]
 8034c78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8034c7c:	693b      	ldr	r3, [r7, #16]
 8034c7e:	681a      	ldr	r2, [r3, #0]
 8034c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034c82:	441a      	add	r2, r3
 8034c84:	693b      	ldr	r3, [r7, #16]
 8034c86:	601a      	str	r2, [r3, #0]
 8034c88:	697a      	ldr	r2, [r7, #20]
 8034c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034c8c:	1ad3      	subs	r3, r2, r3
 8034c8e:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 8034c90:	697b      	ldr	r3, [r7, #20]
 8034c92:	2b00      	cmp	r3, #0
 8034c94:	f47f ae64 	bne.w	8034960 <f_write+0xa8>
 8034c98:	e000      	b.n	8034c9c <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8034c9a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8034c9c:	69fb      	ldr	r3, [r7, #28]
 8034c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8034ca6:	b2da      	uxtb	r2, r3
 8034ca8:	69fb      	ldr	r3, [r7, #28]
 8034caa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8034cae:	6a3b      	ldr	r3, [r7, #32]
 8034cb0:	2100      	movs	r1, #0
 8034cb2:	4618      	mov	r0, r3
 8034cb4:	f7fb fd59 	bl	803076a <unlock_fs>
 8034cb8:	2300      	movs	r3, #0
}
 8034cba:	4618      	mov	r0, r3
 8034cbc:	3744      	adds	r7, #68	; 0x44
 8034cbe:	46bd      	mov	sp, r7
 8034cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08034cc4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8034cc4:	b580      	push	{r7, lr}
 8034cc6:	b09c      	sub	sp, #112	; 0x70
 8034cc8:	af00      	add	r7, sp, #0
 8034cca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8034ccc:	687b      	ldr	r3, [r7, #4]
 8034cce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8034cd2:	4611      	mov	r1, r2
 8034cd4:	4618      	mov	r0, r3
 8034cd6:	f7ff f883 	bl	8033de0 <validate>
 8034cda:	4603      	mov	r3, r0
 8034cdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 8034ce0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8034ce4:	2b00      	cmp	r3, #0
 8034ce6:	f040 8123 	bne.w	8034f30 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8034cea:	687b      	ldr	r3, [r7, #4]
 8034cec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8034cf4:	2b00      	cmp	r3, #0
 8034cf6:	f000 811b 	beq.w	8034f30 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8034cfa:	687b      	ldr	r3, [r7, #4]
 8034cfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034d00:	b25b      	sxtb	r3, r3
 8034d02:	2b00      	cmp	r3, #0
 8034d04:	da1c      	bge.n	8034d40 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8034d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034d08:	7858      	ldrb	r0, [r3, #1]
 8034d0a:	687b      	ldr	r3, [r7, #4]
 8034d0c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8034d10:	687b      	ldr	r3, [r7, #4]
 8034d12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8034d14:	2301      	movs	r3, #1
 8034d16:	f7fb fa71 	bl	80301fc <disk_write>
 8034d1a:	4603      	mov	r3, r0
 8034d1c:	2b00      	cmp	r3, #0
 8034d1e:	d006      	beq.n	8034d2e <f_sync+0x6a>
 8034d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034d22:	2101      	movs	r1, #1
 8034d24:	4618      	mov	r0, r3
 8034d26:	f7fb fd20 	bl	803076a <unlock_fs>
 8034d2a:	2301      	movs	r3, #1
 8034d2c:	e109      	b.n	8034f42 <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8034d2e:	687b      	ldr	r3, [r7, #4]
 8034d30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034d38:	b2da      	uxtb	r2, r3
 8034d3a:	687b      	ldr	r3, [r7, #4]
 8034d3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8034d40:	f7f7 fdee 	bl	802c920 <get_fattime>
 8034d44:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8034d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034d48:	781b      	ldrb	r3, [r3, #0]
 8034d4a:	2b04      	cmp	r3, #4
 8034d4c:	f040 80a5 	bne.w	8034e9a <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8034d50:	687b      	ldr	r3, [r7, #4]
 8034d52:	4618      	mov	r0, r3
 8034d54:	f7fc fb04 	bl	8031360 <fill_first_frag>
 8034d58:	4603      	mov	r3, r0
 8034d5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8034d5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8034d62:	2b00      	cmp	r3, #0
 8034d64:	d10a      	bne.n	8034d7c <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8034d66:	6878      	ldr	r0, [r7, #4]
 8034d68:	687b      	ldr	r3, [r7, #4]
 8034d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8034d70:	4619      	mov	r1, r3
 8034d72:	f7fc fb24 	bl	80313be <fill_last_frag>
 8034d76:	4603      	mov	r3, r0
 8034d78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 8034d7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8034d80:	2b00      	cmp	r3, #0
 8034d82:	f040 80d5 	bne.w	8034f30 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 8034d86:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8034d8a:	f001 f83a 	bl	8035e02 <ff_memalloc>
 8034d8e:	6638      	str	r0, [r7, #96]	; 0x60
 8034d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8034d92:	2b00      	cmp	r3, #0
 8034d94:	d106      	bne.n	8034da4 <f_sync+0xe0>
 8034d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034d98:	2111      	movs	r1, #17
 8034d9a:	4618      	mov	r0, r3
 8034d9c:	f7fb fce5 	bl	803076a <unlock_fs>
 8034da0:	2311      	movs	r3, #17
 8034da2:	e0ce      	b.n	8034f42 <f_sync+0x27e>
 8034da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034da6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8034da8:	611a      	str	r2, [r3, #16]
 8034daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8034dae:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8034db2:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8034db4:	687a      	ldr	r2, [r7, #4]
 8034db6:	f107 0308 	add.w	r3, r7, #8
 8034dba:	4611      	mov	r1, r2
 8034dbc:	4618      	mov	r0, r3
 8034dbe:	f7fd fad7 	bl	8032370 <load_obj_dir>
 8034dc2:	4603      	mov	r3, r0
 8034dc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 8034dc8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8034dcc:	2b00      	cmp	r3, #0
 8034dce:	d160      	bne.n	8034e92 <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8034dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034dd2:	695b      	ldr	r3, [r3, #20]
 8034dd4:	3304      	adds	r3, #4
 8034dd6:	781a      	ldrb	r2, [r3, #0]
 8034dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034dda:	695b      	ldr	r3, [r3, #20]
 8034ddc:	3304      	adds	r3, #4
 8034dde:	f042 0220 	orr.w	r2, r2, #32
 8034de2:	b2d2      	uxtb	r2, r2
 8034de4:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8034de6:	687b      	ldr	r3, [r7, #4]
 8034de8:	79da      	ldrb	r2, [r3, #7]
 8034dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034dec:	695b      	ldr	r3, [r3, #20]
 8034dee:	3321      	adds	r3, #33	; 0x21
 8034df0:	f042 0201 	orr.w	r2, r2, #1
 8034df4:	b2d2      	uxtb	r2, r2
 8034df6:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8034df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034dfa:	695b      	ldr	r3, [r3, #20]
 8034dfc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8034e00:	687b      	ldr	r3, [r7, #4]
 8034e02:	689b      	ldr	r3, [r3, #8]
 8034e04:	4619      	mov	r1, r3
 8034e06:	4610      	mov	r0, r2
 8034e08:	f7fb fb67 	bl	80304da <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8034e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034e0e:	695b      	ldr	r3, [r3, #20]
 8034e10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8034e14:	687b      	ldr	r3, [r7, #4]
 8034e16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8034e1a:	4608      	mov	r0, r1
 8034e1c:	f7fb fb89 	bl	8030532 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8034e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034e22:	695b      	ldr	r3, [r3, #20]
 8034e24:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8034e28:	687b      	ldr	r3, [r7, #4]
 8034e2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8034e2e:	4608      	mov	r0, r1
 8034e30:	f7fb fb7f 	bl	8030532 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8034e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034e36:	695b      	ldr	r3, [r3, #20]
 8034e38:	330c      	adds	r3, #12
 8034e3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8034e3c:	4618      	mov	r0, r3
 8034e3e:	f7fb fb4c 	bl	80304da <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8034e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034e44:	695b      	ldr	r3, [r3, #20]
 8034e46:	3315      	adds	r3, #21
 8034e48:	2200      	movs	r2, #0
 8034e4a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8034e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034e4e:	695b      	ldr	r3, [r3, #20]
 8034e50:	3310      	adds	r3, #16
 8034e52:	2100      	movs	r1, #0
 8034e54:	4618      	mov	r0, r3
 8034e56:	f7fb fb40 	bl	80304da <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8034e5a:	f107 0308 	add.w	r3, r7, #8
 8034e5e:	4618      	mov	r0, r3
 8034e60:	f7fd fabc 	bl	80323dc <store_xdir>
 8034e64:	4603      	mov	r3, r0
 8034e66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 8034e6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8034e6e:	2b00      	cmp	r3, #0
 8034e70:	d10f      	bne.n	8034e92 <f_sync+0x1ce>
							res = sync_fs(fs);
 8034e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034e74:	4618      	mov	r0, r3
 8034e76:	f7fb fe71 	bl	8030b5c <sync_fs>
 8034e7a:	4603      	mov	r3, r0
 8034e7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 8034e80:	687b      	ldr	r3, [r7, #4]
 8034e82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8034e8a:	b2da      	uxtb	r2, r3
 8034e8c:	687b      	ldr	r3, [r7, #4]
 8034e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 8034e92:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8034e94:	f000 ffc1 	bl	8035e1a <ff_memfree>
 8034e98:	e04a      	b.n	8034f30 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8034e9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8034e9c:	687b      	ldr	r3, [r7, #4]
 8034e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8034ea0:	4619      	mov	r1, r3
 8034ea2:	4610      	mov	r0, r2
 8034ea4:	f7fb fe2c 	bl	8030b00 <move_window>
 8034ea8:	4603      	mov	r3, r0
 8034eaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8034eae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8034eb2:	2b00      	cmp	r3, #0
 8034eb4:	d13c      	bne.n	8034f30 <f_sync+0x26c>
					dir = fp->dir_ptr;
 8034eb6:	687b      	ldr	r3, [r7, #4]
 8034eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8034eba:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8034ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8034ebe:	330b      	adds	r3, #11
 8034ec0:	781a      	ldrb	r2, [r3, #0]
 8034ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8034ec4:	330b      	adds	r3, #11
 8034ec6:	f042 0220 	orr.w	r2, r2, #32
 8034eca:	b2d2      	uxtb	r2, r2
 8034ecc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8034ece:	687b      	ldr	r3, [r7, #4]
 8034ed0:	6818      	ldr	r0, [r3, #0]
 8034ed2:	687b      	ldr	r3, [r7, #4]
 8034ed4:	689b      	ldr	r3, [r3, #8]
 8034ed6:	461a      	mov	r2, r3
 8034ed8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8034eda:	f7fc fe97 	bl	8031c0c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8034ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8034ee0:	f103 001c 	add.w	r0, r3, #28
 8034ee4:	687b      	ldr	r3, [r7, #4]
 8034ee6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8034eea:	4613      	mov	r3, r2
 8034eec:	4619      	mov	r1, r3
 8034eee:	f7fb faf4 	bl	80304da <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8034ef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8034ef4:	3316      	adds	r3, #22
 8034ef6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8034ef8:	4618      	mov	r0, r3
 8034efa:	f7fb faee 	bl	80304da <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8034efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8034f00:	3312      	adds	r3, #18
 8034f02:	2100      	movs	r1, #0
 8034f04:	4618      	mov	r0, r3
 8034f06:	f7fb facd 	bl	80304a4 <st_word>
					fs->wflag = 1;
 8034f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034f0c:	2201      	movs	r2, #1
 8034f0e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8034f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034f12:	4618      	mov	r0, r3
 8034f14:	f7fb fe22 	bl	8030b5c <sync_fs>
 8034f18:	4603      	mov	r3, r0
 8034f1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 8034f1e:	687b      	ldr	r3, [r7, #4]
 8034f20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8034f28:	b2da      	uxtb	r2, r3
 8034f2a:	687b      	ldr	r3, [r7, #4]
 8034f2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8034f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034f32:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8034f36:	4611      	mov	r1, r2
 8034f38:	4618      	mov	r0, r3
 8034f3a:	f7fb fc16 	bl	803076a <unlock_fs>
 8034f3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8034f42:	4618      	mov	r0, r3
 8034f44:	3770      	adds	r7, #112	; 0x70
 8034f46:	46bd      	mov	sp, r7
 8034f48:	bd80      	pop	{r7, pc}

08034f4a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8034f4a:	b580      	push	{r7, lr}
 8034f4c:	b084      	sub	sp, #16
 8034f4e:	af00      	add	r7, sp, #0
 8034f50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8034f52:	6878      	ldr	r0, [r7, #4]
 8034f54:	f7ff feb6 	bl	8034cc4 <f_sync>
 8034f58:	4603      	mov	r3, r0
 8034f5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8034f5c:	7bfb      	ldrb	r3, [r7, #15]
 8034f5e:	2b00      	cmp	r3, #0
 8034f60:	d11d      	bne.n	8034f9e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8034f62:	687b      	ldr	r3, [r7, #4]
 8034f64:	f107 0208 	add.w	r2, r7, #8
 8034f68:	4611      	mov	r1, r2
 8034f6a:	4618      	mov	r0, r3
 8034f6c:	f7fe ff38 	bl	8033de0 <validate>
 8034f70:	4603      	mov	r3, r0
 8034f72:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8034f74:	7bfb      	ldrb	r3, [r7, #15]
 8034f76:	2b00      	cmp	r3, #0
 8034f78:	d111      	bne.n	8034f9e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8034f7a:	687b      	ldr	r3, [r7, #4]
 8034f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034f7e:	4618      	mov	r0, r3
 8034f80:	f7fb fd1a 	bl	80309b8 <dec_lock>
 8034f84:	4603      	mov	r3, r0
 8034f86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8034f88:	7bfb      	ldrb	r3, [r7, #15]
 8034f8a:	2b00      	cmp	r3, #0
 8034f8c:	d102      	bne.n	8034f94 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8034f8e:	687b      	ldr	r3, [r7, #4]
 8034f90:	2200      	movs	r2, #0
 8034f92:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8034f94:	68bb      	ldr	r3, [r7, #8]
 8034f96:	2100      	movs	r1, #0
 8034f98:	4618      	mov	r0, r3
 8034f9a:	f7fb fbe6 	bl	803076a <unlock_fs>
#endif
		}
	}
	return res;
 8034f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8034fa0:	4618      	mov	r0, r3
 8034fa2:	3710      	adds	r7, #16
 8034fa4:	46bd      	mov	sp, r7
 8034fa6:	bd80      	pop	{r7, pc}

08034fa8 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of path */
)
{
 8034fa8:	b580      	push	{r7, lr}
 8034faa:	b0e6      	sub	sp, #408	; 0x198
 8034fac:	af00      	add	r7, sp, #0
 8034fae:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8034fb2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8034fb6:	6018      	str	r0, [r3, #0]
 8034fb8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8034fbc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8034fc0:	6019      	str	r1, [r3, #0]
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMBUF


	*buff = 0;
 8034fc2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8034fc6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8034fca:	681b      	ldr	r3, [r3, #0]
 8034fcc:	2200      	movs	r2, #0
 8034fce:	701a      	strb	r2, [r3, #0]
	/* Get logical drive */
	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 8034fd0:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8034fd4:	1d3b      	adds	r3, r7, #4
 8034fd6:	2200      	movs	r2, #0
 8034fd8:	4618      	mov	r0, r3
 8034fda:	f7fe fb65 	bl	80336a8 <find_volume>
 8034fde:	4603      	mov	r3, r0
 8034fe0:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
	if (res == FR_OK) {
 8034fe4:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8034fe8:	2b00      	cmp	r3, #0
 8034fea:	f040 8148 	bne.w	803527e <f_getcwd+0x2d6>
		dj.obj.fs = fs;
 8034fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8034ff2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		INIT_NAMBUF(fs);
 8034ff6:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8034ffa:	f000 ff02 	bl	8035e02 <ff_memalloc>
 8034ffe:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8035002:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8035006:	2b00      	cmp	r3, #0
 8035008:	d107      	bne.n	803501a <f_getcwd+0x72>
 803500a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 803500e:	2111      	movs	r1, #17
 8035010:	4618      	mov	r0, r3
 8035012:	f7fb fbaa 	bl	803076a <unlock_fs>
 8035016:	2311      	movs	r3, #17
 8035018:	e13b      	b.n	8035292 <f_getcwd+0x2ea>
 803501a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 803501e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8035022:	611a      	str	r2, [r3, #16]
 8035024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8035028:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 803502c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8035030:	615a      	str	r2, [r3, #20]
		i = len;			/* Bottom of buffer (directory stack base) */
 8035032:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8035036:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 803503a:	681b      	ldr	r3, [r3, #0]
 803503c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path) */
 8035040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8035044:	781b      	ldrb	r3, [r3, #0]
 8035046:	2b04      	cmp	r3, #4
 8035048:	f000 80da 	beq.w	8035200 <f_getcwd+0x258>
			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
 803504c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8035050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035052:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 8035056:	e0c2      	b.n	80351de <f_getcwd+0x236>
				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 8035058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 803505c:	2120      	movs	r1, #32
 803505e:	4618      	mov	r0, r3
 8035060:	f7fc fbdf 	bl	8031822 <dir_sdi>
 8035064:	4603      	mov	r3, r0
 8035066:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 803506a:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 803506e:	2b00      	cmp	r3, #0
 8035070:	f040 80bf 	bne.w	80351f2 <f_getcwd+0x24a>
				res = move_window(fs, dj.sect);
 8035074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8035078:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 803507c:	4611      	mov	r1, r2
 803507e:	4618      	mov	r0, r3
 8035080:	f7fb fd3e 	bl	8030b00 <move_window>
 8035084:	4603      	mov	r3, r0
 8035086:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 803508a:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 803508e:	2b00      	cmp	r3, #0
 8035090:	f040 80b1 	bne.w	80351f6 <f_getcwd+0x24e>
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 8035094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8035098:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 803509c:	4611      	mov	r1, r2
 803509e:	4618      	mov	r0, r3
 80350a0:	f7fc fd95 	bl	8031bce <ld_clust>
 80350a4:	4603      	mov	r3, r0
 80350a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				res = dir_sdi(&dj, 0);
 80350aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80350ae:	2100      	movs	r1, #0
 80350b0:	4618      	mov	r0, r3
 80350b2:	f7fc fbb6 	bl	8031822 <dir_sdi>
 80350b6:	4603      	mov	r3, r0
 80350b8:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 80350bc:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80350c0:	2b00      	cmp	r3, #0
 80350c2:	f040 809a 	bne.w	80351fa <f_getcwd+0x252>
				do {							/* Find the entry links to the child directory */
					res = dir_read(&dj, 0);
 80350c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80350ca:	2100      	movs	r1, #0
 80350cc:	4618      	mov	r0, r3
 80350ce:	f7fd fa47 	bl	8032560 <dir_read>
 80350d2:	4603      	mov	r3, r0
 80350d4:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
					if (res != FR_OK) break;
 80350d8:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80350dc:	2b00      	cmp	r3, #0
 80350de:	d11a      	bne.n	8035116 <f_getcwd+0x16e>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 80350e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80350e4:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80350e8:	4611      	mov	r1, r2
 80350ea:	4618      	mov	r0, r3
 80350ec:	f7fc fd6f 	bl	8031bce <ld_clust>
 80350f0:	4602      	mov	r2, r0
 80350f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80350f6:	4293      	cmp	r3, r2
 80350f8:	d00f      	beq.n	803511a <f_getcwd+0x172>
					res = dir_next(&dj, 0);
 80350fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80350fe:	2100      	movs	r1, #0
 8035100:	4618      	mov	r0, r3
 8035102:	f7fc fc22 	bl	803194a <dir_next>
 8035106:	4603      	mov	r3, r0
 8035108:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				} while (res == FR_OK);
 803510c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8035110:	2b00      	cmp	r3, #0
 8035112:	d0d8      	beq.n	80350c6 <f_getcwd+0x11e>
 8035114:	e002      	b.n	803511c <f_getcwd+0x174>
					if (res != FR_OK) break;
 8035116:	bf00      	nop
 8035118:	e000      	b.n	803511c <f_getcwd+0x174>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 803511a:	bf00      	nop
				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 803511c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8035120:	2b04      	cmp	r3, #4
 8035122:	d102      	bne.n	803512a <f_getcwd+0x182>
 8035124:	2302      	movs	r3, #2
 8035126:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 803512a:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 803512e:	2b00      	cmp	r3, #0
 8035130:	d165      	bne.n	80351fe <f_getcwd+0x256>
				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 8035132:	f107 0208 	add.w	r2, r7, #8
 8035136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 803513a:	4611      	mov	r1, r2
 803513c:	4618      	mov	r0, r3
 803513e:	f7fd fe01 	bl	8032d44 <get_fileinfo>
				for (n = 0; fno.fname[n]; n++) ;
 8035142:	2300      	movs	r3, #0
 8035144:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8035148:	e004      	b.n	8035154 <f_getcwd+0x1ac>
 803514a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 803514e:	3301      	adds	r3, #1
 8035150:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8035154:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8035158:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 803515c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8035160:	4413      	add	r3, r2
 8035162:	331a      	adds	r3, #26
 8035164:	781b      	ldrb	r3, [r3, #0]
 8035166:	2b00      	cmp	r3, #0
 8035168:	d1ef      	bne.n	803514a <f_getcwd+0x1a2>
				if (i < n + 3) {
 803516a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 803516e:	3303      	adds	r3, #3
 8035170:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8035174:	429a      	cmp	r2, r3
 8035176:	d21f      	bcs.n	80351b8 <f_getcwd+0x210>
					res = FR_NOT_ENOUGH_CORE; break;
 8035178:	2311      	movs	r3, #17
 803517a:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 803517e:	e03f      	b.n	8035200 <f_getcwd+0x258>
				}
				while (n) buff[--i] = fno.fname[--n];
 8035180:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8035184:	3b01      	subs	r3, #1
 8035186:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 803518a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 803518e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8035192:	681a      	ldr	r2, [r3, #0]
 8035194:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8035198:	3b01      	subs	r3, #1
 803519a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 803519e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80351a2:	4413      	add	r3, r2
 80351a4:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80351a8:	f5a2 71c8 	sub.w	r1, r2, #400	; 0x190
 80351ac:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80351b0:	440a      	add	r2, r1
 80351b2:	321a      	adds	r2, #26
 80351b4:	7812      	ldrb	r2, [r2, #0]
 80351b6:	701a      	strb	r2, [r3, #0]
 80351b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80351bc:	2b00      	cmp	r3, #0
 80351be:	d1df      	bne.n	8035180 <f_getcwd+0x1d8>
				buff[--i] = '/';
 80351c0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80351c4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80351c8:	681a      	ldr	r2, [r3, #0]
 80351ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80351ce:	3b01      	subs	r3, #1
 80351d0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80351d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80351d8:	4413      	add	r3, r2
 80351da:	222f      	movs	r2, #47	; 0x2f
 80351dc:	701a      	strb	r2, [r3, #0]
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 80351de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80351e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80351e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80351ea:	2b00      	cmp	r3, #0
 80351ec:	f47f af34 	bne.w	8035058 <f_getcwd+0xb0>
 80351f0:	e006      	b.n	8035200 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80351f2:	bf00      	nop
 80351f4:	e004      	b.n	8035200 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80351f6:	bf00      	nop
 80351f8:	e002      	b.n	8035200 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80351fa:	bf00      	nop
 80351fc:	e000      	b.n	8035200 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80351fe:	bf00      	nop
			}
		}
		tp = buff;
 8035200:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8035204:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8035208:	681b      	ldr	r3, [r3, #0]
 803520a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
		if (res == FR_OK) {
 803520e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8035212:	2b00      	cmp	r3, #0
 8035214:	d12b      	bne.n	803526e <f_getcwd+0x2c6>
#if _VOLUMES >= 2
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
#endif
			if (i == len) {					/* Root-directory */
 8035216:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 803521a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 803521e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8035222:	681b      	ldr	r3, [r3, #0]
 8035224:	429a      	cmp	r2, r3
 8035226:	d107      	bne.n	8035238 <f_getcwd+0x290>
				*tp++ = '/';
 8035228:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 803522c:	1c5a      	adds	r2, r3, #1
 803522e:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 8035232:	222f      	movs	r2, #47	; 0x2f
 8035234:	701a      	strb	r2, [r3, #0]
 8035236:	e01a      	b.n	803526e <f_getcwd+0x2c6>
			} else {						/* Sub-directroy */
				do		/* Add stacked path str */
					*tp++ = buff[i++];
 8035238:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 803523c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8035240:	681a      	ldr	r2, [r3, #0]
 8035242:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8035246:	1c59      	adds	r1, r3, #1
 8035248:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 803524c:	441a      	add	r2, r3
 803524e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8035252:	1c59      	adds	r1, r3, #1
 8035254:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8035258:	7812      	ldrb	r2, [r2, #0]
 803525a:	701a      	strb	r2, [r3, #0]
				while (i < len);
 803525c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8035260:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8035264:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8035268:	681b      	ldr	r3, [r3, #0]
 803526a:	429a      	cmp	r2, r3
 803526c:	d3e4      	bcc.n	8035238 <f_getcwd+0x290>
			}
		}
		*tp = 0;
 803526e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8035272:	2200      	movs	r2, #0
 8035274:	701a      	strb	r2, [r3, #0]
		FREE_NAMBUF();
 8035276:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 803527a:	f000 fdce 	bl	8035e1a <ff_memfree>
	}

	LEAVE_FF(fs, res);
 803527e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8035282:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8035286:	4611      	mov	r1, r2
 8035288:	4618      	mov	r0, r3
 803528a:	f7fb fa6e 	bl	803076a <unlock_fs>
 803528e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
}
 8035292:	4618      	mov	r0, r3
 8035294:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8035298:	46bd      	mov	sp, r7
 803529a:	bd80      	pop	{r7, pc}

0803529c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 803529c:	b580      	push	{r7, lr}
 803529e:	b086      	sub	sp, #24
 80352a0:	af00      	add	r7, sp, #0
 80352a2:	6078      	str	r0, [r7, #4]
 80352a4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80352a6:	687b      	ldr	r3, [r7, #4]
 80352a8:	2b00      	cmp	r3, #0
 80352aa:	d101      	bne.n	80352b0 <f_opendir+0x14>
 80352ac:	2309      	movs	r3, #9
 80352ae:	e0ba      	b.n	8035426 <f_opendir+0x18a>

	/* Get logical drive */
	obj = &dp->obj;
 80352b0:	687b      	ldr	r3, [r7, #4]
 80352b2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80352b4:	f107 0108 	add.w	r1, r7, #8
 80352b8:	463b      	mov	r3, r7
 80352ba:	2200      	movs	r2, #0
 80352bc:	4618      	mov	r0, r3
 80352be:	f7fe f9f3 	bl	80336a8 <find_volume>
 80352c2:	4603      	mov	r3, r0
 80352c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80352c6:	7dfb      	ldrb	r3, [r7, #23]
 80352c8:	2b00      	cmp	r3, #0
 80352ca:	f040 809f 	bne.w	803540c <f_opendir+0x170>
		obj->fs = fs;
 80352ce:	68ba      	ldr	r2, [r7, #8]
 80352d0:	693b      	ldr	r3, [r7, #16]
 80352d2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 80352d4:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80352d8:	f000 fd93 	bl	8035e02 <ff_memalloc>
 80352dc:	60f8      	str	r0, [r7, #12]
 80352de:	68fb      	ldr	r3, [r7, #12]
 80352e0:	2b00      	cmp	r3, #0
 80352e2:	d106      	bne.n	80352f2 <f_opendir+0x56>
 80352e4:	68bb      	ldr	r3, [r7, #8]
 80352e6:	2111      	movs	r1, #17
 80352e8:	4618      	mov	r0, r3
 80352ea:	f7fb fa3e 	bl	803076a <unlock_fs>
 80352ee:	2311      	movs	r3, #17
 80352f0:	e099      	b.n	8035426 <f_opendir+0x18a>
 80352f2:	68bb      	ldr	r3, [r7, #8]
 80352f4:	68fa      	ldr	r2, [r7, #12]
 80352f6:	611a      	str	r2, [r3, #16]
 80352f8:	68bb      	ldr	r3, [r7, #8]
 80352fa:	68fa      	ldr	r2, [r7, #12]
 80352fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8035300:	615a      	str	r2, [r3, #20]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8035302:	683b      	ldr	r3, [r7, #0]
 8035304:	4619      	mov	r1, r3
 8035306:	6878      	ldr	r0, [r7, #4]
 8035308:	f7fe f80e 	bl	8033328 <follow_path>
 803530c:	4603      	mov	r3, r0
 803530e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8035310:	7dfb      	ldrb	r3, [r7, #23]
 8035312:	2b00      	cmp	r3, #0
 8035314:	d172      	bne.n	80353fc <f_opendir+0x160>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8035316:	687b      	ldr	r3, [r7, #4]
 8035318:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 803531c:	b25b      	sxtb	r3, r3
 803531e:	2b00      	cmp	r3, #0
 8035320:	db47      	blt.n	80353b2 <f_opendir+0x116>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8035322:	693b      	ldr	r3, [r7, #16]
 8035324:	799b      	ldrb	r3, [r3, #6]
 8035326:	f003 0310 	and.w	r3, r3, #16
 803532a:	2b00      	cmp	r3, #0
 803532c:	d03f      	beq.n	80353ae <f_opendir+0x112>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 803532e:	68bb      	ldr	r3, [r7, #8]
 8035330:	781b      	ldrb	r3, [r3, #0]
 8035332:	2b04      	cmp	r3, #4
 8035334:	d130      	bne.n	8035398 <f_opendir+0xfc>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 8035336:	693b      	ldr	r3, [r7, #16]
 8035338:	689a      	ldr	r2, [r3, #8]
 803533a:	693b      	ldr	r3, [r7, #16]
 803533c:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 803533e:	693b      	ldr	r3, [r7, #16]
 8035340:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8035344:	4613      	mov	r3, r2
 8035346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 803534a:	693a      	ldr	r2, [r7, #16]
 803534c:	79d2      	ldrb	r2, [r2, #7]
 803534e:	431a      	orrs	r2, r3
 8035350:	693b      	ldr	r3, [r7, #16]
 8035352:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 8035354:	687b      	ldr	r3, [r7, #4]
 8035356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8035358:	693b      	ldr	r3, [r7, #16]
 803535a:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 803535c:	68bb      	ldr	r3, [r7, #8]
 803535e:	695b      	ldr	r3, [r3, #20]
 8035360:	3334      	adds	r3, #52	; 0x34
 8035362:	4618      	mov	r0, r3
 8035364:	f7fa ffa0 	bl	80302a8 <ld_dword>
 8035368:	4602      	mov	r2, r0
 803536a:	693b      	ldr	r3, [r7, #16]
 803536c:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 803536e:	68bb      	ldr	r3, [r7, #8]
 8035370:	695b      	ldr	r3, [r3, #20]
 8035372:	3338      	adds	r3, #56	; 0x38
 8035374:	4618      	mov	r0, r3
 8035376:	f7fa ffba 	bl	80302ee <ld_qword>
 803537a:	4602      	mov	r2, r0
 803537c:	460b      	mov	r3, r1
 803537e:	6939      	ldr	r1, [r7, #16]
 8035380:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8035384:	68bb      	ldr	r3, [r7, #8]
 8035386:	695b      	ldr	r3, [r3, #20]
 8035388:	3321      	adds	r3, #33	; 0x21
 803538a:	781b      	ldrb	r3, [r3, #0]
 803538c:	f003 0302 	and.w	r3, r3, #2
 8035390:	b2da      	uxtb	r2, r3
 8035392:	693b      	ldr	r3, [r7, #16]
 8035394:	71da      	strb	r2, [r3, #7]
 8035396:	e00c      	b.n	80353b2 <f_opendir+0x116>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8035398:	68ba      	ldr	r2, [r7, #8]
 803539a:	687b      	ldr	r3, [r7, #4]
 803539c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803539e:	4619      	mov	r1, r3
 80353a0:	4610      	mov	r0, r2
 80353a2:	f7fc fc14 	bl	8031bce <ld_clust>
 80353a6:	4602      	mov	r2, r0
 80353a8:	693b      	ldr	r3, [r7, #16]
 80353aa:	609a      	str	r2, [r3, #8]
 80353ac:	e001      	b.n	80353b2 <f_opendir+0x116>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80353ae:	2305      	movs	r3, #5
 80353b0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80353b2:	7dfb      	ldrb	r3, [r7, #23]
 80353b4:	2b00      	cmp	r3, #0
 80353b6:	d121      	bne.n	80353fc <f_opendir+0x160>
				obj->id = fs->id;
 80353b8:	68bb      	ldr	r3, [r7, #8]
 80353ba:	88da      	ldrh	r2, [r3, #6]
 80353bc:	693b      	ldr	r3, [r7, #16]
 80353be:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80353c0:	2100      	movs	r1, #0
 80353c2:	6878      	ldr	r0, [r7, #4]
 80353c4:	f7fc fa2d 	bl	8031822 <dir_sdi>
 80353c8:	4603      	mov	r3, r0
 80353ca:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80353cc:	7dfb      	ldrb	r3, [r7, #23]
 80353ce:	2b00      	cmp	r3, #0
 80353d0:	d114      	bne.n	80353fc <f_opendir+0x160>
					if (obj->sclust) {
 80353d2:	693b      	ldr	r3, [r7, #16]
 80353d4:	689b      	ldr	r3, [r3, #8]
 80353d6:	2b00      	cmp	r3, #0
 80353d8:	d00d      	beq.n	80353f6 <f_opendir+0x15a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80353da:	2100      	movs	r1, #0
 80353dc:	6878      	ldr	r0, [r7, #4]
 80353de:	f7fb fa5d 	bl	803089c <inc_lock>
 80353e2:	4602      	mov	r2, r0
 80353e4:	693b      	ldr	r3, [r7, #16]
 80353e6:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80353e8:	693b      	ldr	r3, [r7, #16]
 80353ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80353ec:	2b00      	cmp	r3, #0
 80353ee:	d105      	bne.n	80353fc <f_opendir+0x160>
 80353f0:	2312      	movs	r3, #18
 80353f2:	75fb      	strb	r3, [r7, #23]
 80353f4:	e002      	b.n	80353fc <f_opendir+0x160>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80353f6:	693b      	ldr	r3, [r7, #16]
 80353f8:	2200      	movs	r2, #0
 80353fa:	62da      	str	r2, [r3, #44]	; 0x2c
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 80353fc:	68f8      	ldr	r0, [r7, #12]
 80353fe:	f000 fd0c 	bl	8035e1a <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8035402:	7dfb      	ldrb	r3, [r7, #23]
 8035404:	2b04      	cmp	r3, #4
 8035406:	d101      	bne.n	803540c <f_opendir+0x170>
 8035408:	2305      	movs	r3, #5
 803540a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 803540c:	7dfb      	ldrb	r3, [r7, #23]
 803540e:	2b00      	cmp	r3, #0
 8035410:	d002      	beq.n	8035418 <f_opendir+0x17c>
 8035412:	693b      	ldr	r3, [r7, #16]
 8035414:	2200      	movs	r2, #0
 8035416:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8035418:	68bb      	ldr	r3, [r7, #8]
 803541a:	7dfa      	ldrb	r2, [r7, #23]
 803541c:	4611      	mov	r1, r2
 803541e:	4618      	mov	r0, r3
 8035420:	f7fb f9a3 	bl	803076a <unlock_fs>
 8035424:	7dfb      	ldrb	r3, [r7, #23]
}
 8035426:	4618      	mov	r0, r3
 8035428:	3718      	adds	r7, #24
 803542a:	46bd      	mov	sp, r7
 803542c:	bd80      	pop	{r7, pc}

0803542e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 803542e:	b580      	push	{r7, lr}
 8035430:	b084      	sub	sp, #16
 8035432:	af00      	add	r7, sp, #0
 8035434:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8035436:	687b      	ldr	r3, [r7, #4]
 8035438:	f107 0208 	add.w	r2, r7, #8
 803543c:	4611      	mov	r1, r2
 803543e:	4618      	mov	r0, r3
 8035440:	f7fe fcce 	bl	8033de0 <validate>
 8035444:	4603      	mov	r3, r0
 8035446:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8035448:	7bfb      	ldrb	r3, [r7, #15]
 803544a:	2b00      	cmp	r3, #0
 803544c:	d115      	bne.n	803547a <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 803544e:	687b      	ldr	r3, [r7, #4]
 8035450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035452:	2b00      	cmp	r3, #0
 8035454:	d006      	beq.n	8035464 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8035456:	687b      	ldr	r3, [r7, #4]
 8035458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803545a:	4618      	mov	r0, r3
 803545c:	f7fb faac 	bl	80309b8 <dec_lock>
 8035460:	4603      	mov	r3, r0
 8035462:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8035464:	7bfb      	ldrb	r3, [r7, #15]
 8035466:	2b00      	cmp	r3, #0
 8035468:	d102      	bne.n	8035470 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 803546a:	687b      	ldr	r3, [r7, #4]
 803546c:	2200      	movs	r2, #0
 803546e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8035470:	68bb      	ldr	r3, [r7, #8]
 8035472:	2100      	movs	r1, #0
 8035474:	4618      	mov	r0, r3
 8035476:	f7fb f978 	bl	803076a <unlock_fs>
#endif
	}
	return res;
 803547a:	7bfb      	ldrb	r3, [r7, #15]
}
 803547c:	4618      	mov	r0, r3
 803547e:	3710      	adds	r7, #16
 8035480:	46bd      	mov	sp, r7
 8035482:	bd80      	pop	{r7, pc}

08035484 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8035484:	b580      	push	{r7, lr}
 8035486:	b086      	sub	sp, #24
 8035488:	af00      	add	r7, sp, #0
 803548a:	6078      	str	r0, [r7, #4]
 803548c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 803548e:	687b      	ldr	r3, [r7, #4]
 8035490:	f107 020c 	add.w	r2, r7, #12
 8035494:	4611      	mov	r1, r2
 8035496:	4618      	mov	r0, r3
 8035498:	f7fe fca2 	bl	8033de0 <validate>
 803549c:	4603      	mov	r3, r0
 803549e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80354a0:	7dfb      	ldrb	r3, [r7, #23]
 80354a2:	2b00      	cmp	r3, #0
 80354a4:	d140      	bne.n	8035528 <f_readdir+0xa4>
		if (!fno) {
 80354a6:	683b      	ldr	r3, [r7, #0]
 80354a8:	2b00      	cmp	r3, #0
 80354aa:	d106      	bne.n	80354ba <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80354ac:	2100      	movs	r1, #0
 80354ae:	6878      	ldr	r0, [r7, #4]
 80354b0:	f7fc f9b7 	bl	8031822 <dir_sdi>
 80354b4:	4603      	mov	r3, r0
 80354b6:	75fb      	strb	r3, [r7, #23]
 80354b8:	e036      	b.n	8035528 <f_readdir+0xa4>
		} else {
			INIT_NAMBUF(fs);
 80354ba:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80354be:	f000 fca0 	bl	8035e02 <ff_memalloc>
 80354c2:	6138      	str	r0, [r7, #16]
 80354c4:	693b      	ldr	r3, [r7, #16]
 80354c6:	2b00      	cmp	r3, #0
 80354c8:	d106      	bne.n	80354d8 <f_readdir+0x54>
 80354ca:	68fb      	ldr	r3, [r7, #12]
 80354cc:	2111      	movs	r1, #17
 80354ce:	4618      	mov	r0, r3
 80354d0:	f7fb f94b 	bl	803076a <unlock_fs>
 80354d4:	2311      	movs	r3, #17
 80354d6:	e02e      	b.n	8035536 <f_readdir+0xb2>
 80354d8:	68fb      	ldr	r3, [r7, #12]
 80354da:	693a      	ldr	r2, [r7, #16]
 80354dc:	611a      	str	r2, [r3, #16]
 80354de:	68fb      	ldr	r3, [r7, #12]
 80354e0:	693a      	ldr	r2, [r7, #16]
 80354e2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80354e6:	615a      	str	r2, [r3, #20]
			res = dir_read(dp, 0);			/* Read an item */
 80354e8:	2100      	movs	r1, #0
 80354ea:	6878      	ldr	r0, [r7, #4]
 80354ec:	f7fd f838 	bl	8032560 <dir_read>
 80354f0:	4603      	mov	r3, r0
 80354f2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80354f4:	7dfb      	ldrb	r3, [r7, #23]
 80354f6:	2b04      	cmp	r3, #4
 80354f8:	d101      	bne.n	80354fe <f_readdir+0x7a>
 80354fa:	2300      	movs	r3, #0
 80354fc:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 80354fe:	7dfb      	ldrb	r3, [r7, #23]
 8035500:	2b00      	cmp	r3, #0
 8035502:	d10e      	bne.n	8035522 <f_readdir+0x9e>
				get_fileinfo(dp, fno);		/* Get the object information */
 8035504:	6839      	ldr	r1, [r7, #0]
 8035506:	6878      	ldr	r0, [r7, #4]
 8035508:	f7fd fc1c 	bl	8032d44 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 803550c:	2100      	movs	r1, #0
 803550e:	6878      	ldr	r0, [r7, #4]
 8035510:	f7fc fa1b 	bl	803194a <dir_next>
 8035514:	4603      	mov	r3, r0
 8035516:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8035518:	7dfb      	ldrb	r3, [r7, #23]
 803551a:	2b04      	cmp	r3, #4
 803551c:	d101      	bne.n	8035522 <f_readdir+0x9e>
 803551e:	2300      	movs	r3, #0
 8035520:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 8035522:	6938      	ldr	r0, [r7, #16]
 8035524:	f000 fc79 	bl	8035e1a <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 8035528:	68fb      	ldr	r3, [r7, #12]
 803552a:	7dfa      	ldrb	r2, [r7, #23]
 803552c:	4611      	mov	r1, r2
 803552e:	4618      	mov	r0, r3
 8035530:	f7fb f91b 	bl	803076a <unlock_fs>
 8035534:	7dfb      	ldrb	r3, [r7, #23]
}
 8035536:	4618      	mov	r0, r3
 8035538:	3718      	adds	r7, #24
 803553a:	46bd      	mov	sp, r7
 803553c:	bd80      	pop	{r7, pc}

0803553e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 803553e:	b580      	push	{r7, lr}
 8035540:	b098      	sub	sp, #96	; 0x60
 8035542:	af00      	add	r7, sp, #0
 8035544:	6078      	str	r0, [r7, #4]
 8035546:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8035548:	f107 0108 	add.w	r1, r7, #8
 803554c:	1d3b      	adds	r3, r7, #4
 803554e:	2200      	movs	r2, #0
 8035550:	4618      	mov	r0, r3
 8035552:	f7fe f8a9 	bl	80336a8 <find_volume>
 8035556:	4603      	mov	r3, r0
 8035558:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 803555c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8035560:	2b00      	cmp	r3, #0
 8035562:	d139      	bne.n	80355d8 <f_stat+0x9a>
		INIT_NAMBUF(dj.obj.fs);
 8035564:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8035568:	f000 fc4b 	bl	8035e02 <ff_memalloc>
 803556c:	65b8      	str	r0, [r7, #88]	; 0x58
 803556e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8035570:	2b00      	cmp	r3, #0
 8035572:	d106      	bne.n	8035582 <f_stat+0x44>
 8035574:	68bb      	ldr	r3, [r7, #8]
 8035576:	2111      	movs	r1, #17
 8035578:	4618      	mov	r0, r3
 803557a:	f7fb f8f6 	bl	803076a <unlock_fs>
 803557e:	2311      	movs	r3, #17
 8035580:	e033      	b.n	80355ea <f_stat+0xac>
 8035582:	68bb      	ldr	r3, [r7, #8]
 8035584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8035586:	611a      	str	r2, [r3, #16]
 8035588:	68bb      	ldr	r3, [r7, #8]
 803558a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 803558c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8035590:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8035592:	687a      	ldr	r2, [r7, #4]
 8035594:	f107 0308 	add.w	r3, r7, #8
 8035598:	4611      	mov	r1, r2
 803559a:	4618      	mov	r0, r3
 803559c:	f7fd fec4 	bl	8033328 <follow_path>
 80355a0:	4603      	mov	r3, r0
 80355a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 80355a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80355aa:	2b00      	cmp	r3, #0
 80355ac:	d111      	bne.n	80355d2 <f_stat+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80355ae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80355b2:	b25b      	sxtb	r3, r3
 80355b4:	2b00      	cmp	r3, #0
 80355b6:	da03      	bge.n	80355c0 <f_stat+0x82>
				res = FR_INVALID_NAME;
 80355b8:	2306      	movs	r3, #6
 80355ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80355be:	e008      	b.n	80355d2 <f_stat+0x94>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80355c0:	683b      	ldr	r3, [r7, #0]
 80355c2:	2b00      	cmp	r3, #0
 80355c4:	d005      	beq.n	80355d2 <f_stat+0x94>
 80355c6:	f107 0308 	add.w	r3, r7, #8
 80355ca:	6839      	ldr	r1, [r7, #0]
 80355cc:	4618      	mov	r0, r3
 80355ce:	f7fd fbb9 	bl	8032d44 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 80355d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80355d4:	f000 fc21 	bl	8035e1a <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 80355d8:	68bb      	ldr	r3, [r7, #8]
 80355da:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80355de:	4611      	mov	r1, r2
 80355e0:	4618      	mov	r0, r3
 80355e2:	f7fb f8c2 	bl	803076a <unlock_fs>
 80355e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80355ea:	4618      	mov	r0, r3
 80355ec:	3760      	adds	r7, #96	; 0x60
 80355ee:	46bd      	mov	sp, r7
 80355f0:	bd80      	pop	{r7, pc}

080355f2 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80355f2:	b580      	push	{r7, lr}
 80355f4:	b0bc      	sub	sp, #240	; 0xf0
 80355f6:	af00      	add	r7, sp, #0
 80355f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80355fa:	2300      	movs	r3, #0
 80355fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8035600:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8035604:	1d3b      	adds	r3, r7, #4
 8035606:	2202      	movs	r2, #2
 8035608:	4618      	mov	r0, r3
 803560a:	f7fe f84d 	bl	80336a8 <find_volume>
 803560e:	4603      	mov	r3, r0
 8035610:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	dj.obj.fs = fs;
 8035614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (res == FR_OK) {
 803561a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 803561e:	2b00      	cmp	r3, #0
 8035620:	f040 80f9 	bne.w	8035816 <f_unlink+0x224>
		INIT_NAMBUF(fs);
 8035624:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8035628:	f000 fbeb 	bl	8035e02 <ff_memalloc>
 803562c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 8035630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035634:	2b00      	cmp	r3, #0
 8035636:	d106      	bne.n	8035646 <f_unlink+0x54>
 8035638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803563a:	2111      	movs	r1, #17
 803563c:	4618      	mov	r0, r3
 803563e:	f7fb f894 	bl	803076a <unlock_fs>
 8035642:	2311      	movs	r3, #17
 8035644:	e0f0      	b.n	8035828 <f_unlink+0x236>
 8035646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035648:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 803564c:	611a      	str	r2, [r3, #16]
 803564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035650:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8035654:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8035658:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);		/* Follow the file path */
 803565a:	687a      	ldr	r2, [r7, #4]
 803565c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8035660:	4611      	mov	r1, r2
 8035662:	4618      	mov	r0, r3
 8035664:	f7fd fe60 	bl	8033328 <follow_path>
 8035668:	4603      	mov	r3, r0
 803566a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 803566e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8035672:	2b00      	cmp	r3, #0
 8035674:	d108      	bne.n	8035688 <f_unlink+0x96>
 8035676:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 803567a:	f003 0320 	and.w	r3, r3, #32
 803567e:	2b00      	cmp	r3, #0
 8035680:	d002      	beq.n	8035688 <f_unlink+0x96>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8035682:	2306      	movs	r3, #6
 8035684:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8035688:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 803568c:	2b00      	cmp	r3, #0
 803568e:	d108      	bne.n	80356a2 <f_unlink+0xb0>
 8035690:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8035694:	2102      	movs	r1, #2
 8035696:	4618      	mov	r0, r3
 8035698:	f7fb f882 	bl	80307a0 <chk_lock>
 803569c:	4603      	mov	r3, r0
 803569e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80356a2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80356a6:	2b00      	cmp	r3, #0
 80356a8:	f040 80b1 	bne.w	803580e <f_unlink+0x21c>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80356ac:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80356b0:	b25b      	sxtb	r3, r3
 80356b2:	2b00      	cmp	r3, #0
 80356b4:	da03      	bge.n	80356be <f_unlink+0xcc>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80356b6:	2306      	movs	r3, #6
 80356b8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80356bc:	e008      	b.n	80356d0 <f_unlink+0xde>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80356be:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80356c2:	f003 0301 	and.w	r3, r3, #1
 80356c6:	2b00      	cmp	r3, #0
 80356c8:	d002      	beq.n	80356d0 <f_unlink+0xde>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80356ca:	2307      	movs	r3, #7
 80356cc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				}
			}
			if (res == FR_OK) {
 80356d0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80356d4:	2b00      	cmp	r3, #0
 80356d6:	d170      	bne.n	80357ba <f_unlink+0x1c8>
#if _FS_EXFAT
				obj.fs = fs;
 80356d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80356da:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 80356dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80356de:	781b      	ldrb	r3, [r3, #0]
 80356e0:	2b04      	cmp	r3, #4
 80356e2:	d11d      	bne.n	8035720 <f_unlink+0x12e>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 80356e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80356e6:	695b      	ldr	r3, [r3, #20]
 80356e8:	3334      	adds	r3, #52	; 0x34
 80356ea:	4618      	mov	r0, r3
 80356ec:	f7fa fddc 	bl	80302a8 <ld_dword>
 80356f0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80356f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80356f8:	613b      	str	r3, [r7, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80356fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80356fc:	695b      	ldr	r3, [r3, #20]
 80356fe:	3338      	adds	r3, #56	; 0x38
 8035700:	4618      	mov	r0, r3
 8035702:	f7fa fdf4 	bl	80302ee <ld_qword>
 8035706:	4602      	mov	r2, r0
 8035708:	460b      	mov	r3, r1
 803570a:	e9c7 2306 	strd	r2, r3, [r7, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 803570e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035710:	695b      	ldr	r3, [r3, #20]
 8035712:	3321      	adds	r3, #33	; 0x21
 8035714:	781b      	ldrb	r3, [r3, #0]
 8035716:	f003 0302 	and.w	r3, r3, #2
 803571a:	b2db      	uxtb	r3, r3
 803571c:	73fb      	strb	r3, [r7, #15]
 803571e:	e008      	b.n	8035732 <f_unlink+0x140>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8035720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035722:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8035726:	4611      	mov	r1, r2
 8035728:	4618      	mov	r0, r3
 803572a:	f7fc fa50 	bl	8031bce <ld_clust>
 803572e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8035732:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8035736:	f003 0310 	and.w	r3, r3, #16
 803573a:	2b00      	cmp	r3, #0
 803573c:	d03d      	beq.n	80357ba <f_unlink+0x1c8>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 803573e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035742:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8035746:	429a      	cmp	r2, r3
 8035748:	d103      	bne.n	8035752 <f_unlink+0x160>
						res = FR_DENIED;
 803574a:	2307      	movs	r3, #7
 803574c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8035750:	e033      	b.n	80357ba <f_unlink+0x1c8>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8035752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035754:	643b      	str	r3, [r7, #64]	; 0x40
						sdj.obj.sclust = dclst;
 8035756:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 803575a:	64bb      	str	r3, [r7, #72]	; 0x48
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 803575c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803575e:	781b      	ldrb	r3, [r3, #0]
 8035760:	2b04      	cmp	r3, #4
 8035762:	d106      	bne.n	8035772 <f_unlink+0x180>
							sdj.obj.objsize = obj.objsize;
 8035764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8035768:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
							sdj.obj.stat = obj.stat;
 803576c:	7bfb      	ldrb	r3, [r7, #15]
 803576e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 8035772:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8035776:	2100      	movs	r1, #0
 8035778:	4618      	mov	r0, r3
 803577a:	f7fc f852 	bl	8031822 <dir_sdi>
 803577e:	4603      	mov	r3, r0
 8035780:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						if (res == FR_OK) {
 8035784:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8035788:	2b00      	cmp	r3, #0
 803578a:	d116      	bne.n	80357ba <f_unlink+0x1c8>
							res = dir_read(&sdj, 0);			/* Read an item */
 803578c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8035790:	2100      	movs	r1, #0
 8035792:	4618      	mov	r0, r3
 8035794:	f7fc fee4 	bl	8032560 <dir_read>
 8035798:	4603      	mov	r3, r0
 803579a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 803579e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80357a2:	2b00      	cmp	r3, #0
 80357a4:	d102      	bne.n	80357ac <f_unlink+0x1ba>
 80357a6:	2307      	movs	r3, #7
 80357a8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80357ac:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80357b0:	2b04      	cmp	r3, #4
 80357b2:	d102      	bne.n	80357ba <f_unlink+0x1c8>
 80357b4:	2300      	movs	r3, #0
 80357b6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						}
					}
				}
			}
			if (res == FR_OK) {
 80357ba:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80357be:	2b00      	cmp	r3, #0
 80357c0:	d125      	bne.n	803580e <f_unlink+0x21c>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80357c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80357c6:	4618      	mov	r0, r3
 80357c8:	f7fd fa64 	bl	8032c94 <dir_remove>
 80357cc:	4603      	mov	r3, r0
 80357ce:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80357d2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80357d6:	2b00      	cmp	r3, #0
 80357d8:	d10e      	bne.n	80357f8 <f_unlink+0x206>
 80357da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80357de:	2b00      	cmp	r3, #0
 80357e0:	d00a      	beq.n	80357f8 <f_unlink+0x206>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 80357e2:	f107 0308 	add.w	r3, r7, #8
 80357e6:	2200      	movs	r2, #0
 80357e8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80357ec:	4618      	mov	r0, r3
 80357ee:	f7fb fe17 	bl	8031420 <remove_chain>
 80357f2:	4603      	mov	r3, r0
 80357f4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80357f8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80357fc:	2b00      	cmp	r3, #0
 80357fe:	d106      	bne.n	803580e <f_unlink+0x21c>
 8035800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035802:	4618      	mov	r0, r3
 8035804:	f7fb f9aa 	bl	8030b5c <sync_fs>
 8035808:	4603      	mov	r3, r0
 803580a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			}
		}
		FREE_NAMBUF();
 803580e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8035812:	f000 fb02 	bl	8035e1a <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8035816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035818:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 803581c:	4611      	mov	r1, r2
 803581e:	4618      	mov	r0, r3
 8035820:	f7fa ffa3 	bl	803076a <unlock_fs>
 8035824:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8035828:	4618      	mov	r0, r3
 803582a:	37f0      	adds	r7, #240	; 0xf0
 803582c:	46bd      	mov	sp, r7
 803582e:	bd80      	pop	{r7, pc}

08035830 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8035830:	b5b0      	push	{r4, r5, r7, lr}
 8035832:	b0a0      	sub	sp, #128	; 0x80
 8035834:	af00      	add	r7, sp, #0
 8035836:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8035838:	f107 010c 	add.w	r1, r7, #12
 803583c:	1d3b      	adds	r3, r7, #4
 803583e:	2202      	movs	r2, #2
 8035840:	4618      	mov	r0, r3
 8035842:	f7fd ff31 	bl	80336a8 <find_volume>
 8035846:	4603      	mov	r3, r0
 8035848:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 803584c:	68fb      	ldr	r3, [r7, #12]
 803584e:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8035850:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035854:	2b00      	cmp	r3, #0
 8035856:	f040 815a 	bne.w	8035b0e <f_mkdir+0x2de>
		INIT_NAMBUF(fs);
 803585a:	f44f 608c 	mov.w	r0, #1120	; 0x460
 803585e:	f000 fad0 	bl	8035e02 <ff_memalloc>
 8035862:	66f8      	str	r0, [r7, #108]	; 0x6c
 8035864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035866:	2b00      	cmp	r3, #0
 8035868:	d106      	bne.n	8035878 <f_mkdir+0x48>
 803586a:	68fb      	ldr	r3, [r7, #12]
 803586c:	2111      	movs	r1, #17
 803586e:	4618      	mov	r0, r3
 8035870:	f7fa ff7b 	bl	803076a <unlock_fs>
 8035874:	2311      	movs	r3, #17
 8035876:	e153      	b.n	8035b20 <f_mkdir+0x2f0>
 8035878:	68fb      	ldr	r3, [r7, #12]
 803587a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 803587c:	611a      	str	r2, [r3, #16]
 803587e:	68fb      	ldr	r3, [r7, #12]
 8035880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8035882:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8035886:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);			/* Follow the file path */
 8035888:	687a      	ldr	r2, [r7, #4]
 803588a:	f107 0310 	add.w	r3, r7, #16
 803588e:	4611      	mov	r1, r2
 8035890:	4618      	mov	r0, r3
 8035892:	f7fd fd49 	bl	8033328 <follow_path>
 8035896:	4603      	mov	r3, r0
 8035898:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 803589c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80358a0:	2b00      	cmp	r3, #0
 80358a2:	d102      	bne.n	80358aa <f_mkdir+0x7a>
 80358a4:	2308      	movs	r3, #8
 80358a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80358aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80358ae:	2b04      	cmp	r3, #4
 80358b0:	d108      	bne.n	80358c4 <f_mkdir+0x94>
 80358b2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80358b6:	f003 0320 	and.w	r3, r3, #32
 80358ba:	2b00      	cmp	r3, #0
 80358bc:	d002      	beq.n	80358c4 <f_mkdir+0x94>
			res = FR_INVALID_NAME;
 80358be:	2306      	movs	r3, #6
 80358c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80358c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80358c8:	2b04      	cmp	r3, #4
 80358ca:	f040 811d 	bne.w	8035b08 <f_mkdir+0x2d8>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80358ce:	f107 0310 	add.w	r3, r7, #16
 80358d2:	2100      	movs	r1, #0
 80358d4:	4618      	mov	r0, r3
 80358d6:	f7fb fe57 	bl	8031588 <create_chain>
 80358da:	66b8      	str	r0, [r7, #104]	; 0x68
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80358dc:	68fb      	ldr	r3, [r7, #12]
 80358de:	895b      	ldrh	r3, [r3, #10]
 80358e0:	461a      	mov	r2, r3
 80358e2:	68fb      	ldr	r3, [r7, #12]
 80358e4:	899b      	ldrh	r3, [r3, #12]
 80358e6:	fb02 f303 	mul.w	r3, r2, r3
 80358ea:	2200      	movs	r2, #0
 80358ec:	461c      	mov	r4, r3
 80358ee:	4615      	mov	r5, r2
 80358f0:	e9c7 4508 	strd	r4, r5, [r7, #32]
			res = FR_OK;
 80358f4:	2300      	movs	r3, #0
 80358f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80358fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80358fc:	2b00      	cmp	r3, #0
 80358fe:	d102      	bne.n	8035906 <f_mkdir+0xd6>
 8035900:	2307      	movs	r3, #7
 8035902:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 8035906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8035908:	2b01      	cmp	r3, #1
 803590a:	d102      	bne.n	8035912 <f_mkdir+0xe2>
 803590c:	2302      	movs	r3, #2
 803590e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8035912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8035914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8035918:	d102      	bne.n	8035920 <f_mkdir+0xf0>
 803591a:	2301      	movs	r3, #1
 803591c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8035920:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035924:	2b00      	cmp	r3, #0
 8035926:	d106      	bne.n	8035936 <f_mkdir+0x106>
 8035928:	68fb      	ldr	r3, [r7, #12]
 803592a:	4618      	mov	r0, r3
 803592c:	f7fb f8a4 	bl	8030a78 <sync_window>
 8035930:	4603      	mov	r3, r0
 8035932:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			tm = GET_FATTIME();
 8035936:	f7f6 fff3 	bl	802c920 <get_fattime>
 803593a:	6678      	str	r0, [r7, #100]	; 0x64
			if (res == FR_OK) {					/* Initialize the new directory table */
 803593c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035940:	2b00      	cmp	r3, #0
 8035942:	d170      	bne.n	8035a26 <f_mkdir+0x1f6>
				dsc = clust2sect(fs, dcl);
 8035944:	68fb      	ldr	r3, [r7, #12]
 8035946:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8035948:	4618      	mov	r0, r3
 803594a:	f7fb f977 	bl	8030c3c <clust2sect>
 803594e:	6778      	str	r0, [r7, #116]	; 0x74
				dir = fs->win;
 8035950:	68fb      	ldr	r3, [r7, #12]
 8035952:	3350      	adds	r3, #80	; 0x50
 8035954:	663b      	str	r3, [r7, #96]	; 0x60
				mem_set(dir, 0, SS(fs));
 8035956:	68fb      	ldr	r3, [r7, #12]
 8035958:	899b      	ldrh	r3, [r3, #12]
 803595a:	461a      	mov	r2, r3
 803595c:	2100      	movs	r1, #0
 803595e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8035960:	f7fa fe90 	bl	8030684 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8035964:	68fb      	ldr	r3, [r7, #12]
 8035966:	781b      	ldrb	r3, [r3, #0]
 8035968:	2b04      	cmp	r3, #4
 803596a:	d036      	beq.n	80359da <f_mkdir+0x1aa>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 803596c:	220b      	movs	r2, #11
 803596e:	2120      	movs	r1, #32
 8035970:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8035972:	f7fa fe87 	bl	8030684 <mem_set>
					dir[DIR_Name] = '.';
 8035976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8035978:	222e      	movs	r2, #46	; 0x2e
 803597a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 803597c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803597e:	330b      	adds	r3, #11
 8035980:	2210      	movs	r2, #16
 8035982:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8035984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8035986:	3316      	adds	r3, #22
 8035988:	6e79      	ldr	r1, [r7, #100]	; 0x64
 803598a:	4618      	mov	r0, r3
 803598c:	f7fa fda5 	bl	80304da <st_dword>
					st_clust(fs, dir, dcl);
 8035990:	68fb      	ldr	r3, [r7, #12]
 8035992:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8035994:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8035996:	4618      	mov	r0, r3
 8035998:	f7fc f938 	bl	8031c0c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 803599c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803599e:	3320      	adds	r3, #32
 80359a0:	2220      	movs	r2, #32
 80359a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80359a4:	4618      	mov	r0, r3
 80359a6:	f7fa fe4c 	bl	8030642 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80359aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80359ac:	3321      	adds	r3, #33	; 0x21
 80359ae:	222e      	movs	r2, #46	; 0x2e
 80359b0:	701a      	strb	r2, [r3, #0]
 80359b2:	69bb      	ldr	r3, [r7, #24]
 80359b4:	673b      	str	r3, [r7, #112]	; 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80359b6:	68fb      	ldr	r3, [r7, #12]
 80359b8:	781b      	ldrb	r3, [r3, #0]
 80359ba:	2b03      	cmp	r3, #3
 80359bc:	d106      	bne.n	80359cc <f_mkdir+0x19c>
 80359be:	68fb      	ldr	r3, [r7, #12]
 80359c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80359c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80359c4:	429a      	cmp	r2, r3
 80359c6:	d101      	bne.n	80359cc <f_mkdir+0x19c>
 80359c8:	2300      	movs	r3, #0
 80359ca:	673b      	str	r3, [r7, #112]	; 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 80359cc:	68f8      	ldr	r0, [r7, #12]
 80359ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80359d0:	3320      	adds	r3, #32
 80359d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80359d4:	4619      	mov	r1, r3
 80359d6:	f7fc f919 	bl	8031c0c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80359da:	68fb      	ldr	r3, [r7, #12]
 80359dc:	895b      	ldrh	r3, [r3, #10]
 80359de:	67bb      	str	r3, [r7, #120]	; 0x78
 80359e0:	e01c      	b.n	8035a1c <f_mkdir+0x1ec>
					fs->winsect = dsc++;
 80359e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80359e4:	1c5a      	adds	r2, r3, #1
 80359e6:	677a      	str	r2, [r7, #116]	; 0x74
 80359e8:	68fa      	ldr	r2, [r7, #12]
 80359ea:	64d3      	str	r3, [r2, #76]	; 0x4c
					fs->wflag = 1;
 80359ec:	68fb      	ldr	r3, [r7, #12]
 80359ee:	2201      	movs	r2, #1
 80359f0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80359f2:	68fb      	ldr	r3, [r7, #12]
 80359f4:	4618      	mov	r0, r3
 80359f6:	f7fb f83f 	bl	8030a78 <sync_window>
 80359fa:	4603      	mov	r3, r0
 80359fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					if (res != FR_OK) break;
 8035a00:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035a04:	2b00      	cmp	r3, #0
 8035a06:	d10d      	bne.n	8035a24 <f_mkdir+0x1f4>
					mem_set(dir, 0, SS(fs));
 8035a08:	68fb      	ldr	r3, [r7, #12]
 8035a0a:	899b      	ldrh	r3, [r3, #12]
 8035a0c:	461a      	mov	r2, r3
 8035a0e:	2100      	movs	r1, #0
 8035a10:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8035a12:	f7fa fe37 	bl	8030684 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8035a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8035a18:	3b01      	subs	r3, #1
 8035a1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8035a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8035a1e:	2b00      	cmp	r3, #0
 8035a20:	d1df      	bne.n	80359e2 <f_mkdir+0x1b2>
 8035a22:	e000      	b.n	8035a26 <f_mkdir+0x1f6>
					if (res != FR_OK) break;
 8035a24:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8035a26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035a2a:	2b00      	cmp	r3, #0
 8035a2c:	d107      	bne.n	8035a3e <f_mkdir+0x20e>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8035a2e:	f107 0310 	add.w	r3, r7, #16
 8035a32:	4618      	mov	r0, r3
 8035a34:	f7fc ff84 	bl	8032940 <dir_register>
 8035a38:	4603      	mov	r3, r0
 8035a3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			if (res == FR_OK) {
 8035a3e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035a42:	2b00      	cmp	r3, #0
 8035a44:	d159      	bne.n	8035afa <f_mkdir+0x2ca>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 8035a46:	68fb      	ldr	r3, [r7, #12]
 8035a48:	781b      	ldrb	r3, [r3, #0]
 8035a4a:	2b04      	cmp	r3, #4
 8035a4c:	d134      	bne.n	8035ab8 <f_mkdir+0x288>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 8035a4e:	68fb      	ldr	r3, [r7, #12]
 8035a50:	695b      	ldr	r3, [r3, #20]
 8035a52:	330c      	adds	r3, #12
 8035a54:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8035a56:	4618      	mov	r0, r3
 8035a58:	f7fa fd3f 	bl	80304da <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 8035a5c:	68fb      	ldr	r3, [r7, #12]
 8035a5e:	695b      	ldr	r3, [r3, #20]
 8035a60:	3334      	adds	r3, #52	; 0x34
 8035a62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8035a64:	4618      	mov	r0, r3
 8035a66:	f7fa fd38 	bl	80304da <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 8035a6a:	68fb      	ldr	r3, [r7, #12]
 8035a6c:	695b      	ldr	r3, [r3, #20]
 8035a6e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8035a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8035a76:	4613      	mov	r3, r2
 8035a78:	4619      	mov	r1, r3
 8035a7a:	f7fa fd2e 	bl	80304da <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 8035a7e:	68fb      	ldr	r3, [r7, #12]
 8035a80:	695b      	ldr	r3, [r3, #20]
 8035a82:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8035a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8035a8a:	4613      	mov	r3, r2
 8035a8c:	4619      	mov	r1, r3
 8035a8e:	f7fa fd24 	bl	80304da <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 8035a92:	68fb      	ldr	r3, [r7, #12]
 8035a94:	695b      	ldr	r3, [r3, #20]
 8035a96:	3321      	adds	r3, #33	; 0x21
 8035a98:	2203      	movs	r2, #3
 8035a9a:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 8035a9c:	68fb      	ldr	r3, [r7, #12]
 8035a9e:	695b      	ldr	r3, [r3, #20]
 8035aa0:	3304      	adds	r3, #4
 8035aa2:	2210      	movs	r2, #16
 8035aa4:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8035aa6:	f107 0310 	add.w	r3, r7, #16
 8035aaa:	4618      	mov	r0, r3
 8035aac:	f7fc fc96 	bl	80323dc <store_xdir>
 8035ab0:	4603      	mov	r3, r0
 8035ab2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8035ab6:	e014      	b.n	8035ae2 <f_mkdir+0x2b2>
				} else
#endif
				{
					dir = dj.dir;
 8035ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8035aba:	663b      	str	r3, [r7, #96]	; 0x60
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8035abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8035abe:	3316      	adds	r3, #22
 8035ac0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8035ac2:	4618      	mov	r0, r3
 8035ac4:	f7fa fd09 	bl	80304da <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8035ac8:	68fb      	ldr	r3, [r7, #12]
 8035aca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8035acc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8035ace:	4618      	mov	r0, r3
 8035ad0:	f7fc f89c 	bl	8031c0c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8035ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8035ad6:	330b      	adds	r3, #11
 8035ad8:	2210      	movs	r2, #16
 8035ada:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8035adc:	68fb      	ldr	r3, [r7, #12]
 8035ade:	2201      	movs	r2, #1
 8035ae0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8035ae2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035ae6:	2b00      	cmp	r3, #0
 8035ae8:	d10e      	bne.n	8035b08 <f_mkdir+0x2d8>
					res = sync_fs(fs);
 8035aea:	68fb      	ldr	r3, [r7, #12]
 8035aec:	4618      	mov	r0, r3
 8035aee:	f7fb f835 	bl	8030b5c <sync_fs>
 8035af2:	4603      	mov	r3, r0
 8035af4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8035af8:	e006      	b.n	8035b08 <f_mkdir+0x2d8>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8035afa:	f107 0310 	add.w	r3, r7, #16
 8035afe:	2200      	movs	r2, #0
 8035b00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8035b02:	4618      	mov	r0, r3
 8035b04:	f7fb fc8c 	bl	8031420 <remove_chain>
			}
		}
		FREE_NAMBUF();
 8035b08:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8035b0a:	f000 f986 	bl	8035e1a <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8035b0e:	68fb      	ldr	r3, [r7, #12]
 8035b10:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8035b14:	4611      	mov	r1, r2
 8035b16:	4618      	mov	r0, r3
 8035b18:	f7fa fe27 	bl	803076a <unlock_fs>
 8035b1c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8035b20:	4618      	mov	r0, r3
 8035b22:	3780      	adds	r7, #128	; 0x80
 8035b24:	46bd      	mov	sp, r7
 8035b26:	bdb0      	pop	{r4, r5, r7, pc}

08035b28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8035b28:	b480      	push	{r7}
 8035b2a:	b087      	sub	sp, #28
 8035b2c:	af00      	add	r7, sp, #0
 8035b2e:	60f8      	str	r0, [r7, #12]
 8035b30:	60b9      	str	r1, [r7, #8]
 8035b32:	4613      	mov	r3, r2
 8035b34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8035b36:	2301      	movs	r3, #1
 8035b38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8035b3a:	2300      	movs	r3, #0
 8035b3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8035b3e:	4b1f      	ldr	r3, [pc, #124]	; (8035bbc <FATFS_LinkDriverEx+0x94>)
 8035b40:	7a5b      	ldrb	r3, [r3, #9]
 8035b42:	b2db      	uxtb	r3, r3
 8035b44:	2b00      	cmp	r3, #0
 8035b46:	d131      	bne.n	8035bac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8035b48:	4b1c      	ldr	r3, [pc, #112]	; (8035bbc <FATFS_LinkDriverEx+0x94>)
 8035b4a:	7a5b      	ldrb	r3, [r3, #9]
 8035b4c:	b2db      	uxtb	r3, r3
 8035b4e:	461a      	mov	r2, r3
 8035b50:	4b1a      	ldr	r3, [pc, #104]	; (8035bbc <FATFS_LinkDriverEx+0x94>)
 8035b52:	2100      	movs	r1, #0
 8035b54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8035b56:	4b19      	ldr	r3, [pc, #100]	; (8035bbc <FATFS_LinkDriverEx+0x94>)
 8035b58:	7a5b      	ldrb	r3, [r3, #9]
 8035b5a:	b2db      	uxtb	r3, r3
 8035b5c:	4a17      	ldr	r2, [pc, #92]	; (8035bbc <FATFS_LinkDriverEx+0x94>)
 8035b5e:	009b      	lsls	r3, r3, #2
 8035b60:	4413      	add	r3, r2
 8035b62:	68fa      	ldr	r2, [r7, #12]
 8035b64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8035b66:	4b15      	ldr	r3, [pc, #84]	; (8035bbc <FATFS_LinkDriverEx+0x94>)
 8035b68:	7a5b      	ldrb	r3, [r3, #9]
 8035b6a:	b2db      	uxtb	r3, r3
 8035b6c:	461a      	mov	r2, r3
 8035b6e:	4b13      	ldr	r3, [pc, #76]	; (8035bbc <FATFS_LinkDriverEx+0x94>)
 8035b70:	4413      	add	r3, r2
 8035b72:	79fa      	ldrb	r2, [r7, #7]
 8035b74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8035b76:	4b11      	ldr	r3, [pc, #68]	; (8035bbc <FATFS_LinkDriverEx+0x94>)
 8035b78:	7a5b      	ldrb	r3, [r3, #9]
 8035b7a:	b2db      	uxtb	r3, r3
 8035b7c:	1c5a      	adds	r2, r3, #1
 8035b7e:	b2d1      	uxtb	r1, r2
 8035b80:	4a0e      	ldr	r2, [pc, #56]	; (8035bbc <FATFS_LinkDriverEx+0x94>)
 8035b82:	7251      	strb	r1, [r2, #9]
 8035b84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8035b86:	7dbb      	ldrb	r3, [r7, #22]
 8035b88:	3330      	adds	r3, #48	; 0x30
 8035b8a:	b2da      	uxtb	r2, r3
 8035b8c:	68bb      	ldr	r3, [r7, #8]
 8035b8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8035b90:	68bb      	ldr	r3, [r7, #8]
 8035b92:	3301      	adds	r3, #1
 8035b94:	223a      	movs	r2, #58	; 0x3a
 8035b96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8035b98:	68bb      	ldr	r3, [r7, #8]
 8035b9a:	3302      	adds	r3, #2
 8035b9c:	222f      	movs	r2, #47	; 0x2f
 8035b9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8035ba0:	68bb      	ldr	r3, [r7, #8]
 8035ba2:	3303      	adds	r3, #3
 8035ba4:	2200      	movs	r2, #0
 8035ba6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8035ba8:	2300      	movs	r3, #0
 8035baa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8035bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8035bae:	4618      	mov	r0, r3
 8035bb0:	371c      	adds	r7, #28
 8035bb2:	46bd      	mov	sp, r7
 8035bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035bb8:	4770      	bx	lr
 8035bba:	bf00      	nop
 8035bbc:	24002c28 	.word	0x24002c28

08035bc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8035bc0:	b580      	push	{r7, lr}
 8035bc2:	b082      	sub	sp, #8
 8035bc4:	af00      	add	r7, sp, #0
 8035bc6:	6078      	str	r0, [r7, #4]
 8035bc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8035bca:	2200      	movs	r2, #0
 8035bcc:	6839      	ldr	r1, [r7, #0]
 8035bce:	6878      	ldr	r0, [r7, #4]
 8035bd0:	f7ff ffaa 	bl	8035b28 <FATFS_LinkDriverEx>
 8035bd4:	4603      	mov	r3, r0
}
 8035bd6:	4618      	mov	r0, r3
 8035bd8:	3708      	adds	r7, #8
 8035bda:	46bd      	mov	sp, r7
 8035bdc:	bd80      	pop	{r7, pc}
	...

08035be0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8035be0:	b480      	push	{r7}
 8035be2:	b085      	sub	sp, #20
 8035be4:	af00      	add	r7, sp, #0
 8035be6:	4603      	mov	r3, r0
 8035be8:	6039      	str	r1, [r7, #0]
 8035bea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8035bec:	88fb      	ldrh	r3, [r7, #6]
 8035bee:	2b7f      	cmp	r3, #127	; 0x7f
 8035bf0:	d802      	bhi.n	8035bf8 <ff_convert+0x18>
		c = chr;
 8035bf2:	88fb      	ldrh	r3, [r7, #6]
 8035bf4:	81fb      	strh	r3, [r7, #14]
 8035bf6:	e025      	b.n	8035c44 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8035bf8:	683b      	ldr	r3, [r7, #0]
 8035bfa:	2b00      	cmp	r3, #0
 8035bfc:	d00b      	beq.n	8035c16 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8035bfe:	88fb      	ldrh	r3, [r7, #6]
 8035c00:	2bff      	cmp	r3, #255	; 0xff
 8035c02:	d805      	bhi.n	8035c10 <ff_convert+0x30>
 8035c04:	88fb      	ldrh	r3, [r7, #6]
 8035c06:	3b80      	subs	r3, #128	; 0x80
 8035c08:	4a12      	ldr	r2, [pc, #72]	; (8035c54 <ff_convert+0x74>)
 8035c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8035c0e:	e000      	b.n	8035c12 <ff_convert+0x32>
 8035c10:	2300      	movs	r3, #0
 8035c12:	81fb      	strh	r3, [r7, #14]
 8035c14:	e016      	b.n	8035c44 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8035c16:	2300      	movs	r3, #0
 8035c18:	81fb      	strh	r3, [r7, #14]
 8035c1a:	e009      	b.n	8035c30 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8035c1c:	89fb      	ldrh	r3, [r7, #14]
 8035c1e:	4a0d      	ldr	r2, [pc, #52]	; (8035c54 <ff_convert+0x74>)
 8035c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8035c24:	88fa      	ldrh	r2, [r7, #6]
 8035c26:	429a      	cmp	r2, r3
 8035c28:	d006      	beq.n	8035c38 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8035c2a:	89fb      	ldrh	r3, [r7, #14]
 8035c2c:	3301      	adds	r3, #1
 8035c2e:	81fb      	strh	r3, [r7, #14]
 8035c30:	89fb      	ldrh	r3, [r7, #14]
 8035c32:	2b7f      	cmp	r3, #127	; 0x7f
 8035c34:	d9f2      	bls.n	8035c1c <ff_convert+0x3c>
 8035c36:	e000      	b.n	8035c3a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8035c38:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8035c3a:	89fb      	ldrh	r3, [r7, #14]
 8035c3c:	3380      	adds	r3, #128	; 0x80
 8035c3e:	b29b      	uxth	r3, r3
 8035c40:	b2db      	uxtb	r3, r3
 8035c42:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8035c44:	89fb      	ldrh	r3, [r7, #14]
}
 8035c46:	4618      	mov	r0, r3
 8035c48:	3714      	adds	r7, #20
 8035c4a:	46bd      	mov	sp, r7
 8035c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035c50:	4770      	bx	lr
 8035c52:	bf00      	nop
 8035c54:	0803ba34 	.word	0x0803ba34

08035c58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8035c58:	b480      	push	{r7}
 8035c5a:	b087      	sub	sp, #28
 8035c5c:	af00      	add	r7, sp, #0
 8035c5e:	4603      	mov	r3, r0
 8035c60:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8035c62:	88fb      	ldrh	r3, [r7, #6]
 8035c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035c68:	d201      	bcs.n	8035c6e <ff_wtoupper+0x16>
 8035c6a:	4b3e      	ldr	r3, [pc, #248]	; (8035d64 <ff_wtoupper+0x10c>)
 8035c6c:	e000      	b.n	8035c70 <ff_wtoupper+0x18>
 8035c6e:	4b3e      	ldr	r3, [pc, #248]	; (8035d68 <ff_wtoupper+0x110>)
 8035c70:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8035c72:	697b      	ldr	r3, [r7, #20]
 8035c74:	1c9a      	adds	r2, r3, #2
 8035c76:	617a      	str	r2, [r7, #20]
 8035c78:	881b      	ldrh	r3, [r3, #0]
 8035c7a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8035c7c:	8a7b      	ldrh	r3, [r7, #18]
 8035c7e:	2b00      	cmp	r3, #0
 8035c80:	d068      	beq.n	8035d54 <ff_wtoupper+0xfc>
 8035c82:	88fa      	ldrh	r2, [r7, #6]
 8035c84:	8a7b      	ldrh	r3, [r7, #18]
 8035c86:	429a      	cmp	r2, r3
 8035c88:	d364      	bcc.n	8035d54 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8035c8a:	697b      	ldr	r3, [r7, #20]
 8035c8c:	1c9a      	adds	r2, r3, #2
 8035c8e:	617a      	str	r2, [r7, #20]
 8035c90:	881b      	ldrh	r3, [r3, #0]
 8035c92:	823b      	strh	r3, [r7, #16]
 8035c94:	8a3b      	ldrh	r3, [r7, #16]
 8035c96:	0a1b      	lsrs	r3, r3, #8
 8035c98:	81fb      	strh	r3, [r7, #14]
 8035c9a:	8a3b      	ldrh	r3, [r7, #16]
 8035c9c:	b2db      	uxtb	r3, r3
 8035c9e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8035ca0:	88fa      	ldrh	r2, [r7, #6]
 8035ca2:	8a79      	ldrh	r1, [r7, #18]
 8035ca4:	8a3b      	ldrh	r3, [r7, #16]
 8035ca6:	440b      	add	r3, r1
 8035ca8:	429a      	cmp	r2, r3
 8035caa:	da49      	bge.n	8035d40 <ff_wtoupper+0xe8>
			switch (cmd) {
 8035cac:	89fb      	ldrh	r3, [r7, #14]
 8035cae:	2b08      	cmp	r3, #8
 8035cb0:	d84f      	bhi.n	8035d52 <ff_wtoupper+0xfa>
 8035cb2:	a201      	add	r2, pc, #4	; (adr r2, 8035cb8 <ff_wtoupper+0x60>)
 8035cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035cb8:	08035cdd 	.word	0x08035cdd
 8035cbc:	08035cef 	.word	0x08035cef
 8035cc0:	08035d05 	.word	0x08035d05
 8035cc4:	08035d0d 	.word	0x08035d0d
 8035cc8:	08035d15 	.word	0x08035d15
 8035ccc:	08035d1d 	.word	0x08035d1d
 8035cd0:	08035d25 	.word	0x08035d25
 8035cd4:	08035d2d 	.word	0x08035d2d
 8035cd8:	08035d35 	.word	0x08035d35
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8035cdc:	88fa      	ldrh	r2, [r7, #6]
 8035cde:	8a7b      	ldrh	r3, [r7, #18]
 8035ce0:	1ad3      	subs	r3, r2, r3
 8035ce2:	005b      	lsls	r3, r3, #1
 8035ce4:	697a      	ldr	r2, [r7, #20]
 8035ce6:	4413      	add	r3, r2
 8035ce8:	881b      	ldrh	r3, [r3, #0]
 8035cea:	80fb      	strh	r3, [r7, #6]
 8035cec:	e027      	b.n	8035d3e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8035cee:	88fa      	ldrh	r2, [r7, #6]
 8035cf0:	8a7b      	ldrh	r3, [r7, #18]
 8035cf2:	1ad3      	subs	r3, r2, r3
 8035cf4:	b29b      	uxth	r3, r3
 8035cf6:	f003 0301 	and.w	r3, r3, #1
 8035cfa:	b29b      	uxth	r3, r3
 8035cfc:	88fa      	ldrh	r2, [r7, #6]
 8035cfe:	1ad3      	subs	r3, r2, r3
 8035d00:	80fb      	strh	r3, [r7, #6]
 8035d02:	e01c      	b.n	8035d3e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8035d04:	88fb      	ldrh	r3, [r7, #6]
 8035d06:	3b10      	subs	r3, #16
 8035d08:	80fb      	strh	r3, [r7, #6]
 8035d0a:	e018      	b.n	8035d3e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8035d0c:	88fb      	ldrh	r3, [r7, #6]
 8035d0e:	3b20      	subs	r3, #32
 8035d10:	80fb      	strh	r3, [r7, #6]
 8035d12:	e014      	b.n	8035d3e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8035d14:	88fb      	ldrh	r3, [r7, #6]
 8035d16:	3b30      	subs	r3, #48	; 0x30
 8035d18:	80fb      	strh	r3, [r7, #6]
 8035d1a:	e010      	b.n	8035d3e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8035d1c:	88fb      	ldrh	r3, [r7, #6]
 8035d1e:	3b1a      	subs	r3, #26
 8035d20:	80fb      	strh	r3, [r7, #6]
 8035d22:	e00c      	b.n	8035d3e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8035d24:	88fb      	ldrh	r3, [r7, #6]
 8035d26:	3308      	adds	r3, #8
 8035d28:	80fb      	strh	r3, [r7, #6]
 8035d2a:	e008      	b.n	8035d3e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8035d2c:	88fb      	ldrh	r3, [r7, #6]
 8035d2e:	3b50      	subs	r3, #80	; 0x50
 8035d30:	80fb      	strh	r3, [r7, #6]
 8035d32:	e004      	b.n	8035d3e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8035d34:	88fb      	ldrh	r3, [r7, #6]
 8035d36:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8035d3a:	80fb      	strh	r3, [r7, #6]
 8035d3c:	bf00      	nop
			}
			break;
 8035d3e:	e008      	b.n	8035d52 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8035d40:	89fb      	ldrh	r3, [r7, #14]
 8035d42:	2b00      	cmp	r3, #0
 8035d44:	d195      	bne.n	8035c72 <ff_wtoupper+0x1a>
 8035d46:	8a3b      	ldrh	r3, [r7, #16]
 8035d48:	005b      	lsls	r3, r3, #1
 8035d4a:	697a      	ldr	r2, [r7, #20]
 8035d4c:	4413      	add	r3, r2
 8035d4e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8035d50:	e78f      	b.n	8035c72 <ff_wtoupper+0x1a>
			break;
 8035d52:	bf00      	nop
	}

	return chr;
 8035d54:	88fb      	ldrh	r3, [r7, #6]
}
 8035d56:	4618      	mov	r0, r3
 8035d58:	371c      	adds	r7, #28
 8035d5a:	46bd      	mov	sp, r7
 8035d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035d60:	4770      	bx	lr
 8035d62:	bf00      	nop
 8035d64:	0803bb34 	.word	0x0803bb34
 8035d68:	0803bd28 	.word	0x0803bd28

08035d6c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8035d6c:	b580      	push	{r7, lr}
 8035d6e:	b086      	sub	sp, #24
 8035d70:	af00      	add	r7, sp, #0
 8035d72:	4603      	mov	r3, r0
 8035d74:	6039      	str	r1, [r7, #0]
 8035d76:	71fb      	strb	r3, [r7, #7]

    int ret;
#if _USE_MUTEX

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
 8035d78:	2300      	movs	r3, #0
 8035d7a:	60fb      	str	r3, [r7, #12]
 8035d7c:	2300      	movs	r3, #0
 8035d7e:	613b      	str	r3, [r7, #16]
    *sobj = osMutexCreate(osMutex(MTX));
 8035d80:	f107 030c 	add.w	r3, r7, #12
 8035d84:	4618      	mov	r0, r3
 8035d86:	f000 f919 	bl	8035fbc <osMutexCreate>
 8035d8a:	4602      	mov	r2, r0
 8035d8c:	683b      	ldr	r3, [r7, #0]
 8035d8e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8035d90:	683b      	ldr	r3, [r7, #0]
 8035d92:	681b      	ldr	r3, [r3, #0]
 8035d94:	2b00      	cmp	r3, #0
 8035d96:	bf14      	ite	ne
 8035d98:	2301      	movne	r3, #1
 8035d9a:	2300      	moveq	r3, #0
 8035d9c:	b2db      	uxtb	r3, r3
 8035d9e:	617b      	str	r3, [r7, #20]

    return ret;
 8035da0:	697b      	ldr	r3, [r7, #20]
}
 8035da2:	4618      	mov	r0, r3
 8035da4:	3718      	adds	r7, #24
 8035da6:	46bd      	mov	sp, r7
 8035da8:	bd80      	pop	{r7, pc}

08035daa <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8035daa:	b580      	push	{r7, lr}
 8035dac:	b082      	sub	sp, #8
 8035dae:	af00      	add	r7, sp, #0
 8035db0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 8035db2:	6878      	ldr	r0, [r7, #4]
 8035db4:	f000 f99e 	bl	80360f4 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 8035db8:	2301      	movs	r3, #1
}
 8035dba:	4618      	mov	r0, r3
 8035dbc:	3708      	adds	r7, #8
 8035dbe:	46bd      	mov	sp, r7
 8035dc0:	bd80      	pop	{r7, pc}

08035dc2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8035dc2:	b580      	push	{r7, lr}
 8035dc4:	b084      	sub	sp, #16
 8035dc6:	af00      	add	r7, sp, #0
 8035dc8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8035dca:	2300      	movs	r3, #0
 8035dcc:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
 8035dce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8035dd2:	6878      	ldr	r0, [r7, #4]
 8035dd4:	f000 f90a 	bl	8035fec <osMutexWait>
 8035dd8:	4603      	mov	r3, r0
 8035dda:	2b00      	cmp	r3, #0
 8035ddc:	d101      	bne.n	8035de2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8035dde:	2301      	movs	r3, #1
 8035de0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8035de2:	68fb      	ldr	r3, [r7, #12]
}
 8035de4:	4618      	mov	r0, r3
 8035de6:	3710      	adds	r7, #16
 8035de8:	46bd      	mov	sp, r7
 8035dea:	bd80      	pop	{r7, pc}

08035dec <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8035dec:	b580      	push	{r7, lr}
 8035dee:	b082      	sub	sp, #8
 8035df0:	af00      	add	r7, sp, #0
 8035df2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 8035df4:	6878      	ldr	r0, [r7, #4]
 8035df6:	f000 f947 	bl	8036088 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 8035dfa:	bf00      	nop
 8035dfc:	3708      	adds	r7, #8
 8035dfe:	46bd      	mov	sp, r7
 8035e00:	bd80      	pop	{r7, pc}

08035e02 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8035e02:	b580      	push	{r7, lr}
 8035e04:	b082      	sub	sp, #8
 8035e06:	af00      	add	r7, sp, #0
 8035e08:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8035e0a:	6878      	ldr	r0, [r7, #4]
 8035e0c:	f003 faf4 	bl	80393f8 <pvPortMalloc>
 8035e10:	4603      	mov	r3, r0
}
 8035e12:	4618      	mov	r0, r3
 8035e14:	3708      	adds	r7, #8
 8035e16:	46bd      	mov	sp, r7
 8035e18:	bd80      	pop	{r7, pc}

08035e1a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8035e1a:	b580      	push	{r7, lr}
 8035e1c:	b082      	sub	sp, #8
 8035e1e:	af00      	add	r7, sp, #0
 8035e20:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8035e22:	6878      	ldr	r0, [r7, #4]
 8035e24:	f003 fbb4 	bl	8039590 <vPortFree>
}
 8035e28:	bf00      	nop
 8035e2a:	3708      	adds	r7, #8
 8035e2c:	46bd      	mov	sp, r7
 8035e2e:	bd80      	pop	{r7, pc}

08035e30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8035e30:	b480      	push	{r7}
 8035e32:	b085      	sub	sp, #20
 8035e34:	af00      	add	r7, sp, #0
 8035e36:	4603      	mov	r3, r0
 8035e38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8035e3a:	2300      	movs	r3, #0
 8035e3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8035e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8035e42:	2b84      	cmp	r3, #132	; 0x84
 8035e44:	d005      	beq.n	8035e52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8035e46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8035e4a:	68fb      	ldr	r3, [r7, #12]
 8035e4c:	4413      	add	r3, r2
 8035e4e:	3303      	adds	r3, #3
 8035e50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8035e52:	68fb      	ldr	r3, [r7, #12]
}
 8035e54:	4618      	mov	r0, r3
 8035e56:	3714      	adds	r7, #20
 8035e58:	46bd      	mov	sp, r7
 8035e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e5e:	4770      	bx	lr

08035e60 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8035e60:	b480      	push	{r7}
 8035e62:	b083      	sub	sp, #12
 8035e64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8035e66:	f3ef 8305 	mrs	r3, IPSR
 8035e6a:	607b      	str	r3, [r7, #4]
  return(result);
 8035e6c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8035e6e:	2b00      	cmp	r3, #0
 8035e70:	bf14      	ite	ne
 8035e72:	2301      	movne	r3, #1
 8035e74:	2300      	moveq	r3, #0
 8035e76:	b2db      	uxtb	r3, r3
}
 8035e78:	4618      	mov	r0, r3
 8035e7a:	370c      	adds	r7, #12
 8035e7c:	46bd      	mov	sp, r7
 8035e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e82:	4770      	bx	lr

08035e84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8035e84:	b580      	push	{r7, lr}
 8035e86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8035e88:	f001 fd42 	bl	8037910 <vTaskStartScheduler>
  
  return osOK;
 8035e8c:	2300      	movs	r3, #0
}
 8035e8e:	4618      	mov	r0, r3
 8035e90:	bd80      	pop	{r7, pc}

08035e92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8035e92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8035e94:	b089      	sub	sp, #36	; 0x24
 8035e96:	af04      	add	r7, sp, #16
 8035e98:	6078      	str	r0, [r7, #4]
 8035e9a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8035e9c:	687b      	ldr	r3, [r7, #4]
 8035e9e:	695b      	ldr	r3, [r3, #20]
 8035ea0:	2b00      	cmp	r3, #0
 8035ea2:	d020      	beq.n	8035ee6 <osThreadCreate+0x54>
 8035ea4:	687b      	ldr	r3, [r7, #4]
 8035ea6:	699b      	ldr	r3, [r3, #24]
 8035ea8:	2b00      	cmp	r3, #0
 8035eaa:	d01c      	beq.n	8035ee6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8035eac:	687b      	ldr	r3, [r7, #4]
 8035eae:	685c      	ldr	r4, [r3, #4]
 8035eb0:	687b      	ldr	r3, [r7, #4]
 8035eb2:	681d      	ldr	r5, [r3, #0]
 8035eb4:	687b      	ldr	r3, [r7, #4]
 8035eb6:	691e      	ldr	r6, [r3, #16]
 8035eb8:	687b      	ldr	r3, [r7, #4]
 8035eba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8035ebe:	4618      	mov	r0, r3
 8035ec0:	f7ff ffb6 	bl	8035e30 <makeFreeRtosPriority>
 8035ec4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8035ec6:	687b      	ldr	r3, [r7, #4]
 8035ec8:	695b      	ldr	r3, [r3, #20]
 8035eca:	687a      	ldr	r2, [r7, #4]
 8035ecc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8035ece:	9202      	str	r2, [sp, #8]
 8035ed0:	9301      	str	r3, [sp, #4]
 8035ed2:	9100      	str	r1, [sp, #0]
 8035ed4:	683b      	ldr	r3, [r7, #0]
 8035ed6:	4632      	mov	r2, r6
 8035ed8:	4629      	mov	r1, r5
 8035eda:	4620      	mov	r0, r4
 8035edc:	f001 fb50 	bl	8037580 <xTaskCreateStatic>
 8035ee0:	4603      	mov	r3, r0
 8035ee2:	60fb      	str	r3, [r7, #12]
 8035ee4:	e01c      	b.n	8035f20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8035ee6:	687b      	ldr	r3, [r7, #4]
 8035ee8:	685c      	ldr	r4, [r3, #4]
 8035eea:	687b      	ldr	r3, [r7, #4]
 8035eec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8035eee:	687b      	ldr	r3, [r7, #4]
 8035ef0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8035ef2:	b29e      	uxth	r6, r3
 8035ef4:	687b      	ldr	r3, [r7, #4]
 8035ef6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8035efa:	4618      	mov	r0, r3
 8035efc:	f7ff ff98 	bl	8035e30 <makeFreeRtosPriority>
 8035f00:	4602      	mov	r2, r0
 8035f02:	f107 030c 	add.w	r3, r7, #12
 8035f06:	9301      	str	r3, [sp, #4]
 8035f08:	9200      	str	r2, [sp, #0]
 8035f0a:	683b      	ldr	r3, [r7, #0]
 8035f0c:	4632      	mov	r2, r6
 8035f0e:	4629      	mov	r1, r5
 8035f10:	4620      	mov	r0, r4
 8035f12:	f001 fb92 	bl	803763a <xTaskCreate>
 8035f16:	4603      	mov	r3, r0
 8035f18:	2b01      	cmp	r3, #1
 8035f1a:	d001      	beq.n	8035f20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8035f1c:	2300      	movs	r3, #0
 8035f1e:	e000      	b.n	8035f22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8035f20:	68fb      	ldr	r3, [r7, #12]
}
 8035f22:	4618      	mov	r0, r3
 8035f24:	3714      	adds	r7, #20
 8035f26:	46bd      	mov	sp, r7
 8035f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08035f2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8035f2a:	b580      	push	{r7, lr}
 8035f2c:	b084      	sub	sp, #16
 8035f2e:	af00      	add	r7, sp, #0
 8035f30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8035f32:	687b      	ldr	r3, [r7, #4]
 8035f34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8035f36:	68fb      	ldr	r3, [r7, #12]
 8035f38:	2b00      	cmp	r3, #0
 8035f3a:	d001      	beq.n	8035f40 <osDelay+0x16>
 8035f3c:	68fb      	ldr	r3, [r7, #12]
 8035f3e:	e000      	b.n	8035f42 <osDelay+0x18>
 8035f40:	2301      	movs	r3, #1
 8035f42:	4618      	mov	r0, r3
 8035f44:	f001 fcb0 	bl	80378a8 <vTaskDelay>
  
  return osOK;
 8035f48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8035f4a:	4618      	mov	r0, r3
 8035f4c:	3710      	adds	r7, #16
 8035f4e:	46bd      	mov	sp, r7
 8035f50:	bd80      	pop	{r7, pc}
	...

08035f54 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8035f54:	b580      	push	{r7, lr}
 8035f56:	b086      	sub	sp, #24
 8035f58:	af02      	add	r7, sp, #8
 8035f5a:	60f8      	str	r0, [r7, #12]
 8035f5c:	460b      	mov	r3, r1
 8035f5e:	607a      	str	r2, [r7, #4]
 8035f60:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8035f62:	68fb      	ldr	r3, [r7, #12]
 8035f64:	685b      	ldr	r3, [r3, #4]
 8035f66:	2b00      	cmp	r3, #0
 8035f68:	d013      	beq.n	8035f92 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8035f6a:	7afb      	ldrb	r3, [r7, #11]
 8035f6c:	2b01      	cmp	r3, #1
 8035f6e:	d101      	bne.n	8035f74 <osTimerCreate+0x20>
 8035f70:	2101      	movs	r1, #1
 8035f72:	e000      	b.n	8035f76 <osTimerCreate+0x22>
 8035f74:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8035f76:	68fb      	ldr	r3, [r7, #12]
 8035f78:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8035f7a:	68fa      	ldr	r2, [r7, #12]
 8035f7c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8035f7e:	9201      	str	r2, [sp, #4]
 8035f80:	9300      	str	r3, [sp, #0]
 8035f82:	687b      	ldr	r3, [r7, #4]
 8035f84:	460a      	mov	r2, r1
 8035f86:	2101      	movs	r1, #1
 8035f88:	480b      	ldr	r0, [pc, #44]	; (8035fb8 <osTimerCreate+0x64>)
 8035f8a:	f002 fc66 	bl	803885a <xTimerCreateStatic>
 8035f8e:	4603      	mov	r3, r0
 8035f90:	e00e      	b.n	8035fb0 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8035f92:	7afb      	ldrb	r3, [r7, #11]
 8035f94:	2b01      	cmp	r3, #1
 8035f96:	d101      	bne.n	8035f9c <osTimerCreate+0x48>
 8035f98:	2201      	movs	r2, #1
 8035f9a:	e000      	b.n	8035f9e <osTimerCreate+0x4a>
 8035f9c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8035f9e:	68fb      	ldr	r3, [r7, #12]
 8035fa0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8035fa2:	9300      	str	r3, [sp, #0]
 8035fa4:	687b      	ldr	r3, [r7, #4]
 8035fa6:	2101      	movs	r1, #1
 8035fa8:	4803      	ldr	r0, [pc, #12]	; (8035fb8 <osTimerCreate+0x64>)
 8035faa:	f002 fc35 	bl	8038818 <xTimerCreate>
 8035fae:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8035fb0:	4618      	mov	r0, r3
 8035fb2:	3710      	adds	r7, #16
 8035fb4:	46bd      	mov	sp, r7
 8035fb6:	bd80      	pop	{r7, pc}
 8035fb8:	0803b8f0 	.word	0x0803b8f0

08035fbc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8035fbc:	b580      	push	{r7, lr}
 8035fbe:	b082      	sub	sp, #8
 8035fc0:	af00      	add	r7, sp, #0
 8035fc2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8035fc4:	687b      	ldr	r3, [r7, #4]
 8035fc6:	685b      	ldr	r3, [r3, #4]
 8035fc8:	2b00      	cmp	r3, #0
 8035fca:	d007      	beq.n	8035fdc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8035fcc:	687b      	ldr	r3, [r7, #4]
 8035fce:	685b      	ldr	r3, [r3, #4]
 8035fd0:	4619      	mov	r1, r3
 8035fd2:	2001      	movs	r0, #1
 8035fd4:	f000 fc53 	bl	803687e <xQueueCreateMutexStatic>
 8035fd8:	4603      	mov	r3, r0
 8035fda:	e003      	b.n	8035fe4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8035fdc:	2001      	movs	r0, #1
 8035fde:	f000 fc36 	bl	803684e <xQueueCreateMutex>
 8035fe2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8035fe4:	4618      	mov	r0, r3
 8035fe6:	3708      	adds	r7, #8
 8035fe8:	46bd      	mov	sp, r7
 8035fea:	bd80      	pop	{r7, pc}

08035fec <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8035fec:	b580      	push	{r7, lr}
 8035fee:	b084      	sub	sp, #16
 8035ff0:	af00      	add	r7, sp, #0
 8035ff2:	6078      	str	r0, [r7, #4]
 8035ff4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8035ff6:	2300      	movs	r3, #0
 8035ff8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8035ffa:	687b      	ldr	r3, [r7, #4]
 8035ffc:	2b00      	cmp	r3, #0
 8035ffe:	d101      	bne.n	8036004 <osMutexWait+0x18>
    return osErrorParameter;
 8036000:	2380      	movs	r3, #128	; 0x80
 8036002:	e03a      	b.n	803607a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8036004:	2300      	movs	r3, #0
 8036006:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8036008:	683b      	ldr	r3, [r7, #0]
 803600a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803600e:	d103      	bne.n	8036018 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8036010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8036014:	60fb      	str	r3, [r7, #12]
 8036016:	e009      	b.n	803602c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8036018:	683b      	ldr	r3, [r7, #0]
 803601a:	2b00      	cmp	r3, #0
 803601c:	d006      	beq.n	803602c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 803601e:	683b      	ldr	r3, [r7, #0]
 8036020:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8036022:	68fb      	ldr	r3, [r7, #12]
 8036024:	2b00      	cmp	r3, #0
 8036026:	d101      	bne.n	803602c <osMutexWait+0x40>
      ticks = 1;
 8036028:	2301      	movs	r3, #1
 803602a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 803602c:	f7ff ff18 	bl	8035e60 <inHandlerMode>
 8036030:	4603      	mov	r3, r0
 8036032:	2b00      	cmp	r3, #0
 8036034:	d017      	beq.n	8036066 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8036036:	f107 0308 	add.w	r3, r7, #8
 803603a:	461a      	mov	r2, r3
 803603c:	2100      	movs	r1, #0
 803603e:	6878      	ldr	r0, [r7, #4]
 8036040:	f001 f84a 	bl	80370d8 <xQueueReceiveFromISR>
 8036044:	4603      	mov	r3, r0
 8036046:	2b01      	cmp	r3, #1
 8036048:	d001      	beq.n	803604e <osMutexWait+0x62>
      return osErrorOS;
 803604a:	23ff      	movs	r3, #255	; 0xff
 803604c:	e015      	b.n	803607a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 803604e:	68bb      	ldr	r3, [r7, #8]
 8036050:	2b00      	cmp	r3, #0
 8036052:	d011      	beq.n	8036078 <osMutexWait+0x8c>
 8036054:	4b0b      	ldr	r3, [pc, #44]	; (8036084 <osMutexWait+0x98>)
 8036056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803605a:	601a      	str	r2, [r3, #0]
 803605c:	f3bf 8f4f 	dsb	sy
 8036060:	f3bf 8f6f 	isb	sy
 8036064:	e008      	b.n	8036078 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8036066:	68f9      	ldr	r1, [r7, #12]
 8036068:	6878      	ldr	r0, [r7, #4]
 803606a:	f000 ff29 	bl	8036ec0 <xQueueSemaphoreTake>
 803606e:	4603      	mov	r3, r0
 8036070:	2b01      	cmp	r3, #1
 8036072:	d001      	beq.n	8036078 <osMutexWait+0x8c>
    return osErrorOS;
 8036074:	23ff      	movs	r3, #255	; 0xff
 8036076:	e000      	b.n	803607a <osMutexWait+0x8e>
  }
  
  return osOK;
 8036078:	2300      	movs	r3, #0
}
 803607a:	4618      	mov	r0, r3
 803607c:	3710      	adds	r7, #16
 803607e:	46bd      	mov	sp, r7
 8036080:	bd80      	pop	{r7, pc}
 8036082:	bf00      	nop
 8036084:	e000ed04 	.word	0xe000ed04

08036088 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8036088:	b580      	push	{r7, lr}
 803608a:	b084      	sub	sp, #16
 803608c:	af00      	add	r7, sp, #0
 803608e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8036090:	2300      	movs	r3, #0
 8036092:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8036094:	2300      	movs	r3, #0
 8036096:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8036098:	f7ff fee2 	bl	8035e60 <inHandlerMode>
 803609c:	4603      	mov	r3, r0
 803609e:	2b00      	cmp	r3, #0
 80360a0:	d016      	beq.n	80360d0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80360a2:	f107 0308 	add.w	r3, r7, #8
 80360a6:	4619      	mov	r1, r3
 80360a8:	6878      	ldr	r0, [r7, #4]
 80360aa:	f000 fd9c 	bl	8036be6 <xQueueGiveFromISR>
 80360ae:	4603      	mov	r3, r0
 80360b0:	2b01      	cmp	r3, #1
 80360b2:	d001      	beq.n	80360b8 <osMutexRelease+0x30>
      return osErrorOS;
 80360b4:	23ff      	movs	r3, #255	; 0xff
 80360b6:	e017      	b.n	80360e8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80360b8:	68bb      	ldr	r3, [r7, #8]
 80360ba:	2b00      	cmp	r3, #0
 80360bc:	d013      	beq.n	80360e6 <osMutexRelease+0x5e>
 80360be:	4b0c      	ldr	r3, [pc, #48]	; (80360f0 <osMutexRelease+0x68>)
 80360c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80360c4:	601a      	str	r2, [r3, #0]
 80360c6:	f3bf 8f4f 	dsb	sy
 80360ca:	f3bf 8f6f 	isb	sy
 80360ce:	e00a      	b.n	80360e6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80360d0:	2300      	movs	r3, #0
 80360d2:	2200      	movs	r2, #0
 80360d4:	2100      	movs	r1, #0
 80360d6:	6878      	ldr	r0, [r7, #4]
 80360d8:	f000 fbec 	bl	80368b4 <xQueueGenericSend>
 80360dc:	4603      	mov	r3, r0
 80360de:	2b01      	cmp	r3, #1
 80360e0:	d001      	beq.n	80360e6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80360e2:	23ff      	movs	r3, #255	; 0xff
 80360e4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80360e6:	68fb      	ldr	r3, [r7, #12]
}
 80360e8:	4618      	mov	r0, r3
 80360ea:	3710      	adds	r7, #16
 80360ec:	46bd      	mov	sp, r7
 80360ee:	bd80      	pop	{r7, pc}
 80360f0:	e000ed04 	.word	0xe000ed04

080360f4 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 80360f4:	b580      	push	{r7, lr}
 80360f6:	b082      	sub	sp, #8
 80360f8:	af00      	add	r7, sp, #0
 80360fa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80360fc:	f7ff feb0 	bl	8035e60 <inHandlerMode>
 8036100:	4603      	mov	r3, r0
 8036102:	2b00      	cmp	r3, #0
 8036104:	d001      	beq.n	803610a <osMutexDelete+0x16>
    return osErrorISR;
 8036106:	2382      	movs	r3, #130	; 0x82
 8036108:	e003      	b.n	8036112 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 803610a:	6878      	ldr	r0, [r7, #4]
 803610c:	f001 f864 	bl	80371d8 <vQueueDelete>

  return osOK;
 8036110:	2300      	movs	r3, #0
}
 8036112:	4618      	mov	r0, r3
 8036114:	3708      	adds	r7, #8
 8036116:	46bd      	mov	sp, r7
 8036118:	bd80      	pop	{r7, pc}

0803611a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 803611a:	b580      	push	{r7, lr}
 803611c:	b086      	sub	sp, #24
 803611e:	af02      	add	r7, sp, #8
 8036120:	6078      	str	r0, [r7, #4]
 8036122:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8036124:	687b      	ldr	r3, [r7, #4]
 8036126:	685b      	ldr	r3, [r3, #4]
 8036128:	2b00      	cmp	r3, #0
 803612a:	d00f      	beq.n	803614c <osSemaphoreCreate+0x32>
    if (count == 1) {
 803612c:	683b      	ldr	r3, [r7, #0]
 803612e:	2b01      	cmp	r3, #1
 8036130:	d10a      	bne.n	8036148 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8036132:	687b      	ldr	r3, [r7, #4]
 8036134:	685b      	ldr	r3, [r3, #4]
 8036136:	2203      	movs	r2, #3
 8036138:	9200      	str	r2, [sp, #0]
 803613a:	2200      	movs	r2, #0
 803613c:	2100      	movs	r1, #0
 803613e:	2001      	movs	r0, #1
 8036140:	f000 fa9a 	bl	8036678 <xQueueGenericCreateStatic>
 8036144:	4603      	mov	r3, r0
 8036146:	e016      	b.n	8036176 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8036148:	2300      	movs	r3, #0
 803614a:	e014      	b.n	8036176 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 803614c:	683b      	ldr	r3, [r7, #0]
 803614e:	2b01      	cmp	r3, #1
 8036150:	d110      	bne.n	8036174 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8036152:	2203      	movs	r2, #3
 8036154:	2100      	movs	r1, #0
 8036156:	2001      	movs	r0, #1
 8036158:	f000 fb06 	bl	8036768 <xQueueGenericCreate>
 803615c:	60f8      	str	r0, [r7, #12]
 803615e:	68fb      	ldr	r3, [r7, #12]
 8036160:	2b00      	cmp	r3, #0
 8036162:	d005      	beq.n	8036170 <osSemaphoreCreate+0x56>
 8036164:	2300      	movs	r3, #0
 8036166:	2200      	movs	r2, #0
 8036168:	2100      	movs	r1, #0
 803616a:	68f8      	ldr	r0, [r7, #12]
 803616c:	f000 fba2 	bl	80368b4 <xQueueGenericSend>
      return sema;
 8036170:	68fb      	ldr	r3, [r7, #12]
 8036172:	e000      	b.n	8036176 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8036174:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8036176:	4618      	mov	r0, r3
 8036178:	3710      	adds	r7, #16
 803617a:	46bd      	mov	sp, r7
 803617c:	bd80      	pop	{r7, pc}
	...

08036180 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8036180:	b580      	push	{r7, lr}
 8036182:	b084      	sub	sp, #16
 8036184:	af00      	add	r7, sp, #0
 8036186:	6078      	str	r0, [r7, #4]
 8036188:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 803618a:	2300      	movs	r3, #0
 803618c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 803618e:	687b      	ldr	r3, [r7, #4]
 8036190:	2b00      	cmp	r3, #0
 8036192:	d101      	bne.n	8036198 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8036194:	2380      	movs	r3, #128	; 0x80
 8036196:	e03a      	b.n	803620e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8036198:	2300      	movs	r3, #0
 803619a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 803619c:	683b      	ldr	r3, [r7, #0]
 803619e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80361a2:	d103      	bne.n	80361ac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80361a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80361a8:	60fb      	str	r3, [r7, #12]
 80361aa:	e009      	b.n	80361c0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80361ac:	683b      	ldr	r3, [r7, #0]
 80361ae:	2b00      	cmp	r3, #0
 80361b0:	d006      	beq.n	80361c0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80361b2:	683b      	ldr	r3, [r7, #0]
 80361b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80361b6:	68fb      	ldr	r3, [r7, #12]
 80361b8:	2b00      	cmp	r3, #0
 80361ba:	d101      	bne.n	80361c0 <osSemaphoreWait+0x40>
      ticks = 1;
 80361bc:	2301      	movs	r3, #1
 80361be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80361c0:	f7ff fe4e 	bl	8035e60 <inHandlerMode>
 80361c4:	4603      	mov	r3, r0
 80361c6:	2b00      	cmp	r3, #0
 80361c8:	d017      	beq.n	80361fa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80361ca:	f107 0308 	add.w	r3, r7, #8
 80361ce:	461a      	mov	r2, r3
 80361d0:	2100      	movs	r1, #0
 80361d2:	6878      	ldr	r0, [r7, #4]
 80361d4:	f000 ff80 	bl	80370d8 <xQueueReceiveFromISR>
 80361d8:	4603      	mov	r3, r0
 80361da:	2b01      	cmp	r3, #1
 80361dc:	d001      	beq.n	80361e2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80361de:	23ff      	movs	r3, #255	; 0xff
 80361e0:	e015      	b.n	803620e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80361e2:	68bb      	ldr	r3, [r7, #8]
 80361e4:	2b00      	cmp	r3, #0
 80361e6:	d011      	beq.n	803620c <osSemaphoreWait+0x8c>
 80361e8:	4b0b      	ldr	r3, [pc, #44]	; (8036218 <osSemaphoreWait+0x98>)
 80361ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80361ee:	601a      	str	r2, [r3, #0]
 80361f0:	f3bf 8f4f 	dsb	sy
 80361f4:	f3bf 8f6f 	isb	sy
 80361f8:	e008      	b.n	803620c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80361fa:	68f9      	ldr	r1, [r7, #12]
 80361fc:	6878      	ldr	r0, [r7, #4]
 80361fe:	f000 fe5f 	bl	8036ec0 <xQueueSemaphoreTake>
 8036202:	4603      	mov	r3, r0
 8036204:	2b01      	cmp	r3, #1
 8036206:	d001      	beq.n	803620c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8036208:	23ff      	movs	r3, #255	; 0xff
 803620a:	e000      	b.n	803620e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 803620c:	2300      	movs	r3, #0
}
 803620e:	4618      	mov	r0, r3
 8036210:	3710      	adds	r7, #16
 8036212:	46bd      	mov	sp, r7
 8036214:	bd80      	pop	{r7, pc}
 8036216:	bf00      	nop
 8036218:	e000ed04 	.word	0xe000ed04

0803621c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 803621c:	b580      	push	{r7, lr}
 803621e:	b084      	sub	sp, #16
 8036220:	af00      	add	r7, sp, #0
 8036222:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8036224:	2300      	movs	r3, #0
 8036226:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8036228:	2300      	movs	r3, #0
 803622a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 803622c:	f7ff fe18 	bl	8035e60 <inHandlerMode>
 8036230:	4603      	mov	r3, r0
 8036232:	2b00      	cmp	r3, #0
 8036234:	d016      	beq.n	8036264 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8036236:	f107 0308 	add.w	r3, r7, #8
 803623a:	4619      	mov	r1, r3
 803623c:	6878      	ldr	r0, [r7, #4]
 803623e:	f000 fcd2 	bl	8036be6 <xQueueGiveFromISR>
 8036242:	4603      	mov	r3, r0
 8036244:	2b01      	cmp	r3, #1
 8036246:	d001      	beq.n	803624c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8036248:	23ff      	movs	r3, #255	; 0xff
 803624a:	e017      	b.n	803627c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 803624c:	68bb      	ldr	r3, [r7, #8]
 803624e:	2b00      	cmp	r3, #0
 8036250:	d013      	beq.n	803627a <osSemaphoreRelease+0x5e>
 8036252:	4b0c      	ldr	r3, [pc, #48]	; (8036284 <osSemaphoreRelease+0x68>)
 8036254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036258:	601a      	str	r2, [r3, #0]
 803625a:	f3bf 8f4f 	dsb	sy
 803625e:	f3bf 8f6f 	isb	sy
 8036262:	e00a      	b.n	803627a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8036264:	2300      	movs	r3, #0
 8036266:	2200      	movs	r2, #0
 8036268:	2100      	movs	r1, #0
 803626a:	6878      	ldr	r0, [r7, #4]
 803626c:	f000 fb22 	bl	80368b4 <xQueueGenericSend>
 8036270:	4603      	mov	r3, r0
 8036272:	2b01      	cmp	r3, #1
 8036274:	d001      	beq.n	803627a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8036276:	23ff      	movs	r3, #255	; 0xff
 8036278:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 803627a:	68fb      	ldr	r3, [r7, #12]
}
 803627c:	4618      	mov	r0, r3
 803627e:	3710      	adds	r7, #16
 8036280:	46bd      	mov	sp, r7
 8036282:	bd80      	pop	{r7, pc}
 8036284:	e000ed04 	.word	0xe000ed04

08036288 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8036288:	b590      	push	{r4, r7, lr}
 803628a:	b085      	sub	sp, #20
 803628c:	af02      	add	r7, sp, #8
 803628e:	6078      	str	r0, [r7, #4]
 8036290:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8036292:	687b      	ldr	r3, [r7, #4]
 8036294:	689b      	ldr	r3, [r3, #8]
 8036296:	2b00      	cmp	r3, #0
 8036298:	d011      	beq.n	80362be <osMessageCreate+0x36>
 803629a:	687b      	ldr	r3, [r7, #4]
 803629c:	68db      	ldr	r3, [r3, #12]
 803629e:	2b00      	cmp	r3, #0
 80362a0:	d00d      	beq.n	80362be <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80362a2:	687b      	ldr	r3, [r7, #4]
 80362a4:	6818      	ldr	r0, [r3, #0]
 80362a6:	687b      	ldr	r3, [r7, #4]
 80362a8:	6859      	ldr	r1, [r3, #4]
 80362aa:	687b      	ldr	r3, [r7, #4]
 80362ac:	689a      	ldr	r2, [r3, #8]
 80362ae:	687b      	ldr	r3, [r7, #4]
 80362b0:	68db      	ldr	r3, [r3, #12]
 80362b2:	2400      	movs	r4, #0
 80362b4:	9400      	str	r4, [sp, #0]
 80362b6:	f000 f9df 	bl	8036678 <xQueueGenericCreateStatic>
 80362ba:	4603      	mov	r3, r0
 80362bc:	e008      	b.n	80362d0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80362be:	687b      	ldr	r3, [r7, #4]
 80362c0:	6818      	ldr	r0, [r3, #0]
 80362c2:	687b      	ldr	r3, [r7, #4]
 80362c4:	685b      	ldr	r3, [r3, #4]
 80362c6:	2200      	movs	r2, #0
 80362c8:	4619      	mov	r1, r3
 80362ca:	f000 fa4d 	bl	8036768 <xQueueGenericCreate>
 80362ce:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80362d0:	4618      	mov	r0, r3
 80362d2:	370c      	adds	r7, #12
 80362d4:	46bd      	mov	sp, r7
 80362d6:	bd90      	pop	{r4, r7, pc}

080362d8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80362d8:	b580      	push	{r7, lr}
 80362da:	b086      	sub	sp, #24
 80362dc:	af00      	add	r7, sp, #0
 80362de:	60f8      	str	r0, [r7, #12]
 80362e0:	60b9      	str	r1, [r7, #8]
 80362e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80362e4:	2300      	movs	r3, #0
 80362e6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80362e8:	687b      	ldr	r3, [r7, #4]
 80362ea:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80362ec:	697b      	ldr	r3, [r7, #20]
 80362ee:	2b00      	cmp	r3, #0
 80362f0:	d101      	bne.n	80362f6 <osMessagePut+0x1e>
    ticks = 1;
 80362f2:	2301      	movs	r3, #1
 80362f4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80362f6:	f7ff fdb3 	bl	8035e60 <inHandlerMode>
 80362fa:	4603      	mov	r3, r0
 80362fc:	2b00      	cmp	r3, #0
 80362fe:	d018      	beq.n	8036332 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8036300:	f107 0210 	add.w	r2, r7, #16
 8036304:	f107 0108 	add.w	r1, r7, #8
 8036308:	2300      	movs	r3, #0
 803630a:	68f8      	ldr	r0, [r7, #12]
 803630c:	f000 fbd0 	bl	8036ab0 <xQueueGenericSendFromISR>
 8036310:	4603      	mov	r3, r0
 8036312:	2b01      	cmp	r3, #1
 8036314:	d001      	beq.n	803631a <osMessagePut+0x42>
      return osErrorOS;
 8036316:	23ff      	movs	r3, #255	; 0xff
 8036318:	e018      	b.n	803634c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 803631a:	693b      	ldr	r3, [r7, #16]
 803631c:	2b00      	cmp	r3, #0
 803631e:	d014      	beq.n	803634a <osMessagePut+0x72>
 8036320:	4b0c      	ldr	r3, [pc, #48]	; (8036354 <osMessagePut+0x7c>)
 8036322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036326:	601a      	str	r2, [r3, #0]
 8036328:	f3bf 8f4f 	dsb	sy
 803632c:	f3bf 8f6f 	isb	sy
 8036330:	e00b      	b.n	803634a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8036332:	f107 0108 	add.w	r1, r7, #8
 8036336:	2300      	movs	r3, #0
 8036338:	697a      	ldr	r2, [r7, #20]
 803633a:	68f8      	ldr	r0, [r7, #12]
 803633c:	f000 faba 	bl	80368b4 <xQueueGenericSend>
 8036340:	4603      	mov	r3, r0
 8036342:	2b01      	cmp	r3, #1
 8036344:	d001      	beq.n	803634a <osMessagePut+0x72>
      return osErrorOS;
 8036346:	23ff      	movs	r3, #255	; 0xff
 8036348:	e000      	b.n	803634c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 803634a:	2300      	movs	r3, #0
}
 803634c:	4618      	mov	r0, r3
 803634e:	3718      	adds	r7, #24
 8036350:	46bd      	mov	sp, r7
 8036352:	bd80      	pop	{r7, pc}
 8036354:	e000ed04 	.word	0xe000ed04

08036358 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8036358:	b590      	push	{r4, r7, lr}
 803635a:	b08b      	sub	sp, #44	; 0x2c
 803635c:	af00      	add	r7, sp, #0
 803635e:	60f8      	str	r0, [r7, #12]
 8036360:	60b9      	str	r1, [r7, #8]
 8036362:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8036364:	68bb      	ldr	r3, [r7, #8]
 8036366:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8036368:	2300      	movs	r3, #0
 803636a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 803636c:	68bb      	ldr	r3, [r7, #8]
 803636e:	2b00      	cmp	r3, #0
 8036370:	d10a      	bne.n	8036388 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8036372:	2380      	movs	r3, #128	; 0x80
 8036374:	617b      	str	r3, [r7, #20]
    return event;
 8036376:	68fb      	ldr	r3, [r7, #12]
 8036378:	461c      	mov	r4, r3
 803637a:	f107 0314 	add.w	r3, r7, #20
 803637e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8036382:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8036386:	e054      	b.n	8036432 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8036388:	2300      	movs	r3, #0
 803638a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 803638c:	2300      	movs	r3, #0
 803638e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8036390:	687b      	ldr	r3, [r7, #4]
 8036392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036396:	d103      	bne.n	80363a0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8036398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803639c:	627b      	str	r3, [r7, #36]	; 0x24
 803639e:	e009      	b.n	80363b4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80363a0:	687b      	ldr	r3, [r7, #4]
 80363a2:	2b00      	cmp	r3, #0
 80363a4:	d006      	beq.n	80363b4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80363a6:	687b      	ldr	r3, [r7, #4]
 80363a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80363aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80363ac:	2b00      	cmp	r3, #0
 80363ae:	d101      	bne.n	80363b4 <osMessageGet+0x5c>
      ticks = 1;
 80363b0:	2301      	movs	r3, #1
 80363b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80363b4:	f7ff fd54 	bl	8035e60 <inHandlerMode>
 80363b8:	4603      	mov	r3, r0
 80363ba:	2b00      	cmp	r3, #0
 80363bc:	d01c      	beq.n	80363f8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80363be:	f107 0220 	add.w	r2, r7, #32
 80363c2:	f107 0314 	add.w	r3, r7, #20
 80363c6:	3304      	adds	r3, #4
 80363c8:	4619      	mov	r1, r3
 80363ca:	68b8      	ldr	r0, [r7, #8]
 80363cc:	f000 fe84 	bl	80370d8 <xQueueReceiveFromISR>
 80363d0:	4603      	mov	r3, r0
 80363d2:	2b01      	cmp	r3, #1
 80363d4:	d102      	bne.n	80363dc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80363d6:	2310      	movs	r3, #16
 80363d8:	617b      	str	r3, [r7, #20]
 80363da:	e001      	b.n	80363e0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80363dc:	2300      	movs	r3, #0
 80363de:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80363e0:	6a3b      	ldr	r3, [r7, #32]
 80363e2:	2b00      	cmp	r3, #0
 80363e4:	d01d      	beq.n	8036422 <osMessageGet+0xca>
 80363e6:	4b15      	ldr	r3, [pc, #84]	; (803643c <osMessageGet+0xe4>)
 80363e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80363ec:	601a      	str	r2, [r3, #0]
 80363ee:	f3bf 8f4f 	dsb	sy
 80363f2:	f3bf 8f6f 	isb	sy
 80363f6:	e014      	b.n	8036422 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80363f8:	f107 0314 	add.w	r3, r7, #20
 80363fc:	3304      	adds	r3, #4
 80363fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8036400:	4619      	mov	r1, r3
 8036402:	68b8      	ldr	r0, [r7, #8]
 8036404:	f000 fc7c 	bl	8036d00 <xQueueReceive>
 8036408:	4603      	mov	r3, r0
 803640a:	2b01      	cmp	r3, #1
 803640c:	d102      	bne.n	8036414 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 803640e:	2310      	movs	r3, #16
 8036410:	617b      	str	r3, [r7, #20]
 8036412:	e006      	b.n	8036422 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8036414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036416:	2b00      	cmp	r3, #0
 8036418:	d101      	bne.n	803641e <osMessageGet+0xc6>
 803641a:	2300      	movs	r3, #0
 803641c:	e000      	b.n	8036420 <osMessageGet+0xc8>
 803641e:	2340      	movs	r3, #64	; 0x40
 8036420:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8036422:	68fb      	ldr	r3, [r7, #12]
 8036424:	461c      	mov	r4, r3
 8036426:	f107 0314 	add.w	r3, r7, #20
 803642a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 803642e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8036432:	68f8      	ldr	r0, [r7, #12]
 8036434:	372c      	adds	r7, #44	; 0x2c
 8036436:	46bd      	mov	sp, r7
 8036438:	bd90      	pop	{r4, r7, pc}
 803643a:	bf00      	nop
 803643c:	e000ed04 	.word	0xe000ed04

08036440 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8036440:	b480      	push	{r7}
 8036442:	b083      	sub	sp, #12
 8036444:	af00      	add	r7, sp, #0
 8036446:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8036448:	687b      	ldr	r3, [r7, #4]
 803644a:	f103 0208 	add.w	r2, r3, #8
 803644e:	687b      	ldr	r3, [r7, #4]
 8036450:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8036452:	687b      	ldr	r3, [r7, #4]
 8036454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8036458:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 803645a:	687b      	ldr	r3, [r7, #4]
 803645c:	f103 0208 	add.w	r2, r3, #8
 8036460:	687b      	ldr	r3, [r7, #4]
 8036462:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8036464:	687b      	ldr	r3, [r7, #4]
 8036466:	f103 0208 	add.w	r2, r3, #8
 803646a:	687b      	ldr	r3, [r7, #4]
 803646c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 803646e:	687b      	ldr	r3, [r7, #4]
 8036470:	2200      	movs	r2, #0
 8036472:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8036474:	bf00      	nop
 8036476:	370c      	adds	r7, #12
 8036478:	46bd      	mov	sp, r7
 803647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803647e:	4770      	bx	lr

08036480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8036480:	b480      	push	{r7}
 8036482:	b083      	sub	sp, #12
 8036484:	af00      	add	r7, sp, #0
 8036486:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8036488:	687b      	ldr	r3, [r7, #4]
 803648a:	2200      	movs	r2, #0
 803648c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 803648e:	bf00      	nop
 8036490:	370c      	adds	r7, #12
 8036492:	46bd      	mov	sp, r7
 8036494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036498:	4770      	bx	lr

0803649a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 803649a:	b480      	push	{r7}
 803649c:	b085      	sub	sp, #20
 803649e:	af00      	add	r7, sp, #0
 80364a0:	6078      	str	r0, [r7, #4]
 80364a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80364a4:	687b      	ldr	r3, [r7, #4]
 80364a6:	685b      	ldr	r3, [r3, #4]
 80364a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80364aa:	683b      	ldr	r3, [r7, #0]
 80364ac:	68fa      	ldr	r2, [r7, #12]
 80364ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80364b0:	68fb      	ldr	r3, [r7, #12]
 80364b2:	689a      	ldr	r2, [r3, #8]
 80364b4:	683b      	ldr	r3, [r7, #0]
 80364b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80364b8:	68fb      	ldr	r3, [r7, #12]
 80364ba:	689b      	ldr	r3, [r3, #8]
 80364bc:	683a      	ldr	r2, [r7, #0]
 80364be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80364c0:	68fb      	ldr	r3, [r7, #12]
 80364c2:	683a      	ldr	r2, [r7, #0]
 80364c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80364c6:	683b      	ldr	r3, [r7, #0]
 80364c8:	687a      	ldr	r2, [r7, #4]
 80364ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80364cc:	687b      	ldr	r3, [r7, #4]
 80364ce:	681b      	ldr	r3, [r3, #0]
 80364d0:	1c5a      	adds	r2, r3, #1
 80364d2:	687b      	ldr	r3, [r7, #4]
 80364d4:	601a      	str	r2, [r3, #0]
}
 80364d6:	bf00      	nop
 80364d8:	3714      	adds	r7, #20
 80364da:	46bd      	mov	sp, r7
 80364dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80364e0:	4770      	bx	lr

080364e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80364e2:	b480      	push	{r7}
 80364e4:	b085      	sub	sp, #20
 80364e6:	af00      	add	r7, sp, #0
 80364e8:	6078      	str	r0, [r7, #4]
 80364ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80364ec:	683b      	ldr	r3, [r7, #0]
 80364ee:	681b      	ldr	r3, [r3, #0]
 80364f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80364f2:	68bb      	ldr	r3, [r7, #8]
 80364f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80364f8:	d103      	bne.n	8036502 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80364fa:	687b      	ldr	r3, [r7, #4]
 80364fc:	691b      	ldr	r3, [r3, #16]
 80364fe:	60fb      	str	r3, [r7, #12]
 8036500:	e00c      	b.n	803651c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8036502:	687b      	ldr	r3, [r7, #4]
 8036504:	3308      	adds	r3, #8
 8036506:	60fb      	str	r3, [r7, #12]
 8036508:	e002      	b.n	8036510 <vListInsert+0x2e>
 803650a:	68fb      	ldr	r3, [r7, #12]
 803650c:	685b      	ldr	r3, [r3, #4]
 803650e:	60fb      	str	r3, [r7, #12]
 8036510:	68fb      	ldr	r3, [r7, #12]
 8036512:	685b      	ldr	r3, [r3, #4]
 8036514:	681b      	ldr	r3, [r3, #0]
 8036516:	68ba      	ldr	r2, [r7, #8]
 8036518:	429a      	cmp	r2, r3
 803651a:	d2f6      	bcs.n	803650a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 803651c:	68fb      	ldr	r3, [r7, #12]
 803651e:	685a      	ldr	r2, [r3, #4]
 8036520:	683b      	ldr	r3, [r7, #0]
 8036522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8036524:	683b      	ldr	r3, [r7, #0]
 8036526:	685b      	ldr	r3, [r3, #4]
 8036528:	683a      	ldr	r2, [r7, #0]
 803652a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 803652c:	683b      	ldr	r3, [r7, #0]
 803652e:	68fa      	ldr	r2, [r7, #12]
 8036530:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8036532:	68fb      	ldr	r3, [r7, #12]
 8036534:	683a      	ldr	r2, [r7, #0]
 8036536:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8036538:	683b      	ldr	r3, [r7, #0]
 803653a:	687a      	ldr	r2, [r7, #4]
 803653c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 803653e:	687b      	ldr	r3, [r7, #4]
 8036540:	681b      	ldr	r3, [r3, #0]
 8036542:	1c5a      	adds	r2, r3, #1
 8036544:	687b      	ldr	r3, [r7, #4]
 8036546:	601a      	str	r2, [r3, #0]
}
 8036548:	bf00      	nop
 803654a:	3714      	adds	r7, #20
 803654c:	46bd      	mov	sp, r7
 803654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036552:	4770      	bx	lr

08036554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8036554:	b480      	push	{r7}
 8036556:	b085      	sub	sp, #20
 8036558:	af00      	add	r7, sp, #0
 803655a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 803655c:	687b      	ldr	r3, [r7, #4]
 803655e:	691b      	ldr	r3, [r3, #16]
 8036560:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8036562:	687b      	ldr	r3, [r7, #4]
 8036564:	685b      	ldr	r3, [r3, #4]
 8036566:	687a      	ldr	r2, [r7, #4]
 8036568:	6892      	ldr	r2, [r2, #8]
 803656a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 803656c:	687b      	ldr	r3, [r7, #4]
 803656e:	689b      	ldr	r3, [r3, #8]
 8036570:	687a      	ldr	r2, [r7, #4]
 8036572:	6852      	ldr	r2, [r2, #4]
 8036574:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8036576:	68fb      	ldr	r3, [r7, #12]
 8036578:	685b      	ldr	r3, [r3, #4]
 803657a:	687a      	ldr	r2, [r7, #4]
 803657c:	429a      	cmp	r2, r3
 803657e:	d103      	bne.n	8036588 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8036580:	687b      	ldr	r3, [r7, #4]
 8036582:	689a      	ldr	r2, [r3, #8]
 8036584:	68fb      	ldr	r3, [r7, #12]
 8036586:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8036588:	687b      	ldr	r3, [r7, #4]
 803658a:	2200      	movs	r2, #0
 803658c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 803658e:	68fb      	ldr	r3, [r7, #12]
 8036590:	681b      	ldr	r3, [r3, #0]
 8036592:	1e5a      	subs	r2, r3, #1
 8036594:	68fb      	ldr	r3, [r7, #12]
 8036596:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8036598:	68fb      	ldr	r3, [r7, #12]
 803659a:	681b      	ldr	r3, [r3, #0]
}
 803659c:	4618      	mov	r0, r3
 803659e:	3714      	adds	r7, #20
 80365a0:	46bd      	mov	sp, r7
 80365a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80365a6:	4770      	bx	lr

080365a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80365a8:	b580      	push	{r7, lr}
 80365aa:	b084      	sub	sp, #16
 80365ac:	af00      	add	r7, sp, #0
 80365ae:	6078      	str	r0, [r7, #4]
 80365b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80365b2:	687b      	ldr	r3, [r7, #4]
 80365b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80365b6:	68fb      	ldr	r3, [r7, #12]
 80365b8:	2b00      	cmp	r3, #0
 80365ba:	d10a      	bne.n	80365d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80365bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80365c0:	f383 8811 	msr	BASEPRI, r3
 80365c4:	f3bf 8f6f 	isb	sy
 80365c8:	f3bf 8f4f 	dsb	sy
 80365cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80365ce:	bf00      	nop
 80365d0:	e7fe      	b.n	80365d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80365d2:	f002 fdef 	bl	80391b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80365d6:	68fb      	ldr	r3, [r7, #12]
 80365d8:	681a      	ldr	r2, [r3, #0]
 80365da:	68fb      	ldr	r3, [r7, #12]
 80365dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80365de:	68f9      	ldr	r1, [r7, #12]
 80365e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80365e2:	fb01 f303 	mul.w	r3, r1, r3
 80365e6:	441a      	add	r2, r3
 80365e8:	68fb      	ldr	r3, [r7, #12]
 80365ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80365ec:	68fb      	ldr	r3, [r7, #12]
 80365ee:	2200      	movs	r2, #0
 80365f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80365f2:	68fb      	ldr	r3, [r7, #12]
 80365f4:	681a      	ldr	r2, [r3, #0]
 80365f6:	68fb      	ldr	r3, [r7, #12]
 80365f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80365fa:	68fb      	ldr	r3, [r7, #12]
 80365fc:	681a      	ldr	r2, [r3, #0]
 80365fe:	68fb      	ldr	r3, [r7, #12]
 8036600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036602:	3b01      	subs	r3, #1
 8036604:	68f9      	ldr	r1, [r7, #12]
 8036606:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8036608:	fb01 f303 	mul.w	r3, r1, r3
 803660c:	441a      	add	r2, r3
 803660e:	68fb      	ldr	r3, [r7, #12]
 8036610:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8036612:	68fb      	ldr	r3, [r7, #12]
 8036614:	22ff      	movs	r2, #255	; 0xff
 8036616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 803661a:	68fb      	ldr	r3, [r7, #12]
 803661c:	22ff      	movs	r2, #255	; 0xff
 803661e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8036622:	683b      	ldr	r3, [r7, #0]
 8036624:	2b00      	cmp	r3, #0
 8036626:	d114      	bne.n	8036652 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8036628:	68fb      	ldr	r3, [r7, #12]
 803662a:	691b      	ldr	r3, [r3, #16]
 803662c:	2b00      	cmp	r3, #0
 803662e:	d01a      	beq.n	8036666 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8036630:	68fb      	ldr	r3, [r7, #12]
 8036632:	3310      	adds	r3, #16
 8036634:	4618      	mov	r0, r3
 8036636:	f001 fbef 	bl	8037e18 <xTaskRemoveFromEventList>
 803663a:	4603      	mov	r3, r0
 803663c:	2b00      	cmp	r3, #0
 803663e:	d012      	beq.n	8036666 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8036640:	4b0c      	ldr	r3, [pc, #48]	; (8036674 <xQueueGenericReset+0xcc>)
 8036642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036646:	601a      	str	r2, [r3, #0]
 8036648:	f3bf 8f4f 	dsb	sy
 803664c:	f3bf 8f6f 	isb	sy
 8036650:	e009      	b.n	8036666 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8036652:	68fb      	ldr	r3, [r7, #12]
 8036654:	3310      	adds	r3, #16
 8036656:	4618      	mov	r0, r3
 8036658:	f7ff fef2 	bl	8036440 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 803665c:	68fb      	ldr	r3, [r7, #12]
 803665e:	3324      	adds	r3, #36	; 0x24
 8036660:	4618      	mov	r0, r3
 8036662:	f7ff feed 	bl	8036440 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8036666:	f002 fdd5 	bl	8039214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 803666a:	2301      	movs	r3, #1
}
 803666c:	4618      	mov	r0, r3
 803666e:	3710      	adds	r7, #16
 8036670:	46bd      	mov	sp, r7
 8036672:	bd80      	pop	{r7, pc}
 8036674:	e000ed04 	.word	0xe000ed04

08036678 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8036678:	b580      	push	{r7, lr}
 803667a:	b08e      	sub	sp, #56	; 0x38
 803667c:	af02      	add	r7, sp, #8
 803667e:	60f8      	str	r0, [r7, #12]
 8036680:	60b9      	str	r1, [r7, #8]
 8036682:	607a      	str	r2, [r7, #4]
 8036684:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8036686:	68fb      	ldr	r3, [r7, #12]
 8036688:	2b00      	cmp	r3, #0
 803668a:	d10a      	bne.n	80366a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 803668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036690:	f383 8811 	msr	BASEPRI, r3
 8036694:	f3bf 8f6f 	isb	sy
 8036698:	f3bf 8f4f 	dsb	sy
 803669c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 803669e:	bf00      	nop
 80366a0:	e7fe      	b.n	80366a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80366a2:	683b      	ldr	r3, [r7, #0]
 80366a4:	2b00      	cmp	r3, #0
 80366a6:	d10a      	bne.n	80366be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80366a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80366ac:	f383 8811 	msr	BASEPRI, r3
 80366b0:	f3bf 8f6f 	isb	sy
 80366b4:	f3bf 8f4f 	dsb	sy
 80366b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80366ba:	bf00      	nop
 80366bc:	e7fe      	b.n	80366bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80366be:	687b      	ldr	r3, [r7, #4]
 80366c0:	2b00      	cmp	r3, #0
 80366c2:	d002      	beq.n	80366ca <xQueueGenericCreateStatic+0x52>
 80366c4:	68bb      	ldr	r3, [r7, #8]
 80366c6:	2b00      	cmp	r3, #0
 80366c8:	d001      	beq.n	80366ce <xQueueGenericCreateStatic+0x56>
 80366ca:	2301      	movs	r3, #1
 80366cc:	e000      	b.n	80366d0 <xQueueGenericCreateStatic+0x58>
 80366ce:	2300      	movs	r3, #0
 80366d0:	2b00      	cmp	r3, #0
 80366d2:	d10a      	bne.n	80366ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80366d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80366d8:	f383 8811 	msr	BASEPRI, r3
 80366dc:	f3bf 8f6f 	isb	sy
 80366e0:	f3bf 8f4f 	dsb	sy
 80366e4:	623b      	str	r3, [r7, #32]
}
 80366e6:	bf00      	nop
 80366e8:	e7fe      	b.n	80366e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80366ea:	687b      	ldr	r3, [r7, #4]
 80366ec:	2b00      	cmp	r3, #0
 80366ee:	d102      	bne.n	80366f6 <xQueueGenericCreateStatic+0x7e>
 80366f0:	68bb      	ldr	r3, [r7, #8]
 80366f2:	2b00      	cmp	r3, #0
 80366f4:	d101      	bne.n	80366fa <xQueueGenericCreateStatic+0x82>
 80366f6:	2301      	movs	r3, #1
 80366f8:	e000      	b.n	80366fc <xQueueGenericCreateStatic+0x84>
 80366fa:	2300      	movs	r3, #0
 80366fc:	2b00      	cmp	r3, #0
 80366fe:	d10a      	bne.n	8036716 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8036700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036704:	f383 8811 	msr	BASEPRI, r3
 8036708:	f3bf 8f6f 	isb	sy
 803670c:	f3bf 8f4f 	dsb	sy
 8036710:	61fb      	str	r3, [r7, #28]
}
 8036712:	bf00      	nop
 8036714:	e7fe      	b.n	8036714 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8036716:	2348      	movs	r3, #72	; 0x48
 8036718:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 803671a:	697b      	ldr	r3, [r7, #20]
 803671c:	2b48      	cmp	r3, #72	; 0x48
 803671e:	d00a      	beq.n	8036736 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8036720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036724:	f383 8811 	msr	BASEPRI, r3
 8036728:	f3bf 8f6f 	isb	sy
 803672c:	f3bf 8f4f 	dsb	sy
 8036730:	61bb      	str	r3, [r7, #24]
}
 8036732:	bf00      	nop
 8036734:	e7fe      	b.n	8036734 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8036736:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8036738:	683b      	ldr	r3, [r7, #0]
 803673a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 803673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803673e:	2b00      	cmp	r3, #0
 8036740:	d00d      	beq.n	803675e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8036742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036744:	2201      	movs	r2, #1
 8036746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 803674a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 803674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036750:	9300      	str	r3, [sp, #0]
 8036752:	4613      	mov	r3, r2
 8036754:	687a      	ldr	r2, [r7, #4]
 8036756:	68b9      	ldr	r1, [r7, #8]
 8036758:	68f8      	ldr	r0, [r7, #12]
 803675a:	f000 f83f 	bl	80367dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 803675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8036760:	4618      	mov	r0, r3
 8036762:	3730      	adds	r7, #48	; 0x30
 8036764:	46bd      	mov	sp, r7
 8036766:	bd80      	pop	{r7, pc}

08036768 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8036768:	b580      	push	{r7, lr}
 803676a:	b08a      	sub	sp, #40	; 0x28
 803676c:	af02      	add	r7, sp, #8
 803676e:	60f8      	str	r0, [r7, #12]
 8036770:	60b9      	str	r1, [r7, #8]
 8036772:	4613      	mov	r3, r2
 8036774:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8036776:	68fb      	ldr	r3, [r7, #12]
 8036778:	2b00      	cmp	r3, #0
 803677a:	d10a      	bne.n	8036792 <xQueueGenericCreate+0x2a>
	__asm volatile
 803677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036780:	f383 8811 	msr	BASEPRI, r3
 8036784:	f3bf 8f6f 	isb	sy
 8036788:	f3bf 8f4f 	dsb	sy
 803678c:	613b      	str	r3, [r7, #16]
}
 803678e:	bf00      	nop
 8036790:	e7fe      	b.n	8036790 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8036792:	68fb      	ldr	r3, [r7, #12]
 8036794:	68ba      	ldr	r2, [r7, #8]
 8036796:	fb02 f303 	mul.w	r3, r2, r3
 803679a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 803679c:	69fb      	ldr	r3, [r7, #28]
 803679e:	3348      	adds	r3, #72	; 0x48
 80367a0:	4618      	mov	r0, r3
 80367a2:	f002 fe29 	bl	80393f8 <pvPortMalloc>
 80367a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80367a8:	69bb      	ldr	r3, [r7, #24]
 80367aa:	2b00      	cmp	r3, #0
 80367ac:	d011      	beq.n	80367d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80367ae:	69bb      	ldr	r3, [r7, #24]
 80367b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80367b2:	697b      	ldr	r3, [r7, #20]
 80367b4:	3348      	adds	r3, #72	; 0x48
 80367b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80367b8:	69bb      	ldr	r3, [r7, #24]
 80367ba:	2200      	movs	r2, #0
 80367bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80367c0:	79fa      	ldrb	r2, [r7, #7]
 80367c2:	69bb      	ldr	r3, [r7, #24]
 80367c4:	9300      	str	r3, [sp, #0]
 80367c6:	4613      	mov	r3, r2
 80367c8:	697a      	ldr	r2, [r7, #20]
 80367ca:	68b9      	ldr	r1, [r7, #8]
 80367cc:	68f8      	ldr	r0, [r7, #12]
 80367ce:	f000 f805 	bl	80367dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80367d2:	69bb      	ldr	r3, [r7, #24]
	}
 80367d4:	4618      	mov	r0, r3
 80367d6:	3720      	adds	r7, #32
 80367d8:	46bd      	mov	sp, r7
 80367da:	bd80      	pop	{r7, pc}

080367dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80367dc:	b580      	push	{r7, lr}
 80367de:	b084      	sub	sp, #16
 80367e0:	af00      	add	r7, sp, #0
 80367e2:	60f8      	str	r0, [r7, #12]
 80367e4:	60b9      	str	r1, [r7, #8]
 80367e6:	607a      	str	r2, [r7, #4]
 80367e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80367ea:	68bb      	ldr	r3, [r7, #8]
 80367ec:	2b00      	cmp	r3, #0
 80367ee:	d103      	bne.n	80367f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80367f0:	69bb      	ldr	r3, [r7, #24]
 80367f2:	69ba      	ldr	r2, [r7, #24]
 80367f4:	601a      	str	r2, [r3, #0]
 80367f6:	e002      	b.n	80367fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80367f8:	69bb      	ldr	r3, [r7, #24]
 80367fa:	687a      	ldr	r2, [r7, #4]
 80367fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80367fe:	69bb      	ldr	r3, [r7, #24]
 8036800:	68fa      	ldr	r2, [r7, #12]
 8036802:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8036804:	69bb      	ldr	r3, [r7, #24]
 8036806:	68ba      	ldr	r2, [r7, #8]
 8036808:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 803680a:	2101      	movs	r1, #1
 803680c:	69b8      	ldr	r0, [r7, #24]
 803680e:	f7ff fecb 	bl	80365a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8036812:	bf00      	nop
 8036814:	3710      	adds	r7, #16
 8036816:	46bd      	mov	sp, r7
 8036818:	bd80      	pop	{r7, pc}

0803681a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 803681a:	b580      	push	{r7, lr}
 803681c:	b082      	sub	sp, #8
 803681e:	af00      	add	r7, sp, #0
 8036820:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8036822:	687b      	ldr	r3, [r7, #4]
 8036824:	2b00      	cmp	r3, #0
 8036826:	d00e      	beq.n	8036846 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8036828:	687b      	ldr	r3, [r7, #4]
 803682a:	2200      	movs	r2, #0
 803682c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 803682e:	687b      	ldr	r3, [r7, #4]
 8036830:	2200      	movs	r2, #0
 8036832:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8036834:	687b      	ldr	r3, [r7, #4]
 8036836:	2200      	movs	r2, #0
 8036838:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 803683a:	2300      	movs	r3, #0
 803683c:	2200      	movs	r2, #0
 803683e:	2100      	movs	r1, #0
 8036840:	6878      	ldr	r0, [r7, #4]
 8036842:	f000 f837 	bl	80368b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8036846:	bf00      	nop
 8036848:	3708      	adds	r7, #8
 803684a:	46bd      	mov	sp, r7
 803684c:	bd80      	pop	{r7, pc}

0803684e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 803684e:	b580      	push	{r7, lr}
 8036850:	b086      	sub	sp, #24
 8036852:	af00      	add	r7, sp, #0
 8036854:	4603      	mov	r3, r0
 8036856:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8036858:	2301      	movs	r3, #1
 803685a:	617b      	str	r3, [r7, #20]
 803685c:	2300      	movs	r3, #0
 803685e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8036860:	79fb      	ldrb	r3, [r7, #7]
 8036862:	461a      	mov	r2, r3
 8036864:	6939      	ldr	r1, [r7, #16]
 8036866:	6978      	ldr	r0, [r7, #20]
 8036868:	f7ff ff7e 	bl	8036768 <xQueueGenericCreate>
 803686c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 803686e:	68f8      	ldr	r0, [r7, #12]
 8036870:	f7ff ffd3 	bl	803681a <prvInitialiseMutex>

		return xNewQueue;
 8036874:	68fb      	ldr	r3, [r7, #12]
	}
 8036876:	4618      	mov	r0, r3
 8036878:	3718      	adds	r7, #24
 803687a:	46bd      	mov	sp, r7
 803687c:	bd80      	pop	{r7, pc}

0803687e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 803687e:	b580      	push	{r7, lr}
 8036880:	b088      	sub	sp, #32
 8036882:	af02      	add	r7, sp, #8
 8036884:	4603      	mov	r3, r0
 8036886:	6039      	str	r1, [r7, #0]
 8036888:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 803688a:	2301      	movs	r3, #1
 803688c:	617b      	str	r3, [r7, #20]
 803688e:	2300      	movs	r3, #0
 8036890:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8036892:	79fb      	ldrb	r3, [r7, #7]
 8036894:	9300      	str	r3, [sp, #0]
 8036896:	683b      	ldr	r3, [r7, #0]
 8036898:	2200      	movs	r2, #0
 803689a:	6939      	ldr	r1, [r7, #16]
 803689c:	6978      	ldr	r0, [r7, #20]
 803689e:	f7ff feeb 	bl	8036678 <xQueueGenericCreateStatic>
 80368a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80368a4:	68f8      	ldr	r0, [r7, #12]
 80368a6:	f7ff ffb8 	bl	803681a <prvInitialiseMutex>

		return xNewQueue;
 80368aa:	68fb      	ldr	r3, [r7, #12]
	}
 80368ac:	4618      	mov	r0, r3
 80368ae:	3718      	adds	r7, #24
 80368b0:	46bd      	mov	sp, r7
 80368b2:	bd80      	pop	{r7, pc}

080368b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80368b4:	b580      	push	{r7, lr}
 80368b6:	b08e      	sub	sp, #56	; 0x38
 80368b8:	af00      	add	r7, sp, #0
 80368ba:	60f8      	str	r0, [r7, #12]
 80368bc:	60b9      	str	r1, [r7, #8]
 80368be:	607a      	str	r2, [r7, #4]
 80368c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80368c2:	2300      	movs	r3, #0
 80368c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80368c6:	68fb      	ldr	r3, [r7, #12]
 80368c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80368ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80368cc:	2b00      	cmp	r3, #0
 80368ce:	d10a      	bne.n	80368e6 <xQueueGenericSend+0x32>
	__asm volatile
 80368d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80368d4:	f383 8811 	msr	BASEPRI, r3
 80368d8:	f3bf 8f6f 	isb	sy
 80368dc:	f3bf 8f4f 	dsb	sy
 80368e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80368e2:	bf00      	nop
 80368e4:	e7fe      	b.n	80368e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80368e6:	68bb      	ldr	r3, [r7, #8]
 80368e8:	2b00      	cmp	r3, #0
 80368ea:	d103      	bne.n	80368f4 <xQueueGenericSend+0x40>
 80368ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80368ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80368f0:	2b00      	cmp	r3, #0
 80368f2:	d101      	bne.n	80368f8 <xQueueGenericSend+0x44>
 80368f4:	2301      	movs	r3, #1
 80368f6:	e000      	b.n	80368fa <xQueueGenericSend+0x46>
 80368f8:	2300      	movs	r3, #0
 80368fa:	2b00      	cmp	r3, #0
 80368fc:	d10a      	bne.n	8036914 <xQueueGenericSend+0x60>
	__asm volatile
 80368fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036902:	f383 8811 	msr	BASEPRI, r3
 8036906:	f3bf 8f6f 	isb	sy
 803690a:	f3bf 8f4f 	dsb	sy
 803690e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8036910:	bf00      	nop
 8036912:	e7fe      	b.n	8036912 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8036914:	683b      	ldr	r3, [r7, #0]
 8036916:	2b02      	cmp	r3, #2
 8036918:	d103      	bne.n	8036922 <xQueueGenericSend+0x6e>
 803691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803691e:	2b01      	cmp	r3, #1
 8036920:	d101      	bne.n	8036926 <xQueueGenericSend+0x72>
 8036922:	2301      	movs	r3, #1
 8036924:	e000      	b.n	8036928 <xQueueGenericSend+0x74>
 8036926:	2300      	movs	r3, #0
 8036928:	2b00      	cmp	r3, #0
 803692a:	d10a      	bne.n	8036942 <xQueueGenericSend+0x8e>
	__asm volatile
 803692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036930:	f383 8811 	msr	BASEPRI, r3
 8036934:	f3bf 8f6f 	isb	sy
 8036938:	f3bf 8f4f 	dsb	sy
 803693c:	623b      	str	r3, [r7, #32]
}
 803693e:	bf00      	nop
 8036940:	e7fe      	b.n	8036940 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8036942:	f001 fc25 	bl	8038190 <xTaskGetSchedulerState>
 8036946:	4603      	mov	r3, r0
 8036948:	2b00      	cmp	r3, #0
 803694a:	d102      	bne.n	8036952 <xQueueGenericSend+0x9e>
 803694c:	687b      	ldr	r3, [r7, #4]
 803694e:	2b00      	cmp	r3, #0
 8036950:	d101      	bne.n	8036956 <xQueueGenericSend+0xa2>
 8036952:	2301      	movs	r3, #1
 8036954:	e000      	b.n	8036958 <xQueueGenericSend+0xa4>
 8036956:	2300      	movs	r3, #0
 8036958:	2b00      	cmp	r3, #0
 803695a:	d10a      	bne.n	8036972 <xQueueGenericSend+0xbe>
	__asm volatile
 803695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036960:	f383 8811 	msr	BASEPRI, r3
 8036964:	f3bf 8f6f 	isb	sy
 8036968:	f3bf 8f4f 	dsb	sy
 803696c:	61fb      	str	r3, [r7, #28]
}
 803696e:	bf00      	nop
 8036970:	e7fe      	b.n	8036970 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8036972:	f002 fc1f 	bl	80391b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8036976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 803697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803697c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803697e:	429a      	cmp	r2, r3
 8036980:	d302      	bcc.n	8036988 <xQueueGenericSend+0xd4>
 8036982:	683b      	ldr	r3, [r7, #0]
 8036984:	2b02      	cmp	r3, #2
 8036986:	d129      	bne.n	80369dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8036988:	683a      	ldr	r2, [r7, #0]
 803698a:	68b9      	ldr	r1, [r7, #8]
 803698c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 803698e:	f000 fc5e 	bl	803724e <prvCopyDataToQueue>
 8036992:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8036994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036998:	2b00      	cmp	r3, #0
 803699a:	d010      	beq.n	80369be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 803699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803699e:	3324      	adds	r3, #36	; 0x24
 80369a0:	4618      	mov	r0, r3
 80369a2:	f001 fa39 	bl	8037e18 <xTaskRemoveFromEventList>
 80369a6:	4603      	mov	r3, r0
 80369a8:	2b00      	cmp	r3, #0
 80369aa:	d013      	beq.n	80369d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80369ac:	4b3f      	ldr	r3, [pc, #252]	; (8036aac <xQueueGenericSend+0x1f8>)
 80369ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80369b2:	601a      	str	r2, [r3, #0]
 80369b4:	f3bf 8f4f 	dsb	sy
 80369b8:	f3bf 8f6f 	isb	sy
 80369bc:	e00a      	b.n	80369d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80369be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80369c0:	2b00      	cmp	r3, #0
 80369c2:	d007      	beq.n	80369d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80369c4:	4b39      	ldr	r3, [pc, #228]	; (8036aac <xQueueGenericSend+0x1f8>)
 80369c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80369ca:	601a      	str	r2, [r3, #0]
 80369cc:	f3bf 8f4f 	dsb	sy
 80369d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80369d4:	f002 fc1e 	bl	8039214 <vPortExitCritical>
				return pdPASS;
 80369d8:	2301      	movs	r3, #1
 80369da:	e063      	b.n	8036aa4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80369dc:	687b      	ldr	r3, [r7, #4]
 80369de:	2b00      	cmp	r3, #0
 80369e0:	d103      	bne.n	80369ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80369e2:	f002 fc17 	bl	8039214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80369e6:	2300      	movs	r3, #0
 80369e8:	e05c      	b.n	8036aa4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80369ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80369ec:	2b00      	cmp	r3, #0
 80369ee:	d106      	bne.n	80369fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80369f0:	f107 0314 	add.w	r3, r7, #20
 80369f4:	4618      	mov	r0, r3
 80369f6:	f001 fa71 	bl	8037edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80369fa:	2301      	movs	r3, #1
 80369fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80369fe:	f002 fc09 	bl	8039214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8036a02:	f000 ffeb 	bl	80379dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8036a06:	f002 fbd5 	bl	80391b4 <vPortEnterCritical>
 8036a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8036a10:	b25b      	sxtb	r3, r3
 8036a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036a16:	d103      	bne.n	8036a20 <xQueueGenericSend+0x16c>
 8036a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036a1a:	2200      	movs	r2, #0
 8036a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8036a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8036a26:	b25b      	sxtb	r3, r3
 8036a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036a2c:	d103      	bne.n	8036a36 <xQueueGenericSend+0x182>
 8036a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036a30:	2200      	movs	r2, #0
 8036a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8036a36:	f002 fbed 	bl	8039214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8036a3a:	1d3a      	adds	r2, r7, #4
 8036a3c:	f107 0314 	add.w	r3, r7, #20
 8036a40:	4611      	mov	r1, r2
 8036a42:	4618      	mov	r0, r3
 8036a44:	f001 fa60 	bl	8037f08 <xTaskCheckForTimeOut>
 8036a48:	4603      	mov	r3, r0
 8036a4a:	2b00      	cmp	r3, #0
 8036a4c:	d124      	bne.n	8036a98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8036a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8036a50:	f000 fcf5 	bl	803743e <prvIsQueueFull>
 8036a54:	4603      	mov	r3, r0
 8036a56:	2b00      	cmp	r3, #0
 8036a58:	d018      	beq.n	8036a8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8036a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036a5c:	3310      	adds	r3, #16
 8036a5e:	687a      	ldr	r2, [r7, #4]
 8036a60:	4611      	mov	r1, r2
 8036a62:	4618      	mov	r0, r3
 8036a64:	f001 f988 	bl	8037d78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8036a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8036a6a:	f000 fc80 	bl	803736e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8036a6e:	f000 ffc3 	bl	80379f8 <xTaskResumeAll>
 8036a72:	4603      	mov	r3, r0
 8036a74:	2b00      	cmp	r3, #0
 8036a76:	f47f af7c 	bne.w	8036972 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8036a7a:	4b0c      	ldr	r3, [pc, #48]	; (8036aac <xQueueGenericSend+0x1f8>)
 8036a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036a80:	601a      	str	r2, [r3, #0]
 8036a82:	f3bf 8f4f 	dsb	sy
 8036a86:	f3bf 8f6f 	isb	sy
 8036a8a:	e772      	b.n	8036972 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8036a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8036a8e:	f000 fc6e 	bl	803736e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8036a92:	f000 ffb1 	bl	80379f8 <xTaskResumeAll>
 8036a96:	e76c      	b.n	8036972 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8036a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8036a9a:	f000 fc68 	bl	803736e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8036a9e:	f000 ffab 	bl	80379f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8036aa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8036aa4:	4618      	mov	r0, r3
 8036aa6:	3738      	adds	r7, #56	; 0x38
 8036aa8:	46bd      	mov	sp, r7
 8036aaa:	bd80      	pop	{r7, pc}
 8036aac:	e000ed04 	.word	0xe000ed04

08036ab0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8036ab0:	b580      	push	{r7, lr}
 8036ab2:	b090      	sub	sp, #64	; 0x40
 8036ab4:	af00      	add	r7, sp, #0
 8036ab6:	60f8      	str	r0, [r7, #12]
 8036ab8:	60b9      	str	r1, [r7, #8]
 8036aba:	607a      	str	r2, [r7, #4]
 8036abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8036abe:	68fb      	ldr	r3, [r7, #12]
 8036ac0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8036ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036ac4:	2b00      	cmp	r3, #0
 8036ac6:	d10a      	bne.n	8036ade <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8036ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036acc:	f383 8811 	msr	BASEPRI, r3
 8036ad0:	f3bf 8f6f 	isb	sy
 8036ad4:	f3bf 8f4f 	dsb	sy
 8036ad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8036ada:	bf00      	nop
 8036adc:	e7fe      	b.n	8036adc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8036ade:	68bb      	ldr	r3, [r7, #8]
 8036ae0:	2b00      	cmp	r3, #0
 8036ae2:	d103      	bne.n	8036aec <xQueueGenericSendFromISR+0x3c>
 8036ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036ae8:	2b00      	cmp	r3, #0
 8036aea:	d101      	bne.n	8036af0 <xQueueGenericSendFromISR+0x40>
 8036aec:	2301      	movs	r3, #1
 8036aee:	e000      	b.n	8036af2 <xQueueGenericSendFromISR+0x42>
 8036af0:	2300      	movs	r3, #0
 8036af2:	2b00      	cmp	r3, #0
 8036af4:	d10a      	bne.n	8036b0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8036af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036afa:	f383 8811 	msr	BASEPRI, r3
 8036afe:	f3bf 8f6f 	isb	sy
 8036b02:	f3bf 8f4f 	dsb	sy
 8036b06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8036b08:	bf00      	nop
 8036b0a:	e7fe      	b.n	8036b0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8036b0c:	683b      	ldr	r3, [r7, #0]
 8036b0e:	2b02      	cmp	r3, #2
 8036b10:	d103      	bne.n	8036b1a <xQueueGenericSendFromISR+0x6a>
 8036b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036b16:	2b01      	cmp	r3, #1
 8036b18:	d101      	bne.n	8036b1e <xQueueGenericSendFromISR+0x6e>
 8036b1a:	2301      	movs	r3, #1
 8036b1c:	e000      	b.n	8036b20 <xQueueGenericSendFromISR+0x70>
 8036b1e:	2300      	movs	r3, #0
 8036b20:	2b00      	cmp	r3, #0
 8036b22:	d10a      	bne.n	8036b3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8036b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036b28:	f383 8811 	msr	BASEPRI, r3
 8036b2c:	f3bf 8f6f 	isb	sy
 8036b30:	f3bf 8f4f 	dsb	sy
 8036b34:	623b      	str	r3, [r7, #32]
}
 8036b36:	bf00      	nop
 8036b38:	e7fe      	b.n	8036b38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8036b3a:	f002 fc1d 	bl	8039378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8036b3e:	f3ef 8211 	mrs	r2, BASEPRI
 8036b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036b46:	f383 8811 	msr	BASEPRI, r3
 8036b4a:	f3bf 8f6f 	isb	sy
 8036b4e:	f3bf 8f4f 	dsb	sy
 8036b52:	61fa      	str	r2, [r7, #28]
 8036b54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8036b56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8036b58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8036b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8036b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036b62:	429a      	cmp	r2, r3
 8036b64:	d302      	bcc.n	8036b6c <xQueueGenericSendFromISR+0xbc>
 8036b66:	683b      	ldr	r3, [r7, #0]
 8036b68:	2b02      	cmp	r3, #2
 8036b6a:	d12f      	bne.n	8036bcc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8036b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8036b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8036b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8036b7c:	683a      	ldr	r2, [r7, #0]
 8036b7e:	68b9      	ldr	r1, [r7, #8]
 8036b80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8036b82:	f000 fb64 	bl	803724e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8036b86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8036b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036b8e:	d112      	bne.n	8036bb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8036b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036b94:	2b00      	cmp	r3, #0
 8036b96:	d016      	beq.n	8036bc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8036b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b9a:	3324      	adds	r3, #36	; 0x24
 8036b9c:	4618      	mov	r0, r3
 8036b9e:	f001 f93b 	bl	8037e18 <xTaskRemoveFromEventList>
 8036ba2:	4603      	mov	r3, r0
 8036ba4:	2b00      	cmp	r3, #0
 8036ba6:	d00e      	beq.n	8036bc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8036ba8:	687b      	ldr	r3, [r7, #4]
 8036baa:	2b00      	cmp	r3, #0
 8036bac:	d00b      	beq.n	8036bc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8036bae:	687b      	ldr	r3, [r7, #4]
 8036bb0:	2201      	movs	r2, #1
 8036bb2:	601a      	str	r2, [r3, #0]
 8036bb4:	e007      	b.n	8036bc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8036bb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8036bba:	3301      	adds	r3, #1
 8036bbc:	b2db      	uxtb	r3, r3
 8036bbe:	b25a      	sxtb	r2, r3
 8036bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8036bc6:	2301      	movs	r3, #1
 8036bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8036bca:	e001      	b.n	8036bd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8036bcc:	2300      	movs	r3, #0
 8036bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8036bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036bd2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8036bd4:	697b      	ldr	r3, [r7, #20]
 8036bd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8036bda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8036bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8036bde:	4618      	mov	r0, r3
 8036be0:	3740      	adds	r7, #64	; 0x40
 8036be2:	46bd      	mov	sp, r7
 8036be4:	bd80      	pop	{r7, pc}

08036be6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8036be6:	b580      	push	{r7, lr}
 8036be8:	b08e      	sub	sp, #56	; 0x38
 8036bea:	af00      	add	r7, sp, #0
 8036bec:	6078      	str	r0, [r7, #4]
 8036bee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8036bf0:	687b      	ldr	r3, [r7, #4]
 8036bf2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8036bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036bf6:	2b00      	cmp	r3, #0
 8036bf8:	d10a      	bne.n	8036c10 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8036bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036bfe:	f383 8811 	msr	BASEPRI, r3
 8036c02:	f3bf 8f6f 	isb	sy
 8036c06:	f3bf 8f4f 	dsb	sy
 8036c0a:	623b      	str	r3, [r7, #32]
}
 8036c0c:	bf00      	nop
 8036c0e:	e7fe      	b.n	8036c0e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8036c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036c14:	2b00      	cmp	r3, #0
 8036c16:	d00a      	beq.n	8036c2e <xQueueGiveFromISR+0x48>
	__asm volatile
 8036c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036c1c:	f383 8811 	msr	BASEPRI, r3
 8036c20:	f3bf 8f6f 	isb	sy
 8036c24:	f3bf 8f4f 	dsb	sy
 8036c28:	61fb      	str	r3, [r7, #28]
}
 8036c2a:	bf00      	nop
 8036c2c:	e7fe      	b.n	8036c2c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8036c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c30:	681b      	ldr	r3, [r3, #0]
 8036c32:	2b00      	cmp	r3, #0
 8036c34:	d103      	bne.n	8036c3e <xQueueGiveFromISR+0x58>
 8036c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c38:	689b      	ldr	r3, [r3, #8]
 8036c3a:	2b00      	cmp	r3, #0
 8036c3c:	d101      	bne.n	8036c42 <xQueueGiveFromISR+0x5c>
 8036c3e:	2301      	movs	r3, #1
 8036c40:	e000      	b.n	8036c44 <xQueueGiveFromISR+0x5e>
 8036c42:	2300      	movs	r3, #0
 8036c44:	2b00      	cmp	r3, #0
 8036c46:	d10a      	bne.n	8036c5e <xQueueGiveFromISR+0x78>
	__asm volatile
 8036c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036c4c:	f383 8811 	msr	BASEPRI, r3
 8036c50:	f3bf 8f6f 	isb	sy
 8036c54:	f3bf 8f4f 	dsb	sy
 8036c58:	61bb      	str	r3, [r7, #24]
}
 8036c5a:	bf00      	nop
 8036c5c:	e7fe      	b.n	8036c5c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8036c5e:	f002 fb8b 	bl	8039378 <vPortValidateInterruptPriority>
	__asm volatile
 8036c62:	f3ef 8211 	mrs	r2, BASEPRI
 8036c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036c6a:	f383 8811 	msr	BASEPRI, r3
 8036c6e:	f3bf 8f6f 	isb	sy
 8036c72:	f3bf 8f4f 	dsb	sy
 8036c76:	617a      	str	r2, [r7, #20]
 8036c78:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8036c7a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8036c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8036c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036c82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8036c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8036c8a:	429a      	cmp	r2, r3
 8036c8c:	d22b      	bcs.n	8036ce6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8036c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8036c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8036c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036c9a:	1c5a      	adds	r2, r3, #1
 8036c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8036ca0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8036ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036ca8:	d112      	bne.n	8036cd0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8036caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036cae:	2b00      	cmp	r3, #0
 8036cb0:	d016      	beq.n	8036ce0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8036cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036cb4:	3324      	adds	r3, #36	; 0x24
 8036cb6:	4618      	mov	r0, r3
 8036cb8:	f001 f8ae 	bl	8037e18 <xTaskRemoveFromEventList>
 8036cbc:	4603      	mov	r3, r0
 8036cbe:	2b00      	cmp	r3, #0
 8036cc0:	d00e      	beq.n	8036ce0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8036cc2:	683b      	ldr	r3, [r7, #0]
 8036cc4:	2b00      	cmp	r3, #0
 8036cc6:	d00b      	beq.n	8036ce0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8036cc8:	683b      	ldr	r3, [r7, #0]
 8036cca:	2201      	movs	r2, #1
 8036ccc:	601a      	str	r2, [r3, #0]
 8036cce:	e007      	b.n	8036ce0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8036cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8036cd4:	3301      	adds	r3, #1
 8036cd6:	b2db      	uxtb	r3, r3
 8036cd8:	b25a      	sxtb	r2, r3
 8036cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8036ce0:	2301      	movs	r3, #1
 8036ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8036ce4:	e001      	b.n	8036cea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8036ce6:	2300      	movs	r3, #0
 8036ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8036cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036cec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8036cee:	68fb      	ldr	r3, [r7, #12]
 8036cf0:	f383 8811 	msr	BASEPRI, r3
}
 8036cf4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8036cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8036cf8:	4618      	mov	r0, r3
 8036cfa:	3738      	adds	r7, #56	; 0x38
 8036cfc:	46bd      	mov	sp, r7
 8036cfe:	bd80      	pop	{r7, pc}

08036d00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8036d00:	b580      	push	{r7, lr}
 8036d02:	b08c      	sub	sp, #48	; 0x30
 8036d04:	af00      	add	r7, sp, #0
 8036d06:	60f8      	str	r0, [r7, #12]
 8036d08:	60b9      	str	r1, [r7, #8]
 8036d0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8036d0c:	2300      	movs	r3, #0
 8036d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8036d10:	68fb      	ldr	r3, [r7, #12]
 8036d12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8036d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036d16:	2b00      	cmp	r3, #0
 8036d18:	d10a      	bne.n	8036d30 <xQueueReceive+0x30>
	__asm volatile
 8036d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036d1e:	f383 8811 	msr	BASEPRI, r3
 8036d22:	f3bf 8f6f 	isb	sy
 8036d26:	f3bf 8f4f 	dsb	sy
 8036d2a:	623b      	str	r3, [r7, #32]
}
 8036d2c:	bf00      	nop
 8036d2e:	e7fe      	b.n	8036d2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8036d30:	68bb      	ldr	r3, [r7, #8]
 8036d32:	2b00      	cmp	r3, #0
 8036d34:	d103      	bne.n	8036d3e <xQueueReceive+0x3e>
 8036d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036d3a:	2b00      	cmp	r3, #0
 8036d3c:	d101      	bne.n	8036d42 <xQueueReceive+0x42>
 8036d3e:	2301      	movs	r3, #1
 8036d40:	e000      	b.n	8036d44 <xQueueReceive+0x44>
 8036d42:	2300      	movs	r3, #0
 8036d44:	2b00      	cmp	r3, #0
 8036d46:	d10a      	bne.n	8036d5e <xQueueReceive+0x5e>
	__asm volatile
 8036d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036d4c:	f383 8811 	msr	BASEPRI, r3
 8036d50:	f3bf 8f6f 	isb	sy
 8036d54:	f3bf 8f4f 	dsb	sy
 8036d58:	61fb      	str	r3, [r7, #28]
}
 8036d5a:	bf00      	nop
 8036d5c:	e7fe      	b.n	8036d5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8036d5e:	f001 fa17 	bl	8038190 <xTaskGetSchedulerState>
 8036d62:	4603      	mov	r3, r0
 8036d64:	2b00      	cmp	r3, #0
 8036d66:	d102      	bne.n	8036d6e <xQueueReceive+0x6e>
 8036d68:	687b      	ldr	r3, [r7, #4]
 8036d6a:	2b00      	cmp	r3, #0
 8036d6c:	d101      	bne.n	8036d72 <xQueueReceive+0x72>
 8036d6e:	2301      	movs	r3, #1
 8036d70:	e000      	b.n	8036d74 <xQueueReceive+0x74>
 8036d72:	2300      	movs	r3, #0
 8036d74:	2b00      	cmp	r3, #0
 8036d76:	d10a      	bne.n	8036d8e <xQueueReceive+0x8e>
	__asm volatile
 8036d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036d7c:	f383 8811 	msr	BASEPRI, r3
 8036d80:	f3bf 8f6f 	isb	sy
 8036d84:	f3bf 8f4f 	dsb	sy
 8036d88:	61bb      	str	r3, [r7, #24]
}
 8036d8a:	bf00      	nop
 8036d8c:	e7fe      	b.n	8036d8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8036d8e:	f002 fa11 	bl	80391b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8036d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036d96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8036d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036d9a:	2b00      	cmp	r3, #0
 8036d9c:	d01f      	beq.n	8036dde <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8036d9e:	68b9      	ldr	r1, [r7, #8]
 8036da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8036da2:	f000 fabe 	bl	8037322 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8036da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036da8:	1e5a      	subs	r2, r3, #1
 8036daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036dac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8036dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036db0:	691b      	ldr	r3, [r3, #16]
 8036db2:	2b00      	cmp	r3, #0
 8036db4:	d00f      	beq.n	8036dd6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8036db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036db8:	3310      	adds	r3, #16
 8036dba:	4618      	mov	r0, r3
 8036dbc:	f001 f82c 	bl	8037e18 <xTaskRemoveFromEventList>
 8036dc0:	4603      	mov	r3, r0
 8036dc2:	2b00      	cmp	r3, #0
 8036dc4:	d007      	beq.n	8036dd6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8036dc6:	4b3d      	ldr	r3, [pc, #244]	; (8036ebc <xQueueReceive+0x1bc>)
 8036dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036dcc:	601a      	str	r2, [r3, #0]
 8036dce:	f3bf 8f4f 	dsb	sy
 8036dd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8036dd6:	f002 fa1d 	bl	8039214 <vPortExitCritical>
				return pdPASS;
 8036dda:	2301      	movs	r3, #1
 8036ddc:	e069      	b.n	8036eb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8036dde:	687b      	ldr	r3, [r7, #4]
 8036de0:	2b00      	cmp	r3, #0
 8036de2:	d103      	bne.n	8036dec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8036de4:	f002 fa16 	bl	8039214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8036de8:	2300      	movs	r3, #0
 8036dea:	e062      	b.n	8036eb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8036dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036dee:	2b00      	cmp	r3, #0
 8036df0:	d106      	bne.n	8036e00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8036df2:	f107 0310 	add.w	r3, r7, #16
 8036df6:	4618      	mov	r0, r3
 8036df8:	f001 f870 	bl	8037edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8036dfc:	2301      	movs	r3, #1
 8036dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8036e00:	f002 fa08 	bl	8039214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8036e04:	f000 fdea 	bl	80379dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8036e08:	f002 f9d4 	bl	80391b4 <vPortEnterCritical>
 8036e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8036e12:	b25b      	sxtb	r3, r3
 8036e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036e18:	d103      	bne.n	8036e22 <xQueueReceive+0x122>
 8036e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036e1c:	2200      	movs	r2, #0
 8036e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8036e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8036e28:	b25b      	sxtb	r3, r3
 8036e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036e2e:	d103      	bne.n	8036e38 <xQueueReceive+0x138>
 8036e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036e32:	2200      	movs	r2, #0
 8036e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8036e38:	f002 f9ec 	bl	8039214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8036e3c:	1d3a      	adds	r2, r7, #4
 8036e3e:	f107 0310 	add.w	r3, r7, #16
 8036e42:	4611      	mov	r1, r2
 8036e44:	4618      	mov	r0, r3
 8036e46:	f001 f85f 	bl	8037f08 <xTaskCheckForTimeOut>
 8036e4a:	4603      	mov	r3, r0
 8036e4c:	2b00      	cmp	r3, #0
 8036e4e:	d123      	bne.n	8036e98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8036e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8036e52:	f000 fade 	bl	8037412 <prvIsQueueEmpty>
 8036e56:	4603      	mov	r3, r0
 8036e58:	2b00      	cmp	r3, #0
 8036e5a:	d017      	beq.n	8036e8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8036e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036e5e:	3324      	adds	r3, #36	; 0x24
 8036e60:	687a      	ldr	r2, [r7, #4]
 8036e62:	4611      	mov	r1, r2
 8036e64:	4618      	mov	r0, r3
 8036e66:	f000 ff87 	bl	8037d78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8036e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8036e6c:	f000 fa7f 	bl	803736e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8036e70:	f000 fdc2 	bl	80379f8 <xTaskResumeAll>
 8036e74:	4603      	mov	r3, r0
 8036e76:	2b00      	cmp	r3, #0
 8036e78:	d189      	bne.n	8036d8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8036e7a:	4b10      	ldr	r3, [pc, #64]	; (8036ebc <xQueueReceive+0x1bc>)
 8036e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036e80:	601a      	str	r2, [r3, #0]
 8036e82:	f3bf 8f4f 	dsb	sy
 8036e86:	f3bf 8f6f 	isb	sy
 8036e8a:	e780      	b.n	8036d8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8036e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8036e8e:	f000 fa6e 	bl	803736e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8036e92:	f000 fdb1 	bl	80379f8 <xTaskResumeAll>
 8036e96:	e77a      	b.n	8036d8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8036e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8036e9a:	f000 fa68 	bl	803736e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8036e9e:	f000 fdab 	bl	80379f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8036ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8036ea4:	f000 fab5 	bl	8037412 <prvIsQueueEmpty>
 8036ea8:	4603      	mov	r3, r0
 8036eaa:	2b00      	cmp	r3, #0
 8036eac:	f43f af6f 	beq.w	8036d8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8036eb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8036eb2:	4618      	mov	r0, r3
 8036eb4:	3730      	adds	r7, #48	; 0x30
 8036eb6:	46bd      	mov	sp, r7
 8036eb8:	bd80      	pop	{r7, pc}
 8036eba:	bf00      	nop
 8036ebc:	e000ed04 	.word	0xe000ed04

08036ec0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8036ec0:	b580      	push	{r7, lr}
 8036ec2:	b08e      	sub	sp, #56	; 0x38
 8036ec4:	af00      	add	r7, sp, #0
 8036ec6:	6078      	str	r0, [r7, #4]
 8036ec8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8036eca:	2300      	movs	r3, #0
 8036ecc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8036ece:	687b      	ldr	r3, [r7, #4]
 8036ed0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8036ed2:	2300      	movs	r3, #0
 8036ed4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8036ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036ed8:	2b00      	cmp	r3, #0
 8036eda:	d10a      	bne.n	8036ef2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8036edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036ee0:	f383 8811 	msr	BASEPRI, r3
 8036ee4:	f3bf 8f6f 	isb	sy
 8036ee8:	f3bf 8f4f 	dsb	sy
 8036eec:	623b      	str	r3, [r7, #32]
}
 8036eee:	bf00      	nop
 8036ef0:	e7fe      	b.n	8036ef0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8036ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036ef6:	2b00      	cmp	r3, #0
 8036ef8:	d00a      	beq.n	8036f10 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8036efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036efe:	f383 8811 	msr	BASEPRI, r3
 8036f02:	f3bf 8f6f 	isb	sy
 8036f06:	f3bf 8f4f 	dsb	sy
 8036f0a:	61fb      	str	r3, [r7, #28]
}
 8036f0c:	bf00      	nop
 8036f0e:	e7fe      	b.n	8036f0e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8036f10:	f001 f93e 	bl	8038190 <xTaskGetSchedulerState>
 8036f14:	4603      	mov	r3, r0
 8036f16:	2b00      	cmp	r3, #0
 8036f18:	d102      	bne.n	8036f20 <xQueueSemaphoreTake+0x60>
 8036f1a:	683b      	ldr	r3, [r7, #0]
 8036f1c:	2b00      	cmp	r3, #0
 8036f1e:	d101      	bne.n	8036f24 <xQueueSemaphoreTake+0x64>
 8036f20:	2301      	movs	r3, #1
 8036f22:	e000      	b.n	8036f26 <xQueueSemaphoreTake+0x66>
 8036f24:	2300      	movs	r3, #0
 8036f26:	2b00      	cmp	r3, #0
 8036f28:	d10a      	bne.n	8036f40 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8036f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036f2e:	f383 8811 	msr	BASEPRI, r3
 8036f32:	f3bf 8f6f 	isb	sy
 8036f36:	f3bf 8f4f 	dsb	sy
 8036f3a:	61bb      	str	r3, [r7, #24]
}
 8036f3c:	bf00      	nop
 8036f3e:	e7fe      	b.n	8036f3e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8036f40:	f002 f938 	bl	80391b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8036f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036f48:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8036f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036f4c:	2b00      	cmp	r3, #0
 8036f4e:	d024      	beq.n	8036f9a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8036f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036f52:	1e5a      	subs	r2, r3, #1
 8036f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036f56:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8036f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036f5a:	681b      	ldr	r3, [r3, #0]
 8036f5c:	2b00      	cmp	r3, #0
 8036f5e:	d104      	bne.n	8036f6a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8036f60:	f001 fabe 	bl	80384e0 <pvTaskIncrementMutexHeldCount>
 8036f64:	4602      	mov	r2, r0
 8036f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036f68:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8036f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036f6c:	691b      	ldr	r3, [r3, #16]
 8036f6e:	2b00      	cmp	r3, #0
 8036f70:	d00f      	beq.n	8036f92 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8036f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036f74:	3310      	adds	r3, #16
 8036f76:	4618      	mov	r0, r3
 8036f78:	f000 ff4e 	bl	8037e18 <xTaskRemoveFromEventList>
 8036f7c:	4603      	mov	r3, r0
 8036f7e:	2b00      	cmp	r3, #0
 8036f80:	d007      	beq.n	8036f92 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8036f82:	4b54      	ldr	r3, [pc, #336]	; (80370d4 <xQueueSemaphoreTake+0x214>)
 8036f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036f88:	601a      	str	r2, [r3, #0]
 8036f8a:	f3bf 8f4f 	dsb	sy
 8036f8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8036f92:	f002 f93f 	bl	8039214 <vPortExitCritical>
				return pdPASS;
 8036f96:	2301      	movs	r3, #1
 8036f98:	e097      	b.n	80370ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8036f9a:	683b      	ldr	r3, [r7, #0]
 8036f9c:	2b00      	cmp	r3, #0
 8036f9e:	d111      	bne.n	8036fc4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8036fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036fa2:	2b00      	cmp	r3, #0
 8036fa4:	d00a      	beq.n	8036fbc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8036fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036faa:	f383 8811 	msr	BASEPRI, r3
 8036fae:	f3bf 8f6f 	isb	sy
 8036fb2:	f3bf 8f4f 	dsb	sy
 8036fb6:	617b      	str	r3, [r7, #20]
}
 8036fb8:	bf00      	nop
 8036fba:	e7fe      	b.n	8036fba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8036fbc:	f002 f92a 	bl	8039214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8036fc0:	2300      	movs	r3, #0
 8036fc2:	e082      	b.n	80370ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8036fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036fc6:	2b00      	cmp	r3, #0
 8036fc8:	d106      	bne.n	8036fd8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8036fca:	f107 030c 	add.w	r3, r7, #12
 8036fce:	4618      	mov	r0, r3
 8036fd0:	f000 ff84 	bl	8037edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8036fd4:	2301      	movs	r3, #1
 8036fd6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8036fd8:	f002 f91c 	bl	8039214 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8036fdc:	f000 fcfe 	bl	80379dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8036fe0:	f002 f8e8 	bl	80391b4 <vPortEnterCritical>
 8036fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8036fea:	b25b      	sxtb	r3, r3
 8036fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036ff0:	d103      	bne.n	8036ffa <xQueueSemaphoreTake+0x13a>
 8036ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036ff4:	2200      	movs	r2, #0
 8036ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8036ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8037000:	b25b      	sxtb	r3, r3
 8037002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8037006:	d103      	bne.n	8037010 <xQueueSemaphoreTake+0x150>
 8037008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803700a:	2200      	movs	r2, #0
 803700c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8037010:	f002 f900 	bl	8039214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8037014:	463a      	mov	r2, r7
 8037016:	f107 030c 	add.w	r3, r7, #12
 803701a:	4611      	mov	r1, r2
 803701c:	4618      	mov	r0, r3
 803701e:	f000 ff73 	bl	8037f08 <xTaskCheckForTimeOut>
 8037022:	4603      	mov	r3, r0
 8037024:	2b00      	cmp	r3, #0
 8037026:	d132      	bne.n	803708e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8037028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 803702a:	f000 f9f2 	bl	8037412 <prvIsQueueEmpty>
 803702e:	4603      	mov	r3, r0
 8037030:	2b00      	cmp	r3, #0
 8037032:	d026      	beq.n	8037082 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8037034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037036:	681b      	ldr	r3, [r3, #0]
 8037038:	2b00      	cmp	r3, #0
 803703a:	d109      	bne.n	8037050 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 803703c:	f002 f8ba 	bl	80391b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8037040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037042:	689b      	ldr	r3, [r3, #8]
 8037044:	4618      	mov	r0, r3
 8037046:	f001 f8c1 	bl	80381cc <xTaskPriorityInherit>
 803704a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 803704c:	f002 f8e2 	bl	8039214 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8037050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037052:	3324      	adds	r3, #36	; 0x24
 8037054:	683a      	ldr	r2, [r7, #0]
 8037056:	4611      	mov	r1, r2
 8037058:	4618      	mov	r0, r3
 803705a:	f000 fe8d 	bl	8037d78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 803705e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8037060:	f000 f985 	bl	803736e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8037064:	f000 fcc8 	bl	80379f8 <xTaskResumeAll>
 8037068:	4603      	mov	r3, r0
 803706a:	2b00      	cmp	r3, #0
 803706c:	f47f af68 	bne.w	8036f40 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8037070:	4b18      	ldr	r3, [pc, #96]	; (80370d4 <xQueueSemaphoreTake+0x214>)
 8037072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8037076:	601a      	str	r2, [r3, #0]
 8037078:	f3bf 8f4f 	dsb	sy
 803707c:	f3bf 8f6f 	isb	sy
 8037080:	e75e      	b.n	8036f40 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8037082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8037084:	f000 f973 	bl	803736e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8037088:	f000 fcb6 	bl	80379f8 <xTaskResumeAll>
 803708c:	e758      	b.n	8036f40 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 803708e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8037090:	f000 f96d 	bl	803736e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8037094:	f000 fcb0 	bl	80379f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8037098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 803709a:	f000 f9ba 	bl	8037412 <prvIsQueueEmpty>
 803709e:	4603      	mov	r3, r0
 80370a0:	2b00      	cmp	r3, #0
 80370a2:	f43f af4d 	beq.w	8036f40 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80370a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80370a8:	2b00      	cmp	r3, #0
 80370aa:	d00d      	beq.n	80370c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80370ac:	f002 f882 	bl	80391b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80370b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80370b2:	f000 f8b4 	bl	803721e <prvGetDisinheritPriorityAfterTimeout>
 80370b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80370b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80370ba:	689b      	ldr	r3, [r3, #8]
 80370bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80370be:	4618      	mov	r0, r3
 80370c0:	f001 f980 	bl	80383c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80370c4:	f002 f8a6 	bl	8039214 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80370c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80370ca:	4618      	mov	r0, r3
 80370cc:	3738      	adds	r7, #56	; 0x38
 80370ce:	46bd      	mov	sp, r7
 80370d0:	bd80      	pop	{r7, pc}
 80370d2:	bf00      	nop
 80370d4:	e000ed04 	.word	0xe000ed04

080370d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80370d8:	b580      	push	{r7, lr}
 80370da:	b08e      	sub	sp, #56	; 0x38
 80370dc:	af00      	add	r7, sp, #0
 80370de:	60f8      	str	r0, [r7, #12]
 80370e0:	60b9      	str	r1, [r7, #8]
 80370e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80370e4:	68fb      	ldr	r3, [r7, #12]
 80370e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80370e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80370ea:	2b00      	cmp	r3, #0
 80370ec:	d10a      	bne.n	8037104 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80370ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80370f2:	f383 8811 	msr	BASEPRI, r3
 80370f6:	f3bf 8f6f 	isb	sy
 80370fa:	f3bf 8f4f 	dsb	sy
 80370fe:	623b      	str	r3, [r7, #32]
}
 8037100:	bf00      	nop
 8037102:	e7fe      	b.n	8037102 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8037104:	68bb      	ldr	r3, [r7, #8]
 8037106:	2b00      	cmp	r3, #0
 8037108:	d103      	bne.n	8037112 <xQueueReceiveFromISR+0x3a>
 803710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803710e:	2b00      	cmp	r3, #0
 8037110:	d101      	bne.n	8037116 <xQueueReceiveFromISR+0x3e>
 8037112:	2301      	movs	r3, #1
 8037114:	e000      	b.n	8037118 <xQueueReceiveFromISR+0x40>
 8037116:	2300      	movs	r3, #0
 8037118:	2b00      	cmp	r3, #0
 803711a:	d10a      	bne.n	8037132 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 803711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037120:	f383 8811 	msr	BASEPRI, r3
 8037124:	f3bf 8f6f 	isb	sy
 8037128:	f3bf 8f4f 	dsb	sy
 803712c:	61fb      	str	r3, [r7, #28]
}
 803712e:	bf00      	nop
 8037130:	e7fe      	b.n	8037130 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8037132:	f002 f921 	bl	8039378 <vPortValidateInterruptPriority>
	__asm volatile
 8037136:	f3ef 8211 	mrs	r2, BASEPRI
 803713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803713e:	f383 8811 	msr	BASEPRI, r3
 8037142:	f3bf 8f6f 	isb	sy
 8037146:	f3bf 8f4f 	dsb	sy
 803714a:	61ba      	str	r2, [r7, #24]
 803714c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 803714e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8037150:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8037152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037156:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8037158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803715a:	2b00      	cmp	r3, #0
 803715c:	d02f      	beq.n	80371be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 803715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8037164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8037168:	68b9      	ldr	r1, [r7, #8]
 803716a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 803716c:	f000 f8d9 	bl	8037322 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8037170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037172:	1e5a      	subs	r2, r3, #1
 8037174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037176:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8037178:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 803717c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8037180:	d112      	bne.n	80371a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8037182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037184:	691b      	ldr	r3, [r3, #16]
 8037186:	2b00      	cmp	r3, #0
 8037188:	d016      	beq.n	80371b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 803718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803718c:	3310      	adds	r3, #16
 803718e:	4618      	mov	r0, r3
 8037190:	f000 fe42 	bl	8037e18 <xTaskRemoveFromEventList>
 8037194:	4603      	mov	r3, r0
 8037196:	2b00      	cmp	r3, #0
 8037198:	d00e      	beq.n	80371b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 803719a:	687b      	ldr	r3, [r7, #4]
 803719c:	2b00      	cmp	r3, #0
 803719e:	d00b      	beq.n	80371b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80371a0:	687b      	ldr	r3, [r7, #4]
 80371a2:	2201      	movs	r2, #1
 80371a4:	601a      	str	r2, [r3, #0]
 80371a6:	e007      	b.n	80371b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80371a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80371ac:	3301      	adds	r3, #1
 80371ae:	b2db      	uxtb	r3, r3
 80371b0:	b25a      	sxtb	r2, r3
 80371b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80371b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80371b8:	2301      	movs	r3, #1
 80371ba:	637b      	str	r3, [r7, #52]	; 0x34
 80371bc:	e001      	b.n	80371c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80371be:	2300      	movs	r3, #0
 80371c0:	637b      	str	r3, [r7, #52]	; 0x34
 80371c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80371c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80371c6:	693b      	ldr	r3, [r7, #16]
 80371c8:	f383 8811 	msr	BASEPRI, r3
}
 80371cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80371ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80371d0:	4618      	mov	r0, r3
 80371d2:	3738      	adds	r7, #56	; 0x38
 80371d4:	46bd      	mov	sp, r7
 80371d6:	bd80      	pop	{r7, pc}

080371d8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80371d8:	b580      	push	{r7, lr}
 80371da:	b084      	sub	sp, #16
 80371dc:	af00      	add	r7, sp, #0
 80371de:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80371e0:	687b      	ldr	r3, [r7, #4]
 80371e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80371e4:	68fb      	ldr	r3, [r7, #12]
 80371e6:	2b00      	cmp	r3, #0
 80371e8:	d10a      	bne.n	8037200 <vQueueDelete+0x28>
	__asm volatile
 80371ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80371ee:	f383 8811 	msr	BASEPRI, r3
 80371f2:	f3bf 8f6f 	isb	sy
 80371f6:	f3bf 8f4f 	dsb	sy
 80371fa:	60bb      	str	r3, [r7, #8]
}
 80371fc:	bf00      	nop
 80371fe:	e7fe      	b.n	80371fe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8037200:	68f8      	ldr	r0, [r7, #12]
 8037202:	f000 f95f 	bl	80374c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8037206:	68fb      	ldr	r3, [r7, #12]
 8037208:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 803720c:	2b00      	cmp	r3, #0
 803720e:	d102      	bne.n	8037216 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8037210:	68f8      	ldr	r0, [r7, #12]
 8037212:	f002 f9bd 	bl	8039590 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8037216:	bf00      	nop
 8037218:	3710      	adds	r7, #16
 803721a:	46bd      	mov	sp, r7
 803721c:	bd80      	pop	{r7, pc}

0803721e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 803721e:	b480      	push	{r7}
 8037220:	b085      	sub	sp, #20
 8037222:	af00      	add	r7, sp, #0
 8037224:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8037226:	687b      	ldr	r3, [r7, #4]
 8037228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803722a:	2b00      	cmp	r3, #0
 803722c:	d006      	beq.n	803723c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 803722e:	687b      	ldr	r3, [r7, #4]
 8037230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8037232:	681b      	ldr	r3, [r3, #0]
 8037234:	f1c3 0307 	rsb	r3, r3, #7
 8037238:	60fb      	str	r3, [r7, #12]
 803723a:	e001      	b.n	8037240 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 803723c:	2300      	movs	r3, #0
 803723e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8037240:	68fb      	ldr	r3, [r7, #12]
	}
 8037242:	4618      	mov	r0, r3
 8037244:	3714      	adds	r7, #20
 8037246:	46bd      	mov	sp, r7
 8037248:	f85d 7b04 	ldr.w	r7, [sp], #4
 803724c:	4770      	bx	lr

0803724e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 803724e:	b580      	push	{r7, lr}
 8037250:	b086      	sub	sp, #24
 8037252:	af00      	add	r7, sp, #0
 8037254:	60f8      	str	r0, [r7, #12]
 8037256:	60b9      	str	r1, [r7, #8]
 8037258:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 803725a:	2300      	movs	r3, #0
 803725c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 803725e:	68fb      	ldr	r3, [r7, #12]
 8037260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037262:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8037264:	68fb      	ldr	r3, [r7, #12]
 8037266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8037268:	2b00      	cmp	r3, #0
 803726a:	d10d      	bne.n	8037288 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 803726c:	68fb      	ldr	r3, [r7, #12]
 803726e:	681b      	ldr	r3, [r3, #0]
 8037270:	2b00      	cmp	r3, #0
 8037272:	d14d      	bne.n	8037310 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8037274:	68fb      	ldr	r3, [r7, #12]
 8037276:	689b      	ldr	r3, [r3, #8]
 8037278:	4618      	mov	r0, r3
 803727a:	f001 f81d 	bl	80382b8 <xTaskPriorityDisinherit>
 803727e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8037280:	68fb      	ldr	r3, [r7, #12]
 8037282:	2200      	movs	r2, #0
 8037284:	609a      	str	r2, [r3, #8]
 8037286:	e043      	b.n	8037310 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8037288:	687b      	ldr	r3, [r7, #4]
 803728a:	2b00      	cmp	r3, #0
 803728c:	d119      	bne.n	80372c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 803728e:	68fb      	ldr	r3, [r7, #12]
 8037290:	6858      	ldr	r0, [r3, #4]
 8037292:	68fb      	ldr	r3, [r7, #12]
 8037294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8037296:	461a      	mov	r2, r3
 8037298:	68b9      	ldr	r1, [r7, #8]
 803729a:	f002 fe35 	bl	8039f08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 803729e:	68fb      	ldr	r3, [r7, #12]
 80372a0:	685a      	ldr	r2, [r3, #4]
 80372a2:	68fb      	ldr	r3, [r7, #12]
 80372a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80372a6:	441a      	add	r2, r3
 80372a8:	68fb      	ldr	r3, [r7, #12]
 80372aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80372ac:	68fb      	ldr	r3, [r7, #12]
 80372ae:	685a      	ldr	r2, [r3, #4]
 80372b0:	68fb      	ldr	r3, [r7, #12]
 80372b2:	689b      	ldr	r3, [r3, #8]
 80372b4:	429a      	cmp	r2, r3
 80372b6:	d32b      	bcc.n	8037310 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80372b8:	68fb      	ldr	r3, [r7, #12]
 80372ba:	681a      	ldr	r2, [r3, #0]
 80372bc:	68fb      	ldr	r3, [r7, #12]
 80372be:	605a      	str	r2, [r3, #4]
 80372c0:	e026      	b.n	8037310 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80372c2:	68fb      	ldr	r3, [r7, #12]
 80372c4:	68d8      	ldr	r0, [r3, #12]
 80372c6:	68fb      	ldr	r3, [r7, #12]
 80372c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80372ca:	461a      	mov	r2, r3
 80372cc:	68b9      	ldr	r1, [r7, #8]
 80372ce:	f002 fe1b 	bl	8039f08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80372d2:	68fb      	ldr	r3, [r7, #12]
 80372d4:	68da      	ldr	r2, [r3, #12]
 80372d6:	68fb      	ldr	r3, [r7, #12]
 80372d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80372da:	425b      	negs	r3, r3
 80372dc:	441a      	add	r2, r3
 80372de:	68fb      	ldr	r3, [r7, #12]
 80372e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80372e2:	68fb      	ldr	r3, [r7, #12]
 80372e4:	68da      	ldr	r2, [r3, #12]
 80372e6:	68fb      	ldr	r3, [r7, #12]
 80372e8:	681b      	ldr	r3, [r3, #0]
 80372ea:	429a      	cmp	r2, r3
 80372ec:	d207      	bcs.n	80372fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80372ee:	68fb      	ldr	r3, [r7, #12]
 80372f0:	689a      	ldr	r2, [r3, #8]
 80372f2:	68fb      	ldr	r3, [r7, #12]
 80372f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80372f6:	425b      	negs	r3, r3
 80372f8:	441a      	add	r2, r3
 80372fa:	68fb      	ldr	r3, [r7, #12]
 80372fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80372fe:	687b      	ldr	r3, [r7, #4]
 8037300:	2b02      	cmp	r3, #2
 8037302:	d105      	bne.n	8037310 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8037304:	693b      	ldr	r3, [r7, #16]
 8037306:	2b00      	cmp	r3, #0
 8037308:	d002      	beq.n	8037310 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 803730a:	693b      	ldr	r3, [r7, #16]
 803730c:	3b01      	subs	r3, #1
 803730e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8037310:	693b      	ldr	r3, [r7, #16]
 8037312:	1c5a      	adds	r2, r3, #1
 8037314:	68fb      	ldr	r3, [r7, #12]
 8037316:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8037318:	697b      	ldr	r3, [r7, #20]
}
 803731a:	4618      	mov	r0, r3
 803731c:	3718      	adds	r7, #24
 803731e:	46bd      	mov	sp, r7
 8037320:	bd80      	pop	{r7, pc}

08037322 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8037322:	b580      	push	{r7, lr}
 8037324:	b082      	sub	sp, #8
 8037326:	af00      	add	r7, sp, #0
 8037328:	6078      	str	r0, [r7, #4]
 803732a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 803732c:	687b      	ldr	r3, [r7, #4]
 803732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8037330:	2b00      	cmp	r3, #0
 8037332:	d018      	beq.n	8037366 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8037334:	687b      	ldr	r3, [r7, #4]
 8037336:	68da      	ldr	r2, [r3, #12]
 8037338:	687b      	ldr	r3, [r7, #4]
 803733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803733c:	441a      	add	r2, r3
 803733e:	687b      	ldr	r3, [r7, #4]
 8037340:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8037342:	687b      	ldr	r3, [r7, #4]
 8037344:	68da      	ldr	r2, [r3, #12]
 8037346:	687b      	ldr	r3, [r7, #4]
 8037348:	689b      	ldr	r3, [r3, #8]
 803734a:	429a      	cmp	r2, r3
 803734c:	d303      	bcc.n	8037356 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 803734e:	687b      	ldr	r3, [r7, #4]
 8037350:	681a      	ldr	r2, [r3, #0]
 8037352:	687b      	ldr	r3, [r7, #4]
 8037354:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8037356:	687b      	ldr	r3, [r7, #4]
 8037358:	68d9      	ldr	r1, [r3, #12]
 803735a:	687b      	ldr	r3, [r7, #4]
 803735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803735e:	461a      	mov	r2, r3
 8037360:	6838      	ldr	r0, [r7, #0]
 8037362:	f002 fdd1 	bl	8039f08 <memcpy>
	}
}
 8037366:	bf00      	nop
 8037368:	3708      	adds	r7, #8
 803736a:	46bd      	mov	sp, r7
 803736c:	bd80      	pop	{r7, pc}

0803736e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 803736e:	b580      	push	{r7, lr}
 8037370:	b084      	sub	sp, #16
 8037372:	af00      	add	r7, sp, #0
 8037374:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8037376:	f001 ff1d 	bl	80391b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 803737a:	687b      	ldr	r3, [r7, #4]
 803737c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8037380:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8037382:	e011      	b.n	80373a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8037384:	687b      	ldr	r3, [r7, #4]
 8037386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8037388:	2b00      	cmp	r3, #0
 803738a:	d012      	beq.n	80373b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 803738c:	687b      	ldr	r3, [r7, #4]
 803738e:	3324      	adds	r3, #36	; 0x24
 8037390:	4618      	mov	r0, r3
 8037392:	f000 fd41 	bl	8037e18 <xTaskRemoveFromEventList>
 8037396:	4603      	mov	r3, r0
 8037398:	2b00      	cmp	r3, #0
 803739a:	d001      	beq.n	80373a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 803739c:	f000 fe16 	bl	8037fcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80373a0:	7bfb      	ldrb	r3, [r7, #15]
 80373a2:	3b01      	subs	r3, #1
 80373a4:	b2db      	uxtb	r3, r3
 80373a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80373a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80373ac:	2b00      	cmp	r3, #0
 80373ae:	dce9      	bgt.n	8037384 <prvUnlockQueue+0x16>
 80373b0:	e000      	b.n	80373b4 <prvUnlockQueue+0x46>
					break;
 80373b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80373b4:	687b      	ldr	r3, [r7, #4]
 80373b6:	22ff      	movs	r2, #255	; 0xff
 80373b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80373bc:	f001 ff2a 	bl	8039214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80373c0:	f001 fef8 	bl	80391b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80373c4:	687b      	ldr	r3, [r7, #4]
 80373c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80373ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80373cc:	e011      	b.n	80373f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80373ce:	687b      	ldr	r3, [r7, #4]
 80373d0:	691b      	ldr	r3, [r3, #16]
 80373d2:	2b00      	cmp	r3, #0
 80373d4:	d012      	beq.n	80373fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80373d6:	687b      	ldr	r3, [r7, #4]
 80373d8:	3310      	adds	r3, #16
 80373da:	4618      	mov	r0, r3
 80373dc:	f000 fd1c 	bl	8037e18 <xTaskRemoveFromEventList>
 80373e0:	4603      	mov	r3, r0
 80373e2:	2b00      	cmp	r3, #0
 80373e4:	d001      	beq.n	80373ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80373e6:	f000 fdf1 	bl	8037fcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80373ea:	7bbb      	ldrb	r3, [r7, #14]
 80373ec:	3b01      	subs	r3, #1
 80373ee:	b2db      	uxtb	r3, r3
 80373f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80373f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80373f6:	2b00      	cmp	r3, #0
 80373f8:	dce9      	bgt.n	80373ce <prvUnlockQueue+0x60>
 80373fa:	e000      	b.n	80373fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80373fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80373fe:	687b      	ldr	r3, [r7, #4]
 8037400:	22ff      	movs	r2, #255	; 0xff
 8037402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8037406:	f001 ff05 	bl	8039214 <vPortExitCritical>
}
 803740a:	bf00      	nop
 803740c:	3710      	adds	r7, #16
 803740e:	46bd      	mov	sp, r7
 8037410:	bd80      	pop	{r7, pc}

08037412 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8037412:	b580      	push	{r7, lr}
 8037414:	b084      	sub	sp, #16
 8037416:	af00      	add	r7, sp, #0
 8037418:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 803741a:	f001 fecb 	bl	80391b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 803741e:	687b      	ldr	r3, [r7, #4]
 8037420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037422:	2b00      	cmp	r3, #0
 8037424:	d102      	bne.n	803742c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8037426:	2301      	movs	r3, #1
 8037428:	60fb      	str	r3, [r7, #12]
 803742a:	e001      	b.n	8037430 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 803742c:	2300      	movs	r3, #0
 803742e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8037430:	f001 fef0 	bl	8039214 <vPortExitCritical>

	return xReturn;
 8037434:	68fb      	ldr	r3, [r7, #12]
}
 8037436:	4618      	mov	r0, r3
 8037438:	3710      	adds	r7, #16
 803743a:	46bd      	mov	sp, r7
 803743c:	bd80      	pop	{r7, pc}

0803743e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 803743e:	b580      	push	{r7, lr}
 8037440:	b084      	sub	sp, #16
 8037442:	af00      	add	r7, sp, #0
 8037444:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8037446:	f001 feb5 	bl	80391b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 803744a:	687b      	ldr	r3, [r7, #4]
 803744c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 803744e:	687b      	ldr	r3, [r7, #4]
 8037450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8037452:	429a      	cmp	r2, r3
 8037454:	d102      	bne.n	803745c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8037456:	2301      	movs	r3, #1
 8037458:	60fb      	str	r3, [r7, #12]
 803745a:	e001      	b.n	8037460 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 803745c:	2300      	movs	r3, #0
 803745e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8037460:	f001 fed8 	bl	8039214 <vPortExitCritical>

	return xReturn;
 8037464:	68fb      	ldr	r3, [r7, #12]
}
 8037466:	4618      	mov	r0, r3
 8037468:	3710      	adds	r7, #16
 803746a:	46bd      	mov	sp, r7
 803746c:	bd80      	pop	{r7, pc}
	...

08037470 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8037470:	b480      	push	{r7}
 8037472:	b085      	sub	sp, #20
 8037474:	af00      	add	r7, sp, #0
 8037476:	6078      	str	r0, [r7, #4]
 8037478:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 803747a:	2300      	movs	r3, #0
 803747c:	60fb      	str	r3, [r7, #12]
 803747e:	e014      	b.n	80374aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8037480:	4a0f      	ldr	r2, [pc, #60]	; (80374c0 <vQueueAddToRegistry+0x50>)
 8037482:	68fb      	ldr	r3, [r7, #12]
 8037484:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8037488:	2b00      	cmp	r3, #0
 803748a:	d10b      	bne.n	80374a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 803748c:	490c      	ldr	r1, [pc, #48]	; (80374c0 <vQueueAddToRegistry+0x50>)
 803748e:	68fb      	ldr	r3, [r7, #12]
 8037490:	683a      	ldr	r2, [r7, #0]
 8037492:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8037496:	4a0a      	ldr	r2, [pc, #40]	; (80374c0 <vQueueAddToRegistry+0x50>)
 8037498:	68fb      	ldr	r3, [r7, #12]
 803749a:	00db      	lsls	r3, r3, #3
 803749c:	4413      	add	r3, r2
 803749e:	687a      	ldr	r2, [r7, #4]
 80374a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80374a2:	e006      	b.n	80374b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80374a4:	68fb      	ldr	r3, [r7, #12]
 80374a6:	3301      	adds	r3, #1
 80374a8:	60fb      	str	r3, [r7, #12]
 80374aa:	68fb      	ldr	r3, [r7, #12]
 80374ac:	2b07      	cmp	r3, #7
 80374ae:	d9e7      	bls.n	8037480 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80374b0:	bf00      	nop
 80374b2:	bf00      	nop
 80374b4:	3714      	adds	r7, #20
 80374b6:	46bd      	mov	sp, r7
 80374b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80374bc:	4770      	bx	lr
 80374be:	bf00      	nop
 80374c0:	24002c34 	.word	0x24002c34

080374c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80374c4:	b480      	push	{r7}
 80374c6:	b085      	sub	sp, #20
 80374c8:	af00      	add	r7, sp, #0
 80374ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80374cc:	2300      	movs	r3, #0
 80374ce:	60fb      	str	r3, [r7, #12]
 80374d0:	e016      	b.n	8037500 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80374d2:	4a10      	ldr	r2, [pc, #64]	; (8037514 <vQueueUnregisterQueue+0x50>)
 80374d4:	68fb      	ldr	r3, [r7, #12]
 80374d6:	00db      	lsls	r3, r3, #3
 80374d8:	4413      	add	r3, r2
 80374da:	685b      	ldr	r3, [r3, #4]
 80374dc:	687a      	ldr	r2, [r7, #4]
 80374de:	429a      	cmp	r2, r3
 80374e0:	d10b      	bne.n	80374fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80374e2:	4a0c      	ldr	r2, [pc, #48]	; (8037514 <vQueueUnregisterQueue+0x50>)
 80374e4:	68fb      	ldr	r3, [r7, #12]
 80374e6:	2100      	movs	r1, #0
 80374e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80374ec:	4a09      	ldr	r2, [pc, #36]	; (8037514 <vQueueUnregisterQueue+0x50>)
 80374ee:	68fb      	ldr	r3, [r7, #12]
 80374f0:	00db      	lsls	r3, r3, #3
 80374f2:	4413      	add	r3, r2
 80374f4:	2200      	movs	r2, #0
 80374f6:	605a      	str	r2, [r3, #4]
				break;
 80374f8:	e006      	b.n	8037508 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80374fa:	68fb      	ldr	r3, [r7, #12]
 80374fc:	3301      	adds	r3, #1
 80374fe:	60fb      	str	r3, [r7, #12]
 8037500:	68fb      	ldr	r3, [r7, #12]
 8037502:	2b07      	cmp	r3, #7
 8037504:	d9e5      	bls.n	80374d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8037506:	bf00      	nop
 8037508:	bf00      	nop
 803750a:	3714      	adds	r7, #20
 803750c:	46bd      	mov	sp, r7
 803750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037512:	4770      	bx	lr
 8037514:	24002c34 	.word	0x24002c34

08037518 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8037518:	b580      	push	{r7, lr}
 803751a:	b086      	sub	sp, #24
 803751c:	af00      	add	r7, sp, #0
 803751e:	60f8      	str	r0, [r7, #12]
 8037520:	60b9      	str	r1, [r7, #8]
 8037522:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8037524:	68fb      	ldr	r3, [r7, #12]
 8037526:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8037528:	f001 fe44 	bl	80391b4 <vPortEnterCritical>
 803752c:	697b      	ldr	r3, [r7, #20]
 803752e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8037532:	b25b      	sxtb	r3, r3
 8037534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8037538:	d103      	bne.n	8037542 <vQueueWaitForMessageRestricted+0x2a>
 803753a:	697b      	ldr	r3, [r7, #20]
 803753c:	2200      	movs	r2, #0
 803753e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8037542:	697b      	ldr	r3, [r7, #20]
 8037544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8037548:	b25b      	sxtb	r3, r3
 803754a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803754e:	d103      	bne.n	8037558 <vQueueWaitForMessageRestricted+0x40>
 8037550:	697b      	ldr	r3, [r7, #20]
 8037552:	2200      	movs	r2, #0
 8037554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8037558:	f001 fe5c 	bl	8039214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 803755c:	697b      	ldr	r3, [r7, #20]
 803755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037560:	2b00      	cmp	r3, #0
 8037562:	d106      	bne.n	8037572 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8037564:	697b      	ldr	r3, [r7, #20]
 8037566:	3324      	adds	r3, #36	; 0x24
 8037568:	687a      	ldr	r2, [r7, #4]
 803756a:	68b9      	ldr	r1, [r7, #8]
 803756c:	4618      	mov	r0, r3
 803756e:	f000 fc27 	bl	8037dc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8037572:	6978      	ldr	r0, [r7, #20]
 8037574:	f7ff fefb 	bl	803736e <prvUnlockQueue>
	}
 8037578:	bf00      	nop
 803757a:	3718      	adds	r7, #24
 803757c:	46bd      	mov	sp, r7
 803757e:	bd80      	pop	{r7, pc}

08037580 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8037580:	b580      	push	{r7, lr}
 8037582:	b08e      	sub	sp, #56	; 0x38
 8037584:	af04      	add	r7, sp, #16
 8037586:	60f8      	str	r0, [r7, #12]
 8037588:	60b9      	str	r1, [r7, #8]
 803758a:	607a      	str	r2, [r7, #4]
 803758c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 803758e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037590:	2b00      	cmp	r3, #0
 8037592:	d10a      	bne.n	80375aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8037594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037598:	f383 8811 	msr	BASEPRI, r3
 803759c:	f3bf 8f6f 	isb	sy
 80375a0:	f3bf 8f4f 	dsb	sy
 80375a4:	623b      	str	r3, [r7, #32]
}
 80375a6:	bf00      	nop
 80375a8:	e7fe      	b.n	80375a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80375aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80375ac:	2b00      	cmp	r3, #0
 80375ae:	d10a      	bne.n	80375c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80375b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80375b4:	f383 8811 	msr	BASEPRI, r3
 80375b8:	f3bf 8f6f 	isb	sy
 80375bc:	f3bf 8f4f 	dsb	sy
 80375c0:	61fb      	str	r3, [r7, #28]
}
 80375c2:	bf00      	nop
 80375c4:	e7fe      	b.n	80375c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80375c6:	2354      	movs	r3, #84	; 0x54
 80375c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80375ca:	693b      	ldr	r3, [r7, #16]
 80375cc:	2b54      	cmp	r3, #84	; 0x54
 80375ce:	d00a      	beq.n	80375e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80375d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80375d4:	f383 8811 	msr	BASEPRI, r3
 80375d8:	f3bf 8f6f 	isb	sy
 80375dc:	f3bf 8f4f 	dsb	sy
 80375e0:	61bb      	str	r3, [r7, #24]
}
 80375e2:	bf00      	nop
 80375e4:	e7fe      	b.n	80375e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80375e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80375e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80375ea:	2b00      	cmp	r3, #0
 80375ec:	d01e      	beq.n	803762c <xTaskCreateStatic+0xac>
 80375ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80375f0:	2b00      	cmp	r3, #0
 80375f2:	d01b      	beq.n	803762c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80375f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80375f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80375f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80375fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80375fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80375fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037600:	2202      	movs	r2, #2
 8037602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8037606:	2300      	movs	r3, #0
 8037608:	9303      	str	r3, [sp, #12]
 803760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803760c:	9302      	str	r3, [sp, #8]
 803760e:	f107 0314 	add.w	r3, r7, #20
 8037612:	9301      	str	r3, [sp, #4]
 8037614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037616:	9300      	str	r3, [sp, #0]
 8037618:	683b      	ldr	r3, [r7, #0]
 803761a:	687a      	ldr	r2, [r7, #4]
 803761c:	68b9      	ldr	r1, [r7, #8]
 803761e:	68f8      	ldr	r0, [r7, #12]
 8037620:	f000 f850 	bl	80376c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8037624:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8037626:	f000 f8d5 	bl	80377d4 <prvAddNewTaskToReadyList>
 803762a:	e001      	b.n	8037630 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 803762c:	2300      	movs	r3, #0
 803762e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8037630:	697b      	ldr	r3, [r7, #20]
	}
 8037632:	4618      	mov	r0, r3
 8037634:	3728      	adds	r7, #40	; 0x28
 8037636:	46bd      	mov	sp, r7
 8037638:	bd80      	pop	{r7, pc}

0803763a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 803763a:	b580      	push	{r7, lr}
 803763c:	b08c      	sub	sp, #48	; 0x30
 803763e:	af04      	add	r7, sp, #16
 8037640:	60f8      	str	r0, [r7, #12]
 8037642:	60b9      	str	r1, [r7, #8]
 8037644:	603b      	str	r3, [r7, #0]
 8037646:	4613      	mov	r3, r2
 8037648:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 803764a:	88fb      	ldrh	r3, [r7, #6]
 803764c:	009b      	lsls	r3, r3, #2
 803764e:	4618      	mov	r0, r3
 8037650:	f001 fed2 	bl	80393f8 <pvPortMalloc>
 8037654:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8037656:	697b      	ldr	r3, [r7, #20]
 8037658:	2b00      	cmp	r3, #0
 803765a:	d00e      	beq.n	803767a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 803765c:	2054      	movs	r0, #84	; 0x54
 803765e:	f001 fecb 	bl	80393f8 <pvPortMalloc>
 8037662:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8037664:	69fb      	ldr	r3, [r7, #28]
 8037666:	2b00      	cmp	r3, #0
 8037668:	d003      	beq.n	8037672 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 803766a:	69fb      	ldr	r3, [r7, #28]
 803766c:	697a      	ldr	r2, [r7, #20]
 803766e:	631a      	str	r2, [r3, #48]	; 0x30
 8037670:	e005      	b.n	803767e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8037672:	6978      	ldr	r0, [r7, #20]
 8037674:	f001 ff8c 	bl	8039590 <vPortFree>
 8037678:	e001      	b.n	803767e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 803767a:	2300      	movs	r3, #0
 803767c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 803767e:	69fb      	ldr	r3, [r7, #28]
 8037680:	2b00      	cmp	r3, #0
 8037682:	d017      	beq.n	80376b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8037684:	69fb      	ldr	r3, [r7, #28]
 8037686:	2200      	movs	r2, #0
 8037688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 803768c:	88fa      	ldrh	r2, [r7, #6]
 803768e:	2300      	movs	r3, #0
 8037690:	9303      	str	r3, [sp, #12]
 8037692:	69fb      	ldr	r3, [r7, #28]
 8037694:	9302      	str	r3, [sp, #8]
 8037696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037698:	9301      	str	r3, [sp, #4]
 803769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803769c:	9300      	str	r3, [sp, #0]
 803769e:	683b      	ldr	r3, [r7, #0]
 80376a0:	68b9      	ldr	r1, [r7, #8]
 80376a2:	68f8      	ldr	r0, [r7, #12]
 80376a4:	f000 f80e 	bl	80376c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80376a8:	69f8      	ldr	r0, [r7, #28]
 80376aa:	f000 f893 	bl	80377d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80376ae:	2301      	movs	r3, #1
 80376b0:	61bb      	str	r3, [r7, #24]
 80376b2:	e002      	b.n	80376ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80376b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80376b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80376ba:	69bb      	ldr	r3, [r7, #24]
	}
 80376bc:	4618      	mov	r0, r3
 80376be:	3720      	adds	r7, #32
 80376c0:	46bd      	mov	sp, r7
 80376c2:	bd80      	pop	{r7, pc}

080376c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80376c4:	b580      	push	{r7, lr}
 80376c6:	b088      	sub	sp, #32
 80376c8:	af00      	add	r7, sp, #0
 80376ca:	60f8      	str	r0, [r7, #12]
 80376cc:	60b9      	str	r1, [r7, #8]
 80376ce:	607a      	str	r2, [r7, #4]
 80376d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80376d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80376d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80376d6:	6879      	ldr	r1, [r7, #4]
 80376d8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80376dc:	440b      	add	r3, r1
 80376de:	009b      	lsls	r3, r3, #2
 80376e0:	4413      	add	r3, r2
 80376e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80376e4:	69bb      	ldr	r3, [r7, #24]
 80376e6:	f023 0307 	bic.w	r3, r3, #7
 80376ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80376ec:	69bb      	ldr	r3, [r7, #24]
 80376ee:	f003 0307 	and.w	r3, r3, #7
 80376f2:	2b00      	cmp	r3, #0
 80376f4:	d00a      	beq.n	803770c <prvInitialiseNewTask+0x48>
	__asm volatile
 80376f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80376fa:	f383 8811 	msr	BASEPRI, r3
 80376fe:	f3bf 8f6f 	isb	sy
 8037702:	f3bf 8f4f 	dsb	sy
 8037706:	617b      	str	r3, [r7, #20]
}
 8037708:	bf00      	nop
 803770a:	e7fe      	b.n	803770a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 803770c:	68bb      	ldr	r3, [r7, #8]
 803770e:	2b00      	cmp	r3, #0
 8037710:	d01f      	beq.n	8037752 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8037712:	2300      	movs	r3, #0
 8037714:	61fb      	str	r3, [r7, #28]
 8037716:	e012      	b.n	803773e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8037718:	68ba      	ldr	r2, [r7, #8]
 803771a:	69fb      	ldr	r3, [r7, #28]
 803771c:	4413      	add	r3, r2
 803771e:	7819      	ldrb	r1, [r3, #0]
 8037720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8037722:	69fb      	ldr	r3, [r7, #28]
 8037724:	4413      	add	r3, r2
 8037726:	3334      	adds	r3, #52	; 0x34
 8037728:	460a      	mov	r2, r1
 803772a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 803772c:	68ba      	ldr	r2, [r7, #8]
 803772e:	69fb      	ldr	r3, [r7, #28]
 8037730:	4413      	add	r3, r2
 8037732:	781b      	ldrb	r3, [r3, #0]
 8037734:	2b00      	cmp	r3, #0
 8037736:	d006      	beq.n	8037746 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8037738:	69fb      	ldr	r3, [r7, #28]
 803773a:	3301      	adds	r3, #1
 803773c:	61fb      	str	r3, [r7, #28]
 803773e:	69fb      	ldr	r3, [r7, #28]
 8037740:	2b0f      	cmp	r3, #15
 8037742:	d9e9      	bls.n	8037718 <prvInitialiseNewTask+0x54>
 8037744:	e000      	b.n	8037748 <prvInitialiseNewTask+0x84>
			{
				break;
 8037746:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8037748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803774a:	2200      	movs	r2, #0
 803774c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8037750:	e003      	b.n	803775a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8037752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037754:	2200      	movs	r2, #0
 8037756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 803775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803775c:	2b06      	cmp	r3, #6
 803775e:	d901      	bls.n	8037764 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8037760:	2306      	movs	r3, #6
 8037762:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8037764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8037768:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 803776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803776c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803776e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8037770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037772:	2200      	movs	r2, #0
 8037774:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8037776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037778:	3304      	adds	r3, #4
 803777a:	4618      	mov	r0, r3
 803777c:	f7fe fe80 	bl	8036480 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8037780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037782:	3318      	adds	r3, #24
 8037784:	4618      	mov	r0, r3
 8037786:	f7fe fe7b 	bl	8036480 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 803778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803778c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803778e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8037790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037792:	f1c3 0207 	rsb	r2, r3, #7
 8037796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037798:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 803779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803779c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803779e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80377a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80377a2:	2200      	movs	r2, #0
 80377a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80377a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80377a8:	2200      	movs	r2, #0
 80377aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80377ae:	683a      	ldr	r2, [r7, #0]
 80377b0:	68f9      	ldr	r1, [r7, #12]
 80377b2:	69b8      	ldr	r0, [r7, #24]
 80377b4:	f001 fbd0 	bl	8038f58 <pxPortInitialiseStack>
 80377b8:	4602      	mov	r2, r0
 80377ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80377bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80377be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80377c0:	2b00      	cmp	r3, #0
 80377c2:	d002      	beq.n	80377ca <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80377c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80377c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80377c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80377ca:	bf00      	nop
 80377cc:	3720      	adds	r7, #32
 80377ce:	46bd      	mov	sp, r7
 80377d0:	bd80      	pop	{r7, pc}
	...

080377d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80377d4:	b580      	push	{r7, lr}
 80377d6:	b082      	sub	sp, #8
 80377d8:	af00      	add	r7, sp, #0
 80377da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80377dc:	f001 fcea 	bl	80391b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80377e0:	4b2a      	ldr	r3, [pc, #168]	; (803788c <prvAddNewTaskToReadyList+0xb8>)
 80377e2:	681b      	ldr	r3, [r3, #0]
 80377e4:	3301      	adds	r3, #1
 80377e6:	4a29      	ldr	r2, [pc, #164]	; (803788c <prvAddNewTaskToReadyList+0xb8>)
 80377e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80377ea:	4b29      	ldr	r3, [pc, #164]	; (8037890 <prvAddNewTaskToReadyList+0xbc>)
 80377ec:	681b      	ldr	r3, [r3, #0]
 80377ee:	2b00      	cmp	r3, #0
 80377f0:	d109      	bne.n	8037806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80377f2:	4a27      	ldr	r2, [pc, #156]	; (8037890 <prvAddNewTaskToReadyList+0xbc>)
 80377f4:	687b      	ldr	r3, [r7, #4]
 80377f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80377f8:	4b24      	ldr	r3, [pc, #144]	; (803788c <prvAddNewTaskToReadyList+0xb8>)
 80377fa:	681b      	ldr	r3, [r3, #0]
 80377fc:	2b01      	cmp	r3, #1
 80377fe:	d110      	bne.n	8037822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8037800:	f000 fc08 	bl	8038014 <prvInitialiseTaskLists>
 8037804:	e00d      	b.n	8037822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8037806:	4b23      	ldr	r3, [pc, #140]	; (8037894 <prvAddNewTaskToReadyList+0xc0>)
 8037808:	681b      	ldr	r3, [r3, #0]
 803780a:	2b00      	cmp	r3, #0
 803780c:	d109      	bne.n	8037822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 803780e:	4b20      	ldr	r3, [pc, #128]	; (8037890 <prvAddNewTaskToReadyList+0xbc>)
 8037810:	681b      	ldr	r3, [r3, #0]
 8037812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037814:	687b      	ldr	r3, [r7, #4]
 8037816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037818:	429a      	cmp	r2, r3
 803781a:	d802      	bhi.n	8037822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 803781c:	4a1c      	ldr	r2, [pc, #112]	; (8037890 <prvAddNewTaskToReadyList+0xbc>)
 803781e:	687b      	ldr	r3, [r7, #4]
 8037820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8037822:	4b1d      	ldr	r3, [pc, #116]	; (8037898 <prvAddNewTaskToReadyList+0xc4>)
 8037824:	681b      	ldr	r3, [r3, #0]
 8037826:	3301      	adds	r3, #1
 8037828:	4a1b      	ldr	r2, [pc, #108]	; (8037898 <prvAddNewTaskToReadyList+0xc4>)
 803782a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 803782c:	687b      	ldr	r3, [r7, #4]
 803782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037830:	2201      	movs	r2, #1
 8037832:	409a      	lsls	r2, r3
 8037834:	4b19      	ldr	r3, [pc, #100]	; (803789c <prvAddNewTaskToReadyList+0xc8>)
 8037836:	681b      	ldr	r3, [r3, #0]
 8037838:	4313      	orrs	r3, r2
 803783a:	4a18      	ldr	r2, [pc, #96]	; (803789c <prvAddNewTaskToReadyList+0xc8>)
 803783c:	6013      	str	r3, [r2, #0]
 803783e:	687b      	ldr	r3, [r7, #4]
 8037840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037842:	4613      	mov	r3, r2
 8037844:	009b      	lsls	r3, r3, #2
 8037846:	4413      	add	r3, r2
 8037848:	009b      	lsls	r3, r3, #2
 803784a:	4a15      	ldr	r2, [pc, #84]	; (80378a0 <prvAddNewTaskToReadyList+0xcc>)
 803784c:	441a      	add	r2, r3
 803784e:	687b      	ldr	r3, [r7, #4]
 8037850:	3304      	adds	r3, #4
 8037852:	4619      	mov	r1, r3
 8037854:	4610      	mov	r0, r2
 8037856:	f7fe fe20 	bl	803649a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 803785a:	f001 fcdb 	bl	8039214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 803785e:	4b0d      	ldr	r3, [pc, #52]	; (8037894 <prvAddNewTaskToReadyList+0xc0>)
 8037860:	681b      	ldr	r3, [r3, #0]
 8037862:	2b00      	cmp	r3, #0
 8037864:	d00e      	beq.n	8037884 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8037866:	4b0a      	ldr	r3, [pc, #40]	; (8037890 <prvAddNewTaskToReadyList+0xbc>)
 8037868:	681b      	ldr	r3, [r3, #0]
 803786a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803786c:	687b      	ldr	r3, [r7, #4]
 803786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037870:	429a      	cmp	r2, r3
 8037872:	d207      	bcs.n	8037884 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8037874:	4b0b      	ldr	r3, [pc, #44]	; (80378a4 <prvAddNewTaskToReadyList+0xd0>)
 8037876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803787a:	601a      	str	r2, [r3, #0]
 803787c:	f3bf 8f4f 	dsb	sy
 8037880:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8037884:	bf00      	nop
 8037886:	3708      	adds	r7, #8
 8037888:	46bd      	mov	sp, r7
 803788a:	bd80      	pop	{r7, pc}
 803788c:	24002d74 	.word	0x24002d74
 8037890:	24002c74 	.word	0x24002c74
 8037894:	24002d80 	.word	0x24002d80
 8037898:	24002d90 	.word	0x24002d90
 803789c:	24002d7c 	.word	0x24002d7c
 80378a0:	24002c78 	.word	0x24002c78
 80378a4:	e000ed04 	.word	0xe000ed04

080378a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80378a8:	b580      	push	{r7, lr}
 80378aa:	b084      	sub	sp, #16
 80378ac:	af00      	add	r7, sp, #0
 80378ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80378b0:	2300      	movs	r3, #0
 80378b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80378b4:	687b      	ldr	r3, [r7, #4]
 80378b6:	2b00      	cmp	r3, #0
 80378b8:	d017      	beq.n	80378ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80378ba:	4b13      	ldr	r3, [pc, #76]	; (8037908 <vTaskDelay+0x60>)
 80378bc:	681b      	ldr	r3, [r3, #0]
 80378be:	2b00      	cmp	r3, #0
 80378c0:	d00a      	beq.n	80378d8 <vTaskDelay+0x30>
	__asm volatile
 80378c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80378c6:	f383 8811 	msr	BASEPRI, r3
 80378ca:	f3bf 8f6f 	isb	sy
 80378ce:	f3bf 8f4f 	dsb	sy
 80378d2:	60bb      	str	r3, [r7, #8]
}
 80378d4:	bf00      	nop
 80378d6:	e7fe      	b.n	80378d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80378d8:	f000 f880 	bl	80379dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80378dc:	2100      	movs	r1, #0
 80378de:	6878      	ldr	r0, [r7, #4]
 80378e0:	f000 feec 	bl	80386bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80378e4:	f000 f888 	bl	80379f8 <xTaskResumeAll>
 80378e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80378ea:	68fb      	ldr	r3, [r7, #12]
 80378ec:	2b00      	cmp	r3, #0
 80378ee:	d107      	bne.n	8037900 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80378f0:	4b06      	ldr	r3, [pc, #24]	; (803790c <vTaskDelay+0x64>)
 80378f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80378f6:	601a      	str	r2, [r3, #0]
 80378f8:	f3bf 8f4f 	dsb	sy
 80378fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8037900:	bf00      	nop
 8037902:	3710      	adds	r7, #16
 8037904:	46bd      	mov	sp, r7
 8037906:	bd80      	pop	{r7, pc}
 8037908:	24002d9c 	.word	0x24002d9c
 803790c:	e000ed04 	.word	0xe000ed04

08037910 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8037910:	b580      	push	{r7, lr}
 8037912:	b08a      	sub	sp, #40	; 0x28
 8037914:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8037916:	2300      	movs	r3, #0
 8037918:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 803791a:	2300      	movs	r3, #0
 803791c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 803791e:	463a      	mov	r2, r7
 8037920:	1d39      	adds	r1, r7, #4
 8037922:	f107 0308 	add.w	r3, r7, #8
 8037926:	4618      	mov	r0, r3
 8037928:	f7e9 f9b4 	bl	8020c94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 803792c:	6839      	ldr	r1, [r7, #0]
 803792e:	687b      	ldr	r3, [r7, #4]
 8037930:	68ba      	ldr	r2, [r7, #8]
 8037932:	9202      	str	r2, [sp, #8]
 8037934:	9301      	str	r3, [sp, #4]
 8037936:	2300      	movs	r3, #0
 8037938:	9300      	str	r3, [sp, #0]
 803793a:	2300      	movs	r3, #0
 803793c:	460a      	mov	r2, r1
 803793e:	4921      	ldr	r1, [pc, #132]	; (80379c4 <vTaskStartScheduler+0xb4>)
 8037940:	4821      	ldr	r0, [pc, #132]	; (80379c8 <vTaskStartScheduler+0xb8>)
 8037942:	f7ff fe1d 	bl	8037580 <xTaskCreateStatic>
 8037946:	4603      	mov	r3, r0
 8037948:	4a20      	ldr	r2, [pc, #128]	; (80379cc <vTaskStartScheduler+0xbc>)
 803794a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 803794c:	4b1f      	ldr	r3, [pc, #124]	; (80379cc <vTaskStartScheduler+0xbc>)
 803794e:	681b      	ldr	r3, [r3, #0]
 8037950:	2b00      	cmp	r3, #0
 8037952:	d002      	beq.n	803795a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8037954:	2301      	movs	r3, #1
 8037956:	617b      	str	r3, [r7, #20]
 8037958:	e001      	b.n	803795e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 803795a:	2300      	movs	r3, #0
 803795c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 803795e:	697b      	ldr	r3, [r7, #20]
 8037960:	2b01      	cmp	r3, #1
 8037962:	d102      	bne.n	803796a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8037964:	f000 ff10 	bl	8038788 <xTimerCreateTimerTask>
 8037968:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 803796a:	697b      	ldr	r3, [r7, #20]
 803796c:	2b01      	cmp	r3, #1
 803796e:	d116      	bne.n	803799e <vTaskStartScheduler+0x8e>
	__asm volatile
 8037970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037974:	f383 8811 	msr	BASEPRI, r3
 8037978:	f3bf 8f6f 	isb	sy
 803797c:	f3bf 8f4f 	dsb	sy
 8037980:	613b      	str	r3, [r7, #16]
}
 8037982:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8037984:	4b12      	ldr	r3, [pc, #72]	; (80379d0 <vTaskStartScheduler+0xc0>)
 8037986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803798a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 803798c:	4b11      	ldr	r3, [pc, #68]	; (80379d4 <vTaskStartScheduler+0xc4>)
 803798e:	2201      	movs	r2, #1
 8037990:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8037992:	4b11      	ldr	r3, [pc, #68]	; (80379d8 <vTaskStartScheduler+0xc8>)
 8037994:	2200      	movs	r2, #0
 8037996:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8037998:	f001 fb6a 	bl	8039070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 803799c:	e00e      	b.n	80379bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 803799e:	697b      	ldr	r3, [r7, #20]
 80379a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80379a4:	d10a      	bne.n	80379bc <vTaskStartScheduler+0xac>
	__asm volatile
 80379a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80379aa:	f383 8811 	msr	BASEPRI, r3
 80379ae:	f3bf 8f6f 	isb	sy
 80379b2:	f3bf 8f4f 	dsb	sy
 80379b6:	60fb      	str	r3, [r7, #12]
}
 80379b8:	bf00      	nop
 80379ba:	e7fe      	b.n	80379ba <vTaskStartScheduler+0xaa>
}
 80379bc:	bf00      	nop
 80379be:	3718      	adds	r7, #24
 80379c0:	46bd      	mov	sp, r7
 80379c2:	bd80      	pop	{r7, pc}
 80379c4:	0803b8f4 	.word	0x0803b8f4
 80379c8:	08037fe5 	.word	0x08037fe5
 80379cc:	24002d98 	.word	0x24002d98
 80379d0:	24002d94 	.word	0x24002d94
 80379d4:	24002d80 	.word	0x24002d80
 80379d8:	24002d78 	.word	0x24002d78

080379dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80379dc:	b480      	push	{r7}
 80379de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80379e0:	4b04      	ldr	r3, [pc, #16]	; (80379f4 <vTaskSuspendAll+0x18>)
 80379e2:	681b      	ldr	r3, [r3, #0]
 80379e4:	3301      	adds	r3, #1
 80379e6:	4a03      	ldr	r2, [pc, #12]	; (80379f4 <vTaskSuspendAll+0x18>)
 80379e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80379ea:	bf00      	nop
 80379ec:	46bd      	mov	sp, r7
 80379ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80379f2:	4770      	bx	lr
 80379f4:	24002d9c 	.word	0x24002d9c

080379f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80379f8:	b580      	push	{r7, lr}
 80379fa:	b084      	sub	sp, #16
 80379fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80379fe:	2300      	movs	r3, #0
 8037a00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8037a02:	2300      	movs	r3, #0
 8037a04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8037a06:	4b41      	ldr	r3, [pc, #260]	; (8037b0c <xTaskResumeAll+0x114>)
 8037a08:	681b      	ldr	r3, [r3, #0]
 8037a0a:	2b00      	cmp	r3, #0
 8037a0c:	d10a      	bne.n	8037a24 <xTaskResumeAll+0x2c>
	__asm volatile
 8037a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037a12:	f383 8811 	msr	BASEPRI, r3
 8037a16:	f3bf 8f6f 	isb	sy
 8037a1a:	f3bf 8f4f 	dsb	sy
 8037a1e:	603b      	str	r3, [r7, #0]
}
 8037a20:	bf00      	nop
 8037a22:	e7fe      	b.n	8037a22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8037a24:	f001 fbc6 	bl	80391b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8037a28:	4b38      	ldr	r3, [pc, #224]	; (8037b0c <xTaskResumeAll+0x114>)
 8037a2a:	681b      	ldr	r3, [r3, #0]
 8037a2c:	3b01      	subs	r3, #1
 8037a2e:	4a37      	ldr	r2, [pc, #220]	; (8037b0c <xTaskResumeAll+0x114>)
 8037a30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8037a32:	4b36      	ldr	r3, [pc, #216]	; (8037b0c <xTaskResumeAll+0x114>)
 8037a34:	681b      	ldr	r3, [r3, #0]
 8037a36:	2b00      	cmp	r3, #0
 8037a38:	d161      	bne.n	8037afe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8037a3a:	4b35      	ldr	r3, [pc, #212]	; (8037b10 <xTaskResumeAll+0x118>)
 8037a3c:	681b      	ldr	r3, [r3, #0]
 8037a3e:	2b00      	cmp	r3, #0
 8037a40:	d05d      	beq.n	8037afe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8037a42:	e02e      	b.n	8037aa2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8037a44:	4b33      	ldr	r3, [pc, #204]	; (8037b14 <xTaskResumeAll+0x11c>)
 8037a46:	68db      	ldr	r3, [r3, #12]
 8037a48:	68db      	ldr	r3, [r3, #12]
 8037a4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8037a4c:	68fb      	ldr	r3, [r7, #12]
 8037a4e:	3318      	adds	r3, #24
 8037a50:	4618      	mov	r0, r3
 8037a52:	f7fe fd7f 	bl	8036554 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8037a56:	68fb      	ldr	r3, [r7, #12]
 8037a58:	3304      	adds	r3, #4
 8037a5a:	4618      	mov	r0, r3
 8037a5c:	f7fe fd7a 	bl	8036554 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8037a60:	68fb      	ldr	r3, [r7, #12]
 8037a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037a64:	2201      	movs	r2, #1
 8037a66:	409a      	lsls	r2, r3
 8037a68:	4b2b      	ldr	r3, [pc, #172]	; (8037b18 <xTaskResumeAll+0x120>)
 8037a6a:	681b      	ldr	r3, [r3, #0]
 8037a6c:	4313      	orrs	r3, r2
 8037a6e:	4a2a      	ldr	r2, [pc, #168]	; (8037b18 <xTaskResumeAll+0x120>)
 8037a70:	6013      	str	r3, [r2, #0]
 8037a72:	68fb      	ldr	r3, [r7, #12]
 8037a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037a76:	4613      	mov	r3, r2
 8037a78:	009b      	lsls	r3, r3, #2
 8037a7a:	4413      	add	r3, r2
 8037a7c:	009b      	lsls	r3, r3, #2
 8037a7e:	4a27      	ldr	r2, [pc, #156]	; (8037b1c <xTaskResumeAll+0x124>)
 8037a80:	441a      	add	r2, r3
 8037a82:	68fb      	ldr	r3, [r7, #12]
 8037a84:	3304      	adds	r3, #4
 8037a86:	4619      	mov	r1, r3
 8037a88:	4610      	mov	r0, r2
 8037a8a:	f7fe fd06 	bl	803649a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8037a8e:	68fb      	ldr	r3, [r7, #12]
 8037a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037a92:	4b23      	ldr	r3, [pc, #140]	; (8037b20 <xTaskResumeAll+0x128>)
 8037a94:	681b      	ldr	r3, [r3, #0]
 8037a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037a98:	429a      	cmp	r2, r3
 8037a9a:	d302      	bcc.n	8037aa2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8037a9c:	4b21      	ldr	r3, [pc, #132]	; (8037b24 <xTaskResumeAll+0x12c>)
 8037a9e:	2201      	movs	r2, #1
 8037aa0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8037aa2:	4b1c      	ldr	r3, [pc, #112]	; (8037b14 <xTaskResumeAll+0x11c>)
 8037aa4:	681b      	ldr	r3, [r3, #0]
 8037aa6:	2b00      	cmp	r3, #0
 8037aa8:	d1cc      	bne.n	8037a44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8037aaa:	68fb      	ldr	r3, [r7, #12]
 8037aac:	2b00      	cmp	r3, #0
 8037aae:	d001      	beq.n	8037ab4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8037ab0:	f000 fb4e 	bl	8038150 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8037ab4:	4b1c      	ldr	r3, [pc, #112]	; (8037b28 <xTaskResumeAll+0x130>)
 8037ab6:	681b      	ldr	r3, [r3, #0]
 8037ab8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8037aba:	687b      	ldr	r3, [r7, #4]
 8037abc:	2b00      	cmp	r3, #0
 8037abe:	d010      	beq.n	8037ae2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8037ac0:	f000 f846 	bl	8037b50 <xTaskIncrementTick>
 8037ac4:	4603      	mov	r3, r0
 8037ac6:	2b00      	cmp	r3, #0
 8037ac8:	d002      	beq.n	8037ad0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8037aca:	4b16      	ldr	r3, [pc, #88]	; (8037b24 <xTaskResumeAll+0x12c>)
 8037acc:	2201      	movs	r2, #1
 8037ace:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8037ad0:	687b      	ldr	r3, [r7, #4]
 8037ad2:	3b01      	subs	r3, #1
 8037ad4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8037ad6:	687b      	ldr	r3, [r7, #4]
 8037ad8:	2b00      	cmp	r3, #0
 8037ada:	d1f1      	bne.n	8037ac0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8037adc:	4b12      	ldr	r3, [pc, #72]	; (8037b28 <xTaskResumeAll+0x130>)
 8037ade:	2200      	movs	r2, #0
 8037ae0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8037ae2:	4b10      	ldr	r3, [pc, #64]	; (8037b24 <xTaskResumeAll+0x12c>)
 8037ae4:	681b      	ldr	r3, [r3, #0]
 8037ae6:	2b00      	cmp	r3, #0
 8037ae8:	d009      	beq.n	8037afe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8037aea:	2301      	movs	r3, #1
 8037aec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8037aee:	4b0f      	ldr	r3, [pc, #60]	; (8037b2c <xTaskResumeAll+0x134>)
 8037af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8037af4:	601a      	str	r2, [r3, #0]
 8037af6:	f3bf 8f4f 	dsb	sy
 8037afa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8037afe:	f001 fb89 	bl	8039214 <vPortExitCritical>

	return xAlreadyYielded;
 8037b02:	68bb      	ldr	r3, [r7, #8]
}
 8037b04:	4618      	mov	r0, r3
 8037b06:	3710      	adds	r7, #16
 8037b08:	46bd      	mov	sp, r7
 8037b0a:	bd80      	pop	{r7, pc}
 8037b0c:	24002d9c 	.word	0x24002d9c
 8037b10:	24002d74 	.word	0x24002d74
 8037b14:	24002d34 	.word	0x24002d34
 8037b18:	24002d7c 	.word	0x24002d7c
 8037b1c:	24002c78 	.word	0x24002c78
 8037b20:	24002c74 	.word	0x24002c74
 8037b24:	24002d88 	.word	0x24002d88
 8037b28:	24002d84 	.word	0x24002d84
 8037b2c:	e000ed04 	.word	0xe000ed04

08037b30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8037b30:	b480      	push	{r7}
 8037b32:	b083      	sub	sp, #12
 8037b34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8037b36:	4b05      	ldr	r3, [pc, #20]	; (8037b4c <xTaskGetTickCount+0x1c>)
 8037b38:	681b      	ldr	r3, [r3, #0]
 8037b3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8037b3c:	687b      	ldr	r3, [r7, #4]
}
 8037b3e:	4618      	mov	r0, r3
 8037b40:	370c      	adds	r7, #12
 8037b42:	46bd      	mov	sp, r7
 8037b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037b48:	4770      	bx	lr
 8037b4a:	bf00      	nop
 8037b4c:	24002d78 	.word	0x24002d78

08037b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8037b50:	b580      	push	{r7, lr}
 8037b52:	b086      	sub	sp, #24
 8037b54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8037b56:	2300      	movs	r3, #0
 8037b58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8037b5a:	4b4e      	ldr	r3, [pc, #312]	; (8037c94 <xTaskIncrementTick+0x144>)
 8037b5c:	681b      	ldr	r3, [r3, #0]
 8037b5e:	2b00      	cmp	r3, #0
 8037b60:	f040 808e 	bne.w	8037c80 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8037b64:	4b4c      	ldr	r3, [pc, #304]	; (8037c98 <xTaskIncrementTick+0x148>)
 8037b66:	681b      	ldr	r3, [r3, #0]
 8037b68:	3301      	adds	r3, #1
 8037b6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8037b6c:	4a4a      	ldr	r2, [pc, #296]	; (8037c98 <xTaskIncrementTick+0x148>)
 8037b6e:	693b      	ldr	r3, [r7, #16]
 8037b70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8037b72:	693b      	ldr	r3, [r7, #16]
 8037b74:	2b00      	cmp	r3, #0
 8037b76:	d120      	bne.n	8037bba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8037b78:	4b48      	ldr	r3, [pc, #288]	; (8037c9c <xTaskIncrementTick+0x14c>)
 8037b7a:	681b      	ldr	r3, [r3, #0]
 8037b7c:	681b      	ldr	r3, [r3, #0]
 8037b7e:	2b00      	cmp	r3, #0
 8037b80:	d00a      	beq.n	8037b98 <xTaskIncrementTick+0x48>
	__asm volatile
 8037b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037b86:	f383 8811 	msr	BASEPRI, r3
 8037b8a:	f3bf 8f6f 	isb	sy
 8037b8e:	f3bf 8f4f 	dsb	sy
 8037b92:	603b      	str	r3, [r7, #0]
}
 8037b94:	bf00      	nop
 8037b96:	e7fe      	b.n	8037b96 <xTaskIncrementTick+0x46>
 8037b98:	4b40      	ldr	r3, [pc, #256]	; (8037c9c <xTaskIncrementTick+0x14c>)
 8037b9a:	681b      	ldr	r3, [r3, #0]
 8037b9c:	60fb      	str	r3, [r7, #12]
 8037b9e:	4b40      	ldr	r3, [pc, #256]	; (8037ca0 <xTaskIncrementTick+0x150>)
 8037ba0:	681b      	ldr	r3, [r3, #0]
 8037ba2:	4a3e      	ldr	r2, [pc, #248]	; (8037c9c <xTaskIncrementTick+0x14c>)
 8037ba4:	6013      	str	r3, [r2, #0]
 8037ba6:	4a3e      	ldr	r2, [pc, #248]	; (8037ca0 <xTaskIncrementTick+0x150>)
 8037ba8:	68fb      	ldr	r3, [r7, #12]
 8037baa:	6013      	str	r3, [r2, #0]
 8037bac:	4b3d      	ldr	r3, [pc, #244]	; (8037ca4 <xTaskIncrementTick+0x154>)
 8037bae:	681b      	ldr	r3, [r3, #0]
 8037bb0:	3301      	adds	r3, #1
 8037bb2:	4a3c      	ldr	r2, [pc, #240]	; (8037ca4 <xTaskIncrementTick+0x154>)
 8037bb4:	6013      	str	r3, [r2, #0]
 8037bb6:	f000 facb 	bl	8038150 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8037bba:	4b3b      	ldr	r3, [pc, #236]	; (8037ca8 <xTaskIncrementTick+0x158>)
 8037bbc:	681b      	ldr	r3, [r3, #0]
 8037bbe:	693a      	ldr	r2, [r7, #16]
 8037bc0:	429a      	cmp	r2, r3
 8037bc2:	d348      	bcc.n	8037c56 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8037bc4:	4b35      	ldr	r3, [pc, #212]	; (8037c9c <xTaskIncrementTick+0x14c>)
 8037bc6:	681b      	ldr	r3, [r3, #0]
 8037bc8:	681b      	ldr	r3, [r3, #0]
 8037bca:	2b00      	cmp	r3, #0
 8037bcc:	d104      	bne.n	8037bd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8037bce:	4b36      	ldr	r3, [pc, #216]	; (8037ca8 <xTaskIncrementTick+0x158>)
 8037bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8037bd4:	601a      	str	r2, [r3, #0]
					break;
 8037bd6:	e03e      	b.n	8037c56 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8037bd8:	4b30      	ldr	r3, [pc, #192]	; (8037c9c <xTaskIncrementTick+0x14c>)
 8037bda:	681b      	ldr	r3, [r3, #0]
 8037bdc:	68db      	ldr	r3, [r3, #12]
 8037bde:	68db      	ldr	r3, [r3, #12]
 8037be0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8037be2:	68bb      	ldr	r3, [r7, #8]
 8037be4:	685b      	ldr	r3, [r3, #4]
 8037be6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8037be8:	693a      	ldr	r2, [r7, #16]
 8037bea:	687b      	ldr	r3, [r7, #4]
 8037bec:	429a      	cmp	r2, r3
 8037bee:	d203      	bcs.n	8037bf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8037bf0:	4a2d      	ldr	r2, [pc, #180]	; (8037ca8 <xTaskIncrementTick+0x158>)
 8037bf2:	687b      	ldr	r3, [r7, #4]
 8037bf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8037bf6:	e02e      	b.n	8037c56 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8037bf8:	68bb      	ldr	r3, [r7, #8]
 8037bfa:	3304      	adds	r3, #4
 8037bfc:	4618      	mov	r0, r3
 8037bfe:	f7fe fca9 	bl	8036554 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8037c02:	68bb      	ldr	r3, [r7, #8]
 8037c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037c06:	2b00      	cmp	r3, #0
 8037c08:	d004      	beq.n	8037c14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8037c0a:	68bb      	ldr	r3, [r7, #8]
 8037c0c:	3318      	adds	r3, #24
 8037c0e:	4618      	mov	r0, r3
 8037c10:	f7fe fca0 	bl	8036554 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8037c14:	68bb      	ldr	r3, [r7, #8]
 8037c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037c18:	2201      	movs	r2, #1
 8037c1a:	409a      	lsls	r2, r3
 8037c1c:	4b23      	ldr	r3, [pc, #140]	; (8037cac <xTaskIncrementTick+0x15c>)
 8037c1e:	681b      	ldr	r3, [r3, #0]
 8037c20:	4313      	orrs	r3, r2
 8037c22:	4a22      	ldr	r2, [pc, #136]	; (8037cac <xTaskIncrementTick+0x15c>)
 8037c24:	6013      	str	r3, [r2, #0]
 8037c26:	68bb      	ldr	r3, [r7, #8]
 8037c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037c2a:	4613      	mov	r3, r2
 8037c2c:	009b      	lsls	r3, r3, #2
 8037c2e:	4413      	add	r3, r2
 8037c30:	009b      	lsls	r3, r3, #2
 8037c32:	4a1f      	ldr	r2, [pc, #124]	; (8037cb0 <xTaskIncrementTick+0x160>)
 8037c34:	441a      	add	r2, r3
 8037c36:	68bb      	ldr	r3, [r7, #8]
 8037c38:	3304      	adds	r3, #4
 8037c3a:	4619      	mov	r1, r3
 8037c3c:	4610      	mov	r0, r2
 8037c3e:	f7fe fc2c 	bl	803649a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8037c42:	68bb      	ldr	r3, [r7, #8]
 8037c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037c46:	4b1b      	ldr	r3, [pc, #108]	; (8037cb4 <xTaskIncrementTick+0x164>)
 8037c48:	681b      	ldr	r3, [r3, #0]
 8037c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037c4c:	429a      	cmp	r2, r3
 8037c4e:	d3b9      	bcc.n	8037bc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8037c50:	2301      	movs	r3, #1
 8037c52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8037c54:	e7b6      	b.n	8037bc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8037c56:	4b17      	ldr	r3, [pc, #92]	; (8037cb4 <xTaskIncrementTick+0x164>)
 8037c58:	681b      	ldr	r3, [r3, #0]
 8037c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037c5c:	4914      	ldr	r1, [pc, #80]	; (8037cb0 <xTaskIncrementTick+0x160>)
 8037c5e:	4613      	mov	r3, r2
 8037c60:	009b      	lsls	r3, r3, #2
 8037c62:	4413      	add	r3, r2
 8037c64:	009b      	lsls	r3, r3, #2
 8037c66:	440b      	add	r3, r1
 8037c68:	681b      	ldr	r3, [r3, #0]
 8037c6a:	2b01      	cmp	r3, #1
 8037c6c:	d901      	bls.n	8037c72 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8037c6e:	2301      	movs	r3, #1
 8037c70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8037c72:	4b11      	ldr	r3, [pc, #68]	; (8037cb8 <xTaskIncrementTick+0x168>)
 8037c74:	681b      	ldr	r3, [r3, #0]
 8037c76:	2b00      	cmp	r3, #0
 8037c78:	d007      	beq.n	8037c8a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8037c7a:	2301      	movs	r3, #1
 8037c7c:	617b      	str	r3, [r7, #20]
 8037c7e:	e004      	b.n	8037c8a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8037c80:	4b0e      	ldr	r3, [pc, #56]	; (8037cbc <xTaskIncrementTick+0x16c>)
 8037c82:	681b      	ldr	r3, [r3, #0]
 8037c84:	3301      	adds	r3, #1
 8037c86:	4a0d      	ldr	r2, [pc, #52]	; (8037cbc <xTaskIncrementTick+0x16c>)
 8037c88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8037c8a:	697b      	ldr	r3, [r7, #20]
}
 8037c8c:	4618      	mov	r0, r3
 8037c8e:	3718      	adds	r7, #24
 8037c90:	46bd      	mov	sp, r7
 8037c92:	bd80      	pop	{r7, pc}
 8037c94:	24002d9c 	.word	0x24002d9c
 8037c98:	24002d78 	.word	0x24002d78
 8037c9c:	24002d2c 	.word	0x24002d2c
 8037ca0:	24002d30 	.word	0x24002d30
 8037ca4:	24002d8c 	.word	0x24002d8c
 8037ca8:	24002d94 	.word	0x24002d94
 8037cac:	24002d7c 	.word	0x24002d7c
 8037cb0:	24002c78 	.word	0x24002c78
 8037cb4:	24002c74 	.word	0x24002c74
 8037cb8:	24002d88 	.word	0x24002d88
 8037cbc:	24002d84 	.word	0x24002d84

08037cc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8037cc0:	b480      	push	{r7}
 8037cc2:	b087      	sub	sp, #28
 8037cc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8037cc6:	4b27      	ldr	r3, [pc, #156]	; (8037d64 <vTaskSwitchContext+0xa4>)
 8037cc8:	681b      	ldr	r3, [r3, #0]
 8037cca:	2b00      	cmp	r3, #0
 8037ccc:	d003      	beq.n	8037cd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8037cce:	4b26      	ldr	r3, [pc, #152]	; (8037d68 <vTaskSwitchContext+0xa8>)
 8037cd0:	2201      	movs	r2, #1
 8037cd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8037cd4:	e03f      	b.n	8037d56 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8037cd6:	4b24      	ldr	r3, [pc, #144]	; (8037d68 <vTaskSwitchContext+0xa8>)
 8037cd8:	2200      	movs	r2, #0
 8037cda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8037cdc:	4b23      	ldr	r3, [pc, #140]	; (8037d6c <vTaskSwitchContext+0xac>)
 8037cde:	681b      	ldr	r3, [r3, #0]
 8037ce0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8037ce2:	68fb      	ldr	r3, [r7, #12]
 8037ce4:	fab3 f383 	clz	r3, r3
 8037ce8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8037cea:	7afb      	ldrb	r3, [r7, #11]
 8037cec:	f1c3 031f 	rsb	r3, r3, #31
 8037cf0:	617b      	str	r3, [r7, #20]
 8037cf2:	491f      	ldr	r1, [pc, #124]	; (8037d70 <vTaskSwitchContext+0xb0>)
 8037cf4:	697a      	ldr	r2, [r7, #20]
 8037cf6:	4613      	mov	r3, r2
 8037cf8:	009b      	lsls	r3, r3, #2
 8037cfa:	4413      	add	r3, r2
 8037cfc:	009b      	lsls	r3, r3, #2
 8037cfe:	440b      	add	r3, r1
 8037d00:	681b      	ldr	r3, [r3, #0]
 8037d02:	2b00      	cmp	r3, #0
 8037d04:	d10a      	bne.n	8037d1c <vTaskSwitchContext+0x5c>
	__asm volatile
 8037d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037d0a:	f383 8811 	msr	BASEPRI, r3
 8037d0e:	f3bf 8f6f 	isb	sy
 8037d12:	f3bf 8f4f 	dsb	sy
 8037d16:	607b      	str	r3, [r7, #4]
}
 8037d18:	bf00      	nop
 8037d1a:	e7fe      	b.n	8037d1a <vTaskSwitchContext+0x5a>
 8037d1c:	697a      	ldr	r2, [r7, #20]
 8037d1e:	4613      	mov	r3, r2
 8037d20:	009b      	lsls	r3, r3, #2
 8037d22:	4413      	add	r3, r2
 8037d24:	009b      	lsls	r3, r3, #2
 8037d26:	4a12      	ldr	r2, [pc, #72]	; (8037d70 <vTaskSwitchContext+0xb0>)
 8037d28:	4413      	add	r3, r2
 8037d2a:	613b      	str	r3, [r7, #16]
 8037d2c:	693b      	ldr	r3, [r7, #16]
 8037d2e:	685b      	ldr	r3, [r3, #4]
 8037d30:	685a      	ldr	r2, [r3, #4]
 8037d32:	693b      	ldr	r3, [r7, #16]
 8037d34:	605a      	str	r2, [r3, #4]
 8037d36:	693b      	ldr	r3, [r7, #16]
 8037d38:	685a      	ldr	r2, [r3, #4]
 8037d3a:	693b      	ldr	r3, [r7, #16]
 8037d3c:	3308      	adds	r3, #8
 8037d3e:	429a      	cmp	r2, r3
 8037d40:	d104      	bne.n	8037d4c <vTaskSwitchContext+0x8c>
 8037d42:	693b      	ldr	r3, [r7, #16]
 8037d44:	685b      	ldr	r3, [r3, #4]
 8037d46:	685a      	ldr	r2, [r3, #4]
 8037d48:	693b      	ldr	r3, [r7, #16]
 8037d4a:	605a      	str	r2, [r3, #4]
 8037d4c:	693b      	ldr	r3, [r7, #16]
 8037d4e:	685b      	ldr	r3, [r3, #4]
 8037d50:	68db      	ldr	r3, [r3, #12]
 8037d52:	4a08      	ldr	r2, [pc, #32]	; (8037d74 <vTaskSwitchContext+0xb4>)
 8037d54:	6013      	str	r3, [r2, #0]
}
 8037d56:	bf00      	nop
 8037d58:	371c      	adds	r7, #28
 8037d5a:	46bd      	mov	sp, r7
 8037d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037d60:	4770      	bx	lr
 8037d62:	bf00      	nop
 8037d64:	24002d9c 	.word	0x24002d9c
 8037d68:	24002d88 	.word	0x24002d88
 8037d6c:	24002d7c 	.word	0x24002d7c
 8037d70:	24002c78 	.word	0x24002c78
 8037d74:	24002c74 	.word	0x24002c74

08037d78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8037d78:	b580      	push	{r7, lr}
 8037d7a:	b084      	sub	sp, #16
 8037d7c:	af00      	add	r7, sp, #0
 8037d7e:	6078      	str	r0, [r7, #4]
 8037d80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8037d82:	687b      	ldr	r3, [r7, #4]
 8037d84:	2b00      	cmp	r3, #0
 8037d86:	d10a      	bne.n	8037d9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8037d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037d8c:	f383 8811 	msr	BASEPRI, r3
 8037d90:	f3bf 8f6f 	isb	sy
 8037d94:	f3bf 8f4f 	dsb	sy
 8037d98:	60fb      	str	r3, [r7, #12]
}
 8037d9a:	bf00      	nop
 8037d9c:	e7fe      	b.n	8037d9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8037d9e:	4b07      	ldr	r3, [pc, #28]	; (8037dbc <vTaskPlaceOnEventList+0x44>)
 8037da0:	681b      	ldr	r3, [r3, #0]
 8037da2:	3318      	adds	r3, #24
 8037da4:	4619      	mov	r1, r3
 8037da6:	6878      	ldr	r0, [r7, #4]
 8037da8:	f7fe fb9b 	bl	80364e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8037dac:	2101      	movs	r1, #1
 8037dae:	6838      	ldr	r0, [r7, #0]
 8037db0:	f000 fc84 	bl	80386bc <prvAddCurrentTaskToDelayedList>
}
 8037db4:	bf00      	nop
 8037db6:	3710      	adds	r7, #16
 8037db8:	46bd      	mov	sp, r7
 8037dba:	bd80      	pop	{r7, pc}
 8037dbc:	24002c74 	.word	0x24002c74

08037dc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8037dc0:	b580      	push	{r7, lr}
 8037dc2:	b086      	sub	sp, #24
 8037dc4:	af00      	add	r7, sp, #0
 8037dc6:	60f8      	str	r0, [r7, #12]
 8037dc8:	60b9      	str	r1, [r7, #8]
 8037dca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8037dcc:	68fb      	ldr	r3, [r7, #12]
 8037dce:	2b00      	cmp	r3, #0
 8037dd0:	d10a      	bne.n	8037de8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8037dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037dd6:	f383 8811 	msr	BASEPRI, r3
 8037dda:	f3bf 8f6f 	isb	sy
 8037dde:	f3bf 8f4f 	dsb	sy
 8037de2:	617b      	str	r3, [r7, #20]
}
 8037de4:	bf00      	nop
 8037de6:	e7fe      	b.n	8037de6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8037de8:	4b0a      	ldr	r3, [pc, #40]	; (8037e14 <vTaskPlaceOnEventListRestricted+0x54>)
 8037dea:	681b      	ldr	r3, [r3, #0]
 8037dec:	3318      	adds	r3, #24
 8037dee:	4619      	mov	r1, r3
 8037df0:	68f8      	ldr	r0, [r7, #12]
 8037df2:	f7fe fb52 	bl	803649a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8037df6:	687b      	ldr	r3, [r7, #4]
 8037df8:	2b00      	cmp	r3, #0
 8037dfa:	d002      	beq.n	8037e02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8037dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8037e00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8037e02:	6879      	ldr	r1, [r7, #4]
 8037e04:	68b8      	ldr	r0, [r7, #8]
 8037e06:	f000 fc59 	bl	80386bc <prvAddCurrentTaskToDelayedList>
	}
 8037e0a:	bf00      	nop
 8037e0c:	3718      	adds	r7, #24
 8037e0e:	46bd      	mov	sp, r7
 8037e10:	bd80      	pop	{r7, pc}
 8037e12:	bf00      	nop
 8037e14:	24002c74 	.word	0x24002c74

08037e18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8037e18:	b580      	push	{r7, lr}
 8037e1a:	b086      	sub	sp, #24
 8037e1c:	af00      	add	r7, sp, #0
 8037e1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8037e20:	687b      	ldr	r3, [r7, #4]
 8037e22:	68db      	ldr	r3, [r3, #12]
 8037e24:	68db      	ldr	r3, [r3, #12]
 8037e26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8037e28:	693b      	ldr	r3, [r7, #16]
 8037e2a:	2b00      	cmp	r3, #0
 8037e2c:	d10a      	bne.n	8037e44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8037e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037e32:	f383 8811 	msr	BASEPRI, r3
 8037e36:	f3bf 8f6f 	isb	sy
 8037e3a:	f3bf 8f4f 	dsb	sy
 8037e3e:	60fb      	str	r3, [r7, #12]
}
 8037e40:	bf00      	nop
 8037e42:	e7fe      	b.n	8037e42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8037e44:	693b      	ldr	r3, [r7, #16]
 8037e46:	3318      	adds	r3, #24
 8037e48:	4618      	mov	r0, r3
 8037e4a:	f7fe fb83 	bl	8036554 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8037e4e:	4b1d      	ldr	r3, [pc, #116]	; (8037ec4 <xTaskRemoveFromEventList+0xac>)
 8037e50:	681b      	ldr	r3, [r3, #0]
 8037e52:	2b00      	cmp	r3, #0
 8037e54:	d11c      	bne.n	8037e90 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8037e56:	693b      	ldr	r3, [r7, #16]
 8037e58:	3304      	adds	r3, #4
 8037e5a:	4618      	mov	r0, r3
 8037e5c:	f7fe fb7a 	bl	8036554 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8037e60:	693b      	ldr	r3, [r7, #16]
 8037e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037e64:	2201      	movs	r2, #1
 8037e66:	409a      	lsls	r2, r3
 8037e68:	4b17      	ldr	r3, [pc, #92]	; (8037ec8 <xTaskRemoveFromEventList+0xb0>)
 8037e6a:	681b      	ldr	r3, [r3, #0]
 8037e6c:	4313      	orrs	r3, r2
 8037e6e:	4a16      	ldr	r2, [pc, #88]	; (8037ec8 <xTaskRemoveFromEventList+0xb0>)
 8037e70:	6013      	str	r3, [r2, #0]
 8037e72:	693b      	ldr	r3, [r7, #16]
 8037e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037e76:	4613      	mov	r3, r2
 8037e78:	009b      	lsls	r3, r3, #2
 8037e7a:	4413      	add	r3, r2
 8037e7c:	009b      	lsls	r3, r3, #2
 8037e7e:	4a13      	ldr	r2, [pc, #76]	; (8037ecc <xTaskRemoveFromEventList+0xb4>)
 8037e80:	441a      	add	r2, r3
 8037e82:	693b      	ldr	r3, [r7, #16]
 8037e84:	3304      	adds	r3, #4
 8037e86:	4619      	mov	r1, r3
 8037e88:	4610      	mov	r0, r2
 8037e8a:	f7fe fb06 	bl	803649a <vListInsertEnd>
 8037e8e:	e005      	b.n	8037e9c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8037e90:	693b      	ldr	r3, [r7, #16]
 8037e92:	3318      	adds	r3, #24
 8037e94:	4619      	mov	r1, r3
 8037e96:	480e      	ldr	r0, [pc, #56]	; (8037ed0 <xTaskRemoveFromEventList+0xb8>)
 8037e98:	f7fe faff 	bl	803649a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8037e9c:	693b      	ldr	r3, [r7, #16]
 8037e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037ea0:	4b0c      	ldr	r3, [pc, #48]	; (8037ed4 <xTaskRemoveFromEventList+0xbc>)
 8037ea2:	681b      	ldr	r3, [r3, #0]
 8037ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037ea6:	429a      	cmp	r2, r3
 8037ea8:	d905      	bls.n	8037eb6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8037eaa:	2301      	movs	r3, #1
 8037eac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8037eae:	4b0a      	ldr	r3, [pc, #40]	; (8037ed8 <xTaskRemoveFromEventList+0xc0>)
 8037eb0:	2201      	movs	r2, #1
 8037eb2:	601a      	str	r2, [r3, #0]
 8037eb4:	e001      	b.n	8037eba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8037eb6:	2300      	movs	r3, #0
 8037eb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8037eba:	697b      	ldr	r3, [r7, #20]
}
 8037ebc:	4618      	mov	r0, r3
 8037ebe:	3718      	adds	r7, #24
 8037ec0:	46bd      	mov	sp, r7
 8037ec2:	bd80      	pop	{r7, pc}
 8037ec4:	24002d9c 	.word	0x24002d9c
 8037ec8:	24002d7c 	.word	0x24002d7c
 8037ecc:	24002c78 	.word	0x24002c78
 8037ed0:	24002d34 	.word	0x24002d34
 8037ed4:	24002c74 	.word	0x24002c74
 8037ed8:	24002d88 	.word	0x24002d88

08037edc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8037edc:	b480      	push	{r7}
 8037ede:	b083      	sub	sp, #12
 8037ee0:	af00      	add	r7, sp, #0
 8037ee2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8037ee4:	4b06      	ldr	r3, [pc, #24]	; (8037f00 <vTaskInternalSetTimeOutState+0x24>)
 8037ee6:	681a      	ldr	r2, [r3, #0]
 8037ee8:	687b      	ldr	r3, [r7, #4]
 8037eea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8037eec:	4b05      	ldr	r3, [pc, #20]	; (8037f04 <vTaskInternalSetTimeOutState+0x28>)
 8037eee:	681a      	ldr	r2, [r3, #0]
 8037ef0:	687b      	ldr	r3, [r7, #4]
 8037ef2:	605a      	str	r2, [r3, #4]
}
 8037ef4:	bf00      	nop
 8037ef6:	370c      	adds	r7, #12
 8037ef8:	46bd      	mov	sp, r7
 8037efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037efe:	4770      	bx	lr
 8037f00:	24002d8c 	.word	0x24002d8c
 8037f04:	24002d78 	.word	0x24002d78

08037f08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8037f08:	b580      	push	{r7, lr}
 8037f0a:	b088      	sub	sp, #32
 8037f0c:	af00      	add	r7, sp, #0
 8037f0e:	6078      	str	r0, [r7, #4]
 8037f10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8037f12:	687b      	ldr	r3, [r7, #4]
 8037f14:	2b00      	cmp	r3, #0
 8037f16:	d10a      	bne.n	8037f2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8037f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037f1c:	f383 8811 	msr	BASEPRI, r3
 8037f20:	f3bf 8f6f 	isb	sy
 8037f24:	f3bf 8f4f 	dsb	sy
 8037f28:	613b      	str	r3, [r7, #16]
}
 8037f2a:	bf00      	nop
 8037f2c:	e7fe      	b.n	8037f2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8037f2e:	683b      	ldr	r3, [r7, #0]
 8037f30:	2b00      	cmp	r3, #0
 8037f32:	d10a      	bne.n	8037f4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8037f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037f38:	f383 8811 	msr	BASEPRI, r3
 8037f3c:	f3bf 8f6f 	isb	sy
 8037f40:	f3bf 8f4f 	dsb	sy
 8037f44:	60fb      	str	r3, [r7, #12]
}
 8037f46:	bf00      	nop
 8037f48:	e7fe      	b.n	8037f48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8037f4a:	f001 f933 	bl	80391b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8037f4e:	4b1d      	ldr	r3, [pc, #116]	; (8037fc4 <xTaskCheckForTimeOut+0xbc>)
 8037f50:	681b      	ldr	r3, [r3, #0]
 8037f52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8037f54:	687b      	ldr	r3, [r7, #4]
 8037f56:	685b      	ldr	r3, [r3, #4]
 8037f58:	69ba      	ldr	r2, [r7, #24]
 8037f5a:	1ad3      	subs	r3, r2, r3
 8037f5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8037f5e:	683b      	ldr	r3, [r7, #0]
 8037f60:	681b      	ldr	r3, [r3, #0]
 8037f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8037f66:	d102      	bne.n	8037f6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8037f68:	2300      	movs	r3, #0
 8037f6a:	61fb      	str	r3, [r7, #28]
 8037f6c:	e023      	b.n	8037fb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8037f6e:	687b      	ldr	r3, [r7, #4]
 8037f70:	681a      	ldr	r2, [r3, #0]
 8037f72:	4b15      	ldr	r3, [pc, #84]	; (8037fc8 <xTaskCheckForTimeOut+0xc0>)
 8037f74:	681b      	ldr	r3, [r3, #0]
 8037f76:	429a      	cmp	r2, r3
 8037f78:	d007      	beq.n	8037f8a <xTaskCheckForTimeOut+0x82>
 8037f7a:	687b      	ldr	r3, [r7, #4]
 8037f7c:	685b      	ldr	r3, [r3, #4]
 8037f7e:	69ba      	ldr	r2, [r7, #24]
 8037f80:	429a      	cmp	r2, r3
 8037f82:	d302      	bcc.n	8037f8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8037f84:	2301      	movs	r3, #1
 8037f86:	61fb      	str	r3, [r7, #28]
 8037f88:	e015      	b.n	8037fb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8037f8a:	683b      	ldr	r3, [r7, #0]
 8037f8c:	681b      	ldr	r3, [r3, #0]
 8037f8e:	697a      	ldr	r2, [r7, #20]
 8037f90:	429a      	cmp	r2, r3
 8037f92:	d20b      	bcs.n	8037fac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8037f94:	683b      	ldr	r3, [r7, #0]
 8037f96:	681a      	ldr	r2, [r3, #0]
 8037f98:	697b      	ldr	r3, [r7, #20]
 8037f9a:	1ad2      	subs	r2, r2, r3
 8037f9c:	683b      	ldr	r3, [r7, #0]
 8037f9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8037fa0:	6878      	ldr	r0, [r7, #4]
 8037fa2:	f7ff ff9b 	bl	8037edc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8037fa6:	2300      	movs	r3, #0
 8037fa8:	61fb      	str	r3, [r7, #28]
 8037faa:	e004      	b.n	8037fb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8037fac:	683b      	ldr	r3, [r7, #0]
 8037fae:	2200      	movs	r2, #0
 8037fb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8037fb2:	2301      	movs	r3, #1
 8037fb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8037fb6:	f001 f92d 	bl	8039214 <vPortExitCritical>

	return xReturn;
 8037fba:	69fb      	ldr	r3, [r7, #28]
}
 8037fbc:	4618      	mov	r0, r3
 8037fbe:	3720      	adds	r7, #32
 8037fc0:	46bd      	mov	sp, r7
 8037fc2:	bd80      	pop	{r7, pc}
 8037fc4:	24002d78 	.word	0x24002d78
 8037fc8:	24002d8c 	.word	0x24002d8c

08037fcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8037fcc:	b480      	push	{r7}
 8037fce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8037fd0:	4b03      	ldr	r3, [pc, #12]	; (8037fe0 <vTaskMissedYield+0x14>)
 8037fd2:	2201      	movs	r2, #1
 8037fd4:	601a      	str	r2, [r3, #0]
}
 8037fd6:	bf00      	nop
 8037fd8:	46bd      	mov	sp, r7
 8037fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037fde:	4770      	bx	lr
 8037fe0:	24002d88 	.word	0x24002d88

08037fe4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8037fe4:	b580      	push	{r7, lr}
 8037fe6:	b082      	sub	sp, #8
 8037fe8:	af00      	add	r7, sp, #0
 8037fea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8037fec:	f000 f852 	bl	8038094 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8037ff0:	4b06      	ldr	r3, [pc, #24]	; (803800c <prvIdleTask+0x28>)
 8037ff2:	681b      	ldr	r3, [r3, #0]
 8037ff4:	2b01      	cmp	r3, #1
 8037ff6:	d9f9      	bls.n	8037fec <prvIdleTask+0x8>
			{
				taskYIELD();
 8037ff8:	4b05      	ldr	r3, [pc, #20]	; (8038010 <prvIdleTask+0x2c>)
 8037ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8037ffe:	601a      	str	r2, [r3, #0]
 8038000:	f3bf 8f4f 	dsb	sy
 8038004:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8038008:	e7f0      	b.n	8037fec <prvIdleTask+0x8>
 803800a:	bf00      	nop
 803800c:	24002c78 	.word	0x24002c78
 8038010:	e000ed04 	.word	0xe000ed04

08038014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8038014:	b580      	push	{r7, lr}
 8038016:	b082      	sub	sp, #8
 8038018:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 803801a:	2300      	movs	r3, #0
 803801c:	607b      	str	r3, [r7, #4]
 803801e:	e00c      	b.n	803803a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8038020:	687a      	ldr	r2, [r7, #4]
 8038022:	4613      	mov	r3, r2
 8038024:	009b      	lsls	r3, r3, #2
 8038026:	4413      	add	r3, r2
 8038028:	009b      	lsls	r3, r3, #2
 803802a:	4a12      	ldr	r2, [pc, #72]	; (8038074 <prvInitialiseTaskLists+0x60>)
 803802c:	4413      	add	r3, r2
 803802e:	4618      	mov	r0, r3
 8038030:	f7fe fa06 	bl	8036440 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8038034:	687b      	ldr	r3, [r7, #4]
 8038036:	3301      	adds	r3, #1
 8038038:	607b      	str	r3, [r7, #4]
 803803a:	687b      	ldr	r3, [r7, #4]
 803803c:	2b06      	cmp	r3, #6
 803803e:	d9ef      	bls.n	8038020 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8038040:	480d      	ldr	r0, [pc, #52]	; (8038078 <prvInitialiseTaskLists+0x64>)
 8038042:	f7fe f9fd 	bl	8036440 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8038046:	480d      	ldr	r0, [pc, #52]	; (803807c <prvInitialiseTaskLists+0x68>)
 8038048:	f7fe f9fa 	bl	8036440 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 803804c:	480c      	ldr	r0, [pc, #48]	; (8038080 <prvInitialiseTaskLists+0x6c>)
 803804e:	f7fe f9f7 	bl	8036440 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8038052:	480c      	ldr	r0, [pc, #48]	; (8038084 <prvInitialiseTaskLists+0x70>)
 8038054:	f7fe f9f4 	bl	8036440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8038058:	480b      	ldr	r0, [pc, #44]	; (8038088 <prvInitialiseTaskLists+0x74>)
 803805a:	f7fe f9f1 	bl	8036440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 803805e:	4b0b      	ldr	r3, [pc, #44]	; (803808c <prvInitialiseTaskLists+0x78>)
 8038060:	4a05      	ldr	r2, [pc, #20]	; (8038078 <prvInitialiseTaskLists+0x64>)
 8038062:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8038064:	4b0a      	ldr	r3, [pc, #40]	; (8038090 <prvInitialiseTaskLists+0x7c>)
 8038066:	4a05      	ldr	r2, [pc, #20]	; (803807c <prvInitialiseTaskLists+0x68>)
 8038068:	601a      	str	r2, [r3, #0]
}
 803806a:	bf00      	nop
 803806c:	3708      	adds	r7, #8
 803806e:	46bd      	mov	sp, r7
 8038070:	bd80      	pop	{r7, pc}
 8038072:	bf00      	nop
 8038074:	24002c78 	.word	0x24002c78
 8038078:	24002d04 	.word	0x24002d04
 803807c:	24002d18 	.word	0x24002d18
 8038080:	24002d34 	.word	0x24002d34
 8038084:	24002d48 	.word	0x24002d48
 8038088:	24002d60 	.word	0x24002d60
 803808c:	24002d2c 	.word	0x24002d2c
 8038090:	24002d30 	.word	0x24002d30

08038094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8038094:	b580      	push	{r7, lr}
 8038096:	b082      	sub	sp, #8
 8038098:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 803809a:	e019      	b.n	80380d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 803809c:	f001 f88a 	bl	80391b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80380a0:	4b10      	ldr	r3, [pc, #64]	; (80380e4 <prvCheckTasksWaitingTermination+0x50>)
 80380a2:	68db      	ldr	r3, [r3, #12]
 80380a4:	68db      	ldr	r3, [r3, #12]
 80380a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80380a8:	687b      	ldr	r3, [r7, #4]
 80380aa:	3304      	adds	r3, #4
 80380ac:	4618      	mov	r0, r3
 80380ae:	f7fe fa51 	bl	8036554 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80380b2:	4b0d      	ldr	r3, [pc, #52]	; (80380e8 <prvCheckTasksWaitingTermination+0x54>)
 80380b4:	681b      	ldr	r3, [r3, #0]
 80380b6:	3b01      	subs	r3, #1
 80380b8:	4a0b      	ldr	r2, [pc, #44]	; (80380e8 <prvCheckTasksWaitingTermination+0x54>)
 80380ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80380bc:	4b0b      	ldr	r3, [pc, #44]	; (80380ec <prvCheckTasksWaitingTermination+0x58>)
 80380be:	681b      	ldr	r3, [r3, #0]
 80380c0:	3b01      	subs	r3, #1
 80380c2:	4a0a      	ldr	r2, [pc, #40]	; (80380ec <prvCheckTasksWaitingTermination+0x58>)
 80380c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80380c6:	f001 f8a5 	bl	8039214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80380ca:	6878      	ldr	r0, [r7, #4]
 80380cc:	f000 f810 	bl	80380f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80380d0:	4b06      	ldr	r3, [pc, #24]	; (80380ec <prvCheckTasksWaitingTermination+0x58>)
 80380d2:	681b      	ldr	r3, [r3, #0]
 80380d4:	2b00      	cmp	r3, #0
 80380d6:	d1e1      	bne.n	803809c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80380d8:	bf00      	nop
 80380da:	bf00      	nop
 80380dc:	3708      	adds	r7, #8
 80380de:	46bd      	mov	sp, r7
 80380e0:	bd80      	pop	{r7, pc}
 80380e2:	bf00      	nop
 80380e4:	24002d48 	.word	0x24002d48
 80380e8:	24002d74 	.word	0x24002d74
 80380ec:	24002d5c 	.word	0x24002d5c

080380f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80380f0:	b580      	push	{r7, lr}
 80380f2:	b084      	sub	sp, #16
 80380f4:	af00      	add	r7, sp, #0
 80380f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80380f8:	687b      	ldr	r3, [r7, #4]
 80380fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80380fe:	2b00      	cmp	r3, #0
 8038100:	d108      	bne.n	8038114 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8038102:	687b      	ldr	r3, [r7, #4]
 8038104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8038106:	4618      	mov	r0, r3
 8038108:	f001 fa42 	bl	8039590 <vPortFree>
				vPortFree( pxTCB );
 803810c:	6878      	ldr	r0, [r7, #4]
 803810e:	f001 fa3f 	bl	8039590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8038112:	e018      	b.n	8038146 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8038114:	687b      	ldr	r3, [r7, #4]
 8038116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 803811a:	2b01      	cmp	r3, #1
 803811c:	d103      	bne.n	8038126 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 803811e:	6878      	ldr	r0, [r7, #4]
 8038120:	f001 fa36 	bl	8039590 <vPortFree>
	}
 8038124:	e00f      	b.n	8038146 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8038126:	687b      	ldr	r3, [r7, #4]
 8038128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 803812c:	2b02      	cmp	r3, #2
 803812e:	d00a      	beq.n	8038146 <prvDeleteTCB+0x56>
	__asm volatile
 8038130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038134:	f383 8811 	msr	BASEPRI, r3
 8038138:	f3bf 8f6f 	isb	sy
 803813c:	f3bf 8f4f 	dsb	sy
 8038140:	60fb      	str	r3, [r7, #12]
}
 8038142:	bf00      	nop
 8038144:	e7fe      	b.n	8038144 <prvDeleteTCB+0x54>
	}
 8038146:	bf00      	nop
 8038148:	3710      	adds	r7, #16
 803814a:	46bd      	mov	sp, r7
 803814c:	bd80      	pop	{r7, pc}
	...

08038150 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8038150:	b480      	push	{r7}
 8038152:	b083      	sub	sp, #12
 8038154:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8038156:	4b0c      	ldr	r3, [pc, #48]	; (8038188 <prvResetNextTaskUnblockTime+0x38>)
 8038158:	681b      	ldr	r3, [r3, #0]
 803815a:	681b      	ldr	r3, [r3, #0]
 803815c:	2b00      	cmp	r3, #0
 803815e:	d104      	bne.n	803816a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8038160:	4b0a      	ldr	r3, [pc, #40]	; (803818c <prvResetNextTaskUnblockTime+0x3c>)
 8038162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8038166:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8038168:	e008      	b.n	803817c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803816a:	4b07      	ldr	r3, [pc, #28]	; (8038188 <prvResetNextTaskUnblockTime+0x38>)
 803816c:	681b      	ldr	r3, [r3, #0]
 803816e:	68db      	ldr	r3, [r3, #12]
 8038170:	68db      	ldr	r3, [r3, #12]
 8038172:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8038174:	687b      	ldr	r3, [r7, #4]
 8038176:	685b      	ldr	r3, [r3, #4]
 8038178:	4a04      	ldr	r2, [pc, #16]	; (803818c <prvResetNextTaskUnblockTime+0x3c>)
 803817a:	6013      	str	r3, [r2, #0]
}
 803817c:	bf00      	nop
 803817e:	370c      	adds	r7, #12
 8038180:	46bd      	mov	sp, r7
 8038182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038186:	4770      	bx	lr
 8038188:	24002d2c 	.word	0x24002d2c
 803818c:	24002d94 	.word	0x24002d94

08038190 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8038190:	b480      	push	{r7}
 8038192:	b083      	sub	sp, #12
 8038194:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8038196:	4b0b      	ldr	r3, [pc, #44]	; (80381c4 <xTaskGetSchedulerState+0x34>)
 8038198:	681b      	ldr	r3, [r3, #0]
 803819a:	2b00      	cmp	r3, #0
 803819c:	d102      	bne.n	80381a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 803819e:	2301      	movs	r3, #1
 80381a0:	607b      	str	r3, [r7, #4]
 80381a2:	e008      	b.n	80381b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80381a4:	4b08      	ldr	r3, [pc, #32]	; (80381c8 <xTaskGetSchedulerState+0x38>)
 80381a6:	681b      	ldr	r3, [r3, #0]
 80381a8:	2b00      	cmp	r3, #0
 80381aa:	d102      	bne.n	80381b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80381ac:	2302      	movs	r3, #2
 80381ae:	607b      	str	r3, [r7, #4]
 80381b0:	e001      	b.n	80381b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80381b2:	2300      	movs	r3, #0
 80381b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80381b6:	687b      	ldr	r3, [r7, #4]
	}
 80381b8:	4618      	mov	r0, r3
 80381ba:	370c      	adds	r7, #12
 80381bc:	46bd      	mov	sp, r7
 80381be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80381c2:	4770      	bx	lr
 80381c4:	24002d80 	.word	0x24002d80
 80381c8:	24002d9c 	.word	0x24002d9c

080381cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80381cc:	b580      	push	{r7, lr}
 80381ce:	b084      	sub	sp, #16
 80381d0:	af00      	add	r7, sp, #0
 80381d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80381d4:	687b      	ldr	r3, [r7, #4]
 80381d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80381d8:	2300      	movs	r3, #0
 80381da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80381dc:	687b      	ldr	r3, [r7, #4]
 80381de:	2b00      	cmp	r3, #0
 80381e0:	d05e      	beq.n	80382a0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80381e2:	68bb      	ldr	r3, [r7, #8]
 80381e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80381e6:	4b31      	ldr	r3, [pc, #196]	; (80382ac <xTaskPriorityInherit+0xe0>)
 80381e8:	681b      	ldr	r3, [r3, #0]
 80381ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80381ec:	429a      	cmp	r2, r3
 80381ee:	d24e      	bcs.n	803828e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80381f0:	68bb      	ldr	r3, [r7, #8]
 80381f2:	699b      	ldr	r3, [r3, #24]
 80381f4:	2b00      	cmp	r3, #0
 80381f6:	db06      	blt.n	8038206 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80381f8:	4b2c      	ldr	r3, [pc, #176]	; (80382ac <xTaskPriorityInherit+0xe0>)
 80381fa:	681b      	ldr	r3, [r3, #0]
 80381fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80381fe:	f1c3 0207 	rsb	r2, r3, #7
 8038202:	68bb      	ldr	r3, [r7, #8]
 8038204:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8038206:	68bb      	ldr	r3, [r7, #8]
 8038208:	6959      	ldr	r1, [r3, #20]
 803820a:	68bb      	ldr	r3, [r7, #8]
 803820c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803820e:	4613      	mov	r3, r2
 8038210:	009b      	lsls	r3, r3, #2
 8038212:	4413      	add	r3, r2
 8038214:	009b      	lsls	r3, r3, #2
 8038216:	4a26      	ldr	r2, [pc, #152]	; (80382b0 <xTaskPriorityInherit+0xe4>)
 8038218:	4413      	add	r3, r2
 803821a:	4299      	cmp	r1, r3
 803821c:	d12f      	bne.n	803827e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 803821e:	68bb      	ldr	r3, [r7, #8]
 8038220:	3304      	adds	r3, #4
 8038222:	4618      	mov	r0, r3
 8038224:	f7fe f996 	bl	8036554 <uxListRemove>
 8038228:	4603      	mov	r3, r0
 803822a:	2b00      	cmp	r3, #0
 803822c:	d10a      	bne.n	8038244 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 803822e:	68bb      	ldr	r3, [r7, #8]
 8038230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038232:	2201      	movs	r2, #1
 8038234:	fa02 f303 	lsl.w	r3, r2, r3
 8038238:	43da      	mvns	r2, r3
 803823a:	4b1e      	ldr	r3, [pc, #120]	; (80382b4 <xTaskPriorityInherit+0xe8>)
 803823c:	681b      	ldr	r3, [r3, #0]
 803823e:	4013      	ands	r3, r2
 8038240:	4a1c      	ldr	r2, [pc, #112]	; (80382b4 <xTaskPriorityInherit+0xe8>)
 8038242:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8038244:	4b19      	ldr	r3, [pc, #100]	; (80382ac <xTaskPriorityInherit+0xe0>)
 8038246:	681b      	ldr	r3, [r3, #0]
 8038248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803824a:	68bb      	ldr	r3, [r7, #8]
 803824c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 803824e:	68bb      	ldr	r3, [r7, #8]
 8038250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038252:	2201      	movs	r2, #1
 8038254:	409a      	lsls	r2, r3
 8038256:	4b17      	ldr	r3, [pc, #92]	; (80382b4 <xTaskPriorityInherit+0xe8>)
 8038258:	681b      	ldr	r3, [r3, #0]
 803825a:	4313      	orrs	r3, r2
 803825c:	4a15      	ldr	r2, [pc, #84]	; (80382b4 <xTaskPriorityInherit+0xe8>)
 803825e:	6013      	str	r3, [r2, #0]
 8038260:	68bb      	ldr	r3, [r7, #8]
 8038262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8038264:	4613      	mov	r3, r2
 8038266:	009b      	lsls	r3, r3, #2
 8038268:	4413      	add	r3, r2
 803826a:	009b      	lsls	r3, r3, #2
 803826c:	4a10      	ldr	r2, [pc, #64]	; (80382b0 <xTaskPriorityInherit+0xe4>)
 803826e:	441a      	add	r2, r3
 8038270:	68bb      	ldr	r3, [r7, #8]
 8038272:	3304      	adds	r3, #4
 8038274:	4619      	mov	r1, r3
 8038276:	4610      	mov	r0, r2
 8038278:	f7fe f90f 	bl	803649a <vListInsertEnd>
 803827c:	e004      	b.n	8038288 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 803827e:	4b0b      	ldr	r3, [pc, #44]	; (80382ac <xTaskPriorityInherit+0xe0>)
 8038280:	681b      	ldr	r3, [r3, #0]
 8038282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8038284:	68bb      	ldr	r3, [r7, #8]
 8038286:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8038288:	2301      	movs	r3, #1
 803828a:	60fb      	str	r3, [r7, #12]
 803828c:	e008      	b.n	80382a0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 803828e:	68bb      	ldr	r3, [r7, #8]
 8038290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8038292:	4b06      	ldr	r3, [pc, #24]	; (80382ac <xTaskPriorityInherit+0xe0>)
 8038294:	681b      	ldr	r3, [r3, #0]
 8038296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038298:	429a      	cmp	r2, r3
 803829a:	d201      	bcs.n	80382a0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 803829c:	2301      	movs	r3, #1
 803829e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80382a0:	68fb      	ldr	r3, [r7, #12]
	}
 80382a2:	4618      	mov	r0, r3
 80382a4:	3710      	adds	r7, #16
 80382a6:	46bd      	mov	sp, r7
 80382a8:	bd80      	pop	{r7, pc}
 80382aa:	bf00      	nop
 80382ac:	24002c74 	.word	0x24002c74
 80382b0:	24002c78 	.word	0x24002c78
 80382b4:	24002d7c 	.word	0x24002d7c

080382b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80382b8:	b580      	push	{r7, lr}
 80382ba:	b086      	sub	sp, #24
 80382bc:	af00      	add	r7, sp, #0
 80382be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80382c0:	687b      	ldr	r3, [r7, #4]
 80382c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80382c4:	2300      	movs	r3, #0
 80382c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80382c8:	687b      	ldr	r3, [r7, #4]
 80382ca:	2b00      	cmp	r3, #0
 80382cc:	d06e      	beq.n	80383ac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80382ce:	4b3a      	ldr	r3, [pc, #232]	; (80383b8 <xTaskPriorityDisinherit+0x100>)
 80382d0:	681b      	ldr	r3, [r3, #0]
 80382d2:	693a      	ldr	r2, [r7, #16]
 80382d4:	429a      	cmp	r2, r3
 80382d6:	d00a      	beq.n	80382ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80382d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80382dc:	f383 8811 	msr	BASEPRI, r3
 80382e0:	f3bf 8f6f 	isb	sy
 80382e4:	f3bf 8f4f 	dsb	sy
 80382e8:	60fb      	str	r3, [r7, #12]
}
 80382ea:	bf00      	nop
 80382ec:	e7fe      	b.n	80382ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80382ee:	693b      	ldr	r3, [r7, #16]
 80382f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80382f2:	2b00      	cmp	r3, #0
 80382f4:	d10a      	bne.n	803830c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80382f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80382fa:	f383 8811 	msr	BASEPRI, r3
 80382fe:	f3bf 8f6f 	isb	sy
 8038302:	f3bf 8f4f 	dsb	sy
 8038306:	60bb      	str	r3, [r7, #8]
}
 8038308:	bf00      	nop
 803830a:	e7fe      	b.n	803830a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 803830c:	693b      	ldr	r3, [r7, #16]
 803830e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8038310:	1e5a      	subs	r2, r3, #1
 8038312:	693b      	ldr	r3, [r7, #16]
 8038314:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8038316:	693b      	ldr	r3, [r7, #16]
 8038318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803831a:	693b      	ldr	r3, [r7, #16]
 803831c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803831e:	429a      	cmp	r2, r3
 8038320:	d044      	beq.n	80383ac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8038322:	693b      	ldr	r3, [r7, #16]
 8038324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8038326:	2b00      	cmp	r3, #0
 8038328:	d140      	bne.n	80383ac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 803832a:	693b      	ldr	r3, [r7, #16]
 803832c:	3304      	adds	r3, #4
 803832e:	4618      	mov	r0, r3
 8038330:	f7fe f910 	bl	8036554 <uxListRemove>
 8038334:	4603      	mov	r3, r0
 8038336:	2b00      	cmp	r3, #0
 8038338:	d115      	bne.n	8038366 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 803833a:	693b      	ldr	r3, [r7, #16]
 803833c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803833e:	491f      	ldr	r1, [pc, #124]	; (80383bc <xTaskPriorityDisinherit+0x104>)
 8038340:	4613      	mov	r3, r2
 8038342:	009b      	lsls	r3, r3, #2
 8038344:	4413      	add	r3, r2
 8038346:	009b      	lsls	r3, r3, #2
 8038348:	440b      	add	r3, r1
 803834a:	681b      	ldr	r3, [r3, #0]
 803834c:	2b00      	cmp	r3, #0
 803834e:	d10a      	bne.n	8038366 <xTaskPriorityDisinherit+0xae>
 8038350:	693b      	ldr	r3, [r7, #16]
 8038352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038354:	2201      	movs	r2, #1
 8038356:	fa02 f303 	lsl.w	r3, r2, r3
 803835a:	43da      	mvns	r2, r3
 803835c:	4b18      	ldr	r3, [pc, #96]	; (80383c0 <xTaskPriorityDisinherit+0x108>)
 803835e:	681b      	ldr	r3, [r3, #0]
 8038360:	4013      	ands	r3, r2
 8038362:	4a17      	ldr	r2, [pc, #92]	; (80383c0 <xTaskPriorityDisinherit+0x108>)
 8038364:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8038366:	693b      	ldr	r3, [r7, #16]
 8038368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803836a:	693b      	ldr	r3, [r7, #16]
 803836c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803836e:	693b      	ldr	r3, [r7, #16]
 8038370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038372:	f1c3 0207 	rsb	r2, r3, #7
 8038376:	693b      	ldr	r3, [r7, #16]
 8038378:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 803837a:	693b      	ldr	r3, [r7, #16]
 803837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803837e:	2201      	movs	r2, #1
 8038380:	409a      	lsls	r2, r3
 8038382:	4b0f      	ldr	r3, [pc, #60]	; (80383c0 <xTaskPriorityDisinherit+0x108>)
 8038384:	681b      	ldr	r3, [r3, #0]
 8038386:	4313      	orrs	r3, r2
 8038388:	4a0d      	ldr	r2, [pc, #52]	; (80383c0 <xTaskPriorityDisinherit+0x108>)
 803838a:	6013      	str	r3, [r2, #0]
 803838c:	693b      	ldr	r3, [r7, #16]
 803838e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8038390:	4613      	mov	r3, r2
 8038392:	009b      	lsls	r3, r3, #2
 8038394:	4413      	add	r3, r2
 8038396:	009b      	lsls	r3, r3, #2
 8038398:	4a08      	ldr	r2, [pc, #32]	; (80383bc <xTaskPriorityDisinherit+0x104>)
 803839a:	441a      	add	r2, r3
 803839c:	693b      	ldr	r3, [r7, #16]
 803839e:	3304      	adds	r3, #4
 80383a0:	4619      	mov	r1, r3
 80383a2:	4610      	mov	r0, r2
 80383a4:	f7fe f879 	bl	803649a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80383a8:	2301      	movs	r3, #1
 80383aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80383ac:	697b      	ldr	r3, [r7, #20]
	}
 80383ae:	4618      	mov	r0, r3
 80383b0:	3718      	adds	r7, #24
 80383b2:	46bd      	mov	sp, r7
 80383b4:	bd80      	pop	{r7, pc}
 80383b6:	bf00      	nop
 80383b8:	24002c74 	.word	0x24002c74
 80383bc:	24002c78 	.word	0x24002c78
 80383c0:	24002d7c 	.word	0x24002d7c

080383c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80383c4:	b580      	push	{r7, lr}
 80383c6:	b088      	sub	sp, #32
 80383c8:	af00      	add	r7, sp, #0
 80383ca:	6078      	str	r0, [r7, #4]
 80383cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80383ce:	687b      	ldr	r3, [r7, #4]
 80383d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80383d2:	2301      	movs	r3, #1
 80383d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80383d6:	687b      	ldr	r3, [r7, #4]
 80383d8:	2b00      	cmp	r3, #0
 80383da:	d077      	beq.n	80384cc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80383dc:	69bb      	ldr	r3, [r7, #24]
 80383de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80383e0:	2b00      	cmp	r3, #0
 80383e2:	d10a      	bne.n	80383fa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80383e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80383e8:	f383 8811 	msr	BASEPRI, r3
 80383ec:	f3bf 8f6f 	isb	sy
 80383f0:	f3bf 8f4f 	dsb	sy
 80383f4:	60fb      	str	r3, [r7, #12]
}
 80383f6:	bf00      	nop
 80383f8:	e7fe      	b.n	80383f8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80383fa:	69bb      	ldr	r3, [r7, #24]
 80383fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80383fe:	683a      	ldr	r2, [r7, #0]
 8038400:	429a      	cmp	r2, r3
 8038402:	d902      	bls.n	803840a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8038404:	683b      	ldr	r3, [r7, #0]
 8038406:	61fb      	str	r3, [r7, #28]
 8038408:	e002      	b.n	8038410 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 803840a:	69bb      	ldr	r3, [r7, #24]
 803840c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803840e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8038410:	69bb      	ldr	r3, [r7, #24]
 8038412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038414:	69fa      	ldr	r2, [r7, #28]
 8038416:	429a      	cmp	r2, r3
 8038418:	d058      	beq.n	80384cc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 803841a:	69bb      	ldr	r3, [r7, #24]
 803841c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803841e:	697a      	ldr	r2, [r7, #20]
 8038420:	429a      	cmp	r2, r3
 8038422:	d153      	bne.n	80384cc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8038424:	4b2b      	ldr	r3, [pc, #172]	; (80384d4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8038426:	681b      	ldr	r3, [r3, #0]
 8038428:	69ba      	ldr	r2, [r7, #24]
 803842a:	429a      	cmp	r2, r3
 803842c:	d10a      	bne.n	8038444 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 803842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038432:	f383 8811 	msr	BASEPRI, r3
 8038436:	f3bf 8f6f 	isb	sy
 803843a:	f3bf 8f4f 	dsb	sy
 803843e:	60bb      	str	r3, [r7, #8]
}
 8038440:	bf00      	nop
 8038442:	e7fe      	b.n	8038442 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8038444:	69bb      	ldr	r3, [r7, #24]
 8038446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038448:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 803844a:	69bb      	ldr	r3, [r7, #24]
 803844c:	69fa      	ldr	r2, [r7, #28]
 803844e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8038450:	69bb      	ldr	r3, [r7, #24]
 8038452:	699b      	ldr	r3, [r3, #24]
 8038454:	2b00      	cmp	r3, #0
 8038456:	db04      	blt.n	8038462 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8038458:	69fb      	ldr	r3, [r7, #28]
 803845a:	f1c3 0207 	rsb	r2, r3, #7
 803845e:	69bb      	ldr	r3, [r7, #24]
 8038460:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8038462:	69bb      	ldr	r3, [r7, #24]
 8038464:	6959      	ldr	r1, [r3, #20]
 8038466:	693a      	ldr	r2, [r7, #16]
 8038468:	4613      	mov	r3, r2
 803846a:	009b      	lsls	r3, r3, #2
 803846c:	4413      	add	r3, r2
 803846e:	009b      	lsls	r3, r3, #2
 8038470:	4a19      	ldr	r2, [pc, #100]	; (80384d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8038472:	4413      	add	r3, r2
 8038474:	4299      	cmp	r1, r3
 8038476:	d129      	bne.n	80384cc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8038478:	69bb      	ldr	r3, [r7, #24]
 803847a:	3304      	adds	r3, #4
 803847c:	4618      	mov	r0, r3
 803847e:	f7fe f869 	bl	8036554 <uxListRemove>
 8038482:	4603      	mov	r3, r0
 8038484:	2b00      	cmp	r3, #0
 8038486:	d10a      	bne.n	803849e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8038488:	69bb      	ldr	r3, [r7, #24]
 803848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803848c:	2201      	movs	r2, #1
 803848e:	fa02 f303 	lsl.w	r3, r2, r3
 8038492:	43da      	mvns	r2, r3
 8038494:	4b11      	ldr	r3, [pc, #68]	; (80384dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8038496:	681b      	ldr	r3, [r3, #0]
 8038498:	4013      	ands	r3, r2
 803849a:	4a10      	ldr	r2, [pc, #64]	; (80384dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 803849c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 803849e:	69bb      	ldr	r3, [r7, #24]
 80384a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80384a2:	2201      	movs	r2, #1
 80384a4:	409a      	lsls	r2, r3
 80384a6:	4b0d      	ldr	r3, [pc, #52]	; (80384dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80384a8:	681b      	ldr	r3, [r3, #0]
 80384aa:	4313      	orrs	r3, r2
 80384ac:	4a0b      	ldr	r2, [pc, #44]	; (80384dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80384ae:	6013      	str	r3, [r2, #0]
 80384b0:	69bb      	ldr	r3, [r7, #24]
 80384b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80384b4:	4613      	mov	r3, r2
 80384b6:	009b      	lsls	r3, r3, #2
 80384b8:	4413      	add	r3, r2
 80384ba:	009b      	lsls	r3, r3, #2
 80384bc:	4a06      	ldr	r2, [pc, #24]	; (80384d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80384be:	441a      	add	r2, r3
 80384c0:	69bb      	ldr	r3, [r7, #24]
 80384c2:	3304      	adds	r3, #4
 80384c4:	4619      	mov	r1, r3
 80384c6:	4610      	mov	r0, r2
 80384c8:	f7fd ffe7 	bl	803649a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80384cc:	bf00      	nop
 80384ce:	3720      	adds	r7, #32
 80384d0:	46bd      	mov	sp, r7
 80384d2:	bd80      	pop	{r7, pc}
 80384d4:	24002c74 	.word	0x24002c74
 80384d8:	24002c78 	.word	0x24002c78
 80384dc:	24002d7c 	.word	0x24002d7c

080384e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80384e0:	b480      	push	{r7}
 80384e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80384e4:	4b07      	ldr	r3, [pc, #28]	; (8038504 <pvTaskIncrementMutexHeldCount+0x24>)
 80384e6:	681b      	ldr	r3, [r3, #0]
 80384e8:	2b00      	cmp	r3, #0
 80384ea:	d004      	beq.n	80384f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80384ec:	4b05      	ldr	r3, [pc, #20]	; (8038504 <pvTaskIncrementMutexHeldCount+0x24>)
 80384ee:	681b      	ldr	r3, [r3, #0]
 80384f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80384f2:	3201      	adds	r2, #1
 80384f4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80384f6:	4b03      	ldr	r3, [pc, #12]	; (8038504 <pvTaskIncrementMutexHeldCount+0x24>)
 80384f8:	681b      	ldr	r3, [r3, #0]
	}
 80384fa:	4618      	mov	r0, r3
 80384fc:	46bd      	mov	sp, r7
 80384fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038502:	4770      	bx	lr
 8038504:	24002c74 	.word	0x24002c74

08038508 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8038508:	b580      	push	{r7, lr}
 803850a:	b084      	sub	sp, #16
 803850c:	af00      	add	r7, sp, #0
 803850e:	6078      	str	r0, [r7, #4]
 8038510:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8038512:	f000 fe4f 	bl	80391b4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8038516:	4b1e      	ldr	r3, [pc, #120]	; (8038590 <ulTaskNotifyTake+0x88>)
 8038518:	681b      	ldr	r3, [r3, #0]
 803851a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803851c:	2b00      	cmp	r3, #0
 803851e:	d113      	bne.n	8038548 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8038520:	4b1b      	ldr	r3, [pc, #108]	; (8038590 <ulTaskNotifyTake+0x88>)
 8038522:	681b      	ldr	r3, [r3, #0]
 8038524:	2201      	movs	r2, #1
 8038526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 803852a:	683b      	ldr	r3, [r7, #0]
 803852c:	2b00      	cmp	r3, #0
 803852e:	d00b      	beq.n	8038548 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8038530:	2101      	movs	r1, #1
 8038532:	6838      	ldr	r0, [r7, #0]
 8038534:	f000 f8c2 	bl	80386bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8038538:	4b16      	ldr	r3, [pc, #88]	; (8038594 <ulTaskNotifyTake+0x8c>)
 803853a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803853e:	601a      	str	r2, [r3, #0]
 8038540:	f3bf 8f4f 	dsb	sy
 8038544:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8038548:	f000 fe64 	bl	8039214 <vPortExitCritical>

		taskENTER_CRITICAL();
 803854c:	f000 fe32 	bl	80391b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8038550:	4b0f      	ldr	r3, [pc, #60]	; (8038590 <ulTaskNotifyTake+0x88>)
 8038552:	681b      	ldr	r3, [r3, #0]
 8038554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8038556:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8038558:	68fb      	ldr	r3, [r7, #12]
 803855a:	2b00      	cmp	r3, #0
 803855c:	d00c      	beq.n	8038578 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 803855e:	687b      	ldr	r3, [r7, #4]
 8038560:	2b00      	cmp	r3, #0
 8038562:	d004      	beq.n	803856e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8038564:	4b0a      	ldr	r3, [pc, #40]	; (8038590 <ulTaskNotifyTake+0x88>)
 8038566:	681b      	ldr	r3, [r3, #0]
 8038568:	2200      	movs	r2, #0
 803856a:	64da      	str	r2, [r3, #76]	; 0x4c
 803856c:	e004      	b.n	8038578 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 803856e:	4b08      	ldr	r3, [pc, #32]	; (8038590 <ulTaskNotifyTake+0x88>)
 8038570:	681b      	ldr	r3, [r3, #0]
 8038572:	68fa      	ldr	r2, [r7, #12]
 8038574:	3a01      	subs	r2, #1
 8038576:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8038578:	4b05      	ldr	r3, [pc, #20]	; (8038590 <ulTaskNotifyTake+0x88>)
 803857a:	681b      	ldr	r3, [r3, #0]
 803857c:	2200      	movs	r2, #0
 803857e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8038582:	f000 fe47 	bl	8039214 <vPortExitCritical>

		return ulReturn;
 8038586:	68fb      	ldr	r3, [r7, #12]
	}
 8038588:	4618      	mov	r0, r3
 803858a:	3710      	adds	r7, #16
 803858c:	46bd      	mov	sp, r7
 803858e:	bd80      	pop	{r7, pc}
 8038590:	24002c74 	.word	0x24002c74
 8038594:	e000ed04 	.word	0xe000ed04

08038598 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8038598:	b580      	push	{r7, lr}
 803859a:	b08a      	sub	sp, #40	; 0x28
 803859c:	af00      	add	r7, sp, #0
 803859e:	6078      	str	r0, [r7, #4]
 80385a0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80385a2:	687b      	ldr	r3, [r7, #4]
 80385a4:	2b00      	cmp	r3, #0
 80385a6:	d10a      	bne.n	80385be <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 80385a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80385ac:	f383 8811 	msr	BASEPRI, r3
 80385b0:	f3bf 8f6f 	isb	sy
 80385b4:	f3bf 8f4f 	dsb	sy
 80385b8:	61bb      	str	r3, [r7, #24]
}
 80385ba:	bf00      	nop
 80385bc:	e7fe      	b.n	80385bc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80385be:	f000 fedb 	bl	8039378 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80385c2:	687b      	ldr	r3, [r7, #4]
 80385c4:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80385c6:	f3ef 8211 	mrs	r2, BASEPRI
 80385ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80385ce:	f383 8811 	msr	BASEPRI, r3
 80385d2:	f3bf 8f6f 	isb	sy
 80385d6:	f3bf 8f4f 	dsb	sy
 80385da:	617a      	str	r2, [r7, #20]
 80385dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80385de:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80385e0:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80385e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80385e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80385e8:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80385ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80385ec:	2202      	movs	r2, #2
 80385ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80385f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80385f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80385f6:	1c5a      	adds	r2, r3, #1
 80385f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80385fa:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80385fc:	7ffb      	ldrb	r3, [r7, #31]
 80385fe:	2b01      	cmp	r3, #1
 8038600:	d145      	bne.n	803868e <vTaskNotifyGiveFromISR+0xf6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8038602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8038606:	2b00      	cmp	r3, #0
 8038608:	d00a      	beq.n	8038620 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 803860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803860e:	f383 8811 	msr	BASEPRI, r3
 8038612:	f3bf 8f6f 	isb	sy
 8038616:	f3bf 8f4f 	dsb	sy
 803861a:	60fb      	str	r3, [r7, #12]
}
 803861c:	bf00      	nop
 803861e:	e7fe      	b.n	803861e <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8038620:	4b20      	ldr	r3, [pc, #128]	; (80386a4 <vTaskNotifyGiveFromISR+0x10c>)
 8038622:	681b      	ldr	r3, [r3, #0]
 8038624:	2b00      	cmp	r3, #0
 8038626:	d11c      	bne.n	8038662 <vTaskNotifyGiveFromISR+0xca>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8038628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803862a:	3304      	adds	r3, #4
 803862c:	4618      	mov	r0, r3
 803862e:	f7fd ff91 	bl	8036554 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8038632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038636:	2201      	movs	r2, #1
 8038638:	409a      	lsls	r2, r3
 803863a:	4b1b      	ldr	r3, [pc, #108]	; (80386a8 <vTaskNotifyGiveFromISR+0x110>)
 803863c:	681b      	ldr	r3, [r3, #0]
 803863e:	4313      	orrs	r3, r2
 8038640:	4a19      	ldr	r2, [pc, #100]	; (80386a8 <vTaskNotifyGiveFromISR+0x110>)
 8038642:	6013      	str	r3, [r2, #0]
 8038644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8038648:	4613      	mov	r3, r2
 803864a:	009b      	lsls	r3, r3, #2
 803864c:	4413      	add	r3, r2
 803864e:	009b      	lsls	r3, r3, #2
 8038650:	4a16      	ldr	r2, [pc, #88]	; (80386ac <vTaskNotifyGiveFromISR+0x114>)
 8038652:	441a      	add	r2, r3
 8038654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038656:	3304      	adds	r3, #4
 8038658:	4619      	mov	r1, r3
 803865a:	4610      	mov	r0, r2
 803865c:	f7fd ff1d 	bl	803649a <vListInsertEnd>
 8038660:	e005      	b.n	803866e <vTaskNotifyGiveFromISR+0xd6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8038662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038664:	3318      	adds	r3, #24
 8038666:	4619      	mov	r1, r3
 8038668:	4811      	ldr	r0, [pc, #68]	; (80386b0 <vTaskNotifyGiveFromISR+0x118>)
 803866a:	f7fd ff16 	bl	803649a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 803866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8038672:	4b10      	ldr	r3, [pc, #64]	; (80386b4 <vTaskNotifyGiveFromISR+0x11c>)
 8038674:	681b      	ldr	r3, [r3, #0]
 8038676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038678:	429a      	cmp	r2, r3
 803867a:	d908      	bls.n	803868e <vTaskNotifyGiveFromISR+0xf6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 803867c:	683b      	ldr	r3, [r7, #0]
 803867e:	2b00      	cmp	r3, #0
 8038680:	d002      	beq.n	8038688 <vTaskNotifyGiveFromISR+0xf0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8038682:	683b      	ldr	r3, [r7, #0]
 8038684:	2201      	movs	r2, #1
 8038686:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8038688:	4b0b      	ldr	r3, [pc, #44]	; (80386b8 <vTaskNotifyGiveFromISR+0x120>)
 803868a:	2201      	movs	r2, #1
 803868c:	601a      	str	r2, [r3, #0]
 803868e:	6a3b      	ldr	r3, [r7, #32]
 8038690:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8038692:	68bb      	ldr	r3, [r7, #8]
 8038694:	f383 8811 	msr	BASEPRI, r3
}
 8038698:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 803869a:	bf00      	nop
 803869c:	3728      	adds	r7, #40	; 0x28
 803869e:	46bd      	mov	sp, r7
 80386a0:	bd80      	pop	{r7, pc}
 80386a2:	bf00      	nop
 80386a4:	24002d9c 	.word	0x24002d9c
 80386a8:	24002d7c 	.word	0x24002d7c
 80386ac:	24002c78 	.word	0x24002c78
 80386b0:	24002d34 	.word	0x24002d34
 80386b4:	24002c74 	.word	0x24002c74
 80386b8:	24002d88 	.word	0x24002d88

080386bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80386bc:	b580      	push	{r7, lr}
 80386be:	b084      	sub	sp, #16
 80386c0:	af00      	add	r7, sp, #0
 80386c2:	6078      	str	r0, [r7, #4]
 80386c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80386c6:	4b29      	ldr	r3, [pc, #164]	; (803876c <prvAddCurrentTaskToDelayedList+0xb0>)
 80386c8:	681b      	ldr	r3, [r3, #0]
 80386ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80386cc:	4b28      	ldr	r3, [pc, #160]	; (8038770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80386ce:	681b      	ldr	r3, [r3, #0]
 80386d0:	3304      	adds	r3, #4
 80386d2:	4618      	mov	r0, r3
 80386d4:	f7fd ff3e 	bl	8036554 <uxListRemove>
 80386d8:	4603      	mov	r3, r0
 80386da:	2b00      	cmp	r3, #0
 80386dc:	d10b      	bne.n	80386f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80386de:	4b24      	ldr	r3, [pc, #144]	; (8038770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80386e0:	681b      	ldr	r3, [r3, #0]
 80386e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80386e4:	2201      	movs	r2, #1
 80386e6:	fa02 f303 	lsl.w	r3, r2, r3
 80386ea:	43da      	mvns	r2, r3
 80386ec:	4b21      	ldr	r3, [pc, #132]	; (8038774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80386ee:	681b      	ldr	r3, [r3, #0]
 80386f0:	4013      	ands	r3, r2
 80386f2:	4a20      	ldr	r2, [pc, #128]	; (8038774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80386f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80386f6:	687b      	ldr	r3, [r7, #4]
 80386f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80386fc:	d10a      	bne.n	8038714 <prvAddCurrentTaskToDelayedList+0x58>
 80386fe:	683b      	ldr	r3, [r7, #0]
 8038700:	2b00      	cmp	r3, #0
 8038702:	d007      	beq.n	8038714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8038704:	4b1a      	ldr	r3, [pc, #104]	; (8038770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8038706:	681b      	ldr	r3, [r3, #0]
 8038708:	3304      	adds	r3, #4
 803870a:	4619      	mov	r1, r3
 803870c:	481a      	ldr	r0, [pc, #104]	; (8038778 <prvAddCurrentTaskToDelayedList+0xbc>)
 803870e:	f7fd fec4 	bl	803649a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8038712:	e026      	b.n	8038762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8038714:	68fa      	ldr	r2, [r7, #12]
 8038716:	687b      	ldr	r3, [r7, #4]
 8038718:	4413      	add	r3, r2
 803871a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 803871c:	4b14      	ldr	r3, [pc, #80]	; (8038770 <prvAddCurrentTaskToDelayedList+0xb4>)
 803871e:	681b      	ldr	r3, [r3, #0]
 8038720:	68ba      	ldr	r2, [r7, #8]
 8038722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8038724:	68ba      	ldr	r2, [r7, #8]
 8038726:	68fb      	ldr	r3, [r7, #12]
 8038728:	429a      	cmp	r2, r3
 803872a:	d209      	bcs.n	8038740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 803872c:	4b13      	ldr	r3, [pc, #76]	; (803877c <prvAddCurrentTaskToDelayedList+0xc0>)
 803872e:	681a      	ldr	r2, [r3, #0]
 8038730:	4b0f      	ldr	r3, [pc, #60]	; (8038770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8038732:	681b      	ldr	r3, [r3, #0]
 8038734:	3304      	adds	r3, #4
 8038736:	4619      	mov	r1, r3
 8038738:	4610      	mov	r0, r2
 803873a:	f7fd fed2 	bl	80364e2 <vListInsert>
}
 803873e:	e010      	b.n	8038762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8038740:	4b0f      	ldr	r3, [pc, #60]	; (8038780 <prvAddCurrentTaskToDelayedList+0xc4>)
 8038742:	681a      	ldr	r2, [r3, #0]
 8038744:	4b0a      	ldr	r3, [pc, #40]	; (8038770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8038746:	681b      	ldr	r3, [r3, #0]
 8038748:	3304      	adds	r3, #4
 803874a:	4619      	mov	r1, r3
 803874c:	4610      	mov	r0, r2
 803874e:	f7fd fec8 	bl	80364e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8038752:	4b0c      	ldr	r3, [pc, #48]	; (8038784 <prvAddCurrentTaskToDelayedList+0xc8>)
 8038754:	681b      	ldr	r3, [r3, #0]
 8038756:	68ba      	ldr	r2, [r7, #8]
 8038758:	429a      	cmp	r2, r3
 803875a:	d202      	bcs.n	8038762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 803875c:	4a09      	ldr	r2, [pc, #36]	; (8038784 <prvAddCurrentTaskToDelayedList+0xc8>)
 803875e:	68bb      	ldr	r3, [r7, #8]
 8038760:	6013      	str	r3, [r2, #0]
}
 8038762:	bf00      	nop
 8038764:	3710      	adds	r7, #16
 8038766:	46bd      	mov	sp, r7
 8038768:	bd80      	pop	{r7, pc}
 803876a:	bf00      	nop
 803876c:	24002d78 	.word	0x24002d78
 8038770:	24002c74 	.word	0x24002c74
 8038774:	24002d7c 	.word	0x24002d7c
 8038778:	24002d60 	.word	0x24002d60
 803877c:	24002d30 	.word	0x24002d30
 8038780:	24002d2c 	.word	0x24002d2c
 8038784:	24002d94 	.word	0x24002d94

08038788 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8038788:	b580      	push	{r7, lr}
 803878a:	b08a      	sub	sp, #40	; 0x28
 803878c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 803878e:	2300      	movs	r3, #0
 8038790:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8038792:	f000 fba1 	bl	8038ed8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8038796:	4b1c      	ldr	r3, [pc, #112]	; (8038808 <xTimerCreateTimerTask+0x80>)
 8038798:	681b      	ldr	r3, [r3, #0]
 803879a:	2b00      	cmp	r3, #0
 803879c:	d021      	beq.n	80387e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 803879e:	2300      	movs	r3, #0
 80387a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80387a2:	2300      	movs	r3, #0
 80387a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80387a6:	1d3a      	adds	r2, r7, #4
 80387a8:	f107 0108 	add.w	r1, r7, #8
 80387ac:	f107 030c 	add.w	r3, r7, #12
 80387b0:	4618      	mov	r0, r3
 80387b2:	f7e8 fa89 	bl	8020cc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80387b6:	6879      	ldr	r1, [r7, #4]
 80387b8:	68bb      	ldr	r3, [r7, #8]
 80387ba:	68fa      	ldr	r2, [r7, #12]
 80387bc:	9202      	str	r2, [sp, #8]
 80387be:	9301      	str	r3, [sp, #4]
 80387c0:	2302      	movs	r3, #2
 80387c2:	9300      	str	r3, [sp, #0]
 80387c4:	2300      	movs	r3, #0
 80387c6:	460a      	mov	r2, r1
 80387c8:	4910      	ldr	r1, [pc, #64]	; (803880c <xTimerCreateTimerTask+0x84>)
 80387ca:	4811      	ldr	r0, [pc, #68]	; (8038810 <xTimerCreateTimerTask+0x88>)
 80387cc:	f7fe fed8 	bl	8037580 <xTaskCreateStatic>
 80387d0:	4603      	mov	r3, r0
 80387d2:	4a10      	ldr	r2, [pc, #64]	; (8038814 <xTimerCreateTimerTask+0x8c>)
 80387d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80387d6:	4b0f      	ldr	r3, [pc, #60]	; (8038814 <xTimerCreateTimerTask+0x8c>)
 80387d8:	681b      	ldr	r3, [r3, #0]
 80387da:	2b00      	cmp	r3, #0
 80387dc:	d001      	beq.n	80387e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80387de:	2301      	movs	r3, #1
 80387e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80387e2:	697b      	ldr	r3, [r7, #20]
 80387e4:	2b00      	cmp	r3, #0
 80387e6:	d10a      	bne.n	80387fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80387e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80387ec:	f383 8811 	msr	BASEPRI, r3
 80387f0:	f3bf 8f6f 	isb	sy
 80387f4:	f3bf 8f4f 	dsb	sy
 80387f8:	613b      	str	r3, [r7, #16]
}
 80387fa:	bf00      	nop
 80387fc:	e7fe      	b.n	80387fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80387fe:	697b      	ldr	r3, [r7, #20]
}
 8038800:	4618      	mov	r0, r3
 8038802:	3718      	adds	r7, #24
 8038804:	46bd      	mov	sp, r7
 8038806:	bd80      	pop	{r7, pc}
 8038808:	24002dd0 	.word	0x24002dd0
 803880c:	0803b8fc 	.word	0x0803b8fc
 8038810:	08038a81 	.word	0x08038a81
 8038814:	24002dd4 	.word	0x24002dd4

08038818 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8038818:	b580      	push	{r7, lr}
 803881a:	b088      	sub	sp, #32
 803881c:	af02      	add	r7, sp, #8
 803881e:	60f8      	str	r0, [r7, #12]
 8038820:	60b9      	str	r1, [r7, #8]
 8038822:	607a      	str	r2, [r7, #4]
 8038824:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8038826:	2028      	movs	r0, #40	; 0x28
 8038828:	f000 fde6 	bl	80393f8 <pvPortMalloc>
 803882c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 803882e:	697b      	ldr	r3, [r7, #20]
 8038830:	2b00      	cmp	r3, #0
 8038832:	d00d      	beq.n	8038850 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8038834:	697b      	ldr	r3, [r7, #20]
 8038836:	2200      	movs	r2, #0
 8038838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 803883c:	697b      	ldr	r3, [r7, #20]
 803883e:	9301      	str	r3, [sp, #4]
 8038840:	6a3b      	ldr	r3, [r7, #32]
 8038842:	9300      	str	r3, [sp, #0]
 8038844:	683b      	ldr	r3, [r7, #0]
 8038846:	687a      	ldr	r2, [r7, #4]
 8038848:	68b9      	ldr	r1, [r7, #8]
 803884a:	68f8      	ldr	r0, [r7, #12]
 803884c:	f000 f843 	bl	80388d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8038850:	697b      	ldr	r3, [r7, #20]
	}
 8038852:	4618      	mov	r0, r3
 8038854:	3718      	adds	r7, #24
 8038856:	46bd      	mov	sp, r7
 8038858:	bd80      	pop	{r7, pc}

0803885a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 803885a:	b580      	push	{r7, lr}
 803885c:	b08a      	sub	sp, #40	; 0x28
 803885e:	af02      	add	r7, sp, #8
 8038860:	60f8      	str	r0, [r7, #12]
 8038862:	60b9      	str	r1, [r7, #8]
 8038864:	607a      	str	r2, [r7, #4]
 8038866:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8038868:	2328      	movs	r3, #40	; 0x28
 803886a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 803886c:	693b      	ldr	r3, [r7, #16]
 803886e:	2b28      	cmp	r3, #40	; 0x28
 8038870:	d00a      	beq.n	8038888 <xTimerCreateStatic+0x2e>
	__asm volatile
 8038872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038876:	f383 8811 	msr	BASEPRI, r3
 803887a:	f3bf 8f6f 	isb	sy
 803887e:	f3bf 8f4f 	dsb	sy
 8038882:	61bb      	str	r3, [r7, #24]
}
 8038884:	bf00      	nop
 8038886:	e7fe      	b.n	8038886 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8038888:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 803888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803888c:	2b00      	cmp	r3, #0
 803888e:	d10a      	bne.n	80388a6 <xTimerCreateStatic+0x4c>
	__asm volatile
 8038890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038894:	f383 8811 	msr	BASEPRI, r3
 8038898:	f3bf 8f6f 	isb	sy
 803889c:	f3bf 8f4f 	dsb	sy
 80388a0:	617b      	str	r3, [r7, #20]
}
 80388a2:	bf00      	nop
 80388a4:	e7fe      	b.n	80388a4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80388a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80388a8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80388aa:	69fb      	ldr	r3, [r7, #28]
 80388ac:	2b00      	cmp	r3, #0
 80388ae:	d00d      	beq.n	80388cc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80388b0:	69fb      	ldr	r3, [r7, #28]
 80388b2:	2202      	movs	r2, #2
 80388b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80388b8:	69fb      	ldr	r3, [r7, #28]
 80388ba:	9301      	str	r3, [sp, #4]
 80388bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80388be:	9300      	str	r3, [sp, #0]
 80388c0:	683b      	ldr	r3, [r7, #0]
 80388c2:	687a      	ldr	r2, [r7, #4]
 80388c4:	68b9      	ldr	r1, [r7, #8]
 80388c6:	68f8      	ldr	r0, [r7, #12]
 80388c8:	f000 f805 	bl	80388d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80388cc:	69fb      	ldr	r3, [r7, #28]
	}
 80388ce:	4618      	mov	r0, r3
 80388d0:	3720      	adds	r7, #32
 80388d2:	46bd      	mov	sp, r7
 80388d4:	bd80      	pop	{r7, pc}

080388d6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80388d6:	b580      	push	{r7, lr}
 80388d8:	b086      	sub	sp, #24
 80388da:	af00      	add	r7, sp, #0
 80388dc:	60f8      	str	r0, [r7, #12]
 80388de:	60b9      	str	r1, [r7, #8]
 80388e0:	607a      	str	r2, [r7, #4]
 80388e2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80388e4:	68bb      	ldr	r3, [r7, #8]
 80388e6:	2b00      	cmp	r3, #0
 80388e8:	d10a      	bne.n	8038900 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80388ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80388ee:	f383 8811 	msr	BASEPRI, r3
 80388f2:	f3bf 8f6f 	isb	sy
 80388f6:	f3bf 8f4f 	dsb	sy
 80388fa:	617b      	str	r3, [r7, #20]
}
 80388fc:	bf00      	nop
 80388fe:	e7fe      	b.n	80388fe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8038900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038902:	2b00      	cmp	r3, #0
 8038904:	d01e      	beq.n	8038944 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8038906:	f000 fae7 	bl	8038ed8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 803890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803890c:	68fa      	ldr	r2, [r7, #12]
 803890e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8038910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038912:	68ba      	ldr	r2, [r7, #8]
 8038914:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8038916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038918:	683a      	ldr	r2, [r7, #0]
 803891a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 803891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803891e:	6a3a      	ldr	r2, [r7, #32]
 8038920:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8038922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038924:	3304      	adds	r3, #4
 8038926:	4618      	mov	r0, r3
 8038928:	f7fd fdaa 	bl	8036480 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 803892c:	687b      	ldr	r3, [r7, #4]
 803892e:	2b00      	cmp	r3, #0
 8038930:	d008      	beq.n	8038944 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8038932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038938:	f043 0304 	orr.w	r3, r3, #4
 803893c:	b2da      	uxtb	r2, r3
 803893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8038944:	bf00      	nop
 8038946:	3718      	adds	r7, #24
 8038948:	46bd      	mov	sp, r7
 803894a:	bd80      	pop	{r7, pc}

0803894c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 803894c:	b580      	push	{r7, lr}
 803894e:	b08a      	sub	sp, #40	; 0x28
 8038950:	af00      	add	r7, sp, #0
 8038952:	60f8      	str	r0, [r7, #12]
 8038954:	60b9      	str	r1, [r7, #8]
 8038956:	607a      	str	r2, [r7, #4]
 8038958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 803895a:	2300      	movs	r3, #0
 803895c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 803895e:	68fb      	ldr	r3, [r7, #12]
 8038960:	2b00      	cmp	r3, #0
 8038962:	d10a      	bne.n	803897a <xTimerGenericCommand+0x2e>
	__asm volatile
 8038964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038968:	f383 8811 	msr	BASEPRI, r3
 803896c:	f3bf 8f6f 	isb	sy
 8038970:	f3bf 8f4f 	dsb	sy
 8038974:	623b      	str	r3, [r7, #32]
}
 8038976:	bf00      	nop
 8038978:	e7fe      	b.n	8038978 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 803897a:	4b1a      	ldr	r3, [pc, #104]	; (80389e4 <xTimerGenericCommand+0x98>)
 803897c:	681b      	ldr	r3, [r3, #0]
 803897e:	2b00      	cmp	r3, #0
 8038980:	d02a      	beq.n	80389d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8038982:	68bb      	ldr	r3, [r7, #8]
 8038984:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8038986:	687b      	ldr	r3, [r7, #4]
 8038988:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 803898a:	68fb      	ldr	r3, [r7, #12]
 803898c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 803898e:	68bb      	ldr	r3, [r7, #8]
 8038990:	2b05      	cmp	r3, #5
 8038992:	dc18      	bgt.n	80389c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8038994:	f7ff fbfc 	bl	8038190 <xTaskGetSchedulerState>
 8038998:	4603      	mov	r3, r0
 803899a:	2b02      	cmp	r3, #2
 803899c:	d109      	bne.n	80389b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 803899e:	4b11      	ldr	r3, [pc, #68]	; (80389e4 <xTimerGenericCommand+0x98>)
 80389a0:	6818      	ldr	r0, [r3, #0]
 80389a2:	f107 0110 	add.w	r1, r7, #16
 80389a6:	2300      	movs	r3, #0
 80389a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80389aa:	f7fd ff83 	bl	80368b4 <xQueueGenericSend>
 80389ae:	6278      	str	r0, [r7, #36]	; 0x24
 80389b0:	e012      	b.n	80389d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80389b2:	4b0c      	ldr	r3, [pc, #48]	; (80389e4 <xTimerGenericCommand+0x98>)
 80389b4:	6818      	ldr	r0, [r3, #0]
 80389b6:	f107 0110 	add.w	r1, r7, #16
 80389ba:	2300      	movs	r3, #0
 80389bc:	2200      	movs	r2, #0
 80389be:	f7fd ff79 	bl	80368b4 <xQueueGenericSend>
 80389c2:	6278      	str	r0, [r7, #36]	; 0x24
 80389c4:	e008      	b.n	80389d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80389c6:	4b07      	ldr	r3, [pc, #28]	; (80389e4 <xTimerGenericCommand+0x98>)
 80389c8:	6818      	ldr	r0, [r3, #0]
 80389ca:	f107 0110 	add.w	r1, r7, #16
 80389ce:	2300      	movs	r3, #0
 80389d0:	683a      	ldr	r2, [r7, #0]
 80389d2:	f7fe f86d 	bl	8036ab0 <xQueueGenericSendFromISR>
 80389d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80389d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80389da:	4618      	mov	r0, r3
 80389dc:	3728      	adds	r7, #40	; 0x28
 80389de:	46bd      	mov	sp, r7
 80389e0:	bd80      	pop	{r7, pc}
 80389e2:	bf00      	nop
 80389e4:	24002dd0 	.word	0x24002dd0

080389e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80389e8:	b580      	push	{r7, lr}
 80389ea:	b088      	sub	sp, #32
 80389ec:	af02      	add	r7, sp, #8
 80389ee:	6078      	str	r0, [r7, #4]
 80389f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80389f2:	4b22      	ldr	r3, [pc, #136]	; (8038a7c <prvProcessExpiredTimer+0x94>)
 80389f4:	681b      	ldr	r3, [r3, #0]
 80389f6:	68db      	ldr	r3, [r3, #12]
 80389f8:	68db      	ldr	r3, [r3, #12]
 80389fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80389fc:	697b      	ldr	r3, [r7, #20]
 80389fe:	3304      	adds	r3, #4
 8038a00:	4618      	mov	r0, r3
 8038a02:	f7fd fda7 	bl	8036554 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8038a06:	697b      	ldr	r3, [r7, #20]
 8038a08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038a0c:	f003 0304 	and.w	r3, r3, #4
 8038a10:	2b00      	cmp	r3, #0
 8038a12:	d022      	beq.n	8038a5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8038a14:	697b      	ldr	r3, [r7, #20]
 8038a16:	699a      	ldr	r2, [r3, #24]
 8038a18:	687b      	ldr	r3, [r7, #4]
 8038a1a:	18d1      	adds	r1, r2, r3
 8038a1c:	687b      	ldr	r3, [r7, #4]
 8038a1e:	683a      	ldr	r2, [r7, #0]
 8038a20:	6978      	ldr	r0, [r7, #20]
 8038a22:	f000 f8d1 	bl	8038bc8 <prvInsertTimerInActiveList>
 8038a26:	4603      	mov	r3, r0
 8038a28:	2b00      	cmp	r3, #0
 8038a2a:	d01f      	beq.n	8038a6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8038a2c:	2300      	movs	r3, #0
 8038a2e:	9300      	str	r3, [sp, #0]
 8038a30:	2300      	movs	r3, #0
 8038a32:	687a      	ldr	r2, [r7, #4]
 8038a34:	2100      	movs	r1, #0
 8038a36:	6978      	ldr	r0, [r7, #20]
 8038a38:	f7ff ff88 	bl	803894c <xTimerGenericCommand>
 8038a3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8038a3e:	693b      	ldr	r3, [r7, #16]
 8038a40:	2b00      	cmp	r3, #0
 8038a42:	d113      	bne.n	8038a6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8038a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038a48:	f383 8811 	msr	BASEPRI, r3
 8038a4c:	f3bf 8f6f 	isb	sy
 8038a50:	f3bf 8f4f 	dsb	sy
 8038a54:	60fb      	str	r3, [r7, #12]
}
 8038a56:	bf00      	nop
 8038a58:	e7fe      	b.n	8038a58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8038a5a:	697b      	ldr	r3, [r7, #20]
 8038a5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038a60:	f023 0301 	bic.w	r3, r3, #1
 8038a64:	b2da      	uxtb	r2, r3
 8038a66:	697b      	ldr	r3, [r7, #20]
 8038a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8038a6c:	697b      	ldr	r3, [r7, #20]
 8038a6e:	6a1b      	ldr	r3, [r3, #32]
 8038a70:	6978      	ldr	r0, [r7, #20]
 8038a72:	4798      	blx	r3
}
 8038a74:	bf00      	nop
 8038a76:	3718      	adds	r7, #24
 8038a78:	46bd      	mov	sp, r7
 8038a7a:	bd80      	pop	{r7, pc}
 8038a7c:	24002dc8 	.word	0x24002dc8

08038a80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8038a80:	b580      	push	{r7, lr}
 8038a82:	b084      	sub	sp, #16
 8038a84:	af00      	add	r7, sp, #0
 8038a86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8038a88:	f107 0308 	add.w	r3, r7, #8
 8038a8c:	4618      	mov	r0, r3
 8038a8e:	f000 f857 	bl	8038b40 <prvGetNextExpireTime>
 8038a92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8038a94:	68bb      	ldr	r3, [r7, #8]
 8038a96:	4619      	mov	r1, r3
 8038a98:	68f8      	ldr	r0, [r7, #12]
 8038a9a:	f000 f803 	bl	8038aa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8038a9e:	f000 f8d5 	bl	8038c4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8038aa2:	e7f1      	b.n	8038a88 <prvTimerTask+0x8>

08038aa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8038aa4:	b580      	push	{r7, lr}
 8038aa6:	b084      	sub	sp, #16
 8038aa8:	af00      	add	r7, sp, #0
 8038aaa:	6078      	str	r0, [r7, #4]
 8038aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8038aae:	f7fe ff95 	bl	80379dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8038ab2:	f107 0308 	add.w	r3, r7, #8
 8038ab6:	4618      	mov	r0, r3
 8038ab8:	f000 f866 	bl	8038b88 <prvSampleTimeNow>
 8038abc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8038abe:	68bb      	ldr	r3, [r7, #8]
 8038ac0:	2b00      	cmp	r3, #0
 8038ac2:	d130      	bne.n	8038b26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8038ac4:	683b      	ldr	r3, [r7, #0]
 8038ac6:	2b00      	cmp	r3, #0
 8038ac8:	d10a      	bne.n	8038ae0 <prvProcessTimerOrBlockTask+0x3c>
 8038aca:	687a      	ldr	r2, [r7, #4]
 8038acc:	68fb      	ldr	r3, [r7, #12]
 8038ace:	429a      	cmp	r2, r3
 8038ad0:	d806      	bhi.n	8038ae0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8038ad2:	f7fe ff91 	bl	80379f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8038ad6:	68f9      	ldr	r1, [r7, #12]
 8038ad8:	6878      	ldr	r0, [r7, #4]
 8038ada:	f7ff ff85 	bl	80389e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8038ade:	e024      	b.n	8038b2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8038ae0:	683b      	ldr	r3, [r7, #0]
 8038ae2:	2b00      	cmp	r3, #0
 8038ae4:	d008      	beq.n	8038af8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8038ae6:	4b13      	ldr	r3, [pc, #76]	; (8038b34 <prvProcessTimerOrBlockTask+0x90>)
 8038ae8:	681b      	ldr	r3, [r3, #0]
 8038aea:	681b      	ldr	r3, [r3, #0]
 8038aec:	2b00      	cmp	r3, #0
 8038aee:	d101      	bne.n	8038af4 <prvProcessTimerOrBlockTask+0x50>
 8038af0:	2301      	movs	r3, #1
 8038af2:	e000      	b.n	8038af6 <prvProcessTimerOrBlockTask+0x52>
 8038af4:	2300      	movs	r3, #0
 8038af6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8038af8:	4b0f      	ldr	r3, [pc, #60]	; (8038b38 <prvProcessTimerOrBlockTask+0x94>)
 8038afa:	6818      	ldr	r0, [r3, #0]
 8038afc:	687a      	ldr	r2, [r7, #4]
 8038afe:	68fb      	ldr	r3, [r7, #12]
 8038b00:	1ad3      	subs	r3, r2, r3
 8038b02:	683a      	ldr	r2, [r7, #0]
 8038b04:	4619      	mov	r1, r3
 8038b06:	f7fe fd07 	bl	8037518 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8038b0a:	f7fe ff75 	bl	80379f8 <xTaskResumeAll>
 8038b0e:	4603      	mov	r3, r0
 8038b10:	2b00      	cmp	r3, #0
 8038b12:	d10a      	bne.n	8038b2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8038b14:	4b09      	ldr	r3, [pc, #36]	; (8038b3c <prvProcessTimerOrBlockTask+0x98>)
 8038b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038b1a:	601a      	str	r2, [r3, #0]
 8038b1c:	f3bf 8f4f 	dsb	sy
 8038b20:	f3bf 8f6f 	isb	sy
}
 8038b24:	e001      	b.n	8038b2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8038b26:	f7fe ff67 	bl	80379f8 <xTaskResumeAll>
}
 8038b2a:	bf00      	nop
 8038b2c:	3710      	adds	r7, #16
 8038b2e:	46bd      	mov	sp, r7
 8038b30:	bd80      	pop	{r7, pc}
 8038b32:	bf00      	nop
 8038b34:	24002dcc 	.word	0x24002dcc
 8038b38:	24002dd0 	.word	0x24002dd0
 8038b3c:	e000ed04 	.word	0xe000ed04

08038b40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8038b40:	b480      	push	{r7}
 8038b42:	b085      	sub	sp, #20
 8038b44:	af00      	add	r7, sp, #0
 8038b46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8038b48:	4b0e      	ldr	r3, [pc, #56]	; (8038b84 <prvGetNextExpireTime+0x44>)
 8038b4a:	681b      	ldr	r3, [r3, #0]
 8038b4c:	681b      	ldr	r3, [r3, #0]
 8038b4e:	2b00      	cmp	r3, #0
 8038b50:	d101      	bne.n	8038b56 <prvGetNextExpireTime+0x16>
 8038b52:	2201      	movs	r2, #1
 8038b54:	e000      	b.n	8038b58 <prvGetNextExpireTime+0x18>
 8038b56:	2200      	movs	r2, #0
 8038b58:	687b      	ldr	r3, [r7, #4]
 8038b5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8038b5c:	687b      	ldr	r3, [r7, #4]
 8038b5e:	681b      	ldr	r3, [r3, #0]
 8038b60:	2b00      	cmp	r3, #0
 8038b62:	d105      	bne.n	8038b70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8038b64:	4b07      	ldr	r3, [pc, #28]	; (8038b84 <prvGetNextExpireTime+0x44>)
 8038b66:	681b      	ldr	r3, [r3, #0]
 8038b68:	68db      	ldr	r3, [r3, #12]
 8038b6a:	681b      	ldr	r3, [r3, #0]
 8038b6c:	60fb      	str	r3, [r7, #12]
 8038b6e:	e001      	b.n	8038b74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8038b70:	2300      	movs	r3, #0
 8038b72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8038b74:	68fb      	ldr	r3, [r7, #12]
}
 8038b76:	4618      	mov	r0, r3
 8038b78:	3714      	adds	r7, #20
 8038b7a:	46bd      	mov	sp, r7
 8038b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038b80:	4770      	bx	lr
 8038b82:	bf00      	nop
 8038b84:	24002dc8 	.word	0x24002dc8

08038b88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8038b88:	b580      	push	{r7, lr}
 8038b8a:	b084      	sub	sp, #16
 8038b8c:	af00      	add	r7, sp, #0
 8038b8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8038b90:	f7fe ffce 	bl	8037b30 <xTaskGetTickCount>
 8038b94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8038b96:	4b0b      	ldr	r3, [pc, #44]	; (8038bc4 <prvSampleTimeNow+0x3c>)
 8038b98:	681b      	ldr	r3, [r3, #0]
 8038b9a:	68fa      	ldr	r2, [r7, #12]
 8038b9c:	429a      	cmp	r2, r3
 8038b9e:	d205      	bcs.n	8038bac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8038ba0:	f000 f936 	bl	8038e10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8038ba4:	687b      	ldr	r3, [r7, #4]
 8038ba6:	2201      	movs	r2, #1
 8038ba8:	601a      	str	r2, [r3, #0]
 8038baa:	e002      	b.n	8038bb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8038bac:	687b      	ldr	r3, [r7, #4]
 8038bae:	2200      	movs	r2, #0
 8038bb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8038bb2:	4a04      	ldr	r2, [pc, #16]	; (8038bc4 <prvSampleTimeNow+0x3c>)
 8038bb4:	68fb      	ldr	r3, [r7, #12]
 8038bb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8038bb8:	68fb      	ldr	r3, [r7, #12]
}
 8038bba:	4618      	mov	r0, r3
 8038bbc:	3710      	adds	r7, #16
 8038bbe:	46bd      	mov	sp, r7
 8038bc0:	bd80      	pop	{r7, pc}
 8038bc2:	bf00      	nop
 8038bc4:	24002dd8 	.word	0x24002dd8

08038bc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8038bc8:	b580      	push	{r7, lr}
 8038bca:	b086      	sub	sp, #24
 8038bcc:	af00      	add	r7, sp, #0
 8038bce:	60f8      	str	r0, [r7, #12]
 8038bd0:	60b9      	str	r1, [r7, #8]
 8038bd2:	607a      	str	r2, [r7, #4]
 8038bd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8038bd6:	2300      	movs	r3, #0
 8038bd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8038bda:	68fb      	ldr	r3, [r7, #12]
 8038bdc:	68ba      	ldr	r2, [r7, #8]
 8038bde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8038be0:	68fb      	ldr	r3, [r7, #12]
 8038be2:	68fa      	ldr	r2, [r7, #12]
 8038be4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8038be6:	68ba      	ldr	r2, [r7, #8]
 8038be8:	687b      	ldr	r3, [r7, #4]
 8038bea:	429a      	cmp	r2, r3
 8038bec:	d812      	bhi.n	8038c14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8038bee:	687a      	ldr	r2, [r7, #4]
 8038bf0:	683b      	ldr	r3, [r7, #0]
 8038bf2:	1ad2      	subs	r2, r2, r3
 8038bf4:	68fb      	ldr	r3, [r7, #12]
 8038bf6:	699b      	ldr	r3, [r3, #24]
 8038bf8:	429a      	cmp	r2, r3
 8038bfa:	d302      	bcc.n	8038c02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8038bfc:	2301      	movs	r3, #1
 8038bfe:	617b      	str	r3, [r7, #20]
 8038c00:	e01b      	b.n	8038c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8038c02:	4b10      	ldr	r3, [pc, #64]	; (8038c44 <prvInsertTimerInActiveList+0x7c>)
 8038c04:	681a      	ldr	r2, [r3, #0]
 8038c06:	68fb      	ldr	r3, [r7, #12]
 8038c08:	3304      	adds	r3, #4
 8038c0a:	4619      	mov	r1, r3
 8038c0c:	4610      	mov	r0, r2
 8038c0e:	f7fd fc68 	bl	80364e2 <vListInsert>
 8038c12:	e012      	b.n	8038c3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8038c14:	687a      	ldr	r2, [r7, #4]
 8038c16:	683b      	ldr	r3, [r7, #0]
 8038c18:	429a      	cmp	r2, r3
 8038c1a:	d206      	bcs.n	8038c2a <prvInsertTimerInActiveList+0x62>
 8038c1c:	68ba      	ldr	r2, [r7, #8]
 8038c1e:	683b      	ldr	r3, [r7, #0]
 8038c20:	429a      	cmp	r2, r3
 8038c22:	d302      	bcc.n	8038c2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8038c24:	2301      	movs	r3, #1
 8038c26:	617b      	str	r3, [r7, #20]
 8038c28:	e007      	b.n	8038c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8038c2a:	4b07      	ldr	r3, [pc, #28]	; (8038c48 <prvInsertTimerInActiveList+0x80>)
 8038c2c:	681a      	ldr	r2, [r3, #0]
 8038c2e:	68fb      	ldr	r3, [r7, #12]
 8038c30:	3304      	adds	r3, #4
 8038c32:	4619      	mov	r1, r3
 8038c34:	4610      	mov	r0, r2
 8038c36:	f7fd fc54 	bl	80364e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8038c3a:	697b      	ldr	r3, [r7, #20]
}
 8038c3c:	4618      	mov	r0, r3
 8038c3e:	3718      	adds	r7, #24
 8038c40:	46bd      	mov	sp, r7
 8038c42:	bd80      	pop	{r7, pc}
 8038c44:	24002dcc 	.word	0x24002dcc
 8038c48:	24002dc8 	.word	0x24002dc8

08038c4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8038c4c:	b580      	push	{r7, lr}
 8038c4e:	b08e      	sub	sp, #56	; 0x38
 8038c50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8038c52:	e0ca      	b.n	8038dea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8038c54:	687b      	ldr	r3, [r7, #4]
 8038c56:	2b00      	cmp	r3, #0
 8038c58:	da18      	bge.n	8038c8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8038c5a:	1d3b      	adds	r3, r7, #4
 8038c5c:	3304      	adds	r3, #4
 8038c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8038c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038c62:	2b00      	cmp	r3, #0
 8038c64:	d10a      	bne.n	8038c7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8038c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038c6a:	f383 8811 	msr	BASEPRI, r3
 8038c6e:	f3bf 8f6f 	isb	sy
 8038c72:	f3bf 8f4f 	dsb	sy
 8038c76:	61fb      	str	r3, [r7, #28]
}
 8038c78:	bf00      	nop
 8038c7a:	e7fe      	b.n	8038c7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8038c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038c7e:	681b      	ldr	r3, [r3, #0]
 8038c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8038c82:	6850      	ldr	r0, [r2, #4]
 8038c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8038c86:	6892      	ldr	r2, [r2, #8]
 8038c88:	4611      	mov	r1, r2
 8038c8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8038c8c:	687b      	ldr	r3, [r7, #4]
 8038c8e:	2b00      	cmp	r3, #0
 8038c90:	f2c0 80aa 	blt.w	8038de8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8038c94:	68fb      	ldr	r3, [r7, #12]
 8038c96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8038c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038c9a:	695b      	ldr	r3, [r3, #20]
 8038c9c:	2b00      	cmp	r3, #0
 8038c9e:	d004      	beq.n	8038caa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8038ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038ca2:	3304      	adds	r3, #4
 8038ca4:	4618      	mov	r0, r3
 8038ca6:	f7fd fc55 	bl	8036554 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8038caa:	463b      	mov	r3, r7
 8038cac:	4618      	mov	r0, r3
 8038cae:	f7ff ff6b 	bl	8038b88 <prvSampleTimeNow>
 8038cb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8038cb4:	687b      	ldr	r3, [r7, #4]
 8038cb6:	2b09      	cmp	r3, #9
 8038cb8:	f200 8097 	bhi.w	8038dea <prvProcessReceivedCommands+0x19e>
 8038cbc:	a201      	add	r2, pc, #4	; (adr r2, 8038cc4 <prvProcessReceivedCommands+0x78>)
 8038cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8038cc2:	bf00      	nop
 8038cc4:	08038ced 	.word	0x08038ced
 8038cc8:	08038ced 	.word	0x08038ced
 8038ccc:	08038ced 	.word	0x08038ced
 8038cd0:	08038d61 	.word	0x08038d61
 8038cd4:	08038d75 	.word	0x08038d75
 8038cd8:	08038dbf 	.word	0x08038dbf
 8038cdc:	08038ced 	.word	0x08038ced
 8038ce0:	08038ced 	.word	0x08038ced
 8038ce4:	08038d61 	.word	0x08038d61
 8038ce8:	08038d75 	.word	0x08038d75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8038cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038cf2:	f043 0301 	orr.w	r3, r3, #1
 8038cf6:	b2da      	uxtb	r2, r3
 8038cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8038cfe:	68ba      	ldr	r2, [r7, #8]
 8038d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d02:	699b      	ldr	r3, [r3, #24]
 8038d04:	18d1      	adds	r1, r2, r3
 8038d06:	68bb      	ldr	r3, [r7, #8]
 8038d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8038d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038d0c:	f7ff ff5c 	bl	8038bc8 <prvInsertTimerInActiveList>
 8038d10:	4603      	mov	r3, r0
 8038d12:	2b00      	cmp	r3, #0
 8038d14:	d069      	beq.n	8038dea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8038d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d18:	6a1b      	ldr	r3, [r3, #32]
 8038d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038d1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8038d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038d24:	f003 0304 	and.w	r3, r3, #4
 8038d28:	2b00      	cmp	r3, #0
 8038d2a:	d05e      	beq.n	8038dea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8038d2c:	68ba      	ldr	r2, [r7, #8]
 8038d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d30:	699b      	ldr	r3, [r3, #24]
 8038d32:	441a      	add	r2, r3
 8038d34:	2300      	movs	r3, #0
 8038d36:	9300      	str	r3, [sp, #0]
 8038d38:	2300      	movs	r3, #0
 8038d3a:	2100      	movs	r1, #0
 8038d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038d3e:	f7ff fe05 	bl	803894c <xTimerGenericCommand>
 8038d42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8038d44:	6a3b      	ldr	r3, [r7, #32]
 8038d46:	2b00      	cmp	r3, #0
 8038d48:	d14f      	bne.n	8038dea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8038d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038d4e:	f383 8811 	msr	BASEPRI, r3
 8038d52:	f3bf 8f6f 	isb	sy
 8038d56:	f3bf 8f4f 	dsb	sy
 8038d5a:	61bb      	str	r3, [r7, #24]
}
 8038d5c:	bf00      	nop
 8038d5e:	e7fe      	b.n	8038d5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8038d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038d66:	f023 0301 	bic.w	r3, r3, #1
 8038d6a:	b2da      	uxtb	r2, r3
 8038d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8038d72:	e03a      	b.n	8038dea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8038d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038d7a:	f043 0301 	orr.w	r3, r3, #1
 8038d7e:	b2da      	uxtb	r2, r3
 8038d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8038d86:	68ba      	ldr	r2, [r7, #8]
 8038d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8038d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d8e:	699b      	ldr	r3, [r3, #24]
 8038d90:	2b00      	cmp	r3, #0
 8038d92:	d10a      	bne.n	8038daa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8038d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038d98:	f383 8811 	msr	BASEPRI, r3
 8038d9c:	f3bf 8f6f 	isb	sy
 8038da0:	f3bf 8f4f 	dsb	sy
 8038da4:	617b      	str	r3, [r7, #20]
}
 8038da6:	bf00      	nop
 8038da8:	e7fe      	b.n	8038da8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8038daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038dac:	699a      	ldr	r2, [r3, #24]
 8038dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038db0:	18d1      	adds	r1, r2, r3
 8038db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8038db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038db8:	f7ff ff06 	bl	8038bc8 <prvInsertTimerInActiveList>
					break;
 8038dbc:	e015      	b.n	8038dea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8038dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038dc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038dc4:	f003 0302 	and.w	r3, r3, #2
 8038dc8:	2b00      	cmp	r3, #0
 8038dca:	d103      	bne.n	8038dd4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8038dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038dce:	f000 fbdf 	bl	8039590 <vPortFree>
 8038dd2:	e00a      	b.n	8038dea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8038dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038dda:	f023 0301 	bic.w	r3, r3, #1
 8038dde:	b2da      	uxtb	r2, r3
 8038de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8038de6:	e000      	b.n	8038dea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8038de8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8038dea:	4b08      	ldr	r3, [pc, #32]	; (8038e0c <prvProcessReceivedCommands+0x1c0>)
 8038dec:	681b      	ldr	r3, [r3, #0]
 8038dee:	1d39      	adds	r1, r7, #4
 8038df0:	2200      	movs	r2, #0
 8038df2:	4618      	mov	r0, r3
 8038df4:	f7fd ff84 	bl	8036d00 <xQueueReceive>
 8038df8:	4603      	mov	r3, r0
 8038dfa:	2b00      	cmp	r3, #0
 8038dfc:	f47f af2a 	bne.w	8038c54 <prvProcessReceivedCommands+0x8>
	}
}
 8038e00:	bf00      	nop
 8038e02:	bf00      	nop
 8038e04:	3730      	adds	r7, #48	; 0x30
 8038e06:	46bd      	mov	sp, r7
 8038e08:	bd80      	pop	{r7, pc}
 8038e0a:	bf00      	nop
 8038e0c:	24002dd0 	.word	0x24002dd0

08038e10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8038e10:	b580      	push	{r7, lr}
 8038e12:	b088      	sub	sp, #32
 8038e14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8038e16:	e048      	b.n	8038eaa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8038e18:	4b2d      	ldr	r3, [pc, #180]	; (8038ed0 <prvSwitchTimerLists+0xc0>)
 8038e1a:	681b      	ldr	r3, [r3, #0]
 8038e1c:	68db      	ldr	r3, [r3, #12]
 8038e1e:	681b      	ldr	r3, [r3, #0]
 8038e20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8038e22:	4b2b      	ldr	r3, [pc, #172]	; (8038ed0 <prvSwitchTimerLists+0xc0>)
 8038e24:	681b      	ldr	r3, [r3, #0]
 8038e26:	68db      	ldr	r3, [r3, #12]
 8038e28:	68db      	ldr	r3, [r3, #12]
 8038e2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8038e2c:	68fb      	ldr	r3, [r7, #12]
 8038e2e:	3304      	adds	r3, #4
 8038e30:	4618      	mov	r0, r3
 8038e32:	f7fd fb8f 	bl	8036554 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8038e36:	68fb      	ldr	r3, [r7, #12]
 8038e38:	6a1b      	ldr	r3, [r3, #32]
 8038e3a:	68f8      	ldr	r0, [r7, #12]
 8038e3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8038e3e:	68fb      	ldr	r3, [r7, #12]
 8038e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038e44:	f003 0304 	and.w	r3, r3, #4
 8038e48:	2b00      	cmp	r3, #0
 8038e4a:	d02e      	beq.n	8038eaa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8038e4c:	68fb      	ldr	r3, [r7, #12]
 8038e4e:	699b      	ldr	r3, [r3, #24]
 8038e50:	693a      	ldr	r2, [r7, #16]
 8038e52:	4413      	add	r3, r2
 8038e54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8038e56:	68ba      	ldr	r2, [r7, #8]
 8038e58:	693b      	ldr	r3, [r7, #16]
 8038e5a:	429a      	cmp	r2, r3
 8038e5c:	d90e      	bls.n	8038e7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8038e5e:	68fb      	ldr	r3, [r7, #12]
 8038e60:	68ba      	ldr	r2, [r7, #8]
 8038e62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8038e64:	68fb      	ldr	r3, [r7, #12]
 8038e66:	68fa      	ldr	r2, [r7, #12]
 8038e68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8038e6a:	4b19      	ldr	r3, [pc, #100]	; (8038ed0 <prvSwitchTimerLists+0xc0>)
 8038e6c:	681a      	ldr	r2, [r3, #0]
 8038e6e:	68fb      	ldr	r3, [r7, #12]
 8038e70:	3304      	adds	r3, #4
 8038e72:	4619      	mov	r1, r3
 8038e74:	4610      	mov	r0, r2
 8038e76:	f7fd fb34 	bl	80364e2 <vListInsert>
 8038e7a:	e016      	b.n	8038eaa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8038e7c:	2300      	movs	r3, #0
 8038e7e:	9300      	str	r3, [sp, #0]
 8038e80:	2300      	movs	r3, #0
 8038e82:	693a      	ldr	r2, [r7, #16]
 8038e84:	2100      	movs	r1, #0
 8038e86:	68f8      	ldr	r0, [r7, #12]
 8038e88:	f7ff fd60 	bl	803894c <xTimerGenericCommand>
 8038e8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8038e8e:	687b      	ldr	r3, [r7, #4]
 8038e90:	2b00      	cmp	r3, #0
 8038e92:	d10a      	bne.n	8038eaa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8038e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038e98:	f383 8811 	msr	BASEPRI, r3
 8038e9c:	f3bf 8f6f 	isb	sy
 8038ea0:	f3bf 8f4f 	dsb	sy
 8038ea4:	603b      	str	r3, [r7, #0]
}
 8038ea6:	bf00      	nop
 8038ea8:	e7fe      	b.n	8038ea8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8038eaa:	4b09      	ldr	r3, [pc, #36]	; (8038ed0 <prvSwitchTimerLists+0xc0>)
 8038eac:	681b      	ldr	r3, [r3, #0]
 8038eae:	681b      	ldr	r3, [r3, #0]
 8038eb0:	2b00      	cmp	r3, #0
 8038eb2:	d1b1      	bne.n	8038e18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8038eb4:	4b06      	ldr	r3, [pc, #24]	; (8038ed0 <prvSwitchTimerLists+0xc0>)
 8038eb6:	681b      	ldr	r3, [r3, #0]
 8038eb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8038eba:	4b06      	ldr	r3, [pc, #24]	; (8038ed4 <prvSwitchTimerLists+0xc4>)
 8038ebc:	681b      	ldr	r3, [r3, #0]
 8038ebe:	4a04      	ldr	r2, [pc, #16]	; (8038ed0 <prvSwitchTimerLists+0xc0>)
 8038ec0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8038ec2:	4a04      	ldr	r2, [pc, #16]	; (8038ed4 <prvSwitchTimerLists+0xc4>)
 8038ec4:	697b      	ldr	r3, [r7, #20]
 8038ec6:	6013      	str	r3, [r2, #0]
}
 8038ec8:	bf00      	nop
 8038eca:	3718      	adds	r7, #24
 8038ecc:	46bd      	mov	sp, r7
 8038ece:	bd80      	pop	{r7, pc}
 8038ed0:	24002dc8 	.word	0x24002dc8
 8038ed4:	24002dcc 	.word	0x24002dcc

08038ed8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8038ed8:	b580      	push	{r7, lr}
 8038eda:	b082      	sub	sp, #8
 8038edc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8038ede:	f000 f969 	bl	80391b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8038ee2:	4b15      	ldr	r3, [pc, #84]	; (8038f38 <prvCheckForValidListAndQueue+0x60>)
 8038ee4:	681b      	ldr	r3, [r3, #0]
 8038ee6:	2b00      	cmp	r3, #0
 8038ee8:	d120      	bne.n	8038f2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8038eea:	4814      	ldr	r0, [pc, #80]	; (8038f3c <prvCheckForValidListAndQueue+0x64>)
 8038eec:	f7fd faa8 	bl	8036440 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8038ef0:	4813      	ldr	r0, [pc, #76]	; (8038f40 <prvCheckForValidListAndQueue+0x68>)
 8038ef2:	f7fd faa5 	bl	8036440 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8038ef6:	4b13      	ldr	r3, [pc, #76]	; (8038f44 <prvCheckForValidListAndQueue+0x6c>)
 8038ef8:	4a10      	ldr	r2, [pc, #64]	; (8038f3c <prvCheckForValidListAndQueue+0x64>)
 8038efa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8038efc:	4b12      	ldr	r3, [pc, #72]	; (8038f48 <prvCheckForValidListAndQueue+0x70>)
 8038efe:	4a10      	ldr	r2, [pc, #64]	; (8038f40 <prvCheckForValidListAndQueue+0x68>)
 8038f00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8038f02:	2300      	movs	r3, #0
 8038f04:	9300      	str	r3, [sp, #0]
 8038f06:	4b11      	ldr	r3, [pc, #68]	; (8038f4c <prvCheckForValidListAndQueue+0x74>)
 8038f08:	4a11      	ldr	r2, [pc, #68]	; (8038f50 <prvCheckForValidListAndQueue+0x78>)
 8038f0a:	2110      	movs	r1, #16
 8038f0c:	200a      	movs	r0, #10
 8038f0e:	f7fd fbb3 	bl	8036678 <xQueueGenericCreateStatic>
 8038f12:	4603      	mov	r3, r0
 8038f14:	4a08      	ldr	r2, [pc, #32]	; (8038f38 <prvCheckForValidListAndQueue+0x60>)
 8038f16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8038f18:	4b07      	ldr	r3, [pc, #28]	; (8038f38 <prvCheckForValidListAndQueue+0x60>)
 8038f1a:	681b      	ldr	r3, [r3, #0]
 8038f1c:	2b00      	cmp	r3, #0
 8038f1e:	d005      	beq.n	8038f2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8038f20:	4b05      	ldr	r3, [pc, #20]	; (8038f38 <prvCheckForValidListAndQueue+0x60>)
 8038f22:	681b      	ldr	r3, [r3, #0]
 8038f24:	490b      	ldr	r1, [pc, #44]	; (8038f54 <prvCheckForValidListAndQueue+0x7c>)
 8038f26:	4618      	mov	r0, r3
 8038f28:	f7fe faa2 	bl	8037470 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8038f2c:	f000 f972 	bl	8039214 <vPortExitCritical>
}
 8038f30:	bf00      	nop
 8038f32:	46bd      	mov	sp, r7
 8038f34:	bd80      	pop	{r7, pc}
 8038f36:	bf00      	nop
 8038f38:	24002dd0 	.word	0x24002dd0
 8038f3c:	24002da0 	.word	0x24002da0
 8038f40:	24002db4 	.word	0x24002db4
 8038f44:	24002dc8 	.word	0x24002dc8
 8038f48:	24002dcc 	.word	0x24002dcc
 8038f4c:	24002e7c 	.word	0x24002e7c
 8038f50:	24002ddc 	.word	0x24002ddc
 8038f54:	0803b904 	.word	0x0803b904

08038f58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8038f58:	b480      	push	{r7}
 8038f5a:	b085      	sub	sp, #20
 8038f5c:	af00      	add	r7, sp, #0
 8038f5e:	60f8      	str	r0, [r7, #12]
 8038f60:	60b9      	str	r1, [r7, #8]
 8038f62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8038f64:	68fb      	ldr	r3, [r7, #12]
 8038f66:	3b04      	subs	r3, #4
 8038f68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8038f6a:	68fb      	ldr	r3, [r7, #12]
 8038f6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8038f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8038f72:	68fb      	ldr	r3, [r7, #12]
 8038f74:	3b04      	subs	r3, #4
 8038f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8038f78:	68bb      	ldr	r3, [r7, #8]
 8038f7a:	f023 0201 	bic.w	r2, r3, #1
 8038f7e:	68fb      	ldr	r3, [r7, #12]
 8038f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8038f82:	68fb      	ldr	r3, [r7, #12]
 8038f84:	3b04      	subs	r3, #4
 8038f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8038f88:	4a0c      	ldr	r2, [pc, #48]	; (8038fbc <pxPortInitialiseStack+0x64>)
 8038f8a:	68fb      	ldr	r3, [r7, #12]
 8038f8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8038f8e:	68fb      	ldr	r3, [r7, #12]
 8038f90:	3b14      	subs	r3, #20
 8038f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8038f94:	687a      	ldr	r2, [r7, #4]
 8038f96:	68fb      	ldr	r3, [r7, #12]
 8038f98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8038f9a:	68fb      	ldr	r3, [r7, #12]
 8038f9c:	3b04      	subs	r3, #4
 8038f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8038fa0:	68fb      	ldr	r3, [r7, #12]
 8038fa2:	f06f 0202 	mvn.w	r2, #2
 8038fa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8038fa8:	68fb      	ldr	r3, [r7, #12]
 8038faa:	3b20      	subs	r3, #32
 8038fac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8038fae:	68fb      	ldr	r3, [r7, #12]
}
 8038fb0:	4618      	mov	r0, r3
 8038fb2:	3714      	adds	r7, #20
 8038fb4:	46bd      	mov	sp, r7
 8038fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038fba:	4770      	bx	lr
 8038fbc:	08038fc1 	.word	0x08038fc1

08038fc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8038fc0:	b480      	push	{r7}
 8038fc2:	b085      	sub	sp, #20
 8038fc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8038fc6:	2300      	movs	r3, #0
 8038fc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8038fca:	4b12      	ldr	r3, [pc, #72]	; (8039014 <prvTaskExitError+0x54>)
 8038fcc:	681b      	ldr	r3, [r3, #0]
 8038fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8038fd2:	d00a      	beq.n	8038fea <prvTaskExitError+0x2a>
	__asm volatile
 8038fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038fd8:	f383 8811 	msr	BASEPRI, r3
 8038fdc:	f3bf 8f6f 	isb	sy
 8038fe0:	f3bf 8f4f 	dsb	sy
 8038fe4:	60fb      	str	r3, [r7, #12]
}
 8038fe6:	bf00      	nop
 8038fe8:	e7fe      	b.n	8038fe8 <prvTaskExitError+0x28>
	__asm volatile
 8038fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038fee:	f383 8811 	msr	BASEPRI, r3
 8038ff2:	f3bf 8f6f 	isb	sy
 8038ff6:	f3bf 8f4f 	dsb	sy
 8038ffa:	60bb      	str	r3, [r7, #8]
}
 8038ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8038ffe:	bf00      	nop
 8039000:	687b      	ldr	r3, [r7, #4]
 8039002:	2b00      	cmp	r3, #0
 8039004:	d0fc      	beq.n	8039000 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8039006:	bf00      	nop
 8039008:	bf00      	nop
 803900a:	3714      	adds	r7, #20
 803900c:	46bd      	mov	sp, r7
 803900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039012:	4770      	bx	lr
 8039014:	24000030 	.word	0x24000030
	...

08039020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8039020:	4b07      	ldr	r3, [pc, #28]	; (8039040 <pxCurrentTCBConst2>)
 8039022:	6819      	ldr	r1, [r3, #0]
 8039024:	6808      	ldr	r0, [r1, #0]
 8039026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803902a:	f380 8809 	msr	PSP, r0
 803902e:	f3bf 8f6f 	isb	sy
 8039032:	f04f 0000 	mov.w	r0, #0
 8039036:	f380 8811 	msr	BASEPRI, r0
 803903a:	4770      	bx	lr
 803903c:	f3af 8000 	nop.w

08039040 <pxCurrentTCBConst2>:
 8039040:	24002c74 	.word	0x24002c74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8039044:	bf00      	nop
 8039046:	bf00      	nop

08039048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8039048:	4808      	ldr	r0, [pc, #32]	; (803906c <prvPortStartFirstTask+0x24>)
 803904a:	6800      	ldr	r0, [r0, #0]
 803904c:	6800      	ldr	r0, [r0, #0]
 803904e:	f380 8808 	msr	MSP, r0
 8039052:	f04f 0000 	mov.w	r0, #0
 8039056:	f380 8814 	msr	CONTROL, r0
 803905a:	b662      	cpsie	i
 803905c:	b661      	cpsie	f
 803905e:	f3bf 8f4f 	dsb	sy
 8039062:	f3bf 8f6f 	isb	sy
 8039066:	df00      	svc	0
 8039068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 803906a:	bf00      	nop
 803906c:	e000ed08 	.word	0xe000ed08

08039070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8039070:	b580      	push	{r7, lr}
 8039072:	b086      	sub	sp, #24
 8039074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8039076:	4b46      	ldr	r3, [pc, #280]	; (8039190 <xPortStartScheduler+0x120>)
 8039078:	681b      	ldr	r3, [r3, #0]
 803907a:	4a46      	ldr	r2, [pc, #280]	; (8039194 <xPortStartScheduler+0x124>)
 803907c:	4293      	cmp	r3, r2
 803907e:	d10a      	bne.n	8039096 <xPortStartScheduler+0x26>
	__asm volatile
 8039080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039084:	f383 8811 	msr	BASEPRI, r3
 8039088:	f3bf 8f6f 	isb	sy
 803908c:	f3bf 8f4f 	dsb	sy
 8039090:	613b      	str	r3, [r7, #16]
}
 8039092:	bf00      	nop
 8039094:	e7fe      	b.n	8039094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8039096:	4b3e      	ldr	r3, [pc, #248]	; (8039190 <xPortStartScheduler+0x120>)
 8039098:	681b      	ldr	r3, [r3, #0]
 803909a:	4a3f      	ldr	r2, [pc, #252]	; (8039198 <xPortStartScheduler+0x128>)
 803909c:	4293      	cmp	r3, r2
 803909e:	d10a      	bne.n	80390b6 <xPortStartScheduler+0x46>
	__asm volatile
 80390a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80390a4:	f383 8811 	msr	BASEPRI, r3
 80390a8:	f3bf 8f6f 	isb	sy
 80390ac:	f3bf 8f4f 	dsb	sy
 80390b0:	60fb      	str	r3, [r7, #12]
}
 80390b2:	bf00      	nop
 80390b4:	e7fe      	b.n	80390b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80390b6:	4b39      	ldr	r3, [pc, #228]	; (803919c <xPortStartScheduler+0x12c>)
 80390b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80390ba:	697b      	ldr	r3, [r7, #20]
 80390bc:	781b      	ldrb	r3, [r3, #0]
 80390be:	b2db      	uxtb	r3, r3
 80390c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80390c2:	697b      	ldr	r3, [r7, #20]
 80390c4:	22ff      	movs	r2, #255	; 0xff
 80390c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80390c8:	697b      	ldr	r3, [r7, #20]
 80390ca:	781b      	ldrb	r3, [r3, #0]
 80390cc:	b2db      	uxtb	r3, r3
 80390ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80390d0:	78fb      	ldrb	r3, [r7, #3]
 80390d2:	b2db      	uxtb	r3, r3
 80390d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80390d8:	b2da      	uxtb	r2, r3
 80390da:	4b31      	ldr	r3, [pc, #196]	; (80391a0 <xPortStartScheduler+0x130>)
 80390dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80390de:	4b31      	ldr	r3, [pc, #196]	; (80391a4 <xPortStartScheduler+0x134>)
 80390e0:	2207      	movs	r2, #7
 80390e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80390e4:	e009      	b.n	80390fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80390e6:	4b2f      	ldr	r3, [pc, #188]	; (80391a4 <xPortStartScheduler+0x134>)
 80390e8:	681b      	ldr	r3, [r3, #0]
 80390ea:	3b01      	subs	r3, #1
 80390ec:	4a2d      	ldr	r2, [pc, #180]	; (80391a4 <xPortStartScheduler+0x134>)
 80390ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80390f0:	78fb      	ldrb	r3, [r7, #3]
 80390f2:	b2db      	uxtb	r3, r3
 80390f4:	005b      	lsls	r3, r3, #1
 80390f6:	b2db      	uxtb	r3, r3
 80390f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80390fa:	78fb      	ldrb	r3, [r7, #3]
 80390fc:	b2db      	uxtb	r3, r3
 80390fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8039102:	2b80      	cmp	r3, #128	; 0x80
 8039104:	d0ef      	beq.n	80390e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8039106:	4b27      	ldr	r3, [pc, #156]	; (80391a4 <xPortStartScheduler+0x134>)
 8039108:	681b      	ldr	r3, [r3, #0]
 803910a:	f1c3 0307 	rsb	r3, r3, #7
 803910e:	2b04      	cmp	r3, #4
 8039110:	d00a      	beq.n	8039128 <xPortStartScheduler+0xb8>
	__asm volatile
 8039112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039116:	f383 8811 	msr	BASEPRI, r3
 803911a:	f3bf 8f6f 	isb	sy
 803911e:	f3bf 8f4f 	dsb	sy
 8039122:	60bb      	str	r3, [r7, #8]
}
 8039124:	bf00      	nop
 8039126:	e7fe      	b.n	8039126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8039128:	4b1e      	ldr	r3, [pc, #120]	; (80391a4 <xPortStartScheduler+0x134>)
 803912a:	681b      	ldr	r3, [r3, #0]
 803912c:	021b      	lsls	r3, r3, #8
 803912e:	4a1d      	ldr	r2, [pc, #116]	; (80391a4 <xPortStartScheduler+0x134>)
 8039130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8039132:	4b1c      	ldr	r3, [pc, #112]	; (80391a4 <xPortStartScheduler+0x134>)
 8039134:	681b      	ldr	r3, [r3, #0]
 8039136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 803913a:	4a1a      	ldr	r2, [pc, #104]	; (80391a4 <xPortStartScheduler+0x134>)
 803913c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 803913e:	687b      	ldr	r3, [r7, #4]
 8039140:	b2da      	uxtb	r2, r3
 8039142:	697b      	ldr	r3, [r7, #20]
 8039144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8039146:	4b18      	ldr	r3, [pc, #96]	; (80391a8 <xPortStartScheduler+0x138>)
 8039148:	681b      	ldr	r3, [r3, #0]
 803914a:	4a17      	ldr	r2, [pc, #92]	; (80391a8 <xPortStartScheduler+0x138>)
 803914c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8039150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8039152:	4b15      	ldr	r3, [pc, #84]	; (80391a8 <xPortStartScheduler+0x138>)
 8039154:	681b      	ldr	r3, [r3, #0]
 8039156:	4a14      	ldr	r2, [pc, #80]	; (80391a8 <xPortStartScheduler+0x138>)
 8039158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 803915c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 803915e:	f000 f8dd 	bl	803931c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8039162:	4b12      	ldr	r3, [pc, #72]	; (80391ac <xPortStartScheduler+0x13c>)
 8039164:	2200      	movs	r2, #0
 8039166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8039168:	f000 f8fc 	bl	8039364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 803916c:	4b10      	ldr	r3, [pc, #64]	; (80391b0 <xPortStartScheduler+0x140>)
 803916e:	681b      	ldr	r3, [r3, #0]
 8039170:	4a0f      	ldr	r2, [pc, #60]	; (80391b0 <xPortStartScheduler+0x140>)
 8039172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8039176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8039178:	f7ff ff66 	bl	8039048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 803917c:	f7fe fda0 	bl	8037cc0 <vTaskSwitchContext>
	prvTaskExitError();
 8039180:	f7ff ff1e 	bl	8038fc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8039184:	2300      	movs	r3, #0
}
 8039186:	4618      	mov	r0, r3
 8039188:	3718      	adds	r7, #24
 803918a:	46bd      	mov	sp, r7
 803918c:	bd80      	pop	{r7, pc}
 803918e:	bf00      	nop
 8039190:	e000ed00 	.word	0xe000ed00
 8039194:	410fc271 	.word	0x410fc271
 8039198:	410fc270 	.word	0x410fc270
 803919c:	e000e400 	.word	0xe000e400
 80391a0:	24002ec4 	.word	0x24002ec4
 80391a4:	24002ec8 	.word	0x24002ec8
 80391a8:	e000ed20 	.word	0xe000ed20
 80391ac:	24000030 	.word	0x24000030
 80391b0:	e000ef34 	.word	0xe000ef34

080391b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80391b4:	b480      	push	{r7}
 80391b6:	b083      	sub	sp, #12
 80391b8:	af00      	add	r7, sp, #0
	__asm volatile
 80391ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80391be:	f383 8811 	msr	BASEPRI, r3
 80391c2:	f3bf 8f6f 	isb	sy
 80391c6:	f3bf 8f4f 	dsb	sy
 80391ca:	607b      	str	r3, [r7, #4]
}
 80391cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80391ce:	4b0f      	ldr	r3, [pc, #60]	; (803920c <vPortEnterCritical+0x58>)
 80391d0:	681b      	ldr	r3, [r3, #0]
 80391d2:	3301      	adds	r3, #1
 80391d4:	4a0d      	ldr	r2, [pc, #52]	; (803920c <vPortEnterCritical+0x58>)
 80391d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80391d8:	4b0c      	ldr	r3, [pc, #48]	; (803920c <vPortEnterCritical+0x58>)
 80391da:	681b      	ldr	r3, [r3, #0]
 80391dc:	2b01      	cmp	r3, #1
 80391de:	d10f      	bne.n	8039200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80391e0:	4b0b      	ldr	r3, [pc, #44]	; (8039210 <vPortEnterCritical+0x5c>)
 80391e2:	681b      	ldr	r3, [r3, #0]
 80391e4:	b2db      	uxtb	r3, r3
 80391e6:	2b00      	cmp	r3, #0
 80391e8:	d00a      	beq.n	8039200 <vPortEnterCritical+0x4c>
	__asm volatile
 80391ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80391ee:	f383 8811 	msr	BASEPRI, r3
 80391f2:	f3bf 8f6f 	isb	sy
 80391f6:	f3bf 8f4f 	dsb	sy
 80391fa:	603b      	str	r3, [r7, #0]
}
 80391fc:	bf00      	nop
 80391fe:	e7fe      	b.n	80391fe <vPortEnterCritical+0x4a>
	}
}
 8039200:	bf00      	nop
 8039202:	370c      	adds	r7, #12
 8039204:	46bd      	mov	sp, r7
 8039206:	f85d 7b04 	ldr.w	r7, [sp], #4
 803920a:	4770      	bx	lr
 803920c:	24000030 	.word	0x24000030
 8039210:	e000ed04 	.word	0xe000ed04

08039214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8039214:	b480      	push	{r7}
 8039216:	b083      	sub	sp, #12
 8039218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 803921a:	4b12      	ldr	r3, [pc, #72]	; (8039264 <vPortExitCritical+0x50>)
 803921c:	681b      	ldr	r3, [r3, #0]
 803921e:	2b00      	cmp	r3, #0
 8039220:	d10a      	bne.n	8039238 <vPortExitCritical+0x24>
	__asm volatile
 8039222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039226:	f383 8811 	msr	BASEPRI, r3
 803922a:	f3bf 8f6f 	isb	sy
 803922e:	f3bf 8f4f 	dsb	sy
 8039232:	607b      	str	r3, [r7, #4]
}
 8039234:	bf00      	nop
 8039236:	e7fe      	b.n	8039236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8039238:	4b0a      	ldr	r3, [pc, #40]	; (8039264 <vPortExitCritical+0x50>)
 803923a:	681b      	ldr	r3, [r3, #0]
 803923c:	3b01      	subs	r3, #1
 803923e:	4a09      	ldr	r2, [pc, #36]	; (8039264 <vPortExitCritical+0x50>)
 8039240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8039242:	4b08      	ldr	r3, [pc, #32]	; (8039264 <vPortExitCritical+0x50>)
 8039244:	681b      	ldr	r3, [r3, #0]
 8039246:	2b00      	cmp	r3, #0
 8039248:	d105      	bne.n	8039256 <vPortExitCritical+0x42>
 803924a:	2300      	movs	r3, #0
 803924c:	603b      	str	r3, [r7, #0]
	__asm volatile
 803924e:	683b      	ldr	r3, [r7, #0]
 8039250:	f383 8811 	msr	BASEPRI, r3
}
 8039254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8039256:	bf00      	nop
 8039258:	370c      	adds	r7, #12
 803925a:	46bd      	mov	sp, r7
 803925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039260:	4770      	bx	lr
 8039262:	bf00      	nop
 8039264:	24000030 	.word	0x24000030
	...

08039270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8039270:	f3ef 8009 	mrs	r0, PSP
 8039274:	f3bf 8f6f 	isb	sy
 8039278:	4b15      	ldr	r3, [pc, #84]	; (80392d0 <pxCurrentTCBConst>)
 803927a:	681a      	ldr	r2, [r3, #0]
 803927c:	f01e 0f10 	tst.w	lr, #16
 8039280:	bf08      	it	eq
 8039282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8039286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803928a:	6010      	str	r0, [r2, #0]
 803928c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8039290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8039294:	f380 8811 	msr	BASEPRI, r0
 8039298:	f3bf 8f4f 	dsb	sy
 803929c:	f3bf 8f6f 	isb	sy
 80392a0:	f7fe fd0e 	bl	8037cc0 <vTaskSwitchContext>
 80392a4:	f04f 0000 	mov.w	r0, #0
 80392a8:	f380 8811 	msr	BASEPRI, r0
 80392ac:	bc09      	pop	{r0, r3}
 80392ae:	6819      	ldr	r1, [r3, #0]
 80392b0:	6808      	ldr	r0, [r1, #0]
 80392b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80392b6:	f01e 0f10 	tst.w	lr, #16
 80392ba:	bf08      	it	eq
 80392bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80392c0:	f380 8809 	msr	PSP, r0
 80392c4:	f3bf 8f6f 	isb	sy
 80392c8:	4770      	bx	lr
 80392ca:	bf00      	nop
 80392cc:	f3af 8000 	nop.w

080392d0 <pxCurrentTCBConst>:
 80392d0:	24002c74 	.word	0x24002c74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80392d4:	bf00      	nop
 80392d6:	bf00      	nop

080392d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80392d8:	b580      	push	{r7, lr}
 80392da:	b082      	sub	sp, #8
 80392dc:	af00      	add	r7, sp, #0
	__asm volatile
 80392de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80392e2:	f383 8811 	msr	BASEPRI, r3
 80392e6:	f3bf 8f6f 	isb	sy
 80392ea:	f3bf 8f4f 	dsb	sy
 80392ee:	607b      	str	r3, [r7, #4]
}
 80392f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80392f2:	f7fe fc2d 	bl	8037b50 <xTaskIncrementTick>
 80392f6:	4603      	mov	r3, r0
 80392f8:	2b00      	cmp	r3, #0
 80392fa:	d003      	beq.n	8039304 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80392fc:	4b06      	ldr	r3, [pc, #24]	; (8039318 <SysTick_Handler+0x40>)
 80392fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8039302:	601a      	str	r2, [r3, #0]
 8039304:	2300      	movs	r3, #0
 8039306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8039308:	683b      	ldr	r3, [r7, #0]
 803930a:	f383 8811 	msr	BASEPRI, r3
}
 803930e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8039310:	bf00      	nop
 8039312:	3708      	adds	r7, #8
 8039314:	46bd      	mov	sp, r7
 8039316:	bd80      	pop	{r7, pc}
 8039318:	e000ed04 	.word	0xe000ed04

0803931c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 803931c:	b480      	push	{r7}
 803931e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8039320:	4b0b      	ldr	r3, [pc, #44]	; (8039350 <vPortSetupTimerInterrupt+0x34>)
 8039322:	2200      	movs	r2, #0
 8039324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8039326:	4b0b      	ldr	r3, [pc, #44]	; (8039354 <vPortSetupTimerInterrupt+0x38>)
 8039328:	2200      	movs	r2, #0
 803932a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 803932c:	4b0a      	ldr	r3, [pc, #40]	; (8039358 <vPortSetupTimerInterrupt+0x3c>)
 803932e:	681b      	ldr	r3, [r3, #0]
 8039330:	4a0a      	ldr	r2, [pc, #40]	; (803935c <vPortSetupTimerInterrupt+0x40>)
 8039332:	fba2 2303 	umull	r2, r3, r2, r3
 8039336:	099b      	lsrs	r3, r3, #6
 8039338:	4a09      	ldr	r2, [pc, #36]	; (8039360 <vPortSetupTimerInterrupt+0x44>)
 803933a:	3b01      	subs	r3, #1
 803933c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 803933e:	4b04      	ldr	r3, [pc, #16]	; (8039350 <vPortSetupTimerInterrupt+0x34>)
 8039340:	2207      	movs	r2, #7
 8039342:	601a      	str	r2, [r3, #0]
}
 8039344:	bf00      	nop
 8039346:	46bd      	mov	sp, r7
 8039348:	f85d 7b04 	ldr.w	r7, [sp], #4
 803934c:	4770      	bx	lr
 803934e:	bf00      	nop
 8039350:	e000e010 	.word	0xe000e010
 8039354:	e000e018 	.word	0xe000e018
 8039358:	24000000 	.word	0x24000000
 803935c:	10624dd3 	.word	0x10624dd3
 8039360:	e000e014 	.word	0xe000e014

08039364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8039364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8039374 <vPortEnableVFP+0x10>
 8039368:	6801      	ldr	r1, [r0, #0]
 803936a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 803936e:	6001      	str	r1, [r0, #0]
 8039370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8039372:	bf00      	nop
 8039374:	e000ed88 	.word	0xe000ed88

08039378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8039378:	b480      	push	{r7}
 803937a:	b085      	sub	sp, #20
 803937c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 803937e:	f3ef 8305 	mrs	r3, IPSR
 8039382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8039384:	68fb      	ldr	r3, [r7, #12]
 8039386:	2b0f      	cmp	r3, #15
 8039388:	d914      	bls.n	80393b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 803938a:	4a17      	ldr	r2, [pc, #92]	; (80393e8 <vPortValidateInterruptPriority+0x70>)
 803938c:	68fb      	ldr	r3, [r7, #12]
 803938e:	4413      	add	r3, r2
 8039390:	781b      	ldrb	r3, [r3, #0]
 8039392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8039394:	4b15      	ldr	r3, [pc, #84]	; (80393ec <vPortValidateInterruptPriority+0x74>)
 8039396:	781b      	ldrb	r3, [r3, #0]
 8039398:	7afa      	ldrb	r2, [r7, #11]
 803939a:	429a      	cmp	r2, r3
 803939c:	d20a      	bcs.n	80393b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 803939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80393a2:	f383 8811 	msr	BASEPRI, r3
 80393a6:	f3bf 8f6f 	isb	sy
 80393aa:	f3bf 8f4f 	dsb	sy
 80393ae:	607b      	str	r3, [r7, #4]
}
 80393b0:	bf00      	nop
 80393b2:	e7fe      	b.n	80393b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80393b4:	4b0e      	ldr	r3, [pc, #56]	; (80393f0 <vPortValidateInterruptPriority+0x78>)
 80393b6:	681b      	ldr	r3, [r3, #0]
 80393b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80393bc:	4b0d      	ldr	r3, [pc, #52]	; (80393f4 <vPortValidateInterruptPriority+0x7c>)
 80393be:	681b      	ldr	r3, [r3, #0]
 80393c0:	429a      	cmp	r2, r3
 80393c2:	d90a      	bls.n	80393da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80393c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80393c8:	f383 8811 	msr	BASEPRI, r3
 80393cc:	f3bf 8f6f 	isb	sy
 80393d0:	f3bf 8f4f 	dsb	sy
 80393d4:	603b      	str	r3, [r7, #0]
}
 80393d6:	bf00      	nop
 80393d8:	e7fe      	b.n	80393d8 <vPortValidateInterruptPriority+0x60>
	}
 80393da:	bf00      	nop
 80393dc:	3714      	adds	r7, #20
 80393de:	46bd      	mov	sp, r7
 80393e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80393e4:	4770      	bx	lr
 80393e6:	bf00      	nop
 80393e8:	e000e3f0 	.word	0xe000e3f0
 80393ec:	24002ec4 	.word	0x24002ec4
 80393f0:	e000ed0c 	.word	0xe000ed0c
 80393f4:	24002ec8 	.word	0x24002ec8

080393f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80393f8:	b580      	push	{r7, lr}
 80393fa:	b08a      	sub	sp, #40	; 0x28
 80393fc:	af00      	add	r7, sp, #0
 80393fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8039400:	2300      	movs	r3, #0
 8039402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8039404:	f7fe faea 	bl	80379dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8039408:	4b5b      	ldr	r3, [pc, #364]	; (8039578 <pvPortMalloc+0x180>)
 803940a:	681b      	ldr	r3, [r3, #0]
 803940c:	2b00      	cmp	r3, #0
 803940e:	d101      	bne.n	8039414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8039410:	f000 f920 	bl	8039654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8039414:	4b59      	ldr	r3, [pc, #356]	; (803957c <pvPortMalloc+0x184>)
 8039416:	681a      	ldr	r2, [r3, #0]
 8039418:	687b      	ldr	r3, [r7, #4]
 803941a:	4013      	ands	r3, r2
 803941c:	2b00      	cmp	r3, #0
 803941e:	f040 8093 	bne.w	8039548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8039422:	687b      	ldr	r3, [r7, #4]
 8039424:	2b00      	cmp	r3, #0
 8039426:	d01d      	beq.n	8039464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8039428:	2208      	movs	r2, #8
 803942a:	687b      	ldr	r3, [r7, #4]
 803942c:	4413      	add	r3, r2
 803942e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8039430:	687b      	ldr	r3, [r7, #4]
 8039432:	f003 0307 	and.w	r3, r3, #7
 8039436:	2b00      	cmp	r3, #0
 8039438:	d014      	beq.n	8039464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 803943a:	687b      	ldr	r3, [r7, #4]
 803943c:	f023 0307 	bic.w	r3, r3, #7
 8039440:	3308      	adds	r3, #8
 8039442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8039444:	687b      	ldr	r3, [r7, #4]
 8039446:	f003 0307 	and.w	r3, r3, #7
 803944a:	2b00      	cmp	r3, #0
 803944c:	d00a      	beq.n	8039464 <pvPortMalloc+0x6c>
	__asm volatile
 803944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039452:	f383 8811 	msr	BASEPRI, r3
 8039456:	f3bf 8f6f 	isb	sy
 803945a:	f3bf 8f4f 	dsb	sy
 803945e:	617b      	str	r3, [r7, #20]
}
 8039460:	bf00      	nop
 8039462:	e7fe      	b.n	8039462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8039464:	687b      	ldr	r3, [r7, #4]
 8039466:	2b00      	cmp	r3, #0
 8039468:	d06e      	beq.n	8039548 <pvPortMalloc+0x150>
 803946a:	4b45      	ldr	r3, [pc, #276]	; (8039580 <pvPortMalloc+0x188>)
 803946c:	681b      	ldr	r3, [r3, #0]
 803946e:	687a      	ldr	r2, [r7, #4]
 8039470:	429a      	cmp	r2, r3
 8039472:	d869      	bhi.n	8039548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8039474:	4b43      	ldr	r3, [pc, #268]	; (8039584 <pvPortMalloc+0x18c>)
 8039476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8039478:	4b42      	ldr	r3, [pc, #264]	; (8039584 <pvPortMalloc+0x18c>)
 803947a:	681b      	ldr	r3, [r3, #0]
 803947c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 803947e:	e004      	b.n	803948a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8039480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8039484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039486:	681b      	ldr	r3, [r3, #0]
 8039488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 803948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803948c:	685b      	ldr	r3, [r3, #4]
 803948e:	687a      	ldr	r2, [r7, #4]
 8039490:	429a      	cmp	r2, r3
 8039492:	d903      	bls.n	803949c <pvPortMalloc+0xa4>
 8039494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039496:	681b      	ldr	r3, [r3, #0]
 8039498:	2b00      	cmp	r3, #0
 803949a:	d1f1      	bne.n	8039480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 803949c:	4b36      	ldr	r3, [pc, #216]	; (8039578 <pvPortMalloc+0x180>)
 803949e:	681b      	ldr	r3, [r3, #0]
 80394a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80394a2:	429a      	cmp	r2, r3
 80394a4:	d050      	beq.n	8039548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80394a6:	6a3b      	ldr	r3, [r7, #32]
 80394a8:	681b      	ldr	r3, [r3, #0]
 80394aa:	2208      	movs	r2, #8
 80394ac:	4413      	add	r3, r2
 80394ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80394b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80394b2:	681a      	ldr	r2, [r3, #0]
 80394b4:	6a3b      	ldr	r3, [r7, #32]
 80394b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80394b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80394ba:	685a      	ldr	r2, [r3, #4]
 80394bc:	687b      	ldr	r3, [r7, #4]
 80394be:	1ad2      	subs	r2, r2, r3
 80394c0:	2308      	movs	r3, #8
 80394c2:	005b      	lsls	r3, r3, #1
 80394c4:	429a      	cmp	r2, r3
 80394c6:	d91f      	bls.n	8039508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80394c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80394ca:	687b      	ldr	r3, [r7, #4]
 80394cc:	4413      	add	r3, r2
 80394ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80394d0:	69bb      	ldr	r3, [r7, #24]
 80394d2:	f003 0307 	and.w	r3, r3, #7
 80394d6:	2b00      	cmp	r3, #0
 80394d8:	d00a      	beq.n	80394f0 <pvPortMalloc+0xf8>
	__asm volatile
 80394da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80394de:	f383 8811 	msr	BASEPRI, r3
 80394e2:	f3bf 8f6f 	isb	sy
 80394e6:	f3bf 8f4f 	dsb	sy
 80394ea:	613b      	str	r3, [r7, #16]
}
 80394ec:	bf00      	nop
 80394ee:	e7fe      	b.n	80394ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80394f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80394f2:	685a      	ldr	r2, [r3, #4]
 80394f4:	687b      	ldr	r3, [r7, #4]
 80394f6:	1ad2      	subs	r2, r2, r3
 80394f8:	69bb      	ldr	r3, [r7, #24]
 80394fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80394fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80394fe:	687a      	ldr	r2, [r7, #4]
 8039500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8039502:	69b8      	ldr	r0, [r7, #24]
 8039504:	f000 f908 	bl	8039718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8039508:	4b1d      	ldr	r3, [pc, #116]	; (8039580 <pvPortMalloc+0x188>)
 803950a:	681a      	ldr	r2, [r3, #0]
 803950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803950e:	685b      	ldr	r3, [r3, #4]
 8039510:	1ad3      	subs	r3, r2, r3
 8039512:	4a1b      	ldr	r2, [pc, #108]	; (8039580 <pvPortMalloc+0x188>)
 8039514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8039516:	4b1a      	ldr	r3, [pc, #104]	; (8039580 <pvPortMalloc+0x188>)
 8039518:	681a      	ldr	r2, [r3, #0]
 803951a:	4b1b      	ldr	r3, [pc, #108]	; (8039588 <pvPortMalloc+0x190>)
 803951c:	681b      	ldr	r3, [r3, #0]
 803951e:	429a      	cmp	r2, r3
 8039520:	d203      	bcs.n	803952a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8039522:	4b17      	ldr	r3, [pc, #92]	; (8039580 <pvPortMalloc+0x188>)
 8039524:	681b      	ldr	r3, [r3, #0]
 8039526:	4a18      	ldr	r2, [pc, #96]	; (8039588 <pvPortMalloc+0x190>)
 8039528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 803952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803952c:	685a      	ldr	r2, [r3, #4]
 803952e:	4b13      	ldr	r3, [pc, #76]	; (803957c <pvPortMalloc+0x184>)
 8039530:	681b      	ldr	r3, [r3, #0]
 8039532:	431a      	orrs	r2, r3
 8039534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8039538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803953a:	2200      	movs	r2, #0
 803953c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 803953e:	4b13      	ldr	r3, [pc, #76]	; (803958c <pvPortMalloc+0x194>)
 8039540:	681b      	ldr	r3, [r3, #0]
 8039542:	3301      	adds	r3, #1
 8039544:	4a11      	ldr	r2, [pc, #68]	; (803958c <pvPortMalloc+0x194>)
 8039546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8039548:	f7fe fa56 	bl	80379f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 803954c:	69fb      	ldr	r3, [r7, #28]
 803954e:	f003 0307 	and.w	r3, r3, #7
 8039552:	2b00      	cmp	r3, #0
 8039554:	d00a      	beq.n	803956c <pvPortMalloc+0x174>
	__asm volatile
 8039556:	f04f 0350 	mov.w	r3, #80	; 0x50
 803955a:	f383 8811 	msr	BASEPRI, r3
 803955e:	f3bf 8f6f 	isb	sy
 8039562:	f3bf 8f4f 	dsb	sy
 8039566:	60fb      	str	r3, [r7, #12]
}
 8039568:	bf00      	nop
 803956a:	e7fe      	b.n	803956a <pvPortMalloc+0x172>
	return pvReturn;
 803956c:	69fb      	ldr	r3, [r7, #28]
}
 803956e:	4618      	mov	r0, r3
 8039570:	3728      	adds	r7, #40	; 0x28
 8039572:	46bd      	mov	sp, r7
 8039574:	bd80      	pop	{r7, pc}
 8039576:	bf00      	nop
 8039578:	24006ad4 	.word	0x24006ad4
 803957c:	24006ae8 	.word	0x24006ae8
 8039580:	24006ad8 	.word	0x24006ad8
 8039584:	24006acc 	.word	0x24006acc
 8039588:	24006adc 	.word	0x24006adc
 803958c:	24006ae0 	.word	0x24006ae0

08039590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8039590:	b580      	push	{r7, lr}
 8039592:	b086      	sub	sp, #24
 8039594:	af00      	add	r7, sp, #0
 8039596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8039598:	687b      	ldr	r3, [r7, #4]
 803959a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 803959c:	687b      	ldr	r3, [r7, #4]
 803959e:	2b00      	cmp	r3, #0
 80395a0:	d04d      	beq.n	803963e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80395a2:	2308      	movs	r3, #8
 80395a4:	425b      	negs	r3, r3
 80395a6:	697a      	ldr	r2, [r7, #20]
 80395a8:	4413      	add	r3, r2
 80395aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80395ac:	697b      	ldr	r3, [r7, #20]
 80395ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80395b0:	693b      	ldr	r3, [r7, #16]
 80395b2:	685a      	ldr	r2, [r3, #4]
 80395b4:	4b24      	ldr	r3, [pc, #144]	; (8039648 <vPortFree+0xb8>)
 80395b6:	681b      	ldr	r3, [r3, #0]
 80395b8:	4013      	ands	r3, r2
 80395ba:	2b00      	cmp	r3, #0
 80395bc:	d10a      	bne.n	80395d4 <vPortFree+0x44>
	__asm volatile
 80395be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80395c2:	f383 8811 	msr	BASEPRI, r3
 80395c6:	f3bf 8f6f 	isb	sy
 80395ca:	f3bf 8f4f 	dsb	sy
 80395ce:	60fb      	str	r3, [r7, #12]
}
 80395d0:	bf00      	nop
 80395d2:	e7fe      	b.n	80395d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80395d4:	693b      	ldr	r3, [r7, #16]
 80395d6:	681b      	ldr	r3, [r3, #0]
 80395d8:	2b00      	cmp	r3, #0
 80395da:	d00a      	beq.n	80395f2 <vPortFree+0x62>
	__asm volatile
 80395dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80395e0:	f383 8811 	msr	BASEPRI, r3
 80395e4:	f3bf 8f6f 	isb	sy
 80395e8:	f3bf 8f4f 	dsb	sy
 80395ec:	60bb      	str	r3, [r7, #8]
}
 80395ee:	bf00      	nop
 80395f0:	e7fe      	b.n	80395f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80395f2:	693b      	ldr	r3, [r7, #16]
 80395f4:	685a      	ldr	r2, [r3, #4]
 80395f6:	4b14      	ldr	r3, [pc, #80]	; (8039648 <vPortFree+0xb8>)
 80395f8:	681b      	ldr	r3, [r3, #0]
 80395fa:	4013      	ands	r3, r2
 80395fc:	2b00      	cmp	r3, #0
 80395fe:	d01e      	beq.n	803963e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8039600:	693b      	ldr	r3, [r7, #16]
 8039602:	681b      	ldr	r3, [r3, #0]
 8039604:	2b00      	cmp	r3, #0
 8039606:	d11a      	bne.n	803963e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8039608:	693b      	ldr	r3, [r7, #16]
 803960a:	685a      	ldr	r2, [r3, #4]
 803960c:	4b0e      	ldr	r3, [pc, #56]	; (8039648 <vPortFree+0xb8>)
 803960e:	681b      	ldr	r3, [r3, #0]
 8039610:	43db      	mvns	r3, r3
 8039612:	401a      	ands	r2, r3
 8039614:	693b      	ldr	r3, [r7, #16]
 8039616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8039618:	f7fe f9e0 	bl	80379dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 803961c:	693b      	ldr	r3, [r7, #16]
 803961e:	685a      	ldr	r2, [r3, #4]
 8039620:	4b0a      	ldr	r3, [pc, #40]	; (803964c <vPortFree+0xbc>)
 8039622:	681b      	ldr	r3, [r3, #0]
 8039624:	4413      	add	r3, r2
 8039626:	4a09      	ldr	r2, [pc, #36]	; (803964c <vPortFree+0xbc>)
 8039628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 803962a:	6938      	ldr	r0, [r7, #16]
 803962c:	f000 f874 	bl	8039718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8039630:	4b07      	ldr	r3, [pc, #28]	; (8039650 <vPortFree+0xc0>)
 8039632:	681b      	ldr	r3, [r3, #0]
 8039634:	3301      	adds	r3, #1
 8039636:	4a06      	ldr	r2, [pc, #24]	; (8039650 <vPortFree+0xc0>)
 8039638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 803963a:	f7fe f9dd 	bl	80379f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 803963e:	bf00      	nop
 8039640:	3718      	adds	r7, #24
 8039642:	46bd      	mov	sp, r7
 8039644:	bd80      	pop	{r7, pc}
 8039646:	bf00      	nop
 8039648:	24006ae8 	.word	0x24006ae8
 803964c:	24006ad8 	.word	0x24006ad8
 8039650:	24006ae4 	.word	0x24006ae4

08039654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8039654:	b480      	push	{r7}
 8039656:	b085      	sub	sp, #20
 8039658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 803965a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 803965e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8039660:	4b27      	ldr	r3, [pc, #156]	; (8039700 <prvHeapInit+0xac>)
 8039662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8039664:	68fb      	ldr	r3, [r7, #12]
 8039666:	f003 0307 	and.w	r3, r3, #7
 803966a:	2b00      	cmp	r3, #0
 803966c:	d00c      	beq.n	8039688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 803966e:	68fb      	ldr	r3, [r7, #12]
 8039670:	3307      	adds	r3, #7
 8039672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8039674:	68fb      	ldr	r3, [r7, #12]
 8039676:	f023 0307 	bic.w	r3, r3, #7
 803967a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 803967c:	68ba      	ldr	r2, [r7, #8]
 803967e:	68fb      	ldr	r3, [r7, #12]
 8039680:	1ad3      	subs	r3, r2, r3
 8039682:	4a1f      	ldr	r2, [pc, #124]	; (8039700 <prvHeapInit+0xac>)
 8039684:	4413      	add	r3, r2
 8039686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8039688:	68fb      	ldr	r3, [r7, #12]
 803968a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 803968c:	4a1d      	ldr	r2, [pc, #116]	; (8039704 <prvHeapInit+0xb0>)
 803968e:	687b      	ldr	r3, [r7, #4]
 8039690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8039692:	4b1c      	ldr	r3, [pc, #112]	; (8039704 <prvHeapInit+0xb0>)
 8039694:	2200      	movs	r2, #0
 8039696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8039698:	687b      	ldr	r3, [r7, #4]
 803969a:	68ba      	ldr	r2, [r7, #8]
 803969c:	4413      	add	r3, r2
 803969e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80396a0:	2208      	movs	r2, #8
 80396a2:	68fb      	ldr	r3, [r7, #12]
 80396a4:	1a9b      	subs	r3, r3, r2
 80396a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80396a8:	68fb      	ldr	r3, [r7, #12]
 80396aa:	f023 0307 	bic.w	r3, r3, #7
 80396ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80396b0:	68fb      	ldr	r3, [r7, #12]
 80396b2:	4a15      	ldr	r2, [pc, #84]	; (8039708 <prvHeapInit+0xb4>)
 80396b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80396b6:	4b14      	ldr	r3, [pc, #80]	; (8039708 <prvHeapInit+0xb4>)
 80396b8:	681b      	ldr	r3, [r3, #0]
 80396ba:	2200      	movs	r2, #0
 80396bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80396be:	4b12      	ldr	r3, [pc, #72]	; (8039708 <prvHeapInit+0xb4>)
 80396c0:	681b      	ldr	r3, [r3, #0]
 80396c2:	2200      	movs	r2, #0
 80396c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80396c6:	687b      	ldr	r3, [r7, #4]
 80396c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80396ca:	683b      	ldr	r3, [r7, #0]
 80396cc:	68fa      	ldr	r2, [r7, #12]
 80396ce:	1ad2      	subs	r2, r2, r3
 80396d0:	683b      	ldr	r3, [r7, #0]
 80396d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80396d4:	4b0c      	ldr	r3, [pc, #48]	; (8039708 <prvHeapInit+0xb4>)
 80396d6:	681a      	ldr	r2, [r3, #0]
 80396d8:	683b      	ldr	r3, [r7, #0]
 80396da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80396dc:	683b      	ldr	r3, [r7, #0]
 80396de:	685b      	ldr	r3, [r3, #4]
 80396e0:	4a0a      	ldr	r2, [pc, #40]	; (803970c <prvHeapInit+0xb8>)
 80396e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80396e4:	683b      	ldr	r3, [r7, #0]
 80396e6:	685b      	ldr	r3, [r3, #4]
 80396e8:	4a09      	ldr	r2, [pc, #36]	; (8039710 <prvHeapInit+0xbc>)
 80396ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80396ec:	4b09      	ldr	r3, [pc, #36]	; (8039714 <prvHeapInit+0xc0>)
 80396ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80396f2:	601a      	str	r2, [r3, #0]
}
 80396f4:	bf00      	nop
 80396f6:	3714      	adds	r7, #20
 80396f8:	46bd      	mov	sp, r7
 80396fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80396fe:	4770      	bx	lr
 8039700:	24002ecc 	.word	0x24002ecc
 8039704:	24006acc 	.word	0x24006acc
 8039708:	24006ad4 	.word	0x24006ad4
 803970c:	24006adc 	.word	0x24006adc
 8039710:	24006ad8 	.word	0x24006ad8
 8039714:	24006ae8 	.word	0x24006ae8

08039718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8039718:	b480      	push	{r7}
 803971a:	b085      	sub	sp, #20
 803971c:	af00      	add	r7, sp, #0
 803971e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8039720:	4b28      	ldr	r3, [pc, #160]	; (80397c4 <prvInsertBlockIntoFreeList+0xac>)
 8039722:	60fb      	str	r3, [r7, #12]
 8039724:	e002      	b.n	803972c <prvInsertBlockIntoFreeList+0x14>
 8039726:	68fb      	ldr	r3, [r7, #12]
 8039728:	681b      	ldr	r3, [r3, #0]
 803972a:	60fb      	str	r3, [r7, #12]
 803972c:	68fb      	ldr	r3, [r7, #12]
 803972e:	681b      	ldr	r3, [r3, #0]
 8039730:	687a      	ldr	r2, [r7, #4]
 8039732:	429a      	cmp	r2, r3
 8039734:	d8f7      	bhi.n	8039726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8039736:	68fb      	ldr	r3, [r7, #12]
 8039738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 803973a:	68fb      	ldr	r3, [r7, #12]
 803973c:	685b      	ldr	r3, [r3, #4]
 803973e:	68ba      	ldr	r2, [r7, #8]
 8039740:	4413      	add	r3, r2
 8039742:	687a      	ldr	r2, [r7, #4]
 8039744:	429a      	cmp	r2, r3
 8039746:	d108      	bne.n	803975a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8039748:	68fb      	ldr	r3, [r7, #12]
 803974a:	685a      	ldr	r2, [r3, #4]
 803974c:	687b      	ldr	r3, [r7, #4]
 803974e:	685b      	ldr	r3, [r3, #4]
 8039750:	441a      	add	r2, r3
 8039752:	68fb      	ldr	r3, [r7, #12]
 8039754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8039756:	68fb      	ldr	r3, [r7, #12]
 8039758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 803975a:	687b      	ldr	r3, [r7, #4]
 803975c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 803975e:	687b      	ldr	r3, [r7, #4]
 8039760:	685b      	ldr	r3, [r3, #4]
 8039762:	68ba      	ldr	r2, [r7, #8]
 8039764:	441a      	add	r2, r3
 8039766:	68fb      	ldr	r3, [r7, #12]
 8039768:	681b      	ldr	r3, [r3, #0]
 803976a:	429a      	cmp	r2, r3
 803976c:	d118      	bne.n	80397a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 803976e:	68fb      	ldr	r3, [r7, #12]
 8039770:	681a      	ldr	r2, [r3, #0]
 8039772:	4b15      	ldr	r3, [pc, #84]	; (80397c8 <prvInsertBlockIntoFreeList+0xb0>)
 8039774:	681b      	ldr	r3, [r3, #0]
 8039776:	429a      	cmp	r2, r3
 8039778:	d00d      	beq.n	8039796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 803977a:	687b      	ldr	r3, [r7, #4]
 803977c:	685a      	ldr	r2, [r3, #4]
 803977e:	68fb      	ldr	r3, [r7, #12]
 8039780:	681b      	ldr	r3, [r3, #0]
 8039782:	685b      	ldr	r3, [r3, #4]
 8039784:	441a      	add	r2, r3
 8039786:	687b      	ldr	r3, [r7, #4]
 8039788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 803978a:	68fb      	ldr	r3, [r7, #12]
 803978c:	681b      	ldr	r3, [r3, #0]
 803978e:	681a      	ldr	r2, [r3, #0]
 8039790:	687b      	ldr	r3, [r7, #4]
 8039792:	601a      	str	r2, [r3, #0]
 8039794:	e008      	b.n	80397a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8039796:	4b0c      	ldr	r3, [pc, #48]	; (80397c8 <prvInsertBlockIntoFreeList+0xb0>)
 8039798:	681a      	ldr	r2, [r3, #0]
 803979a:	687b      	ldr	r3, [r7, #4]
 803979c:	601a      	str	r2, [r3, #0]
 803979e:	e003      	b.n	80397a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80397a0:	68fb      	ldr	r3, [r7, #12]
 80397a2:	681a      	ldr	r2, [r3, #0]
 80397a4:	687b      	ldr	r3, [r7, #4]
 80397a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80397a8:	68fa      	ldr	r2, [r7, #12]
 80397aa:	687b      	ldr	r3, [r7, #4]
 80397ac:	429a      	cmp	r2, r3
 80397ae:	d002      	beq.n	80397b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80397b0:	68fb      	ldr	r3, [r7, #12]
 80397b2:	687a      	ldr	r2, [r7, #4]
 80397b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80397b6:	bf00      	nop
 80397b8:	3714      	adds	r7, #20
 80397ba:	46bd      	mov	sp, r7
 80397bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80397c0:	4770      	bx	lr
 80397c2:	bf00      	nop
 80397c4:	24006acc 	.word	0x24006acc
 80397c8:	24006ad4 	.word	0x24006ad4

080397cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80397cc:	b580      	push	{r7, lr}
 80397ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80397d0:	2200      	movs	r2, #0
 80397d2:	490e      	ldr	r1, [pc, #56]	; (803980c <MX_USB_HOST_Init+0x40>)
 80397d4:	480e      	ldr	r0, [pc, #56]	; (8039810 <MX_USB_HOST_Init+0x44>)
 80397d6:	f7f4 fe2b 	bl	802e430 <USBH_Init>
 80397da:	4603      	mov	r3, r0
 80397dc:	2b00      	cmp	r3, #0
 80397de:	d001      	beq.n	80397e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80397e0:	f7e8 f95c 	bl	8021a9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 80397e4:	490b      	ldr	r1, [pc, #44]	; (8039814 <MX_USB_HOST_Init+0x48>)
 80397e6:	480a      	ldr	r0, [pc, #40]	; (8039810 <MX_USB_HOST_Init+0x44>)
 80397e8:	f7f4 fed8 	bl	802e59c <USBH_RegisterClass>
 80397ec:	4603      	mov	r3, r0
 80397ee:	2b00      	cmp	r3, #0
 80397f0:	d001      	beq.n	80397f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80397f2:	f7e8 f953 	bl	8021a9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80397f6:	4806      	ldr	r0, [pc, #24]	; (8039810 <MX_USB_HOST_Init+0x44>)
 80397f8:	f7f4 ff5c 	bl	802e6b4 <USBH_Start>
 80397fc:	4603      	mov	r3, r0
 80397fe:	2b00      	cmp	r3, #0
 8039800:	d001      	beq.n	8039806 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8039802:	f7e8 f94b 	bl	8021a9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8039806:	bf00      	nop
 8039808:	bd80      	pop	{r7, pc}
 803980a:	bf00      	nop
 803980c:	08039819 	.word	0x08039819
 8039810:	24006aec 	.word	0x24006aec
 8039814:	24000010 	.word	0x24000010

08039818 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8039818:	b580      	push	{r7, lr}
 803981a:	b082      	sub	sp, #8
 803981c:	af00      	add	r7, sp, #0
 803981e:	6078      	str	r0, [r7, #4]
 8039820:	460b      	mov	r3, r1
 8039822:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8039824:	78fb      	ldrb	r3, [r7, #3]
 8039826:	3b01      	subs	r3, #1
 8039828:	2b04      	cmp	r3, #4
 803982a:	d822      	bhi.n	8039872 <USBH_UserProcess+0x5a>
 803982c:	a201      	add	r2, pc, #4	; (adr r2, 8039834 <USBH_UserProcess+0x1c>)
 803982e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039832:	bf00      	nop
 8039834:	08039873 	.word	0x08039873
 8039838:	08039857 	.word	0x08039857
 803983c:	08039873 	.word	0x08039873
 8039840:	08039865 	.word	0x08039865
 8039844:	08039849 	.word	0x08039849
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8039848:	4b0c      	ldr	r3, [pc, #48]	; (803987c <USBH_UserProcess+0x64>)
 803984a:	2203      	movs	r2, #3
 803984c:	701a      	strb	r2, [r3, #0]
  printf("USB is disconnected!\r\n");
 803984e:	480c      	ldr	r0, [pc, #48]	; (8039880 <USBH_UserProcess+0x68>)
 8039850:	f000 fcd6 	bl	803a200 <puts>
  break;
 8039854:	e00e      	b.n	8039874 <USBH_UserProcess+0x5c>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8039856:	4b09      	ldr	r3, [pc, #36]	; (803987c <USBH_UserProcess+0x64>)
 8039858:	2202      	movs	r2, #2
 803985a:	701a      	strb	r2, [r3, #0]
  printf("USB is ready to use!\r\n");
 803985c:	4809      	ldr	r0, [pc, #36]	; (8039884 <USBH_UserProcess+0x6c>)
 803985e:	f000 fccf 	bl	803a200 <puts>
  break;
 8039862:	e007      	b.n	8039874 <USBH_UserProcess+0x5c>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8039864:	4b05      	ldr	r3, [pc, #20]	; (803987c <USBH_UserProcess+0x64>)
 8039866:	2201      	movs	r2, #1
 8039868:	701a      	strb	r2, [r3, #0]
  printf("USB is connected!\r\n");
 803986a:	4807      	ldr	r0, [pc, #28]	; (8039888 <USBH_UserProcess+0x70>)
 803986c:	f000 fcc8 	bl	803a200 <puts>
  break;
 8039870:	e000      	b.n	8039874 <USBH_UserProcess+0x5c>

  default:
  break;
 8039872:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8039874:	bf00      	nop
 8039876:	3708      	adds	r7, #8
 8039878:	46bd      	mov	sp, r7
 803987a:	bd80      	pop	{r7, pc}
 803987c:	24006ed0 	.word	0x24006ed0
 8039880:	0803b90c 	.word	0x0803b90c
 8039884:	0803b924 	.word	0x0803b924
 8039888:	0803b93c 	.word	0x0803b93c

0803988c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 803988c:	b580      	push	{r7, lr}
 803988e:	b0b6      	sub	sp, #216	; 0xd8
 8039890:	af00      	add	r7, sp, #0
 8039892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8039894:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8039898:	2200      	movs	r2, #0
 803989a:	601a      	str	r2, [r3, #0]
 803989c:	605a      	str	r2, [r3, #4]
 803989e:	609a      	str	r2, [r3, #8]
 80398a0:	60da      	str	r2, [r3, #12]
 80398a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80398a4:	f107 0310 	add.w	r3, r7, #16
 80398a8:	22b4      	movs	r2, #180	; 0xb4
 80398aa:	2100      	movs	r1, #0
 80398ac:	4618      	mov	r0, r3
 80398ae:	f000 fb39 	bl	8039f24 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 80398b2:	687b      	ldr	r3, [r7, #4]
 80398b4:	681b      	ldr	r3, [r3, #0]
 80398b6:	4a33      	ldr	r2, [pc, #204]	; (8039984 <HAL_HCD_MspInit+0xf8>)
 80398b8:	4293      	cmp	r3, r2
 80398ba:	d15e      	bne.n	803997a <HAL_HCD_MspInit+0xee>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80398bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80398c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80398c2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80398c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80398ca:	f107 0310 	add.w	r3, r7, #16
 80398ce:	4618      	mov	r0, r3
 80398d0:	f7ee f8fa 	bl	8027ac8 <HAL_RCCEx_PeriphCLKConfig>
 80398d4:	4603      	mov	r3, r0
 80398d6:	2b00      	cmp	r3, #0
 80398d8:	d001      	beq.n	80398de <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 80398da:	f7e8 f8df 	bl	8021a9c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80398de:	f7ed f967 	bl	8026bb0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80398e2:	4b29      	ldr	r3, [pc, #164]	; (8039988 <HAL_HCD_MspInit+0xfc>)
 80398e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80398e8:	4a27      	ldr	r2, [pc, #156]	; (8039988 <HAL_HCD_MspInit+0xfc>)
 80398ea:	f043 0301 	orr.w	r3, r3, #1
 80398ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80398f2:	4b25      	ldr	r3, [pc, #148]	; (8039988 <HAL_HCD_MspInit+0xfc>)
 80398f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80398f8:	f003 0301 	and.w	r3, r3, #1
 80398fc:	60fb      	str	r3, [r7, #12]
 80398fe:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8039900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8039904:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8039908:	2300      	movs	r3, #0
 803990a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803990e:	2300      	movs	r3, #0
 8039910:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8039914:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8039918:	4619      	mov	r1, r3
 803991a:	481c      	ldr	r0, [pc, #112]	; (803998c <HAL_HCD_MspInit+0x100>)
 803991c:	f7eb fb28 	bl	8024f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8039920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8039924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8039928:	2302      	movs	r3, #2
 803992a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803992e:	2300      	movs	r3, #0
 8039930:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8039934:	2300      	movs	r3, #0
 8039936:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 803993a:	230a      	movs	r3, #10
 803993c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8039940:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8039944:	4619      	mov	r1, r3
 8039946:	4811      	ldr	r0, [pc, #68]	; (803998c <HAL_HCD_MspInit+0x100>)
 8039948:	f7eb fb12 	bl	8024f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 803994c:	4b0e      	ldr	r3, [pc, #56]	; (8039988 <HAL_HCD_MspInit+0xfc>)
 803994e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8039952:	4a0d      	ldr	r2, [pc, #52]	; (8039988 <HAL_HCD_MspInit+0xfc>)
 8039954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8039958:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 803995c:	4b0a      	ldr	r3, [pc, #40]	; (8039988 <HAL_HCD_MspInit+0xfc>)
 803995e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8039962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8039966:	60bb      	str	r3, [r7, #8]
 8039968:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 803996a:	2200      	movs	r2, #0
 803996c:	2105      	movs	r1, #5
 803996e:	204d      	movs	r0, #77	; 0x4d
 8039970:	f7e8 fc9c 	bl	80222ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8039974:	204d      	movs	r0, #77	; 0x4d
 8039976:	f7e8 fcb3 	bl	80222e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 803997a:	bf00      	nop
 803997c:	37d8      	adds	r7, #216	; 0xd8
 803997e:	46bd      	mov	sp, r7
 8039980:	bd80      	pop	{r7, pc}
 8039982:	bf00      	nop
 8039984:	40040000 	.word	0x40040000
 8039988:	58024400 	.word	0x58024400
 803998c:	58020000 	.word	0x58020000

08039990 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8039990:	b580      	push	{r7, lr}
 8039992:	b082      	sub	sp, #8
 8039994:	af00      	add	r7, sp, #0
 8039996:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8039998:	687b      	ldr	r3, [r7, #4]
 803999a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 803999e:	4618      	mov	r0, r3
 80399a0:	f7f5 fb3f 	bl	802f022 <USBH_LL_IncTimer>
}
 80399a4:	bf00      	nop
 80399a6:	3708      	adds	r7, #8
 80399a8:	46bd      	mov	sp, r7
 80399aa:	bd80      	pop	{r7, pc}

080399ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80399ac:	b580      	push	{r7, lr}
 80399ae:	b082      	sub	sp, #8
 80399b0:	af00      	add	r7, sp, #0
 80399b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80399b4:	687b      	ldr	r3, [r7, #4]
 80399b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80399ba:	4618      	mov	r0, r3
 80399bc:	f7f5 fb83 	bl	802f0c6 <USBH_LL_Connect>
}
 80399c0:	bf00      	nop
 80399c2:	3708      	adds	r7, #8
 80399c4:	46bd      	mov	sp, r7
 80399c6:	bd80      	pop	{r7, pc}

080399c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80399c8:	b580      	push	{r7, lr}
 80399ca:	b082      	sub	sp, #8
 80399cc:	af00      	add	r7, sp, #0
 80399ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80399d0:	687b      	ldr	r3, [r7, #4]
 80399d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80399d6:	4618      	mov	r0, r3
 80399d8:	f7f5 fb98 	bl	802f10c <USBH_LL_Disconnect>
}
 80399dc:	bf00      	nop
 80399de:	3708      	adds	r7, #8
 80399e0:	46bd      	mov	sp, r7
 80399e2:	bd80      	pop	{r7, pc}

080399e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80399e4:	b580      	push	{r7, lr}
 80399e6:	b082      	sub	sp, #8
 80399e8:	af00      	add	r7, sp, #0
 80399ea:	6078      	str	r0, [r7, #4]
 80399ec:	460b      	mov	r3, r1
 80399ee:	70fb      	strb	r3, [r7, #3]
 80399f0:	4613      	mov	r3, r2
 80399f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80399f4:	687b      	ldr	r3, [r7, #4]
 80399f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80399fa:	4618      	mov	r0, r3
 80399fc:	f7f5 fbcd 	bl	802f19a <USBH_LL_NotifyURBChange>
#endif
}
 8039a00:	bf00      	nop
 8039a02:	3708      	adds	r7, #8
 8039a04:	46bd      	mov	sp, r7
 8039a06:	bd80      	pop	{r7, pc}

08039a08 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8039a08:	b580      	push	{r7, lr}
 8039a0a:	b082      	sub	sp, #8
 8039a0c:	af00      	add	r7, sp, #0
 8039a0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8039a10:	687b      	ldr	r3, [r7, #4]
 8039a12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8039a16:	4618      	mov	r0, r3
 8039a18:	f7f5 fb2d 	bl	802f076 <USBH_LL_PortEnabled>
}
 8039a1c:	bf00      	nop
 8039a1e:	3708      	adds	r7, #8
 8039a20:	46bd      	mov	sp, r7
 8039a22:	bd80      	pop	{r7, pc}

08039a24 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8039a24:	b580      	push	{r7, lr}
 8039a26:	b082      	sub	sp, #8
 8039a28:	af00      	add	r7, sp, #0
 8039a2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8039a2c:	687b      	ldr	r3, [r7, #4]
 8039a2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8039a32:	4618      	mov	r0, r3
 8039a34:	f7f5 fb39 	bl	802f0aa <USBH_LL_PortDisabled>
}
 8039a38:	bf00      	nop
 8039a3a:	3708      	adds	r7, #8
 8039a3c:	46bd      	mov	sp, r7
 8039a3e:	bd80      	pop	{r7, pc}

08039a40 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8039a40:	b580      	push	{r7, lr}
 8039a42:	b082      	sub	sp, #8
 8039a44:	af00      	add	r7, sp, #0
 8039a46:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8039a48:	687b      	ldr	r3, [r7, #4]
 8039a4a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8039a4e:	2b00      	cmp	r3, #0
 8039a50:	d12f      	bne.n	8039ab2 <USBH_LL_Init+0x72>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8039a52:	4a1a      	ldr	r2, [pc, #104]	; (8039abc <USBH_LL_Init+0x7c>)
 8039a54:	687b      	ldr	r3, [r7, #4]
 8039a56:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8039a5a:	687b      	ldr	r3, [r7, #4]
 8039a5c:	4a17      	ldr	r2, [pc, #92]	; (8039abc <USBH_LL_Init+0x7c>)
 8039a5e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8039a62:	4b16      	ldr	r3, [pc, #88]	; (8039abc <USBH_LL_Init+0x7c>)
 8039a64:	4a16      	ldr	r2, [pc, #88]	; (8039ac0 <USBH_LL_Init+0x80>)
 8039a66:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8039a68:	4b14      	ldr	r3, [pc, #80]	; (8039abc <USBH_LL_Init+0x7c>)
 8039a6a:	2210      	movs	r2, #16
 8039a6c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8039a6e:	4b13      	ldr	r3, [pc, #76]	; (8039abc <USBH_LL_Init+0x7c>)
 8039a70:	2201      	movs	r2, #1
 8039a72:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8039a74:	4b11      	ldr	r3, [pc, #68]	; (8039abc <USBH_LL_Init+0x7c>)
 8039a76:	2200      	movs	r2, #0
 8039a78:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8039a7a:	4b10      	ldr	r3, [pc, #64]	; (8039abc <USBH_LL_Init+0x7c>)
 8039a7c:	2202      	movs	r2, #2
 8039a7e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8039a80:	4b0e      	ldr	r3, [pc, #56]	; (8039abc <USBH_LL_Init+0x7c>)
 8039a82:	2200      	movs	r2, #0
 8039a84:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8039a86:	4b0d      	ldr	r3, [pc, #52]	; (8039abc <USBH_LL_Init+0x7c>)
 8039a88:	2200      	movs	r2, #0
 8039a8a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8039a8c:	4b0b      	ldr	r3, [pc, #44]	; (8039abc <USBH_LL_Init+0x7c>)
 8039a8e:	2200      	movs	r2, #0
 8039a90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8039a92:	480a      	ldr	r0, [pc, #40]	; (8039abc <USBH_LL_Init+0x7c>)
 8039a94:	f7eb fc47 	bl	8025326 <HAL_HCD_Init>
 8039a98:	4603      	mov	r3, r0
 8039a9a:	2b00      	cmp	r3, #0
 8039a9c:	d001      	beq.n	8039aa2 <USBH_LL_Init+0x62>
  {
    Error_Handler( );
 8039a9e:	f7e7 fffd 	bl	8021a9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8039aa2:	4806      	ldr	r0, [pc, #24]	; (8039abc <USBH_LL_Init+0x7c>)
 8039aa4:	f7ec f82b 	bl	8025afe <HAL_HCD_GetCurrentFrame>
 8039aa8:	4603      	mov	r3, r0
 8039aaa:	4619      	mov	r1, r3
 8039aac:	6878      	ldr	r0, [r7, #4]
 8039aae:	f7f5 faa9 	bl	802f004 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8039ab2:	2300      	movs	r3, #0
}
 8039ab4:	4618      	mov	r0, r3
 8039ab6:	3708      	adds	r7, #8
 8039ab8:	46bd      	mov	sp, r7
 8039aba:	bd80      	pop	{r7, pc}
 8039abc:	24006ed4 	.word	0x24006ed4
 8039ac0:	40040000 	.word	0x40040000

08039ac4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8039ac4:	b580      	push	{r7, lr}
 8039ac6:	b084      	sub	sp, #16
 8039ac8:	af00      	add	r7, sp, #0
 8039aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8039acc:	2300      	movs	r3, #0
 8039ace:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039ad0:	2300      	movs	r3, #0
 8039ad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8039ad4:	687b      	ldr	r3, [r7, #4]
 8039ad6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039ada:	4618      	mov	r0, r3
 8039adc:	f7eb ff99 	bl	8025a12 <HAL_HCD_Start>
 8039ae0:	4603      	mov	r3, r0
 8039ae2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8039ae4:	7bfb      	ldrb	r3, [r7, #15]
 8039ae6:	4618      	mov	r0, r3
 8039ae8:	f000 f98c 	bl	8039e04 <USBH_Get_USB_Status>
 8039aec:	4603      	mov	r3, r0
 8039aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8039af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8039af2:	4618      	mov	r0, r3
 8039af4:	3710      	adds	r7, #16
 8039af6:	46bd      	mov	sp, r7
 8039af8:	bd80      	pop	{r7, pc}

08039afa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8039afa:	b580      	push	{r7, lr}
 8039afc:	b084      	sub	sp, #16
 8039afe:	af00      	add	r7, sp, #0
 8039b00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8039b02:	2300      	movs	r3, #0
 8039b04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039b06:	2300      	movs	r3, #0
 8039b08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8039b0a:	687b      	ldr	r3, [r7, #4]
 8039b0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039b10:	4618      	mov	r0, r3
 8039b12:	f7eb ffa1 	bl	8025a58 <HAL_HCD_Stop>
 8039b16:	4603      	mov	r3, r0
 8039b18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8039b1a:	7bfb      	ldrb	r3, [r7, #15]
 8039b1c:	4618      	mov	r0, r3
 8039b1e:	f000 f971 	bl	8039e04 <USBH_Get_USB_Status>
 8039b22:	4603      	mov	r3, r0
 8039b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8039b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8039b28:	4618      	mov	r0, r3
 8039b2a:	3710      	adds	r7, #16
 8039b2c:	46bd      	mov	sp, r7
 8039b2e:	bd80      	pop	{r7, pc}

08039b30 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8039b30:	b580      	push	{r7, lr}
 8039b32:	b084      	sub	sp, #16
 8039b34:	af00      	add	r7, sp, #0
 8039b36:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8039b38:	2301      	movs	r3, #1
 8039b3a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8039b3c:	687b      	ldr	r3, [r7, #4]
 8039b3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039b42:	4618      	mov	r0, r3
 8039b44:	f7eb ffe9 	bl	8025b1a <HAL_HCD_GetCurrentSpeed>
 8039b48:	4603      	mov	r3, r0
 8039b4a:	2b02      	cmp	r3, #2
 8039b4c:	d00c      	beq.n	8039b68 <USBH_LL_GetSpeed+0x38>
 8039b4e:	2b02      	cmp	r3, #2
 8039b50:	d80d      	bhi.n	8039b6e <USBH_LL_GetSpeed+0x3e>
 8039b52:	2b00      	cmp	r3, #0
 8039b54:	d002      	beq.n	8039b5c <USBH_LL_GetSpeed+0x2c>
 8039b56:	2b01      	cmp	r3, #1
 8039b58:	d003      	beq.n	8039b62 <USBH_LL_GetSpeed+0x32>
 8039b5a:	e008      	b.n	8039b6e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8039b5c:	2300      	movs	r3, #0
 8039b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8039b60:	e008      	b.n	8039b74 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8039b62:	2301      	movs	r3, #1
 8039b64:	73fb      	strb	r3, [r7, #15]
    break;
 8039b66:	e005      	b.n	8039b74 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8039b68:	2302      	movs	r3, #2
 8039b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8039b6c:	e002      	b.n	8039b74 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8039b6e:	2301      	movs	r3, #1
 8039b70:	73fb      	strb	r3, [r7, #15]
    break;
 8039b72:	bf00      	nop
  }
  return  speed;
 8039b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8039b76:	4618      	mov	r0, r3
 8039b78:	3710      	adds	r7, #16
 8039b7a:	46bd      	mov	sp, r7
 8039b7c:	bd80      	pop	{r7, pc}

08039b7e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8039b7e:	b580      	push	{r7, lr}
 8039b80:	b084      	sub	sp, #16
 8039b82:	af00      	add	r7, sp, #0
 8039b84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8039b86:	2300      	movs	r3, #0
 8039b88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039b8a:	2300      	movs	r3, #0
 8039b8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8039b8e:	687b      	ldr	r3, [r7, #4]
 8039b90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039b94:	4618      	mov	r0, r3
 8039b96:	f7eb ff7c 	bl	8025a92 <HAL_HCD_ResetPort>
 8039b9a:	4603      	mov	r3, r0
 8039b9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8039b9e:	7bfb      	ldrb	r3, [r7, #15]
 8039ba0:	4618      	mov	r0, r3
 8039ba2:	f000 f92f 	bl	8039e04 <USBH_Get_USB_Status>
 8039ba6:	4603      	mov	r3, r0
 8039ba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8039baa:	7bbb      	ldrb	r3, [r7, #14]
}
 8039bac:	4618      	mov	r0, r3
 8039bae:	3710      	adds	r7, #16
 8039bb0:	46bd      	mov	sp, r7
 8039bb2:	bd80      	pop	{r7, pc}

08039bb4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8039bb4:	b580      	push	{r7, lr}
 8039bb6:	b082      	sub	sp, #8
 8039bb8:	af00      	add	r7, sp, #0
 8039bba:	6078      	str	r0, [r7, #4]
 8039bbc:	460b      	mov	r3, r1
 8039bbe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8039bc0:	687b      	ldr	r3, [r7, #4]
 8039bc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039bc6:	78fa      	ldrb	r2, [r7, #3]
 8039bc8:	4611      	mov	r1, r2
 8039bca:	4618      	mov	r0, r3
 8039bcc:	f7eb ff83 	bl	8025ad6 <HAL_HCD_HC_GetXferCount>
 8039bd0:	4603      	mov	r3, r0
}
 8039bd2:	4618      	mov	r0, r3
 8039bd4:	3708      	adds	r7, #8
 8039bd6:	46bd      	mov	sp, r7
 8039bd8:	bd80      	pop	{r7, pc}

08039bda <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8039bda:	b590      	push	{r4, r7, lr}
 8039bdc:	b089      	sub	sp, #36	; 0x24
 8039bde:	af04      	add	r7, sp, #16
 8039be0:	6078      	str	r0, [r7, #4]
 8039be2:	4608      	mov	r0, r1
 8039be4:	4611      	mov	r1, r2
 8039be6:	461a      	mov	r2, r3
 8039be8:	4603      	mov	r3, r0
 8039bea:	70fb      	strb	r3, [r7, #3]
 8039bec:	460b      	mov	r3, r1
 8039bee:	70bb      	strb	r3, [r7, #2]
 8039bf0:	4613      	mov	r3, r2
 8039bf2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8039bf4:	2300      	movs	r3, #0
 8039bf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039bf8:	2300      	movs	r3, #0
 8039bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8039bfc:	687b      	ldr	r3, [r7, #4]
 8039bfe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8039c02:	787c      	ldrb	r4, [r7, #1]
 8039c04:	78ba      	ldrb	r2, [r7, #2]
 8039c06:	78f9      	ldrb	r1, [r7, #3]
 8039c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8039c0a:	9302      	str	r3, [sp, #8]
 8039c0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8039c10:	9301      	str	r3, [sp, #4]
 8039c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8039c16:	9300      	str	r3, [sp, #0]
 8039c18:	4623      	mov	r3, r4
 8039c1a:	f7eb fbe6 	bl	80253ea <HAL_HCD_HC_Init>
 8039c1e:	4603      	mov	r3, r0
 8039c20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8039c22:	7bfb      	ldrb	r3, [r7, #15]
 8039c24:	4618      	mov	r0, r3
 8039c26:	f000 f8ed 	bl	8039e04 <USBH_Get_USB_Status>
 8039c2a:	4603      	mov	r3, r0
 8039c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8039c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8039c30:	4618      	mov	r0, r3
 8039c32:	3714      	adds	r7, #20
 8039c34:	46bd      	mov	sp, r7
 8039c36:	bd90      	pop	{r4, r7, pc}

08039c38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8039c38:	b580      	push	{r7, lr}
 8039c3a:	b084      	sub	sp, #16
 8039c3c:	af00      	add	r7, sp, #0
 8039c3e:	6078      	str	r0, [r7, #4]
 8039c40:	460b      	mov	r3, r1
 8039c42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8039c44:	2300      	movs	r3, #0
 8039c46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039c48:	2300      	movs	r3, #0
 8039c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8039c4c:	687b      	ldr	r3, [r7, #4]
 8039c4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039c52:	78fa      	ldrb	r2, [r7, #3]
 8039c54:	4611      	mov	r1, r2
 8039c56:	4618      	mov	r0, r3
 8039c58:	f7eb fc56 	bl	8025508 <HAL_HCD_HC_Halt>
 8039c5c:	4603      	mov	r3, r0
 8039c5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8039c60:	7bfb      	ldrb	r3, [r7, #15]
 8039c62:	4618      	mov	r0, r3
 8039c64:	f000 f8ce 	bl	8039e04 <USBH_Get_USB_Status>
 8039c68:	4603      	mov	r3, r0
 8039c6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8039c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8039c6e:	4618      	mov	r0, r3
 8039c70:	3710      	adds	r7, #16
 8039c72:	46bd      	mov	sp, r7
 8039c74:	bd80      	pop	{r7, pc}

08039c76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8039c76:	b590      	push	{r4, r7, lr}
 8039c78:	b089      	sub	sp, #36	; 0x24
 8039c7a:	af04      	add	r7, sp, #16
 8039c7c:	6078      	str	r0, [r7, #4]
 8039c7e:	4608      	mov	r0, r1
 8039c80:	4611      	mov	r1, r2
 8039c82:	461a      	mov	r2, r3
 8039c84:	4603      	mov	r3, r0
 8039c86:	70fb      	strb	r3, [r7, #3]
 8039c88:	460b      	mov	r3, r1
 8039c8a:	70bb      	strb	r3, [r7, #2]
 8039c8c:	4613      	mov	r3, r2
 8039c8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8039c90:	2300      	movs	r3, #0
 8039c92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039c94:	2300      	movs	r3, #0
 8039c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8039c98:	687b      	ldr	r3, [r7, #4]
 8039c9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8039c9e:	787c      	ldrb	r4, [r7, #1]
 8039ca0:	78ba      	ldrb	r2, [r7, #2]
 8039ca2:	78f9      	ldrb	r1, [r7, #3]
 8039ca4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8039ca8:	9303      	str	r3, [sp, #12]
 8039caa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8039cac:	9302      	str	r3, [sp, #8]
 8039cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039cb0:	9301      	str	r3, [sp, #4]
 8039cb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8039cb6:	9300      	str	r3, [sp, #0]
 8039cb8:	4623      	mov	r3, r4
 8039cba:	f7eb fc49 	bl	8025550 <HAL_HCD_HC_SubmitRequest>
 8039cbe:	4603      	mov	r3, r0
 8039cc0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8039cc2:	7bfb      	ldrb	r3, [r7, #15]
 8039cc4:	4618      	mov	r0, r3
 8039cc6:	f000 f89d 	bl	8039e04 <USBH_Get_USB_Status>
 8039cca:	4603      	mov	r3, r0
 8039ccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8039cce:	7bbb      	ldrb	r3, [r7, #14]
}
 8039cd0:	4618      	mov	r0, r3
 8039cd2:	3714      	adds	r7, #20
 8039cd4:	46bd      	mov	sp, r7
 8039cd6:	bd90      	pop	{r4, r7, pc}

08039cd8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8039cd8:	b580      	push	{r7, lr}
 8039cda:	b082      	sub	sp, #8
 8039cdc:	af00      	add	r7, sp, #0
 8039cde:	6078      	str	r0, [r7, #4]
 8039ce0:	460b      	mov	r3, r1
 8039ce2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8039ce4:	687b      	ldr	r3, [r7, #4]
 8039ce6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039cea:	78fa      	ldrb	r2, [r7, #3]
 8039cec:	4611      	mov	r1, r2
 8039cee:	4618      	mov	r0, r3
 8039cf0:	f7eb fedd 	bl	8025aae <HAL_HCD_HC_GetURBState>
 8039cf4:	4603      	mov	r3, r0
}
 8039cf6:	4618      	mov	r0, r3
 8039cf8:	3708      	adds	r7, #8
 8039cfa:	46bd      	mov	sp, r7
 8039cfc:	bd80      	pop	{r7, pc}

08039cfe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8039cfe:	b580      	push	{r7, lr}
 8039d00:	b082      	sub	sp, #8
 8039d02:	af00      	add	r7, sp, #0
 8039d04:	6078      	str	r0, [r7, #4]
 8039d06:	460b      	mov	r3, r1
 8039d08:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8039d0a:	687b      	ldr	r3, [r7, #4]
 8039d0c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8039d10:	2b00      	cmp	r3, #0
 8039d12:	d103      	bne.n	8039d1c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8039d14:	78fb      	ldrb	r3, [r7, #3]
 8039d16:	4618      	mov	r0, r3
 8039d18:	f000 f8a0 	bl	8039e5c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8039d1c:	20c8      	movs	r0, #200	; 0xc8
 8039d1e:	f7e8 f9e9 	bl	80220f4 <HAL_Delay>
  return USBH_OK;
 8039d22:	2300      	movs	r3, #0
}
 8039d24:	4618      	mov	r0, r3
 8039d26:	3708      	adds	r7, #8
 8039d28:	46bd      	mov	sp, r7
 8039d2a:	bd80      	pop	{r7, pc}

08039d2c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8039d2c:	b480      	push	{r7}
 8039d2e:	b085      	sub	sp, #20
 8039d30:	af00      	add	r7, sp, #0
 8039d32:	6078      	str	r0, [r7, #4]
 8039d34:	460b      	mov	r3, r1
 8039d36:	70fb      	strb	r3, [r7, #3]
 8039d38:	4613      	mov	r3, r2
 8039d3a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8039d3c:	687b      	ldr	r3, [r7, #4]
 8039d3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039d42:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8039d44:	78fb      	ldrb	r3, [r7, #3]
 8039d46:	68fa      	ldr	r2, [r7, #12]
 8039d48:	212c      	movs	r1, #44	; 0x2c
 8039d4a:	fb01 f303 	mul.w	r3, r1, r3
 8039d4e:	4413      	add	r3, r2
 8039d50:	333b      	adds	r3, #59	; 0x3b
 8039d52:	781b      	ldrb	r3, [r3, #0]
 8039d54:	2b00      	cmp	r3, #0
 8039d56:	d009      	beq.n	8039d6c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8039d58:	78fb      	ldrb	r3, [r7, #3]
 8039d5a:	68fa      	ldr	r2, [r7, #12]
 8039d5c:	212c      	movs	r1, #44	; 0x2c
 8039d5e:	fb01 f303 	mul.w	r3, r1, r3
 8039d62:	4413      	add	r3, r2
 8039d64:	3354      	adds	r3, #84	; 0x54
 8039d66:	78ba      	ldrb	r2, [r7, #2]
 8039d68:	701a      	strb	r2, [r3, #0]
 8039d6a:	e008      	b.n	8039d7e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8039d6c:	78fb      	ldrb	r3, [r7, #3]
 8039d6e:	68fa      	ldr	r2, [r7, #12]
 8039d70:	212c      	movs	r1, #44	; 0x2c
 8039d72:	fb01 f303 	mul.w	r3, r1, r3
 8039d76:	4413      	add	r3, r2
 8039d78:	3355      	adds	r3, #85	; 0x55
 8039d7a:	78ba      	ldrb	r2, [r7, #2]
 8039d7c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8039d7e:	2300      	movs	r3, #0
}
 8039d80:	4618      	mov	r0, r3
 8039d82:	3714      	adds	r7, #20
 8039d84:	46bd      	mov	sp, r7
 8039d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039d8a:	4770      	bx	lr

08039d8c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8039d8c:	b480      	push	{r7}
 8039d8e:	b085      	sub	sp, #20
 8039d90:	af00      	add	r7, sp, #0
 8039d92:	6078      	str	r0, [r7, #4]
 8039d94:	460b      	mov	r3, r1
 8039d96:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8039d98:	2300      	movs	r3, #0
 8039d9a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8039d9c:	687b      	ldr	r3, [r7, #4]
 8039d9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039da2:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8039da4:	78fb      	ldrb	r3, [r7, #3]
 8039da6:	68ba      	ldr	r2, [r7, #8]
 8039da8:	212c      	movs	r1, #44	; 0x2c
 8039daa:	fb01 f303 	mul.w	r3, r1, r3
 8039dae:	4413      	add	r3, r2
 8039db0:	333b      	adds	r3, #59	; 0x3b
 8039db2:	781b      	ldrb	r3, [r3, #0]
 8039db4:	2b00      	cmp	r3, #0
 8039db6:	d009      	beq.n	8039dcc <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8039db8:	78fb      	ldrb	r3, [r7, #3]
 8039dba:	68ba      	ldr	r2, [r7, #8]
 8039dbc:	212c      	movs	r1, #44	; 0x2c
 8039dbe:	fb01 f303 	mul.w	r3, r1, r3
 8039dc2:	4413      	add	r3, r2
 8039dc4:	3354      	adds	r3, #84	; 0x54
 8039dc6:	781b      	ldrb	r3, [r3, #0]
 8039dc8:	73fb      	strb	r3, [r7, #15]
 8039dca:	e008      	b.n	8039dde <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8039dcc:	78fb      	ldrb	r3, [r7, #3]
 8039dce:	68ba      	ldr	r2, [r7, #8]
 8039dd0:	212c      	movs	r1, #44	; 0x2c
 8039dd2:	fb01 f303 	mul.w	r3, r1, r3
 8039dd6:	4413      	add	r3, r2
 8039dd8:	3355      	adds	r3, #85	; 0x55
 8039dda:	781b      	ldrb	r3, [r3, #0]
 8039ddc:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8039dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8039de0:	4618      	mov	r0, r3
 8039de2:	3714      	adds	r7, #20
 8039de4:	46bd      	mov	sp, r7
 8039de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039dea:	4770      	bx	lr

08039dec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8039dec:	b580      	push	{r7, lr}
 8039dee:	b082      	sub	sp, #8
 8039df0:	af00      	add	r7, sp, #0
 8039df2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8039df4:	6878      	ldr	r0, [r7, #4]
 8039df6:	f7e8 f97d 	bl	80220f4 <HAL_Delay>
}
 8039dfa:	bf00      	nop
 8039dfc:	3708      	adds	r7, #8
 8039dfe:	46bd      	mov	sp, r7
 8039e00:	bd80      	pop	{r7, pc}
	...

08039e04 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8039e04:	b480      	push	{r7}
 8039e06:	b085      	sub	sp, #20
 8039e08:	af00      	add	r7, sp, #0
 8039e0a:	4603      	mov	r3, r0
 8039e0c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039e0e:	2300      	movs	r3, #0
 8039e10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8039e12:	79fb      	ldrb	r3, [r7, #7]
 8039e14:	2b03      	cmp	r3, #3
 8039e16:	d817      	bhi.n	8039e48 <USBH_Get_USB_Status+0x44>
 8039e18:	a201      	add	r2, pc, #4	; (adr r2, 8039e20 <USBH_Get_USB_Status+0x1c>)
 8039e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039e1e:	bf00      	nop
 8039e20:	08039e31 	.word	0x08039e31
 8039e24:	08039e37 	.word	0x08039e37
 8039e28:	08039e3d 	.word	0x08039e3d
 8039e2c:	08039e43 	.word	0x08039e43
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8039e30:	2300      	movs	r3, #0
 8039e32:	73fb      	strb	r3, [r7, #15]
    break;
 8039e34:	e00b      	b.n	8039e4e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8039e36:	2302      	movs	r3, #2
 8039e38:	73fb      	strb	r3, [r7, #15]
    break;
 8039e3a:	e008      	b.n	8039e4e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8039e3c:	2301      	movs	r3, #1
 8039e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8039e40:	e005      	b.n	8039e4e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8039e42:	2302      	movs	r3, #2
 8039e44:	73fb      	strb	r3, [r7, #15]
    break;
 8039e46:	e002      	b.n	8039e4e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8039e48:	2302      	movs	r3, #2
 8039e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8039e4c:	bf00      	nop
  }
  return usb_status;
 8039e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8039e50:	4618      	mov	r0, r3
 8039e52:	3714      	adds	r7, #20
 8039e54:	46bd      	mov	sp, r7
 8039e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039e5a:	4770      	bx	lr

08039e5c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8039e5c:	b580      	push	{r7, lr}
 8039e5e:	b084      	sub	sp, #16
 8039e60:	af00      	add	r7, sp, #0
 8039e62:	4603      	mov	r3, r0
 8039e64:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8039e66:	79fb      	ldrb	r3, [r7, #7]
 8039e68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8039e6a:	79fb      	ldrb	r3, [r7, #7]
 8039e6c:	2b00      	cmp	r3, #0
 8039e6e:	d102      	bne.n	8039e76 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8039e70:	2301      	movs	r3, #1
 8039e72:	73fb      	strb	r3, [r7, #15]
 8039e74:	e001      	b.n	8039e7a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8039e76:	2300      	movs	r3, #0
 8039e78:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,(GPIO_PinState)data);
 8039e7a:	7bfb      	ldrb	r3, [r7, #15]
 8039e7c:	461a      	mov	r2, r3
 8039e7e:	2101      	movs	r1, #1
 8039e80:	4803      	ldr	r0, [pc, #12]	; (8039e90 <MX_DriverVbusHS+0x34>)
 8039e82:	f7eb fa1d 	bl	80252c0 <HAL_GPIO_WritePin>
}
 8039e86:	bf00      	nop
 8039e88:	3710      	adds	r7, #16
 8039e8a:	46bd      	mov	sp, r7
 8039e8c:	bd80      	pop	{r7, pc}
 8039e8e:	bf00      	nop
 8039e90:	58021000 	.word	0x58021000

08039e94 <__errno>:
 8039e94:	4b01      	ldr	r3, [pc, #4]	; (8039e9c <__errno+0x8>)
 8039e96:	6818      	ldr	r0, [r3, #0]
 8039e98:	4770      	bx	lr
 8039e9a:	bf00      	nop
 8039e9c:	24000034 	.word	0x24000034

08039ea0 <__libc_init_array>:
 8039ea0:	b570      	push	{r4, r5, r6, lr}
 8039ea2:	4d0d      	ldr	r5, [pc, #52]	; (8039ed8 <__libc_init_array+0x38>)
 8039ea4:	4c0d      	ldr	r4, [pc, #52]	; (8039edc <__libc_init_array+0x3c>)
 8039ea6:	1b64      	subs	r4, r4, r5
 8039ea8:	10a4      	asrs	r4, r4, #2
 8039eaa:	2600      	movs	r6, #0
 8039eac:	42a6      	cmp	r6, r4
 8039eae:	d109      	bne.n	8039ec4 <__libc_init_array+0x24>
 8039eb0:	4d0b      	ldr	r5, [pc, #44]	; (8039ee0 <__libc_init_array+0x40>)
 8039eb2:	4c0c      	ldr	r4, [pc, #48]	; (8039ee4 <__libc_init_array+0x44>)
 8039eb4:	f001 fa48 	bl	803b348 <_init>
 8039eb8:	1b64      	subs	r4, r4, r5
 8039eba:	10a4      	asrs	r4, r4, #2
 8039ebc:	2600      	movs	r6, #0
 8039ebe:	42a6      	cmp	r6, r4
 8039ec0:	d105      	bne.n	8039ece <__libc_init_array+0x2e>
 8039ec2:	bd70      	pop	{r4, r5, r6, pc}
 8039ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8039ec8:	4798      	blx	r3
 8039eca:	3601      	adds	r6, #1
 8039ecc:	e7ee      	b.n	8039eac <__libc_init_array+0xc>
 8039ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8039ed2:	4798      	blx	r3
 8039ed4:	3601      	adds	r6, #1
 8039ed6:	e7f2      	b.n	8039ebe <__libc_init_array+0x1e>
 8039ed8:	0803be84 	.word	0x0803be84
 8039edc:	0803be84 	.word	0x0803be84
 8039ee0:	0803be84 	.word	0x0803be84
 8039ee4:	0803be88 	.word	0x0803be88

08039ee8 <malloc>:
 8039ee8:	4b02      	ldr	r3, [pc, #8]	; (8039ef4 <malloc+0xc>)
 8039eea:	4601      	mov	r1, r0
 8039eec:	6818      	ldr	r0, [r3, #0]
 8039eee:	f000 b88d 	b.w	803a00c <_malloc_r>
 8039ef2:	bf00      	nop
 8039ef4:	24000034 	.word	0x24000034

08039ef8 <free>:
 8039ef8:	4b02      	ldr	r3, [pc, #8]	; (8039f04 <free+0xc>)
 8039efa:	4601      	mov	r1, r0
 8039efc:	6818      	ldr	r0, [r3, #0]
 8039efe:	f000 b819 	b.w	8039f34 <_free_r>
 8039f02:	bf00      	nop
 8039f04:	24000034 	.word	0x24000034

08039f08 <memcpy>:
 8039f08:	440a      	add	r2, r1
 8039f0a:	4291      	cmp	r1, r2
 8039f0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8039f10:	d100      	bne.n	8039f14 <memcpy+0xc>
 8039f12:	4770      	bx	lr
 8039f14:	b510      	push	{r4, lr}
 8039f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8039f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8039f1e:	4291      	cmp	r1, r2
 8039f20:	d1f9      	bne.n	8039f16 <memcpy+0xe>
 8039f22:	bd10      	pop	{r4, pc}

08039f24 <memset>:
 8039f24:	4402      	add	r2, r0
 8039f26:	4603      	mov	r3, r0
 8039f28:	4293      	cmp	r3, r2
 8039f2a:	d100      	bne.n	8039f2e <memset+0xa>
 8039f2c:	4770      	bx	lr
 8039f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8039f32:	e7f9      	b.n	8039f28 <memset+0x4>

08039f34 <_free_r>:
 8039f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8039f36:	2900      	cmp	r1, #0
 8039f38:	d044      	beq.n	8039fc4 <_free_r+0x90>
 8039f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8039f3e:	9001      	str	r0, [sp, #4]
 8039f40:	2b00      	cmp	r3, #0
 8039f42:	f1a1 0404 	sub.w	r4, r1, #4
 8039f46:	bfb8      	it	lt
 8039f48:	18e4      	addlt	r4, r4, r3
 8039f4a:	f000 fca9 	bl	803a8a0 <__malloc_lock>
 8039f4e:	4a1e      	ldr	r2, [pc, #120]	; (8039fc8 <_free_r+0x94>)
 8039f50:	9801      	ldr	r0, [sp, #4]
 8039f52:	6813      	ldr	r3, [r2, #0]
 8039f54:	b933      	cbnz	r3, 8039f64 <_free_r+0x30>
 8039f56:	6063      	str	r3, [r4, #4]
 8039f58:	6014      	str	r4, [r2, #0]
 8039f5a:	b003      	add	sp, #12
 8039f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8039f60:	f000 bca4 	b.w	803a8ac <__malloc_unlock>
 8039f64:	42a3      	cmp	r3, r4
 8039f66:	d908      	bls.n	8039f7a <_free_r+0x46>
 8039f68:	6825      	ldr	r5, [r4, #0]
 8039f6a:	1961      	adds	r1, r4, r5
 8039f6c:	428b      	cmp	r3, r1
 8039f6e:	bf01      	itttt	eq
 8039f70:	6819      	ldreq	r1, [r3, #0]
 8039f72:	685b      	ldreq	r3, [r3, #4]
 8039f74:	1949      	addeq	r1, r1, r5
 8039f76:	6021      	streq	r1, [r4, #0]
 8039f78:	e7ed      	b.n	8039f56 <_free_r+0x22>
 8039f7a:	461a      	mov	r2, r3
 8039f7c:	685b      	ldr	r3, [r3, #4]
 8039f7e:	b10b      	cbz	r3, 8039f84 <_free_r+0x50>
 8039f80:	42a3      	cmp	r3, r4
 8039f82:	d9fa      	bls.n	8039f7a <_free_r+0x46>
 8039f84:	6811      	ldr	r1, [r2, #0]
 8039f86:	1855      	adds	r5, r2, r1
 8039f88:	42a5      	cmp	r5, r4
 8039f8a:	d10b      	bne.n	8039fa4 <_free_r+0x70>
 8039f8c:	6824      	ldr	r4, [r4, #0]
 8039f8e:	4421      	add	r1, r4
 8039f90:	1854      	adds	r4, r2, r1
 8039f92:	42a3      	cmp	r3, r4
 8039f94:	6011      	str	r1, [r2, #0]
 8039f96:	d1e0      	bne.n	8039f5a <_free_r+0x26>
 8039f98:	681c      	ldr	r4, [r3, #0]
 8039f9a:	685b      	ldr	r3, [r3, #4]
 8039f9c:	6053      	str	r3, [r2, #4]
 8039f9e:	4421      	add	r1, r4
 8039fa0:	6011      	str	r1, [r2, #0]
 8039fa2:	e7da      	b.n	8039f5a <_free_r+0x26>
 8039fa4:	d902      	bls.n	8039fac <_free_r+0x78>
 8039fa6:	230c      	movs	r3, #12
 8039fa8:	6003      	str	r3, [r0, #0]
 8039faa:	e7d6      	b.n	8039f5a <_free_r+0x26>
 8039fac:	6825      	ldr	r5, [r4, #0]
 8039fae:	1961      	adds	r1, r4, r5
 8039fb0:	428b      	cmp	r3, r1
 8039fb2:	bf04      	itt	eq
 8039fb4:	6819      	ldreq	r1, [r3, #0]
 8039fb6:	685b      	ldreq	r3, [r3, #4]
 8039fb8:	6063      	str	r3, [r4, #4]
 8039fba:	bf04      	itt	eq
 8039fbc:	1949      	addeq	r1, r1, r5
 8039fbe:	6021      	streq	r1, [r4, #0]
 8039fc0:	6054      	str	r4, [r2, #4]
 8039fc2:	e7ca      	b.n	8039f5a <_free_r+0x26>
 8039fc4:	b003      	add	sp, #12
 8039fc6:	bd30      	pop	{r4, r5, pc}
 8039fc8:	240071d8 	.word	0x240071d8

08039fcc <sbrk_aligned>:
 8039fcc:	b570      	push	{r4, r5, r6, lr}
 8039fce:	4e0e      	ldr	r6, [pc, #56]	; (803a008 <sbrk_aligned+0x3c>)
 8039fd0:	460c      	mov	r4, r1
 8039fd2:	6831      	ldr	r1, [r6, #0]
 8039fd4:	4605      	mov	r5, r0
 8039fd6:	b911      	cbnz	r1, 8039fde <sbrk_aligned+0x12>
 8039fd8:	f000 f91a 	bl	803a210 <_sbrk_r>
 8039fdc:	6030      	str	r0, [r6, #0]
 8039fde:	4621      	mov	r1, r4
 8039fe0:	4628      	mov	r0, r5
 8039fe2:	f000 f915 	bl	803a210 <_sbrk_r>
 8039fe6:	1c43      	adds	r3, r0, #1
 8039fe8:	d00a      	beq.n	803a000 <sbrk_aligned+0x34>
 8039fea:	1cc4      	adds	r4, r0, #3
 8039fec:	f024 0403 	bic.w	r4, r4, #3
 8039ff0:	42a0      	cmp	r0, r4
 8039ff2:	d007      	beq.n	803a004 <sbrk_aligned+0x38>
 8039ff4:	1a21      	subs	r1, r4, r0
 8039ff6:	4628      	mov	r0, r5
 8039ff8:	f000 f90a 	bl	803a210 <_sbrk_r>
 8039ffc:	3001      	adds	r0, #1
 8039ffe:	d101      	bne.n	803a004 <sbrk_aligned+0x38>
 803a000:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803a004:	4620      	mov	r0, r4
 803a006:	bd70      	pop	{r4, r5, r6, pc}
 803a008:	240071dc 	.word	0x240071dc

0803a00c <_malloc_r>:
 803a00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803a010:	1ccd      	adds	r5, r1, #3
 803a012:	f025 0503 	bic.w	r5, r5, #3
 803a016:	3508      	adds	r5, #8
 803a018:	2d0c      	cmp	r5, #12
 803a01a:	bf38      	it	cc
 803a01c:	250c      	movcc	r5, #12
 803a01e:	2d00      	cmp	r5, #0
 803a020:	4607      	mov	r7, r0
 803a022:	db01      	blt.n	803a028 <_malloc_r+0x1c>
 803a024:	42a9      	cmp	r1, r5
 803a026:	d905      	bls.n	803a034 <_malloc_r+0x28>
 803a028:	230c      	movs	r3, #12
 803a02a:	603b      	str	r3, [r7, #0]
 803a02c:	2600      	movs	r6, #0
 803a02e:	4630      	mov	r0, r6
 803a030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803a034:	4e2e      	ldr	r6, [pc, #184]	; (803a0f0 <_malloc_r+0xe4>)
 803a036:	f000 fc33 	bl	803a8a0 <__malloc_lock>
 803a03a:	6833      	ldr	r3, [r6, #0]
 803a03c:	461c      	mov	r4, r3
 803a03e:	bb34      	cbnz	r4, 803a08e <_malloc_r+0x82>
 803a040:	4629      	mov	r1, r5
 803a042:	4638      	mov	r0, r7
 803a044:	f7ff ffc2 	bl	8039fcc <sbrk_aligned>
 803a048:	1c43      	adds	r3, r0, #1
 803a04a:	4604      	mov	r4, r0
 803a04c:	d14d      	bne.n	803a0ea <_malloc_r+0xde>
 803a04e:	6834      	ldr	r4, [r6, #0]
 803a050:	4626      	mov	r6, r4
 803a052:	2e00      	cmp	r6, #0
 803a054:	d140      	bne.n	803a0d8 <_malloc_r+0xcc>
 803a056:	6823      	ldr	r3, [r4, #0]
 803a058:	4631      	mov	r1, r6
 803a05a:	4638      	mov	r0, r7
 803a05c:	eb04 0803 	add.w	r8, r4, r3
 803a060:	f000 f8d6 	bl	803a210 <_sbrk_r>
 803a064:	4580      	cmp	r8, r0
 803a066:	d13a      	bne.n	803a0de <_malloc_r+0xd2>
 803a068:	6821      	ldr	r1, [r4, #0]
 803a06a:	3503      	adds	r5, #3
 803a06c:	1a6d      	subs	r5, r5, r1
 803a06e:	f025 0503 	bic.w	r5, r5, #3
 803a072:	3508      	adds	r5, #8
 803a074:	2d0c      	cmp	r5, #12
 803a076:	bf38      	it	cc
 803a078:	250c      	movcc	r5, #12
 803a07a:	4629      	mov	r1, r5
 803a07c:	4638      	mov	r0, r7
 803a07e:	f7ff ffa5 	bl	8039fcc <sbrk_aligned>
 803a082:	3001      	adds	r0, #1
 803a084:	d02b      	beq.n	803a0de <_malloc_r+0xd2>
 803a086:	6823      	ldr	r3, [r4, #0]
 803a088:	442b      	add	r3, r5
 803a08a:	6023      	str	r3, [r4, #0]
 803a08c:	e00e      	b.n	803a0ac <_malloc_r+0xa0>
 803a08e:	6822      	ldr	r2, [r4, #0]
 803a090:	1b52      	subs	r2, r2, r5
 803a092:	d41e      	bmi.n	803a0d2 <_malloc_r+0xc6>
 803a094:	2a0b      	cmp	r2, #11
 803a096:	d916      	bls.n	803a0c6 <_malloc_r+0xba>
 803a098:	1961      	adds	r1, r4, r5
 803a09a:	42a3      	cmp	r3, r4
 803a09c:	6025      	str	r5, [r4, #0]
 803a09e:	bf18      	it	ne
 803a0a0:	6059      	strne	r1, [r3, #4]
 803a0a2:	6863      	ldr	r3, [r4, #4]
 803a0a4:	bf08      	it	eq
 803a0a6:	6031      	streq	r1, [r6, #0]
 803a0a8:	5162      	str	r2, [r4, r5]
 803a0aa:	604b      	str	r3, [r1, #4]
 803a0ac:	4638      	mov	r0, r7
 803a0ae:	f104 060b 	add.w	r6, r4, #11
 803a0b2:	f000 fbfb 	bl	803a8ac <__malloc_unlock>
 803a0b6:	f026 0607 	bic.w	r6, r6, #7
 803a0ba:	1d23      	adds	r3, r4, #4
 803a0bc:	1af2      	subs	r2, r6, r3
 803a0be:	d0b6      	beq.n	803a02e <_malloc_r+0x22>
 803a0c0:	1b9b      	subs	r3, r3, r6
 803a0c2:	50a3      	str	r3, [r4, r2]
 803a0c4:	e7b3      	b.n	803a02e <_malloc_r+0x22>
 803a0c6:	6862      	ldr	r2, [r4, #4]
 803a0c8:	42a3      	cmp	r3, r4
 803a0ca:	bf0c      	ite	eq
 803a0cc:	6032      	streq	r2, [r6, #0]
 803a0ce:	605a      	strne	r2, [r3, #4]
 803a0d0:	e7ec      	b.n	803a0ac <_malloc_r+0xa0>
 803a0d2:	4623      	mov	r3, r4
 803a0d4:	6864      	ldr	r4, [r4, #4]
 803a0d6:	e7b2      	b.n	803a03e <_malloc_r+0x32>
 803a0d8:	4634      	mov	r4, r6
 803a0da:	6876      	ldr	r6, [r6, #4]
 803a0dc:	e7b9      	b.n	803a052 <_malloc_r+0x46>
 803a0de:	230c      	movs	r3, #12
 803a0e0:	603b      	str	r3, [r7, #0]
 803a0e2:	4638      	mov	r0, r7
 803a0e4:	f000 fbe2 	bl	803a8ac <__malloc_unlock>
 803a0e8:	e7a1      	b.n	803a02e <_malloc_r+0x22>
 803a0ea:	6025      	str	r5, [r4, #0]
 803a0ec:	e7de      	b.n	803a0ac <_malloc_r+0xa0>
 803a0ee:	bf00      	nop
 803a0f0:	240071d8 	.word	0x240071d8

0803a0f4 <iprintf>:
 803a0f4:	b40f      	push	{r0, r1, r2, r3}
 803a0f6:	4b0a      	ldr	r3, [pc, #40]	; (803a120 <iprintf+0x2c>)
 803a0f8:	b513      	push	{r0, r1, r4, lr}
 803a0fa:	681c      	ldr	r4, [r3, #0]
 803a0fc:	b124      	cbz	r4, 803a108 <iprintf+0x14>
 803a0fe:	69a3      	ldr	r3, [r4, #24]
 803a100:	b913      	cbnz	r3, 803a108 <iprintf+0x14>
 803a102:	4620      	mov	r0, r4
 803a104:	f000 fac6 	bl	803a694 <__sinit>
 803a108:	ab05      	add	r3, sp, #20
 803a10a:	9a04      	ldr	r2, [sp, #16]
 803a10c:	68a1      	ldr	r1, [r4, #8]
 803a10e:	9301      	str	r3, [sp, #4]
 803a110:	4620      	mov	r0, r4
 803a112:	f000 fd57 	bl	803abc4 <_vfiprintf_r>
 803a116:	b002      	add	sp, #8
 803a118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803a11c:	b004      	add	sp, #16
 803a11e:	4770      	bx	lr
 803a120:	24000034 	.word	0x24000034

0803a124 <_puts_r>:
 803a124:	b570      	push	{r4, r5, r6, lr}
 803a126:	460e      	mov	r6, r1
 803a128:	4605      	mov	r5, r0
 803a12a:	b118      	cbz	r0, 803a134 <_puts_r+0x10>
 803a12c:	6983      	ldr	r3, [r0, #24]
 803a12e:	b90b      	cbnz	r3, 803a134 <_puts_r+0x10>
 803a130:	f000 fab0 	bl	803a694 <__sinit>
 803a134:	69ab      	ldr	r3, [r5, #24]
 803a136:	68ac      	ldr	r4, [r5, #8]
 803a138:	b913      	cbnz	r3, 803a140 <_puts_r+0x1c>
 803a13a:	4628      	mov	r0, r5
 803a13c:	f000 faaa 	bl	803a694 <__sinit>
 803a140:	4b2c      	ldr	r3, [pc, #176]	; (803a1f4 <_puts_r+0xd0>)
 803a142:	429c      	cmp	r4, r3
 803a144:	d120      	bne.n	803a188 <_puts_r+0x64>
 803a146:	686c      	ldr	r4, [r5, #4]
 803a148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803a14a:	07db      	lsls	r3, r3, #31
 803a14c:	d405      	bmi.n	803a15a <_puts_r+0x36>
 803a14e:	89a3      	ldrh	r3, [r4, #12]
 803a150:	0598      	lsls	r0, r3, #22
 803a152:	d402      	bmi.n	803a15a <_puts_r+0x36>
 803a154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803a156:	f000 fb3b 	bl	803a7d0 <__retarget_lock_acquire_recursive>
 803a15a:	89a3      	ldrh	r3, [r4, #12]
 803a15c:	0719      	lsls	r1, r3, #28
 803a15e:	d51d      	bpl.n	803a19c <_puts_r+0x78>
 803a160:	6923      	ldr	r3, [r4, #16]
 803a162:	b1db      	cbz	r3, 803a19c <_puts_r+0x78>
 803a164:	3e01      	subs	r6, #1
 803a166:	68a3      	ldr	r3, [r4, #8]
 803a168:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 803a16c:	3b01      	subs	r3, #1
 803a16e:	60a3      	str	r3, [r4, #8]
 803a170:	bb39      	cbnz	r1, 803a1c2 <_puts_r+0x9e>
 803a172:	2b00      	cmp	r3, #0
 803a174:	da38      	bge.n	803a1e8 <_puts_r+0xc4>
 803a176:	4622      	mov	r2, r4
 803a178:	210a      	movs	r1, #10
 803a17a:	4628      	mov	r0, r5
 803a17c:	f000 f8b0 	bl	803a2e0 <__swbuf_r>
 803a180:	3001      	adds	r0, #1
 803a182:	d011      	beq.n	803a1a8 <_puts_r+0x84>
 803a184:	250a      	movs	r5, #10
 803a186:	e011      	b.n	803a1ac <_puts_r+0x88>
 803a188:	4b1b      	ldr	r3, [pc, #108]	; (803a1f8 <_puts_r+0xd4>)
 803a18a:	429c      	cmp	r4, r3
 803a18c:	d101      	bne.n	803a192 <_puts_r+0x6e>
 803a18e:	68ac      	ldr	r4, [r5, #8]
 803a190:	e7da      	b.n	803a148 <_puts_r+0x24>
 803a192:	4b1a      	ldr	r3, [pc, #104]	; (803a1fc <_puts_r+0xd8>)
 803a194:	429c      	cmp	r4, r3
 803a196:	bf08      	it	eq
 803a198:	68ec      	ldreq	r4, [r5, #12]
 803a19a:	e7d5      	b.n	803a148 <_puts_r+0x24>
 803a19c:	4621      	mov	r1, r4
 803a19e:	4628      	mov	r0, r5
 803a1a0:	f000 f8f0 	bl	803a384 <__swsetup_r>
 803a1a4:	2800      	cmp	r0, #0
 803a1a6:	d0dd      	beq.n	803a164 <_puts_r+0x40>
 803a1a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 803a1ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803a1ae:	07da      	lsls	r2, r3, #31
 803a1b0:	d405      	bmi.n	803a1be <_puts_r+0x9a>
 803a1b2:	89a3      	ldrh	r3, [r4, #12]
 803a1b4:	059b      	lsls	r3, r3, #22
 803a1b6:	d402      	bmi.n	803a1be <_puts_r+0x9a>
 803a1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803a1ba:	f000 fb0a 	bl	803a7d2 <__retarget_lock_release_recursive>
 803a1be:	4628      	mov	r0, r5
 803a1c0:	bd70      	pop	{r4, r5, r6, pc}
 803a1c2:	2b00      	cmp	r3, #0
 803a1c4:	da04      	bge.n	803a1d0 <_puts_r+0xac>
 803a1c6:	69a2      	ldr	r2, [r4, #24]
 803a1c8:	429a      	cmp	r2, r3
 803a1ca:	dc06      	bgt.n	803a1da <_puts_r+0xb6>
 803a1cc:	290a      	cmp	r1, #10
 803a1ce:	d004      	beq.n	803a1da <_puts_r+0xb6>
 803a1d0:	6823      	ldr	r3, [r4, #0]
 803a1d2:	1c5a      	adds	r2, r3, #1
 803a1d4:	6022      	str	r2, [r4, #0]
 803a1d6:	7019      	strb	r1, [r3, #0]
 803a1d8:	e7c5      	b.n	803a166 <_puts_r+0x42>
 803a1da:	4622      	mov	r2, r4
 803a1dc:	4628      	mov	r0, r5
 803a1de:	f000 f87f 	bl	803a2e0 <__swbuf_r>
 803a1e2:	3001      	adds	r0, #1
 803a1e4:	d1bf      	bne.n	803a166 <_puts_r+0x42>
 803a1e6:	e7df      	b.n	803a1a8 <_puts_r+0x84>
 803a1e8:	6823      	ldr	r3, [r4, #0]
 803a1ea:	250a      	movs	r5, #10
 803a1ec:	1c5a      	adds	r2, r3, #1
 803a1ee:	6022      	str	r2, [r4, #0]
 803a1f0:	701d      	strb	r5, [r3, #0]
 803a1f2:	e7db      	b.n	803a1ac <_puts_r+0x88>
 803a1f4:	0803be08 	.word	0x0803be08
 803a1f8:	0803be28 	.word	0x0803be28
 803a1fc:	0803bde8 	.word	0x0803bde8

0803a200 <puts>:
 803a200:	4b02      	ldr	r3, [pc, #8]	; (803a20c <puts+0xc>)
 803a202:	4601      	mov	r1, r0
 803a204:	6818      	ldr	r0, [r3, #0]
 803a206:	f7ff bf8d 	b.w	803a124 <_puts_r>
 803a20a:	bf00      	nop
 803a20c:	24000034 	.word	0x24000034

0803a210 <_sbrk_r>:
 803a210:	b538      	push	{r3, r4, r5, lr}
 803a212:	4d06      	ldr	r5, [pc, #24]	; (803a22c <_sbrk_r+0x1c>)
 803a214:	2300      	movs	r3, #0
 803a216:	4604      	mov	r4, r0
 803a218:	4608      	mov	r0, r1
 803a21a:	602b      	str	r3, [r5, #0]
 803a21c:	f7e7 fe30 	bl	8021e80 <_sbrk>
 803a220:	1c43      	adds	r3, r0, #1
 803a222:	d102      	bne.n	803a22a <_sbrk_r+0x1a>
 803a224:	682b      	ldr	r3, [r5, #0]
 803a226:	b103      	cbz	r3, 803a22a <_sbrk_r+0x1a>
 803a228:	6023      	str	r3, [r4, #0]
 803a22a:	bd38      	pop	{r3, r4, r5, pc}
 803a22c:	240071e4 	.word	0x240071e4

0803a230 <siprintf>:
 803a230:	b40e      	push	{r1, r2, r3}
 803a232:	b500      	push	{lr}
 803a234:	b09c      	sub	sp, #112	; 0x70
 803a236:	ab1d      	add	r3, sp, #116	; 0x74
 803a238:	9002      	str	r0, [sp, #8]
 803a23a:	9006      	str	r0, [sp, #24]
 803a23c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 803a240:	4809      	ldr	r0, [pc, #36]	; (803a268 <siprintf+0x38>)
 803a242:	9107      	str	r1, [sp, #28]
 803a244:	9104      	str	r1, [sp, #16]
 803a246:	4909      	ldr	r1, [pc, #36]	; (803a26c <siprintf+0x3c>)
 803a248:	f853 2b04 	ldr.w	r2, [r3], #4
 803a24c:	9105      	str	r1, [sp, #20]
 803a24e:	6800      	ldr	r0, [r0, #0]
 803a250:	9301      	str	r3, [sp, #4]
 803a252:	a902      	add	r1, sp, #8
 803a254:	f000 fb8c 	bl	803a970 <_svfiprintf_r>
 803a258:	9b02      	ldr	r3, [sp, #8]
 803a25a:	2200      	movs	r2, #0
 803a25c:	701a      	strb	r2, [r3, #0]
 803a25e:	b01c      	add	sp, #112	; 0x70
 803a260:	f85d eb04 	ldr.w	lr, [sp], #4
 803a264:	b003      	add	sp, #12
 803a266:	4770      	bx	lr
 803a268:	24000034 	.word	0x24000034
 803a26c:	ffff0208 	.word	0xffff0208

0803a270 <strchr>:
 803a270:	b2c9      	uxtb	r1, r1
 803a272:	4603      	mov	r3, r0
 803a274:	f810 2b01 	ldrb.w	r2, [r0], #1
 803a278:	b11a      	cbz	r2, 803a282 <strchr+0x12>
 803a27a:	428a      	cmp	r2, r1
 803a27c:	d1f9      	bne.n	803a272 <strchr+0x2>
 803a27e:	4618      	mov	r0, r3
 803a280:	4770      	bx	lr
 803a282:	2900      	cmp	r1, #0
 803a284:	bf18      	it	ne
 803a286:	2300      	movne	r3, #0
 803a288:	e7f9      	b.n	803a27e <strchr+0xe>

0803a28a <strncmp>:
 803a28a:	b510      	push	{r4, lr}
 803a28c:	b17a      	cbz	r2, 803a2ae <strncmp+0x24>
 803a28e:	4603      	mov	r3, r0
 803a290:	3901      	subs	r1, #1
 803a292:	1884      	adds	r4, r0, r2
 803a294:	f813 0b01 	ldrb.w	r0, [r3], #1
 803a298:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 803a29c:	4290      	cmp	r0, r2
 803a29e:	d101      	bne.n	803a2a4 <strncmp+0x1a>
 803a2a0:	42a3      	cmp	r3, r4
 803a2a2:	d101      	bne.n	803a2a8 <strncmp+0x1e>
 803a2a4:	1a80      	subs	r0, r0, r2
 803a2a6:	bd10      	pop	{r4, pc}
 803a2a8:	2800      	cmp	r0, #0
 803a2aa:	d1f3      	bne.n	803a294 <strncmp+0xa>
 803a2ac:	e7fa      	b.n	803a2a4 <strncmp+0x1a>
 803a2ae:	4610      	mov	r0, r2
 803a2b0:	e7f9      	b.n	803a2a6 <strncmp+0x1c>

0803a2b2 <strstr>:
 803a2b2:	780a      	ldrb	r2, [r1, #0]
 803a2b4:	b570      	push	{r4, r5, r6, lr}
 803a2b6:	b96a      	cbnz	r2, 803a2d4 <strstr+0x22>
 803a2b8:	bd70      	pop	{r4, r5, r6, pc}
 803a2ba:	429a      	cmp	r2, r3
 803a2bc:	d109      	bne.n	803a2d2 <strstr+0x20>
 803a2be:	460c      	mov	r4, r1
 803a2c0:	4605      	mov	r5, r0
 803a2c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 803a2c6:	2b00      	cmp	r3, #0
 803a2c8:	d0f6      	beq.n	803a2b8 <strstr+0x6>
 803a2ca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 803a2ce:	429e      	cmp	r6, r3
 803a2d0:	d0f7      	beq.n	803a2c2 <strstr+0x10>
 803a2d2:	3001      	adds	r0, #1
 803a2d4:	7803      	ldrb	r3, [r0, #0]
 803a2d6:	2b00      	cmp	r3, #0
 803a2d8:	d1ef      	bne.n	803a2ba <strstr+0x8>
 803a2da:	4618      	mov	r0, r3
 803a2dc:	e7ec      	b.n	803a2b8 <strstr+0x6>
	...

0803a2e0 <__swbuf_r>:
 803a2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803a2e2:	460e      	mov	r6, r1
 803a2e4:	4614      	mov	r4, r2
 803a2e6:	4605      	mov	r5, r0
 803a2e8:	b118      	cbz	r0, 803a2f2 <__swbuf_r+0x12>
 803a2ea:	6983      	ldr	r3, [r0, #24]
 803a2ec:	b90b      	cbnz	r3, 803a2f2 <__swbuf_r+0x12>
 803a2ee:	f000 f9d1 	bl	803a694 <__sinit>
 803a2f2:	4b21      	ldr	r3, [pc, #132]	; (803a378 <__swbuf_r+0x98>)
 803a2f4:	429c      	cmp	r4, r3
 803a2f6:	d12b      	bne.n	803a350 <__swbuf_r+0x70>
 803a2f8:	686c      	ldr	r4, [r5, #4]
 803a2fa:	69a3      	ldr	r3, [r4, #24]
 803a2fc:	60a3      	str	r3, [r4, #8]
 803a2fe:	89a3      	ldrh	r3, [r4, #12]
 803a300:	071a      	lsls	r2, r3, #28
 803a302:	d52f      	bpl.n	803a364 <__swbuf_r+0x84>
 803a304:	6923      	ldr	r3, [r4, #16]
 803a306:	b36b      	cbz	r3, 803a364 <__swbuf_r+0x84>
 803a308:	6923      	ldr	r3, [r4, #16]
 803a30a:	6820      	ldr	r0, [r4, #0]
 803a30c:	1ac0      	subs	r0, r0, r3
 803a30e:	6963      	ldr	r3, [r4, #20]
 803a310:	b2f6      	uxtb	r6, r6
 803a312:	4283      	cmp	r3, r0
 803a314:	4637      	mov	r7, r6
 803a316:	dc04      	bgt.n	803a322 <__swbuf_r+0x42>
 803a318:	4621      	mov	r1, r4
 803a31a:	4628      	mov	r0, r5
 803a31c:	f000 f926 	bl	803a56c <_fflush_r>
 803a320:	bb30      	cbnz	r0, 803a370 <__swbuf_r+0x90>
 803a322:	68a3      	ldr	r3, [r4, #8]
 803a324:	3b01      	subs	r3, #1
 803a326:	60a3      	str	r3, [r4, #8]
 803a328:	6823      	ldr	r3, [r4, #0]
 803a32a:	1c5a      	adds	r2, r3, #1
 803a32c:	6022      	str	r2, [r4, #0]
 803a32e:	701e      	strb	r6, [r3, #0]
 803a330:	6963      	ldr	r3, [r4, #20]
 803a332:	3001      	adds	r0, #1
 803a334:	4283      	cmp	r3, r0
 803a336:	d004      	beq.n	803a342 <__swbuf_r+0x62>
 803a338:	89a3      	ldrh	r3, [r4, #12]
 803a33a:	07db      	lsls	r3, r3, #31
 803a33c:	d506      	bpl.n	803a34c <__swbuf_r+0x6c>
 803a33e:	2e0a      	cmp	r6, #10
 803a340:	d104      	bne.n	803a34c <__swbuf_r+0x6c>
 803a342:	4621      	mov	r1, r4
 803a344:	4628      	mov	r0, r5
 803a346:	f000 f911 	bl	803a56c <_fflush_r>
 803a34a:	b988      	cbnz	r0, 803a370 <__swbuf_r+0x90>
 803a34c:	4638      	mov	r0, r7
 803a34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803a350:	4b0a      	ldr	r3, [pc, #40]	; (803a37c <__swbuf_r+0x9c>)
 803a352:	429c      	cmp	r4, r3
 803a354:	d101      	bne.n	803a35a <__swbuf_r+0x7a>
 803a356:	68ac      	ldr	r4, [r5, #8]
 803a358:	e7cf      	b.n	803a2fa <__swbuf_r+0x1a>
 803a35a:	4b09      	ldr	r3, [pc, #36]	; (803a380 <__swbuf_r+0xa0>)
 803a35c:	429c      	cmp	r4, r3
 803a35e:	bf08      	it	eq
 803a360:	68ec      	ldreq	r4, [r5, #12]
 803a362:	e7ca      	b.n	803a2fa <__swbuf_r+0x1a>
 803a364:	4621      	mov	r1, r4
 803a366:	4628      	mov	r0, r5
 803a368:	f000 f80c 	bl	803a384 <__swsetup_r>
 803a36c:	2800      	cmp	r0, #0
 803a36e:	d0cb      	beq.n	803a308 <__swbuf_r+0x28>
 803a370:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 803a374:	e7ea      	b.n	803a34c <__swbuf_r+0x6c>
 803a376:	bf00      	nop
 803a378:	0803be08 	.word	0x0803be08
 803a37c:	0803be28 	.word	0x0803be28
 803a380:	0803bde8 	.word	0x0803bde8

0803a384 <__swsetup_r>:
 803a384:	4b32      	ldr	r3, [pc, #200]	; (803a450 <__swsetup_r+0xcc>)
 803a386:	b570      	push	{r4, r5, r6, lr}
 803a388:	681d      	ldr	r5, [r3, #0]
 803a38a:	4606      	mov	r6, r0
 803a38c:	460c      	mov	r4, r1
 803a38e:	b125      	cbz	r5, 803a39a <__swsetup_r+0x16>
 803a390:	69ab      	ldr	r3, [r5, #24]
 803a392:	b913      	cbnz	r3, 803a39a <__swsetup_r+0x16>
 803a394:	4628      	mov	r0, r5
 803a396:	f000 f97d 	bl	803a694 <__sinit>
 803a39a:	4b2e      	ldr	r3, [pc, #184]	; (803a454 <__swsetup_r+0xd0>)
 803a39c:	429c      	cmp	r4, r3
 803a39e:	d10f      	bne.n	803a3c0 <__swsetup_r+0x3c>
 803a3a0:	686c      	ldr	r4, [r5, #4]
 803a3a2:	89a3      	ldrh	r3, [r4, #12]
 803a3a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803a3a8:	0719      	lsls	r1, r3, #28
 803a3aa:	d42c      	bmi.n	803a406 <__swsetup_r+0x82>
 803a3ac:	06dd      	lsls	r5, r3, #27
 803a3ae:	d411      	bmi.n	803a3d4 <__swsetup_r+0x50>
 803a3b0:	2309      	movs	r3, #9
 803a3b2:	6033      	str	r3, [r6, #0]
 803a3b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803a3b8:	81a3      	strh	r3, [r4, #12]
 803a3ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803a3be:	e03e      	b.n	803a43e <__swsetup_r+0xba>
 803a3c0:	4b25      	ldr	r3, [pc, #148]	; (803a458 <__swsetup_r+0xd4>)
 803a3c2:	429c      	cmp	r4, r3
 803a3c4:	d101      	bne.n	803a3ca <__swsetup_r+0x46>
 803a3c6:	68ac      	ldr	r4, [r5, #8]
 803a3c8:	e7eb      	b.n	803a3a2 <__swsetup_r+0x1e>
 803a3ca:	4b24      	ldr	r3, [pc, #144]	; (803a45c <__swsetup_r+0xd8>)
 803a3cc:	429c      	cmp	r4, r3
 803a3ce:	bf08      	it	eq
 803a3d0:	68ec      	ldreq	r4, [r5, #12]
 803a3d2:	e7e6      	b.n	803a3a2 <__swsetup_r+0x1e>
 803a3d4:	0758      	lsls	r0, r3, #29
 803a3d6:	d512      	bpl.n	803a3fe <__swsetup_r+0x7a>
 803a3d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803a3da:	b141      	cbz	r1, 803a3ee <__swsetup_r+0x6a>
 803a3dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803a3e0:	4299      	cmp	r1, r3
 803a3e2:	d002      	beq.n	803a3ea <__swsetup_r+0x66>
 803a3e4:	4630      	mov	r0, r6
 803a3e6:	f7ff fda5 	bl	8039f34 <_free_r>
 803a3ea:	2300      	movs	r3, #0
 803a3ec:	6363      	str	r3, [r4, #52]	; 0x34
 803a3ee:	89a3      	ldrh	r3, [r4, #12]
 803a3f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803a3f4:	81a3      	strh	r3, [r4, #12]
 803a3f6:	2300      	movs	r3, #0
 803a3f8:	6063      	str	r3, [r4, #4]
 803a3fa:	6923      	ldr	r3, [r4, #16]
 803a3fc:	6023      	str	r3, [r4, #0]
 803a3fe:	89a3      	ldrh	r3, [r4, #12]
 803a400:	f043 0308 	orr.w	r3, r3, #8
 803a404:	81a3      	strh	r3, [r4, #12]
 803a406:	6923      	ldr	r3, [r4, #16]
 803a408:	b94b      	cbnz	r3, 803a41e <__swsetup_r+0x9a>
 803a40a:	89a3      	ldrh	r3, [r4, #12]
 803a40c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803a410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803a414:	d003      	beq.n	803a41e <__swsetup_r+0x9a>
 803a416:	4621      	mov	r1, r4
 803a418:	4630      	mov	r0, r6
 803a41a:	f000 fa01 	bl	803a820 <__smakebuf_r>
 803a41e:	89a0      	ldrh	r0, [r4, #12]
 803a420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803a424:	f010 0301 	ands.w	r3, r0, #1
 803a428:	d00a      	beq.n	803a440 <__swsetup_r+0xbc>
 803a42a:	2300      	movs	r3, #0
 803a42c:	60a3      	str	r3, [r4, #8]
 803a42e:	6963      	ldr	r3, [r4, #20]
 803a430:	425b      	negs	r3, r3
 803a432:	61a3      	str	r3, [r4, #24]
 803a434:	6923      	ldr	r3, [r4, #16]
 803a436:	b943      	cbnz	r3, 803a44a <__swsetup_r+0xc6>
 803a438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803a43c:	d1ba      	bne.n	803a3b4 <__swsetup_r+0x30>
 803a43e:	bd70      	pop	{r4, r5, r6, pc}
 803a440:	0781      	lsls	r1, r0, #30
 803a442:	bf58      	it	pl
 803a444:	6963      	ldrpl	r3, [r4, #20]
 803a446:	60a3      	str	r3, [r4, #8]
 803a448:	e7f4      	b.n	803a434 <__swsetup_r+0xb0>
 803a44a:	2000      	movs	r0, #0
 803a44c:	e7f7      	b.n	803a43e <__swsetup_r+0xba>
 803a44e:	bf00      	nop
 803a450:	24000034 	.word	0x24000034
 803a454:	0803be08 	.word	0x0803be08
 803a458:	0803be28 	.word	0x0803be28
 803a45c:	0803bde8 	.word	0x0803bde8

0803a460 <__sflush_r>:
 803a460:	898a      	ldrh	r2, [r1, #12]
 803a462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803a466:	4605      	mov	r5, r0
 803a468:	0710      	lsls	r0, r2, #28
 803a46a:	460c      	mov	r4, r1
 803a46c:	d458      	bmi.n	803a520 <__sflush_r+0xc0>
 803a46e:	684b      	ldr	r3, [r1, #4]
 803a470:	2b00      	cmp	r3, #0
 803a472:	dc05      	bgt.n	803a480 <__sflush_r+0x20>
 803a474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803a476:	2b00      	cmp	r3, #0
 803a478:	dc02      	bgt.n	803a480 <__sflush_r+0x20>
 803a47a:	2000      	movs	r0, #0
 803a47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803a480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803a482:	2e00      	cmp	r6, #0
 803a484:	d0f9      	beq.n	803a47a <__sflush_r+0x1a>
 803a486:	2300      	movs	r3, #0
 803a488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803a48c:	682f      	ldr	r7, [r5, #0]
 803a48e:	602b      	str	r3, [r5, #0]
 803a490:	d032      	beq.n	803a4f8 <__sflush_r+0x98>
 803a492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803a494:	89a3      	ldrh	r3, [r4, #12]
 803a496:	075a      	lsls	r2, r3, #29
 803a498:	d505      	bpl.n	803a4a6 <__sflush_r+0x46>
 803a49a:	6863      	ldr	r3, [r4, #4]
 803a49c:	1ac0      	subs	r0, r0, r3
 803a49e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803a4a0:	b10b      	cbz	r3, 803a4a6 <__sflush_r+0x46>
 803a4a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803a4a4:	1ac0      	subs	r0, r0, r3
 803a4a6:	2300      	movs	r3, #0
 803a4a8:	4602      	mov	r2, r0
 803a4aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803a4ac:	6a21      	ldr	r1, [r4, #32]
 803a4ae:	4628      	mov	r0, r5
 803a4b0:	47b0      	blx	r6
 803a4b2:	1c43      	adds	r3, r0, #1
 803a4b4:	89a3      	ldrh	r3, [r4, #12]
 803a4b6:	d106      	bne.n	803a4c6 <__sflush_r+0x66>
 803a4b8:	6829      	ldr	r1, [r5, #0]
 803a4ba:	291d      	cmp	r1, #29
 803a4bc:	d82c      	bhi.n	803a518 <__sflush_r+0xb8>
 803a4be:	4a2a      	ldr	r2, [pc, #168]	; (803a568 <__sflush_r+0x108>)
 803a4c0:	40ca      	lsrs	r2, r1
 803a4c2:	07d6      	lsls	r6, r2, #31
 803a4c4:	d528      	bpl.n	803a518 <__sflush_r+0xb8>
 803a4c6:	2200      	movs	r2, #0
 803a4c8:	6062      	str	r2, [r4, #4]
 803a4ca:	04d9      	lsls	r1, r3, #19
 803a4cc:	6922      	ldr	r2, [r4, #16]
 803a4ce:	6022      	str	r2, [r4, #0]
 803a4d0:	d504      	bpl.n	803a4dc <__sflush_r+0x7c>
 803a4d2:	1c42      	adds	r2, r0, #1
 803a4d4:	d101      	bne.n	803a4da <__sflush_r+0x7a>
 803a4d6:	682b      	ldr	r3, [r5, #0]
 803a4d8:	b903      	cbnz	r3, 803a4dc <__sflush_r+0x7c>
 803a4da:	6560      	str	r0, [r4, #84]	; 0x54
 803a4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803a4de:	602f      	str	r7, [r5, #0]
 803a4e0:	2900      	cmp	r1, #0
 803a4e2:	d0ca      	beq.n	803a47a <__sflush_r+0x1a>
 803a4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803a4e8:	4299      	cmp	r1, r3
 803a4ea:	d002      	beq.n	803a4f2 <__sflush_r+0x92>
 803a4ec:	4628      	mov	r0, r5
 803a4ee:	f7ff fd21 	bl	8039f34 <_free_r>
 803a4f2:	2000      	movs	r0, #0
 803a4f4:	6360      	str	r0, [r4, #52]	; 0x34
 803a4f6:	e7c1      	b.n	803a47c <__sflush_r+0x1c>
 803a4f8:	6a21      	ldr	r1, [r4, #32]
 803a4fa:	2301      	movs	r3, #1
 803a4fc:	4628      	mov	r0, r5
 803a4fe:	47b0      	blx	r6
 803a500:	1c41      	adds	r1, r0, #1
 803a502:	d1c7      	bne.n	803a494 <__sflush_r+0x34>
 803a504:	682b      	ldr	r3, [r5, #0]
 803a506:	2b00      	cmp	r3, #0
 803a508:	d0c4      	beq.n	803a494 <__sflush_r+0x34>
 803a50a:	2b1d      	cmp	r3, #29
 803a50c:	d001      	beq.n	803a512 <__sflush_r+0xb2>
 803a50e:	2b16      	cmp	r3, #22
 803a510:	d101      	bne.n	803a516 <__sflush_r+0xb6>
 803a512:	602f      	str	r7, [r5, #0]
 803a514:	e7b1      	b.n	803a47a <__sflush_r+0x1a>
 803a516:	89a3      	ldrh	r3, [r4, #12]
 803a518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a51c:	81a3      	strh	r3, [r4, #12]
 803a51e:	e7ad      	b.n	803a47c <__sflush_r+0x1c>
 803a520:	690f      	ldr	r7, [r1, #16]
 803a522:	2f00      	cmp	r7, #0
 803a524:	d0a9      	beq.n	803a47a <__sflush_r+0x1a>
 803a526:	0793      	lsls	r3, r2, #30
 803a528:	680e      	ldr	r6, [r1, #0]
 803a52a:	bf08      	it	eq
 803a52c:	694b      	ldreq	r3, [r1, #20]
 803a52e:	600f      	str	r7, [r1, #0]
 803a530:	bf18      	it	ne
 803a532:	2300      	movne	r3, #0
 803a534:	eba6 0807 	sub.w	r8, r6, r7
 803a538:	608b      	str	r3, [r1, #8]
 803a53a:	f1b8 0f00 	cmp.w	r8, #0
 803a53e:	dd9c      	ble.n	803a47a <__sflush_r+0x1a>
 803a540:	6a21      	ldr	r1, [r4, #32]
 803a542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803a544:	4643      	mov	r3, r8
 803a546:	463a      	mov	r2, r7
 803a548:	4628      	mov	r0, r5
 803a54a:	47b0      	blx	r6
 803a54c:	2800      	cmp	r0, #0
 803a54e:	dc06      	bgt.n	803a55e <__sflush_r+0xfe>
 803a550:	89a3      	ldrh	r3, [r4, #12]
 803a552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a556:	81a3      	strh	r3, [r4, #12]
 803a558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803a55c:	e78e      	b.n	803a47c <__sflush_r+0x1c>
 803a55e:	4407      	add	r7, r0
 803a560:	eba8 0800 	sub.w	r8, r8, r0
 803a564:	e7e9      	b.n	803a53a <__sflush_r+0xda>
 803a566:	bf00      	nop
 803a568:	20400001 	.word	0x20400001

0803a56c <_fflush_r>:
 803a56c:	b538      	push	{r3, r4, r5, lr}
 803a56e:	690b      	ldr	r3, [r1, #16]
 803a570:	4605      	mov	r5, r0
 803a572:	460c      	mov	r4, r1
 803a574:	b913      	cbnz	r3, 803a57c <_fflush_r+0x10>
 803a576:	2500      	movs	r5, #0
 803a578:	4628      	mov	r0, r5
 803a57a:	bd38      	pop	{r3, r4, r5, pc}
 803a57c:	b118      	cbz	r0, 803a586 <_fflush_r+0x1a>
 803a57e:	6983      	ldr	r3, [r0, #24]
 803a580:	b90b      	cbnz	r3, 803a586 <_fflush_r+0x1a>
 803a582:	f000 f887 	bl	803a694 <__sinit>
 803a586:	4b14      	ldr	r3, [pc, #80]	; (803a5d8 <_fflush_r+0x6c>)
 803a588:	429c      	cmp	r4, r3
 803a58a:	d11b      	bne.n	803a5c4 <_fflush_r+0x58>
 803a58c:	686c      	ldr	r4, [r5, #4]
 803a58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803a592:	2b00      	cmp	r3, #0
 803a594:	d0ef      	beq.n	803a576 <_fflush_r+0xa>
 803a596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803a598:	07d0      	lsls	r0, r2, #31
 803a59a:	d404      	bmi.n	803a5a6 <_fflush_r+0x3a>
 803a59c:	0599      	lsls	r1, r3, #22
 803a59e:	d402      	bmi.n	803a5a6 <_fflush_r+0x3a>
 803a5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803a5a2:	f000 f915 	bl	803a7d0 <__retarget_lock_acquire_recursive>
 803a5a6:	4628      	mov	r0, r5
 803a5a8:	4621      	mov	r1, r4
 803a5aa:	f7ff ff59 	bl	803a460 <__sflush_r>
 803a5ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803a5b0:	07da      	lsls	r2, r3, #31
 803a5b2:	4605      	mov	r5, r0
 803a5b4:	d4e0      	bmi.n	803a578 <_fflush_r+0xc>
 803a5b6:	89a3      	ldrh	r3, [r4, #12]
 803a5b8:	059b      	lsls	r3, r3, #22
 803a5ba:	d4dd      	bmi.n	803a578 <_fflush_r+0xc>
 803a5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803a5be:	f000 f908 	bl	803a7d2 <__retarget_lock_release_recursive>
 803a5c2:	e7d9      	b.n	803a578 <_fflush_r+0xc>
 803a5c4:	4b05      	ldr	r3, [pc, #20]	; (803a5dc <_fflush_r+0x70>)
 803a5c6:	429c      	cmp	r4, r3
 803a5c8:	d101      	bne.n	803a5ce <_fflush_r+0x62>
 803a5ca:	68ac      	ldr	r4, [r5, #8]
 803a5cc:	e7df      	b.n	803a58e <_fflush_r+0x22>
 803a5ce:	4b04      	ldr	r3, [pc, #16]	; (803a5e0 <_fflush_r+0x74>)
 803a5d0:	429c      	cmp	r4, r3
 803a5d2:	bf08      	it	eq
 803a5d4:	68ec      	ldreq	r4, [r5, #12]
 803a5d6:	e7da      	b.n	803a58e <_fflush_r+0x22>
 803a5d8:	0803be08 	.word	0x0803be08
 803a5dc:	0803be28 	.word	0x0803be28
 803a5e0:	0803bde8 	.word	0x0803bde8

0803a5e4 <std>:
 803a5e4:	2300      	movs	r3, #0
 803a5e6:	b510      	push	{r4, lr}
 803a5e8:	4604      	mov	r4, r0
 803a5ea:	e9c0 3300 	strd	r3, r3, [r0]
 803a5ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803a5f2:	6083      	str	r3, [r0, #8]
 803a5f4:	8181      	strh	r1, [r0, #12]
 803a5f6:	6643      	str	r3, [r0, #100]	; 0x64
 803a5f8:	81c2      	strh	r2, [r0, #14]
 803a5fa:	6183      	str	r3, [r0, #24]
 803a5fc:	4619      	mov	r1, r3
 803a5fe:	2208      	movs	r2, #8
 803a600:	305c      	adds	r0, #92	; 0x5c
 803a602:	f7ff fc8f 	bl	8039f24 <memset>
 803a606:	4b05      	ldr	r3, [pc, #20]	; (803a61c <std+0x38>)
 803a608:	6263      	str	r3, [r4, #36]	; 0x24
 803a60a:	4b05      	ldr	r3, [pc, #20]	; (803a620 <std+0x3c>)
 803a60c:	62a3      	str	r3, [r4, #40]	; 0x28
 803a60e:	4b05      	ldr	r3, [pc, #20]	; (803a624 <std+0x40>)
 803a610:	62e3      	str	r3, [r4, #44]	; 0x2c
 803a612:	4b05      	ldr	r3, [pc, #20]	; (803a628 <std+0x44>)
 803a614:	6224      	str	r4, [r4, #32]
 803a616:	6323      	str	r3, [r4, #48]	; 0x30
 803a618:	bd10      	pop	{r4, pc}
 803a61a:	bf00      	nop
 803a61c:	0803b14d 	.word	0x0803b14d
 803a620:	0803b16f 	.word	0x0803b16f
 803a624:	0803b1a7 	.word	0x0803b1a7
 803a628:	0803b1cb 	.word	0x0803b1cb

0803a62c <_cleanup_r>:
 803a62c:	4901      	ldr	r1, [pc, #4]	; (803a634 <_cleanup_r+0x8>)
 803a62e:	f000 b8af 	b.w	803a790 <_fwalk_reent>
 803a632:	bf00      	nop
 803a634:	0803a56d 	.word	0x0803a56d

0803a638 <__sfmoreglue>:
 803a638:	b570      	push	{r4, r5, r6, lr}
 803a63a:	2268      	movs	r2, #104	; 0x68
 803a63c:	1e4d      	subs	r5, r1, #1
 803a63e:	4355      	muls	r5, r2
 803a640:	460e      	mov	r6, r1
 803a642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803a646:	f7ff fce1 	bl	803a00c <_malloc_r>
 803a64a:	4604      	mov	r4, r0
 803a64c:	b140      	cbz	r0, 803a660 <__sfmoreglue+0x28>
 803a64e:	2100      	movs	r1, #0
 803a650:	e9c0 1600 	strd	r1, r6, [r0]
 803a654:	300c      	adds	r0, #12
 803a656:	60a0      	str	r0, [r4, #8]
 803a658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803a65c:	f7ff fc62 	bl	8039f24 <memset>
 803a660:	4620      	mov	r0, r4
 803a662:	bd70      	pop	{r4, r5, r6, pc}

0803a664 <__sfp_lock_acquire>:
 803a664:	4801      	ldr	r0, [pc, #4]	; (803a66c <__sfp_lock_acquire+0x8>)
 803a666:	f000 b8b3 	b.w	803a7d0 <__retarget_lock_acquire_recursive>
 803a66a:	bf00      	nop
 803a66c:	240071e1 	.word	0x240071e1

0803a670 <__sfp_lock_release>:
 803a670:	4801      	ldr	r0, [pc, #4]	; (803a678 <__sfp_lock_release+0x8>)
 803a672:	f000 b8ae 	b.w	803a7d2 <__retarget_lock_release_recursive>
 803a676:	bf00      	nop
 803a678:	240071e1 	.word	0x240071e1

0803a67c <__sinit_lock_acquire>:
 803a67c:	4801      	ldr	r0, [pc, #4]	; (803a684 <__sinit_lock_acquire+0x8>)
 803a67e:	f000 b8a7 	b.w	803a7d0 <__retarget_lock_acquire_recursive>
 803a682:	bf00      	nop
 803a684:	240071e2 	.word	0x240071e2

0803a688 <__sinit_lock_release>:
 803a688:	4801      	ldr	r0, [pc, #4]	; (803a690 <__sinit_lock_release+0x8>)
 803a68a:	f000 b8a2 	b.w	803a7d2 <__retarget_lock_release_recursive>
 803a68e:	bf00      	nop
 803a690:	240071e2 	.word	0x240071e2

0803a694 <__sinit>:
 803a694:	b510      	push	{r4, lr}
 803a696:	4604      	mov	r4, r0
 803a698:	f7ff fff0 	bl	803a67c <__sinit_lock_acquire>
 803a69c:	69a3      	ldr	r3, [r4, #24]
 803a69e:	b11b      	cbz	r3, 803a6a8 <__sinit+0x14>
 803a6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803a6a4:	f7ff bff0 	b.w	803a688 <__sinit_lock_release>
 803a6a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803a6ac:	6523      	str	r3, [r4, #80]	; 0x50
 803a6ae:	4b13      	ldr	r3, [pc, #76]	; (803a6fc <__sinit+0x68>)
 803a6b0:	4a13      	ldr	r2, [pc, #76]	; (803a700 <__sinit+0x6c>)
 803a6b2:	681b      	ldr	r3, [r3, #0]
 803a6b4:	62a2      	str	r2, [r4, #40]	; 0x28
 803a6b6:	42a3      	cmp	r3, r4
 803a6b8:	bf04      	itt	eq
 803a6ba:	2301      	moveq	r3, #1
 803a6bc:	61a3      	streq	r3, [r4, #24]
 803a6be:	4620      	mov	r0, r4
 803a6c0:	f000 f820 	bl	803a704 <__sfp>
 803a6c4:	6060      	str	r0, [r4, #4]
 803a6c6:	4620      	mov	r0, r4
 803a6c8:	f000 f81c 	bl	803a704 <__sfp>
 803a6cc:	60a0      	str	r0, [r4, #8]
 803a6ce:	4620      	mov	r0, r4
 803a6d0:	f000 f818 	bl	803a704 <__sfp>
 803a6d4:	2200      	movs	r2, #0
 803a6d6:	60e0      	str	r0, [r4, #12]
 803a6d8:	2104      	movs	r1, #4
 803a6da:	6860      	ldr	r0, [r4, #4]
 803a6dc:	f7ff ff82 	bl	803a5e4 <std>
 803a6e0:	68a0      	ldr	r0, [r4, #8]
 803a6e2:	2201      	movs	r2, #1
 803a6e4:	2109      	movs	r1, #9
 803a6e6:	f7ff ff7d 	bl	803a5e4 <std>
 803a6ea:	68e0      	ldr	r0, [r4, #12]
 803a6ec:	2202      	movs	r2, #2
 803a6ee:	2112      	movs	r1, #18
 803a6f0:	f7ff ff78 	bl	803a5e4 <std>
 803a6f4:	2301      	movs	r3, #1
 803a6f6:	61a3      	str	r3, [r4, #24]
 803a6f8:	e7d2      	b.n	803a6a0 <__sinit+0xc>
 803a6fa:	bf00      	nop
 803a6fc:	0803bde4 	.word	0x0803bde4
 803a700:	0803a62d 	.word	0x0803a62d

0803a704 <__sfp>:
 803a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803a706:	4607      	mov	r7, r0
 803a708:	f7ff ffac 	bl	803a664 <__sfp_lock_acquire>
 803a70c:	4b1e      	ldr	r3, [pc, #120]	; (803a788 <__sfp+0x84>)
 803a70e:	681e      	ldr	r6, [r3, #0]
 803a710:	69b3      	ldr	r3, [r6, #24]
 803a712:	b913      	cbnz	r3, 803a71a <__sfp+0x16>
 803a714:	4630      	mov	r0, r6
 803a716:	f7ff ffbd 	bl	803a694 <__sinit>
 803a71a:	3648      	adds	r6, #72	; 0x48
 803a71c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803a720:	3b01      	subs	r3, #1
 803a722:	d503      	bpl.n	803a72c <__sfp+0x28>
 803a724:	6833      	ldr	r3, [r6, #0]
 803a726:	b30b      	cbz	r3, 803a76c <__sfp+0x68>
 803a728:	6836      	ldr	r6, [r6, #0]
 803a72a:	e7f7      	b.n	803a71c <__sfp+0x18>
 803a72c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803a730:	b9d5      	cbnz	r5, 803a768 <__sfp+0x64>
 803a732:	4b16      	ldr	r3, [pc, #88]	; (803a78c <__sfp+0x88>)
 803a734:	60e3      	str	r3, [r4, #12]
 803a736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803a73a:	6665      	str	r5, [r4, #100]	; 0x64
 803a73c:	f000 f847 	bl	803a7ce <__retarget_lock_init_recursive>
 803a740:	f7ff ff96 	bl	803a670 <__sfp_lock_release>
 803a744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 803a748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803a74c:	6025      	str	r5, [r4, #0]
 803a74e:	61a5      	str	r5, [r4, #24]
 803a750:	2208      	movs	r2, #8
 803a752:	4629      	mov	r1, r5
 803a754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 803a758:	f7ff fbe4 	bl	8039f24 <memset>
 803a75c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803a760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 803a764:	4620      	mov	r0, r4
 803a766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803a768:	3468      	adds	r4, #104	; 0x68
 803a76a:	e7d9      	b.n	803a720 <__sfp+0x1c>
 803a76c:	2104      	movs	r1, #4
 803a76e:	4638      	mov	r0, r7
 803a770:	f7ff ff62 	bl	803a638 <__sfmoreglue>
 803a774:	4604      	mov	r4, r0
 803a776:	6030      	str	r0, [r6, #0]
 803a778:	2800      	cmp	r0, #0
 803a77a:	d1d5      	bne.n	803a728 <__sfp+0x24>
 803a77c:	f7ff ff78 	bl	803a670 <__sfp_lock_release>
 803a780:	230c      	movs	r3, #12
 803a782:	603b      	str	r3, [r7, #0]
 803a784:	e7ee      	b.n	803a764 <__sfp+0x60>
 803a786:	bf00      	nop
 803a788:	0803bde4 	.word	0x0803bde4
 803a78c:	ffff0001 	.word	0xffff0001

0803a790 <_fwalk_reent>:
 803a790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803a794:	4606      	mov	r6, r0
 803a796:	4688      	mov	r8, r1
 803a798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803a79c:	2700      	movs	r7, #0
 803a79e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803a7a2:	f1b9 0901 	subs.w	r9, r9, #1
 803a7a6:	d505      	bpl.n	803a7b4 <_fwalk_reent+0x24>
 803a7a8:	6824      	ldr	r4, [r4, #0]
 803a7aa:	2c00      	cmp	r4, #0
 803a7ac:	d1f7      	bne.n	803a79e <_fwalk_reent+0xe>
 803a7ae:	4638      	mov	r0, r7
 803a7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803a7b4:	89ab      	ldrh	r3, [r5, #12]
 803a7b6:	2b01      	cmp	r3, #1
 803a7b8:	d907      	bls.n	803a7ca <_fwalk_reent+0x3a>
 803a7ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803a7be:	3301      	adds	r3, #1
 803a7c0:	d003      	beq.n	803a7ca <_fwalk_reent+0x3a>
 803a7c2:	4629      	mov	r1, r5
 803a7c4:	4630      	mov	r0, r6
 803a7c6:	47c0      	blx	r8
 803a7c8:	4307      	orrs	r7, r0
 803a7ca:	3568      	adds	r5, #104	; 0x68
 803a7cc:	e7e9      	b.n	803a7a2 <_fwalk_reent+0x12>

0803a7ce <__retarget_lock_init_recursive>:
 803a7ce:	4770      	bx	lr

0803a7d0 <__retarget_lock_acquire_recursive>:
 803a7d0:	4770      	bx	lr

0803a7d2 <__retarget_lock_release_recursive>:
 803a7d2:	4770      	bx	lr

0803a7d4 <__swhatbuf_r>:
 803a7d4:	b570      	push	{r4, r5, r6, lr}
 803a7d6:	460e      	mov	r6, r1
 803a7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803a7dc:	2900      	cmp	r1, #0
 803a7de:	b096      	sub	sp, #88	; 0x58
 803a7e0:	4614      	mov	r4, r2
 803a7e2:	461d      	mov	r5, r3
 803a7e4:	da08      	bge.n	803a7f8 <__swhatbuf_r+0x24>
 803a7e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803a7ea:	2200      	movs	r2, #0
 803a7ec:	602a      	str	r2, [r5, #0]
 803a7ee:	061a      	lsls	r2, r3, #24
 803a7f0:	d410      	bmi.n	803a814 <__swhatbuf_r+0x40>
 803a7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803a7f6:	e00e      	b.n	803a816 <__swhatbuf_r+0x42>
 803a7f8:	466a      	mov	r2, sp
 803a7fa:	f000 fd0d 	bl	803b218 <_fstat_r>
 803a7fe:	2800      	cmp	r0, #0
 803a800:	dbf1      	blt.n	803a7e6 <__swhatbuf_r+0x12>
 803a802:	9a01      	ldr	r2, [sp, #4]
 803a804:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803a808:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803a80c:	425a      	negs	r2, r3
 803a80e:	415a      	adcs	r2, r3
 803a810:	602a      	str	r2, [r5, #0]
 803a812:	e7ee      	b.n	803a7f2 <__swhatbuf_r+0x1e>
 803a814:	2340      	movs	r3, #64	; 0x40
 803a816:	2000      	movs	r0, #0
 803a818:	6023      	str	r3, [r4, #0]
 803a81a:	b016      	add	sp, #88	; 0x58
 803a81c:	bd70      	pop	{r4, r5, r6, pc}
	...

0803a820 <__smakebuf_r>:
 803a820:	898b      	ldrh	r3, [r1, #12]
 803a822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803a824:	079d      	lsls	r5, r3, #30
 803a826:	4606      	mov	r6, r0
 803a828:	460c      	mov	r4, r1
 803a82a:	d507      	bpl.n	803a83c <__smakebuf_r+0x1c>
 803a82c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803a830:	6023      	str	r3, [r4, #0]
 803a832:	6123      	str	r3, [r4, #16]
 803a834:	2301      	movs	r3, #1
 803a836:	6163      	str	r3, [r4, #20]
 803a838:	b002      	add	sp, #8
 803a83a:	bd70      	pop	{r4, r5, r6, pc}
 803a83c:	ab01      	add	r3, sp, #4
 803a83e:	466a      	mov	r2, sp
 803a840:	f7ff ffc8 	bl	803a7d4 <__swhatbuf_r>
 803a844:	9900      	ldr	r1, [sp, #0]
 803a846:	4605      	mov	r5, r0
 803a848:	4630      	mov	r0, r6
 803a84a:	f7ff fbdf 	bl	803a00c <_malloc_r>
 803a84e:	b948      	cbnz	r0, 803a864 <__smakebuf_r+0x44>
 803a850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803a854:	059a      	lsls	r2, r3, #22
 803a856:	d4ef      	bmi.n	803a838 <__smakebuf_r+0x18>
 803a858:	f023 0303 	bic.w	r3, r3, #3
 803a85c:	f043 0302 	orr.w	r3, r3, #2
 803a860:	81a3      	strh	r3, [r4, #12]
 803a862:	e7e3      	b.n	803a82c <__smakebuf_r+0xc>
 803a864:	4b0d      	ldr	r3, [pc, #52]	; (803a89c <__smakebuf_r+0x7c>)
 803a866:	62b3      	str	r3, [r6, #40]	; 0x28
 803a868:	89a3      	ldrh	r3, [r4, #12]
 803a86a:	6020      	str	r0, [r4, #0]
 803a86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803a870:	81a3      	strh	r3, [r4, #12]
 803a872:	9b00      	ldr	r3, [sp, #0]
 803a874:	6163      	str	r3, [r4, #20]
 803a876:	9b01      	ldr	r3, [sp, #4]
 803a878:	6120      	str	r0, [r4, #16]
 803a87a:	b15b      	cbz	r3, 803a894 <__smakebuf_r+0x74>
 803a87c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803a880:	4630      	mov	r0, r6
 803a882:	f000 fcdb 	bl	803b23c <_isatty_r>
 803a886:	b128      	cbz	r0, 803a894 <__smakebuf_r+0x74>
 803a888:	89a3      	ldrh	r3, [r4, #12]
 803a88a:	f023 0303 	bic.w	r3, r3, #3
 803a88e:	f043 0301 	orr.w	r3, r3, #1
 803a892:	81a3      	strh	r3, [r4, #12]
 803a894:	89a0      	ldrh	r0, [r4, #12]
 803a896:	4305      	orrs	r5, r0
 803a898:	81a5      	strh	r5, [r4, #12]
 803a89a:	e7cd      	b.n	803a838 <__smakebuf_r+0x18>
 803a89c:	0803a62d 	.word	0x0803a62d

0803a8a0 <__malloc_lock>:
 803a8a0:	4801      	ldr	r0, [pc, #4]	; (803a8a8 <__malloc_lock+0x8>)
 803a8a2:	f7ff bf95 	b.w	803a7d0 <__retarget_lock_acquire_recursive>
 803a8a6:	bf00      	nop
 803a8a8:	240071e0 	.word	0x240071e0

0803a8ac <__malloc_unlock>:
 803a8ac:	4801      	ldr	r0, [pc, #4]	; (803a8b4 <__malloc_unlock+0x8>)
 803a8ae:	f7ff bf90 	b.w	803a7d2 <__retarget_lock_release_recursive>
 803a8b2:	bf00      	nop
 803a8b4:	240071e0 	.word	0x240071e0

0803a8b8 <__ssputs_r>:
 803a8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803a8bc:	688e      	ldr	r6, [r1, #8]
 803a8be:	429e      	cmp	r6, r3
 803a8c0:	4682      	mov	sl, r0
 803a8c2:	460c      	mov	r4, r1
 803a8c4:	4690      	mov	r8, r2
 803a8c6:	461f      	mov	r7, r3
 803a8c8:	d838      	bhi.n	803a93c <__ssputs_r+0x84>
 803a8ca:	898a      	ldrh	r2, [r1, #12]
 803a8cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 803a8d0:	d032      	beq.n	803a938 <__ssputs_r+0x80>
 803a8d2:	6825      	ldr	r5, [r4, #0]
 803a8d4:	6909      	ldr	r1, [r1, #16]
 803a8d6:	eba5 0901 	sub.w	r9, r5, r1
 803a8da:	6965      	ldr	r5, [r4, #20]
 803a8dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 803a8e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 803a8e4:	3301      	adds	r3, #1
 803a8e6:	444b      	add	r3, r9
 803a8e8:	106d      	asrs	r5, r5, #1
 803a8ea:	429d      	cmp	r5, r3
 803a8ec:	bf38      	it	cc
 803a8ee:	461d      	movcc	r5, r3
 803a8f0:	0553      	lsls	r3, r2, #21
 803a8f2:	d531      	bpl.n	803a958 <__ssputs_r+0xa0>
 803a8f4:	4629      	mov	r1, r5
 803a8f6:	f7ff fb89 	bl	803a00c <_malloc_r>
 803a8fa:	4606      	mov	r6, r0
 803a8fc:	b950      	cbnz	r0, 803a914 <__ssputs_r+0x5c>
 803a8fe:	230c      	movs	r3, #12
 803a900:	f8ca 3000 	str.w	r3, [sl]
 803a904:	89a3      	ldrh	r3, [r4, #12]
 803a906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a90a:	81a3      	strh	r3, [r4, #12]
 803a90c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803a910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803a914:	6921      	ldr	r1, [r4, #16]
 803a916:	464a      	mov	r2, r9
 803a918:	f7ff faf6 	bl	8039f08 <memcpy>
 803a91c:	89a3      	ldrh	r3, [r4, #12]
 803a91e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 803a922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803a926:	81a3      	strh	r3, [r4, #12]
 803a928:	6126      	str	r6, [r4, #16]
 803a92a:	6165      	str	r5, [r4, #20]
 803a92c:	444e      	add	r6, r9
 803a92e:	eba5 0509 	sub.w	r5, r5, r9
 803a932:	6026      	str	r6, [r4, #0]
 803a934:	60a5      	str	r5, [r4, #8]
 803a936:	463e      	mov	r6, r7
 803a938:	42be      	cmp	r6, r7
 803a93a:	d900      	bls.n	803a93e <__ssputs_r+0x86>
 803a93c:	463e      	mov	r6, r7
 803a93e:	6820      	ldr	r0, [r4, #0]
 803a940:	4632      	mov	r2, r6
 803a942:	4641      	mov	r1, r8
 803a944:	f000 fc9c 	bl	803b280 <memmove>
 803a948:	68a3      	ldr	r3, [r4, #8]
 803a94a:	1b9b      	subs	r3, r3, r6
 803a94c:	60a3      	str	r3, [r4, #8]
 803a94e:	6823      	ldr	r3, [r4, #0]
 803a950:	4433      	add	r3, r6
 803a952:	6023      	str	r3, [r4, #0]
 803a954:	2000      	movs	r0, #0
 803a956:	e7db      	b.n	803a910 <__ssputs_r+0x58>
 803a958:	462a      	mov	r2, r5
 803a95a:	f000 fcab 	bl	803b2b4 <_realloc_r>
 803a95e:	4606      	mov	r6, r0
 803a960:	2800      	cmp	r0, #0
 803a962:	d1e1      	bne.n	803a928 <__ssputs_r+0x70>
 803a964:	6921      	ldr	r1, [r4, #16]
 803a966:	4650      	mov	r0, sl
 803a968:	f7ff fae4 	bl	8039f34 <_free_r>
 803a96c:	e7c7      	b.n	803a8fe <__ssputs_r+0x46>
	...

0803a970 <_svfiprintf_r>:
 803a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803a974:	4698      	mov	r8, r3
 803a976:	898b      	ldrh	r3, [r1, #12]
 803a978:	061b      	lsls	r3, r3, #24
 803a97a:	b09d      	sub	sp, #116	; 0x74
 803a97c:	4607      	mov	r7, r0
 803a97e:	460d      	mov	r5, r1
 803a980:	4614      	mov	r4, r2
 803a982:	d50e      	bpl.n	803a9a2 <_svfiprintf_r+0x32>
 803a984:	690b      	ldr	r3, [r1, #16]
 803a986:	b963      	cbnz	r3, 803a9a2 <_svfiprintf_r+0x32>
 803a988:	2140      	movs	r1, #64	; 0x40
 803a98a:	f7ff fb3f 	bl	803a00c <_malloc_r>
 803a98e:	6028      	str	r0, [r5, #0]
 803a990:	6128      	str	r0, [r5, #16]
 803a992:	b920      	cbnz	r0, 803a99e <_svfiprintf_r+0x2e>
 803a994:	230c      	movs	r3, #12
 803a996:	603b      	str	r3, [r7, #0]
 803a998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803a99c:	e0d1      	b.n	803ab42 <_svfiprintf_r+0x1d2>
 803a99e:	2340      	movs	r3, #64	; 0x40
 803a9a0:	616b      	str	r3, [r5, #20]
 803a9a2:	2300      	movs	r3, #0
 803a9a4:	9309      	str	r3, [sp, #36]	; 0x24
 803a9a6:	2320      	movs	r3, #32
 803a9a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803a9ac:	f8cd 800c 	str.w	r8, [sp, #12]
 803a9b0:	2330      	movs	r3, #48	; 0x30
 803a9b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 803ab5c <_svfiprintf_r+0x1ec>
 803a9b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803a9ba:	f04f 0901 	mov.w	r9, #1
 803a9be:	4623      	mov	r3, r4
 803a9c0:	469a      	mov	sl, r3
 803a9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a9c6:	b10a      	cbz	r2, 803a9cc <_svfiprintf_r+0x5c>
 803a9c8:	2a25      	cmp	r2, #37	; 0x25
 803a9ca:	d1f9      	bne.n	803a9c0 <_svfiprintf_r+0x50>
 803a9cc:	ebba 0b04 	subs.w	fp, sl, r4
 803a9d0:	d00b      	beq.n	803a9ea <_svfiprintf_r+0x7a>
 803a9d2:	465b      	mov	r3, fp
 803a9d4:	4622      	mov	r2, r4
 803a9d6:	4629      	mov	r1, r5
 803a9d8:	4638      	mov	r0, r7
 803a9da:	f7ff ff6d 	bl	803a8b8 <__ssputs_r>
 803a9de:	3001      	adds	r0, #1
 803a9e0:	f000 80aa 	beq.w	803ab38 <_svfiprintf_r+0x1c8>
 803a9e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803a9e6:	445a      	add	r2, fp
 803a9e8:	9209      	str	r2, [sp, #36]	; 0x24
 803a9ea:	f89a 3000 	ldrb.w	r3, [sl]
 803a9ee:	2b00      	cmp	r3, #0
 803a9f0:	f000 80a2 	beq.w	803ab38 <_svfiprintf_r+0x1c8>
 803a9f4:	2300      	movs	r3, #0
 803a9f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803a9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803a9fe:	f10a 0a01 	add.w	sl, sl, #1
 803aa02:	9304      	str	r3, [sp, #16]
 803aa04:	9307      	str	r3, [sp, #28]
 803aa06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803aa0a:	931a      	str	r3, [sp, #104]	; 0x68
 803aa0c:	4654      	mov	r4, sl
 803aa0e:	2205      	movs	r2, #5
 803aa10:	f814 1b01 	ldrb.w	r1, [r4], #1
 803aa14:	4851      	ldr	r0, [pc, #324]	; (803ab5c <_svfiprintf_r+0x1ec>)
 803aa16:	f7e5 fc93 	bl	8020340 <memchr>
 803aa1a:	9a04      	ldr	r2, [sp, #16]
 803aa1c:	b9d8      	cbnz	r0, 803aa56 <_svfiprintf_r+0xe6>
 803aa1e:	06d0      	lsls	r0, r2, #27
 803aa20:	bf44      	itt	mi
 803aa22:	2320      	movmi	r3, #32
 803aa24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803aa28:	0711      	lsls	r1, r2, #28
 803aa2a:	bf44      	itt	mi
 803aa2c:	232b      	movmi	r3, #43	; 0x2b
 803aa2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803aa32:	f89a 3000 	ldrb.w	r3, [sl]
 803aa36:	2b2a      	cmp	r3, #42	; 0x2a
 803aa38:	d015      	beq.n	803aa66 <_svfiprintf_r+0xf6>
 803aa3a:	9a07      	ldr	r2, [sp, #28]
 803aa3c:	4654      	mov	r4, sl
 803aa3e:	2000      	movs	r0, #0
 803aa40:	f04f 0c0a 	mov.w	ip, #10
 803aa44:	4621      	mov	r1, r4
 803aa46:	f811 3b01 	ldrb.w	r3, [r1], #1
 803aa4a:	3b30      	subs	r3, #48	; 0x30
 803aa4c:	2b09      	cmp	r3, #9
 803aa4e:	d94e      	bls.n	803aaee <_svfiprintf_r+0x17e>
 803aa50:	b1b0      	cbz	r0, 803aa80 <_svfiprintf_r+0x110>
 803aa52:	9207      	str	r2, [sp, #28]
 803aa54:	e014      	b.n	803aa80 <_svfiprintf_r+0x110>
 803aa56:	eba0 0308 	sub.w	r3, r0, r8
 803aa5a:	fa09 f303 	lsl.w	r3, r9, r3
 803aa5e:	4313      	orrs	r3, r2
 803aa60:	9304      	str	r3, [sp, #16]
 803aa62:	46a2      	mov	sl, r4
 803aa64:	e7d2      	b.n	803aa0c <_svfiprintf_r+0x9c>
 803aa66:	9b03      	ldr	r3, [sp, #12]
 803aa68:	1d19      	adds	r1, r3, #4
 803aa6a:	681b      	ldr	r3, [r3, #0]
 803aa6c:	9103      	str	r1, [sp, #12]
 803aa6e:	2b00      	cmp	r3, #0
 803aa70:	bfbb      	ittet	lt
 803aa72:	425b      	neglt	r3, r3
 803aa74:	f042 0202 	orrlt.w	r2, r2, #2
 803aa78:	9307      	strge	r3, [sp, #28]
 803aa7a:	9307      	strlt	r3, [sp, #28]
 803aa7c:	bfb8      	it	lt
 803aa7e:	9204      	strlt	r2, [sp, #16]
 803aa80:	7823      	ldrb	r3, [r4, #0]
 803aa82:	2b2e      	cmp	r3, #46	; 0x2e
 803aa84:	d10c      	bne.n	803aaa0 <_svfiprintf_r+0x130>
 803aa86:	7863      	ldrb	r3, [r4, #1]
 803aa88:	2b2a      	cmp	r3, #42	; 0x2a
 803aa8a:	d135      	bne.n	803aaf8 <_svfiprintf_r+0x188>
 803aa8c:	9b03      	ldr	r3, [sp, #12]
 803aa8e:	1d1a      	adds	r2, r3, #4
 803aa90:	681b      	ldr	r3, [r3, #0]
 803aa92:	9203      	str	r2, [sp, #12]
 803aa94:	2b00      	cmp	r3, #0
 803aa96:	bfb8      	it	lt
 803aa98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803aa9c:	3402      	adds	r4, #2
 803aa9e:	9305      	str	r3, [sp, #20]
 803aaa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 803ab6c <_svfiprintf_r+0x1fc>
 803aaa4:	7821      	ldrb	r1, [r4, #0]
 803aaa6:	2203      	movs	r2, #3
 803aaa8:	4650      	mov	r0, sl
 803aaaa:	f7e5 fc49 	bl	8020340 <memchr>
 803aaae:	b140      	cbz	r0, 803aac2 <_svfiprintf_r+0x152>
 803aab0:	2340      	movs	r3, #64	; 0x40
 803aab2:	eba0 000a 	sub.w	r0, r0, sl
 803aab6:	fa03 f000 	lsl.w	r0, r3, r0
 803aaba:	9b04      	ldr	r3, [sp, #16]
 803aabc:	4303      	orrs	r3, r0
 803aabe:	3401      	adds	r4, #1
 803aac0:	9304      	str	r3, [sp, #16]
 803aac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 803aac6:	4826      	ldr	r0, [pc, #152]	; (803ab60 <_svfiprintf_r+0x1f0>)
 803aac8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803aacc:	2206      	movs	r2, #6
 803aace:	f7e5 fc37 	bl	8020340 <memchr>
 803aad2:	2800      	cmp	r0, #0
 803aad4:	d038      	beq.n	803ab48 <_svfiprintf_r+0x1d8>
 803aad6:	4b23      	ldr	r3, [pc, #140]	; (803ab64 <_svfiprintf_r+0x1f4>)
 803aad8:	bb1b      	cbnz	r3, 803ab22 <_svfiprintf_r+0x1b2>
 803aada:	9b03      	ldr	r3, [sp, #12]
 803aadc:	3307      	adds	r3, #7
 803aade:	f023 0307 	bic.w	r3, r3, #7
 803aae2:	3308      	adds	r3, #8
 803aae4:	9303      	str	r3, [sp, #12]
 803aae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803aae8:	4433      	add	r3, r6
 803aaea:	9309      	str	r3, [sp, #36]	; 0x24
 803aaec:	e767      	b.n	803a9be <_svfiprintf_r+0x4e>
 803aaee:	fb0c 3202 	mla	r2, ip, r2, r3
 803aaf2:	460c      	mov	r4, r1
 803aaf4:	2001      	movs	r0, #1
 803aaf6:	e7a5      	b.n	803aa44 <_svfiprintf_r+0xd4>
 803aaf8:	2300      	movs	r3, #0
 803aafa:	3401      	adds	r4, #1
 803aafc:	9305      	str	r3, [sp, #20]
 803aafe:	4619      	mov	r1, r3
 803ab00:	f04f 0c0a 	mov.w	ip, #10
 803ab04:	4620      	mov	r0, r4
 803ab06:	f810 2b01 	ldrb.w	r2, [r0], #1
 803ab0a:	3a30      	subs	r2, #48	; 0x30
 803ab0c:	2a09      	cmp	r2, #9
 803ab0e:	d903      	bls.n	803ab18 <_svfiprintf_r+0x1a8>
 803ab10:	2b00      	cmp	r3, #0
 803ab12:	d0c5      	beq.n	803aaa0 <_svfiprintf_r+0x130>
 803ab14:	9105      	str	r1, [sp, #20]
 803ab16:	e7c3      	b.n	803aaa0 <_svfiprintf_r+0x130>
 803ab18:	fb0c 2101 	mla	r1, ip, r1, r2
 803ab1c:	4604      	mov	r4, r0
 803ab1e:	2301      	movs	r3, #1
 803ab20:	e7f0      	b.n	803ab04 <_svfiprintf_r+0x194>
 803ab22:	ab03      	add	r3, sp, #12
 803ab24:	9300      	str	r3, [sp, #0]
 803ab26:	462a      	mov	r2, r5
 803ab28:	4b0f      	ldr	r3, [pc, #60]	; (803ab68 <_svfiprintf_r+0x1f8>)
 803ab2a:	a904      	add	r1, sp, #16
 803ab2c:	4638      	mov	r0, r7
 803ab2e:	f3af 8000 	nop.w
 803ab32:	1c42      	adds	r2, r0, #1
 803ab34:	4606      	mov	r6, r0
 803ab36:	d1d6      	bne.n	803aae6 <_svfiprintf_r+0x176>
 803ab38:	89ab      	ldrh	r3, [r5, #12]
 803ab3a:	065b      	lsls	r3, r3, #25
 803ab3c:	f53f af2c 	bmi.w	803a998 <_svfiprintf_r+0x28>
 803ab40:	9809      	ldr	r0, [sp, #36]	; 0x24
 803ab42:	b01d      	add	sp, #116	; 0x74
 803ab44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ab48:	ab03      	add	r3, sp, #12
 803ab4a:	9300      	str	r3, [sp, #0]
 803ab4c:	462a      	mov	r2, r5
 803ab4e:	4b06      	ldr	r3, [pc, #24]	; (803ab68 <_svfiprintf_r+0x1f8>)
 803ab50:	a904      	add	r1, sp, #16
 803ab52:	4638      	mov	r0, r7
 803ab54:	f000 f9d4 	bl	803af00 <_printf_i>
 803ab58:	e7eb      	b.n	803ab32 <_svfiprintf_r+0x1c2>
 803ab5a:	bf00      	nop
 803ab5c:	0803be48 	.word	0x0803be48
 803ab60:	0803be52 	.word	0x0803be52
 803ab64:	00000000 	.word	0x00000000
 803ab68:	0803a8b9 	.word	0x0803a8b9
 803ab6c:	0803be4e 	.word	0x0803be4e

0803ab70 <__sfputc_r>:
 803ab70:	6893      	ldr	r3, [r2, #8]
 803ab72:	3b01      	subs	r3, #1
 803ab74:	2b00      	cmp	r3, #0
 803ab76:	b410      	push	{r4}
 803ab78:	6093      	str	r3, [r2, #8]
 803ab7a:	da08      	bge.n	803ab8e <__sfputc_r+0x1e>
 803ab7c:	6994      	ldr	r4, [r2, #24]
 803ab7e:	42a3      	cmp	r3, r4
 803ab80:	db01      	blt.n	803ab86 <__sfputc_r+0x16>
 803ab82:	290a      	cmp	r1, #10
 803ab84:	d103      	bne.n	803ab8e <__sfputc_r+0x1e>
 803ab86:	f85d 4b04 	ldr.w	r4, [sp], #4
 803ab8a:	f7ff bba9 	b.w	803a2e0 <__swbuf_r>
 803ab8e:	6813      	ldr	r3, [r2, #0]
 803ab90:	1c58      	adds	r0, r3, #1
 803ab92:	6010      	str	r0, [r2, #0]
 803ab94:	7019      	strb	r1, [r3, #0]
 803ab96:	4608      	mov	r0, r1
 803ab98:	f85d 4b04 	ldr.w	r4, [sp], #4
 803ab9c:	4770      	bx	lr

0803ab9e <__sfputs_r>:
 803ab9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803aba0:	4606      	mov	r6, r0
 803aba2:	460f      	mov	r7, r1
 803aba4:	4614      	mov	r4, r2
 803aba6:	18d5      	adds	r5, r2, r3
 803aba8:	42ac      	cmp	r4, r5
 803abaa:	d101      	bne.n	803abb0 <__sfputs_r+0x12>
 803abac:	2000      	movs	r0, #0
 803abae:	e007      	b.n	803abc0 <__sfputs_r+0x22>
 803abb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 803abb4:	463a      	mov	r2, r7
 803abb6:	4630      	mov	r0, r6
 803abb8:	f7ff ffda 	bl	803ab70 <__sfputc_r>
 803abbc:	1c43      	adds	r3, r0, #1
 803abbe:	d1f3      	bne.n	803aba8 <__sfputs_r+0xa>
 803abc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803abc4 <_vfiprintf_r>:
 803abc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803abc8:	460d      	mov	r5, r1
 803abca:	b09d      	sub	sp, #116	; 0x74
 803abcc:	4614      	mov	r4, r2
 803abce:	4698      	mov	r8, r3
 803abd0:	4606      	mov	r6, r0
 803abd2:	b118      	cbz	r0, 803abdc <_vfiprintf_r+0x18>
 803abd4:	6983      	ldr	r3, [r0, #24]
 803abd6:	b90b      	cbnz	r3, 803abdc <_vfiprintf_r+0x18>
 803abd8:	f7ff fd5c 	bl	803a694 <__sinit>
 803abdc:	4b89      	ldr	r3, [pc, #548]	; (803ae04 <_vfiprintf_r+0x240>)
 803abde:	429d      	cmp	r5, r3
 803abe0:	d11b      	bne.n	803ac1a <_vfiprintf_r+0x56>
 803abe2:	6875      	ldr	r5, [r6, #4]
 803abe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803abe6:	07d9      	lsls	r1, r3, #31
 803abe8:	d405      	bmi.n	803abf6 <_vfiprintf_r+0x32>
 803abea:	89ab      	ldrh	r3, [r5, #12]
 803abec:	059a      	lsls	r2, r3, #22
 803abee:	d402      	bmi.n	803abf6 <_vfiprintf_r+0x32>
 803abf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803abf2:	f7ff fded 	bl	803a7d0 <__retarget_lock_acquire_recursive>
 803abf6:	89ab      	ldrh	r3, [r5, #12]
 803abf8:	071b      	lsls	r3, r3, #28
 803abfa:	d501      	bpl.n	803ac00 <_vfiprintf_r+0x3c>
 803abfc:	692b      	ldr	r3, [r5, #16]
 803abfe:	b9eb      	cbnz	r3, 803ac3c <_vfiprintf_r+0x78>
 803ac00:	4629      	mov	r1, r5
 803ac02:	4630      	mov	r0, r6
 803ac04:	f7ff fbbe 	bl	803a384 <__swsetup_r>
 803ac08:	b1c0      	cbz	r0, 803ac3c <_vfiprintf_r+0x78>
 803ac0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803ac0c:	07dc      	lsls	r4, r3, #31
 803ac0e:	d50e      	bpl.n	803ac2e <_vfiprintf_r+0x6a>
 803ac10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803ac14:	b01d      	add	sp, #116	; 0x74
 803ac16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ac1a:	4b7b      	ldr	r3, [pc, #492]	; (803ae08 <_vfiprintf_r+0x244>)
 803ac1c:	429d      	cmp	r5, r3
 803ac1e:	d101      	bne.n	803ac24 <_vfiprintf_r+0x60>
 803ac20:	68b5      	ldr	r5, [r6, #8]
 803ac22:	e7df      	b.n	803abe4 <_vfiprintf_r+0x20>
 803ac24:	4b79      	ldr	r3, [pc, #484]	; (803ae0c <_vfiprintf_r+0x248>)
 803ac26:	429d      	cmp	r5, r3
 803ac28:	bf08      	it	eq
 803ac2a:	68f5      	ldreq	r5, [r6, #12]
 803ac2c:	e7da      	b.n	803abe4 <_vfiprintf_r+0x20>
 803ac2e:	89ab      	ldrh	r3, [r5, #12]
 803ac30:	0598      	lsls	r0, r3, #22
 803ac32:	d4ed      	bmi.n	803ac10 <_vfiprintf_r+0x4c>
 803ac34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803ac36:	f7ff fdcc 	bl	803a7d2 <__retarget_lock_release_recursive>
 803ac3a:	e7e9      	b.n	803ac10 <_vfiprintf_r+0x4c>
 803ac3c:	2300      	movs	r3, #0
 803ac3e:	9309      	str	r3, [sp, #36]	; 0x24
 803ac40:	2320      	movs	r3, #32
 803ac42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803ac46:	f8cd 800c 	str.w	r8, [sp, #12]
 803ac4a:	2330      	movs	r3, #48	; 0x30
 803ac4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803ae10 <_vfiprintf_r+0x24c>
 803ac50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803ac54:	f04f 0901 	mov.w	r9, #1
 803ac58:	4623      	mov	r3, r4
 803ac5a:	469a      	mov	sl, r3
 803ac5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 803ac60:	b10a      	cbz	r2, 803ac66 <_vfiprintf_r+0xa2>
 803ac62:	2a25      	cmp	r2, #37	; 0x25
 803ac64:	d1f9      	bne.n	803ac5a <_vfiprintf_r+0x96>
 803ac66:	ebba 0b04 	subs.w	fp, sl, r4
 803ac6a:	d00b      	beq.n	803ac84 <_vfiprintf_r+0xc0>
 803ac6c:	465b      	mov	r3, fp
 803ac6e:	4622      	mov	r2, r4
 803ac70:	4629      	mov	r1, r5
 803ac72:	4630      	mov	r0, r6
 803ac74:	f7ff ff93 	bl	803ab9e <__sfputs_r>
 803ac78:	3001      	adds	r0, #1
 803ac7a:	f000 80aa 	beq.w	803add2 <_vfiprintf_r+0x20e>
 803ac7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803ac80:	445a      	add	r2, fp
 803ac82:	9209      	str	r2, [sp, #36]	; 0x24
 803ac84:	f89a 3000 	ldrb.w	r3, [sl]
 803ac88:	2b00      	cmp	r3, #0
 803ac8a:	f000 80a2 	beq.w	803add2 <_vfiprintf_r+0x20e>
 803ac8e:	2300      	movs	r3, #0
 803ac90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803ac94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803ac98:	f10a 0a01 	add.w	sl, sl, #1
 803ac9c:	9304      	str	r3, [sp, #16]
 803ac9e:	9307      	str	r3, [sp, #28]
 803aca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803aca4:	931a      	str	r3, [sp, #104]	; 0x68
 803aca6:	4654      	mov	r4, sl
 803aca8:	2205      	movs	r2, #5
 803acaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 803acae:	4858      	ldr	r0, [pc, #352]	; (803ae10 <_vfiprintf_r+0x24c>)
 803acb0:	f7e5 fb46 	bl	8020340 <memchr>
 803acb4:	9a04      	ldr	r2, [sp, #16]
 803acb6:	b9d8      	cbnz	r0, 803acf0 <_vfiprintf_r+0x12c>
 803acb8:	06d1      	lsls	r1, r2, #27
 803acba:	bf44      	itt	mi
 803acbc:	2320      	movmi	r3, #32
 803acbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803acc2:	0713      	lsls	r3, r2, #28
 803acc4:	bf44      	itt	mi
 803acc6:	232b      	movmi	r3, #43	; 0x2b
 803acc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803accc:	f89a 3000 	ldrb.w	r3, [sl]
 803acd0:	2b2a      	cmp	r3, #42	; 0x2a
 803acd2:	d015      	beq.n	803ad00 <_vfiprintf_r+0x13c>
 803acd4:	9a07      	ldr	r2, [sp, #28]
 803acd6:	4654      	mov	r4, sl
 803acd8:	2000      	movs	r0, #0
 803acda:	f04f 0c0a 	mov.w	ip, #10
 803acde:	4621      	mov	r1, r4
 803ace0:	f811 3b01 	ldrb.w	r3, [r1], #1
 803ace4:	3b30      	subs	r3, #48	; 0x30
 803ace6:	2b09      	cmp	r3, #9
 803ace8:	d94e      	bls.n	803ad88 <_vfiprintf_r+0x1c4>
 803acea:	b1b0      	cbz	r0, 803ad1a <_vfiprintf_r+0x156>
 803acec:	9207      	str	r2, [sp, #28]
 803acee:	e014      	b.n	803ad1a <_vfiprintf_r+0x156>
 803acf0:	eba0 0308 	sub.w	r3, r0, r8
 803acf4:	fa09 f303 	lsl.w	r3, r9, r3
 803acf8:	4313      	orrs	r3, r2
 803acfa:	9304      	str	r3, [sp, #16]
 803acfc:	46a2      	mov	sl, r4
 803acfe:	e7d2      	b.n	803aca6 <_vfiprintf_r+0xe2>
 803ad00:	9b03      	ldr	r3, [sp, #12]
 803ad02:	1d19      	adds	r1, r3, #4
 803ad04:	681b      	ldr	r3, [r3, #0]
 803ad06:	9103      	str	r1, [sp, #12]
 803ad08:	2b00      	cmp	r3, #0
 803ad0a:	bfbb      	ittet	lt
 803ad0c:	425b      	neglt	r3, r3
 803ad0e:	f042 0202 	orrlt.w	r2, r2, #2
 803ad12:	9307      	strge	r3, [sp, #28]
 803ad14:	9307      	strlt	r3, [sp, #28]
 803ad16:	bfb8      	it	lt
 803ad18:	9204      	strlt	r2, [sp, #16]
 803ad1a:	7823      	ldrb	r3, [r4, #0]
 803ad1c:	2b2e      	cmp	r3, #46	; 0x2e
 803ad1e:	d10c      	bne.n	803ad3a <_vfiprintf_r+0x176>
 803ad20:	7863      	ldrb	r3, [r4, #1]
 803ad22:	2b2a      	cmp	r3, #42	; 0x2a
 803ad24:	d135      	bne.n	803ad92 <_vfiprintf_r+0x1ce>
 803ad26:	9b03      	ldr	r3, [sp, #12]
 803ad28:	1d1a      	adds	r2, r3, #4
 803ad2a:	681b      	ldr	r3, [r3, #0]
 803ad2c:	9203      	str	r2, [sp, #12]
 803ad2e:	2b00      	cmp	r3, #0
 803ad30:	bfb8      	it	lt
 803ad32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803ad36:	3402      	adds	r4, #2
 803ad38:	9305      	str	r3, [sp, #20]
 803ad3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803ae20 <_vfiprintf_r+0x25c>
 803ad3e:	7821      	ldrb	r1, [r4, #0]
 803ad40:	2203      	movs	r2, #3
 803ad42:	4650      	mov	r0, sl
 803ad44:	f7e5 fafc 	bl	8020340 <memchr>
 803ad48:	b140      	cbz	r0, 803ad5c <_vfiprintf_r+0x198>
 803ad4a:	2340      	movs	r3, #64	; 0x40
 803ad4c:	eba0 000a 	sub.w	r0, r0, sl
 803ad50:	fa03 f000 	lsl.w	r0, r3, r0
 803ad54:	9b04      	ldr	r3, [sp, #16]
 803ad56:	4303      	orrs	r3, r0
 803ad58:	3401      	adds	r4, #1
 803ad5a:	9304      	str	r3, [sp, #16]
 803ad5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 803ad60:	482c      	ldr	r0, [pc, #176]	; (803ae14 <_vfiprintf_r+0x250>)
 803ad62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803ad66:	2206      	movs	r2, #6
 803ad68:	f7e5 faea 	bl	8020340 <memchr>
 803ad6c:	2800      	cmp	r0, #0
 803ad6e:	d03f      	beq.n	803adf0 <_vfiprintf_r+0x22c>
 803ad70:	4b29      	ldr	r3, [pc, #164]	; (803ae18 <_vfiprintf_r+0x254>)
 803ad72:	bb1b      	cbnz	r3, 803adbc <_vfiprintf_r+0x1f8>
 803ad74:	9b03      	ldr	r3, [sp, #12]
 803ad76:	3307      	adds	r3, #7
 803ad78:	f023 0307 	bic.w	r3, r3, #7
 803ad7c:	3308      	adds	r3, #8
 803ad7e:	9303      	str	r3, [sp, #12]
 803ad80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803ad82:	443b      	add	r3, r7
 803ad84:	9309      	str	r3, [sp, #36]	; 0x24
 803ad86:	e767      	b.n	803ac58 <_vfiprintf_r+0x94>
 803ad88:	fb0c 3202 	mla	r2, ip, r2, r3
 803ad8c:	460c      	mov	r4, r1
 803ad8e:	2001      	movs	r0, #1
 803ad90:	e7a5      	b.n	803acde <_vfiprintf_r+0x11a>
 803ad92:	2300      	movs	r3, #0
 803ad94:	3401      	adds	r4, #1
 803ad96:	9305      	str	r3, [sp, #20]
 803ad98:	4619      	mov	r1, r3
 803ad9a:	f04f 0c0a 	mov.w	ip, #10
 803ad9e:	4620      	mov	r0, r4
 803ada0:	f810 2b01 	ldrb.w	r2, [r0], #1
 803ada4:	3a30      	subs	r2, #48	; 0x30
 803ada6:	2a09      	cmp	r2, #9
 803ada8:	d903      	bls.n	803adb2 <_vfiprintf_r+0x1ee>
 803adaa:	2b00      	cmp	r3, #0
 803adac:	d0c5      	beq.n	803ad3a <_vfiprintf_r+0x176>
 803adae:	9105      	str	r1, [sp, #20]
 803adb0:	e7c3      	b.n	803ad3a <_vfiprintf_r+0x176>
 803adb2:	fb0c 2101 	mla	r1, ip, r1, r2
 803adb6:	4604      	mov	r4, r0
 803adb8:	2301      	movs	r3, #1
 803adba:	e7f0      	b.n	803ad9e <_vfiprintf_r+0x1da>
 803adbc:	ab03      	add	r3, sp, #12
 803adbe:	9300      	str	r3, [sp, #0]
 803adc0:	462a      	mov	r2, r5
 803adc2:	4b16      	ldr	r3, [pc, #88]	; (803ae1c <_vfiprintf_r+0x258>)
 803adc4:	a904      	add	r1, sp, #16
 803adc6:	4630      	mov	r0, r6
 803adc8:	f3af 8000 	nop.w
 803adcc:	4607      	mov	r7, r0
 803adce:	1c78      	adds	r0, r7, #1
 803add0:	d1d6      	bne.n	803ad80 <_vfiprintf_r+0x1bc>
 803add2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803add4:	07d9      	lsls	r1, r3, #31
 803add6:	d405      	bmi.n	803ade4 <_vfiprintf_r+0x220>
 803add8:	89ab      	ldrh	r3, [r5, #12]
 803adda:	059a      	lsls	r2, r3, #22
 803addc:	d402      	bmi.n	803ade4 <_vfiprintf_r+0x220>
 803adde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803ade0:	f7ff fcf7 	bl	803a7d2 <__retarget_lock_release_recursive>
 803ade4:	89ab      	ldrh	r3, [r5, #12]
 803ade6:	065b      	lsls	r3, r3, #25
 803ade8:	f53f af12 	bmi.w	803ac10 <_vfiprintf_r+0x4c>
 803adec:	9809      	ldr	r0, [sp, #36]	; 0x24
 803adee:	e711      	b.n	803ac14 <_vfiprintf_r+0x50>
 803adf0:	ab03      	add	r3, sp, #12
 803adf2:	9300      	str	r3, [sp, #0]
 803adf4:	462a      	mov	r2, r5
 803adf6:	4b09      	ldr	r3, [pc, #36]	; (803ae1c <_vfiprintf_r+0x258>)
 803adf8:	a904      	add	r1, sp, #16
 803adfa:	4630      	mov	r0, r6
 803adfc:	f000 f880 	bl	803af00 <_printf_i>
 803ae00:	e7e4      	b.n	803adcc <_vfiprintf_r+0x208>
 803ae02:	bf00      	nop
 803ae04:	0803be08 	.word	0x0803be08
 803ae08:	0803be28 	.word	0x0803be28
 803ae0c:	0803bde8 	.word	0x0803bde8
 803ae10:	0803be48 	.word	0x0803be48
 803ae14:	0803be52 	.word	0x0803be52
 803ae18:	00000000 	.word	0x00000000
 803ae1c:	0803ab9f 	.word	0x0803ab9f
 803ae20:	0803be4e 	.word	0x0803be4e

0803ae24 <_printf_common>:
 803ae24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803ae28:	4616      	mov	r6, r2
 803ae2a:	4699      	mov	r9, r3
 803ae2c:	688a      	ldr	r2, [r1, #8]
 803ae2e:	690b      	ldr	r3, [r1, #16]
 803ae30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803ae34:	4293      	cmp	r3, r2
 803ae36:	bfb8      	it	lt
 803ae38:	4613      	movlt	r3, r2
 803ae3a:	6033      	str	r3, [r6, #0]
 803ae3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803ae40:	4607      	mov	r7, r0
 803ae42:	460c      	mov	r4, r1
 803ae44:	b10a      	cbz	r2, 803ae4a <_printf_common+0x26>
 803ae46:	3301      	adds	r3, #1
 803ae48:	6033      	str	r3, [r6, #0]
 803ae4a:	6823      	ldr	r3, [r4, #0]
 803ae4c:	0699      	lsls	r1, r3, #26
 803ae4e:	bf42      	ittt	mi
 803ae50:	6833      	ldrmi	r3, [r6, #0]
 803ae52:	3302      	addmi	r3, #2
 803ae54:	6033      	strmi	r3, [r6, #0]
 803ae56:	6825      	ldr	r5, [r4, #0]
 803ae58:	f015 0506 	ands.w	r5, r5, #6
 803ae5c:	d106      	bne.n	803ae6c <_printf_common+0x48>
 803ae5e:	f104 0a19 	add.w	sl, r4, #25
 803ae62:	68e3      	ldr	r3, [r4, #12]
 803ae64:	6832      	ldr	r2, [r6, #0]
 803ae66:	1a9b      	subs	r3, r3, r2
 803ae68:	42ab      	cmp	r3, r5
 803ae6a:	dc26      	bgt.n	803aeba <_printf_common+0x96>
 803ae6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803ae70:	1e13      	subs	r3, r2, #0
 803ae72:	6822      	ldr	r2, [r4, #0]
 803ae74:	bf18      	it	ne
 803ae76:	2301      	movne	r3, #1
 803ae78:	0692      	lsls	r2, r2, #26
 803ae7a:	d42b      	bmi.n	803aed4 <_printf_common+0xb0>
 803ae7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803ae80:	4649      	mov	r1, r9
 803ae82:	4638      	mov	r0, r7
 803ae84:	47c0      	blx	r8
 803ae86:	3001      	adds	r0, #1
 803ae88:	d01e      	beq.n	803aec8 <_printf_common+0xa4>
 803ae8a:	6823      	ldr	r3, [r4, #0]
 803ae8c:	68e5      	ldr	r5, [r4, #12]
 803ae8e:	6832      	ldr	r2, [r6, #0]
 803ae90:	f003 0306 	and.w	r3, r3, #6
 803ae94:	2b04      	cmp	r3, #4
 803ae96:	bf08      	it	eq
 803ae98:	1aad      	subeq	r5, r5, r2
 803ae9a:	68a3      	ldr	r3, [r4, #8]
 803ae9c:	6922      	ldr	r2, [r4, #16]
 803ae9e:	bf0c      	ite	eq
 803aea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803aea4:	2500      	movne	r5, #0
 803aea6:	4293      	cmp	r3, r2
 803aea8:	bfc4      	itt	gt
 803aeaa:	1a9b      	subgt	r3, r3, r2
 803aeac:	18ed      	addgt	r5, r5, r3
 803aeae:	2600      	movs	r6, #0
 803aeb0:	341a      	adds	r4, #26
 803aeb2:	42b5      	cmp	r5, r6
 803aeb4:	d11a      	bne.n	803aeec <_printf_common+0xc8>
 803aeb6:	2000      	movs	r0, #0
 803aeb8:	e008      	b.n	803aecc <_printf_common+0xa8>
 803aeba:	2301      	movs	r3, #1
 803aebc:	4652      	mov	r2, sl
 803aebe:	4649      	mov	r1, r9
 803aec0:	4638      	mov	r0, r7
 803aec2:	47c0      	blx	r8
 803aec4:	3001      	adds	r0, #1
 803aec6:	d103      	bne.n	803aed0 <_printf_common+0xac>
 803aec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803aecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803aed0:	3501      	adds	r5, #1
 803aed2:	e7c6      	b.n	803ae62 <_printf_common+0x3e>
 803aed4:	18e1      	adds	r1, r4, r3
 803aed6:	1c5a      	adds	r2, r3, #1
 803aed8:	2030      	movs	r0, #48	; 0x30
 803aeda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803aede:	4422      	add	r2, r4
 803aee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803aee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803aee8:	3302      	adds	r3, #2
 803aeea:	e7c7      	b.n	803ae7c <_printf_common+0x58>
 803aeec:	2301      	movs	r3, #1
 803aeee:	4622      	mov	r2, r4
 803aef0:	4649      	mov	r1, r9
 803aef2:	4638      	mov	r0, r7
 803aef4:	47c0      	blx	r8
 803aef6:	3001      	adds	r0, #1
 803aef8:	d0e6      	beq.n	803aec8 <_printf_common+0xa4>
 803aefa:	3601      	adds	r6, #1
 803aefc:	e7d9      	b.n	803aeb2 <_printf_common+0x8e>
	...

0803af00 <_printf_i>:
 803af00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803af04:	7e0f      	ldrb	r7, [r1, #24]
 803af06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803af08:	2f78      	cmp	r7, #120	; 0x78
 803af0a:	4691      	mov	r9, r2
 803af0c:	4680      	mov	r8, r0
 803af0e:	460c      	mov	r4, r1
 803af10:	469a      	mov	sl, r3
 803af12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803af16:	d807      	bhi.n	803af28 <_printf_i+0x28>
 803af18:	2f62      	cmp	r7, #98	; 0x62
 803af1a:	d80a      	bhi.n	803af32 <_printf_i+0x32>
 803af1c:	2f00      	cmp	r7, #0
 803af1e:	f000 80d8 	beq.w	803b0d2 <_printf_i+0x1d2>
 803af22:	2f58      	cmp	r7, #88	; 0x58
 803af24:	f000 80a3 	beq.w	803b06e <_printf_i+0x16e>
 803af28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803af2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803af30:	e03a      	b.n	803afa8 <_printf_i+0xa8>
 803af32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803af36:	2b15      	cmp	r3, #21
 803af38:	d8f6      	bhi.n	803af28 <_printf_i+0x28>
 803af3a:	a101      	add	r1, pc, #4	; (adr r1, 803af40 <_printf_i+0x40>)
 803af3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803af40:	0803af99 	.word	0x0803af99
 803af44:	0803afad 	.word	0x0803afad
 803af48:	0803af29 	.word	0x0803af29
 803af4c:	0803af29 	.word	0x0803af29
 803af50:	0803af29 	.word	0x0803af29
 803af54:	0803af29 	.word	0x0803af29
 803af58:	0803afad 	.word	0x0803afad
 803af5c:	0803af29 	.word	0x0803af29
 803af60:	0803af29 	.word	0x0803af29
 803af64:	0803af29 	.word	0x0803af29
 803af68:	0803af29 	.word	0x0803af29
 803af6c:	0803b0b9 	.word	0x0803b0b9
 803af70:	0803afdd 	.word	0x0803afdd
 803af74:	0803b09b 	.word	0x0803b09b
 803af78:	0803af29 	.word	0x0803af29
 803af7c:	0803af29 	.word	0x0803af29
 803af80:	0803b0db 	.word	0x0803b0db
 803af84:	0803af29 	.word	0x0803af29
 803af88:	0803afdd 	.word	0x0803afdd
 803af8c:	0803af29 	.word	0x0803af29
 803af90:	0803af29 	.word	0x0803af29
 803af94:	0803b0a3 	.word	0x0803b0a3
 803af98:	682b      	ldr	r3, [r5, #0]
 803af9a:	1d1a      	adds	r2, r3, #4
 803af9c:	681b      	ldr	r3, [r3, #0]
 803af9e:	602a      	str	r2, [r5, #0]
 803afa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803afa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803afa8:	2301      	movs	r3, #1
 803afaa:	e0a3      	b.n	803b0f4 <_printf_i+0x1f4>
 803afac:	6820      	ldr	r0, [r4, #0]
 803afae:	6829      	ldr	r1, [r5, #0]
 803afb0:	0606      	lsls	r6, r0, #24
 803afb2:	f101 0304 	add.w	r3, r1, #4
 803afb6:	d50a      	bpl.n	803afce <_printf_i+0xce>
 803afb8:	680e      	ldr	r6, [r1, #0]
 803afba:	602b      	str	r3, [r5, #0]
 803afbc:	2e00      	cmp	r6, #0
 803afbe:	da03      	bge.n	803afc8 <_printf_i+0xc8>
 803afc0:	232d      	movs	r3, #45	; 0x2d
 803afc2:	4276      	negs	r6, r6
 803afc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803afc8:	485e      	ldr	r0, [pc, #376]	; (803b144 <_printf_i+0x244>)
 803afca:	230a      	movs	r3, #10
 803afcc:	e019      	b.n	803b002 <_printf_i+0x102>
 803afce:	680e      	ldr	r6, [r1, #0]
 803afd0:	602b      	str	r3, [r5, #0]
 803afd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 803afd6:	bf18      	it	ne
 803afd8:	b236      	sxthne	r6, r6
 803afda:	e7ef      	b.n	803afbc <_printf_i+0xbc>
 803afdc:	682b      	ldr	r3, [r5, #0]
 803afde:	6820      	ldr	r0, [r4, #0]
 803afe0:	1d19      	adds	r1, r3, #4
 803afe2:	6029      	str	r1, [r5, #0]
 803afe4:	0601      	lsls	r1, r0, #24
 803afe6:	d501      	bpl.n	803afec <_printf_i+0xec>
 803afe8:	681e      	ldr	r6, [r3, #0]
 803afea:	e002      	b.n	803aff2 <_printf_i+0xf2>
 803afec:	0646      	lsls	r6, r0, #25
 803afee:	d5fb      	bpl.n	803afe8 <_printf_i+0xe8>
 803aff0:	881e      	ldrh	r6, [r3, #0]
 803aff2:	4854      	ldr	r0, [pc, #336]	; (803b144 <_printf_i+0x244>)
 803aff4:	2f6f      	cmp	r7, #111	; 0x6f
 803aff6:	bf0c      	ite	eq
 803aff8:	2308      	moveq	r3, #8
 803affa:	230a      	movne	r3, #10
 803affc:	2100      	movs	r1, #0
 803affe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803b002:	6865      	ldr	r5, [r4, #4]
 803b004:	60a5      	str	r5, [r4, #8]
 803b006:	2d00      	cmp	r5, #0
 803b008:	bfa2      	ittt	ge
 803b00a:	6821      	ldrge	r1, [r4, #0]
 803b00c:	f021 0104 	bicge.w	r1, r1, #4
 803b010:	6021      	strge	r1, [r4, #0]
 803b012:	b90e      	cbnz	r6, 803b018 <_printf_i+0x118>
 803b014:	2d00      	cmp	r5, #0
 803b016:	d04d      	beq.n	803b0b4 <_printf_i+0x1b4>
 803b018:	4615      	mov	r5, r2
 803b01a:	fbb6 f1f3 	udiv	r1, r6, r3
 803b01e:	fb03 6711 	mls	r7, r3, r1, r6
 803b022:	5dc7      	ldrb	r7, [r0, r7]
 803b024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803b028:	4637      	mov	r7, r6
 803b02a:	42bb      	cmp	r3, r7
 803b02c:	460e      	mov	r6, r1
 803b02e:	d9f4      	bls.n	803b01a <_printf_i+0x11a>
 803b030:	2b08      	cmp	r3, #8
 803b032:	d10b      	bne.n	803b04c <_printf_i+0x14c>
 803b034:	6823      	ldr	r3, [r4, #0]
 803b036:	07de      	lsls	r6, r3, #31
 803b038:	d508      	bpl.n	803b04c <_printf_i+0x14c>
 803b03a:	6923      	ldr	r3, [r4, #16]
 803b03c:	6861      	ldr	r1, [r4, #4]
 803b03e:	4299      	cmp	r1, r3
 803b040:	bfde      	ittt	le
 803b042:	2330      	movle	r3, #48	; 0x30
 803b044:	f805 3c01 	strble.w	r3, [r5, #-1]
 803b048:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 803b04c:	1b52      	subs	r2, r2, r5
 803b04e:	6122      	str	r2, [r4, #16]
 803b050:	f8cd a000 	str.w	sl, [sp]
 803b054:	464b      	mov	r3, r9
 803b056:	aa03      	add	r2, sp, #12
 803b058:	4621      	mov	r1, r4
 803b05a:	4640      	mov	r0, r8
 803b05c:	f7ff fee2 	bl	803ae24 <_printf_common>
 803b060:	3001      	adds	r0, #1
 803b062:	d14c      	bne.n	803b0fe <_printf_i+0x1fe>
 803b064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803b068:	b004      	add	sp, #16
 803b06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803b06e:	4835      	ldr	r0, [pc, #212]	; (803b144 <_printf_i+0x244>)
 803b070:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 803b074:	6829      	ldr	r1, [r5, #0]
 803b076:	6823      	ldr	r3, [r4, #0]
 803b078:	f851 6b04 	ldr.w	r6, [r1], #4
 803b07c:	6029      	str	r1, [r5, #0]
 803b07e:	061d      	lsls	r5, r3, #24
 803b080:	d514      	bpl.n	803b0ac <_printf_i+0x1ac>
 803b082:	07df      	lsls	r7, r3, #31
 803b084:	bf44      	itt	mi
 803b086:	f043 0320 	orrmi.w	r3, r3, #32
 803b08a:	6023      	strmi	r3, [r4, #0]
 803b08c:	b91e      	cbnz	r6, 803b096 <_printf_i+0x196>
 803b08e:	6823      	ldr	r3, [r4, #0]
 803b090:	f023 0320 	bic.w	r3, r3, #32
 803b094:	6023      	str	r3, [r4, #0]
 803b096:	2310      	movs	r3, #16
 803b098:	e7b0      	b.n	803affc <_printf_i+0xfc>
 803b09a:	6823      	ldr	r3, [r4, #0]
 803b09c:	f043 0320 	orr.w	r3, r3, #32
 803b0a0:	6023      	str	r3, [r4, #0]
 803b0a2:	2378      	movs	r3, #120	; 0x78
 803b0a4:	4828      	ldr	r0, [pc, #160]	; (803b148 <_printf_i+0x248>)
 803b0a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803b0aa:	e7e3      	b.n	803b074 <_printf_i+0x174>
 803b0ac:	0659      	lsls	r1, r3, #25
 803b0ae:	bf48      	it	mi
 803b0b0:	b2b6      	uxthmi	r6, r6
 803b0b2:	e7e6      	b.n	803b082 <_printf_i+0x182>
 803b0b4:	4615      	mov	r5, r2
 803b0b6:	e7bb      	b.n	803b030 <_printf_i+0x130>
 803b0b8:	682b      	ldr	r3, [r5, #0]
 803b0ba:	6826      	ldr	r6, [r4, #0]
 803b0bc:	6961      	ldr	r1, [r4, #20]
 803b0be:	1d18      	adds	r0, r3, #4
 803b0c0:	6028      	str	r0, [r5, #0]
 803b0c2:	0635      	lsls	r5, r6, #24
 803b0c4:	681b      	ldr	r3, [r3, #0]
 803b0c6:	d501      	bpl.n	803b0cc <_printf_i+0x1cc>
 803b0c8:	6019      	str	r1, [r3, #0]
 803b0ca:	e002      	b.n	803b0d2 <_printf_i+0x1d2>
 803b0cc:	0670      	lsls	r0, r6, #25
 803b0ce:	d5fb      	bpl.n	803b0c8 <_printf_i+0x1c8>
 803b0d0:	8019      	strh	r1, [r3, #0]
 803b0d2:	2300      	movs	r3, #0
 803b0d4:	6123      	str	r3, [r4, #16]
 803b0d6:	4615      	mov	r5, r2
 803b0d8:	e7ba      	b.n	803b050 <_printf_i+0x150>
 803b0da:	682b      	ldr	r3, [r5, #0]
 803b0dc:	1d1a      	adds	r2, r3, #4
 803b0de:	602a      	str	r2, [r5, #0]
 803b0e0:	681d      	ldr	r5, [r3, #0]
 803b0e2:	6862      	ldr	r2, [r4, #4]
 803b0e4:	2100      	movs	r1, #0
 803b0e6:	4628      	mov	r0, r5
 803b0e8:	f7e5 f92a 	bl	8020340 <memchr>
 803b0ec:	b108      	cbz	r0, 803b0f2 <_printf_i+0x1f2>
 803b0ee:	1b40      	subs	r0, r0, r5
 803b0f0:	6060      	str	r0, [r4, #4]
 803b0f2:	6863      	ldr	r3, [r4, #4]
 803b0f4:	6123      	str	r3, [r4, #16]
 803b0f6:	2300      	movs	r3, #0
 803b0f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803b0fc:	e7a8      	b.n	803b050 <_printf_i+0x150>
 803b0fe:	6923      	ldr	r3, [r4, #16]
 803b100:	462a      	mov	r2, r5
 803b102:	4649      	mov	r1, r9
 803b104:	4640      	mov	r0, r8
 803b106:	47d0      	blx	sl
 803b108:	3001      	adds	r0, #1
 803b10a:	d0ab      	beq.n	803b064 <_printf_i+0x164>
 803b10c:	6823      	ldr	r3, [r4, #0]
 803b10e:	079b      	lsls	r3, r3, #30
 803b110:	d413      	bmi.n	803b13a <_printf_i+0x23a>
 803b112:	68e0      	ldr	r0, [r4, #12]
 803b114:	9b03      	ldr	r3, [sp, #12]
 803b116:	4298      	cmp	r0, r3
 803b118:	bfb8      	it	lt
 803b11a:	4618      	movlt	r0, r3
 803b11c:	e7a4      	b.n	803b068 <_printf_i+0x168>
 803b11e:	2301      	movs	r3, #1
 803b120:	4632      	mov	r2, r6
 803b122:	4649      	mov	r1, r9
 803b124:	4640      	mov	r0, r8
 803b126:	47d0      	blx	sl
 803b128:	3001      	adds	r0, #1
 803b12a:	d09b      	beq.n	803b064 <_printf_i+0x164>
 803b12c:	3501      	adds	r5, #1
 803b12e:	68e3      	ldr	r3, [r4, #12]
 803b130:	9903      	ldr	r1, [sp, #12]
 803b132:	1a5b      	subs	r3, r3, r1
 803b134:	42ab      	cmp	r3, r5
 803b136:	dcf2      	bgt.n	803b11e <_printf_i+0x21e>
 803b138:	e7eb      	b.n	803b112 <_printf_i+0x212>
 803b13a:	2500      	movs	r5, #0
 803b13c:	f104 0619 	add.w	r6, r4, #25
 803b140:	e7f5      	b.n	803b12e <_printf_i+0x22e>
 803b142:	bf00      	nop
 803b144:	0803be59 	.word	0x0803be59
 803b148:	0803be6a 	.word	0x0803be6a

0803b14c <__sread>:
 803b14c:	b510      	push	{r4, lr}
 803b14e:	460c      	mov	r4, r1
 803b150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803b154:	f000 f8de 	bl	803b314 <_read_r>
 803b158:	2800      	cmp	r0, #0
 803b15a:	bfab      	itete	ge
 803b15c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803b15e:	89a3      	ldrhlt	r3, [r4, #12]
 803b160:	181b      	addge	r3, r3, r0
 803b162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803b166:	bfac      	ite	ge
 803b168:	6563      	strge	r3, [r4, #84]	; 0x54
 803b16a:	81a3      	strhlt	r3, [r4, #12]
 803b16c:	bd10      	pop	{r4, pc}

0803b16e <__swrite>:
 803b16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803b172:	461f      	mov	r7, r3
 803b174:	898b      	ldrh	r3, [r1, #12]
 803b176:	05db      	lsls	r3, r3, #23
 803b178:	4605      	mov	r5, r0
 803b17a:	460c      	mov	r4, r1
 803b17c:	4616      	mov	r6, r2
 803b17e:	d505      	bpl.n	803b18c <__swrite+0x1e>
 803b180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803b184:	2302      	movs	r3, #2
 803b186:	2200      	movs	r2, #0
 803b188:	f000 f868 	bl	803b25c <_lseek_r>
 803b18c:	89a3      	ldrh	r3, [r4, #12]
 803b18e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803b192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803b196:	81a3      	strh	r3, [r4, #12]
 803b198:	4632      	mov	r2, r6
 803b19a:	463b      	mov	r3, r7
 803b19c:	4628      	mov	r0, r5
 803b19e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803b1a2:	f000 b817 	b.w	803b1d4 <_write_r>

0803b1a6 <__sseek>:
 803b1a6:	b510      	push	{r4, lr}
 803b1a8:	460c      	mov	r4, r1
 803b1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803b1ae:	f000 f855 	bl	803b25c <_lseek_r>
 803b1b2:	1c43      	adds	r3, r0, #1
 803b1b4:	89a3      	ldrh	r3, [r4, #12]
 803b1b6:	bf15      	itete	ne
 803b1b8:	6560      	strne	r0, [r4, #84]	; 0x54
 803b1ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803b1be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803b1c2:	81a3      	strheq	r3, [r4, #12]
 803b1c4:	bf18      	it	ne
 803b1c6:	81a3      	strhne	r3, [r4, #12]
 803b1c8:	bd10      	pop	{r4, pc}

0803b1ca <__sclose>:
 803b1ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803b1ce:	f000 b813 	b.w	803b1f8 <_close_r>
	...

0803b1d4 <_write_r>:
 803b1d4:	b538      	push	{r3, r4, r5, lr}
 803b1d6:	4d07      	ldr	r5, [pc, #28]	; (803b1f4 <_write_r+0x20>)
 803b1d8:	4604      	mov	r4, r0
 803b1da:	4608      	mov	r0, r1
 803b1dc:	4611      	mov	r1, r2
 803b1de:	2200      	movs	r2, #0
 803b1e0:	602a      	str	r2, [r5, #0]
 803b1e2:	461a      	mov	r2, r3
 803b1e4:	f7e5 fd8a 	bl	8020cfc <_write>
 803b1e8:	1c43      	adds	r3, r0, #1
 803b1ea:	d102      	bne.n	803b1f2 <_write_r+0x1e>
 803b1ec:	682b      	ldr	r3, [r5, #0]
 803b1ee:	b103      	cbz	r3, 803b1f2 <_write_r+0x1e>
 803b1f0:	6023      	str	r3, [r4, #0]
 803b1f2:	bd38      	pop	{r3, r4, r5, pc}
 803b1f4:	240071e4 	.word	0x240071e4

0803b1f8 <_close_r>:
 803b1f8:	b538      	push	{r3, r4, r5, lr}
 803b1fa:	4d06      	ldr	r5, [pc, #24]	; (803b214 <_close_r+0x1c>)
 803b1fc:	2300      	movs	r3, #0
 803b1fe:	4604      	mov	r4, r0
 803b200:	4608      	mov	r0, r1
 803b202:	602b      	str	r3, [r5, #0]
 803b204:	f7e6 fe07 	bl	8021e16 <_close>
 803b208:	1c43      	adds	r3, r0, #1
 803b20a:	d102      	bne.n	803b212 <_close_r+0x1a>
 803b20c:	682b      	ldr	r3, [r5, #0]
 803b20e:	b103      	cbz	r3, 803b212 <_close_r+0x1a>
 803b210:	6023      	str	r3, [r4, #0]
 803b212:	bd38      	pop	{r3, r4, r5, pc}
 803b214:	240071e4 	.word	0x240071e4

0803b218 <_fstat_r>:
 803b218:	b538      	push	{r3, r4, r5, lr}
 803b21a:	4d07      	ldr	r5, [pc, #28]	; (803b238 <_fstat_r+0x20>)
 803b21c:	2300      	movs	r3, #0
 803b21e:	4604      	mov	r4, r0
 803b220:	4608      	mov	r0, r1
 803b222:	4611      	mov	r1, r2
 803b224:	602b      	str	r3, [r5, #0]
 803b226:	f7e6 fe02 	bl	8021e2e <_fstat>
 803b22a:	1c43      	adds	r3, r0, #1
 803b22c:	d102      	bne.n	803b234 <_fstat_r+0x1c>
 803b22e:	682b      	ldr	r3, [r5, #0]
 803b230:	b103      	cbz	r3, 803b234 <_fstat_r+0x1c>
 803b232:	6023      	str	r3, [r4, #0]
 803b234:	bd38      	pop	{r3, r4, r5, pc}
 803b236:	bf00      	nop
 803b238:	240071e4 	.word	0x240071e4

0803b23c <_isatty_r>:
 803b23c:	b538      	push	{r3, r4, r5, lr}
 803b23e:	4d06      	ldr	r5, [pc, #24]	; (803b258 <_isatty_r+0x1c>)
 803b240:	2300      	movs	r3, #0
 803b242:	4604      	mov	r4, r0
 803b244:	4608      	mov	r0, r1
 803b246:	602b      	str	r3, [r5, #0]
 803b248:	f7e6 fe01 	bl	8021e4e <_isatty>
 803b24c:	1c43      	adds	r3, r0, #1
 803b24e:	d102      	bne.n	803b256 <_isatty_r+0x1a>
 803b250:	682b      	ldr	r3, [r5, #0]
 803b252:	b103      	cbz	r3, 803b256 <_isatty_r+0x1a>
 803b254:	6023      	str	r3, [r4, #0]
 803b256:	bd38      	pop	{r3, r4, r5, pc}
 803b258:	240071e4 	.word	0x240071e4

0803b25c <_lseek_r>:
 803b25c:	b538      	push	{r3, r4, r5, lr}
 803b25e:	4d07      	ldr	r5, [pc, #28]	; (803b27c <_lseek_r+0x20>)
 803b260:	4604      	mov	r4, r0
 803b262:	4608      	mov	r0, r1
 803b264:	4611      	mov	r1, r2
 803b266:	2200      	movs	r2, #0
 803b268:	602a      	str	r2, [r5, #0]
 803b26a:	461a      	mov	r2, r3
 803b26c:	f7e6 fdfa 	bl	8021e64 <_lseek>
 803b270:	1c43      	adds	r3, r0, #1
 803b272:	d102      	bne.n	803b27a <_lseek_r+0x1e>
 803b274:	682b      	ldr	r3, [r5, #0]
 803b276:	b103      	cbz	r3, 803b27a <_lseek_r+0x1e>
 803b278:	6023      	str	r3, [r4, #0]
 803b27a:	bd38      	pop	{r3, r4, r5, pc}
 803b27c:	240071e4 	.word	0x240071e4

0803b280 <memmove>:
 803b280:	4288      	cmp	r0, r1
 803b282:	b510      	push	{r4, lr}
 803b284:	eb01 0402 	add.w	r4, r1, r2
 803b288:	d902      	bls.n	803b290 <memmove+0x10>
 803b28a:	4284      	cmp	r4, r0
 803b28c:	4623      	mov	r3, r4
 803b28e:	d807      	bhi.n	803b2a0 <memmove+0x20>
 803b290:	1e43      	subs	r3, r0, #1
 803b292:	42a1      	cmp	r1, r4
 803b294:	d008      	beq.n	803b2a8 <memmove+0x28>
 803b296:	f811 2b01 	ldrb.w	r2, [r1], #1
 803b29a:	f803 2f01 	strb.w	r2, [r3, #1]!
 803b29e:	e7f8      	b.n	803b292 <memmove+0x12>
 803b2a0:	4402      	add	r2, r0
 803b2a2:	4601      	mov	r1, r0
 803b2a4:	428a      	cmp	r2, r1
 803b2a6:	d100      	bne.n	803b2aa <memmove+0x2a>
 803b2a8:	bd10      	pop	{r4, pc}
 803b2aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803b2ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803b2b2:	e7f7      	b.n	803b2a4 <memmove+0x24>

0803b2b4 <_realloc_r>:
 803b2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803b2b8:	4680      	mov	r8, r0
 803b2ba:	4614      	mov	r4, r2
 803b2bc:	460e      	mov	r6, r1
 803b2be:	b921      	cbnz	r1, 803b2ca <_realloc_r+0x16>
 803b2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803b2c4:	4611      	mov	r1, r2
 803b2c6:	f7fe bea1 	b.w	803a00c <_malloc_r>
 803b2ca:	b92a      	cbnz	r2, 803b2d8 <_realloc_r+0x24>
 803b2cc:	f7fe fe32 	bl	8039f34 <_free_r>
 803b2d0:	4625      	mov	r5, r4
 803b2d2:	4628      	mov	r0, r5
 803b2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803b2d8:	f000 f82e 	bl	803b338 <_malloc_usable_size_r>
 803b2dc:	4284      	cmp	r4, r0
 803b2de:	4607      	mov	r7, r0
 803b2e0:	d802      	bhi.n	803b2e8 <_realloc_r+0x34>
 803b2e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 803b2e6:	d812      	bhi.n	803b30e <_realloc_r+0x5a>
 803b2e8:	4621      	mov	r1, r4
 803b2ea:	4640      	mov	r0, r8
 803b2ec:	f7fe fe8e 	bl	803a00c <_malloc_r>
 803b2f0:	4605      	mov	r5, r0
 803b2f2:	2800      	cmp	r0, #0
 803b2f4:	d0ed      	beq.n	803b2d2 <_realloc_r+0x1e>
 803b2f6:	42bc      	cmp	r4, r7
 803b2f8:	4622      	mov	r2, r4
 803b2fa:	4631      	mov	r1, r6
 803b2fc:	bf28      	it	cs
 803b2fe:	463a      	movcs	r2, r7
 803b300:	f7fe fe02 	bl	8039f08 <memcpy>
 803b304:	4631      	mov	r1, r6
 803b306:	4640      	mov	r0, r8
 803b308:	f7fe fe14 	bl	8039f34 <_free_r>
 803b30c:	e7e1      	b.n	803b2d2 <_realloc_r+0x1e>
 803b30e:	4635      	mov	r5, r6
 803b310:	e7df      	b.n	803b2d2 <_realloc_r+0x1e>
	...

0803b314 <_read_r>:
 803b314:	b538      	push	{r3, r4, r5, lr}
 803b316:	4d07      	ldr	r5, [pc, #28]	; (803b334 <_read_r+0x20>)
 803b318:	4604      	mov	r4, r0
 803b31a:	4608      	mov	r0, r1
 803b31c:	4611      	mov	r1, r2
 803b31e:	2200      	movs	r2, #0
 803b320:	602a      	str	r2, [r5, #0]
 803b322:	461a      	mov	r2, r3
 803b324:	f7e6 fd5a 	bl	8021ddc <_read>
 803b328:	1c43      	adds	r3, r0, #1
 803b32a:	d102      	bne.n	803b332 <_read_r+0x1e>
 803b32c:	682b      	ldr	r3, [r5, #0]
 803b32e:	b103      	cbz	r3, 803b332 <_read_r+0x1e>
 803b330:	6023      	str	r3, [r4, #0]
 803b332:	bd38      	pop	{r3, r4, r5, pc}
 803b334:	240071e4 	.word	0x240071e4

0803b338 <_malloc_usable_size_r>:
 803b338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803b33c:	1f18      	subs	r0, r3, #4
 803b33e:	2b00      	cmp	r3, #0
 803b340:	bfbc      	itt	lt
 803b342:	580b      	ldrlt	r3, [r1, r0]
 803b344:	18c0      	addlt	r0, r0, r3
 803b346:	4770      	bx	lr

0803b348 <_init>:
 803b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803b34a:	bf00      	nop
 803b34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803b34e:	bc08      	pop	{r3}
 803b350:	469e      	mov	lr, r3
 803b352:	4770      	bx	lr

0803b354 <_fini>:
 803b354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803b356:	bf00      	nop
 803b358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803b35a:	bc08      	pop	{r3}
 803b35c:	469e      	mov	lr, r3
 803b35e:	4770      	bx	lr
