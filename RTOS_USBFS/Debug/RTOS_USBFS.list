
RTOS_USBFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b050  080202d0  080202d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a9c  0803b320  0803b320  0002b320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803bdbc  0803bdbc  0002bdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803bdc4  0803bdc4  0002bdc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0803bdc8  0803bdc8  0002bdc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  0803bdcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007148  24000098  0803be64  00030098  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240071e0  0803be64  000371e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003448d  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006d0b  00000000  00000000  00064553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002388  00000000  00000000  0006b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002100  00000000  00000000  0006d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d1f3  00000000  00000000  0006f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037445  00000000  00000000  000ac8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e2a7  00000000  00000000  000e3d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00241fc7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009ea4  00000000  00000000  00242018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202d0 <__do_global_dtors_aux>:
 80202d0:	b510      	push	{r4, lr}
 80202d2:	4c05      	ldr	r4, [pc, #20]	; (80202e8 <__do_global_dtors_aux+0x18>)
 80202d4:	7823      	ldrb	r3, [r4, #0]
 80202d6:	b933      	cbnz	r3, 80202e6 <__do_global_dtors_aux+0x16>
 80202d8:	4b04      	ldr	r3, [pc, #16]	; (80202ec <__do_global_dtors_aux+0x1c>)
 80202da:	b113      	cbz	r3, 80202e2 <__do_global_dtors_aux+0x12>
 80202dc:	4804      	ldr	r0, [pc, #16]	; (80202f0 <__do_global_dtors_aux+0x20>)
 80202de:	f3af 8000 	nop.w
 80202e2:	2301      	movs	r3, #1
 80202e4:	7023      	strb	r3, [r4, #0]
 80202e6:	bd10      	pop	{r4, pc}
 80202e8:	24000098 	.word	0x24000098
 80202ec:	00000000 	.word	0x00000000
 80202f0:	0803b308 	.word	0x0803b308

080202f4 <frame_dummy>:
 80202f4:	b508      	push	{r3, lr}
 80202f6:	4b03      	ldr	r3, [pc, #12]	; (8020304 <frame_dummy+0x10>)
 80202f8:	b11b      	cbz	r3, 8020302 <frame_dummy+0xe>
 80202fa:	4903      	ldr	r1, [pc, #12]	; (8020308 <frame_dummy+0x14>)
 80202fc:	4803      	ldr	r0, [pc, #12]	; (802030c <frame_dummy+0x18>)
 80202fe:	f3af 8000 	nop.w
 8020302:	bd08      	pop	{r3, pc}
 8020304:	00000000 	.word	0x00000000
 8020308:	2400009c 	.word	0x2400009c
 802030c:	0803b308 	.word	0x0803b308

08020310 <strcmp>:
 8020310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020318:	2a01      	cmp	r2, #1
 802031a:	bf28      	it	cs
 802031c:	429a      	cmpcs	r2, r3
 802031e:	d0f7      	beq.n	8020310 <strcmp>
 8020320:	1ad0      	subs	r0, r2, r3
 8020322:	4770      	bx	lr

08020324 <strlen>:
 8020324:	4603      	mov	r3, r0
 8020326:	f813 2b01 	ldrb.w	r2, [r3], #1
 802032a:	2a00      	cmp	r2, #0
 802032c:	d1fb      	bne.n	8020326 <strlen+0x2>
 802032e:	1a18      	subs	r0, r3, r0
 8020330:	3801      	subs	r0, #1
 8020332:	4770      	bx	lr
	...

08020340 <memchr>:
 8020340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020344:	2a10      	cmp	r2, #16
 8020346:	db2b      	blt.n	80203a0 <memchr+0x60>
 8020348:	f010 0f07 	tst.w	r0, #7
 802034c:	d008      	beq.n	8020360 <memchr+0x20>
 802034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020352:	3a01      	subs	r2, #1
 8020354:	428b      	cmp	r3, r1
 8020356:	d02d      	beq.n	80203b4 <memchr+0x74>
 8020358:	f010 0f07 	tst.w	r0, #7
 802035c:	b342      	cbz	r2, 80203b0 <memchr+0x70>
 802035e:	d1f6      	bne.n	802034e <memchr+0xe>
 8020360:	b4f0      	push	{r4, r5, r6, r7}
 8020362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802036a:	f022 0407 	bic.w	r4, r2, #7
 802036e:	f07f 0700 	mvns.w	r7, #0
 8020372:	2300      	movs	r3, #0
 8020374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020378:	3c08      	subs	r4, #8
 802037a:	ea85 0501 	eor.w	r5, r5, r1
 802037e:	ea86 0601 	eor.w	r6, r6, r1
 8020382:	fa85 f547 	uadd8	r5, r5, r7
 8020386:	faa3 f587 	sel	r5, r3, r7
 802038a:	fa86 f647 	uadd8	r6, r6, r7
 802038e:	faa5 f687 	sel	r6, r5, r7
 8020392:	b98e      	cbnz	r6, 80203b8 <memchr+0x78>
 8020394:	d1ee      	bne.n	8020374 <memchr+0x34>
 8020396:	bcf0      	pop	{r4, r5, r6, r7}
 8020398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802039c:	f002 0207 	and.w	r2, r2, #7
 80203a0:	b132      	cbz	r2, 80203b0 <memchr+0x70>
 80203a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80203a6:	3a01      	subs	r2, #1
 80203a8:	ea83 0301 	eor.w	r3, r3, r1
 80203ac:	b113      	cbz	r3, 80203b4 <memchr+0x74>
 80203ae:	d1f8      	bne.n	80203a2 <memchr+0x62>
 80203b0:	2000      	movs	r0, #0
 80203b2:	4770      	bx	lr
 80203b4:	3801      	subs	r0, #1
 80203b6:	4770      	bx	lr
 80203b8:	2d00      	cmp	r5, #0
 80203ba:	bf06      	itte	eq
 80203bc:	4635      	moveq	r5, r6
 80203be:	3803      	subeq	r0, #3
 80203c0:	3807      	subne	r0, #7
 80203c2:	f015 0f01 	tst.w	r5, #1
 80203c6:	d107      	bne.n	80203d8 <memchr+0x98>
 80203c8:	3001      	adds	r0, #1
 80203ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80203ce:	bf02      	ittt	eq
 80203d0:	3001      	addeq	r0, #1
 80203d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80203d6:	3001      	addeq	r0, #1
 80203d8:	bcf0      	pop	{r4, r5, r6, r7}
 80203da:	3801      	subs	r0, #1
 80203dc:	4770      	bx	lr
 80203de:	bf00      	nop

080203e0 <__aeabi_uldivmod>:
 80203e0:	b953      	cbnz	r3, 80203f8 <__aeabi_uldivmod+0x18>
 80203e2:	b94a      	cbnz	r2, 80203f8 <__aeabi_uldivmod+0x18>
 80203e4:	2900      	cmp	r1, #0
 80203e6:	bf08      	it	eq
 80203e8:	2800      	cmpeq	r0, #0
 80203ea:	bf1c      	itt	ne
 80203ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80203f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80203f4:	f000 b974 	b.w	80206e0 <__aeabi_idiv0>
 80203f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80203fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020400:	f000 f806 	bl	8020410 <__udivmoddi4>
 8020404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802040c:	b004      	add	sp, #16
 802040e:	4770      	bx	lr

08020410 <__udivmoddi4>:
 8020410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020414:	9d08      	ldr	r5, [sp, #32]
 8020416:	4604      	mov	r4, r0
 8020418:	468e      	mov	lr, r1
 802041a:	2b00      	cmp	r3, #0
 802041c:	d14d      	bne.n	80204ba <__udivmoddi4+0xaa>
 802041e:	428a      	cmp	r2, r1
 8020420:	4694      	mov	ip, r2
 8020422:	d969      	bls.n	80204f8 <__udivmoddi4+0xe8>
 8020424:	fab2 f282 	clz	r2, r2
 8020428:	b152      	cbz	r2, 8020440 <__udivmoddi4+0x30>
 802042a:	fa01 f302 	lsl.w	r3, r1, r2
 802042e:	f1c2 0120 	rsb	r1, r2, #32
 8020432:	fa20 f101 	lsr.w	r1, r0, r1
 8020436:	fa0c fc02 	lsl.w	ip, ip, r2
 802043a:	ea41 0e03 	orr.w	lr, r1, r3
 802043e:	4094      	lsls	r4, r2
 8020440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020444:	0c21      	lsrs	r1, r4, #16
 8020446:	fbbe f6f8 	udiv	r6, lr, r8
 802044a:	fa1f f78c 	uxth.w	r7, ip
 802044e:	fb08 e316 	mls	r3, r8, r6, lr
 8020452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020456:	fb06 f107 	mul.w	r1, r6, r7
 802045a:	4299      	cmp	r1, r3
 802045c:	d90a      	bls.n	8020474 <__udivmoddi4+0x64>
 802045e:	eb1c 0303 	adds.w	r3, ip, r3
 8020462:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020466:	f080 811f 	bcs.w	80206a8 <__udivmoddi4+0x298>
 802046a:	4299      	cmp	r1, r3
 802046c:	f240 811c 	bls.w	80206a8 <__udivmoddi4+0x298>
 8020470:	3e02      	subs	r6, #2
 8020472:	4463      	add	r3, ip
 8020474:	1a5b      	subs	r3, r3, r1
 8020476:	b2a4      	uxth	r4, r4
 8020478:	fbb3 f0f8 	udiv	r0, r3, r8
 802047c:	fb08 3310 	mls	r3, r8, r0, r3
 8020480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020484:	fb00 f707 	mul.w	r7, r0, r7
 8020488:	42a7      	cmp	r7, r4
 802048a:	d90a      	bls.n	80204a2 <__udivmoddi4+0x92>
 802048c:	eb1c 0404 	adds.w	r4, ip, r4
 8020490:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020494:	f080 810a 	bcs.w	80206ac <__udivmoddi4+0x29c>
 8020498:	42a7      	cmp	r7, r4
 802049a:	f240 8107 	bls.w	80206ac <__udivmoddi4+0x29c>
 802049e:	4464      	add	r4, ip
 80204a0:	3802      	subs	r0, #2
 80204a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80204a6:	1be4      	subs	r4, r4, r7
 80204a8:	2600      	movs	r6, #0
 80204aa:	b11d      	cbz	r5, 80204b4 <__udivmoddi4+0xa4>
 80204ac:	40d4      	lsrs	r4, r2
 80204ae:	2300      	movs	r3, #0
 80204b0:	e9c5 4300 	strd	r4, r3, [r5]
 80204b4:	4631      	mov	r1, r6
 80204b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204ba:	428b      	cmp	r3, r1
 80204bc:	d909      	bls.n	80204d2 <__udivmoddi4+0xc2>
 80204be:	2d00      	cmp	r5, #0
 80204c0:	f000 80ef 	beq.w	80206a2 <__udivmoddi4+0x292>
 80204c4:	2600      	movs	r6, #0
 80204c6:	e9c5 0100 	strd	r0, r1, [r5]
 80204ca:	4630      	mov	r0, r6
 80204cc:	4631      	mov	r1, r6
 80204ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204d2:	fab3 f683 	clz	r6, r3
 80204d6:	2e00      	cmp	r6, #0
 80204d8:	d14a      	bne.n	8020570 <__udivmoddi4+0x160>
 80204da:	428b      	cmp	r3, r1
 80204dc:	d302      	bcc.n	80204e4 <__udivmoddi4+0xd4>
 80204de:	4282      	cmp	r2, r0
 80204e0:	f200 80f9 	bhi.w	80206d6 <__udivmoddi4+0x2c6>
 80204e4:	1a84      	subs	r4, r0, r2
 80204e6:	eb61 0303 	sbc.w	r3, r1, r3
 80204ea:	2001      	movs	r0, #1
 80204ec:	469e      	mov	lr, r3
 80204ee:	2d00      	cmp	r5, #0
 80204f0:	d0e0      	beq.n	80204b4 <__udivmoddi4+0xa4>
 80204f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80204f6:	e7dd      	b.n	80204b4 <__udivmoddi4+0xa4>
 80204f8:	b902      	cbnz	r2, 80204fc <__udivmoddi4+0xec>
 80204fa:	deff      	udf	#255	; 0xff
 80204fc:	fab2 f282 	clz	r2, r2
 8020500:	2a00      	cmp	r2, #0
 8020502:	f040 8092 	bne.w	802062a <__udivmoddi4+0x21a>
 8020506:	eba1 010c 	sub.w	r1, r1, ip
 802050a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 802050e:	fa1f fe8c 	uxth.w	lr, ip
 8020512:	2601      	movs	r6, #1
 8020514:	0c20      	lsrs	r0, r4, #16
 8020516:	fbb1 f3f7 	udiv	r3, r1, r7
 802051a:	fb07 1113 	mls	r1, r7, r3, r1
 802051e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020522:	fb0e f003 	mul.w	r0, lr, r3
 8020526:	4288      	cmp	r0, r1
 8020528:	d908      	bls.n	802053c <__udivmoddi4+0x12c>
 802052a:	eb1c 0101 	adds.w	r1, ip, r1
 802052e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8020532:	d202      	bcs.n	802053a <__udivmoddi4+0x12a>
 8020534:	4288      	cmp	r0, r1
 8020536:	f200 80cb 	bhi.w	80206d0 <__udivmoddi4+0x2c0>
 802053a:	4643      	mov	r3, r8
 802053c:	1a09      	subs	r1, r1, r0
 802053e:	b2a4      	uxth	r4, r4
 8020540:	fbb1 f0f7 	udiv	r0, r1, r7
 8020544:	fb07 1110 	mls	r1, r7, r0, r1
 8020548:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 802054c:	fb0e fe00 	mul.w	lr, lr, r0
 8020550:	45a6      	cmp	lr, r4
 8020552:	d908      	bls.n	8020566 <__udivmoddi4+0x156>
 8020554:	eb1c 0404 	adds.w	r4, ip, r4
 8020558:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 802055c:	d202      	bcs.n	8020564 <__udivmoddi4+0x154>
 802055e:	45a6      	cmp	lr, r4
 8020560:	f200 80bb 	bhi.w	80206da <__udivmoddi4+0x2ca>
 8020564:	4608      	mov	r0, r1
 8020566:	eba4 040e 	sub.w	r4, r4, lr
 802056a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802056e:	e79c      	b.n	80204aa <__udivmoddi4+0x9a>
 8020570:	f1c6 0720 	rsb	r7, r6, #32
 8020574:	40b3      	lsls	r3, r6
 8020576:	fa22 fc07 	lsr.w	ip, r2, r7
 802057a:	ea4c 0c03 	orr.w	ip, ip, r3
 802057e:	fa20 f407 	lsr.w	r4, r0, r7
 8020582:	fa01 f306 	lsl.w	r3, r1, r6
 8020586:	431c      	orrs	r4, r3
 8020588:	40f9      	lsrs	r1, r7
 802058a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802058e:	fa00 f306 	lsl.w	r3, r0, r6
 8020592:	fbb1 f8f9 	udiv	r8, r1, r9
 8020596:	0c20      	lsrs	r0, r4, #16
 8020598:	fa1f fe8c 	uxth.w	lr, ip
 802059c:	fb09 1118 	mls	r1, r9, r8, r1
 80205a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80205a4:	fb08 f00e 	mul.w	r0, r8, lr
 80205a8:	4288      	cmp	r0, r1
 80205aa:	fa02 f206 	lsl.w	r2, r2, r6
 80205ae:	d90b      	bls.n	80205c8 <__udivmoddi4+0x1b8>
 80205b0:	eb1c 0101 	adds.w	r1, ip, r1
 80205b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80205b8:	f080 8088 	bcs.w	80206cc <__udivmoddi4+0x2bc>
 80205bc:	4288      	cmp	r0, r1
 80205be:	f240 8085 	bls.w	80206cc <__udivmoddi4+0x2bc>
 80205c2:	f1a8 0802 	sub.w	r8, r8, #2
 80205c6:	4461      	add	r1, ip
 80205c8:	1a09      	subs	r1, r1, r0
 80205ca:	b2a4      	uxth	r4, r4
 80205cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80205d0:	fb09 1110 	mls	r1, r9, r0, r1
 80205d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80205d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80205dc:	458e      	cmp	lr, r1
 80205de:	d908      	bls.n	80205f2 <__udivmoddi4+0x1e2>
 80205e0:	eb1c 0101 	adds.w	r1, ip, r1
 80205e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80205e8:	d26c      	bcs.n	80206c4 <__udivmoddi4+0x2b4>
 80205ea:	458e      	cmp	lr, r1
 80205ec:	d96a      	bls.n	80206c4 <__udivmoddi4+0x2b4>
 80205ee:	3802      	subs	r0, #2
 80205f0:	4461      	add	r1, ip
 80205f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80205f6:	fba0 9402 	umull	r9, r4, r0, r2
 80205fa:	eba1 010e 	sub.w	r1, r1, lr
 80205fe:	42a1      	cmp	r1, r4
 8020600:	46c8      	mov	r8, r9
 8020602:	46a6      	mov	lr, r4
 8020604:	d356      	bcc.n	80206b4 <__udivmoddi4+0x2a4>
 8020606:	d053      	beq.n	80206b0 <__udivmoddi4+0x2a0>
 8020608:	b15d      	cbz	r5, 8020622 <__udivmoddi4+0x212>
 802060a:	ebb3 0208 	subs.w	r2, r3, r8
 802060e:	eb61 010e 	sbc.w	r1, r1, lr
 8020612:	fa01 f707 	lsl.w	r7, r1, r7
 8020616:	fa22 f306 	lsr.w	r3, r2, r6
 802061a:	40f1      	lsrs	r1, r6
 802061c:	431f      	orrs	r7, r3
 802061e:	e9c5 7100 	strd	r7, r1, [r5]
 8020622:	2600      	movs	r6, #0
 8020624:	4631      	mov	r1, r6
 8020626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802062a:	f1c2 0320 	rsb	r3, r2, #32
 802062e:	40d8      	lsrs	r0, r3
 8020630:	fa0c fc02 	lsl.w	ip, ip, r2
 8020634:	fa21 f303 	lsr.w	r3, r1, r3
 8020638:	4091      	lsls	r1, r2
 802063a:	4301      	orrs	r1, r0
 802063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020640:	fa1f fe8c 	uxth.w	lr, ip
 8020644:	fbb3 f0f7 	udiv	r0, r3, r7
 8020648:	fb07 3610 	mls	r6, r7, r0, r3
 802064c:	0c0b      	lsrs	r3, r1, #16
 802064e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020652:	fb00 f60e 	mul.w	r6, r0, lr
 8020656:	429e      	cmp	r6, r3
 8020658:	fa04 f402 	lsl.w	r4, r4, r2
 802065c:	d908      	bls.n	8020670 <__udivmoddi4+0x260>
 802065e:	eb1c 0303 	adds.w	r3, ip, r3
 8020662:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020666:	d22f      	bcs.n	80206c8 <__udivmoddi4+0x2b8>
 8020668:	429e      	cmp	r6, r3
 802066a:	d92d      	bls.n	80206c8 <__udivmoddi4+0x2b8>
 802066c:	3802      	subs	r0, #2
 802066e:	4463      	add	r3, ip
 8020670:	1b9b      	subs	r3, r3, r6
 8020672:	b289      	uxth	r1, r1
 8020674:	fbb3 f6f7 	udiv	r6, r3, r7
 8020678:	fb07 3316 	mls	r3, r7, r6, r3
 802067c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020680:	fb06 f30e 	mul.w	r3, r6, lr
 8020684:	428b      	cmp	r3, r1
 8020686:	d908      	bls.n	802069a <__udivmoddi4+0x28a>
 8020688:	eb1c 0101 	adds.w	r1, ip, r1
 802068c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020690:	d216      	bcs.n	80206c0 <__udivmoddi4+0x2b0>
 8020692:	428b      	cmp	r3, r1
 8020694:	d914      	bls.n	80206c0 <__udivmoddi4+0x2b0>
 8020696:	3e02      	subs	r6, #2
 8020698:	4461      	add	r1, ip
 802069a:	1ac9      	subs	r1, r1, r3
 802069c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80206a0:	e738      	b.n	8020514 <__udivmoddi4+0x104>
 80206a2:	462e      	mov	r6, r5
 80206a4:	4628      	mov	r0, r5
 80206a6:	e705      	b.n	80204b4 <__udivmoddi4+0xa4>
 80206a8:	4606      	mov	r6, r0
 80206aa:	e6e3      	b.n	8020474 <__udivmoddi4+0x64>
 80206ac:	4618      	mov	r0, r3
 80206ae:	e6f8      	b.n	80204a2 <__udivmoddi4+0x92>
 80206b0:	454b      	cmp	r3, r9
 80206b2:	d2a9      	bcs.n	8020608 <__udivmoddi4+0x1f8>
 80206b4:	ebb9 0802 	subs.w	r8, r9, r2
 80206b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80206bc:	3801      	subs	r0, #1
 80206be:	e7a3      	b.n	8020608 <__udivmoddi4+0x1f8>
 80206c0:	4646      	mov	r6, r8
 80206c2:	e7ea      	b.n	802069a <__udivmoddi4+0x28a>
 80206c4:	4620      	mov	r0, r4
 80206c6:	e794      	b.n	80205f2 <__udivmoddi4+0x1e2>
 80206c8:	4640      	mov	r0, r8
 80206ca:	e7d1      	b.n	8020670 <__udivmoddi4+0x260>
 80206cc:	46d0      	mov	r8, sl
 80206ce:	e77b      	b.n	80205c8 <__udivmoddi4+0x1b8>
 80206d0:	3b02      	subs	r3, #2
 80206d2:	4461      	add	r1, ip
 80206d4:	e732      	b.n	802053c <__udivmoddi4+0x12c>
 80206d6:	4630      	mov	r0, r6
 80206d8:	e709      	b.n	80204ee <__udivmoddi4+0xde>
 80206da:	4464      	add	r4, ip
 80206dc:	3802      	subs	r0, #2
 80206de:	e742      	b.n	8020566 <__udivmoddi4+0x156>

080206e0 <__aeabi_idiv0>:
 80206e0:	4770      	bx	lr
 80206e2:	bf00      	nop

080206e4 <scan_all_files>:
FRESULT fresult;

UINT br, bw;  // File read/write count

FRESULT scan_all_files (char* path)        /* Start node to be scanned (***also used as work area***) */
{
 80206e4:	b580      	push	{r7, lr}
 80206e6:	b098      	sub	sp, #96	; 0x60
 80206e8:	af00      	add	r7, sp, #0
 80206ea:	6078      	str	r0, [r7, #4]
	DIR dir;
	UINT i;

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80206ec:	f107 0308 	add.w	r3, r7, #8
 80206f0:	6879      	ldr	r1, [r7, #4]
 80206f2:	4618      	mov	r0, r3
 80206f4:	f014 fdb4 	bl	8035260 <f_opendir>
 80206f8:	4603      	mov	r3, r0
 80206fa:	461a      	mov	r2, r3
 80206fc:	4b31      	ldr	r3, [pc, #196]	; (80207c4 <scan_all_files+0xe0>)
 80206fe:	701a      	strb	r2, [r3, #0]

    if (fresult == FR_OK) {
 8020700:	4b30      	ldr	r3, [pc, #192]	; (80207c4 <scan_all_files+0xe0>)
 8020702:	781b      	ldrb	r3, [r3, #0]
 8020704:	2b00      	cmp	r3, #0
 8020706:	d156      	bne.n	80207b6 <scan_all_files+0xd2>
            for (;;) {
            	fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8020708:	f107 0308 	add.w	r3, r7, #8
 802070c:	492e      	ldr	r1, [pc, #184]	; (80207c8 <scan_all_files+0xe4>)
 802070e:	4618      	mov	r0, r3
 8020710:	f014 fe9a 	bl	8035448 <f_readdir>
 8020714:	4603      	mov	r3, r0
 8020716:	461a      	mov	r2, r3
 8020718:	4b2a      	ldr	r3, [pc, #168]	; (80207c4 <scan_all_files+0xe0>)
 802071a:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 802071c:	4b29      	ldr	r3, [pc, #164]	; (80207c4 <scan_all_files+0xe0>)
 802071e:	781b      	ldrb	r3, [r3, #0]
 8020720:	2b00      	cmp	r3, #0
 8020722:	d143      	bne.n	80207ac <scan_all_files+0xc8>
 8020724:	4b28      	ldr	r3, [pc, #160]	; (80207c8 <scan_all_files+0xe4>)
 8020726:	7e9b      	ldrb	r3, [r3, #26]
 8020728:	2b00      	cmp	r3, #0
 802072a:	d03f      	beq.n	80207ac <scan_all_files+0xc8>
                if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 802072c:	4b26      	ldr	r3, [pc, #152]	; (80207c8 <scan_all_files+0xe4>)
 802072e:	7b1b      	ldrb	r3, [r3, #12]
 8020730:	f003 0310 	and.w	r3, r3, #16
 8020734:	2b00      	cmp	r3, #0
 8020736:	d02e      	beq.n	8020796 <scan_all_files+0xb2>
                	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8020738:	4924      	ldr	r1, [pc, #144]	; (80207cc <scan_all_files+0xe8>)
 802073a:	4825      	ldr	r0, [pc, #148]	; (80207d0 <scan_all_files+0xec>)
 802073c:	f7ff fde8 	bl	8020310 <strcmp>
 8020740:	4603      	mov	r3, r0
 8020742:	2b00      	cmp	r3, #0
 8020744:	d02d      	beq.n	80207a2 <scan_all_files+0xbe>
                	if (!(strcmp("System Volume Information", fno.fname))) continue;
 8020746:	4921      	ldr	r1, [pc, #132]	; (80207cc <scan_all_files+0xe8>)
 8020748:	4822      	ldr	r0, [pc, #136]	; (80207d4 <scan_all_files+0xf0>)
 802074a:	f7ff fde1 	bl	8020310 <strcmp>
 802074e:	4603      	mov	r3, r0
 8020750:	2b00      	cmp	r3, #0
 8020752:	d028      	beq.n	80207a6 <scan_all_files+0xc2>
                	i = strlen(path);
 8020754:	6878      	ldr	r0, [r7, #4]
 8020756:	f7ff fde5 	bl	8020324 <strlen>
 802075a:	65f8      	str	r0, [r7, #92]	; 0x5c
                    sprintf(&path[i], "/%s", fno.fname);
 802075c:	687a      	ldr	r2, [r7, #4]
 802075e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020760:	4413      	add	r3, r2
 8020762:	4a1a      	ldr	r2, [pc, #104]	; (80207cc <scan_all_files+0xe8>)
 8020764:	491c      	ldr	r1, [pc, #112]	; (80207d8 <scan_all_files+0xf4>)
 8020766:	4618      	mov	r0, r3
 8020768:	f019 fd42 	bl	803a1f0 <siprintf>
                    printf("%s\r\n",path);
 802076c:	6879      	ldr	r1, [r7, #4]
 802076e:	481b      	ldr	r0, [pc, #108]	; (80207dc <scan_all_files+0xf8>)
 8020770:	f019 fca0 	bl	803a0b4 <iprintf>
                    fresult = scan_all_files(path);                    /* Enter the directory */
 8020774:	6878      	ldr	r0, [r7, #4]
 8020776:	f7ff ffb5 	bl	80206e4 <scan_all_files>
 802077a:	4603      	mov	r3, r0
 802077c:	461a      	mov	r2, r3
 802077e:	4b11      	ldr	r3, [pc, #68]	; (80207c4 <scan_all_files+0xe0>)
 8020780:	701a      	strb	r2, [r3, #0]
                    if (fresult != FR_OK) break;
 8020782:	4b10      	ldr	r3, [pc, #64]	; (80207c4 <scan_all_files+0xe0>)
 8020784:	781b      	ldrb	r3, [r3, #0]
 8020786:	2b00      	cmp	r3, #0
 8020788:	d10f      	bne.n	80207aa <scan_all_files+0xc6>
                    path[i] = 0;
 802078a:	687a      	ldr	r2, [r7, #4]
 802078c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802078e:	4413      	add	r3, r2
 8020790:	2200      	movs	r2, #0
 8020792:	701a      	strb	r2, [r3, #0]
 8020794:	e7b8      	b.n	8020708 <scan_all_files+0x24>
                } else {                                       /* It is a file. */
                	printf("%s/%s\r\n", path, fno.fname);
 8020796:	4a0d      	ldr	r2, [pc, #52]	; (80207cc <scan_all_files+0xe8>)
 8020798:	6879      	ldr	r1, [r7, #4]
 802079a:	4811      	ldr	r0, [pc, #68]	; (80207e0 <scan_all_files+0xfc>)
 802079c:	f019 fc8a 	bl	803a0b4 <iprintf>
 80207a0:	e7b2      	b.n	8020708 <scan_all_files+0x24>
                	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80207a2:	bf00      	nop
 80207a4:	e7b0      	b.n	8020708 <scan_all_files+0x24>
                	if (!(strcmp("System Volume Information", fno.fname))) continue;
 80207a6:	bf00      	nop
            	fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80207a8:	e7ae      	b.n	8020708 <scan_all_files+0x24>
                    if (fresult != FR_OK) break;
 80207aa:	bf00      	nop
                }
            }
            f_closedir(&dir);
 80207ac:	f107 0308 	add.w	r3, r7, #8
 80207b0:	4618      	mov	r0, r3
 80207b2:	f014 fe1e 	bl	80353f2 <f_closedir>
        }


    return fresult;
 80207b6:	4b03      	ldr	r3, [pc, #12]	; (80207c4 <scan_all_files+0xe0>)
 80207b8:	781b      	ldrb	r3, [r3, #0]
}
 80207ba:	4618      	mov	r0, r3
 80207bc:	3760      	adds	r7, #96	; 0x60
 80207be:	46bd      	mov	sp, r7
 80207c0:	bd80      	pop	{r7, pc}
 80207c2:	bf00      	nop
 80207c4:	240001d8 	.word	0x240001d8
 80207c8:	240000b8 	.word	0x240000b8
 80207cc:	240000d2 	.word	0x240000d2
 80207d0:	0803b320 	.word	0x0803b320
 80207d4:	0803b32c 	.word	0x0803b32c
 80207d8:	0803b348 	.word	0x0803b348
 80207dc:	0803b34c 	.word	0x0803b34c
 80207e0:	0803b354 	.word	0x0803b354

080207e4 <create_file>:

FRESULT create_file (char *name)
{
 80207e4:	b580      	push	{r7, lr}
 80207e6:	b084      	sub	sp, #16
 80207e8:	af00      	add	r7, sp, #0
 80207ea:	6078      	str	r0, [r7, #4]

	uint8_t filename_position = find_filename_argument(name);
 80207ec:	6878      	ldr	r0, [r7, #4]
 80207ee:	f000 fa1f 	bl	8020c30 <find_filename_argument>
 80207f2:	4603      	mov	r3, r0
 80207f4:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	name = name + filename_position;
 80207f6:	7bfb      	ldrb	r3, [r7, #15]
 80207f8:	687a      	ldr	r2, [r7, #4]
 80207fa:	4413      	add	r3, r2
 80207fc:	607b      	str	r3, [r7, #4]

	fresult = f_stat (name, &fno);
 80207fe:	4922      	ldr	r1, [pc, #136]	; (8020888 <create_file+0xa4>)
 8020800:	6878      	ldr	r0, [r7, #4]
 8020802:	f014 fe7e 	bl	8035502 <f_stat>
 8020806:	4603      	mov	r3, r0
 8020808:	461a      	mov	r2, r3
 802080a:	4b20      	ldr	r3, [pc, #128]	; (802088c <create_file+0xa8>)
 802080c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 802080e:	4b1f      	ldr	r3, [pc, #124]	; (802088c <create_file+0xa8>)
 8020810:	781b      	ldrb	r3, [r3, #0]
 8020812:	2b00      	cmp	r3, #0
 8020814:	d104      	bne.n	8020820 <create_file+0x3c>
	{
		printf("File '%s' already exists!\r\n",name);
 8020816:	6879      	ldr	r1, [r7, #4]
 8020818:	481d      	ldr	r0, [pc, #116]	; (8020890 <create_file+0xac>)
 802081a:	f019 fc4b 	bl	803a0b4 <iprintf>
 802081e:	e02c      	b.n	802087a <create_file+0x96>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8020820:	220b      	movs	r2, #11
 8020822:	6879      	ldr	r1, [r7, #4]
 8020824:	481b      	ldr	r0, [pc, #108]	; (8020894 <create_file+0xb0>)
 8020826:	f013 fb69 	bl	8033efc <f_open>
 802082a:	4603      	mov	r3, r0
 802082c:	461a      	mov	r2, r3
 802082e:	4b17      	ldr	r3, [pc, #92]	; (802088c <create_file+0xa8>)
 8020830:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8020832:	4b16      	ldr	r3, [pc, #88]	; (802088c <create_file+0xa8>)
 8020834:	781b      	ldrb	r3, [r3, #0]
 8020836:	2b00      	cmp	r3, #0
 8020838:	d009      	beq.n	802084e <create_file+0x6a>
		{
			printf("Error(%d) when creating the file '%s'\r\n", fresult, name);
 802083a:	4b14      	ldr	r3, [pc, #80]	; (802088c <create_file+0xa8>)
 802083c:	781b      	ldrb	r3, [r3, #0]
 802083e:	687a      	ldr	r2, [r7, #4]
 8020840:	4619      	mov	r1, r3
 8020842:	4815      	ldr	r0, [pc, #84]	; (8020898 <create_file+0xb4>)
 8020844:	f019 fc36 	bl	803a0b4 <iprintf>
		    return fresult;
 8020848:	4b10      	ldr	r3, [pc, #64]	; (802088c <create_file+0xa8>)
 802084a:	781b      	ldrb	r3, [r3, #0]
 802084c:	e017      	b.n	802087e <create_file+0x9a>
		}
		else
		{
			printf("'%s' is created successfully\r\n",name);
 802084e:	6879      	ldr	r1, [r7, #4]
 8020850:	4812      	ldr	r0, [pc, #72]	; (802089c <create_file+0xb8>)
 8020852:	f019 fc2f 	bl	803a0b4 <iprintf>
		}

		fresult = f_close(&USBHFile);
 8020856:	480f      	ldr	r0, [pc, #60]	; (8020894 <create_file+0xb0>)
 8020858:	f014 fb59 	bl	8034f0e <f_close>
 802085c:	4603      	mov	r3, r0
 802085e:	461a      	mov	r2, r3
 8020860:	4b0a      	ldr	r3, [pc, #40]	; (802088c <create_file+0xa8>)
 8020862:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8020864:	4b09      	ldr	r3, [pc, #36]	; (802088c <create_file+0xa8>)
 8020866:	781b      	ldrb	r3, [r3, #0]
 8020868:	2b00      	cmp	r3, #0
 802086a:	d006      	beq.n	802087a <create_file+0x96>
		{
			printf("Error(%d) when closing the file '%s'\r\n", fresult, name);
 802086c:	4b07      	ldr	r3, [pc, #28]	; (802088c <create_file+0xa8>)
 802086e:	781b      	ldrb	r3, [r3, #0]
 8020870:	687a      	ldr	r2, [r7, #4]
 8020872:	4619      	mov	r1, r3
 8020874:	480a      	ldr	r0, [pc, #40]	; (80208a0 <create_file+0xbc>)
 8020876:	f019 fc1d 	bl	803a0b4 <iprintf>
		}
	}
    return fresult;
 802087a:	4b04      	ldr	r3, [pc, #16]	; (802088c <create_file+0xa8>)
 802087c:	781b      	ldrb	r3, [r3, #0]
}
 802087e:	4618      	mov	r0, r3
 8020880:	3710      	adds	r7, #16
 8020882:	46bd      	mov	sp, r7
 8020884:	bd80      	pop	{r7, pc}
 8020886:	bf00      	nop
 8020888:	240000b8 	.word	0x240000b8
 802088c:	240001d8 	.word	0x240001d8
 8020890:	0803b35c 	.word	0x0803b35c
 8020894:	24001ba0 	.word	0x24001ba0
 8020898:	0803b378 	.word	0x0803b378
 802089c:	0803b3a0 	.word	0x0803b3a0
 80208a0:	0803b3c0 	.word	0x0803b3c0

080208a4 <remove_file>:

FRESULT remove_file (char *name)
{
 80208a4:	b580      	push	{r7, lr}
 80208a6:	b084      	sub	sp, #16
 80208a8:	af00      	add	r7, sp, #0
 80208aa:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/

	uint8_t filename_position = find_filename_argument(name);
 80208ac:	6878      	ldr	r0, [r7, #4]
 80208ae:	f000 f9bf 	bl	8020c30 <find_filename_argument>
 80208b2:	4603      	mov	r3, r0
 80208b4:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	name = name + filename_position;
 80208b6:	7bfb      	ldrb	r3, [r7, #15]
 80208b8:	687a      	ldr	r2, [r7, #4]
 80208ba:	4413      	add	r3, r2
 80208bc:	607b      	str	r3, [r7, #4]

	fresult = f_stat (name, &fno);
 80208be:	4917      	ldr	r1, [pc, #92]	; (802091c <remove_file+0x78>)
 80208c0:	6878      	ldr	r0, [r7, #4]
 80208c2:	f014 fe1e 	bl	8035502 <f_stat>
 80208c6:	4603      	mov	r3, r0
 80208c8:	461a      	mov	r2, r3
 80208ca:	4b15      	ldr	r3, [pc, #84]	; (8020920 <remove_file+0x7c>)
 80208cc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80208ce:	4b14      	ldr	r3, [pc, #80]	; (8020920 <remove_file+0x7c>)
 80208d0:	781b      	ldrb	r3, [r3, #0]
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	d004      	beq.n	80208e0 <remove_file+0x3c>
	{
		printf("File '%s' does not exists!\r\n", name);
 80208d6:	6879      	ldr	r1, [r7, #4]
 80208d8:	4812      	ldr	r0, [pc, #72]	; (8020924 <remove_file+0x80>)
 80208da:	f019 fbeb 	bl	803a0b4 <iprintf>
 80208de:	e016      	b.n	802090e <remove_file+0x6a>
	}
	else
	{
		fresult = f_unlink (name);
 80208e0:	6878      	ldr	r0, [r7, #4]
 80208e2:	f014 fe68 	bl	80355b6 <f_unlink>
 80208e6:	4603      	mov	r3, r0
 80208e8:	461a      	mov	r2, r3
 80208ea:	4b0d      	ldr	r3, [pc, #52]	; (8020920 <remove_file+0x7c>)
 80208ec:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK)
 80208ee:	4b0c      	ldr	r3, [pc, #48]	; (8020920 <remove_file+0x7c>)
 80208f0:	781b      	ldrb	r3, [r3, #0]
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	d104      	bne.n	8020900 <remove_file+0x5c>
		{
			printf("'%s' has been removed successfully.\r\n", name);
 80208f6:	6879      	ldr	r1, [r7, #4]
 80208f8:	480b      	ldr	r0, [pc, #44]	; (8020928 <remove_file+0x84>)
 80208fa:	f019 fbdb 	bl	803a0b4 <iprintf>
 80208fe:	e006      	b.n	802090e <remove_file+0x6a>
		}
		else
		{
			printf("Error(%d) when removing '%s'!\r\n",fresult, name);
 8020900:	4b07      	ldr	r3, [pc, #28]	; (8020920 <remove_file+0x7c>)
 8020902:	781b      	ldrb	r3, [r3, #0]
 8020904:	687a      	ldr	r2, [r7, #4]
 8020906:	4619      	mov	r1, r3
 8020908:	4808      	ldr	r0, [pc, #32]	; (802092c <remove_file+0x88>)
 802090a:	f019 fbd3 	bl	803a0b4 <iprintf>
		}
	}
	return fresult;
 802090e:	4b04      	ldr	r3, [pc, #16]	; (8020920 <remove_file+0x7c>)
 8020910:	781b      	ldrb	r3, [r3, #0]
}
 8020912:	4618      	mov	r0, r3
 8020914:	3710      	adds	r7, #16
 8020916:	46bd      	mov	sp, r7
 8020918:	bd80      	pop	{r7, pc}
 802091a:	bf00      	nop
 802091c:	240000b8 	.word	0x240000b8
 8020920:	240001d8 	.word	0x240001d8
 8020924:	0803b3e8 	.word	0x0803b3e8
 8020928:	0803b408 	.word	0x0803b408
 802092c:	0803b430 	.word	0x0803b430

08020930 <create_dir>:

FRESULT create_dir (char *name)
{
 8020930:	b580      	push	{r7, lr}
 8020932:	b084      	sub	sp, #16
 8020934:	af00      	add	r7, sp, #0
 8020936:	6078      	str	r0, [r7, #4]
	uint8_t filename_position = find_filename_argument(name);
 8020938:	6878      	ldr	r0, [r7, #4]
 802093a:	f000 f979 	bl	8020c30 <find_filename_argument>
 802093e:	4603      	mov	r3, r0
 8020940:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	name = name + filename_position;
 8020942:	7bfb      	ldrb	r3, [r7, #15]
 8020944:	687a      	ldr	r2, [r7, #4]
 8020946:	4413      	add	r3, r2
 8020948:	607b      	str	r3, [r7, #4]

    fresult = f_mkdir(name);
 802094a:	6878      	ldr	r0, [r7, #4]
 802094c:	f014 ff52 	bl	80357f4 <f_mkdir>
 8020950:	4603      	mov	r3, r0
 8020952:	461a      	mov	r2, r3
 8020954:	4b0b      	ldr	r3, [pc, #44]	; (8020984 <create_dir+0x54>)
 8020956:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8020958:	4b0a      	ldr	r3, [pc, #40]	; (8020984 <create_dir+0x54>)
 802095a:	781b      	ldrb	r3, [r3, #0]
 802095c:	2b00      	cmp	r3, #0
 802095e:	d104      	bne.n	802096a <create_dir+0x3a>
    {
    	printf("'%s' has been created successfully.\r\n", name);
 8020960:	6879      	ldr	r1, [r7, #4]
 8020962:	4809      	ldr	r0, [pc, #36]	; (8020988 <create_dir+0x58>)
 8020964:	f019 fba6 	bl	803a0b4 <iprintf>
 8020968:	e006      	b.n	8020978 <create_dir+0x48>
    }
    else
    {
    	printf("Error(%d) when creating directory '%s'\r\n", fresult,name);
 802096a:	4b06      	ldr	r3, [pc, #24]	; (8020984 <create_dir+0x54>)
 802096c:	781b      	ldrb	r3, [r3, #0]
 802096e:	687a      	ldr	r2, [r7, #4]
 8020970:	4619      	mov	r1, r3
 8020972:	4806      	ldr	r0, [pc, #24]	; (802098c <create_dir+0x5c>)
 8020974:	f019 fb9e 	bl	803a0b4 <iprintf>
    }
    return fresult;
 8020978:	4b02      	ldr	r3, [pc, #8]	; (8020984 <create_dir+0x54>)
 802097a:	781b      	ldrb	r3, [r3, #0]
}
 802097c:	4618      	mov	r0, r3
 802097e:	3710      	adds	r7, #16
 8020980:	46bd      	mov	sp, r7
 8020982:	bd80      	pop	{r7, pc}
 8020984:	240001d8 	.word	0x240001d8
 8020988:	0803b450 	.word	0x0803b450
 802098c:	0803b478 	.word	0x0803b478

08020990 <write_file>:

FRESULT write_file(char *filename, char* data, BYTE mode)
{
 8020990:	b580      	push	{r7, lr}
 8020992:	b084      	sub	sp, #16
 8020994:	af00      	add	r7, sp, #0
 8020996:	60f8      	str	r0, [r7, #12]
 8020998:	60b9      	str	r1, [r7, #8]
 802099a:	4613      	mov	r3, r2
 802099c:	71fb      	strb	r3, [r7, #7]

	fresult = f_open(&USBHFile, filename, mode);
 802099e:	79fb      	ldrb	r3, [r7, #7]
 80209a0:	461a      	mov	r2, r3
 80209a2:	68f9      	ldr	r1, [r7, #12]
 80209a4:	4826      	ldr	r0, [pc, #152]	; (8020a40 <write_file+0xb0>)
 80209a6:	f013 faa9 	bl	8033efc <f_open>
 80209aa:	4603      	mov	r3, r0
 80209ac:	461a      	mov	r2, r3
 80209ae:	4b25      	ldr	r3, [pc, #148]	; (8020a44 <write_file+0xb4>)
 80209b0:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 80209b2:	4b24      	ldr	r3, [pc, #144]	; (8020a44 <write_file+0xb4>)
 80209b4:	781b      	ldrb	r3, [r3, #0]
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	d009      	beq.n	80209ce <write_file+0x3e>
		printf("Error(%d) when opening file '%s'.\r\n", fresult, filename);
 80209ba:	4b22      	ldr	r3, [pc, #136]	; (8020a44 <write_file+0xb4>)
 80209bc:	781b      	ldrb	r3, [r3, #0]
 80209be:	68fa      	ldr	r2, [r7, #12]
 80209c0:	4619      	mov	r1, r3
 80209c2:	4821      	ldr	r0, [pc, #132]	; (8020a48 <write_file+0xb8>)
 80209c4:	f019 fb76 	bl	803a0b4 <iprintf>
		return fresult;
 80209c8:	4b1e      	ldr	r3, [pc, #120]	; (8020a44 <write_file+0xb4>)
 80209ca:	781b      	ldrb	r3, [r3, #0]
 80209cc:	e033      	b.n	8020a36 <write_file+0xa6>
	}

	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 80209ce:	68b8      	ldr	r0, [r7, #8]
 80209d0:	f7ff fca8 	bl	8020324 <strlen>
 80209d4:	4602      	mov	r2, r0
 80209d6:	4b1d      	ldr	r3, [pc, #116]	; (8020a4c <write_file+0xbc>)
 80209d8:	68b9      	ldr	r1, [r7, #8]
 80209da:	4819      	ldr	r0, [pc, #100]	; (8020a40 <write_file+0xb0>)
 80209dc:	f013 ff4e 	bl	803487c <f_write>
 80209e0:	4603      	mov	r3, r0
 80209e2:	461a      	mov	r2, r3
 80209e4:	4b17      	ldr	r3, [pc, #92]	; (8020a44 <write_file+0xb4>)
 80209e6:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80209e8:	4b16      	ldr	r3, [pc, #88]	; (8020a44 <write_file+0xb4>)
 80209ea:	781b      	ldrb	r3, [r3, #0]
 80209ec:	2b00      	cmp	r3, #0
 80209ee:	d009      	beq.n	8020a04 <write_file+0x74>
	{
		printf("Error(%d) when opening file '%s'.\r\n", fresult, filename);
 80209f0:	4b14      	ldr	r3, [pc, #80]	; (8020a44 <write_file+0xb4>)
 80209f2:	781b      	ldrb	r3, [r3, #0]
 80209f4:	68fa      	ldr	r2, [r7, #12]
 80209f6:	4619      	mov	r1, r3
 80209f8:	4813      	ldr	r0, [pc, #76]	; (8020a48 <write_file+0xb8>)
 80209fa:	f019 fb5b 	bl	803a0b4 <iprintf>
		return fresult;
 80209fe:	4b11      	ldr	r3, [pc, #68]	; (8020a44 <write_file+0xb4>)
 8020a00:	781b      	ldrb	r3, [r3, #0]
 8020a02:	e018      	b.n	8020a36 <write_file+0xa6>
	}

	/* Close file */
	fresult = f_close(&USBHFile);
 8020a04:	480e      	ldr	r0, [pc, #56]	; (8020a40 <write_file+0xb0>)
 8020a06:	f014 fa82 	bl	8034f0e <f_close>
 8020a0a:	4603      	mov	r3, r0
 8020a0c:	461a      	mov	r2, r3
 8020a0e:	4b0d      	ldr	r3, [pc, #52]	; (8020a44 <write_file+0xb4>)
 8020a10:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8020a12:	4b0c      	ldr	r3, [pc, #48]	; (8020a44 <write_file+0xb4>)
 8020a14:	781b      	ldrb	r3, [r3, #0]
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	d007      	beq.n	8020a2a <write_file+0x9a>
	{
		printf("Error(%d) when opening file '%s'.\r\n", fresult, filename);
 8020a1a:	4b0a      	ldr	r3, [pc, #40]	; (8020a44 <write_file+0xb4>)
 8020a1c:	781b      	ldrb	r3, [r3, #0]
 8020a1e:	68fa      	ldr	r2, [r7, #12]
 8020a20:	4619      	mov	r1, r3
 8020a22:	4809      	ldr	r0, [pc, #36]	; (8020a48 <write_file+0xb8>)
 8020a24:	f019 fb46 	bl	803a0b4 <iprintf>
 8020a28:	e003      	b.n	8020a32 <write_file+0xa2>
	}
	else
	{
		printf("File '%s' is written successfully.\r\n", filename);
 8020a2a:	68f9      	ldr	r1, [r7, #12]
 8020a2c:	4808      	ldr	r0, [pc, #32]	; (8020a50 <write_file+0xc0>)
 8020a2e:	f019 fb41 	bl	803a0b4 <iprintf>
	}

	return fresult;
 8020a32:	4b04      	ldr	r3, [pc, #16]	; (8020a44 <write_file+0xb4>)
 8020a34:	781b      	ldrb	r3, [r3, #0]
}
 8020a36:	4618      	mov	r0, r3
 8020a38:	3710      	adds	r7, #16
 8020a3a:	46bd      	mov	sp, r7
 8020a3c:	bd80      	pop	{r7, pc}
 8020a3e:	bf00      	nop
 8020a40:	24001ba0 	.word	0x24001ba0
 8020a44:	240001d8 	.word	0x240001d8
 8020a48:	0803b4a4 	.word	0x0803b4a4
 8020a4c:	240001e0 	.word	0x240001e0
 8020a50:	0803b4c8 	.word	0x0803b4c8

08020a54 <read_file>:

FRESULT read_file (char *filename)
{
 8020a54:	b580      	push	{r7, lr}
 8020a56:	b084      	sub	sp, #16
 8020a58:	af00      	add	r7, sp, #0
 8020a5a:	6078      	str	r0, [r7, #4]
	uint8_t filename_position = find_filename_argument(filename);
 8020a5c:	6878      	ldr	r0, [r7, #4]
 8020a5e:	f000 f8e7 	bl	8020c30 <find_filename_argument>
 8020a62:	4603      	mov	r3, r0
 8020a64:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Please enter a proper filename!\r\n");
		return FR_INVALID_NAME;
	}

	filename = filename + filename_position;
 8020a66:	7bfb      	ldrb	r3, [r7, #15]
 8020a68:	687a      	ldr	r2, [r7, #4]
 8020a6a:	4413      	add	r3, r2
 8020a6c:	607b      	str	r3, [r7, #4]


	/**** check whether the file exists or not ****/
	fresult = f_stat (filename, &fno);
 8020a6e:	4938      	ldr	r1, [pc, #224]	; (8020b50 <read_file+0xfc>)
 8020a70:	6878      	ldr	r0, [r7, #4]
 8020a72:	f014 fd46 	bl	8035502 <f_stat>
 8020a76:	4603      	mov	r3, r0
 8020a78:	461a      	mov	r2, r3
 8020a7a:	4b36      	ldr	r3, [pc, #216]	; (8020b54 <read_file+0x100>)
 8020a7c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8020a7e:	4b35      	ldr	r3, [pc, #212]	; (8020b54 <read_file+0x100>)
 8020a80:	781b      	ldrb	r3, [r3, #0]
 8020a82:	2b00      	cmp	r3, #0
 8020a84:	d006      	beq.n	8020a94 <read_file+0x40>
	{
		printf("File '%s' does not exists\r\n", filename);
 8020a86:	6879      	ldr	r1, [r7, #4]
 8020a88:	4833      	ldr	r0, [pc, #204]	; (8020b58 <read_file+0x104>)
 8020a8a:	f019 fb13 	bl	803a0b4 <iprintf>
	    return fresult;
 8020a8e:	4b31      	ldr	r3, [pc, #196]	; (8020b54 <read_file+0x100>)
 8020a90:	781b      	ldrb	r3, [r3, #0]
 8020a92:	e059      	b.n	8020b48 <read_file+0xf4>
	}

	/* Open file to read */
	fresult = f_open(&USBHFile, filename, FA_READ);
 8020a94:	2201      	movs	r2, #1
 8020a96:	6879      	ldr	r1, [r7, #4]
 8020a98:	4830      	ldr	r0, [pc, #192]	; (8020b5c <read_file+0x108>)
 8020a9a:	f013 fa2f 	bl	8033efc <f_open>
 8020a9e:	4603      	mov	r3, r0
 8020aa0:	461a      	mov	r2, r3
 8020aa2:	4b2c      	ldr	r3, [pc, #176]	; (8020b54 <read_file+0x100>)
 8020aa4:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK)
 8020aa6:	4b2b      	ldr	r3, [pc, #172]	; (8020b54 <read_file+0x100>)
 8020aa8:	781b      	ldrb	r3, [r3, #0]
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	d009      	beq.n	8020ac2 <read_file+0x6e>
	{
		printf("Error(%d) when opening file '%s'\r\n", fresult, filename);
 8020aae:	4b29      	ldr	r3, [pc, #164]	; (8020b54 <read_file+0x100>)
 8020ab0:	781b      	ldrb	r3, [r3, #0]
 8020ab2:	687a      	ldr	r2, [r7, #4]
 8020ab4:	4619      	mov	r1, r3
 8020ab6:	482a      	ldr	r0, [pc, #168]	; (8020b60 <read_file+0x10c>)
 8020ab8:	f019 fafc 	bl	803a0b4 <iprintf>
		return fresult;
 8020abc:	4b25      	ldr	r3, [pc, #148]	; (8020b54 <read_file+0x100>)
 8020abe:	781b      	ldrb	r3, [r3, #0]
 8020ac0:	e042      	b.n	8020b48 <read_file+0xf4>
	}

	char *buffer = malloc(f_size(&USBHFile)+1);
 8020ac2:	4b26      	ldr	r3, [pc, #152]	; (8020b5c <read_file+0x108>)
 8020ac4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8020ac8:	4613      	mov	r3, r2
 8020aca:	3301      	adds	r3, #1
 8020acc:	4618      	mov	r0, r3
 8020ace:	f019 f9eb 	bl	8039ea8 <malloc>
 8020ad2:	4603      	mov	r3, r0
 8020ad4:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&USBHFile, buffer, f_size(&USBHFile), &br);
 8020ad6:	4b21      	ldr	r3, [pc, #132]	; (8020b5c <read_file+0x108>)
 8020ad8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8020adc:	4b21      	ldr	r3, [pc, #132]	; (8020b64 <read_file+0x110>)
 8020ade:	68b9      	ldr	r1, [r7, #8]
 8020ae0:	481e      	ldr	r0, [pc, #120]	; (8020b5c <read_file+0x108>)
 8020ae2:	f013 fd04 	bl	80344ee <f_read>
 8020ae6:	4603      	mov	r3, r0
 8020ae8:	461a      	mov	r2, r3
 8020aea:	4b1a      	ldr	r3, [pc, #104]	; (8020b54 <read_file+0x100>)
 8020aec:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8020aee:	4b19      	ldr	r3, [pc, #100]	; (8020b54 <read_file+0x100>)
 8020af0:	781b      	ldrb	r3, [r3, #0]
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	d009      	beq.n	8020b0a <read_file+0xb6>
	{
		printf("Error(%d) when reading file '%s'\r\n", fresult, filename);
 8020af6:	4b17      	ldr	r3, [pc, #92]	; (8020b54 <read_file+0x100>)
 8020af8:	781b      	ldrb	r3, [r3, #0]
 8020afa:	687a      	ldr	r2, [r7, #4]
 8020afc:	4619      	mov	r1, r3
 8020afe:	481a      	ldr	r0, [pc, #104]	; (8020b68 <read_file+0x114>)
 8020b00:	f019 fad8 	bl	803a0b4 <iprintf>
	    return fresult;
 8020b04:	4b13      	ldr	r3, [pc, #76]	; (8020b54 <read_file+0x100>)
 8020b06:	781b      	ldrb	r3, [r3, #0]
 8020b08:	e01e      	b.n	8020b48 <read_file+0xf4>
	}

	buffer[f_size(&USBHFile)] = '\0';
 8020b0a:	4b14      	ldr	r3, [pc, #80]	; (8020b5c <read_file+0x108>)
 8020b0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8020b10:	68bb      	ldr	r3, [r7, #8]
 8020b12:	4413      	add	r3, r2
 8020b14:	2200      	movs	r2, #0
 8020b16:	701a      	strb	r2, [r3, #0]


	printf("%s\r\n", buffer);
 8020b18:	68b9      	ldr	r1, [r7, #8]
 8020b1a:	4814      	ldr	r0, [pc, #80]	; (8020b6c <read_file+0x118>)
 8020b1c:	f019 faca 	bl	803a0b4 <iprintf>
	/* Close file */
	fresult = f_close(&USBHFile);
 8020b20:	480e      	ldr	r0, [pc, #56]	; (8020b5c <read_file+0x108>)
 8020b22:	f014 f9f4 	bl	8034f0e <f_close>
 8020b26:	4603      	mov	r3, r0
 8020b28:	461a      	mov	r2, r3
 8020b2a:	4b0a      	ldr	r3, [pc, #40]	; (8020b54 <read_file+0x100>)
 8020b2c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8020b2e:	4b09      	ldr	r3, [pc, #36]	; (8020b54 <read_file+0x100>)
 8020b30:	781b      	ldrb	r3, [r3, #0]
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d006      	beq.n	8020b44 <read_file+0xf0>
	{
		printf("Error(%d) when closing file '%s'\r\n", fresult, filename);
 8020b36:	4b07      	ldr	r3, [pc, #28]	; (8020b54 <read_file+0x100>)
 8020b38:	781b      	ldrb	r3, [r3, #0]
 8020b3a:	687a      	ldr	r2, [r7, #4]
 8020b3c:	4619      	mov	r1, r3
 8020b3e:	480c      	ldr	r0, [pc, #48]	; (8020b70 <read_file+0x11c>)
 8020b40:	f019 fab8 	bl	803a0b4 <iprintf>
	}

	return fresult;
 8020b44:	4b03      	ldr	r3, [pc, #12]	; (8020b54 <read_file+0x100>)
 8020b46:	781b      	ldrb	r3, [r3, #0]
}
 8020b48:	4618      	mov	r0, r3
 8020b4a:	3710      	adds	r7, #16
 8020b4c:	46bd      	mov	sp, r7
 8020b4e:	bd80      	pop	{r7, pc}
 8020b50:	240000b8 	.word	0x240000b8
 8020b54:	240001d8 	.word	0x240001d8
 8020b58:	0803b4f0 	.word	0x0803b4f0
 8020b5c:	24001ba0 	.word	0x24001ba0
 8020b60:	0803b50c 	.word	0x0803b50c
 8020b64:	240001dc 	.word	0x240001dc
 8020b68:	0803b530 	.word	0x0803b530
 8020b6c:	0803b34c 	.word	0x0803b34c
 8020b70:	0803b554 	.word	0x0803b554

08020b74 <echo>:


/* HIGH LEVEL FUNCTIONS */
FRESULT echo(char *arguments){
 8020b74:	b580      	push	{r7, lr}
 8020b76:	b088      	sub	sp, #32
 8020b78:	af00      	add	r7, sp, #0
 8020b7a:	6078      	str	r0, [r7, #4]
	uint8_t argument_position = find_filename_argument(arguments);
 8020b7c:	6878      	ldr	r0, [r7, #4]
 8020b7e:	f000 f857 	bl	8020c30 <find_filename_argument>
 8020b82:	4603      	mov	r3, r0
 8020b84:	77fb      	strb	r3, [r7, #31]
		return FR_INVALID_NAME;
	}

	char *data_field_start_ptr, *data_field_end_ptr, *file_name_ptr;

	data_field_start_ptr = strchr(arguments, '"');
 8020b86:	2122      	movs	r1, #34	; 0x22
 8020b88:	6878      	ldr	r0, [r7, #4]
 8020b8a:	f019 fb51 	bl	803a230 <strchr>
 8020b8e:	61b8      	str	r0, [r7, #24]
	if(!data_field_start_ptr){
 8020b90:	69bb      	ldr	r3, [r7, #24]
 8020b92:	2b00      	cmp	r3, #0
 8020b94:	d104      	bne.n	8020ba0 <echo+0x2c>
		printf("Specify the text to be written in the file!\r\n");
 8020b96:	4822      	ldr	r0, [pc, #136]	; (8020c20 <echo+0xac>)
 8020b98:	f019 fb12 	bl	803a1c0 <puts>
		return FR_INVALID_NAME;
 8020b9c:	2306      	movs	r3, #6
 8020b9e:	e03a      	b.n	8020c16 <echo+0xa2>
	}

	data_field_end_ptr = strchr(data_field_start_ptr+1, '"');
 8020ba0:	69bb      	ldr	r3, [r7, #24]
 8020ba2:	3301      	adds	r3, #1
 8020ba4:	2122      	movs	r1, #34	; 0x22
 8020ba6:	4618      	mov	r0, r3
 8020ba8:	f019 fb42 	bl	803a230 <strchr>
 8020bac:	6178      	str	r0, [r7, #20]


	if(!data_field_end_ptr){
 8020bae:	697b      	ldr	r3, [r7, #20]
 8020bb0:	2b00      	cmp	r3, #0
 8020bb2:	d104      	bne.n	8020bbe <echo+0x4a>
		printf("Specify the text to be written in the file!\r\n");
 8020bb4:	481a      	ldr	r0, [pc, #104]	; (8020c20 <echo+0xac>)
 8020bb6:	f019 fb03 	bl	803a1c0 <puts>
		return FR_INVALID_NAME;
 8020bba:	2306      	movs	r3, #6
 8020bbc:	e02b      	b.n	8020c16 <echo+0xa2>
	}
	data_field_start_ptr++;
 8020bbe:	69bb      	ldr	r3, [r7, #24]
 8020bc0:	3301      	adds	r3, #1
 8020bc2:	61bb      	str	r3, [r7, #24]
	*data_field_end_ptr = '\0';
 8020bc4:	697b      	ldr	r3, [r7, #20]
 8020bc6:	2200      	movs	r2, #0
 8020bc8:	701a      	strb	r2, [r3, #0]

	file_name_ptr = strstr(data_field_end_ptr+1, ">>");
 8020bca:	697b      	ldr	r3, [r7, #20]
 8020bcc:	3301      	adds	r3, #1
 8020bce:	4915      	ldr	r1, [pc, #84]	; (8020c24 <echo+0xb0>)
 8020bd0:	4618      	mov	r0, r3
 8020bd2:	f019 fb4e 	bl	803a272 <strstr>
 8020bd6:	6138      	str	r0, [r7, #16]
	if(!file_name_ptr){
 8020bd8:	693b      	ldr	r3, [r7, #16]
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	d104      	bne.n	8020be8 <echo+0x74>
		printf("Specify the filename to be written in the file!\r\n");
 8020bde:	4812      	ldr	r0, [pc, #72]	; (8020c28 <echo+0xb4>)
 8020be0:	f019 faee 	bl	803a1c0 <puts>
		return FR_INVALID_NAME;
 8020be4:	2306      	movs	r3, #6
 8020be6:	e016      	b.n	8020c16 <echo+0xa2>
	}

	uint8_t filename_position = find_filename_argument(file_name_ptr+2);
 8020be8:	693b      	ldr	r3, [r7, #16]
 8020bea:	3302      	adds	r3, #2
 8020bec:	4618      	mov	r0, r3
 8020bee:	f000 f81f 	bl	8020c30 <find_filename_argument>
 8020bf2:	4603      	mov	r3, r0
 8020bf4:	73fb      	strb	r3, [r7, #15]
	if(filename_position == ARG_ERR){
		printf("Specify the filename to be written in the file!\r\n");
		return FR_INVALID_NAME;
	}

	file_name_ptr = file_name_ptr + filename_position + 2;
 8020bf6:	7bfb      	ldrb	r3, [r7, #15]
 8020bf8:	3302      	adds	r3, #2
 8020bfa:	693a      	ldr	r2, [r7, #16]
 8020bfc:	4413      	add	r3, r2
 8020bfe:	613b      	str	r3, [r7, #16]

	fresult = write_file(file_name_ptr, data_field_start_ptr, FA_OPEN_ALWAYS | FA_WRITE);
 8020c00:	2212      	movs	r2, #18
 8020c02:	69b9      	ldr	r1, [r7, #24]
 8020c04:	6938      	ldr	r0, [r7, #16]
 8020c06:	f7ff fec3 	bl	8020990 <write_file>
 8020c0a:	4603      	mov	r3, r0
 8020c0c:	461a      	mov	r2, r3
 8020c0e:	4b07      	ldr	r3, [pc, #28]	; (8020c2c <echo+0xb8>)
 8020c10:	701a      	strb	r2, [r3, #0]
	return fresult;
 8020c12:	4b06      	ldr	r3, [pc, #24]	; (8020c2c <echo+0xb8>)
 8020c14:	781b      	ldrb	r3, [r3, #0]

}
 8020c16:	4618      	mov	r0, r3
 8020c18:	3720      	adds	r7, #32
 8020c1a:	46bd      	mov	sp, r7
 8020c1c:	bd80      	pop	{r7, pc}
 8020c1e:	bf00      	nop
 8020c20:	0803b578 	.word	0x0803b578
 8020c24:	0803b5a8 	.word	0x0803b5a8
 8020c28:	0803b5ac 	.word	0x0803b5ac
 8020c2c:	240001d8 	.word	0x240001d8

08020c30 <find_filename_argument>:

int8_t find_filename_argument(char* command)
{
 8020c30:	b580      	push	{r7, lr}
 8020c32:	b086      	sub	sp, #24
 8020c34:	af00      	add	r7, sp, #0
 8020c36:	6078      	str	r0, [r7, #4]
	char* args_start = command;
 8020c38:	687b      	ldr	r3, [r7, #4]
 8020c3a:	613b      	str	r3, [r7, #16]
	uint8_t len = strlen(args_start);
 8020c3c:	6938      	ldr	r0, [r7, #16]
 8020c3e:	f7ff fb71 	bl	8020324 <strlen>
 8020c42:	4603      	mov	r3, r0
 8020c44:	73fb      	strb	r3, [r7, #15]

	int8_t i = 0;
 8020c46:	2300      	movs	r3, #0
 8020c48:	75fb      	strb	r3, [r7, #23]

	if(len == 0){
 8020c4a:	7bfb      	ldrb	r3, [r7, #15]
 8020c4c:	2b00      	cmp	r3, #0
 8020c4e:	d102      	bne.n	8020c56 <find_filename_argument+0x26>
		return ARG_ERR;
 8020c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020c54:	e019      	b.n	8020c8a <find_filename_argument+0x5a>
	}

	for(i = 0; i <= len; i ++)
 8020c56:	2300      	movs	r3, #0
 8020c58:	75fb      	strb	r3, [r7, #23]
 8020c5a:	e00f      	b.n	8020c7c <find_filename_argument+0x4c>
	{
		if(args_start[i] != ' ')
 8020c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020c60:	693a      	ldr	r2, [r7, #16]
 8020c62:	4413      	add	r3, r2
 8020c64:	781b      	ldrb	r3, [r3, #0]
 8020c66:	2b20      	cmp	r3, #32
 8020c68:	d002      	beq.n	8020c70 <find_filename_argument+0x40>
		{
			return i;
 8020c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020c6e:	e00c      	b.n	8020c8a <find_filename_argument+0x5a>
	for(i = 0; i <= len; i ++)
 8020c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020c74:	b2db      	uxtb	r3, r3
 8020c76:	3301      	adds	r3, #1
 8020c78:	b2db      	uxtb	r3, r3
 8020c7a:	75fb      	strb	r3, [r7, #23]
 8020c7c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8020c80:	7bfb      	ldrb	r3, [r7, #15]
 8020c82:	429a      	cmp	r2, r3
 8020c84:	ddea      	ble.n	8020c5c <find_filename_argument+0x2c>
			break;
		}
	}

	return ARG_ERR;
 8020c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8020c8a:	4618      	mov	r0, r3
 8020c8c:	3718      	adds	r7, #24
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	bd80      	pop	{r7, pc}
	...

08020c94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8020c94:	b480      	push	{r7}
 8020c96:	b085      	sub	sp, #20
 8020c98:	af00      	add	r7, sp, #0
 8020c9a:	60f8      	str	r0, [r7, #12]
 8020c9c:	60b9      	str	r1, [r7, #8]
 8020c9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8020ca0:	68fb      	ldr	r3, [r7, #12]
 8020ca2:	4a07      	ldr	r2, [pc, #28]	; (8020cc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8020ca4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8020ca6:	68bb      	ldr	r3, [r7, #8]
 8020ca8:	4a06      	ldr	r2, [pc, #24]	; (8020cc4 <vApplicationGetIdleTaskMemory+0x30>)
 8020caa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	2280      	movs	r2, #128	; 0x80
 8020cb0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8020cb2:	bf00      	nop
 8020cb4:	3714      	adds	r7, #20
 8020cb6:	46bd      	mov	sp, r7
 8020cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cbc:	4770      	bx	lr
 8020cbe:	bf00      	nop
 8020cc0:	240001e4 	.word	0x240001e4
 8020cc4:	24000238 	.word	0x24000238

08020cc8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8020cc8:	b480      	push	{r7}
 8020cca:	b085      	sub	sp, #20
 8020ccc:	af00      	add	r7, sp, #0
 8020cce:	60f8      	str	r0, [r7, #12]
 8020cd0:	60b9      	str	r1, [r7, #8]
 8020cd2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8020cd4:	68fb      	ldr	r3, [r7, #12]
 8020cd6:	4a07      	ldr	r2, [pc, #28]	; (8020cf4 <vApplicationGetTimerTaskMemory+0x2c>)
 8020cd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8020cda:	68bb      	ldr	r3, [r7, #8]
 8020cdc:	4a06      	ldr	r2, [pc, #24]	; (8020cf8 <vApplicationGetTimerTaskMemory+0x30>)
 8020cde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8020ce0:	687b      	ldr	r3, [r7, #4]
 8020ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8020ce6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8020ce8:	bf00      	nop
 8020cea:	3714      	adds	r7, #20
 8020cec:	46bd      	mov	sp, r7
 8020cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cf2:	4770      	bx	lr
 8020cf4:	24000438 	.word	0x24000438
 8020cf8:	2400048c 	.word	0x2400048c

08020cfc <_write>:

uint8_t UART_TX_BUFFER[UART_TX_BUFFER_LENGTH];
uint8_t UART_RX_BUFFER[UART_RX_BUFFER_LENGTH];

int _write(int file, uint8_t *data, int len)
{
 8020cfc:	b580      	push	{r7, lr}
 8020cfe:	b086      	sub	sp, #24
 8020d00:	af00      	add	r7, sp, #0
 8020d02:	60f8      	str	r0, [r7, #12]
 8020d04:	60b9      	str	r1, [r7, #8]
 8020d06:	607a      	str	r2, [r7, #4]

   /* Lock Semaphore to ensure print buffer is used just by one thread. */
   osSemaphoreWait(UART_TX_SemaphoreHandle, osWaitForever);
 8020d08:	4b0f      	ldr	r3, [pc, #60]	; (8020d48 <_write+0x4c>)
 8020d0a:	681b      	ldr	r3, [r3, #0]
 8020d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020d10:	4618      	mov	r0, r3
 8020d12:	f015 fa17 	bl	8036144 <osSemaphoreWait>

   memcpy(UART_TX_BUFFER, data, len);
 8020d16:	687b      	ldr	r3, [r7, #4]
 8020d18:	461a      	mov	r2, r3
 8020d1a:	68b9      	ldr	r1, [r7, #8]
 8020d1c:	480b      	ldr	r0, [pc, #44]	; (8020d4c <_write+0x50>)
 8020d1e:	f019 f8d3 	bl	8039ec8 <memcpy>

   HAL_StatusTypeDef status =
      HAL_UART_Transmit_DMA(&huart3, (uint8_t*)UART_TX_BUFFER, len);
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	b29b      	uxth	r3, r3
 8020d26:	461a      	mov	r2, r3
 8020d28:	4908      	ldr	r1, [pc, #32]	; (8020d4c <_write+0x50>)
 8020d2a:	4809      	ldr	r0, [pc, #36]	; (8020d50 <_write+0x54>)
 8020d2c:	f008 fd0e 	bl	802974c <HAL_UART_Transmit_DMA>
 8020d30:	4603      	mov	r3, r0
 8020d32:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8020d34:	7dfb      	ldrb	r3, [r7, #23]
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d101      	bne.n	8020d3e <_write+0x42>
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	e000      	b.n	8020d40 <_write+0x44>
 8020d3e:	2300      	movs	r3, #0
}
 8020d40:	4618      	mov	r0, r3
 8020d42:	3718      	adds	r7, #24
 8020d44:	46bd      	mov	sp, r7
 8020d46:	bd80      	pop	{r7, pc}
 8020d48:	24000a1c 	.word	0x24000a1c
 8020d4c:	24000a20 	.word	0x24000a20
 8020d50:	2400088c 	.word	0x2400088c

08020d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020d54:	b5b0      	push	{r4, r5, r7, lr}
 8020d56:	b09a      	sub	sp, #104	; 0x68
 8020d58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020d5a:	f001 f951 	bl	8022000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020d5e:	f000 f86f 	bl	8020e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020d62:	f000 f951 	bl	8021008 <MX_GPIO_Init>
  MX_FATFS_Init();
 8020d66:	f00b fdab 	bl	802c8c0 <MX_FATFS_Init>
  MX_DMA_Init();
 8020d6a:	f000 f925 	bl	8020fb8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8020d6e:	f000 f8d7 	bl	8020f20 <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of UART_TX_Semaphore */
  osSemaphoreDef(UART_TX_Semaphore);
 8020d72:	2300      	movs	r3, #0
 8020d74:	663b      	str	r3, [r7, #96]	; 0x60
 8020d76:	2300      	movs	r3, #0
 8020d78:	667b      	str	r3, [r7, #100]	; 0x64
  UART_TX_SemaphoreHandle = osSemaphoreCreate(osSemaphore(UART_TX_Semaphore), 1);
 8020d7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020d7e:	2101      	movs	r1, #1
 8020d80:	4618      	mov	r0, r3
 8020d82:	f015 f9ac 	bl	80360de <osSemaphoreCreate>
 8020d86:	4603      	mov	r3, r0
 8020d88:	4a24      	ldr	r2, [pc, #144]	; (8020e1c <main+0xc8>)
 8020d8a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer1 */
  osTimerDef(Timer1, Timer1_Callback);
 8020d8c:	4b24      	ldr	r3, [pc, #144]	; (8020e20 <main+0xcc>)
 8020d8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8020d90:	2300      	movs	r3, #0
 8020d92:	65fb      	str	r3, [r7, #92]	; 0x5c
  Timer1Handle = osTimerCreate(osTimer(Timer1), osTimerPeriodic, NULL);
 8020d94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020d98:	2200      	movs	r2, #0
 8020d9a:	2101      	movs	r1, #1
 8020d9c:	4618      	mov	r0, r3
 8020d9e:	f015 f8bb 	bl	8035f18 <osTimerCreate>
 8020da2:	4603      	mov	r3, r0
 8020da4:	4a1f      	ldr	r2, [pc, #124]	; (8020e24 <main+0xd0>)
 8020da6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8020da8:	4b1f      	ldr	r3, [pc, #124]	; (8020e28 <main+0xd4>)
 8020daa:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8020dae:	461d      	mov	r5, r3
 8020db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020db4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8020db8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8020dbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8020dc0:	2100      	movs	r1, #0
 8020dc2:	4618      	mov	r0, r3
 8020dc4:	f015 f847 	bl	8035e56 <osThreadCreate>
 8020dc8:	4603      	mov	r3, r0
 8020dca:	4a18      	ldr	r2, [pc, #96]	; (8020e2c <main+0xd8>)
 8020dcc:	6013      	str	r3, [r2, #0]

  /* definition and creation of USBFileSystemTa */
  osThreadDef(USBFileSystemTa, USBFileSystemTask_Start, osPriorityNormal, 0, 128);
 8020dce:	4b18      	ldr	r3, [pc, #96]	; (8020e30 <main+0xdc>)
 8020dd0:	f107 0420 	add.w	r4, r7, #32
 8020dd4:	461d      	mov	r5, r3
 8020dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020dda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8020dde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USBFileSystemTaHandle = osThreadCreate(osThread(USBFileSystemTa), NULL);
 8020de2:	f107 0320 	add.w	r3, r7, #32
 8020de6:	2100      	movs	r1, #0
 8020de8:	4618      	mov	r0, r3
 8020dea:	f015 f834 	bl	8035e56 <osThreadCreate>
 8020dee:	4603      	mov	r3, r0
 8020df0:	4a10      	ldr	r2, [pc, #64]	; (8020e34 <main+0xe0>)
 8020df2:	6013      	str	r3, [r2, #0]

  /* definition and creation of ConsoleTask */
  osThreadDef(ConsoleTask, ConsoleTask_Start, osPriorityNormal, 0, 1024);
 8020df4:	4b10      	ldr	r3, [pc, #64]	; (8020e38 <main+0xe4>)
 8020df6:	1d3c      	adds	r4, r7, #4
 8020df8:	461d      	mov	r5, r3
 8020dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020dfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8020e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ConsoleTaskHandle = osThreadCreate(osThread(ConsoleTask), NULL);
 8020e06:	1d3b      	adds	r3, r7, #4
 8020e08:	2100      	movs	r1, #0
 8020e0a:	4618      	mov	r0, r3
 8020e0c:	f015 f823 	bl	8035e56 <osThreadCreate>
 8020e10:	4603      	mov	r3, r0
 8020e12:	4a0a      	ldr	r2, [pc, #40]	; (8020e3c <main+0xe8>)
 8020e14:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8020e16:	f015 f817 	bl	8035e48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8020e1a:	e7fe      	b.n	8020e1a <main+0xc6>
 8020e1c:	24000a1c 	.word	0x24000a1c
 8020e20:	08021a29 	.word	0x08021a29
 8020e24:	24000a18 	.word	0x24000a18
 8020e28:	0803b608 	.word	0x0803b608
 8020e2c:	24000a0c 	.word	0x24000a0c
 8020e30:	0803b624 	.word	0x0803b624
 8020e34:	24000a10 	.word	0x24000a10
 8020e38:	0803b640 	.word	0x0803b640
 8020e3c:	24000a14 	.word	0x24000a14

08020e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020e40:	b580      	push	{r7, lr}
 8020e42:	b09c      	sub	sp, #112	; 0x70
 8020e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e4a:	224c      	movs	r2, #76	; 0x4c
 8020e4c:	2100      	movs	r1, #0
 8020e4e:	4618      	mov	r0, r3
 8020e50:	f019 f848 	bl	8039ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020e54:	1d3b      	adds	r3, r7, #4
 8020e56:	2220      	movs	r2, #32
 8020e58:	2100      	movs	r1, #0
 8020e5a:	4618      	mov	r0, r3
 8020e5c:	f019 f842 	bl	8039ee4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8020e60:	2002      	movs	r0, #2
 8020e62:	f005 fe4d 	bl	8026b00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8020e66:	2300      	movs	r3, #0
 8020e68:	603b      	str	r3, [r7, #0]
 8020e6a:	4b2c      	ldr	r3, [pc, #176]	; (8020f1c <SystemClock_Config+0xdc>)
 8020e6c:	699b      	ldr	r3, [r3, #24]
 8020e6e:	4a2b      	ldr	r2, [pc, #172]	; (8020f1c <SystemClock_Config+0xdc>)
 8020e70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020e74:	6193      	str	r3, [r2, #24]
 8020e76:	4b29      	ldr	r3, [pc, #164]	; (8020f1c <SystemClock_Config+0xdc>)
 8020e78:	699b      	ldr	r3, [r3, #24]
 8020e7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020e7e:	603b      	str	r3, [r7, #0]
 8020e80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8020e82:	bf00      	nop
 8020e84:	4b25      	ldr	r3, [pc, #148]	; (8020f1c <SystemClock_Config+0xdc>)
 8020e86:	699b      	ldr	r3, [r3, #24]
 8020e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8020e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020e90:	d1f8      	bne.n	8020e84 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8020e92:	2321      	movs	r3, #33	; 0x21
 8020e94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8020e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8020e9c:	2301      	movs	r3, #1
 8020e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020ea0:	2302      	movs	r3, #2
 8020ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020ea4:	2302      	movs	r3, #2
 8020ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8020ea8:	2304      	movs	r3, #4
 8020eaa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8020eac:	f240 1313 	movw	r3, #275	; 0x113
 8020eb0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8020eb2:	2301      	movs	r3, #1
 8020eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8020eb6:	2304      	movs	r3, #4
 8020eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8020eba:	2302      	movs	r3, #2
 8020ebc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8020ebe:	2304      	movs	r3, #4
 8020ec0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8020ec2:	2300      	movs	r3, #0
 8020ec4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8020ec6:	2300      	movs	r3, #0
 8020ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ece:	4618      	mov	r0, r3
 8020ed0:	f005 fe60 	bl	8026b94 <HAL_RCC_OscConfig>
 8020ed4:	4603      	mov	r3, r0
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	d001      	beq.n	8020ede <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8020eda:	f000 fdc1 	bl	8021a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020ede:	233f      	movs	r3, #63	; 0x3f
 8020ee0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020ee2:	2303      	movs	r3, #3
 8020ee4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8020ee6:	2300      	movs	r3, #0
 8020ee8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8020eea:	2308      	movs	r3, #8
 8020eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8020eee:	2340      	movs	r3, #64	; 0x40
 8020ef0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8020ef2:	2340      	movs	r3, #64	; 0x40
 8020ef4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8020ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020efa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8020efc:	2340      	movs	r3, #64	; 0x40
 8020efe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8020f00:	1d3b      	adds	r3, r7, #4
 8020f02:	2103      	movs	r1, #3
 8020f04:	4618      	mov	r0, r3
 8020f06:	f006 f9f3 	bl	80272f0 <HAL_RCC_ClockConfig>
 8020f0a:	4603      	mov	r3, r0
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	d001      	beq.n	8020f14 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8020f10:	f000 fda6 	bl	8021a60 <Error_Handler>
  }
}
 8020f14:	bf00      	nop
 8020f16:	3770      	adds	r7, #112	; 0x70
 8020f18:	46bd      	mov	sp, r7
 8020f1a:	bd80      	pop	{r7, pc}
 8020f1c:	58024800 	.word	0x58024800

08020f20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8020f20:	b580      	push	{r7, lr}
 8020f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8020f24:	4b22      	ldr	r3, [pc, #136]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f26:	4a23      	ldr	r2, [pc, #140]	; (8020fb4 <MX_USART3_UART_Init+0x94>)
 8020f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8020f2a:	4b21      	ldr	r3, [pc, #132]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8020f32:	4b1f      	ldr	r3, [pc, #124]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f34:	2200      	movs	r2, #0
 8020f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8020f38:	4b1d      	ldr	r3, [pc, #116]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f3a:	2200      	movs	r2, #0
 8020f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8020f3e:	4b1c      	ldr	r3, [pc, #112]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f40:	2200      	movs	r2, #0
 8020f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8020f44:	4b1a      	ldr	r3, [pc, #104]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f46:	220c      	movs	r2, #12
 8020f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020f4a:	4b19      	ldr	r3, [pc, #100]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f4c:	2200      	movs	r2, #0
 8020f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8020f50:	4b17      	ldr	r3, [pc, #92]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f52:	2200      	movs	r2, #0
 8020f54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020f56:	4b16      	ldr	r3, [pc, #88]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f58:	2200      	movs	r2, #0
 8020f5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8020f5c:	4b14      	ldr	r3, [pc, #80]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f5e:	2200      	movs	r2, #0
 8020f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020f62:	4b13      	ldr	r3, [pc, #76]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f64:	2200      	movs	r2, #0
 8020f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8020f68:	4811      	ldr	r0, [pc, #68]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f6a:	f008 fb9f 	bl	80296ac <HAL_UART_Init>
 8020f6e:	4603      	mov	r3, r0
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d001      	beq.n	8020f78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8020f74:	f000 fd74 	bl	8021a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020f78:	2100      	movs	r1, #0
 8020f7a:	480d      	ldr	r0, [pc, #52]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f7c:	f00a fb8e 	bl	802b69c <HAL_UARTEx_SetTxFifoThreshold>
 8020f80:	4603      	mov	r3, r0
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	d001      	beq.n	8020f8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8020f86:	f000 fd6b 	bl	8021a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020f8a:	2100      	movs	r1, #0
 8020f8c:	4808      	ldr	r0, [pc, #32]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f8e:	f00a fbc3 	bl	802b718 <HAL_UARTEx_SetRxFifoThreshold>
 8020f92:	4603      	mov	r3, r0
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	d001      	beq.n	8020f9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8020f98:	f000 fd62 	bl	8021a60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8020f9c:	4804      	ldr	r0, [pc, #16]	; (8020fb0 <MX_USART3_UART_Init+0x90>)
 8020f9e:	f00a fb44 	bl	802b62a <HAL_UARTEx_DisableFifoMode>
 8020fa2:	4603      	mov	r3, r0
 8020fa4:	2b00      	cmp	r3, #0
 8020fa6:	d001      	beq.n	8020fac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8020fa8:	f000 fd5a 	bl	8021a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8020fac:	bf00      	nop
 8020fae:	bd80      	pop	{r7, pc}
 8020fb0:	2400088c 	.word	0x2400088c
 8020fb4:	40004800 	.word	0x40004800

08020fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8020fb8:	b580      	push	{r7, lr}
 8020fba:	b082      	sub	sp, #8
 8020fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020fbe:	4b11      	ldr	r3, [pc, #68]	; (8021004 <MX_DMA_Init+0x4c>)
 8020fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8020fc4:	4a0f      	ldr	r2, [pc, #60]	; (8021004 <MX_DMA_Init+0x4c>)
 8020fc6:	f043 0301 	orr.w	r3, r3, #1
 8020fca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8020fce:	4b0d      	ldr	r3, [pc, #52]	; (8021004 <MX_DMA_Init+0x4c>)
 8020fd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8020fd4:	f003 0301 	and.w	r3, r3, #1
 8020fd8:	607b      	str	r3, [r7, #4]
 8020fda:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8020fdc:	2200      	movs	r2, #0
 8020fde:	2105      	movs	r1, #5
 8020fe0:	200b      	movs	r0, #11
 8020fe2:	f001 f945 	bl	8022270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8020fe6:	200b      	movs	r0, #11
 8020fe8:	f001 f95c 	bl	80222a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8020fec:	2200      	movs	r2, #0
 8020fee:	2105      	movs	r1, #5
 8020ff0:	200c      	movs	r0, #12
 8020ff2:	f001 f93d 	bl	8022270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8020ff6:	200c      	movs	r0, #12
 8020ff8:	f001 f954 	bl	80222a4 <HAL_NVIC_EnableIRQ>

}
 8020ffc:	bf00      	nop
 8020ffe:	3708      	adds	r7, #8
 8021000:	46bd      	mov	sp, r7
 8021002:	bd80      	pop	{r7, pc}
 8021004:	58024400 	.word	0x58024400

08021008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8021008:	b580      	push	{r7, lr}
 802100a:	b08c      	sub	sp, #48	; 0x30
 802100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802100e:	f107 031c 	add.w	r3, r7, #28
 8021012:	2200      	movs	r2, #0
 8021014:	601a      	str	r2, [r3, #0]
 8021016:	605a      	str	r2, [r3, #4]
 8021018:	609a      	str	r2, [r3, #8]
 802101a:	60da      	str	r2, [r3, #12]
 802101c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802101e:	4b83      	ldr	r3, [pc, #524]	; (802122c <MX_GPIO_Init+0x224>)
 8021020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021024:	4a81      	ldr	r2, [pc, #516]	; (802122c <MX_GPIO_Init+0x224>)
 8021026:	f043 0304 	orr.w	r3, r3, #4
 802102a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802102e:	4b7f      	ldr	r3, [pc, #508]	; (802122c <MX_GPIO_Init+0x224>)
 8021030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021034:	f003 0304 	and.w	r3, r3, #4
 8021038:	61bb      	str	r3, [r7, #24]
 802103a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802103c:	4b7b      	ldr	r3, [pc, #492]	; (802122c <MX_GPIO_Init+0x224>)
 802103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021042:	4a7a      	ldr	r2, [pc, #488]	; (802122c <MX_GPIO_Init+0x224>)
 8021044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802104c:	4b77      	ldr	r3, [pc, #476]	; (802122c <MX_GPIO_Init+0x224>)
 802104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021056:	617b      	str	r3, [r7, #20]
 8021058:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802105a:	4b74      	ldr	r3, [pc, #464]	; (802122c <MX_GPIO_Init+0x224>)
 802105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021060:	4a72      	ldr	r2, [pc, #456]	; (802122c <MX_GPIO_Init+0x224>)
 8021062:	f043 0301 	orr.w	r3, r3, #1
 8021066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802106a:	4b70      	ldr	r3, [pc, #448]	; (802122c <MX_GPIO_Init+0x224>)
 802106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021070:	f003 0301 	and.w	r3, r3, #1
 8021074:	613b      	str	r3, [r7, #16]
 8021076:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8021078:	4b6c      	ldr	r3, [pc, #432]	; (802122c <MX_GPIO_Init+0x224>)
 802107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802107e:	4a6b      	ldr	r2, [pc, #428]	; (802122c <MX_GPIO_Init+0x224>)
 8021080:	f043 0302 	orr.w	r3, r3, #2
 8021084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8021088:	4b68      	ldr	r3, [pc, #416]	; (802122c <MX_GPIO_Init+0x224>)
 802108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802108e:	f003 0302 	and.w	r3, r3, #2
 8021092:	60fb      	str	r3, [r7, #12]
 8021094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8021096:	4b65      	ldr	r3, [pc, #404]	; (802122c <MX_GPIO_Init+0x224>)
 8021098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802109c:	4a63      	ldr	r2, [pc, #396]	; (802122c <MX_GPIO_Init+0x224>)
 802109e:	f043 0308 	orr.w	r3, r3, #8
 80210a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80210a6:	4b61      	ldr	r3, [pc, #388]	; (802122c <MX_GPIO_Init+0x224>)
 80210a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80210ac:	f003 0308 	and.w	r3, r3, #8
 80210b0:	60bb      	str	r3, [r7, #8]
 80210b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80210b4:	4b5d      	ldr	r3, [pc, #372]	; (802122c <MX_GPIO_Init+0x224>)
 80210b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80210ba:	4a5c      	ldr	r2, [pc, #368]	; (802122c <MX_GPIO_Init+0x224>)
 80210bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80210c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80210c4:	4b59      	ldr	r3, [pc, #356]	; (802122c <MX_GPIO_Init+0x224>)
 80210c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80210ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80210ce:	607b      	str	r3, [r7, #4]
 80210d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80210d2:	4b56      	ldr	r3, [pc, #344]	; (802122c <MX_GPIO_Init+0x224>)
 80210d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80210d8:	4a54      	ldr	r2, [pc, #336]	; (802122c <MX_GPIO_Init+0x224>)
 80210da:	f043 0310 	orr.w	r3, r3, #16
 80210de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80210e2:	4b52      	ldr	r3, [pc, #328]	; (802122c <MX_GPIO_Init+0x224>)
 80210e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80210e8:	f003 0310 	and.w	r3, r3, #16
 80210ec:	603b      	str	r3, [r7, #0]
 80210ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80210f0:	2200      	movs	r2, #0
 80210f2:	f244 0101 	movw	r1, #16385	; 0x4001
 80210f6:	484e      	ldr	r0, [pc, #312]	; (8021230 <MX_GPIO_Init+0x228>)
 80210f8:	f004 f8c4 	bl	8025284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80210fc:	2200      	movs	r2, #0
 80210fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021102:	484c      	ldr	r0, [pc, #304]	; (8021234 <MX_GPIO_Init+0x22c>)
 8021104:	f004 f8be 	bl	8025284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, USB_VBUS_Pin|LED_YELLOW_Pin, GPIO_PIN_SET);
 8021108:	2201      	movs	r2, #1
 802110a:	2103      	movs	r1, #3
 802110c:	484a      	ldr	r0, [pc, #296]	; (8021238 <MX_GPIO_Init+0x230>)
 802110e:	f004 f8b9 	bl	8025284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8021112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021118:	2300      	movs	r3, #0
 802111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802111c:	2300      	movs	r3, #0
 802111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8021120:	f107 031c 	add.w	r3, r7, #28
 8021124:	4619      	mov	r1, r3
 8021126:	4845      	ldr	r0, [pc, #276]	; (802123c <MX_GPIO_Init+0x234>)
 8021128:	f003 ff04 	bl	8024f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 802112c:	2332      	movs	r3, #50	; 0x32
 802112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021130:	2302      	movs	r3, #2
 8021132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021134:	2300      	movs	r3, #0
 8021136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021138:	2300      	movs	r3, #0
 802113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 802113c:	230b      	movs	r3, #11
 802113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021140:	f107 031c 	add.w	r3, r7, #28
 8021144:	4619      	mov	r1, r3
 8021146:	483d      	ldr	r0, [pc, #244]	; (802123c <MX_GPIO_Init+0x234>)
 8021148:	f003 fef4 	bl	8024f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 802114c:	2386      	movs	r3, #134	; 0x86
 802114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021150:	2302      	movs	r3, #2
 8021152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021154:	2300      	movs	r3, #0
 8021156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021158:	2300      	movs	r3, #0
 802115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 802115c:	230b      	movs	r3, #11
 802115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021160:	f107 031c 	add.w	r3, r7, #28
 8021164:	4619      	mov	r1, r3
 8021166:	4836      	ldr	r0, [pc, #216]	; (8021240 <MX_GPIO_Init+0x238>)
 8021168:	f003 fee4 	bl	8024f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 802116c:	f244 0301 	movw	r3, #16385	; 0x4001
 8021170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021172:	2301      	movs	r3, #1
 8021174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021176:	2300      	movs	r3, #0
 8021178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802117a:	2300      	movs	r3, #0
 802117c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802117e:	f107 031c 	add.w	r3, r7, #28
 8021182:	4619      	mov	r1, r3
 8021184:	482a      	ldr	r0, [pc, #168]	; (8021230 <MX_GPIO_Init+0x228>)
 8021186:	f003 fed5 	bl	8024f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 802118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021190:	2302      	movs	r3, #2
 8021192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021194:	2300      	movs	r3, #0
 8021196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021198:	2300      	movs	r3, #0
 802119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 802119c:	230b      	movs	r3, #11
 802119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80211a0:	f107 031c 	add.w	r3, r7, #28
 80211a4:	4619      	mov	r1, r3
 80211a6:	4822      	ldr	r0, [pc, #136]	; (8021230 <MX_GPIO_Init+0x228>)
 80211a8:	f003 fec4 	bl	8024f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80211ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80211b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80211b2:	2301      	movs	r3, #1
 80211b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211b6:	2300      	movs	r3, #0
 80211b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80211ba:	2300      	movs	r3, #0
 80211bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80211be:	f107 031c 	add.w	r3, r7, #28
 80211c2:	4619      	mov	r1, r3
 80211c4:	481b      	ldr	r0, [pc, #108]	; (8021234 <MX_GPIO_Init+0x22c>)
 80211c6:	f003 feb5 	bl	8024f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80211ca:	2380      	movs	r3, #128	; 0x80
 80211cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80211ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80211d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211d4:	2300      	movs	r3, #0
 80211d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80211d8:	f107 031c 	add.w	r3, r7, #28
 80211dc:	4619      	mov	r1, r3
 80211de:	4819      	ldr	r0, [pc, #100]	; (8021244 <MX_GPIO_Init+0x23c>)
 80211e0:	f003 fea8 	bl	8024f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80211e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80211e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80211ea:	2302      	movs	r3, #2
 80211ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211ee:	2300      	movs	r3, #0
 80211f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80211f2:	2300      	movs	r3, #0
 80211f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80211f6:	230b      	movs	r3, #11
 80211f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80211fa:	f107 031c 	add.w	r3, r7, #28
 80211fe:	4619      	mov	r1, r3
 8021200:	4810      	ldr	r0, [pc, #64]	; (8021244 <MX_GPIO_Init+0x23c>)
 8021202:	f003 fe97 	bl	8024f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_VBUS_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin|LED_YELLOW_Pin;
 8021206:	2303      	movs	r3, #3
 8021208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802120a:	2301      	movs	r3, #1
 802120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802120e:	2300      	movs	r3, #0
 8021210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021212:	2300      	movs	r3, #0
 8021214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021216:	f107 031c 	add.w	r3, r7, #28
 802121a:	4619      	mov	r1, r3
 802121c:	4806      	ldr	r0, [pc, #24]	; (8021238 <MX_GPIO_Init+0x230>)
 802121e:	f003 fe89 	bl	8024f34 <HAL_GPIO_Init>

}
 8021222:	bf00      	nop
 8021224:	3730      	adds	r7, #48	; 0x30
 8021226:	46bd      	mov	sp, r7
 8021228:	bd80      	pop	{r7, pc}
 802122a:	bf00      	nop
 802122c:	58024400 	.word	0x58024400
 8021230:	58020400 	.word	0x58020400
 8021234:	58020c00 	.word	0x58020c00
 8021238:	58021000 	.word	0x58021000
 802123c:	58020800 	.word	0x58020800
 8021240:	58020000 	.word	0x58020000
 8021244:	58021800 	.word	0x58021800

08021248 <HAL_UART_TxCpltCallback>:
static size_t current_RX_buffer_position = 0;

char received_command[UART_RX_BUFFER_LENGTH];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8021248:	b580      	push	{r7, lr}
 802124a:	b082      	sub	sp, #8
 802124c:	af00      	add	r7, sp, #0
 802124e:	6078      	str	r0, [r7, #4]

	/* Release Semaphore to execute next print operation */
	osSemaphoreRelease(UART_TX_SemaphoreHandle);
 8021250:	4b06      	ldr	r3, [pc, #24]	; (802126c <HAL_UART_TxCpltCallback+0x24>)
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	4618      	mov	r0, r3
 8021256:	f014 ffc3 	bl	80361e0 <osSemaphoreRelease>
	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);
 802125a:	2101      	movs	r1, #1
 802125c:	4804      	ldr	r0, [pc, #16]	; (8021270 <HAL_UART_TxCpltCallback+0x28>)
 802125e:	f004 f82a 	bl	80252b6 <HAL_GPIO_TogglePin>
}
 8021262:	bf00      	nop
 8021264:	3708      	adds	r7, #8
 8021266:	46bd      	mov	sp, r7
 8021268:	bd80      	pop	{r7, pc}
 802126a:	bf00      	nop
 802126c:	24000a1c 	.word	0x24000a1c
 8021270:	58020400 	.word	0x58020400

08021274 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8021274:	b580      	push	{r7, lr}
 8021276:	b084      	sub	sp, #16
 8021278:	af00      	add	r7, sp, #0
 802127a:	6078      	str	r0, [r7, #4]
 802127c:	460b      	mov	r3, r1
 802127e:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);
 8021280:	2101      	movs	r1, #1
 8021282:	4883      	ldr	r0, [pc, #524]	; (8021490 <HAL_UARTEx_RxEventCallback+0x21c>)
 8021284:	f004 f817 	bl	80252b6 <HAL_GPIO_TogglePin>


	current_RX_buffer_position = Size;
 8021288:	887b      	ldrh	r3, [r7, #2]
 802128a:	4a82      	ldr	r2, [pc, #520]	; (8021494 <HAL_UARTEx_RxEventCallback+0x220>)
 802128c:	6013      	str	r3, [r2, #0]


	if(current_RX_buffer_position > old_RX_buffer_position){
 802128e:	4b81      	ldr	r3, [pc, #516]	; (8021494 <HAL_UARTEx_RxEventCallback+0x220>)
 8021290:	681a      	ldr	r2, [r3, #0]
 8021292:	4b81      	ldr	r3, [pc, #516]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 8021294:	681b      	ldr	r3, [r3, #0]
 8021296:	429a      	cmp	r2, r3
 8021298:	d917      	bls.n	80212ca <HAL_UARTEx_RxEventCallback+0x56>
	  memcpy(received_command, UART_RX_BUFFER+old_RX_buffer_position, current_RX_buffer_position - old_RX_buffer_position -1);
 802129a:	4b7f      	ldr	r3, [pc, #508]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	4a7f      	ldr	r2, [pc, #508]	; (802149c <HAL_UARTEx_RxEventCallback+0x228>)
 80212a0:	1899      	adds	r1, r3, r2
 80212a2:	4b7c      	ldr	r3, [pc, #496]	; (8021494 <HAL_UARTEx_RxEventCallback+0x220>)
 80212a4:	681a      	ldr	r2, [r3, #0]
 80212a6:	4b7c      	ldr	r3, [pc, #496]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 80212a8:	681b      	ldr	r3, [r3, #0]
 80212aa:	1ad3      	subs	r3, r2, r3
 80212ac:	3b01      	subs	r3, #1
 80212ae:	461a      	mov	r2, r3
 80212b0:	487b      	ldr	r0, [pc, #492]	; (80214a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80212b2:	f018 fe09 	bl	8039ec8 <memcpy>

	  received_command[current_RX_buffer_position - old_RX_buffer_position -1] = '\0';
 80212b6:	4b77      	ldr	r3, [pc, #476]	; (8021494 <HAL_UARTEx_RxEventCallback+0x220>)
 80212b8:	681a      	ldr	r2, [r3, #0]
 80212ba:	4b77      	ldr	r3, [pc, #476]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 80212bc:	681b      	ldr	r3, [r3, #0]
 80212be:	1ad3      	subs	r3, r2, r3
 80212c0:	3b01      	subs	r3, #1
 80212c2:	4a77      	ldr	r2, [pc, #476]	; (80214a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80212c4:	2100      	movs	r1, #0
 80212c6:	54d1      	strb	r1, [r2, r3]
 80212c8:	e01f      	b.n	802130a <HAL_UARTEx_RxEventCallback+0x96>
	}else{
	  memcpy(received_command, UART_RX_BUFFER+old_RX_buffer_position, UART_RX_BUFFER_LENGTH-old_RX_buffer_position);
 80212ca:	4b73      	ldr	r3, [pc, #460]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 80212cc:	681b      	ldr	r3, [r3, #0]
 80212ce:	4a73      	ldr	r2, [pc, #460]	; (802149c <HAL_UARTEx_RxEventCallback+0x228>)
 80212d0:	1899      	adds	r1, r3, r2
 80212d2:	4b71      	ldr	r3, [pc, #452]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 80212d4:	681b      	ldr	r3, [r3, #0]
 80212d6:	f1c3 0342 	rsb	r3, r3, #66	; 0x42
 80212da:	461a      	mov	r2, r3
 80212dc:	4870      	ldr	r0, [pc, #448]	; (80214a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80212de:	f018 fdf3 	bl	8039ec8 <memcpy>

	  memcpy(received_command+UART_RX_BUFFER_LENGTH-old_RX_buffer_position, UART_RX_BUFFER, Size-1);
 80212e2:	4b6d      	ldr	r3, [pc, #436]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 80212e4:	681b      	ldr	r3, [r3, #0]
 80212e6:	f1c3 0342 	rsb	r3, r3, #66	; 0x42
 80212ea:	4a6d      	ldr	r2, [pc, #436]	; (80214a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80212ec:	1898      	adds	r0, r3, r2
 80212ee:	887b      	ldrh	r3, [r7, #2]
 80212f0:	3b01      	subs	r3, #1
 80212f2:	461a      	mov	r2, r3
 80212f4:	4969      	ldr	r1, [pc, #420]	; (802149c <HAL_UARTEx_RxEventCallback+0x228>)
 80212f6:	f018 fde7 	bl	8039ec8 <memcpy>

	  received_command[UART_RX_BUFFER_LENGTH-old_RX_buffer_position + Size - 1] = '\0';
 80212fa:	887a      	ldrh	r2, [r7, #2]
 80212fc:	4b66      	ldr	r3, [pc, #408]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 80212fe:	681b      	ldr	r3, [r3, #0]
 8021300:	1ad3      	subs	r3, r2, r3
 8021302:	3341      	adds	r3, #65	; 0x41
 8021304:	4a66      	ldr	r2, [pc, #408]	; (80214a0 <HAL_UARTEx_RxEventCallback+0x22c>)
 8021306:	2100      	movs	r1, #0
 8021308:	54d1      	strb	r1, [r2, r3]
               * [   6   ]            | First block (len = N - old_pos) |
               * [   7   ]            |                                 |
               * [ N - 1 ]            |---------------------------------|
               */

	old_RX_buffer_position = current_RX_buffer_position;
 802130a:	4b62      	ldr	r3, [pc, #392]	; (8021494 <HAL_UARTEx_RxEventCallback+0x220>)
 802130c:	681b      	ldr	r3, [r3, #0]
 802130e:	4a62      	ldr	r2, [pc, #392]	; (8021498 <HAL_UARTEx_RxEventCallback+0x224>)
 8021310:	6013      	str	r3, [r2, #0]


	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_RX_BUFFER, UART_RX_BUFFER_LENGTH);
 8021312:	2242      	movs	r2, #66	; 0x42
 8021314:	4961      	ldr	r1, [pc, #388]	; (802149c <HAL_UARTEx_RxEventCallback+0x228>)
 8021316:	4863      	ldr	r0, [pc, #396]	; (80214a4 <HAL_UARTEx_RxEventCallback+0x230>)
 8021318:	f00a fa3c 	bl	802b794 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 802131c:	4b62      	ldr	r3, [pc, #392]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802131e:	681b      	ldr	r3, [r3, #0]
 8021320:	4a62      	ldr	r2, [pc, #392]	; (80214ac <HAL_UARTEx_RxEventCallback+0x238>)
 8021322:	4293      	cmp	r3, r2
 8021324:	d04a      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021326:	4b60      	ldr	r3, [pc, #384]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021328:	681b      	ldr	r3, [r3, #0]
 802132a:	4a61      	ldr	r2, [pc, #388]	; (80214b0 <HAL_UARTEx_RxEventCallback+0x23c>)
 802132c:	4293      	cmp	r3, r2
 802132e:	d045      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021330:	4b5d      	ldr	r3, [pc, #372]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021332:	681b      	ldr	r3, [r3, #0]
 8021334:	4a5f      	ldr	r2, [pc, #380]	; (80214b4 <HAL_UARTEx_RxEventCallback+0x240>)
 8021336:	4293      	cmp	r3, r2
 8021338:	d040      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 802133a:	4b5b      	ldr	r3, [pc, #364]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802133c:	681b      	ldr	r3, [r3, #0]
 802133e:	4a5e      	ldr	r2, [pc, #376]	; (80214b8 <HAL_UARTEx_RxEventCallback+0x244>)
 8021340:	4293      	cmp	r3, r2
 8021342:	d03b      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021344:	4b58      	ldr	r3, [pc, #352]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021346:	681b      	ldr	r3, [r3, #0]
 8021348:	4a5c      	ldr	r2, [pc, #368]	; (80214bc <HAL_UARTEx_RxEventCallback+0x248>)
 802134a:	4293      	cmp	r3, r2
 802134c:	d036      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 802134e:	4b56      	ldr	r3, [pc, #344]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021350:	681b      	ldr	r3, [r3, #0]
 8021352:	4a5b      	ldr	r2, [pc, #364]	; (80214c0 <HAL_UARTEx_RxEventCallback+0x24c>)
 8021354:	4293      	cmp	r3, r2
 8021356:	d031      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021358:	4b53      	ldr	r3, [pc, #332]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802135a:	681b      	ldr	r3, [r3, #0]
 802135c:	4a59      	ldr	r2, [pc, #356]	; (80214c4 <HAL_UARTEx_RxEventCallback+0x250>)
 802135e:	4293      	cmp	r3, r2
 8021360:	d02c      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021362:	4b51      	ldr	r3, [pc, #324]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021364:	681b      	ldr	r3, [r3, #0]
 8021366:	4a58      	ldr	r2, [pc, #352]	; (80214c8 <HAL_UARTEx_RxEventCallback+0x254>)
 8021368:	4293      	cmp	r3, r2
 802136a:	d027      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 802136c:	4b4e      	ldr	r3, [pc, #312]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	4a56      	ldr	r2, [pc, #344]	; (80214cc <HAL_UARTEx_RxEventCallback+0x258>)
 8021372:	4293      	cmp	r3, r2
 8021374:	d022      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021376:	4b4c      	ldr	r3, [pc, #304]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021378:	681b      	ldr	r3, [r3, #0]
 802137a:	4a55      	ldr	r2, [pc, #340]	; (80214d0 <HAL_UARTEx_RxEventCallback+0x25c>)
 802137c:	4293      	cmp	r3, r2
 802137e:	d01d      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021380:	4b49      	ldr	r3, [pc, #292]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021382:	681b      	ldr	r3, [r3, #0]
 8021384:	4a53      	ldr	r2, [pc, #332]	; (80214d4 <HAL_UARTEx_RxEventCallback+0x260>)
 8021386:	4293      	cmp	r3, r2
 8021388:	d018      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 802138a:	4b47      	ldr	r3, [pc, #284]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802138c:	681b      	ldr	r3, [r3, #0]
 802138e:	4a52      	ldr	r2, [pc, #328]	; (80214d8 <HAL_UARTEx_RxEventCallback+0x264>)
 8021390:	4293      	cmp	r3, r2
 8021392:	d013      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 8021394:	4b44      	ldr	r3, [pc, #272]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021396:	681b      	ldr	r3, [r3, #0]
 8021398:	4a50      	ldr	r2, [pc, #320]	; (80214dc <HAL_UARTEx_RxEventCallback+0x268>)
 802139a:	4293      	cmp	r3, r2
 802139c:	d00e      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 802139e:	4b42      	ldr	r3, [pc, #264]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213a0:	681b      	ldr	r3, [r3, #0]
 80213a2:	4a4f      	ldr	r2, [pc, #316]	; (80214e0 <HAL_UARTEx_RxEventCallback+0x26c>)
 80213a4:	4293      	cmp	r3, r2
 80213a6:	d009      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 80213a8:	4b3f      	ldr	r3, [pc, #252]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213aa:	681b      	ldr	r3, [r3, #0]
 80213ac:	4a4d      	ldr	r2, [pc, #308]	; (80214e4 <HAL_UARTEx_RxEventCallback+0x270>)
 80213ae:	4293      	cmp	r3, r2
 80213b0:	d004      	beq.n	80213bc <HAL_UARTEx_RxEventCallback+0x148>
 80213b2:	4b3d      	ldr	r3, [pc, #244]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213b4:	681b      	ldr	r3, [r3, #0]
 80213b6:	4a4c      	ldr	r2, [pc, #304]	; (80214e8 <HAL_UARTEx_RxEventCallback+0x274>)
 80213b8:	4293      	cmp	r3, r2
 80213ba:	d108      	bne.n	80213ce <HAL_UARTEx_RxEventCallback+0x15a>
 80213bc:	4b3a      	ldr	r3, [pc, #232]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213be:	681b      	ldr	r3, [r3, #0]
 80213c0:	681a      	ldr	r2, [r3, #0]
 80213c2:	4b39      	ldr	r3, [pc, #228]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213c4:	681b      	ldr	r3, [r3, #0]
 80213c6:	f022 0208 	bic.w	r2, r2, #8
 80213ca:	601a      	str	r2, [r3, #0]
 80213cc:	e007      	b.n	80213de <HAL_UARTEx_RxEventCallback+0x16a>
 80213ce:	4b36      	ldr	r3, [pc, #216]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213d0:	681b      	ldr	r3, [r3, #0]
 80213d2:	681a      	ldr	r2, [r3, #0]
 80213d4:	4b34      	ldr	r3, [pc, #208]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213d6:	681b      	ldr	r3, [r3, #0]
 80213d8:	f022 0204 	bic.w	r2, r2, #4
 80213dc:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_TC);
 80213de:	4b32      	ldr	r3, [pc, #200]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213e0:	681b      	ldr	r3, [r3, #0]
 80213e2:	4a32      	ldr	r2, [pc, #200]	; (80214ac <HAL_UARTEx_RxEventCallback+0x238>)
 80213e4:	4293      	cmp	r3, r2
 80213e6:	d04a      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 80213e8:	4b2f      	ldr	r3, [pc, #188]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213ea:	681b      	ldr	r3, [r3, #0]
 80213ec:	4a30      	ldr	r2, [pc, #192]	; (80214b0 <HAL_UARTEx_RxEventCallback+0x23c>)
 80213ee:	4293      	cmp	r3, r2
 80213f0:	d045      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 80213f2:	4b2d      	ldr	r3, [pc, #180]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213f4:	681b      	ldr	r3, [r3, #0]
 80213f6:	4a2f      	ldr	r2, [pc, #188]	; (80214b4 <HAL_UARTEx_RxEventCallback+0x240>)
 80213f8:	4293      	cmp	r3, r2
 80213fa:	d040      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 80213fc:	4b2a      	ldr	r3, [pc, #168]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 80213fe:	681b      	ldr	r3, [r3, #0]
 8021400:	4a2d      	ldr	r2, [pc, #180]	; (80214b8 <HAL_UARTEx_RxEventCallback+0x244>)
 8021402:	4293      	cmp	r3, r2
 8021404:	d03b      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021406:	4b28      	ldr	r3, [pc, #160]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021408:	681b      	ldr	r3, [r3, #0]
 802140a:	4a2c      	ldr	r2, [pc, #176]	; (80214bc <HAL_UARTEx_RxEventCallback+0x248>)
 802140c:	4293      	cmp	r3, r2
 802140e:	d036      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021410:	4b25      	ldr	r3, [pc, #148]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021412:	681b      	ldr	r3, [r3, #0]
 8021414:	4a2a      	ldr	r2, [pc, #168]	; (80214c0 <HAL_UARTEx_RxEventCallback+0x24c>)
 8021416:	4293      	cmp	r3, r2
 8021418:	d031      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 802141a:	4b23      	ldr	r3, [pc, #140]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802141c:	681b      	ldr	r3, [r3, #0]
 802141e:	4a29      	ldr	r2, [pc, #164]	; (80214c4 <HAL_UARTEx_RxEventCallback+0x250>)
 8021420:	4293      	cmp	r3, r2
 8021422:	d02c      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021424:	4b20      	ldr	r3, [pc, #128]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	4a27      	ldr	r2, [pc, #156]	; (80214c8 <HAL_UARTEx_RxEventCallback+0x254>)
 802142a:	4293      	cmp	r3, r2
 802142c:	d027      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 802142e:	4b1e      	ldr	r3, [pc, #120]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	4a26      	ldr	r2, [pc, #152]	; (80214cc <HAL_UARTEx_RxEventCallback+0x258>)
 8021434:	4293      	cmp	r3, r2
 8021436:	d022      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021438:	4b1b      	ldr	r3, [pc, #108]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802143a:	681b      	ldr	r3, [r3, #0]
 802143c:	4a24      	ldr	r2, [pc, #144]	; (80214d0 <HAL_UARTEx_RxEventCallback+0x25c>)
 802143e:	4293      	cmp	r3, r2
 8021440:	d01d      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021442:	4b19      	ldr	r3, [pc, #100]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021444:	681b      	ldr	r3, [r3, #0]
 8021446:	4a23      	ldr	r2, [pc, #140]	; (80214d4 <HAL_UARTEx_RxEventCallback+0x260>)
 8021448:	4293      	cmp	r3, r2
 802144a:	d018      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 802144c:	4b16      	ldr	r3, [pc, #88]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802144e:	681b      	ldr	r3, [r3, #0]
 8021450:	4a21      	ldr	r2, [pc, #132]	; (80214d8 <HAL_UARTEx_RxEventCallback+0x264>)
 8021452:	4293      	cmp	r3, r2
 8021454:	d013      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021456:	4b14      	ldr	r3, [pc, #80]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021458:	681b      	ldr	r3, [r3, #0]
 802145a:	4a20      	ldr	r2, [pc, #128]	; (80214dc <HAL_UARTEx_RxEventCallback+0x268>)
 802145c:	4293      	cmp	r3, r2
 802145e:	d00e      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021460:	4b11      	ldr	r3, [pc, #68]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021462:	681b      	ldr	r3, [r3, #0]
 8021464:	4a1e      	ldr	r2, [pc, #120]	; (80214e0 <HAL_UARTEx_RxEventCallback+0x26c>)
 8021466:	4293      	cmp	r3, r2
 8021468:	d009      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 802146a:	4b0f      	ldr	r3, [pc, #60]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 802146c:	681b      	ldr	r3, [r3, #0]
 802146e:	4a1d      	ldr	r2, [pc, #116]	; (80214e4 <HAL_UARTEx_RxEventCallback+0x270>)
 8021470:	4293      	cmp	r3, r2
 8021472:	d004      	beq.n	802147e <HAL_UARTEx_RxEventCallback+0x20a>
 8021474:	4b0c      	ldr	r3, [pc, #48]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	4a1b      	ldr	r2, [pc, #108]	; (80214e8 <HAL_UARTEx_RxEventCallback+0x274>)
 802147a:	4293      	cmp	r3, r2
 802147c:	d136      	bne.n	80214ec <HAL_UARTEx_RxEventCallback+0x278>
 802147e:	4b0a      	ldr	r3, [pc, #40]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021480:	681b      	ldr	r3, [r3, #0]
 8021482:	681a      	ldr	r2, [r3, #0]
 8021484:	4b08      	ldr	r3, [pc, #32]	; (80214a8 <HAL_UARTEx_RxEventCallback+0x234>)
 8021486:	681b      	ldr	r3, [r3, #0]
 8021488:	f022 0210 	bic.w	r2, r2, #16
 802148c:	601a      	str	r2, [r3, #0]
 802148e:	e035      	b.n	80214fc <HAL_UARTEx_RxEventCallback+0x288>
 8021490:	58020400 	.word	0x58020400
 8021494:	24000aac 	.word	0x24000aac
 8021498:	24000aa8 	.word	0x24000aa8
 802149c:	24000a64 	.word	0x24000a64
 80214a0:	24000ab0 	.word	0x24000ab0
 80214a4:	2400088c 	.word	0x2400088c
 80214a8:	24000994 	.word	0x24000994
 80214ac:	40020010 	.word	0x40020010
 80214b0:	40020028 	.word	0x40020028
 80214b4:	40020040 	.word	0x40020040
 80214b8:	40020058 	.word	0x40020058
 80214bc:	40020070 	.word	0x40020070
 80214c0:	40020088 	.word	0x40020088
 80214c4:	400200a0 	.word	0x400200a0
 80214c8:	400200b8 	.word	0x400200b8
 80214cc:	40020410 	.word	0x40020410
 80214d0:	40020428 	.word	0x40020428
 80214d4:	40020440 	.word	0x40020440
 80214d8:	40020458 	.word	0x40020458
 80214dc:	40020470 	.word	0x40020470
 80214e0:	40020488 	.word	0x40020488
 80214e4:	400204a0 	.word	0x400204a0
 80214e8:	400204b8 	.word	0x400204b8
 80214ec:	4b10      	ldr	r3, [pc, #64]	; (8021530 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80214ee:	681b      	ldr	r3, [r3, #0]
 80214f0:	681a      	ldr	r2, [r3, #0]
 80214f2:	4b0f      	ldr	r3, [pc, #60]	; (8021530 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80214f4:	681b      	ldr	r3, [r3, #0]
 80214f6:	f022 0202 	bic.w	r2, r2, #2
 80214fa:	601a      	str	r2, [r3, #0]

	/* xHigherPriorityTaskWoken must be initialised to pdFALSE.  If calling
	vTaskNotifyGiveFromISR() unblocks the handling task, and the priority of
	the handling task is higher than the priority of the currently running task,
	then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
	xHigherPriorityTaskWoken = pdFALSE;
 80214fc:	2300      	movs	r3, #0
 80214fe:	60fb      	str	r3, [r7, #12]

	/* Unblock the handling task so the task can perform any processing necessitated
	by the interrupt.  xHandlingTask is the task's handle, which was obtained
	when the task was created. */
	vTaskNotifyGiveFromISR(ConsoleTaskHandle, &xHigherPriorityTaskWoken );
 8021500:	4b0c      	ldr	r3, [pc, #48]	; (8021534 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8021502:	681b      	ldr	r3, [r3, #0]
 8021504:	f107 020c 	add.w	r2, r7, #12
 8021508:	4611      	mov	r1, r2
 802150a:	4618      	mov	r0, r3
 802150c:	f017 f826 	bl	803855c <vTaskNotifyGiveFromISR>

	/* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
	The macro used to do this is dependent on the port and may be called
	portEND_SWITCHING_ISR. */
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8021510:	68fb      	ldr	r3, [r7, #12]
 8021512:	2b00      	cmp	r3, #0
 8021514:	d007      	beq.n	8021526 <HAL_UARTEx_RxEventCallback+0x2b2>
 8021516:	4b08      	ldr	r3, [pc, #32]	; (8021538 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8021518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802151c:	601a      	str	r2, [r3, #0]
 802151e:	f3bf 8f4f 	dsb	sy
 8021522:	f3bf 8f6f 	isb	sy

}
 8021526:	bf00      	nop
 8021528:	3710      	adds	r7, #16
 802152a:	46bd      	mov	sp, r7
 802152c:	bd80      	pop	{r7, pc}
 802152e:	bf00      	nop
 8021530:	24000994 	.word	0x24000994
 8021534:	24000a14 	.word	0x24000a14
 8021538:	e000ed04 	.word	0xe000ed04

0802153c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 802153c:	b580      	push	{r7, lr}
 802153e:	b084      	sub	sp, #16
 8021540:	af00      	add	r7, sp, #0
 8021542:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8021544:	f018 f922 	bl	803978c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  /* USRT RX INITIATE */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_RX_BUFFER, UART_RX_BUFFER_LENGTH);
 8021548:	2242      	movs	r2, #66	; 0x42
 802154a:	4966      	ldr	r1, [pc, #408]	; (80216e4 <StartDefaultTask+0x1a8>)
 802154c:	4866      	ldr	r0, [pc, #408]	; (80216e8 <StartDefaultTask+0x1ac>)
 802154e:	f00a f921 	bl	802b794 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8021552:	4b66      	ldr	r3, [pc, #408]	; (80216ec <StartDefaultTask+0x1b0>)
 8021554:	681b      	ldr	r3, [r3, #0]
 8021556:	4a66      	ldr	r2, [pc, #408]	; (80216f0 <StartDefaultTask+0x1b4>)
 8021558:	4293      	cmp	r3, r2
 802155a:	d04a      	beq.n	80215f2 <StartDefaultTask+0xb6>
 802155c:	4b63      	ldr	r3, [pc, #396]	; (80216ec <StartDefaultTask+0x1b0>)
 802155e:	681b      	ldr	r3, [r3, #0]
 8021560:	4a64      	ldr	r2, [pc, #400]	; (80216f4 <StartDefaultTask+0x1b8>)
 8021562:	4293      	cmp	r3, r2
 8021564:	d045      	beq.n	80215f2 <StartDefaultTask+0xb6>
 8021566:	4b61      	ldr	r3, [pc, #388]	; (80216ec <StartDefaultTask+0x1b0>)
 8021568:	681b      	ldr	r3, [r3, #0]
 802156a:	4a63      	ldr	r2, [pc, #396]	; (80216f8 <StartDefaultTask+0x1bc>)
 802156c:	4293      	cmp	r3, r2
 802156e:	d040      	beq.n	80215f2 <StartDefaultTask+0xb6>
 8021570:	4b5e      	ldr	r3, [pc, #376]	; (80216ec <StartDefaultTask+0x1b0>)
 8021572:	681b      	ldr	r3, [r3, #0]
 8021574:	4a61      	ldr	r2, [pc, #388]	; (80216fc <StartDefaultTask+0x1c0>)
 8021576:	4293      	cmp	r3, r2
 8021578:	d03b      	beq.n	80215f2 <StartDefaultTask+0xb6>
 802157a:	4b5c      	ldr	r3, [pc, #368]	; (80216ec <StartDefaultTask+0x1b0>)
 802157c:	681b      	ldr	r3, [r3, #0]
 802157e:	4a60      	ldr	r2, [pc, #384]	; (8021700 <StartDefaultTask+0x1c4>)
 8021580:	4293      	cmp	r3, r2
 8021582:	d036      	beq.n	80215f2 <StartDefaultTask+0xb6>
 8021584:	4b59      	ldr	r3, [pc, #356]	; (80216ec <StartDefaultTask+0x1b0>)
 8021586:	681b      	ldr	r3, [r3, #0]
 8021588:	4a5e      	ldr	r2, [pc, #376]	; (8021704 <StartDefaultTask+0x1c8>)
 802158a:	4293      	cmp	r3, r2
 802158c:	d031      	beq.n	80215f2 <StartDefaultTask+0xb6>
 802158e:	4b57      	ldr	r3, [pc, #348]	; (80216ec <StartDefaultTask+0x1b0>)
 8021590:	681b      	ldr	r3, [r3, #0]
 8021592:	4a5d      	ldr	r2, [pc, #372]	; (8021708 <StartDefaultTask+0x1cc>)
 8021594:	4293      	cmp	r3, r2
 8021596:	d02c      	beq.n	80215f2 <StartDefaultTask+0xb6>
 8021598:	4b54      	ldr	r3, [pc, #336]	; (80216ec <StartDefaultTask+0x1b0>)
 802159a:	681b      	ldr	r3, [r3, #0]
 802159c:	4a5b      	ldr	r2, [pc, #364]	; (802170c <StartDefaultTask+0x1d0>)
 802159e:	4293      	cmp	r3, r2
 80215a0:	d027      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215a2:	4b52      	ldr	r3, [pc, #328]	; (80216ec <StartDefaultTask+0x1b0>)
 80215a4:	681b      	ldr	r3, [r3, #0]
 80215a6:	4a5a      	ldr	r2, [pc, #360]	; (8021710 <StartDefaultTask+0x1d4>)
 80215a8:	4293      	cmp	r3, r2
 80215aa:	d022      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215ac:	4b4f      	ldr	r3, [pc, #316]	; (80216ec <StartDefaultTask+0x1b0>)
 80215ae:	681b      	ldr	r3, [r3, #0]
 80215b0:	4a58      	ldr	r2, [pc, #352]	; (8021714 <StartDefaultTask+0x1d8>)
 80215b2:	4293      	cmp	r3, r2
 80215b4:	d01d      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215b6:	4b4d      	ldr	r3, [pc, #308]	; (80216ec <StartDefaultTask+0x1b0>)
 80215b8:	681b      	ldr	r3, [r3, #0]
 80215ba:	4a57      	ldr	r2, [pc, #348]	; (8021718 <StartDefaultTask+0x1dc>)
 80215bc:	4293      	cmp	r3, r2
 80215be:	d018      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215c0:	4b4a      	ldr	r3, [pc, #296]	; (80216ec <StartDefaultTask+0x1b0>)
 80215c2:	681b      	ldr	r3, [r3, #0]
 80215c4:	4a55      	ldr	r2, [pc, #340]	; (802171c <StartDefaultTask+0x1e0>)
 80215c6:	4293      	cmp	r3, r2
 80215c8:	d013      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215ca:	4b48      	ldr	r3, [pc, #288]	; (80216ec <StartDefaultTask+0x1b0>)
 80215cc:	681b      	ldr	r3, [r3, #0]
 80215ce:	4a54      	ldr	r2, [pc, #336]	; (8021720 <StartDefaultTask+0x1e4>)
 80215d0:	4293      	cmp	r3, r2
 80215d2:	d00e      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215d4:	4b45      	ldr	r3, [pc, #276]	; (80216ec <StartDefaultTask+0x1b0>)
 80215d6:	681b      	ldr	r3, [r3, #0]
 80215d8:	4a52      	ldr	r2, [pc, #328]	; (8021724 <StartDefaultTask+0x1e8>)
 80215da:	4293      	cmp	r3, r2
 80215dc:	d009      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215de:	4b43      	ldr	r3, [pc, #268]	; (80216ec <StartDefaultTask+0x1b0>)
 80215e0:	681b      	ldr	r3, [r3, #0]
 80215e2:	4a51      	ldr	r2, [pc, #324]	; (8021728 <StartDefaultTask+0x1ec>)
 80215e4:	4293      	cmp	r3, r2
 80215e6:	d004      	beq.n	80215f2 <StartDefaultTask+0xb6>
 80215e8:	4b40      	ldr	r3, [pc, #256]	; (80216ec <StartDefaultTask+0x1b0>)
 80215ea:	681b      	ldr	r3, [r3, #0]
 80215ec:	4a4f      	ldr	r2, [pc, #316]	; (802172c <StartDefaultTask+0x1f0>)
 80215ee:	4293      	cmp	r3, r2
 80215f0:	d108      	bne.n	8021604 <StartDefaultTask+0xc8>
 80215f2:	4b3e      	ldr	r3, [pc, #248]	; (80216ec <StartDefaultTask+0x1b0>)
 80215f4:	681b      	ldr	r3, [r3, #0]
 80215f6:	681a      	ldr	r2, [r3, #0]
 80215f8:	4b3c      	ldr	r3, [pc, #240]	; (80216ec <StartDefaultTask+0x1b0>)
 80215fa:	681b      	ldr	r3, [r3, #0]
 80215fc:	f022 0208 	bic.w	r2, r2, #8
 8021600:	601a      	str	r2, [r3, #0]
 8021602:	e007      	b.n	8021614 <StartDefaultTask+0xd8>
 8021604:	4b39      	ldr	r3, [pc, #228]	; (80216ec <StartDefaultTask+0x1b0>)
 8021606:	681b      	ldr	r3, [r3, #0]
 8021608:	681a      	ldr	r2, [r3, #0]
 802160a:	4b38      	ldr	r3, [pc, #224]	; (80216ec <StartDefaultTask+0x1b0>)
 802160c:	681b      	ldr	r3, [r3, #0]
 802160e:	f022 0204 	bic.w	r2, r2, #4
 8021612:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_TC);
 8021614:	4b35      	ldr	r3, [pc, #212]	; (80216ec <StartDefaultTask+0x1b0>)
 8021616:	681b      	ldr	r3, [r3, #0]
 8021618:	4a35      	ldr	r2, [pc, #212]	; (80216f0 <StartDefaultTask+0x1b4>)
 802161a:	4293      	cmp	r3, r2
 802161c:	d04a      	beq.n	80216b4 <StartDefaultTask+0x178>
 802161e:	4b33      	ldr	r3, [pc, #204]	; (80216ec <StartDefaultTask+0x1b0>)
 8021620:	681b      	ldr	r3, [r3, #0]
 8021622:	4a34      	ldr	r2, [pc, #208]	; (80216f4 <StartDefaultTask+0x1b8>)
 8021624:	4293      	cmp	r3, r2
 8021626:	d045      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021628:	4b30      	ldr	r3, [pc, #192]	; (80216ec <StartDefaultTask+0x1b0>)
 802162a:	681b      	ldr	r3, [r3, #0]
 802162c:	4a32      	ldr	r2, [pc, #200]	; (80216f8 <StartDefaultTask+0x1bc>)
 802162e:	4293      	cmp	r3, r2
 8021630:	d040      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021632:	4b2e      	ldr	r3, [pc, #184]	; (80216ec <StartDefaultTask+0x1b0>)
 8021634:	681b      	ldr	r3, [r3, #0]
 8021636:	4a31      	ldr	r2, [pc, #196]	; (80216fc <StartDefaultTask+0x1c0>)
 8021638:	4293      	cmp	r3, r2
 802163a:	d03b      	beq.n	80216b4 <StartDefaultTask+0x178>
 802163c:	4b2b      	ldr	r3, [pc, #172]	; (80216ec <StartDefaultTask+0x1b0>)
 802163e:	681b      	ldr	r3, [r3, #0]
 8021640:	4a2f      	ldr	r2, [pc, #188]	; (8021700 <StartDefaultTask+0x1c4>)
 8021642:	4293      	cmp	r3, r2
 8021644:	d036      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021646:	4b29      	ldr	r3, [pc, #164]	; (80216ec <StartDefaultTask+0x1b0>)
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	4a2e      	ldr	r2, [pc, #184]	; (8021704 <StartDefaultTask+0x1c8>)
 802164c:	4293      	cmp	r3, r2
 802164e:	d031      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021650:	4b26      	ldr	r3, [pc, #152]	; (80216ec <StartDefaultTask+0x1b0>)
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	4a2c      	ldr	r2, [pc, #176]	; (8021708 <StartDefaultTask+0x1cc>)
 8021656:	4293      	cmp	r3, r2
 8021658:	d02c      	beq.n	80216b4 <StartDefaultTask+0x178>
 802165a:	4b24      	ldr	r3, [pc, #144]	; (80216ec <StartDefaultTask+0x1b0>)
 802165c:	681b      	ldr	r3, [r3, #0]
 802165e:	4a2b      	ldr	r2, [pc, #172]	; (802170c <StartDefaultTask+0x1d0>)
 8021660:	4293      	cmp	r3, r2
 8021662:	d027      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021664:	4b21      	ldr	r3, [pc, #132]	; (80216ec <StartDefaultTask+0x1b0>)
 8021666:	681b      	ldr	r3, [r3, #0]
 8021668:	4a29      	ldr	r2, [pc, #164]	; (8021710 <StartDefaultTask+0x1d4>)
 802166a:	4293      	cmp	r3, r2
 802166c:	d022      	beq.n	80216b4 <StartDefaultTask+0x178>
 802166e:	4b1f      	ldr	r3, [pc, #124]	; (80216ec <StartDefaultTask+0x1b0>)
 8021670:	681b      	ldr	r3, [r3, #0]
 8021672:	4a28      	ldr	r2, [pc, #160]	; (8021714 <StartDefaultTask+0x1d8>)
 8021674:	4293      	cmp	r3, r2
 8021676:	d01d      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021678:	4b1c      	ldr	r3, [pc, #112]	; (80216ec <StartDefaultTask+0x1b0>)
 802167a:	681b      	ldr	r3, [r3, #0]
 802167c:	4a26      	ldr	r2, [pc, #152]	; (8021718 <StartDefaultTask+0x1dc>)
 802167e:	4293      	cmp	r3, r2
 8021680:	d018      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021682:	4b1a      	ldr	r3, [pc, #104]	; (80216ec <StartDefaultTask+0x1b0>)
 8021684:	681b      	ldr	r3, [r3, #0]
 8021686:	4a25      	ldr	r2, [pc, #148]	; (802171c <StartDefaultTask+0x1e0>)
 8021688:	4293      	cmp	r3, r2
 802168a:	d013      	beq.n	80216b4 <StartDefaultTask+0x178>
 802168c:	4b17      	ldr	r3, [pc, #92]	; (80216ec <StartDefaultTask+0x1b0>)
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	4a23      	ldr	r2, [pc, #140]	; (8021720 <StartDefaultTask+0x1e4>)
 8021692:	4293      	cmp	r3, r2
 8021694:	d00e      	beq.n	80216b4 <StartDefaultTask+0x178>
 8021696:	4b15      	ldr	r3, [pc, #84]	; (80216ec <StartDefaultTask+0x1b0>)
 8021698:	681b      	ldr	r3, [r3, #0]
 802169a:	4a22      	ldr	r2, [pc, #136]	; (8021724 <StartDefaultTask+0x1e8>)
 802169c:	4293      	cmp	r3, r2
 802169e:	d009      	beq.n	80216b4 <StartDefaultTask+0x178>
 80216a0:	4b12      	ldr	r3, [pc, #72]	; (80216ec <StartDefaultTask+0x1b0>)
 80216a2:	681b      	ldr	r3, [r3, #0]
 80216a4:	4a20      	ldr	r2, [pc, #128]	; (8021728 <StartDefaultTask+0x1ec>)
 80216a6:	4293      	cmp	r3, r2
 80216a8:	d004      	beq.n	80216b4 <StartDefaultTask+0x178>
 80216aa:	4b10      	ldr	r3, [pc, #64]	; (80216ec <StartDefaultTask+0x1b0>)
 80216ac:	681b      	ldr	r3, [r3, #0]
 80216ae:	4a1f      	ldr	r2, [pc, #124]	; (802172c <StartDefaultTask+0x1f0>)
 80216b0:	4293      	cmp	r3, r2
 80216b2:	d108      	bne.n	80216c6 <StartDefaultTask+0x18a>
 80216b4:	4b0d      	ldr	r3, [pc, #52]	; (80216ec <StartDefaultTask+0x1b0>)
 80216b6:	681b      	ldr	r3, [r3, #0]
 80216b8:	681a      	ldr	r2, [r3, #0]
 80216ba:	4b0c      	ldr	r3, [pc, #48]	; (80216ec <StartDefaultTask+0x1b0>)
 80216bc:	681b      	ldr	r3, [r3, #0]
 80216be:	f022 0210 	bic.w	r2, r2, #16
 80216c2:	601a      	str	r2, [r3, #0]
 80216c4:	e007      	b.n	80216d6 <StartDefaultTask+0x19a>
 80216c6:	4b09      	ldr	r3, [pc, #36]	; (80216ec <StartDefaultTask+0x1b0>)
 80216c8:	681b      	ldr	r3, [r3, #0]
 80216ca:	681a      	ldr	r2, [r3, #0]
 80216cc:	4b07      	ldr	r3, [pc, #28]	; (80216ec <StartDefaultTask+0x1b0>)
 80216ce:	681b      	ldr	r3, [r3, #0]
 80216d0:	f022 0202 	bic.w	r2, r2, #2
 80216d4:	601a      	str	r2, [r3, #0]

  int count = 0;
 80216d6:	2300      	movs	r3, #0
 80216d8:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    //printf("Hello World! %d\r\n", count++);
    osDelay(2000);
 80216da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80216de:	f014 fc06 	bl	8035eee <osDelay>
 80216e2:	e7fa      	b.n	80216da <StartDefaultTask+0x19e>
 80216e4:	24000a64 	.word	0x24000a64
 80216e8:	2400088c 	.word	0x2400088c
 80216ec:	24000994 	.word	0x24000994
 80216f0:	40020010 	.word	0x40020010
 80216f4:	40020028 	.word	0x40020028
 80216f8:	40020040 	.word	0x40020040
 80216fc:	40020058 	.word	0x40020058
 8021700:	40020070 	.word	0x40020070
 8021704:	40020088 	.word	0x40020088
 8021708:	400200a0 	.word	0x400200a0
 802170c:	400200b8 	.word	0x400200b8
 8021710:	40020410 	.word	0x40020410
 8021714:	40020428 	.word	0x40020428
 8021718:	40020440 	.word	0x40020440
 802171c:	40020458 	.word	0x40020458
 8021720:	40020470 	.word	0x40020470
 8021724:	40020488 	.word	0x40020488
 8021728:	400204a0 	.word	0x400204a0
 802172c:	400204b8 	.word	0x400204b8

08021730 <USBFileSystemTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_USBFileSystemTask_Start */
void USBFileSystemTask_Start(void const * argument)
{
 8021730:	b580      	push	{r7, lr}
 8021732:	b082      	sub	sp, #8
 8021734:	af00      	add	r7, sp, #0
 8021736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBFileSystemTask_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8021738:	2001      	movs	r0, #1
 802173a:	f014 fbd8 	bl	8035eee <osDelay>
 802173e:	e7fb      	b.n	8021738 <USBFileSystemTask_Start+0x8>

08021740 <ConsoleTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ConsoleTask_Start */
void ConsoleTask_Start(void const * argument)
{
 8021740:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8021744:	b08a      	sub	sp, #40	; 0x28
 8021746:	af00      	add	r7, sp, #0
 8021748:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ConsoleTask_Start */
	// ToDo Add buffer full mechanism to UART TX.
	printf("======================\r\n");
 802174a:	489d      	ldr	r0, [pc, #628]	; (80219c0 <ConsoleTask_Start+0x280>)
 802174c:	f018 fd38 	bl	803a1c0 <puts>
	printf(" Terminal is ready...\r\n");
 8021750:	489c      	ldr	r0, [pc, #624]	; (80219c4 <ConsoleTask_Start+0x284>)
 8021752:	f018 fd35 	bl	803a1c0 <puts>
	printf(" Waiting commands... \r\n");
 8021756:	489c      	ldr	r0, [pc, #624]	; (80219c8 <ConsoleTask_Start+0x288>)
 8021758:	f018 fd32 	bl	803a1c0 <puts>
	printf("======================\r\n");
 802175c:	4898      	ldr	r0, [pc, #608]	; (80219c0 <ConsoleTask_Start+0x280>)
 802175e:	f018 fd2f 	bl	803a1c0 <puts>

	uint8_t str_trim_start = 0;
 8021762:	2300      	movs	r3, #0
 8021764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t str_trim_end = 0;
 8021768:	2300      	movs	r3, #0
 802176a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	FRESULT fr;
	UINT SZ_STR = 100;
 802176e:	2364      	movs	r3, #100	; 0x64
 8021770:	61fb      	str	r3, [r7, #28]
	TCHAR str[SZ_STR];
 8021772:	69f9      	ldr	r1, [r7, #28]
 8021774:	460b      	mov	r3, r1
 8021776:	3b01      	subs	r3, #1
 8021778:	61bb      	str	r3, [r7, #24]
 802177a:	2300      	movs	r3, #0
 802177c:	4688      	mov	r8, r1
 802177e:	4699      	mov	r9, r3
 8021780:	f04f 0200 	mov.w	r2, #0
 8021784:	f04f 0300 	mov.w	r3, #0
 8021788:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802178c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021790:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021794:	2300      	movs	r3, #0
 8021796:	460c      	mov	r4, r1
 8021798:	461d      	mov	r5, r3
 802179a:	f04f 0200 	mov.w	r2, #0
 802179e:	f04f 0300 	mov.w	r3, #0
 80217a2:	00eb      	lsls	r3, r5, #3
 80217a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80217a8:	00e2      	lsls	r2, r4, #3
 80217aa:	1dcb      	adds	r3, r1, #7
 80217ac:	08db      	lsrs	r3, r3, #3
 80217ae:	00db      	lsls	r3, r3, #3
 80217b0:	ebad 0d03 	sub.w	sp, sp, r3
 80217b4:	466b      	mov	r3, sp
 80217b6:	3300      	adds	r3, #0
 80217b8:	617b      	str	r3, [r7, #20]

	char* trimmed_command = NULL;
 80217ba:	2300      	movs	r3, #0
 80217bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Infinite loop */
  for(;;)
  {

	ulTaskNotifyTake(pdTRUE,          /* Clear the notification value before exiting. */
 80217be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80217c2:	2001      	movs	r0, #1
 80217c4:	f016 fe82 	bl	80384cc <ulTaskNotifyTake>
	                 portMAX_DELAY ); /* Block indefinitely. */


	for(str_trim_start = 0; str_trim_start <= strlen(received_command); str_trim_start ++)
 80217c8:	2300      	movs	r3, #0
 80217ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80217ce:	e010      	b.n	80217f2 <ConsoleTask_Start+0xb2>
	{
		if(received_command[str_trim_start] != ' ')
 80217d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80217d4:	4a7d      	ldr	r2, [pc, #500]	; (80219cc <ConsoleTask_Start+0x28c>)
 80217d6:	5cd3      	ldrb	r3, [r2, r3]
 80217d8:	2b20      	cmp	r3, #32
 80217da:	d005      	beq.n	80217e8 <ConsoleTask_Start+0xa8>
		{
			trimmed_command = received_command + str_trim_start;
 80217dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80217e0:	4a7a      	ldr	r2, [pc, #488]	; (80219cc <ConsoleTask_Start+0x28c>)
 80217e2:	4413      	add	r3, r2
 80217e4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80217e6:	e00c      	b.n	8021802 <ConsoleTask_Start+0xc2>
	for(str_trim_start = 0; str_trim_start <= strlen(received_command); str_trim_start ++)
 80217e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80217ec:	3301      	adds	r3, #1
 80217ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80217f2:	f897 4022 	ldrb.w	r4, [r7, #34]	; 0x22
 80217f6:	4875      	ldr	r0, [pc, #468]	; (80219cc <ConsoleTask_Start+0x28c>)
 80217f8:	f7fe fd94 	bl	8020324 <strlen>
 80217fc:	4603      	mov	r3, r0
 80217fe:	429c      	cmp	r4, r3
 8021800:	d9e6      	bls.n	80217d0 <ConsoleTask_Start+0x90>
		}
	}

	for(str_trim_end = strlen(trimmed_command)-1; str_trim_end >= 0; str_trim_end--)
 8021802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021804:	f7fe fd8e 	bl	8020324 <strlen>
 8021808:	4603      	mov	r3, r0
 802180a:	b2db      	uxtb	r3, r3
 802180c:	3b01      	subs	r3, #1
 802180e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	{
		if(trimmed_command[str_trim_end] != ' ')
 8021812:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021818:	4413      	add	r3, r2
 802181a:	781b      	ldrb	r3, [r3, #0]
 802181c:	2b20      	cmp	r3, #32
 802181e:	d011      	beq.n	8021844 <ConsoleTask_Start+0x104>
		{
			trimmed_command[str_trim_end+1] = '\0';
 8021820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021824:	3301      	adds	r3, #1
 8021826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021828:	4413      	add	r3, r2
 802182a:	2200      	movs	r2, #0
 802182c:	701a      	strb	r2, [r3, #0]
			break;
 802182e:	bf00      	nop
		}
	}

	printf("CMD$: %s \r\n", trimmed_command);
 8021830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8021832:	4867      	ldr	r0, [pc, #412]	; (80219d0 <ConsoleTask_Start+0x290>)
 8021834:	f018 fc3e 	bl	803a0b4 <iprintf>

	if(strlen(trimmed_command) > 0)
 8021838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802183a:	781b      	ldrb	r3, [r3, #0]
 802183c:	2b00      	cmp	r3, #0
 802183e:	f000 80bb 	beq.w	80219b8 <ConsoleTask_Start+0x278>
 8021842:	e005      	b.n	8021850 <ConsoleTask_Start+0x110>
	for(str_trim_end = strlen(trimmed_command)-1; str_trim_end >= 0; str_trim_end--)
 8021844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021848:	3b01      	subs	r3, #1
 802184a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(trimmed_command[str_trim_end] != ' ')
 802184e:	e7e0      	b.n	8021812 <ConsoleTask_Start+0xd2>
	{

		if(!strncmp(trimmed_command , "mount" , 5))
 8021850:	2205      	movs	r2, #5
 8021852:	4960      	ldr	r1, [pc, #384]	; (80219d4 <ConsoleTask_Start+0x294>)
 8021854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021856:	f018 fcf8 	bl	803a24a <strncmp>
 802185a:	4603      	mov	r3, r0
 802185c:	2b00      	cmp	r3, #0
 802185e:	d11b      	bne.n	8021898 <ConsoleTask_Start+0x158>
		{

			if(Appli_state != APPLICATION_READY){
 8021860:	4b5d      	ldr	r3, [pc, #372]	; (80219d8 <ConsoleTask_Start+0x298>)
 8021862:	781b      	ldrb	r3, [r3, #0]
 8021864:	2b02      	cmp	r3, #2
 8021866:	d003      	beq.n	8021870 <ConsoleTask_Start+0x130>
				printf("USB is not connected!\r\n");
 8021868:	485c      	ldr	r0, [pc, #368]	; (80219dc <ConsoleTask_Start+0x29c>)
 802186a:	f018 fca9 	bl	803a1c0 <puts>
				continue;
 802186e:	e0a6      	b.n	80219be <ConsoleTask_Start+0x27e>
			}


			printf("Mounting the USB...\r\n");
 8021870:	485b      	ldr	r0, [pc, #364]	; (80219e0 <ConsoleTask_Start+0x2a0>)
 8021872:	f018 fca5 	bl	803a1c0 <puts>

			if(f_mount(&USBHFatFS, (TCHAR const*)USBHPath, 0) != FR_OK)
 8021876:	2200      	movs	r2, #0
 8021878:	495a      	ldr	r1, [pc, #360]	; (80219e4 <ConsoleTask_Start+0x2a4>)
 802187a:	485b      	ldr	r0, [pc, #364]	; (80219e8 <ConsoleTask_Start+0x2a8>)
 802187c:	f012 fada 	bl	8033e34 <f_mount>
 8021880:	4603      	mov	r3, r0
 8021882:	2b00      	cmp	r3, #0
 8021884:	d004      	beq.n	8021890 <ConsoleTask_Start+0x150>
			{
				printf("Mounting error!\r\n");
 8021886:	4859      	ldr	r0, [pc, #356]	; (80219ec <ConsoleTask_Start+0x2ac>)
 8021888:	f018 fc9a 	bl	803a1c0 <puts>
				Error_Handler();
 802188c:	f000 f8e8 	bl	8021a60 <Error_Handler>
			}

			printf("Mounting the USB is done.\r\n");
 8021890:	4857      	ldr	r0, [pc, #348]	; (80219f0 <ConsoleTask_Start+0x2b0>)
 8021892:	f018 fc95 	bl	803a1c0 <puts>
 8021896:	e08f      	b.n	80219b8 <ConsoleTask_Start+0x278>
		}
		else if(!strncmp(trimmed_command , "unmount" , 7))
 8021898:	2207      	movs	r2, #7
 802189a:	4956      	ldr	r1, [pc, #344]	; (80219f4 <ConsoleTask_Start+0x2b4>)
 802189c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802189e:	f018 fcd4 	bl	803a24a <strncmp>
 80218a2:	4603      	mov	r3, r0
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d113      	bne.n	80218d0 <ConsoleTask_Start+0x190>
		{
			printf("Unmounting the USB...\r\n");
 80218a8:	4853      	ldr	r0, [pc, #332]	; (80219f8 <ConsoleTask_Start+0x2b8>)
 80218aa:	f018 fc89 	bl	803a1c0 <puts>

			if(f_mount(NULL, (TCHAR const*)USBHPath, 0) != FR_OK)
 80218ae:	2200      	movs	r2, #0
 80218b0:	494c      	ldr	r1, [pc, #304]	; (80219e4 <ConsoleTask_Start+0x2a4>)
 80218b2:	2000      	movs	r0, #0
 80218b4:	f012 fabe 	bl	8033e34 <f_mount>
 80218b8:	4603      	mov	r3, r0
 80218ba:	2b00      	cmp	r3, #0
 80218bc:	d004      	beq.n	80218c8 <ConsoleTask_Start+0x188>
			{
				printf("Unmounting error!\r\n");
 80218be:	484f      	ldr	r0, [pc, #316]	; (80219fc <ConsoleTask_Start+0x2bc>)
 80218c0:	f018 fc7e 	bl	803a1c0 <puts>
				Error_Handler();
 80218c4:	f000 f8cc 	bl	8021a60 <Error_Handler>
			}

			printf("Unmounting the USB is done.\r\n");
 80218c8:	484d      	ldr	r0, [pc, #308]	; (8021a00 <ConsoleTask_Start+0x2c0>)
 80218ca:	f018 fc79 	bl	803a1c0 <puts>
 80218ce:	e073      	b.n	80219b8 <ConsoleTask_Start+0x278>

		}
		else if(!strncmp(trimmed_command , "pwd" , 3))
 80218d0:	2203      	movs	r2, #3
 80218d2:	494c      	ldr	r1, [pc, #304]	; (8021a04 <ConsoleTask_Start+0x2c4>)
 80218d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80218d6:	f018 fcb8 	bl	803a24a <strncmp>
 80218da:	4603      	mov	r3, r0
 80218dc:	2b00      	cmp	r3, #0
 80218de:	d10a      	bne.n	80218f6 <ConsoleTask_Start+0x1b6>
		{
			fr = f_getcwd(str, SZ_STR);  /* Get current directory path */
 80218e0:	69f9      	ldr	r1, [r7, #28]
 80218e2:	6978      	ldr	r0, [r7, #20]
 80218e4:	f013 fb42 	bl	8034f6c <f_getcwd>
 80218e8:	4603      	mov	r3, r0
 80218ea:	73fb      	strb	r3, [r7, #15]
			printf("%s\r\n", str);
 80218ec:	6979      	ldr	r1, [r7, #20]
 80218ee:	4846      	ldr	r0, [pc, #280]	; (8021a08 <ConsoleTask_Start+0x2c8>)
 80218f0:	f018 fbe0 	bl	803a0b4 <iprintf>
 80218f4:	e060      	b.n	80219b8 <ConsoleTask_Start+0x278>
		}
		else if(!strncmp(trimmed_command , "ls" , 2)){
 80218f6:	2202      	movs	r2, #2
 80218f8:	4944      	ldr	r1, [pc, #272]	; (8021a0c <ConsoleTask_Start+0x2cc>)
 80218fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80218fc:	f018 fca5 	bl	803a24a <strncmp>
 8021900:	4603      	mov	r3, r0
 8021902:	2b00      	cmp	r3, #0
 8021904:	d113      	bne.n	802192e <ConsoleTask_Start+0x1ee>
			char *buf = malloc(30*sizeof(char));
 8021906:	201e      	movs	r0, #30
 8021908:	f018 face 	bl	8039ea8 <malloc>
 802190c:	4603      	mov	r3, r0
 802190e:	613b      	str	r3, [r7, #16]
			strcpy(buf, "/");
 8021910:	693b      	ldr	r3, [r7, #16]
 8021912:	493f      	ldr	r1, [pc, #252]	; (8021a10 <ConsoleTask_Start+0x2d0>)
 8021914:	461a      	mov	r2, r3
 8021916:	460b      	mov	r3, r1
 8021918:	881b      	ldrh	r3, [r3, #0]
 802191a:	8013      	strh	r3, [r2, #0]
			fr = scan_all_files(buf);
 802191c:	6938      	ldr	r0, [r7, #16]
 802191e:	f7fe fee1 	bl	80206e4 <scan_all_files>
 8021922:	4603      	mov	r3, r0
 8021924:	73fb      	strb	r3, [r7, #15]
			free(buf);
 8021926:	6938      	ldr	r0, [r7, #16]
 8021928:	f018 fac6 	bl	8039eb8 <free>
 802192c:	e044      	b.n	80219b8 <ConsoleTask_Start+0x278>
		}
		else if(!strncmp(trimmed_command , "touch" , 5))
 802192e:	2205      	movs	r2, #5
 8021930:	4938      	ldr	r1, [pc, #224]	; (8021a14 <ConsoleTask_Start+0x2d4>)
 8021932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021934:	f018 fc89 	bl	803a24a <strncmp>
 8021938:	4603      	mov	r3, r0
 802193a:	2b00      	cmp	r3, #0
 802193c:	d105      	bne.n	802194a <ConsoleTask_Start+0x20a>
		{
			create_file(trimmed_command + 5);
 802193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021940:	3305      	adds	r3, #5
 8021942:	4618      	mov	r0, r3
 8021944:	f7fe ff4e 	bl	80207e4 <create_file>
 8021948:	e036      	b.n	80219b8 <ConsoleTask_Start+0x278>
		}
		else if(!strncmp(trimmed_command , "rm" , 2))
 802194a:	2202      	movs	r2, #2
 802194c:	4932      	ldr	r1, [pc, #200]	; (8021a18 <ConsoleTask_Start+0x2d8>)
 802194e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021950:	f018 fc7b 	bl	803a24a <strncmp>
 8021954:	4603      	mov	r3, r0
 8021956:	2b00      	cmp	r3, #0
 8021958:	d105      	bne.n	8021966 <ConsoleTask_Start+0x226>
		{
			remove_file(trimmed_command+2);
 802195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802195c:	3302      	adds	r3, #2
 802195e:	4618      	mov	r0, r3
 8021960:	f7fe ffa0 	bl	80208a4 <remove_file>
 8021964:	e028      	b.n	80219b8 <ConsoleTask_Start+0x278>
		}
		else if(!strncmp(trimmed_command , "mkdir" , 5))
 8021966:	2205      	movs	r2, #5
 8021968:	492c      	ldr	r1, [pc, #176]	; (8021a1c <ConsoleTask_Start+0x2dc>)
 802196a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802196c:	f018 fc6d 	bl	803a24a <strncmp>
 8021970:	4603      	mov	r3, r0
 8021972:	2b00      	cmp	r3, #0
 8021974:	d105      	bne.n	8021982 <ConsoleTask_Start+0x242>
		{
			create_dir(trimmed_command+5);
 8021976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021978:	3305      	adds	r3, #5
 802197a:	4618      	mov	r0, r3
 802197c:	f7fe ffd8 	bl	8020930 <create_dir>
 8021980:	e01a      	b.n	80219b8 <ConsoleTask_Start+0x278>
		}else if(!strncmp(trimmed_command , "echo" , 4))
 8021982:	2204      	movs	r2, #4
 8021984:	4926      	ldr	r1, [pc, #152]	; (8021a20 <ConsoleTask_Start+0x2e0>)
 8021986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021988:	f018 fc5f 	bl	803a24a <strncmp>
 802198c:	4603      	mov	r3, r0
 802198e:	2b00      	cmp	r3, #0
 8021990:	d105      	bne.n	802199e <ConsoleTask_Start+0x25e>
		{
			echo(trimmed_command+4);
 8021992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021994:	3304      	adds	r3, #4
 8021996:	4618      	mov	r0, r3
 8021998:	f7ff f8ec 	bl	8020b74 <echo>
 802199c:	e00c      	b.n	80219b8 <ConsoleTask_Start+0x278>
		}else if(!strncmp(trimmed_command , "cat" , 3))
 802199e:	2203      	movs	r2, #3
 80219a0:	4920      	ldr	r1, [pc, #128]	; (8021a24 <ConsoleTask_Start+0x2e4>)
 80219a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80219a4:	f018 fc51 	bl	803a24a <strncmp>
 80219a8:	4603      	mov	r3, r0
 80219aa:	2b00      	cmp	r3, #0
 80219ac:	d104      	bne.n	80219b8 <ConsoleTask_Start+0x278>
		{
			read_file(trimmed_command+3);
 80219ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219b0:	3303      	adds	r3, #3
 80219b2:	4618      	mov	r0, r3
 80219b4:	f7ff f84e 	bl	8020a54 <read_file>

	}

	//if received_command

    osDelay(1);
 80219b8:	2001      	movs	r0, #1
 80219ba:	f014 fa98 	bl	8035eee <osDelay>
	ulTaskNotifyTake(pdTRUE,          /* Clear the notification value before exiting. */
 80219be:	e6fe      	b.n	80217be <ConsoleTask_Start+0x7e>
 80219c0:	0803b65c 	.word	0x0803b65c
 80219c4:	0803b674 	.word	0x0803b674
 80219c8:	0803b68c 	.word	0x0803b68c
 80219cc:	24000ab0 	.word	0x24000ab0
 80219d0:	0803b6a4 	.word	0x0803b6a4
 80219d4:	0803b6b0 	.word	0x0803b6b0
 80219d8:	24006ec8 	.word	0x24006ec8
 80219dc:	0803b6b8 	.word	0x0803b6b8
 80219e0:	0803b6d0 	.word	0x0803b6d0
 80219e4:	24000b4c 	.word	0x24000b4c
 80219e8:	24000b50 	.word	0x24000b50
 80219ec:	0803b6e8 	.word	0x0803b6e8
 80219f0:	0803b6fc 	.word	0x0803b6fc
 80219f4:	0803b718 	.word	0x0803b718
 80219f8:	0803b720 	.word	0x0803b720
 80219fc:	0803b738 	.word	0x0803b738
 8021a00:	0803b74c 	.word	0x0803b74c
 8021a04:	0803b76c 	.word	0x0803b76c
 8021a08:	0803b770 	.word	0x0803b770
 8021a0c:	0803b778 	.word	0x0803b778
 8021a10:	0803b77c 	.word	0x0803b77c
 8021a14:	0803b780 	.word	0x0803b780
 8021a18:	0803b788 	.word	0x0803b788
 8021a1c:	0803b78c 	.word	0x0803b78c
 8021a20:	0803b794 	.word	0x0803b794
 8021a24:	0803b79c 	.word	0x0803b79c

08021a28 <Timer1_Callback>:
  /* USER CODE END ConsoleTask_Start */
}

/* Timer1_Callback function */
void Timer1_Callback(void const * argument)
{
 8021a28:	b480      	push	{r7}
 8021a2a:	b083      	sub	sp, #12
 8021a2c:	af00      	add	r7, sp, #0
 8021a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer1_Callback */

  /* USER CODE END Timer1_Callback */
}
 8021a30:	bf00      	nop
 8021a32:	370c      	adds	r7, #12
 8021a34:	46bd      	mov	sp, r7
 8021a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a3a:	4770      	bx	lr

08021a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021a3c:	b580      	push	{r7, lr}
 8021a3e:	b082      	sub	sp, #8
 8021a40:	af00      	add	r7, sp, #0
 8021a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	681b      	ldr	r3, [r3, #0]
 8021a48:	4a04      	ldr	r2, [pc, #16]	; (8021a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8021a4a:	4293      	cmp	r3, r2
 8021a4c:	d101      	bne.n	8021a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8021a4e:	f000 fb13 	bl	8022078 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8021a52:	bf00      	nop
 8021a54:	3708      	adds	r7, #8
 8021a56:	46bd      	mov	sp, r7
 8021a58:	bd80      	pop	{r7, pc}
 8021a5a:	bf00      	nop
 8021a5c:	40010000 	.word	0x40010000

08021a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8021a60:	b480      	push	{r7}
 8021a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021a64:	b672      	cpsid	i
}
 8021a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8021a68:	e7fe      	b.n	8021a68 <Error_Handler+0x8>
	...

08021a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021a6c:	b580      	push	{r7, lr}
 8021a6e:	b082      	sub	sp, #8
 8021a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021a72:	4b0c      	ldr	r3, [pc, #48]	; (8021aa4 <HAL_MspInit+0x38>)
 8021a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8021a78:	4a0a      	ldr	r2, [pc, #40]	; (8021aa4 <HAL_MspInit+0x38>)
 8021a7a:	f043 0302 	orr.w	r3, r3, #2
 8021a7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8021a82:	4b08      	ldr	r3, [pc, #32]	; (8021aa4 <HAL_MspInit+0x38>)
 8021a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8021a88:	f003 0302 	and.w	r3, r3, #2
 8021a8c:	607b      	str	r3, [r7, #4]
 8021a8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8021a90:	2200      	movs	r2, #0
 8021a92:	210f      	movs	r1, #15
 8021a94:	f06f 0001 	mvn.w	r0, #1
 8021a98:	f000 fbea 	bl	8022270 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8021a9c:	bf00      	nop
 8021a9e:	3708      	adds	r7, #8
 8021aa0:	46bd      	mov	sp, r7
 8021aa2:	bd80      	pop	{r7, pc}
 8021aa4:	58024400 	.word	0x58024400

08021aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8021aa8:	b580      	push	{r7, lr}
 8021aaa:	b0b6      	sub	sp, #216	; 0xd8
 8021aac:	af00      	add	r7, sp, #0
 8021aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021ab0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8021ab4:	2200      	movs	r2, #0
 8021ab6:	601a      	str	r2, [r3, #0]
 8021ab8:	605a      	str	r2, [r3, #4]
 8021aba:	609a      	str	r2, [r3, #8]
 8021abc:	60da      	str	r2, [r3, #12]
 8021abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8021ac0:	f107 0310 	add.w	r3, r7, #16
 8021ac4:	22b4      	movs	r2, #180	; 0xb4
 8021ac6:	2100      	movs	r1, #0
 8021ac8:	4618      	mov	r0, r3
 8021aca:	f018 fa0b 	bl	8039ee4 <memset>
  if(huart->Instance==USART3)
 8021ace:	687b      	ldr	r3, [r7, #4]
 8021ad0:	681b      	ldr	r3, [r3, #0]
 8021ad2:	4a57      	ldr	r2, [pc, #348]	; (8021c30 <HAL_UART_MspInit+0x188>)
 8021ad4:	4293      	cmp	r3, r2
 8021ad6:	f040 80a6 	bne.w	8021c26 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8021ada:	2302      	movs	r3, #2
 8021adc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8021ade:	2300      	movs	r3, #0
 8021ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021ae4:	f107 0310 	add.w	r3, r7, #16
 8021ae8:	4618      	mov	r0, r3
 8021aea:	f005 ffcf 	bl	8027a8c <HAL_RCCEx_PeriphCLKConfig>
 8021aee:	4603      	mov	r3, r0
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	d001      	beq.n	8021af8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8021af4:	f7ff ffb4 	bl	8021a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8021af8:	4b4e      	ldr	r3, [pc, #312]	; (8021c34 <HAL_UART_MspInit+0x18c>)
 8021afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021afe:	4a4d      	ldr	r2, [pc, #308]	; (8021c34 <HAL_UART_MspInit+0x18c>)
 8021b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021b04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8021b08:	4b4a      	ldr	r3, [pc, #296]	; (8021c34 <HAL_UART_MspInit+0x18c>)
 8021b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8021b12:	60fb      	str	r3, [r7, #12]
 8021b14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021b16:	4b47      	ldr	r3, [pc, #284]	; (8021c34 <HAL_UART_MspInit+0x18c>)
 8021b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021b1c:	4a45      	ldr	r2, [pc, #276]	; (8021c34 <HAL_UART_MspInit+0x18c>)
 8021b1e:	f043 0308 	orr.w	r3, r3, #8
 8021b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8021b26:	4b43      	ldr	r3, [pc, #268]	; (8021c34 <HAL_UART_MspInit+0x18c>)
 8021b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021b2c:	f003 0308 	and.w	r3, r3, #8
 8021b30:	60bb      	str	r3, [r7, #8]
 8021b32:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8021b34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8021b38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b3c:	2302      	movs	r3, #2
 8021b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b42:	2300      	movs	r3, #0
 8021b44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021b48:	2300      	movs	r3, #0
 8021b4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8021b4e:	2307      	movs	r3, #7
 8021b50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021b54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8021b58:	4619      	mov	r1, r3
 8021b5a:	4837      	ldr	r0, [pc, #220]	; (8021c38 <HAL_UART_MspInit+0x190>)
 8021b5c:	f003 f9ea 	bl	8024f34 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8021b60:	4b36      	ldr	r3, [pc, #216]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021b62:	4a37      	ldr	r2, [pc, #220]	; (8021c40 <HAL_UART_MspInit+0x198>)
 8021b64:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8021b66:	4b35      	ldr	r3, [pc, #212]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021b68:	222e      	movs	r2, #46	; 0x2e
 8021b6a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8021b6c:	4b33      	ldr	r3, [pc, #204]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021b6e:	2240      	movs	r2, #64	; 0x40
 8021b70:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8021b72:	4b32      	ldr	r3, [pc, #200]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021b74:	2200      	movs	r2, #0
 8021b76:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8021b78:	4b30      	ldr	r3, [pc, #192]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021b7e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8021b80:	4b2e      	ldr	r3, [pc, #184]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021b82:	2200      	movs	r2, #0
 8021b84:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8021b86:	4b2d      	ldr	r3, [pc, #180]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021b88:	2200      	movs	r2, #0
 8021b8a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8021b8c:	4b2b      	ldr	r3, [pc, #172]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021b8e:	2200      	movs	r2, #0
 8021b90:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8021b92:	4b2a      	ldr	r3, [pc, #168]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021b94:	2200      	movs	r2, #0
 8021b96:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8021b98:	4b28      	ldr	r3, [pc, #160]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021b9a:	2200      	movs	r2, #0
 8021b9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8021b9e:	4827      	ldr	r0, [pc, #156]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021ba0:	f000 fb8e 	bl	80222c0 <HAL_DMA_Init>
 8021ba4:	4603      	mov	r3, r0
 8021ba6:	2b00      	cmp	r3, #0
 8021ba8:	d001      	beq.n	8021bae <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8021baa:	f7ff ff59 	bl	8021a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8021bae:	687b      	ldr	r3, [r7, #4]
 8021bb0:	4a22      	ldr	r2, [pc, #136]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021bb2:	679a      	str	r2, [r3, #120]	; 0x78
 8021bb4:	4a21      	ldr	r2, [pc, #132]	; (8021c3c <HAL_UART_MspInit+0x194>)
 8021bb6:	687b      	ldr	r3, [r7, #4]
 8021bb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8021bba:	4b22      	ldr	r3, [pc, #136]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021bbc:	4a22      	ldr	r2, [pc, #136]	; (8021c48 <HAL_UART_MspInit+0x1a0>)
 8021bbe:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8021bc0:	4b20      	ldr	r3, [pc, #128]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021bc2:	222d      	movs	r2, #45	; 0x2d
 8021bc4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8021bc6:	4b1f      	ldr	r3, [pc, #124]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021bc8:	2200      	movs	r2, #0
 8021bca:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8021bcc:	4b1d      	ldr	r3, [pc, #116]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021bce:	2200      	movs	r2, #0
 8021bd0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8021bd2:	4b1c      	ldr	r3, [pc, #112]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021bd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021bd8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8021bda:	4b1a      	ldr	r3, [pc, #104]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021bdc:	2200      	movs	r2, #0
 8021bde:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8021be0:	4b18      	ldr	r3, [pc, #96]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021be2:	2200      	movs	r2, #0
 8021be4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8021be6:	4b17      	ldr	r3, [pc, #92]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8021bec:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8021bee:	4b15      	ldr	r3, [pc, #84]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021bf0:	2200      	movs	r2, #0
 8021bf2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8021bf4:	4b13      	ldr	r3, [pc, #76]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021bf6:	2200      	movs	r2, #0
 8021bf8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8021bfa:	4812      	ldr	r0, [pc, #72]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021bfc:	f000 fb60 	bl	80222c0 <HAL_DMA_Init>
 8021c00:	4603      	mov	r3, r0
 8021c02:	2b00      	cmp	r3, #0
 8021c04:	d001      	beq.n	8021c0a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8021c06:	f7ff ff2b 	bl	8021a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8021c0a:	687b      	ldr	r3, [r7, #4]
 8021c0c:	4a0d      	ldr	r2, [pc, #52]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021c0e:	67da      	str	r2, [r3, #124]	; 0x7c
 8021c10:	4a0c      	ldr	r2, [pc, #48]	; (8021c44 <HAL_UART_MspInit+0x19c>)
 8021c12:	687b      	ldr	r3, [r7, #4]
 8021c14:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8021c16:	2200      	movs	r2, #0
 8021c18:	2105      	movs	r1, #5
 8021c1a:	2027      	movs	r0, #39	; 0x27
 8021c1c:	f000 fb28 	bl	8022270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8021c20:	2027      	movs	r0, #39	; 0x27
 8021c22:	f000 fb3f 	bl	80222a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8021c26:	bf00      	nop
 8021c28:	37d8      	adds	r7, #216	; 0xd8
 8021c2a:	46bd      	mov	sp, r7
 8021c2c:	bd80      	pop	{r7, pc}
 8021c2e:	bf00      	nop
 8021c30:	40004800 	.word	0x40004800
 8021c34:	58024400 	.word	0x58024400
 8021c38:	58020c00 	.word	0x58020c00
 8021c3c:	2400091c 	.word	0x2400091c
 8021c40:	40020010 	.word	0x40020010
 8021c44:	24000994 	.word	0x24000994
 8021c48:	40020028 	.word	0x40020028

08021c4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021c4c:	b580      	push	{r7, lr}
 8021c4e:	b08e      	sub	sp, #56	; 0x38
 8021c50:	af00      	add	r7, sp, #0
 8021c52:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	2b0f      	cmp	r3, #15
 8021c58:	d844      	bhi.n	8021ce4 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8021c5a:	2200      	movs	r2, #0
 8021c5c:	6879      	ldr	r1, [r7, #4]
 8021c5e:	2019      	movs	r0, #25
 8021c60:	f000 fb06 	bl	8022270 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8021c64:	2019      	movs	r0, #25
 8021c66:	f000 fb1d 	bl	80222a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8021c6a:	4a24      	ldr	r2, [pc, #144]	; (8021cfc <HAL_InitTick+0xb0>)
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8021c70:	4b23      	ldr	r3, [pc, #140]	; (8021d00 <HAL_InitTick+0xb4>)
 8021c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8021c76:	4a22      	ldr	r2, [pc, #136]	; (8021d00 <HAL_InitTick+0xb4>)
 8021c78:	f043 0301 	orr.w	r3, r3, #1
 8021c7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8021c80:	4b1f      	ldr	r3, [pc, #124]	; (8021d00 <HAL_InitTick+0xb4>)
 8021c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8021c86:	f003 0301 	and.w	r3, r3, #1
 8021c8a:	60bb      	str	r3, [r7, #8]
 8021c8c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8021c8e:	f107 020c 	add.w	r2, r7, #12
 8021c92:	f107 0310 	add.w	r3, r7, #16
 8021c96:	4611      	mov	r1, r2
 8021c98:	4618      	mov	r0, r3
 8021c9a:	f005 feb5 	bl	8027a08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8021c9e:	f005 fe9d 	bl	80279dc <HAL_RCC_GetPCLK2Freq>
 8021ca2:	4603      	mov	r3, r0
 8021ca4:	005b      	lsls	r3, r3, #1
 8021ca6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8021ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021caa:	4a16      	ldr	r2, [pc, #88]	; (8021d04 <HAL_InitTick+0xb8>)
 8021cac:	fba2 2303 	umull	r2, r3, r2, r3
 8021cb0:	0c9b      	lsrs	r3, r3, #18
 8021cb2:	3b01      	subs	r3, #1
 8021cb4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8021cb6:	4b14      	ldr	r3, [pc, #80]	; (8021d08 <HAL_InitTick+0xbc>)
 8021cb8:	4a14      	ldr	r2, [pc, #80]	; (8021d0c <HAL_InitTick+0xc0>)
 8021cba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8021cbc:	4b12      	ldr	r3, [pc, #72]	; (8021d08 <HAL_InitTick+0xbc>)
 8021cbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8021cc2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8021cc4:	4a10      	ldr	r2, [pc, #64]	; (8021d08 <HAL_InitTick+0xbc>)
 8021cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cc8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8021cca:	4b0f      	ldr	r3, [pc, #60]	; (8021d08 <HAL_InitTick+0xbc>)
 8021ccc:	2200      	movs	r2, #0
 8021cce:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021cd0:	4b0d      	ldr	r3, [pc, #52]	; (8021d08 <HAL_InitTick+0xbc>)
 8021cd2:	2200      	movs	r2, #0
 8021cd4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8021cd6:	480c      	ldr	r0, [pc, #48]	; (8021d08 <HAL_InitTick+0xbc>)
 8021cd8:	f007 f9f4 	bl	80290c4 <HAL_TIM_Base_Init>
 8021cdc:	4603      	mov	r3, r0
 8021cde:	2b00      	cmp	r3, #0
 8021ce0:	d107      	bne.n	8021cf2 <HAL_InitTick+0xa6>
 8021ce2:	e001      	b.n	8021ce8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8021ce4:	2301      	movs	r3, #1
 8021ce6:	e005      	b.n	8021cf4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8021ce8:	4807      	ldr	r0, [pc, #28]	; (8021d08 <HAL_InitTick+0xbc>)
 8021cea:	f007 fa4d 	bl	8029188 <HAL_TIM_Base_Start_IT>
 8021cee:	4603      	mov	r3, r0
 8021cf0:	e000      	b.n	8021cf4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8021cf2:	2301      	movs	r3, #1
}
 8021cf4:	4618      	mov	r0, r3
 8021cf6:	3738      	adds	r7, #56	; 0x38
 8021cf8:	46bd      	mov	sp, r7
 8021cfa:	bd80      	pop	{r7, pc}
 8021cfc:	24000008 	.word	0x24000008
 8021d00:	58024400 	.word	0x58024400
 8021d04:	431bde83 	.word	0x431bde83
 8021d08:	24000af4 	.word	0x24000af4
 8021d0c:	40010000 	.word	0x40010000

08021d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021d10:	b480      	push	{r7}
 8021d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021d14:	e7fe      	b.n	8021d14 <NMI_Handler+0x4>

08021d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021d16:	b480      	push	{r7}
 8021d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021d1a:	e7fe      	b.n	8021d1a <HardFault_Handler+0x4>

08021d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021d1c:	b480      	push	{r7}
 8021d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021d20:	e7fe      	b.n	8021d20 <MemManage_Handler+0x4>

08021d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021d22:	b480      	push	{r7}
 8021d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021d26:	e7fe      	b.n	8021d26 <BusFault_Handler+0x4>

08021d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021d28:	b480      	push	{r7}
 8021d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021d2c:	e7fe      	b.n	8021d2c <UsageFault_Handler+0x4>

08021d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021d2e:	b480      	push	{r7}
 8021d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021d32:	bf00      	nop
 8021d34:	46bd      	mov	sp, r7
 8021d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d3a:	4770      	bx	lr

08021d3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8021d3c:	b580      	push	{r7, lr}
 8021d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8021d40:	4802      	ldr	r0, [pc, #8]	; (8021d4c <DMA1_Stream0_IRQHandler+0x10>)
 8021d42:	f001 fde5 	bl	8023910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8021d46:	bf00      	nop
 8021d48:	bd80      	pop	{r7, pc}
 8021d4a:	bf00      	nop
 8021d4c:	2400091c 	.word	0x2400091c

08021d50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8021d50:	b580      	push	{r7, lr}
 8021d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8021d54:	4802      	ldr	r0, [pc, #8]	; (8021d60 <DMA1_Stream1_IRQHandler+0x10>)
 8021d56:	f001 fddb 	bl	8023910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8021d5a:	bf00      	nop
 8021d5c:	bd80      	pop	{r7, pc}
 8021d5e:	bf00      	nop
 8021d60:	24000994 	.word	0x24000994

08021d64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8021d64:	b580      	push	{r7, lr}
 8021d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8021d68:	4802      	ldr	r0, [pc, #8]	; (8021d74 <TIM1_UP_IRQHandler+0x10>)
 8021d6a:	f007 fa93 	bl	8029294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8021d6e:	bf00      	nop
 8021d70:	bd80      	pop	{r7, pc}
 8021d72:	bf00      	nop
 8021d74:	24000af4 	.word	0x24000af4

08021d78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8021d78:	b580      	push	{r7, lr}
 8021d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8021d7c:	4802      	ldr	r0, [pc, #8]	; (8021d88 <USART3_IRQHandler+0x10>)
 8021d7e:	f007 fd77 	bl	8029870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8021d82:	bf00      	nop
 8021d84:	bd80      	pop	{r7, pc}
 8021d86:	bf00      	nop
 8021d88:	2400088c 	.word	0x2400088c

08021d8c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8021d8c:	b580      	push	{r7, lr}
 8021d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8021d90:	4802      	ldr	r0, [pc, #8]	; (8021d9c <OTG_HS_IRQHandler+0x10>)
 8021d92:	f003 fd15 	bl	80257c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8021d96:	bf00      	nop
 8021d98:	bd80      	pop	{r7, pc}
 8021d9a:	bf00      	nop
 8021d9c:	24006ecc 	.word	0x24006ecc

08021da0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021da0:	b580      	push	{r7, lr}
 8021da2:	b086      	sub	sp, #24
 8021da4:	af00      	add	r7, sp, #0
 8021da6:	60f8      	str	r0, [r7, #12]
 8021da8:	60b9      	str	r1, [r7, #8]
 8021daa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021dac:	2300      	movs	r3, #0
 8021dae:	617b      	str	r3, [r7, #20]
 8021db0:	e00a      	b.n	8021dc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8021db2:	f3af 8000 	nop.w
 8021db6:	4601      	mov	r1, r0
 8021db8:	68bb      	ldr	r3, [r7, #8]
 8021dba:	1c5a      	adds	r2, r3, #1
 8021dbc:	60ba      	str	r2, [r7, #8]
 8021dbe:	b2ca      	uxtb	r2, r1
 8021dc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021dc2:	697b      	ldr	r3, [r7, #20]
 8021dc4:	3301      	adds	r3, #1
 8021dc6:	617b      	str	r3, [r7, #20]
 8021dc8:	697a      	ldr	r2, [r7, #20]
 8021dca:	687b      	ldr	r3, [r7, #4]
 8021dcc:	429a      	cmp	r2, r3
 8021dce:	dbf0      	blt.n	8021db2 <_read+0x12>
	}

return len;
 8021dd0:	687b      	ldr	r3, [r7, #4]
}
 8021dd2:	4618      	mov	r0, r3
 8021dd4:	3718      	adds	r7, #24
 8021dd6:	46bd      	mov	sp, r7
 8021dd8:	bd80      	pop	{r7, pc}

08021dda <_close>:
	}
	return len;
}

int _close(int file)
{
 8021dda:	b480      	push	{r7}
 8021ddc:	b083      	sub	sp, #12
 8021dde:	af00      	add	r7, sp, #0
 8021de0:	6078      	str	r0, [r7, #4]
	return -1;
 8021de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8021de6:	4618      	mov	r0, r3
 8021de8:	370c      	adds	r7, #12
 8021dea:	46bd      	mov	sp, r7
 8021dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021df0:	4770      	bx	lr

08021df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8021df2:	b480      	push	{r7}
 8021df4:	b083      	sub	sp, #12
 8021df6:	af00      	add	r7, sp, #0
 8021df8:	6078      	str	r0, [r7, #4]
 8021dfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8021dfc:	683b      	ldr	r3, [r7, #0]
 8021dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8021e02:	605a      	str	r2, [r3, #4]
	return 0;
 8021e04:	2300      	movs	r3, #0
}
 8021e06:	4618      	mov	r0, r3
 8021e08:	370c      	adds	r7, #12
 8021e0a:	46bd      	mov	sp, r7
 8021e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e10:	4770      	bx	lr

08021e12 <_isatty>:

int _isatty(int file)
{
 8021e12:	b480      	push	{r7}
 8021e14:	b083      	sub	sp, #12
 8021e16:	af00      	add	r7, sp, #0
 8021e18:	6078      	str	r0, [r7, #4]
	return 1;
 8021e1a:	2301      	movs	r3, #1
}
 8021e1c:	4618      	mov	r0, r3
 8021e1e:	370c      	adds	r7, #12
 8021e20:	46bd      	mov	sp, r7
 8021e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e26:	4770      	bx	lr

08021e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021e28:	b480      	push	{r7}
 8021e2a:	b085      	sub	sp, #20
 8021e2c:	af00      	add	r7, sp, #0
 8021e2e:	60f8      	str	r0, [r7, #12]
 8021e30:	60b9      	str	r1, [r7, #8]
 8021e32:	607a      	str	r2, [r7, #4]
	return 0;
 8021e34:	2300      	movs	r3, #0
}
 8021e36:	4618      	mov	r0, r3
 8021e38:	3714      	adds	r7, #20
 8021e3a:	46bd      	mov	sp, r7
 8021e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e40:	4770      	bx	lr
	...

08021e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8021e44:	b580      	push	{r7, lr}
 8021e46:	b086      	sub	sp, #24
 8021e48:	af00      	add	r7, sp, #0
 8021e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021e4c:	4a14      	ldr	r2, [pc, #80]	; (8021ea0 <_sbrk+0x5c>)
 8021e4e:	4b15      	ldr	r3, [pc, #84]	; (8021ea4 <_sbrk+0x60>)
 8021e50:	1ad3      	subs	r3, r2, r3
 8021e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8021e54:	697b      	ldr	r3, [r7, #20]
 8021e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8021e58:	4b13      	ldr	r3, [pc, #76]	; (8021ea8 <_sbrk+0x64>)
 8021e5a:	681b      	ldr	r3, [r3, #0]
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	d102      	bne.n	8021e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8021e60:	4b11      	ldr	r3, [pc, #68]	; (8021ea8 <_sbrk+0x64>)
 8021e62:	4a12      	ldr	r2, [pc, #72]	; (8021eac <_sbrk+0x68>)
 8021e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8021e66:	4b10      	ldr	r3, [pc, #64]	; (8021ea8 <_sbrk+0x64>)
 8021e68:	681a      	ldr	r2, [r3, #0]
 8021e6a:	687b      	ldr	r3, [r7, #4]
 8021e6c:	4413      	add	r3, r2
 8021e6e:	693a      	ldr	r2, [r7, #16]
 8021e70:	429a      	cmp	r2, r3
 8021e72:	d207      	bcs.n	8021e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8021e74:	f017 ffee 	bl	8039e54 <__errno>
 8021e78:	4603      	mov	r3, r0
 8021e7a:	220c      	movs	r2, #12
 8021e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8021e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021e82:	e009      	b.n	8021e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8021e84:	4b08      	ldr	r3, [pc, #32]	; (8021ea8 <_sbrk+0x64>)
 8021e86:	681b      	ldr	r3, [r3, #0]
 8021e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8021e8a:	4b07      	ldr	r3, [pc, #28]	; (8021ea8 <_sbrk+0x64>)
 8021e8c:	681a      	ldr	r2, [r3, #0]
 8021e8e:	687b      	ldr	r3, [r7, #4]
 8021e90:	4413      	add	r3, r2
 8021e92:	4a05      	ldr	r2, [pc, #20]	; (8021ea8 <_sbrk+0x64>)
 8021e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8021e96:	68fb      	ldr	r3, [r7, #12]
}
 8021e98:	4618      	mov	r0, r3
 8021e9a:	3718      	adds	r7, #24
 8021e9c:	46bd      	mov	sp, r7
 8021e9e:	bd80      	pop	{r7, pc}
 8021ea0:	24050000 	.word	0x24050000
 8021ea4:	00000400 	.word	0x00000400
 8021ea8:	24000b40 	.word	0x24000b40
 8021eac:	240071e0 	.word	0x240071e0

08021eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8021eb0:	b480      	push	{r7}
 8021eb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8021eb4:	4b34      	ldr	r3, [pc, #208]	; (8021f88 <SystemInit+0xd8>)
 8021eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021eba:	4a33      	ldr	r2, [pc, #204]	; (8021f88 <SystemInit+0xd8>)
 8021ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8021ec4:	4b31      	ldr	r3, [pc, #196]	; (8021f8c <SystemInit+0xdc>)
 8021ec6:	681b      	ldr	r3, [r3, #0]
 8021ec8:	f003 030f 	and.w	r3, r3, #15
 8021ecc:	2b06      	cmp	r3, #6
 8021ece:	d807      	bhi.n	8021ee0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8021ed0:	4b2e      	ldr	r3, [pc, #184]	; (8021f8c <SystemInit+0xdc>)
 8021ed2:	681b      	ldr	r3, [r3, #0]
 8021ed4:	f023 030f 	bic.w	r3, r3, #15
 8021ed8:	4a2c      	ldr	r2, [pc, #176]	; (8021f8c <SystemInit+0xdc>)
 8021eda:	f043 0307 	orr.w	r3, r3, #7
 8021ede:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8021ee0:	4b2b      	ldr	r3, [pc, #172]	; (8021f90 <SystemInit+0xe0>)
 8021ee2:	681b      	ldr	r3, [r3, #0]
 8021ee4:	4a2a      	ldr	r2, [pc, #168]	; (8021f90 <SystemInit+0xe0>)
 8021ee6:	f043 0301 	orr.w	r3, r3, #1
 8021eea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8021eec:	4b28      	ldr	r3, [pc, #160]	; (8021f90 <SystemInit+0xe0>)
 8021eee:	2200      	movs	r2, #0
 8021ef0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8021ef2:	4b27      	ldr	r3, [pc, #156]	; (8021f90 <SystemInit+0xe0>)
 8021ef4:	681a      	ldr	r2, [r3, #0]
 8021ef6:	4926      	ldr	r1, [pc, #152]	; (8021f90 <SystemInit+0xe0>)
 8021ef8:	4b26      	ldr	r3, [pc, #152]	; (8021f94 <SystemInit+0xe4>)
 8021efa:	4013      	ands	r3, r2
 8021efc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8021efe:	4b23      	ldr	r3, [pc, #140]	; (8021f8c <SystemInit+0xdc>)
 8021f00:	681b      	ldr	r3, [r3, #0]
 8021f02:	f003 0308 	and.w	r3, r3, #8
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	d007      	beq.n	8021f1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8021f0a:	4b20      	ldr	r3, [pc, #128]	; (8021f8c <SystemInit+0xdc>)
 8021f0c:	681b      	ldr	r3, [r3, #0]
 8021f0e:	f023 030f 	bic.w	r3, r3, #15
 8021f12:	4a1e      	ldr	r2, [pc, #120]	; (8021f8c <SystemInit+0xdc>)
 8021f14:	f043 0307 	orr.w	r3, r3, #7
 8021f18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8021f1a:	4b1d      	ldr	r3, [pc, #116]	; (8021f90 <SystemInit+0xe0>)
 8021f1c:	2200      	movs	r2, #0
 8021f1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8021f20:	4b1b      	ldr	r3, [pc, #108]	; (8021f90 <SystemInit+0xe0>)
 8021f22:	2200      	movs	r2, #0
 8021f24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8021f26:	4b1a      	ldr	r3, [pc, #104]	; (8021f90 <SystemInit+0xe0>)
 8021f28:	2200      	movs	r2, #0
 8021f2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8021f2c:	4b18      	ldr	r3, [pc, #96]	; (8021f90 <SystemInit+0xe0>)
 8021f2e:	4a1a      	ldr	r2, [pc, #104]	; (8021f98 <SystemInit+0xe8>)
 8021f30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8021f32:	4b17      	ldr	r3, [pc, #92]	; (8021f90 <SystemInit+0xe0>)
 8021f34:	4a19      	ldr	r2, [pc, #100]	; (8021f9c <SystemInit+0xec>)
 8021f36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8021f38:	4b15      	ldr	r3, [pc, #84]	; (8021f90 <SystemInit+0xe0>)
 8021f3a:	4a19      	ldr	r2, [pc, #100]	; (8021fa0 <SystemInit+0xf0>)
 8021f3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8021f3e:	4b14      	ldr	r3, [pc, #80]	; (8021f90 <SystemInit+0xe0>)
 8021f40:	2200      	movs	r2, #0
 8021f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8021f44:	4b12      	ldr	r3, [pc, #72]	; (8021f90 <SystemInit+0xe0>)
 8021f46:	4a16      	ldr	r2, [pc, #88]	; (8021fa0 <SystemInit+0xf0>)
 8021f48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8021f4a:	4b11      	ldr	r3, [pc, #68]	; (8021f90 <SystemInit+0xe0>)
 8021f4c:	2200      	movs	r2, #0
 8021f4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8021f50:	4b0f      	ldr	r3, [pc, #60]	; (8021f90 <SystemInit+0xe0>)
 8021f52:	4a13      	ldr	r2, [pc, #76]	; (8021fa0 <SystemInit+0xf0>)
 8021f54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8021f56:	4b0e      	ldr	r3, [pc, #56]	; (8021f90 <SystemInit+0xe0>)
 8021f58:	2200      	movs	r2, #0
 8021f5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8021f5c:	4b0c      	ldr	r3, [pc, #48]	; (8021f90 <SystemInit+0xe0>)
 8021f5e:	681b      	ldr	r3, [r3, #0]
 8021f60:	4a0b      	ldr	r2, [pc, #44]	; (8021f90 <SystemInit+0xe0>)
 8021f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021f66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8021f68:	4b09      	ldr	r3, [pc, #36]	; (8021f90 <SystemInit+0xe0>)
 8021f6a:	2200      	movs	r2, #0
 8021f6c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8021f6e:	4b0d      	ldr	r3, [pc, #52]	; (8021fa4 <SystemInit+0xf4>)
 8021f70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8021f74:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8021f76:	4b04      	ldr	r3, [pc, #16]	; (8021f88 <SystemInit+0xd8>)
 8021f78:	4a0b      	ldr	r2, [pc, #44]	; (8021fa8 <SystemInit+0xf8>)
 8021f7a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8021f7c:	bf00      	nop
 8021f7e:	46bd      	mov	sp, r7
 8021f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f84:	4770      	bx	lr
 8021f86:	bf00      	nop
 8021f88:	e000ed00 	.word	0xe000ed00
 8021f8c:	52002000 	.word	0x52002000
 8021f90:	58024400 	.word	0x58024400
 8021f94:	eaf6ed7f 	.word	0xeaf6ed7f
 8021f98:	02020200 	.word	0x02020200
 8021f9c:	01ff0000 	.word	0x01ff0000
 8021fa0:	01010280 	.word	0x01010280
 8021fa4:	52004000 	.word	0x52004000
 8021fa8:	08020000 	.word	0x08020000

08021fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8021fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021fe4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8021fb0:	f7ff ff7e 	bl	8021eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8021fb4:	480c      	ldr	r0, [pc, #48]	; (8021fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8021fb6:	490d      	ldr	r1, [pc, #52]	; (8021fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8021fb8:	4a0d      	ldr	r2, [pc, #52]	; (8021ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8021fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021fbc:	e002      	b.n	8021fc4 <LoopCopyDataInit>

08021fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021fc2:	3304      	adds	r3, #4

08021fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021fc8:	d3f9      	bcc.n	8021fbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8021fca:	4a0a      	ldr	r2, [pc, #40]	; (8021ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8021fcc:	4c0a      	ldr	r4, [pc, #40]	; (8021ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8021fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021fd0:	e001      	b.n	8021fd6 <LoopFillZerobss>

08021fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8021fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021fd4:	3204      	adds	r2, #4

08021fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021fd8:	d3fb      	bcc.n	8021fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8021fda:	f017 ff41 	bl	8039e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021fde:	f7fe feb9 	bl	8020d54 <main>
  bx  lr
 8021fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8021fe4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8021fe8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8021fec:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8021ff0:	0803bdcc 	.word	0x0803bdcc
  ldr r2, =_sbss
 8021ff4:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8021ff8:	240071e0 	.word	0x240071e0

08021ffc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021ffc:	e7fe      	b.n	8021ffc <ADC3_IRQHandler>
	...

08022000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8022000:	b580      	push	{r7, lr}
 8022002:	b082      	sub	sp, #8
 8022004:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8022006:	2003      	movs	r0, #3
 8022008:	f000 f927 	bl	802225a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802200c:	f005 fb26 	bl	802765c <HAL_RCC_GetSysClockFreq>
 8022010:	4602      	mov	r2, r0
 8022012:	4b15      	ldr	r3, [pc, #84]	; (8022068 <HAL_Init+0x68>)
 8022014:	699b      	ldr	r3, [r3, #24]
 8022016:	0a1b      	lsrs	r3, r3, #8
 8022018:	f003 030f 	and.w	r3, r3, #15
 802201c:	4913      	ldr	r1, [pc, #76]	; (802206c <HAL_Init+0x6c>)
 802201e:	5ccb      	ldrb	r3, [r1, r3]
 8022020:	f003 031f 	and.w	r3, r3, #31
 8022024:	fa22 f303 	lsr.w	r3, r2, r3
 8022028:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802202a:	4b0f      	ldr	r3, [pc, #60]	; (8022068 <HAL_Init+0x68>)
 802202c:	699b      	ldr	r3, [r3, #24]
 802202e:	f003 030f 	and.w	r3, r3, #15
 8022032:	4a0e      	ldr	r2, [pc, #56]	; (802206c <HAL_Init+0x6c>)
 8022034:	5cd3      	ldrb	r3, [r2, r3]
 8022036:	f003 031f 	and.w	r3, r3, #31
 802203a:	687a      	ldr	r2, [r7, #4]
 802203c:	fa22 f303 	lsr.w	r3, r2, r3
 8022040:	4a0b      	ldr	r2, [pc, #44]	; (8022070 <HAL_Init+0x70>)
 8022042:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8022044:	4a0b      	ldr	r2, [pc, #44]	; (8022074 <HAL_Init+0x74>)
 8022046:	687b      	ldr	r3, [r7, #4]
 8022048:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802204a:	200f      	movs	r0, #15
 802204c:	f7ff fdfe 	bl	8021c4c <HAL_InitTick>
 8022050:	4603      	mov	r3, r0
 8022052:	2b00      	cmp	r3, #0
 8022054:	d001      	beq.n	802205a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8022056:	2301      	movs	r3, #1
 8022058:	e002      	b.n	8022060 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802205a:	f7ff fd07 	bl	8021a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802205e:	2300      	movs	r3, #0
}
 8022060:	4618      	mov	r0, r3
 8022062:	3708      	adds	r7, #8
 8022064:	46bd      	mov	sp, r7
 8022066:	bd80      	pop	{r7, pc}
 8022068:	58024400 	.word	0x58024400
 802206c:	0803b890 	.word	0x0803b890
 8022070:	24000004 	.word	0x24000004
 8022074:	24000000 	.word	0x24000000

08022078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8022078:	b480      	push	{r7}
 802207a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802207c:	4b06      	ldr	r3, [pc, #24]	; (8022098 <HAL_IncTick+0x20>)
 802207e:	781b      	ldrb	r3, [r3, #0]
 8022080:	461a      	mov	r2, r3
 8022082:	4b06      	ldr	r3, [pc, #24]	; (802209c <HAL_IncTick+0x24>)
 8022084:	681b      	ldr	r3, [r3, #0]
 8022086:	4413      	add	r3, r2
 8022088:	4a04      	ldr	r2, [pc, #16]	; (802209c <HAL_IncTick+0x24>)
 802208a:	6013      	str	r3, [r2, #0]
}
 802208c:	bf00      	nop
 802208e:	46bd      	mov	sp, r7
 8022090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022094:	4770      	bx	lr
 8022096:	bf00      	nop
 8022098:	2400000c 	.word	0x2400000c
 802209c:	24000b44 	.word	0x24000b44

080220a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80220a0:	b480      	push	{r7}
 80220a2:	af00      	add	r7, sp, #0
  return uwTick;
 80220a4:	4b03      	ldr	r3, [pc, #12]	; (80220b4 <HAL_GetTick+0x14>)
 80220a6:	681b      	ldr	r3, [r3, #0]
}
 80220a8:	4618      	mov	r0, r3
 80220aa:	46bd      	mov	sp, r7
 80220ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220b0:	4770      	bx	lr
 80220b2:	bf00      	nop
 80220b4:	24000b44 	.word	0x24000b44

080220b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80220b8:	b580      	push	{r7, lr}
 80220ba:	b084      	sub	sp, #16
 80220bc:	af00      	add	r7, sp, #0
 80220be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80220c0:	f7ff ffee 	bl	80220a0 <HAL_GetTick>
 80220c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80220c6:	687b      	ldr	r3, [r7, #4]
 80220c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80220ca:	68fb      	ldr	r3, [r7, #12]
 80220cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80220d0:	d005      	beq.n	80220de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80220d2:	4b0a      	ldr	r3, [pc, #40]	; (80220fc <HAL_Delay+0x44>)
 80220d4:	781b      	ldrb	r3, [r3, #0]
 80220d6:	461a      	mov	r2, r3
 80220d8:	68fb      	ldr	r3, [r7, #12]
 80220da:	4413      	add	r3, r2
 80220dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80220de:	bf00      	nop
 80220e0:	f7ff ffde 	bl	80220a0 <HAL_GetTick>
 80220e4:	4602      	mov	r2, r0
 80220e6:	68bb      	ldr	r3, [r7, #8]
 80220e8:	1ad3      	subs	r3, r2, r3
 80220ea:	68fa      	ldr	r2, [r7, #12]
 80220ec:	429a      	cmp	r2, r3
 80220ee:	d8f7      	bhi.n	80220e0 <HAL_Delay+0x28>
  {
  }
}
 80220f0:	bf00      	nop
 80220f2:	bf00      	nop
 80220f4:	3710      	adds	r7, #16
 80220f6:	46bd      	mov	sp, r7
 80220f8:	bd80      	pop	{r7, pc}
 80220fa:	bf00      	nop
 80220fc:	2400000c 	.word	0x2400000c

08022100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022100:	b480      	push	{r7}
 8022102:	b085      	sub	sp, #20
 8022104:	af00      	add	r7, sp, #0
 8022106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8022108:	687b      	ldr	r3, [r7, #4]
 802210a:	f003 0307 	and.w	r3, r3, #7
 802210e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8022110:	4b0b      	ldr	r3, [pc, #44]	; (8022140 <__NVIC_SetPriorityGrouping+0x40>)
 8022112:	68db      	ldr	r3, [r3, #12]
 8022114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8022116:	68ba      	ldr	r2, [r7, #8]
 8022118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802211c:	4013      	ands	r3, r2
 802211e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8022120:	68fb      	ldr	r3, [r7, #12]
 8022122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8022124:	68bb      	ldr	r3, [r7, #8]
 8022126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8022128:	4b06      	ldr	r3, [pc, #24]	; (8022144 <__NVIC_SetPriorityGrouping+0x44>)
 802212a:	4313      	orrs	r3, r2
 802212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802212e:	4a04      	ldr	r2, [pc, #16]	; (8022140 <__NVIC_SetPriorityGrouping+0x40>)
 8022130:	68bb      	ldr	r3, [r7, #8]
 8022132:	60d3      	str	r3, [r2, #12]
}
 8022134:	bf00      	nop
 8022136:	3714      	adds	r7, #20
 8022138:	46bd      	mov	sp, r7
 802213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802213e:	4770      	bx	lr
 8022140:	e000ed00 	.word	0xe000ed00
 8022144:	05fa0000 	.word	0x05fa0000

08022148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8022148:	b480      	push	{r7}
 802214a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802214c:	4b04      	ldr	r3, [pc, #16]	; (8022160 <__NVIC_GetPriorityGrouping+0x18>)
 802214e:	68db      	ldr	r3, [r3, #12]
 8022150:	0a1b      	lsrs	r3, r3, #8
 8022152:	f003 0307 	and.w	r3, r3, #7
}
 8022156:	4618      	mov	r0, r3
 8022158:	46bd      	mov	sp, r7
 802215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802215e:	4770      	bx	lr
 8022160:	e000ed00 	.word	0xe000ed00

08022164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022164:	b480      	push	{r7}
 8022166:	b083      	sub	sp, #12
 8022168:	af00      	add	r7, sp, #0
 802216a:	4603      	mov	r3, r0
 802216c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802216e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8022172:	2b00      	cmp	r3, #0
 8022174:	db0b      	blt.n	802218e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022176:	88fb      	ldrh	r3, [r7, #6]
 8022178:	f003 021f 	and.w	r2, r3, #31
 802217c:	4907      	ldr	r1, [pc, #28]	; (802219c <__NVIC_EnableIRQ+0x38>)
 802217e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8022182:	095b      	lsrs	r3, r3, #5
 8022184:	2001      	movs	r0, #1
 8022186:	fa00 f202 	lsl.w	r2, r0, r2
 802218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802218e:	bf00      	nop
 8022190:	370c      	adds	r7, #12
 8022192:	46bd      	mov	sp, r7
 8022194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022198:	4770      	bx	lr
 802219a:	bf00      	nop
 802219c:	e000e100 	.word	0xe000e100

080221a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80221a0:	b480      	push	{r7}
 80221a2:	b083      	sub	sp, #12
 80221a4:	af00      	add	r7, sp, #0
 80221a6:	4603      	mov	r3, r0
 80221a8:	6039      	str	r1, [r7, #0]
 80221aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80221ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80221b0:	2b00      	cmp	r3, #0
 80221b2:	db0a      	blt.n	80221ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80221b4:	683b      	ldr	r3, [r7, #0]
 80221b6:	b2da      	uxtb	r2, r3
 80221b8:	490c      	ldr	r1, [pc, #48]	; (80221ec <__NVIC_SetPriority+0x4c>)
 80221ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80221be:	0112      	lsls	r2, r2, #4
 80221c0:	b2d2      	uxtb	r2, r2
 80221c2:	440b      	add	r3, r1
 80221c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80221c8:	e00a      	b.n	80221e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80221ca:	683b      	ldr	r3, [r7, #0]
 80221cc:	b2da      	uxtb	r2, r3
 80221ce:	4908      	ldr	r1, [pc, #32]	; (80221f0 <__NVIC_SetPriority+0x50>)
 80221d0:	88fb      	ldrh	r3, [r7, #6]
 80221d2:	f003 030f 	and.w	r3, r3, #15
 80221d6:	3b04      	subs	r3, #4
 80221d8:	0112      	lsls	r2, r2, #4
 80221da:	b2d2      	uxtb	r2, r2
 80221dc:	440b      	add	r3, r1
 80221de:	761a      	strb	r2, [r3, #24]
}
 80221e0:	bf00      	nop
 80221e2:	370c      	adds	r7, #12
 80221e4:	46bd      	mov	sp, r7
 80221e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221ea:	4770      	bx	lr
 80221ec:	e000e100 	.word	0xe000e100
 80221f0:	e000ed00 	.word	0xe000ed00

080221f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80221f4:	b480      	push	{r7}
 80221f6:	b089      	sub	sp, #36	; 0x24
 80221f8:	af00      	add	r7, sp, #0
 80221fa:	60f8      	str	r0, [r7, #12]
 80221fc:	60b9      	str	r1, [r7, #8]
 80221fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8022200:	68fb      	ldr	r3, [r7, #12]
 8022202:	f003 0307 	and.w	r3, r3, #7
 8022206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022208:	69fb      	ldr	r3, [r7, #28]
 802220a:	f1c3 0307 	rsb	r3, r3, #7
 802220e:	2b04      	cmp	r3, #4
 8022210:	bf28      	it	cs
 8022212:	2304      	movcs	r3, #4
 8022214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022216:	69fb      	ldr	r3, [r7, #28]
 8022218:	3304      	adds	r3, #4
 802221a:	2b06      	cmp	r3, #6
 802221c:	d902      	bls.n	8022224 <NVIC_EncodePriority+0x30>
 802221e:	69fb      	ldr	r3, [r7, #28]
 8022220:	3b03      	subs	r3, #3
 8022222:	e000      	b.n	8022226 <NVIC_EncodePriority+0x32>
 8022224:	2300      	movs	r3, #0
 8022226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802222c:	69bb      	ldr	r3, [r7, #24]
 802222e:	fa02 f303 	lsl.w	r3, r2, r3
 8022232:	43da      	mvns	r2, r3
 8022234:	68bb      	ldr	r3, [r7, #8]
 8022236:	401a      	ands	r2, r3
 8022238:	697b      	ldr	r3, [r7, #20]
 802223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802223c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022240:	697b      	ldr	r3, [r7, #20]
 8022242:	fa01 f303 	lsl.w	r3, r1, r3
 8022246:	43d9      	mvns	r1, r3
 8022248:	687b      	ldr	r3, [r7, #4]
 802224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802224c:	4313      	orrs	r3, r2
         );
}
 802224e:	4618      	mov	r0, r3
 8022250:	3724      	adds	r7, #36	; 0x24
 8022252:	46bd      	mov	sp, r7
 8022254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022258:	4770      	bx	lr

0802225a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802225a:	b580      	push	{r7, lr}
 802225c:	b082      	sub	sp, #8
 802225e:	af00      	add	r7, sp, #0
 8022260:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8022262:	6878      	ldr	r0, [r7, #4]
 8022264:	f7ff ff4c 	bl	8022100 <__NVIC_SetPriorityGrouping>
}
 8022268:	bf00      	nop
 802226a:	3708      	adds	r7, #8
 802226c:	46bd      	mov	sp, r7
 802226e:	bd80      	pop	{r7, pc}

08022270 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8022270:	b580      	push	{r7, lr}
 8022272:	b086      	sub	sp, #24
 8022274:	af00      	add	r7, sp, #0
 8022276:	4603      	mov	r3, r0
 8022278:	60b9      	str	r1, [r7, #8]
 802227a:	607a      	str	r2, [r7, #4]
 802227c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802227e:	f7ff ff63 	bl	8022148 <__NVIC_GetPriorityGrouping>
 8022282:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8022284:	687a      	ldr	r2, [r7, #4]
 8022286:	68b9      	ldr	r1, [r7, #8]
 8022288:	6978      	ldr	r0, [r7, #20]
 802228a:	f7ff ffb3 	bl	80221f4 <NVIC_EncodePriority>
 802228e:	4602      	mov	r2, r0
 8022290:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8022294:	4611      	mov	r1, r2
 8022296:	4618      	mov	r0, r3
 8022298:	f7ff ff82 	bl	80221a0 <__NVIC_SetPriority>
}
 802229c:	bf00      	nop
 802229e:	3718      	adds	r7, #24
 80222a0:	46bd      	mov	sp, r7
 80222a2:	bd80      	pop	{r7, pc}

080222a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80222a4:	b580      	push	{r7, lr}
 80222a6:	b082      	sub	sp, #8
 80222a8:	af00      	add	r7, sp, #0
 80222aa:	4603      	mov	r3, r0
 80222ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80222ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80222b2:	4618      	mov	r0, r3
 80222b4:	f7ff ff56 	bl	8022164 <__NVIC_EnableIRQ>
}
 80222b8:	bf00      	nop
 80222ba:	3708      	adds	r7, #8
 80222bc:	46bd      	mov	sp, r7
 80222be:	bd80      	pop	{r7, pc}

080222c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80222c0:	b580      	push	{r7, lr}
 80222c2:	b086      	sub	sp, #24
 80222c4:	af00      	add	r7, sp, #0
 80222c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80222c8:	f7ff feea 	bl	80220a0 <HAL_GetTick>
 80222cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	2b00      	cmp	r3, #0
 80222d2:	d101      	bne.n	80222d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80222d4:	2301      	movs	r3, #1
 80222d6:	e314      	b.n	8022902 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80222d8:	687b      	ldr	r3, [r7, #4]
 80222da:	681b      	ldr	r3, [r3, #0]
 80222dc:	4a66      	ldr	r2, [pc, #408]	; (8022478 <HAL_DMA_Init+0x1b8>)
 80222de:	4293      	cmp	r3, r2
 80222e0:	d04a      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 80222e2:	687b      	ldr	r3, [r7, #4]
 80222e4:	681b      	ldr	r3, [r3, #0]
 80222e6:	4a65      	ldr	r2, [pc, #404]	; (802247c <HAL_DMA_Init+0x1bc>)
 80222e8:	4293      	cmp	r3, r2
 80222ea:	d045      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 80222ec:	687b      	ldr	r3, [r7, #4]
 80222ee:	681b      	ldr	r3, [r3, #0]
 80222f0:	4a63      	ldr	r2, [pc, #396]	; (8022480 <HAL_DMA_Init+0x1c0>)
 80222f2:	4293      	cmp	r3, r2
 80222f4:	d040      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 80222f6:	687b      	ldr	r3, [r7, #4]
 80222f8:	681b      	ldr	r3, [r3, #0]
 80222fa:	4a62      	ldr	r2, [pc, #392]	; (8022484 <HAL_DMA_Init+0x1c4>)
 80222fc:	4293      	cmp	r3, r2
 80222fe:	d03b      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 8022300:	687b      	ldr	r3, [r7, #4]
 8022302:	681b      	ldr	r3, [r3, #0]
 8022304:	4a60      	ldr	r2, [pc, #384]	; (8022488 <HAL_DMA_Init+0x1c8>)
 8022306:	4293      	cmp	r3, r2
 8022308:	d036      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	681b      	ldr	r3, [r3, #0]
 802230e:	4a5f      	ldr	r2, [pc, #380]	; (802248c <HAL_DMA_Init+0x1cc>)
 8022310:	4293      	cmp	r3, r2
 8022312:	d031      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 8022314:	687b      	ldr	r3, [r7, #4]
 8022316:	681b      	ldr	r3, [r3, #0]
 8022318:	4a5d      	ldr	r2, [pc, #372]	; (8022490 <HAL_DMA_Init+0x1d0>)
 802231a:	4293      	cmp	r3, r2
 802231c:	d02c      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 802231e:	687b      	ldr	r3, [r7, #4]
 8022320:	681b      	ldr	r3, [r3, #0]
 8022322:	4a5c      	ldr	r2, [pc, #368]	; (8022494 <HAL_DMA_Init+0x1d4>)
 8022324:	4293      	cmp	r3, r2
 8022326:	d027      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	681b      	ldr	r3, [r3, #0]
 802232c:	4a5a      	ldr	r2, [pc, #360]	; (8022498 <HAL_DMA_Init+0x1d8>)
 802232e:	4293      	cmp	r3, r2
 8022330:	d022      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	681b      	ldr	r3, [r3, #0]
 8022336:	4a59      	ldr	r2, [pc, #356]	; (802249c <HAL_DMA_Init+0x1dc>)
 8022338:	4293      	cmp	r3, r2
 802233a:	d01d      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 802233c:	687b      	ldr	r3, [r7, #4]
 802233e:	681b      	ldr	r3, [r3, #0]
 8022340:	4a57      	ldr	r2, [pc, #348]	; (80224a0 <HAL_DMA_Init+0x1e0>)
 8022342:	4293      	cmp	r3, r2
 8022344:	d018      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	681b      	ldr	r3, [r3, #0]
 802234a:	4a56      	ldr	r2, [pc, #344]	; (80224a4 <HAL_DMA_Init+0x1e4>)
 802234c:	4293      	cmp	r3, r2
 802234e:	d013      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	681b      	ldr	r3, [r3, #0]
 8022354:	4a54      	ldr	r2, [pc, #336]	; (80224a8 <HAL_DMA_Init+0x1e8>)
 8022356:	4293      	cmp	r3, r2
 8022358:	d00e      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 802235a:	687b      	ldr	r3, [r7, #4]
 802235c:	681b      	ldr	r3, [r3, #0]
 802235e:	4a53      	ldr	r2, [pc, #332]	; (80224ac <HAL_DMA_Init+0x1ec>)
 8022360:	4293      	cmp	r3, r2
 8022362:	d009      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 8022364:	687b      	ldr	r3, [r7, #4]
 8022366:	681b      	ldr	r3, [r3, #0]
 8022368:	4a51      	ldr	r2, [pc, #324]	; (80224b0 <HAL_DMA_Init+0x1f0>)
 802236a:	4293      	cmp	r3, r2
 802236c:	d004      	beq.n	8022378 <HAL_DMA_Init+0xb8>
 802236e:	687b      	ldr	r3, [r7, #4]
 8022370:	681b      	ldr	r3, [r3, #0]
 8022372:	4a50      	ldr	r2, [pc, #320]	; (80224b4 <HAL_DMA_Init+0x1f4>)
 8022374:	4293      	cmp	r3, r2
 8022376:	d101      	bne.n	802237c <HAL_DMA_Init+0xbc>
 8022378:	2301      	movs	r3, #1
 802237a:	e000      	b.n	802237e <HAL_DMA_Init+0xbe>
 802237c:	2300      	movs	r3, #0
 802237e:	2b00      	cmp	r3, #0
 8022380:	f000 813c 	beq.w	80225fc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	2202      	movs	r2, #2
 8022388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	2200      	movs	r2, #0
 8022390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8022394:	687b      	ldr	r3, [r7, #4]
 8022396:	681b      	ldr	r3, [r3, #0]
 8022398:	4a37      	ldr	r2, [pc, #220]	; (8022478 <HAL_DMA_Init+0x1b8>)
 802239a:	4293      	cmp	r3, r2
 802239c:	d04a      	beq.n	8022434 <HAL_DMA_Init+0x174>
 802239e:	687b      	ldr	r3, [r7, #4]
 80223a0:	681b      	ldr	r3, [r3, #0]
 80223a2:	4a36      	ldr	r2, [pc, #216]	; (802247c <HAL_DMA_Init+0x1bc>)
 80223a4:	4293      	cmp	r3, r2
 80223a6:	d045      	beq.n	8022434 <HAL_DMA_Init+0x174>
 80223a8:	687b      	ldr	r3, [r7, #4]
 80223aa:	681b      	ldr	r3, [r3, #0]
 80223ac:	4a34      	ldr	r2, [pc, #208]	; (8022480 <HAL_DMA_Init+0x1c0>)
 80223ae:	4293      	cmp	r3, r2
 80223b0:	d040      	beq.n	8022434 <HAL_DMA_Init+0x174>
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	681b      	ldr	r3, [r3, #0]
 80223b6:	4a33      	ldr	r2, [pc, #204]	; (8022484 <HAL_DMA_Init+0x1c4>)
 80223b8:	4293      	cmp	r3, r2
 80223ba:	d03b      	beq.n	8022434 <HAL_DMA_Init+0x174>
 80223bc:	687b      	ldr	r3, [r7, #4]
 80223be:	681b      	ldr	r3, [r3, #0]
 80223c0:	4a31      	ldr	r2, [pc, #196]	; (8022488 <HAL_DMA_Init+0x1c8>)
 80223c2:	4293      	cmp	r3, r2
 80223c4:	d036      	beq.n	8022434 <HAL_DMA_Init+0x174>
 80223c6:	687b      	ldr	r3, [r7, #4]
 80223c8:	681b      	ldr	r3, [r3, #0]
 80223ca:	4a30      	ldr	r2, [pc, #192]	; (802248c <HAL_DMA_Init+0x1cc>)
 80223cc:	4293      	cmp	r3, r2
 80223ce:	d031      	beq.n	8022434 <HAL_DMA_Init+0x174>
 80223d0:	687b      	ldr	r3, [r7, #4]
 80223d2:	681b      	ldr	r3, [r3, #0]
 80223d4:	4a2e      	ldr	r2, [pc, #184]	; (8022490 <HAL_DMA_Init+0x1d0>)
 80223d6:	4293      	cmp	r3, r2
 80223d8:	d02c      	beq.n	8022434 <HAL_DMA_Init+0x174>
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	681b      	ldr	r3, [r3, #0]
 80223de:	4a2d      	ldr	r2, [pc, #180]	; (8022494 <HAL_DMA_Init+0x1d4>)
 80223e0:	4293      	cmp	r3, r2
 80223e2:	d027      	beq.n	8022434 <HAL_DMA_Init+0x174>
 80223e4:	687b      	ldr	r3, [r7, #4]
 80223e6:	681b      	ldr	r3, [r3, #0]
 80223e8:	4a2b      	ldr	r2, [pc, #172]	; (8022498 <HAL_DMA_Init+0x1d8>)
 80223ea:	4293      	cmp	r3, r2
 80223ec:	d022      	beq.n	8022434 <HAL_DMA_Init+0x174>
 80223ee:	687b      	ldr	r3, [r7, #4]
 80223f0:	681b      	ldr	r3, [r3, #0]
 80223f2:	4a2a      	ldr	r2, [pc, #168]	; (802249c <HAL_DMA_Init+0x1dc>)
 80223f4:	4293      	cmp	r3, r2
 80223f6:	d01d      	beq.n	8022434 <HAL_DMA_Init+0x174>
 80223f8:	687b      	ldr	r3, [r7, #4]
 80223fa:	681b      	ldr	r3, [r3, #0]
 80223fc:	4a28      	ldr	r2, [pc, #160]	; (80224a0 <HAL_DMA_Init+0x1e0>)
 80223fe:	4293      	cmp	r3, r2
 8022400:	d018      	beq.n	8022434 <HAL_DMA_Init+0x174>
 8022402:	687b      	ldr	r3, [r7, #4]
 8022404:	681b      	ldr	r3, [r3, #0]
 8022406:	4a27      	ldr	r2, [pc, #156]	; (80224a4 <HAL_DMA_Init+0x1e4>)
 8022408:	4293      	cmp	r3, r2
 802240a:	d013      	beq.n	8022434 <HAL_DMA_Init+0x174>
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	681b      	ldr	r3, [r3, #0]
 8022410:	4a25      	ldr	r2, [pc, #148]	; (80224a8 <HAL_DMA_Init+0x1e8>)
 8022412:	4293      	cmp	r3, r2
 8022414:	d00e      	beq.n	8022434 <HAL_DMA_Init+0x174>
 8022416:	687b      	ldr	r3, [r7, #4]
 8022418:	681b      	ldr	r3, [r3, #0]
 802241a:	4a24      	ldr	r2, [pc, #144]	; (80224ac <HAL_DMA_Init+0x1ec>)
 802241c:	4293      	cmp	r3, r2
 802241e:	d009      	beq.n	8022434 <HAL_DMA_Init+0x174>
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	681b      	ldr	r3, [r3, #0]
 8022424:	4a22      	ldr	r2, [pc, #136]	; (80224b0 <HAL_DMA_Init+0x1f0>)
 8022426:	4293      	cmp	r3, r2
 8022428:	d004      	beq.n	8022434 <HAL_DMA_Init+0x174>
 802242a:	687b      	ldr	r3, [r7, #4]
 802242c:	681b      	ldr	r3, [r3, #0]
 802242e:	4a21      	ldr	r2, [pc, #132]	; (80224b4 <HAL_DMA_Init+0x1f4>)
 8022430:	4293      	cmp	r3, r2
 8022432:	d108      	bne.n	8022446 <HAL_DMA_Init+0x186>
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	681b      	ldr	r3, [r3, #0]
 8022438:	681a      	ldr	r2, [r3, #0]
 802243a:	687b      	ldr	r3, [r7, #4]
 802243c:	681b      	ldr	r3, [r3, #0]
 802243e:	f022 0201 	bic.w	r2, r2, #1
 8022442:	601a      	str	r2, [r3, #0]
 8022444:	e007      	b.n	8022456 <HAL_DMA_Init+0x196>
 8022446:	687b      	ldr	r3, [r7, #4]
 8022448:	681b      	ldr	r3, [r3, #0]
 802244a:	681a      	ldr	r2, [r3, #0]
 802244c:	687b      	ldr	r3, [r7, #4]
 802244e:	681b      	ldr	r3, [r3, #0]
 8022450:	f022 0201 	bic.w	r2, r2, #1
 8022454:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8022456:	e02f      	b.n	80224b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8022458:	f7ff fe22 	bl	80220a0 <HAL_GetTick>
 802245c:	4602      	mov	r2, r0
 802245e:	693b      	ldr	r3, [r7, #16]
 8022460:	1ad3      	subs	r3, r2, r3
 8022462:	2b05      	cmp	r3, #5
 8022464:	d928      	bls.n	80224b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	2220      	movs	r2, #32
 802246a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802246c:	687b      	ldr	r3, [r7, #4]
 802246e:	2203      	movs	r2, #3
 8022470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8022474:	2301      	movs	r3, #1
 8022476:	e244      	b.n	8022902 <HAL_DMA_Init+0x642>
 8022478:	40020010 	.word	0x40020010
 802247c:	40020028 	.word	0x40020028
 8022480:	40020040 	.word	0x40020040
 8022484:	40020058 	.word	0x40020058
 8022488:	40020070 	.word	0x40020070
 802248c:	40020088 	.word	0x40020088
 8022490:	400200a0 	.word	0x400200a0
 8022494:	400200b8 	.word	0x400200b8
 8022498:	40020410 	.word	0x40020410
 802249c:	40020428 	.word	0x40020428
 80224a0:	40020440 	.word	0x40020440
 80224a4:	40020458 	.word	0x40020458
 80224a8:	40020470 	.word	0x40020470
 80224ac:	40020488 	.word	0x40020488
 80224b0:	400204a0 	.word	0x400204a0
 80224b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80224b8:	687b      	ldr	r3, [r7, #4]
 80224ba:	681b      	ldr	r3, [r3, #0]
 80224bc:	681b      	ldr	r3, [r3, #0]
 80224be:	f003 0301 	and.w	r3, r3, #1
 80224c2:	2b00      	cmp	r3, #0
 80224c4:	d1c8      	bne.n	8022458 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80224c6:	687b      	ldr	r3, [r7, #4]
 80224c8:	681b      	ldr	r3, [r3, #0]
 80224ca:	681b      	ldr	r3, [r3, #0]
 80224cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80224ce:	697a      	ldr	r2, [r7, #20]
 80224d0:	4b84      	ldr	r3, [pc, #528]	; (80226e4 <HAL_DMA_Init+0x424>)
 80224d2:	4013      	ands	r3, r2
 80224d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80224d6:	687b      	ldr	r3, [r7, #4]
 80224d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80224da:	687b      	ldr	r3, [r7, #4]
 80224dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80224de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	691b      	ldr	r3, [r3, #16]
 80224e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80224ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80224ec:	687b      	ldr	r3, [r7, #4]
 80224ee:	699b      	ldr	r3, [r3, #24]
 80224f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80224f2:	687b      	ldr	r3, [r7, #4]
 80224f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80224f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80224f8:	687b      	ldr	r3, [r7, #4]
 80224fa:	6a1b      	ldr	r3, [r3, #32]
 80224fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80224fe:	697a      	ldr	r2, [r7, #20]
 8022500:	4313      	orrs	r3, r2
 8022502:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8022504:	687b      	ldr	r3, [r7, #4]
 8022506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022508:	2b04      	cmp	r3, #4
 802250a:	d107      	bne.n	802251c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802250c:	687b      	ldr	r3, [r7, #4]
 802250e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022510:	687b      	ldr	r3, [r7, #4]
 8022512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022514:	4313      	orrs	r3, r2
 8022516:	697a      	ldr	r2, [r7, #20]
 8022518:	4313      	orrs	r3, r2
 802251a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	685b      	ldr	r3, [r3, #4]
 8022520:	2b28      	cmp	r3, #40	; 0x28
 8022522:	d903      	bls.n	802252c <HAL_DMA_Init+0x26c>
 8022524:	687b      	ldr	r3, [r7, #4]
 8022526:	685b      	ldr	r3, [r3, #4]
 8022528:	2b2e      	cmp	r3, #46	; 0x2e
 802252a:	d91f      	bls.n	802256c <HAL_DMA_Init+0x2ac>
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	685b      	ldr	r3, [r3, #4]
 8022530:	2b3e      	cmp	r3, #62	; 0x3e
 8022532:	d903      	bls.n	802253c <HAL_DMA_Init+0x27c>
 8022534:	687b      	ldr	r3, [r7, #4]
 8022536:	685b      	ldr	r3, [r3, #4]
 8022538:	2b42      	cmp	r3, #66	; 0x42
 802253a:	d917      	bls.n	802256c <HAL_DMA_Init+0x2ac>
 802253c:	687b      	ldr	r3, [r7, #4]
 802253e:	685b      	ldr	r3, [r3, #4]
 8022540:	2b46      	cmp	r3, #70	; 0x46
 8022542:	d903      	bls.n	802254c <HAL_DMA_Init+0x28c>
 8022544:	687b      	ldr	r3, [r7, #4]
 8022546:	685b      	ldr	r3, [r3, #4]
 8022548:	2b48      	cmp	r3, #72	; 0x48
 802254a:	d90f      	bls.n	802256c <HAL_DMA_Init+0x2ac>
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	685b      	ldr	r3, [r3, #4]
 8022550:	2b4e      	cmp	r3, #78	; 0x4e
 8022552:	d903      	bls.n	802255c <HAL_DMA_Init+0x29c>
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	685b      	ldr	r3, [r3, #4]
 8022558:	2b52      	cmp	r3, #82	; 0x52
 802255a:	d907      	bls.n	802256c <HAL_DMA_Init+0x2ac>
 802255c:	687b      	ldr	r3, [r7, #4]
 802255e:	685b      	ldr	r3, [r3, #4]
 8022560:	2b73      	cmp	r3, #115	; 0x73
 8022562:	d905      	bls.n	8022570 <HAL_DMA_Init+0x2b0>
 8022564:	687b      	ldr	r3, [r7, #4]
 8022566:	685b      	ldr	r3, [r3, #4]
 8022568:	2b77      	cmp	r3, #119	; 0x77
 802256a:	d801      	bhi.n	8022570 <HAL_DMA_Init+0x2b0>
 802256c:	2301      	movs	r3, #1
 802256e:	e000      	b.n	8022572 <HAL_DMA_Init+0x2b2>
 8022570:	2300      	movs	r3, #0
 8022572:	2b00      	cmp	r3, #0
 8022574:	d003      	beq.n	802257e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8022576:	697b      	ldr	r3, [r7, #20]
 8022578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802257c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 802257e:	687b      	ldr	r3, [r7, #4]
 8022580:	681b      	ldr	r3, [r3, #0]
 8022582:	697a      	ldr	r2, [r7, #20]
 8022584:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8022586:	687b      	ldr	r3, [r7, #4]
 8022588:	681b      	ldr	r3, [r3, #0]
 802258a:	695b      	ldr	r3, [r3, #20]
 802258c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802258e:	697b      	ldr	r3, [r7, #20]
 8022590:	f023 0307 	bic.w	r3, r3, #7
 8022594:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8022596:	687b      	ldr	r3, [r7, #4]
 8022598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802259a:	697a      	ldr	r2, [r7, #20]
 802259c:	4313      	orrs	r3, r2
 802259e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225a4:	2b04      	cmp	r3, #4
 80225a6:	d117      	bne.n	80225d8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80225ac:	697a      	ldr	r2, [r7, #20]
 80225ae:	4313      	orrs	r3, r2
 80225b0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80225b2:	687b      	ldr	r3, [r7, #4]
 80225b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	d00e      	beq.n	80225d8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80225ba:	6878      	ldr	r0, [r7, #4]
 80225bc:	f002 fb30 	bl	8024c20 <DMA_CheckFifoParam>
 80225c0:	4603      	mov	r3, r0
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d008      	beq.n	80225d8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80225c6:	687b      	ldr	r3, [r7, #4]
 80225c8:	2240      	movs	r2, #64	; 0x40
 80225ca:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80225cc:	687b      	ldr	r3, [r7, #4]
 80225ce:	2201      	movs	r2, #1
 80225d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80225d4:	2301      	movs	r3, #1
 80225d6:	e194      	b.n	8022902 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80225d8:	687b      	ldr	r3, [r7, #4]
 80225da:	681b      	ldr	r3, [r3, #0]
 80225dc:	697a      	ldr	r2, [r7, #20]
 80225de:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80225e0:	6878      	ldr	r0, [r7, #4]
 80225e2:	f002 fa6b 	bl	8024abc <DMA_CalcBaseAndBitshift>
 80225e6:	4603      	mov	r3, r0
 80225e8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80225ea:	687b      	ldr	r3, [r7, #4]
 80225ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80225ee:	f003 031f 	and.w	r3, r3, #31
 80225f2:	223f      	movs	r2, #63	; 0x3f
 80225f4:	409a      	lsls	r2, r3
 80225f6:	68bb      	ldr	r3, [r7, #8]
 80225f8:	609a      	str	r2, [r3, #8]
 80225fa:	e0ca      	b.n	8022792 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	681b      	ldr	r3, [r3, #0]
 8022600:	4a39      	ldr	r2, [pc, #228]	; (80226e8 <HAL_DMA_Init+0x428>)
 8022602:	4293      	cmp	r3, r2
 8022604:	d022      	beq.n	802264c <HAL_DMA_Init+0x38c>
 8022606:	687b      	ldr	r3, [r7, #4]
 8022608:	681b      	ldr	r3, [r3, #0]
 802260a:	4a38      	ldr	r2, [pc, #224]	; (80226ec <HAL_DMA_Init+0x42c>)
 802260c:	4293      	cmp	r3, r2
 802260e:	d01d      	beq.n	802264c <HAL_DMA_Init+0x38c>
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	681b      	ldr	r3, [r3, #0]
 8022614:	4a36      	ldr	r2, [pc, #216]	; (80226f0 <HAL_DMA_Init+0x430>)
 8022616:	4293      	cmp	r3, r2
 8022618:	d018      	beq.n	802264c <HAL_DMA_Init+0x38c>
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	681b      	ldr	r3, [r3, #0]
 802261e:	4a35      	ldr	r2, [pc, #212]	; (80226f4 <HAL_DMA_Init+0x434>)
 8022620:	4293      	cmp	r3, r2
 8022622:	d013      	beq.n	802264c <HAL_DMA_Init+0x38c>
 8022624:	687b      	ldr	r3, [r7, #4]
 8022626:	681b      	ldr	r3, [r3, #0]
 8022628:	4a33      	ldr	r2, [pc, #204]	; (80226f8 <HAL_DMA_Init+0x438>)
 802262a:	4293      	cmp	r3, r2
 802262c:	d00e      	beq.n	802264c <HAL_DMA_Init+0x38c>
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	681b      	ldr	r3, [r3, #0]
 8022632:	4a32      	ldr	r2, [pc, #200]	; (80226fc <HAL_DMA_Init+0x43c>)
 8022634:	4293      	cmp	r3, r2
 8022636:	d009      	beq.n	802264c <HAL_DMA_Init+0x38c>
 8022638:	687b      	ldr	r3, [r7, #4]
 802263a:	681b      	ldr	r3, [r3, #0]
 802263c:	4a30      	ldr	r2, [pc, #192]	; (8022700 <HAL_DMA_Init+0x440>)
 802263e:	4293      	cmp	r3, r2
 8022640:	d004      	beq.n	802264c <HAL_DMA_Init+0x38c>
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	681b      	ldr	r3, [r3, #0]
 8022646:	4a2f      	ldr	r2, [pc, #188]	; (8022704 <HAL_DMA_Init+0x444>)
 8022648:	4293      	cmp	r3, r2
 802264a:	d101      	bne.n	8022650 <HAL_DMA_Init+0x390>
 802264c:	2301      	movs	r3, #1
 802264e:	e000      	b.n	8022652 <HAL_DMA_Init+0x392>
 8022650:	2300      	movs	r3, #0
 8022652:	2b00      	cmp	r3, #0
 8022654:	f000 8094 	beq.w	8022780 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8022658:	687b      	ldr	r3, [r7, #4]
 802265a:	681b      	ldr	r3, [r3, #0]
 802265c:	4a22      	ldr	r2, [pc, #136]	; (80226e8 <HAL_DMA_Init+0x428>)
 802265e:	4293      	cmp	r3, r2
 8022660:	d021      	beq.n	80226a6 <HAL_DMA_Init+0x3e6>
 8022662:	687b      	ldr	r3, [r7, #4]
 8022664:	681b      	ldr	r3, [r3, #0]
 8022666:	4a21      	ldr	r2, [pc, #132]	; (80226ec <HAL_DMA_Init+0x42c>)
 8022668:	4293      	cmp	r3, r2
 802266a:	d01c      	beq.n	80226a6 <HAL_DMA_Init+0x3e6>
 802266c:	687b      	ldr	r3, [r7, #4]
 802266e:	681b      	ldr	r3, [r3, #0]
 8022670:	4a1f      	ldr	r2, [pc, #124]	; (80226f0 <HAL_DMA_Init+0x430>)
 8022672:	4293      	cmp	r3, r2
 8022674:	d017      	beq.n	80226a6 <HAL_DMA_Init+0x3e6>
 8022676:	687b      	ldr	r3, [r7, #4]
 8022678:	681b      	ldr	r3, [r3, #0]
 802267a:	4a1e      	ldr	r2, [pc, #120]	; (80226f4 <HAL_DMA_Init+0x434>)
 802267c:	4293      	cmp	r3, r2
 802267e:	d012      	beq.n	80226a6 <HAL_DMA_Init+0x3e6>
 8022680:	687b      	ldr	r3, [r7, #4]
 8022682:	681b      	ldr	r3, [r3, #0]
 8022684:	4a1c      	ldr	r2, [pc, #112]	; (80226f8 <HAL_DMA_Init+0x438>)
 8022686:	4293      	cmp	r3, r2
 8022688:	d00d      	beq.n	80226a6 <HAL_DMA_Init+0x3e6>
 802268a:	687b      	ldr	r3, [r7, #4]
 802268c:	681b      	ldr	r3, [r3, #0]
 802268e:	4a1b      	ldr	r2, [pc, #108]	; (80226fc <HAL_DMA_Init+0x43c>)
 8022690:	4293      	cmp	r3, r2
 8022692:	d008      	beq.n	80226a6 <HAL_DMA_Init+0x3e6>
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	681b      	ldr	r3, [r3, #0]
 8022698:	4a19      	ldr	r2, [pc, #100]	; (8022700 <HAL_DMA_Init+0x440>)
 802269a:	4293      	cmp	r3, r2
 802269c:	d003      	beq.n	80226a6 <HAL_DMA_Init+0x3e6>
 802269e:	687b      	ldr	r3, [r7, #4]
 80226a0:	681b      	ldr	r3, [r3, #0]
 80226a2:	4a18      	ldr	r2, [pc, #96]	; (8022704 <HAL_DMA_Init+0x444>)
 80226a4:	4293      	cmp	r3, r2
 80226a6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80226a8:	687b      	ldr	r3, [r7, #4]
 80226aa:	2202      	movs	r2, #2
 80226ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80226b0:	687b      	ldr	r3, [r7, #4]
 80226b2:	2200      	movs	r2, #0
 80226b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80226b8:	687b      	ldr	r3, [r7, #4]
 80226ba:	681b      	ldr	r3, [r3, #0]
 80226bc:	681b      	ldr	r3, [r3, #0]
 80226be:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80226c0:	697a      	ldr	r2, [r7, #20]
 80226c2:	4b11      	ldr	r3, [pc, #68]	; (8022708 <HAL_DMA_Init+0x448>)
 80226c4:	4013      	ands	r3, r2
 80226c6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	689b      	ldr	r3, [r3, #8]
 80226cc:	2b40      	cmp	r3, #64	; 0x40
 80226ce:	d01d      	beq.n	802270c <HAL_DMA_Init+0x44c>
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	689b      	ldr	r3, [r3, #8]
 80226d4:	2b80      	cmp	r3, #128	; 0x80
 80226d6:	d102      	bne.n	80226de <HAL_DMA_Init+0x41e>
 80226d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80226dc:	e017      	b.n	802270e <HAL_DMA_Init+0x44e>
 80226de:	2300      	movs	r3, #0
 80226e0:	e015      	b.n	802270e <HAL_DMA_Init+0x44e>
 80226e2:	bf00      	nop
 80226e4:	fe10803f 	.word	0xfe10803f
 80226e8:	58025408 	.word	0x58025408
 80226ec:	5802541c 	.word	0x5802541c
 80226f0:	58025430 	.word	0x58025430
 80226f4:	58025444 	.word	0x58025444
 80226f8:	58025458 	.word	0x58025458
 80226fc:	5802546c 	.word	0x5802546c
 8022700:	58025480 	.word	0x58025480
 8022704:	58025494 	.word	0x58025494
 8022708:	fffe000f 	.word	0xfffe000f
 802270c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802270e:	687a      	ldr	r2, [r7, #4]
 8022710:	68d2      	ldr	r2, [r2, #12]
 8022712:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8022714:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8022716:	687b      	ldr	r3, [r7, #4]
 8022718:	691b      	ldr	r3, [r3, #16]
 802271a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802271c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802271e:	687b      	ldr	r3, [r7, #4]
 8022720:	695b      	ldr	r3, [r3, #20]
 8022722:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8022724:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8022726:	687b      	ldr	r3, [r7, #4]
 8022728:	699b      	ldr	r3, [r3, #24]
 802272a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802272c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802272e:	687b      	ldr	r3, [r7, #4]
 8022730:	69db      	ldr	r3, [r3, #28]
 8022732:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8022734:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	6a1b      	ldr	r3, [r3, #32]
 802273a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802273c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802273e:	697a      	ldr	r2, [r7, #20]
 8022740:	4313      	orrs	r3, r2
 8022742:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8022744:	687b      	ldr	r3, [r7, #4]
 8022746:	681b      	ldr	r3, [r3, #0]
 8022748:	697a      	ldr	r2, [r7, #20]
 802274a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	681b      	ldr	r3, [r3, #0]
 8022750:	461a      	mov	r2, r3
 8022752:	4b6e      	ldr	r3, [pc, #440]	; (802290c <HAL_DMA_Init+0x64c>)
 8022754:	4413      	add	r3, r2
 8022756:	4a6e      	ldr	r2, [pc, #440]	; (8022910 <HAL_DMA_Init+0x650>)
 8022758:	fba2 2303 	umull	r2, r3, r2, r3
 802275c:	091b      	lsrs	r3, r3, #4
 802275e:	009a      	lsls	r2, r3, #2
 8022760:	687b      	ldr	r3, [r7, #4]
 8022762:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8022764:	6878      	ldr	r0, [r7, #4]
 8022766:	f002 f9a9 	bl	8024abc <DMA_CalcBaseAndBitshift>
 802276a:	4603      	mov	r3, r0
 802276c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802276e:	687b      	ldr	r3, [r7, #4]
 8022770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022772:	f003 031f 	and.w	r3, r3, #31
 8022776:	2201      	movs	r2, #1
 8022778:	409a      	lsls	r2, r3
 802277a:	68fb      	ldr	r3, [r7, #12]
 802277c:	605a      	str	r2, [r3, #4]
 802277e:	e008      	b.n	8022792 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8022780:	687b      	ldr	r3, [r7, #4]
 8022782:	2240      	movs	r2, #64	; 0x40
 8022784:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	2203      	movs	r2, #3
 802278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 802278e:	2301      	movs	r3, #1
 8022790:	e0b7      	b.n	8022902 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8022792:	687b      	ldr	r3, [r7, #4]
 8022794:	681b      	ldr	r3, [r3, #0]
 8022796:	4a5f      	ldr	r2, [pc, #380]	; (8022914 <HAL_DMA_Init+0x654>)
 8022798:	4293      	cmp	r3, r2
 802279a:	d072      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 802279c:	687b      	ldr	r3, [r7, #4]
 802279e:	681b      	ldr	r3, [r3, #0]
 80227a0:	4a5d      	ldr	r2, [pc, #372]	; (8022918 <HAL_DMA_Init+0x658>)
 80227a2:	4293      	cmp	r3, r2
 80227a4:	d06d      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 80227a6:	687b      	ldr	r3, [r7, #4]
 80227a8:	681b      	ldr	r3, [r3, #0]
 80227aa:	4a5c      	ldr	r2, [pc, #368]	; (802291c <HAL_DMA_Init+0x65c>)
 80227ac:	4293      	cmp	r3, r2
 80227ae:	d068      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 80227b0:	687b      	ldr	r3, [r7, #4]
 80227b2:	681b      	ldr	r3, [r3, #0]
 80227b4:	4a5a      	ldr	r2, [pc, #360]	; (8022920 <HAL_DMA_Init+0x660>)
 80227b6:	4293      	cmp	r3, r2
 80227b8:	d063      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 80227ba:	687b      	ldr	r3, [r7, #4]
 80227bc:	681b      	ldr	r3, [r3, #0]
 80227be:	4a59      	ldr	r2, [pc, #356]	; (8022924 <HAL_DMA_Init+0x664>)
 80227c0:	4293      	cmp	r3, r2
 80227c2:	d05e      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 80227c4:	687b      	ldr	r3, [r7, #4]
 80227c6:	681b      	ldr	r3, [r3, #0]
 80227c8:	4a57      	ldr	r2, [pc, #348]	; (8022928 <HAL_DMA_Init+0x668>)
 80227ca:	4293      	cmp	r3, r2
 80227cc:	d059      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 80227ce:	687b      	ldr	r3, [r7, #4]
 80227d0:	681b      	ldr	r3, [r3, #0]
 80227d2:	4a56      	ldr	r2, [pc, #344]	; (802292c <HAL_DMA_Init+0x66c>)
 80227d4:	4293      	cmp	r3, r2
 80227d6:	d054      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 80227d8:	687b      	ldr	r3, [r7, #4]
 80227da:	681b      	ldr	r3, [r3, #0]
 80227dc:	4a54      	ldr	r2, [pc, #336]	; (8022930 <HAL_DMA_Init+0x670>)
 80227de:	4293      	cmp	r3, r2
 80227e0:	d04f      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 80227e2:	687b      	ldr	r3, [r7, #4]
 80227e4:	681b      	ldr	r3, [r3, #0]
 80227e6:	4a53      	ldr	r2, [pc, #332]	; (8022934 <HAL_DMA_Init+0x674>)
 80227e8:	4293      	cmp	r3, r2
 80227ea:	d04a      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	681b      	ldr	r3, [r3, #0]
 80227f0:	4a51      	ldr	r2, [pc, #324]	; (8022938 <HAL_DMA_Init+0x678>)
 80227f2:	4293      	cmp	r3, r2
 80227f4:	d045      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 80227f6:	687b      	ldr	r3, [r7, #4]
 80227f8:	681b      	ldr	r3, [r3, #0]
 80227fa:	4a50      	ldr	r2, [pc, #320]	; (802293c <HAL_DMA_Init+0x67c>)
 80227fc:	4293      	cmp	r3, r2
 80227fe:	d040      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 8022800:	687b      	ldr	r3, [r7, #4]
 8022802:	681b      	ldr	r3, [r3, #0]
 8022804:	4a4e      	ldr	r2, [pc, #312]	; (8022940 <HAL_DMA_Init+0x680>)
 8022806:	4293      	cmp	r3, r2
 8022808:	d03b      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 802280a:	687b      	ldr	r3, [r7, #4]
 802280c:	681b      	ldr	r3, [r3, #0]
 802280e:	4a4d      	ldr	r2, [pc, #308]	; (8022944 <HAL_DMA_Init+0x684>)
 8022810:	4293      	cmp	r3, r2
 8022812:	d036      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 8022814:	687b      	ldr	r3, [r7, #4]
 8022816:	681b      	ldr	r3, [r3, #0]
 8022818:	4a4b      	ldr	r2, [pc, #300]	; (8022948 <HAL_DMA_Init+0x688>)
 802281a:	4293      	cmp	r3, r2
 802281c:	d031      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 802281e:	687b      	ldr	r3, [r7, #4]
 8022820:	681b      	ldr	r3, [r3, #0]
 8022822:	4a4a      	ldr	r2, [pc, #296]	; (802294c <HAL_DMA_Init+0x68c>)
 8022824:	4293      	cmp	r3, r2
 8022826:	d02c      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	681b      	ldr	r3, [r3, #0]
 802282c:	4a48      	ldr	r2, [pc, #288]	; (8022950 <HAL_DMA_Init+0x690>)
 802282e:	4293      	cmp	r3, r2
 8022830:	d027      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 8022832:	687b      	ldr	r3, [r7, #4]
 8022834:	681b      	ldr	r3, [r3, #0]
 8022836:	4a47      	ldr	r2, [pc, #284]	; (8022954 <HAL_DMA_Init+0x694>)
 8022838:	4293      	cmp	r3, r2
 802283a:	d022      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 802283c:	687b      	ldr	r3, [r7, #4]
 802283e:	681b      	ldr	r3, [r3, #0]
 8022840:	4a45      	ldr	r2, [pc, #276]	; (8022958 <HAL_DMA_Init+0x698>)
 8022842:	4293      	cmp	r3, r2
 8022844:	d01d      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	681b      	ldr	r3, [r3, #0]
 802284a:	4a44      	ldr	r2, [pc, #272]	; (802295c <HAL_DMA_Init+0x69c>)
 802284c:	4293      	cmp	r3, r2
 802284e:	d018      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	681b      	ldr	r3, [r3, #0]
 8022854:	4a42      	ldr	r2, [pc, #264]	; (8022960 <HAL_DMA_Init+0x6a0>)
 8022856:	4293      	cmp	r3, r2
 8022858:	d013      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 802285a:	687b      	ldr	r3, [r7, #4]
 802285c:	681b      	ldr	r3, [r3, #0]
 802285e:	4a41      	ldr	r2, [pc, #260]	; (8022964 <HAL_DMA_Init+0x6a4>)
 8022860:	4293      	cmp	r3, r2
 8022862:	d00e      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 8022864:	687b      	ldr	r3, [r7, #4]
 8022866:	681b      	ldr	r3, [r3, #0]
 8022868:	4a3f      	ldr	r2, [pc, #252]	; (8022968 <HAL_DMA_Init+0x6a8>)
 802286a:	4293      	cmp	r3, r2
 802286c:	d009      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 802286e:	687b      	ldr	r3, [r7, #4]
 8022870:	681b      	ldr	r3, [r3, #0]
 8022872:	4a3e      	ldr	r2, [pc, #248]	; (802296c <HAL_DMA_Init+0x6ac>)
 8022874:	4293      	cmp	r3, r2
 8022876:	d004      	beq.n	8022882 <HAL_DMA_Init+0x5c2>
 8022878:	687b      	ldr	r3, [r7, #4]
 802287a:	681b      	ldr	r3, [r3, #0]
 802287c:	4a3c      	ldr	r2, [pc, #240]	; (8022970 <HAL_DMA_Init+0x6b0>)
 802287e:	4293      	cmp	r3, r2
 8022880:	d101      	bne.n	8022886 <HAL_DMA_Init+0x5c6>
 8022882:	2301      	movs	r3, #1
 8022884:	e000      	b.n	8022888 <HAL_DMA_Init+0x5c8>
 8022886:	2300      	movs	r3, #0
 8022888:	2b00      	cmp	r3, #0
 802288a:	d032      	beq.n	80228f2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 802288c:	6878      	ldr	r0, [r7, #4]
 802288e:	f002 fa43 	bl	8024d18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8022892:	687b      	ldr	r3, [r7, #4]
 8022894:	689b      	ldr	r3, [r3, #8]
 8022896:	2b80      	cmp	r3, #128	; 0x80
 8022898:	d102      	bne.n	80228a0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 802289a:	687b      	ldr	r3, [r7, #4]
 802289c:	2200      	movs	r2, #0
 802289e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	685a      	ldr	r2, [r3, #4]
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80228a8:	b2d2      	uxtb	r2, r2
 80228aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80228ac:	687b      	ldr	r3, [r7, #4]
 80228ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80228b0:	687a      	ldr	r2, [r7, #4]
 80228b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80228b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80228b6:	687b      	ldr	r3, [r7, #4]
 80228b8:	685b      	ldr	r3, [r3, #4]
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d010      	beq.n	80228e0 <HAL_DMA_Init+0x620>
 80228be:	687b      	ldr	r3, [r7, #4]
 80228c0:	685b      	ldr	r3, [r3, #4]
 80228c2:	2b08      	cmp	r3, #8
 80228c4:	d80c      	bhi.n	80228e0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80228c6:	6878      	ldr	r0, [r7, #4]
 80228c8:	f002 fac0 	bl	8024e4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80228cc:	687b      	ldr	r3, [r7, #4]
 80228ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80228d0:	2200      	movs	r2, #0
 80228d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80228d4:	687b      	ldr	r3, [r7, #4]
 80228d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80228d8:	687a      	ldr	r2, [r7, #4]
 80228da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80228dc:	605a      	str	r2, [r3, #4]
 80228de:	e008      	b.n	80228f2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80228e0:	687b      	ldr	r3, [r7, #4]
 80228e2:	2200      	movs	r2, #0
 80228e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80228e6:	687b      	ldr	r3, [r7, #4]
 80228e8:	2200      	movs	r2, #0
 80228ea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	2200      	movs	r2, #0
 80228f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80228f2:	687b      	ldr	r3, [r7, #4]
 80228f4:	2200      	movs	r2, #0
 80228f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	2201      	movs	r2, #1
 80228fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8022900:	2300      	movs	r3, #0
}
 8022902:	4618      	mov	r0, r3
 8022904:	3718      	adds	r7, #24
 8022906:	46bd      	mov	sp, r7
 8022908:	bd80      	pop	{r7, pc}
 802290a:	bf00      	nop
 802290c:	a7fdabf8 	.word	0xa7fdabf8
 8022910:	cccccccd 	.word	0xcccccccd
 8022914:	40020010 	.word	0x40020010
 8022918:	40020028 	.word	0x40020028
 802291c:	40020040 	.word	0x40020040
 8022920:	40020058 	.word	0x40020058
 8022924:	40020070 	.word	0x40020070
 8022928:	40020088 	.word	0x40020088
 802292c:	400200a0 	.word	0x400200a0
 8022930:	400200b8 	.word	0x400200b8
 8022934:	40020410 	.word	0x40020410
 8022938:	40020428 	.word	0x40020428
 802293c:	40020440 	.word	0x40020440
 8022940:	40020458 	.word	0x40020458
 8022944:	40020470 	.word	0x40020470
 8022948:	40020488 	.word	0x40020488
 802294c:	400204a0 	.word	0x400204a0
 8022950:	400204b8 	.word	0x400204b8
 8022954:	58025408 	.word	0x58025408
 8022958:	5802541c 	.word	0x5802541c
 802295c:	58025430 	.word	0x58025430
 8022960:	58025444 	.word	0x58025444
 8022964:	58025458 	.word	0x58025458
 8022968:	5802546c 	.word	0x5802546c
 802296c:	58025480 	.word	0x58025480
 8022970:	58025494 	.word	0x58025494

08022974 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8022974:	b580      	push	{r7, lr}
 8022976:	b086      	sub	sp, #24
 8022978:	af00      	add	r7, sp, #0
 802297a:	60f8      	str	r0, [r7, #12]
 802297c:	60b9      	str	r1, [r7, #8]
 802297e:	607a      	str	r2, [r7, #4]
 8022980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8022982:	2300      	movs	r3, #0
 8022984:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8022986:	68fb      	ldr	r3, [r7, #12]
 8022988:	2b00      	cmp	r3, #0
 802298a:	d101      	bne.n	8022990 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 802298c:	2301      	movs	r3, #1
 802298e:	e226      	b.n	8022dde <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8022990:	68fb      	ldr	r3, [r7, #12]
 8022992:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022996:	2b01      	cmp	r3, #1
 8022998:	d101      	bne.n	802299e <HAL_DMA_Start_IT+0x2a>
 802299a:	2302      	movs	r3, #2
 802299c:	e21f      	b.n	8022dde <HAL_DMA_Start_IT+0x46a>
 802299e:	68fb      	ldr	r3, [r7, #12]
 80229a0:	2201      	movs	r2, #1
 80229a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80229a6:	68fb      	ldr	r3, [r7, #12]
 80229a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80229ac:	b2db      	uxtb	r3, r3
 80229ae:	2b01      	cmp	r3, #1
 80229b0:	f040 820a 	bne.w	8022dc8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80229b4:	68fb      	ldr	r3, [r7, #12]
 80229b6:	2202      	movs	r2, #2
 80229b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80229bc:	68fb      	ldr	r3, [r7, #12]
 80229be:	2200      	movs	r2, #0
 80229c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80229c2:	68fb      	ldr	r3, [r7, #12]
 80229c4:	681b      	ldr	r3, [r3, #0]
 80229c6:	4a68      	ldr	r2, [pc, #416]	; (8022b68 <HAL_DMA_Start_IT+0x1f4>)
 80229c8:	4293      	cmp	r3, r2
 80229ca:	d04a      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 80229cc:	68fb      	ldr	r3, [r7, #12]
 80229ce:	681b      	ldr	r3, [r3, #0]
 80229d0:	4a66      	ldr	r2, [pc, #408]	; (8022b6c <HAL_DMA_Start_IT+0x1f8>)
 80229d2:	4293      	cmp	r3, r2
 80229d4:	d045      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 80229d6:	68fb      	ldr	r3, [r7, #12]
 80229d8:	681b      	ldr	r3, [r3, #0]
 80229da:	4a65      	ldr	r2, [pc, #404]	; (8022b70 <HAL_DMA_Start_IT+0x1fc>)
 80229dc:	4293      	cmp	r3, r2
 80229de:	d040      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 80229e0:	68fb      	ldr	r3, [r7, #12]
 80229e2:	681b      	ldr	r3, [r3, #0]
 80229e4:	4a63      	ldr	r2, [pc, #396]	; (8022b74 <HAL_DMA_Start_IT+0x200>)
 80229e6:	4293      	cmp	r3, r2
 80229e8:	d03b      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 80229ea:	68fb      	ldr	r3, [r7, #12]
 80229ec:	681b      	ldr	r3, [r3, #0]
 80229ee:	4a62      	ldr	r2, [pc, #392]	; (8022b78 <HAL_DMA_Start_IT+0x204>)
 80229f0:	4293      	cmp	r3, r2
 80229f2:	d036      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 80229f4:	68fb      	ldr	r3, [r7, #12]
 80229f6:	681b      	ldr	r3, [r3, #0]
 80229f8:	4a60      	ldr	r2, [pc, #384]	; (8022b7c <HAL_DMA_Start_IT+0x208>)
 80229fa:	4293      	cmp	r3, r2
 80229fc:	d031      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 80229fe:	68fb      	ldr	r3, [r7, #12]
 8022a00:	681b      	ldr	r3, [r3, #0]
 8022a02:	4a5f      	ldr	r2, [pc, #380]	; (8022b80 <HAL_DMA_Start_IT+0x20c>)
 8022a04:	4293      	cmp	r3, r2
 8022a06:	d02c      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 8022a08:	68fb      	ldr	r3, [r7, #12]
 8022a0a:	681b      	ldr	r3, [r3, #0]
 8022a0c:	4a5d      	ldr	r2, [pc, #372]	; (8022b84 <HAL_DMA_Start_IT+0x210>)
 8022a0e:	4293      	cmp	r3, r2
 8022a10:	d027      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 8022a12:	68fb      	ldr	r3, [r7, #12]
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	4a5c      	ldr	r2, [pc, #368]	; (8022b88 <HAL_DMA_Start_IT+0x214>)
 8022a18:	4293      	cmp	r3, r2
 8022a1a:	d022      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 8022a1c:	68fb      	ldr	r3, [r7, #12]
 8022a1e:	681b      	ldr	r3, [r3, #0]
 8022a20:	4a5a      	ldr	r2, [pc, #360]	; (8022b8c <HAL_DMA_Start_IT+0x218>)
 8022a22:	4293      	cmp	r3, r2
 8022a24:	d01d      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 8022a26:	68fb      	ldr	r3, [r7, #12]
 8022a28:	681b      	ldr	r3, [r3, #0]
 8022a2a:	4a59      	ldr	r2, [pc, #356]	; (8022b90 <HAL_DMA_Start_IT+0x21c>)
 8022a2c:	4293      	cmp	r3, r2
 8022a2e:	d018      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 8022a30:	68fb      	ldr	r3, [r7, #12]
 8022a32:	681b      	ldr	r3, [r3, #0]
 8022a34:	4a57      	ldr	r2, [pc, #348]	; (8022b94 <HAL_DMA_Start_IT+0x220>)
 8022a36:	4293      	cmp	r3, r2
 8022a38:	d013      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 8022a3a:	68fb      	ldr	r3, [r7, #12]
 8022a3c:	681b      	ldr	r3, [r3, #0]
 8022a3e:	4a56      	ldr	r2, [pc, #344]	; (8022b98 <HAL_DMA_Start_IT+0x224>)
 8022a40:	4293      	cmp	r3, r2
 8022a42:	d00e      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 8022a44:	68fb      	ldr	r3, [r7, #12]
 8022a46:	681b      	ldr	r3, [r3, #0]
 8022a48:	4a54      	ldr	r2, [pc, #336]	; (8022b9c <HAL_DMA_Start_IT+0x228>)
 8022a4a:	4293      	cmp	r3, r2
 8022a4c:	d009      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 8022a4e:	68fb      	ldr	r3, [r7, #12]
 8022a50:	681b      	ldr	r3, [r3, #0]
 8022a52:	4a53      	ldr	r2, [pc, #332]	; (8022ba0 <HAL_DMA_Start_IT+0x22c>)
 8022a54:	4293      	cmp	r3, r2
 8022a56:	d004      	beq.n	8022a62 <HAL_DMA_Start_IT+0xee>
 8022a58:	68fb      	ldr	r3, [r7, #12]
 8022a5a:	681b      	ldr	r3, [r3, #0]
 8022a5c:	4a51      	ldr	r2, [pc, #324]	; (8022ba4 <HAL_DMA_Start_IT+0x230>)
 8022a5e:	4293      	cmp	r3, r2
 8022a60:	d108      	bne.n	8022a74 <HAL_DMA_Start_IT+0x100>
 8022a62:	68fb      	ldr	r3, [r7, #12]
 8022a64:	681b      	ldr	r3, [r3, #0]
 8022a66:	681a      	ldr	r2, [r3, #0]
 8022a68:	68fb      	ldr	r3, [r7, #12]
 8022a6a:	681b      	ldr	r3, [r3, #0]
 8022a6c:	f022 0201 	bic.w	r2, r2, #1
 8022a70:	601a      	str	r2, [r3, #0]
 8022a72:	e007      	b.n	8022a84 <HAL_DMA_Start_IT+0x110>
 8022a74:	68fb      	ldr	r3, [r7, #12]
 8022a76:	681b      	ldr	r3, [r3, #0]
 8022a78:	681a      	ldr	r2, [r3, #0]
 8022a7a:	68fb      	ldr	r3, [r7, #12]
 8022a7c:	681b      	ldr	r3, [r3, #0]
 8022a7e:	f022 0201 	bic.w	r2, r2, #1
 8022a82:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8022a84:	683b      	ldr	r3, [r7, #0]
 8022a86:	687a      	ldr	r2, [r7, #4]
 8022a88:	68b9      	ldr	r1, [r7, #8]
 8022a8a:	68f8      	ldr	r0, [r7, #12]
 8022a8c:	f001 fe6a 	bl	8024764 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8022a90:	68fb      	ldr	r3, [r7, #12]
 8022a92:	681b      	ldr	r3, [r3, #0]
 8022a94:	4a34      	ldr	r2, [pc, #208]	; (8022b68 <HAL_DMA_Start_IT+0x1f4>)
 8022a96:	4293      	cmp	r3, r2
 8022a98:	d04a      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022a9a:	68fb      	ldr	r3, [r7, #12]
 8022a9c:	681b      	ldr	r3, [r3, #0]
 8022a9e:	4a33      	ldr	r2, [pc, #204]	; (8022b6c <HAL_DMA_Start_IT+0x1f8>)
 8022aa0:	4293      	cmp	r3, r2
 8022aa2:	d045      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022aa4:	68fb      	ldr	r3, [r7, #12]
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	4a31      	ldr	r2, [pc, #196]	; (8022b70 <HAL_DMA_Start_IT+0x1fc>)
 8022aaa:	4293      	cmp	r3, r2
 8022aac:	d040      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022aae:	68fb      	ldr	r3, [r7, #12]
 8022ab0:	681b      	ldr	r3, [r3, #0]
 8022ab2:	4a30      	ldr	r2, [pc, #192]	; (8022b74 <HAL_DMA_Start_IT+0x200>)
 8022ab4:	4293      	cmp	r3, r2
 8022ab6:	d03b      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022ab8:	68fb      	ldr	r3, [r7, #12]
 8022aba:	681b      	ldr	r3, [r3, #0]
 8022abc:	4a2e      	ldr	r2, [pc, #184]	; (8022b78 <HAL_DMA_Start_IT+0x204>)
 8022abe:	4293      	cmp	r3, r2
 8022ac0:	d036      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022ac2:	68fb      	ldr	r3, [r7, #12]
 8022ac4:	681b      	ldr	r3, [r3, #0]
 8022ac6:	4a2d      	ldr	r2, [pc, #180]	; (8022b7c <HAL_DMA_Start_IT+0x208>)
 8022ac8:	4293      	cmp	r3, r2
 8022aca:	d031      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022acc:	68fb      	ldr	r3, [r7, #12]
 8022ace:	681b      	ldr	r3, [r3, #0]
 8022ad0:	4a2b      	ldr	r2, [pc, #172]	; (8022b80 <HAL_DMA_Start_IT+0x20c>)
 8022ad2:	4293      	cmp	r3, r2
 8022ad4:	d02c      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022ad6:	68fb      	ldr	r3, [r7, #12]
 8022ad8:	681b      	ldr	r3, [r3, #0]
 8022ada:	4a2a      	ldr	r2, [pc, #168]	; (8022b84 <HAL_DMA_Start_IT+0x210>)
 8022adc:	4293      	cmp	r3, r2
 8022ade:	d027      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022ae0:	68fb      	ldr	r3, [r7, #12]
 8022ae2:	681b      	ldr	r3, [r3, #0]
 8022ae4:	4a28      	ldr	r2, [pc, #160]	; (8022b88 <HAL_DMA_Start_IT+0x214>)
 8022ae6:	4293      	cmp	r3, r2
 8022ae8:	d022      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022aea:	68fb      	ldr	r3, [r7, #12]
 8022aec:	681b      	ldr	r3, [r3, #0]
 8022aee:	4a27      	ldr	r2, [pc, #156]	; (8022b8c <HAL_DMA_Start_IT+0x218>)
 8022af0:	4293      	cmp	r3, r2
 8022af2:	d01d      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022af4:	68fb      	ldr	r3, [r7, #12]
 8022af6:	681b      	ldr	r3, [r3, #0]
 8022af8:	4a25      	ldr	r2, [pc, #148]	; (8022b90 <HAL_DMA_Start_IT+0x21c>)
 8022afa:	4293      	cmp	r3, r2
 8022afc:	d018      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022afe:	68fb      	ldr	r3, [r7, #12]
 8022b00:	681b      	ldr	r3, [r3, #0]
 8022b02:	4a24      	ldr	r2, [pc, #144]	; (8022b94 <HAL_DMA_Start_IT+0x220>)
 8022b04:	4293      	cmp	r3, r2
 8022b06:	d013      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022b08:	68fb      	ldr	r3, [r7, #12]
 8022b0a:	681b      	ldr	r3, [r3, #0]
 8022b0c:	4a22      	ldr	r2, [pc, #136]	; (8022b98 <HAL_DMA_Start_IT+0x224>)
 8022b0e:	4293      	cmp	r3, r2
 8022b10:	d00e      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022b12:	68fb      	ldr	r3, [r7, #12]
 8022b14:	681b      	ldr	r3, [r3, #0]
 8022b16:	4a21      	ldr	r2, [pc, #132]	; (8022b9c <HAL_DMA_Start_IT+0x228>)
 8022b18:	4293      	cmp	r3, r2
 8022b1a:	d009      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022b1c:	68fb      	ldr	r3, [r7, #12]
 8022b1e:	681b      	ldr	r3, [r3, #0]
 8022b20:	4a1f      	ldr	r2, [pc, #124]	; (8022ba0 <HAL_DMA_Start_IT+0x22c>)
 8022b22:	4293      	cmp	r3, r2
 8022b24:	d004      	beq.n	8022b30 <HAL_DMA_Start_IT+0x1bc>
 8022b26:	68fb      	ldr	r3, [r7, #12]
 8022b28:	681b      	ldr	r3, [r3, #0]
 8022b2a:	4a1e      	ldr	r2, [pc, #120]	; (8022ba4 <HAL_DMA_Start_IT+0x230>)
 8022b2c:	4293      	cmp	r3, r2
 8022b2e:	d101      	bne.n	8022b34 <HAL_DMA_Start_IT+0x1c0>
 8022b30:	2301      	movs	r3, #1
 8022b32:	e000      	b.n	8022b36 <HAL_DMA_Start_IT+0x1c2>
 8022b34:	2300      	movs	r3, #0
 8022b36:	2b00      	cmp	r3, #0
 8022b38:	d036      	beq.n	8022ba8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8022b3a:	68fb      	ldr	r3, [r7, #12]
 8022b3c:	681b      	ldr	r3, [r3, #0]
 8022b3e:	681b      	ldr	r3, [r3, #0]
 8022b40:	f023 021e 	bic.w	r2, r3, #30
 8022b44:	68fb      	ldr	r3, [r7, #12]
 8022b46:	681b      	ldr	r3, [r3, #0]
 8022b48:	f042 0216 	orr.w	r2, r2, #22
 8022b4c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8022b4e:	68fb      	ldr	r3, [r7, #12]
 8022b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b52:	2b00      	cmp	r3, #0
 8022b54:	d03e      	beq.n	8022bd4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8022b56:	68fb      	ldr	r3, [r7, #12]
 8022b58:	681b      	ldr	r3, [r3, #0]
 8022b5a:	681a      	ldr	r2, [r3, #0]
 8022b5c:	68fb      	ldr	r3, [r7, #12]
 8022b5e:	681b      	ldr	r3, [r3, #0]
 8022b60:	f042 0208 	orr.w	r2, r2, #8
 8022b64:	601a      	str	r2, [r3, #0]
 8022b66:	e035      	b.n	8022bd4 <HAL_DMA_Start_IT+0x260>
 8022b68:	40020010 	.word	0x40020010
 8022b6c:	40020028 	.word	0x40020028
 8022b70:	40020040 	.word	0x40020040
 8022b74:	40020058 	.word	0x40020058
 8022b78:	40020070 	.word	0x40020070
 8022b7c:	40020088 	.word	0x40020088
 8022b80:	400200a0 	.word	0x400200a0
 8022b84:	400200b8 	.word	0x400200b8
 8022b88:	40020410 	.word	0x40020410
 8022b8c:	40020428 	.word	0x40020428
 8022b90:	40020440 	.word	0x40020440
 8022b94:	40020458 	.word	0x40020458
 8022b98:	40020470 	.word	0x40020470
 8022b9c:	40020488 	.word	0x40020488
 8022ba0:	400204a0 	.word	0x400204a0
 8022ba4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8022ba8:	68fb      	ldr	r3, [r7, #12]
 8022baa:	681b      	ldr	r3, [r3, #0]
 8022bac:	681b      	ldr	r3, [r3, #0]
 8022bae:	f023 020e 	bic.w	r2, r3, #14
 8022bb2:	68fb      	ldr	r3, [r7, #12]
 8022bb4:	681b      	ldr	r3, [r3, #0]
 8022bb6:	f042 020a 	orr.w	r2, r2, #10
 8022bba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8022bbc:	68fb      	ldr	r3, [r7, #12]
 8022bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022bc0:	2b00      	cmp	r3, #0
 8022bc2:	d007      	beq.n	8022bd4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8022bc4:	68fb      	ldr	r3, [r7, #12]
 8022bc6:	681b      	ldr	r3, [r3, #0]
 8022bc8:	681a      	ldr	r2, [r3, #0]
 8022bca:	68fb      	ldr	r3, [r7, #12]
 8022bcc:	681b      	ldr	r3, [r3, #0]
 8022bce:	f042 0204 	orr.w	r2, r2, #4
 8022bd2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8022bd4:	68fb      	ldr	r3, [r7, #12]
 8022bd6:	681b      	ldr	r3, [r3, #0]
 8022bd8:	4a83      	ldr	r2, [pc, #524]	; (8022de8 <HAL_DMA_Start_IT+0x474>)
 8022bda:	4293      	cmp	r3, r2
 8022bdc:	d072      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022bde:	68fb      	ldr	r3, [r7, #12]
 8022be0:	681b      	ldr	r3, [r3, #0]
 8022be2:	4a82      	ldr	r2, [pc, #520]	; (8022dec <HAL_DMA_Start_IT+0x478>)
 8022be4:	4293      	cmp	r3, r2
 8022be6:	d06d      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022be8:	68fb      	ldr	r3, [r7, #12]
 8022bea:	681b      	ldr	r3, [r3, #0]
 8022bec:	4a80      	ldr	r2, [pc, #512]	; (8022df0 <HAL_DMA_Start_IT+0x47c>)
 8022bee:	4293      	cmp	r3, r2
 8022bf0:	d068      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022bf2:	68fb      	ldr	r3, [r7, #12]
 8022bf4:	681b      	ldr	r3, [r3, #0]
 8022bf6:	4a7f      	ldr	r2, [pc, #508]	; (8022df4 <HAL_DMA_Start_IT+0x480>)
 8022bf8:	4293      	cmp	r3, r2
 8022bfa:	d063      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022bfc:	68fb      	ldr	r3, [r7, #12]
 8022bfe:	681b      	ldr	r3, [r3, #0]
 8022c00:	4a7d      	ldr	r2, [pc, #500]	; (8022df8 <HAL_DMA_Start_IT+0x484>)
 8022c02:	4293      	cmp	r3, r2
 8022c04:	d05e      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c06:	68fb      	ldr	r3, [r7, #12]
 8022c08:	681b      	ldr	r3, [r3, #0]
 8022c0a:	4a7c      	ldr	r2, [pc, #496]	; (8022dfc <HAL_DMA_Start_IT+0x488>)
 8022c0c:	4293      	cmp	r3, r2
 8022c0e:	d059      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c10:	68fb      	ldr	r3, [r7, #12]
 8022c12:	681b      	ldr	r3, [r3, #0]
 8022c14:	4a7a      	ldr	r2, [pc, #488]	; (8022e00 <HAL_DMA_Start_IT+0x48c>)
 8022c16:	4293      	cmp	r3, r2
 8022c18:	d054      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c1a:	68fb      	ldr	r3, [r7, #12]
 8022c1c:	681b      	ldr	r3, [r3, #0]
 8022c1e:	4a79      	ldr	r2, [pc, #484]	; (8022e04 <HAL_DMA_Start_IT+0x490>)
 8022c20:	4293      	cmp	r3, r2
 8022c22:	d04f      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c24:	68fb      	ldr	r3, [r7, #12]
 8022c26:	681b      	ldr	r3, [r3, #0]
 8022c28:	4a77      	ldr	r2, [pc, #476]	; (8022e08 <HAL_DMA_Start_IT+0x494>)
 8022c2a:	4293      	cmp	r3, r2
 8022c2c:	d04a      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c2e:	68fb      	ldr	r3, [r7, #12]
 8022c30:	681b      	ldr	r3, [r3, #0]
 8022c32:	4a76      	ldr	r2, [pc, #472]	; (8022e0c <HAL_DMA_Start_IT+0x498>)
 8022c34:	4293      	cmp	r3, r2
 8022c36:	d045      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c38:	68fb      	ldr	r3, [r7, #12]
 8022c3a:	681b      	ldr	r3, [r3, #0]
 8022c3c:	4a74      	ldr	r2, [pc, #464]	; (8022e10 <HAL_DMA_Start_IT+0x49c>)
 8022c3e:	4293      	cmp	r3, r2
 8022c40:	d040      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c42:	68fb      	ldr	r3, [r7, #12]
 8022c44:	681b      	ldr	r3, [r3, #0]
 8022c46:	4a73      	ldr	r2, [pc, #460]	; (8022e14 <HAL_DMA_Start_IT+0x4a0>)
 8022c48:	4293      	cmp	r3, r2
 8022c4a:	d03b      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c4c:	68fb      	ldr	r3, [r7, #12]
 8022c4e:	681b      	ldr	r3, [r3, #0]
 8022c50:	4a71      	ldr	r2, [pc, #452]	; (8022e18 <HAL_DMA_Start_IT+0x4a4>)
 8022c52:	4293      	cmp	r3, r2
 8022c54:	d036      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c56:	68fb      	ldr	r3, [r7, #12]
 8022c58:	681b      	ldr	r3, [r3, #0]
 8022c5a:	4a70      	ldr	r2, [pc, #448]	; (8022e1c <HAL_DMA_Start_IT+0x4a8>)
 8022c5c:	4293      	cmp	r3, r2
 8022c5e:	d031      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c60:	68fb      	ldr	r3, [r7, #12]
 8022c62:	681b      	ldr	r3, [r3, #0]
 8022c64:	4a6e      	ldr	r2, [pc, #440]	; (8022e20 <HAL_DMA_Start_IT+0x4ac>)
 8022c66:	4293      	cmp	r3, r2
 8022c68:	d02c      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c6a:	68fb      	ldr	r3, [r7, #12]
 8022c6c:	681b      	ldr	r3, [r3, #0]
 8022c6e:	4a6d      	ldr	r2, [pc, #436]	; (8022e24 <HAL_DMA_Start_IT+0x4b0>)
 8022c70:	4293      	cmp	r3, r2
 8022c72:	d027      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c74:	68fb      	ldr	r3, [r7, #12]
 8022c76:	681b      	ldr	r3, [r3, #0]
 8022c78:	4a6b      	ldr	r2, [pc, #428]	; (8022e28 <HAL_DMA_Start_IT+0x4b4>)
 8022c7a:	4293      	cmp	r3, r2
 8022c7c:	d022      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c7e:	68fb      	ldr	r3, [r7, #12]
 8022c80:	681b      	ldr	r3, [r3, #0]
 8022c82:	4a6a      	ldr	r2, [pc, #424]	; (8022e2c <HAL_DMA_Start_IT+0x4b8>)
 8022c84:	4293      	cmp	r3, r2
 8022c86:	d01d      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c88:	68fb      	ldr	r3, [r7, #12]
 8022c8a:	681b      	ldr	r3, [r3, #0]
 8022c8c:	4a68      	ldr	r2, [pc, #416]	; (8022e30 <HAL_DMA_Start_IT+0x4bc>)
 8022c8e:	4293      	cmp	r3, r2
 8022c90:	d018      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c92:	68fb      	ldr	r3, [r7, #12]
 8022c94:	681b      	ldr	r3, [r3, #0]
 8022c96:	4a67      	ldr	r2, [pc, #412]	; (8022e34 <HAL_DMA_Start_IT+0x4c0>)
 8022c98:	4293      	cmp	r3, r2
 8022c9a:	d013      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022c9c:	68fb      	ldr	r3, [r7, #12]
 8022c9e:	681b      	ldr	r3, [r3, #0]
 8022ca0:	4a65      	ldr	r2, [pc, #404]	; (8022e38 <HAL_DMA_Start_IT+0x4c4>)
 8022ca2:	4293      	cmp	r3, r2
 8022ca4:	d00e      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022ca6:	68fb      	ldr	r3, [r7, #12]
 8022ca8:	681b      	ldr	r3, [r3, #0]
 8022caa:	4a64      	ldr	r2, [pc, #400]	; (8022e3c <HAL_DMA_Start_IT+0x4c8>)
 8022cac:	4293      	cmp	r3, r2
 8022cae:	d009      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022cb0:	68fb      	ldr	r3, [r7, #12]
 8022cb2:	681b      	ldr	r3, [r3, #0]
 8022cb4:	4a62      	ldr	r2, [pc, #392]	; (8022e40 <HAL_DMA_Start_IT+0x4cc>)
 8022cb6:	4293      	cmp	r3, r2
 8022cb8:	d004      	beq.n	8022cc4 <HAL_DMA_Start_IT+0x350>
 8022cba:	68fb      	ldr	r3, [r7, #12]
 8022cbc:	681b      	ldr	r3, [r3, #0]
 8022cbe:	4a61      	ldr	r2, [pc, #388]	; (8022e44 <HAL_DMA_Start_IT+0x4d0>)
 8022cc0:	4293      	cmp	r3, r2
 8022cc2:	d101      	bne.n	8022cc8 <HAL_DMA_Start_IT+0x354>
 8022cc4:	2301      	movs	r3, #1
 8022cc6:	e000      	b.n	8022cca <HAL_DMA_Start_IT+0x356>
 8022cc8:	2300      	movs	r3, #0
 8022cca:	2b00      	cmp	r3, #0
 8022ccc:	d01a      	beq.n	8022d04 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8022cce:	68fb      	ldr	r3, [r7, #12]
 8022cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8022cd2:	681b      	ldr	r3, [r3, #0]
 8022cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022cd8:	2b00      	cmp	r3, #0
 8022cda:	d007      	beq.n	8022cec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8022cdc:	68fb      	ldr	r3, [r7, #12]
 8022cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8022ce0:	681a      	ldr	r2, [r3, #0]
 8022ce2:	68fb      	ldr	r3, [r7, #12]
 8022ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8022ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022cea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8022cec:	68fb      	ldr	r3, [r7, #12]
 8022cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022cf0:	2b00      	cmp	r3, #0
 8022cf2:	d007      	beq.n	8022d04 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8022cf4:	68fb      	ldr	r3, [r7, #12]
 8022cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022cf8:	681a      	ldr	r2, [r3, #0]
 8022cfa:	68fb      	ldr	r3, [r7, #12]
 8022cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022d02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8022d04:	68fb      	ldr	r3, [r7, #12]
 8022d06:	681b      	ldr	r3, [r3, #0]
 8022d08:	4a37      	ldr	r2, [pc, #220]	; (8022de8 <HAL_DMA_Start_IT+0x474>)
 8022d0a:	4293      	cmp	r3, r2
 8022d0c:	d04a      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d0e:	68fb      	ldr	r3, [r7, #12]
 8022d10:	681b      	ldr	r3, [r3, #0]
 8022d12:	4a36      	ldr	r2, [pc, #216]	; (8022dec <HAL_DMA_Start_IT+0x478>)
 8022d14:	4293      	cmp	r3, r2
 8022d16:	d045      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d18:	68fb      	ldr	r3, [r7, #12]
 8022d1a:	681b      	ldr	r3, [r3, #0]
 8022d1c:	4a34      	ldr	r2, [pc, #208]	; (8022df0 <HAL_DMA_Start_IT+0x47c>)
 8022d1e:	4293      	cmp	r3, r2
 8022d20:	d040      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d22:	68fb      	ldr	r3, [r7, #12]
 8022d24:	681b      	ldr	r3, [r3, #0]
 8022d26:	4a33      	ldr	r2, [pc, #204]	; (8022df4 <HAL_DMA_Start_IT+0x480>)
 8022d28:	4293      	cmp	r3, r2
 8022d2a:	d03b      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d2c:	68fb      	ldr	r3, [r7, #12]
 8022d2e:	681b      	ldr	r3, [r3, #0]
 8022d30:	4a31      	ldr	r2, [pc, #196]	; (8022df8 <HAL_DMA_Start_IT+0x484>)
 8022d32:	4293      	cmp	r3, r2
 8022d34:	d036      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d36:	68fb      	ldr	r3, [r7, #12]
 8022d38:	681b      	ldr	r3, [r3, #0]
 8022d3a:	4a30      	ldr	r2, [pc, #192]	; (8022dfc <HAL_DMA_Start_IT+0x488>)
 8022d3c:	4293      	cmp	r3, r2
 8022d3e:	d031      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d40:	68fb      	ldr	r3, [r7, #12]
 8022d42:	681b      	ldr	r3, [r3, #0]
 8022d44:	4a2e      	ldr	r2, [pc, #184]	; (8022e00 <HAL_DMA_Start_IT+0x48c>)
 8022d46:	4293      	cmp	r3, r2
 8022d48:	d02c      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d4a:	68fb      	ldr	r3, [r7, #12]
 8022d4c:	681b      	ldr	r3, [r3, #0]
 8022d4e:	4a2d      	ldr	r2, [pc, #180]	; (8022e04 <HAL_DMA_Start_IT+0x490>)
 8022d50:	4293      	cmp	r3, r2
 8022d52:	d027      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d54:	68fb      	ldr	r3, [r7, #12]
 8022d56:	681b      	ldr	r3, [r3, #0]
 8022d58:	4a2b      	ldr	r2, [pc, #172]	; (8022e08 <HAL_DMA_Start_IT+0x494>)
 8022d5a:	4293      	cmp	r3, r2
 8022d5c:	d022      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d5e:	68fb      	ldr	r3, [r7, #12]
 8022d60:	681b      	ldr	r3, [r3, #0]
 8022d62:	4a2a      	ldr	r2, [pc, #168]	; (8022e0c <HAL_DMA_Start_IT+0x498>)
 8022d64:	4293      	cmp	r3, r2
 8022d66:	d01d      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d68:	68fb      	ldr	r3, [r7, #12]
 8022d6a:	681b      	ldr	r3, [r3, #0]
 8022d6c:	4a28      	ldr	r2, [pc, #160]	; (8022e10 <HAL_DMA_Start_IT+0x49c>)
 8022d6e:	4293      	cmp	r3, r2
 8022d70:	d018      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d72:	68fb      	ldr	r3, [r7, #12]
 8022d74:	681b      	ldr	r3, [r3, #0]
 8022d76:	4a27      	ldr	r2, [pc, #156]	; (8022e14 <HAL_DMA_Start_IT+0x4a0>)
 8022d78:	4293      	cmp	r3, r2
 8022d7a:	d013      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d7c:	68fb      	ldr	r3, [r7, #12]
 8022d7e:	681b      	ldr	r3, [r3, #0]
 8022d80:	4a25      	ldr	r2, [pc, #148]	; (8022e18 <HAL_DMA_Start_IT+0x4a4>)
 8022d82:	4293      	cmp	r3, r2
 8022d84:	d00e      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d86:	68fb      	ldr	r3, [r7, #12]
 8022d88:	681b      	ldr	r3, [r3, #0]
 8022d8a:	4a24      	ldr	r2, [pc, #144]	; (8022e1c <HAL_DMA_Start_IT+0x4a8>)
 8022d8c:	4293      	cmp	r3, r2
 8022d8e:	d009      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d90:	68fb      	ldr	r3, [r7, #12]
 8022d92:	681b      	ldr	r3, [r3, #0]
 8022d94:	4a22      	ldr	r2, [pc, #136]	; (8022e20 <HAL_DMA_Start_IT+0x4ac>)
 8022d96:	4293      	cmp	r3, r2
 8022d98:	d004      	beq.n	8022da4 <HAL_DMA_Start_IT+0x430>
 8022d9a:	68fb      	ldr	r3, [r7, #12]
 8022d9c:	681b      	ldr	r3, [r3, #0]
 8022d9e:	4a21      	ldr	r2, [pc, #132]	; (8022e24 <HAL_DMA_Start_IT+0x4b0>)
 8022da0:	4293      	cmp	r3, r2
 8022da2:	d108      	bne.n	8022db6 <HAL_DMA_Start_IT+0x442>
 8022da4:	68fb      	ldr	r3, [r7, #12]
 8022da6:	681b      	ldr	r3, [r3, #0]
 8022da8:	681a      	ldr	r2, [r3, #0]
 8022daa:	68fb      	ldr	r3, [r7, #12]
 8022dac:	681b      	ldr	r3, [r3, #0]
 8022dae:	f042 0201 	orr.w	r2, r2, #1
 8022db2:	601a      	str	r2, [r3, #0]
 8022db4:	e012      	b.n	8022ddc <HAL_DMA_Start_IT+0x468>
 8022db6:	68fb      	ldr	r3, [r7, #12]
 8022db8:	681b      	ldr	r3, [r3, #0]
 8022dba:	681a      	ldr	r2, [r3, #0]
 8022dbc:	68fb      	ldr	r3, [r7, #12]
 8022dbe:	681b      	ldr	r3, [r3, #0]
 8022dc0:	f042 0201 	orr.w	r2, r2, #1
 8022dc4:	601a      	str	r2, [r3, #0]
 8022dc6:	e009      	b.n	8022ddc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8022dc8:	68fb      	ldr	r3, [r7, #12]
 8022dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022dce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8022dd0:	68fb      	ldr	r3, [r7, #12]
 8022dd2:	2200      	movs	r2, #0
 8022dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8022dd8:	2301      	movs	r3, #1
 8022dda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8022ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8022dde:	4618      	mov	r0, r3
 8022de0:	3718      	adds	r7, #24
 8022de2:	46bd      	mov	sp, r7
 8022de4:	bd80      	pop	{r7, pc}
 8022de6:	bf00      	nop
 8022de8:	40020010 	.word	0x40020010
 8022dec:	40020028 	.word	0x40020028
 8022df0:	40020040 	.word	0x40020040
 8022df4:	40020058 	.word	0x40020058
 8022df8:	40020070 	.word	0x40020070
 8022dfc:	40020088 	.word	0x40020088
 8022e00:	400200a0 	.word	0x400200a0
 8022e04:	400200b8 	.word	0x400200b8
 8022e08:	40020410 	.word	0x40020410
 8022e0c:	40020428 	.word	0x40020428
 8022e10:	40020440 	.word	0x40020440
 8022e14:	40020458 	.word	0x40020458
 8022e18:	40020470 	.word	0x40020470
 8022e1c:	40020488 	.word	0x40020488
 8022e20:	400204a0 	.word	0x400204a0
 8022e24:	400204b8 	.word	0x400204b8
 8022e28:	58025408 	.word	0x58025408
 8022e2c:	5802541c 	.word	0x5802541c
 8022e30:	58025430 	.word	0x58025430
 8022e34:	58025444 	.word	0x58025444
 8022e38:	58025458 	.word	0x58025458
 8022e3c:	5802546c 	.word	0x5802546c
 8022e40:	58025480 	.word	0x58025480
 8022e44:	58025494 	.word	0x58025494

08022e48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8022e48:	b580      	push	{r7, lr}
 8022e4a:	b086      	sub	sp, #24
 8022e4c:	af00      	add	r7, sp, #0
 8022e4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8022e50:	f7ff f926 	bl	80220a0 <HAL_GetTick>
 8022e54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8022e56:	687b      	ldr	r3, [r7, #4]
 8022e58:	2b00      	cmp	r3, #0
 8022e5a:	d101      	bne.n	8022e60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8022e5c:	2301      	movs	r3, #1
 8022e5e:	e2dc      	b.n	802341a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8022e66:	b2db      	uxtb	r3, r3
 8022e68:	2b02      	cmp	r3, #2
 8022e6a:	d008      	beq.n	8022e7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	2280      	movs	r2, #128	; 0x80
 8022e70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8022e72:	687b      	ldr	r3, [r7, #4]
 8022e74:	2200      	movs	r2, #0
 8022e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8022e7a:	2301      	movs	r3, #1
 8022e7c:	e2cd      	b.n	802341a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8022e7e:	687b      	ldr	r3, [r7, #4]
 8022e80:	681b      	ldr	r3, [r3, #0]
 8022e82:	4a76      	ldr	r2, [pc, #472]	; (802305c <HAL_DMA_Abort+0x214>)
 8022e84:	4293      	cmp	r3, r2
 8022e86:	d04a      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	681b      	ldr	r3, [r3, #0]
 8022e8c:	4a74      	ldr	r2, [pc, #464]	; (8023060 <HAL_DMA_Abort+0x218>)
 8022e8e:	4293      	cmp	r3, r2
 8022e90:	d045      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022e92:	687b      	ldr	r3, [r7, #4]
 8022e94:	681b      	ldr	r3, [r3, #0]
 8022e96:	4a73      	ldr	r2, [pc, #460]	; (8023064 <HAL_DMA_Abort+0x21c>)
 8022e98:	4293      	cmp	r3, r2
 8022e9a:	d040      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022e9c:	687b      	ldr	r3, [r7, #4]
 8022e9e:	681b      	ldr	r3, [r3, #0]
 8022ea0:	4a71      	ldr	r2, [pc, #452]	; (8023068 <HAL_DMA_Abort+0x220>)
 8022ea2:	4293      	cmp	r3, r2
 8022ea4:	d03b      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022ea6:	687b      	ldr	r3, [r7, #4]
 8022ea8:	681b      	ldr	r3, [r3, #0]
 8022eaa:	4a70      	ldr	r2, [pc, #448]	; (802306c <HAL_DMA_Abort+0x224>)
 8022eac:	4293      	cmp	r3, r2
 8022eae:	d036      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022eb0:	687b      	ldr	r3, [r7, #4]
 8022eb2:	681b      	ldr	r3, [r3, #0]
 8022eb4:	4a6e      	ldr	r2, [pc, #440]	; (8023070 <HAL_DMA_Abort+0x228>)
 8022eb6:	4293      	cmp	r3, r2
 8022eb8:	d031      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022eba:	687b      	ldr	r3, [r7, #4]
 8022ebc:	681b      	ldr	r3, [r3, #0]
 8022ebe:	4a6d      	ldr	r2, [pc, #436]	; (8023074 <HAL_DMA_Abort+0x22c>)
 8022ec0:	4293      	cmp	r3, r2
 8022ec2:	d02c      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022ec4:	687b      	ldr	r3, [r7, #4]
 8022ec6:	681b      	ldr	r3, [r3, #0]
 8022ec8:	4a6b      	ldr	r2, [pc, #428]	; (8023078 <HAL_DMA_Abort+0x230>)
 8022eca:	4293      	cmp	r3, r2
 8022ecc:	d027      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022ece:	687b      	ldr	r3, [r7, #4]
 8022ed0:	681b      	ldr	r3, [r3, #0]
 8022ed2:	4a6a      	ldr	r2, [pc, #424]	; (802307c <HAL_DMA_Abort+0x234>)
 8022ed4:	4293      	cmp	r3, r2
 8022ed6:	d022      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022ed8:	687b      	ldr	r3, [r7, #4]
 8022eda:	681b      	ldr	r3, [r3, #0]
 8022edc:	4a68      	ldr	r2, [pc, #416]	; (8023080 <HAL_DMA_Abort+0x238>)
 8022ede:	4293      	cmp	r3, r2
 8022ee0:	d01d      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022ee2:	687b      	ldr	r3, [r7, #4]
 8022ee4:	681b      	ldr	r3, [r3, #0]
 8022ee6:	4a67      	ldr	r2, [pc, #412]	; (8023084 <HAL_DMA_Abort+0x23c>)
 8022ee8:	4293      	cmp	r3, r2
 8022eea:	d018      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022eec:	687b      	ldr	r3, [r7, #4]
 8022eee:	681b      	ldr	r3, [r3, #0]
 8022ef0:	4a65      	ldr	r2, [pc, #404]	; (8023088 <HAL_DMA_Abort+0x240>)
 8022ef2:	4293      	cmp	r3, r2
 8022ef4:	d013      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022ef6:	687b      	ldr	r3, [r7, #4]
 8022ef8:	681b      	ldr	r3, [r3, #0]
 8022efa:	4a64      	ldr	r2, [pc, #400]	; (802308c <HAL_DMA_Abort+0x244>)
 8022efc:	4293      	cmp	r3, r2
 8022efe:	d00e      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022f00:	687b      	ldr	r3, [r7, #4]
 8022f02:	681b      	ldr	r3, [r3, #0]
 8022f04:	4a62      	ldr	r2, [pc, #392]	; (8023090 <HAL_DMA_Abort+0x248>)
 8022f06:	4293      	cmp	r3, r2
 8022f08:	d009      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	681b      	ldr	r3, [r3, #0]
 8022f0e:	4a61      	ldr	r2, [pc, #388]	; (8023094 <HAL_DMA_Abort+0x24c>)
 8022f10:	4293      	cmp	r3, r2
 8022f12:	d004      	beq.n	8022f1e <HAL_DMA_Abort+0xd6>
 8022f14:	687b      	ldr	r3, [r7, #4]
 8022f16:	681b      	ldr	r3, [r3, #0]
 8022f18:	4a5f      	ldr	r2, [pc, #380]	; (8023098 <HAL_DMA_Abort+0x250>)
 8022f1a:	4293      	cmp	r3, r2
 8022f1c:	d101      	bne.n	8022f22 <HAL_DMA_Abort+0xda>
 8022f1e:	2301      	movs	r3, #1
 8022f20:	e000      	b.n	8022f24 <HAL_DMA_Abort+0xdc>
 8022f22:	2300      	movs	r3, #0
 8022f24:	2b00      	cmp	r3, #0
 8022f26:	d013      	beq.n	8022f50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8022f28:	687b      	ldr	r3, [r7, #4]
 8022f2a:	681b      	ldr	r3, [r3, #0]
 8022f2c:	681a      	ldr	r2, [r3, #0]
 8022f2e:	687b      	ldr	r3, [r7, #4]
 8022f30:	681b      	ldr	r3, [r3, #0]
 8022f32:	f022 021e 	bic.w	r2, r2, #30
 8022f36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8022f38:	687b      	ldr	r3, [r7, #4]
 8022f3a:	681b      	ldr	r3, [r3, #0]
 8022f3c:	695a      	ldr	r2, [r3, #20]
 8022f3e:	687b      	ldr	r3, [r7, #4]
 8022f40:	681b      	ldr	r3, [r3, #0]
 8022f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022f46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8022f48:	687b      	ldr	r3, [r7, #4]
 8022f4a:	681b      	ldr	r3, [r3, #0]
 8022f4c:	617b      	str	r3, [r7, #20]
 8022f4e:	e00a      	b.n	8022f66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8022f50:	687b      	ldr	r3, [r7, #4]
 8022f52:	681b      	ldr	r3, [r3, #0]
 8022f54:	681a      	ldr	r2, [r3, #0]
 8022f56:	687b      	ldr	r3, [r7, #4]
 8022f58:	681b      	ldr	r3, [r3, #0]
 8022f5a:	f022 020e 	bic.w	r2, r2, #14
 8022f5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8022f60:	687b      	ldr	r3, [r7, #4]
 8022f62:	681b      	ldr	r3, [r3, #0]
 8022f64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8022f66:	687b      	ldr	r3, [r7, #4]
 8022f68:	681b      	ldr	r3, [r3, #0]
 8022f6a:	4a3c      	ldr	r2, [pc, #240]	; (802305c <HAL_DMA_Abort+0x214>)
 8022f6c:	4293      	cmp	r3, r2
 8022f6e:	d072      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022f70:	687b      	ldr	r3, [r7, #4]
 8022f72:	681b      	ldr	r3, [r3, #0]
 8022f74:	4a3a      	ldr	r2, [pc, #232]	; (8023060 <HAL_DMA_Abort+0x218>)
 8022f76:	4293      	cmp	r3, r2
 8022f78:	d06d      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022f7a:	687b      	ldr	r3, [r7, #4]
 8022f7c:	681b      	ldr	r3, [r3, #0]
 8022f7e:	4a39      	ldr	r2, [pc, #228]	; (8023064 <HAL_DMA_Abort+0x21c>)
 8022f80:	4293      	cmp	r3, r2
 8022f82:	d068      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022f84:	687b      	ldr	r3, [r7, #4]
 8022f86:	681b      	ldr	r3, [r3, #0]
 8022f88:	4a37      	ldr	r2, [pc, #220]	; (8023068 <HAL_DMA_Abort+0x220>)
 8022f8a:	4293      	cmp	r3, r2
 8022f8c:	d063      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	681b      	ldr	r3, [r3, #0]
 8022f92:	4a36      	ldr	r2, [pc, #216]	; (802306c <HAL_DMA_Abort+0x224>)
 8022f94:	4293      	cmp	r3, r2
 8022f96:	d05e      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022f98:	687b      	ldr	r3, [r7, #4]
 8022f9a:	681b      	ldr	r3, [r3, #0]
 8022f9c:	4a34      	ldr	r2, [pc, #208]	; (8023070 <HAL_DMA_Abort+0x228>)
 8022f9e:	4293      	cmp	r3, r2
 8022fa0:	d059      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	681b      	ldr	r3, [r3, #0]
 8022fa6:	4a33      	ldr	r2, [pc, #204]	; (8023074 <HAL_DMA_Abort+0x22c>)
 8022fa8:	4293      	cmp	r3, r2
 8022faa:	d054      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022fac:	687b      	ldr	r3, [r7, #4]
 8022fae:	681b      	ldr	r3, [r3, #0]
 8022fb0:	4a31      	ldr	r2, [pc, #196]	; (8023078 <HAL_DMA_Abort+0x230>)
 8022fb2:	4293      	cmp	r3, r2
 8022fb4:	d04f      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	681b      	ldr	r3, [r3, #0]
 8022fba:	4a30      	ldr	r2, [pc, #192]	; (802307c <HAL_DMA_Abort+0x234>)
 8022fbc:	4293      	cmp	r3, r2
 8022fbe:	d04a      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022fc0:	687b      	ldr	r3, [r7, #4]
 8022fc2:	681b      	ldr	r3, [r3, #0]
 8022fc4:	4a2e      	ldr	r2, [pc, #184]	; (8023080 <HAL_DMA_Abort+0x238>)
 8022fc6:	4293      	cmp	r3, r2
 8022fc8:	d045      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	4a2d      	ldr	r2, [pc, #180]	; (8023084 <HAL_DMA_Abort+0x23c>)
 8022fd0:	4293      	cmp	r3, r2
 8022fd2:	d040      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022fd4:	687b      	ldr	r3, [r7, #4]
 8022fd6:	681b      	ldr	r3, [r3, #0]
 8022fd8:	4a2b      	ldr	r2, [pc, #172]	; (8023088 <HAL_DMA_Abort+0x240>)
 8022fda:	4293      	cmp	r3, r2
 8022fdc:	d03b      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	681b      	ldr	r3, [r3, #0]
 8022fe2:	4a2a      	ldr	r2, [pc, #168]	; (802308c <HAL_DMA_Abort+0x244>)
 8022fe4:	4293      	cmp	r3, r2
 8022fe6:	d036      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022fe8:	687b      	ldr	r3, [r7, #4]
 8022fea:	681b      	ldr	r3, [r3, #0]
 8022fec:	4a28      	ldr	r2, [pc, #160]	; (8023090 <HAL_DMA_Abort+0x248>)
 8022fee:	4293      	cmp	r3, r2
 8022ff0:	d031      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022ff2:	687b      	ldr	r3, [r7, #4]
 8022ff4:	681b      	ldr	r3, [r3, #0]
 8022ff6:	4a27      	ldr	r2, [pc, #156]	; (8023094 <HAL_DMA_Abort+0x24c>)
 8022ff8:	4293      	cmp	r3, r2
 8022ffa:	d02c      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8022ffc:	687b      	ldr	r3, [r7, #4]
 8022ffe:	681b      	ldr	r3, [r3, #0]
 8023000:	4a25      	ldr	r2, [pc, #148]	; (8023098 <HAL_DMA_Abort+0x250>)
 8023002:	4293      	cmp	r3, r2
 8023004:	d027      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8023006:	687b      	ldr	r3, [r7, #4]
 8023008:	681b      	ldr	r3, [r3, #0]
 802300a:	4a24      	ldr	r2, [pc, #144]	; (802309c <HAL_DMA_Abort+0x254>)
 802300c:	4293      	cmp	r3, r2
 802300e:	d022      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8023010:	687b      	ldr	r3, [r7, #4]
 8023012:	681b      	ldr	r3, [r3, #0]
 8023014:	4a22      	ldr	r2, [pc, #136]	; (80230a0 <HAL_DMA_Abort+0x258>)
 8023016:	4293      	cmp	r3, r2
 8023018:	d01d      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 802301a:	687b      	ldr	r3, [r7, #4]
 802301c:	681b      	ldr	r3, [r3, #0]
 802301e:	4a21      	ldr	r2, [pc, #132]	; (80230a4 <HAL_DMA_Abort+0x25c>)
 8023020:	4293      	cmp	r3, r2
 8023022:	d018      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8023024:	687b      	ldr	r3, [r7, #4]
 8023026:	681b      	ldr	r3, [r3, #0]
 8023028:	4a1f      	ldr	r2, [pc, #124]	; (80230a8 <HAL_DMA_Abort+0x260>)
 802302a:	4293      	cmp	r3, r2
 802302c:	d013      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 802302e:	687b      	ldr	r3, [r7, #4]
 8023030:	681b      	ldr	r3, [r3, #0]
 8023032:	4a1e      	ldr	r2, [pc, #120]	; (80230ac <HAL_DMA_Abort+0x264>)
 8023034:	4293      	cmp	r3, r2
 8023036:	d00e      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	681b      	ldr	r3, [r3, #0]
 802303c:	4a1c      	ldr	r2, [pc, #112]	; (80230b0 <HAL_DMA_Abort+0x268>)
 802303e:	4293      	cmp	r3, r2
 8023040:	d009      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 8023042:	687b      	ldr	r3, [r7, #4]
 8023044:	681b      	ldr	r3, [r3, #0]
 8023046:	4a1b      	ldr	r2, [pc, #108]	; (80230b4 <HAL_DMA_Abort+0x26c>)
 8023048:	4293      	cmp	r3, r2
 802304a:	d004      	beq.n	8023056 <HAL_DMA_Abort+0x20e>
 802304c:	687b      	ldr	r3, [r7, #4]
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	4a19      	ldr	r2, [pc, #100]	; (80230b8 <HAL_DMA_Abort+0x270>)
 8023052:	4293      	cmp	r3, r2
 8023054:	d132      	bne.n	80230bc <HAL_DMA_Abort+0x274>
 8023056:	2301      	movs	r3, #1
 8023058:	e031      	b.n	80230be <HAL_DMA_Abort+0x276>
 802305a:	bf00      	nop
 802305c:	40020010 	.word	0x40020010
 8023060:	40020028 	.word	0x40020028
 8023064:	40020040 	.word	0x40020040
 8023068:	40020058 	.word	0x40020058
 802306c:	40020070 	.word	0x40020070
 8023070:	40020088 	.word	0x40020088
 8023074:	400200a0 	.word	0x400200a0
 8023078:	400200b8 	.word	0x400200b8
 802307c:	40020410 	.word	0x40020410
 8023080:	40020428 	.word	0x40020428
 8023084:	40020440 	.word	0x40020440
 8023088:	40020458 	.word	0x40020458
 802308c:	40020470 	.word	0x40020470
 8023090:	40020488 	.word	0x40020488
 8023094:	400204a0 	.word	0x400204a0
 8023098:	400204b8 	.word	0x400204b8
 802309c:	58025408 	.word	0x58025408
 80230a0:	5802541c 	.word	0x5802541c
 80230a4:	58025430 	.word	0x58025430
 80230a8:	58025444 	.word	0x58025444
 80230ac:	58025458 	.word	0x58025458
 80230b0:	5802546c 	.word	0x5802546c
 80230b4:	58025480 	.word	0x58025480
 80230b8:	58025494 	.word	0x58025494
 80230bc:	2300      	movs	r3, #0
 80230be:	2b00      	cmp	r3, #0
 80230c0:	d007      	beq.n	80230d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80230c2:	687b      	ldr	r3, [r7, #4]
 80230c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80230c6:	681a      	ldr	r2, [r3, #0]
 80230c8:	687b      	ldr	r3, [r7, #4]
 80230ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80230cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80230d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80230d2:	687b      	ldr	r3, [r7, #4]
 80230d4:	681b      	ldr	r3, [r3, #0]
 80230d6:	4a6d      	ldr	r2, [pc, #436]	; (802328c <HAL_DMA_Abort+0x444>)
 80230d8:	4293      	cmp	r3, r2
 80230da:	d04a      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 80230dc:	687b      	ldr	r3, [r7, #4]
 80230de:	681b      	ldr	r3, [r3, #0]
 80230e0:	4a6b      	ldr	r2, [pc, #428]	; (8023290 <HAL_DMA_Abort+0x448>)
 80230e2:	4293      	cmp	r3, r2
 80230e4:	d045      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 80230e6:	687b      	ldr	r3, [r7, #4]
 80230e8:	681b      	ldr	r3, [r3, #0]
 80230ea:	4a6a      	ldr	r2, [pc, #424]	; (8023294 <HAL_DMA_Abort+0x44c>)
 80230ec:	4293      	cmp	r3, r2
 80230ee:	d040      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 80230f0:	687b      	ldr	r3, [r7, #4]
 80230f2:	681b      	ldr	r3, [r3, #0]
 80230f4:	4a68      	ldr	r2, [pc, #416]	; (8023298 <HAL_DMA_Abort+0x450>)
 80230f6:	4293      	cmp	r3, r2
 80230f8:	d03b      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 80230fa:	687b      	ldr	r3, [r7, #4]
 80230fc:	681b      	ldr	r3, [r3, #0]
 80230fe:	4a67      	ldr	r2, [pc, #412]	; (802329c <HAL_DMA_Abort+0x454>)
 8023100:	4293      	cmp	r3, r2
 8023102:	d036      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 8023104:	687b      	ldr	r3, [r7, #4]
 8023106:	681b      	ldr	r3, [r3, #0]
 8023108:	4a65      	ldr	r2, [pc, #404]	; (80232a0 <HAL_DMA_Abort+0x458>)
 802310a:	4293      	cmp	r3, r2
 802310c:	d031      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 802310e:	687b      	ldr	r3, [r7, #4]
 8023110:	681b      	ldr	r3, [r3, #0]
 8023112:	4a64      	ldr	r2, [pc, #400]	; (80232a4 <HAL_DMA_Abort+0x45c>)
 8023114:	4293      	cmp	r3, r2
 8023116:	d02c      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 8023118:	687b      	ldr	r3, [r7, #4]
 802311a:	681b      	ldr	r3, [r3, #0]
 802311c:	4a62      	ldr	r2, [pc, #392]	; (80232a8 <HAL_DMA_Abort+0x460>)
 802311e:	4293      	cmp	r3, r2
 8023120:	d027      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 8023122:	687b      	ldr	r3, [r7, #4]
 8023124:	681b      	ldr	r3, [r3, #0]
 8023126:	4a61      	ldr	r2, [pc, #388]	; (80232ac <HAL_DMA_Abort+0x464>)
 8023128:	4293      	cmp	r3, r2
 802312a:	d022      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 802312c:	687b      	ldr	r3, [r7, #4]
 802312e:	681b      	ldr	r3, [r3, #0]
 8023130:	4a5f      	ldr	r2, [pc, #380]	; (80232b0 <HAL_DMA_Abort+0x468>)
 8023132:	4293      	cmp	r3, r2
 8023134:	d01d      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 8023136:	687b      	ldr	r3, [r7, #4]
 8023138:	681b      	ldr	r3, [r3, #0]
 802313a:	4a5e      	ldr	r2, [pc, #376]	; (80232b4 <HAL_DMA_Abort+0x46c>)
 802313c:	4293      	cmp	r3, r2
 802313e:	d018      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 8023140:	687b      	ldr	r3, [r7, #4]
 8023142:	681b      	ldr	r3, [r3, #0]
 8023144:	4a5c      	ldr	r2, [pc, #368]	; (80232b8 <HAL_DMA_Abort+0x470>)
 8023146:	4293      	cmp	r3, r2
 8023148:	d013      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 802314a:	687b      	ldr	r3, [r7, #4]
 802314c:	681b      	ldr	r3, [r3, #0]
 802314e:	4a5b      	ldr	r2, [pc, #364]	; (80232bc <HAL_DMA_Abort+0x474>)
 8023150:	4293      	cmp	r3, r2
 8023152:	d00e      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 8023154:	687b      	ldr	r3, [r7, #4]
 8023156:	681b      	ldr	r3, [r3, #0]
 8023158:	4a59      	ldr	r2, [pc, #356]	; (80232c0 <HAL_DMA_Abort+0x478>)
 802315a:	4293      	cmp	r3, r2
 802315c:	d009      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 802315e:	687b      	ldr	r3, [r7, #4]
 8023160:	681b      	ldr	r3, [r3, #0]
 8023162:	4a58      	ldr	r2, [pc, #352]	; (80232c4 <HAL_DMA_Abort+0x47c>)
 8023164:	4293      	cmp	r3, r2
 8023166:	d004      	beq.n	8023172 <HAL_DMA_Abort+0x32a>
 8023168:	687b      	ldr	r3, [r7, #4]
 802316a:	681b      	ldr	r3, [r3, #0]
 802316c:	4a56      	ldr	r2, [pc, #344]	; (80232c8 <HAL_DMA_Abort+0x480>)
 802316e:	4293      	cmp	r3, r2
 8023170:	d108      	bne.n	8023184 <HAL_DMA_Abort+0x33c>
 8023172:	687b      	ldr	r3, [r7, #4]
 8023174:	681b      	ldr	r3, [r3, #0]
 8023176:	681a      	ldr	r2, [r3, #0]
 8023178:	687b      	ldr	r3, [r7, #4]
 802317a:	681b      	ldr	r3, [r3, #0]
 802317c:	f022 0201 	bic.w	r2, r2, #1
 8023180:	601a      	str	r2, [r3, #0]
 8023182:	e007      	b.n	8023194 <HAL_DMA_Abort+0x34c>
 8023184:	687b      	ldr	r3, [r7, #4]
 8023186:	681b      	ldr	r3, [r3, #0]
 8023188:	681a      	ldr	r2, [r3, #0]
 802318a:	687b      	ldr	r3, [r7, #4]
 802318c:	681b      	ldr	r3, [r3, #0]
 802318e:	f022 0201 	bic.w	r2, r2, #1
 8023192:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8023194:	e013      	b.n	80231be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023196:	f7fe ff83 	bl	80220a0 <HAL_GetTick>
 802319a:	4602      	mov	r2, r0
 802319c:	693b      	ldr	r3, [r7, #16]
 802319e:	1ad3      	subs	r3, r2, r3
 80231a0:	2b05      	cmp	r3, #5
 80231a2:	d90c      	bls.n	80231be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80231a4:	687b      	ldr	r3, [r7, #4]
 80231a6:	2220      	movs	r2, #32
 80231a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80231aa:	687b      	ldr	r3, [r7, #4]
 80231ac:	2203      	movs	r2, #3
 80231ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80231b2:	687b      	ldr	r3, [r7, #4]
 80231b4:	2200      	movs	r2, #0
 80231b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80231ba:	2301      	movs	r3, #1
 80231bc:	e12d      	b.n	802341a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80231be:	697b      	ldr	r3, [r7, #20]
 80231c0:	681b      	ldr	r3, [r3, #0]
 80231c2:	f003 0301 	and.w	r3, r3, #1
 80231c6:	2b00      	cmp	r3, #0
 80231c8:	d1e5      	bne.n	8023196 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80231ca:	687b      	ldr	r3, [r7, #4]
 80231cc:	681b      	ldr	r3, [r3, #0]
 80231ce:	4a2f      	ldr	r2, [pc, #188]	; (802328c <HAL_DMA_Abort+0x444>)
 80231d0:	4293      	cmp	r3, r2
 80231d2:	d04a      	beq.n	802326a <HAL_DMA_Abort+0x422>
 80231d4:	687b      	ldr	r3, [r7, #4]
 80231d6:	681b      	ldr	r3, [r3, #0]
 80231d8:	4a2d      	ldr	r2, [pc, #180]	; (8023290 <HAL_DMA_Abort+0x448>)
 80231da:	4293      	cmp	r3, r2
 80231dc:	d045      	beq.n	802326a <HAL_DMA_Abort+0x422>
 80231de:	687b      	ldr	r3, [r7, #4]
 80231e0:	681b      	ldr	r3, [r3, #0]
 80231e2:	4a2c      	ldr	r2, [pc, #176]	; (8023294 <HAL_DMA_Abort+0x44c>)
 80231e4:	4293      	cmp	r3, r2
 80231e6:	d040      	beq.n	802326a <HAL_DMA_Abort+0x422>
 80231e8:	687b      	ldr	r3, [r7, #4]
 80231ea:	681b      	ldr	r3, [r3, #0]
 80231ec:	4a2a      	ldr	r2, [pc, #168]	; (8023298 <HAL_DMA_Abort+0x450>)
 80231ee:	4293      	cmp	r3, r2
 80231f0:	d03b      	beq.n	802326a <HAL_DMA_Abort+0x422>
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	681b      	ldr	r3, [r3, #0]
 80231f6:	4a29      	ldr	r2, [pc, #164]	; (802329c <HAL_DMA_Abort+0x454>)
 80231f8:	4293      	cmp	r3, r2
 80231fa:	d036      	beq.n	802326a <HAL_DMA_Abort+0x422>
 80231fc:	687b      	ldr	r3, [r7, #4]
 80231fe:	681b      	ldr	r3, [r3, #0]
 8023200:	4a27      	ldr	r2, [pc, #156]	; (80232a0 <HAL_DMA_Abort+0x458>)
 8023202:	4293      	cmp	r3, r2
 8023204:	d031      	beq.n	802326a <HAL_DMA_Abort+0x422>
 8023206:	687b      	ldr	r3, [r7, #4]
 8023208:	681b      	ldr	r3, [r3, #0]
 802320a:	4a26      	ldr	r2, [pc, #152]	; (80232a4 <HAL_DMA_Abort+0x45c>)
 802320c:	4293      	cmp	r3, r2
 802320e:	d02c      	beq.n	802326a <HAL_DMA_Abort+0x422>
 8023210:	687b      	ldr	r3, [r7, #4]
 8023212:	681b      	ldr	r3, [r3, #0]
 8023214:	4a24      	ldr	r2, [pc, #144]	; (80232a8 <HAL_DMA_Abort+0x460>)
 8023216:	4293      	cmp	r3, r2
 8023218:	d027      	beq.n	802326a <HAL_DMA_Abort+0x422>
 802321a:	687b      	ldr	r3, [r7, #4]
 802321c:	681b      	ldr	r3, [r3, #0]
 802321e:	4a23      	ldr	r2, [pc, #140]	; (80232ac <HAL_DMA_Abort+0x464>)
 8023220:	4293      	cmp	r3, r2
 8023222:	d022      	beq.n	802326a <HAL_DMA_Abort+0x422>
 8023224:	687b      	ldr	r3, [r7, #4]
 8023226:	681b      	ldr	r3, [r3, #0]
 8023228:	4a21      	ldr	r2, [pc, #132]	; (80232b0 <HAL_DMA_Abort+0x468>)
 802322a:	4293      	cmp	r3, r2
 802322c:	d01d      	beq.n	802326a <HAL_DMA_Abort+0x422>
 802322e:	687b      	ldr	r3, [r7, #4]
 8023230:	681b      	ldr	r3, [r3, #0]
 8023232:	4a20      	ldr	r2, [pc, #128]	; (80232b4 <HAL_DMA_Abort+0x46c>)
 8023234:	4293      	cmp	r3, r2
 8023236:	d018      	beq.n	802326a <HAL_DMA_Abort+0x422>
 8023238:	687b      	ldr	r3, [r7, #4]
 802323a:	681b      	ldr	r3, [r3, #0]
 802323c:	4a1e      	ldr	r2, [pc, #120]	; (80232b8 <HAL_DMA_Abort+0x470>)
 802323e:	4293      	cmp	r3, r2
 8023240:	d013      	beq.n	802326a <HAL_DMA_Abort+0x422>
 8023242:	687b      	ldr	r3, [r7, #4]
 8023244:	681b      	ldr	r3, [r3, #0]
 8023246:	4a1d      	ldr	r2, [pc, #116]	; (80232bc <HAL_DMA_Abort+0x474>)
 8023248:	4293      	cmp	r3, r2
 802324a:	d00e      	beq.n	802326a <HAL_DMA_Abort+0x422>
 802324c:	687b      	ldr	r3, [r7, #4]
 802324e:	681b      	ldr	r3, [r3, #0]
 8023250:	4a1b      	ldr	r2, [pc, #108]	; (80232c0 <HAL_DMA_Abort+0x478>)
 8023252:	4293      	cmp	r3, r2
 8023254:	d009      	beq.n	802326a <HAL_DMA_Abort+0x422>
 8023256:	687b      	ldr	r3, [r7, #4]
 8023258:	681b      	ldr	r3, [r3, #0]
 802325a:	4a1a      	ldr	r2, [pc, #104]	; (80232c4 <HAL_DMA_Abort+0x47c>)
 802325c:	4293      	cmp	r3, r2
 802325e:	d004      	beq.n	802326a <HAL_DMA_Abort+0x422>
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	681b      	ldr	r3, [r3, #0]
 8023264:	4a18      	ldr	r2, [pc, #96]	; (80232c8 <HAL_DMA_Abort+0x480>)
 8023266:	4293      	cmp	r3, r2
 8023268:	d101      	bne.n	802326e <HAL_DMA_Abort+0x426>
 802326a:	2301      	movs	r3, #1
 802326c:	e000      	b.n	8023270 <HAL_DMA_Abort+0x428>
 802326e:	2300      	movs	r3, #0
 8023270:	2b00      	cmp	r3, #0
 8023272:	d02b      	beq.n	80232cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8023274:	687b      	ldr	r3, [r7, #4]
 8023276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023278:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802327a:	687b      	ldr	r3, [r7, #4]
 802327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802327e:	f003 031f 	and.w	r3, r3, #31
 8023282:	223f      	movs	r2, #63	; 0x3f
 8023284:	409a      	lsls	r2, r3
 8023286:	68bb      	ldr	r3, [r7, #8]
 8023288:	609a      	str	r2, [r3, #8]
 802328a:	e02a      	b.n	80232e2 <HAL_DMA_Abort+0x49a>
 802328c:	40020010 	.word	0x40020010
 8023290:	40020028 	.word	0x40020028
 8023294:	40020040 	.word	0x40020040
 8023298:	40020058 	.word	0x40020058
 802329c:	40020070 	.word	0x40020070
 80232a0:	40020088 	.word	0x40020088
 80232a4:	400200a0 	.word	0x400200a0
 80232a8:	400200b8 	.word	0x400200b8
 80232ac:	40020410 	.word	0x40020410
 80232b0:	40020428 	.word	0x40020428
 80232b4:	40020440 	.word	0x40020440
 80232b8:	40020458 	.word	0x40020458
 80232bc:	40020470 	.word	0x40020470
 80232c0:	40020488 	.word	0x40020488
 80232c4:	400204a0 	.word	0x400204a0
 80232c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80232cc:	687b      	ldr	r3, [r7, #4]
 80232ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80232d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80232d2:	687b      	ldr	r3, [r7, #4]
 80232d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80232d6:	f003 031f 	and.w	r3, r3, #31
 80232da:	2201      	movs	r2, #1
 80232dc:	409a      	lsls	r2, r3
 80232de:	68fb      	ldr	r3, [r7, #12]
 80232e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80232e2:	687b      	ldr	r3, [r7, #4]
 80232e4:	681b      	ldr	r3, [r3, #0]
 80232e6:	4a4f      	ldr	r2, [pc, #316]	; (8023424 <HAL_DMA_Abort+0x5dc>)
 80232e8:	4293      	cmp	r3, r2
 80232ea:	d072      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 80232ec:	687b      	ldr	r3, [r7, #4]
 80232ee:	681b      	ldr	r3, [r3, #0]
 80232f0:	4a4d      	ldr	r2, [pc, #308]	; (8023428 <HAL_DMA_Abort+0x5e0>)
 80232f2:	4293      	cmp	r3, r2
 80232f4:	d06d      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 80232f6:	687b      	ldr	r3, [r7, #4]
 80232f8:	681b      	ldr	r3, [r3, #0]
 80232fa:	4a4c      	ldr	r2, [pc, #304]	; (802342c <HAL_DMA_Abort+0x5e4>)
 80232fc:	4293      	cmp	r3, r2
 80232fe:	d068      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 8023300:	687b      	ldr	r3, [r7, #4]
 8023302:	681b      	ldr	r3, [r3, #0]
 8023304:	4a4a      	ldr	r2, [pc, #296]	; (8023430 <HAL_DMA_Abort+0x5e8>)
 8023306:	4293      	cmp	r3, r2
 8023308:	d063      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 802330a:	687b      	ldr	r3, [r7, #4]
 802330c:	681b      	ldr	r3, [r3, #0]
 802330e:	4a49      	ldr	r2, [pc, #292]	; (8023434 <HAL_DMA_Abort+0x5ec>)
 8023310:	4293      	cmp	r3, r2
 8023312:	d05e      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 8023314:	687b      	ldr	r3, [r7, #4]
 8023316:	681b      	ldr	r3, [r3, #0]
 8023318:	4a47      	ldr	r2, [pc, #284]	; (8023438 <HAL_DMA_Abort+0x5f0>)
 802331a:	4293      	cmp	r3, r2
 802331c:	d059      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 802331e:	687b      	ldr	r3, [r7, #4]
 8023320:	681b      	ldr	r3, [r3, #0]
 8023322:	4a46      	ldr	r2, [pc, #280]	; (802343c <HAL_DMA_Abort+0x5f4>)
 8023324:	4293      	cmp	r3, r2
 8023326:	d054      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 8023328:	687b      	ldr	r3, [r7, #4]
 802332a:	681b      	ldr	r3, [r3, #0]
 802332c:	4a44      	ldr	r2, [pc, #272]	; (8023440 <HAL_DMA_Abort+0x5f8>)
 802332e:	4293      	cmp	r3, r2
 8023330:	d04f      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 8023332:	687b      	ldr	r3, [r7, #4]
 8023334:	681b      	ldr	r3, [r3, #0]
 8023336:	4a43      	ldr	r2, [pc, #268]	; (8023444 <HAL_DMA_Abort+0x5fc>)
 8023338:	4293      	cmp	r3, r2
 802333a:	d04a      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 802333c:	687b      	ldr	r3, [r7, #4]
 802333e:	681b      	ldr	r3, [r3, #0]
 8023340:	4a41      	ldr	r2, [pc, #260]	; (8023448 <HAL_DMA_Abort+0x600>)
 8023342:	4293      	cmp	r3, r2
 8023344:	d045      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 8023346:	687b      	ldr	r3, [r7, #4]
 8023348:	681b      	ldr	r3, [r3, #0]
 802334a:	4a40      	ldr	r2, [pc, #256]	; (802344c <HAL_DMA_Abort+0x604>)
 802334c:	4293      	cmp	r3, r2
 802334e:	d040      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 8023350:	687b      	ldr	r3, [r7, #4]
 8023352:	681b      	ldr	r3, [r3, #0]
 8023354:	4a3e      	ldr	r2, [pc, #248]	; (8023450 <HAL_DMA_Abort+0x608>)
 8023356:	4293      	cmp	r3, r2
 8023358:	d03b      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	681b      	ldr	r3, [r3, #0]
 802335e:	4a3d      	ldr	r2, [pc, #244]	; (8023454 <HAL_DMA_Abort+0x60c>)
 8023360:	4293      	cmp	r3, r2
 8023362:	d036      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 8023364:	687b      	ldr	r3, [r7, #4]
 8023366:	681b      	ldr	r3, [r3, #0]
 8023368:	4a3b      	ldr	r2, [pc, #236]	; (8023458 <HAL_DMA_Abort+0x610>)
 802336a:	4293      	cmp	r3, r2
 802336c:	d031      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 802336e:	687b      	ldr	r3, [r7, #4]
 8023370:	681b      	ldr	r3, [r3, #0]
 8023372:	4a3a      	ldr	r2, [pc, #232]	; (802345c <HAL_DMA_Abort+0x614>)
 8023374:	4293      	cmp	r3, r2
 8023376:	d02c      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 8023378:	687b      	ldr	r3, [r7, #4]
 802337a:	681b      	ldr	r3, [r3, #0]
 802337c:	4a38      	ldr	r2, [pc, #224]	; (8023460 <HAL_DMA_Abort+0x618>)
 802337e:	4293      	cmp	r3, r2
 8023380:	d027      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 8023382:	687b      	ldr	r3, [r7, #4]
 8023384:	681b      	ldr	r3, [r3, #0]
 8023386:	4a37      	ldr	r2, [pc, #220]	; (8023464 <HAL_DMA_Abort+0x61c>)
 8023388:	4293      	cmp	r3, r2
 802338a:	d022      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 802338c:	687b      	ldr	r3, [r7, #4]
 802338e:	681b      	ldr	r3, [r3, #0]
 8023390:	4a35      	ldr	r2, [pc, #212]	; (8023468 <HAL_DMA_Abort+0x620>)
 8023392:	4293      	cmp	r3, r2
 8023394:	d01d      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 8023396:	687b      	ldr	r3, [r7, #4]
 8023398:	681b      	ldr	r3, [r3, #0]
 802339a:	4a34      	ldr	r2, [pc, #208]	; (802346c <HAL_DMA_Abort+0x624>)
 802339c:	4293      	cmp	r3, r2
 802339e:	d018      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 80233a0:	687b      	ldr	r3, [r7, #4]
 80233a2:	681b      	ldr	r3, [r3, #0]
 80233a4:	4a32      	ldr	r2, [pc, #200]	; (8023470 <HAL_DMA_Abort+0x628>)
 80233a6:	4293      	cmp	r3, r2
 80233a8:	d013      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 80233aa:	687b      	ldr	r3, [r7, #4]
 80233ac:	681b      	ldr	r3, [r3, #0]
 80233ae:	4a31      	ldr	r2, [pc, #196]	; (8023474 <HAL_DMA_Abort+0x62c>)
 80233b0:	4293      	cmp	r3, r2
 80233b2:	d00e      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 80233b4:	687b      	ldr	r3, [r7, #4]
 80233b6:	681b      	ldr	r3, [r3, #0]
 80233b8:	4a2f      	ldr	r2, [pc, #188]	; (8023478 <HAL_DMA_Abort+0x630>)
 80233ba:	4293      	cmp	r3, r2
 80233bc:	d009      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 80233be:	687b      	ldr	r3, [r7, #4]
 80233c0:	681b      	ldr	r3, [r3, #0]
 80233c2:	4a2e      	ldr	r2, [pc, #184]	; (802347c <HAL_DMA_Abort+0x634>)
 80233c4:	4293      	cmp	r3, r2
 80233c6:	d004      	beq.n	80233d2 <HAL_DMA_Abort+0x58a>
 80233c8:	687b      	ldr	r3, [r7, #4]
 80233ca:	681b      	ldr	r3, [r3, #0]
 80233cc:	4a2c      	ldr	r2, [pc, #176]	; (8023480 <HAL_DMA_Abort+0x638>)
 80233ce:	4293      	cmp	r3, r2
 80233d0:	d101      	bne.n	80233d6 <HAL_DMA_Abort+0x58e>
 80233d2:	2301      	movs	r3, #1
 80233d4:	e000      	b.n	80233d8 <HAL_DMA_Abort+0x590>
 80233d6:	2300      	movs	r3, #0
 80233d8:	2b00      	cmp	r3, #0
 80233da:	d015      	beq.n	8023408 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80233dc:	687b      	ldr	r3, [r7, #4]
 80233de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80233e0:	687a      	ldr	r2, [r7, #4]
 80233e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80233e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80233e6:	687b      	ldr	r3, [r7, #4]
 80233e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80233ea:	2b00      	cmp	r3, #0
 80233ec:	d00c      	beq.n	8023408 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80233ee:	687b      	ldr	r3, [r7, #4]
 80233f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80233f2:	681a      	ldr	r2, [r3, #0]
 80233f4:	687b      	ldr	r3, [r7, #4]
 80233f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80233f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80233fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80233fe:	687b      	ldr	r3, [r7, #4]
 8023400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023402:	687a      	ldr	r2, [r7, #4]
 8023404:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8023406:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8023408:	687b      	ldr	r3, [r7, #4]
 802340a:	2201      	movs	r2, #1
 802340c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023410:	687b      	ldr	r3, [r7, #4]
 8023412:	2200      	movs	r2, #0
 8023414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8023418:	2300      	movs	r3, #0
}
 802341a:	4618      	mov	r0, r3
 802341c:	3718      	adds	r7, #24
 802341e:	46bd      	mov	sp, r7
 8023420:	bd80      	pop	{r7, pc}
 8023422:	bf00      	nop
 8023424:	40020010 	.word	0x40020010
 8023428:	40020028 	.word	0x40020028
 802342c:	40020040 	.word	0x40020040
 8023430:	40020058 	.word	0x40020058
 8023434:	40020070 	.word	0x40020070
 8023438:	40020088 	.word	0x40020088
 802343c:	400200a0 	.word	0x400200a0
 8023440:	400200b8 	.word	0x400200b8
 8023444:	40020410 	.word	0x40020410
 8023448:	40020428 	.word	0x40020428
 802344c:	40020440 	.word	0x40020440
 8023450:	40020458 	.word	0x40020458
 8023454:	40020470 	.word	0x40020470
 8023458:	40020488 	.word	0x40020488
 802345c:	400204a0 	.word	0x400204a0
 8023460:	400204b8 	.word	0x400204b8
 8023464:	58025408 	.word	0x58025408
 8023468:	5802541c 	.word	0x5802541c
 802346c:	58025430 	.word	0x58025430
 8023470:	58025444 	.word	0x58025444
 8023474:	58025458 	.word	0x58025458
 8023478:	5802546c 	.word	0x5802546c
 802347c:	58025480 	.word	0x58025480
 8023480:	58025494 	.word	0x58025494

08023484 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8023484:	b580      	push	{r7, lr}
 8023486:	b084      	sub	sp, #16
 8023488:	af00      	add	r7, sp, #0
 802348a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802348c:	687b      	ldr	r3, [r7, #4]
 802348e:	2b00      	cmp	r3, #0
 8023490:	d101      	bne.n	8023496 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8023492:	2301      	movs	r3, #1
 8023494:	e237      	b.n	8023906 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023496:	687b      	ldr	r3, [r7, #4]
 8023498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802349c:	b2db      	uxtb	r3, r3
 802349e:	2b02      	cmp	r3, #2
 80234a0:	d004      	beq.n	80234ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80234a2:	687b      	ldr	r3, [r7, #4]
 80234a4:	2280      	movs	r2, #128	; 0x80
 80234a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80234a8:	2301      	movs	r3, #1
 80234aa:	e22c      	b.n	8023906 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80234ac:	687b      	ldr	r3, [r7, #4]
 80234ae:	681b      	ldr	r3, [r3, #0]
 80234b0:	4a5c      	ldr	r2, [pc, #368]	; (8023624 <HAL_DMA_Abort_IT+0x1a0>)
 80234b2:	4293      	cmp	r3, r2
 80234b4:	d04a      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 80234b6:	687b      	ldr	r3, [r7, #4]
 80234b8:	681b      	ldr	r3, [r3, #0]
 80234ba:	4a5b      	ldr	r2, [pc, #364]	; (8023628 <HAL_DMA_Abort_IT+0x1a4>)
 80234bc:	4293      	cmp	r3, r2
 80234be:	d045      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 80234c0:	687b      	ldr	r3, [r7, #4]
 80234c2:	681b      	ldr	r3, [r3, #0]
 80234c4:	4a59      	ldr	r2, [pc, #356]	; (802362c <HAL_DMA_Abort_IT+0x1a8>)
 80234c6:	4293      	cmp	r3, r2
 80234c8:	d040      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 80234ca:	687b      	ldr	r3, [r7, #4]
 80234cc:	681b      	ldr	r3, [r3, #0]
 80234ce:	4a58      	ldr	r2, [pc, #352]	; (8023630 <HAL_DMA_Abort_IT+0x1ac>)
 80234d0:	4293      	cmp	r3, r2
 80234d2:	d03b      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 80234d4:	687b      	ldr	r3, [r7, #4]
 80234d6:	681b      	ldr	r3, [r3, #0]
 80234d8:	4a56      	ldr	r2, [pc, #344]	; (8023634 <HAL_DMA_Abort_IT+0x1b0>)
 80234da:	4293      	cmp	r3, r2
 80234dc:	d036      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 80234de:	687b      	ldr	r3, [r7, #4]
 80234e0:	681b      	ldr	r3, [r3, #0]
 80234e2:	4a55      	ldr	r2, [pc, #340]	; (8023638 <HAL_DMA_Abort_IT+0x1b4>)
 80234e4:	4293      	cmp	r3, r2
 80234e6:	d031      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 80234e8:	687b      	ldr	r3, [r7, #4]
 80234ea:	681b      	ldr	r3, [r3, #0]
 80234ec:	4a53      	ldr	r2, [pc, #332]	; (802363c <HAL_DMA_Abort_IT+0x1b8>)
 80234ee:	4293      	cmp	r3, r2
 80234f0:	d02c      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 80234f2:	687b      	ldr	r3, [r7, #4]
 80234f4:	681b      	ldr	r3, [r3, #0]
 80234f6:	4a52      	ldr	r2, [pc, #328]	; (8023640 <HAL_DMA_Abort_IT+0x1bc>)
 80234f8:	4293      	cmp	r3, r2
 80234fa:	d027      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 80234fc:	687b      	ldr	r3, [r7, #4]
 80234fe:	681b      	ldr	r3, [r3, #0]
 8023500:	4a50      	ldr	r2, [pc, #320]	; (8023644 <HAL_DMA_Abort_IT+0x1c0>)
 8023502:	4293      	cmp	r3, r2
 8023504:	d022      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 8023506:	687b      	ldr	r3, [r7, #4]
 8023508:	681b      	ldr	r3, [r3, #0]
 802350a:	4a4f      	ldr	r2, [pc, #316]	; (8023648 <HAL_DMA_Abort_IT+0x1c4>)
 802350c:	4293      	cmp	r3, r2
 802350e:	d01d      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 8023510:	687b      	ldr	r3, [r7, #4]
 8023512:	681b      	ldr	r3, [r3, #0]
 8023514:	4a4d      	ldr	r2, [pc, #308]	; (802364c <HAL_DMA_Abort_IT+0x1c8>)
 8023516:	4293      	cmp	r3, r2
 8023518:	d018      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	681b      	ldr	r3, [r3, #0]
 802351e:	4a4c      	ldr	r2, [pc, #304]	; (8023650 <HAL_DMA_Abort_IT+0x1cc>)
 8023520:	4293      	cmp	r3, r2
 8023522:	d013      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	681b      	ldr	r3, [r3, #0]
 8023528:	4a4a      	ldr	r2, [pc, #296]	; (8023654 <HAL_DMA_Abort_IT+0x1d0>)
 802352a:	4293      	cmp	r3, r2
 802352c:	d00e      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 802352e:	687b      	ldr	r3, [r7, #4]
 8023530:	681b      	ldr	r3, [r3, #0]
 8023532:	4a49      	ldr	r2, [pc, #292]	; (8023658 <HAL_DMA_Abort_IT+0x1d4>)
 8023534:	4293      	cmp	r3, r2
 8023536:	d009      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 8023538:	687b      	ldr	r3, [r7, #4]
 802353a:	681b      	ldr	r3, [r3, #0]
 802353c:	4a47      	ldr	r2, [pc, #284]	; (802365c <HAL_DMA_Abort_IT+0x1d8>)
 802353e:	4293      	cmp	r3, r2
 8023540:	d004      	beq.n	802354c <HAL_DMA_Abort_IT+0xc8>
 8023542:	687b      	ldr	r3, [r7, #4]
 8023544:	681b      	ldr	r3, [r3, #0]
 8023546:	4a46      	ldr	r2, [pc, #280]	; (8023660 <HAL_DMA_Abort_IT+0x1dc>)
 8023548:	4293      	cmp	r3, r2
 802354a:	d101      	bne.n	8023550 <HAL_DMA_Abort_IT+0xcc>
 802354c:	2301      	movs	r3, #1
 802354e:	e000      	b.n	8023552 <HAL_DMA_Abort_IT+0xce>
 8023550:	2300      	movs	r3, #0
 8023552:	2b00      	cmp	r3, #0
 8023554:	f000 8086 	beq.w	8023664 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8023558:	687b      	ldr	r3, [r7, #4]
 802355a:	2204      	movs	r2, #4
 802355c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	4a2f      	ldr	r2, [pc, #188]	; (8023624 <HAL_DMA_Abort_IT+0x1a0>)
 8023566:	4293      	cmp	r3, r2
 8023568:	d04a      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 802356a:	687b      	ldr	r3, [r7, #4]
 802356c:	681b      	ldr	r3, [r3, #0]
 802356e:	4a2e      	ldr	r2, [pc, #184]	; (8023628 <HAL_DMA_Abort_IT+0x1a4>)
 8023570:	4293      	cmp	r3, r2
 8023572:	d045      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 8023574:	687b      	ldr	r3, [r7, #4]
 8023576:	681b      	ldr	r3, [r3, #0]
 8023578:	4a2c      	ldr	r2, [pc, #176]	; (802362c <HAL_DMA_Abort_IT+0x1a8>)
 802357a:	4293      	cmp	r3, r2
 802357c:	d040      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 802357e:	687b      	ldr	r3, [r7, #4]
 8023580:	681b      	ldr	r3, [r3, #0]
 8023582:	4a2b      	ldr	r2, [pc, #172]	; (8023630 <HAL_DMA_Abort_IT+0x1ac>)
 8023584:	4293      	cmp	r3, r2
 8023586:	d03b      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 8023588:	687b      	ldr	r3, [r7, #4]
 802358a:	681b      	ldr	r3, [r3, #0]
 802358c:	4a29      	ldr	r2, [pc, #164]	; (8023634 <HAL_DMA_Abort_IT+0x1b0>)
 802358e:	4293      	cmp	r3, r2
 8023590:	d036      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 8023592:	687b      	ldr	r3, [r7, #4]
 8023594:	681b      	ldr	r3, [r3, #0]
 8023596:	4a28      	ldr	r2, [pc, #160]	; (8023638 <HAL_DMA_Abort_IT+0x1b4>)
 8023598:	4293      	cmp	r3, r2
 802359a:	d031      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 802359c:	687b      	ldr	r3, [r7, #4]
 802359e:	681b      	ldr	r3, [r3, #0]
 80235a0:	4a26      	ldr	r2, [pc, #152]	; (802363c <HAL_DMA_Abort_IT+0x1b8>)
 80235a2:	4293      	cmp	r3, r2
 80235a4:	d02c      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 80235a6:	687b      	ldr	r3, [r7, #4]
 80235a8:	681b      	ldr	r3, [r3, #0]
 80235aa:	4a25      	ldr	r2, [pc, #148]	; (8023640 <HAL_DMA_Abort_IT+0x1bc>)
 80235ac:	4293      	cmp	r3, r2
 80235ae:	d027      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 80235b0:	687b      	ldr	r3, [r7, #4]
 80235b2:	681b      	ldr	r3, [r3, #0]
 80235b4:	4a23      	ldr	r2, [pc, #140]	; (8023644 <HAL_DMA_Abort_IT+0x1c0>)
 80235b6:	4293      	cmp	r3, r2
 80235b8:	d022      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 80235ba:	687b      	ldr	r3, [r7, #4]
 80235bc:	681b      	ldr	r3, [r3, #0]
 80235be:	4a22      	ldr	r2, [pc, #136]	; (8023648 <HAL_DMA_Abort_IT+0x1c4>)
 80235c0:	4293      	cmp	r3, r2
 80235c2:	d01d      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 80235c4:	687b      	ldr	r3, [r7, #4]
 80235c6:	681b      	ldr	r3, [r3, #0]
 80235c8:	4a20      	ldr	r2, [pc, #128]	; (802364c <HAL_DMA_Abort_IT+0x1c8>)
 80235ca:	4293      	cmp	r3, r2
 80235cc:	d018      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	681b      	ldr	r3, [r3, #0]
 80235d2:	4a1f      	ldr	r2, [pc, #124]	; (8023650 <HAL_DMA_Abort_IT+0x1cc>)
 80235d4:	4293      	cmp	r3, r2
 80235d6:	d013      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 80235d8:	687b      	ldr	r3, [r7, #4]
 80235da:	681b      	ldr	r3, [r3, #0]
 80235dc:	4a1d      	ldr	r2, [pc, #116]	; (8023654 <HAL_DMA_Abort_IT+0x1d0>)
 80235de:	4293      	cmp	r3, r2
 80235e0:	d00e      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 80235e2:	687b      	ldr	r3, [r7, #4]
 80235e4:	681b      	ldr	r3, [r3, #0]
 80235e6:	4a1c      	ldr	r2, [pc, #112]	; (8023658 <HAL_DMA_Abort_IT+0x1d4>)
 80235e8:	4293      	cmp	r3, r2
 80235ea:	d009      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 80235ec:	687b      	ldr	r3, [r7, #4]
 80235ee:	681b      	ldr	r3, [r3, #0]
 80235f0:	4a1a      	ldr	r2, [pc, #104]	; (802365c <HAL_DMA_Abort_IT+0x1d8>)
 80235f2:	4293      	cmp	r3, r2
 80235f4:	d004      	beq.n	8023600 <HAL_DMA_Abort_IT+0x17c>
 80235f6:	687b      	ldr	r3, [r7, #4]
 80235f8:	681b      	ldr	r3, [r3, #0]
 80235fa:	4a19      	ldr	r2, [pc, #100]	; (8023660 <HAL_DMA_Abort_IT+0x1dc>)
 80235fc:	4293      	cmp	r3, r2
 80235fe:	d108      	bne.n	8023612 <HAL_DMA_Abort_IT+0x18e>
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	681b      	ldr	r3, [r3, #0]
 8023604:	681a      	ldr	r2, [r3, #0]
 8023606:	687b      	ldr	r3, [r7, #4]
 8023608:	681b      	ldr	r3, [r3, #0]
 802360a:	f022 0201 	bic.w	r2, r2, #1
 802360e:	601a      	str	r2, [r3, #0]
 8023610:	e178      	b.n	8023904 <HAL_DMA_Abort_IT+0x480>
 8023612:	687b      	ldr	r3, [r7, #4]
 8023614:	681b      	ldr	r3, [r3, #0]
 8023616:	681a      	ldr	r2, [r3, #0]
 8023618:	687b      	ldr	r3, [r7, #4]
 802361a:	681b      	ldr	r3, [r3, #0]
 802361c:	f022 0201 	bic.w	r2, r2, #1
 8023620:	601a      	str	r2, [r3, #0]
 8023622:	e16f      	b.n	8023904 <HAL_DMA_Abort_IT+0x480>
 8023624:	40020010 	.word	0x40020010
 8023628:	40020028 	.word	0x40020028
 802362c:	40020040 	.word	0x40020040
 8023630:	40020058 	.word	0x40020058
 8023634:	40020070 	.word	0x40020070
 8023638:	40020088 	.word	0x40020088
 802363c:	400200a0 	.word	0x400200a0
 8023640:	400200b8 	.word	0x400200b8
 8023644:	40020410 	.word	0x40020410
 8023648:	40020428 	.word	0x40020428
 802364c:	40020440 	.word	0x40020440
 8023650:	40020458 	.word	0x40020458
 8023654:	40020470 	.word	0x40020470
 8023658:	40020488 	.word	0x40020488
 802365c:	400204a0 	.word	0x400204a0
 8023660:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	681b      	ldr	r3, [r3, #0]
 8023668:	681a      	ldr	r2, [r3, #0]
 802366a:	687b      	ldr	r3, [r7, #4]
 802366c:	681b      	ldr	r3, [r3, #0]
 802366e:	f022 020e 	bic.w	r2, r2, #14
 8023672:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8023674:	687b      	ldr	r3, [r7, #4]
 8023676:	681b      	ldr	r3, [r3, #0]
 8023678:	4a6c      	ldr	r2, [pc, #432]	; (802382c <HAL_DMA_Abort_IT+0x3a8>)
 802367a:	4293      	cmp	r3, r2
 802367c:	d04a      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 802367e:	687b      	ldr	r3, [r7, #4]
 8023680:	681b      	ldr	r3, [r3, #0]
 8023682:	4a6b      	ldr	r2, [pc, #428]	; (8023830 <HAL_DMA_Abort_IT+0x3ac>)
 8023684:	4293      	cmp	r3, r2
 8023686:	d045      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 8023688:	687b      	ldr	r3, [r7, #4]
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	4a69      	ldr	r2, [pc, #420]	; (8023834 <HAL_DMA_Abort_IT+0x3b0>)
 802368e:	4293      	cmp	r3, r2
 8023690:	d040      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 8023692:	687b      	ldr	r3, [r7, #4]
 8023694:	681b      	ldr	r3, [r3, #0]
 8023696:	4a68      	ldr	r2, [pc, #416]	; (8023838 <HAL_DMA_Abort_IT+0x3b4>)
 8023698:	4293      	cmp	r3, r2
 802369a:	d03b      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 802369c:	687b      	ldr	r3, [r7, #4]
 802369e:	681b      	ldr	r3, [r3, #0]
 80236a0:	4a66      	ldr	r2, [pc, #408]	; (802383c <HAL_DMA_Abort_IT+0x3b8>)
 80236a2:	4293      	cmp	r3, r2
 80236a4:	d036      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 80236a6:	687b      	ldr	r3, [r7, #4]
 80236a8:	681b      	ldr	r3, [r3, #0]
 80236aa:	4a65      	ldr	r2, [pc, #404]	; (8023840 <HAL_DMA_Abort_IT+0x3bc>)
 80236ac:	4293      	cmp	r3, r2
 80236ae:	d031      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 80236b0:	687b      	ldr	r3, [r7, #4]
 80236b2:	681b      	ldr	r3, [r3, #0]
 80236b4:	4a63      	ldr	r2, [pc, #396]	; (8023844 <HAL_DMA_Abort_IT+0x3c0>)
 80236b6:	4293      	cmp	r3, r2
 80236b8:	d02c      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 80236ba:	687b      	ldr	r3, [r7, #4]
 80236bc:	681b      	ldr	r3, [r3, #0]
 80236be:	4a62      	ldr	r2, [pc, #392]	; (8023848 <HAL_DMA_Abort_IT+0x3c4>)
 80236c0:	4293      	cmp	r3, r2
 80236c2:	d027      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	681b      	ldr	r3, [r3, #0]
 80236c8:	4a60      	ldr	r2, [pc, #384]	; (802384c <HAL_DMA_Abort_IT+0x3c8>)
 80236ca:	4293      	cmp	r3, r2
 80236cc:	d022      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 80236ce:	687b      	ldr	r3, [r7, #4]
 80236d0:	681b      	ldr	r3, [r3, #0]
 80236d2:	4a5f      	ldr	r2, [pc, #380]	; (8023850 <HAL_DMA_Abort_IT+0x3cc>)
 80236d4:	4293      	cmp	r3, r2
 80236d6:	d01d      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 80236d8:	687b      	ldr	r3, [r7, #4]
 80236da:	681b      	ldr	r3, [r3, #0]
 80236dc:	4a5d      	ldr	r2, [pc, #372]	; (8023854 <HAL_DMA_Abort_IT+0x3d0>)
 80236de:	4293      	cmp	r3, r2
 80236e0:	d018      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 80236e2:	687b      	ldr	r3, [r7, #4]
 80236e4:	681b      	ldr	r3, [r3, #0]
 80236e6:	4a5c      	ldr	r2, [pc, #368]	; (8023858 <HAL_DMA_Abort_IT+0x3d4>)
 80236e8:	4293      	cmp	r3, r2
 80236ea:	d013      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 80236ec:	687b      	ldr	r3, [r7, #4]
 80236ee:	681b      	ldr	r3, [r3, #0]
 80236f0:	4a5a      	ldr	r2, [pc, #360]	; (802385c <HAL_DMA_Abort_IT+0x3d8>)
 80236f2:	4293      	cmp	r3, r2
 80236f4:	d00e      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 80236f6:	687b      	ldr	r3, [r7, #4]
 80236f8:	681b      	ldr	r3, [r3, #0]
 80236fa:	4a59      	ldr	r2, [pc, #356]	; (8023860 <HAL_DMA_Abort_IT+0x3dc>)
 80236fc:	4293      	cmp	r3, r2
 80236fe:	d009      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 8023700:	687b      	ldr	r3, [r7, #4]
 8023702:	681b      	ldr	r3, [r3, #0]
 8023704:	4a57      	ldr	r2, [pc, #348]	; (8023864 <HAL_DMA_Abort_IT+0x3e0>)
 8023706:	4293      	cmp	r3, r2
 8023708:	d004      	beq.n	8023714 <HAL_DMA_Abort_IT+0x290>
 802370a:	687b      	ldr	r3, [r7, #4]
 802370c:	681b      	ldr	r3, [r3, #0]
 802370e:	4a56      	ldr	r2, [pc, #344]	; (8023868 <HAL_DMA_Abort_IT+0x3e4>)
 8023710:	4293      	cmp	r3, r2
 8023712:	d108      	bne.n	8023726 <HAL_DMA_Abort_IT+0x2a2>
 8023714:	687b      	ldr	r3, [r7, #4]
 8023716:	681b      	ldr	r3, [r3, #0]
 8023718:	681a      	ldr	r2, [r3, #0]
 802371a:	687b      	ldr	r3, [r7, #4]
 802371c:	681b      	ldr	r3, [r3, #0]
 802371e:	f022 0201 	bic.w	r2, r2, #1
 8023722:	601a      	str	r2, [r3, #0]
 8023724:	e007      	b.n	8023736 <HAL_DMA_Abort_IT+0x2b2>
 8023726:	687b      	ldr	r3, [r7, #4]
 8023728:	681b      	ldr	r3, [r3, #0]
 802372a:	681a      	ldr	r2, [r3, #0]
 802372c:	687b      	ldr	r3, [r7, #4]
 802372e:	681b      	ldr	r3, [r3, #0]
 8023730:	f022 0201 	bic.w	r2, r2, #1
 8023734:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8023736:	687b      	ldr	r3, [r7, #4]
 8023738:	681b      	ldr	r3, [r3, #0]
 802373a:	4a3c      	ldr	r2, [pc, #240]	; (802382c <HAL_DMA_Abort_IT+0x3a8>)
 802373c:	4293      	cmp	r3, r2
 802373e:	d072      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 8023740:	687b      	ldr	r3, [r7, #4]
 8023742:	681b      	ldr	r3, [r3, #0]
 8023744:	4a3a      	ldr	r2, [pc, #232]	; (8023830 <HAL_DMA_Abort_IT+0x3ac>)
 8023746:	4293      	cmp	r3, r2
 8023748:	d06d      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 802374a:	687b      	ldr	r3, [r7, #4]
 802374c:	681b      	ldr	r3, [r3, #0]
 802374e:	4a39      	ldr	r2, [pc, #228]	; (8023834 <HAL_DMA_Abort_IT+0x3b0>)
 8023750:	4293      	cmp	r3, r2
 8023752:	d068      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 8023754:	687b      	ldr	r3, [r7, #4]
 8023756:	681b      	ldr	r3, [r3, #0]
 8023758:	4a37      	ldr	r2, [pc, #220]	; (8023838 <HAL_DMA_Abort_IT+0x3b4>)
 802375a:	4293      	cmp	r3, r2
 802375c:	d063      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 802375e:	687b      	ldr	r3, [r7, #4]
 8023760:	681b      	ldr	r3, [r3, #0]
 8023762:	4a36      	ldr	r2, [pc, #216]	; (802383c <HAL_DMA_Abort_IT+0x3b8>)
 8023764:	4293      	cmp	r3, r2
 8023766:	d05e      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 8023768:	687b      	ldr	r3, [r7, #4]
 802376a:	681b      	ldr	r3, [r3, #0]
 802376c:	4a34      	ldr	r2, [pc, #208]	; (8023840 <HAL_DMA_Abort_IT+0x3bc>)
 802376e:	4293      	cmp	r3, r2
 8023770:	d059      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 8023772:	687b      	ldr	r3, [r7, #4]
 8023774:	681b      	ldr	r3, [r3, #0]
 8023776:	4a33      	ldr	r2, [pc, #204]	; (8023844 <HAL_DMA_Abort_IT+0x3c0>)
 8023778:	4293      	cmp	r3, r2
 802377a:	d054      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 802377c:	687b      	ldr	r3, [r7, #4]
 802377e:	681b      	ldr	r3, [r3, #0]
 8023780:	4a31      	ldr	r2, [pc, #196]	; (8023848 <HAL_DMA_Abort_IT+0x3c4>)
 8023782:	4293      	cmp	r3, r2
 8023784:	d04f      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 8023786:	687b      	ldr	r3, [r7, #4]
 8023788:	681b      	ldr	r3, [r3, #0]
 802378a:	4a30      	ldr	r2, [pc, #192]	; (802384c <HAL_DMA_Abort_IT+0x3c8>)
 802378c:	4293      	cmp	r3, r2
 802378e:	d04a      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 8023790:	687b      	ldr	r3, [r7, #4]
 8023792:	681b      	ldr	r3, [r3, #0]
 8023794:	4a2e      	ldr	r2, [pc, #184]	; (8023850 <HAL_DMA_Abort_IT+0x3cc>)
 8023796:	4293      	cmp	r3, r2
 8023798:	d045      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 802379a:	687b      	ldr	r3, [r7, #4]
 802379c:	681b      	ldr	r3, [r3, #0]
 802379e:	4a2d      	ldr	r2, [pc, #180]	; (8023854 <HAL_DMA_Abort_IT+0x3d0>)
 80237a0:	4293      	cmp	r3, r2
 80237a2:	d040      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 80237a4:	687b      	ldr	r3, [r7, #4]
 80237a6:	681b      	ldr	r3, [r3, #0]
 80237a8:	4a2b      	ldr	r2, [pc, #172]	; (8023858 <HAL_DMA_Abort_IT+0x3d4>)
 80237aa:	4293      	cmp	r3, r2
 80237ac:	d03b      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 80237ae:	687b      	ldr	r3, [r7, #4]
 80237b0:	681b      	ldr	r3, [r3, #0]
 80237b2:	4a2a      	ldr	r2, [pc, #168]	; (802385c <HAL_DMA_Abort_IT+0x3d8>)
 80237b4:	4293      	cmp	r3, r2
 80237b6:	d036      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 80237b8:	687b      	ldr	r3, [r7, #4]
 80237ba:	681b      	ldr	r3, [r3, #0]
 80237bc:	4a28      	ldr	r2, [pc, #160]	; (8023860 <HAL_DMA_Abort_IT+0x3dc>)
 80237be:	4293      	cmp	r3, r2
 80237c0:	d031      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 80237c2:	687b      	ldr	r3, [r7, #4]
 80237c4:	681b      	ldr	r3, [r3, #0]
 80237c6:	4a27      	ldr	r2, [pc, #156]	; (8023864 <HAL_DMA_Abort_IT+0x3e0>)
 80237c8:	4293      	cmp	r3, r2
 80237ca:	d02c      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 80237cc:	687b      	ldr	r3, [r7, #4]
 80237ce:	681b      	ldr	r3, [r3, #0]
 80237d0:	4a25      	ldr	r2, [pc, #148]	; (8023868 <HAL_DMA_Abort_IT+0x3e4>)
 80237d2:	4293      	cmp	r3, r2
 80237d4:	d027      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 80237d6:	687b      	ldr	r3, [r7, #4]
 80237d8:	681b      	ldr	r3, [r3, #0]
 80237da:	4a24      	ldr	r2, [pc, #144]	; (802386c <HAL_DMA_Abort_IT+0x3e8>)
 80237dc:	4293      	cmp	r3, r2
 80237de:	d022      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 80237e0:	687b      	ldr	r3, [r7, #4]
 80237e2:	681b      	ldr	r3, [r3, #0]
 80237e4:	4a22      	ldr	r2, [pc, #136]	; (8023870 <HAL_DMA_Abort_IT+0x3ec>)
 80237e6:	4293      	cmp	r3, r2
 80237e8:	d01d      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 80237ea:	687b      	ldr	r3, [r7, #4]
 80237ec:	681b      	ldr	r3, [r3, #0]
 80237ee:	4a21      	ldr	r2, [pc, #132]	; (8023874 <HAL_DMA_Abort_IT+0x3f0>)
 80237f0:	4293      	cmp	r3, r2
 80237f2:	d018      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 80237f4:	687b      	ldr	r3, [r7, #4]
 80237f6:	681b      	ldr	r3, [r3, #0]
 80237f8:	4a1f      	ldr	r2, [pc, #124]	; (8023878 <HAL_DMA_Abort_IT+0x3f4>)
 80237fa:	4293      	cmp	r3, r2
 80237fc:	d013      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 80237fe:	687b      	ldr	r3, [r7, #4]
 8023800:	681b      	ldr	r3, [r3, #0]
 8023802:	4a1e      	ldr	r2, [pc, #120]	; (802387c <HAL_DMA_Abort_IT+0x3f8>)
 8023804:	4293      	cmp	r3, r2
 8023806:	d00e      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 8023808:	687b      	ldr	r3, [r7, #4]
 802380a:	681b      	ldr	r3, [r3, #0]
 802380c:	4a1c      	ldr	r2, [pc, #112]	; (8023880 <HAL_DMA_Abort_IT+0x3fc>)
 802380e:	4293      	cmp	r3, r2
 8023810:	d009      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 8023812:	687b      	ldr	r3, [r7, #4]
 8023814:	681b      	ldr	r3, [r3, #0]
 8023816:	4a1b      	ldr	r2, [pc, #108]	; (8023884 <HAL_DMA_Abort_IT+0x400>)
 8023818:	4293      	cmp	r3, r2
 802381a:	d004      	beq.n	8023826 <HAL_DMA_Abort_IT+0x3a2>
 802381c:	687b      	ldr	r3, [r7, #4]
 802381e:	681b      	ldr	r3, [r3, #0]
 8023820:	4a19      	ldr	r2, [pc, #100]	; (8023888 <HAL_DMA_Abort_IT+0x404>)
 8023822:	4293      	cmp	r3, r2
 8023824:	d132      	bne.n	802388c <HAL_DMA_Abort_IT+0x408>
 8023826:	2301      	movs	r3, #1
 8023828:	e031      	b.n	802388e <HAL_DMA_Abort_IT+0x40a>
 802382a:	bf00      	nop
 802382c:	40020010 	.word	0x40020010
 8023830:	40020028 	.word	0x40020028
 8023834:	40020040 	.word	0x40020040
 8023838:	40020058 	.word	0x40020058
 802383c:	40020070 	.word	0x40020070
 8023840:	40020088 	.word	0x40020088
 8023844:	400200a0 	.word	0x400200a0
 8023848:	400200b8 	.word	0x400200b8
 802384c:	40020410 	.word	0x40020410
 8023850:	40020428 	.word	0x40020428
 8023854:	40020440 	.word	0x40020440
 8023858:	40020458 	.word	0x40020458
 802385c:	40020470 	.word	0x40020470
 8023860:	40020488 	.word	0x40020488
 8023864:	400204a0 	.word	0x400204a0
 8023868:	400204b8 	.word	0x400204b8
 802386c:	58025408 	.word	0x58025408
 8023870:	5802541c 	.word	0x5802541c
 8023874:	58025430 	.word	0x58025430
 8023878:	58025444 	.word	0x58025444
 802387c:	58025458 	.word	0x58025458
 8023880:	5802546c 	.word	0x5802546c
 8023884:	58025480 	.word	0x58025480
 8023888:	58025494 	.word	0x58025494
 802388c:	2300      	movs	r3, #0
 802388e:	2b00      	cmp	r3, #0
 8023890:	d028      	beq.n	80238e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8023892:	687b      	ldr	r3, [r7, #4]
 8023894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023896:	681a      	ldr	r2, [r3, #0]
 8023898:	687b      	ldr	r3, [r7, #4]
 802389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802389c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80238a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80238a2:	687b      	ldr	r3, [r7, #4]
 80238a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80238a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80238a8:	687b      	ldr	r3, [r7, #4]
 80238aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80238ac:	f003 031f 	and.w	r3, r3, #31
 80238b0:	2201      	movs	r2, #1
 80238b2:	409a      	lsls	r2, r3
 80238b4:	68fb      	ldr	r3, [r7, #12]
 80238b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80238b8:	687b      	ldr	r3, [r7, #4]
 80238ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80238bc:	687a      	ldr	r2, [r7, #4]
 80238be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80238c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80238c2:	687b      	ldr	r3, [r7, #4]
 80238c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80238c6:	2b00      	cmp	r3, #0
 80238c8:	d00c      	beq.n	80238e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80238ca:	687b      	ldr	r3, [r7, #4]
 80238cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80238ce:	681a      	ldr	r2, [r3, #0]
 80238d0:	687b      	ldr	r3, [r7, #4]
 80238d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80238d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80238d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80238da:	687b      	ldr	r3, [r7, #4]
 80238dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80238de:	687a      	ldr	r2, [r7, #4]
 80238e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80238e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80238e4:	687b      	ldr	r3, [r7, #4]
 80238e6:	2201      	movs	r2, #1
 80238e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80238ec:	687b      	ldr	r3, [r7, #4]
 80238ee:	2200      	movs	r2, #0
 80238f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80238f4:	687b      	ldr	r3, [r7, #4]
 80238f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80238f8:	2b00      	cmp	r3, #0
 80238fa:	d003      	beq.n	8023904 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80238fc:	687b      	ldr	r3, [r7, #4]
 80238fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023900:	6878      	ldr	r0, [r7, #4]
 8023902:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8023904:	2300      	movs	r3, #0
}
 8023906:	4618      	mov	r0, r3
 8023908:	3710      	adds	r7, #16
 802390a:	46bd      	mov	sp, r7
 802390c:	bd80      	pop	{r7, pc}
 802390e:	bf00      	nop

08023910 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8023910:	b580      	push	{r7, lr}
 8023912:	b08a      	sub	sp, #40	; 0x28
 8023914:	af00      	add	r7, sp, #0
 8023916:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8023918:	2300      	movs	r3, #0
 802391a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 802391c:	4b67      	ldr	r3, [pc, #412]	; (8023abc <HAL_DMA_IRQHandler+0x1ac>)
 802391e:	681b      	ldr	r3, [r3, #0]
 8023920:	4a67      	ldr	r2, [pc, #412]	; (8023ac0 <HAL_DMA_IRQHandler+0x1b0>)
 8023922:	fba2 2303 	umull	r2, r3, r2, r3
 8023926:	0a9b      	lsrs	r3, r3, #10
 8023928:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802392a:	687b      	ldr	r3, [r7, #4]
 802392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802392e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8023930:	687b      	ldr	r3, [r7, #4]
 8023932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023934:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8023936:	6a3b      	ldr	r3, [r7, #32]
 8023938:	681b      	ldr	r3, [r3, #0]
 802393a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 802393c:	69fb      	ldr	r3, [r7, #28]
 802393e:	681b      	ldr	r3, [r3, #0]
 8023940:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8023942:	687b      	ldr	r3, [r7, #4]
 8023944:	681b      	ldr	r3, [r3, #0]
 8023946:	4a5f      	ldr	r2, [pc, #380]	; (8023ac4 <HAL_DMA_IRQHandler+0x1b4>)
 8023948:	4293      	cmp	r3, r2
 802394a:	d04a      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 802394c:	687b      	ldr	r3, [r7, #4]
 802394e:	681b      	ldr	r3, [r3, #0]
 8023950:	4a5d      	ldr	r2, [pc, #372]	; (8023ac8 <HAL_DMA_IRQHandler+0x1b8>)
 8023952:	4293      	cmp	r3, r2
 8023954:	d045      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 8023956:	687b      	ldr	r3, [r7, #4]
 8023958:	681b      	ldr	r3, [r3, #0]
 802395a:	4a5c      	ldr	r2, [pc, #368]	; (8023acc <HAL_DMA_IRQHandler+0x1bc>)
 802395c:	4293      	cmp	r3, r2
 802395e:	d040      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 8023960:	687b      	ldr	r3, [r7, #4]
 8023962:	681b      	ldr	r3, [r3, #0]
 8023964:	4a5a      	ldr	r2, [pc, #360]	; (8023ad0 <HAL_DMA_IRQHandler+0x1c0>)
 8023966:	4293      	cmp	r3, r2
 8023968:	d03b      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 802396a:	687b      	ldr	r3, [r7, #4]
 802396c:	681b      	ldr	r3, [r3, #0]
 802396e:	4a59      	ldr	r2, [pc, #356]	; (8023ad4 <HAL_DMA_IRQHandler+0x1c4>)
 8023970:	4293      	cmp	r3, r2
 8023972:	d036      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 8023974:	687b      	ldr	r3, [r7, #4]
 8023976:	681b      	ldr	r3, [r3, #0]
 8023978:	4a57      	ldr	r2, [pc, #348]	; (8023ad8 <HAL_DMA_IRQHandler+0x1c8>)
 802397a:	4293      	cmp	r3, r2
 802397c:	d031      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 802397e:	687b      	ldr	r3, [r7, #4]
 8023980:	681b      	ldr	r3, [r3, #0]
 8023982:	4a56      	ldr	r2, [pc, #344]	; (8023adc <HAL_DMA_IRQHandler+0x1cc>)
 8023984:	4293      	cmp	r3, r2
 8023986:	d02c      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 8023988:	687b      	ldr	r3, [r7, #4]
 802398a:	681b      	ldr	r3, [r3, #0]
 802398c:	4a54      	ldr	r2, [pc, #336]	; (8023ae0 <HAL_DMA_IRQHandler+0x1d0>)
 802398e:	4293      	cmp	r3, r2
 8023990:	d027      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	681b      	ldr	r3, [r3, #0]
 8023996:	4a53      	ldr	r2, [pc, #332]	; (8023ae4 <HAL_DMA_IRQHandler+0x1d4>)
 8023998:	4293      	cmp	r3, r2
 802399a:	d022      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 802399c:	687b      	ldr	r3, [r7, #4]
 802399e:	681b      	ldr	r3, [r3, #0]
 80239a0:	4a51      	ldr	r2, [pc, #324]	; (8023ae8 <HAL_DMA_IRQHandler+0x1d8>)
 80239a2:	4293      	cmp	r3, r2
 80239a4:	d01d      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	681b      	ldr	r3, [r3, #0]
 80239aa:	4a50      	ldr	r2, [pc, #320]	; (8023aec <HAL_DMA_IRQHandler+0x1dc>)
 80239ac:	4293      	cmp	r3, r2
 80239ae:	d018      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 80239b0:	687b      	ldr	r3, [r7, #4]
 80239b2:	681b      	ldr	r3, [r3, #0]
 80239b4:	4a4e      	ldr	r2, [pc, #312]	; (8023af0 <HAL_DMA_IRQHandler+0x1e0>)
 80239b6:	4293      	cmp	r3, r2
 80239b8:	d013      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 80239ba:	687b      	ldr	r3, [r7, #4]
 80239bc:	681b      	ldr	r3, [r3, #0]
 80239be:	4a4d      	ldr	r2, [pc, #308]	; (8023af4 <HAL_DMA_IRQHandler+0x1e4>)
 80239c0:	4293      	cmp	r3, r2
 80239c2:	d00e      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 80239c4:	687b      	ldr	r3, [r7, #4]
 80239c6:	681b      	ldr	r3, [r3, #0]
 80239c8:	4a4b      	ldr	r2, [pc, #300]	; (8023af8 <HAL_DMA_IRQHandler+0x1e8>)
 80239ca:	4293      	cmp	r3, r2
 80239cc:	d009      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 80239ce:	687b      	ldr	r3, [r7, #4]
 80239d0:	681b      	ldr	r3, [r3, #0]
 80239d2:	4a4a      	ldr	r2, [pc, #296]	; (8023afc <HAL_DMA_IRQHandler+0x1ec>)
 80239d4:	4293      	cmp	r3, r2
 80239d6:	d004      	beq.n	80239e2 <HAL_DMA_IRQHandler+0xd2>
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	681b      	ldr	r3, [r3, #0]
 80239dc:	4a48      	ldr	r2, [pc, #288]	; (8023b00 <HAL_DMA_IRQHandler+0x1f0>)
 80239de:	4293      	cmp	r3, r2
 80239e0:	d101      	bne.n	80239e6 <HAL_DMA_IRQHandler+0xd6>
 80239e2:	2301      	movs	r3, #1
 80239e4:	e000      	b.n	80239e8 <HAL_DMA_IRQHandler+0xd8>
 80239e6:	2300      	movs	r3, #0
 80239e8:	2b00      	cmp	r3, #0
 80239ea:	f000 842b 	beq.w	8024244 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80239ee:	687b      	ldr	r3, [r7, #4]
 80239f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80239f2:	f003 031f 	and.w	r3, r3, #31
 80239f6:	2208      	movs	r2, #8
 80239f8:	409a      	lsls	r2, r3
 80239fa:	69bb      	ldr	r3, [r7, #24]
 80239fc:	4013      	ands	r3, r2
 80239fe:	2b00      	cmp	r3, #0
 8023a00:	f000 80a2 	beq.w	8023b48 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8023a04:	687b      	ldr	r3, [r7, #4]
 8023a06:	681b      	ldr	r3, [r3, #0]
 8023a08:	4a2e      	ldr	r2, [pc, #184]	; (8023ac4 <HAL_DMA_IRQHandler+0x1b4>)
 8023a0a:	4293      	cmp	r3, r2
 8023a0c:	d04a      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a0e:	687b      	ldr	r3, [r7, #4]
 8023a10:	681b      	ldr	r3, [r3, #0]
 8023a12:	4a2d      	ldr	r2, [pc, #180]	; (8023ac8 <HAL_DMA_IRQHandler+0x1b8>)
 8023a14:	4293      	cmp	r3, r2
 8023a16:	d045      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	681b      	ldr	r3, [r3, #0]
 8023a1c:	4a2b      	ldr	r2, [pc, #172]	; (8023acc <HAL_DMA_IRQHandler+0x1bc>)
 8023a1e:	4293      	cmp	r3, r2
 8023a20:	d040      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a22:	687b      	ldr	r3, [r7, #4]
 8023a24:	681b      	ldr	r3, [r3, #0]
 8023a26:	4a2a      	ldr	r2, [pc, #168]	; (8023ad0 <HAL_DMA_IRQHandler+0x1c0>)
 8023a28:	4293      	cmp	r3, r2
 8023a2a:	d03b      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a2c:	687b      	ldr	r3, [r7, #4]
 8023a2e:	681b      	ldr	r3, [r3, #0]
 8023a30:	4a28      	ldr	r2, [pc, #160]	; (8023ad4 <HAL_DMA_IRQHandler+0x1c4>)
 8023a32:	4293      	cmp	r3, r2
 8023a34:	d036      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a36:	687b      	ldr	r3, [r7, #4]
 8023a38:	681b      	ldr	r3, [r3, #0]
 8023a3a:	4a27      	ldr	r2, [pc, #156]	; (8023ad8 <HAL_DMA_IRQHandler+0x1c8>)
 8023a3c:	4293      	cmp	r3, r2
 8023a3e:	d031      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a40:	687b      	ldr	r3, [r7, #4]
 8023a42:	681b      	ldr	r3, [r3, #0]
 8023a44:	4a25      	ldr	r2, [pc, #148]	; (8023adc <HAL_DMA_IRQHandler+0x1cc>)
 8023a46:	4293      	cmp	r3, r2
 8023a48:	d02c      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	681b      	ldr	r3, [r3, #0]
 8023a4e:	4a24      	ldr	r2, [pc, #144]	; (8023ae0 <HAL_DMA_IRQHandler+0x1d0>)
 8023a50:	4293      	cmp	r3, r2
 8023a52:	d027      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a54:	687b      	ldr	r3, [r7, #4]
 8023a56:	681b      	ldr	r3, [r3, #0]
 8023a58:	4a22      	ldr	r2, [pc, #136]	; (8023ae4 <HAL_DMA_IRQHandler+0x1d4>)
 8023a5a:	4293      	cmp	r3, r2
 8023a5c:	d022      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	681b      	ldr	r3, [r3, #0]
 8023a62:	4a21      	ldr	r2, [pc, #132]	; (8023ae8 <HAL_DMA_IRQHandler+0x1d8>)
 8023a64:	4293      	cmp	r3, r2
 8023a66:	d01d      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a68:	687b      	ldr	r3, [r7, #4]
 8023a6a:	681b      	ldr	r3, [r3, #0]
 8023a6c:	4a1f      	ldr	r2, [pc, #124]	; (8023aec <HAL_DMA_IRQHandler+0x1dc>)
 8023a6e:	4293      	cmp	r3, r2
 8023a70:	d018      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a72:	687b      	ldr	r3, [r7, #4]
 8023a74:	681b      	ldr	r3, [r3, #0]
 8023a76:	4a1e      	ldr	r2, [pc, #120]	; (8023af0 <HAL_DMA_IRQHandler+0x1e0>)
 8023a78:	4293      	cmp	r3, r2
 8023a7a:	d013      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a7c:	687b      	ldr	r3, [r7, #4]
 8023a7e:	681b      	ldr	r3, [r3, #0]
 8023a80:	4a1c      	ldr	r2, [pc, #112]	; (8023af4 <HAL_DMA_IRQHandler+0x1e4>)
 8023a82:	4293      	cmp	r3, r2
 8023a84:	d00e      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a86:	687b      	ldr	r3, [r7, #4]
 8023a88:	681b      	ldr	r3, [r3, #0]
 8023a8a:	4a1b      	ldr	r2, [pc, #108]	; (8023af8 <HAL_DMA_IRQHandler+0x1e8>)
 8023a8c:	4293      	cmp	r3, r2
 8023a8e:	d009      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a90:	687b      	ldr	r3, [r7, #4]
 8023a92:	681b      	ldr	r3, [r3, #0]
 8023a94:	4a19      	ldr	r2, [pc, #100]	; (8023afc <HAL_DMA_IRQHandler+0x1ec>)
 8023a96:	4293      	cmp	r3, r2
 8023a98:	d004      	beq.n	8023aa4 <HAL_DMA_IRQHandler+0x194>
 8023a9a:	687b      	ldr	r3, [r7, #4]
 8023a9c:	681b      	ldr	r3, [r3, #0]
 8023a9e:	4a18      	ldr	r2, [pc, #96]	; (8023b00 <HAL_DMA_IRQHandler+0x1f0>)
 8023aa0:	4293      	cmp	r3, r2
 8023aa2:	d12f      	bne.n	8023b04 <HAL_DMA_IRQHandler+0x1f4>
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	681b      	ldr	r3, [r3, #0]
 8023aa8:	681b      	ldr	r3, [r3, #0]
 8023aaa:	f003 0304 	and.w	r3, r3, #4
 8023aae:	2b00      	cmp	r3, #0
 8023ab0:	bf14      	ite	ne
 8023ab2:	2301      	movne	r3, #1
 8023ab4:	2300      	moveq	r3, #0
 8023ab6:	b2db      	uxtb	r3, r3
 8023ab8:	e02e      	b.n	8023b18 <HAL_DMA_IRQHandler+0x208>
 8023aba:	bf00      	nop
 8023abc:	24000000 	.word	0x24000000
 8023ac0:	1b4e81b5 	.word	0x1b4e81b5
 8023ac4:	40020010 	.word	0x40020010
 8023ac8:	40020028 	.word	0x40020028
 8023acc:	40020040 	.word	0x40020040
 8023ad0:	40020058 	.word	0x40020058
 8023ad4:	40020070 	.word	0x40020070
 8023ad8:	40020088 	.word	0x40020088
 8023adc:	400200a0 	.word	0x400200a0
 8023ae0:	400200b8 	.word	0x400200b8
 8023ae4:	40020410 	.word	0x40020410
 8023ae8:	40020428 	.word	0x40020428
 8023aec:	40020440 	.word	0x40020440
 8023af0:	40020458 	.word	0x40020458
 8023af4:	40020470 	.word	0x40020470
 8023af8:	40020488 	.word	0x40020488
 8023afc:	400204a0 	.word	0x400204a0
 8023b00:	400204b8 	.word	0x400204b8
 8023b04:	687b      	ldr	r3, [r7, #4]
 8023b06:	681b      	ldr	r3, [r3, #0]
 8023b08:	681b      	ldr	r3, [r3, #0]
 8023b0a:	f003 0308 	and.w	r3, r3, #8
 8023b0e:	2b00      	cmp	r3, #0
 8023b10:	bf14      	ite	ne
 8023b12:	2301      	movne	r3, #1
 8023b14:	2300      	moveq	r3, #0
 8023b16:	b2db      	uxtb	r3, r3
 8023b18:	2b00      	cmp	r3, #0
 8023b1a:	d015      	beq.n	8023b48 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	681b      	ldr	r3, [r3, #0]
 8023b20:	681a      	ldr	r2, [r3, #0]
 8023b22:	687b      	ldr	r3, [r7, #4]
 8023b24:	681b      	ldr	r3, [r3, #0]
 8023b26:	f022 0204 	bic.w	r2, r2, #4
 8023b2a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8023b2c:	687b      	ldr	r3, [r7, #4]
 8023b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023b30:	f003 031f 	and.w	r3, r3, #31
 8023b34:	2208      	movs	r2, #8
 8023b36:	409a      	lsls	r2, r3
 8023b38:	6a3b      	ldr	r3, [r7, #32]
 8023b3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8023b3c:	687b      	ldr	r3, [r7, #4]
 8023b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023b40:	f043 0201 	orr.w	r2, r3, #1
 8023b44:	687b      	ldr	r3, [r7, #4]
 8023b46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8023b48:	687b      	ldr	r3, [r7, #4]
 8023b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023b4c:	f003 031f 	and.w	r3, r3, #31
 8023b50:	69ba      	ldr	r2, [r7, #24]
 8023b52:	fa22 f303 	lsr.w	r3, r2, r3
 8023b56:	f003 0301 	and.w	r3, r3, #1
 8023b5a:	2b00      	cmp	r3, #0
 8023b5c:	d06e      	beq.n	8023c3c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	681b      	ldr	r3, [r3, #0]
 8023b62:	4a69      	ldr	r2, [pc, #420]	; (8023d08 <HAL_DMA_IRQHandler+0x3f8>)
 8023b64:	4293      	cmp	r3, r2
 8023b66:	d04a      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	681b      	ldr	r3, [r3, #0]
 8023b6c:	4a67      	ldr	r2, [pc, #412]	; (8023d0c <HAL_DMA_IRQHandler+0x3fc>)
 8023b6e:	4293      	cmp	r3, r2
 8023b70:	d045      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023b72:	687b      	ldr	r3, [r7, #4]
 8023b74:	681b      	ldr	r3, [r3, #0]
 8023b76:	4a66      	ldr	r2, [pc, #408]	; (8023d10 <HAL_DMA_IRQHandler+0x400>)
 8023b78:	4293      	cmp	r3, r2
 8023b7a:	d040      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	681b      	ldr	r3, [r3, #0]
 8023b80:	4a64      	ldr	r2, [pc, #400]	; (8023d14 <HAL_DMA_IRQHandler+0x404>)
 8023b82:	4293      	cmp	r3, r2
 8023b84:	d03b      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023b86:	687b      	ldr	r3, [r7, #4]
 8023b88:	681b      	ldr	r3, [r3, #0]
 8023b8a:	4a63      	ldr	r2, [pc, #396]	; (8023d18 <HAL_DMA_IRQHandler+0x408>)
 8023b8c:	4293      	cmp	r3, r2
 8023b8e:	d036      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	681b      	ldr	r3, [r3, #0]
 8023b94:	4a61      	ldr	r2, [pc, #388]	; (8023d1c <HAL_DMA_IRQHandler+0x40c>)
 8023b96:	4293      	cmp	r3, r2
 8023b98:	d031      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023b9a:	687b      	ldr	r3, [r7, #4]
 8023b9c:	681b      	ldr	r3, [r3, #0]
 8023b9e:	4a60      	ldr	r2, [pc, #384]	; (8023d20 <HAL_DMA_IRQHandler+0x410>)
 8023ba0:	4293      	cmp	r3, r2
 8023ba2:	d02c      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023ba4:	687b      	ldr	r3, [r7, #4]
 8023ba6:	681b      	ldr	r3, [r3, #0]
 8023ba8:	4a5e      	ldr	r2, [pc, #376]	; (8023d24 <HAL_DMA_IRQHandler+0x414>)
 8023baa:	4293      	cmp	r3, r2
 8023bac:	d027      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023bae:	687b      	ldr	r3, [r7, #4]
 8023bb0:	681b      	ldr	r3, [r3, #0]
 8023bb2:	4a5d      	ldr	r2, [pc, #372]	; (8023d28 <HAL_DMA_IRQHandler+0x418>)
 8023bb4:	4293      	cmp	r3, r2
 8023bb6:	d022      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023bb8:	687b      	ldr	r3, [r7, #4]
 8023bba:	681b      	ldr	r3, [r3, #0]
 8023bbc:	4a5b      	ldr	r2, [pc, #364]	; (8023d2c <HAL_DMA_IRQHandler+0x41c>)
 8023bbe:	4293      	cmp	r3, r2
 8023bc0:	d01d      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023bc2:	687b      	ldr	r3, [r7, #4]
 8023bc4:	681b      	ldr	r3, [r3, #0]
 8023bc6:	4a5a      	ldr	r2, [pc, #360]	; (8023d30 <HAL_DMA_IRQHandler+0x420>)
 8023bc8:	4293      	cmp	r3, r2
 8023bca:	d018      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023bcc:	687b      	ldr	r3, [r7, #4]
 8023bce:	681b      	ldr	r3, [r3, #0]
 8023bd0:	4a58      	ldr	r2, [pc, #352]	; (8023d34 <HAL_DMA_IRQHandler+0x424>)
 8023bd2:	4293      	cmp	r3, r2
 8023bd4:	d013      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023bd6:	687b      	ldr	r3, [r7, #4]
 8023bd8:	681b      	ldr	r3, [r3, #0]
 8023bda:	4a57      	ldr	r2, [pc, #348]	; (8023d38 <HAL_DMA_IRQHandler+0x428>)
 8023bdc:	4293      	cmp	r3, r2
 8023bde:	d00e      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023be0:	687b      	ldr	r3, [r7, #4]
 8023be2:	681b      	ldr	r3, [r3, #0]
 8023be4:	4a55      	ldr	r2, [pc, #340]	; (8023d3c <HAL_DMA_IRQHandler+0x42c>)
 8023be6:	4293      	cmp	r3, r2
 8023be8:	d009      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023bea:	687b      	ldr	r3, [r7, #4]
 8023bec:	681b      	ldr	r3, [r3, #0]
 8023bee:	4a54      	ldr	r2, [pc, #336]	; (8023d40 <HAL_DMA_IRQHandler+0x430>)
 8023bf0:	4293      	cmp	r3, r2
 8023bf2:	d004      	beq.n	8023bfe <HAL_DMA_IRQHandler+0x2ee>
 8023bf4:	687b      	ldr	r3, [r7, #4]
 8023bf6:	681b      	ldr	r3, [r3, #0]
 8023bf8:	4a52      	ldr	r2, [pc, #328]	; (8023d44 <HAL_DMA_IRQHandler+0x434>)
 8023bfa:	4293      	cmp	r3, r2
 8023bfc:	d10a      	bne.n	8023c14 <HAL_DMA_IRQHandler+0x304>
 8023bfe:	687b      	ldr	r3, [r7, #4]
 8023c00:	681b      	ldr	r3, [r3, #0]
 8023c02:	695b      	ldr	r3, [r3, #20]
 8023c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023c08:	2b00      	cmp	r3, #0
 8023c0a:	bf14      	ite	ne
 8023c0c:	2301      	movne	r3, #1
 8023c0e:	2300      	moveq	r3, #0
 8023c10:	b2db      	uxtb	r3, r3
 8023c12:	e003      	b.n	8023c1c <HAL_DMA_IRQHandler+0x30c>
 8023c14:	687b      	ldr	r3, [r7, #4]
 8023c16:	681b      	ldr	r3, [r3, #0]
 8023c18:	681b      	ldr	r3, [r3, #0]
 8023c1a:	2300      	movs	r3, #0
 8023c1c:	2b00      	cmp	r3, #0
 8023c1e:	d00d      	beq.n	8023c3c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8023c20:	687b      	ldr	r3, [r7, #4]
 8023c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023c24:	f003 031f 	and.w	r3, r3, #31
 8023c28:	2201      	movs	r2, #1
 8023c2a:	409a      	lsls	r2, r3
 8023c2c:	6a3b      	ldr	r3, [r7, #32]
 8023c2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8023c30:	687b      	ldr	r3, [r7, #4]
 8023c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023c34:	f043 0202 	orr.w	r2, r3, #2
 8023c38:	687b      	ldr	r3, [r7, #4]
 8023c3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8023c3c:	687b      	ldr	r3, [r7, #4]
 8023c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023c40:	f003 031f 	and.w	r3, r3, #31
 8023c44:	2204      	movs	r2, #4
 8023c46:	409a      	lsls	r2, r3
 8023c48:	69bb      	ldr	r3, [r7, #24]
 8023c4a:	4013      	ands	r3, r2
 8023c4c:	2b00      	cmp	r3, #0
 8023c4e:	f000 808f 	beq.w	8023d70 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8023c52:	687b      	ldr	r3, [r7, #4]
 8023c54:	681b      	ldr	r3, [r3, #0]
 8023c56:	4a2c      	ldr	r2, [pc, #176]	; (8023d08 <HAL_DMA_IRQHandler+0x3f8>)
 8023c58:	4293      	cmp	r3, r2
 8023c5a:	d04a      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023c5c:	687b      	ldr	r3, [r7, #4]
 8023c5e:	681b      	ldr	r3, [r3, #0]
 8023c60:	4a2a      	ldr	r2, [pc, #168]	; (8023d0c <HAL_DMA_IRQHandler+0x3fc>)
 8023c62:	4293      	cmp	r3, r2
 8023c64:	d045      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023c66:	687b      	ldr	r3, [r7, #4]
 8023c68:	681b      	ldr	r3, [r3, #0]
 8023c6a:	4a29      	ldr	r2, [pc, #164]	; (8023d10 <HAL_DMA_IRQHandler+0x400>)
 8023c6c:	4293      	cmp	r3, r2
 8023c6e:	d040      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023c70:	687b      	ldr	r3, [r7, #4]
 8023c72:	681b      	ldr	r3, [r3, #0]
 8023c74:	4a27      	ldr	r2, [pc, #156]	; (8023d14 <HAL_DMA_IRQHandler+0x404>)
 8023c76:	4293      	cmp	r3, r2
 8023c78:	d03b      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023c7a:	687b      	ldr	r3, [r7, #4]
 8023c7c:	681b      	ldr	r3, [r3, #0]
 8023c7e:	4a26      	ldr	r2, [pc, #152]	; (8023d18 <HAL_DMA_IRQHandler+0x408>)
 8023c80:	4293      	cmp	r3, r2
 8023c82:	d036      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023c84:	687b      	ldr	r3, [r7, #4]
 8023c86:	681b      	ldr	r3, [r3, #0]
 8023c88:	4a24      	ldr	r2, [pc, #144]	; (8023d1c <HAL_DMA_IRQHandler+0x40c>)
 8023c8a:	4293      	cmp	r3, r2
 8023c8c:	d031      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023c8e:	687b      	ldr	r3, [r7, #4]
 8023c90:	681b      	ldr	r3, [r3, #0]
 8023c92:	4a23      	ldr	r2, [pc, #140]	; (8023d20 <HAL_DMA_IRQHandler+0x410>)
 8023c94:	4293      	cmp	r3, r2
 8023c96:	d02c      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023c98:	687b      	ldr	r3, [r7, #4]
 8023c9a:	681b      	ldr	r3, [r3, #0]
 8023c9c:	4a21      	ldr	r2, [pc, #132]	; (8023d24 <HAL_DMA_IRQHandler+0x414>)
 8023c9e:	4293      	cmp	r3, r2
 8023ca0:	d027      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023ca2:	687b      	ldr	r3, [r7, #4]
 8023ca4:	681b      	ldr	r3, [r3, #0]
 8023ca6:	4a20      	ldr	r2, [pc, #128]	; (8023d28 <HAL_DMA_IRQHandler+0x418>)
 8023ca8:	4293      	cmp	r3, r2
 8023caa:	d022      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	681b      	ldr	r3, [r3, #0]
 8023cb0:	4a1e      	ldr	r2, [pc, #120]	; (8023d2c <HAL_DMA_IRQHandler+0x41c>)
 8023cb2:	4293      	cmp	r3, r2
 8023cb4:	d01d      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023cb6:	687b      	ldr	r3, [r7, #4]
 8023cb8:	681b      	ldr	r3, [r3, #0]
 8023cba:	4a1d      	ldr	r2, [pc, #116]	; (8023d30 <HAL_DMA_IRQHandler+0x420>)
 8023cbc:	4293      	cmp	r3, r2
 8023cbe:	d018      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023cc0:	687b      	ldr	r3, [r7, #4]
 8023cc2:	681b      	ldr	r3, [r3, #0]
 8023cc4:	4a1b      	ldr	r2, [pc, #108]	; (8023d34 <HAL_DMA_IRQHandler+0x424>)
 8023cc6:	4293      	cmp	r3, r2
 8023cc8:	d013      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023cca:	687b      	ldr	r3, [r7, #4]
 8023ccc:	681b      	ldr	r3, [r3, #0]
 8023cce:	4a1a      	ldr	r2, [pc, #104]	; (8023d38 <HAL_DMA_IRQHandler+0x428>)
 8023cd0:	4293      	cmp	r3, r2
 8023cd2:	d00e      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023cd4:	687b      	ldr	r3, [r7, #4]
 8023cd6:	681b      	ldr	r3, [r3, #0]
 8023cd8:	4a18      	ldr	r2, [pc, #96]	; (8023d3c <HAL_DMA_IRQHandler+0x42c>)
 8023cda:	4293      	cmp	r3, r2
 8023cdc:	d009      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023cde:	687b      	ldr	r3, [r7, #4]
 8023ce0:	681b      	ldr	r3, [r3, #0]
 8023ce2:	4a17      	ldr	r2, [pc, #92]	; (8023d40 <HAL_DMA_IRQHandler+0x430>)
 8023ce4:	4293      	cmp	r3, r2
 8023ce6:	d004      	beq.n	8023cf2 <HAL_DMA_IRQHandler+0x3e2>
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	681b      	ldr	r3, [r3, #0]
 8023cec:	4a15      	ldr	r2, [pc, #84]	; (8023d44 <HAL_DMA_IRQHandler+0x434>)
 8023cee:	4293      	cmp	r3, r2
 8023cf0:	d12a      	bne.n	8023d48 <HAL_DMA_IRQHandler+0x438>
 8023cf2:	687b      	ldr	r3, [r7, #4]
 8023cf4:	681b      	ldr	r3, [r3, #0]
 8023cf6:	681b      	ldr	r3, [r3, #0]
 8023cf8:	f003 0302 	and.w	r3, r3, #2
 8023cfc:	2b00      	cmp	r3, #0
 8023cfe:	bf14      	ite	ne
 8023d00:	2301      	movne	r3, #1
 8023d02:	2300      	moveq	r3, #0
 8023d04:	b2db      	uxtb	r3, r3
 8023d06:	e023      	b.n	8023d50 <HAL_DMA_IRQHandler+0x440>
 8023d08:	40020010 	.word	0x40020010
 8023d0c:	40020028 	.word	0x40020028
 8023d10:	40020040 	.word	0x40020040
 8023d14:	40020058 	.word	0x40020058
 8023d18:	40020070 	.word	0x40020070
 8023d1c:	40020088 	.word	0x40020088
 8023d20:	400200a0 	.word	0x400200a0
 8023d24:	400200b8 	.word	0x400200b8
 8023d28:	40020410 	.word	0x40020410
 8023d2c:	40020428 	.word	0x40020428
 8023d30:	40020440 	.word	0x40020440
 8023d34:	40020458 	.word	0x40020458
 8023d38:	40020470 	.word	0x40020470
 8023d3c:	40020488 	.word	0x40020488
 8023d40:	400204a0 	.word	0x400204a0
 8023d44:	400204b8 	.word	0x400204b8
 8023d48:	687b      	ldr	r3, [r7, #4]
 8023d4a:	681b      	ldr	r3, [r3, #0]
 8023d4c:	681b      	ldr	r3, [r3, #0]
 8023d4e:	2300      	movs	r3, #0
 8023d50:	2b00      	cmp	r3, #0
 8023d52:	d00d      	beq.n	8023d70 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8023d54:	687b      	ldr	r3, [r7, #4]
 8023d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023d58:	f003 031f 	and.w	r3, r3, #31
 8023d5c:	2204      	movs	r2, #4
 8023d5e:	409a      	lsls	r2, r3
 8023d60:	6a3b      	ldr	r3, [r7, #32]
 8023d62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8023d64:	687b      	ldr	r3, [r7, #4]
 8023d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023d68:	f043 0204 	orr.w	r2, r3, #4
 8023d6c:	687b      	ldr	r3, [r7, #4]
 8023d6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8023d70:	687b      	ldr	r3, [r7, #4]
 8023d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023d74:	f003 031f 	and.w	r3, r3, #31
 8023d78:	2210      	movs	r2, #16
 8023d7a:	409a      	lsls	r2, r3
 8023d7c:	69bb      	ldr	r3, [r7, #24]
 8023d7e:	4013      	ands	r3, r2
 8023d80:	2b00      	cmp	r3, #0
 8023d82:	f000 80a6 	beq.w	8023ed2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8023d86:	687b      	ldr	r3, [r7, #4]
 8023d88:	681b      	ldr	r3, [r3, #0]
 8023d8a:	4a85      	ldr	r2, [pc, #532]	; (8023fa0 <HAL_DMA_IRQHandler+0x690>)
 8023d8c:	4293      	cmp	r3, r2
 8023d8e:	d04a      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023d90:	687b      	ldr	r3, [r7, #4]
 8023d92:	681b      	ldr	r3, [r3, #0]
 8023d94:	4a83      	ldr	r2, [pc, #524]	; (8023fa4 <HAL_DMA_IRQHandler+0x694>)
 8023d96:	4293      	cmp	r3, r2
 8023d98:	d045      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023d9a:	687b      	ldr	r3, [r7, #4]
 8023d9c:	681b      	ldr	r3, [r3, #0]
 8023d9e:	4a82      	ldr	r2, [pc, #520]	; (8023fa8 <HAL_DMA_IRQHandler+0x698>)
 8023da0:	4293      	cmp	r3, r2
 8023da2:	d040      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023da4:	687b      	ldr	r3, [r7, #4]
 8023da6:	681b      	ldr	r3, [r3, #0]
 8023da8:	4a80      	ldr	r2, [pc, #512]	; (8023fac <HAL_DMA_IRQHandler+0x69c>)
 8023daa:	4293      	cmp	r3, r2
 8023dac:	d03b      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023dae:	687b      	ldr	r3, [r7, #4]
 8023db0:	681b      	ldr	r3, [r3, #0]
 8023db2:	4a7f      	ldr	r2, [pc, #508]	; (8023fb0 <HAL_DMA_IRQHandler+0x6a0>)
 8023db4:	4293      	cmp	r3, r2
 8023db6:	d036      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023db8:	687b      	ldr	r3, [r7, #4]
 8023dba:	681b      	ldr	r3, [r3, #0]
 8023dbc:	4a7d      	ldr	r2, [pc, #500]	; (8023fb4 <HAL_DMA_IRQHandler+0x6a4>)
 8023dbe:	4293      	cmp	r3, r2
 8023dc0:	d031      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023dc2:	687b      	ldr	r3, [r7, #4]
 8023dc4:	681b      	ldr	r3, [r3, #0]
 8023dc6:	4a7c      	ldr	r2, [pc, #496]	; (8023fb8 <HAL_DMA_IRQHandler+0x6a8>)
 8023dc8:	4293      	cmp	r3, r2
 8023dca:	d02c      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023dcc:	687b      	ldr	r3, [r7, #4]
 8023dce:	681b      	ldr	r3, [r3, #0]
 8023dd0:	4a7a      	ldr	r2, [pc, #488]	; (8023fbc <HAL_DMA_IRQHandler+0x6ac>)
 8023dd2:	4293      	cmp	r3, r2
 8023dd4:	d027      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023dd6:	687b      	ldr	r3, [r7, #4]
 8023dd8:	681b      	ldr	r3, [r3, #0]
 8023dda:	4a79      	ldr	r2, [pc, #484]	; (8023fc0 <HAL_DMA_IRQHandler+0x6b0>)
 8023ddc:	4293      	cmp	r3, r2
 8023dde:	d022      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023de0:	687b      	ldr	r3, [r7, #4]
 8023de2:	681b      	ldr	r3, [r3, #0]
 8023de4:	4a77      	ldr	r2, [pc, #476]	; (8023fc4 <HAL_DMA_IRQHandler+0x6b4>)
 8023de6:	4293      	cmp	r3, r2
 8023de8:	d01d      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023dea:	687b      	ldr	r3, [r7, #4]
 8023dec:	681b      	ldr	r3, [r3, #0]
 8023dee:	4a76      	ldr	r2, [pc, #472]	; (8023fc8 <HAL_DMA_IRQHandler+0x6b8>)
 8023df0:	4293      	cmp	r3, r2
 8023df2:	d018      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023df4:	687b      	ldr	r3, [r7, #4]
 8023df6:	681b      	ldr	r3, [r3, #0]
 8023df8:	4a74      	ldr	r2, [pc, #464]	; (8023fcc <HAL_DMA_IRQHandler+0x6bc>)
 8023dfa:	4293      	cmp	r3, r2
 8023dfc:	d013      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023dfe:	687b      	ldr	r3, [r7, #4]
 8023e00:	681b      	ldr	r3, [r3, #0]
 8023e02:	4a73      	ldr	r2, [pc, #460]	; (8023fd0 <HAL_DMA_IRQHandler+0x6c0>)
 8023e04:	4293      	cmp	r3, r2
 8023e06:	d00e      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023e08:	687b      	ldr	r3, [r7, #4]
 8023e0a:	681b      	ldr	r3, [r3, #0]
 8023e0c:	4a71      	ldr	r2, [pc, #452]	; (8023fd4 <HAL_DMA_IRQHandler+0x6c4>)
 8023e0e:	4293      	cmp	r3, r2
 8023e10:	d009      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023e12:	687b      	ldr	r3, [r7, #4]
 8023e14:	681b      	ldr	r3, [r3, #0]
 8023e16:	4a70      	ldr	r2, [pc, #448]	; (8023fd8 <HAL_DMA_IRQHandler+0x6c8>)
 8023e18:	4293      	cmp	r3, r2
 8023e1a:	d004      	beq.n	8023e26 <HAL_DMA_IRQHandler+0x516>
 8023e1c:	687b      	ldr	r3, [r7, #4]
 8023e1e:	681b      	ldr	r3, [r3, #0]
 8023e20:	4a6e      	ldr	r2, [pc, #440]	; (8023fdc <HAL_DMA_IRQHandler+0x6cc>)
 8023e22:	4293      	cmp	r3, r2
 8023e24:	d10a      	bne.n	8023e3c <HAL_DMA_IRQHandler+0x52c>
 8023e26:	687b      	ldr	r3, [r7, #4]
 8023e28:	681b      	ldr	r3, [r3, #0]
 8023e2a:	681b      	ldr	r3, [r3, #0]
 8023e2c:	f003 0308 	and.w	r3, r3, #8
 8023e30:	2b00      	cmp	r3, #0
 8023e32:	bf14      	ite	ne
 8023e34:	2301      	movne	r3, #1
 8023e36:	2300      	moveq	r3, #0
 8023e38:	b2db      	uxtb	r3, r3
 8023e3a:	e009      	b.n	8023e50 <HAL_DMA_IRQHandler+0x540>
 8023e3c:	687b      	ldr	r3, [r7, #4]
 8023e3e:	681b      	ldr	r3, [r3, #0]
 8023e40:	681b      	ldr	r3, [r3, #0]
 8023e42:	f003 0304 	and.w	r3, r3, #4
 8023e46:	2b00      	cmp	r3, #0
 8023e48:	bf14      	ite	ne
 8023e4a:	2301      	movne	r3, #1
 8023e4c:	2300      	moveq	r3, #0
 8023e4e:	b2db      	uxtb	r3, r3
 8023e50:	2b00      	cmp	r3, #0
 8023e52:	d03e      	beq.n	8023ed2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8023e54:	687b      	ldr	r3, [r7, #4]
 8023e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023e58:	f003 031f 	and.w	r3, r3, #31
 8023e5c:	2210      	movs	r2, #16
 8023e5e:	409a      	lsls	r2, r3
 8023e60:	6a3b      	ldr	r3, [r7, #32]
 8023e62:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8023e64:	687b      	ldr	r3, [r7, #4]
 8023e66:	681b      	ldr	r3, [r3, #0]
 8023e68:	681b      	ldr	r3, [r3, #0]
 8023e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023e6e:	2b00      	cmp	r3, #0
 8023e70:	d018      	beq.n	8023ea4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8023e72:	687b      	ldr	r3, [r7, #4]
 8023e74:	681b      	ldr	r3, [r3, #0]
 8023e76:	681b      	ldr	r3, [r3, #0]
 8023e78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8023e7c:	2b00      	cmp	r3, #0
 8023e7e:	d108      	bne.n	8023e92 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8023e80:	687b      	ldr	r3, [r7, #4]
 8023e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e84:	2b00      	cmp	r3, #0
 8023e86:	d024      	beq.n	8023ed2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8023e88:	687b      	ldr	r3, [r7, #4]
 8023e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e8c:	6878      	ldr	r0, [r7, #4]
 8023e8e:	4798      	blx	r3
 8023e90:	e01f      	b.n	8023ed2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8023e92:	687b      	ldr	r3, [r7, #4]
 8023e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023e96:	2b00      	cmp	r3, #0
 8023e98:	d01b      	beq.n	8023ed2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8023e9a:	687b      	ldr	r3, [r7, #4]
 8023e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023e9e:	6878      	ldr	r0, [r7, #4]
 8023ea0:	4798      	blx	r3
 8023ea2:	e016      	b.n	8023ed2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8023ea4:	687b      	ldr	r3, [r7, #4]
 8023ea6:	681b      	ldr	r3, [r3, #0]
 8023ea8:	681b      	ldr	r3, [r3, #0]
 8023eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023eae:	2b00      	cmp	r3, #0
 8023eb0:	d107      	bne.n	8023ec2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8023eb2:	687b      	ldr	r3, [r7, #4]
 8023eb4:	681b      	ldr	r3, [r3, #0]
 8023eb6:	681a      	ldr	r2, [r3, #0]
 8023eb8:	687b      	ldr	r3, [r7, #4]
 8023eba:	681b      	ldr	r3, [r3, #0]
 8023ebc:	f022 0208 	bic.w	r2, r2, #8
 8023ec0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8023ec2:	687b      	ldr	r3, [r7, #4]
 8023ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023ec6:	2b00      	cmp	r3, #0
 8023ec8:	d003      	beq.n	8023ed2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8023eca:	687b      	ldr	r3, [r7, #4]
 8023ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023ece:	6878      	ldr	r0, [r7, #4]
 8023ed0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8023ed2:	687b      	ldr	r3, [r7, #4]
 8023ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023ed6:	f003 031f 	and.w	r3, r3, #31
 8023eda:	2220      	movs	r2, #32
 8023edc:	409a      	lsls	r2, r3
 8023ede:	69bb      	ldr	r3, [r7, #24]
 8023ee0:	4013      	ands	r3, r2
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	f000 8110 	beq.w	8024108 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8023ee8:	687b      	ldr	r3, [r7, #4]
 8023eea:	681b      	ldr	r3, [r3, #0]
 8023eec:	4a2c      	ldr	r2, [pc, #176]	; (8023fa0 <HAL_DMA_IRQHandler+0x690>)
 8023eee:	4293      	cmp	r3, r2
 8023ef0:	d04a      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023ef2:	687b      	ldr	r3, [r7, #4]
 8023ef4:	681b      	ldr	r3, [r3, #0]
 8023ef6:	4a2b      	ldr	r2, [pc, #172]	; (8023fa4 <HAL_DMA_IRQHandler+0x694>)
 8023ef8:	4293      	cmp	r3, r2
 8023efa:	d045      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023efc:	687b      	ldr	r3, [r7, #4]
 8023efe:	681b      	ldr	r3, [r3, #0]
 8023f00:	4a29      	ldr	r2, [pc, #164]	; (8023fa8 <HAL_DMA_IRQHandler+0x698>)
 8023f02:	4293      	cmp	r3, r2
 8023f04:	d040      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f06:	687b      	ldr	r3, [r7, #4]
 8023f08:	681b      	ldr	r3, [r3, #0]
 8023f0a:	4a28      	ldr	r2, [pc, #160]	; (8023fac <HAL_DMA_IRQHandler+0x69c>)
 8023f0c:	4293      	cmp	r3, r2
 8023f0e:	d03b      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f10:	687b      	ldr	r3, [r7, #4]
 8023f12:	681b      	ldr	r3, [r3, #0]
 8023f14:	4a26      	ldr	r2, [pc, #152]	; (8023fb0 <HAL_DMA_IRQHandler+0x6a0>)
 8023f16:	4293      	cmp	r3, r2
 8023f18:	d036      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f1a:	687b      	ldr	r3, [r7, #4]
 8023f1c:	681b      	ldr	r3, [r3, #0]
 8023f1e:	4a25      	ldr	r2, [pc, #148]	; (8023fb4 <HAL_DMA_IRQHandler+0x6a4>)
 8023f20:	4293      	cmp	r3, r2
 8023f22:	d031      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f24:	687b      	ldr	r3, [r7, #4]
 8023f26:	681b      	ldr	r3, [r3, #0]
 8023f28:	4a23      	ldr	r2, [pc, #140]	; (8023fb8 <HAL_DMA_IRQHandler+0x6a8>)
 8023f2a:	4293      	cmp	r3, r2
 8023f2c:	d02c      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f2e:	687b      	ldr	r3, [r7, #4]
 8023f30:	681b      	ldr	r3, [r3, #0]
 8023f32:	4a22      	ldr	r2, [pc, #136]	; (8023fbc <HAL_DMA_IRQHandler+0x6ac>)
 8023f34:	4293      	cmp	r3, r2
 8023f36:	d027      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f38:	687b      	ldr	r3, [r7, #4]
 8023f3a:	681b      	ldr	r3, [r3, #0]
 8023f3c:	4a20      	ldr	r2, [pc, #128]	; (8023fc0 <HAL_DMA_IRQHandler+0x6b0>)
 8023f3e:	4293      	cmp	r3, r2
 8023f40:	d022      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f42:	687b      	ldr	r3, [r7, #4]
 8023f44:	681b      	ldr	r3, [r3, #0]
 8023f46:	4a1f      	ldr	r2, [pc, #124]	; (8023fc4 <HAL_DMA_IRQHandler+0x6b4>)
 8023f48:	4293      	cmp	r3, r2
 8023f4a:	d01d      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f4c:	687b      	ldr	r3, [r7, #4]
 8023f4e:	681b      	ldr	r3, [r3, #0]
 8023f50:	4a1d      	ldr	r2, [pc, #116]	; (8023fc8 <HAL_DMA_IRQHandler+0x6b8>)
 8023f52:	4293      	cmp	r3, r2
 8023f54:	d018      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f56:	687b      	ldr	r3, [r7, #4]
 8023f58:	681b      	ldr	r3, [r3, #0]
 8023f5a:	4a1c      	ldr	r2, [pc, #112]	; (8023fcc <HAL_DMA_IRQHandler+0x6bc>)
 8023f5c:	4293      	cmp	r3, r2
 8023f5e:	d013      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f60:	687b      	ldr	r3, [r7, #4]
 8023f62:	681b      	ldr	r3, [r3, #0]
 8023f64:	4a1a      	ldr	r2, [pc, #104]	; (8023fd0 <HAL_DMA_IRQHandler+0x6c0>)
 8023f66:	4293      	cmp	r3, r2
 8023f68:	d00e      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f6a:	687b      	ldr	r3, [r7, #4]
 8023f6c:	681b      	ldr	r3, [r3, #0]
 8023f6e:	4a19      	ldr	r2, [pc, #100]	; (8023fd4 <HAL_DMA_IRQHandler+0x6c4>)
 8023f70:	4293      	cmp	r3, r2
 8023f72:	d009      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f74:	687b      	ldr	r3, [r7, #4]
 8023f76:	681b      	ldr	r3, [r3, #0]
 8023f78:	4a17      	ldr	r2, [pc, #92]	; (8023fd8 <HAL_DMA_IRQHandler+0x6c8>)
 8023f7a:	4293      	cmp	r3, r2
 8023f7c:	d004      	beq.n	8023f88 <HAL_DMA_IRQHandler+0x678>
 8023f7e:	687b      	ldr	r3, [r7, #4]
 8023f80:	681b      	ldr	r3, [r3, #0]
 8023f82:	4a16      	ldr	r2, [pc, #88]	; (8023fdc <HAL_DMA_IRQHandler+0x6cc>)
 8023f84:	4293      	cmp	r3, r2
 8023f86:	d12b      	bne.n	8023fe0 <HAL_DMA_IRQHandler+0x6d0>
 8023f88:	687b      	ldr	r3, [r7, #4]
 8023f8a:	681b      	ldr	r3, [r3, #0]
 8023f8c:	681b      	ldr	r3, [r3, #0]
 8023f8e:	f003 0310 	and.w	r3, r3, #16
 8023f92:	2b00      	cmp	r3, #0
 8023f94:	bf14      	ite	ne
 8023f96:	2301      	movne	r3, #1
 8023f98:	2300      	moveq	r3, #0
 8023f9a:	b2db      	uxtb	r3, r3
 8023f9c:	e02a      	b.n	8023ff4 <HAL_DMA_IRQHandler+0x6e4>
 8023f9e:	bf00      	nop
 8023fa0:	40020010 	.word	0x40020010
 8023fa4:	40020028 	.word	0x40020028
 8023fa8:	40020040 	.word	0x40020040
 8023fac:	40020058 	.word	0x40020058
 8023fb0:	40020070 	.word	0x40020070
 8023fb4:	40020088 	.word	0x40020088
 8023fb8:	400200a0 	.word	0x400200a0
 8023fbc:	400200b8 	.word	0x400200b8
 8023fc0:	40020410 	.word	0x40020410
 8023fc4:	40020428 	.word	0x40020428
 8023fc8:	40020440 	.word	0x40020440
 8023fcc:	40020458 	.word	0x40020458
 8023fd0:	40020470 	.word	0x40020470
 8023fd4:	40020488 	.word	0x40020488
 8023fd8:	400204a0 	.word	0x400204a0
 8023fdc:	400204b8 	.word	0x400204b8
 8023fe0:	687b      	ldr	r3, [r7, #4]
 8023fe2:	681b      	ldr	r3, [r3, #0]
 8023fe4:	681b      	ldr	r3, [r3, #0]
 8023fe6:	f003 0302 	and.w	r3, r3, #2
 8023fea:	2b00      	cmp	r3, #0
 8023fec:	bf14      	ite	ne
 8023fee:	2301      	movne	r3, #1
 8023ff0:	2300      	moveq	r3, #0
 8023ff2:	b2db      	uxtb	r3, r3
 8023ff4:	2b00      	cmp	r3, #0
 8023ff6:	f000 8087 	beq.w	8024108 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8023ffa:	687b      	ldr	r3, [r7, #4]
 8023ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023ffe:	f003 031f 	and.w	r3, r3, #31
 8024002:	2220      	movs	r2, #32
 8024004:	409a      	lsls	r2, r3
 8024006:	6a3b      	ldr	r3, [r7, #32]
 8024008:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 802400a:	687b      	ldr	r3, [r7, #4]
 802400c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8024010:	b2db      	uxtb	r3, r3
 8024012:	2b04      	cmp	r3, #4
 8024014:	d139      	bne.n	802408a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8024016:	687b      	ldr	r3, [r7, #4]
 8024018:	681b      	ldr	r3, [r3, #0]
 802401a:	681a      	ldr	r2, [r3, #0]
 802401c:	687b      	ldr	r3, [r7, #4]
 802401e:	681b      	ldr	r3, [r3, #0]
 8024020:	f022 0216 	bic.w	r2, r2, #22
 8024024:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8024026:	687b      	ldr	r3, [r7, #4]
 8024028:	681b      	ldr	r3, [r3, #0]
 802402a:	695a      	ldr	r2, [r3, #20]
 802402c:	687b      	ldr	r3, [r7, #4]
 802402e:	681b      	ldr	r3, [r3, #0]
 8024030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8024034:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8024036:	687b      	ldr	r3, [r7, #4]
 8024038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802403a:	2b00      	cmp	r3, #0
 802403c:	d103      	bne.n	8024046 <HAL_DMA_IRQHandler+0x736>
 802403e:	687b      	ldr	r3, [r7, #4]
 8024040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024042:	2b00      	cmp	r3, #0
 8024044:	d007      	beq.n	8024056 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8024046:	687b      	ldr	r3, [r7, #4]
 8024048:	681b      	ldr	r3, [r3, #0]
 802404a:	681a      	ldr	r2, [r3, #0]
 802404c:	687b      	ldr	r3, [r7, #4]
 802404e:	681b      	ldr	r3, [r3, #0]
 8024050:	f022 0208 	bic.w	r2, r2, #8
 8024054:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8024056:	687b      	ldr	r3, [r7, #4]
 8024058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802405a:	f003 031f 	and.w	r3, r3, #31
 802405e:	223f      	movs	r2, #63	; 0x3f
 8024060:	409a      	lsls	r2, r3
 8024062:	6a3b      	ldr	r3, [r7, #32]
 8024064:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8024066:	687b      	ldr	r3, [r7, #4]
 8024068:	2201      	movs	r2, #1
 802406a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802406e:	687b      	ldr	r3, [r7, #4]
 8024070:	2200      	movs	r2, #0
 8024072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8024076:	687b      	ldr	r3, [r7, #4]
 8024078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802407a:	2b00      	cmp	r3, #0
 802407c:	f000 834a 	beq.w	8024714 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8024080:	687b      	ldr	r3, [r7, #4]
 8024082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024084:	6878      	ldr	r0, [r7, #4]
 8024086:	4798      	blx	r3
          }
          return;
 8024088:	e344      	b.n	8024714 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802408a:	687b      	ldr	r3, [r7, #4]
 802408c:	681b      	ldr	r3, [r3, #0]
 802408e:	681b      	ldr	r3, [r3, #0]
 8024090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8024094:	2b00      	cmp	r3, #0
 8024096:	d018      	beq.n	80240ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8024098:	687b      	ldr	r3, [r7, #4]
 802409a:	681b      	ldr	r3, [r3, #0]
 802409c:	681b      	ldr	r3, [r3, #0]
 802409e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80240a2:	2b00      	cmp	r3, #0
 80240a4:	d108      	bne.n	80240b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80240a6:	687b      	ldr	r3, [r7, #4]
 80240a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80240aa:	2b00      	cmp	r3, #0
 80240ac:	d02c      	beq.n	8024108 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80240ae:	687b      	ldr	r3, [r7, #4]
 80240b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80240b2:	6878      	ldr	r0, [r7, #4]
 80240b4:	4798      	blx	r3
 80240b6:	e027      	b.n	8024108 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80240b8:	687b      	ldr	r3, [r7, #4]
 80240ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80240bc:	2b00      	cmp	r3, #0
 80240be:	d023      	beq.n	8024108 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80240c0:	687b      	ldr	r3, [r7, #4]
 80240c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80240c4:	6878      	ldr	r0, [r7, #4]
 80240c6:	4798      	blx	r3
 80240c8:	e01e      	b.n	8024108 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80240ca:	687b      	ldr	r3, [r7, #4]
 80240cc:	681b      	ldr	r3, [r3, #0]
 80240ce:	681b      	ldr	r3, [r3, #0]
 80240d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80240d4:	2b00      	cmp	r3, #0
 80240d6:	d10f      	bne.n	80240f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80240d8:	687b      	ldr	r3, [r7, #4]
 80240da:	681b      	ldr	r3, [r3, #0]
 80240dc:	681a      	ldr	r2, [r3, #0]
 80240de:	687b      	ldr	r3, [r7, #4]
 80240e0:	681b      	ldr	r3, [r3, #0]
 80240e2:	f022 0210 	bic.w	r2, r2, #16
 80240e6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80240e8:	687b      	ldr	r3, [r7, #4]
 80240ea:	2201      	movs	r2, #1
 80240ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80240f0:	687b      	ldr	r3, [r7, #4]
 80240f2:	2200      	movs	r2, #0
 80240f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80240f8:	687b      	ldr	r3, [r7, #4]
 80240fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80240fc:	2b00      	cmp	r3, #0
 80240fe:	d003      	beq.n	8024108 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8024100:	687b      	ldr	r3, [r7, #4]
 8024102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024104:	6878      	ldr	r0, [r7, #4]
 8024106:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8024108:	687b      	ldr	r3, [r7, #4]
 802410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802410c:	2b00      	cmp	r3, #0
 802410e:	f000 8306 	beq.w	802471e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024116:	f003 0301 	and.w	r3, r3, #1
 802411a:	2b00      	cmp	r3, #0
 802411c:	f000 8088 	beq.w	8024230 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8024120:	687b      	ldr	r3, [r7, #4]
 8024122:	2204      	movs	r2, #4
 8024124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8024128:	687b      	ldr	r3, [r7, #4]
 802412a:	681b      	ldr	r3, [r3, #0]
 802412c:	4a7a      	ldr	r2, [pc, #488]	; (8024318 <HAL_DMA_IRQHandler+0xa08>)
 802412e:	4293      	cmp	r3, r2
 8024130:	d04a      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 8024132:	687b      	ldr	r3, [r7, #4]
 8024134:	681b      	ldr	r3, [r3, #0]
 8024136:	4a79      	ldr	r2, [pc, #484]	; (802431c <HAL_DMA_IRQHandler+0xa0c>)
 8024138:	4293      	cmp	r3, r2
 802413a:	d045      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 802413c:	687b      	ldr	r3, [r7, #4]
 802413e:	681b      	ldr	r3, [r3, #0]
 8024140:	4a77      	ldr	r2, [pc, #476]	; (8024320 <HAL_DMA_IRQHandler+0xa10>)
 8024142:	4293      	cmp	r3, r2
 8024144:	d040      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 8024146:	687b      	ldr	r3, [r7, #4]
 8024148:	681b      	ldr	r3, [r3, #0]
 802414a:	4a76      	ldr	r2, [pc, #472]	; (8024324 <HAL_DMA_IRQHandler+0xa14>)
 802414c:	4293      	cmp	r3, r2
 802414e:	d03b      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 8024150:	687b      	ldr	r3, [r7, #4]
 8024152:	681b      	ldr	r3, [r3, #0]
 8024154:	4a74      	ldr	r2, [pc, #464]	; (8024328 <HAL_DMA_IRQHandler+0xa18>)
 8024156:	4293      	cmp	r3, r2
 8024158:	d036      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 802415a:	687b      	ldr	r3, [r7, #4]
 802415c:	681b      	ldr	r3, [r3, #0]
 802415e:	4a73      	ldr	r2, [pc, #460]	; (802432c <HAL_DMA_IRQHandler+0xa1c>)
 8024160:	4293      	cmp	r3, r2
 8024162:	d031      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 8024164:	687b      	ldr	r3, [r7, #4]
 8024166:	681b      	ldr	r3, [r3, #0]
 8024168:	4a71      	ldr	r2, [pc, #452]	; (8024330 <HAL_DMA_IRQHandler+0xa20>)
 802416a:	4293      	cmp	r3, r2
 802416c:	d02c      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 802416e:	687b      	ldr	r3, [r7, #4]
 8024170:	681b      	ldr	r3, [r3, #0]
 8024172:	4a70      	ldr	r2, [pc, #448]	; (8024334 <HAL_DMA_IRQHandler+0xa24>)
 8024174:	4293      	cmp	r3, r2
 8024176:	d027      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 8024178:	687b      	ldr	r3, [r7, #4]
 802417a:	681b      	ldr	r3, [r3, #0]
 802417c:	4a6e      	ldr	r2, [pc, #440]	; (8024338 <HAL_DMA_IRQHandler+0xa28>)
 802417e:	4293      	cmp	r3, r2
 8024180:	d022      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 8024182:	687b      	ldr	r3, [r7, #4]
 8024184:	681b      	ldr	r3, [r3, #0]
 8024186:	4a6d      	ldr	r2, [pc, #436]	; (802433c <HAL_DMA_IRQHandler+0xa2c>)
 8024188:	4293      	cmp	r3, r2
 802418a:	d01d      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 802418c:	687b      	ldr	r3, [r7, #4]
 802418e:	681b      	ldr	r3, [r3, #0]
 8024190:	4a6b      	ldr	r2, [pc, #428]	; (8024340 <HAL_DMA_IRQHandler+0xa30>)
 8024192:	4293      	cmp	r3, r2
 8024194:	d018      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 8024196:	687b      	ldr	r3, [r7, #4]
 8024198:	681b      	ldr	r3, [r3, #0]
 802419a:	4a6a      	ldr	r2, [pc, #424]	; (8024344 <HAL_DMA_IRQHandler+0xa34>)
 802419c:	4293      	cmp	r3, r2
 802419e:	d013      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 80241a0:	687b      	ldr	r3, [r7, #4]
 80241a2:	681b      	ldr	r3, [r3, #0]
 80241a4:	4a68      	ldr	r2, [pc, #416]	; (8024348 <HAL_DMA_IRQHandler+0xa38>)
 80241a6:	4293      	cmp	r3, r2
 80241a8:	d00e      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 80241aa:	687b      	ldr	r3, [r7, #4]
 80241ac:	681b      	ldr	r3, [r3, #0]
 80241ae:	4a67      	ldr	r2, [pc, #412]	; (802434c <HAL_DMA_IRQHandler+0xa3c>)
 80241b0:	4293      	cmp	r3, r2
 80241b2:	d009      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 80241b4:	687b      	ldr	r3, [r7, #4]
 80241b6:	681b      	ldr	r3, [r3, #0]
 80241b8:	4a65      	ldr	r2, [pc, #404]	; (8024350 <HAL_DMA_IRQHandler+0xa40>)
 80241ba:	4293      	cmp	r3, r2
 80241bc:	d004      	beq.n	80241c8 <HAL_DMA_IRQHandler+0x8b8>
 80241be:	687b      	ldr	r3, [r7, #4]
 80241c0:	681b      	ldr	r3, [r3, #0]
 80241c2:	4a64      	ldr	r2, [pc, #400]	; (8024354 <HAL_DMA_IRQHandler+0xa44>)
 80241c4:	4293      	cmp	r3, r2
 80241c6:	d108      	bne.n	80241da <HAL_DMA_IRQHandler+0x8ca>
 80241c8:	687b      	ldr	r3, [r7, #4]
 80241ca:	681b      	ldr	r3, [r3, #0]
 80241cc:	681a      	ldr	r2, [r3, #0]
 80241ce:	687b      	ldr	r3, [r7, #4]
 80241d0:	681b      	ldr	r3, [r3, #0]
 80241d2:	f022 0201 	bic.w	r2, r2, #1
 80241d6:	601a      	str	r2, [r3, #0]
 80241d8:	e007      	b.n	80241ea <HAL_DMA_IRQHandler+0x8da>
 80241da:	687b      	ldr	r3, [r7, #4]
 80241dc:	681b      	ldr	r3, [r3, #0]
 80241de:	681a      	ldr	r2, [r3, #0]
 80241e0:	687b      	ldr	r3, [r7, #4]
 80241e2:	681b      	ldr	r3, [r3, #0]
 80241e4:	f022 0201 	bic.w	r2, r2, #1
 80241e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80241ea:	68fb      	ldr	r3, [r7, #12]
 80241ec:	3301      	adds	r3, #1
 80241ee:	60fb      	str	r3, [r7, #12]
 80241f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80241f2:	429a      	cmp	r2, r3
 80241f4:	d307      	bcc.n	8024206 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80241f6:	687b      	ldr	r3, [r7, #4]
 80241f8:	681b      	ldr	r3, [r3, #0]
 80241fa:	681b      	ldr	r3, [r3, #0]
 80241fc:	f003 0301 	and.w	r3, r3, #1
 8024200:	2b00      	cmp	r3, #0
 8024202:	d1f2      	bne.n	80241ea <HAL_DMA_IRQHandler+0x8da>
 8024204:	e000      	b.n	8024208 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8024206:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8024208:	687b      	ldr	r3, [r7, #4]
 802420a:	681b      	ldr	r3, [r3, #0]
 802420c:	681b      	ldr	r3, [r3, #0]
 802420e:	f003 0301 	and.w	r3, r3, #1
 8024212:	2b00      	cmp	r3, #0
 8024214:	d004      	beq.n	8024220 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8024216:	687b      	ldr	r3, [r7, #4]
 8024218:	2203      	movs	r2, #3
 802421a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802421e:	e003      	b.n	8024228 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8024220:	687b      	ldr	r3, [r7, #4]
 8024222:	2201      	movs	r2, #1
 8024224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8024228:	687b      	ldr	r3, [r7, #4]
 802422a:	2200      	movs	r2, #0
 802422c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8024230:	687b      	ldr	r3, [r7, #4]
 8024232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024234:	2b00      	cmp	r3, #0
 8024236:	f000 8272 	beq.w	802471e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802423a:	687b      	ldr	r3, [r7, #4]
 802423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802423e:	6878      	ldr	r0, [r7, #4]
 8024240:	4798      	blx	r3
 8024242:	e26c      	b.n	802471e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8024244:	687b      	ldr	r3, [r7, #4]
 8024246:	681b      	ldr	r3, [r3, #0]
 8024248:	4a43      	ldr	r2, [pc, #268]	; (8024358 <HAL_DMA_IRQHandler+0xa48>)
 802424a:	4293      	cmp	r3, r2
 802424c:	d022      	beq.n	8024294 <HAL_DMA_IRQHandler+0x984>
 802424e:	687b      	ldr	r3, [r7, #4]
 8024250:	681b      	ldr	r3, [r3, #0]
 8024252:	4a42      	ldr	r2, [pc, #264]	; (802435c <HAL_DMA_IRQHandler+0xa4c>)
 8024254:	4293      	cmp	r3, r2
 8024256:	d01d      	beq.n	8024294 <HAL_DMA_IRQHandler+0x984>
 8024258:	687b      	ldr	r3, [r7, #4]
 802425a:	681b      	ldr	r3, [r3, #0]
 802425c:	4a40      	ldr	r2, [pc, #256]	; (8024360 <HAL_DMA_IRQHandler+0xa50>)
 802425e:	4293      	cmp	r3, r2
 8024260:	d018      	beq.n	8024294 <HAL_DMA_IRQHandler+0x984>
 8024262:	687b      	ldr	r3, [r7, #4]
 8024264:	681b      	ldr	r3, [r3, #0]
 8024266:	4a3f      	ldr	r2, [pc, #252]	; (8024364 <HAL_DMA_IRQHandler+0xa54>)
 8024268:	4293      	cmp	r3, r2
 802426a:	d013      	beq.n	8024294 <HAL_DMA_IRQHandler+0x984>
 802426c:	687b      	ldr	r3, [r7, #4]
 802426e:	681b      	ldr	r3, [r3, #0]
 8024270:	4a3d      	ldr	r2, [pc, #244]	; (8024368 <HAL_DMA_IRQHandler+0xa58>)
 8024272:	4293      	cmp	r3, r2
 8024274:	d00e      	beq.n	8024294 <HAL_DMA_IRQHandler+0x984>
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	681b      	ldr	r3, [r3, #0]
 802427a:	4a3c      	ldr	r2, [pc, #240]	; (802436c <HAL_DMA_IRQHandler+0xa5c>)
 802427c:	4293      	cmp	r3, r2
 802427e:	d009      	beq.n	8024294 <HAL_DMA_IRQHandler+0x984>
 8024280:	687b      	ldr	r3, [r7, #4]
 8024282:	681b      	ldr	r3, [r3, #0]
 8024284:	4a3a      	ldr	r2, [pc, #232]	; (8024370 <HAL_DMA_IRQHandler+0xa60>)
 8024286:	4293      	cmp	r3, r2
 8024288:	d004      	beq.n	8024294 <HAL_DMA_IRQHandler+0x984>
 802428a:	687b      	ldr	r3, [r7, #4]
 802428c:	681b      	ldr	r3, [r3, #0]
 802428e:	4a39      	ldr	r2, [pc, #228]	; (8024374 <HAL_DMA_IRQHandler+0xa64>)
 8024290:	4293      	cmp	r3, r2
 8024292:	d101      	bne.n	8024298 <HAL_DMA_IRQHandler+0x988>
 8024294:	2301      	movs	r3, #1
 8024296:	e000      	b.n	802429a <HAL_DMA_IRQHandler+0x98a>
 8024298:	2300      	movs	r3, #0
 802429a:	2b00      	cmp	r3, #0
 802429c:	f000 823f 	beq.w	802471e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80242a0:	687b      	ldr	r3, [r7, #4]
 80242a2:	681b      	ldr	r3, [r3, #0]
 80242a4:	681b      	ldr	r3, [r3, #0]
 80242a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80242a8:	687b      	ldr	r3, [r7, #4]
 80242aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80242ac:	f003 031f 	and.w	r3, r3, #31
 80242b0:	2204      	movs	r2, #4
 80242b2:	409a      	lsls	r2, r3
 80242b4:	697b      	ldr	r3, [r7, #20]
 80242b6:	4013      	ands	r3, r2
 80242b8:	2b00      	cmp	r3, #0
 80242ba:	f000 80cd 	beq.w	8024458 <HAL_DMA_IRQHandler+0xb48>
 80242be:	693b      	ldr	r3, [r7, #16]
 80242c0:	f003 0304 	and.w	r3, r3, #4
 80242c4:	2b00      	cmp	r3, #0
 80242c6:	f000 80c7 	beq.w	8024458 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80242ca:	687b      	ldr	r3, [r7, #4]
 80242cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80242ce:	f003 031f 	and.w	r3, r3, #31
 80242d2:	2204      	movs	r2, #4
 80242d4:	409a      	lsls	r2, r3
 80242d6:	69fb      	ldr	r3, [r7, #28]
 80242d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80242da:	693b      	ldr	r3, [r7, #16]
 80242dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80242e0:	2b00      	cmp	r3, #0
 80242e2:	d049      	beq.n	8024378 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80242e4:	693b      	ldr	r3, [r7, #16]
 80242e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80242ea:	2b00      	cmp	r3, #0
 80242ec:	d109      	bne.n	8024302 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80242ee:	687b      	ldr	r3, [r7, #4]
 80242f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80242f2:	2b00      	cmp	r3, #0
 80242f4:	f000 8210 	beq.w	8024718 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80242f8:	687b      	ldr	r3, [r7, #4]
 80242fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80242fc:	6878      	ldr	r0, [r7, #4]
 80242fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024300:	e20a      	b.n	8024718 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8024302:	687b      	ldr	r3, [r7, #4]
 8024304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024306:	2b00      	cmp	r3, #0
 8024308:	f000 8206 	beq.w	8024718 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 802430c:	687b      	ldr	r3, [r7, #4]
 802430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024310:	6878      	ldr	r0, [r7, #4]
 8024312:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024314:	e200      	b.n	8024718 <HAL_DMA_IRQHandler+0xe08>
 8024316:	bf00      	nop
 8024318:	40020010 	.word	0x40020010
 802431c:	40020028 	.word	0x40020028
 8024320:	40020040 	.word	0x40020040
 8024324:	40020058 	.word	0x40020058
 8024328:	40020070 	.word	0x40020070
 802432c:	40020088 	.word	0x40020088
 8024330:	400200a0 	.word	0x400200a0
 8024334:	400200b8 	.word	0x400200b8
 8024338:	40020410 	.word	0x40020410
 802433c:	40020428 	.word	0x40020428
 8024340:	40020440 	.word	0x40020440
 8024344:	40020458 	.word	0x40020458
 8024348:	40020470 	.word	0x40020470
 802434c:	40020488 	.word	0x40020488
 8024350:	400204a0 	.word	0x400204a0
 8024354:	400204b8 	.word	0x400204b8
 8024358:	58025408 	.word	0x58025408
 802435c:	5802541c 	.word	0x5802541c
 8024360:	58025430 	.word	0x58025430
 8024364:	58025444 	.word	0x58025444
 8024368:	58025458 	.word	0x58025458
 802436c:	5802546c 	.word	0x5802546c
 8024370:	58025480 	.word	0x58025480
 8024374:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8024378:	693b      	ldr	r3, [r7, #16]
 802437a:	f003 0320 	and.w	r3, r3, #32
 802437e:	2b00      	cmp	r3, #0
 8024380:	d160      	bne.n	8024444 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8024382:	687b      	ldr	r3, [r7, #4]
 8024384:	681b      	ldr	r3, [r3, #0]
 8024386:	4a7f      	ldr	r2, [pc, #508]	; (8024584 <HAL_DMA_IRQHandler+0xc74>)
 8024388:	4293      	cmp	r3, r2
 802438a:	d04a      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 802438c:	687b      	ldr	r3, [r7, #4]
 802438e:	681b      	ldr	r3, [r3, #0]
 8024390:	4a7d      	ldr	r2, [pc, #500]	; (8024588 <HAL_DMA_IRQHandler+0xc78>)
 8024392:	4293      	cmp	r3, r2
 8024394:	d045      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 8024396:	687b      	ldr	r3, [r7, #4]
 8024398:	681b      	ldr	r3, [r3, #0]
 802439a:	4a7c      	ldr	r2, [pc, #496]	; (802458c <HAL_DMA_IRQHandler+0xc7c>)
 802439c:	4293      	cmp	r3, r2
 802439e:	d040      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 80243a0:	687b      	ldr	r3, [r7, #4]
 80243a2:	681b      	ldr	r3, [r3, #0]
 80243a4:	4a7a      	ldr	r2, [pc, #488]	; (8024590 <HAL_DMA_IRQHandler+0xc80>)
 80243a6:	4293      	cmp	r3, r2
 80243a8:	d03b      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 80243aa:	687b      	ldr	r3, [r7, #4]
 80243ac:	681b      	ldr	r3, [r3, #0]
 80243ae:	4a79      	ldr	r2, [pc, #484]	; (8024594 <HAL_DMA_IRQHandler+0xc84>)
 80243b0:	4293      	cmp	r3, r2
 80243b2:	d036      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 80243b4:	687b      	ldr	r3, [r7, #4]
 80243b6:	681b      	ldr	r3, [r3, #0]
 80243b8:	4a77      	ldr	r2, [pc, #476]	; (8024598 <HAL_DMA_IRQHandler+0xc88>)
 80243ba:	4293      	cmp	r3, r2
 80243bc:	d031      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 80243be:	687b      	ldr	r3, [r7, #4]
 80243c0:	681b      	ldr	r3, [r3, #0]
 80243c2:	4a76      	ldr	r2, [pc, #472]	; (802459c <HAL_DMA_IRQHandler+0xc8c>)
 80243c4:	4293      	cmp	r3, r2
 80243c6:	d02c      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 80243c8:	687b      	ldr	r3, [r7, #4]
 80243ca:	681b      	ldr	r3, [r3, #0]
 80243cc:	4a74      	ldr	r2, [pc, #464]	; (80245a0 <HAL_DMA_IRQHandler+0xc90>)
 80243ce:	4293      	cmp	r3, r2
 80243d0:	d027      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 80243d2:	687b      	ldr	r3, [r7, #4]
 80243d4:	681b      	ldr	r3, [r3, #0]
 80243d6:	4a73      	ldr	r2, [pc, #460]	; (80245a4 <HAL_DMA_IRQHandler+0xc94>)
 80243d8:	4293      	cmp	r3, r2
 80243da:	d022      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 80243dc:	687b      	ldr	r3, [r7, #4]
 80243de:	681b      	ldr	r3, [r3, #0]
 80243e0:	4a71      	ldr	r2, [pc, #452]	; (80245a8 <HAL_DMA_IRQHandler+0xc98>)
 80243e2:	4293      	cmp	r3, r2
 80243e4:	d01d      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 80243e6:	687b      	ldr	r3, [r7, #4]
 80243e8:	681b      	ldr	r3, [r3, #0]
 80243ea:	4a70      	ldr	r2, [pc, #448]	; (80245ac <HAL_DMA_IRQHandler+0xc9c>)
 80243ec:	4293      	cmp	r3, r2
 80243ee:	d018      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 80243f0:	687b      	ldr	r3, [r7, #4]
 80243f2:	681b      	ldr	r3, [r3, #0]
 80243f4:	4a6e      	ldr	r2, [pc, #440]	; (80245b0 <HAL_DMA_IRQHandler+0xca0>)
 80243f6:	4293      	cmp	r3, r2
 80243f8:	d013      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 80243fa:	687b      	ldr	r3, [r7, #4]
 80243fc:	681b      	ldr	r3, [r3, #0]
 80243fe:	4a6d      	ldr	r2, [pc, #436]	; (80245b4 <HAL_DMA_IRQHandler+0xca4>)
 8024400:	4293      	cmp	r3, r2
 8024402:	d00e      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 8024404:	687b      	ldr	r3, [r7, #4]
 8024406:	681b      	ldr	r3, [r3, #0]
 8024408:	4a6b      	ldr	r2, [pc, #428]	; (80245b8 <HAL_DMA_IRQHandler+0xca8>)
 802440a:	4293      	cmp	r3, r2
 802440c:	d009      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 802440e:	687b      	ldr	r3, [r7, #4]
 8024410:	681b      	ldr	r3, [r3, #0]
 8024412:	4a6a      	ldr	r2, [pc, #424]	; (80245bc <HAL_DMA_IRQHandler+0xcac>)
 8024414:	4293      	cmp	r3, r2
 8024416:	d004      	beq.n	8024422 <HAL_DMA_IRQHandler+0xb12>
 8024418:	687b      	ldr	r3, [r7, #4]
 802441a:	681b      	ldr	r3, [r3, #0]
 802441c:	4a68      	ldr	r2, [pc, #416]	; (80245c0 <HAL_DMA_IRQHandler+0xcb0>)
 802441e:	4293      	cmp	r3, r2
 8024420:	d108      	bne.n	8024434 <HAL_DMA_IRQHandler+0xb24>
 8024422:	687b      	ldr	r3, [r7, #4]
 8024424:	681b      	ldr	r3, [r3, #0]
 8024426:	681a      	ldr	r2, [r3, #0]
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	681b      	ldr	r3, [r3, #0]
 802442c:	f022 0208 	bic.w	r2, r2, #8
 8024430:	601a      	str	r2, [r3, #0]
 8024432:	e007      	b.n	8024444 <HAL_DMA_IRQHandler+0xb34>
 8024434:	687b      	ldr	r3, [r7, #4]
 8024436:	681b      	ldr	r3, [r3, #0]
 8024438:	681a      	ldr	r2, [r3, #0]
 802443a:	687b      	ldr	r3, [r7, #4]
 802443c:	681b      	ldr	r3, [r3, #0]
 802443e:	f022 0204 	bic.w	r2, r2, #4
 8024442:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8024444:	687b      	ldr	r3, [r7, #4]
 8024446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024448:	2b00      	cmp	r3, #0
 802444a:	f000 8165 	beq.w	8024718 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802444e:	687b      	ldr	r3, [r7, #4]
 8024450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024452:	6878      	ldr	r0, [r7, #4]
 8024454:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024456:	e15f      	b.n	8024718 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8024458:	687b      	ldr	r3, [r7, #4]
 802445a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802445c:	f003 031f 	and.w	r3, r3, #31
 8024460:	2202      	movs	r2, #2
 8024462:	409a      	lsls	r2, r3
 8024464:	697b      	ldr	r3, [r7, #20]
 8024466:	4013      	ands	r3, r2
 8024468:	2b00      	cmp	r3, #0
 802446a:	f000 80c5 	beq.w	80245f8 <HAL_DMA_IRQHandler+0xce8>
 802446e:	693b      	ldr	r3, [r7, #16]
 8024470:	f003 0302 	and.w	r3, r3, #2
 8024474:	2b00      	cmp	r3, #0
 8024476:	f000 80bf 	beq.w	80245f8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 802447a:	687b      	ldr	r3, [r7, #4]
 802447c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802447e:	f003 031f 	and.w	r3, r3, #31
 8024482:	2202      	movs	r2, #2
 8024484:	409a      	lsls	r2, r3
 8024486:	69fb      	ldr	r3, [r7, #28]
 8024488:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802448a:	693b      	ldr	r3, [r7, #16]
 802448c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024490:	2b00      	cmp	r3, #0
 8024492:	d018      	beq.n	80244c6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8024494:	693b      	ldr	r3, [r7, #16]
 8024496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802449a:	2b00      	cmp	r3, #0
 802449c:	d109      	bne.n	80244b2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802449e:	687b      	ldr	r3, [r7, #4]
 80244a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80244a2:	2b00      	cmp	r3, #0
 80244a4:	f000 813a 	beq.w	802471c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80244a8:	687b      	ldr	r3, [r7, #4]
 80244aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80244ac:	6878      	ldr	r0, [r7, #4]
 80244ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80244b0:	e134      	b.n	802471c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80244b2:	687b      	ldr	r3, [r7, #4]
 80244b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80244b6:	2b00      	cmp	r3, #0
 80244b8:	f000 8130 	beq.w	802471c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80244bc:	687b      	ldr	r3, [r7, #4]
 80244be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80244c0:	6878      	ldr	r0, [r7, #4]
 80244c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80244c4:	e12a      	b.n	802471c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80244c6:	693b      	ldr	r3, [r7, #16]
 80244c8:	f003 0320 	and.w	r3, r3, #32
 80244cc:	2b00      	cmp	r3, #0
 80244ce:	f040 8089 	bne.w	80245e4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80244d2:	687b      	ldr	r3, [r7, #4]
 80244d4:	681b      	ldr	r3, [r3, #0]
 80244d6:	4a2b      	ldr	r2, [pc, #172]	; (8024584 <HAL_DMA_IRQHandler+0xc74>)
 80244d8:	4293      	cmp	r3, r2
 80244da:	d04a      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 80244dc:	687b      	ldr	r3, [r7, #4]
 80244de:	681b      	ldr	r3, [r3, #0]
 80244e0:	4a29      	ldr	r2, [pc, #164]	; (8024588 <HAL_DMA_IRQHandler+0xc78>)
 80244e2:	4293      	cmp	r3, r2
 80244e4:	d045      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 80244e6:	687b      	ldr	r3, [r7, #4]
 80244e8:	681b      	ldr	r3, [r3, #0]
 80244ea:	4a28      	ldr	r2, [pc, #160]	; (802458c <HAL_DMA_IRQHandler+0xc7c>)
 80244ec:	4293      	cmp	r3, r2
 80244ee:	d040      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 80244f0:	687b      	ldr	r3, [r7, #4]
 80244f2:	681b      	ldr	r3, [r3, #0]
 80244f4:	4a26      	ldr	r2, [pc, #152]	; (8024590 <HAL_DMA_IRQHandler+0xc80>)
 80244f6:	4293      	cmp	r3, r2
 80244f8:	d03b      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 80244fa:	687b      	ldr	r3, [r7, #4]
 80244fc:	681b      	ldr	r3, [r3, #0]
 80244fe:	4a25      	ldr	r2, [pc, #148]	; (8024594 <HAL_DMA_IRQHandler+0xc84>)
 8024500:	4293      	cmp	r3, r2
 8024502:	d036      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	681b      	ldr	r3, [r3, #0]
 8024508:	4a23      	ldr	r2, [pc, #140]	; (8024598 <HAL_DMA_IRQHandler+0xc88>)
 802450a:	4293      	cmp	r3, r2
 802450c:	d031      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 802450e:	687b      	ldr	r3, [r7, #4]
 8024510:	681b      	ldr	r3, [r3, #0]
 8024512:	4a22      	ldr	r2, [pc, #136]	; (802459c <HAL_DMA_IRQHandler+0xc8c>)
 8024514:	4293      	cmp	r3, r2
 8024516:	d02c      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 8024518:	687b      	ldr	r3, [r7, #4]
 802451a:	681b      	ldr	r3, [r3, #0]
 802451c:	4a20      	ldr	r2, [pc, #128]	; (80245a0 <HAL_DMA_IRQHandler+0xc90>)
 802451e:	4293      	cmp	r3, r2
 8024520:	d027      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 8024522:	687b      	ldr	r3, [r7, #4]
 8024524:	681b      	ldr	r3, [r3, #0]
 8024526:	4a1f      	ldr	r2, [pc, #124]	; (80245a4 <HAL_DMA_IRQHandler+0xc94>)
 8024528:	4293      	cmp	r3, r2
 802452a:	d022      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 802452c:	687b      	ldr	r3, [r7, #4]
 802452e:	681b      	ldr	r3, [r3, #0]
 8024530:	4a1d      	ldr	r2, [pc, #116]	; (80245a8 <HAL_DMA_IRQHandler+0xc98>)
 8024532:	4293      	cmp	r3, r2
 8024534:	d01d      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 8024536:	687b      	ldr	r3, [r7, #4]
 8024538:	681b      	ldr	r3, [r3, #0]
 802453a:	4a1c      	ldr	r2, [pc, #112]	; (80245ac <HAL_DMA_IRQHandler+0xc9c>)
 802453c:	4293      	cmp	r3, r2
 802453e:	d018      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 8024540:	687b      	ldr	r3, [r7, #4]
 8024542:	681b      	ldr	r3, [r3, #0]
 8024544:	4a1a      	ldr	r2, [pc, #104]	; (80245b0 <HAL_DMA_IRQHandler+0xca0>)
 8024546:	4293      	cmp	r3, r2
 8024548:	d013      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 802454a:	687b      	ldr	r3, [r7, #4]
 802454c:	681b      	ldr	r3, [r3, #0]
 802454e:	4a19      	ldr	r2, [pc, #100]	; (80245b4 <HAL_DMA_IRQHandler+0xca4>)
 8024550:	4293      	cmp	r3, r2
 8024552:	d00e      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 8024554:	687b      	ldr	r3, [r7, #4]
 8024556:	681b      	ldr	r3, [r3, #0]
 8024558:	4a17      	ldr	r2, [pc, #92]	; (80245b8 <HAL_DMA_IRQHandler+0xca8>)
 802455a:	4293      	cmp	r3, r2
 802455c:	d009      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 802455e:	687b      	ldr	r3, [r7, #4]
 8024560:	681b      	ldr	r3, [r3, #0]
 8024562:	4a16      	ldr	r2, [pc, #88]	; (80245bc <HAL_DMA_IRQHandler+0xcac>)
 8024564:	4293      	cmp	r3, r2
 8024566:	d004      	beq.n	8024572 <HAL_DMA_IRQHandler+0xc62>
 8024568:	687b      	ldr	r3, [r7, #4]
 802456a:	681b      	ldr	r3, [r3, #0]
 802456c:	4a14      	ldr	r2, [pc, #80]	; (80245c0 <HAL_DMA_IRQHandler+0xcb0>)
 802456e:	4293      	cmp	r3, r2
 8024570:	d128      	bne.n	80245c4 <HAL_DMA_IRQHandler+0xcb4>
 8024572:	687b      	ldr	r3, [r7, #4]
 8024574:	681b      	ldr	r3, [r3, #0]
 8024576:	681a      	ldr	r2, [r3, #0]
 8024578:	687b      	ldr	r3, [r7, #4]
 802457a:	681b      	ldr	r3, [r3, #0]
 802457c:	f022 0214 	bic.w	r2, r2, #20
 8024580:	601a      	str	r2, [r3, #0]
 8024582:	e027      	b.n	80245d4 <HAL_DMA_IRQHandler+0xcc4>
 8024584:	40020010 	.word	0x40020010
 8024588:	40020028 	.word	0x40020028
 802458c:	40020040 	.word	0x40020040
 8024590:	40020058 	.word	0x40020058
 8024594:	40020070 	.word	0x40020070
 8024598:	40020088 	.word	0x40020088
 802459c:	400200a0 	.word	0x400200a0
 80245a0:	400200b8 	.word	0x400200b8
 80245a4:	40020410 	.word	0x40020410
 80245a8:	40020428 	.word	0x40020428
 80245ac:	40020440 	.word	0x40020440
 80245b0:	40020458 	.word	0x40020458
 80245b4:	40020470 	.word	0x40020470
 80245b8:	40020488 	.word	0x40020488
 80245bc:	400204a0 	.word	0x400204a0
 80245c0:	400204b8 	.word	0x400204b8
 80245c4:	687b      	ldr	r3, [r7, #4]
 80245c6:	681b      	ldr	r3, [r3, #0]
 80245c8:	681a      	ldr	r2, [r3, #0]
 80245ca:	687b      	ldr	r3, [r7, #4]
 80245cc:	681b      	ldr	r3, [r3, #0]
 80245ce:	f022 020a 	bic.w	r2, r2, #10
 80245d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80245d4:	687b      	ldr	r3, [r7, #4]
 80245d6:	2201      	movs	r2, #1
 80245d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80245dc:	687b      	ldr	r3, [r7, #4]
 80245de:	2200      	movs	r2, #0
 80245e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80245e4:	687b      	ldr	r3, [r7, #4]
 80245e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80245e8:	2b00      	cmp	r3, #0
 80245ea:	f000 8097 	beq.w	802471c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80245ee:	687b      	ldr	r3, [r7, #4]
 80245f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80245f2:	6878      	ldr	r0, [r7, #4]
 80245f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80245f6:	e091      	b.n	802471c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80245f8:	687b      	ldr	r3, [r7, #4]
 80245fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80245fc:	f003 031f 	and.w	r3, r3, #31
 8024600:	2208      	movs	r2, #8
 8024602:	409a      	lsls	r2, r3
 8024604:	697b      	ldr	r3, [r7, #20]
 8024606:	4013      	ands	r3, r2
 8024608:	2b00      	cmp	r3, #0
 802460a:	f000 8088 	beq.w	802471e <HAL_DMA_IRQHandler+0xe0e>
 802460e:	693b      	ldr	r3, [r7, #16]
 8024610:	f003 0308 	and.w	r3, r3, #8
 8024614:	2b00      	cmp	r3, #0
 8024616:	f000 8082 	beq.w	802471e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 802461a:	687b      	ldr	r3, [r7, #4]
 802461c:	681b      	ldr	r3, [r3, #0]
 802461e:	4a41      	ldr	r2, [pc, #260]	; (8024724 <HAL_DMA_IRQHandler+0xe14>)
 8024620:	4293      	cmp	r3, r2
 8024622:	d04a      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 8024624:	687b      	ldr	r3, [r7, #4]
 8024626:	681b      	ldr	r3, [r3, #0]
 8024628:	4a3f      	ldr	r2, [pc, #252]	; (8024728 <HAL_DMA_IRQHandler+0xe18>)
 802462a:	4293      	cmp	r3, r2
 802462c:	d045      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 802462e:	687b      	ldr	r3, [r7, #4]
 8024630:	681b      	ldr	r3, [r3, #0]
 8024632:	4a3e      	ldr	r2, [pc, #248]	; (802472c <HAL_DMA_IRQHandler+0xe1c>)
 8024634:	4293      	cmp	r3, r2
 8024636:	d040      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 8024638:	687b      	ldr	r3, [r7, #4]
 802463a:	681b      	ldr	r3, [r3, #0]
 802463c:	4a3c      	ldr	r2, [pc, #240]	; (8024730 <HAL_DMA_IRQHandler+0xe20>)
 802463e:	4293      	cmp	r3, r2
 8024640:	d03b      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 8024642:	687b      	ldr	r3, [r7, #4]
 8024644:	681b      	ldr	r3, [r3, #0]
 8024646:	4a3b      	ldr	r2, [pc, #236]	; (8024734 <HAL_DMA_IRQHandler+0xe24>)
 8024648:	4293      	cmp	r3, r2
 802464a:	d036      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 802464c:	687b      	ldr	r3, [r7, #4]
 802464e:	681b      	ldr	r3, [r3, #0]
 8024650:	4a39      	ldr	r2, [pc, #228]	; (8024738 <HAL_DMA_IRQHandler+0xe28>)
 8024652:	4293      	cmp	r3, r2
 8024654:	d031      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 8024656:	687b      	ldr	r3, [r7, #4]
 8024658:	681b      	ldr	r3, [r3, #0]
 802465a:	4a38      	ldr	r2, [pc, #224]	; (802473c <HAL_DMA_IRQHandler+0xe2c>)
 802465c:	4293      	cmp	r3, r2
 802465e:	d02c      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 8024660:	687b      	ldr	r3, [r7, #4]
 8024662:	681b      	ldr	r3, [r3, #0]
 8024664:	4a36      	ldr	r2, [pc, #216]	; (8024740 <HAL_DMA_IRQHandler+0xe30>)
 8024666:	4293      	cmp	r3, r2
 8024668:	d027      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 802466a:	687b      	ldr	r3, [r7, #4]
 802466c:	681b      	ldr	r3, [r3, #0]
 802466e:	4a35      	ldr	r2, [pc, #212]	; (8024744 <HAL_DMA_IRQHandler+0xe34>)
 8024670:	4293      	cmp	r3, r2
 8024672:	d022      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 8024674:	687b      	ldr	r3, [r7, #4]
 8024676:	681b      	ldr	r3, [r3, #0]
 8024678:	4a33      	ldr	r2, [pc, #204]	; (8024748 <HAL_DMA_IRQHandler+0xe38>)
 802467a:	4293      	cmp	r3, r2
 802467c:	d01d      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 802467e:	687b      	ldr	r3, [r7, #4]
 8024680:	681b      	ldr	r3, [r3, #0]
 8024682:	4a32      	ldr	r2, [pc, #200]	; (802474c <HAL_DMA_IRQHandler+0xe3c>)
 8024684:	4293      	cmp	r3, r2
 8024686:	d018      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 8024688:	687b      	ldr	r3, [r7, #4]
 802468a:	681b      	ldr	r3, [r3, #0]
 802468c:	4a30      	ldr	r2, [pc, #192]	; (8024750 <HAL_DMA_IRQHandler+0xe40>)
 802468e:	4293      	cmp	r3, r2
 8024690:	d013      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 8024692:	687b      	ldr	r3, [r7, #4]
 8024694:	681b      	ldr	r3, [r3, #0]
 8024696:	4a2f      	ldr	r2, [pc, #188]	; (8024754 <HAL_DMA_IRQHandler+0xe44>)
 8024698:	4293      	cmp	r3, r2
 802469a:	d00e      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 802469c:	687b      	ldr	r3, [r7, #4]
 802469e:	681b      	ldr	r3, [r3, #0]
 80246a0:	4a2d      	ldr	r2, [pc, #180]	; (8024758 <HAL_DMA_IRQHandler+0xe48>)
 80246a2:	4293      	cmp	r3, r2
 80246a4:	d009      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 80246a6:	687b      	ldr	r3, [r7, #4]
 80246a8:	681b      	ldr	r3, [r3, #0]
 80246aa:	4a2c      	ldr	r2, [pc, #176]	; (802475c <HAL_DMA_IRQHandler+0xe4c>)
 80246ac:	4293      	cmp	r3, r2
 80246ae:	d004      	beq.n	80246ba <HAL_DMA_IRQHandler+0xdaa>
 80246b0:	687b      	ldr	r3, [r7, #4]
 80246b2:	681b      	ldr	r3, [r3, #0]
 80246b4:	4a2a      	ldr	r2, [pc, #168]	; (8024760 <HAL_DMA_IRQHandler+0xe50>)
 80246b6:	4293      	cmp	r3, r2
 80246b8:	d108      	bne.n	80246cc <HAL_DMA_IRQHandler+0xdbc>
 80246ba:	687b      	ldr	r3, [r7, #4]
 80246bc:	681b      	ldr	r3, [r3, #0]
 80246be:	681a      	ldr	r2, [r3, #0]
 80246c0:	687b      	ldr	r3, [r7, #4]
 80246c2:	681b      	ldr	r3, [r3, #0]
 80246c4:	f022 021c 	bic.w	r2, r2, #28
 80246c8:	601a      	str	r2, [r3, #0]
 80246ca:	e007      	b.n	80246dc <HAL_DMA_IRQHandler+0xdcc>
 80246cc:	687b      	ldr	r3, [r7, #4]
 80246ce:	681b      	ldr	r3, [r3, #0]
 80246d0:	681a      	ldr	r2, [r3, #0]
 80246d2:	687b      	ldr	r3, [r7, #4]
 80246d4:	681b      	ldr	r3, [r3, #0]
 80246d6:	f022 020e 	bic.w	r2, r2, #14
 80246da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80246dc:	687b      	ldr	r3, [r7, #4]
 80246de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80246e0:	f003 031f 	and.w	r3, r3, #31
 80246e4:	2201      	movs	r2, #1
 80246e6:	409a      	lsls	r2, r3
 80246e8:	69fb      	ldr	r3, [r7, #28]
 80246ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80246ec:	687b      	ldr	r3, [r7, #4]
 80246ee:	2201      	movs	r2, #1
 80246f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80246f2:	687b      	ldr	r3, [r7, #4]
 80246f4:	2201      	movs	r2, #1
 80246f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80246fa:	687b      	ldr	r3, [r7, #4]
 80246fc:	2200      	movs	r2, #0
 80246fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8024702:	687b      	ldr	r3, [r7, #4]
 8024704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024706:	2b00      	cmp	r3, #0
 8024708:	d009      	beq.n	802471e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802470a:	687b      	ldr	r3, [r7, #4]
 802470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802470e:	6878      	ldr	r0, [r7, #4]
 8024710:	4798      	blx	r3
 8024712:	e004      	b.n	802471e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8024714:	bf00      	nop
 8024716:	e002      	b.n	802471e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024718:	bf00      	nop
 802471a:	e000      	b.n	802471e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802471c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 802471e:	3728      	adds	r7, #40	; 0x28
 8024720:	46bd      	mov	sp, r7
 8024722:	bd80      	pop	{r7, pc}
 8024724:	40020010 	.word	0x40020010
 8024728:	40020028 	.word	0x40020028
 802472c:	40020040 	.word	0x40020040
 8024730:	40020058 	.word	0x40020058
 8024734:	40020070 	.word	0x40020070
 8024738:	40020088 	.word	0x40020088
 802473c:	400200a0 	.word	0x400200a0
 8024740:	400200b8 	.word	0x400200b8
 8024744:	40020410 	.word	0x40020410
 8024748:	40020428 	.word	0x40020428
 802474c:	40020440 	.word	0x40020440
 8024750:	40020458 	.word	0x40020458
 8024754:	40020470 	.word	0x40020470
 8024758:	40020488 	.word	0x40020488
 802475c:	400204a0 	.word	0x400204a0
 8024760:	400204b8 	.word	0x400204b8

08024764 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8024764:	b480      	push	{r7}
 8024766:	b087      	sub	sp, #28
 8024768:	af00      	add	r7, sp, #0
 802476a:	60f8      	str	r0, [r7, #12]
 802476c:	60b9      	str	r1, [r7, #8]
 802476e:	607a      	str	r2, [r7, #4]
 8024770:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8024772:	68fb      	ldr	r3, [r7, #12]
 8024774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024776:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8024778:	68fb      	ldr	r3, [r7, #12]
 802477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802477c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802477e:	68fb      	ldr	r3, [r7, #12]
 8024780:	681b      	ldr	r3, [r3, #0]
 8024782:	4a7f      	ldr	r2, [pc, #508]	; (8024980 <DMA_SetConfig+0x21c>)
 8024784:	4293      	cmp	r3, r2
 8024786:	d072      	beq.n	802486e <DMA_SetConfig+0x10a>
 8024788:	68fb      	ldr	r3, [r7, #12]
 802478a:	681b      	ldr	r3, [r3, #0]
 802478c:	4a7d      	ldr	r2, [pc, #500]	; (8024984 <DMA_SetConfig+0x220>)
 802478e:	4293      	cmp	r3, r2
 8024790:	d06d      	beq.n	802486e <DMA_SetConfig+0x10a>
 8024792:	68fb      	ldr	r3, [r7, #12]
 8024794:	681b      	ldr	r3, [r3, #0]
 8024796:	4a7c      	ldr	r2, [pc, #496]	; (8024988 <DMA_SetConfig+0x224>)
 8024798:	4293      	cmp	r3, r2
 802479a:	d068      	beq.n	802486e <DMA_SetConfig+0x10a>
 802479c:	68fb      	ldr	r3, [r7, #12]
 802479e:	681b      	ldr	r3, [r3, #0]
 80247a0:	4a7a      	ldr	r2, [pc, #488]	; (802498c <DMA_SetConfig+0x228>)
 80247a2:	4293      	cmp	r3, r2
 80247a4:	d063      	beq.n	802486e <DMA_SetConfig+0x10a>
 80247a6:	68fb      	ldr	r3, [r7, #12]
 80247a8:	681b      	ldr	r3, [r3, #0]
 80247aa:	4a79      	ldr	r2, [pc, #484]	; (8024990 <DMA_SetConfig+0x22c>)
 80247ac:	4293      	cmp	r3, r2
 80247ae:	d05e      	beq.n	802486e <DMA_SetConfig+0x10a>
 80247b0:	68fb      	ldr	r3, [r7, #12]
 80247b2:	681b      	ldr	r3, [r3, #0]
 80247b4:	4a77      	ldr	r2, [pc, #476]	; (8024994 <DMA_SetConfig+0x230>)
 80247b6:	4293      	cmp	r3, r2
 80247b8:	d059      	beq.n	802486e <DMA_SetConfig+0x10a>
 80247ba:	68fb      	ldr	r3, [r7, #12]
 80247bc:	681b      	ldr	r3, [r3, #0]
 80247be:	4a76      	ldr	r2, [pc, #472]	; (8024998 <DMA_SetConfig+0x234>)
 80247c0:	4293      	cmp	r3, r2
 80247c2:	d054      	beq.n	802486e <DMA_SetConfig+0x10a>
 80247c4:	68fb      	ldr	r3, [r7, #12]
 80247c6:	681b      	ldr	r3, [r3, #0]
 80247c8:	4a74      	ldr	r2, [pc, #464]	; (802499c <DMA_SetConfig+0x238>)
 80247ca:	4293      	cmp	r3, r2
 80247cc:	d04f      	beq.n	802486e <DMA_SetConfig+0x10a>
 80247ce:	68fb      	ldr	r3, [r7, #12]
 80247d0:	681b      	ldr	r3, [r3, #0]
 80247d2:	4a73      	ldr	r2, [pc, #460]	; (80249a0 <DMA_SetConfig+0x23c>)
 80247d4:	4293      	cmp	r3, r2
 80247d6:	d04a      	beq.n	802486e <DMA_SetConfig+0x10a>
 80247d8:	68fb      	ldr	r3, [r7, #12]
 80247da:	681b      	ldr	r3, [r3, #0]
 80247dc:	4a71      	ldr	r2, [pc, #452]	; (80249a4 <DMA_SetConfig+0x240>)
 80247de:	4293      	cmp	r3, r2
 80247e0:	d045      	beq.n	802486e <DMA_SetConfig+0x10a>
 80247e2:	68fb      	ldr	r3, [r7, #12]
 80247e4:	681b      	ldr	r3, [r3, #0]
 80247e6:	4a70      	ldr	r2, [pc, #448]	; (80249a8 <DMA_SetConfig+0x244>)
 80247e8:	4293      	cmp	r3, r2
 80247ea:	d040      	beq.n	802486e <DMA_SetConfig+0x10a>
 80247ec:	68fb      	ldr	r3, [r7, #12]
 80247ee:	681b      	ldr	r3, [r3, #0]
 80247f0:	4a6e      	ldr	r2, [pc, #440]	; (80249ac <DMA_SetConfig+0x248>)
 80247f2:	4293      	cmp	r3, r2
 80247f4:	d03b      	beq.n	802486e <DMA_SetConfig+0x10a>
 80247f6:	68fb      	ldr	r3, [r7, #12]
 80247f8:	681b      	ldr	r3, [r3, #0]
 80247fa:	4a6d      	ldr	r2, [pc, #436]	; (80249b0 <DMA_SetConfig+0x24c>)
 80247fc:	4293      	cmp	r3, r2
 80247fe:	d036      	beq.n	802486e <DMA_SetConfig+0x10a>
 8024800:	68fb      	ldr	r3, [r7, #12]
 8024802:	681b      	ldr	r3, [r3, #0]
 8024804:	4a6b      	ldr	r2, [pc, #428]	; (80249b4 <DMA_SetConfig+0x250>)
 8024806:	4293      	cmp	r3, r2
 8024808:	d031      	beq.n	802486e <DMA_SetConfig+0x10a>
 802480a:	68fb      	ldr	r3, [r7, #12]
 802480c:	681b      	ldr	r3, [r3, #0]
 802480e:	4a6a      	ldr	r2, [pc, #424]	; (80249b8 <DMA_SetConfig+0x254>)
 8024810:	4293      	cmp	r3, r2
 8024812:	d02c      	beq.n	802486e <DMA_SetConfig+0x10a>
 8024814:	68fb      	ldr	r3, [r7, #12]
 8024816:	681b      	ldr	r3, [r3, #0]
 8024818:	4a68      	ldr	r2, [pc, #416]	; (80249bc <DMA_SetConfig+0x258>)
 802481a:	4293      	cmp	r3, r2
 802481c:	d027      	beq.n	802486e <DMA_SetConfig+0x10a>
 802481e:	68fb      	ldr	r3, [r7, #12]
 8024820:	681b      	ldr	r3, [r3, #0]
 8024822:	4a67      	ldr	r2, [pc, #412]	; (80249c0 <DMA_SetConfig+0x25c>)
 8024824:	4293      	cmp	r3, r2
 8024826:	d022      	beq.n	802486e <DMA_SetConfig+0x10a>
 8024828:	68fb      	ldr	r3, [r7, #12]
 802482a:	681b      	ldr	r3, [r3, #0]
 802482c:	4a65      	ldr	r2, [pc, #404]	; (80249c4 <DMA_SetConfig+0x260>)
 802482e:	4293      	cmp	r3, r2
 8024830:	d01d      	beq.n	802486e <DMA_SetConfig+0x10a>
 8024832:	68fb      	ldr	r3, [r7, #12]
 8024834:	681b      	ldr	r3, [r3, #0]
 8024836:	4a64      	ldr	r2, [pc, #400]	; (80249c8 <DMA_SetConfig+0x264>)
 8024838:	4293      	cmp	r3, r2
 802483a:	d018      	beq.n	802486e <DMA_SetConfig+0x10a>
 802483c:	68fb      	ldr	r3, [r7, #12]
 802483e:	681b      	ldr	r3, [r3, #0]
 8024840:	4a62      	ldr	r2, [pc, #392]	; (80249cc <DMA_SetConfig+0x268>)
 8024842:	4293      	cmp	r3, r2
 8024844:	d013      	beq.n	802486e <DMA_SetConfig+0x10a>
 8024846:	68fb      	ldr	r3, [r7, #12]
 8024848:	681b      	ldr	r3, [r3, #0]
 802484a:	4a61      	ldr	r2, [pc, #388]	; (80249d0 <DMA_SetConfig+0x26c>)
 802484c:	4293      	cmp	r3, r2
 802484e:	d00e      	beq.n	802486e <DMA_SetConfig+0x10a>
 8024850:	68fb      	ldr	r3, [r7, #12]
 8024852:	681b      	ldr	r3, [r3, #0]
 8024854:	4a5f      	ldr	r2, [pc, #380]	; (80249d4 <DMA_SetConfig+0x270>)
 8024856:	4293      	cmp	r3, r2
 8024858:	d009      	beq.n	802486e <DMA_SetConfig+0x10a>
 802485a:	68fb      	ldr	r3, [r7, #12]
 802485c:	681b      	ldr	r3, [r3, #0]
 802485e:	4a5e      	ldr	r2, [pc, #376]	; (80249d8 <DMA_SetConfig+0x274>)
 8024860:	4293      	cmp	r3, r2
 8024862:	d004      	beq.n	802486e <DMA_SetConfig+0x10a>
 8024864:	68fb      	ldr	r3, [r7, #12]
 8024866:	681b      	ldr	r3, [r3, #0]
 8024868:	4a5c      	ldr	r2, [pc, #368]	; (80249dc <DMA_SetConfig+0x278>)
 802486a:	4293      	cmp	r3, r2
 802486c:	d101      	bne.n	8024872 <DMA_SetConfig+0x10e>
 802486e:	2301      	movs	r3, #1
 8024870:	e000      	b.n	8024874 <DMA_SetConfig+0x110>
 8024872:	2300      	movs	r3, #0
 8024874:	2b00      	cmp	r3, #0
 8024876:	d00d      	beq.n	8024894 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8024878:	68fb      	ldr	r3, [r7, #12]
 802487a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802487c:	68fa      	ldr	r2, [r7, #12]
 802487e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8024880:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8024882:	68fb      	ldr	r3, [r7, #12]
 8024884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024886:	2b00      	cmp	r3, #0
 8024888:	d004      	beq.n	8024894 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802488a:	68fb      	ldr	r3, [r7, #12]
 802488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802488e:	68fa      	ldr	r2, [r7, #12]
 8024890:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8024892:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8024894:	68fb      	ldr	r3, [r7, #12]
 8024896:	681b      	ldr	r3, [r3, #0]
 8024898:	4a39      	ldr	r2, [pc, #228]	; (8024980 <DMA_SetConfig+0x21c>)
 802489a:	4293      	cmp	r3, r2
 802489c:	d04a      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 802489e:	68fb      	ldr	r3, [r7, #12]
 80248a0:	681b      	ldr	r3, [r3, #0]
 80248a2:	4a38      	ldr	r2, [pc, #224]	; (8024984 <DMA_SetConfig+0x220>)
 80248a4:	4293      	cmp	r3, r2
 80248a6:	d045      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 80248a8:	68fb      	ldr	r3, [r7, #12]
 80248aa:	681b      	ldr	r3, [r3, #0]
 80248ac:	4a36      	ldr	r2, [pc, #216]	; (8024988 <DMA_SetConfig+0x224>)
 80248ae:	4293      	cmp	r3, r2
 80248b0:	d040      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 80248b2:	68fb      	ldr	r3, [r7, #12]
 80248b4:	681b      	ldr	r3, [r3, #0]
 80248b6:	4a35      	ldr	r2, [pc, #212]	; (802498c <DMA_SetConfig+0x228>)
 80248b8:	4293      	cmp	r3, r2
 80248ba:	d03b      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 80248bc:	68fb      	ldr	r3, [r7, #12]
 80248be:	681b      	ldr	r3, [r3, #0]
 80248c0:	4a33      	ldr	r2, [pc, #204]	; (8024990 <DMA_SetConfig+0x22c>)
 80248c2:	4293      	cmp	r3, r2
 80248c4:	d036      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 80248c6:	68fb      	ldr	r3, [r7, #12]
 80248c8:	681b      	ldr	r3, [r3, #0]
 80248ca:	4a32      	ldr	r2, [pc, #200]	; (8024994 <DMA_SetConfig+0x230>)
 80248cc:	4293      	cmp	r3, r2
 80248ce:	d031      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 80248d0:	68fb      	ldr	r3, [r7, #12]
 80248d2:	681b      	ldr	r3, [r3, #0]
 80248d4:	4a30      	ldr	r2, [pc, #192]	; (8024998 <DMA_SetConfig+0x234>)
 80248d6:	4293      	cmp	r3, r2
 80248d8:	d02c      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 80248da:	68fb      	ldr	r3, [r7, #12]
 80248dc:	681b      	ldr	r3, [r3, #0]
 80248de:	4a2f      	ldr	r2, [pc, #188]	; (802499c <DMA_SetConfig+0x238>)
 80248e0:	4293      	cmp	r3, r2
 80248e2:	d027      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 80248e4:	68fb      	ldr	r3, [r7, #12]
 80248e6:	681b      	ldr	r3, [r3, #0]
 80248e8:	4a2d      	ldr	r2, [pc, #180]	; (80249a0 <DMA_SetConfig+0x23c>)
 80248ea:	4293      	cmp	r3, r2
 80248ec:	d022      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 80248ee:	68fb      	ldr	r3, [r7, #12]
 80248f0:	681b      	ldr	r3, [r3, #0]
 80248f2:	4a2c      	ldr	r2, [pc, #176]	; (80249a4 <DMA_SetConfig+0x240>)
 80248f4:	4293      	cmp	r3, r2
 80248f6:	d01d      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 80248f8:	68fb      	ldr	r3, [r7, #12]
 80248fa:	681b      	ldr	r3, [r3, #0]
 80248fc:	4a2a      	ldr	r2, [pc, #168]	; (80249a8 <DMA_SetConfig+0x244>)
 80248fe:	4293      	cmp	r3, r2
 8024900:	d018      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 8024902:	68fb      	ldr	r3, [r7, #12]
 8024904:	681b      	ldr	r3, [r3, #0]
 8024906:	4a29      	ldr	r2, [pc, #164]	; (80249ac <DMA_SetConfig+0x248>)
 8024908:	4293      	cmp	r3, r2
 802490a:	d013      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 802490c:	68fb      	ldr	r3, [r7, #12]
 802490e:	681b      	ldr	r3, [r3, #0]
 8024910:	4a27      	ldr	r2, [pc, #156]	; (80249b0 <DMA_SetConfig+0x24c>)
 8024912:	4293      	cmp	r3, r2
 8024914:	d00e      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 8024916:	68fb      	ldr	r3, [r7, #12]
 8024918:	681b      	ldr	r3, [r3, #0]
 802491a:	4a26      	ldr	r2, [pc, #152]	; (80249b4 <DMA_SetConfig+0x250>)
 802491c:	4293      	cmp	r3, r2
 802491e:	d009      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 8024920:	68fb      	ldr	r3, [r7, #12]
 8024922:	681b      	ldr	r3, [r3, #0]
 8024924:	4a24      	ldr	r2, [pc, #144]	; (80249b8 <DMA_SetConfig+0x254>)
 8024926:	4293      	cmp	r3, r2
 8024928:	d004      	beq.n	8024934 <DMA_SetConfig+0x1d0>
 802492a:	68fb      	ldr	r3, [r7, #12]
 802492c:	681b      	ldr	r3, [r3, #0]
 802492e:	4a23      	ldr	r2, [pc, #140]	; (80249bc <DMA_SetConfig+0x258>)
 8024930:	4293      	cmp	r3, r2
 8024932:	d101      	bne.n	8024938 <DMA_SetConfig+0x1d4>
 8024934:	2301      	movs	r3, #1
 8024936:	e000      	b.n	802493a <DMA_SetConfig+0x1d6>
 8024938:	2300      	movs	r3, #0
 802493a:	2b00      	cmp	r3, #0
 802493c:	d059      	beq.n	80249f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802493e:	68fb      	ldr	r3, [r7, #12]
 8024940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024942:	f003 031f 	and.w	r3, r3, #31
 8024946:	223f      	movs	r2, #63	; 0x3f
 8024948:	409a      	lsls	r2, r3
 802494a:	697b      	ldr	r3, [r7, #20]
 802494c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802494e:	68fb      	ldr	r3, [r7, #12]
 8024950:	681b      	ldr	r3, [r3, #0]
 8024952:	681a      	ldr	r2, [r3, #0]
 8024954:	68fb      	ldr	r3, [r7, #12]
 8024956:	681b      	ldr	r3, [r3, #0]
 8024958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802495c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 802495e:	68fb      	ldr	r3, [r7, #12]
 8024960:	681b      	ldr	r3, [r3, #0]
 8024962:	683a      	ldr	r2, [r7, #0]
 8024964:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8024966:	68fb      	ldr	r3, [r7, #12]
 8024968:	689b      	ldr	r3, [r3, #8]
 802496a:	2b40      	cmp	r3, #64	; 0x40
 802496c:	d138      	bne.n	80249e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 802496e:	68fb      	ldr	r3, [r7, #12]
 8024970:	681b      	ldr	r3, [r3, #0]
 8024972:	687a      	ldr	r2, [r7, #4]
 8024974:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8024976:	68fb      	ldr	r3, [r7, #12]
 8024978:	681b      	ldr	r3, [r3, #0]
 802497a:	68ba      	ldr	r2, [r7, #8]
 802497c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 802497e:	e086      	b.n	8024a8e <DMA_SetConfig+0x32a>
 8024980:	40020010 	.word	0x40020010
 8024984:	40020028 	.word	0x40020028
 8024988:	40020040 	.word	0x40020040
 802498c:	40020058 	.word	0x40020058
 8024990:	40020070 	.word	0x40020070
 8024994:	40020088 	.word	0x40020088
 8024998:	400200a0 	.word	0x400200a0
 802499c:	400200b8 	.word	0x400200b8
 80249a0:	40020410 	.word	0x40020410
 80249a4:	40020428 	.word	0x40020428
 80249a8:	40020440 	.word	0x40020440
 80249ac:	40020458 	.word	0x40020458
 80249b0:	40020470 	.word	0x40020470
 80249b4:	40020488 	.word	0x40020488
 80249b8:	400204a0 	.word	0x400204a0
 80249bc:	400204b8 	.word	0x400204b8
 80249c0:	58025408 	.word	0x58025408
 80249c4:	5802541c 	.word	0x5802541c
 80249c8:	58025430 	.word	0x58025430
 80249cc:	58025444 	.word	0x58025444
 80249d0:	58025458 	.word	0x58025458
 80249d4:	5802546c 	.word	0x5802546c
 80249d8:	58025480 	.word	0x58025480
 80249dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80249e0:	68fb      	ldr	r3, [r7, #12]
 80249e2:	681b      	ldr	r3, [r3, #0]
 80249e4:	68ba      	ldr	r2, [r7, #8]
 80249e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80249e8:	68fb      	ldr	r3, [r7, #12]
 80249ea:	681b      	ldr	r3, [r3, #0]
 80249ec:	687a      	ldr	r2, [r7, #4]
 80249ee:	60da      	str	r2, [r3, #12]
}
 80249f0:	e04d      	b.n	8024a8e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80249f2:	68fb      	ldr	r3, [r7, #12]
 80249f4:	681b      	ldr	r3, [r3, #0]
 80249f6:	4a29      	ldr	r2, [pc, #164]	; (8024a9c <DMA_SetConfig+0x338>)
 80249f8:	4293      	cmp	r3, r2
 80249fa:	d022      	beq.n	8024a42 <DMA_SetConfig+0x2de>
 80249fc:	68fb      	ldr	r3, [r7, #12]
 80249fe:	681b      	ldr	r3, [r3, #0]
 8024a00:	4a27      	ldr	r2, [pc, #156]	; (8024aa0 <DMA_SetConfig+0x33c>)
 8024a02:	4293      	cmp	r3, r2
 8024a04:	d01d      	beq.n	8024a42 <DMA_SetConfig+0x2de>
 8024a06:	68fb      	ldr	r3, [r7, #12]
 8024a08:	681b      	ldr	r3, [r3, #0]
 8024a0a:	4a26      	ldr	r2, [pc, #152]	; (8024aa4 <DMA_SetConfig+0x340>)
 8024a0c:	4293      	cmp	r3, r2
 8024a0e:	d018      	beq.n	8024a42 <DMA_SetConfig+0x2de>
 8024a10:	68fb      	ldr	r3, [r7, #12]
 8024a12:	681b      	ldr	r3, [r3, #0]
 8024a14:	4a24      	ldr	r2, [pc, #144]	; (8024aa8 <DMA_SetConfig+0x344>)
 8024a16:	4293      	cmp	r3, r2
 8024a18:	d013      	beq.n	8024a42 <DMA_SetConfig+0x2de>
 8024a1a:	68fb      	ldr	r3, [r7, #12]
 8024a1c:	681b      	ldr	r3, [r3, #0]
 8024a1e:	4a23      	ldr	r2, [pc, #140]	; (8024aac <DMA_SetConfig+0x348>)
 8024a20:	4293      	cmp	r3, r2
 8024a22:	d00e      	beq.n	8024a42 <DMA_SetConfig+0x2de>
 8024a24:	68fb      	ldr	r3, [r7, #12]
 8024a26:	681b      	ldr	r3, [r3, #0]
 8024a28:	4a21      	ldr	r2, [pc, #132]	; (8024ab0 <DMA_SetConfig+0x34c>)
 8024a2a:	4293      	cmp	r3, r2
 8024a2c:	d009      	beq.n	8024a42 <DMA_SetConfig+0x2de>
 8024a2e:	68fb      	ldr	r3, [r7, #12]
 8024a30:	681b      	ldr	r3, [r3, #0]
 8024a32:	4a20      	ldr	r2, [pc, #128]	; (8024ab4 <DMA_SetConfig+0x350>)
 8024a34:	4293      	cmp	r3, r2
 8024a36:	d004      	beq.n	8024a42 <DMA_SetConfig+0x2de>
 8024a38:	68fb      	ldr	r3, [r7, #12]
 8024a3a:	681b      	ldr	r3, [r3, #0]
 8024a3c:	4a1e      	ldr	r2, [pc, #120]	; (8024ab8 <DMA_SetConfig+0x354>)
 8024a3e:	4293      	cmp	r3, r2
 8024a40:	d101      	bne.n	8024a46 <DMA_SetConfig+0x2e2>
 8024a42:	2301      	movs	r3, #1
 8024a44:	e000      	b.n	8024a48 <DMA_SetConfig+0x2e4>
 8024a46:	2300      	movs	r3, #0
 8024a48:	2b00      	cmp	r3, #0
 8024a4a:	d020      	beq.n	8024a8e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8024a4c:	68fb      	ldr	r3, [r7, #12]
 8024a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024a50:	f003 031f 	and.w	r3, r3, #31
 8024a54:	2201      	movs	r2, #1
 8024a56:	409a      	lsls	r2, r3
 8024a58:	693b      	ldr	r3, [r7, #16]
 8024a5a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8024a5c:	68fb      	ldr	r3, [r7, #12]
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	683a      	ldr	r2, [r7, #0]
 8024a62:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8024a64:	68fb      	ldr	r3, [r7, #12]
 8024a66:	689b      	ldr	r3, [r3, #8]
 8024a68:	2b40      	cmp	r3, #64	; 0x40
 8024a6a:	d108      	bne.n	8024a7e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8024a6c:	68fb      	ldr	r3, [r7, #12]
 8024a6e:	681b      	ldr	r3, [r3, #0]
 8024a70:	687a      	ldr	r2, [r7, #4]
 8024a72:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8024a74:	68fb      	ldr	r3, [r7, #12]
 8024a76:	681b      	ldr	r3, [r3, #0]
 8024a78:	68ba      	ldr	r2, [r7, #8]
 8024a7a:	60da      	str	r2, [r3, #12]
}
 8024a7c:	e007      	b.n	8024a8e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8024a7e:	68fb      	ldr	r3, [r7, #12]
 8024a80:	681b      	ldr	r3, [r3, #0]
 8024a82:	68ba      	ldr	r2, [r7, #8]
 8024a84:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8024a86:	68fb      	ldr	r3, [r7, #12]
 8024a88:	681b      	ldr	r3, [r3, #0]
 8024a8a:	687a      	ldr	r2, [r7, #4]
 8024a8c:	60da      	str	r2, [r3, #12]
}
 8024a8e:	bf00      	nop
 8024a90:	371c      	adds	r7, #28
 8024a92:	46bd      	mov	sp, r7
 8024a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a98:	4770      	bx	lr
 8024a9a:	bf00      	nop
 8024a9c:	58025408 	.word	0x58025408
 8024aa0:	5802541c 	.word	0x5802541c
 8024aa4:	58025430 	.word	0x58025430
 8024aa8:	58025444 	.word	0x58025444
 8024aac:	58025458 	.word	0x58025458
 8024ab0:	5802546c 	.word	0x5802546c
 8024ab4:	58025480 	.word	0x58025480
 8024ab8:	58025494 	.word	0x58025494

08024abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8024abc:	b480      	push	{r7}
 8024abe:	b085      	sub	sp, #20
 8024ac0:	af00      	add	r7, sp, #0
 8024ac2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8024ac4:	687b      	ldr	r3, [r7, #4]
 8024ac6:	681b      	ldr	r3, [r3, #0]
 8024ac8:	4a42      	ldr	r2, [pc, #264]	; (8024bd4 <DMA_CalcBaseAndBitshift+0x118>)
 8024aca:	4293      	cmp	r3, r2
 8024acc:	d04a      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024ace:	687b      	ldr	r3, [r7, #4]
 8024ad0:	681b      	ldr	r3, [r3, #0]
 8024ad2:	4a41      	ldr	r2, [pc, #260]	; (8024bd8 <DMA_CalcBaseAndBitshift+0x11c>)
 8024ad4:	4293      	cmp	r3, r2
 8024ad6:	d045      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024ad8:	687b      	ldr	r3, [r7, #4]
 8024ada:	681b      	ldr	r3, [r3, #0]
 8024adc:	4a3f      	ldr	r2, [pc, #252]	; (8024bdc <DMA_CalcBaseAndBitshift+0x120>)
 8024ade:	4293      	cmp	r3, r2
 8024ae0:	d040      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024ae2:	687b      	ldr	r3, [r7, #4]
 8024ae4:	681b      	ldr	r3, [r3, #0]
 8024ae6:	4a3e      	ldr	r2, [pc, #248]	; (8024be0 <DMA_CalcBaseAndBitshift+0x124>)
 8024ae8:	4293      	cmp	r3, r2
 8024aea:	d03b      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024aec:	687b      	ldr	r3, [r7, #4]
 8024aee:	681b      	ldr	r3, [r3, #0]
 8024af0:	4a3c      	ldr	r2, [pc, #240]	; (8024be4 <DMA_CalcBaseAndBitshift+0x128>)
 8024af2:	4293      	cmp	r3, r2
 8024af4:	d036      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024af6:	687b      	ldr	r3, [r7, #4]
 8024af8:	681b      	ldr	r3, [r3, #0]
 8024afa:	4a3b      	ldr	r2, [pc, #236]	; (8024be8 <DMA_CalcBaseAndBitshift+0x12c>)
 8024afc:	4293      	cmp	r3, r2
 8024afe:	d031      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024b00:	687b      	ldr	r3, [r7, #4]
 8024b02:	681b      	ldr	r3, [r3, #0]
 8024b04:	4a39      	ldr	r2, [pc, #228]	; (8024bec <DMA_CalcBaseAndBitshift+0x130>)
 8024b06:	4293      	cmp	r3, r2
 8024b08:	d02c      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024b0a:	687b      	ldr	r3, [r7, #4]
 8024b0c:	681b      	ldr	r3, [r3, #0]
 8024b0e:	4a38      	ldr	r2, [pc, #224]	; (8024bf0 <DMA_CalcBaseAndBitshift+0x134>)
 8024b10:	4293      	cmp	r3, r2
 8024b12:	d027      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024b14:	687b      	ldr	r3, [r7, #4]
 8024b16:	681b      	ldr	r3, [r3, #0]
 8024b18:	4a36      	ldr	r2, [pc, #216]	; (8024bf4 <DMA_CalcBaseAndBitshift+0x138>)
 8024b1a:	4293      	cmp	r3, r2
 8024b1c:	d022      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024b1e:	687b      	ldr	r3, [r7, #4]
 8024b20:	681b      	ldr	r3, [r3, #0]
 8024b22:	4a35      	ldr	r2, [pc, #212]	; (8024bf8 <DMA_CalcBaseAndBitshift+0x13c>)
 8024b24:	4293      	cmp	r3, r2
 8024b26:	d01d      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024b28:	687b      	ldr	r3, [r7, #4]
 8024b2a:	681b      	ldr	r3, [r3, #0]
 8024b2c:	4a33      	ldr	r2, [pc, #204]	; (8024bfc <DMA_CalcBaseAndBitshift+0x140>)
 8024b2e:	4293      	cmp	r3, r2
 8024b30:	d018      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024b32:	687b      	ldr	r3, [r7, #4]
 8024b34:	681b      	ldr	r3, [r3, #0]
 8024b36:	4a32      	ldr	r2, [pc, #200]	; (8024c00 <DMA_CalcBaseAndBitshift+0x144>)
 8024b38:	4293      	cmp	r3, r2
 8024b3a:	d013      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	681b      	ldr	r3, [r3, #0]
 8024b40:	4a30      	ldr	r2, [pc, #192]	; (8024c04 <DMA_CalcBaseAndBitshift+0x148>)
 8024b42:	4293      	cmp	r3, r2
 8024b44:	d00e      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024b46:	687b      	ldr	r3, [r7, #4]
 8024b48:	681b      	ldr	r3, [r3, #0]
 8024b4a:	4a2f      	ldr	r2, [pc, #188]	; (8024c08 <DMA_CalcBaseAndBitshift+0x14c>)
 8024b4c:	4293      	cmp	r3, r2
 8024b4e:	d009      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024b50:	687b      	ldr	r3, [r7, #4]
 8024b52:	681b      	ldr	r3, [r3, #0]
 8024b54:	4a2d      	ldr	r2, [pc, #180]	; (8024c0c <DMA_CalcBaseAndBitshift+0x150>)
 8024b56:	4293      	cmp	r3, r2
 8024b58:	d004      	beq.n	8024b64 <DMA_CalcBaseAndBitshift+0xa8>
 8024b5a:	687b      	ldr	r3, [r7, #4]
 8024b5c:	681b      	ldr	r3, [r3, #0]
 8024b5e:	4a2c      	ldr	r2, [pc, #176]	; (8024c10 <DMA_CalcBaseAndBitshift+0x154>)
 8024b60:	4293      	cmp	r3, r2
 8024b62:	d101      	bne.n	8024b68 <DMA_CalcBaseAndBitshift+0xac>
 8024b64:	2301      	movs	r3, #1
 8024b66:	e000      	b.n	8024b6a <DMA_CalcBaseAndBitshift+0xae>
 8024b68:	2300      	movs	r3, #0
 8024b6a:	2b00      	cmp	r3, #0
 8024b6c:	d024      	beq.n	8024bb8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8024b6e:	687b      	ldr	r3, [r7, #4]
 8024b70:	681b      	ldr	r3, [r3, #0]
 8024b72:	b2db      	uxtb	r3, r3
 8024b74:	3b10      	subs	r3, #16
 8024b76:	4a27      	ldr	r2, [pc, #156]	; (8024c14 <DMA_CalcBaseAndBitshift+0x158>)
 8024b78:	fba2 2303 	umull	r2, r3, r2, r3
 8024b7c:	091b      	lsrs	r3, r3, #4
 8024b7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8024b80:	68fb      	ldr	r3, [r7, #12]
 8024b82:	f003 0307 	and.w	r3, r3, #7
 8024b86:	4a24      	ldr	r2, [pc, #144]	; (8024c18 <DMA_CalcBaseAndBitshift+0x15c>)
 8024b88:	5cd3      	ldrb	r3, [r2, r3]
 8024b8a:	461a      	mov	r2, r3
 8024b8c:	687b      	ldr	r3, [r7, #4]
 8024b8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8024b90:	68fb      	ldr	r3, [r7, #12]
 8024b92:	2b03      	cmp	r3, #3
 8024b94:	d908      	bls.n	8024ba8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8024b96:	687b      	ldr	r3, [r7, #4]
 8024b98:	681b      	ldr	r3, [r3, #0]
 8024b9a:	461a      	mov	r2, r3
 8024b9c:	4b1f      	ldr	r3, [pc, #124]	; (8024c1c <DMA_CalcBaseAndBitshift+0x160>)
 8024b9e:	4013      	ands	r3, r2
 8024ba0:	1d1a      	adds	r2, r3, #4
 8024ba2:	687b      	ldr	r3, [r7, #4]
 8024ba4:	659a      	str	r2, [r3, #88]	; 0x58
 8024ba6:	e00d      	b.n	8024bc4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8024ba8:	687b      	ldr	r3, [r7, #4]
 8024baa:	681b      	ldr	r3, [r3, #0]
 8024bac:	461a      	mov	r2, r3
 8024bae:	4b1b      	ldr	r3, [pc, #108]	; (8024c1c <DMA_CalcBaseAndBitshift+0x160>)
 8024bb0:	4013      	ands	r3, r2
 8024bb2:	687a      	ldr	r2, [r7, #4]
 8024bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8024bb6:	e005      	b.n	8024bc4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8024bb8:	687b      	ldr	r3, [r7, #4]
 8024bba:	681b      	ldr	r3, [r3, #0]
 8024bbc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8024bc0:	687b      	ldr	r3, [r7, #4]
 8024bc2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8024bc4:	687b      	ldr	r3, [r7, #4]
 8024bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8024bc8:	4618      	mov	r0, r3
 8024bca:	3714      	adds	r7, #20
 8024bcc:	46bd      	mov	sp, r7
 8024bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bd2:	4770      	bx	lr
 8024bd4:	40020010 	.word	0x40020010
 8024bd8:	40020028 	.word	0x40020028
 8024bdc:	40020040 	.word	0x40020040
 8024be0:	40020058 	.word	0x40020058
 8024be4:	40020070 	.word	0x40020070
 8024be8:	40020088 	.word	0x40020088
 8024bec:	400200a0 	.word	0x400200a0
 8024bf0:	400200b8 	.word	0x400200b8
 8024bf4:	40020410 	.word	0x40020410
 8024bf8:	40020428 	.word	0x40020428
 8024bfc:	40020440 	.word	0x40020440
 8024c00:	40020458 	.word	0x40020458
 8024c04:	40020470 	.word	0x40020470
 8024c08:	40020488 	.word	0x40020488
 8024c0c:	400204a0 	.word	0x400204a0
 8024c10:	400204b8 	.word	0x400204b8
 8024c14:	aaaaaaab 	.word	0xaaaaaaab
 8024c18:	0803b8a0 	.word	0x0803b8a0
 8024c1c:	fffffc00 	.word	0xfffffc00

08024c20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8024c20:	b480      	push	{r7}
 8024c22:	b085      	sub	sp, #20
 8024c24:	af00      	add	r7, sp, #0
 8024c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8024c28:	2300      	movs	r3, #0
 8024c2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8024c2c:	687b      	ldr	r3, [r7, #4]
 8024c2e:	699b      	ldr	r3, [r3, #24]
 8024c30:	2b00      	cmp	r3, #0
 8024c32:	d120      	bne.n	8024c76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8024c34:	687b      	ldr	r3, [r7, #4]
 8024c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c38:	2b03      	cmp	r3, #3
 8024c3a:	d858      	bhi.n	8024cee <DMA_CheckFifoParam+0xce>
 8024c3c:	a201      	add	r2, pc, #4	; (adr r2, 8024c44 <DMA_CheckFifoParam+0x24>)
 8024c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024c42:	bf00      	nop
 8024c44:	08024c55 	.word	0x08024c55
 8024c48:	08024c67 	.word	0x08024c67
 8024c4c:	08024c55 	.word	0x08024c55
 8024c50:	08024cef 	.word	0x08024cef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024c54:	687b      	ldr	r3, [r7, #4]
 8024c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024c5c:	2b00      	cmp	r3, #0
 8024c5e:	d048      	beq.n	8024cf2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8024c60:	2301      	movs	r3, #1
 8024c62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8024c64:	e045      	b.n	8024cf2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8024c66:	687b      	ldr	r3, [r7, #4]
 8024c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024c6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8024c6e:	d142      	bne.n	8024cf6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8024c70:	2301      	movs	r3, #1
 8024c72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8024c74:	e03f      	b.n	8024cf6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8024c76:	687b      	ldr	r3, [r7, #4]
 8024c78:	699b      	ldr	r3, [r3, #24]
 8024c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024c7e:	d123      	bne.n	8024cc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8024c80:	687b      	ldr	r3, [r7, #4]
 8024c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c84:	2b03      	cmp	r3, #3
 8024c86:	d838      	bhi.n	8024cfa <DMA_CheckFifoParam+0xda>
 8024c88:	a201      	add	r2, pc, #4	; (adr r2, 8024c90 <DMA_CheckFifoParam+0x70>)
 8024c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024c8e:	bf00      	nop
 8024c90:	08024ca1 	.word	0x08024ca1
 8024c94:	08024ca7 	.word	0x08024ca7
 8024c98:	08024ca1 	.word	0x08024ca1
 8024c9c:	08024cb9 	.word	0x08024cb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8024ca0:	2301      	movs	r3, #1
 8024ca2:	73fb      	strb	r3, [r7, #15]
        break;
 8024ca4:	e030      	b.n	8024d08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024ca6:	687b      	ldr	r3, [r7, #4]
 8024ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024cae:	2b00      	cmp	r3, #0
 8024cb0:	d025      	beq.n	8024cfe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8024cb2:	2301      	movs	r3, #1
 8024cb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8024cb6:	e022      	b.n	8024cfe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8024cb8:	687b      	ldr	r3, [r7, #4]
 8024cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024cbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8024cc0:	d11f      	bne.n	8024d02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8024cc2:	2301      	movs	r3, #1
 8024cc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8024cc6:	e01c      	b.n	8024d02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8024cc8:	687b      	ldr	r3, [r7, #4]
 8024cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024ccc:	2b02      	cmp	r3, #2
 8024cce:	d902      	bls.n	8024cd6 <DMA_CheckFifoParam+0xb6>
 8024cd0:	2b03      	cmp	r3, #3
 8024cd2:	d003      	beq.n	8024cdc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8024cd4:	e018      	b.n	8024d08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8024cd6:	2301      	movs	r3, #1
 8024cd8:	73fb      	strb	r3, [r7, #15]
        break;
 8024cda:	e015      	b.n	8024d08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024cdc:	687b      	ldr	r3, [r7, #4]
 8024cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024ce4:	2b00      	cmp	r3, #0
 8024ce6:	d00e      	beq.n	8024d06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8024ce8:	2301      	movs	r3, #1
 8024cea:	73fb      	strb	r3, [r7, #15]
    break;
 8024cec:	e00b      	b.n	8024d06 <DMA_CheckFifoParam+0xe6>
        break;
 8024cee:	bf00      	nop
 8024cf0:	e00a      	b.n	8024d08 <DMA_CheckFifoParam+0xe8>
        break;
 8024cf2:	bf00      	nop
 8024cf4:	e008      	b.n	8024d08 <DMA_CheckFifoParam+0xe8>
        break;
 8024cf6:	bf00      	nop
 8024cf8:	e006      	b.n	8024d08 <DMA_CheckFifoParam+0xe8>
        break;
 8024cfa:	bf00      	nop
 8024cfc:	e004      	b.n	8024d08 <DMA_CheckFifoParam+0xe8>
        break;
 8024cfe:	bf00      	nop
 8024d00:	e002      	b.n	8024d08 <DMA_CheckFifoParam+0xe8>
        break;
 8024d02:	bf00      	nop
 8024d04:	e000      	b.n	8024d08 <DMA_CheckFifoParam+0xe8>
    break;
 8024d06:	bf00      	nop
    }
  }

  return status;
 8024d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8024d0a:	4618      	mov	r0, r3
 8024d0c:	3714      	adds	r7, #20
 8024d0e:	46bd      	mov	sp, r7
 8024d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d14:	4770      	bx	lr
 8024d16:	bf00      	nop

08024d18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8024d18:	b480      	push	{r7}
 8024d1a:	b085      	sub	sp, #20
 8024d1c:	af00      	add	r7, sp, #0
 8024d1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8024d20:	687b      	ldr	r3, [r7, #4]
 8024d22:	681b      	ldr	r3, [r3, #0]
 8024d24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8024d26:	687b      	ldr	r3, [r7, #4]
 8024d28:	681b      	ldr	r3, [r3, #0]
 8024d2a:	4a38      	ldr	r2, [pc, #224]	; (8024e0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8024d2c:	4293      	cmp	r3, r2
 8024d2e:	d022      	beq.n	8024d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d30:	687b      	ldr	r3, [r7, #4]
 8024d32:	681b      	ldr	r3, [r3, #0]
 8024d34:	4a36      	ldr	r2, [pc, #216]	; (8024e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8024d36:	4293      	cmp	r3, r2
 8024d38:	d01d      	beq.n	8024d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d3a:	687b      	ldr	r3, [r7, #4]
 8024d3c:	681b      	ldr	r3, [r3, #0]
 8024d3e:	4a35      	ldr	r2, [pc, #212]	; (8024e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8024d40:	4293      	cmp	r3, r2
 8024d42:	d018      	beq.n	8024d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d44:	687b      	ldr	r3, [r7, #4]
 8024d46:	681b      	ldr	r3, [r3, #0]
 8024d48:	4a33      	ldr	r2, [pc, #204]	; (8024e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8024d4a:	4293      	cmp	r3, r2
 8024d4c:	d013      	beq.n	8024d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d4e:	687b      	ldr	r3, [r7, #4]
 8024d50:	681b      	ldr	r3, [r3, #0]
 8024d52:	4a32      	ldr	r2, [pc, #200]	; (8024e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8024d54:	4293      	cmp	r3, r2
 8024d56:	d00e      	beq.n	8024d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d58:	687b      	ldr	r3, [r7, #4]
 8024d5a:	681b      	ldr	r3, [r3, #0]
 8024d5c:	4a30      	ldr	r2, [pc, #192]	; (8024e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8024d5e:	4293      	cmp	r3, r2
 8024d60:	d009      	beq.n	8024d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d62:	687b      	ldr	r3, [r7, #4]
 8024d64:	681b      	ldr	r3, [r3, #0]
 8024d66:	4a2f      	ldr	r2, [pc, #188]	; (8024e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8024d68:	4293      	cmp	r3, r2
 8024d6a:	d004      	beq.n	8024d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8024d6c:	687b      	ldr	r3, [r7, #4]
 8024d6e:	681b      	ldr	r3, [r3, #0]
 8024d70:	4a2d      	ldr	r2, [pc, #180]	; (8024e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8024d72:	4293      	cmp	r3, r2
 8024d74:	d101      	bne.n	8024d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8024d76:	2301      	movs	r3, #1
 8024d78:	e000      	b.n	8024d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8024d7a:	2300      	movs	r3, #0
 8024d7c:	2b00      	cmp	r3, #0
 8024d7e:	d01a      	beq.n	8024db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8024d80:	687b      	ldr	r3, [r7, #4]
 8024d82:	681b      	ldr	r3, [r3, #0]
 8024d84:	b2db      	uxtb	r3, r3
 8024d86:	3b08      	subs	r3, #8
 8024d88:	4a28      	ldr	r2, [pc, #160]	; (8024e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8024d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8024d8e:	091b      	lsrs	r3, r3, #4
 8024d90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8024d92:	68fa      	ldr	r2, [r7, #12]
 8024d94:	4b26      	ldr	r3, [pc, #152]	; (8024e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8024d96:	4413      	add	r3, r2
 8024d98:	009b      	lsls	r3, r3, #2
 8024d9a:	461a      	mov	r2, r3
 8024d9c:	687b      	ldr	r3, [r7, #4]
 8024d9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8024da0:	687b      	ldr	r3, [r7, #4]
 8024da2:	4a24      	ldr	r2, [pc, #144]	; (8024e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8024da4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8024da6:	68fb      	ldr	r3, [r7, #12]
 8024da8:	f003 031f 	and.w	r3, r3, #31
 8024dac:	2201      	movs	r2, #1
 8024dae:	409a      	lsls	r2, r3
 8024db0:	687b      	ldr	r3, [r7, #4]
 8024db2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8024db4:	e024      	b.n	8024e00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8024db6:	687b      	ldr	r3, [r7, #4]
 8024db8:	681b      	ldr	r3, [r3, #0]
 8024dba:	b2db      	uxtb	r3, r3
 8024dbc:	3b10      	subs	r3, #16
 8024dbe:	4a1e      	ldr	r2, [pc, #120]	; (8024e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8024dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8024dc4:	091b      	lsrs	r3, r3, #4
 8024dc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8024dc8:	68bb      	ldr	r3, [r7, #8]
 8024dca:	4a1c      	ldr	r2, [pc, #112]	; (8024e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8024dcc:	4293      	cmp	r3, r2
 8024dce:	d806      	bhi.n	8024dde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8024dd0:	68bb      	ldr	r3, [r7, #8]
 8024dd2:	4a1b      	ldr	r2, [pc, #108]	; (8024e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8024dd4:	4293      	cmp	r3, r2
 8024dd6:	d902      	bls.n	8024dde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8024dd8:	68fb      	ldr	r3, [r7, #12]
 8024dda:	3308      	adds	r3, #8
 8024ddc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8024dde:	68fa      	ldr	r2, [r7, #12]
 8024de0:	4b18      	ldr	r3, [pc, #96]	; (8024e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8024de2:	4413      	add	r3, r2
 8024de4:	009b      	lsls	r3, r3, #2
 8024de6:	461a      	mov	r2, r3
 8024de8:	687b      	ldr	r3, [r7, #4]
 8024dea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8024dec:	687b      	ldr	r3, [r7, #4]
 8024dee:	4a16      	ldr	r2, [pc, #88]	; (8024e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8024df0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8024df2:	68fb      	ldr	r3, [r7, #12]
 8024df4:	f003 031f 	and.w	r3, r3, #31
 8024df8:	2201      	movs	r2, #1
 8024dfa:	409a      	lsls	r2, r3
 8024dfc:	687b      	ldr	r3, [r7, #4]
 8024dfe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8024e00:	bf00      	nop
 8024e02:	3714      	adds	r7, #20
 8024e04:	46bd      	mov	sp, r7
 8024e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e0a:	4770      	bx	lr
 8024e0c:	58025408 	.word	0x58025408
 8024e10:	5802541c 	.word	0x5802541c
 8024e14:	58025430 	.word	0x58025430
 8024e18:	58025444 	.word	0x58025444
 8024e1c:	58025458 	.word	0x58025458
 8024e20:	5802546c 	.word	0x5802546c
 8024e24:	58025480 	.word	0x58025480
 8024e28:	58025494 	.word	0x58025494
 8024e2c:	cccccccd 	.word	0xcccccccd
 8024e30:	16009600 	.word	0x16009600
 8024e34:	58025880 	.word	0x58025880
 8024e38:	aaaaaaab 	.word	0xaaaaaaab
 8024e3c:	400204b8 	.word	0x400204b8
 8024e40:	4002040f 	.word	0x4002040f
 8024e44:	10008200 	.word	0x10008200
 8024e48:	40020880 	.word	0x40020880

08024e4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8024e4c:	b480      	push	{r7}
 8024e4e:	b085      	sub	sp, #20
 8024e50:	af00      	add	r7, sp, #0
 8024e52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8024e54:	687b      	ldr	r3, [r7, #4]
 8024e56:	685b      	ldr	r3, [r3, #4]
 8024e58:	b2db      	uxtb	r3, r3
 8024e5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8024e5c:	68fb      	ldr	r3, [r7, #12]
 8024e5e:	2b00      	cmp	r3, #0
 8024e60:	d04a      	beq.n	8024ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8024e62:	68fb      	ldr	r3, [r7, #12]
 8024e64:	2b08      	cmp	r3, #8
 8024e66:	d847      	bhi.n	8024ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8024e68:	687b      	ldr	r3, [r7, #4]
 8024e6a:	681b      	ldr	r3, [r3, #0]
 8024e6c:	4a25      	ldr	r2, [pc, #148]	; (8024f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8024e6e:	4293      	cmp	r3, r2
 8024e70:	d022      	beq.n	8024eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024e72:	687b      	ldr	r3, [r7, #4]
 8024e74:	681b      	ldr	r3, [r3, #0]
 8024e76:	4a24      	ldr	r2, [pc, #144]	; (8024f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8024e78:	4293      	cmp	r3, r2
 8024e7a:	d01d      	beq.n	8024eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024e7c:	687b      	ldr	r3, [r7, #4]
 8024e7e:	681b      	ldr	r3, [r3, #0]
 8024e80:	4a22      	ldr	r2, [pc, #136]	; (8024f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8024e82:	4293      	cmp	r3, r2
 8024e84:	d018      	beq.n	8024eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024e86:	687b      	ldr	r3, [r7, #4]
 8024e88:	681b      	ldr	r3, [r3, #0]
 8024e8a:	4a21      	ldr	r2, [pc, #132]	; (8024f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8024e8c:	4293      	cmp	r3, r2
 8024e8e:	d013      	beq.n	8024eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024e90:	687b      	ldr	r3, [r7, #4]
 8024e92:	681b      	ldr	r3, [r3, #0]
 8024e94:	4a1f      	ldr	r2, [pc, #124]	; (8024f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8024e96:	4293      	cmp	r3, r2
 8024e98:	d00e      	beq.n	8024eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024e9a:	687b      	ldr	r3, [r7, #4]
 8024e9c:	681b      	ldr	r3, [r3, #0]
 8024e9e:	4a1e      	ldr	r2, [pc, #120]	; (8024f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8024ea0:	4293      	cmp	r3, r2
 8024ea2:	d009      	beq.n	8024eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024ea4:	687b      	ldr	r3, [r7, #4]
 8024ea6:	681b      	ldr	r3, [r3, #0]
 8024ea8:	4a1c      	ldr	r2, [pc, #112]	; (8024f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8024eaa:	4293      	cmp	r3, r2
 8024eac:	d004      	beq.n	8024eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8024eae:	687b      	ldr	r3, [r7, #4]
 8024eb0:	681b      	ldr	r3, [r3, #0]
 8024eb2:	4a1b      	ldr	r2, [pc, #108]	; (8024f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8024eb4:	4293      	cmp	r3, r2
 8024eb6:	d101      	bne.n	8024ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8024eb8:	2301      	movs	r3, #1
 8024eba:	e000      	b.n	8024ebe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8024ebc:	2300      	movs	r3, #0
 8024ebe:	2b00      	cmp	r3, #0
 8024ec0:	d00a      	beq.n	8024ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8024ec2:	68fa      	ldr	r2, [r7, #12]
 8024ec4:	4b17      	ldr	r3, [pc, #92]	; (8024f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8024ec6:	4413      	add	r3, r2
 8024ec8:	009b      	lsls	r3, r3, #2
 8024eca:	461a      	mov	r2, r3
 8024ecc:	687b      	ldr	r3, [r7, #4]
 8024ece:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8024ed0:	687b      	ldr	r3, [r7, #4]
 8024ed2:	4a15      	ldr	r2, [pc, #84]	; (8024f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8024ed4:	671a      	str	r2, [r3, #112]	; 0x70
 8024ed6:	e009      	b.n	8024eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8024ed8:	68fa      	ldr	r2, [r7, #12]
 8024eda:	4b14      	ldr	r3, [pc, #80]	; (8024f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8024edc:	4413      	add	r3, r2
 8024ede:	009b      	lsls	r3, r3, #2
 8024ee0:	461a      	mov	r2, r3
 8024ee2:	687b      	ldr	r3, [r7, #4]
 8024ee4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8024ee6:	687b      	ldr	r3, [r7, #4]
 8024ee8:	4a11      	ldr	r2, [pc, #68]	; (8024f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8024eea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8024eec:	68fb      	ldr	r3, [r7, #12]
 8024eee:	3b01      	subs	r3, #1
 8024ef0:	2201      	movs	r2, #1
 8024ef2:	409a      	lsls	r2, r3
 8024ef4:	687b      	ldr	r3, [r7, #4]
 8024ef6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8024ef8:	bf00      	nop
 8024efa:	3714      	adds	r7, #20
 8024efc:	46bd      	mov	sp, r7
 8024efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f02:	4770      	bx	lr
 8024f04:	58025408 	.word	0x58025408
 8024f08:	5802541c 	.word	0x5802541c
 8024f0c:	58025430 	.word	0x58025430
 8024f10:	58025444 	.word	0x58025444
 8024f14:	58025458 	.word	0x58025458
 8024f18:	5802546c 	.word	0x5802546c
 8024f1c:	58025480 	.word	0x58025480
 8024f20:	58025494 	.word	0x58025494
 8024f24:	1600963f 	.word	0x1600963f
 8024f28:	58025940 	.word	0x58025940
 8024f2c:	1000823f 	.word	0x1000823f
 8024f30:	40020940 	.word	0x40020940

08024f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8024f34:	b480      	push	{r7}
 8024f36:	b089      	sub	sp, #36	; 0x24
 8024f38:	af00      	add	r7, sp, #0
 8024f3a:	6078      	str	r0, [r7, #4]
 8024f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8024f3e:	2300      	movs	r3, #0
 8024f40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8024f42:	4b86      	ldr	r3, [pc, #536]	; (802515c <HAL_GPIO_Init+0x228>)
 8024f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8024f46:	e18c      	b.n	8025262 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8024f48:	683b      	ldr	r3, [r7, #0]
 8024f4a:	681a      	ldr	r2, [r3, #0]
 8024f4c:	2101      	movs	r1, #1
 8024f4e:	69fb      	ldr	r3, [r7, #28]
 8024f50:	fa01 f303 	lsl.w	r3, r1, r3
 8024f54:	4013      	ands	r3, r2
 8024f56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8024f58:	693b      	ldr	r3, [r7, #16]
 8024f5a:	2b00      	cmp	r3, #0
 8024f5c:	f000 817e 	beq.w	802525c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8024f60:	683b      	ldr	r3, [r7, #0]
 8024f62:	685b      	ldr	r3, [r3, #4]
 8024f64:	f003 0303 	and.w	r3, r3, #3
 8024f68:	2b01      	cmp	r3, #1
 8024f6a:	d005      	beq.n	8024f78 <HAL_GPIO_Init+0x44>
 8024f6c:	683b      	ldr	r3, [r7, #0]
 8024f6e:	685b      	ldr	r3, [r3, #4]
 8024f70:	f003 0303 	and.w	r3, r3, #3
 8024f74:	2b02      	cmp	r3, #2
 8024f76:	d130      	bne.n	8024fda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8024f78:	687b      	ldr	r3, [r7, #4]
 8024f7a:	689b      	ldr	r3, [r3, #8]
 8024f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8024f7e:	69fb      	ldr	r3, [r7, #28]
 8024f80:	005b      	lsls	r3, r3, #1
 8024f82:	2203      	movs	r2, #3
 8024f84:	fa02 f303 	lsl.w	r3, r2, r3
 8024f88:	43db      	mvns	r3, r3
 8024f8a:	69ba      	ldr	r2, [r7, #24]
 8024f8c:	4013      	ands	r3, r2
 8024f8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8024f90:	683b      	ldr	r3, [r7, #0]
 8024f92:	68da      	ldr	r2, [r3, #12]
 8024f94:	69fb      	ldr	r3, [r7, #28]
 8024f96:	005b      	lsls	r3, r3, #1
 8024f98:	fa02 f303 	lsl.w	r3, r2, r3
 8024f9c:	69ba      	ldr	r2, [r7, #24]
 8024f9e:	4313      	orrs	r3, r2
 8024fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024fa2:	687b      	ldr	r3, [r7, #4]
 8024fa4:	69ba      	ldr	r2, [r7, #24]
 8024fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8024fa8:	687b      	ldr	r3, [r7, #4]
 8024faa:	685b      	ldr	r3, [r3, #4]
 8024fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8024fae:	2201      	movs	r2, #1
 8024fb0:	69fb      	ldr	r3, [r7, #28]
 8024fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8024fb6:	43db      	mvns	r3, r3
 8024fb8:	69ba      	ldr	r2, [r7, #24]
 8024fba:	4013      	ands	r3, r2
 8024fbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8024fbe:	683b      	ldr	r3, [r7, #0]
 8024fc0:	685b      	ldr	r3, [r3, #4]
 8024fc2:	091b      	lsrs	r3, r3, #4
 8024fc4:	f003 0201 	and.w	r2, r3, #1
 8024fc8:	69fb      	ldr	r3, [r7, #28]
 8024fca:	fa02 f303 	lsl.w	r3, r2, r3
 8024fce:	69ba      	ldr	r2, [r7, #24]
 8024fd0:	4313      	orrs	r3, r2
 8024fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8024fd4:	687b      	ldr	r3, [r7, #4]
 8024fd6:	69ba      	ldr	r2, [r7, #24]
 8024fd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8024fda:	683b      	ldr	r3, [r7, #0]
 8024fdc:	685b      	ldr	r3, [r3, #4]
 8024fde:	f003 0303 	and.w	r3, r3, #3
 8024fe2:	2b03      	cmp	r3, #3
 8024fe4:	d017      	beq.n	8025016 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8024fe6:	687b      	ldr	r3, [r7, #4]
 8024fe8:	68db      	ldr	r3, [r3, #12]
 8024fea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8024fec:	69fb      	ldr	r3, [r7, #28]
 8024fee:	005b      	lsls	r3, r3, #1
 8024ff0:	2203      	movs	r2, #3
 8024ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8024ff6:	43db      	mvns	r3, r3
 8024ff8:	69ba      	ldr	r2, [r7, #24]
 8024ffa:	4013      	ands	r3, r2
 8024ffc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8024ffe:	683b      	ldr	r3, [r7, #0]
 8025000:	689a      	ldr	r2, [r3, #8]
 8025002:	69fb      	ldr	r3, [r7, #28]
 8025004:	005b      	lsls	r3, r3, #1
 8025006:	fa02 f303 	lsl.w	r3, r2, r3
 802500a:	69ba      	ldr	r2, [r7, #24]
 802500c:	4313      	orrs	r3, r2
 802500e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8025010:	687b      	ldr	r3, [r7, #4]
 8025012:	69ba      	ldr	r2, [r7, #24]
 8025014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8025016:	683b      	ldr	r3, [r7, #0]
 8025018:	685b      	ldr	r3, [r3, #4]
 802501a:	f003 0303 	and.w	r3, r3, #3
 802501e:	2b02      	cmp	r3, #2
 8025020:	d123      	bne.n	802506a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8025022:	69fb      	ldr	r3, [r7, #28]
 8025024:	08da      	lsrs	r2, r3, #3
 8025026:	687b      	ldr	r3, [r7, #4]
 8025028:	3208      	adds	r2, #8
 802502a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802502e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8025030:	69fb      	ldr	r3, [r7, #28]
 8025032:	f003 0307 	and.w	r3, r3, #7
 8025036:	009b      	lsls	r3, r3, #2
 8025038:	220f      	movs	r2, #15
 802503a:	fa02 f303 	lsl.w	r3, r2, r3
 802503e:	43db      	mvns	r3, r3
 8025040:	69ba      	ldr	r2, [r7, #24]
 8025042:	4013      	ands	r3, r2
 8025044:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8025046:	683b      	ldr	r3, [r7, #0]
 8025048:	691a      	ldr	r2, [r3, #16]
 802504a:	69fb      	ldr	r3, [r7, #28]
 802504c:	f003 0307 	and.w	r3, r3, #7
 8025050:	009b      	lsls	r3, r3, #2
 8025052:	fa02 f303 	lsl.w	r3, r2, r3
 8025056:	69ba      	ldr	r2, [r7, #24]
 8025058:	4313      	orrs	r3, r2
 802505a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802505c:	69fb      	ldr	r3, [r7, #28]
 802505e:	08da      	lsrs	r2, r3, #3
 8025060:	687b      	ldr	r3, [r7, #4]
 8025062:	3208      	adds	r2, #8
 8025064:	69b9      	ldr	r1, [r7, #24]
 8025066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802506a:	687b      	ldr	r3, [r7, #4]
 802506c:	681b      	ldr	r3, [r3, #0]
 802506e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8025070:	69fb      	ldr	r3, [r7, #28]
 8025072:	005b      	lsls	r3, r3, #1
 8025074:	2203      	movs	r2, #3
 8025076:	fa02 f303 	lsl.w	r3, r2, r3
 802507a:	43db      	mvns	r3, r3
 802507c:	69ba      	ldr	r2, [r7, #24]
 802507e:	4013      	ands	r3, r2
 8025080:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8025082:	683b      	ldr	r3, [r7, #0]
 8025084:	685b      	ldr	r3, [r3, #4]
 8025086:	f003 0203 	and.w	r2, r3, #3
 802508a:	69fb      	ldr	r3, [r7, #28]
 802508c:	005b      	lsls	r3, r3, #1
 802508e:	fa02 f303 	lsl.w	r3, r2, r3
 8025092:	69ba      	ldr	r2, [r7, #24]
 8025094:	4313      	orrs	r3, r2
 8025096:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8025098:	687b      	ldr	r3, [r7, #4]
 802509a:	69ba      	ldr	r2, [r7, #24]
 802509c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802509e:	683b      	ldr	r3, [r7, #0]
 80250a0:	685b      	ldr	r3, [r3, #4]
 80250a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80250a6:	2b00      	cmp	r3, #0
 80250a8:	f000 80d8 	beq.w	802525c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80250ac:	4b2c      	ldr	r3, [pc, #176]	; (8025160 <HAL_GPIO_Init+0x22c>)
 80250ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80250b2:	4a2b      	ldr	r2, [pc, #172]	; (8025160 <HAL_GPIO_Init+0x22c>)
 80250b4:	f043 0302 	orr.w	r3, r3, #2
 80250b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80250bc:	4b28      	ldr	r3, [pc, #160]	; (8025160 <HAL_GPIO_Init+0x22c>)
 80250be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80250c2:	f003 0302 	and.w	r3, r3, #2
 80250c6:	60fb      	str	r3, [r7, #12]
 80250c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80250ca:	4a26      	ldr	r2, [pc, #152]	; (8025164 <HAL_GPIO_Init+0x230>)
 80250cc:	69fb      	ldr	r3, [r7, #28]
 80250ce:	089b      	lsrs	r3, r3, #2
 80250d0:	3302      	adds	r3, #2
 80250d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80250d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80250d8:	69fb      	ldr	r3, [r7, #28]
 80250da:	f003 0303 	and.w	r3, r3, #3
 80250de:	009b      	lsls	r3, r3, #2
 80250e0:	220f      	movs	r2, #15
 80250e2:	fa02 f303 	lsl.w	r3, r2, r3
 80250e6:	43db      	mvns	r3, r3
 80250e8:	69ba      	ldr	r2, [r7, #24]
 80250ea:	4013      	ands	r3, r2
 80250ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80250ee:	687b      	ldr	r3, [r7, #4]
 80250f0:	4a1d      	ldr	r2, [pc, #116]	; (8025168 <HAL_GPIO_Init+0x234>)
 80250f2:	4293      	cmp	r3, r2
 80250f4:	d04a      	beq.n	802518c <HAL_GPIO_Init+0x258>
 80250f6:	687b      	ldr	r3, [r7, #4]
 80250f8:	4a1c      	ldr	r2, [pc, #112]	; (802516c <HAL_GPIO_Init+0x238>)
 80250fa:	4293      	cmp	r3, r2
 80250fc:	d02b      	beq.n	8025156 <HAL_GPIO_Init+0x222>
 80250fe:	687b      	ldr	r3, [r7, #4]
 8025100:	4a1b      	ldr	r2, [pc, #108]	; (8025170 <HAL_GPIO_Init+0x23c>)
 8025102:	4293      	cmp	r3, r2
 8025104:	d025      	beq.n	8025152 <HAL_GPIO_Init+0x21e>
 8025106:	687b      	ldr	r3, [r7, #4]
 8025108:	4a1a      	ldr	r2, [pc, #104]	; (8025174 <HAL_GPIO_Init+0x240>)
 802510a:	4293      	cmp	r3, r2
 802510c:	d01f      	beq.n	802514e <HAL_GPIO_Init+0x21a>
 802510e:	687b      	ldr	r3, [r7, #4]
 8025110:	4a19      	ldr	r2, [pc, #100]	; (8025178 <HAL_GPIO_Init+0x244>)
 8025112:	4293      	cmp	r3, r2
 8025114:	d019      	beq.n	802514a <HAL_GPIO_Init+0x216>
 8025116:	687b      	ldr	r3, [r7, #4]
 8025118:	4a18      	ldr	r2, [pc, #96]	; (802517c <HAL_GPIO_Init+0x248>)
 802511a:	4293      	cmp	r3, r2
 802511c:	d013      	beq.n	8025146 <HAL_GPIO_Init+0x212>
 802511e:	687b      	ldr	r3, [r7, #4]
 8025120:	4a17      	ldr	r2, [pc, #92]	; (8025180 <HAL_GPIO_Init+0x24c>)
 8025122:	4293      	cmp	r3, r2
 8025124:	d00d      	beq.n	8025142 <HAL_GPIO_Init+0x20e>
 8025126:	687b      	ldr	r3, [r7, #4]
 8025128:	4a16      	ldr	r2, [pc, #88]	; (8025184 <HAL_GPIO_Init+0x250>)
 802512a:	4293      	cmp	r3, r2
 802512c:	d007      	beq.n	802513e <HAL_GPIO_Init+0x20a>
 802512e:	687b      	ldr	r3, [r7, #4]
 8025130:	4a15      	ldr	r2, [pc, #84]	; (8025188 <HAL_GPIO_Init+0x254>)
 8025132:	4293      	cmp	r3, r2
 8025134:	d101      	bne.n	802513a <HAL_GPIO_Init+0x206>
 8025136:	2309      	movs	r3, #9
 8025138:	e029      	b.n	802518e <HAL_GPIO_Init+0x25a>
 802513a:	230a      	movs	r3, #10
 802513c:	e027      	b.n	802518e <HAL_GPIO_Init+0x25a>
 802513e:	2307      	movs	r3, #7
 8025140:	e025      	b.n	802518e <HAL_GPIO_Init+0x25a>
 8025142:	2306      	movs	r3, #6
 8025144:	e023      	b.n	802518e <HAL_GPIO_Init+0x25a>
 8025146:	2305      	movs	r3, #5
 8025148:	e021      	b.n	802518e <HAL_GPIO_Init+0x25a>
 802514a:	2304      	movs	r3, #4
 802514c:	e01f      	b.n	802518e <HAL_GPIO_Init+0x25a>
 802514e:	2303      	movs	r3, #3
 8025150:	e01d      	b.n	802518e <HAL_GPIO_Init+0x25a>
 8025152:	2302      	movs	r3, #2
 8025154:	e01b      	b.n	802518e <HAL_GPIO_Init+0x25a>
 8025156:	2301      	movs	r3, #1
 8025158:	e019      	b.n	802518e <HAL_GPIO_Init+0x25a>
 802515a:	bf00      	nop
 802515c:	58000080 	.word	0x58000080
 8025160:	58024400 	.word	0x58024400
 8025164:	58000400 	.word	0x58000400
 8025168:	58020000 	.word	0x58020000
 802516c:	58020400 	.word	0x58020400
 8025170:	58020800 	.word	0x58020800
 8025174:	58020c00 	.word	0x58020c00
 8025178:	58021000 	.word	0x58021000
 802517c:	58021400 	.word	0x58021400
 8025180:	58021800 	.word	0x58021800
 8025184:	58021c00 	.word	0x58021c00
 8025188:	58022400 	.word	0x58022400
 802518c:	2300      	movs	r3, #0
 802518e:	69fa      	ldr	r2, [r7, #28]
 8025190:	f002 0203 	and.w	r2, r2, #3
 8025194:	0092      	lsls	r2, r2, #2
 8025196:	4093      	lsls	r3, r2
 8025198:	69ba      	ldr	r2, [r7, #24]
 802519a:	4313      	orrs	r3, r2
 802519c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802519e:	4938      	ldr	r1, [pc, #224]	; (8025280 <HAL_GPIO_Init+0x34c>)
 80251a0:	69fb      	ldr	r3, [r7, #28]
 80251a2:	089b      	lsrs	r3, r3, #2
 80251a4:	3302      	adds	r3, #2
 80251a6:	69ba      	ldr	r2, [r7, #24]
 80251a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80251ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80251b0:	681b      	ldr	r3, [r3, #0]
 80251b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80251b4:	693b      	ldr	r3, [r7, #16]
 80251b6:	43db      	mvns	r3, r3
 80251b8:	69ba      	ldr	r2, [r7, #24]
 80251ba:	4013      	ands	r3, r2
 80251bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80251be:	683b      	ldr	r3, [r7, #0]
 80251c0:	685b      	ldr	r3, [r3, #4]
 80251c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80251c6:	2b00      	cmp	r3, #0
 80251c8:	d003      	beq.n	80251d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80251ca:	69ba      	ldr	r2, [r7, #24]
 80251cc:	693b      	ldr	r3, [r7, #16]
 80251ce:	4313      	orrs	r3, r2
 80251d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80251d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80251d6:	69bb      	ldr	r3, [r7, #24]
 80251d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80251da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80251de:	685b      	ldr	r3, [r3, #4]
 80251e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80251e2:	693b      	ldr	r3, [r7, #16]
 80251e4:	43db      	mvns	r3, r3
 80251e6:	69ba      	ldr	r2, [r7, #24]
 80251e8:	4013      	ands	r3, r2
 80251ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80251ec:	683b      	ldr	r3, [r7, #0]
 80251ee:	685b      	ldr	r3, [r3, #4]
 80251f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80251f4:	2b00      	cmp	r3, #0
 80251f6:	d003      	beq.n	8025200 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80251f8:	69ba      	ldr	r2, [r7, #24]
 80251fa:	693b      	ldr	r3, [r7, #16]
 80251fc:	4313      	orrs	r3, r2
 80251fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8025200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8025204:	69bb      	ldr	r3, [r7, #24]
 8025206:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8025208:	697b      	ldr	r3, [r7, #20]
 802520a:	685b      	ldr	r3, [r3, #4]
 802520c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802520e:	693b      	ldr	r3, [r7, #16]
 8025210:	43db      	mvns	r3, r3
 8025212:	69ba      	ldr	r2, [r7, #24]
 8025214:	4013      	ands	r3, r2
 8025216:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8025218:	683b      	ldr	r3, [r7, #0]
 802521a:	685b      	ldr	r3, [r3, #4]
 802521c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025220:	2b00      	cmp	r3, #0
 8025222:	d003      	beq.n	802522c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8025224:	69ba      	ldr	r2, [r7, #24]
 8025226:	693b      	ldr	r3, [r7, #16]
 8025228:	4313      	orrs	r3, r2
 802522a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 802522c:	697b      	ldr	r3, [r7, #20]
 802522e:	69ba      	ldr	r2, [r7, #24]
 8025230:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8025232:	697b      	ldr	r3, [r7, #20]
 8025234:	681b      	ldr	r3, [r3, #0]
 8025236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8025238:	693b      	ldr	r3, [r7, #16]
 802523a:	43db      	mvns	r3, r3
 802523c:	69ba      	ldr	r2, [r7, #24]
 802523e:	4013      	ands	r3, r2
 8025240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8025242:	683b      	ldr	r3, [r7, #0]
 8025244:	685b      	ldr	r3, [r3, #4]
 8025246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802524a:	2b00      	cmp	r3, #0
 802524c:	d003      	beq.n	8025256 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 802524e:	69ba      	ldr	r2, [r7, #24]
 8025250:	693b      	ldr	r3, [r7, #16]
 8025252:	4313      	orrs	r3, r2
 8025254:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8025256:	697b      	ldr	r3, [r7, #20]
 8025258:	69ba      	ldr	r2, [r7, #24]
 802525a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 802525c:	69fb      	ldr	r3, [r7, #28]
 802525e:	3301      	adds	r3, #1
 8025260:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8025262:	683b      	ldr	r3, [r7, #0]
 8025264:	681a      	ldr	r2, [r3, #0]
 8025266:	69fb      	ldr	r3, [r7, #28]
 8025268:	fa22 f303 	lsr.w	r3, r2, r3
 802526c:	2b00      	cmp	r3, #0
 802526e:	f47f ae6b 	bne.w	8024f48 <HAL_GPIO_Init+0x14>
  }
}
 8025272:	bf00      	nop
 8025274:	bf00      	nop
 8025276:	3724      	adds	r7, #36	; 0x24
 8025278:	46bd      	mov	sp, r7
 802527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802527e:	4770      	bx	lr
 8025280:	58000400 	.word	0x58000400

08025284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8025284:	b480      	push	{r7}
 8025286:	b083      	sub	sp, #12
 8025288:	af00      	add	r7, sp, #0
 802528a:	6078      	str	r0, [r7, #4]
 802528c:	460b      	mov	r3, r1
 802528e:	807b      	strh	r3, [r7, #2]
 8025290:	4613      	mov	r3, r2
 8025292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8025294:	787b      	ldrb	r3, [r7, #1]
 8025296:	2b00      	cmp	r3, #0
 8025298:	d003      	beq.n	80252a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802529a:	887a      	ldrh	r2, [r7, #2]
 802529c:	687b      	ldr	r3, [r7, #4]
 802529e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80252a0:	e003      	b.n	80252aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80252a2:	887b      	ldrh	r3, [r7, #2]
 80252a4:	041a      	lsls	r2, r3, #16
 80252a6:	687b      	ldr	r3, [r7, #4]
 80252a8:	619a      	str	r2, [r3, #24]
}
 80252aa:	bf00      	nop
 80252ac:	370c      	adds	r7, #12
 80252ae:	46bd      	mov	sp, r7
 80252b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252b4:	4770      	bx	lr

080252b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80252b6:	b480      	push	{r7}
 80252b8:	b085      	sub	sp, #20
 80252ba:	af00      	add	r7, sp, #0
 80252bc:	6078      	str	r0, [r7, #4]
 80252be:	460b      	mov	r3, r1
 80252c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80252c2:	687b      	ldr	r3, [r7, #4]
 80252c4:	695b      	ldr	r3, [r3, #20]
 80252c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80252c8:	887a      	ldrh	r2, [r7, #2]
 80252ca:	68fb      	ldr	r3, [r7, #12]
 80252cc:	4013      	ands	r3, r2
 80252ce:	041a      	lsls	r2, r3, #16
 80252d0:	68fb      	ldr	r3, [r7, #12]
 80252d2:	43d9      	mvns	r1, r3
 80252d4:	887b      	ldrh	r3, [r7, #2]
 80252d6:	400b      	ands	r3, r1
 80252d8:	431a      	orrs	r2, r3
 80252da:	687b      	ldr	r3, [r7, #4]
 80252dc:	619a      	str	r2, [r3, #24]
}
 80252de:	bf00      	nop
 80252e0:	3714      	adds	r7, #20
 80252e2:	46bd      	mov	sp, r7
 80252e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252e8:	4770      	bx	lr

080252ea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80252ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80252ec:	b08f      	sub	sp, #60	; 0x3c
 80252ee:	af0a      	add	r7, sp, #40	; 0x28
 80252f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80252f2:	687b      	ldr	r3, [r7, #4]
 80252f4:	2b00      	cmp	r3, #0
 80252f6:	d101      	bne.n	80252fc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80252f8:	2301      	movs	r3, #1
 80252fa:	e054      	b.n	80253a6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80252fc:	687b      	ldr	r3, [r7, #4]
 80252fe:	681b      	ldr	r3, [r3, #0]
 8025300:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8025302:	687b      	ldr	r3, [r7, #4]
 8025304:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8025308:	b2db      	uxtb	r3, r3
 802530a:	2b00      	cmp	r3, #0
 802530c:	d106      	bne.n	802531c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 802530e:	687b      	ldr	r3, [r7, #4]
 8025310:	2200      	movs	r2, #0
 8025312:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8025316:	6878      	ldr	r0, [r7, #4]
 8025318:	f014 fa98 	bl	803984c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 802531c:	687b      	ldr	r3, [r7, #4]
 802531e:	2203      	movs	r2, #3
 8025320:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8025324:	68fb      	ldr	r3, [r7, #12]
 8025326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802532c:	2b00      	cmp	r3, #0
 802532e:	d102      	bne.n	8025336 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8025330:	687b      	ldr	r3, [r7, #4]
 8025332:	2200      	movs	r2, #0
 8025334:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8025336:	687b      	ldr	r3, [r7, #4]
 8025338:	681b      	ldr	r3, [r3, #0]
 802533a:	4618      	mov	r0, r3
 802533c:	f006 fb53 	bl	802b9e6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8025340:	687b      	ldr	r3, [r7, #4]
 8025342:	681b      	ldr	r3, [r3, #0]
 8025344:	603b      	str	r3, [r7, #0]
 8025346:	687e      	ldr	r6, [r7, #4]
 8025348:	466d      	mov	r5, sp
 802534a:	f106 0410 	add.w	r4, r6, #16
 802534e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025356:	e894 0003 	ldmia.w	r4, {r0, r1}
 802535a:	e885 0003 	stmia.w	r5, {r0, r1}
 802535e:	1d33      	adds	r3, r6, #4
 8025360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025362:	6838      	ldr	r0, [r7, #0]
 8025364:	f006 fac0 	bl	802b8e8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8025368:	687b      	ldr	r3, [r7, #4]
 802536a:	681b      	ldr	r3, [r3, #0]
 802536c:	2101      	movs	r1, #1
 802536e:	4618      	mov	r0, r3
 8025370:	f006 fb4a 	bl	802ba08 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8025374:	687b      	ldr	r3, [r7, #4]
 8025376:	681b      	ldr	r3, [r3, #0]
 8025378:	603b      	str	r3, [r7, #0]
 802537a:	687e      	ldr	r6, [r7, #4]
 802537c:	466d      	mov	r5, sp
 802537e:	f106 0410 	add.w	r4, r6, #16
 8025382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802538a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802538e:	e885 0003 	stmia.w	r5, {r0, r1}
 8025392:	1d33      	adds	r3, r6, #4
 8025394:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025396:	6838      	ldr	r0, [r7, #0]
 8025398:	f006 fcd2 	bl	802bd40 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 802539c:	687b      	ldr	r3, [r7, #4]
 802539e:	2201      	movs	r2, #1
 80253a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80253a4:	2300      	movs	r3, #0
}
 80253a6:	4618      	mov	r0, r3
 80253a8:	3714      	adds	r7, #20
 80253aa:	46bd      	mov	sp, r7
 80253ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080253ae <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80253ae:	b590      	push	{r4, r7, lr}
 80253b0:	b089      	sub	sp, #36	; 0x24
 80253b2:	af04      	add	r7, sp, #16
 80253b4:	6078      	str	r0, [r7, #4]
 80253b6:	4608      	mov	r0, r1
 80253b8:	4611      	mov	r1, r2
 80253ba:	461a      	mov	r2, r3
 80253bc:	4603      	mov	r3, r0
 80253be:	70fb      	strb	r3, [r7, #3]
 80253c0:	460b      	mov	r3, r1
 80253c2:	70bb      	strb	r3, [r7, #2]
 80253c4:	4613      	mov	r3, r2
 80253c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80253c8:	687b      	ldr	r3, [r7, #4]
 80253ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80253ce:	2b01      	cmp	r3, #1
 80253d0:	d101      	bne.n	80253d6 <HAL_HCD_HC_Init+0x28>
 80253d2:	2302      	movs	r3, #2
 80253d4:	e076      	b.n	80254c4 <HAL_HCD_HC_Init+0x116>
 80253d6:	687b      	ldr	r3, [r7, #4]
 80253d8:	2201      	movs	r2, #1
 80253da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80253de:	78fb      	ldrb	r3, [r7, #3]
 80253e0:	687a      	ldr	r2, [r7, #4]
 80253e2:	212c      	movs	r1, #44	; 0x2c
 80253e4:	fb01 f303 	mul.w	r3, r1, r3
 80253e8:	4413      	add	r3, r2
 80253ea:	333d      	adds	r3, #61	; 0x3d
 80253ec:	2200      	movs	r2, #0
 80253ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80253f0:	78fb      	ldrb	r3, [r7, #3]
 80253f2:	687a      	ldr	r2, [r7, #4]
 80253f4:	212c      	movs	r1, #44	; 0x2c
 80253f6:	fb01 f303 	mul.w	r3, r1, r3
 80253fa:	4413      	add	r3, r2
 80253fc:	3338      	adds	r3, #56	; 0x38
 80253fe:	787a      	ldrb	r2, [r7, #1]
 8025400:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8025402:	78fb      	ldrb	r3, [r7, #3]
 8025404:	687a      	ldr	r2, [r7, #4]
 8025406:	212c      	movs	r1, #44	; 0x2c
 8025408:	fb01 f303 	mul.w	r3, r1, r3
 802540c:	4413      	add	r3, r2
 802540e:	3340      	adds	r3, #64	; 0x40
 8025410:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8025412:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8025414:	78fb      	ldrb	r3, [r7, #3]
 8025416:	687a      	ldr	r2, [r7, #4]
 8025418:	212c      	movs	r1, #44	; 0x2c
 802541a:	fb01 f303 	mul.w	r3, r1, r3
 802541e:	4413      	add	r3, r2
 8025420:	3339      	adds	r3, #57	; 0x39
 8025422:	78fa      	ldrb	r2, [r7, #3]
 8025424:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8025426:	78fb      	ldrb	r3, [r7, #3]
 8025428:	687a      	ldr	r2, [r7, #4]
 802542a:	212c      	movs	r1, #44	; 0x2c
 802542c:	fb01 f303 	mul.w	r3, r1, r3
 8025430:	4413      	add	r3, r2
 8025432:	333f      	adds	r3, #63	; 0x3f
 8025434:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8025438:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 802543a:	78fb      	ldrb	r3, [r7, #3]
 802543c:	78ba      	ldrb	r2, [r7, #2]
 802543e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8025442:	b2d0      	uxtb	r0, r2
 8025444:	687a      	ldr	r2, [r7, #4]
 8025446:	212c      	movs	r1, #44	; 0x2c
 8025448:	fb01 f303 	mul.w	r3, r1, r3
 802544c:	4413      	add	r3, r2
 802544e:	333a      	adds	r3, #58	; 0x3a
 8025450:	4602      	mov	r2, r0
 8025452:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8025454:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8025458:	2b00      	cmp	r3, #0
 802545a:	da09      	bge.n	8025470 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 802545c:	78fb      	ldrb	r3, [r7, #3]
 802545e:	687a      	ldr	r2, [r7, #4]
 8025460:	212c      	movs	r1, #44	; 0x2c
 8025462:	fb01 f303 	mul.w	r3, r1, r3
 8025466:	4413      	add	r3, r2
 8025468:	333b      	adds	r3, #59	; 0x3b
 802546a:	2201      	movs	r2, #1
 802546c:	701a      	strb	r2, [r3, #0]
 802546e:	e008      	b.n	8025482 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8025470:	78fb      	ldrb	r3, [r7, #3]
 8025472:	687a      	ldr	r2, [r7, #4]
 8025474:	212c      	movs	r1, #44	; 0x2c
 8025476:	fb01 f303 	mul.w	r3, r1, r3
 802547a:	4413      	add	r3, r2
 802547c:	333b      	adds	r3, #59	; 0x3b
 802547e:	2200      	movs	r2, #0
 8025480:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8025482:	78fb      	ldrb	r3, [r7, #3]
 8025484:	687a      	ldr	r2, [r7, #4]
 8025486:	212c      	movs	r1, #44	; 0x2c
 8025488:	fb01 f303 	mul.w	r3, r1, r3
 802548c:	4413      	add	r3, r2
 802548e:	333c      	adds	r3, #60	; 0x3c
 8025490:	f897 2020 	ldrb.w	r2, [r7, #32]
 8025494:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8025496:	687b      	ldr	r3, [r7, #4]
 8025498:	6818      	ldr	r0, [r3, #0]
 802549a:	787c      	ldrb	r4, [r7, #1]
 802549c:	78ba      	ldrb	r2, [r7, #2]
 802549e:	78f9      	ldrb	r1, [r7, #3]
 80254a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80254a2:	9302      	str	r3, [sp, #8]
 80254a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80254a8:	9301      	str	r3, [sp, #4]
 80254aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80254ae:	9300      	str	r3, [sp, #0]
 80254b0:	4623      	mov	r3, r4
 80254b2:	f006 fdc5 	bl	802c040 <USB_HC_Init>
 80254b6:	4603      	mov	r3, r0
 80254b8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80254ba:	687b      	ldr	r3, [r7, #4]
 80254bc:	2200      	movs	r2, #0
 80254be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80254c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80254c4:	4618      	mov	r0, r3
 80254c6:	3714      	adds	r7, #20
 80254c8:	46bd      	mov	sp, r7
 80254ca:	bd90      	pop	{r4, r7, pc}

080254cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80254cc:	b580      	push	{r7, lr}
 80254ce:	b084      	sub	sp, #16
 80254d0:	af00      	add	r7, sp, #0
 80254d2:	6078      	str	r0, [r7, #4]
 80254d4:	460b      	mov	r3, r1
 80254d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80254d8:	2300      	movs	r3, #0
 80254da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80254dc:	687b      	ldr	r3, [r7, #4]
 80254de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80254e2:	2b01      	cmp	r3, #1
 80254e4:	d101      	bne.n	80254ea <HAL_HCD_HC_Halt+0x1e>
 80254e6:	2302      	movs	r3, #2
 80254e8:	e00f      	b.n	802550a <HAL_HCD_HC_Halt+0x3e>
 80254ea:	687b      	ldr	r3, [r7, #4]
 80254ec:	2201      	movs	r2, #1
 80254ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80254f2:	687b      	ldr	r3, [r7, #4]
 80254f4:	681b      	ldr	r3, [r3, #0]
 80254f6:	78fa      	ldrb	r2, [r7, #3]
 80254f8:	4611      	mov	r1, r2
 80254fa:	4618      	mov	r0, r3
 80254fc:	f007 f815 	bl	802c52a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8025500:	687b      	ldr	r3, [r7, #4]
 8025502:	2200      	movs	r2, #0
 8025504:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8025508:	7bfb      	ldrb	r3, [r7, #15]
}
 802550a:	4618      	mov	r0, r3
 802550c:	3710      	adds	r7, #16
 802550e:	46bd      	mov	sp, r7
 8025510:	bd80      	pop	{r7, pc}
	...

08025514 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8025514:	b580      	push	{r7, lr}
 8025516:	b082      	sub	sp, #8
 8025518:	af00      	add	r7, sp, #0
 802551a:	6078      	str	r0, [r7, #4]
 802551c:	4608      	mov	r0, r1
 802551e:	4611      	mov	r1, r2
 8025520:	461a      	mov	r2, r3
 8025522:	4603      	mov	r3, r0
 8025524:	70fb      	strb	r3, [r7, #3]
 8025526:	460b      	mov	r3, r1
 8025528:	70bb      	strb	r3, [r7, #2]
 802552a:	4613      	mov	r3, r2
 802552c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 802552e:	78fb      	ldrb	r3, [r7, #3]
 8025530:	687a      	ldr	r2, [r7, #4]
 8025532:	212c      	movs	r1, #44	; 0x2c
 8025534:	fb01 f303 	mul.w	r3, r1, r3
 8025538:	4413      	add	r3, r2
 802553a:	333b      	adds	r3, #59	; 0x3b
 802553c:	78ba      	ldrb	r2, [r7, #2]
 802553e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8025540:	78fb      	ldrb	r3, [r7, #3]
 8025542:	687a      	ldr	r2, [r7, #4]
 8025544:	212c      	movs	r1, #44	; 0x2c
 8025546:	fb01 f303 	mul.w	r3, r1, r3
 802554a:	4413      	add	r3, r2
 802554c:	333f      	adds	r3, #63	; 0x3f
 802554e:	787a      	ldrb	r2, [r7, #1]
 8025550:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8025552:	7c3b      	ldrb	r3, [r7, #16]
 8025554:	2b00      	cmp	r3, #0
 8025556:	d112      	bne.n	802557e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8025558:	78fb      	ldrb	r3, [r7, #3]
 802555a:	687a      	ldr	r2, [r7, #4]
 802555c:	212c      	movs	r1, #44	; 0x2c
 802555e:	fb01 f303 	mul.w	r3, r1, r3
 8025562:	4413      	add	r3, r2
 8025564:	3342      	adds	r3, #66	; 0x42
 8025566:	2203      	movs	r2, #3
 8025568:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 802556a:	78fb      	ldrb	r3, [r7, #3]
 802556c:	687a      	ldr	r2, [r7, #4]
 802556e:	212c      	movs	r1, #44	; 0x2c
 8025570:	fb01 f303 	mul.w	r3, r1, r3
 8025574:	4413      	add	r3, r2
 8025576:	333d      	adds	r3, #61	; 0x3d
 8025578:	7f3a      	ldrb	r2, [r7, #28]
 802557a:	701a      	strb	r2, [r3, #0]
 802557c:	e008      	b.n	8025590 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802557e:	78fb      	ldrb	r3, [r7, #3]
 8025580:	687a      	ldr	r2, [r7, #4]
 8025582:	212c      	movs	r1, #44	; 0x2c
 8025584:	fb01 f303 	mul.w	r3, r1, r3
 8025588:	4413      	add	r3, r2
 802558a:	3342      	adds	r3, #66	; 0x42
 802558c:	2202      	movs	r2, #2
 802558e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8025590:	787b      	ldrb	r3, [r7, #1]
 8025592:	2b03      	cmp	r3, #3
 8025594:	f200 80c6 	bhi.w	8025724 <HAL_HCD_HC_SubmitRequest+0x210>
 8025598:	a201      	add	r2, pc, #4	; (adr r2, 80255a0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 802559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802559e:	bf00      	nop
 80255a0:	080255b1 	.word	0x080255b1
 80255a4:	08025711 	.word	0x08025711
 80255a8:	08025615 	.word	0x08025615
 80255ac:	08025693 	.word	0x08025693
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80255b0:	7c3b      	ldrb	r3, [r7, #16]
 80255b2:	2b01      	cmp	r3, #1
 80255b4:	f040 80b8 	bne.w	8025728 <HAL_HCD_HC_SubmitRequest+0x214>
 80255b8:	78bb      	ldrb	r3, [r7, #2]
 80255ba:	2b00      	cmp	r3, #0
 80255bc:	f040 80b4 	bne.w	8025728 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80255c0:	8b3b      	ldrh	r3, [r7, #24]
 80255c2:	2b00      	cmp	r3, #0
 80255c4:	d108      	bne.n	80255d8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80255c6:	78fb      	ldrb	r3, [r7, #3]
 80255c8:	687a      	ldr	r2, [r7, #4]
 80255ca:	212c      	movs	r1, #44	; 0x2c
 80255cc:	fb01 f303 	mul.w	r3, r1, r3
 80255d0:	4413      	add	r3, r2
 80255d2:	3355      	adds	r3, #85	; 0x55
 80255d4:	2201      	movs	r2, #1
 80255d6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80255d8:	78fb      	ldrb	r3, [r7, #3]
 80255da:	687a      	ldr	r2, [r7, #4]
 80255dc:	212c      	movs	r1, #44	; 0x2c
 80255de:	fb01 f303 	mul.w	r3, r1, r3
 80255e2:	4413      	add	r3, r2
 80255e4:	3355      	adds	r3, #85	; 0x55
 80255e6:	781b      	ldrb	r3, [r3, #0]
 80255e8:	2b00      	cmp	r3, #0
 80255ea:	d109      	bne.n	8025600 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80255ec:	78fb      	ldrb	r3, [r7, #3]
 80255ee:	687a      	ldr	r2, [r7, #4]
 80255f0:	212c      	movs	r1, #44	; 0x2c
 80255f2:	fb01 f303 	mul.w	r3, r1, r3
 80255f6:	4413      	add	r3, r2
 80255f8:	3342      	adds	r3, #66	; 0x42
 80255fa:	2200      	movs	r2, #0
 80255fc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80255fe:	e093      	b.n	8025728 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025600:	78fb      	ldrb	r3, [r7, #3]
 8025602:	687a      	ldr	r2, [r7, #4]
 8025604:	212c      	movs	r1, #44	; 0x2c
 8025606:	fb01 f303 	mul.w	r3, r1, r3
 802560a:	4413      	add	r3, r2
 802560c:	3342      	adds	r3, #66	; 0x42
 802560e:	2202      	movs	r2, #2
 8025610:	701a      	strb	r2, [r3, #0]
      break;
 8025612:	e089      	b.n	8025728 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8025614:	78bb      	ldrb	r3, [r7, #2]
 8025616:	2b00      	cmp	r3, #0
 8025618:	d11d      	bne.n	8025656 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 802561a:	78fb      	ldrb	r3, [r7, #3]
 802561c:	687a      	ldr	r2, [r7, #4]
 802561e:	212c      	movs	r1, #44	; 0x2c
 8025620:	fb01 f303 	mul.w	r3, r1, r3
 8025624:	4413      	add	r3, r2
 8025626:	3355      	adds	r3, #85	; 0x55
 8025628:	781b      	ldrb	r3, [r3, #0]
 802562a:	2b00      	cmp	r3, #0
 802562c:	d109      	bne.n	8025642 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802562e:	78fb      	ldrb	r3, [r7, #3]
 8025630:	687a      	ldr	r2, [r7, #4]
 8025632:	212c      	movs	r1, #44	; 0x2c
 8025634:	fb01 f303 	mul.w	r3, r1, r3
 8025638:	4413      	add	r3, r2
 802563a:	3342      	adds	r3, #66	; 0x42
 802563c:	2200      	movs	r2, #0
 802563e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8025640:	e073      	b.n	802572a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025642:	78fb      	ldrb	r3, [r7, #3]
 8025644:	687a      	ldr	r2, [r7, #4]
 8025646:	212c      	movs	r1, #44	; 0x2c
 8025648:	fb01 f303 	mul.w	r3, r1, r3
 802564c:	4413      	add	r3, r2
 802564e:	3342      	adds	r3, #66	; 0x42
 8025650:	2202      	movs	r2, #2
 8025652:	701a      	strb	r2, [r3, #0]
      break;
 8025654:	e069      	b.n	802572a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8025656:	78fb      	ldrb	r3, [r7, #3]
 8025658:	687a      	ldr	r2, [r7, #4]
 802565a:	212c      	movs	r1, #44	; 0x2c
 802565c:	fb01 f303 	mul.w	r3, r1, r3
 8025660:	4413      	add	r3, r2
 8025662:	3354      	adds	r3, #84	; 0x54
 8025664:	781b      	ldrb	r3, [r3, #0]
 8025666:	2b00      	cmp	r3, #0
 8025668:	d109      	bne.n	802567e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802566a:	78fb      	ldrb	r3, [r7, #3]
 802566c:	687a      	ldr	r2, [r7, #4]
 802566e:	212c      	movs	r1, #44	; 0x2c
 8025670:	fb01 f303 	mul.w	r3, r1, r3
 8025674:	4413      	add	r3, r2
 8025676:	3342      	adds	r3, #66	; 0x42
 8025678:	2200      	movs	r2, #0
 802567a:	701a      	strb	r2, [r3, #0]
      break;
 802567c:	e055      	b.n	802572a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802567e:	78fb      	ldrb	r3, [r7, #3]
 8025680:	687a      	ldr	r2, [r7, #4]
 8025682:	212c      	movs	r1, #44	; 0x2c
 8025684:	fb01 f303 	mul.w	r3, r1, r3
 8025688:	4413      	add	r3, r2
 802568a:	3342      	adds	r3, #66	; 0x42
 802568c:	2202      	movs	r2, #2
 802568e:	701a      	strb	r2, [r3, #0]
      break;
 8025690:	e04b      	b.n	802572a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8025692:	78bb      	ldrb	r3, [r7, #2]
 8025694:	2b00      	cmp	r3, #0
 8025696:	d11d      	bne.n	80256d4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8025698:	78fb      	ldrb	r3, [r7, #3]
 802569a:	687a      	ldr	r2, [r7, #4]
 802569c:	212c      	movs	r1, #44	; 0x2c
 802569e:	fb01 f303 	mul.w	r3, r1, r3
 80256a2:	4413      	add	r3, r2
 80256a4:	3355      	adds	r3, #85	; 0x55
 80256a6:	781b      	ldrb	r3, [r3, #0]
 80256a8:	2b00      	cmp	r3, #0
 80256aa:	d109      	bne.n	80256c0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80256ac:	78fb      	ldrb	r3, [r7, #3]
 80256ae:	687a      	ldr	r2, [r7, #4]
 80256b0:	212c      	movs	r1, #44	; 0x2c
 80256b2:	fb01 f303 	mul.w	r3, r1, r3
 80256b6:	4413      	add	r3, r2
 80256b8:	3342      	adds	r3, #66	; 0x42
 80256ba:	2200      	movs	r2, #0
 80256bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80256be:	e034      	b.n	802572a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80256c0:	78fb      	ldrb	r3, [r7, #3]
 80256c2:	687a      	ldr	r2, [r7, #4]
 80256c4:	212c      	movs	r1, #44	; 0x2c
 80256c6:	fb01 f303 	mul.w	r3, r1, r3
 80256ca:	4413      	add	r3, r2
 80256cc:	3342      	adds	r3, #66	; 0x42
 80256ce:	2202      	movs	r2, #2
 80256d0:	701a      	strb	r2, [r3, #0]
      break;
 80256d2:	e02a      	b.n	802572a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80256d4:	78fb      	ldrb	r3, [r7, #3]
 80256d6:	687a      	ldr	r2, [r7, #4]
 80256d8:	212c      	movs	r1, #44	; 0x2c
 80256da:	fb01 f303 	mul.w	r3, r1, r3
 80256de:	4413      	add	r3, r2
 80256e0:	3354      	adds	r3, #84	; 0x54
 80256e2:	781b      	ldrb	r3, [r3, #0]
 80256e4:	2b00      	cmp	r3, #0
 80256e6:	d109      	bne.n	80256fc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80256e8:	78fb      	ldrb	r3, [r7, #3]
 80256ea:	687a      	ldr	r2, [r7, #4]
 80256ec:	212c      	movs	r1, #44	; 0x2c
 80256ee:	fb01 f303 	mul.w	r3, r1, r3
 80256f2:	4413      	add	r3, r2
 80256f4:	3342      	adds	r3, #66	; 0x42
 80256f6:	2200      	movs	r2, #0
 80256f8:	701a      	strb	r2, [r3, #0]
      break;
 80256fa:	e016      	b.n	802572a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80256fc:	78fb      	ldrb	r3, [r7, #3]
 80256fe:	687a      	ldr	r2, [r7, #4]
 8025700:	212c      	movs	r1, #44	; 0x2c
 8025702:	fb01 f303 	mul.w	r3, r1, r3
 8025706:	4413      	add	r3, r2
 8025708:	3342      	adds	r3, #66	; 0x42
 802570a:	2202      	movs	r2, #2
 802570c:	701a      	strb	r2, [r3, #0]
      break;
 802570e:	e00c      	b.n	802572a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8025710:	78fb      	ldrb	r3, [r7, #3]
 8025712:	687a      	ldr	r2, [r7, #4]
 8025714:	212c      	movs	r1, #44	; 0x2c
 8025716:	fb01 f303 	mul.w	r3, r1, r3
 802571a:	4413      	add	r3, r2
 802571c:	3342      	adds	r3, #66	; 0x42
 802571e:	2200      	movs	r2, #0
 8025720:	701a      	strb	r2, [r3, #0]
      break;
 8025722:	e002      	b.n	802572a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8025724:	bf00      	nop
 8025726:	e000      	b.n	802572a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8025728:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 802572a:	78fb      	ldrb	r3, [r7, #3]
 802572c:	687a      	ldr	r2, [r7, #4]
 802572e:	212c      	movs	r1, #44	; 0x2c
 8025730:	fb01 f303 	mul.w	r3, r1, r3
 8025734:	4413      	add	r3, r2
 8025736:	3344      	adds	r3, #68	; 0x44
 8025738:	697a      	ldr	r2, [r7, #20]
 802573a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 802573c:	78fb      	ldrb	r3, [r7, #3]
 802573e:	8b3a      	ldrh	r2, [r7, #24]
 8025740:	6879      	ldr	r1, [r7, #4]
 8025742:	202c      	movs	r0, #44	; 0x2c
 8025744:	fb00 f303 	mul.w	r3, r0, r3
 8025748:	440b      	add	r3, r1
 802574a:	334c      	adds	r3, #76	; 0x4c
 802574c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 802574e:	78fb      	ldrb	r3, [r7, #3]
 8025750:	687a      	ldr	r2, [r7, #4]
 8025752:	212c      	movs	r1, #44	; 0x2c
 8025754:	fb01 f303 	mul.w	r3, r1, r3
 8025758:	4413      	add	r3, r2
 802575a:	3360      	adds	r3, #96	; 0x60
 802575c:	2200      	movs	r2, #0
 802575e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8025760:	78fb      	ldrb	r3, [r7, #3]
 8025762:	687a      	ldr	r2, [r7, #4]
 8025764:	212c      	movs	r1, #44	; 0x2c
 8025766:	fb01 f303 	mul.w	r3, r1, r3
 802576a:	4413      	add	r3, r2
 802576c:	3350      	adds	r3, #80	; 0x50
 802576e:	2200      	movs	r2, #0
 8025770:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8025772:	78fb      	ldrb	r3, [r7, #3]
 8025774:	687a      	ldr	r2, [r7, #4]
 8025776:	212c      	movs	r1, #44	; 0x2c
 8025778:	fb01 f303 	mul.w	r3, r1, r3
 802577c:	4413      	add	r3, r2
 802577e:	3339      	adds	r3, #57	; 0x39
 8025780:	78fa      	ldrb	r2, [r7, #3]
 8025782:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8025784:	78fb      	ldrb	r3, [r7, #3]
 8025786:	687a      	ldr	r2, [r7, #4]
 8025788:	212c      	movs	r1, #44	; 0x2c
 802578a:	fb01 f303 	mul.w	r3, r1, r3
 802578e:	4413      	add	r3, r2
 8025790:	3361      	adds	r3, #97	; 0x61
 8025792:	2200      	movs	r2, #0
 8025794:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8025796:	687b      	ldr	r3, [r7, #4]
 8025798:	6818      	ldr	r0, [r3, #0]
 802579a:	78fb      	ldrb	r3, [r7, #3]
 802579c:	222c      	movs	r2, #44	; 0x2c
 802579e:	fb02 f303 	mul.w	r3, r2, r3
 80257a2:	3338      	adds	r3, #56	; 0x38
 80257a4:	687a      	ldr	r2, [r7, #4]
 80257a6:	18d1      	adds	r1, r2, r3
 80257a8:	687b      	ldr	r3, [r7, #4]
 80257aa:	691b      	ldr	r3, [r3, #16]
 80257ac:	b2db      	uxtb	r3, r3
 80257ae:	461a      	mov	r2, r3
 80257b0:	f006 fd68 	bl	802c284 <USB_HC_StartXfer>
 80257b4:	4603      	mov	r3, r0
}
 80257b6:	4618      	mov	r0, r3
 80257b8:	3708      	adds	r7, #8
 80257ba:	46bd      	mov	sp, r7
 80257bc:	bd80      	pop	{r7, pc}
 80257be:	bf00      	nop

080257c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80257c0:	b580      	push	{r7, lr}
 80257c2:	b086      	sub	sp, #24
 80257c4:	af00      	add	r7, sp, #0
 80257c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80257c8:	687b      	ldr	r3, [r7, #4]
 80257ca:	681b      	ldr	r3, [r3, #0]
 80257cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80257ce:	693b      	ldr	r3, [r7, #16]
 80257d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80257d2:	687b      	ldr	r3, [r7, #4]
 80257d4:	681b      	ldr	r3, [r3, #0]
 80257d6:	4618      	mov	r0, r3
 80257d8:	f006 fa6f 	bl	802bcba <USB_GetMode>
 80257dc:	4603      	mov	r3, r0
 80257de:	2b01      	cmp	r3, #1
 80257e0:	f040 80f6 	bne.w	80259d0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80257e4:	687b      	ldr	r3, [r7, #4]
 80257e6:	681b      	ldr	r3, [r3, #0]
 80257e8:	4618      	mov	r0, r3
 80257ea:	f006 fa53 	bl	802bc94 <USB_ReadInterrupts>
 80257ee:	4603      	mov	r3, r0
 80257f0:	2b00      	cmp	r3, #0
 80257f2:	f000 80ec 	beq.w	80259ce <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80257f6:	687b      	ldr	r3, [r7, #4]
 80257f8:	681b      	ldr	r3, [r3, #0]
 80257fa:	4618      	mov	r0, r3
 80257fc:	f006 fa4a 	bl	802bc94 <USB_ReadInterrupts>
 8025800:	4603      	mov	r3, r0
 8025802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8025806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802580a:	d104      	bne.n	8025816 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 802580c:	687b      	ldr	r3, [r7, #4]
 802580e:	681b      	ldr	r3, [r3, #0]
 8025810:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8025814:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8025816:	687b      	ldr	r3, [r7, #4]
 8025818:	681b      	ldr	r3, [r3, #0]
 802581a:	4618      	mov	r0, r3
 802581c:	f006 fa3a 	bl	802bc94 <USB_ReadInterrupts>
 8025820:	4603      	mov	r3, r0
 8025822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802582a:	d104      	bne.n	8025836 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 802582c:	687b      	ldr	r3, [r7, #4]
 802582e:	681b      	ldr	r3, [r3, #0]
 8025830:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8025834:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8025836:	687b      	ldr	r3, [r7, #4]
 8025838:	681b      	ldr	r3, [r3, #0]
 802583a:	4618      	mov	r0, r3
 802583c:	f006 fa2a 	bl	802bc94 <USB_ReadInterrupts>
 8025840:	4603      	mov	r3, r0
 8025842:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8025846:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802584a:	d104      	bne.n	8025856 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 802584c:	687b      	ldr	r3, [r7, #4]
 802584e:	681b      	ldr	r3, [r3, #0]
 8025850:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8025854:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8025856:	687b      	ldr	r3, [r7, #4]
 8025858:	681b      	ldr	r3, [r3, #0]
 802585a:	4618      	mov	r0, r3
 802585c:	f006 fa1a 	bl	802bc94 <USB_ReadInterrupts>
 8025860:	4603      	mov	r3, r0
 8025862:	f003 0302 	and.w	r3, r3, #2
 8025866:	2b02      	cmp	r3, #2
 8025868:	d103      	bne.n	8025872 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 802586a:	687b      	ldr	r3, [r7, #4]
 802586c:	681b      	ldr	r3, [r3, #0]
 802586e:	2202      	movs	r2, #2
 8025870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8025872:	687b      	ldr	r3, [r7, #4]
 8025874:	681b      	ldr	r3, [r3, #0]
 8025876:	4618      	mov	r0, r3
 8025878:	f006 fa0c 	bl	802bc94 <USB_ReadInterrupts>
 802587c:	4603      	mov	r3, r0
 802587e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8025882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8025886:	d11c      	bne.n	80258c2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8025888:	687b      	ldr	r3, [r7, #4]
 802588a:	681b      	ldr	r3, [r3, #0]
 802588c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8025890:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8025892:	68fb      	ldr	r3, [r7, #12]
 8025894:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025898:	681b      	ldr	r3, [r3, #0]
 802589a:	f003 0301 	and.w	r3, r3, #1
 802589e:	2b00      	cmp	r3, #0
 80258a0:	d10f      	bne.n	80258c2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80258a2:	2110      	movs	r1, #16
 80258a4:	6938      	ldr	r0, [r7, #16]
 80258a6:	f006 f8fb 	bl	802baa0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80258aa:	6938      	ldr	r0, [r7, #16]
 80258ac:	f006 f92c 	bl	802bb08 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80258b0:	687b      	ldr	r3, [r7, #4]
 80258b2:	681b      	ldr	r3, [r3, #0]
 80258b4:	2101      	movs	r1, #1
 80258b6:	4618      	mov	r0, r3
 80258b8:	f006 fafc 	bl	802beb4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80258bc:	6878      	ldr	r0, [r7, #4]
 80258be:	f014 f863 	bl	8039988 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80258c2:	687b      	ldr	r3, [r7, #4]
 80258c4:	681b      	ldr	r3, [r3, #0]
 80258c6:	4618      	mov	r0, r3
 80258c8:	f006 f9e4 	bl	802bc94 <USB_ReadInterrupts>
 80258cc:	4603      	mov	r3, r0
 80258ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80258d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80258d6:	d102      	bne.n	80258de <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80258d8:	6878      	ldr	r0, [r7, #4]
 80258da:	f001 f89e 	bl	8026a1a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80258de:	687b      	ldr	r3, [r7, #4]
 80258e0:	681b      	ldr	r3, [r3, #0]
 80258e2:	4618      	mov	r0, r3
 80258e4:	f006 f9d6 	bl	802bc94 <USB_ReadInterrupts>
 80258e8:	4603      	mov	r3, r0
 80258ea:	f003 0308 	and.w	r3, r3, #8
 80258ee:	2b08      	cmp	r3, #8
 80258f0:	d106      	bne.n	8025900 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80258f2:	6878      	ldr	r0, [r7, #4]
 80258f4:	f014 f82c 	bl	8039950 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80258f8:	687b      	ldr	r3, [r7, #4]
 80258fa:	681b      	ldr	r3, [r3, #0]
 80258fc:	2208      	movs	r2, #8
 80258fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8025900:	687b      	ldr	r3, [r7, #4]
 8025902:	681b      	ldr	r3, [r3, #0]
 8025904:	4618      	mov	r0, r3
 8025906:	f006 f9c5 	bl	802bc94 <USB_ReadInterrupts>
 802590a:	4603      	mov	r3, r0
 802590c:	f003 0310 	and.w	r3, r3, #16
 8025910:	2b10      	cmp	r3, #16
 8025912:	d101      	bne.n	8025918 <HAL_HCD_IRQHandler+0x158>
 8025914:	2301      	movs	r3, #1
 8025916:	e000      	b.n	802591a <HAL_HCD_IRQHandler+0x15a>
 8025918:	2300      	movs	r3, #0
 802591a:	2b00      	cmp	r3, #0
 802591c:	d012      	beq.n	8025944 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802591e:	687b      	ldr	r3, [r7, #4]
 8025920:	681b      	ldr	r3, [r3, #0]
 8025922:	699a      	ldr	r2, [r3, #24]
 8025924:	687b      	ldr	r3, [r7, #4]
 8025926:	681b      	ldr	r3, [r3, #0]
 8025928:	f022 0210 	bic.w	r2, r2, #16
 802592c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 802592e:	6878      	ldr	r0, [r7, #4]
 8025930:	f000 ffa1 	bl	8026876 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8025934:	687b      	ldr	r3, [r7, #4]
 8025936:	681b      	ldr	r3, [r3, #0]
 8025938:	699a      	ldr	r2, [r3, #24]
 802593a:	687b      	ldr	r3, [r7, #4]
 802593c:	681b      	ldr	r3, [r3, #0]
 802593e:	f042 0210 	orr.w	r2, r2, #16
 8025942:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8025944:	687b      	ldr	r3, [r7, #4]
 8025946:	681b      	ldr	r3, [r3, #0]
 8025948:	4618      	mov	r0, r3
 802594a:	f006 f9a3 	bl	802bc94 <USB_ReadInterrupts>
 802594e:	4603      	mov	r3, r0
 8025950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8025958:	d13a      	bne.n	80259d0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 802595a:	687b      	ldr	r3, [r7, #4]
 802595c:	681b      	ldr	r3, [r3, #0]
 802595e:	4618      	mov	r0, r3
 8025960:	f006 fdd2 	bl	802c508 <USB_HC_ReadInterrupt>
 8025964:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8025966:	2300      	movs	r3, #0
 8025968:	617b      	str	r3, [r7, #20]
 802596a:	e025      	b.n	80259b8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 802596c:	697b      	ldr	r3, [r7, #20]
 802596e:	f003 030f 	and.w	r3, r3, #15
 8025972:	68ba      	ldr	r2, [r7, #8]
 8025974:	fa22 f303 	lsr.w	r3, r2, r3
 8025978:	f003 0301 	and.w	r3, r3, #1
 802597c:	2b00      	cmp	r3, #0
 802597e:	d018      	beq.n	80259b2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8025980:	697b      	ldr	r3, [r7, #20]
 8025982:	015a      	lsls	r2, r3, #5
 8025984:	68fb      	ldr	r3, [r7, #12]
 8025986:	4413      	add	r3, r2
 8025988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802598c:	681b      	ldr	r3, [r3, #0]
 802598e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8025992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8025996:	d106      	bne.n	80259a6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8025998:	697b      	ldr	r3, [r7, #20]
 802599a:	b2db      	uxtb	r3, r3
 802599c:	4619      	mov	r1, r3
 802599e:	6878      	ldr	r0, [r7, #4]
 80259a0:	f000 f8ab 	bl	8025afa <HCD_HC_IN_IRQHandler>
 80259a4:	e005      	b.n	80259b2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80259a6:	697b      	ldr	r3, [r7, #20]
 80259a8:	b2db      	uxtb	r3, r3
 80259aa:	4619      	mov	r1, r3
 80259ac:	6878      	ldr	r0, [r7, #4]
 80259ae:	f000 fbf9 	bl	80261a4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80259b2:	697b      	ldr	r3, [r7, #20]
 80259b4:	3301      	adds	r3, #1
 80259b6:	617b      	str	r3, [r7, #20]
 80259b8:	687b      	ldr	r3, [r7, #4]
 80259ba:	689b      	ldr	r3, [r3, #8]
 80259bc:	697a      	ldr	r2, [r7, #20]
 80259be:	429a      	cmp	r2, r3
 80259c0:	d3d4      	bcc.n	802596c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80259c2:	687b      	ldr	r3, [r7, #4]
 80259c4:	681b      	ldr	r3, [r3, #0]
 80259c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80259ca:	615a      	str	r2, [r3, #20]
 80259cc:	e000      	b.n	80259d0 <HAL_HCD_IRQHandler+0x210>
      return;
 80259ce:	bf00      	nop
    }
  }
}
 80259d0:	3718      	adds	r7, #24
 80259d2:	46bd      	mov	sp, r7
 80259d4:	bd80      	pop	{r7, pc}

080259d6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80259d6:	b580      	push	{r7, lr}
 80259d8:	b082      	sub	sp, #8
 80259da:	af00      	add	r7, sp, #0
 80259dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80259de:	687b      	ldr	r3, [r7, #4]
 80259e0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80259e4:	2b01      	cmp	r3, #1
 80259e6:	d101      	bne.n	80259ec <HAL_HCD_Start+0x16>
 80259e8:	2302      	movs	r3, #2
 80259ea:	e013      	b.n	8025a14 <HAL_HCD_Start+0x3e>
 80259ec:	687b      	ldr	r3, [r7, #4]
 80259ee:	2201      	movs	r2, #1
 80259f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80259f4:	687b      	ldr	r3, [r7, #4]
 80259f6:	681b      	ldr	r3, [r3, #0]
 80259f8:	2101      	movs	r1, #1
 80259fa:	4618      	mov	r0, r3
 80259fc:	f006 fabe 	bl	802bf7c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8025a00:	687b      	ldr	r3, [r7, #4]
 8025a02:	681b      	ldr	r3, [r3, #0]
 8025a04:	4618      	mov	r0, r3
 8025a06:	f005 ffdd 	bl	802b9c4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8025a0a:	687b      	ldr	r3, [r7, #4]
 8025a0c:	2200      	movs	r2, #0
 8025a0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8025a12:	2300      	movs	r3, #0
}
 8025a14:	4618      	mov	r0, r3
 8025a16:	3708      	adds	r7, #8
 8025a18:	46bd      	mov	sp, r7
 8025a1a:	bd80      	pop	{r7, pc}

08025a1c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8025a1c:	b580      	push	{r7, lr}
 8025a1e:	b082      	sub	sp, #8
 8025a20:	af00      	add	r7, sp, #0
 8025a22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8025a24:	687b      	ldr	r3, [r7, #4]
 8025a26:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8025a2a:	2b01      	cmp	r3, #1
 8025a2c:	d101      	bne.n	8025a32 <HAL_HCD_Stop+0x16>
 8025a2e:	2302      	movs	r3, #2
 8025a30:	e00d      	b.n	8025a4e <HAL_HCD_Stop+0x32>
 8025a32:	687b      	ldr	r3, [r7, #4]
 8025a34:	2201      	movs	r2, #1
 8025a36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8025a3a:	687b      	ldr	r3, [r7, #4]
 8025a3c:	681b      	ldr	r3, [r3, #0]
 8025a3e:	4618      	mov	r0, r3
 8025a40:	f006 feac 	bl	802c79c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8025a44:	687b      	ldr	r3, [r7, #4]
 8025a46:	2200      	movs	r2, #0
 8025a48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8025a4c:	2300      	movs	r3, #0
}
 8025a4e:	4618      	mov	r0, r3
 8025a50:	3708      	adds	r7, #8
 8025a52:	46bd      	mov	sp, r7
 8025a54:	bd80      	pop	{r7, pc}

08025a56 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8025a56:	b580      	push	{r7, lr}
 8025a58:	b082      	sub	sp, #8
 8025a5a:	af00      	add	r7, sp, #0
 8025a5c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8025a5e:	687b      	ldr	r3, [r7, #4]
 8025a60:	681b      	ldr	r3, [r3, #0]
 8025a62:	4618      	mov	r0, r3
 8025a64:	f006 fa60 	bl	802bf28 <USB_ResetPort>
 8025a68:	4603      	mov	r3, r0
}
 8025a6a:	4618      	mov	r0, r3
 8025a6c:	3708      	adds	r7, #8
 8025a6e:	46bd      	mov	sp, r7
 8025a70:	bd80      	pop	{r7, pc}

08025a72 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025a72:	b480      	push	{r7}
 8025a74:	b083      	sub	sp, #12
 8025a76:	af00      	add	r7, sp, #0
 8025a78:	6078      	str	r0, [r7, #4]
 8025a7a:	460b      	mov	r3, r1
 8025a7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8025a7e:	78fb      	ldrb	r3, [r7, #3]
 8025a80:	687a      	ldr	r2, [r7, #4]
 8025a82:	212c      	movs	r1, #44	; 0x2c
 8025a84:	fb01 f303 	mul.w	r3, r1, r3
 8025a88:	4413      	add	r3, r2
 8025a8a:	3360      	adds	r3, #96	; 0x60
 8025a8c:	781b      	ldrb	r3, [r3, #0]
}
 8025a8e:	4618      	mov	r0, r3
 8025a90:	370c      	adds	r7, #12
 8025a92:	46bd      	mov	sp, r7
 8025a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a98:	4770      	bx	lr

08025a9a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025a9a:	b480      	push	{r7}
 8025a9c:	b083      	sub	sp, #12
 8025a9e:	af00      	add	r7, sp, #0
 8025aa0:	6078      	str	r0, [r7, #4]
 8025aa2:	460b      	mov	r3, r1
 8025aa4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8025aa6:	78fb      	ldrb	r3, [r7, #3]
 8025aa8:	687a      	ldr	r2, [r7, #4]
 8025aaa:	212c      	movs	r1, #44	; 0x2c
 8025aac:	fb01 f303 	mul.w	r3, r1, r3
 8025ab0:	4413      	add	r3, r2
 8025ab2:	3350      	adds	r3, #80	; 0x50
 8025ab4:	681b      	ldr	r3, [r3, #0]
}
 8025ab6:	4618      	mov	r0, r3
 8025ab8:	370c      	adds	r7, #12
 8025aba:	46bd      	mov	sp, r7
 8025abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ac0:	4770      	bx	lr

08025ac2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8025ac2:	b580      	push	{r7, lr}
 8025ac4:	b082      	sub	sp, #8
 8025ac6:	af00      	add	r7, sp, #0
 8025ac8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8025aca:	687b      	ldr	r3, [r7, #4]
 8025acc:	681b      	ldr	r3, [r3, #0]
 8025ace:	4618      	mov	r0, r3
 8025ad0:	f006 faa4 	bl	802c01c <USB_GetCurrentFrame>
 8025ad4:	4603      	mov	r3, r0
}
 8025ad6:	4618      	mov	r0, r3
 8025ad8:	3708      	adds	r7, #8
 8025ada:	46bd      	mov	sp, r7
 8025adc:	bd80      	pop	{r7, pc}

08025ade <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8025ade:	b580      	push	{r7, lr}
 8025ae0:	b082      	sub	sp, #8
 8025ae2:	af00      	add	r7, sp, #0
 8025ae4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8025ae6:	687b      	ldr	r3, [r7, #4]
 8025ae8:	681b      	ldr	r3, [r3, #0]
 8025aea:	4618      	mov	r0, r3
 8025aec:	f006 fa7f 	bl	802bfee <USB_GetHostSpeed>
 8025af0:	4603      	mov	r3, r0
}
 8025af2:	4618      	mov	r0, r3
 8025af4:	3708      	adds	r7, #8
 8025af6:	46bd      	mov	sp, r7
 8025af8:	bd80      	pop	{r7, pc}

08025afa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025afa:	b580      	push	{r7, lr}
 8025afc:	b086      	sub	sp, #24
 8025afe:	af00      	add	r7, sp, #0
 8025b00:	6078      	str	r0, [r7, #4]
 8025b02:	460b      	mov	r3, r1
 8025b04:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025b06:	687b      	ldr	r3, [r7, #4]
 8025b08:	681b      	ldr	r3, [r3, #0]
 8025b0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025b0c:	697b      	ldr	r3, [r7, #20]
 8025b0e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8025b10:	78fb      	ldrb	r3, [r7, #3]
 8025b12:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025b14:	68fb      	ldr	r3, [r7, #12]
 8025b16:	015a      	lsls	r2, r3, #5
 8025b18:	693b      	ldr	r3, [r7, #16]
 8025b1a:	4413      	add	r3, r2
 8025b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b20:	689b      	ldr	r3, [r3, #8]
 8025b22:	f003 0304 	and.w	r3, r3, #4
 8025b26:	2b04      	cmp	r3, #4
 8025b28:	d11a      	bne.n	8025b60 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8025b2a:	68fb      	ldr	r3, [r7, #12]
 8025b2c:	015a      	lsls	r2, r3, #5
 8025b2e:	693b      	ldr	r3, [r7, #16]
 8025b30:	4413      	add	r3, r2
 8025b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b36:	461a      	mov	r2, r3
 8025b38:	2304      	movs	r3, #4
 8025b3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025b3c:	687a      	ldr	r2, [r7, #4]
 8025b3e:	68fb      	ldr	r3, [r7, #12]
 8025b40:	212c      	movs	r1, #44	; 0x2c
 8025b42:	fb01 f303 	mul.w	r3, r1, r3
 8025b46:	4413      	add	r3, r2
 8025b48:	3361      	adds	r3, #97	; 0x61
 8025b4a:	2206      	movs	r2, #6
 8025b4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025b4e:	687b      	ldr	r3, [r7, #4]
 8025b50:	681b      	ldr	r3, [r3, #0]
 8025b52:	68fa      	ldr	r2, [r7, #12]
 8025b54:	b2d2      	uxtb	r2, r2
 8025b56:	4611      	mov	r1, r2
 8025b58:	4618      	mov	r0, r3
 8025b5a:	f006 fce6 	bl	802c52a <USB_HC_Halt>
 8025b5e:	e0af      	b.n	8025cc0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8025b60:	68fb      	ldr	r3, [r7, #12]
 8025b62:	015a      	lsls	r2, r3, #5
 8025b64:	693b      	ldr	r3, [r7, #16]
 8025b66:	4413      	add	r3, r2
 8025b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b6c:	689b      	ldr	r3, [r3, #8]
 8025b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8025b76:	d11b      	bne.n	8025bb0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8025b78:	68fb      	ldr	r3, [r7, #12]
 8025b7a:	015a      	lsls	r2, r3, #5
 8025b7c:	693b      	ldr	r3, [r7, #16]
 8025b7e:	4413      	add	r3, r2
 8025b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b84:	461a      	mov	r2, r3
 8025b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8025b8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8025b8c:	687a      	ldr	r2, [r7, #4]
 8025b8e:	68fb      	ldr	r3, [r7, #12]
 8025b90:	212c      	movs	r1, #44	; 0x2c
 8025b92:	fb01 f303 	mul.w	r3, r1, r3
 8025b96:	4413      	add	r3, r2
 8025b98:	3361      	adds	r3, #97	; 0x61
 8025b9a:	2207      	movs	r2, #7
 8025b9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025b9e:	687b      	ldr	r3, [r7, #4]
 8025ba0:	681b      	ldr	r3, [r3, #0]
 8025ba2:	68fa      	ldr	r2, [r7, #12]
 8025ba4:	b2d2      	uxtb	r2, r2
 8025ba6:	4611      	mov	r1, r2
 8025ba8:	4618      	mov	r0, r3
 8025baa:	f006 fcbe 	bl	802c52a <USB_HC_Halt>
 8025bae:	e087      	b.n	8025cc0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8025bb0:	68fb      	ldr	r3, [r7, #12]
 8025bb2:	015a      	lsls	r2, r3, #5
 8025bb4:	693b      	ldr	r3, [r7, #16]
 8025bb6:	4413      	add	r3, r2
 8025bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bbc:	689b      	ldr	r3, [r3, #8]
 8025bbe:	f003 0320 	and.w	r3, r3, #32
 8025bc2:	2b20      	cmp	r3, #32
 8025bc4:	d109      	bne.n	8025bda <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8025bc6:	68fb      	ldr	r3, [r7, #12]
 8025bc8:	015a      	lsls	r2, r3, #5
 8025bca:	693b      	ldr	r3, [r7, #16]
 8025bcc:	4413      	add	r3, r2
 8025bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bd2:	461a      	mov	r2, r3
 8025bd4:	2320      	movs	r3, #32
 8025bd6:	6093      	str	r3, [r2, #8]
 8025bd8:	e072      	b.n	8025cc0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8025bda:	68fb      	ldr	r3, [r7, #12]
 8025bdc:	015a      	lsls	r2, r3, #5
 8025bde:	693b      	ldr	r3, [r7, #16]
 8025be0:	4413      	add	r3, r2
 8025be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025be6:	689b      	ldr	r3, [r3, #8]
 8025be8:	f003 0308 	and.w	r3, r3, #8
 8025bec:	2b08      	cmp	r3, #8
 8025bee:	d11a      	bne.n	8025c26 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8025bf0:	68fb      	ldr	r3, [r7, #12]
 8025bf2:	015a      	lsls	r2, r3, #5
 8025bf4:	693b      	ldr	r3, [r7, #16]
 8025bf6:	4413      	add	r3, r2
 8025bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bfc:	461a      	mov	r2, r3
 8025bfe:	2308      	movs	r3, #8
 8025c00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8025c02:	687a      	ldr	r2, [r7, #4]
 8025c04:	68fb      	ldr	r3, [r7, #12]
 8025c06:	212c      	movs	r1, #44	; 0x2c
 8025c08:	fb01 f303 	mul.w	r3, r1, r3
 8025c0c:	4413      	add	r3, r2
 8025c0e:	3361      	adds	r3, #97	; 0x61
 8025c10:	2205      	movs	r2, #5
 8025c12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025c14:	687b      	ldr	r3, [r7, #4]
 8025c16:	681b      	ldr	r3, [r3, #0]
 8025c18:	68fa      	ldr	r2, [r7, #12]
 8025c1a:	b2d2      	uxtb	r2, r2
 8025c1c:	4611      	mov	r1, r2
 8025c1e:	4618      	mov	r0, r3
 8025c20:	f006 fc83 	bl	802c52a <USB_HC_Halt>
 8025c24:	e04c      	b.n	8025cc0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8025c26:	68fb      	ldr	r3, [r7, #12]
 8025c28:	015a      	lsls	r2, r3, #5
 8025c2a:	693b      	ldr	r3, [r7, #16]
 8025c2c:	4413      	add	r3, r2
 8025c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c32:	689b      	ldr	r3, [r3, #8]
 8025c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025c3c:	d11b      	bne.n	8025c76 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8025c3e:	68fb      	ldr	r3, [r7, #12]
 8025c40:	015a      	lsls	r2, r3, #5
 8025c42:	693b      	ldr	r3, [r7, #16]
 8025c44:	4413      	add	r3, r2
 8025c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c4a:	461a      	mov	r2, r3
 8025c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025c50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8025c52:	687a      	ldr	r2, [r7, #4]
 8025c54:	68fb      	ldr	r3, [r7, #12]
 8025c56:	212c      	movs	r1, #44	; 0x2c
 8025c58:	fb01 f303 	mul.w	r3, r1, r3
 8025c5c:	4413      	add	r3, r2
 8025c5e:	3361      	adds	r3, #97	; 0x61
 8025c60:	2208      	movs	r2, #8
 8025c62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025c64:	687b      	ldr	r3, [r7, #4]
 8025c66:	681b      	ldr	r3, [r3, #0]
 8025c68:	68fa      	ldr	r2, [r7, #12]
 8025c6a:	b2d2      	uxtb	r2, r2
 8025c6c:	4611      	mov	r1, r2
 8025c6e:	4618      	mov	r0, r3
 8025c70:	f006 fc5b 	bl	802c52a <USB_HC_Halt>
 8025c74:	e024      	b.n	8025cc0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8025c76:	68fb      	ldr	r3, [r7, #12]
 8025c78:	015a      	lsls	r2, r3, #5
 8025c7a:	693b      	ldr	r3, [r7, #16]
 8025c7c:	4413      	add	r3, r2
 8025c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c82:	689b      	ldr	r3, [r3, #8]
 8025c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025c88:	2b80      	cmp	r3, #128	; 0x80
 8025c8a:	d119      	bne.n	8025cc0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8025c8c:	68fb      	ldr	r3, [r7, #12]
 8025c8e:	015a      	lsls	r2, r3, #5
 8025c90:	693b      	ldr	r3, [r7, #16]
 8025c92:	4413      	add	r3, r2
 8025c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c98:	461a      	mov	r2, r3
 8025c9a:	2380      	movs	r3, #128	; 0x80
 8025c9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025c9e:	687a      	ldr	r2, [r7, #4]
 8025ca0:	68fb      	ldr	r3, [r7, #12]
 8025ca2:	212c      	movs	r1, #44	; 0x2c
 8025ca4:	fb01 f303 	mul.w	r3, r1, r3
 8025ca8:	4413      	add	r3, r2
 8025caa:	3361      	adds	r3, #97	; 0x61
 8025cac:	2206      	movs	r2, #6
 8025cae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025cb0:	687b      	ldr	r3, [r7, #4]
 8025cb2:	681b      	ldr	r3, [r3, #0]
 8025cb4:	68fa      	ldr	r2, [r7, #12]
 8025cb6:	b2d2      	uxtb	r2, r2
 8025cb8:	4611      	mov	r1, r2
 8025cba:	4618      	mov	r0, r3
 8025cbc:	f006 fc35 	bl	802c52a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8025cc0:	68fb      	ldr	r3, [r7, #12]
 8025cc2:	015a      	lsls	r2, r3, #5
 8025cc4:	693b      	ldr	r3, [r7, #16]
 8025cc6:	4413      	add	r3, r2
 8025cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ccc:	689b      	ldr	r3, [r3, #8]
 8025cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025cd6:	d112      	bne.n	8025cfe <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025cd8:	687b      	ldr	r3, [r7, #4]
 8025cda:	681b      	ldr	r3, [r3, #0]
 8025cdc:	68fa      	ldr	r2, [r7, #12]
 8025cde:	b2d2      	uxtb	r2, r2
 8025ce0:	4611      	mov	r1, r2
 8025ce2:	4618      	mov	r0, r3
 8025ce4:	f006 fc21 	bl	802c52a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8025ce8:	68fb      	ldr	r3, [r7, #12]
 8025cea:	015a      	lsls	r2, r3, #5
 8025cec:	693b      	ldr	r3, [r7, #16]
 8025cee:	4413      	add	r3, r2
 8025cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025cf4:	461a      	mov	r2, r3
 8025cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025cfa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8025cfc:	e24e      	b.n	802619c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025cfe:	68fb      	ldr	r3, [r7, #12]
 8025d00:	015a      	lsls	r2, r3, #5
 8025d02:	693b      	ldr	r3, [r7, #16]
 8025d04:	4413      	add	r3, r2
 8025d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d0a:	689b      	ldr	r3, [r3, #8]
 8025d0c:	f003 0301 	and.w	r3, r3, #1
 8025d10:	2b01      	cmp	r3, #1
 8025d12:	f040 80df 	bne.w	8025ed4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8025d16:	687b      	ldr	r3, [r7, #4]
 8025d18:	691b      	ldr	r3, [r3, #16]
 8025d1a:	2b00      	cmp	r3, #0
 8025d1c:	d019      	beq.n	8025d52 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025d1e:	687a      	ldr	r2, [r7, #4]
 8025d20:	68fb      	ldr	r3, [r7, #12]
 8025d22:	212c      	movs	r1, #44	; 0x2c
 8025d24:	fb01 f303 	mul.w	r3, r1, r3
 8025d28:	4413      	add	r3, r2
 8025d2a:	3348      	adds	r3, #72	; 0x48
 8025d2c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8025d2e:	68fb      	ldr	r3, [r7, #12]
 8025d30:	0159      	lsls	r1, r3, #5
 8025d32:	693b      	ldr	r3, [r7, #16]
 8025d34:	440b      	add	r3, r1
 8025d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d3a:	691b      	ldr	r3, [r3, #16]
 8025d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025d40:	1ad2      	subs	r2, r2, r3
 8025d42:	6879      	ldr	r1, [r7, #4]
 8025d44:	68fb      	ldr	r3, [r7, #12]
 8025d46:	202c      	movs	r0, #44	; 0x2c
 8025d48:	fb00 f303 	mul.w	r3, r0, r3
 8025d4c:	440b      	add	r3, r1
 8025d4e:	3350      	adds	r3, #80	; 0x50
 8025d50:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8025d52:	687a      	ldr	r2, [r7, #4]
 8025d54:	68fb      	ldr	r3, [r7, #12]
 8025d56:	212c      	movs	r1, #44	; 0x2c
 8025d58:	fb01 f303 	mul.w	r3, r1, r3
 8025d5c:	4413      	add	r3, r2
 8025d5e:	3361      	adds	r3, #97	; 0x61
 8025d60:	2201      	movs	r2, #1
 8025d62:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025d64:	687a      	ldr	r2, [r7, #4]
 8025d66:	68fb      	ldr	r3, [r7, #12]
 8025d68:	212c      	movs	r1, #44	; 0x2c
 8025d6a:	fb01 f303 	mul.w	r3, r1, r3
 8025d6e:	4413      	add	r3, r2
 8025d70:	335c      	adds	r3, #92	; 0x5c
 8025d72:	2200      	movs	r2, #0
 8025d74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8025d76:	68fb      	ldr	r3, [r7, #12]
 8025d78:	015a      	lsls	r2, r3, #5
 8025d7a:	693b      	ldr	r3, [r7, #16]
 8025d7c:	4413      	add	r3, r2
 8025d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d82:	461a      	mov	r2, r3
 8025d84:	2301      	movs	r3, #1
 8025d86:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025d88:	687a      	ldr	r2, [r7, #4]
 8025d8a:	68fb      	ldr	r3, [r7, #12]
 8025d8c:	212c      	movs	r1, #44	; 0x2c
 8025d8e:	fb01 f303 	mul.w	r3, r1, r3
 8025d92:	4413      	add	r3, r2
 8025d94:	333f      	adds	r3, #63	; 0x3f
 8025d96:	781b      	ldrb	r3, [r3, #0]
 8025d98:	2b00      	cmp	r3, #0
 8025d9a:	d009      	beq.n	8025db0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025d9c:	687a      	ldr	r2, [r7, #4]
 8025d9e:	68fb      	ldr	r3, [r7, #12]
 8025da0:	212c      	movs	r1, #44	; 0x2c
 8025da2:	fb01 f303 	mul.w	r3, r1, r3
 8025da6:	4413      	add	r3, r2
 8025da8:	333f      	adds	r3, #63	; 0x3f
 8025daa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025dac:	2b02      	cmp	r3, #2
 8025dae:	d111      	bne.n	8025dd4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025db0:	687b      	ldr	r3, [r7, #4]
 8025db2:	681b      	ldr	r3, [r3, #0]
 8025db4:	68fa      	ldr	r2, [r7, #12]
 8025db6:	b2d2      	uxtb	r2, r2
 8025db8:	4611      	mov	r1, r2
 8025dba:	4618      	mov	r0, r3
 8025dbc:	f006 fbb5 	bl	802c52a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025dc0:	68fb      	ldr	r3, [r7, #12]
 8025dc2:	015a      	lsls	r2, r3, #5
 8025dc4:	693b      	ldr	r3, [r7, #16]
 8025dc6:	4413      	add	r3, r2
 8025dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025dcc:	461a      	mov	r2, r3
 8025dce:	2310      	movs	r3, #16
 8025dd0:	6093      	str	r3, [r2, #8]
 8025dd2:	e03a      	b.n	8025e4a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025dd4:	687a      	ldr	r2, [r7, #4]
 8025dd6:	68fb      	ldr	r3, [r7, #12]
 8025dd8:	212c      	movs	r1, #44	; 0x2c
 8025dda:	fb01 f303 	mul.w	r3, r1, r3
 8025dde:	4413      	add	r3, r2
 8025de0:	333f      	adds	r3, #63	; 0x3f
 8025de2:	781b      	ldrb	r3, [r3, #0]
 8025de4:	2b03      	cmp	r3, #3
 8025de6:	d009      	beq.n	8025dfc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8025de8:	687a      	ldr	r2, [r7, #4]
 8025dea:	68fb      	ldr	r3, [r7, #12]
 8025dec:	212c      	movs	r1, #44	; 0x2c
 8025dee:	fb01 f303 	mul.w	r3, r1, r3
 8025df2:	4413      	add	r3, r2
 8025df4:	333f      	adds	r3, #63	; 0x3f
 8025df6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025df8:	2b01      	cmp	r3, #1
 8025dfa:	d126      	bne.n	8025e4a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8025dfc:	68fb      	ldr	r3, [r7, #12]
 8025dfe:	015a      	lsls	r2, r3, #5
 8025e00:	693b      	ldr	r3, [r7, #16]
 8025e02:	4413      	add	r3, r2
 8025e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e08:	681b      	ldr	r3, [r3, #0]
 8025e0a:	68fa      	ldr	r2, [r7, #12]
 8025e0c:	0151      	lsls	r1, r2, #5
 8025e0e:	693a      	ldr	r2, [r7, #16]
 8025e10:	440a      	add	r2, r1
 8025e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025e16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025e1a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025e1c:	687a      	ldr	r2, [r7, #4]
 8025e1e:	68fb      	ldr	r3, [r7, #12]
 8025e20:	212c      	movs	r1, #44	; 0x2c
 8025e22:	fb01 f303 	mul.w	r3, r1, r3
 8025e26:	4413      	add	r3, r2
 8025e28:	3360      	adds	r3, #96	; 0x60
 8025e2a:	2201      	movs	r2, #1
 8025e2c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025e2e:	68fb      	ldr	r3, [r7, #12]
 8025e30:	b2d9      	uxtb	r1, r3
 8025e32:	687a      	ldr	r2, [r7, #4]
 8025e34:	68fb      	ldr	r3, [r7, #12]
 8025e36:	202c      	movs	r0, #44	; 0x2c
 8025e38:	fb00 f303 	mul.w	r3, r0, r3
 8025e3c:	4413      	add	r3, r2
 8025e3e:	3360      	adds	r3, #96	; 0x60
 8025e40:	781b      	ldrb	r3, [r3, #0]
 8025e42:	461a      	mov	r2, r3
 8025e44:	6878      	ldr	r0, [r7, #4]
 8025e46:	f013 fdad 	bl	80399a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8025e4a:	687b      	ldr	r3, [r7, #4]
 8025e4c:	691b      	ldr	r3, [r3, #16]
 8025e4e:	2b01      	cmp	r3, #1
 8025e50:	d12b      	bne.n	8025eaa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8025e52:	687a      	ldr	r2, [r7, #4]
 8025e54:	68fb      	ldr	r3, [r7, #12]
 8025e56:	212c      	movs	r1, #44	; 0x2c
 8025e58:	fb01 f303 	mul.w	r3, r1, r3
 8025e5c:	4413      	add	r3, r2
 8025e5e:	3348      	adds	r3, #72	; 0x48
 8025e60:	681b      	ldr	r3, [r3, #0]
 8025e62:	6879      	ldr	r1, [r7, #4]
 8025e64:	68fa      	ldr	r2, [r7, #12]
 8025e66:	202c      	movs	r0, #44	; 0x2c
 8025e68:	fb00 f202 	mul.w	r2, r0, r2
 8025e6c:	440a      	add	r2, r1
 8025e6e:	3240      	adds	r2, #64	; 0x40
 8025e70:	8812      	ldrh	r2, [r2, #0]
 8025e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8025e76:	f003 0301 	and.w	r3, r3, #1
 8025e7a:	2b00      	cmp	r3, #0
 8025e7c:	f000 818e 	beq.w	802619c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8025e80:	687a      	ldr	r2, [r7, #4]
 8025e82:	68fb      	ldr	r3, [r7, #12]
 8025e84:	212c      	movs	r1, #44	; 0x2c
 8025e86:	fb01 f303 	mul.w	r3, r1, r3
 8025e8a:	4413      	add	r3, r2
 8025e8c:	3354      	adds	r3, #84	; 0x54
 8025e8e:	781b      	ldrb	r3, [r3, #0]
 8025e90:	f083 0301 	eor.w	r3, r3, #1
 8025e94:	b2d8      	uxtb	r0, r3
 8025e96:	687a      	ldr	r2, [r7, #4]
 8025e98:	68fb      	ldr	r3, [r7, #12]
 8025e9a:	212c      	movs	r1, #44	; 0x2c
 8025e9c:	fb01 f303 	mul.w	r3, r1, r3
 8025ea0:	4413      	add	r3, r2
 8025ea2:	3354      	adds	r3, #84	; 0x54
 8025ea4:	4602      	mov	r2, r0
 8025ea6:	701a      	strb	r2, [r3, #0]
}
 8025ea8:	e178      	b.n	802619c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8025eaa:	687a      	ldr	r2, [r7, #4]
 8025eac:	68fb      	ldr	r3, [r7, #12]
 8025eae:	212c      	movs	r1, #44	; 0x2c
 8025eb0:	fb01 f303 	mul.w	r3, r1, r3
 8025eb4:	4413      	add	r3, r2
 8025eb6:	3354      	adds	r3, #84	; 0x54
 8025eb8:	781b      	ldrb	r3, [r3, #0]
 8025eba:	f083 0301 	eor.w	r3, r3, #1
 8025ebe:	b2d8      	uxtb	r0, r3
 8025ec0:	687a      	ldr	r2, [r7, #4]
 8025ec2:	68fb      	ldr	r3, [r7, #12]
 8025ec4:	212c      	movs	r1, #44	; 0x2c
 8025ec6:	fb01 f303 	mul.w	r3, r1, r3
 8025eca:	4413      	add	r3, r2
 8025ecc:	3354      	adds	r3, #84	; 0x54
 8025ece:	4602      	mov	r2, r0
 8025ed0:	701a      	strb	r2, [r3, #0]
}
 8025ed2:	e163      	b.n	802619c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8025ed4:	68fb      	ldr	r3, [r7, #12]
 8025ed6:	015a      	lsls	r2, r3, #5
 8025ed8:	693b      	ldr	r3, [r7, #16]
 8025eda:	4413      	add	r3, r2
 8025edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ee0:	689b      	ldr	r3, [r3, #8]
 8025ee2:	f003 0302 	and.w	r3, r3, #2
 8025ee6:	2b02      	cmp	r3, #2
 8025ee8:	f040 80f6 	bne.w	80260d8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8025eec:	687a      	ldr	r2, [r7, #4]
 8025eee:	68fb      	ldr	r3, [r7, #12]
 8025ef0:	212c      	movs	r1, #44	; 0x2c
 8025ef2:	fb01 f303 	mul.w	r3, r1, r3
 8025ef6:	4413      	add	r3, r2
 8025ef8:	3361      	adds	r3, #97	; 0x61
 8025efa:	781b      	ldrb	r3, [r3, #0]
 8025efc:	2b01      	cmp	r3, #1
 8025efe:	d109      	bne.n	8025f14 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025f00:	687a      	ldr	r2, [r7, #4]
 8025f02:	68fb      	ldr	r3, [r7, #12]
 8025f04:	212c      	movs	r1, #44	; 0x2c
 8025f06:	fb01 f303 	mul.w	r3, r1, r3
 8025f0a:	4413      	add	r3, r2
 8025f0c:	3360      	adds	r3, #96	; 0x60
 8025f0e:	2201      	movs	r2, #1
 8025f10:	701a      	strb	r2, [r3, #0]
 8025f12:	e0c9      	b.n	80260a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8025f14:	687a      	ldr	r2, [r7, #4]
 8025f16:	68fb      	ldr	r3, [r7, #12]
 8025f18:	212c      	movs	r1, #44	; 0x2c
 8025f1a:	fb01 f303 	mul.w	r3, r1, r3
 8025f1e:	4413      	add	r3, r2
 8025f20:	3361      	adds	r3, #97	; 0x61
 8025f22:	781b      	ldrb	r3, [r3, #0]
 8025f24:	2b05      	cmp	r3, #5
 8025f26:	d109      	bne.n	8025f3c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8025f28:	687a      	ldr	r2, [r7, #4]
 8025f2a:	68fb      	ldr	r3, [r7, #12]
 8025f2c:	212c      	movs	r1, #44	; 0x2c
 8025f2e:	fb01 f303 	mul.w	r3, r1, r3
 8025f32:	4413      	add	r3, r2
 8025f34:	3360      	adds	r3, #96	; 0x60
 8025f36:	2205      	movs	r2, #5
 8025f38:	701a      	strb	r2, [r3, #0]
 8025f3a:	e0b5      	b.n	80260a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025f3c:	687a      	ldr	r2, [r7, #4]
 8025f3e:	68fb      	ldr	r3, [r7, #12]
 8025f40:	212c      	movs	r1, #44	; 0x2c
 8025f42:	fb01 f303 	mul.w	r3, r1, r3
 8025f46:	4413      	add	r3, r2
 8025f48:	3361      	adds	r3, #97	; 0x61
 8025f4a:	781b      	ldrb	r3, [r3, #0]
 8025f4c:	2b06      	cmp	r3, #6
 8025f4e:	d009      	beq.n	8025f64 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025f50:	687a      	ldr	r2, [r7, #4]
 8025f52:	68fb      	ldr	r3, [r7, #12]
 8025f54:	212c      	movs	r1, #44	; 0x2c
 8025f56:	fb01 f303 	mul.w	r3, r1, r3
 8025f5a:	4413      	add	r3, r2
 8025f5c:	3361      	adds	r3, #97	; 0x61
 8025f5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025f60:	2b08      	cmp	r3, #8
 8025f62:	d150      	bne.n	8026006 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8025f64:	687a      	ldr	r2, [r7, #4]
 8025f66:	68fb      	ldr	r3, [r7, #12]
 8025f68:	212c      	movs	r1, #44	; 0x2c
 8025f6a:	fb01 f303 	mul.w	r3, r1, r3
 8025f6e:	4413      	add	r3, r2
 8025f70:	335c      	adds	r3, #92	; 0x5c
 8025f72:	681b      	ldr	r3, [r3, #0]
 8025f74:	1c5a      	adds	r2, r3, #1
 8025f76:	6879      	ldr	r1, [r7, #4]
 8025f78:	68fb      	ldr	r3, [r7, #12]
 8025f7a:	202c      	movs	r0, #44	; 0x2c
 8025f7c:	fb00 f303 	mul.w	r3, r0, r3
 8025f80:	440b      	add	r3, r1
 8025f82:	335c      	adds	r3, #92	; 0x5c
 8025f84:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025f86:	687a      	ldr	r2, [r7, #4]
 8025f88:	68fb      	ldr	r3, [r7, #12]
 8025f8a:	212c      	movs	r1, #44	; 0x2c
 8025f8c:	fb01 f303 	mul.w	r3, r1, r3
 8025f90:	4413      	add	r3, r2
 8025f92:	335c      	adds	r3, #92	; 0x5c
 8025f94:	681b      	ldr	r3, [r3, #0]
 8025f96:	2b02      	cmp	r3, #2
 8025f98:	d912      	bls.n	8025fc0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8025f9a:	687a      	ldr	r2, [r7, #4]
 8025f9c:	68fb      	ldr	r3, [r7, #12]
 8025f9e:	212c      	movs	r1, #44	; 0x2c
 8025fa0:	fb01 f303 	mul.w	r3, r1, r3
 8025fa4:	4413      	add	r3, r2
 8025fa6:	335c      	adds	r3, #92	; 0x5c
 8025fa8:	2200      	movs	r2, #0
 8025faa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025fac:	687a      	ldr	r2, [r7, #4]
 8025fae:	68fb      	ldr	r3, [r7, #12]
 8025fb0:	212c      	movs	r1, #44	; 0x2c
 8025fb2:	fb01 f303 	mul.w	r3, r1, r3
 8025fb6:	4413      	add	r3, r2
 8025fb8:	3360      	adds	r3, #96	; 0x60
 8025fba:	2204      	movs	r2, #4
 8025fbc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025fbe:	e073      	b.n	80260a8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025fc0:	687a      	ldr	r2, [r7, #4]
 8025fc2:	68fb      	ldr	r3, [r7, #12]
 8025fc4:	212c      	movs	r1, #44	; 0x2c
 8025fc6:	fb01 f303 	mul.w	r3, r1, r3
 8025fca:	4413      	add	r3, r2
 8025fcc:	3360      	adds	r3, #96	; 0x60
 8025fce:	2202      	movs	r2, #2
 8025fd0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025fd2:	68fb      	ldr	r3, [r7, #12]
 8025fd4:	015a      	lsls	r2, r3, #5
 8025fd6:	693b      	ldr	r3, [r7, #16]
 8025fd8:	4413      	add	r3, r2
 8025fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025fde:	681b      	ldr	r3, [r3, #0]
 8025fe0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025fe2:	68bb      	ldr	r3, [r7, #8]
 8025fe4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025fe8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025fea:	68bb      	ldr	r3, [r7, #8]
 8025fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025ff0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025ff2:	68fb      	ldr	r3, [r7, #12]
 8025ff4:	015a      	lsls	r2, r3, #5
 8025ff6:	693b      	ldr	r3, [r7, #16]
 8025ff8:	4413      	add	r3, r2
 8025ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ffe:	461a      	mov	r2, r3
 8026000:	68bb      	ldr	r3, [r7, #8]
 8026002:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8026004:	e050      	b.n	80260a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8026006:	687a      	ldr	r2, [r7, #4]
 8026008:	68fb      	ldr	r3, [r7, #12]
 802600a:	212c      	movs	r1, #44	; 0x2c
 802600c:	fb01 f303 	mul.w	r3, r1, r3
 8026010:	4413      	add	r3, r2
 8026012:	3361      	adds	r3, #97	; 0x61
 8026014:	781b      	ldrb	r3, [r3, #0]
 8026016:	2b03      	cmp	r3, #3
 8026018:	d122      	bne.n	8026060 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 802601a:	687a      	ldr	r2, [r7, #4]
 802601c:	68fb      	ldr	r3, [r7, #12]
 802601e:	212c      	movs	r1, #44	; 0x2c
 8026020:	fb01 f303 	mul.w	r3, r1, r3
 8026024:	4413      	add	r3, r2
 8026026:	3360      	adds	r3, #96	; 0x60
 8026028:	2202      	movs	r2, #2
 802602a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 802602c:	68fb      	ldr	r3, [r7, #12]
 802602e:	015a      	lsls	r2, r3, #5
 8026030:	693b      	ldr	r3, [r7, #16]
 8026032:	4413      	add	r3, r2
 8026034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026038:	681b      	ldr	r3, [r3, #0]
 802603a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802603c:	68bb      	ldr	r3, [r7, #8]
 802603e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8026042:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8026044:	68bb      	ldr	r3, [r7, #8]
 8026046:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802604a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 802604c:	68fb      	ldr	r3, [r7, #12]
 802604e:	015a      	lsls	r2, r3, #5
 8026050:	693b      	ldr	r3, [r7, #16]
 8026052:	4413      	add	r3, r2
 8026054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026058:	461a      	mov	r2, r3
 802605a:	68bb      	ldr	r3, [r7, #8]
 802605c:	6013      	str	r3, [r2, #0]
 802605e:	e023      	b.n	80260a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8026060:	687a      	ldr	r2, [r7, #4]
 8026062:	68fb      	ldr	r3, [r7, #12]
 8026064:	212c      	movs	r1, #44	; 0x2c
 8026066:	fb01 f303 	mul.w	r3, r1, r3
 802606a:	4413      	add	r3, r2
 802606c:	3361      	adds	r3, #97	; 0x61
 802606e:	781b      	ldrb	r3, [r3, #0]
 8026070:	2b07      	cmp	r3, #7
 8026072:	d119      	bne.n	80260a8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8026074:	687a      	ldr	r2, [r7, #4]
 8026076:	68fb      	ldr	r3, [r7, #12]
 8026078:	212c      	movs	r1, #44	; 0x2c
 802607a:	fb01 f303 	mul.w	r3, r1, r3
 802607e:	4413      	add	r3, r2
 8026080:	335c      	adds	r3, #92	; 0x5c
 8026082:	681b      	ldr	r3, [r3, #0]
 8026084:	1c5a      	adds	r2, r3, #1
 8026086:	6879      	ldr	r1, [r7, #4]
 8026088:	68fb      	ldr	r3, [r7, #12]
 802608a:	202c      	movs	r0, #44	; 0x2c
 802608c:	fb00 f303 	mul.w	r3, r0, r3
 8026090:	440b      	add	r3, r1
 8026092:	335c      	adds	r3, #92	; 0x5c
 8026094:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8026096:	687a      	ldr	r2, [r7, #4]
 8026098:	68fb      	ldr	r3, [r7, #12]
 802609a:	212c      	movs	r1, #44	; 0x2c
 802609c:	fb01 f303 	mul.w	r3, r1, r3
 80260a0:	4413      	add	r3, r2
 80260a2:	3360      	adds	r3, #96	; 0x60
 80260a4:	2204      	movs	r2, #4
 80260a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80260a8:	68fb      	ldr	r3, [r7, #12]
 80260aa:	015a      	lsls	r2, r3, #5
 80260ac:	693b      	ldr	r3, [r7, #16]
 80260ae:	4413      	add	r3, r2
 80260b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260b4:	461a      	mov	r2, r3
 80260b6:	2302      	movs	r3, #2
 80260b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80260ba:	68fb      	ldr	r3, [r7, #12]
 80260bc:	b2d9      	uxtb	r1, r3
 80260be:	687a      	ldr	r2, [r7, #4]
 80260c0:	68fb      	ldr	r3, [r7, #12]
 80260c2:	202c      	movs	r0, #44	; 0x2c
 80260c4:	fb00 f303 	mul.w	r3, r0, r3
 80260c8:	4413      	add	r3, r2
 80260ca:	3360      	adds	r3, #96	; 0x60
 80260cc:	781b      	ldrb	r3, [r3, #0]
 80260ce:	461a      	mov	r2, r3
 80260d0:	6878      	ldr	r0, [r7, #4]
 80260d2:	f013 fc67 	bl	80399a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80260d6:	e061      	b.n	802619c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80260d8:	68fb      	ldr	r3, [r7, #12]
 80260da:	015a      	lsls	r2, r3, #5
 80260dc:	693b      	ldr	r3, [r7, #16]
 80260de:	4413      	add	r3, r2
 80260e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260e4:	689b      	ldr	r3, [r3, #8]
 80260e6:	f003 0310 	and.w	r3, r3, #16
 80260ea:	2b10      	cmp	r3, #16
 80260ec:	d156      	bne.n	802619c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80260ee:	687a      	ldr	r2, [r7, #4]
 80260f0:	68fb      	ldr	r3, [r7, #12]
 80260f2:	212c      	movs	r1, #44	; 0x2c
 80260f4:	fb01 f303 	mul.w	r3, r1, r3
 80260f8:	4413      	add	r3, r2
 80260fa:	333f      	adds	r3, #63	; 0x3f
 80260fc:	781b      	ldrb	r3, [r3, #0]
 80260fe:	2b03      	cmp	r3, #3
 8026100:	d111      	bne.n	8026126 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8026102:	687a      	ldr	r2, [r7, #4]
 8026104:	68fb      	ldr	r3, [r7, #12]
 8026106:	212c      	movs	r1, #44	; 0x2c
 8026108:	fb01 f303 	mul.w	r3, r1, r3
 802610c:	4413      	add	r3, r2
 802610e:	335c      	adds	r3, #92	; 0x5c
 8026110:	2200      	movs	r2, #0
 8026112:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026114:	687b      	ldr	r3, [r7, #4]
 8026116:	681b      	ldr	r3, [r3, #0]
 8026118:	68fa      	ldr	r2, [r7, #12]
 802611a:	b2d2      	uxtb	r2, r2
 802611c:	4611      	mov	r1, r2
 802611e:	4618      	mov	r0, r3
 8026120:	f006 fa03 	bl	802c52a <USB_HC_Halt>
 8026124:	e031      	b.n	802618a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8026126:	687a      	ldr	r2, [r7, #4]
 8026128:	68fb      	ldr	r3, [r7, #12]
 802612a:	212c      	movs	r1, #44	; 0x2c
 802612c:	fb01 f303 	mul.w	r3, r1, r3
 8026130:	4413      	add	r3, r2
 8026132:	333f      	adds	r3, #63	; 0x3f
 8026134:	781b      	ldrb	r3, [r3, #0]
 8026136:	2b00      	cmp	r3, #0
 8026138:	d009      	beq.n	802614e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 802613a:	687a      	ldr	r2, [r7, #4]
 802613c:	68fb      	ldr	r3, [r7, #12]
 802613e:	212c      	movs	r1, #44	; 0x2c
 8026140:	fb01 f303 	mul.w	r3, r1, r3
 8026144:	4413      	add	r3, r2
 8026146:	333f      	adds	r3, #63	; 0x3f
 8026148:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 802614a:	2b02      	cmp	r3, #2
 802614c:	d11d      	bne.n	802618a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 802614e:	687a      	ldr	r2, [r7, #4]
 8026150:	68fb      	ldr	r3, [r7, #12]
 8026152:	212c      	movs	r1, #44	; 0x2c
 8026154:	fb01 f303 	mul.w	r3, r1, r3
 8026158:	4413      	add	r3, r2
 802615a:	335c      	adds	r3, #92	; 0x5c
 802615c:	2200      	movs	r2, #0
 802615e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8026160:	687b      	ldr	r3, [r7, #4]
 8026162:	691b      	ldr	r3, [r3, #16]
 8026164:	2b00      	cmp	r3, #0
 8026166:	d110      	bne.n	802618a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8026168:	687a      	ldr	r2, [r7, #4]
 802616a:	68fb      	ldr	r3, [r7, #12]
 802616c:	212c      	movs	r1, #44	; 0x2c
 802616e:	fb01 f303 	mul.w	r3, r1, r3
 8026172:	4413      	add	r3, r2
 8026174:	3361      	adds	r3, #97	; 0x61
 8026176:	2203      	movs	r2, #3
 8026178:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802617a:	687b      	ldr	r3, [r7, #4]
 802617c:	681b      	ldr	r3, [r3, #0]
 802617e:	68fa      	ldr	r2, [r7, #12]
 8026180:	b2d2      	uxtb	r2, r2
 8026182:	4611      	mov	r1, r2
 8026184:	4618      	mov	r0, r3
 8026186:	f006 f9d0 	bl	802c52a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 802618a:	68fb      	ldr	r3, [r7, #12]
 802618c:	015a      	lsls	r2, r3, #5
 802618e:	693b      	ldr	r3, [r7, #16]
 8026190:	4413      	add	r3, r2
 8026192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026196:	461a      	mov	r2, r3
 8026198:	2310      	movs	r3, #16
 802619a:	6093      	str	r3, [r2, #8]
}
 802619c:	bf00      	nop
 802619e:	3718      	adds	r7, #24
 80261a0:	46bd      	mov	sp, r7
 80261a2:	bd80      	pop	{r7, pc}

080261a4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80261a4:	b580      	push	{r7, lr}
 80261a6:	b088      	sub	sp, #32
 80261a8:	af00      	add	r7, sp, #0
 80261aa:	6078      	str	r0, [r7, #4]
 80261ac:	460b      	mov	r3, r1
 80261ae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80261b0:	687b      	ldr	r3, [r7, #4]
 80261b2:	681b      	ldr	r3, [r3, #0]
 80261b4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80261b6:	69fb      	ldr	r3, [r7, #28]
 80261b8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80261ba:	78fb      	ldrb	r3, [r7, #3]
 80261bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80261be:	697b      	ldr	r3, [r7, #20]
 80261c0:	015a      	lsls	r2, r3, #5
 80261c2:	69bb      	ldr	r3, [r7, #24]
 80261c4:	4413      	add	r3, r2
 80261c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261ca:	689b      	ldr	r3, [r3, #8]
 80261cc:	f003 0304 	and.w	r3, r3, #4
 80261d0:	2b04      	cmp	r3, #4
 80261d2:	d11a      	bne.n	802620a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80261d4:	697b      	ldr	r3, [r7, #20]
 80261d6:	015a      	lsls	r2, r3, #5
 80261d8:	69bb      	ldr	r3, [r7, #24]
 80261da:	4413      	add	r3, r2
 80261dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261e0:	461a      	mov	r2, r3
 80261e2:	2304      	movs	r3, #4
 80261e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80261e6:	687a      	ldr	r2, [r7, #4]
 80261e8:	697b      	ldr	r3, [r7, #20]
 80261ea:	212c      	movs	r1, #44	; 0x2c
 80261ec:	fb01 f303 	mul.w	r3, r1, r3
 80261f0:	4413      	add	r3, r2
 80261f2:	3361      	adds	r3, #97	; 0x61
 80261f4:	2206      	movs	r2, #6
 80261f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80261f8:	687b      	ldr	r3, [r7, #4]
 80261fa:	681b      	ldr	r3, [r3, #0]
 80261fc:	697a      	ldr	r2, [r7, #20]
 80261fe:	b2d2      	uxtb	r2, r2
 8026200:	4611      	mov	r1, r2
 8026202:	4618      	mov	r0, r3
 8026204:	f006 f991 	bl	802c52a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8026208:	e331      	b.n	802686e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 802620a:	697b      	ldr	r3, [r7, #20]
 802620c:	015a      	lsls	r2, r3, #5
 802620e:	69bb      	ldr	r3, [r7, #24]
 8026210:	4413      	add	r3, r2
 8026212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026216:	689b      	ldr	r3, [r3, #8]
 8026218:	f003 0320 	and.w	r3, r3, #32
 802621c:	2b20      	cmp	r3, #32
 802621e:	d12e      	bne.n	802627e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8026220:	697b      	ldr	r3, [r7, #20]
 8026222:	015a      	lsls	r2, r3, #5
 8026224:	69bb      	ldr	r3, [r7, #24]
 8026226:	4413      	add	r3, r2
 8026228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802622c:	461a      	mov	r2, r3
 802622e:	2320      	movs	r3, #32
 8026230:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8026232:	687a      	ldr	r2, [r7, #4]
 8026234:	697b      	ldr	r3, [r7, #20]
 8026236:	212c      	movs	r1, #44	; 0x2c
 8026238:	fb01 f303 	mul.w	r3, r1, r3
 802623c:	4413      	add	r3, r2
 802623e:	333d      	adds	r3, #61	; 0x3d
 8026240:	781b      	ldrb	r3, [r3, #0]
 8026242:	2b01      	cmp	r3, #1
 8026244:	f040 8313 	bne.w	802686e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8026248:	687a      	ldr	r2, [r7, #4]
 802624a:	697b      	ldr	r3, [r7, #20]
 802624c:	212c      	movs	r1, #44	; 0x2c
 802624e:	fb01 f303 	mul.w	r3, r1, r3
 8026252:	4413      	add	r3, r2
 8026254:	333d      	adds	r3, #61	; 0x3d
 8026256:	2200      	movs	r2, #0
 8026258:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 802625a:	687a      	ldr	r2, [r7, #4]
 802625c:	697b      	ldr	r3, [r7, #20]
 802625e:	212c      	movs	r1, #44	; 0x2c
 8026260:	fb01 f303 	mul.w	r3, r1, r3
 8026264:	4413      	add	r3, r2
 8026266:	3360      	adds	r3, #96	; 0x60
 8026268:	2202      	movs	r2, #2
 802626a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802626c:	687b      	ldr	r3, [r7, #4]
 802626e:	681b      	ldr	r3, [r3, #0]
 8026270:	697a      	ldr	r2, [r7, #20]
 8026272:	b2d2      	uxtb	r2, r2
 8026274:	4611      	mov	r1, r2
 8026276:	4618      	mov	r0, r3
 8026278:	f006 f957 	bl	802c52a <USB_HC_Halt>
}
 802627c:	e2f7      	b.n	802686e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 802627e:	697b      	ldr	r3, [r7, #20]
 8026280:	015a      	lsls	r2, r3, #5
 8026282:	69bb      	ldr	r3, [r7, #24]
 8026284:	4413      	add	r3, r2
 8026286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802628a:	689b      	ldr	r3, [r3, #8]
 802628c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8026290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026294:	d112      	bne.n	80262bc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8026296:	697b      	ldr	r3, [r7, #20]
 8026298:	015a      	lsls	r2, r3, #5
 802629a:	69bb      	ldr	r3, [r7, #24]
 802629c:	4413      	add	r3, r2
 802629e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80262a2:	461a      	mov	r2, r3
 80262a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80262a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80262aa:	687b      	ldr	r3, [r7, #4]
 80262ac:	681b      	ldr	r3, [r3, #0]
 80262ae:	697a      	ldr	r2, [r7, #20]
 80262b0:	b2d2      	uxtb	r2, r2
 80262b2:	4611      	mov	r1, r2
 80262b4:	4618      	mov	r0, r3
 80262b6:	f006 f938 	bl	802c52a <USB_HC_Halt>
}
 80262ba:	e2d8      	b.n	802686e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80262bc:	697b      	ldr	r3, [r7, #20]
 80262be:	015a      	lsls	r2, r3, #5
 80262c0:	69bb      	ldr	r3, [r7, #24]
 80262c2:	4413      	add	r3, r2
 80262c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80262c8:	689b      	ldr	r3, [r3, #8]
 80262ca:	f003 0301 	and.w	r3, r3, #1
 80262ce:	2b01      	cmp	r3, #1
 80262d0:	d140      	bne.n	8026354 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80262d2:	687a      	ldr	r2, [r7, #4]
 80262d4:	697b      	ldr	r3, [r7, #20]
 80262d6:	212c      	movs	r1, #44	; 0x2c
 80262d8:	fb01 f303 	mul.w	r3, r1, r3
 80262dc:	4413      	add	r3, r2
 80262de:	335c      	adds	r3, #92	; 0x5c
 80262e0:	2200      	movs	r2, #0
 80262e2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80262e4:	697b      	ldr	r3, [r7, #20]
 80262e6:	015a      	lsls	r2, r3, #5
 80262e8:	69bb      	ldr	r3, [r7, #24]
 80262ea:	4413      	add	r3, r2
 80262ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80262f0:	689b      	ldr	r3, [r3, #8]
 80262f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80262f6:	2b40      	cmp	r3, #64	; 0x40
 80262f8:	d111      	bne.n	802631e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80262fa:	687a      	ldr	r2, [r7, #4]
 80262fc:	697b      	ldr	r3, [r7, #20]
 80262fe:	212c      	movs	r1, #44	; 0x2c
 8026300:	fb01 f303 	mul.w	r3, r1, r3
 8026304:	4413      	add	r3, r2
 8026306:	333d      	adds	r3, #61	; 0x3d
 8026308:	2201      	movs	r2, #1
 802630a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 802630c:	697b      	ldr	r3, [r7, #20]
 802630e:	015a      	lsls	r2, r3, #5
 8026310:	69bb      	ldr	r3, [r7, #24]
 8026312:	4413      	add	r3, r2
 8026314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026318:	461a      	mov	r2, r3
 802631a:	2340      	movs	r3, #64	; 0x40
 802631c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 802631e:	697b      	ldr	r3, [r7, #20]
 8026320:	015a      	lsls	r2, r3, #5
 8026322:	69bb      	ldr	r3, [r7, #24]
 8026324:	4413      	add	r3, r2
 8026326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802632a:	461a      	mov	r2, r3
 802632c:	2301      	movs	r3, #1
 802632e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8026330:	687a      	ldr	r2, [r7, #4]
 8026332:	697b      	ldr	r3, [r7, #20]
 8026334:	212c      	movs	r1, #44	; 0x2c
 8026336:	fb01 f303 	mul.w	r3, r1, r3
 802633a:	4413      	add	r3, r2
 802633c:	3361      	adds	r3, #97	; 0x61
 802633e:	2201      	movs	r2, #1
 8026340:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026342:	687b      	ldr	r3, [r7, #4]
 8026344:	681b      	ldr	r3, [r3, #0]
 8026346:	697a      	ldr	r2, [r7, #20]
 8026348:	b2d2      	uxtb	r2, r2
 802634a:	4611      	mov	r1, r2
 802634c:	4618      	mov	r0, r3
 802634e:	f006 f8ec 	bl	802c52a <USB_HC_Halt>
}
 8026352:	e28c      	b.n	802686e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8026354:	697b      	ldr	r3, [r7, #20]
 8026356:	015a      	lsls	r2, r3, #5
 8026358:	69bb      	ldr	r3, [r7, #24]
 802635a:	4413      	add	r3, r2
 802635c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026360:	689b      	ldr	r3, [r3, #8]
 8026362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026366:	2b40      	cmp	r3, #64	; 0x40
 8026368:	d12c      	bne.n	80263c4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 802636a:	687a      	ldr	r2, [r7, #4]
 802636c:	697b      	ldr	r3, [r7, #20]
 802636e:	212c      	movs	r1, #44	; 0x2c
 8026370:	fb01 f303 	mul.w	r3, r1, r3
 8026374:	4413      	add	r3, r2
 8026376:	3361      	adds	r3, #97	; 0x61
 8026378:	2204      	movs	r2, #4
 802637a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 802637c:	687a      	ldr	r2, [r7, #4]
 802637e:	697b      	ldr	r3, [r7, #20]
 8026380:	212c      	movs	r1, #44	; 0x2c
 8026382:	fb01 f303 	mul.w	r3, r1, r3
 8026386:	4413      	add	r3, r2
 8026388:	333d      	adds	r3, #61	; 0x3d
 802638a:	2201      	movs	r2, #1
 802638c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 802638e:	687a      	ldr	r2, [r7, #4]
 8026390:	697b      	ldr	r3, [r7, #20]
 8026392:	212c      	movs	r1, #44	; 0x2c
 8026394:	fb01 f303 	mul.w	r3, r1, r3
 8026398:	4413      	add	r3, r2
 802639a:	335c      	adds	r3, #92	; 0x5c
 802639c:	2200      	movs	r2, #0
 802639e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80263a0:	687b      	ldr	r3, [r7, #4]
 80263a2:	681b      	ldr	r3, [r3, #0]
 80263a4:	697a      	ldr	r2, [r7, #20]
 80263a6:	b2d2      	uxtb	r2, r2
 80263a8:	4611      	mov	r1, r2
 80263aa:	4618      	mov	r0, r3
 80263ac:	f006 f8bd 	bl	802c52a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80263b0:	697b      	ldr	r3, [r7, #20]
 80263b2:	015a      	lsls	r2, r3, #5
 80263b4:	69bb      	ldr	r3, [r7, #24]
 80263b6:	4413      	add	r3, r2
 80263b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80263bc:	461a      	mov	r2, r3
 80263be:	2340      	movs	r3, #64	; 0x40
 80263c0:	6093      	str	r3, [r2, #8]
}
 80263c2:	e254      	b.n	802686e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80263c4:	697b      	ldr	r3, [r7, #20]
 80263c6:	015a      	lsls	r2, r3, #5
 80263c8:	69bb      	ldr	r3, [r7, #24]
 80263ca:	4413      	add	r3, r2
 80263cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80263d0:	689b      	ldr	r3, [r3, #8]
 80263d2:	f003 0308 	and.w	r3, r3, #8
 80263d6:	2b08      	cmp	r3, #8
 80263d8:	d11a      	bne.n	8026410 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80263da:	697b      	ldr	r3, [r7, #20]
 80263dc:	015a      	lsls	r2, r3, #5
 80263de:	69bb      	ldr	r3, [r7, #24]
 80263e0:	4413      	add	r3, r2
 80263e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80263e6:	461a      	mov	r2, r3
 80263e8:	2308      	movs	r3, #8
 80263ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80263ec:	687a      	ldr	r2, [r7, #4]
 80263ee:	697b      	ldr	r3, [r7, #20]
 80263f0:	212c      	movs	r1, #44	; 0x2c
 80263f2:	fb01 f303 	mul.w	r3, r1, r3
 80263f6:	4413      	add	r3, r2
 80263f8:	3361      	adds	r3, #97	; 0x61
 80263fa:	2205      	movs	r2, #5
 80263fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80263fe:	687b      	ldr	r3, [r7, #4]
 8026400:	681b      	ldr	r3, [r3, #0]
 8026402:	697a      	ldr	r2, [r7, #20]
 8026404:	b2d2      	uxtb	r2, r2
 8026406:	4611      	mov	r1, r2
 8026408:	4618      	mov	r0, r3
 802640a:	f006 f88e 	bl	802c52a <USB_HC_Halt>
}
 802640e:	e22e      	b.n	802686e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8026410:	697b      	ldr	r3, [r7, #20]
 8026412:	015a      	lsls	r2, r3, #5
 8026414:	69bb      	ldr	r3, [r7, #24]
 8026416:	4413      	add	r3, r2
 8026418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802641c:	689b      	ldr	r3, [r3, #8]
 802641e:	f003 0310 	and.w	r3, r3, #16
 8026422:	2b10      	cmp	r3, #16
 8026424:	d140      	bne.n	80264a8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8026426:	687a      	ldr	r2, [r7, #4]
 8026428:	697b      	ldr	r3, [r7, #20]
 802642a:	212c      	movs	r1, #44	; 0x2c
 802642c:	fb01 f303 	mul.w	r3, r1, r3
 8026430:	4413      	add	r3, r2
 8026432:	335c      	adds	r3, #92	; 0x5c
 8026434:	2200      	movs	r2, #0
 8026436:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8026438:	687a      	ldr	r2, [r7, #4]
 802643a:	697b      	ldr	r3, [r7, #20]
 802643c:	212c      	movs	r1, #44	; 0x2c
 802643e:	fb01 f303 	mul.w	r3, r1, r3
 8026442:	4413      	add	r3, r2
 8026444:	3361      	adds	r3, #97	; 0x61
 8026446:	2203      	movs	r2, #3
 8026448:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 802644a:	687a      	ldr	r2, [r7, #4]
 802644c:	697b      	ldr	r3, [r7, #20]
 802644e:	212c      	movs	r1, #44	; 0x2c
 8026450:	fb01 f303 	mul.w	r3, r1, r3
 8026454:	4413      	add	r3, r2
 8026456:	333d      	adds	r3, #61	; 0x3d
 8026458:	781b      	ldrb	r3, [r3, #0]
 802645a:	2b00      	cmp	r3, #0
 802645c:	d112      	bne.n	8026484 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 802645e:	687a      	ldr	r2, [r7, #4]
 8026460:	697b      	ldr	r3, [r7, #20]
 8026462:	212c      	movs	r1, #44	; 0x2c
 8026464:	fb01 f303 	mul.w	r3, r1, r3
 8026468:	4413      	add	r3, r2
 802646a:	333c      	adds	r3, #60	; 0x3c
 802646c:	781b      	ldrb	r3, [r3, #0]
 802646e:	2b00      	cmp	r3, #0
 8026470:	d108      	bne.n	8026484 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8026472:	687a      	ldr	r2, [r7, #4]
 8026474:	697b      	ldr	r3, [r7, #20]
 8026476:	212c      	movs	r1, #44	; 0x2c
 8026478:	fb01 f303 	mul.w	r3, r1, r3
 802647c:	4413      	add	r3, r2
 802647e:	333d      	adds	r3, #61	; 0x3d
 8026480:	2201      	movs	r2, #1
 8026482:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026484:	687b      	ldr	r3, [r7, #4]
 8026486:	681b      	ldr	r3, [r3, #0]
 8026488:	697a      	ldr	r2, [r7, #20]
 802648a:	b2d2      	uxtb	r2, r2
 802648c:	4611      	mov	r1, r2
 802648e:	4618      	mov	r0, r3
 8026490:	f006 f84b 	bl	802c52a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8026494:	697b      	ldr	r3, [r7, #20]
 8026496:	015a      	lsls	r2, r3, #5
 8026498:	69bb      	ldr	r3, [r7, #24]
 802649a:	4413      	add	r3, r2
 802649c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80264a0:	461a      	mov	r2, r3
 80264a2:	2310      	movs	r3, #16
 80264a4:	6093      	str	r3, [r2, #8]
}
 80264a6:	e1e2      	b.n	802686e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80264a8:	697b      	ldr	r3, [r7, #20]
 80264aa:	015a      	lsls	r2, r3, #5
 80264ac:	69bb      	ldr	r3, [r7, #24]
 80264ae:	4413      	add	r3, r2
 80264b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80264b4:	689b      	ldr	r3, [r3, #8]
 80264b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80264ba:	2b80      	cmp	r3, #128	; 0x80
 80264bc:	d164      	bne.n	8026588 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80264be:	687b      	ldr	r3, [r7, #4]
 80264c0:	691b      	ldr	r3, [r3, #16]
 80264c2:	2b00      	cmp	r3, #0
 80264c4:	d111      	bne.n	80264ea <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80264c6:	687a      	ldr	r2, [r7, #4]
 80264c8:	697b      	ldr	r3, [r7, #20]
 80264ca:	212c      	movs	r1, #44	; 0x2c
 80264cc:	fb01 f303 	mul.w	r3, r1, r3
 80264d0:	4413      	add	r3, r2
 80264d2:	3361      	adds	r3, #97	; 0x61
 80264d4:	2206      	movs	r2, #6
 80264d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80264d8:	687b      	ldr	r3, [r7, #4]
 80264da:	681b      	ldr	r3, [r3, #0]
 80264dc:	697a      	ldr	r2, [r7, #20]
 80264de:	b2d2      	uxtb	r2, r2
 80264e0:	4611      	mov	r1, r2
 80264e2:	4618      	mov	r0, r3
 80264e4:	f006 f821 	bl	802c52a <USB_HC_Halt>
 80264e8:	e044      	b.n	8026574 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80264ea:	687a      	ldr	r2, [r7, #4]
 80264ec:	697b      	ldr	r3, [r7, #20]
 80264ee:	212c      	movs	r1, #44	; 0x2c
 80264f0:	fb01 f303 	mul.w	r3, r1, r3
 80264f4:	4413      	add	r3, r2
 80264f6:	335c      	adds	r3, #92	; 0x5c
 80264f8:	681b      	ldr	r3, [r3, #0]
 80264fa:	1c5a      	adds	r2, r3, #1
 80264fc:	6879      	ldr	r1, [r7, #4]
 80264fe:	697b      	ldr	r3, [r7, #20]
 8026500:	202c      	movs	r0, #44	; 0x2c
 8026502:	fb00 f303 	mul.w	r3, r0, r3
 8026506:	440b      	add	r3, r1
 8026508:	335c      	adds	r3, #92	; 0x5c
 802650a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 802650c:	687a      	ldr	r2, [r7, #4]
 802650e:	697b      	ldr	r3, [r7, #20]
 8026510:	212c      	movs	r1, #44	; 0x2c
 8026512:	fb01 f303 	mul.w	r3, r1, r3
 8026516:	4413      	add	r3, r2
 8026518:	335c      	adds	r3, #92	; 0x5c
 802651a:	681b      	ldr	r3, [r3, #0]
 802651c:	2b02      	cmp	r3, #2
 802651e:	d920      	bls.n	8026562 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8026520:	687a      	ldr	r2, [r7, #4]
 8026522:	697b      	ldr	r3, [r7, #20]
 8026524:	212c      	movs	r1, #44	; 0x2c
 8026526:	fb01 f303 	mul.w	r3, r1, r3
 802652a:	4413      	add	r3, r2
 802652c:	335c      	adds	r3, #92	; 0x5c
 802652e:	2200      	movs	r2, #0
 8026530:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8026532:	687a      	ldr	r2, [r7, #4]
 8026534:	697b      	ldr	r3, [r7, #20]
 8026536:	212c      	movs	r1, #44	; 0x2c
 8026538:	fb01 f303 	mul.w	r3, r1, r3
 802653c:	4413      	add	r3, r2
 802653e:	3360      	adds	r3, #96	; 0x60
 8026540:	2204      	movs	r2, #4
 8026542:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8026544:	697b      	ldr	r3, [r7, #20]
 8026546:	b2d9      	uxtb	r1, r3
 8026548:	687a      	ldr	r2, [r7, #4]
 802654a:	697b      	ldr	r3, [r7, #20]
 802654c:	202c      	movs	r0, #44	; 0x2c
 802654e:	fb00 f303 	mul.w	r3, r0, r3
 8026552:	4413      	add	r3, r2
 8026554:	3360      	adds	r3, #96	; 0x60
 8026556:	781b      	ldrb	r3, [r3, #0]
 8026558:	461a      	mov	r2, r3
 802655a:	6878      	ldr	r0, [r7, #4]
 802655c:	f013 fa22 	bl	80399a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8026560:	e008      	b.n	8026574 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026562:	687a      	ldr	r2, [r7, #4]
 8026564:	697b      	ldr	r3, [r7, #20]
 8026566:	212c      	movs	r1, #44	; 0x2c
 8026568:	fb01 f303 	mul.w	r3, r1, r3
 802656c:	4413      	add	r3, r2
 802656e:	3360      	adds	r3, #96	; 0x60
 8026570:	2202      	movs	r2, #2
 8026572:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8026574:	697b      	ldr	r3, [r7, #20]
 8026576:	015a      	lsls	r2, r3, #5
 8026578:	69bb      	ldr	r3, [r7, #24]
 802657a:	4413      	add	r3, r2
 802657c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026580:	461a      	mov	r2, r3
 8026582:	2380      	movs	r3, #128	; 0x80
 8026584:	6093      	str	r3, [r2, #8]
}
 8026586:	e172      	b.n	802686e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8026588:	697b      	ldr	r3, [r7, #20]
 802658a:	015a      	lsls	r2, r3, #5
 802658c:	69bb      	ldr	r3, [r7, #24]
 802658e:	4413      	add	r3, r2
 8026590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026594:	689b      	ldr	r3, [r3, #8]
 8026596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802659a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802659e:	d11b      	bne.n	80265d8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80265a0:	687a      	ldr	r2, [r7, #4]
 80265a2:	697b      	ldr	r3, [r7, #20]
 80265a4:	212c      	movs	r1, #44	; 0x2c
 80265a6:	fb01 f303 	mul.w	r3, r1, r3
 80265aa:	4413      	add	r3, r2
 80265ac:	3361      	adds	r3, #97	; 0x61
 80265ae:	2208      	movs	r2, #8
 80265b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80265b2:	687b      	ldr	r3, [r7, #4]
 80265b4:	681b      	ldr	r3, [r3, #0]
 80265b6:	697a      	ldr	r2, [r7, #20]
 80265b8:	b2d2      	uxtb	r2, r2
 80265ba:	4611      	mov	r1, r2
 80265bc:	4618      	mov	r0, r3
 80265be:	f005 ffb4 	bl	802c52a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80265c2:	697b      	ldr	r3, [r7, #20]
 80265c4:	015a      	lsls	r2, r3, #5
 80265c6:	69bb      	ldr	r3, [r7, #24]
 80265c8:	4413      	add	r3, r2
 80265ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80265ce:	461a      	mov	r2, r3
 80265d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80265d4:	6093      	str	r3, [r2, #8]
}
 80265d6:	e14a      	b.n	802686e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80265d8:	697b      	ldr	r3, [r7, #20]
 80265da:	015a      	lsls	r2, r3, #5
 80265dc:	69bb      	ldr	r3, [r7, #24]
 80265de:	4413      	add	r3, r2
 80265e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80265e4:	689b      	ldr	r3, [r3, #8]
 80265e6:	f003 0302 	and.w	r3, r3, #2
 80265ea:	2b02      	cmp	r3, #2
 80265ec:	f040 813f 	bne.w	802686e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80265f0:	687a      	ldr	r2, [r7, #4]
 80265f2:	697b      	ldr	r3, [r7, #20]
 80265f4:	212c      	movs	r1, #44	; 0x2c
 80265f6:	fb01 f303 	mul.w	r3, r1, r3
 80265fa:	4413      	add	r3, r2
 80265fc:	3361      	adds	r3, #97	; 0x61
 80265fe:	781b      	ldrb	r3, [r3, #0]
 8026600:	2b01      	cmp	r3, #1
 8026602:	d17d      	bne.n	8026700 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8026604:	687a      	ldr	r2, [r7, #4]
 8026606:	697b      	ldr	r3, [r7, #20]
 8026608:	212c      	movs	r1, #44	; 0x2c
 802660a:	fb01 f303 	mul.w	r3, r1, r3
 802660e:	4413      	add	r3, r2
 8026610:	3360      	adds	r3, #96	; 0x60
 8026612:	2201      	movs	r2, #1
 8026614:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8026616:	687a      	ldr	r2, [r7, #4]
 8026618:	697b      	ldr	r3, [r7, #20]
 802661a:	212c      	movs	r1, #44	; 0x2c
 802661c:	fb01 f303 	mul.w	r3, r1, r3
 8026620:	4413      	add	r3, r2
 8026622:	333f      	adds	r3, #63	; 0x3f
 8026624:	781b      	ldrb	r3, [r3, #0]
 8026626:	2b02      	cmp	r3, #2
 8026628:	d00a      	beq.n	8026640 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 802662a:	687a      	ldr	r2, [r7, #4]
 802662c:	697b      	ldr	r3, [r7, #20]
 802662e:	212c      	movs	r1, #44	; 0x2c
 8026630:	fb01 f303 	mul.w	r3, r1, r3
 8026634:	4413      	add	r3, r2
 8026636:	333f      	adds	r3, #63	; 0x3f
 8026638:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 802663a:	2b03      	cmp	r3, #3
 802663c:	f040 8100 	bne.w	8026840 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8026640:	687b      	ldr	r3, [r7, #4]
 8026642:	691b      	ldr	r3, [r3, #16]
 8026644:	2b00      	cmp	r3, #0
 8026646:	d113      	bne.n	8026670 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8026648:	687a      	ldr	r2, [r7, #4]
 802664a:	697b      	ldr	r3, [r7, #20]
 802664c:	212c      	movs	r1, #44	; 0x2c
 802664e:	fb01 f303 	mul.w	r3, r1, r3
 8026652:	4413      	add	r3, r2
 8026654:	3355      	adds	r3, #85	; 0x55
 8026656:	781b      	ldrb	r3, [r3, #0]
 8026658:	f083 0301 	eor.w	r3, r3, #1
 802665c:	b2d8      	uxtb	r0, r3
 802665e:	687a      	ldr	r2, [r7, #4]
 8026660:	697b      	ldr	r3, [r7, #20]
 8026662:	212c      	movs	r1, #44	; 0x2c
 8026664:	fb01 f303 	mul.w	r3, r1, r3
 8026668:	4413      	add	r3, r2
 802666a:	3355      	adds	r3, #85	; 0x55
 802666c:	4602      	mov	r2, r0
 802666e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8026670:	687b      	ldr	r3, [r7, #4]
 8026672:	691b      	ldr	r3, [r3, #16]
 8026674:	2b01      	cmp	r3, #1
 8026676:	f040 80e3 	bne.w	8026840 <HCD_HC_OUT_IRQHandler+0x69c>
 802667a:	687a      	ldr	r2, [r7, #4]
 802667c:	697b      	ldr	r3, [r7, #20]
 802667e:	212c      	movs	r1, #44	; 0x2c
 8026680:	fb01 f303 	mul.w	r3, r1, r3
 8026684:	4413      	add	r3, r2
 8026686:	334c      	adds	r3, #76	; 0x4c
 8026688:	681b      	ldr	r3, [r3, #0]
 802668a:	2b00      	cmp	r3, #0
 802668c:	f000 80d8 	beq.w	8026840 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8026690:	687a      	ldr	r2, [r7, #4]
 8026692:	697b      	ldr	r3, [r7, #20]
 8026694:	212c      	movs	r1, #44	; 0x2c
 8026696:	fb01 f303 	mul.w	r3, r1, r3
 802669a:	4413      	add	r3, r2
 802669c:	334c      	adds	r3, #76	; 0x4c
 802669e:	681b      	ldr	r3, [r3, #0]
 80266a0:	6879      	ldr	r1, [r7, #4]
 80266a2:	697a      	ldr	r2, [r7, #20]
 80266a4:	202c      	movs	r0, #44	; 0x2c
 80266a6:	fb00 f202 	mul.w	r2, r0, r2
 80266aa:	440a      	add	r2, r1
 80266ac:	3240      	adds	r2, #64	; 0x40
 80266ae:	8812      	ldrh	r2, [r2, #0]
 80266b0:	4413      	add	r3, r2
 80266b2:	3b01      	subs	r3, #1
 80266b4:	6879      	ldr	r1, [r7, #4]
 80266b6:	697a      	ldr	r2, [r7, #20]
 80266b8:	202c      	movs	r0, #44	; 0x2c
 80266ba:	fb00 f202 	mul.w	r2, r0, r2
 80266be:	440a      	add	r2, r1
 80266c0:	3240      	adds	r2, #64	; 0x40
 80266c2:	8812      	ldrh	r2, [r2, #0]
 80266c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80266c8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80266ca:	68fb      	ldr	r3, [r7, #12]
 80266cc:	f003 0301 	and.w	r3, r3, #1
 80266d0:	2b00      	cmp	r3, #0
 80266d2:	f000 80b5 	beq.w	8026840 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80266d6:	687a      	ldr	r2, [r7, #4]
 80266d8:	697b      	ldr	r3, [r7, #20]
 80266da:	212c      	movs	r1, #44	; 0x2c
 80266dc:	fb01 f303 	mul.w	r3, r1, r3
 80266e0:	4413      	add	r3, r2
 80266e2:	3355      	adds	r3, #85	; 0x55
 80266e4:	781b      	ldrb	r3, [r3, #0]
 80266e6:	f083 0301 	eor.w	r3, r3, #1
 80266ea:	b2d8      	uxtb	r0, r3
 80266ec:	687a      	ldr	r2, [r7, #4]
 80266ee:	697b      	ldr	r3, [r7, #20]
 80266f0:	212c      	movs	r1, #44	; 0x2c
 80266f2:	fb01 f303 	mul.w	r3, r1, r3
 80266f6:	4413      	add	r3, r2
 80266f8:	3355      	adds	r3, #85	; 0x55
 80266fa:	4602      	mov	r2, r0
 80266fc:	701a      	strb	r2, [r3, #0]
 80266fe:	e09f      	b.n	8026840 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8026700:	687a      	ldr	r2, [r7, #4]
 8026702:	697b      	ldr	r3, [r7, #20]
 8026704:	212c      	movs	r1, #44	; 0x2c
 8026706:	fb01 f303 	mul.w	r3, r1, r3
 802670a:	4413      	add	r3, r2
 802670c:	3361      	adds	r3, #97	; 0x61
 802670e:	781b      	ldrb	r3, [r3, #0]
 8026710:	2b03      	cmp	r3, #3
 8026712:	d109      	bne.n	8026728 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026714:	687a      	ldr	r2, [r7, #4]
 8026716:	697b      	ldr	r3, [r7, #20]
 8026718:	212c      	movs	r1, #44	; 0x2c
 802671a:	fb01 f303 	mul.w	r3, r1, r3
 802671e:	4413      	add	r3, r2
 8026720:	3360      	adds	r3, #96	; 0x60
 8026722:	2202      	movs	r2, #2
 8026724:	701a      	strb	r2, [r3, #0]
 8026726:	e08b      	b.n	8026840 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8026728:	687a      	ldr	r2, [r7, #4]
 802672a:	697b      	ldr	r3, [r7, #20]
 802672c:	212c      	movs	r1, #44	; 0x2c
 802672e:	fb01 f303 	mul.w	r3, r1, r3
 8026732:	4413      	add	r3, r2
 8026734:	3361      	adds	r3, #97	; 0x61
 8026736:	781b      	ldrb	r3, [r3, #0]
 8026738:	2b04      	cmp	r3, #4
 802673a:	d109      	bne.n	8026750 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 802673c:	687a      	ldr	r2, [r7, #4]
 802673e:	697b      	ldr	r3, [r7, #20]
 8026740:	212c      	movs	r1, #44	; 0x2c
 8026742:	fb01 f303 	mul.w	r3, r1, r3
 8026746:	4413      	add	r3, r2
 8026748:	3360      	adds	r3, #96	; 0x60
 802674a:	2202      	movs	r2, #2
 802674c:	701a      	strb	r2, [r3, #0]
 802674e:	e077      	b.n	8026840 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8026750:	687a      	ldr	r2, [r7, #4]
 8026752:	697b      	ldr	r3, [r7, #20]
 8026754:	212c      	movs	r1, #44	; 0x2c
 8026756:	fb01 f303 	mul.w	r3, r1, r3
 802675a:	4413      	add	r3, r2
 802675c:	3361      	adds	r3, #97	; 0x61
 802675e:	781b      	ldrb	r3, [r3, #0]
 8026760:	2b05      	cmp	r3, #5
 8026762:	d109      	bne.n	8026778 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8026764:	687a      	ldr	r2, [r7, #4]
 8026766:	697b      	ldr	r3, [r7, #20]
 8026768:	212c      	movs	r1, #44	; 0x2c
 802676a:	fb01 f303 	mul.w	r3, r1, r3
 802676e:	4413      	add	r3, r2
 8026770:	3360      	adds	r3, #96	; 0x60
 8026772:	2205      	movs	r2, #5
 8026774:	701a      	strb	r2, [r3, #0]
 8026776:	e063      	b.n	8026840 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8026778:	687a      	ldr	r2, [r7, #4]
 802677a:	697b      	ldr	r3, [r7, #20]
 802677c:	212c      	movs	r1, #44	; 0x2c
 802677e:	fb01 f303 	mul.w	r3, r1, r3
 8026782:	4413      	add	r3, r2
 8026784:	3361      	adds	r3, #97	; 0x61
 8026786:	781b      	ldrb	r3, [r3, #0]
 8026788:	2b06      	cmp	r3, #6
 802678a:	d009      	beq.n	80267a0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 802678c:	687a      	ldr	r2, [r7, #4]
 802678e:	697b      	ldr	r3, [r7, #20]
 8026790:	212c      	movs	r1, #44	; 0x2c
 8026792:	fb01 f303 	mul.w	r3, r1, r3
 8026796:	4413      	add	r3, r2
 8026798:	3361      	adds	r3, #97	; 0x61
 802679a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 802679c:	2b08      	cmp	r3, #8
 802679e:	d14f      	bne.n	8026840 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80267a0:	687a      	ldr	r2, [r7, #4]
 80267a2:	697b      	ldr	r3, [r7, #20]
 80267a4:	212c      	movs	r1, #44	; 0x2c
 80267a6:	fb01 f303 	mul.w	r3, r1, r3
 80267aa:	4413      	add	r3, r2
 80267ac:	335c      	adds	r3, #92	; 0x5c
 80267ae:	681b      	ldr	r3, [r3, #0]
 80267b0:	1c5a      	adds	r2, r3, #1
 80267b2:	6879      	ldr	r1, [r7, #4]
 80267b4:	697b      	ldr	r3, [r7, #20]
 80267b6:	202c      	movs	r0, #44	; 0x2c
 80267b8:	fb00 f303 	mul.w	r3, r0, r3
 80267bc:	440b      	add	r3, r1
 80267be:	335c      	adds	r3, #92	; 0x5c
 80267c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80267c2:	687a      	ldr	r2, [r7, #4]
 80267c4:	697b      	ldr	r3, [r7, #20]
 80267c6:	212c      	movs	r1, #44	; 0x2c
 80267c8:	fb01 f303 	mul.w	r3, r1, r3
 80267cc:	4413      	add	r3, r2
 80267ce:	335c      	adds	r3, #92	; 0x5c
 80267d0:	681b      	ldr	r3, [r3, #0]
 80267d2:	2b02      	cmp	r3, #2
 80267d4:	d912      	bls.n	80267fc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80267d6:	687a      	ldr	r2, [r7, #4]
 80267d8:	697b      	ldr	r3, [r7, #20]
 80267da:	212c      	movs	r1, #44	; 0x2c
 80267dc:	fb01 f303 	mul.w	r3, r1, r3
 80267e0:	4413      	add	r3, r2
 80267e2:	335c      	adds	r3, #92	; 0x5c
 80267e4:	2200      	movs	r2, #0
 80267e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80267e8:	687a      	ldr	r2, [r7, #4]
 80267ea:	697b      	ldr	r3, [r7, #20]
 80267ec:	212c      	movs	r1, #44	; 0x2c
 80267ee:	fb01 f303 	mul.w	r3, r1, r3
 80267f2:	4413      	add	r3, r2
 80267f4:	3360      	adds	r3, #96	; 0x60
 80267f6:	2204      	movs	r2, #4
 80267f8:	701a      	strb	r2, [r3, #0]
 80267fa:	e021      	b.n	8026840 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80267fc:	687a      	ldr	r2, [r7, #4]
 80267fe:	697b      	ldr	r3, [r7, #20]
 8026800:	212c      	movs	r1, #44	; 0x2c
 8026802:	fb01 f303 	mul.w	r3, r1, r3
 8026806:	4413      	add	r3, r2
 8026808:	3360      	adds	r3, #96	; 0x60
 802680a:	2202      	movs	r2, #2
 802680c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 802680e:	697b      	ldr	r3, [r7, #20]
 8026810:	015a      	lsls	r2, r3, #5
 8026812:	69bb      	ldr	r3, [r7, #24]
 8026814:	4413      	add	r3, r2
 8026816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802681a:	681b      	ldr	r3, [r3, #0]
 802681c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802681e:	693b      	ldr	r3, [r7, #16]
 8026820:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8026824:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8026826:	693b      	ldr	r3, [r7, #16]
 8026828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802682c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 802682e:	697b      	ldr	r3, [r7, #20]
 8026830:	015a      	lsls	r2, r3, #5
 8026832:	69bb      	ldr	r3, [r7, #24]
 8026834:	4413      	add	r3, r2
 8026836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802683a:	461a      	mov	r2, r3
 802683c:	693b      	ldr	r3, [r7, #16]
 802683e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8026840:	697b      	ldr	r3, [r7, #20]
 8026842:	015a      	lsls	r2, r3, #5
 8026844:	69bb      	ldr	r3, [r7, #24]
 8026846:	4413      	add	r3, r2
 8026848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802684c:	461a      	mov	r2, r3
 802684e:	2302      	movs	r3, #2
 8026850:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8026852:	697b      	ldr	r3, [r7, #20]
 8026854:	b2d9      	uxtb	r1, r3
 8026856:	687a      	ldr	r2, [r7, #4]
 8026858:	697b      	ldr	r3, [r7, #20]
 802685a:	202c      	movs	r0, #44	; 0x2c
 802685c:	fb00 f303 	mul.w	r3, r0, r3
 8026860:	4413      	add	r3, r2
 8026862:	3360      	adds	r3, #96	; 0x60
 8026864:	781b      	ldrb	r3, [r3, #0]
 8026866:	461a      	mov	r2, r3
 8026868:	6878      	ldr	r0, [r7, #4]
 802686a:	f013 f89b 	bl	80399a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 802686e:	bf00      	nop
 8026870:	3720      	adds	r7, #32
 8026872:	46bd      	mov	sp, r7
 8026874:	bd80      	pop	{r7, pc}

08026876 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8026876:	b580      	push	{r7, lr}
 8026878:	b08a      	sub	sp, #40	; 0x28
 802687a:	af00      	add	r7, sp, #0
 802687c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 802687e:	687b      	ldr	r3, [r7, #4]
 8026880:	681b      	ldr	r3, [r3, #0]
 8026882:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026886:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8026888:	687b      	ldr	r3, [r7, #4]
 802688a:	681b      	ldr	r3, [r3, #0]
 802688c:	6a1b      	ldr	r3, [r3, #32]
 802688e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8026890:	69fb      	ldr	r3, [r7, #28]
 8026892:	f003 030f 	and.w	r3, r3, #15
 8026896:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8026898:	69fb      	ldr	r3, [r7, #28]
 802689a:	0c5b      	lsrs	r3, r3, #17
 802689c:	f003 030f 	and.w	r3, r3, #15
 80268a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80268a2:	69fb      	ldr	r3, [r7, #28]
 80268a4:	091b      	lsrs	r3, r3, #4
 80268a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80268aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80268ac:	697b      	ldr	r3, [r7, #20]
 80268ae:	2b02      	cmp	r3, #2
 80268b0:	d004      	beq.n	80268bc <HCD_RXQLVL_IRQHandler+0x46>
 80268b2:	697b      	ldr	r3, [r7, #20]
 80268b4:	2b05      	cmp	r3, #5
 80268b6:	f000 80a9 	beq.w	8026a0c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80268ba:	e0aa      	b.n	8026a12 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80268bc:	693b      	ldr	r3, [r7, #16]
 80268be:	2b00      	cmp	r3, #0
 80268c0:	f000 80a6 	beq.w	8026a10 <HCD_RXQLVL_IRQHandler+0x19a>
 80268c4:	687a      	ldr	r2, [r7, #4]
 80268c6:	69bb      	ldr	r3, [r7, #24]
 80268c8:	212c      	movs	r1, #44	; 0x2c
 80268ca:	fb01 f303 	mul.w	r3, r1, r3
 80268ce:	4413      	add	r3, r2
 80268d0:	3344      	adds	r3, #68	; 0x44
 80268d2:	681b      	ldr	r3, [r3, #0]
 80268d4:	2b00      	cmp	r3, #0
 80268d6:	f000 809b 	beq.w	8026a10 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80268da:	687a      	ldr	r2, [r7, #4]
 80268dc:	69bb      	ldr	r3, [r7, #24]
 80268de:	212c      	movs	r1, #44	; 0x2c
 80268e0:	fb01 f303 	mul.w	r3, r1, r3
 80268e4:	4413      	add	r3, r2
 80268e6:	3350      	adds	r3, #80	; 0x50
 80268e8:	681a      	ldr	r2, [r3, #0]
 80268ea:	693b      	ldr	r3, [r7, #16]
 80268ec:	441a      	add	r2, r3
 80268ee:	6879      	ldr	r1, [r7, #4]
 80268f0:	69bb      	ldr	r3, [r7, #24]
 80268f2:	202c      	movs	r0, #44	; 0x2c
 80268f4:	fb00 f303 	mul.w	r3, r0, r3
 80268f8:	440b      	add	r3, r1
 80268fa:	334c      	adds	r3, #76	; 0x4c
 80268fc:	681b      	ldr	r3, [r3, #0]
 80268fe:	429a      	cmp	r2, r3
 8026900:	d87a      	bhi.n	80269f8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8026902:	687b      	ldr	r3, [r7, #4]
 8026904:	6818      	ldr	r0, [r3, #0]
 8026906:	687a      	ldr	r2, [r7, #4]
 8026908:	69bb      	ldr	r3, [r7, #24]
 802690a:	212c      	movs	r1, #44	; 0x2c
 802690c:	fb01 f303 	mul.w	r3, r1, r3
 8026910:	4413      	add	r3, r2
 8026912:	3344      	adds	r3, #68	; 0x44
 8026914:	681b      	ldr	r3, [r3, #0]
 8026916:	693a      	ldr	r2, [r7, #16]
 8026918:	b292      	uxth	r2, r2
 802691a:	4619      	mov	r1, r3
 802691c:	f005 f962 	bl	802bbe4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8026920:	687a      	ldr	r2, [r7, #4]
 8026922:	69bb      	ldr	r3, [r7, #24]
 8026924:	212c      	movs	r1, #44	; 0x2c
 8026926:	fb01 f303 	mul.w	r3, r1, r3
 802692a:	4413      	add	r3, r2
 802692c:	3344      	adds	r3, #68	; 0x44
 802692e:	681a      	ldr	r2, [r3, #0]
 8026930:	693b      	ldr	r3, [r7, #16]
 8026932:	441a      	add	r2, r3
 8026934:	6879      	ldr	r1, [r7, #4]
 8026936:	69bb      	ldr	r3, [r7, #24]
 8026938:	202c      	movs	r0, #44	; 0x2c
 802693a:	fb00 f303 	mul.w	r3, r0, r3
 802693e:	440b      	add	r3, r1
 8026940:	3344      	adds	r3, #68	; 0x44
 8026942:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8026944:	687a      	ldr	r2, [r7, #4]
 8026946:	69bb      	ldr	r3, [r7, #24]
 8026948:	212c      	movs	r1, #44	; 0x2c
 802694a:	fb01 f303 	mul.w	r3, r1, r3
 802694e:	4413      	add	r3, r2
 8026950:	3350      	adds	r3, #80	; 0x50
 8026952:	681a      	ldr	r2, [r3, #0]
 8026954:	693b      	ldr	r3, [r7, #16]
 8026956:	441a      	add	r2, r3
 8026958:	6879      	ldr	r1, [r7, #4]
 802695a:	69bb      	ldr	r3, [r7, #24]
 802695c:	202c      	movs	r0, #44	; 0x2c
 802695e:	fb00 f303 	mul.w	r3, r0, r3
 8026962:	440b      	add	r3, r1
 8026964:	3350      	adds	r3, #80	; 0x50
 8026966:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8026968:	69bb      	ldr	r3, [r7, #24]
 802696a:	015a      	lsls	r2, r3, #5
 802696c:	6a3b      	ldr	r3, [r7, #32]
 802696e:	4413      	add	r3, r2
 8026970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026974:	691b      	ldr	r3, [r3, #16]
 8026976:	0cdb      	lsrs	r3, r3, #19
 8026978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802697c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 802697e:	687a      	ldr	r2, [r7, #4]
 8026980:	69bb      	ldr	r3, [r7, #24]
 8026982:	212c      	movs	r1, #44	; 0x2c
 8026984:	fb01 f303 	mul.w	r3, r1, r3
 8026988:	4413      	add	r3, r2
 802698a:	3340      	adds	r3, #64	; 0x40
 802698c:	881b      	ldrh	r3, [r3, #0]
 802698e:	461a      	mov	r2, r3
 8026990:	693b      	ldr	r3, [r7, #16]
 8026992:	4293      	cmp	r3, r2
 8026994:	d13c      	bne.n	8026a10 <HCD_RXQLVL_IRQHandler+0x19a>
 8026996:	68fb      	ldr	r3, [r7, #12]
 8026998:	2b00      	cmp	r3, #0
 802699a:	d039      	beq.n	8026a10 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 802699c:	69bb      	ldr	r3, [r7, #24]
 802699e:	015a      	lsls	r2, r3, #5
 80269a0:	6a3b      	ldr	r3, [r7, #32]
 80269a2:	4413      	add	r3, r2
 80269a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80269a8:	681b      	ldr	r3, [r3, #0]
 80269aa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80269ac:	68bb      	ldr	r3, [r7, #8]
 80269ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80269b2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80269b4:	68bb      	ldr	r3, [r7, #8]
 80269b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80269ba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80269bc:	69bb      	ldr	r3, [r7, #24]
 80269be:	015a      	lsls	r2, r3, #5
 80269c0:	6a3b      	ldr	r3, [r7, #32]
 80269c2:	4413      	add	r3, r2
 80269c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80269c8:	461a      	mov	r2, r3
 80269ca:	68bb      	ldr	r3, [r7, #8]
 80269cc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80269ce:	687a      	ldr	r2, [r7, #4]
 80269d0:	69bb      	ldr	r3, [r7, #24]
 80269d2:	212c      	movs	r1, #44	; 0x2c
 80269d4:	fb01 f303 	mul.w	r3, r1, r3
 80269d8:	4413      	add	r3, r2
 80269da:	3354      	adds	r3, #84	; 0x54
 80269dc:	781b      	ldrb	r3, [r3, #0]
 80269de:	f083 0301 	eor.w	r3, r3, #1
 80269e2:	b2d8      	uxtb	r0, r3
 80269e4:	687a      	ldr	r2, [r7, #4]
 80269e6:	69bb      	ldr	r3, [r7, #24]
 80269e8:	212c      	movs	r1, #44	; 0x2c
 80269ea:	fb01 f303 	mul.w	r3, r1, r3
 80269ee:	4413      	add	r3, r2
 80269f0:	3354      	adds	r3, #84	; 0x54
 80269f2:	4602      	mov	r2, r0
 80269f4:	701a      	strb	r2, [r3, #0]
      break;
 80269f6:	e00b      	b.n	8026a10 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80269f8:	687a      	ldr	r2, [r7, #4]
 80269fa:	69bb      	ldr	r3, [r7, #24]
 80269fc:	212c      	movs	r1, #44	; 0x2c
 80269fe:	fb01 f303 	mul.w	r3, r1, r3
 8026a02:	4413      	add	r3, r2
 8026a04:	3360      	adds	r3, #96	; 0x60
 8026a06:	2204      	movs	r2, #4
 8026a08:	701a      	strb	r2, [r3, #0]
      break;
 8026a0a:	e001      	b.n	8026a10 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8026a0c:	bf00      	nop
 8026a0e:	e000      	b.n	8026a12 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8026a10:	bf00      	nop
  }
}
 8026a12:	bf00      	nop
 8026a14:	3728      	adds	r7, #40	; 0x28
 8026a16:	46bd      	mov	sp, r7
 8026a18:	bd80      	pop	{r7, pc}

08026a1a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8026a1a:	b580      	push	{r7, lr}
 8026a1c:	b086      	sub	sp, #24
 8026a1e:	af00      	add	r7, sp, #0
 8026a20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8026a22:	687b      	ldr	r3, [r7, #4]
 8026a24:	681b      	ldr	r3, [r3, #0]
 8026a26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026a28:	697b      	ldr	r3, [r7, #20]
 8026a2a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8026a2c:	693b      	ldr	r3, [r7, #16]
 8026a2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026a32:	681b      	ldr	r3, [r3, #0]
 8026a34:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8026a36:	693b      	ldr	r3, [r7, #16]
 8026a38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026a3c:	681b      	ldr	r3, [r3, #0]
 8026a3e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8026a40:	68bb      	ldr	r3, [r7, #8]
 8026a42:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8026a46:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8026a48:	68fb      	ldr	r3, [r7, #12]
 8026a4a:	f003 0302 	and.w	r3, r3, #2
 8026a4e:	2b02      	cmp	r3, #2
 8026a50:	d10b      	bne.n	8026a6a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8026a52:	68fb      	ldr	r3, [r7, #12]
 8026a54:	f003 0301 	and.w	r3, r3, #1
 8026a58:	2b01      	cmp	r3, #1
 8026a5a:	d102      	bne.n	8026a62 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8026a5c:	6878      	ldr	r0, [r7, #4]
 8026a5e:	f012 ff85 	bl	803996c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8026a62:	68bb      	ldr	r3, [r7, #8]
 8026a64:	f043 0302 	orr.w	r3, r3, #2
 8026a68:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8026a6a:	68fb      	ldr	r3, [r7, #12]
 8026a6c:	f003 0308 	and.w	r3, r3, #8
 8026a70:	2b08      	cmp	r3, #8
 8026a72:	d132      	bne.n	8026ada <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8026a74:	68bb      	ldr	r3, [r7, #8]
 8026a76:	f043 0308 	orr.w	r3, r3, #8
 8026a7a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8026a7c:	68fb      	ldr	r3, [r7, #12]
 8026a7e:	f003 0304 	and.w	r3, r3, #4
 8026a82:	2b04      	cmp	r3, #4
 8026a84:	d126      	bne.n	8026ad4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8026a86:	687b      	ldr	r3, [r7, #4]
 8026a88:	699b      	ldr	r3, [r3, #24]
 8026a8a:	2b02      	cmp	r3, #2
 8026a8c:	d113      	bne.n	8026ab6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8026a8e:	68fb      	ldr	r3, [r7, #12]
 8026a90:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8026a94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8026a98:	d106      	bne.n	8026aa8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8026a9a:	687b      	ldr	r3, [r7, #4]
 8026a9c:	681b      	ldr	r3, [r3, #0]
 8026a9e:	2102      	movs	r1, #2
 8026aa0:	4618      	mov	r0, r3
 8026aa2:	f005 fa07 	bl	802beb4 <USB_InitFSLSPClkSel>
 8026aa6:	e011      	b.n	8026acc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8026aa8:	687b      	ldr	r3, [r7, #4]
 8026aaa:	681b      	ldr	r3, [r3, #0]
 8026aac:	2101      	movs	r1, #1
 8026aae:	4618      	mov	r0, r3
 8026ab0:	f005 fa00 	bl	802beb4 <USB_InitFSLSPClkSel>
 8026ab4:	e00a      	b.n	8026acc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8026ab6:	687b      	ldr	r3, [r7, #4]
 8026ab8:	68db      	ldr	r3, [r3, #12]
 8026aba:	2b01      	cmp	r3, #1
 8026abc:	d106      	bne.n	8026acc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8026abe:	693b      	ldr	r3, [r7, #16]
 8026ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8026ac4:	461a      	mov	r2, r3
 8026ac6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8026aca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8026acc:	6878      	ldr	r0, [r7, #4]
 8026ace:	f012 ff7b 	bl	80399c8 <HAL_HCD_PortEnabled_Callback>
 8026ad2:	e002      	b.n	8026ada <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8026ad4:	6878      	ldr	r0, [r7, #4]
 8026ad6:	f012 ff85 	bl	80399e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8026ada:	68fb      	ldr	r3, [r7, #12]
 8026adc:	f003 0320 	and.w	r3, r3, #32
 8026ae0:	2b20      	cmp	r3, #32
 8026ae2:	d103      	bne.n	8026aec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8026ae4:	68bb      	ldr	r3, [r7, #8]
 8026ae6:	f043 0320 	orr.w	r3, r3, #32
 8026aea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8026aec:	693b      	ldr	r3, [r7, #16]
 8026aee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026af2:	461a      	mov	r2, r3
 8026af4:	68bb      	ldr	r3, [r7, #8]
 8026af6:	6013      	str	r3, [r2, #0]
}
 8026af8:	bf00      	nop
 8026afa:	3718      	adds	r7, #24
 8026afc:	46bd      	mov	sp, r7
 8026afe:	bd80      	pop	{r7, pc}

08026b00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8026b00:	b580      	push	{r7, lr}
 8026b02:	b084      	sub	sp, #16
 8026b04:	af00      	add	r7, sp, #0
 8026b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8026b08:	4b19      	ldr	r3, [pc, #100]	; (8026b70 <HAL_PWREx_ConfigSupply+0x70>)
 8026b0a:	68db      	ldr	r3, [r3, #12]
 8026b0c:	f003 0304 	and.w	r3, r3, #4
 8026b10:	2b04      	cmp	r3, #4
 8026b12:	d00a      	beq.n	8026b2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8026b14:	4b16      	ldr	r3, [pc, #88]	; (8026b70 <HAL_PWREx_ConfigSupply+0x70>)
 8026b16:	68db      	ldr	r3, [r3, #12]
 8026b18:	f003 0307 	and.w	r3, r3, #7
 8026b1c:	687a      	ldr	r2, [r7, #4]
 8026b1e:	429a      	cmp	r2, r3
 8026b20:	d001      	beq.n	8026b26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8026b22:	2301      	movs	r3, #1
 8026b24:	e01f      	b.n	8026b66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8026b26:	2300      	movs	r3, #0
 8026b28:	e01d      	b.n	8026b66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8026b2a:	4b11      	ldr	r3, [pc, #68]	; (8026b70 <HAL_PWREx_ConfigSupply+0x70>)
 8026b2c:	68db      	ldr	r3, [r3, #12]
 8026b2e:	f023 0207 	bic.w	r2, r3, #7
 8026b32:	490f      	ldr	r1, [pc, #60]	; (8026b70 <HAL_PWREx_ConfigSupply+0x70>)
 8026b34:	687b      	ldr	r3, [r7, #4]
 8026b36:	4313      	orrs	r3, r2
 8026b38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8026b3a:	f7fb fab1 	bl	80220a0 <HAL_GetTick>
 8026b3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8026b40:	e009      	b.n	8026b56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8026b42:	f7fb faad 	bl	80220a0 <HAL_GetTick>
 8026b46:	4602      	mov	r2, r0
 8026b48:	68fb      	ldr	r3, [r7, #12]
 8026b4a:	1ad3      	subs	r3, r2, r3
 8026b4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8026b50:	d901      	bls.n	8026b56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8026b52:	2301      	movs	r3, #1
 8026b54:	e007      	b.n	8026b66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8026b56:	4b06      	ldr	r3, [pc, #24]	; (8026b70 <HAL_PWREx_ConfigSupply+0x70>)
 8026b58:	685b      	ldr	r3, [r3, #4]
 8026b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8026b62:	d1ee      	bne.n	8026b42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8026b64:	2300      	movs	r3, #0
}
 8026b66:	4618      	mov	r0, r3
 8026b68:	3710      	adds	r7, #16
 8026b6a:	46bd      	mov	sp, r7
 8026b6c:	bd80      	pop	{r7, pc}
 8026b6e:	bf00      	nop
 8026b70:	58024800 	.word	0x58024800

08026b74 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8026b74:	b480      	push	{r7}
 8026b76:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8026b78:	4b05      	ldr	r3, [pc, #20]	; (8026b90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8026b7a:	68db      	ldr	r3, [r3, #12]
 8026b7c:	4a04      	ldr	r2, [pc, #16]	; (8026b90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8026b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8026b82:	60d3      	str	r3, [r2, #12]
}
 8026b84:	bf00      	nop
 8026b86:	46bd      	mov	sp, r7
 8026b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b8c:	4770      	bx	lr
 8026b8e:	bf00      	nop
 8026b90:	58024800 	.word	0x58024800

08026b94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026b94:	b580      	push	{r7, lr}
 8026b96:	b08c      	sub	sp, #48	; 0x30
 8026b98:	af00      	add	r7, sp, #0
 8026b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8026b9c:	687b      	ldr	r3, [r7, #4]
 8026b9e:	2b00      	cmp	r3, #0
 8026ba0:	d101      	bne.n	8026ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8026ba2:	2301      	movs	r3, #1
 8026ba4:	e39d      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026ba6:	687b      	ldr	r3, [r7, #4]
 8026ba8:	681b      	ldr	r3, [r3, #0]
 8026baa:	f003 0301 	and.w	r3, r3, #1
 8026bae:	2b00      	cmp	r3, #0
 8026bb0:	f000 8087 	beq.w	8026cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8026bb4:	4b88      	ldr	r3, [pc, #544]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026bb6:	691b      	ldr	r3, [r3, #16]
 8026bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8026bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8026bbe:	4b86      	ldr	r3, [pc, #536]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8026bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026bc6:	2b10      	cmp	r3, #16
 8026bc8:	d007      	beq.n	8026bda <HAL_RCC_OscConfig+0x46>
 8026bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026bcc:	2b18      	cmp	r3, #24
 8026bce:	d110      	bne.n	8026bf2 <HAL_RCC_OscConfig+0x5e>
 8026bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026bd2:	f003 0303 	and.w	r3, r3, #3
 8026bd6:	2b02      	cmp	r3, #2
 8026bd8:	d10b      	bne.n	8026bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026bda:	4b7f      	ldr	r3, [pc, #508]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026bdc:	681b      	ldr	r3, [r3, #0]
 8026bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026be2:	2b00      	cmp	r3, #0
 8026be4:	d06c      	beq.n	8026cc0 <HAL_RCC_OscConfig+0x12c>
 8026be6:	687b      	ldr	r3, [r7, #4]
 8026be8:	685b      	ldr	r3, [r3, #4]
 8026bea:	2b00      	cmp	r3, #0
 8026bec:	d168      	bne.n	8026cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8026bee:	2301      	movs	r3, #1
 8026bf0:	e377      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026bf2:	687b      	ldr	r3, [r7, #4]
 8026bf4:	685b      	ldr	r3, [r3, #4]
 8026bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026bfa:	d106      	bne.n	8026c0a <HAL_RCC_OscConfig+0x76>
 8026bfc:	4b76      	ldr	r3, [pc, #472]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026bfe:	681b      	ldr	r3, [r3, #0]
 8026c00:	4a75      	ldr	r2, [pc, #468]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026c06:	6013      	str	r3, [r2, #0]
 8026c08:	e02e      	b.n	8026c68 <HAL_RCC_OscConfig+0xd4>
 8026c0a:	687b      	ldr	r3, [r7, #4]
 8026c0c:	685b      	ldr	r3, [r3, #4]
 8026c0e:	2b00      	cmp	r3, #0
 8026c10:	d10c      	bne.n	8026c2c <HAL_RCC_OscConfig+0x98>
 8026c12:	4b71      	ldr	r3, [pc, #452]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c14:	681b      	ldr	r3, [r3, #0]
 8026c16:	4a70      	ldr	r2, [pc, #448]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026c1c:	6013      	str	r3, [r2, #0]
 8026c1e:	4b6e      	ldr	r3, [pc, #440]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c20:	681b      	ldr	r3, [r3, #0]
 8026c22:	4a6d      	ldr	r2, [pc, #436]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026c28:	6013      	str	r3, [r2, #0]
 8026c2a:	e01d      	b.n	8026c68 <HAL_RCC_OscConfig+0xd4>
 8026c2c:	687b      	ldr	r3, [r7, #4]
 8026c2e:	685b      	ldr	r3, [r3, #4]
 8026c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8026c34:	d10c      	bne.n	8026c50 <HAL_RCC_OscConfig+0xbc>
 8026c36:	4b68      	ldr	r3, [pc, #416]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c38:	681b      	ldr	r3, [r3, #0]
 8026c3a:	4a67      	ldr	r2, [pc, #412]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026c40:	6013      	str	r3, [r2, #0]
 8026c42:	4b65      	ldr	r3, [pc, #404]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c44:	681b      	ldr	r3, [r3, #0]
 8026c46:	4a64      	ldr	r2, [pc, #400]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026c4c:	6013      	str	r3, [r2, #0]
 8026c4e:	e00b      	b.n	8026c68 <HAL_RCC_OscConfig+0xd4>
 8026c50:	4b61      	ldr	r3, [pc, #388]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c52:	681b      	ldr	r3, [r3, #0]
 8026c54:	4a60      	ldr	r2, [pc, #384]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026c5a:	6013      	str	r3, [r2, #0]
 8026c5c:	4b5e      	ldr	r3, [pc, #376]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c5e:	681b      	ldr	r3, [r3, #0]
 8026c60:	4a5d      	ldr	r2, [pc, #372]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8026c68:	687b      	ldr	r3, [r7, #4]
 8026c6a:	685b      	ldr	r3, [r3, #4]
 8026c6c:	2b00      	cmp	r3, #0
 8026c6e:	d013      	beq.n	8026c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026c70:	f7fb fa16 	bl	80220a0 <HAL_GetTick>
 8026c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8026c76:	e008      	b.n	8026c8a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026c78:	f7fb fa12 	bl	80220a0 <HAL_GetTick>
 8026c7c:	4602      	mov	r2, r0
 8026c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026c80:	1ad3      	subs	r3, r2, r3
 8026c82:	2b64      	cmp	r3, #100	; 0x64
 8026c84:	d901      	bls.n	8026c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8026c86:	2303      	movs	r3, #3
 8026c88:	e32b      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8026c8a:	4b53      	ldr	r3, [pc, #332]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026c8c:	681b      	ldr	r3, [r3, #0]
 8026c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026c92:	2b00      	cmp	r3, #0
 8026c94:	d0f0      	beq.n	8026c78 <HAL_RCC_OscConfig+0xe4>
 8026c96:	e014      	b.n	8026cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026c98:	f7fb fa02 	bl	80220a0 <HAL_GetTick>
 8026c9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8026c9e:	e008      	b.n	8026cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026ca0:	f7fb f9fe 	bl	80220a0 <HAL_GetTick>
 8026ca4:	4602      	mov	r2, r0
 8026ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026ca8:	1ad3      	subs	r3, r2, r3
 8026caa:	2b64      	cmp	r3, #100	; 0x64
 8026cac:	d901      	bls.n	8026cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8026cae:	2303      	movs	r3, #3
 8026cb0:	e317      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8026cb2:	4b49      	ldr	r3, [pc, #292]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026cb4:	681b      	ldr	r3, [r3, #0]
 8026cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026cba:	2b00      	cmp	r3, #0
 8026cbc:	d1f0      	bne.n	8026ca0 <HAL_RCC_OscConfig+0x10c>
 8026cbe:	e000      	b.n	8026cc2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8026cc2:	687b      	ldr	r3, [r7, #4]
 8026cc4:	681b      	ldr	r3, [r3, #0]
 8026cc6:	f003 0302 	and.w	r3, r3, #2
 8026cca:	2b00      	cmp	r3, #0
 8026ccc:	f000 808c 	beq.w	8026de8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8026cd0:	4b41      	ldr	r3, [pc, #260]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026cd2:	691b      	ldr	r3, [r3, #16]
 8026cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8026cd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8026cda:	4b3f      	ldr	r3, [pc, #252]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026cde:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8026ce0:	6a3b      	ldr	r3, [r7, #32]
 8026ce2:	2b00      	cmp	r3, #0
 8026ce4:	d007      	beq.n	8026cf6 <HAL_RCC_OscConfig+0x162>
 8026ce6:	6a3b      	ldr	r3, [r7, #32]
 8026ce8:	2b18      	cmp	r3, #24
 8026cea:	d137      	bne.n	8026d5c <HAL_RCC_OscConfig+0x1c8>
 8026cec:	69fb      	ldr	r3, [r7, #28]
 8026cee:	f003 0303 	and.w	r3, r3, #3
 8026cf2:	2b00      	cmp	r3, #0
 8026cf4:	d132      	bne.n	8026d5c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8026cf6:	4b38      	ldr	r3, [pc, #224]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026cf8:	681b      	ldr	r3, [r3, #0]
 8026cfa:	f003 0304 	and.w	r3, r3, #4
 8026cfe:	2b00      	cmp	r3, #0
 8026d00:	d005      	beq.n	8026d0e <HAL_RCC_OscConfig+0x17a>
 8026d02:	687b      	ldr	r3, [r7, #4]
 8026d04:	68db      	ldr	r3, [r3, #12]
 8026d06:	2b00      	cmp	r3, #0
 8026d08:	d101      	bne.n	8026d0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8026d0a:	2301      	movs	r3, #1
 8026d0c:	e2e9      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8026d0e:	4b32      	ldr	r3, [pc, #200]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026d10:	681b      	ldr	r3, [r3, #0]
 8026d12:	f023 0219 	bic.w	r2, r3, #25
 8026d16:	687b      	ldr	r3, [r7, #4]
 8026d18:	68db      	ldr	r3, [r3, #12]
 8026d1a:	492f      	ldr	r1, [pc, #188]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026d1c:	4313      	orrs	r3, r2
 8026d1e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8026d20:	f7fb f9be 	bl	80220a0 <HAL_GetTick>
 8026d24:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8026d26:	e008      	b.n	8026d3a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026d28:	f7fb f9ba 	bl	80220a0 <HAL_GetTick>
 8026d2c:	4602      	mov	r2, r0
 8026d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026d30:	1ad3      	subs	r3, r2, r3
 8026d32:	2b02      	cmp	r3, #2
 8026d34:	d901      	bls.n	8026d3a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8026d36:	2303      	movs	r3, #3
 8026d38:	e2d3      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8026d3a:	4b27      	ldr	r3, [pc, #156]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026d3c:	681b      	ldr	r3, [r3, #0]
 8026d3e:	f003 0304 	and.w	r3, r3, #4
 8026d42:	2b00      	cmp	r3, #0
 8026d44:	d0f0      	beq.n	8026d28 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026d46:	4b24      	ldr	r3, [pc, #144]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026d48:	685b      	ldr	r3, [r3, #4]
 8026d4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8026d4e:	687b      	ldr	r3, [r7, #4]
 8026d50:	691b      	ldr	r3, [r3, #16]
 8026d52:	061b      	lsls	r3, r3, #24
 8026d54:	4920      	ldr	r1, [pc, #128]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026d56:	4313      	orrs	r3, r2
 8026d58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8026d5a:	e045      	b.n	8026de8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8026d5c:	687b      	ldr	r3, [r7, #4]
 8026d5e:	68db      	ldr	r3, [r3, #12]
 8026d60:	2b00      	cmp	r3, #0
 8026d62:	d026      	beq.n	8026db2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8026d64:	4b1c      	ldr	r3, [pc, #112]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026d66:	681b      	ldr	r3, [r3, #0]
 8026d68:	f023 0219 	bic.w	r2, r3, #25
 8026d6c:	687b      	ldr	r3, [r7, #4]
 8026d6e:	68db      	ldr	r3, [r3, #12]
 8026d70:	4919      	ldr	r1, [pc, #100]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026d72:	4313      	orrs	r3, r2
 8026d74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026d76:	f7fb f993 	bl	80220a0 <HAL_GetTick>
 8026d7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8026d7c:	e008      	b.n	8026d90 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026d7e:	f7fb f98f 	bl	80220a0 <HAL_GetTick>
 8026d82:	4602      	mov	r2, r0
 8026d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026d86:	1ad3      	subs	r3, r2, r3
 8026d88:	2b02      	cmp	r3, #2
 8026d8a:	d901      	bls.n	8026d90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8026d8c:	2303      	movs	r3, #3
 8026d8e:	e2a8      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8026d90:	4b11      	ldr	r3, [pc, #68]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026d92:	681b      	ldr	r3, [r3, #0]
 8026d94:	f003 0304 	and.w	r3, r3, #4
 8026d98:	2b00      	cmp	r3, #0
 8026d9a:	d0f0      	beq.n	8026d7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026d9c:	4b0e      	ldr	r3, [pc, #56]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026d9e:	685b      	ldr	r3, [r3, #4]
 8026da0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8026da4:	687b      	ldr	r3, [r7, #4]
 8026da6:	691b      	ldr	r3, [r3, #16]
 8026da8:	061b      	lsls	r3, r3, #24
 8026daa:	490b      	ldr	r1, [pc, #44]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026dac:	4313      	orrs	r3, r2
 8026dae:	604b      	str	r3, [r1, #4]
 8026db0:	e01a      	b.n	8026de8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8026db2:	4b09      	ldr	r3, [pc, #36]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026db4:	681b      	ldr	r3, [r3, #0]
 8026db6:	4a08      	ldr	r2, [pc, #32]	; (8026dd8 <HAL_RCC_OscConfig+0x244>)
 8026db8:	f023 0301 	bic.w	r3, r3, #1
 8026dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026dbe:	f7fb f96f 	bl	80220a0 <HAL_GetTick>
 8026dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8026dc4:	e00a      	b.n	8026ddc <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026dc6:	f7fb f96b 	bl	80220a0 <HAL_GetTick>
 8026dca:	4602      	mov	r2, r0
 8026dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026dce:	1ad3      	subs	r3, r2, r3
 8026dd0:	2b02      	cmp	r3, #2
 8026dd2:	d903      	bls.n	8026ddc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8026dd4:	2303      	movs	r3, #3
 8026dd6:	e284      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
 8026dd8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8026ddc:	4b96      	ldr	r3, [pc, #600]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026dde:	681b      	ldr	r3, [r3, #0]
 8026de0:	f003 0304 	and.w	r3, r3, #4
 8026de4:	2b00      	cmp	r3, #0
 8026de6:	d1ee      	bne.n	8026dc6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8026de8:	687b      	ldr	r3, [r7, #4]
 8026dea:	681b      	ldr	r3, [r3, #0]
 8026dec:	f003 0310 	and.w	r3, r3, #16
 8026df0:	2b00      	cmp	r3, #0
 8026df2:	d06a      	beq.n	8026eca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8026df4:	4b90      	ldr	r3, [pc, #576]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026df6:	691b      	ldr	r3, [r3, #16]
 8026df8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8026dfc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8026dfe:	4b8e      	ldr	r3, [pc, #568]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026e02:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8026e04:	69bb      	ldr	r3, [r7, #24]
 8026e06:	2b08      	cmp	r3, #8
 8026e08:	d007      	beq.n	8026e1a <HAL_RCC_OscConfig+0x286>
 8026e0a:	69bb      	ldr	r3, [r7, #24]
 8026e0c:	2b18      	cmp	r3, #24
 8026e0e:	d11b      	bne.n	8026e48 <HAL_RCC_OscConfig+0x2b4>
 8026e10:	697b      	ldr	r3, [r7, #20]
 8026e12:	f003 0303 	and.w	r3, r3, #3
 8026e16:	2b01      	cmp	r3, #1
 8026e18:	d116      	bne.n	8026e48 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8026e1a:	4b87      	ldr	r3, [pc, #540]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026e1c:	681b      	ldr	r3, [r3, #0]
 8026e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026e22:	2b00      	cmp	r3, #0
 8026e24:	d005      	beq.n	8026e32 <HAL_RCC_OscConfig+0x29e>
 8026e26:	687b      	ldr	r3, [r7, #4]
 8026e28:	69db      	ldr	r3, [r3, #28]
 8026e2a:	2b80      	cmp	r3, #128	; 0x80
 8026e2c:	d001      	beq.n	8026e32 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8026e2e:	2301      	movs	r3, #1
 8026e30:	e257      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8026e32:	4b81      	ldr	r3, [pc, #516]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026e34:	68db      	ldr	r3, [r3, #12]
 8026e36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8026e3a:	687b      	ldr	r3, [r7, #4]
 8026e3c:	6a1b      	ldr	r3, [r3, #32]
 8026e3e:	061b      	lsls	r3, r3, #24
 8026e40:	497d      	ldr	r1, [pc, #500]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026e42:	4313      	orrs	r3, r2
 8026e44:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8026e46:	e040      	b.n	8026eca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8026e48:	687b      	ldr	r3, [r7, #4]
 8026e4a:	69db      	ldr	r3, [r3, #28]
 8026e4c:	2b00      	cmp	r3, #0
 8026e4e:	d023      	beq.n	8026e98 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8026e50:	4b79      	ldr	r3, [pc, #484]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026e52:	681b      	ldr	r3, [r3, #0]
 8026e54:	4a78      	ldr	r2, [pc, #480]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026e5c:	f7fb f920 	bl	80220a0 <HAL_GetTick>
 8026e60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8026e62:	e008      	b.n	8026e76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8026e64:	f7fb f91c 	bl	80220a0 <HAL_GetTick>
 8026e68:	4602      	mov	r2, r0
 8026e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026e6c:	1ad3      	subs	r3, r2, r3
 8026e6e:	2b02      	cmp	r3, #2
 8026e70:	d901      	bls.n	8026e76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8026e72:	2303      	movs	r3, #3
 8026e74:	e235      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8026e76:	4b70      	ldr	r3, [pc, #448]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026e78:	681b      	ldr	r3, [r3, #0]
 8026e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026e7e:	2b00      	cmp	r3, #0
 8026e80:	d0f0      	beq.n	8026e64 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8026e82:	4b6d      	ldr	r3, [pc, #436]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026e84:	68db      	ldr	r3, [r3, #12]
 8026e86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8026e8a:	687b      	ldr	r3, [r7, #4]
 8026e8c:	6a1b      	ldr	r3, [r3, #32]
 8026e8e:	061b      	lsls	r3, r3, #24
 8026e90:	4969      	ldr	r1, [pc, #420]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026e92:	4313      	orrs	r3, r2
 8026e94:	60cb      	str	r3, [r1, #12]
 8026e96:	e018      	b.n	8026eca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8026e98:	4b67      	ldr	r3, [pc, #412]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026e9a:	681b      	ldr	r3, [r3, #0]
 8026e9c:	4a66      	ldr	r2, [pc, #408]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8026ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026ea4:	f7fb f8fc 	bl	80220a0 <HAL_GetTick>
 8026ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8026eaa:	e008      	b.n	8026ebe <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8026eac:	f7fb f8f8 	bl	80220a0 <HAL_GetTick>
 8026eb0:	4602      	mov	r2, r0
 8026eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026eb4:	1ad3      	subs	r3, r2, r3
 8026eb6:	2b02      	cmp	r3, #2
 8026eb8:	d901      	bls.n	8026ebe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8026eba:	2303      	movs	r3, #3
 8026ebc:	e211      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8026ebe:	4b5e      	ldr	r3, [pc, #376]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026ec0:	681b      	ldr	r3, [r3, #0]
 8026ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026ec6:	2b00      	cmp	r3, #0
 8026ec8:	d1f0      	bne.n	8026eac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8026eca:	687b      	ldr	r3, [r7, #4]
 8026ecc:	681b      	ldr	r3, [r3, #0]
 8026ece:	f003 0308 	and.w	r3, r3, #8
 8026ed2:	2b00      	cmp	r3, #0
 8026ed4:	d036      	beq.n	8026f44 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8026ed6:	687b      	ldr	r3, [r7, #4]
 8026ed8:	695b      	ldr	r3, [r3, #20]
 8026eda:	2b00      	cmp	r3, #0
 8026edc:	d019      	beq.n	8026f12 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8026ede:	4b56      	ldr	r3, [pc, #344]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026ee2:	4a55      	ldr	r2, [pc, #340]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026ee4:	f043 0301 	orr.w	r3, r3, #1
 8026ee8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026eea:	f7fb f8d9 	bl	80220a0 <HAL_GetTick>
 8026eee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8026ef0:	e008      	b.n	8026f04 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026ef2:	f7fb f8d5 	bl	80220a0 <HAL_GetTick>
 8026ef6:	4602      	mov	r2, r0
 8026ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026efa:	1ad3      	subs	r3, r2, r3
 8026efc:	2b02      	cmp	r3, #2
 8026efe:	d901      	bls.n	8026f04 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8026f00:	2303      	movs	r3, #3
 8026f02:	e1ee      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8026f04:	4b4c      	ldr	r3, [pc, #304]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026f08:	f003 0302 	and.w	r3, r3, #2
 8026f0c:	2b00      	cmp	r3, #0
 8026f0e:	d0f0      	beq.n	8026ef2 <HAL_RCC_OscConfig+0x35e>
 8026f10:	e018      	b.n	8026f44 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8026f12:	4b49      	ldr	r3, [pc, #292]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026f16:	4a48      	ldr	r2, [pc, #288]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026f18:	f023 0301 	bic.w	r3, r3, #1
 8026f1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026f1e:	f7fb f8bf 	bl	80220a0 <HAL_GetTick>
 8026f22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8026f24:	e008      	b.n	8026f38 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026f26:	f7fb f8bb 	bl	80220a0 <HAL_GetTick>
 8026f2a:	4602      	mov	r2, r0
 8026f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026f2e:	1ad3      	subs	r3, r2, r3
 8026f30:	2b02      	cmp	r3, #2
 8026f32:	d901      	bls.n	8026f38 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8026f34:	2303      	movs	r3, #3
 8026f36:	e1d4      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8026f38:	4b3f      	ldr	r3, [pc, #252]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026f3c:	f003 0302 	and.w	r3, r3, #2
 8026f40:	2b00      	cmp	r3, #0
 8026f42:	d1f0      	bne.n	8026f26 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8026f44:	687b      	ldr	r3, [r7, #4]
 8026f46:	681b      	ldr	r3, [r3, #0]
 8026f48:	f003 0320 	and.w	r3, r3, #32
 8026f4c:	2b00      	cmp	r3, #0
 8026f4e:	d036      	beq.n	8026fbe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8026f50:	687b      	ldr	r3, [r7, #4]
 8026f52:	699b      	ldr	r3, [r3, #24]
 8026f54:	2b00      	cmp	r3, #0
 8026f56:	d019      	beq.n	8026f8c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8026f58:	4b37      	ldr	r3, [pc, #220]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026f5a:	681b      	ldr	r3, [r3, #0]
 8026f5c:	4a36      	ldr	r2, [pc, #216]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026f5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8026f62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8026f64:	f7fb f89c 	bl	80220a0 <HAL_GetTick>
 8026f68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8026f6a:	e008      	b.n	8026f7e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8026f6c:	f7fb f898 	bl	80220a0 <HAL_GetTick>
 8026f70:	4602      	mov	r2, r0
 8026f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026f74:	1ad3      	subs	r3, r2, r3
 8026f76:	2b02      	cmp	r3, #2
 8026f78:	d901      	bls.n	8026f7e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8026f7a:	2303      	movs	r3, #3
 8026f7c:	e1b1      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8026f7e:	4b2e      	ldr	r3, [pc, #184]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026f80:	681b      	ldr	r3, [r3, #0]
 8026f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026f86:	2b00      	cmp	r3, #0
 8026f88:	d0f0      	beq.n	8026f6c <HAL_RCC_OscConfig+0x3d8>
 8026f8a:	e018      	b.n	8026fbe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8026f8c:	4b2a      	ldr	r3, [pc, #168]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026f8e:	681b      	ldr	r3, [r3, #0]
 8026f90:	4a29      	ldr	r2, [pc, #164]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026f96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8026f98:	f7fb f882 	bl	80220a0 <HAL_GetTick>
 8026f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8026f9e:	e008      	b.n	8026fb2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8026fa0:	f7fb f87e 	bl	80220a0 <HAL_GetTick>
 8026fa4:	4602      	mov	r2, r0
 8026fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026fa8:	1ad3      	subs	r3, r2, r3
 8026faa:	2b02      	cmp	r3, #2
 8026fac:	d901      	bls.n	8026fb2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8026fae:	2303      	movs	r3, #3
 8026fb0:	e197      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8026fb2:	4b21      	ldr	r3, [pc, #132]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8026fb4:	681b      	ldr	r3, [r3, #0]
 8026fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026fba:	2b00      	cmp	r3, #0
 8026fbc:	d1f0      	bne.n	8026fa0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8026fbe:	687b      	ldr	r3, [r7, #4]
 8026fc0:	681b      	ldr	r3, [r3, #0]
 8026fc2:	f003 0304 	and.w	r3, r3, #4
 8026fc6:	2b00      	cmp	r3, #0
 8026fc8:	f000 8086 	beq.w	80270d8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8026fcc:	4b1b      	ldr	r3, [pc, #108]	; (802703c <HAL_RCC_OscConfig+0x4a8>)
 8026fce:	681b      	ldr	r3, [r3, #0]
 8026fd0:	4a1a      	ldr	r2, [pc, #104]	; (802703c <HAL_RCC_OscConfig+0x4a8>)
 8026fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026fd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8026fd8:	f7fb f862 	bl	80220a0 <HAL_GetTick>
 8026fdc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8026fde:	e008      	b.n	8026ff2 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8026fe0:	f7fb f85e 	bl	80220a0 <HAL_GetTick>
 8026fe4:	4602      	mov	r2, r0
 8026fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026fe8:	1ad3      	subs	r3, r2, r3
 8026fea:	2b64      	cmp	r3, #100	; 0x64
 8026fec:	d901      	bls.n	8026ff2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8026fee:	2303      	movs	r3, #3
 8026ff0:	e177      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8026ff2:	4b12      	ldr	r3, [pc, #72]	; (802703c <HAL_RCC_OscConfig+0x4a8>)
 8026ff4:	681b      	ldr	r3, [r3, #0]
 8026ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026ffa:	2b00      	cmp	r3, #0
 8026ffc:	d0f0      	beq.n	8026fe0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8026ffe:	687b      	ldr	r3, [r7, #4]
 8027000:	689b      	ldr	r3, [r3, #8]
 8027002:	2b01      	cmp	r3, #1
 8027004:	d106      	bne.n	8027014 <HAL_RCC_OscConfig+0x480>
 8027006:	4b0c      	ldr	r3, [pc, #48]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8027008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802700a:	4a0b      	ldr	r2, [pc, #44]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 802700c:	f043 0301 	orr.w	r3, r3, #1
 8027010:	6713      	str	r3, [r2, #112]	; 0x70
 8027012:	e032      	b.n	802707a <HAL_RCC_OscConfig+0x4e6>
 8027014:	687b      	ldr	r3, [r7, #4]
 8027016:	689b      	ldr	r3, [r3, #8]
 8027018:	2b00      	cmp	r3, #0
 802701a:	d111      	bne.n	8027040 <HAL_RCC_OscConfig+0x4ac>
 802701c:	4b06      	ldr	r3, [pc, #24]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 802701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027020:	4a05      	ldr	r2, [pc, #20]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 8027022:	f023 0301 	bic.w	r3, r3, #1
 8027026:	6713      	str	r3, [r2, #112]	; 0x70
 8027028:	4b03      	ldr	r3, [pc, #12]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 802702a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802702c:	4a02      	ldr	r2, [pc, #8]	; (8027038 <HAL_RCC_OscConfig+0x4a4>)
 802702e:	f023 0304 	bic.w	r3, r3, #4
 8027032:	6713      	str	r3, [r2, #112]	; 0x70
 8027034:	e021      	b.n	802707a <HAL_RCC_OscConfig+0x4e6>
 8027036:	bf00      	nop
 8027038:	58024400 	.word	0x58024400
 802703c:	58024800 	.word	0x58024800
 8027040:	687b      	ldr	r3, [r7, #4]
 8027042:	689b      	ldr	r3, [r3, #8]
 8027044:	2b05      	cmp	r3, #5
 8027046:	d10c      	bne.n	8027062 <HAL_RCC_OscConfig+0x4ce>
 8027048:	4b83      	ldr	r3, [pc, #524]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 802704a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802704c:	4a82      	ldr	r2, [pc, #520]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 802704e:	f043 0304 	orr.w	r3, r3, #4
 8027052:	6713      	str	r3, [r2, #112]	; 0x70
 8027054:	4b80      	ldr	r3, [pc, #512]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027058:	4a7f      	ldr	r2, [pc, #508]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 802705a:	f043 0301 	orr.w	r3, r3, #1
 802705e:	6713      	str	r3, [r2, #112]	; 0x70
 8027060:	e00b      	b.n	802707a <HAL_RCC_OscConfig+0x4e6>
 8027062:	4b7d      	ldr	r3, [pc, #500]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027066:	4a7c      	ldr	r2, [pc, #496]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027068:	f023 0301 	bic.w	r3, r3, #1
 802706c:	6713      	str	r3, [r2, #112]	; 0x70
 802706e:	4b7a      	ldr	r3, [pc, #488]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027072:	4a79      	ldr	r2, [pc, #484]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027074:	f023 0304 	bic.w	r3, r3, #4
 8027078:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802707a:	687b      	ldr	r3, [r7, #4]
 802707c:	689b      	ldr	r3, [r3, #8]
 802707e:	2b00      	cmp	r3, #0
 8027080:	d015      	beq.n	80270ae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027082:	f7fb f80d 	bl	80220a0 <HAL_GetTick>
 8027086:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8027088:	e00a      	b.n	80270a0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802708a:	f7fb f809 	bl	80220a0 <HAL_GetTick>
 802708e:	4602      	mov	r2, r0
 8027090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027092:	1ad3      	subs	r3, r2, r3
 8027094:	f241 3288 	movw	r2, #5000	; 0x1388
 8027098:	4293      	cmp	r3, r2
 802709a:	d901      	bls.n	80270a0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 802709c:	2303      	movs	r3, #3
 802709e:	e120      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80270a0:	4b6d      	ldr	r3, [pc, #436]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80270a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80270a4:	f003 0302 	and.w	r3, r3, #2
 80270a8:	2b00      	cmp	r3, #0
 80270aa:	d0ee      	beq.n	802708a <HAL_RCC_OscConfig+0x4f6>
 80270ac:	e014      	b.n	80270d8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80270ae:	f7fa fff7 	bl	80220a0 <HAL_GetTick>
 80270b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80270b4:	e00a      	b.n	80270cc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80270b6:	f7fa fff3 	bl	80220a0 <HAL_GetTick>
 80270ba:	4602      	mov	r2, r0
 80270bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80270be:	1ad3      	subs	r3, r2, r3
 80270c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80270c4:	4293      	cmp	r3, r2
 80270c6:	d901      	bls.n	80270cc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80270c8:	2303      	movs	r3, #3
 80270ca:	e10a      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80270cc:	4b62      	ldr	r3, [pc, #392]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80270ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80270d0:	f003 0302 	and.w	r3, r3, #2
 80270d4:	2b00      	cmp	r3, #0
 80270d6:	d1ee      	bne.n	80270b6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80270d8:	687b      	ldr	r3, [r7, #4]
 80270da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80270dc:	2b00      	cmp	r3, #0
 80270de:	f000 80ff 	beq.w	80272e0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80270e2:	4b5d      	ldr	r3, [pc, #372]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80270e4:	691b      	ldr	r3, [r3, #16]
 80270e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80270ea:	2b18      	cmp	r3, #24
 80270ec:	f000 80ba 	beq.w	8027264 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80270f0:	687b      	ldr	r3, [r7, #4]
 80270f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80270f4:	2b02      	cmp	r3, #2
 80270f6:	f040 8095 	bne.w	8027224 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80270fa:	4b57      	ldr	r3, [pc, #348]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80270fc:	681b      	ldr	r3, [r3, #0]
 80270fe:	4a56      	ldr	r2, [pc, #344]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027106:	f7fa ffcb 	bl	80220a0 <HAL_GetTick>
 802710a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802710c:	e008      	b.n	8027120 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802710e:	f7fa ffc7 	bl	80220a0 <HAL_GetTick>
 8027112:	4602      	mov	r2, r0
 8027114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027116:	1ad3      	subs	r3, r2, r3
 8027118:	2b02      	cmp	r3, #2
 802711a:	d901      	bls.n	8027120 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 802711c:	2303      	movs	r3, #3
 802711e:	e0e0      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8027120:	4b4d      	ldr	r3, [pc, #308]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027122:	681b      	ldr	r3, [r3, #0]
 8027124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027128:	2b00      	cmp	r3, #0
 802712a:	d1f0      	bne.n	802710e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 802712c:	4b4a      	ldr	r3, [pc, #296]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 802712e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8027130:	4b4a      	ldr	r3, [pc, #296]	; (802725c <HAL_RCC_OscConfig+0x6c8>)
 8027132:	4013      	ands	r3, r2
 8027134:	687a      	ldr	r2, [r7, #4]
 8027136:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8027138:	687a      	ldr	r2, [r7, #4]
 802713a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 802713c:	0112      	lsls	r2, r2, #4
 802713e:	430a      	orrs	r2, r1
 8027140:	4945      	ldr	r1, [pc, #276]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027142:	4313      	orrs	r3, r2
 8027144:	628b      	str	r3, [r1, #40]	; 0x28
 8027146:	687b      	ldr	r3, [r7, #4]
 8027148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802714a:	3b01      	subs	r3, #1
 802714c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8027150:	687b      	ldr	r3, [r7, #4]
 8027152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027154:	3b01      	subs	r3, #1
 8027156:	025b      	lsls	r3, r3, #9
 8027158:	b29b      	uxth	r3, r3
 802715a:	431a      	orrs	r2, r3
 802715c:	687b      	ldr	r3, [r7, #4]
 802715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027160:	3b01      	subs	r3, #1
 8027162:	041b      	lsls	r3, r3, #16
 8027164:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8027168:	431a      	orrs	r2, r3
 802716a:	687b      	ldr	r3, [r7, #4]
 802716c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802716e:	3b01      	subs	r3, #1
 8027170:	061b      	lsls	r3, r3, #24
 8027172:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8027176:	4938      	ldr	r1, [pc, #224]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027178:	4313      	orrs	r3, r2
 802717a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 802717c:	4b36      	ldr	r3, [pc, #216]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 802717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027180:	4a35      	ldr	r2, [pc, #212]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027182:	f023 0301 	bic.w	r3, r3, #1
 8027186:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8027188:	4b33      	ldr	r3, [pc, #204]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 802718a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802718c:	4b34      	ldr	r3, [pc, #208]	; (8027260 <HAL_RCC_OscConfig+0x6cc>)
 802718e:	4013      	ands	r3, r2
 8027190:	687a      	ldr	r2, [r7, #4]
 8027192:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8027194:	00d2      	lsls	r2, r2, #3
 8027196:	4930      	ldr	r1, [pc, #192]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027198:	4313      	orrs	r3, r2
 802719a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 802719c:	4b2e      	ldr	r3, [pc, #184]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 802719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80271a0:	f023 020c 	bic.w	r2, r3, #12
 80271a4:	687b      	ldr	r3, [r7, #4]
 80271a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271a8:	492b      	ldr	r1, [pc, #172]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271aa:	4313      	orrs	r3, r2
 80271ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80271ae:	4b2a      	ldr	r3, [pc, #168]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80271b2:	f023 0202 	bic.w	r2, r3, #2
 80271b6:	687b      	ldr	r3, [r7, #4]
 80271b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80271ba:	4927      	ldr	r1, [pc, #156]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271bc:	4313      	orrs	r3, r2
 80271be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80271c0:	4b25      	ldr	r3, [pc, #148]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80271c4:	4a24      	ldr	r2, [pc, #144]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80271ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80271cc:	4b22      	ldr	r3, [pc, #136]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80271d0:	4a21      	ldr	r2, [pc, #132]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80271d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80271d8:	4b1f      	ldr	r3, [pc, #124]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80271dc:	4a1e      	ldr	r2, [pc, #120]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80271e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80271e4:	4b1c      	ldr	r3, [pc, #112]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80271e8:	4a1b      	ldr	r2, [pc, #108]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271ea:	f043 0301 	orr.w	r3, r3, #1
 80271ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80271f0:	4b19      	ldr	r3, [pc, #100]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271f2:	681b      	ldr	r3, [r3, #0]
 80271f4:	4a18      	ldr	r2, [pc, #96]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 80271f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80271fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80271fc:	f7fa ff50 	bl	80220a0 <HAL_GetTick>
 8027200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8027202:	e008      	b.n	8027216 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027204:	f7fa ff4c 	bl	80220a0 <HAL_GetTick>
 8027208:	4602      	mov	r2, r0
 802720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802720c:	1ad3      	subs	r3, r2, r3
 802720e:	2b02      	cmp	r3, #2
 8027210:	d901      	bls.n	8027216 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8027212:	2303      	movs	r3, #3
 8027214:	e065      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8027216:	4b10      	ldr	r3, [pc, #64]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027218:	681b      	ldr	r3, [r3, #0]
 802721a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802721e:	2b00      	cmp	r3, #0
 8027220:	d0f0      	beq.n	8027204 <HAL_RCC_OscConfig+0x670>
 8027222:	e05d      	b.n	80272e0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027224:	4b0c      	ldr	r3, [pc, #48]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 8027226:	681b      	ldr	r3, [r3, #0]
 8027228:	4a0b      	ldr	r2, [pc, #44]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 802722a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802722e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027230:	f7fa ff36 	bl	80220a0 <HAL_GetTick>
 8027234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8027236:	e008      	b.n	802724a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027238:	f7fa ff32 	bl	80220a0 <HAL_GetTick>
 802723c:	4602      	mov	r2, r0
 802723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027240:	1ad3      	subs	r3, r2, r3
 8027242:	2b02      	cmp	r3, #2
 8027244:	d901      	bls.n	802724a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8027246:	2303      	movs	r3, #3
 8027248:	e04b      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802724a:	4b03      	ldr	r3, [pc, #12]	; (8027258 <HAL_RCC_OscConfig+0x6c4>)
 802724c:	681b      	ldr	r3, [r3, #0]
 802724e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027252:	2b00      	cmp	r3, #0
 8027254:	d1f0      	bne.n	8027238 <HAL_RCC_OscConfig+0x6a4>
 8027256:	e043      	b.n	80272e0 <HAL_RCC_OscConfig+0x74c>
 8027258:	58024400 	.word	0x58024400
 802725c:	fffffc0c 	.word	0xfffffc0c
 8027260:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8027264:	4b21      	ldr	r3, [pc, #132]	; (80272ec <HAL_RCC_OscConfig+0x758>)
 8027266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027268:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 802726a:	4b20      	ldr	r3, [pc, #128]	; (80272ec <HAL_RCC_OscConfig+0x758>)
 802726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802726e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027270:	687b      	ldr	r3, [r7, #4]
 8027272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027274:	2b01      	cmp	r3, #1
 8027276:	d031      	beq.n	80272dc <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8027278:	693b      	ldr	r3, [r7, #16]
 802727a:	f003 0203 	and.w	r2, r3, #3
 802727e:	687b      	ldr	r3, [r7, #4]
 8027280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027282:	429a      	cmp	r2, r3
 8027284:	d12a      	bne.n	80272dc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8027286:	693b      	ldr	r3, [r7, #16]
 8027288:	091b      	lsrs	r3, r3, #4
 802728a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802728e:	687b      	ldr	r3, [r7, #4]
 8027290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8027292:	429a      	cmp	r2, r3
 8027294:	d122      	bne.n	80272dc <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8027296:	68fb      	ldr	r3, [r7, #12]
 8027298:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802729c:	687b      	ldr	r3, [r7, #4]
 802729e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80272a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80272a2:	429a      	cmp	r2, r3
 80272a4:	d11a      	bne.n	80272dc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80272a6:	68fb      	ldr	r3, [r7, #12]
 80272a8:	0a5b      	lsrs	r3, r3, #9
 80272aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80272ae:	687b      	ldr	r3, [r7, #4]
 80272b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80272b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80272b4:	429a      	cmp	r2, r3
 80272b6:	d111      	bne.n	80272dc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80272b8:	68fb      	ldr	r3, [r7, #12]
 80272ba:	0c1b      	lsrs	r3, r3, #16
 80272bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80272c0:	687b      	ldr	r3, [r7, #4]
 80272c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80272c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80272c6:	429a      	cmp	r2, r3
 80272c8:	d108      	bne.n	80272dc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80272ca:	68fb      	ldr	r3, [r7, #12]
 80272cc:	0e1b      	lsrs	r3, r3, #24
 80272ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80272d2:	687b      	ldr	r3, [r7, #4]
 80272d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80272d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80272d8:	429a      	cmp	r2, r3
 80272da:	d001      	beq.n	80272e0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80272dc:	2301      	movs	r3, #1
 80272de:	e000      	b.n	80272e2 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80272e0:	2300      	movs	r3, #0
}
 80272e2:	4618      	mov	r0, r3
 80272e4:	3730      	adds	r7, #48	; 0x30
 80272e6:	46bd      	mov	sp, r7
 80272e8:	bd80      	pop	{r7, pc}
 80272ea:	bf00      	nop
 80272ec:	58024400 	.word	0x58024400

080272f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80272f0:	b580      	push	{r7, lr}
 80272f2:	b086      	sub	sp, #24
 80272f4:	af00      	add	r7, sp, #0
 80272f6:	6078      	str	r0, [r7, #4]
 80272f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80272fa:	687b      	ldr	r3, [r7, #4]
 80272fc:	2b00      	cmp	r3, #0
 80272fe:	d101      	bne.n	8027304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8027300:	2301      	movs	r3, #1
 8027302:	e19c      	b.n	802763e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8027304:	4b8a      	ldr	r3, [pc, #552]	; (8027530 <HAL_RCC_ClockConfig+0x240>)
 8027306:	681b      	ldr	r3, [r3, #0]
 8027308:	f003 030f 	and.w	r3, r3, #15
 802730c:	683a      	ldr	r2, [r7, #0]
 802730e:	429a      	cmp	r2, r3
 8027310:	d910      	bls.n	8027334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027312:	4b87      	ldr	r3, [pc, #540]	; (8027530 <HAL_RCC_ClockConfig+0x240>)
 8027314:	681b      	ldr	r3, [r3, #0]
 8027316:	f023 020f 	bic.w	r2, r3, #15
 802731a:	4985      	ldr	r1, [pc, #532]	; (8027530 <HAL_RCC_ClockConfig+0x240>)
 802731c:	683b      	ldr	r3, [r7, #0]
 802731e:	4313      	orrs	r3, r2
 8027320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027322:	4b83      	ldr	r3, [pc, #524]	; (8027530 <HAL_RCC_ClockConfig+0x240>)
 8027324:	681b      	ldr	r3, [r3, #0]
 8027326:	f003 030f 	and.w	r3, r3, #15
 802732a:	683a      	ldr	r2, [r7, #0]
 802732c:	429a      	cmp	r2, r3
 802732e:	d001      	beq.n	8027334 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8027330:	2301      	movs	r3, #1
 8027332:	e184      	b.n	802763e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8027334:	687b      	ldr	r3, [r7, #4]
 8027336:	681b      	ldr	r3, [r3, #0]
 8027338:	f003 0304 	and.w	r3, r3, #4
 802733c:	2b00      	cmp	r3, #0
 802733e:	d010      	beq.n	8027362 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8027340:	687b      	ldr	r3, [r7, #4]
 8027342:	691a      	ldr	r2, [r3, #16]
 8027344:	4b7b      	ldr	r3, [pc, #492]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 8027346:	699b      	ldr	r3, [r3, #24]
 8027348:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802734c:	429a      	cmp	r2, r3
 802734e:	d908      	bls.n	8027362 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8027350:	4b78      	ldr	r3, [pc, #480]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 8027352:	699b      	ldr	r3, [r3, #24]
 8027354:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8027358:	687b      	ldr	r3, [r7, #4]
 802735a:	691b      	ldr	r3, [r3, #16]
 802735c:	4975      	ldr	r1, [pc, #468]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 802735e:	4313      	orrs	r3, r2
 8027360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027362:	687b      	ldr	r3, [r7, #4]
 8027364:	681b      	ldr	r3, [r3, #0]
 8027366:	f003 0308 	and.w	r3, r3, #8
 802736a:	2b00      	cmp	r3, #0
 802736c:	d010      	beq.n	8027390 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 802736e:	687b      	ldr	r3, [r7, #4]
 8027370:	695a      	ldr	r2, [r3, #20]
 8027372:	4b70      	ldr	r3, [pc, #448]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 8027374:	69db      	ldr	r3, [r3, #28]
 8027376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802737a:	429a      	cmp	r2, r3
 802737c:	d908      	bls.n	8027390 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 802737e:	4b6d      	ldr	r3, [pc, #436]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 8027380:	69db      	ldr	r3, [r3, #28]
 8027382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8027386:	687b      	ldr	r3, [r7, #4]
 8027388:	695b      	ldr	r3, [r3, #20]
 802738a:	496a      	ldr	r1, [pc, #424]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 802738c:	4313      	orrs	r3, r2
 802738e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027390:	687b      	ldr	r3, [r7, #4]
 8027392:	681b      	ldr	r3, [r3, #0]
 8027394:	f003 0310 	and.w	r3, r3, #16
 8027398:	2b00      	cmp	r3, #0
 802739a:	d010      	beq.n	80273be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 802739c:	687b      	ldr	r3, [r7, #4]
 802739e:	699a      	ldr	r2, [r3, #24]
 80273a0:	4b64      	ldr	r3, [pc, #400]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 80273a2:	69db      	ldr	r3, [r3, #28]
 80273a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80273a8:	429a      	cmp	r2, r3
 80273aa:	d908      	bls.n	80273be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80273ac:	4b61      	ldr	r3, [pc, #388]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 80273ae:	69db      	ldr	r3, [r3, #28]
 80273b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80273b4:	687b      	ldr	r3, [r7, #4]
 80273b6:	699b      	ldr	r3, [r3, #24]
 80273b8:	495e      	ldr	r1, [pc, #376]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 80273ba:	4313      	orrs	r3, r2
 80273bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80273be:	687b      	ldr	r3, [r7, #4]
 80273c0:	681b      	ldr	r3, [r3, #0]
 80273c2:	f003 0320 	and.w	r3, r3, #32
 80273c6:	2b00      	cmp	r3, #0
 80273c8:	d010      	beq.n	80273ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80273ca:	687b      	ldr	r3, [r7, #4]
 80273cc:	69da      	ldr	r2, [r3, #28]
 80273ce:	4b59      	ldr	r3, [pc, #356]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 80273d0:	6a1b      	ldr	r3, [r3, #32]
 80273d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80273d6:	429a      	cmp	r2, r3
 80273d8:	d908      	bls.n	80273ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80273da:	4b56      	ldr	r3, [pc, #344]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 80273dc:	6a1b      	ldr	r3, [r3, #32]
 80273de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80273e2:	687b      	ldr	r3, [r7, #4]
 80273e4:	69db      	ldr	r3, [r3, #28]
 80273e6:	4953      	ldr	r1, [pc, #332]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 80273e8:	4313      	orrs	r3, r2
 80273ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80273ec:	687b      	ldr	r3, [r7, #4]
 80273ee:	681b      	ldr	r3, [r3, #0]
 80273f0:	f003 0302 	and.w	r3, r3, #2
 80273f4:	2b00      	cmp	r3, #0
 80273f6:	d010      	beq.n	802741a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80273f8:	687b      	ldr	r3, [r7, #4]
 80273fa:	68da      	ldr	r2, [r3, #12]
 80273fc:	4b4d      	ldr	r3, [pc, #308]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 80273fe:	699b      	ldr	r3, [r3, #24]
 8027400:	f003 030f 	and.w	r3, r3, #15
 8027404:	429a      	cmp	r2, r3
 8027406:	d908      	bls.n	802741a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8027408:	4b4a      	ldr	r3, [pc, #296]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 802740a:	699b      	ldr	r3, [r3, #24]
 802740c:	f023 020f 	bic.w	r2, r3, #15
 8027410:	687b      	ldr	r3, [r7, #4]
 8027412:	68db      	ldr	r3, [r3, #12]
 8027414:	4947      	ldr	r1, [pc, #284]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 8027416:	4313      	orrs	r3, r2
 8027418:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802741a:	687b      	ldr	r3, [r7, #4]
 802741c:	681b      	ldr	r3, [r3, #0]
 802741e:	f003 0301 	and.w	r3, r3, #1
 8027422:	2b00      	cmp	r3, #0
 8027424:	d055      	beq.n	80274d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8027426:	4b43      	ldr	r3, [pc, #268]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 8027428:	699b      	ldr	r3, [r3, #24]
 802742a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 802742e:	687b      	ldr	r3, [r7, #4]
 8027430:	689b      	ldr	r3, [r3, #8]
 8027432:	4940      	ldr	r1, [pc, #256]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 8027434:	4313      	orrs	r3, r2
 8027436:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8027438:	687b      	ldr	r3, [r7, #4]
 802743a:	685b      	ldr	r3, [r3, #4]
 802743c:	2b02      	cmp	r3, #2
 802743e:	d107      	bne.n	8027450 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8027440:	4b3c      	ldr	r3, [pc, #240]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 8027442:	681b      	ldr	r3, [r3, #0]
 8027444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027448:	2b00      	cmp	r3, #0
 802744a:	d121      	bne.n	8027490 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 802744c:	2301      	movs	r3, #1
 802744e:	e0f6      	b.n	802763e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8027450:	687b      	ldr	r3, [r7, #4]
 8027452:	685b      	ldr	r3, [r3, #4]
 8027454:	2b03      	cmp	r3, #3
 8027456:	d107      	bne.n	8027468 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8027458:	4b36      	ldr	r3, [pc, #216]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 802745a:	681b      	ldr	r3, [r3, #0]
 802745c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027460:	2b00      	cmp	r3, #0
 8027462:	d115      	bne.n	8027490 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8027464:	2301      	movs	r3, #1
 8027466:	e0ea      	b.n	802763e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8027468:	687b      	ldr	r3, [r7, #4]
 802746a:	685b      	ldr	r3, [r3, #4]
 802746c:	2b01      	cmp	r3, #1
 802746e:	d107      	bne.n	8027480 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8027470:	4b30      	ldr	r3, [pc, #192]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 8027472:	681b      	ldr	r3, [r3, #0]
 8027474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027478:	2b00      	cmp	r3, #0
 802747a:	d109      	bne.n	8027490 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 802747c:	2301      	movs	r3, #1
 802747e:	e0de      	b.n	802763e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8027480:	4b2c      	ldr	r3, [pc, #176]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 8027482:	681b      	ldr	r3, [r3, #0]
 8027484:	f003 0304 	and.w	r3, r3, #4
 8027488:	2b00      	cmp	r3, #0
 802748a:	d101      	bne.n	8027490 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 802748c:	2301      	movs	r3, #1
 802748e:	e0d6      	b.n	802763e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8027490:	4b28      	ldr	r3, [pc, #160]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 8027492:	691b      	ldr	r3, [r3, #16]
 8027494:	f023 0207 	bic.w	r2, r3, #7
 8027498:	687b      	ldr	r3, [r7, #4]
 802749a:	685b      	ldr	r3, [r3, #4]
 802749c:	4925      	ldr	r1, [pc, #148]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 802749e:	4313      	orrs	r3, r2
 80274a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80274a2:	f7fa fdfd 	bl	80220a0 <HAL_GetTick>
 80274a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80274a8:	e00a      	b.n	80274c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80274aa:	f7fa fdf9 	bl	80220a0 <HAL_GetTick>
 80274ae:	4602      	mov	r2, r0
 80274b0:	697b      	ldr	r3, [r7, #20]
 80274b2:	1ad3      	subs	r3, r2, r3
 80274b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80274b8:	4293      	cmp	r3, r2
 80274ba:	d901      	bls.n	80274c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80274bc:	2303      	movs	r3, #3
 80274be:	e0be      	b.n	802763e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80274c0:	4b1c      	ldr	r3, [pc, #112]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 80274c2:	691b      	ldr	r3, [r3, #16]
 80274c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80274c8:	687b      	ldr	r3, [r7, #4]
 80274ca:	685b      	ldr	r3, [r3, #4]
 80274cc:	00db      	lsls	r3, r3, #3
 80274ce:	429a      	cmp	r2, r3
 80274d0:	d1eb      	bne.n	80274aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80274d2:	687b      	ldr	r3, [r7, #4]
 80274d4:	681b      	ldr	r3, [r3, #0]
 80274d6:	f003 0302 	and.w	r3, r3, #2
 80274da:	2b00      	cmp	r3, #0
 80274dc:	d010      	beq.n	8027500 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80274de:	687b      	ldr	r3, [r7, #4]
 80274e0:	68da      	ldr	r2, [r3, #12]
 80274e2:	4b14      	ldr	r3, [pc, #80]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 80274e4:	699b      	ldr	r3, [r3, #24]
 80274e6:	f003 030f 	and.w	r3, r3, #15
 80274ea:	429a      	cmp	r2, r3
 80274ec:	d208      	bcs.n	8027500 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80274ee:	4b11      	ldr	r3, [pc, #68]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 80274f0:	699b      	ldr	r3, [r3, #24]
 80274f2:	f023 020f 	bic.w	r2, r3, #15
 80274f6:	687b      	ldr	r3, [r7, #4]
 80274f8:	68db      	ldr	r3, [r3, #12]
 80274fa:	490e      	ldr	r1, [pc, #56]	; (8027534 <HAL_RCC_ClockConfig+0x244>)
 80274fc:	4313      	orrs	r3, r2
 80274fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8027500:	4b0b      	ldr	r3, [pc, #44]	; (8027530 <HAL_RCC_ClockConfig+0x240>)
 8027502:	681b      	ldr	r3, [r3, #0]
 8027504:	f003 030f 	and.w	r3, r3, #15
 8027508:	683a      	ldr	r2, [r7, #0]
 802750a:	429a      	cmp	r2, r3
 802750c:	d214      	bcs.n	8027538 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802750e:	4b08      	ldr	r3, [pc, #32]	; (8027530 <HAL_RCC_ClockConfig+0x240>)
 8027510:	681b      	ldr	r3, [r3, #0]
 8027512:	f023 020f 	bic.w	r2, r3, #15
 8027516:	4906      	ldr	r1, [pc, #24]	; (8027530 <HAL_RCC_ClockConfig+0x240>)
 8027518:	683b      	ldr	r3, [r7, #0]
 802751a:	4313      	orrs	r3, r2
 802751c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802751e:	4b04      	ldr	r3, [pc, #16]	; (8027530 <HAL_RCC_ClockConfig+0x240>)
 8027520:	681b      	ldr	r3, [r3, #0]
 8027522:	f003 030f 	and.w	r3, r3, #15
 8027526:	683a      	ldr	r2, [r7, #0]
 8027528:	429a      	cmp	r2, r3
 802752a:	d005      	beq.n	8027538 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 802752c:	2301      	movs	r3, #1
 802752e:	e086      	b.n	802763e <HAL_RCC_ClockConfig+0x34e>
 8027530:	52002000 	.word	0x52002000
 8027534:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8027538:	687b      	ldr	r3, [r7, #4]
 802753a:	681b      	ldr	r3, [r3, #0]
 802753c:	f003 0304 	and.w	r3, r3, #4
 8027540:	2b00      	cmp	r3, #0
 8027542:	d010      	beq.n	8027566 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8027544:	687b      	ldr	r3, [r7, #4]
 8027546:	691a      	ldr	r2, [r3, #16]
 8027548:	4b3f      	ldr	r3, [pc, #252]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 802754a:	699b      	ldr	r3, [r3, #24]
 802754c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8027550:	429a      	cmp	r2, r3
 8027552:	d208      	bcs.n	8027566 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8027554:	4b3c      	ldr	r3, [pc, #240]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 8027556:	699b      	ldr	r3, [r3, #24]
 8027558:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802755c:	687b      	ldr	r3, [r7, #4]
 802755e:	691b      	ldr	r3, [r3, #16]
 8027560:	4939      	ldr	r1, [pc, #228]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 8027562:	4313      	orrs	r3, r2
 8027564:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027566:	687b      	ldr	r3, [r7, #4]
 8027568:	681b      	ldr	r3, [r3, #0]
 802756a:	f003 0308 	and.w	r3, r3, #8
 802756e:	2b00      	cmp	r3, #0
 8027570:	d010      	beq.n	8027594 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8027572:	687b      	ldr	r3, [r7, #4]
 8027574:	695a      	ldr	r2, [r3, #20]
 8027576:	4b34      	ldr	r3, [pc, #208]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 8027578:	69db      	ldr	r3, [r3, #28]
 802757a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802757e:	429a      	cmp	r2, r3
 8027580:	d208      	bcs.n	8027594 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8027582:	4b31      	ldr	r3, [pc, #196]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 8027584:	69db      	ldr	r3, [r3, #28]
 8027586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802758a:	687b      	ldr	r3, [r7, #4]
 802758c:	695b      	ldr	r3, [r3, #20]
 802758e:	492e      	ldr	r1, [pc, #184]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 8027590:	4313      	orrs	r3, r2
 8027592:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027594:	687b      	ldr	r3, [r7, #4]
 8027596:	681b      	ldr	r3, [r3, #0]
 8027598:	f003 0310 	and.w	r3, r3, #16
 802759c:	2b00      	cmp	r3, #0
 802759e:	d010      	beq.n	80275c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80275a0:	687b      	ldr	r3, [r7, #4]
 80275a2:	699a      	ldr	r2, [r3, #24]
 80275a4:	4b28      	ldr	r3, [pc, #160]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 80275a6:	69db      	ldr	r3, [r3, #28]
 80275a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80275ac:	429a      	cmp	r2, r3
 80275ae:	d208      	bcs.n	80275c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80275b0:	4b25      	ldr	r3, [pc, #148]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 80275b2:	69db      	ldr	r3, [r3, #28]
 80275b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80275b8:	687b      	ldr	r3, [r7, #4]
 80275ba:	699b      	ldr	r3, [r3, #24]
 80275bc:	4922      	ldr	r1, [pc, #136]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 80275be:	4313      	orrs	r3, r2
 80275c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80275c2:	687b      	ldr	r3, [r7, #4]
 80275c4:	681b      	ldr	r3, [r3, #0]
 80275c6:	f003 0320 	and.w	r3, r3, #32
 80275ca:	2b00      	cmp	r3, #0
 80275cc:	d010      	beq.n	80275f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80275ce:	687b      	ldr	r3, [r7, #4]
 80275d0:	69da      	ldr	r2, [r3, #28]
 80275d2:	4b1d      	ldr	r3, [pc, #116]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 80275d4:	6a1b      	ldr	r3, [r3, #32]
 80275d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80275da:	429a      	cmp	r2, r3
 80275dc:	d208      	bcs.n	80275f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80275de:	4b1a      	ldr	r3, [pc, #104]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 80275e0:	6a1b      	ldr	r3, [r3, #32]
 80275e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80275e6:	687b      	ldr	r3, [r7, #4]
 80275e8:	69db      	ldr	r3, [r3, #28]
 80275ea:	4917      	ldr	r1, [pc, #92]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 80275ec:	4313      	orrs	r3, r2
 80275ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80275f0:	f000 f834 	bl	802765c <HAL_RCC_GetSysClockFreq>
 80275f4:	4602      	mov	r2, r0
 80275f6:	4b14      	ldr	r3, [pc, #80]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 80275f8:	699b      	ldr	r3, [r3, #24]
 80275fa:	0a1b      	lsrs	r3, r3, #8
 80275fc:	f003 030f 	and.w	r3, r3, #15
 8027600:	4912      	ldr	r1, [pc, #72]	; (802764c <HAL_RCC_ClockConfig+0x35c>)
 8027602:	5ccb      	ldrb	r3, [r1, r3]
 8027604:	f003 031f 	and.w	r3, r3, #31
 8027608:	fa22 f303 	lsr.w	r3, r2, r3
 802760c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802760e:	4b0e      	ldr	r3, [pc, #56]	; (8027648 <HAL_RCC_ClockConfig+0x358>)
 8027610:	699b      	ldr	r3, [r3, #24]
 8027612:	f003 030f 	and.w	r3, r3, #15
 8027616:	4a0d      	ldr	r2, [pc, #52]	; (802764c <HAL_RCC_ClockConfig+0x35c>)
 8027618:	5cd3      	ldrb	r3, [r2, r3]
 802761a:	f003 031f 	and.w	r3, r3, #31
 802761e:	693a      	ldr	r2, [r7, #16]
 8027620:	fa22 f303 	lsr.w	r3, r2, r3
 8027624:	4a0a      	ldr	r2, [pc, #40]	; (8027650 <HAL_RCC_ClockConfig+0x360>)
 8027626:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8027628:	4a0a      	ldr	r2, [pc, #40]	; (8027654 <HAL_RCC_ClockConfig+0x364>)
 802762a:	693b      	ldr	r3, [r7, #16]
 802762c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 802762e:	4b0a      	ldr	r3, [pc, #40]	; (8027658 <HAL_RCC_ClockConfig+0x368>)
 8027630:	681b      	ldr	r3, [r3, #0]
 8027632:	4618      	mov	r0, r3
 8027634:	f7fa fb0a 	bl	8021c4c <HAL_InitTick>
 8027638:	4603      	mov	r3, r0
 802763a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 802763c:	7bfb      	ldrb	r3, [r7, #15]
}
 802763e:	4618      	mov	r0, r3
 8027640:	3718      	adds	r7, #24
 8027642:	46bd      	mov	sp, r7
 8027644:	bd80      	pop	{r7, pc}
 8027646:	bf00      	nop
 8027648:	58024400 	.word	0x58024400
 802764c:	0803b890 	.word	0x0803b890
 8027650:	24000004 	.word	0x24000004
 8027654:	24000000 	.word	0x24000000
 8027658:	24000008 	.word	0x24000008

0802765c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802765c:	b480      	push	{r7}
 802765e:	b089      	sub	sp, #36	; 0x24
 8027660:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8027662:	4bb3      	ldr	r3, [pc, #716]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8027664:	691b      	ldr	r3, [r3, #16]
 8027666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802766a:	2b18      	cmp	r3, #24
 802766c:	f200 8155 	bhi.w	802791a <HAL_RCC_GetSysClockFreq+0x2be>
 8027670:	a201      	add	r2, pc, #4	; (adr r2, 8027678 <HAL_RCC_GetSysClockFreq+0x1c>)
 8027672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027676:	bf00      	nop
 8027678:	080276dd 	.word	0x080276dd
 802767c:	0802791b 	.word	0x0802791b
 8027680:	0802791b 	.word	0x0802791b
 8027684:	0802791b 	.word	0x0802791b
 8027688:	0802791b 	.word	0x0802791b
 802768c:	0802791b 	.word	0x0802791b
 8027690:	0802791b 	.word	0x0802791b
 8027694:	0802791b 	.word	0x0802791b
 8027698:	08027703 	.word	0x08027703
 802769c:	0802791b 	.word	0x0802791b
 80276a0:	0802791b 	.word	0x0802791b
 80276a4:	0802791b 	.word	0x0802791b
 80276a8:	0802791b 	.word	0x0802791b
 80276ac:	0802791b 	.word	0x0802791b
 80276b0:	0802791b 	.word	0x0802791b
 80276b4:	0802791b 	.word	0x0802791b
 80276b8:	08027709 	.word	0x08027709
 80276bc:	0802791b 	.word	0x0802791b
 80276c0:	0802791b 	.word	0x0802791b
 80276c4:	0802791b 	.word	0x0802791b
 80276c8:	0802791b 	.word	0x0802791b
 80276cc:	0802791b 	.word	0x0802791b
 80276d0:	0802791b 	.word	0x0802791b
 80276d4:	0802791b 	.word	0x0802791b
 80276d8:	0802770f 	.word	0x0802770f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80276dc:	4b94      	ldr	r3, [pc, #592]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80276de:	681b      	ldr	r3, [r3, #0]
 80276e0:	f003 0320 	and.w	r3, r3, #32
 80276e4:	2b00      	cmp	r3, #0
 80276e6:	d009      	beq.n	80276fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80276e8:	4b91      	ldr	r3, [pc, #580]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80276ea:	681b      	ldr	r3, [r3, #0]
 80276ec:	08db      	lsrs	r3, r3, #3
 80276ee:	f003 0303 	and.w	r3, r3, #3
 80276f2:	4a90      	ldr	r2, [pc, #576]	; (8027934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80276f4:	fa22 f303 	lsr.w	r3, r2, r3
 80276f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80276fa:	e111      	b.n	8027920 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80276fc:	4b8d      	ldr	r3, [pc, #564]	; (8027934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80276fe:	61bb      	str	r3, [r7, #24]
    break;
 8027700:	e10e      	b.n	8027920 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8027702:	4b8d      	ldr	r3, [pc, #564]	; (8027938 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8027704:	61bb      	str	r3, [r7, #24]
    break;
 8027706:	e10b      	b.n	8027920 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8027708:	4b8c      	ldr	r3, [pc, #560]	; (802793c <HAL_RCC_GetSysClockFreq+0x2e0>)
 802770a:	61bb      	str	r3, [r7, #24]
    break;
 802770c:	e108      	b.n	8027920 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 802770e:	4b88      	ldr	r3, [pc, #544]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8027710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027712:	f003 0303 	and.w	r3, r3, #3
 8027716:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8027718:	4b85      	ldr	r3, [pc, #532]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802771a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802771c:	091b      	lsrs	r3, r3, #4
 802771e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027722:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8027724:	4b82      	ldr	r3, [pc, #520]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8027726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027728:	f003 0301 	and.w	r3, r3, #1
 802772c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 802772e:	4b80      	ldr	r3, [pc, #512]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8027730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027732:	08db      	lsrs	r3, r3, #3
 8027734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8027738:	68fa      	ldr	r2, [r7, #12]
 802773a:	fb02 f303 	mul.w	r3, r2, r3
 802773e:	ee07 3a90 	vmov	s15, r3
 8027742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8027746:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 802774a:	693b      	ldr	r3, [r7, #16]
 802774c:	2b00      	cmp	r3, #0
 802774e:	f000 80e1 	beq.w	8027914 <HAL_RCC_GetSysClockFreq+0x2b8>
 8027752:	697b      	ldr	r3, [r7, #20]
 8027754:	2b02      	cmp	r3, #2
 8027756:	f000 8083 	beq.w	8027860 <HAL_RCC_GetSysClockFreq+0x204>
 802775a:	697b      	ldr	r3, [r7, #20]
 802775c:	2b02      	cmp	r3, #2
 802775e:	f200 80a1 	bhi.w	80278a4 <HAL_RCC_GetSysClockFreq+0x248>
 8027762:	697b      	ldr	r3, [r7, #20]
 8027764:	2b00      	cmp	r3, #0
 8027766:	d003      	beq.n	8027770 <HAL_RCC_GetSysClockFreq+0x114>
 8027768:	697b      	ldr	r3, [r7, #20]
 802776a:	2b01      	cmp	r3, #1
 802776c:	d056      	beq.n	802781c <HAL_RCC_GetSysClockFreq+0x1c0>
 802776e:	e099      	b.n	80278a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8027770:	4b6f      	ldr	r3, [pc, #444]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8027772:	681b      	ldr	r3, [r3, #0]
 8027774:	f003 0320 	and.w	r3, r3, #32
 8027778:	2b00      	cmp	r3, #0
 802777a:	d02d      	beq.n	80277d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 802777c:	4b6c      	ldr	r3, [pc, #432]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802777e:	681b      	ldr	r3, [r3, #0]
 8027780:	08db      	lsrs	r3, r3, #3
 8027782:	f003 0303 	and.w	r3, r3, #3
 8027786:	4a6b      	ldr	r2, [pc, #428]	; (8027934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8027788:	fa22 f303 	lsr.w	r3, r2, r3
 802778c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 802778e:	687b      	ldr	r3, [r7, #4]
 8027790:	ee07 3a90 	vmov	s15, r3
 8027794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8027798:	693b      	ldr	r3, [r7, #16]
 802779a:	ee07 3a90 	vmov	s15, r3
 802779e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80277a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80277a6:	4b62      	ldr	r3, [pc, #392]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80277a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80277aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80277ae:	ee07 3a90 	vmov	s15, r3
 80277b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80277b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80277ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8027940 <HAL_RCC_GetSysClockFreq+0x2e4>
 80277be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80277c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80277c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80277ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80277ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80277d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80277d6:	e087      	b.n	80278e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80277d8:	693b      	ldr	r3, [r7, #16]
 80277da:	ee07 3a90 	vmov	s15, r3
 80277de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80277e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8027944 <HAL_RCC_GetSysClockFreq+0x2e8>
 80277e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80277ea:	4b51      	ldr	r3, [pc, #324]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80277ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80277ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80277f2:	ee07 3a90 	vmov	s15, r3
 80277f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80277fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80277fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8027940 <HAL_RCC_GetSysClockFreq+0x2e4>
 8027802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8027806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802780a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802780e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802781a:	e065      	b.n	80278e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 802781c:	693b      	ldr	r3, [r7, #16]
 802781e:	ee07 3a90 	vmov	s15, r3
 8027822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8027826:	eddf 6a48 	vldr	s13, [pc, #288]	; 8027948 <HAL_RCC_GetSysClockFreq+0x2ec>
 802782a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802782e:	4b40      	ldr	r3, [pc, #256]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8027830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027836:	ee07 3a90 	vmov	s15, r3
 802783a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802783e:	ed97 6a02 	vldr	s12, [r7, #8]
 8027842:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8027940 <HAL_RCC_GetSysClockFreq+0x2e4>
 8027846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802784a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802784e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8027852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027856:	ee67 7a27 	vmul.f32	s15, s14, s15
 802785a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802785e:	e043      	b.n	80278e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8027860:	693b      	ldr	r3, [r7, #16]
 8027862:	ee07 3a90 	vmov	s15, r3
 8027866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802786a:	eddf 6a38 	vldr	s13, [pc, #224]	; 802794c <HAL_RCC_GetSysClockFreq+0x2f0>
 802786e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8027872:	4b2f      	ldr	r3, [pc, #188]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8027874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802787a:	ee07 3a90 	vmov	s15, r3
 802787e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8027882:	ed97 6a02 	vldr	s12, [r7, #8]
 8027886:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8027940 <HAL_RCC_GetSysClockFreq+0x2e4>
 802788a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802788e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8027892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8027896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802789a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802789e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80278a2:	e021      	b.n	80278e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80278a4:	693b      	ldr	r3, [r7, #16]
 80278a6:	ee07 3a90 	vmov	s15, r3
 80278aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80278ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8027948 <HAL_RCC_GetSysClockFreq+0x2ec>
 80278b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80278b6:	4b1e      	ldr	r3, [pc, #120]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80278b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80278ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80278be:	ee07 3a90 	vmov	s15, r3
 80278c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80278c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80278ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8027940 <HAL_RCC_GetSysClockFreq+0x2e4>
 80278ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80278d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80278d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80278da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80278de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80278e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80278e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80278e8:	4b11      	ldr	r3, [pc, #68]	; (8027930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80278ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80278ec:	0a5b      	lsrs	r3, r3, #9
 80278ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80278f2:	3301      	adds	r3, #1
 80278f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80278f6:	683b      	ldr	r3, [r7, #0]
 80278f8:	ee07 3a90 	vmov	s15, r3
 80278fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8027900:	edd7 6a07 	vldr	s13, [r7, #28]
 8027904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8027908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802790c:	ee17 3a90 	vmov	r3, s15
 8027910:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8027912:	e005      	b.n	8027920 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8027914:	2300      	movs	r3, #0
 8027916:	61bb      	str	r3, [r7, #24]
    break;
 8027918:	e002      	b.n	8027920 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 802791a:	4b07      	ldr	r3, [pc, #28]	; (8027938 <HAL_RCC_GetSysClockFreq+0x2dc>)
 802791c:	61bb      	str	r3, [r7, #24]
    break;
 802791e:	bf00      	nop
  }

  return sysclockfreq;
 8027920:	69bb      	ldr	r3, [r7, #24]
}
 8027922:	4618      	mov	r0, r3
 8027924:	3724      	adds	r7, #36	; 0x24
 8027926:	46bd      	mov	sp, r7
 8027928:	f85d 7b04 	ldr.w	r7, [sp], #4
 802792c:	4770      	bx	lr
 802792e:	bf00      	nop
 8027930:	58024400 	.word	0x58024400
 8027934:	03d09000 	.word	0x03d09000
 8027938:	003d0900 	.word	0x003d0900
 802793c:	007a1200 	.word	0x007a1200
 8027940:	46000000 	.word	0x46000000
 8027944:	4c742400 	.word	0x4c742400
 8027948:	4a742400 	.word	0x4a742400
 802794c:	4af42400 	.word	0x4af42400

08027950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8027950:	b580      	push	{r7, lr}
 8027952:	b082      	sub	sp, #8
 8027954:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8027956:	f7ff fe81 	bl	802765c <HAL_RCC_GetSysClockFreq>
 802795a:	4602      	mov	r2, r0
 802795c:	4b10      	ldr	r3, [pc, #64]	; (80279a0 <HAL_RCC_GetHCLKFreq+0x50>)
 802795e:	699b      	ldr	r3, [r3, #24]
 8027960:	0a1b      	lsrs	r3, r3, #8
 8027962:	f003 030f 	and.w	r3, r3, #15
 8027966:	490f      	ldr	r1, [pc, #60]	; (80279a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8027968:	5ccb      	ldrb	r3, [r1, r3]
 802796a:	f003 031f 	and.w	r3, r3, #31
 802796e:	fa22 f303 	lsr.w	r3, r2, r3
 8027972:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8027974:	4b0a      	ldr	r3, [pc, #40]	; (80279a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8027976:	699b      	ldr	r3, [r3, #24]
 8027978:	f003 030f 	and.w	r3, r3, #15
 802797c:	4a09      	ldr	r2, [pc, #36]	; (80279a4 <HAL_RCC_GetHCLKFreq+0x54>)
 802797e:	5cd3      	ldrb	r3, [r2, r3]
 8027980:	f003 031f 	and.w	r3, r3, #31
 8027984:	687a      	ldr	r2, [r7, #4]
 8027986:	fa22 f303 	lsr.w	r3, r2, r3
 802798a:	4a07      	ldr	r2, [pc, #28]	; (80279a8 <HAL_RCC_GetHCLKFreq+0x58>)
 802798c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802798e:	4a07      	ldr	r2, [pc, #28]	; (80279ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8027990:	687b      	ldr	r3, [r7, #4]
 8027992:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8027994:	4b04      	ldr	r3, [pc, #16]	; (80279a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8027996:	681b      	ldr	r3, [r3, #0]
}
 8027998:	4618      	mov	r0, r3
 802799a:	3708      	adds	r7, #8
 802799c:	46bd      	mov	sp, r7
 802799e:	bd80      	pop	{r7, pc}
 80279a0:	58024400 	.word	0x58024400
 80279a4:	0803b890 	.word	0x0803b890
 80279a8:	24000004 	.word	0x24000004
 80279ac:	24000000 	.word	0x24000000

080279b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80279b0:	b580      	push	{r7, lr}
 80279b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80279b4:	f7ff ffcc 	bl	8027950 <HAL_RCC_GetHCLKFreq>
 80279b8:	4602      	mov	r2, r0
 80279ba:	4b06      	ldr	r3, [pc, #24]	; (80279d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80279bc:	69db      	ldr	r3, [r3, #28]
 80279be:	091b      	lsrs	r3, r3, #4
 80279c0:	f003 0307 	and.w	r3, r3, #7
 80279c4:	4904      	ldr	r1, [pc, #16]	; (80279d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80279c6:	5ccb      	ldrb	r3, [r1, r3]
 80279c8:	f003 031f 	and.w	r3, r3, #31
 80279cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80279d0:	4618      	mov	r0, r3
 80279d2:	bd80      	pop	{r7, pc}
 80279d4:	58024400 	.word	0x58024400
 80279d8:	0803b890 	.word	0x0803b890

080279dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80279dc:	b580      	push	{r7, lr}
 80279de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80279e0:	f7ff ffb6 	bl	8027950 <HAL_RCC_GetHCLKFreq>
 80279e4:	4602      	mov	r2, r0
 80279e6:	4b06      	ldr	r3, [pc, #24]	; (8027a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80279e8:	69db      	ldr	r3, [r3, #28]
 80279ea:	0a1b      	lsrs	r3, r3, #8
 80279ec:	f003 0307 	and.w	r3, r3, #7
 80279f0:	4904      	ldr	r1, [pc, #16]	; (8027a04 <HAL_RCC_GetPCLK2Freq+0x28>)
 80279f2:	5ccb      	ldrb	r3, [r1, r3]
 80279f4:	f003 031f 	and.w	r3, r3, #31
 80279f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80279fc:	4618      	mov	r0, r3
 80279fe:	bd80      	pop	{r7, pc}
 8027a00:	58024400 	.word	0x58024400
 8027a04:	0803b890 	.word	0x0803b890

08027a08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8027a08:	b480      	push	{r7}
 8027a0a:	b083      	sub	sp, #12
 8027a0c:	af00      	add	r7, sp, #0
 8027a0e:	6078      	str	r0, [r7, #4]
 8027a10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8027a12:	687b      	ldr	r3, [r7, #4]
 8027a14:	223f      	movs	r2, #63	; 0x3f
 8027a16:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027a18:	4b1a      	ldr	r3, [pc, #104]	; (8027a84 <HAL_RCC_GetClockConfig+0x7c>)
 8027a1a:	691b      	ldr	r3, [r3, #16]
 8027a1c:	f003 0207 	and.w	r2, r3, #7
 8027a20:	687b      	ldr	r3, [r7, #4]
 8027a22:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8027a24:	4b17      	ldr	r3, [pc, #92]	; (8027a84 <HAL_RCC_GetClockConfig+0x7c>)
 8027a26:	699b      	ldr	r3, [r3, #24]
 8027a28:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8027a2c:	687b      	ldr	r3, [r7, #4]
 8027a2e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8027a30:	4b14      	ldr	r3, [pc, #80]	; (8027a84 <HAL_RCC_GetClockConfig+0x7c>)
 8027a32:	699b      	ldr	r3, [r3, #24]
 8027a34:	f003 020f 	and.w	r2, r3, #15
 8027a38:	687b      	ldr	r3, [r7, #4]
 8027a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8027a3c:	4b11      	ldr	r3, [pc, #68]	; (8027a84 <HAL_RCC_GetClockConfig+0x7c>)
 8027a3e:	699b      	ldr	r3, [r3, #24]
 8027a40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8027a44:	687b      	ldr	r3, [r7, #4]
 8027a46:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8027a48:	4b0e      	ldr	r3, [pc, #56]	; (8027a84 <HAL_RCC_GetClockConfig+0x7c>)
 8027a4a:	69db      	ldr	r3, [r3, #28]
 8027a4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8027a50:	687b      	ldr	r3, [r7, #4]
 8027a52:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8027a54:	4b0b      	ldr	r3, [pc, #44]	; (8027a84 <HAL_RCC_GetClockConfig+0x7c>)
 8027a56:	69db      	ldr	r3, [r3, #28]
 8027a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8027a5c:	687b      	ldr	r3, [r7, #4]
 8027a5e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8027a60:	4b08      	ldr	r3, [pc, #32]	; (8027a84 <HAL_RCC_GetClockConfig+0x7c>)
 8027a62:	6a1b      	ldr	r3, [r3, #32]
 8027a64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8027a68:	687b      	ldr	r3, [r7, #4]
 8027a6a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027a6c:	4b06      	ldr	r3, [pc, #24]	; (8027a88 <HAL_RCC_GetClockConfig+0x80>)
 8027a6e:	681b      	ldr	r3, [r3, #0]
 8027a70:	f003 020f 	and.w	r2, r3, #15
 8027a74:	683b      	ldr	r3, [r7, #0]
 8027a76:	601a      	str	r2, [r3, #0]
}
 8027a78:	bf00      	nop
 8027a7a:	370c      	adds	r7, #12
 8027a7c:	46bd      	mov	sp, r7
 8027a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a82:	4770      	bx	lr
 8027a84:	58024400 	.word	0x58024400
 8027a88:	52002000 	.word	0x52002000

08027a8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027a8c:	b580      	push	{r7, lr}
 8027a8e:	b086      	sub	sp, #24
 8027a90:	af00      	add	r7, sp, #0
 8027a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8027a94:	2300      	movs	r3, #0
 8027a96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8027a98:	2300      	movs	r3, #0
 8027a9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8027a9c:	687b      	ldr	r3, [r7, #4]
 8027a9e:	681b      	ldr	r3, [r3, #0]
 8027aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027aa4:	2b00      	cmp	r3, #0
 8027aa6:	d03f      	beq.n	8027b28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8027aa8:	687b      	ldr	r3, [r7, #4]
 8027aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8027aac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8027ab0:	d02a      	beq.n	8027b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8027ab2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8027ab6:	d824      	bhi.n	8027b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8027ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8027abc:	d018      	beq.n	8027af0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8027abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8027ac2:	d81e      	bhi.n	8027b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8027ac4:	2b00      	cmp	r3, #0
 8027ac6:	d003      	beq.n	8027ad0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8027ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8027acc:	d007      	beq.n	8027ade <HAL_RCCEx_PeriphCLKConfig+0x52>
 8027ace:	e018      	b.n	8027b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027ad0:	4ba4      	ldr	r3, [pc, #656]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027ad4:	4aa3      	ldr	r2, [pc, #652]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8027adc:	e015      	b.n	8027b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8027ade:	687b      	ldr	r3, [r7, #4]
 8027ae0:	3304      	adds	r3, #4
 8027ae2:	2102      	movs	r1, #2
 8027ae4:	4618      	mov	r0, r3
 8027ae6:	f001 f989 	bl	8028dfc <RCCEx_PLL2_Config>
 8027aea:	4603      	mov	r3, r0
 8027aec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8027aee:	e00c      	b.n	8027b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8027af0:	687b      	ldr	r3, [r7, #4]
 8027af2:	3324      	adds	r3, #36	; 0x24
 8027af4:	2102      	movs	r1, #2
 8027af6:	4618      	mov	r0, r3
 8027af8:	f001 fa32 	bl	8028f60 <RCCEx_PLL3_Config>
 8027afc:	4603      	mov	r3, r0
 8027afe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8027b00:	e003      	b.n	8027b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8027b02:	2301      	movs	r3, #1
 8027b04:	75fb      	strb	r3, [r7, #23]
      break;
 8027b06:	e000      	b.n	8027b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8027b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027b0a:	7dfb      	ldrb	r3, [r7, #23]
 8027b0c:	2b00      	cmp	r3, #0
 8027b0e:	d109      	bne.n	8027b24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8027b10:	4b94      	ldr	r3, [pc, #592]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8027b18:	687b      	ldr	r3, [r7, #4]
 8027b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8027b1c:	4991      	ldr	r1, [pc, #580]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027b1e:	4313      	orrs	r3, r2
 8027b20:	650b      	str	r3, [r1, #80]	; 0x50
 8027b22:	e001      	b.n	8027b28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027b24:	7dfb      	ldrb	r3, [r7, #23]
 8027b26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8027b28:	687b      	ldr	r3, [r7, #4]
 8027b2a:	681b      	ldr	r3, [r3, #0]
 8027b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027b30:	2b00      	cmp	r3, #0
 8027b32:	d03d      	beq.n	8027bb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8027b34:	687b      	ldr	r3, [r7, #4]
 8027b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027b38:	2b04      	cmp	r3, #4
 8027b3a:	d826      	bhi.n	8027b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8027b3c:	a201      	add	r2, pc, #4	; (adr r2, 8027b44 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8027b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027b42:	bf00      	nop
 8027b44:	08027b59 	.word	0x08027b59
 8027b48:	08027b67 	.word	0x08027b67
 8027b4c:	08027b79 	.word	0x08027b79
 8027b50:	08027b91 	.word	0x08027b91
 8027b54:	08027b91 	.word	0x08027b91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027b58:	4b82      	ldr	r3, [pc, #520]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027b5c:	4a81      	ldr	r2, [pc, #516]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027b62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027b64:	e015      	b.n	8027b92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8027b66:	687b      	ldr	r3, [r7, #4]
 8027b68:	3304      	adds	r3, #4
 8027b6a:	2100      	movs	r1, #0
 8027b6c:	4618      	mov	r0, r3
 8027b6e:	f001 f945 	bl	8028dfc <RCCEx_PLL2_Config>
 8027b72:	4603      	mov	r3, r0
 8027b74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027b76:	e00c      	b.n	8027b92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8027b78:	687b      	ldr	r3, [r7, #4]
 8027b7a:	3324      	adds	r3, #36	; 0x24
 8027b7c:	2100      	movs	r1, #0
 8027b7e:	4618      	mov	r0, r3
 8027b80:	f001 f9ee 	bl	8028f60 <RCCEx_PLL3_Config>
 8027b84:	4603      	mov	r3, r0
 8027b86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027b88:	e003      	b.n	8027b92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8027b8a:	2301      	movs	r3, #1
 8027b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8027b8e:	e000      	b.n	8027b92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8027b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027b92:	7dfb      	ldrb	r3, [r7, #23]
 8027b94:	2b00      	cmp	r3, #0
 8027b96:	d109      	bne.n	8027bac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8027b98:	4b72      	ldr	r3, [pc, #456]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027b9c:	f023 0207 	bic.w	r2, r3, #7
 8027ba0:	687b      	ldr	r3, [r7, #4]
 8027ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027ba4:	496f      	ldr	r1, [pc, #444]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027ba6:	4313      	orrs	r3, r2
 8027ba8:	650b      	str	r3, [r1, #80]	; 0x50
 8027baa:	e001      	b.n	8027bb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027bac:	7dfb      	ldrb	r3, [r7, #23]
 8027bae:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8027bb0:	687b      	ldr	r3, [r7, #4]
 8027bb2:	681b      	ldr	r3, [r3, #0]
 8027bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027bb8:	2b00      	cmp	r3, #0
 8027bba:	d051      	beq.n	8027c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8027bbc:	687b      	ldr	r3, [r7, #4]
 8027bbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8027bc2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8027bc6:	d036      	beq.n	8027c36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8027bc8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8027bcc:	d830      	bhi.n	8027c30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8027bce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8027bd2:	d032      	beq.n	8027c3a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8027bd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8027bd8:	d82a      	bhi.n	8027c30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8027bda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8027bde:	d02e      	beq.n	8027c3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8027be0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8027be4:	d824      	bhi.n	8027c30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8027be6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027bea:	d018      	beq.n	8027c1e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8027bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027bf0:	d81e      	bhi.n	8027c30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8027bf2:	2b00      	cmp	r3, #0
 8027bf4:	d003      	beq.n	8027bfe <HAL_RCCEx_PeriphCLKConfig+0x172>
 8027bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8027bfa:	d007      	beq.n	8027c0c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8027bfc:	e018      	b.n	8027c30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027bfe:	4b59      	ldr	r3, [pc, #356]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027c02:	4a58      	ldr	r2, [pc, #352]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027c08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027c0a:	e019      	b.n	8027c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8027c0c:	687b      	ldr	r3, [r7, #4]
 8027c0e:	3304      	adds	r3, #4
 8027c10:	2100      	movs	r1, #0
 8027c12:	4618      	mov	r0, r3
 8027c14:	f001 f8f2 	bl	8028dfc <RCCEx_PLL2_Config>
 8027c18:	4603      	mov	r3, r0
 8027c1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8027c1c:	e010      	b.n	8027c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8027c1e:	687b      	ldr	r3, [r7, #4]
 8027c20:	3324      	adds	r3, #36	; 0x24
 8027c22:	2100      	movs	r1, #0
 8027c24:	4618      	mov	r0, r3
 8027c26:	f001 f99b 	bl	8028f60 <RCCEx_PLL3_Config>
 8027c2a:	4603      	mov	r3, r0
 8027c2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027c2e:	e007      	b.n	8027c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8027c30:	2301      	movs	r3, #1
 8027c32:	75fb      	strb	r3, [r7, #23]
      break;
 8027c34:	e004      	b.n	8027c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8027c36:	bf00      	nop
 8027c38:	e002      	b.n	8027c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8027c3a:	bf00      	nop
 8027c3c:	e000      	b.n	8027c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8027c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027c40:	7dfb      	ldrb	r3, [r7, #23]
 8027c42:	2b00      	cmp	r3, #0
 8027c44:	d10a      	bne.n	8027c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8027c46:	4b47      	ldr	r3, [pc, #284]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027c4a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8027c4e:	687b      	ldr	r3, [r7, #4]
 8027c50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8027c54:	4943      	ldr	r1, [pc, #268]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027c56:	4313      	orrs	r3, r2
 8027c58:	658b      	str	r3, [r1, #88]	; 0x58
 8027c5a:	e001      	b.n	8027c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027c5c:	7dfb      	ldrb	r3, [r7, #23]
 8027c5e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8027c60:	687b      	ldr	r3, [r7, #4]
 8027c62:	681b      	ldr	r3, [r3, #0]
 8027c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8027c68:	2b00      	cmp	r3, #0
 8027c6a:	d051      	beq.n	8027d10 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8027c6c:	687b      	ldr	r3, [r7, #4]
 8027c6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8027c72:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8027c76:	d036      	beq.n	8027ce6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8027c78:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8027c7c:	d830      	bhi.n	8027ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8027c7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8027c82:	d032      	beq.n	8027cea <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8027c84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8027c88:	d82a      	bhi.n	8027ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8027c8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8027c8e:	d02e      	beq.n	8027cee <HAL_RCCEx_PeriphCLKConfig+0x262>
 8027c90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8027c94:	d824      	bhi.n	8027ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8027c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8027c9a:	d018      	beq.n	8027cce <HAL_RCCEx_PeriphCLKConfig+0x242>
 8027c9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8027ca0:	d81e      	bhi.n	8027ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8027ca2:	2b00      	cmp	r3, #0
 8027ca4:	d003      	beq.n	8027cae <HAL_RCCEx_PeriphCLKConfig+0x222>
 8027ca6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8027caa:	d007      	beq.n	8027cbc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8027cac:	e018      	b.n	8027ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027cae:	4b2d      	ldr	r3, [pc, #180]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027cb2:	4a2c      	ldr	r2, [pc, #176]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027cba:	e019      	b.n	8027cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8027cbc:	687b      	ldr	r3, [r7, #4]
 8027cbe:	3304      	adds	r3, #4
 8027cc0:	2100      	movs	r1, #0
 8027cc2:	4618      	mov	r0, r3
 8027cc4:	f001 f89a 	bl	8028dfc <RCCEx_PLL2_Config>
 8027cc8:	4603      	mov	r3, r0
 8027cca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8027ccc:	e010      	b.n	8027cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8027cce:	687b      	ldr	r3, [r7, #4]
 8027cd0:	3324      	adds	r3, #36	; 0x24
 8027cd2:	2100      	movs	r1, #0
 8027cd4:	4618      	mov	r0, r3
 8027cd6:	f001 f943 	bl	8028f60 <RCCEx_PLL3_Config>
 8027cda:	4603      	mov	r3, r0
 8027cdc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8027cde:	e007      	b.n	8027cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8027ce0:	2301      	movs	r3, #1
 8027ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8027ce4:	e004      	b.n	8027cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8027ce6:	bf00      	nop
 8027ce8:	e002      	b.n	8027cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8027cea:	bf00      	nop
 8027cec:	e000      	b.n	8027cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8027cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027cf0:	7dfb      	ldrb	r3, [r7, #23]
 8027cf2:	2b00      	cmp	r3, #0
 8027cf4:	d10a      	bne.n	8027d0c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8027cf6:	4b1b      	ldr	r3, [pc, #108]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027cfa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8027cfe:	687b      	ldr	r3, [r7, #4]
 8027d00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8027d04:	4917      	ldr	r1, [pc, #92]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027d06:	4313      	orrs	r3, r2
 8027d08:	658b      	str	r3, [r1, #88]	; 0x58
 8027d0a:	e001      	b.n	8027d10 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027d0c:	7dfb      	ldrb	r3, [r7, #23]
 8027d0e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8027d10:	687b      	ldr	r3, [r7, #4]
 8027d12:	681b      	ldr	r3, [r3, #0]
 8027d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027d18:	2b00      	cmp	r3, #0
 8027d1a:	d035      	beq.n	8027d88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8027d1c:	687b      	ldr	r3, [r7, #4]
 8027d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027d20:	2b30      	cmp	r3, #48	; 0x30
 8027d22:	d01c      	beq.n	8027d5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8027d24:	2b30      	cmp	r3, #48	; 0x30
 8027d26:	d817      	bhi.n	8027d58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8027d28:	2b20      	cmp	r3, #32
 8027d2a:	d00c      	beq.n	8027d46 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8027d2c:	2b20      	cmp	r3, #32
 8027d2e:	d813      	bhi.n	8027d58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8027d30:	2b00      	cmp	r3, #0
 8027d32:	d019      	beq.n	8027d68 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8027d34:	2b10      	cmp	r3, #16
 8027d36:	d10f      	bne.n	8027d58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027d38:	4b0a      	ldr	r3, [pc, #40]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027d3c:	4a09      	ldr	r2, [pc, #36]	; (8027d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8027d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8027d44:	e011      	b.n	8027d6a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8027d46:	687b      	ldr	r3, [r7, #4]
 8027d48:	3304      	adds	r3, #4
 8027d4a:	2102      	movs	r1, #2
 8027d4c:	4618      	mov	r0, r3
 8027d4e:	f001 f855 	bl	8028dfc <RCCEx_PLL2_Config>
 8027d52:	4603      	mov	r3, r0
 8027d54:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8027d56:	e008      	b.n	8027d6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8027d58:	2301      	movs	r3, #1
 8027d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8027d5c:	e005      	b.n	8027d6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8027d5e:	bf00      	nop
 8027d60:	e003      	b.n	8027d6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8027d62:	bf00      	nop
 8027d64:	58024400 	.word	0x58024400
      break;
 8027d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027d6a:	7dfb      	ldrb	r3, [r7, #23]
 8027d6c:	2b00      	cmp	r3, #0
 8027d6e:	d109      	bne.n	8027d84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8027d70:	4ba3      	ldr	r3, [pc, #652]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027d74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8027d78:	687b      	ldr	r3, [r7, #4]
 8027d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027d7c:	49a0      	ldr	r1, [pc, #640]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027d7e:	4313      	orrs	r3, r2
 8027d80:	64cb      	str	r3, [r1, #76]	; 0x4c
 8027d82:	e001      	b.n	8027d88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027d84:	7dfb      	ldrb	r3, [r7, #23]
 8027d86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8027d88:	687b      	ldr	r3, [r7, #4]
 8027d8a:	681b      	ldr	r3, [r3, #0]
 8027d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8027d90:	2b00      	cmp	r3, #0
 8027d92:	d047      	beq.n	8027e24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8027d94:	687b      	ldr	r3, [r7, #4]
 8027d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8027d9c:	d030      	beq.n	8027e00 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8027d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8027da2:	d82a      	bhi.n	8027dfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8027da4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8027da8:	d02c      	beq.n	8027e04 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8027daa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8027dae:	d824      	bhi.n	8027dfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8027db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027db4:	d018      	beq.n	8027de8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8027db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027dba:	d81e      	bhi.n	8027dfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8027dbc:	2b00      	cmp	r3, #0
 8027dbe:	d003      	beq.n	8027dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8027dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8027dc4:	d007      	beq.n	8027dd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8027dc6:	e018      	b.n	8027dfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027dc8:	4b8d      	ldr	r3, [pc, #564]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027dcc:	4a8c      	ldr	r2, [pc, #560]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8027dd4:	e017      	b.n	8027e06 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8027dd6:	687b      	ldr	r3, [r7, #4]
 8027dd8:	3304      	adds	r3, #4
 8027dda:	2100      	movs	r1, #0
 8027ddc:	4618      	mov	r0, r3
 8027dde:	f001 f80d 	bl	8028dfc <RCCEx_PLL2_Config>
 8027de2:	4603      	mov	r3, r0
 8027de4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8027de6:	e00e      	b.n	8027e06 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8027de8:	687b      	ldr	r3, [r7, #4]
 8027dea:	3324      	adds	r3, #36	; 0x24
 8027dec:	2100      	movs	r1, #0
 8027dee:	4618      	mov	r0, r3
 8027df0:	f001 f8b6 	bl	8028f60 <RCCEx_PLL3_Config>
 8027df4:	4603      	mov	r3, r0
 8027df6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8027df8:	e005      	b.n	8027e06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8027dfa:	2301      	movs	r3, #1
 8027dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8027dfe:	e002      	b.n	8027e06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8027e00:	bf00      	nop
 8027e02:	e000      	b.n	8027e06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8027e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027e06:	7dfb      	ldrb	r3, [r7, #23]
 8027e08:	2b00      	cmp	r3, #0
 8027e0a:	d109      	bne.n	8027e20 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8027e0c:	4b7c      	ldr	r3, [pc, #496]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027e10:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8027e14:	687b      	ldr	r3, [r7, #4]
 8027e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027e18:	4979      	ldr	r1, [pc, #484]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027e1a:	4313      	orrs	r3, r2
 8027e1c:	650b      	str	r3, [r1, #80]	; 0x50
 8027e1e:	e001      	b.n	8027e24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027e20:	7dfb      	ldrb	r3, [r7, #23]
 8027e22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8027e24:	687b      	ldr	r3, [r7, #4]
 8027e26:	681b      	ldr	r3, [r3, #0]
 8027e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8027e2c:	2b00      	cmp	r3, #0
 8027e2e:	d049      	beq.n	8027ec4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8027e30:	687b      	ldr	r3, [r7, #4]
 8027e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027e38:	d02e      	beq.n	8027e98 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8027e3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027e3e:	d828      	bhi.n	8027e92 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8027e40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8027e44:	d02a      	beq.n	8027e9c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8027e46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8027e4a:	d822      	bhi.n	8027e92 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8027e4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8027e50:	d026      	beq.n	8027ea0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8027e52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8027e56:	d81c      	bhi.n	8027e92 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8027e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8027e5c:	d010      	beq.n	8027e80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8027e5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8027e62:	d816      	bhi.n	8027e92 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8027e64:	2b00      	cmp	r3, #0
 8027e66:	d01d      	beq.n	8027ea4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8027e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027e6c:	d111      	bne.n	8027e92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8027e6e:	687b      	ldr	r3, [r7, #4]
 8027e70:	3304      	adds	r3, #4
 8027e72:	2101      	movs	r1, #1
 8027e74:	4618      	mov	r0, r3
 8027e76:	f000 ffc1 	bl	8028dfc <RCCEx_PLL2_Config>
 8027e7a:	4603      	mov	r3, r0
 8027e7c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8027e7e:	e012      	b.n	8027ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8027e80:	687b      	ldr	r3, [r7, #4]
 8027e82:	3324      	adds	r3, #36	; 0x24
 8027e84:	2101      	movs	r1, #1
 8027e86:	4618      	mov	r0, r3
 8027e88:	f001 f86a 	bl	8028f60 <RCCEx_PLL3_Config>
 8027e8c:	4603      	mov	r3, r0
 8027e8e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8027e90:	e009      	b.n	8027ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8027e92:	2301      	movs	r3, #1
 8027e94:	75fb      	strb	r3, [r7, #23]
      break;
 8027e96:	e006      	b.n	8027ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8027e98:	bf00      	nop
 8027e9a:	e004      	b.n	8027ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8027e9c:	bf00      	nop
 8027e9e:	e002      	b.n	8027ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8027ea0:	bf00      	nop
 8027ea2:	e000      	b.n	8027ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8027ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027ea6:	7dfb      	ldrb	r3, [r7, #23]
 8027ea8:	2b00      	cmp	r3, #0
 8027eaa:	d109      	bne.n	8027ec0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8027eac:	4b54      	ldr	r3, [pc, #336]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027eb0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8027eb4:	687b      	ldr	r3, [r7, #4]
 8027eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027eb8:	4951      	ldr	r1, [pc, #324]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027eba:	4313      	orrs	r3, r2
 8027ebc:	650b      	str	r3, [r1, #80]	; 0x50
 8027ebe:	e001      	b.n	8027ec4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027ec0:	7dfb      	ldrb	r3, [r7, #23]
 8027ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8027ec4:	687b      	ldr	r3, [r7, #4]
 8027ec6:	681b      	ldr	r3, [r3, #0]
 8027ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027ecc:	2b00      	cmp	r3, #0
 8027ece:	d04b      	beq.n	8027f68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8027ed0:	687b      	ldr	r3, [r7, #4]
 8027ed2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8027ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8027eda:	d02e      	beq.n	8027f3a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8027edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8027ee0:	d828      	bhi.n	8027f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8027ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027ee6:	d02a      	beq.n	8027f3e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8027ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027eec:	d822      	bhi.n	8027f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8027eee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8027ef2:	d026      	beq.n	8027f42 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8027ef4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8027ef8:	d81c      	bhi.n	8027f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8027efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027efe:	d010      	beq.n	8027f22 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8027f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027f04:	d816      	bhi.n	8027f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8027f06:	2b00      	cmp	r3, #0
 8027f08:	d01d      	beq.n	8027f46 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8027f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8027f0e:	d111      	bne.n	8027f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8027f10:	687b      	ldr	r3, [r7, #4]
 8027f12:	3304      	adds	r3, #4
 8027f14:	2101      	movs	r1, #1
 8027f16:	4618      	mov	r0, r3
 8027f18:	f000 ff70 	bl	8028dfc <RCCEx_PLL2_Config>
 8027f1c:	4603      	mov	r3, r0
 8027f1e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8027f20:	e012      	b.n	8027f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8027f22:	687b      	ldr	r3, [r7, #4]
 8027f24:	3324      	adds	r3, #36	; 0x24
 8027f26:	2101      	movs	r1, #1
 8027f28:	4618      	mov	r0, r3
 8027f2a:	f001 f819 	bl	8028f60 <RCCEx_PLL3_Config>
 8027f2e:	4603      	mov	r3, r0
 8027f30:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8027f32:	e009      	b.n	8027f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8027f34:	2301      	movs	r3, #1
 8027f36:	75fb      	strb	r3, [r7, #23]
      break;
 8027f38:	e006      	b.n	8027f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8027f3a:	bf00      	nop
 8027f3c:	e004      	b.n	8027f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8027f3e:	bf00      	nop
 8027f40:	e002      	b.n	8027f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8027f42:	bf00      	nop
 8027f44:	e000      	b.n	8027f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8027f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027f48:	7dfb      	ldrb	r3, [r7, #23]
 8027f4a:	2b00      	cmp	r3, #0
 8027f4c:	d10a      	bne.n	8027f64 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8027f4e:	4b2c      	ldr	r3, [pc, #176]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027f52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8027f56:	687b      	ldr	r3, [r7, #4]
 8027f58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8027f5c:	4928      	ldr	r1, [pc, #160]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027f5e:	4313      	orrs	r3, r2
 8027f60:	658b      	str	r3, [r1, #88]	; 0x58
 8027f62:	e001      	b.n	8027f68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027f64:	7dfb      	ldrb	r3, [r7, #23]
 8027f66:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8027f68:	687b      	ldr	r3, [r7, #4]
 8027f6a:	681b      	ldr	r3, [r3, #0]
 8027f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8027f70:	2b00      	cmp	r3, #0
 8027f72:	d02f      	beq.n	8027fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8027f74:	687b      	ldr	r3, [r7, #4]
 8027f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027f7c:	d00e      	beq.n	8027f9c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8027f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027f82:	d814      	bhi.n	8027fae <HAL_RCCEx_PeriphCLKConfig+0x522>
 8027f84:	2b00      	cmp	r3, #0
 8027f86:	d015      	beq.n	8027fb4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8027f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8027f8c:	d10f      	bne.n	8027fae <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027f8e:	4b1c      	ldr	r3, [pc, #112]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027f92:	4a1b      	ldr	r2, [pc, #108]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027f98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8027f9a:	e00c      	b.n	8027fb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8027f9c:	687b      	ldr	r3, [r7, #4]
 8027f9e:	3304      	adds	r3, #4
 8027fa0:	2101      	movs	r1, #1
 8027fa2:	4618      	mov	r0, r3
 8027fa4:	f000 ff2a 	bl	8028dfc <RCCEx_PLL2_Config>
 8027fa8:	4603      	mov	r3, r0
 8027faa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8027fac:	e003      	b.n	8027fb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8027fae:	2301      	movs	r3, #1
 8027fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8027fb2:	e000      	b.n	8027fb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8027fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8027fb6:	7dfb      	ldrb	r3, [r7, #23]
 8027fb8:	2b00      	cmp	r3, #0
 8027fba:	d109      	bne.n	8027fd0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8027fbc:	4b10      	ldr	r3, [pc, #64]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027fc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8027fc4:	687b      	ldr	r3, [r7, #4]
 8027fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027fc8:	490d      	ldr	r1, [pc, #52]	; (8028000 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8027fca:	4313      	orrs	r3, r2
 8027fcc:	650b      	str	r3, [r1, #80]	; 0x50
 8027fce:	e001      	b.n	8027fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027fd0:	7dfb      	ldrb	r3, [r7, #23]
 8027fd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8027fd4:	687b      	ldr	r3, [r7, #4]
 8027fd6:	681b      	ldr	r3, [r3, #0]
 8027fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027fdc:	2b00      	cmp	r3, #0
 8027fde:	d034      	beq.n	802804a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8027fe0:	687b      	ldr	r3, [r7, #4]
 8027fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027fe4:	2b03      	cmp	r3, #3
 8027fe6:	d81d      	bhi.n	8028024 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8027fe8:	a201      	add	r2, pc, #4	; (adr r2, 8027ff0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8027fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027fee:	bf00      	nop
 8027ff0:	0802802b 	.word	0x0802802b
 8027ff4:	08028005 	.word	0x08028005
 8027ff8:	08028013 	.word	0x08028013
 8027ffc:	0802802b 	.word	0x0802802b
 8028000:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8028004:	4bb1      	ldr	r3, [pc, #708]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028008:	4ab0      	ldr	r2, [pc, #704]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 802800a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802800e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8028010:	e00c      	b.n	802802c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8028012:	687b      	ldr	r3, [r7, #4]
 8028014:	3304      	adds	r3, #4
 8028016:	2102      	movs	r1, #2
 8028018:	4618      	mov	r0, r3
 802801a:	f000 feef 	bl	8028dfc <RCCEx_PLL2_Config>
 802801e:	4603      	mov	r3, r0
 8028020:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8028022:	e003      	b.n	802802c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8028024:	2301      	movs	r3, #1
 8028026:	75fb      	strb	r3, [r7, #23]
      break;
 8028028:	e000      	b.n	802802c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 802802a:	bf00      	nop
    }

    if(ret == HAL_OK)
 802802c:	7dfb      	ldrb	r3, [r7, #23]
 802802e:	2b00      	cmp	r3, #0
 8028030:	d109      	bne.n	8028046 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8028032:	4ba6      	ldr	r3, [pc, #664]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028036:	f023 0203 	bic.w	r2, r3, #3
 802803a:	687b      	ldr	r3, [r7, #4]
 802803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802803e:	49a3      	ldr	r1, [pc, #652]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028040:	4313      	orrs	r3, r2
 8028042:	64cb      	str	r3, [r1, #76]	; 0x4c
 8028044:	e001      	b.n	802804a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028046:	7dfb      	ldrb	r3, [r7, #23]
 8028048:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 802804a:	687b      	ldr	r3, [r7, #4]
 802804c:	681b      	ldr	r3, [r3, #0]
 802804e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8028052:	2b00      	cmp	r3, #0
 8028054:	f000 8086 	beq.w	8028164 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8028058:	4b9d      	ldr	r3, [pc, #628]	; (80282d0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 802805a:	681b      	ldr	r3, [r3, #0]
 802805c:	4a9c      	ldr	r2, [pc, #624]	; (80282d0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 802805e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028062:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8028064:	f7fa f81c 	bl	80220a0 <HAL_GetTick>
 8028068:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802806a:	e009      	b.n	8028080 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802806c:	f7fa f818 	bl	80220a0 <HAL_GetTick>
 8028070:	4602      	mov	r2, r0
 8028072:	693b      	ldr	r3, [r7, #16]
 8028074:	1ad3      	subs	r3, r2, r3
 8028076:	2b64      	cmp	r3, #100	; 0x64
 8028078:	d902      	bls.n	8028080 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 802807a:	2303      	movs	r3, #3
 802807c:	75fb      	strb	r3, [r7, #23]
        break;
 802807e:	e005      	b.n	802808c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8028080:	4b93      	ldr	r3, [pc, #588]	; (80282d0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8028082:	681b      	ldr	r3, [r3, #0]
 8028084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028088:	2b00      	cmp	r3, #0
 802808a:	d0ef      	beq.n	802806c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 802808c:	7dfb      	ldrb	r3, [r7, #23]
 802808e:	2b00      	cmp	r3, #0
 8028090:	d166      	bne.n	8028160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8028092:	4b8e      	ldr	r3, [pc, #568]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028094:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8028096:	687b      	ldr	r3, [r7, #4]
 8028098:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 802809c:	4053      	eors	r3, r2
 802809e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80280a2:	2b00      	cmp	r3, #0
 80280a4:	d013      	beq.n	80280ce <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80280a6:	4b89      	ldr	r3, [pc, #548]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80280ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80280b0:	4b86      	ldr	r3, [pc, #536]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280b4:	4a85      	ldr	r2, [pc, #532]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80280ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80280bc:	4b83      	ldr	r3, [pc, #524]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280c0:	4a82      	ldr	r2, [pc, #520]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80280c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80280c8:	4a80      	ldr	r2, [pc, #512]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280ca:	68fb      	ldr	r3, [r7, #12]
 80280cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80280ce:	687b      	ldr	r3, [r7, #4]
 80280d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80280d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80280d8:	d115      	bne.n	8028106 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80280da:	f7f9 ffe1 	bl	80220a0 <HAL_GetTick>
 80280de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80280e0:	e00b      	b.n	80280fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80280e2:	f7f9 ffdd 	bl	80220a0 <HAL_GetTick>
 80280e6:	4602      	mov	r2, r0
 80280e8:	693b      	ldr	r3, [r7, #16]
 80280ea:	1ad3      	subs	r3, r2, r3
 80280ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80280f0:	4293      	cmp	r3, r2
 80280f2:	d902      	bls.n	80280fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80280f4:	2303      	movs	r3, #3
 80280f6:	75fb      	strb	r3, [r7, #23]
            break;
 80280f8:	e005      	b.n	8028106 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80280fa:	4b74      	ldr	r3, [pc, #464]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80280fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280fe:	f003 0302 	and.w	r3, r3, #2
 8028102:	2b00      	cmp	r3, #0
 8028104:	d0ed      	beq.n	80280e2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8028106:	7dfb      	ldrb	r3, [r7, #23]
 8028108:	2b00      	cmp	r3, #0
 802810a:	d126      	bne.n	802815a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802810c:	687b      	ldr	r3, [r7, #4]
 802810e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8028112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802811a:	d10d      	bne.n	8028138 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 802811c:	4b6b      	ldr	r3, [pc, #428]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 802811e:	691b      	ldr	r3, [r3, #16]
 8028120:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8028124:	687b      	ldr	r3, [r7, #4]
 8028126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 802812a:	0919      	lsrs	r1, r3, #4
 802812c:	4b69      	ldr	r3, [pc, #420]	; (80282d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802812e:	400b      	ands	r3, r1
 8028130:	4966      	ldr	r1, [pc, #408]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028132:	4313      	orrs	r3, r2
 8028134:	610b      	str	r3, [r1, #16]
 8028136:	e005      	b.n	8028144 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8028138:	4b64      	ldr	r3, [pc, #400]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 802813a:	691b      	ldr	r3, [r3, #16]
 802813c:	4a63      	ldr	r2, [pc, #396]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 802813e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8028142:	6113      	str	r3, [r2, #16]
 8028144:	4b61      	ldr	r3, [pc, #388]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028146:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8028148:	687b      	ldr	r3, [r7, #4]
 802814a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 802814e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028152:	495e      	ldr	r1, [pc, #376]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028154:	4313      	orrs	r3, r2
 8028156:	670b      	str	r3, [r1, #112]	; 0x70
 8028158:	e004      	b.n	8028164 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 802815a:	7dfb      	ldrb	r3, [r7, #23]
 802815c:	75bb      	strb	r3, [r7, #22]
 802815e:	e001      	b.n	8028164 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028160:	7dfb      	ldrb	r3, [r7, #23]
 8028162:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8028164:	687b      	ldr	r3, [r7, #4]
 8028166:	681b      	ldr	r3, [r3, #0]
 8028168:	f003 0301 	and.w	r3, r3, #1
 802816c:	2b00      	cmp	r3, #0
 802816e:	d07e      	beq.n	802826e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8028170:	687b      	ldr	r3, [r7, #4]
 8028172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028174:	2b28      	cmp	r3, #40	; 0x28
 8028176:	d867      	bhi.n	8028248 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8028178:	a201      	add	r2, pc, #4	; (adr r2, 8028180 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 802817a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802817e:	bf00      	nop
 8028180:	0802824f 	.word	0x0802824f
 8028184:	08028249 	.word	0x08028249
 8028188:	08028249 	.word	0x08028249
 802818c:	08028249 	.word	0x08028249
 8028190:	08028249 	.word	0x08028249
 8028194:	08028249 	.word	0x08028249
 8028198:	08028249 	.word	0x08028249
 802819c:	08028249 	.word	0x08028249
 80281a0:	08028225 	.word	0x08028225
 80281a4:	08028249 	.word	0x08028249
 80281a8:	08028249 	.word	0x08028249
 80281ac:	08028249 	.word	0x08028249
 80281b0:	08028249 	.word	0x08028249
 80281b4:	08028249 	.word	0x08028249
 80281b8:	08028249 	.word	0x08028249
 80281bc:	08028249 	.word	0x08028249
 80281c0:	08028237 	.word	0x08028237
 80281c4:	08028249 	.word	0x08028249
 80281c8:	08028249 	.word	0x08028249
 80281cc:	08028249 	.word	0x08028249
 80281d0:	08028249 	.word	0x08028249
 80281d4:	08028249 	.word	0x08028249
 80281d8:	08028249 	.word	0x08028249
 80281dc:	08028249 	.word	0x08028249
 80281e0:	0802824f 	.word	0x0802824f
 80281e4:	08028249 	.word	0x08028249
 80281e8:	08028249 	.word	0x08028249
 80281ec:	08028249 	.word	0x08028249
 80281f0:	08028249 	.word	0x08028249
 80281f4:	08028249 	.word	0x08028249
 80281f8:	08028249 	.word	0x08028249
 80281fc:	08028249 	.word	0x08028249
 8028200:	0802824f 	.word	0x0802824f
 8028204:	08028249 	.word	0x08028249
 8028208:	08028249 	.word	0x08028249
 802820c:	08028249 	.word	0x08028249
 8028210:	08028249 	.word	0x08028249
 8028214:	08028249 	.word	0x08028249
 8028218:	08028249 	.word	0x08028249
 802821c:	08028249 	.word	0x08028249
 8028220:	0802824f 	.word	0x0802824f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8028224:	687b      	ldr	r3, [r7, #4]
 8028226:	3304      	adds	r3, #4
 8028228:	2101      	movs	r1, #1
 802822a:	4618      	mov	r0, r3
 802822c:	f000 fde6 	bl	8028dfc <RCCEx_PLL2_Config>
 8028230:	4603      	mov	r3, r0
 8028232:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8028234:	e00c      	b.n	8028250 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8028236:	687b      	ldr	r3, [r7, #4]
 8028238:	3324      	adds	r3, #36	; 0x24
 802823a:	2101      	movs	r1, #1
 802823c:	4618      	mov	r0, r3
 802823e:	f000 fe8f 	bl	8028f60 <RCCEx_PLL3_Config>
 8028242:	4603      	mov	r3, r0
 8028244:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8028246:	e003      	b.n	8028250 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8028248:	2301      	movs	r3, #1
 802824a:	75fb      	strb	r3, [r7, #23]
      break;
 802824c:	e000      	b.n	8028250 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 802824e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8028250:	7dfb      	ldrb	r3, [r7, #23]
 8028252:	2b00      	cmp	r3, #0
 8028254:	d109      	bne.n	802826a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8028256:	4b1d      	ldr	r3, [pc, #116]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802825a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 802825e:	687b      	ldr	r3, [r7, #4]
 8028260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028262:	491a      	ldr	r1, [pc, #104]	; (80282cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8028264:	4313      	orrs	r3, r2
 8028266:	654b      	str	r3, [r1, #84]	; 0x54
 8028268:	e001      	b.n	802826e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802826a:	7dfb      	ldrb	r3, [r7, #23]
 802826c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 802826e:	687b      	ldr	r3, [r7, #4]
 8028270:	681b      	ldr	r3, [r3, #0]
 8028272:	f003 0302 	and.w	r3, r3, #2
 8028276:	2b00      	cmp	r3, #0
 8028278:	d03e      	beq.n	80282f8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 802827a:	687b      	ldr	r3, [r7, #4]
 802827c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802827e:	2b05      	cmp	r3, #5
 8028280:	d820      	bhi.n	80282c4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8028282:	a201      	add	r2, pc, #4	; (adr r2, 8028288 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8028284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028288:	080282d9 	.word	0x080282d9
 802828c:	080282a1 	.word	0x080282a1
 8028290:	080282b3 	.word	0x080282b3
 8028294:	080282d9 	.word	0x080282d9
 8028298:	080282d9 	.word	0x080282d9
 802829c:	080282d9 	.word	0x080282d9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80282a0:	687b      	ldr	r3, [r7, #4]
 80282a2:	3304      	adds	r3, #4
 80282a4:	2101      	movs	r1, #1
 80282a6:	4618      	mov	r0, r3
 80282a8:	f000 fda8 	bl	8028dfc <RCCEx_PLL2_Config>
 80282ac:	4603      	mov	r3, r0
 80282ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80282b0:	e013      	b.n	80282da <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80282b2:	687b      	ldr	r3, [r7, #4]
 80282b4:	3324      	adds	r3, #36	; 0x24
 80282b6:	2101      	movs	r1, #1
 80282b8:	4618      	mov	r0, r3
 80282ba:	f000 fe51 	bl	8028f60 <RCCEx_PLL3_Config>
 80282be:	4603      	mov	r3, r0
 80282c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80282c2:	e00a      	b.n	80282da <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80282c4:	2301      	movs	r3, #1
 80282c6:	75fb      	strb	r3, [r7, #23]
      break;
 80282c8:	e007      	b.n	80282da <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80282ca:	bf00      	nop
 80282cc:	58024400 	.word	0x58024400
 80282d0:	58024800 	.word	0x58024800
 80282d4:	00ffffcf 	.word	0x00ffffcf
      break;
 80282d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80282da:	7dfb      	ldrb	r3, [r7, #23]
 80282dc:	2b00      	cmp	r3, #0
 80282de:	d109      	bne.n	80282f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80282e0:	4b9f      	ldr	r3, [pc, #636]	; (8028560 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80282e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80282e4:	f023 0207 	bic.w	r2, r3, #7
 80282e8:	687b      	ldr	r3, [r7, #4]
 80282ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80282ec:	499c      	ldr	r1, [pc, #624]	; (8028560 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80282ee:	4313      	orrs	r3, r2
 80282f0:	654b      	str	r3, [r1, #84]	; 0x54
 80282f2:	e001      	b.n	80282f8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80282f4:	7dfb      	ldrb	r3, [r7, #23]
 80282f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80282f8:	687b      	ldr	r3, [r7, #4]
 80282fa:	681b      	ldr	r3, [r3, #0]
 80282fc:	f003 0304 	and.w	r3, r3, #4
 8028300:	2b00      	cmp	r3, #0
 8028302:	d039      	beq.n	8028378 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8028304:	687b      	ldr	r3, [r7, #4]
 8028306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802830a:	2b05      	cmp	r3, #5
 802830c:	d820      	bhi.n	8028350 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 802830e:	a201      	add	r2, pc, #4	; (adr r2, 8028314 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8028310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028314:	08028357 	.word	0x08028357
 8028318:	0802832d 	.word	0x0802832d
 802831c:	0802833f 	.word	0x0802833f
 8028320:	08028357 	.word	0x08028357
 8028324:	08028357 	.word	0x08028357
 8028328:	08028357 	.word	0x08028357
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 802832c:	687b      	ldr	r3, [r7, #4]
 802832e:	3304      	adds	r3, #4
 8028330:	2101      	movs	r1, #1
 8028332:	4618      	mov	r0, r3
 8028334:	f000 fd62 	bl	8028dfc <RCCEx_PLL2_Config>
 8028338:	4603      	mov	r3, r0
 802833a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 802833c:	e00c      	b.n	8028358 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 802833e:	687b      	ldr	r3, [r7, #4]
 8028340:	3324      	adds	r3, #36	; 0x24
 8028342:	2101      	movs	r1, #1
 8028344:	4618      	mov	r0, r3
 8028346:	f000 fe0b 	bl	8028f60 <RCCEx_PLL3_Config>
 802834a:	4603      	mov	r3, r0
 802834c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 802834e:	e003      	b.n	8028358 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8028350:	2301      	movs	r3, #1
 8028352:	75fb      	strb	r3, [r7, #23]
      break;
 8028354:	e000      	b.n	8028358 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8028356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8028358:	7dfb      	ldrb	r3, [r7, #23]
 802835a:	2b00      	cmp	r3, #0
 802835c:	d10a      	bne.n	8028374 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 802835e:	4b80      	ldr	r3, [pc, #512]	; (8028560 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8028360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028362:	f023 0207 	bic.w	r2, r3, #7
 8028366:	687b      	ldr	r3, [r7, #4]
 8028368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802836c:	497c      	ldr	r1, [pc, #496]	; (8028560 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 802836e:	4313      	orrs	r3, r2
 8028370:	658b      	str	r3, [r1, #88]	; 0x58
 8028372:	e001      	b.n	8028378 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028374:	7dfb      	ldrb	r3, [r7, #23]
 8028376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8028378:	687b      	ldr	r3, [r7, #4]
 802837a:	681b      	ldr	r3, [r3, #0]
 802837c:	f003 0320 	and.w	r3, r3, #32
 8028380:	2b00      	cmp	r3, #0
 8028382:	d04b      	beq.n	802841c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8028384:	687b      	ldr	r3, [r7, #4]
 8028386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802838a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802838e:	d02e      	beq.n	80283ee <HAL_RCCEx_PeriphCLKConfig+0x962>
 8028390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8028394:	d828      	bhi.n	80283e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8028396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802839a:	d02a      	beq.n	80283f2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 802839c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80283a0:	d822      	bhi.n	80283e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80283a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80283a6:	d026      	beq.n	80283f6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80283a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80283ac:	d81c      	bhi.n	80283e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80283ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80283b2:	d010      	beq.n	80283d6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80283b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80283b8:	d816      	bhi.n	80283e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80283ba:	2b00      	cmp	r3, #0
 80283bc:	d01d      	beq.n	80283fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80283be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80283c2:	d111      	bne.n	80283e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80283c4:	687b      	ldr	r3, [r7, #4]
 80283c6:	3304      	adds	r3, #4
 80283c8:	2100      	movs	r1, #0
 80283ca:	4618      	mov	r0, r3
 80283cc:	f000 fd16 	bl	8028dfc <RCCEx_PLL2_Config>
 80283d0:	4603      	mov	r3, r0
 80283d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80283d4:	e012      	b.n	80283fc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80283d6:	687b      	ldr	r3, [r7, #4]
 80283d8:	3324      	adds	r3, #36	; 0x24
 80283da:	2102      	movs	r1, #2
 80283dc:	4618      	mov	r0, r3
 80283de:	f000 fdbf 	bl	8028f60 <RCCEx_PLL3_Config>
 80283e2:	4603      	mov	r3, r0
 80283e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80283e6:	e009      	b.n	80283fc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80283e8:	2301      	movs	r3, #1
 80283ea:	75fb      	strb	r3, [r7, #23]
      break;
 80283ec:	e006      	b.n	80283fc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80283ee:	bf00      	nop
 80283f0:	e004      	b.n	80283fc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80283f2:	bf00      	nop
 80283f4:	e002      	b.n	80283fc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80283f6:	bf00      	nop
 80283f8:	e000      	b.n	80283fc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80283fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80283fc:	7dfb      	ldrb	r3, [r7, #23]
 80283fe:	2b00      	cmp	r3, #0
 8028400:	d10a      	bne.n	8028418 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8028402:	4b57      	ldr	r3, [pc, #348]	; (8028560 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8028404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028406:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 802840a:	687b      	ldr	r3, [r7, #4]
 802840c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028410:	4953      	ldr	r1, [pc, #332]	; (8028560 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8028412:	4313      	orrs	r3, r2
 8028414:	654b      	str	r3, [r1, #84]	; 0x54
 8028416:	e001      	b.n	802841c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028418:	7dfb      	ldrb	r3, [r7, #23]
 802841a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 802841c:	687b      	ldr	r3, [r7, #4]
 802841e:	681b      	ldr	r3, [r3, #0]
 8028420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028424:	2b00      	cmp	r3, #0
 8028426:	d04b      	beq.n	80284c0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8028428:	687b      	ldr	r3, [r7, #4]
 802842a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802842e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8028432:	d02e      	beq.n	8028492 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8028434:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8028438:	d828      	bhi.n	802848c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 802843a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802843e:	d02a      	beq.n	8028496 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8028440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028444:	d822      	bhi.n	802848c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8028446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802844a:	d026      	beq.n	802849a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 802844c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8028450:	d81c      	bhi.n	802848c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8028452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028456:	d010      	beq.n	802847a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8028458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802845c:	d816      	bhi.n	802848c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 802845e:	2b00      	cmp	r3, #0
 8028460:	d01d      	beq.n	802849e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8028462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028466:	d111      	bne.n	802848c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8028468:	687b      	ldr	r3, [r7, #4]
 802846a:	3304      	adds	r3, #4
 802846c:	2100      	movs	r1, #0
 802846e:	4618      	mov	r0, r3
 8028470:	f000 fcc4 	bl	8028dfc <RCCEx_PLL2_Config>
 8028474:	4603      	mov	r3, r0
 8028476:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8028478:	e012      	b.n	80284a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 802847a:	687b      	ldr	r3, [r7, #4]
 802847c:	3324      	adds	r3, #36	; 0x24
 802847e:	2102      	movs	r1, #2
 8028480:	4618      	mov	r0, r3
 8028482:	f000 fd6d 	bl	8028f60 <RCCEx_PLL3_Config>
 8028486:	4603      	mov	r3, r0
 8028488:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 802848a:	e009      	b.n	80284a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 802848c:	2301      	movs	r3, #1
 802848e:	75fb      	strb	r3, [r7, #23]
      break;
 8028490:	e006      	b.n	80284a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8028492:	bf00      	nop
 8028494:	e004      	b.n	80284a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8028496:	bf00      	nop
 8028498:	e002      	b.n	80284a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 802849a:	bf00      	nop
 802849c:	e000      	b.n	80284a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 802849e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80284a0:	7dfb      	ldrb	r3, [r7, #23]
 80284a2:	2b00      	cmp	r3, #0
 80284a4:	d10a      	bne.n	80284bc <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80284a6:	4b2e      	ldr	r3, [pc, #184]	; (8028560 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80284a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80284aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80284ae:	687b      	ldr	r3, [r7, #4]
 80284b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80284b4:	492a      	ldr	r1, [pc, #168]	; (8028560 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80284b6:	4313      	orrs	r3, r2
 80284b8:	658b      	str	r3, [r1, #88]	; 0x58
 80284ba:	e001      	b.n	80284c0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80284bc:	7dfb      	ldrb	r3, [r7, #23]
 80284be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80284c0:	687b      	ldr	r3, [r7, #4]
 80284c2:	681b      	ldr	r3, [r3, #0]
 80284c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80284c8:	2b00      	cmp	r3, #0
 80284ca:	d04d      	beq.n	8028568 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80284cc:	687b      	ldr	r3, [r7, #4]
 80284ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80284d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80284d6:	d02e      	beq.n	8028536 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80284d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80284dc:	d828      	bhi.n	8028530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80284de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80284e2:	d02a      	beq.n	802853a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80284e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80284e8:	d822      	bhi.n	8028530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80284ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80284ee:	d026      	beq.n	802853e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80284f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80284f4:	d81c      	bhi.n	8028530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80284f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80284fa:	d010      	beq.n	802851e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80284fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8028500:	d816      	bhi.n	8028530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8028502:	2b00      	cmp	r3, #0
 8028504:	d01d      	beq.n	8028542 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8028506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802850a:	d111      	bne.n	8028530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 802850c:	687b      	ldr	r3, [r7, #4]
 802850e:	3304      	adds	r3, #4
 8028510:	2100      	movs	r1, #0
 8028512:	4618      	mov	r0, r3
 8028514:	f000 fc72 	bl	8028dfc <RCCEx_PLL2_Config>
 8028518:	4603      	mov	r3, r0
 802851a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 802851c:	e012      	b.n	8028544 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 802851e:	687b      	ldr	r3, [r7, #4]
 8028520:	3324      	adds	r3, #36	; 0x24
 8028522:	2102      	movs	r1, #2
 8028524:	4618      	mov	r0, r3
 8028526:	f000 fd1b 	bl	8028f60 <RCCEx_PLL3_Config>
 802852a:	4603      	mov	r3, r0
 802852c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 802852e:	e009      	b.n	8028544 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8028530:	2301      	movs	r3, #1
 8028532:	75fb      	strb	r3, [r7, #23]
      break;
 8028534:	e006      	b.n	8028544 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8028536:	bf00      	nop
 8028538:	e004      	b.n	8028544 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 802853a:	bf00      	nop
 802853c:	e002      	b.n	8028544 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 802853e:	bf00      	nop
 8028540:	e000      	b.n	8028544 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8028542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8028544:	7dfb      	ldrb	r3, [r7, #23]
 8028546:	2b00      	cmp	r3, #0
 8028548:	d10c      	bne.n	8028564 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 802854a:	4b05      	ldr	r3, [pc, #20]	; (8028560 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 802854c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802854e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8028552:	687b      	ldr	r3, [r7, #4]
 8028554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8028558:	4901      	ldr	r1, [pc, #4]	; (8028560 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 802855a:	4313      	orrs	r3, r2
 802855c:	658b      	str	r3, [r1, #88]	; 0x58
 802855e:	e003      	b.n	8028568 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8028560:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028564:	7dfb      	ldrb	r3, [r7, #23]
 8028566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8028568:	687b      	ldr	r3, [r7, #4]
 802856a:	681b      	ldr	r3, [r3, #0]
 802856c:	f003 0308 	and.w	r3, r3, #8
 8028570:	2b00      	cmp	r3, #0
 8028572:	d018      	beq.n	80285a6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8028574:	687b      	ldr	r3, [r7, #4]
 8028576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8028578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802857c:	d10a      	bne.n	8028594 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 802857e:	687b      	ldr	r3, [r7, #4]
 8028580:	3324      	adds	r3, #36	; 0x24
 8028582:	2102      	movs	r1, #2
 8028584:	4618      	mov	r0, r3
 8028586:	f000 fceb 	bl	8028f60 <RCCEx_PLL3_Config>
 802858a:	4603      	mov	r3, r0
 802858c:	2b00      	cmp	r3, #0
 802858e:	d001      	beq.n	8028594 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8028590:	2301      	movs	r3, #1
 8028592:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8028594:	4b8a      	ldr	r3, [pc, #552]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028598:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 802859c:	687b      	ldr	r3, [r7, #4]
 802859e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80285a0:	4987      	ldr	r1, [pc, #540]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80285a2:	4313      	orrs	r3, r2
 80285a4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80285a6:	687b      	ldr	r3, [r7, #4]
 80285a8:	681b      	ldr	r3, [r3, #0]
 80285aa:	f003 0310 	and.w	r3, r3, #16
 80285ae:	2b00      	cmp	r3, #0
 80285b0:	d01a      	beq.n	80285e8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80285b2:	687b      	ldr	r3, [r7, #4]
 80285b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80285b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80285bc:	d10a      	bne.n	80285d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80285be:	687b      	ldr	r3, [r7, #4]
 80285c0:	3324      	adds	r3, #36	; 0x24
 80285c2:	2102      	movs	r1, #2
 80285c4:	4618      	mov	r0, r3
 80285c6:	f000 fccb 	bl	8028f60 <RCCEx_PLL3_Config>
 80285ca:	4603      	mov	r3, r0
 80285cc:	2b00      	cmp	r3, #0
 80285ce:	d001      	beq.n	80285d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80285d0:	2301      	movs	r3, #1
 80285d2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80285d4:	4b7a      	ldr	r3, [pc, #488]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80285d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80285d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80285dc:	687b      	ldr	r3, [r7, #4]
 80285de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80285e2:	4977      	ldr	r1, [pc, #476]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80285e4:	4313      	orrs	r3, r2
 80285e6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80285e8:	687b      	ldr	r3, [r7, #4]
 80285ea:	681b      	ldr	r3, [r3, #0]
 80285ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80285f0:	2b00      	cmp	r3, #0
 80285f2:	d034      	beq.n	802865e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80285f4:	687b      	ldr	r3, [r7, #4]
 80285f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80285fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80285fe:	d01d      	beq.n	802863c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8028600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8028604:	d817      	bhi.n	8028636 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8028606:	2b00      	cmp	r3, #0
 8028608:	d003      	beq.n	8028612 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 802860a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802860e:	d009      	beq.n	8028624 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8028610:	e011      	b.n	8028636 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8028612:	687b      	ldr	r3, [r7, #4]
 8028614:	3304      	adds	r3, #4
 8028616:	2100      	movs	r1, #0
 8028618:	4618      	mov	r0, r3
 802861a:	f000 fbef 	bl	8028dfc <RCCEx_PLL2_Config>
 802861e:	4603      	mov	r3, r0
 8028620:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8028622:	e00c      	b.n	802863e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8028624:	687b      	ldr	r3, [r7, #4]
 8028626:	3324      	adds	r3, #36	; 0x24
 8028628:	2102      	movs	r1, #2
 802862a:	4618      	mov	r0, r3
 802862c:	f000 fc98 	bl	8028f60 <RCCEx_PLL3_Config>
 8028630:	4603      	mov	r3, r0
 8028632:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8028634:	e003      	b.n	802863e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8028636:	2301      	movs	r3, #1
 8028638:	75fb      	strb	r3, [r7, #23]
      break;
 802863a:	e000      	b.n	802863e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 802863c:	bf00      	nop
    }

    if(ret == HAL_OK)
 802863e:	7dfb      	ldrb	r3, [r7, #23]
 8028640:	2b00      	cmp	r3, #0
 8028642:	d10a      	bne.n	802865a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8028644:	4b5e      	ldr	r3, [pc, #376]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802864c:	687b      	ldr	r3, [r7, #4]
 802864e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8028652:	495b      	ldr	r1, [pc, #364]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028654:	4313      	orrs	r3, r2
 8028656:	658b      	str	r3, [r1, #88]	; 0x58
 8028658:	e001      	b.n	802865e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802865a:	7dfb      	ldrb	r3, [r7, #23]
 802865c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 802865e:	687b      	ldr	r3, [r7, #4]
 8028660:	681b      	ldr	r3, [r3, #0]
 8028662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028666:	2b00      	cmp	r3, #0
 8028668:	d033      	beq.n	80286d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 802866a:	687b      	ldr	r3, [r7, #4]
 802866c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8028670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8028674:	d01c      	beq.n	80286b0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8028676:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802867a:	d816      	bhi.n	80286aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 802867c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8028680:	d003      	beq.n	802868a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8028682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8028686:	d007      	beq.n	8028698 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8028688:	e00f      	b.n	80286aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802868a:	4b4d      	ldr	r3, [pc, #308]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 802868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802868e:	4a4c      	ldr	r2, [pc, #304]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8028694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8028696:	e00c      	b.n	80286b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8028698:	687b      	ldr	r3, [r7, #4]
 802869a:	3324      	adds	r3, #36	; 0x24
 802869c:	2101      	movs	r1, #1
 802869e:	4618      	mov	r0, r3
 80286a0:	f000 fc5e 	bl	8028f60 <RCCEx_PLL3_Config>
 80286a4:	4603      	mov	r3, r0
 80286a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80286a8:	e003      	b.n	80286b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80286aa:	2301      	movs	r3, #1
 80286ac:	75fb      	strb	r3, [r7, #23]
      break;
 80286ae:	e000      	b.n	80286b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80286b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80286b2:	7dfb      	ldrb	r3, [r7, #23]
 80286b4:	2b00      	cmp	r3, #0
 80286b6:	d10a      	bne.n	80286ce <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80286b8:	4b41      	ldr	r3, [pc, #260]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80286ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80286bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80286c0:	687b      	ldr	r3, [r7, #4]
 80286c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80286c6:	493e      	ldr	r1, [pc, #248]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80286c8:	4313      	orrs	r3, r2
 80286ca:	654b      	str	r3, [r1, #84]	; 0x54
 80286cc:	e001      	b.n	80286d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80286ce:	7dfb      	ldrb	r3, [r7, #23]
 80286d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80286d2:	687b      	ldr	r3, [r7, #4]
 80286d4:	681b      	ldr	r3, [r3, #0]
 80286d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80286da:	2b00      	cmp	r3, #0
 80286dc:	d029      	beq.n	8028732 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80286de:	687b      	ldr	r3, [r7, #4]
 80286e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80286e2:	2b00      	cmp	r3, #0
 80286e4:	d003      	beq.n	80286ee <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80286e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80286ea:	d007      	beq.n	80286fc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80286ec:	e00f      	b.n	802870e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80286ee:	4b34      	ldr	r3, [pc, #208]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80286f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80286f2:	4a33      	ldr	r2, [pc, #204]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80286f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80286f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80286fa:	e00b      	b.n	8028714 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80286fc:	687b      	ldr	r3, [r7, #4]
 80286fe:	3304      	adds	r3, #4
 8028700:	2102      	movs	r1, #2
 8028702:	4618      	mov	r0, r3
 8028704:	f000 fb7a 	bl	8028dfc <RCCEx_PLL2_Config>
 8028708:	4603      	mov	r3, r0
 802870a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 802870c:	e002      	b.n	8028714 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 802870e:	2301      	movs	r3, #1
 8028710:	75fb      	strb	r3, [r7, #23]
      break;
 8028712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8028714:	7dfb      	ldrb	r3, [r7, #23]
 8028716:	2b00      	cmp	r3, #0
 8028718:	d109      	bne.n	802872e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 802871a:	4b29      	ldr	r3, [pc, #164]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 802871c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802871e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8028722:	687b      	ldr	r3, [r7, #4]
 8028724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028726:	4926      	ldr	r1, [pc, #152]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028728:	4313      	orrs	r3, r2
 802872a:	64cb      	str	r3, [r1, #76]	; 0x4c
 802872c:	e001      	b.n	8028732 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802872e:	7dfb      	ldrb	r3, [r7, #23]
 8028730:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8028732:	687b      	ldr	r3, [r7, #4]
 8028734:	681b      	ldr	r3, [r3, #0]
 8028736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802873a:	2b00      	cmp	r3, #0
 802873c:	d00a      	beq.n	8028754 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 802873e:	687b      	ldr	r3, [r7, #4]
 8028740:	3324      	adds	r3, #36	; 0x24
 8028742:	2102      	movs	r1, #2
 8028744:	4618      	mov	r0, r3
 8028746:	f000 fc0b 	bl	8028f60 <RCCEx_PLL3_Config>
 802874a:	4603      	mov	r3, r0
 802874c:	2b00      	cmp	r3, #0
 802874e:	d001      	beq.n	8028754 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8028750:	2301      	movs	r3, #1
 8028752:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8028754:	687b      	ldr	r3, [r7, #4]
 8028756:	681b      	ldr	r3, [r3, #0]
 8028758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802875c:	2b00      	cmp	r3, #0
 802875e:	d033      	beq.n	80287c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8028760:	687b      	ldr	r3, [r7, #4]
 8028762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8028764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8028768:	d017      	beq.n	802879a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 802876a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802876e:	d811      	bhi.n	8028794 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8028770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028774:	d013      	beq.n	802879e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8028776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802877a:	d80b      	bhi.n	8028794 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 802877c:	2b00      	cmp	r3, #0
 802877e:	d010      	beq.n	80287a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8028780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8028784:	d106      	bne.n	8028794 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8028786:	4b0e      	ldr	r3, [pc, #56]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8028788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802878a:	4a0d      	ldr	r2, [pc, #52]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 802878c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8028790:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8028792:	e007      	b.n	80287a4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8028794:	2301      	movs	r3, #1
 8028796:	75fb      	strb	r3, [r7, #23]
      break;
 8028798:	e004      	b.n	80287a4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 802879a:	bf00      	nop
 802879c:	e002      	b.n	80287a4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 802879e:	bf00      	nop
 80287a0:	e000      	b.n	80287a4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80287a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80287a4:	7dfb      	ldrb	r3, [r7, #23]
 80287a6:	2b00      	cmp	r3, #0
 80287a8:	d10c      	bne.n	80287c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80287aa:	4b05      	ldr	r3, [pc, #20]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80287ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80287ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80287b2:	687b      	ldr	r3, [r7, #4]
 80287b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80287b6:	4902      	ldr	r1, [pc, #8]	; (80287c0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80287b8:	4313      	orrs	r3, r2
 80287ba:	654b      	str	r3, [r1, #84]	; 0x54
 80287bc:	e004      	b.n	80287c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80287be:	bf00      	nop
 80287c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80287c4:	7dfb      	ldrb	r3, [r7, #23]
 80287c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80287c8:	687b      	ldr	r3, [r7, #4]
 80287ca:	681b      	ldr	r3, [r3, #0]
 80287cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80287d0:	2b00      	cmp	r3, #0
 80287d2:	d008      	beq.n	80287e6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80287d4:	4b29      	ldr	r3, [pc, #164]	; (802887c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80287d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80287d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80287dc:	687b      	ldr	r3, [r7, #4]
 80287de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80287e0:	4926      	ldr	r1, [pc, #152]	; (802887c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80287e2:	4313      	orrs	r3, r2
 80287e4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80287e6:	687b      	ldr	r3, [r7, #4]
 80287e8:	681b      	ldr	r3, [r3, #0]
 80287ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80287ee:	2b00      	cmp	r3, #0
 80287f0:	d008      	beq.n	8028804 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80287f2:	4b22      	ldr	r3, [pc, #136]	; (802887c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80287f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80287f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80287fa:	687b      	ldr	r3, [r7, #4]
 80287fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80287fe:	491f      	ldr	r1, [pc, #124]	; (802887c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028800:	4313      	orrs	r3, r2
 8028802:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8028804:	687b      	ldr	r3, [r7, #4]
 8028806:	681b      	ldr	r3, [r3, #0]
 8028808:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802880c:	2b00      	cmp	r3, #0
 802880e:	d00d      	beq.n	802882c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8028810:	4b1a      	ldr	r3, [pc, #104]	; (802887c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028812:	691b      	ldr	r3, [r3, #16]
 8028814:	4a19      	ldr	r2, [pc, #100]	; (802887c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028816:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802881a:	6113      	str	r3, [r2, #16]
 802881c:	4b17      	ldr	r3, [pc, #92]	; (802887c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 802881e:	691a      	ldr	r2, [r3, #16]
 8028820:	687b      	ldr	r3, [r7, #4]
 8028822:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8028826:	4915      	ldr	r1, [pc, #84]	; (802887c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028828:	4313      	orrs	r3, r2
 802882a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 802882c:	687b      	ldr	r3, [r7, #4]
 802882e:	681b      	ldr	r3, [r3, #0]
 8028830:	2b00      	cmp	r3, #0
 8028832:	da08      	bge.n	8028846 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8028834:	4b11      	ldr	r3, [pc, #68]	; (802887c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028838:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 802883c:	687b      	ldr	r3, [r7, #4]
 802883e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028840:	490e      	ldr	r1, [pc, #56]	; (802887c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028842:	4313      	orrs	r3, r2
 8028844:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8028846:	687b      	ldr	r3, [r7, #4]
 8028848:	681b      	ldr	r3, [r3, #0]
 802884a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802884e:	2b00      	cmp	r3, #0
 8028850:	d009      	beq.n	8028866 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8028852:	4b0a      	ldr	r3, [pc, #40]	; (802887c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 802885a:	687b      	ldr	r3, [r7, #4]
 802885c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8028860:	4906      	ldr	r1, [pc, #24]	; (802887c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8028862:	4313      	orrs	r3, r2
 8028864:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8028866:	7dbb      	ldrb	r3, [r7, #22]
 8028868:	2b00      	cmp	r3, #0
 802886a:	d101      	bne.n	8028870 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 802886c:	2300      	movs	r3, #0
 802886e:	e000      	b.n	8028872 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8028870:	2301      	movs	r3, #1
}
 8028872:	4618      	mov	r0, r3
 8028874:	3718      	adds	r7, #24
 8028876:	46bd      	mov	sp, r7
 8028878:	bd80      	pop	{r7, pc}
 802887a:	bf00      	nop
 802887c:	58024400 	.word	0x58024400

08028880 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8028880:	b580      	push	{r7, lr}
 8028882:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8028884:	f7ff f864 	bl	8027950 <HAL_RCC_GetHCLKFreq>
 8028888:	4602      	mov	r2, r0
 802888a:	4b06      	ldr	r3, [pc, #24]	; (80288a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 802888c:	6a1b      	ldr	r3, [r3, #32]
 802888e:	091b      	lsrs	r3, r3, #4
 8028890:	f003 0307 	and.w	r3, r3, #7
 8028894:	4904      	ldr	r1, [pc, #16]	; (80288a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8028896:	5ccb      	ldrb	r3, [r1, r3]
 8028898:	f003 031f 	and.w	r3, r3, #31
 802889c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80288a0:	4618      	mov	r0, r3
 80288a2:	bd80      	pop	{r7, pc}
 80288a4:	58024400 	.word	0x58024400
 80288a8:	0803b890 	.word	0x0803b890

080288ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80288ac:	b480      	push	{r7}
 80288ae:	b089      	sub	sp, #36	; 0x24
 80288b0:	af00      	add	r7, sp, #0
 80288b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80288b4:	4ba1      	ldr	r3, [pc, #644]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80288b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80288b8:	f003 0303 	and.w	r3, r3, #3
 80288bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80288be:	4b9f      	ldr	r3, [pc, #636]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80288c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80288c2:	0b1b      	lsrs	r3, r3, #12
 80288c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80288c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80288ca:	4b9c      	ldr	r3, [pc, #624]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80288cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80288ce:	091b      	lsrs	r3, r3, #4
 80288d0:	f003 0301 	and.w	r3, r3, #1
 80288d4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80288d6:	4b99      	ldr	r3, [pc, #612]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80288d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80288da:	08db      	lsrs	r3, r3, #3
 80288dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80288e0:	693a      	ldr	r2, [r7, #16]
 80288e2:	fb02 f303 	mul.w	r3, r2, r3
 80288e6:	ee07 3a90 	vmov	s15, r3
 80288ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80288ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80288f2:	697b      	ldr	r3, [r7, #20]
 80288f4:	2b00      	cmp	r3, #0
 80288f6:	f000 8111 	beq.w	8028b1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80288fa:	69bb      	ldr	r3, [r7, #24]
 80288fc:	2b02      	cmp	r3, #2
 80288fe:	f000 8083 	beq.w	8028a08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8028902:	69bb      	ldr	r3, [r7, #24]
 8028904:	2b02      	cmp	r3, #2
 8028906:	f200 80a1 	bhi.w	8028a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 802890a:	69bb      	ldr	r3, [r7, #24]
 802890c:	2b00      	cmp	r3, #0
 802890e:	d003      	beq.n	8028918 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8028910:	69bb      	ldr	r3, [r7, #24]
 8028912:	2b01      	cmp	r3, #1
 8028914:	d056      	beq.n	80289c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8028916:	e099      	b.n	8028a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8028918:	4b88      	ldr	r3, [pc, #544]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802891a:	681b      	ldr	r3, [r3, #0]
 802891c:	f003 0320 	and.w	r3, r3, #32
 8028920:	2b00      	cmp	r3, #0
 8028922:	d02d      	beq.n	8028980 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8028924:	4b85      	ldr	r3, [pc, #532]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028926:	681b      	ldr	r3, [r3, #0]
 8028928:	08db      	lsrs	r3, r3, #3
 802892a:	f003 0303 	and.w	r3, r3, #3
 802892e:	4a84      	ldr	r2, [pc, #528]	; (8028b40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8028930:	fa22 f303 	lsr.w	r3, r2, r3
 8028934:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8028936:	68bb      	ldr	r3, [r7, #8]
 8028938:	ee07 3a90 	vmov	s15, r3
 802893c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028940:	697b      	ldr	r3, [r7, #20]
 8028942:	ee07 3a90 	vmov	s15, r3
 8028946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802894a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802894e:	4b7b      	ldr	r3, [pc, #492]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028956:	ee07 3a90 	vmov	s15, r3
 802895a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802895e:	ed97 6a03 	vldr	s12, [r7, #12]
 8028962:	eddf 5a78 	vldr	s11, [pc, #480]	; 8028b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8028966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802896a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802896e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028976:	ee67 7a27 	vmul.f32	s15, s14, s15
 802897a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 802897e:	e087      	b.n	8028a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8028980:	697b      	ldr	r3, [r7, #20]
 8028982:	ee07 3a90 	vmov	s15, r3
 8028986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802898a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8028b48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 802898e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028992:	4b6a      	ldr	r3, [pc, #424]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802899a:	ee07 3a90 	vmov	s15, r3
 802899e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80289a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80289a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8028b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80289aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80289ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80289b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80289b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80289ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80289be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80289c2:	e065      	b.n	8028a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80289c4:	697b      	ldr	r3, [r7, #20]
 80289c6:	ee07 3a90 	vmov	s15, r3
 80289ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80289ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8028b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80289d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80289d6:	4b59      	ldr	r3, [pc, #356]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80289d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80289da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80289de:	ee07 3a90 	vmov	s15, r3
 80289e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80289e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80289ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8028b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80289ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80289f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80289f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80289fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80289fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028a02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028a06:	e043      	b.n	8028a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8028a08:	697b      	ldr	r3, [r7, #20]
 8028a0a:	ee07 3a90 	vmov	s15, r3
 8028a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028a12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8028b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8028a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028a1a:	4b48      	ldr	r3, [pc, #288]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028a22:	ee07 3a90 	vmov	s15, r3
 8028a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8028a2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8028b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8028a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028a46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028a4a:	e021      	b.n	8028a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8028a4c:	697b      	ldr	r3, [r7, #20]
 8028a4e:	ee07 3a90 	vmov	s15, r3
 8028a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028a56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8028b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8028a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028a5e:	4b37      	ldr	r3, [pc, #220]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028a66:	ee07 3a90 	vmov	s15, r3
 8028a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8028a72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8028b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8028a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028a8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028a8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8028a90:	4b2a      	ldr	r3, [pc, #168]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a94:	0a5b      	lsrs	r3, r3, #9
 8028a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028a9a:	ee07 3a90 	vmov	s15, r3
 8028a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8028aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028ab6:	ee17 2a90 	vmov	r2, s15
 8028aba:	687b      	ldr	r3, [r7, #4]
 8028abc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8028abe:	4b1f      	ldr	r3, [pc, #124]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028ac2:	0c1b      	lsrs	r3, r3, #16
 8028ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028ac8:	ee07 3a90 	vmov	s15, r3
 8028acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8028adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028ae4:	ee17 2a90 	vmov	r2, s15
 8028ae8:	687b      	ldr	r3, [r7, #4]
 8028aea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8028aec:	4b13      	ldr	r3, [pc, #76]	; (8028b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028af0:	0e1b      	lsrs	r3, r3, #24
 8028af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028af6:	ee07 3a90 	vmov	s15, r3
 8028afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8028b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028b12:	ee17 2a90 	vmov	r2, s15
 8028b16:	687b      	ldr	r3, [r7, #4]
 8028b18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8028b1a:	e008      	b.n	8028b2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8028b1c:	687b      	ldr	r3, [r7, #4]
 8028b1e:	2200      	movs	r2, #0
 8028b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8028b22:	687b      	ldr	r3, [r7, #4]
 8028b24:	2200      	movs	r2, #0
 8028b26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8028b28:	687b      	ldr	r3, [r7, #4]
 8028b2a:	2200      	movs	r2, #0
 8028b2c:	609a      	str	r2, [r3, #8]
}
 8028b2e:	bf00      	nop
 8028b30:	3724      	adds	r7, #36	; 0x24
 8028b32:	46bd      	mov	sp, r7
 8028b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b38:	4770      	bx	lr
 8028b3a:	bf00      	nop
 8028b3c:	58024400 	.word	0x58024400
 8028b40:	03d09000 	.word	0x03d09000
 8028b44:	46000000 	.word	0x46000000
 8028b48:	4c742400 	.word	0x4c742400
 8028b4c:	4a742400 	.word	0x4a742400
 8028b50:	4af42400 	.word	0x4af42400

08028b54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8028b54:	b480      	push	{r7}
 8028b56:	b089      	sub	sp, #36	; 0x24
 8028b58:	af00      	add	r7, sp, #0
 8028b5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8028b5c:	4ba1      	ldr	r3, [pc, #644]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028b60:	f003 0303 	and.w	r3, r3, #3
 8028b64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8028b66:	4b9f      	ldr	r3, [pc, #636]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028b6a:	0d1b      	lsrs	r3, r3, #20
 8028b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8028b70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8028b72:	4b9c      	ldr	r3, [pc, #624]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028b76:	0a1b      	lsrs	r3, r3, #8
 8028b78:	f003 0301 	and.w	r3, r3, #1
 8028b7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8028b7e:	4b99      	ldr	r3, [pc, #612]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028b82:	08db      	lsrs	r3, r3, #3
 8028b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8028b88:	693a      	ldr	r2, [r7, #16]
 8028b8a:	fb02 f303 	mul.w	r3, r2, r3
 8028b8e:	ee07 3a90 	vmov	s15, r3
 8028b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028b96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8028b9a:	697b      	ldr	r3, [r7, #20]
 8028b9c:	2b00      	cmp	r3, #0
 8028b9e:	f000 8111 	beq.w	8028dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8028ba2:	69bb      	ldr	r3, [r7, #24]
 8028ba4:	2b02      	cmp	r3, #2
 8028ba6:	f000 8083 	beq.w	8028cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8028baa:	69bb      	ldr	r3, [r7, #24]
 8028bac:	2b02      	cmp	r3, #2
 8028bae:	f200 80a1 	bhi.w	8028cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8028bb2:	69bb      	ldr	r3, [r7, #24]
 8028bb4:	2b00      	cmp	r3, #0
 8028bb6:	d003      	beq.n	8028bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8028bb8:	69bb      	ldr	r3, [r7, #24]
 8028bba:	2b01      	cmp	r3, #1
 8028bbc:	d056      	beq.n	8028c6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8028bbe:	e099      	b.n	8028cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8028bc0:	4b88      	ldr	r3, [pc, #544]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028bc2:	681b      	ldr	r3, [r3, #0]
 8028bc4:	f003 0320 	and.w	r3, r3, #32
 8028bc8:	2b00      	cmp	r3, #0
 8028bca:	d02d      	beq.n	8028c28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8028bcc:	4b85      	ldr	r3, [pc, #532]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028bce:	681b      	ldr	r3, [r3, #0]
 8028bd0:	08db      	lsrs	r3, r3, #3
 8028bd2:	f003 0303 	and.w	r3, r3, #3
 8028bd6:	4a84      	ldr	r2, [pc, #528]	; (8028de8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8028bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8028bdc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8028bde:	68bb      	ldr	r3, [r7, #8]
 8028be0:	ee07 3a90 	vmov	s15, r3
 8028be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028be8:	697b      	ldr	r3, [r7, #20]
 8028bea:	ee07 3a90 	vmov	s15, r3
 8028bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028bf6:	4b7b      	ldr	r3, [pc, #492]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028bfe:	ee07 3a90 	vmov	s15, r3
 8028c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8028c0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8028dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8028c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028c22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8028c26:	e087      	b.n	8028d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8028c28:	697b      	ldr	r3, [r7, #20]
 8028c2a:	ee07 3a90 	vmov	s15, r3
 8028c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028c32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8028df0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8028c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028c3a:	4b6a      	ldr	r3, [pc, #424]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028c42:	ee07 3a90 	vmov	s15, r3
 8028c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8028c4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8028dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8028c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028c6a:	e065      	b.n	8028d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8028c6c:	697b      	ldr	r3, [r7, #20]
 8028c6e:	ee07 3a90 	vmov	s15, r3
 8028c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028c76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8028df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8028c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028c7e:	4b59      	ldr	r3, [pc, #356]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028c86:	ee07 3a90 	vmov	s15, r3
 8028c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8028c92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8028dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8028c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028caa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028cae:	e043      	b.n	8028d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8028cb0:	697b      	ldr	r3, [r7, #20]
 8028cb2:	ee07 3a90 	vmov	s15, r3
 8028cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028cba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8028df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8028cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028cc2:	4b48      	ldr	r3, [pc, #288]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028cca:	ee07 3a90 	vmov	s15, r3
 8028cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8028cd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8028dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8028cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028cee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028cf2:	e021      	b.n	8028d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8028cf4:	697b      	ldr	r3, [r7, #20]
 8028cf6:	ee07 3a90 	vmov	s15, r3
 8028cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028cfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8028df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8028d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028d06:	4b37      	ldr	r3, [pc, #220]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028d0e:	ee07 3a90 	vmov	s15, r3
 8028d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8028d1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8028dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8028d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028d32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8028d36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8028d38:	4b2a      	ldr	r3, [pc, #168]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028d3c:	0a5b      	lsrs	r3, r3, #9
 8028d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028d42:	ee07 3a90 	vmov	s15, r3
 8028d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8028d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028d5e:	ee17 2a90 	vmov	r2, s15
 8028d62:	687b      	ldr	r3, [r7, #4]
 8028d64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8028d66:	4b1f      	ldr	r3, [pc, #124]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028d6a:	0c1b      	lsrs	r3, r3, #16
 8028d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028d70:	ee07 3a90 	vmov	s15, r3
 8028d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028d78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028d7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8028d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028d8c:	ee17 2a90 	vmov	r2, s15
 8028d90:	687b      	ldr	r3, [r7, #4]
 8028d92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8028d94:	4b13      	ldr	r3, [pc, #76]	; (8028de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028d98:	0e1b      	lsrs	r3, r3, #24
 8028d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028d9e:	ee07 3a90 	vmov	s15, r3
 8028da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8028db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028dba:	ee17 2a90 	vmov	r2, s15
 8028dbe:	687b      	ldr	r3, [r7, #4]
 8028dc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8028dc2:	e008      	b.n	8028dd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8028dc4:	687b      	ldr	r3, [r7, #4]
 8028dc6:	2200      	movs	r2, #0
 8028dc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8028dca:	687b      	ldr	r3, [r7, #4]
 8028dcc:	2200      	movs	r2, #0
 8028dce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8028dd0:	687b      	ldr	r3, [r7, #4]
 8028dd2:	2200      	movs	r2, #0
 8028dd4:	609a      	str	r2, [r3, #8]
}
 8028dd6:	bf00      	nop
 8028dd8:	3724      	adds	r7, #36	; 0x24
 8028dda:	46bd      	mov	sp, r7
 8028ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028de0:	4770      	bx	lr
 8028de2:	bf00      	nop
 8028de4:	58024400 	.word	0x58024400
 8028de8:	03d09000 	.word	0x03d09000
 8028dec:	46000000 	.word	0x46000000
 8028df0:	4c742400 	.word	0x4c742400
 8028df4:	4a742400 	.word	0x4a742400
 8028df8:	4af42400 	.word	0x4af42400

08028dfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8028dfc:	b580      	push	{r7, lr}
 8028dfe:	b084      	sub	sp, #16
 8028e00:	af00      	add	r7, sp, #0
 8028e02:	6078      	str	r0, [r7, #4]
 8028e04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8028e06:	2300      	movs	r3, #0
 8028e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8028e0a:	4b53      	ldr	r3, [pc, #332]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028e0e:	f003 0303 	and.w	r3, r3, #3
 8028e12:	2b03      	cmp	r3, #3
 8028e14:	d101      	bne.n	8028e1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8028e16:	2301      	movs	r3, #1
 8028e18:	e099      	b.n	8028f4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8028e1a:	4b4f      	ldr	r3, [pc, #316]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028e1c:	681b      	ldr	r3, [r3, #0]
 8028e1e:	4a4e      	ldr	r2, [pc, #312]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028e20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8028e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028e26:	f7f9 f93b 	bl	80220a0 <HAL_GetTick>
 8028e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8028e2c:	e008      	b.n	8028e40 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8028e2e:	f7f9 f937 	bl	80220a0 <HAL_GetTick>
 8028e32:	4602      	mov	r2, r0
 8028e34:	68bb      	ldr	r3, [r7, #8]
 8028e36:	1ad3      	subs	r3, r2, r3
 8028e38:	2b02      	cmp	r3, #2
 8028e3a:	d901      	bls.n	8028e40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8028e3c:	2303      	movs	r3, #3
 8028e3e:	e086      	b.n	8028f4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8028e40:	4b45      	ldr	r3, [pc, #276]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028e42:	681b      	ldr	r3, [r3, #0]
 8028e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8028e48:	2b00      	cmp	r3, #0
 8028e4a:	d1f0      	bne.n	8028e2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8028e4c:	4b42      	ldr	r3, [pc, #264]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028e50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8028e54:	687b      	ldr	r3, [r7, #4]
 8028e56:	681b      	ldr	r3, [r3, #0]
 8028e58:	031b      	lsls	r3, r3, #12
 8028e5a:	493f      	ldr	r1, [pc, #252]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028e5c:	4313      	orrs	r3, r2
 8028e5e:	628b      	str	r3, [r1, #40]	; 0x28
 8028e60:	687b      	ldr	r3, [r7, #4]
 8028e62:	685b      	ldr	r3, [r3, #4]
 8028e64:	3b01      	subs	r3, #1
 8028e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8028e6a:	687b      	ldr	r3, [r7, #4]
 8028e6c:	689b      	ldr	r3, [r3, #8]
 8028e6e:	3b01      	subs	r3, #1
 8028e70:	025b      	lsls	r3, r3, #9
 8028e72:	b29b      	uxth	r3, r3
 8028e74:	431a      	orrs	r2, r3
 8028e76:	687b      	ldr	r3, [r7, #4]
 8028e78:	68db      	ldr	r3, [r3, #12]
 8028e7a:	3b01      	subs	r3, #1
 8028e7c:	041b      	lsls	r3, r3, #16
 8028e7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8028e82:	431a      	orrs	r2, r3
 8028e84:	687b      	ldr	r3, [r7, #4]
 8028e86:	691b      	ldr	r3, [r3, #16]
 8028e88:	3b01      	subs	r3, #1
 8028e8a:	061b      	lsls	r3, r3, #24
 8028e8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8028e90:	4931      	ldr	r1, [pc, #196]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028e92:	4313      	orrs	r3, r2
 8028e94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8028e96:	4b30      	ldr	r3, [pc, #192]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8028e9e:	687b      	ldr	r3, [r7, #4]
 8028ea0:	695b      	ldr	r3, [r3, #20]
 8028ea2:	492d      	ldr	r1, [pc, #180]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028ea4:	4313      	orrs	r3, r2
 8028ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8028ea8:	4b2b      	ldr	r3, [pc, #172]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028eac:	f023 0220 	bic.w	r2, r3, #32
 8028eb0:	687b      	ldr	r3, [r7, #4]
 8028eb2:	699b      	ldr	r3, [r3, #24]
 8028eb4:	4928      	ldr	r1, [pc, #160]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028eb6:	4313      	orrs	r3, r2
 8028eb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8028eba:	4b27      	ldr	r3, [pc, #156]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ebe:	4a26      	ldr	r2, [pc, #152]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028ec0:	f023 0310 	bic.w	r3, r3, #16
 8028ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8028ec6:	4b24      	ldr	r3, [pc, #144]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028eca:	4b24      	ldr	r3, [pc, #144]	; (8028f5c <RCCEx_PLL2_Config+0x160>)
 8028ecc:	4013      	ands	r3, r2
 8028ece:	687a      	ldr	r2, [r7, #4]
 8028ed0:	69d2      	ldr	r2, [r2, #28]
 8028ed2:	00d2      	lsls	r2, r2, #3
 8028ed4:	4920      	ldr	r1, [pc, #128]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028ed6:	4313      	orrs	r3, r2
 8028ed8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8028eda:	4b1f      	ldr	r3, [pc, #124]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ede:	4a1e      	ldr	r2, [pc, #120]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028ee0:	f043 0310 	orr.w	r3, r3, #16
 8028ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8028ee6:	683b      	ldr	r3, [r7, #0]
 8028ee8:	2b00      	cmp	r3, #0
 8028eea:	d106      	bne.n	8028efa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8028eec:	4b1a      	ldr	r3, [pc, #104]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ef0:	4a19      	ldr	r2, [pc, #100]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028ef2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8028ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8028ef8:	e00f      	b.n	8028f1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8028efa:	683b      	ldr	r3, [r7, #0]
 8028efc:	2b01      	cmp	r3, #1
 8028efe:	d106      	bne.n	8028f0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8028f00:	4b15      	ldr	r3, [pc, #84]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028f04:	4a14      	ldr	r2, [pc, #80]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8028f0c:	e005      	b.n	8028f1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8028f0e:	4b12      	ldr	r3, [pc, #72]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028f12:	4a11      	ldr	r2, [pc, #68]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8028f18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8028f1a:	4b0f      	ldr	r3, [pc, #60]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028f1c:	681b      	ldr	r3, [r3, #0]
 8028f1e:	4a0e      	ldr	r2, [pc, #56]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028f20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8028f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028f26:	f7f9 f8bb 	bl	80220a0 <HAL_GetTick>
 8028f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8028f2c:	e008      	b.n	8028f40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8028f2e:	f7f9 f8b7 	bl	80220a0 <HAL_GetTick>
 8028f32:	4602      	mov	r2, r0
 8028f34:	68bb      	ldr	r3, [r7, #8]
 8028f36:	1ad3      	subs	r3, r2, r3
 8028f38:	2b02      	cmp	r3, #2
 8028f3a:	d901      	bls.n	8028f40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8028f3c:	2303      	movs	r3, #3
 8028f3e:	e006      	b.n	8028f4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8028f40:	4b05      	ldr	r3, [pc, #20]	; (8028f58 <RCCEx_PLL2_Config+0x15c>)
 8028f42:	681b      	ldr	r3, [r3, #0]
 8028f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8028f48:	2b00      	cmp	r3, #0
 8028f4a:	d0f0      	beq.n	8028f2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8028f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8028f4e:	4618      	mov	r0, r3
 8028f50:	3710      	adds	r7, #16
 8028f52:	46bd      	mov	sp, r7
 8028f54:	bd80      	pop	{r7, pc}
 8028f56:	bf00      	nop
 8028f58:	58024400 	.word	0x58024400
 8028f5c:	ffff0007 	.word	0xffff0007

08028f60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8028f60:	b580      	push	{r7, lr}
 8028f62:	b084      	sub	sp, #16
 8028f64:	af00      	add	r7, sp, #0
 8028f66:	6078      	str	r0, [r7, #4]
 8028f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8028f6a:	2300      	movs	r3, #0
 8028f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8028f6e:	4b53      	ldr	r3, [pc, #332]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8028f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028f72:	f003 0303 	and.w	r3, r3, #3
 8028f76:	2b03      	cmp	r3, #3
 8028f78:	d101      	bne.n	8028f7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8028f7a:	2301      	movs	r3, #1
 8028f7c:	e099      	b.n	80290b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8028f7e:	4b4f      	ldr	r3, [pc, #316]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8028f80:	681b      	ldr	r3, [r3, #0]
 8028f82:	4a4e      	ldr	r2, [pc, #312]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8028f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028f8a:	f7f9 f889 	bl	80220a0 <HAL_GetTick>
 8028f8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8028f90:	e008      	b.n	8028fa4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8028f92:	f7f9 f885 	bl	80220a0 <HAL_GetTick>
 8028f96:	4602      	mov	r2, r0
 8028f98:	68bb      	ldr	r3, [r7, #8]
 8028f9a:	1ad3      	subs	r3, r2, r3
 8028f9c:	2b02      	cmp	r3, #2
 8028f9e:	d901      	bls.n	8028fa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8028fa0:	2303      	movs	r3, #3
 8028fa2:	e086      	b.n	80290b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8028fa4:	4b45      	ldr	r3, [pc, #276]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8028fa6:	681b      	ldr	r3, [r3, #0]
 8028fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8028fac:	2b00      	cmp	r3, #0
 8028fae:	d1f0      	bne.n	8028f92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8028fb0:	4b42      	ldr	r3, [pc, #264]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8028fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028fb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8028fb8:	687b      	ldr	r3, [r7, #4]
 8028fba:	681b      	ldr	r3, [r3, #0]
 8028fbc:	051b      	lsls	r3, r3, #20
 8028fbe:	493f      	ldr	r1, [pc, #252]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8028fc0:	4313      	orrs	r3, r2
 8028fc2:	628b      	str	r3, [r1, #40]	; 0x28
 8028fc4:	687b      	ldr	r3, [r7, #4]
 8028fc6:	685b      	ldr	r3, [r3, #4]
 8028fc8:	3b01      	subs	r3, #1
 8028fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8028fce:	687b      	ldr	r3, [r7, #4]
 8028fd0:	689b      	ldr	r3, [r3, #8]
 8028fd2:	3b01      	subs	r3, #1
 8028fd4:	025b      	lsls	r3, r3, #9
 8028fd6:	b29b      	uxth	r3, r3
 8028fd8:	431a      	orrs	r2, r3
 8028fda:	687b      	ldr	r3, [r7, #4]
 8028fdc:	68db      	ldr	r3, [r3, #12]
 8028fde:	3b01      	subs	r3, #1
 8028fe0:	041b      	lsls	r3, r3, #16
 8028fe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8028fe6:	431a      	orrs	r2, r3
 8028fe8:	687b      	ldr	r3, [r7, #4]
 8028fea:	691b      	ldr	r3, [r3, #16]
 8028fec:	3b01      	subs	r3, #1
 8028fee:	061b      	lsls	r3, r3, #24
 8028ff0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8028ff4:	4931      	ldr	r1, [pc, #196]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8028ff6:	4313      	orrs	r3, r2
 8028ff8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8028ffa:	4b30      	ldr	r3, [pc, #192]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8028ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ffe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8029002:	687b      	ldr	r3, [r7, #4]
 8029004:	695b      	ldr	r3, [r3, #20]
 8029006:	492d      	ldr	r1, [pc, #180]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8029008:	4313      	orrs	r3, r2
 802900a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 802900c:	4b2b      	ldr	r3, [pc, #172]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 802900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029010:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8029014:	687b      	ldr	r3, [r7, #4]
 8029016:	699b      	ldr	r3, [r3, #24]
 8029018:	4928      	ldr	r1, [pc, #160]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 802901a:	4313      	orrs	r3, r2
 802901c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 802901e:	4b27      	ldr	r3, [pc, #156]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8029020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029022:	4a26      	ldr	r2, [pc, #152]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8029024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 802902a:	4b24      	ldr	r3, [pc, #144]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 802902c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802902e:	4b24      	ldr	r3, [pc, #144]	; (80290c0 <RCCEx_PLL3_Config+0x160>)
 8029030:	4013      	ands	r3, r2
 8029032:	687a      	ldr	r2, [r7, #4]
 8029034:	69d2      	ldr	r2, [r2, #28]
 8029036:	00d2      	lsls	r2, r2, #3
 8029038:	4920      	ldr	r1, [pc, #128]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 802903a:	4313      	orrs	r3, r2
 802903c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 802903e:	4b1f      	ldr	r3, [pc, #124]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8029040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029042:	4a1e      	ldr	r2, [pc, #120]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8029044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8029048:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 802904a:	683b      	ldr	r3, [r7, #0]
 802904c:	2b00      	cmp	r3, #0
 802904e:	d106      	bne.n	802905e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8029050:	4b1a      	ldr	r3, [pc, #104]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8029052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029054:	4a19      	ldr	r2, [pc, #100]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8029056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802905a:	62d3      	str	r3, [r2, #44]	; 0x2c
 802905c:	e00f      	b.n	802907e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 802905e:	683b      	ldr	r3, [r7, #0]
 8029060:	2b01      	cmp	r3, #1
 8029062:	d106      	bne.n	8029072 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8029064:	4b15      	ldr	r3, [pc, #84]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8029066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029068:	4a14      	ldr	r2, [pc, #80]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 802906a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802906e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8029070:	e005      	b.n	802907e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8029072:	4b12      	ldr	r3, [pc, #72]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8029074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029076:	4a11      	ldr	r2, [pc, #68]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8029078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802907c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 802907e:	4b0f      	ldr	r3, [pc, #60]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8029080:	681b      	ldr	r3, [r3, #0]
 8029082:	4a0e      	ldr	r2, [pc, #56]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 8029084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8029088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802908a:	f7f9 f809 	bl	80220a0 <HAL_GetTick>
 802908e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8029090:	e008      	b.n	80290a4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8029092:	f7f9 f805 	bl	80220a0 <HAL_GetTick>
 8029096:	4602      	mov	r2, r0
 8029098:	68bb      	ldr	r3, [r7, #8]
 802909a:	1ad3      	subs	r3, r2, r3
 802909c:	2b02      	cmp	r3, #2
 802909e:	d901      	bls.n	80290a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80290a0:	2303      	movs	r3, #3
 80290a2:	e006      	b.n	80290b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80290a4:	4b05      	ldr	r3, [pc, #20]	; (80290bc <RCCEx_PLL3_Config+0x15c>)
 80290a6:	681b      	ldr	r3, [r3, #0]
 80290a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80290ac:	2b00      	cmp	r3, #0
 80290ae:	d0f0      	beq.n	8029092 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80290b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80290b2:	4618      	mov	r0, r3
 80290b4:	3710      	adds	r7, #16
 80290b6:	46bd      	mov	sp, r7
 80290b8:	bd80      	pop	{r7, pc}
 80290ba:	bf00      	nop
 80290bc:	58024400 	.word	0x58024400
 80290c0:	ffff0007 	.word	0xffff0007

080290c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80290c4:	b580      	push	{r7, lr}
 80290c6:	b082      	sub	sp, #8
 80290c8:	af00      	add	r7, sp, #0
 80290ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80290cc:	687b      	ldr	r3, [r7, #4]
 80290ce:	2b00      	cmp	r3, #0
 80290d0:	d101      	bne.n	80290d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80290d2:	2301      	movs	r3, #1
 80290d4:	e049      	b.n	802916a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80290d6:	687b      	ldr	r3, [r7, #4]
 80290d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80290dc:	b2db      	uxtb	r3, r3
 80290de:	2b00      	cmp	r3, #0
 80290e0:	d106      	bne.n	80290f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80290e2:	687b      	ldr	r3, [r7, #4]
 80290e4:	2200      	movs	r2, #0
 80290e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80290ea:	6878      	ldr	r0, [r7, #4]
 80290ec:	f000 f841 	bl	8029172 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80290f0:	687b      	ldr	r3, [r7, #4]
 80290f2:	2202      	movs	r2, #2
 80290f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80290f8:	687b      	ldr	r3, [r7, #4]
 80290fa:	681a      	ldr	r2, [r3, #0]
 80290fc:	687b      	ldr	r3, [r7, #4]
 80290fe:	3304      	adds	r3, #4
 8029100:	4619      	mov	r1, r3
 8029102:	4610      	mov	r0, r2
 8029104:	f000 fa0e 	bl	8029524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8029108:	687b      	ldr	r3, [r7, #4]
 802910a:	2201      	movs	r2, #1
 802910c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8029110:	687b      	ldr	r3, [r7, #4]
 8029112:	2201      	movs	r2, #1
 8029114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8029118:	687b      	ldr	r3, [r7, #4]
 802911a:	2201      	movs	r2, #1
 802911c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8029120:	687b      	ldr	r3, [r7, #4]
 8029122:	2201      	movs	r2, #1
 8029124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8029128:	687b      	ldr	r3, [r7, #4]
 802912a:	2201      	movs	r2, #1
 802912c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8029130:	687b      	ldr	r3, [r7, #4]
 8029132:	2201      	movs	r2, #1
 8029134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8029138:	687b      	ldr	r3, [r7, #4]
 802913a:	2201      	movs	r2, #1
 802913c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8029140:	687b      	ldr	r3, [r7, #4]
 8029142:	2201      	movs	r2, #1
 8029144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8029148:	687b      	ldr	r3, [r7, #4]
 802914a:	2201      	movs	r2, #1
 802914c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8029150:	687b      	ldr	r3, [r7, #4]
 8029152:	2201      	movs	r2, #1
 8029154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8029158:	687b      	ldr	r3, [r7, #4]
 802915a:	2201      	movs	r2, #1
 802915c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029160:	687b      	ldr	r3, [r7, #4]
 8029162:	2201      	movs	r2, #1
 8029164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029168:	2300      	movs	r3, #0
}
 802916a:	4618      	mov	r0, r3
 802916c:	3708      	adds	r7, #8
 802916e:	46bd      	mov	sp, r7
 8029170:	bd80      	pop	{r7, pc}

08029172 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8029172:	b480      	push	{r7}
 8029174:	b083      	sub	sp, #12
 8029176:	af00      	add	r7, sp, #0
 8029178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 802917a:	bf00      	nop
 802917c:	370c      	adds	r7, #12
 802917e:	46bd      	mov	sp, r7
 8029180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029184:	4770      	bx	lr
	...

08029188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8029188:	b480      	push	{r7}
 802918a:	b085      	sub	sp, #20
 802918c:	af00      	add	r7, sp, #0
 802918e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8029190:	687b      	ldr	r3, [r7, #4]
 8029192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029196:	b2db      	uxtb	r3, r3
 8029198:	2b01      	cmp	r3, #1
 802919a:	d001      	beq.n	80291a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802919c:	2301      	movs	r3, #1
 802919e:	e05e      	b.n	802925e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80291a0:	687b      	ldr	r3, [r7, #4]
 80291a2:	2202      	movs	r2, #2
 80291a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80291a8:	687b      	ldr	r3, [r7, #4]
 80291aa:	681b      	ldr	r3, [r3, #0]
 80291ac:	68da      	ldr	r2, [r3, #12]
 80291ae:	687b      	ldr	r3, [r7, #4]
 80291b0:	681b      	ldr	r3, [r3, #0]
 80291b2:	f042 0201 	orr.w	r2, r2, #1
 80291b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80291b8:	687b      	ldr	r3, [r7, #4]
 80291ba:	681b      	ldr	r3, [r3, #0]
 80291bc:	4a2b      	ldr	r2, [pc, #172]	; (802926c <HAL_TIM_Base_Start_IT+0xe4>)
 80291be:	4293      	cmp	r3, r2
 80291c0:	d02c      	beq.n	802921c <HAL_TIM_Base_Start_IT+0x94>
 80291c2:	687b      	ldr	r3, [r7, #4]
 80291c4:	681b      	ldr	r3, [r3, #0]
 80291c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80291ca:	d027      	beq.n	802921c <HAL_TIM_Base_Start_IT+0x94>
 80291cc:	687b      	ldr	r3, [r7, #4]
 80291ce:	681b      	ldr	r3, [r3, #0]
 80291d0:	4a27      	ldr	r2, [pc, #156]	; (8029270 <HAL_TIM_Base_Start_IT+0xe8>)
 80291d2:	4293      	cmp	r3, r2
 80291d4:	d022      	beq.n	802921c <HAL_TIM_Base_Start_IT+0x94>
 80291d6:	687b      	ldr	r3, [r7, #4]
 80291d8:	681b      	ldr	r3, [r3, #0]
 80291da:	4a26      	ldr	r2, [pc, #152]	; (8029274 <HAL_TIM_Base_Start_IT+0xec>)
 80291dc:	4293      	cmp	r3, r2
 80291de:	d01d      	beq.n	802921c <HAL_TIM_Base_Start_IT+0x94>
 80291e0:	687b      	ldr	r3, [r7, #4]
 80291e2:	681b      	ldr	r3, [r3, #0]
 80291e4:	4a24      	ldr	r2, [pc, #144]	; (8029278 <HAL_TIM_Base_Start_IT+0xf0>)
 80291e6:	4293      	cmp	r3, r2
 80291e8:	d018      	beq.n	802921c <HAL_TIM_Base_Start_IT+0x94>
 80291ea:	687b      	ldr	r3, [r7, #4]
 80291ec:	681b      	ldr	r3, [r3, #0]
 80291ee:	4a23      	ldr	r2, [pc, #140]	; (802927c <HAL_TIM_Base_Start_IT+0xf4>)
 80291f0:	4293      	cmp	r3, r2
 80291f2:	d013      	beq.n	802921c <HAL_TIM_Base_Start_IT+0x94>
 80291f4:	687b      	ldr	r3, [r7, #4]
 80291f6:	681b      	ldr	r3, [r3, #0]
 80291f8:	4a21      	ldr	r2, [pc, #132]	; (8029280 <HAL_TIM_Base_Start_IT+0xf8>)
 80291fa:	4293      	cmp	r3, r2
 80291fc:	d00e      	beq.n	802921c <HAL_TIM_Base_Start_IT+0x94>
 80291fe:	687b      	ldr	r3, [r7, #4]
 8029200:	681b      	ldr	r3, [r3, #0]
 8029202:	4a20      	ldr	r2, [pc, #128]	; (8029284 <HAL_TIM_Base_Start_IT+0xfc>)
 8029204:	4293      	cmp	r3, r2
 8029206:	d009      	beq.n	802921c <HAL_TIM_Base_Start_IT+0x94>
 8029208:	687b      	ldr	r3, [r7, #4]
 802920a:	681b      	ldr	r3, [r3, #0]
 802920c:	4a1e      	ldr	r2, [pc, #120]	; (8029288 <HAL_TIM_Base_Start_IT+0x100>)
 802920e:	4293      	cmp	r3, r2
 8029210:	d004      	beq.n	802921c <HAL_TIM_Base_Start_IT+0x94>
 8029212:	687b      	ldr	r3, [r7, #4]
 8029214:	681b      	ldr	r3, [r3, #0]
 8029216:	4a1d      	ldr	r2, [pc, #116]	; (802928c <HAL_TIM_Base_Start_IT+0x104>)
 8029218:	4293      	cmp	r3, r2
 802921a:	d115      	bne.n	8029248 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802921c:	687b      	ldr	r3, [r7, #4]
 802921e:	681b      	ldr	r3, [r3, #0]
 8029220:	689a      	ldr	r2, [r3, #8]
 8029222:	4b1b      	ldr	r3, [pc, #108]	; (8029290 <HAL_TIM_Base_Start_IT+0x108>)
 8029224:	4013      	ands	r3, r2
 8029226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029228:	68fb      	ldr	r3, [r7, #12]
 802922a:	2b06      	cmp	r3, #6
 802922c:	d015      	beq.n	802925a <HAL_TIM_Base_Start_IT+0xd2>
 802922e:	68fb      	ldr	r3, [r7, #12]
 8029230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029234:	d011      	beq.n	802925a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8029236:	687b      	ldr	r3, [r7, #4]
 8029238:	681b      	ldr	r3, [r3, #0]
 802923a:	681a      	ldr	r2, [r3, #0]
 802923c:	687b      	ldr	r3, [r7, #4]
 802923e:	681b      	ldr	r3, [r3, #0]
 8029240:	f042 0201 	orr.w	r2, r2, #1
 8029244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029246:	e008      	b.n	802925a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8029248:	687b      	ldr	r3, [r7, #4]
 802924a:	681b      	ldr	r3, [r3, #0]
 802924c:	681a      	ldr	r2, [r3, #0]
 802924e:	687b      	ldr	r3, [r7, #4]
 8029250:	681b      	ldr	r3, [r3, #0]
 8029252:	f042 0201 	orr.w	r2, r2, #1
 8029256:	601a      	str	r2, [r3, #0]
 8029258:	e000      	b.n	802925c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802925a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 802925c:	2300      	movs	r3, #0
}
 802925e:	4618      	mov	r0, r3
 8029260:	3714      	adds	r7, #20
 8029262:	46bd      	mov	sp, r7
 8029264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029268:	4770      	bx	lr
 802926a:	bf00      	nop
 802926c:	40010000 	.word	0x40010000
 8029270:	40000400 	.word	0x40000400
 8029274:	40000800 	.word	0x40000800
 8029278:	40000c00 	.word	0x40000c00
 802927c:	40010400 	.word	0x40010400
 8029280:	40001800 	.word	0x40001800
 8029284:	40014000 	.word	0x40014000
 8029288:	4000e000 	.word	0x4000e000
 802928c:	4000e400 	.word	0x4000e400
 8029290:	00010007 	.word	0x00010007

08029294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8029294:	b580      	push	{r7, lr}
 8029296:	b082      	sub	sp, #8
 8029298:	af00      	add	r7, sp, #0
 802929a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802929c:	687b      	ldr	r3, [r7, #4]
 802929e:	681b      	ldr	r3, [r3, #0]
 80292a0:	691b      	ldr	r3, [r3, #16]
 80292a2:	f003 0302 	and.w	r3, r3, #2
 80292a6:	2b02      	cmp	r3, #2
 80292a8:	d122      	bne.n	80292f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80292aa:	687b      	ldr	r3, [r7, #4]
 80292ac:	681b      	ldr	r3, [r3, #0]
 80292ae:	68db      	ldr	r3, [r3, #12]
 80292b0:	f003 0302 	and.w	r3, r3, #2
 80292b4:	2b02      	cmp	r3, #2
 80292b6:	d11b      	bne.n	80292f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80292b8:	687b      	ldr	r3, [r7, #4]
 80292ba:	681b      	ldr	r3, [r3, #0]
 80292bc:	f06f 0202 	mvn.w	r2, #2
 80292c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80292c2:	687b      	ldr	r3, [r7, #4]
 80292c4:	2201      	movs	r2, #1
 80292c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80292c8:	687b      	ldr	r3, [r7, #4]
 80292ca:	681b      	ldr	r3, [r3, #0]
 80292cc:	699b      	ldr	r3, [r3, #24]
 80292ce:	f003 0303 	and.w	r3, r3, #3
 80292d2:	2b00      	cmp	r3, #0
 80292d4:	d003      	beq.n	80292de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80292d6:	6878      	ldr	r0, [r7, #4]
 80292d8:	f000 f905 	bl	80294e6 <HAL_TIM_IC_CaptureCallback>
 80292dc:	e005      	b.n	80292ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80292de:	6878      	ldr	r0, [r7, #4]
 80292e0:	f000 f8f7 	bl	80294d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80292e4:	6878      	ldr	r0, [r7, #4]
 80292e6:	f000 f908 	bl	80294fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80292ea:	687b      	ldr	r3, [r7, #4]
 80292ec:	2200      	movs	r2, #0
 80292ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80292f0:	687b      	ldr	r3, [r7, #4]
 80292f2:	681b      	ldr	r3, [r3, #0]
 80292f4:	691b      	ldr	r3, [r3, #16]
 80292f6:	f003 0304 	and.w	r3, r3, #4
 80292fa:	2b04      	cmp	r3, #4
 80292fc:	d122      	bne.n	8029344 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80292fe:	687b      	ldr	r3, [r7, #4]
 8029300:	681b      	ldr	r3, [r3, #0]
 8029302:	68db      	ldr	r3, [r3, #12]
 8029304:	f003 0304 	and.w	r3, r3, #4
 8029308:	2b04      	cmp	r3, #4
 802930a:	d11b      	bne.n	8029344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802930c:	687b      	ldr	r3, [r7, #4]
 802930e:	681b      	ldr	r3, [r3, #0]
 8029310:	f06f 0204 	mvn.w	r2, #4
 8029314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8029316:	687b      	ldr	r3, [r7, #4]
 8029318:	2202      	movs	r2, #2
 802931a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802931c:	687b      	ldr	r3, [r7, #4]
 802931e:	681b      	ldr	r3, [r3, #0]
 8029320:	699b      	ldr	r3, [r3, #24]
 8029322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029326:	2b00      	cmp	r3, #0
 8029328:	d003      	beq.n	8029332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802932a:	6878      	ldr	r0, [r7, #4]
 802932c:	f000 f8db 	bl	80294e6 <HAL_TIM_IC_CaptureCallback>
 8029330:	e005      	b.n	802933e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029332:	6878      	ldr	r0, [r7, #4]
 8029334:	f000 f8cd 	bl	80294d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029338:	6878      	ldr	r0, [r7, #4]
 802933a:	f000 f8de 	bl	80294fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802933e:	687b      	ldr	r3, [r7, #4]
 8029340:	2200      	movs	r2, #0
 8029342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8029344:	687b      	ldr	r3, [r7, #4]
 8029346:	681b      	ldr	r3, [r3, #0]
 8029348:	691b      	ldr	r3, [r3, #16]
 802934a:	f003 0308 	and.w	r3, r3, #8
 802934e:	2b08      	cmp	r3, #8
 8029350:	d122      	bne.n	8029398 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8029352:	687b      	ldr	r3, [r7, #4]
 8029354:	681b      	ldr	r3, [r3, #0]
 8029356:	68db      	ldr	r3, [r3, #12]
 8029358:	f003 0308 	and.w	r3, r3, #8
 802935c:	2b08      	cmp	r3, #8
 802935e:	d11b      	bne.n	8029398 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8029360:	687b      	ldr	r3, [r7, #4]
 8029362:	681b      	ldr	r3, [r3, #0]
 8029364:	f06f 0208 	mvn.w	r2, #8
 8029368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802936a:	687b      	ldr	r3, [r7, #4]
 802936c:	2204      	movs	r2, #4
 802936e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8029370:	687b      	ldr	r3, [r7, #4]
 8029372:	681b      	ldr	r3, [r3, #0]
 8029374:	69db      	ldr	r3, [r3, #28]
 8029376:	f003 0303 	and.w	r3, r3, #3
 802937a:	2b00      	cmp	r3, #0
 802937c:	d003      	beq.n	8029386 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802937e:	6878      	ldr	r0, [r7, #4]
 8029380:	f000 f8b1 	bl	80294e6 <HAL_TIM_IC_CaptureCallback>
 8029384:	e005      	b.n	8029392 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029386:	6878      	ldr	r0, [r7, #4]
 8029388:	f000 f8a3 	bl	80294d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802938c:	6878      	ldr	r0, [r7, #4]
 802938e:	f000 f8b4 	bl	80294fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029392:	687b      	ldr	r3, [r7, #4]
 8029394:	2200      	movs	r2, #0
 8029396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8029398:	687b      	ldr	r3, [r7, #4]
 802939a:	681b      	ldr	r3, [r3, #0]
 802939c:	691b      	ldr	r3, [r3, #16]
 802939e:	f003 0310 	and.w	r3, r3, #16
 80293a2:	2b10      	cmp	r3, #16
 80293a4:	d122      	bne.n	80293ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80293a6:	687b      	ldr	r3, [r7, #4]
 80293a8:	681b      	ldr	r3, [r3, #0]
 80293aa:	68db      	ldr	r3, [r3, #12]
 80293ac:	f003 0310 	and.w	r3, r3, #16
 80293b0:	2b10      	cmp	r3, #16
 80293b2:	d11b      	bne.n	80293ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80293b4:	687b      	ldr	r3, [r7, #4]
 80293b6:	681b      	ldr	r3, [r3, #0]
 80293b8:	f06f 0210 	mvn.w	r2, #16
 80293bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80293be:	687b      	ldr	r3, [r7, #4]
 80293c0:	2208      	movs	r2, #8
 80293c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80293c4:	687b      	ldr	r3, [r7, #4]
 80293c6:	681b      	ldr	r3, [r3, #0]
 80293c8:	69db      	ldr	r3, [r3, #28]
 80293ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80293ce:	2b00      	cmp	r3, #0
 80293d0:	d003      	beq.n	80293da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80293d2:	6878      	ldr	r0, [r7, #4]
 80293d4:	f000 f887 	bl	80294e6 <HAL_TIM_IC_CaptureCallback>
 80293d8:	e005      	b.n	80293e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80293da:	6878      	ldr	r0, [r7, #4]
 80293dc:	f000 f879 	bl	80294d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80293e0:	6878      	ldr	r0, [r7, #4]
 80293e2:	f000 f88a 	bl	80294fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80293e6:	687b      	ldr	r3, [r7, #4]
 80293e8:	2200      	movs	r2, #0
 80293ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80293ec:	687b      	ldr	r3, [r7, #4]
 80293ee:	681b      	ldr	r3, [r3, #0]
 80293f0:	691b      	ldr	r3, [r3, #16]
 80293f2:	f003 0301 	and.w	r3, r3, #1
 80293f6:	2b01      	cmp	r3, #1
 80293f8:	d10e      	bne.n	8029418 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80293fa:	687b      	ldr	r3, [r7, #4]
 80293fc:	681b      	ldr	r3, [r3, #0]
 80293fe:	68db      	ldr	r3, [r3, #12]
 8029400:	f003 0301 	and.w	r3, r3, #1
 8029404:	2b01      	cmp	r3, #1
 8029406:	d107      	bne.n	8029418 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029408:	687b      	ldr	r3, [r7, #4]
 802940a:	681b      	ldr	r3, [r3, #0]
 802940c:	f06f 0201 	mvn.w	r2, #1
 8029410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8029412:	6878      	ldr	r0, [r7, #4]
 8029414:	f7f8 fb12 	bl	8021a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029418:	687b      	ldr	r3, [r7, #4]
 802941a:	681b      	ldr	r3, [r3, #0]
 802941c:	691b      	ldr	r3, [r3, #16]
 802941e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029422:	2b80      	cmp	r3, #128	; 0x80
 8029424:	d10e      	bne.n	8029444 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029426:	687b      	ldr	r3, [r7, #4]
 8029428:	681b      	ldr	r3, [r3, #0]
 802942a:	68db      	ldr	r3, [r3, #12]
 802942c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029430:	2b80      	cmp	r3, #128	; 0x80
 8029432:	d107      	bne.n	8029444 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8029434:	687b      	ldr	r3, [r7, #4]
 8029436:	681b      	ldr	r3, [r3, #0]
 8029438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802943c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802943e:	6878      	ldr	r0, [r7, #4]
 8029440:	f000 f920 	bl	8029684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8029444:	687b      	ldr	r3, [r7, #4]
 8029446:	681b      	ldr	r3, [r3, #0]
 8029448:	691b      	ldr	r3, [r3, #16]
 802944a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802944e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029452:	d10e      	bne.n	8029472 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029454:	687b      	ldr	r3, [r7, #4]
 8029456:	681b      	ldr	r3, [r3, #0]
 8029458:	68db      	ldr	r3, [r3, #12]
 802945a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802945e:	2b80      	cmp	r3, #128	; 0x80
 8029460:	d107      	bne.n	8029472 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8029462:	687b      	ldr	r3, [r7, #4]
 8029464:	681b      	ldr	r3, [r3, #0]
 8029466:	f46f 7280 	mvn.w	r2, #256	; 0x100
 802946a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 802946c:	6878      	ldr	r0, [r7, #4]
 802946e:	f000 f913 	bl	8029698 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8029472:	687b      	ldr	r3, [r7, #4]
 8029474:	681b      	ldr	r3, [r3, #0]
 8029476:	691b      	ldr	r3, [r3, #16]
 8029478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802947c:	2b40      	cmp	r3, #64	; 0x40
 802947e:	d10e      	bne.n	802949e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029480:	687b      	ldr	r3, [r7, #4]
 8029482:	681b      	ldr	r3, [r3, #0]
 8029484:	68db      	ldr	r3, [r3, #12]
 8029486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802948a:	2b40      	cmp	r3, #64	; 0x40
 802948c:	d107      	bne.n	802949e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802948e:	687b      	ldr	r3, [r7, #4]
 8029490:	681b      	ldr	r3, [r3, #0]
 8029492:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8029496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8029498:	6878      	ldr	r0, [r7, #4]
 802949a:	f000 f838 	bl	802950e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802949e:	687b      	ldr	r3, [r7, #4]
 80294a0:	681b      	ldr	r3, [r3, #0]
 80294a2:	691b      	ldr	r3, [r3, #16]
 80294a4:	f003 0320 	and.w	r3, r3, #32
 80294a8:	2b20      	cmp	r3, #32
 80294aa:	d10e      	bne.n	80294ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80294ac:	687b      	ldr	r3, [r7, #4]
 80294ae:	681b      	ldr	r3, [r3, #0]
 80294b0:	68db      	ldr	r3, [r3, #12]
 80294b2:	f003 0320 	and.w	r3, r3, #32
 80294b6:	2b20      	cmp	r3, #32
 80294b8:	d107      	bne.n	80294ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80294ba:	687b      	ldr	r3, [r7, #4]
 80294bc:	681b      	ldr	r3, [r3, #0]
 80294be:	f06f 0220 	mvn.w	r2, #32
 80294c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80294c4:	6878      	ldr	r0, [r7, #4]
 80294c6:	f000 f8d3 	bl	8029670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80294ca:	bf00      	nop
 80294cc:	3708      	adds	r7, #8
 80294ce:	46bd      	mov	sp, r7
 80294d0:	bd80      	pop	{r7, pc}

080294d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80294d2:	b480      	push	{r7}
 80294d4:	b083      	sub	sp, #12
 80294d6:	af00      	add	r7, sp, #0
 80294d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80294da:	bf00      	nop
 80294dc:	370c      	adds	r7, #12
 80294de:	46bd      	mov	sp, r7
 80294e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294e4:	4770      	bx	lr

080294e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80294e6:	b480      	push	{r7}
 80294e8:	b083      	sub	sp, #12
 80294ea:	af00      	add	r7, sp, #0
 80294ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80294ee:	bf00      	nop
 80294f0:	370c      	adds	r7, #12
 80294f2:	46bd      	mov	sp, r7
 80294f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294f8:	4770      	bx	lr

080294fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80294fa:	b480      	push	{r7}
 80294fc:	b083      	sub	sp, #12
 80294fe:	af00      	add	r7, sp, #0
 8029500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8029502:	bf00      	nop
 8029504:	370c      	adds	r7, #12
 8029506:	46bd      	mov	sp, r7
 8029508:	f85d 7b04 	ldr.w	r7, [sp], #4
 802950c:	4770      	bx	lr

0802950e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802950e:	b480      	push	{r7}
 8029510:	b083      	sub	sp, #12
 8029512:	af00      	add	r7, sp, #0
 8029514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8029516:	bf00      	nop
 8029518:	370c      	adds	r7, #12
 802951a:	46bd      	mov	sp, r7
 802951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029520:	4770      	bx	lr
	...

08029524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8029524:	b480      	push	{r7}
 8029526:	b085      	sub	sp, #20
 8029528:	af00      	add	r7, sp, #0
 802952a:	6078      	str	r0, [r7, #4]
 802952c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802952e:	687b      	ldr	r3, [r7, #4]
 8029530:	681b      	ldr	r3, [r3, #0]
 8029532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029534:	687b      	ldr	r3, [r7, #4]
 8029536:	4a44      	ldr	r2, [pc, #272]	; (8029648 <TIM_Base_SetConfig+0x124>)
 8029538:	4293      	cmp	r3, r2
 802953a:	d013      	beq.n	8029564 <TIM_Base_SetConfig+0x40>
 802953c:	687b      	ldr	r3, [r7, #4]
 802953e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029542:	d00f      	beq.n	8029564 <TIM_Base_SetConfig+0x40>
 8029544:	687b      	ldr	r3, [r7, #4]
 8029546:	4a41      	ldr	r2, [pc, #260]	; (802964c <TIM_Base_SetConfig+0x128>)
 8029548:	4293      	cmp	r3, r2
 802954a:	d00b      	beq.n	8029564 <TIM_Base_SetConfig+0x40>
 802954c:	687b      	ldr	r3, [r7, #4]
 802954e:	4a40      	ldr	r2, [pc, #256]	; (8029650 <TIM_Base_SetConfig+0x12c>)
 8029550:	4293      	cmp	r3, r2
 8029552:	d007      	beq.n	8029564 <TIM_Base_SetConfig+0x40>
 8029554:	687b      	ldr	r3, [r7, #4]
 8029556:	4a3f      	ldr	r2, [pc, #252]	; (8029654 <TIM_Base_SetConfig+0x130>)
 8029558:	4293      	cmp	r3, r2
 802955a:	d003      	beq.n	8029564 <TIM_Base_SetConfig+0x40>
 802955c:	687b      	ldr	r3, [r7, #4]
 802955e:	4a3e      	ldr	r2, [pc, #248]	; (8029658 <TIM_Base_SetConfig+0x134>)
 8029560:	4293      	cmp	r3, r2
 8029562:	d108      	bne.n	8029576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029564:	68fb      	ldr	r3, [r7, #12]
 8029566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802956a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802956c:	683b      	ldr	r3, [r7, #0]
 802956e:	685b      	ldr	r3, [r3, #4]
 8029570:	68fa      	ldr	r2, [r7, #12]
 8029572:	4313      	orrs	r3, r2
 8029574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029576:	687b      	ldr	r3, [r7, #4]
 8029578:	4a33      	ldr	r2, [pc, #204]	; (8029648 <TIM_Base_SetConfig+0x124>)
 802957a:	4293      	cmp	r3, r2
 802957c:	d027      	beq.n	80295ce <TIM_Base_SetConfig+0xaa>
 802957e:	687b      	ldr	r3, [r7, #4]
 8029580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029584:	d023      	beq.n	80295ce <TIM_Base_SetConfig+0xaa>
 8029586:	687b      	ldr	r3, [r7, #4]
 8029588:	4a30      	ldr	r2, [pc, #192]	; (802964c <TIM_Base_SetConfig+0x128>)
 802958a:	4293      	cmp	r3, r2
 802958c:	d01f      	beq.n	80295ce <TIM_Base_SetConfig+0xaa>
 802958e:	687b      	ldr	r3, [r7, #4]
 8029590:	4a2f      	ldr	r2, [pc, #188]	; (8029650 <TIM_Base_SetConfig+0x12c>)
 8029592:	4293      	cmp	r3, r2
 8029594:	d01b      	beq.n	80295ce <TIM_Base_SetConfig+0xaa>
 8029596:	687b      	ldr	r3, [r7, #4]
 8029598:	4a2e      	ldr	r2, [pc, #184]	; (8029654 <TIM_Base_SetConfig+0x130>)
 802959a:	4293      	cmp	r3, r2
 802959c:	d017      	beq.n	80295ce <TIM_Base_SetConfig+0xaa>
 802959e:	687b      	ldr	r3, [r7, #4]
 80295a0:	4a2d      	ldr	r2, [pc, #180]	; (8029658 <TIM_Base_SetConfig+0x134>)
 80295a2:	4293      	cmp	r3, r2
 80295a4:	d013      	beq.n	80295ce <TIM_Base_SetConfig+0xaa>
 80295a6:	687b      	ldr	r3, [r7, #4]
 80295a8:	4a2c      	ldr	r2, [pc, #176]	; (802965c <TIM_Base_SetConfig+0x138>)
 80295aa:	4293      	cmp	r3, r2
 80295ac:	d00f      	beq.n	80295ce <TIM_Base_SetConfig+0xaa>
 80295ae:	687b      	ldr	r3, [r7, #4]
 80295b0:	4a2b      	ldr	r2, [pc, #172]	; (8029660 <TIM_Base_SetConfig+0x13c>)
 80295b2:	4293      	cmp	r3, r2
 80295b4:	d00b      	beq.n	80295ce <TIM_Base_SetConfig+0xaa>
 80295b6:	687b      	ldr	r3, [r7, #4]
 80295b8:	4a2a      	ldr	r2, [pc, #168]	; (8029664 <TIM_Base_SetConfig+0x140>)
 80295ba:	4293      	cmp	r3, r2
 80295bc:	d007      	beq.n	80295ce <TIM_Base_SetConfig+0xaa>
 80295be:	687b      	ldr	r3, [r7, #4]
 80295c0:	4a29      	ldr	r2, [pc, #164]	; (8029668 <TIM_Base_SetConfig+0x144>)
 80295c2:	4293      	cmp	r3, r2
 80295c4:	d003      	beq.n	80295ce <TIM_Base_SetConfig+0xaa>
 80295c6:	687b      	ldr	r3, [r7, #4]
 80295c8:	4a28      	ldr	r2, [pc, #160]	; (802966c <TIM_Base_SetConfig+0x148>)
 80295ca:	4293      	cmp	r3, r2
 80295cc:	d108      	bne.n	80295e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80295ce:	68fb      	ldr	r3, [r7, #12]
 80295d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80295d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80295d6:	683b      	ldr	r3, [r7, #0]
 80295d8:	68db      	ldr	r3, [r3, #12]
 80295da:	68fa      	ldr	r2, [r7, #12]
 80295dc:	4313      	orrs	r3, r2
 80295de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80295e0:	68fb      	ldr	r3, [r7, #12]
 80295e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80295e6:	683b      	ldr	r3, [r7, #0]
 80295e8:	695b      	ldr	r3, [r3, #20]
 80295ea:	4313      	orrs	r3, r2
 80295ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80295ee:	687b      	ldr	r3, [r7, #4]
 80295f0:	68fa      	ldr	r2, [r7, #12]
 80295f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80295f4:	683b      	ldr	r3, [r7, #0]
 80295f6:	689a      	ldr	r2, [r3, #8]
 80295f8:	687b      	ldr	r3, [r7, #4]
 80295fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80295fc:	683b      	ldr	r3, [r7, #0]
 80295fe:	681a      	ldr	r2, [r3, #0]
 8029600:	687b      	ldr	r3, [r7, #4]
 8029602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8029604:	687b      	ldr	r3, [r7, #4]
 8029606:	4a10      	ldr	r2, [pc, #64]	; (8029648 <TIM_Base_SetConfig+0x124>)
 8029608:	4293      	cmp	r3, r2
 802960a:	d00f      	beq.n	802962c <TIM_Base_SetConfig+0x108>
 802960c:	687b      	ldr	r3, [r7, #4]
 802960e:	4a12      	ldr	r2, [pc, #72]	; (8029658 <TIM_Base_SetConfig+0x134>)
 8029610:	4293      	cmp	r3, r2
 8029612:	d00b      	beq.n	802962c <TIM_Base_SetConfig+0x108>
 8029614:	687b      	ldr	r3, [r7, #4]
 8029616:	4a11      	ldr	r2, [pc, #68]	; (802965c <TIM_Base_SetConfig+0x138>)
 8029618:	4293      	cmp	r3, r2
 802961a:	d007      	beq.n	802962c <TIM_Base_SetConfig+0x108>
 802961c:	687b      	ldr	r3, [r7, #4]
 802961e:	4a10      	ldr	r2, [pc, #64]	; (8029660 <TIM_Base_SetConfig+0x13c>)
 8029620:	4293      	cmp	r3, r2
 8029622:	d003      	beq.n	802962c <TIM_Base_SetConfig+0x108>
 8029624:	687b      	ldr	r3, [r7, #4]
 8029626:	4a0f      	ldr	r2, [pc, #60]	; (8029664 <TIM_Base_SetConfig+0x140>)
 8029628:	4293      	cmp	r3, r2
 802962a:	d103      	bne.n	8029634 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802962c:	683b      	ldr	r3, [r7, #0]
 802962e:	691a      	ldr	r2, [r3, #16]
 8029630:	687b      	ldr	r3, [r7, #4]
 8029632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8029634:	687b      	ldr	r3, [r7, #4]
 8029636:	2201      	movs	r2, #1
 8029638:	615a      	str	r2, [r3, #20]
}
 802963a:	bf00      	nop
 802963c:	3714      	adds	r7, #20
 802963e:	46bd      	mov	sp, r7
 8029640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029644:	4770      	bx	lr
 8029646:	bf00      	nop
 8029648:	40010000 	.word	0x40010000
 802964c:	40000400 	.word	0x40000400
 8029650:	40000800 	.word	0x40000800
 8029654:	40000c00 	.word	0x40000c00
 8029658:	40010400 	.word	0x40010400
 802965c:	40014000 	.word	0x40014000
 8029660:	40014400 	.word	0x40014400
 8029664:	40014800 	.word	0x40014800
 8029668:	4000e000 	.word	0x4000e000
 802966c:	4000e400 	.word	0x4000e400

08029670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8029670:	b480      	push	{r7}
 8029672:	b083      	sub	sp, #12
 8029674:	af00      	add	r7, sp, #0
 8029676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8029678:	bf00      	nop
 802967a:	370c      	adds	r7, #12
 802967c:	46bd      	mov	sp, r7
 802967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029682:	4770      	bx	lr

08029684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8029684:	b480      	push	{r7}
 8029686:	b083      	sub	sp, #12
 8029688:	af00      	add	r7, sp, #0
 802968a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802968c:	bf00      	nop
 802968e:	370c      	adds	r7, #12
 8029690:	46bd      	mov	sp, r7
 8029692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029696:	4770      	bx	lr

08029698 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8029698:	b480      	push	{r7}
 802969a:	b083      	sub	sp, #12
 802969c:	af00      	add	r7, sp, #0
 802969e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80296a0:	bf00      	nop
 80296a2:	370c      	adds	r7, #12
 80296a4:	46bd      	mov	sp, r7
 80296a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80296aa:	4770      	bx	lr

080296ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80296ac:	b580      	push	{r7, lr}
 80296ae:	b082      	sub	sp, #8
 80296b0:	af00      	add	r7, sp, #0
 80296b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80296b4:	687b      	ldr	r3, [r7, #4]
 80296b6:	2b00      	cmp	r3, #0
 80296b8:	d101      	bne.n	80296be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80296ba:	2301      	movs	r3, #1
 80296bc:	e042      	b.n	8029744 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80296be:	687b      	ldr	r3, [r7, #4]
 80296c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80296c4:	2b00      	cmp	r3, #0
 80296c6:	d106      	bne.n	80296d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80296c8:	687b      	ldr	r3, [r7, #4]
 80296ca:	2200      	movs	r2, #0
 80296cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80296d0:	6878      	ldr	r0, [r7, #4]
 80296d2:	f7f8 f9e9 	bl	8021aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80296d6:	687b      	ldr	r3, [r7, #4]
 80296d8:	2224      	movs	r2, #36	; 0x24
 80296da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80296de:	687b      	ldr	r3, [r7, #4]
 80296e0:	681b      	ldr	r3, [r3, #0]
 80296e2:	681a      	ldr	r2, [r3, #0]
 80296e4:	687b      	ldr	r3, [r7, #4]
 80296e6:	681b      	ldr	r3, [r3, #0]
 80296e8:	f022 0201 	bic.w	r2, r2, #1
 80296ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80296ee:	6878      	ldr	r0, [r7, #4]
 80296f0:	f000 fc84 	bl	8029ffc <UART_SetConfig>
 80296f4:	4603      	mov	r3, r0
 80296f6:	2b01      	cmp	r3, #1
 80296f8:	d101      	bne.n	80296fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80296fa:	2301      	movs	r3, #1
 80296fc:	e022      	b.n	8029744 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80296fe:	687b      	ldr	r3, [r7, #4]
 8029700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029702:	2b00      	cmp	r3, #0
 8029704:	d002      	beq.n	802970c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8029706:	6878      	ldr	r0, [r7, #4]
 8029708:	f001 fae4 	bl	802acd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802970c:	687b      	ldr	r3, [r7, #4]
 802970e:	681b      	ldr	r3, [r3, #0]
 8029710:	685a      	ldr	r2, [r3, #4]
 8029712:	687b      	ldr	r3, [r7, #4]
 8029714:	681b      	ldr	r3, [r3, #0]
 8029716:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802971a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802971c:	687b      	ldr	r3, [r7, #4]
 802971e:	681b      	ldr	r3, [r3, #0]
 8029720:	689a      	ldr	r2, [r3, #8]
 8029722:	687b      	ldr	r3, [r7, #4]
 8029724:	681b      	ldr	r3, [r3, #0]
 8029726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802972a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 802972c:	687b      	ldr	r3, [r7, #4]
 802972e:	681b      	ldr	r3, [r3, #0]
 8029730:	681a      	ldr	r2, [r3, #0]
 8029732:	687b      	ldr	r3, [r7, #4]
 8029734:	681b      	ldr	r3, [r3, #0]
 8029736:	f042 0201 	orr.w	r2, r2, #1
 802973a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 802973c:	6878      	ldr	r0, [r7, #4]
 802973e:	f001 fb6b 	bl	802ae18 <UART_CheckIdleState>
 8029742:	4603      	mov	r3, r0
}
 8029744:	4618      	mov	r0, r3
 8029746:	3708      	adds	r7, #8
 8029748:	46bd      	mov	sp, r7
 802974a:	bd80      	pop	{r7, pc}

0802974c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 802974c:	b580      	push	{r7, lr}
 802974e:	b08a      	sub	sp, #40	; 0x28
 8029750:	af00      	add	r7, sp, #0
 8029752:	60f8      	str	r0, [r7, #12]
 8029754:	60b9      	str	r1, [r7, #8]
 8029756:	4613      	mov	r3, r2
 8029758:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802975a:	68fb      	ldr	r3, [r7, #12]
 802975c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8029760:	2b20      	cmp	r3, #32
 8029762:	d17a      	bne.n	802985a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8029764:	68bb      	ldr	r3, [r7, #8]
 8029766:	2b00      	cmp	r3, #0
 8029768:	d002      	beq.n	8029770 <HAL_UART_Transmit_DMA+0x24>
 802976a:	88fb      	ldrh	r3, [r7, #6]
 802976c:	2b00      	cmp	r3, #0
 802976e:	d101      	bne.n	8029774 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8029770:	2301      	movs	r3, #1
 8029772:	e073      	b.n	802985c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8029774:	68fb      	ldr	r3, [r7, #12]
 8029776:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802977a:	2b01      	cmp	r3, #1
 802977c:	d101      	bne.n	8029782 <HAL_UART_Transmit_DMA+0x36>
 802977e:	2302      	movs	r3, #2
 8029780:	e06c      	b.n	802985c <HAL_UART_Transmit_DMA+0x110>
 8029782:	68fb      	ldr	r3, [r7, #12]
 8029784:	2201      	movs	r2, #1
 8029786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 802978a:	68fb      	ldr	r3, [r7, #12]
 802978c:	68ba      	ldr	r2, [r7, #8]
 802978e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8029790:	68fb      	ldr	r3, [r7, #12]
 8029792:	88fa      	ldrh	r2, [r7, #6]
 8029794:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8029798:	68fb      	ldr	r3, [r7, #12]
 802979a:	88fa      	ldrh	r2, [r7, #6]
 802979c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80297a0:	68fb      	ldr	r3, [r7, #12]
 80297a2:	2200      	movs	r2, #0
 80297a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80297a8:	68fb      	ldr	r3, [r7, #12]
 80297aa:	2221      	movs	r2, #33	; 0x21
 80297ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80297b0:	68fb      	ldr	r3, [r7, #12]
 80297b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80297b4:	2b00      	cmp	r3, #0
 80297b6:	d02c      	beq.n	8029812 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80297b8:	68fb      	ldr	r3, [r7, #12]
 80297ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80297bc:	4a29      	ldr	r2, [pc, #164]	; (8029864 <HAL_UART_Transmit_DMA+0x118>)
 80297be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80297c0:	68fb      	ldr	r3, [r7, #12]
 80297c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80297c4:	4a28      	ldr	r2, [pc, #160]	; (8029868 <HAL_UART_Transmit_DMA+0x11c>)
 80297c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80297c8:	68fb      	ldr	r3, [r7, #12]
 80297ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80297cc:	4a27      	ldr	r2, [pc, #156]	; (802986c <HAL_UART_Transmit_DMA+0x120>)
 80297ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80297d0:	68fb      	ldr	r3, [r7, #12]
 80297d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80297d4:	2200      	movs	r2, #0
 80297d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80297d8:	68fb      	ldr	r3, [r7, #12]
 80297da:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80297dc:	68fb      	ldr	r3, [r7, #12]
 80297de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80297e0:	4619      	mov	r1, r3
 80297e2:	68fb      	ldr	r3, [r7, #12]
 80297e4:	681b      	ldr	r3, [r3, #0]
 80297e6:	3328      	adds	r3, #40	; 0x28
 80297e8:	461a      	mov	r2, r3
 80297ea:	88fb      	ldrh	r3, [r7, #6]
 80297ec:	f7f9 f8c2 	bl	8022974 <HAL_DMA_Start_IT>
 80297f0:	4603      	mov	r3, r0
 80297f2:	2b00      	cmp	r3, #0
 80297f4:	d00d      	beq.n	8029812 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80297f6:	68fb      	ldr	r3, [r7, #12]
 80297f8:	2210      	movs	r2, #16
 80297fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80297fe:	68fb      	ldr	r3, [r7, #12]
 8029800:	2200      	movs	r2, #0
 8029802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8029806:	68fb      	ldr	r3, [r7, #12]
 8029808:	2220      	movs	r2, #32
 802980a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 802980e:	2301      	movs	r3, #1
 8029810:	e024      	b.n	802985c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8029812:	68fb      	ldr	r3, [r7, #12]
 8029814:	681b      	ldr	r3, [r3, #0]
 8029816:	2240      	movs	r2, #64	; 0x40
 8029818:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 802981a:	68fb      	ldr	r3, [r7, #12]
 802981c:	2200      	movs	r2, #0
 802981e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8029822:	68fb      	ldr	r3, [r7, #12]
 8029824:	681b      	ldr	r3, [r3, #0]
 8029826:	3308      	adds	r3, #8
 8029828:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802982a:	697b      	ldr	r3, [r7, #20]
 802982c:	e853 3f00 	ldrex	r3, [r3]
 8029830:	613b      	str	r3, [r7, #16]
   return(result);
 8029832:	693b      	ldr	r3, [r7, #16]
 8029834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029838:	627b      	str	r3, [r7, #36]	; 0x24
 802983a:	68fb      	ldr	r3, [r7, #12]
 802983c:	681b      	ldr	r3, [r3, #0]
 802983e:	3308      	adds	r3, #8
 8029840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029842:	623a      	str	r2, [r7, #32]
 8029844:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029846:	69f9      	ldr	r1, [r7, #28]
 8029848:	6a3a      	ldr	r2, [r7, #32]
 802984a:	e841 2300 	strex	r3, r2, [r1]
 802984e:	61bb      	str	r3, [r7, #24]
   return(result);
 8029850:	69bb      	ldr	r3, [r7, #24]
 8029852:	2b00      	cmp	r3, #0
 8029854:	d1e5      	bne.n	8029822 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8029856:	2300      	movs	r3, #0
 8029858:	e000      	b.n	802985c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 802985a:	2302      	movs	r3, #2
  }
}
 802985c:	4618      	mov	r0, r3
 802985e:	3728      	adds	r7, #40	; 0x28
 8029860:	46bd      	mov	sp, r7
 8029862:	bd80      	pop	{r7, pc}
 8029864:	0802b2e1 	.word	0x0802b2e1
 8029868:	0802b377 	.word	0x0802b377
 802986c:	0802b4ed 	.word	0x0802b4ed

08029870 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8029870:	b580      	push	{r7, lr}
 8029872:	b0ba      	sub	sp, #232	; 0xe8
 8029874:	af00      	add	r7, sp, #0
 8029876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8029878:	687b      	ldr	r3, [r7, #4]
 802987a:	681b      	ldr	r3, [r3, #0]
 802987c:	69db      	ldr	r3, [r3, #28]
 802987e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8029882:	687b      	ldr	r3, [r7, #4]
 8029884:	681b      	ldr	r3, [r3, #0]
 8029886:	681b      	ldr	r3, [r3, #0]
 8029888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802988c:	687b      	ldr	r3, [r7, #4]
 802988e:	681b      	ldr	r3, [r3, #0]
 8029890:	689b      	ldr	r3, [r3, #8]
 8029892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8029896:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 802989a:	f640 030f 	movw	r3, #2063	; 0x80f
 802989e:	4013      	ands	r3, r2
 80298a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80298a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80298a8:	2b00      	cmp	r3, #0
 80298aa:	d11b      	bne.n	80298e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80298ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80298b0:	f003 0320 	and.w	r3, r3, #32
 80298b4:	2b00      	cmp	r3, #0
 80298b6:	d015      	beq.n	80298e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80298b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80298bc:	f003 0320 	and.w	r3, r3, #32
 80298c0:	2b00      	cmp	r3, #0
 80298c2:	d105      	bne.n	80298d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80298c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80298c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80298cc:	2b00      	cmp	r3, #0
 80298ce:	d009      	beq.n	80298e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80298d0:	687b      	ldr	r3, [r7, #4]
 80298d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80298d4:	2b00      	cmp	r3, #0
 80298d6:	f000 835a 	beq.w	8029f8e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80298da:	687b      	ldr	r3, [r7, #4]
 80298dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80298de:	6878      	ldr	r0, [r7, #4]
 80298e0:	4798      	blx	r3
      }
      return;
 80298e2:	e354      	b.n	8029f8e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80298e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80298e8:	2b00      	cmp	r3, #0
 80298ea:	f000 811f 	beq.w	8029b2c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80298ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80298f2:	4b8b      	ldr	r3, [pc, #556]	; (8029b20 <HAL_UART_IRQHandler+0x2b0>)
 80298f4:	4013      	ands	r3, r2
 80298f6:	2b00      	cmp	r3, #0
 80298f8:	d106      	bne.n	8029908 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80298fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80298fe:	4b89      	ldr	r3, [pc, #548]	; (8029b24 <HAL_UART_IRQHandler+0x2b4>)
 8029900:	4013      	ands	r3, r2
 8029902:	2b00      	cmp	r3, #0
 8029904:	f000 8112 	beq.w	8029b2c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8029908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802990c:	f003 0301 	and.w	r3, r3, #1
 8029910:	2b00      	cmp	r3, #0
 8029912:	d011      	beq.n	8029938 <HAL_UART_IRQHandler+0xc8>
 8029914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802991c:	2b00      	cmp	r3, #0
 802991e:	d00b      	beq.n	8029938 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8029920:	687b      	ldr	r3, [r7, #4]
 8029922:	681b      	ldr	r3, [r3, #0]
 8029924:	2201      	movs	r2, #1
 8029926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8029928:	687b      	ldr	r3, [r7, #4]
 802992a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802992e:	f043 0201 	orr.w	r2, r3, #1
 8029932:	687b      	ldr	r3, [r7, #4]
 8029934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8029938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802993c:	f003 0302 	and.w	r3, r3, #2
 8029940:	2b00      	cmp	r3, #0
 8029942:	d011      	beq.n	8029968 <HAL_UART_IRQHandler+0xf8>
 8029944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029948:	f003 0301 	and.w	r3, r3, #1
 802994c:	2b00      	cmp	r3, #0
 802994e:	d00b      	beq.n	8029968 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8029950:	687b      	ldr	r3, [r7, #4]
 8029952:	681b      	ldr	r3, [r3, #0]
 8029954:	2202      	movs	r2, #2
 8029956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8029958:	687b      	ldr	r3, [r7, #4]
 802995a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802995e:	f043 0204 	orr.w	r2, r3, #4
 8029962:	687b      	ldr	r3, [r7, #4]
 8029964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8029968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802996c:	f003 0304 	and.w	r3, r3, #4
 8029970:	2b00      	cmp	r3, #0
 8029972:	d011      	beq.n	8029998 <HAL_UART_IRQHandler+0x128>
 8029974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029978:	f003 0301 	and.w	r3, r3, #1
 802997c:	2b00      	cmp	r3, #0
 802997e:	d00b      	beq.n	8029998 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8029980:	687b      	ldr	r3, [r7, #4]
 8029982:	681b      	ldr	r3, [r3, #0]
 8029984:	2204      	movs	r2, #4
 8029986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8029988:	687b      	ldr	r3, [r7, #4]
 802998a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802998e:	f043 0202 	orr.w	r2, r3, #2
 8029992:	687b      	ldr	r3, [r7, #4]
 8029994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8029998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802999c:	f003 0308 	and.w	r3, r3, #8
 80299a0:	2b00      	cmp	r3, #0
 80299a2:	d017      	beq.n	80299d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80299a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80299a8:	f003 0320 	and.w	r3, r3, #32
 80299ac:	2b00      	cmp	r3, #0
 80299ae:	d105      	bne.n	80299bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80299b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80299b4:	4b5a      	ldr	r3, [pc, #360]	; (8029b20 <HAL_UART_IRQHandler+0x2b0>)
 80299b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80299b8:	2b00      	cmp	r3, #0
 80299ba:	d00b      	beq.n	80299d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80299bc:	687b      	ldr	r3, [r7, #4]
 80299be:	681b      	ldr	r3, [r3, #0]
 80299c0:	2208      	movs	r2, #8
 80299c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80299c4:	687b      	ldr	r3, [r7, #4]
 80299c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80299ca:	f043 0208 	orr.w	r2, r3, #8
 80299ce:	687b      	ldr	r3, [r7, #4]
 80299d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80299d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80299d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80299dc:	2b00      	cmp	r3, #0
 80299de:	d012      	beq.n	8029a06 <HAL_UART_IRQHandler+0x196>
 80299e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80299e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80299e8:	2b00      	cmp	r3, #0
 80299ea:	d00c      	beq.n	8029a06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80299ec:	687b      	ldr	r3, [r7, #4]
 80299ee:	681b      	ldr	r3, [r3, #0]
 80299f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80299f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80299f6:	687b      	ldr	r3, [r7, #4]
 80299f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80299fc:	f043 0220 	orr.w	r2, r3, #32
 8029a00:	687b      	ldr	r3, [r7, #4]
 8029a02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8029a06:	687b      	ldr	r3, [r7, #4]
 8029a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8029a0c:	2b00      	cmp	r3, #0
 8029a0e:	f000 82c0 	beq.w	8029f92 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8029a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a16:	f003 0320 	and.w	r3, r3, #32
 8029a1a:	2b00      	cmp	r3, #0
 8029a1c:	d013      	beq.n	8029a46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8029a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029a22:	f003 0320 	and.w	r3, r3, #32
 8029a26:	2b00      	cmp	r3, #0
 8029a28:	d105      	bne.n	8029a36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8029a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8029a32:	2b00      	cmp	r3, #0
 8029a34:	d007      	beq.n	8029a46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8029a36:	687b      	ldr	r3, [r7, #4]
 8029a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029a3a:	2b00      	cmp	r3, #0
 8029a3c:	d003      	beq.n	8029a46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8029a3e:	687b      	ldr	r3, [r7, #4]
 8029a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029a42:	6878      	ldr	r0, [r7, #4]
 8029a44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8029a46:	687b      	ldr	r3, [r7, #4]
 8029a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8029a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8029a50:	687b      	ldr	r3, [r7, #4]
 8029a52:	681b      	ldr	r3, [r3, #0]
 8029a54:	689b      	ldr	r3, [r3, #8]
 8029a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029a5a:	2b40      	cmp	r3, #64	; 0x40
 8029a5c:	d005      	beq.n	8029a6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8029a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8029a62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8029a66:	2b00      	cmp	r3, #0
 8029a68:	d04f      	beq.n	8029b0a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8029a6a:	6878      	ldr	r0, [r7, #4]
 8029a6c:	f001 fbd2 	bl	802b214 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029a70:	687b      	ldr	r3, [r7, #4]
 8029a72:	681b      	ldr	r3, [r3, #0]
 8029a74:	689b      	ldr	r3, [r3, #8]
 8029a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029a7a:	2b40      	cmp	r3, #64	; 0x40
 8029a7c:	d141      	bne.n	8029b02 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029a7e:	687b      	ldr	r3, [r7, #4]
 8029a80:	681b      	ldr	r3, [r3, #0]
 8029a82:	3308      	adds	r3, #8
 8029a84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8029a8c:	e853 3f00 	ldrex	r3, [r3]
 8029a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8029a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8029aa0:	687b      	ldr	r3, [r7, #4]
 8029aa2:	681b      	ldr	r3, [r3, #0]
 8029aa4:	3308      	adds	r3, #8
 8029aa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8029aaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8029aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029ab2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8029ab6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8029aba:	e841 2300 	strex	r3, r2, [r1]
 8029abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8029ac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8029ac6:	2b00      	cmp	r3, #0
 8029ac8:	d1d9      	bne.n	8029a7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8029aca:	687b      	ldr	r3, [r7, #4]
 8029acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029ace:	2b00      	cmp	r3, #0
 8029ad0:	d013      	beq.n	8029afa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8029ad2:	687b      	ldr	r3, [r7, #4]
 8029ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029ad6:	4a14      	ldr	r2, [pc, #80]	; (8029b28 <HAL_UART_IRQHandler+0x2b8>)
 8029ad8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8029ada:	687b      	ldr	r3, [r7, #4]
 8029adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029ade:	4618      	mov	r0, r3
 8029ae0:	f7f9 fcd0 	bl	8023484 <HAL_DMA_Abort_IT>
 8029ae4:	4603      	mov	r3, r0
 8029ae6:	2b00      	cmp	r3, #0
 8029ae8:	d017      	beq.n	8029b1a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8029aea:	687b      	ldr	r3, [r7, #4]
 8029aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029af0:	687a      	ldr	r2, [r7, #4]
 8029af2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8029af4:	4610      	mov	r0, r2
 8029af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029af8:	e00f      	b.n	8029b1a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8029afa:	6878      	ldr	r0, [r7, #4]
 8029afc:	f000 fa74 	bl	8029fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b00:	e00b      	b.n	8029b1a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8029b02:	6878      	ldr	r0, [r7, #4]
 8029b04:	f000 fa70 	bl	8029fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b08:	e007      	b.n	8029b1a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8029b0a:	6878      	ldr	r0, [r7, #4]
 8029b0c:	f000 fa6c 	bl	8029fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029b10:	687b      	ldr	r3, [r7, #4]
 8029b12:	2200      	movs	r2, #0
 8029b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8029b18:	e23b      	b.n	8029f92 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b1a:	bf00      	nop
    return;
 8029b1c:	e239      	b.n	8029f92 <HAL_UART_IRQHandler+0x722>
 8029b1e:	bf00      	nop
 8029b20:	10000001 	.word	0x10000001
 8029b24:	04000120 	.word	0x04000120
 8029b28:	0802b56d 	.word	0x0802b56d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029b2c:	687b      	ldr	r3, [r7, #4]
 8029b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029b30:	2b01      	cmp	r3, #1
 8029b32:	f040 81ce 	bne.w	8029ed2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8029b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029b3a:	f003 0310 	and.w	r3, r3, #16
 8029b3e:	2b00      	cmp	r3, #0
 8029b40:	f000 81c7 	beq.w	8029ed2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8029b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029b48:	f003 0310 	and.w	r3, r3, #16
 8029b4c:	2b00      	cmp	r3, #0
 8029b4e:	f000 81c0 	beq.w	8029ed2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8029b52:	687b      	ldr	r3, [r7, #4]
 8029b54:	681b      	ldr	r3, [r3, #0]
 8029b56:	2210      	movs	r2, #16
 8029b58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b5a:	687b      	ldr	r3, [r7, #4]
 8029b5c:	681b      	ldr	r3, [r3, #0]
 8029b5e:	689b      	ldr	r3, [r3, #8]
 8029b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029b64:	2b40      	cmp	r3, #64	; 0x40
 8029b66:	f040 813b 	bne.w	8029de0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8029b6a:	687b      	ldr	r3, [r7, #4]
 8029b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029b6e:	681b      	ldr	r3, [r3, #0]
 8029b70:	4a8b      	ldr	r2, [pc, #556]	; (8029da0 <HAL_UART_IRQHandler+0x530>)
 8029b72:	4293      	cmp	r3, r2
 8029b74:	d059      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029b76:	687b      	ldr	r3, [r7, #4]
 8029b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029b7a:	681b      	ldr	r3, [r3, #0]
 8029b7c:	4a89      	ldr	r2, [pc, #548]	; (8029da4 <HAL_UART_IRQHandler+0x534>)
 8029b7e:	4293      	cmp	r3, r2
 8029b80:	d053      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029b82:	687b      	ldr	r3, [r7, #4]
 8029b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029b86:	681b      	ldr	r3, [r3, #0]
 8029b88:	4a87      	ldr	r2, [pc, #540]	; (8029da8 <HAL_UART_IRQHandler+0x538>)
 8029b8a:	4293      	cmp	r3, r2
 8029b8c:	d04d      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029b8e:	687b      	ldr	r3, [r7, #4]
 8029b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029b92:	681b      	ldr	r3, [r3, #0]
 8029b94:	4a85      	ldr	r2, [pc, #532]	; (8029dac <HAL_UART_IRQHandler+0x53c>)
 8029b96:	4293      	cmp	r3, r2
 8029b98:	d047      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029b9a:	687b      	ldr	r3, [r7, #4]
 8029b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029b9e:	681b      	ldr	r3, [r3, #0]
 8029ba0:	4a83      	ldr	r2, [pc, #524]	; (8029db0 <HAL_UART_IRQHandler+0x540>)
 8029ba2:	4293      	cmp	r3, r2
 8029ba4:	d041      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029ba6:	687b      	ldr	r3, [r7, #4]
 8029ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029baa:	681b      	ldr	r3, [r3, #0]
 8029bac:	4a81      	ldr	r2, [pc, #516]	; (8029db4 <HAL_UART_IRQHandler+0x544>)
 8029bae:	4293      	cmp	r3, r2
 8029bb0:	d03b      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029bb2:	687b      	ldr	r3, [r7, #4]
 8029bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029bb6:	681b      	ldr	r3, [r3, #0]
 8029bb8:	4a7f      	ldr	r2, [pc, #508]	; (8029db8 <HAL_UART_IRQHandler+0x548>)
 8029bba:	4293      	cmp	r3, r2
 8029bbc:	d035      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029bbe:	687b      	ldr	r3, [r7, #4]
 8029bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029bc2:	681b      	ldr	r3, [r3, #0]
 8029bc4:	4a7d      	ldr	r2, [pc, #500]	; (8029dbc <HAL_UART_IRQHandler+0x54c>)
 8029bc6:	4293      	cmp	r3, r2
 8029bc8:	d02f      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029bca:	687b      	ldr	r3, [r7, #4]
 8029bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029bce:	681b      	ldr	r3, [r3, #0]
 8029bd0:	4a7b      	ldr	r2, [pc, #492]	; (8029dc0 <HAL_UART_IRQHandler+0x550>)
 8029bd2:	4293      	cmp	r3, r2
 8029bd4:	d029      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029bd6:	687b      	ldr	r3, [r7, #4]
 8029bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029bda:	681b      	ldr	r3, [r3, #0]
 8029bdc:	4a79      	ldr	r2, [pc, #484]	; (8029dc4 <HAL_UART_IRQHandler+0x554>)
 8029bde:	4293      	cmp	r3, r2
 8029be0:	d023      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029be2:	687b      	ldr	r3, [r7, #4]
 8029be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029be6:	681b      	ldr	r3, [r3, #0]
 8029be8:	4a77      	ldr	r2, [pc, #476]	; (8029dc8 <HAL_UART_IRQHandler+0x558>)
 8029bea:	4293      	cmp	r3, r2
 8029bec:	d01d      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029bee:	687b      	ldr	r3, [r7, #4]
 8029bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029bf2:	681b      	ldr	r3, [r3, #0]
 8029bf4:	4a75      	ldr	r2, [pc, #468]	; (8029dcc <HAL_UART_IRQHandler+0x55c>)
 8029bf6:	4293      	cmp	r3, r2
 8029bf8:	d017      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029bfa:	687b      	ldr	r3, [r7, #4]
 8029bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029bfe:	681b      	ldr	r3, [r3, #0]
 8029c00:	4a73      	ldr	r2, [pc, #460]	; (8029dd0 <HAL_UART_IRQHandler+0x560>)
 8029c02:	4293      	cmp	r3, r2
 8029c04:	d011      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029c06:	687b      	ldr	r3, [r7, #4]
 8029c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c0a:	681b      	ldr	r3, [r3, #0]
 8029c0c:	4a71      	ldr	r2, [pc, #452]	; (8029dd4 <HAL_UART_IRQHandler+0x564>)
 8029c0e:	4293      	cmp	r3, r2
 8029c10:	d00b      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029c12:	687b      	ldr	r3, [r7, #4]
 8029c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c16:	681b      	ldr	r3, [r3, #0]
 8029c18:	4a6f      	ldr	r2, [pc, #444]	; (8029dd8 <HAL_UART_IRQHandler+0x568>)
 8029c1a:	4293      	cmp	r3, r2
 8029c1c:	d005      	beq.n	8029c2a <HAL_UART_IRQHandler+0x3ba>
 8029c1e:	687b      	ldr	r3, [r7, #4]
 8029c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c22:	681b      	ldr	r3, [r3, #0]
 8029c24:	4a6d      	ldr	r2, [pc, #436]	; (8029ddc <HAL_UART_IRQHandler+0x56c>)
 8029c26:	4293      	cmp	r3, r2
 8029c28:	d105      	bne.n	8029c36 <HAL_UART_IRQHandler+0x3c6>
 8029c2a:	687b      	ldr	r3, [r7, #4]
 8029c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c2e:	681b      	ldr	r3, [r3, #0]
 8029c30:	685b      	ldr	r3, [r3, #4]
 8029c32:	b29b      	uxth	r3, r3
 8029c34:	e004      	b.n	8029c40 <HAL_UART_IRQHandler+0x3d0>
 8029c36:	687b      	ldr	r3, [r7, #4]
 8029c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c3a:	681b      	ldr	r3, [r3, #0]
 8029c3c:	685b      	ldr	r3, [r3, #4]
 8029c3e:	b29b      	uxth	r3, r3
 8029c40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8029c44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8029c48:	2b00      	cmp	r3, #0
 8029c4a:	f000 81a4 	beq.w	8029f96 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8029c4e:	687b      	ldr	r3, [r7, #4]
 8029c50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8029c54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029c58:	429a      	cmp	r2, r3
 8029c5a:	f080 819c 	bcs.w	8029f96 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8029c5e:	687b      	ldr	r3, [r7, #4]
 8029c60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029c64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8029c68:	687b      	ldr	r3, [r7, #4]
 8029c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029c6c:	69db      	ldr	r3, [r3, #28]
 8029c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029c72:	f000 8086 	beq.w	8029d82 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8029c76:	687b      	ldr	r3, [r7, #4]
 8029c78:	681b      	ldr	r3, [r3, #0]
 8029c7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029c82:	e853 3f00 	ldrex	r3, [r3]
 8029c86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8029c8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8029c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029c92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8029c96:	687b      	ldr	r3, [r7, #4]
 8029c98:	681b      	ldr	r3, [r3, #0]
 8029c9a:	461a      	mov	r2, r3
 8029c9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8029ca0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8029ca4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029ca8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8029cac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8029cb0:	e841 2300 	strex	r3, r2, [r1]
 8029cb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8029cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8029cbc:	2b00      	cmp	r3, #0
 8029cbe:	d1da      	bne.n	8029c76 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029cc0:	687b      	ldr	r3, [r7, #4]
 8029cc2:	681b      	ldr	r3, [r3, #0]
 8029cc4:	3308      	adds	r3, #8
 8029cc6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029cca:	e853 3f00 	ldrex	r3, [r3]
 8029cce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8029cd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029cd2:	f023 0301 	bic.w	r3, r3, #1
 8029cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029cda:	687b      	ldr	r3, [r7, #4]
 8029cdc:	681b      	ldr	r3, [r3, #0]
 8029cde:	3308      	adds	r3, #8
 8029ce0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8029ce4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8029ce8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029cea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8029cec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8029cf0:	e841 2300 	strex	r3, r2, [r1]
 8029cf4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8029cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8029cf8:	2b00      	cmp	r3, #0
 8029cfa:	d1e1      	bne.n	8029cc0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029cfc:	687b      	ldr	r3, [r7, #4]
 8029cfe:	681b      	ldr	r3, [r3, #0]
 8029d00:	3308      	adds	r3, #8
 8029d02:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8029d06:	e853 3f00 	ldrex	r3, [r3]
 8029d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8029d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8029d16:	687b      	ldr	r3, [r7, #4]
 8029d18:	681b      	ldr	r3, [r3, #0]
 8029d1a:	3308      	adds	r3, #8
 8029d1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8029d20:	66fa      	str	r2, [r7, #108]	; 0x6c
 8029d22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029d24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8029d26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8029d28:	e841 2300 	strex	r3, r2, [r1]
 8029d2c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8029d2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8029d30:	2b00      	cmp	r3, #0
 8029d32:	d1e3      	bne.n	8029cfc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8029d34:	687b      	ldr	r3, [r7, #4]
 8029d36:	2220      	movs	r2, #32
 8029d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029d3c:	687b      	ldr	r3, [r7, #4]
 8029d3e:	2200      	movs	r2, #0
 8029d40:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029d42:	687b      	ldr	r3, [r7, #4]
 8029d44:	681b      	ldr	r3, [r3, #0]
 8029d46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d4a:	e853 3f00 	ldrex	r3, [r3]
 8029d4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8029d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029d52:	f023 0310 	bic.w	r3, r3, #16
 8029d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8029d5a:	687b      	ldr	r3, [r7, #4]
 8029d5c:	681b      	ldr	r3, [r3, #0]
 8029d5e:	461a      	mov	r2, r3
 8029d60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8029d64:	65bb      	str	r3, [r7, #88]	; 0x58
 8029d66:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029d68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8029d6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029d6c:	e841 2300 	strex	r3, r2, [r1]
 8029d70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8029d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029d74:	2b00      	cmp	r3, #0
 8029d76:	d1e4      	bne.n	8029d42 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8029d78:	687b      	ldr	r3, [r7, #4]
 8029d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029d7c:	4618      	mov	r0, r3
 8029d7e:	f7f9 f863 	bl	8022e48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8029d82:	687b      	ldr	r3, [r7, #4]
 8029d84:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8029d88:	687b      	ldr	r3, [r7, #4]
 8029d8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8029d8e:	b29b      	uxth	r3, r3
 8029d90:	1ad3      	subs	r3, r2, r3
 8029d92:	b29b      	uxth	r3, r3
 8029d94:	4619      	mov	r1, r3
 8029d96:	6878      	ldr	r0, [r7, #4]
 8029d98:	f7f7 fa6c 	bl	8021274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8029d9c:	e0fb      	b.n	8029f96 <HAL_UART_IRQHandler+0x726>
 8029d9e:	bf00      	nop
 8029da0:	40020010 	.word	0x40020010
 8029da4:	40020028 	.word	0x40020028
 8029da8:	40020040 	.word	0x40020040
 8029dac:	40020058 	.word	0x40020058
 8029db0:	40020070 	.word	0x40020070
 8029db4:	40020088 	.word	0x40020088
 8029db8:	400200a0 	.word	0x400200a0
 8029dbc:	400200b8 	.word	0x400200b8
 8029dc0:	40020410 	.word	0x40020410
 8029dc4:	40020428 	.word	0x40020428
 8029dc8:	40020440 	.word	0x40020440
 8029dcc:	40020458 	.word	0x40020458
 8029dd0:	40020470 	.word	0x40020470
 8029dd4:	40020488 	.word	0x40020488
 8029dd8:	400204a0 	.word	0x400204a0
 8029ddc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8029de0:	687b      	ldr	r3, [r7, #4]
 8029de2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8029de6:	687b      	ldr	r3, [r7, #4]
 8029de8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8029dec:	b29b      	uxth	r3, r3
 8029dee:	1ad3      	subs	r3, r2, r3
 8029df0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8029df4:	687b      	ldr	r3, [r7, #4]
 8029df6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8029dfa:	b29b      	uxth	r3, r3
 8029dfc:	2b00      	cmp	r3, #0
 8029dfe:	f000 80cc 	beq.w	8029f9a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8029e02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029e06:	2b00      	cmp	r3, #0
 8029e08:	f000 80c7 	beq.w	8029f9a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8029e0c:	687b      	ldr	r3, [r7, #4]
 8029e0e:	681b      	ldr	r3, [r3, #0]
 8029e10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029e14:	e853 3f00 	ldrex	r3, [r3]
 8029e18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8029e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029e1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8029e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8029e24:	687b      	ldr	r3, [r7, #4]
 8029e26:	681b      	ldr	r3, [r3, #0]
 8029e28:	461a      	mov	r2, r3
 8029e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8029e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8029e30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029e32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8029e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029e36:	e841 2300 	strex	r3, r2, [r1]
 8029e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8029e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029e3e:	2b00      	cmp	r3, #0
 8029e40:	d1e4      	bne.n	8029e0c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8029e42:	687b      	ldr	r3, [r7, #4]
 8029e44:	681b      	ldr	r3, [r3, #0]
 8029e46:	3308      	adds	r3, #8
 8029e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e4c:	e853 3f00 	ldrex	r3, [r3]
 8029e50:	623b      	str	r3, [r7, #32]
   return(result);
 8029e52:	6a3a      	ldr	r2, [r7, #32]
 8029e54:	4b54      	ldr	r3, [pc, #336]	; (8029fa8 <HAL_UART_IRQHandler+0x738>)
 8029e56:	4013      	ands	r3, r2
 8029e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8029e5c:	687b      	ldr	r3, [r7, #4]
 8029e5e:	681b      	ldr	r3, [r3, #0]
 8029e60:	3308      	adds	r3, #8
 8029e62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8029e66:	633a      	str	r2, [r7, #48]	; 0x30
 8029e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8029e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029e6e:	e841 2300 	strex	r3, r2, [r1]
 8029e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8029e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029e76:	2b00      	cmp	r3, #0
 8029e78:	d1e3      	bne.n	8029e42 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8029e7a:	687b      	ldr	r3, [r7, #4]
 8029e7c:	2220      	movs	r2, #32
 8029e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029e82:	687b      	ldr	r3, [r7, #4]
 8029e84:	2200      	movs	r2, #0
 8029e86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8029e88:	687b      	ldr	r3, [r7, #4]
 8029e8a:	2200      	movs	r2, #0
 8029e8c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029e8e:	687b      	ldr	r3, [r7, #4]
 8029e90:	681b      	ldr	r3, [r3, #0]
 8029e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029e94:	693b      	ldr	r3, [r7, #16]
 8029e96:	e853 3f00 	ldrex	r3, [r3]
 8029e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8029e9c:	68fb      	ldr	r3, [r7, #12]
 8029e9e:	f023 0310 	bic.w	r3, r3, #16
 8029ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029ea6:	687b      	ldr	r3, [r7, #4]
 8029ea8:	681b      	ldr	r3, [r3, #0]
 8029eaa:	461a      	mov	r2, r3
 8029eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8029eb0:	61fb      	str	r3, [r7, #28]
 8029eb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029eb4:	69b9      	ldr	r1, [r7, #24]
 8029eb6:	69fa      	ldr	r2, [r7, #28]
 8029eb8:	e841 2300 	strex	r3, r2, [r1]
 8029ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8029ebe:	697b      	ldr	r3, [r7, #20]
 8029ec0:	2b00      	cmp	r3, #0
 8029ec2:	d1e4      	bne.n	8029e8e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8029ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029ec8:	4619      	mov	r1, r3
 8029eca:	6878      	ldr	r0, [r7, #4]
 8029ecc:	f7f7 f9d2 	bl	8021274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8029ed0:	e063      	b.n	8029f9a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8029ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029eda:	2b00      	cmp	r3, #0
 8029edc:	d00e      	beq.n	8029efc <HAL_UART_IRQHandler+0x68c>
 8029ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8029ee6:	2b00      	cmp	r3, #0
 8029ee8:	d008      	beq.n	8029efc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8029eea:	687b      	ldr	r3, [r7, #4]
 8029eec:	681b      	ldr	r3, [r3, #0]
 8029eee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8029ef2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8029ef4:	6878      	ldr	r0, [r7, #4]
 8029ef6:	f001 fb7a 	bl	802b5ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8029efa:	e051      	b.n	8029fa0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8029efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029f04:	2b00      	cmp	r3, #0
 8029f06:	d014      	beq.n	8029f32 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8029f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029f10:	2b00      	cmp	r3, #0
 8029f12:	d105      	bne.n	8029f20 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8029f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8029f1c:	2b00      	cmp	r3, #0
 8029f1e:	d008      	beq.n	8029f32 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8029f20:	687b      	ldr	r3, [r7, #4]
 8029f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029f24:	2b00      	cmp	r3, #0
 8029f26:	d03a      	beq.n	8029f9e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8029f28:	687b      	ldr	r3, [r7, #4]
 8029f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029f2c:	6878      	ldr	r0, [r7, #4]
 8029f2e:	4798      	blx	r3
    }
    return;
 8029f30:	e035      	b.n	8029f9e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8029f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029f3a:	2b00      	cmp	r3, #0
 8029f3c:	d009      	beq.n	8029f52 <HAL_UART_IRQHandler+0x6e2>
 8029f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029f46:	2b00      	cmp	r3, #0
 8029f48:	d003      	beq.n	8029f52 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8029f4a:	6878      	ldr	r0, [r7, #4]
 8029f4c:	f001 fb24 	bl	802b598 <UART_EndTransmit_IT>
    return;
 8029f50:	e026      	b.n	8029fa0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8029f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8029f5a:	2b00      	cmp	r3, #0
 8029f5c:	d009      	beq.n	8029f72 <HAL_UART_IRQHandler+0x702>
 8029f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029f62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8029f66:	2b00      	cmp	r3, #0
 8029f68:	d003      	beq.n	8029f72 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8029f6a:	6878      	ldr	r0, [r7, #4]
 8029f6c:	f001 fb53 	bl	802b616 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8029f70:	e016      	b.n	8029fa0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8029f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8029f7a:	2b00      	cmp	r3, #0
 8029f7c:	d010      	beq.n	8029fa0 <HAL_UART_IRQHandler+0x730>
 8029f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029f82:	2b00      	cmp	r3, #0
 8029f84:	da0c      	bge.n	8029fa0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8029f86:	6878      	ldr	r0, [r7, #4]
 8029f88:	f001 fb3b 	bl	802b602 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8029f8c:	e008      	b.n	8029fa0 <HAL_UART_IRQHandler+0x730>
      return;
 8029f8e:	bf00      	nop
 8029f90:	e006      	b.n	8029fa0 <HAL_UART_IRQHandler+0x730>
    return;
 8029f92:	bf00      	nop
 8029f94:	e004      	b.n	8029fa0 <HAL_UART_IRQHandler+0x730>
      return;
 8029f96:	bf00      	nop
 8029f98:	e002      	b.n	8029fa0 <HAL_UART_IRQHandler+0x730>
      return;
 8029f9a:	bf00      	nop
 8029f9c:	e000      	b.n	8029fa0 <HAL_UART_IRQHandler+0x730>
    return;
 8029f9e:	bf00      	nop
  }
}
 8029fa0:	37e8      	adds	r7, #232	; 0xe8
 8029fa2:	46bd      	mov	sp, r7
 8029fa4:	bd80      	pop	{r7, pc}
 8029fa6:	bf00      	nop
 8029fa8:	effffffe 	.word	0xeffffffe

08029fac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8029fac:	b480      	push	{r7}
 8029fae:	b083      	sub	sp, #12
 8029fb0:	af00      	add	r7, sp, #0
 8029fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8029fb4:	bf00      	nop
 8029fb6:	370c      	adds	r7, #12
 8029fb8:	46bd      	mov	sp, r7
 8029fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fbe:	4770      	bx	lr

08029fc0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8029fc0:	b480      	push	{r7}
 8029fc2:	b083      	sub	sp, #12
 8029fc4:	af00      	add	r7, sp, #0
 8029fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8029fc8:	bf00      	nop
 8029fca:	370c      	adds	r7, #12
 8029fcc:	46bd      	mov	sp, r7
 8029fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fd2:	4770      	bx	lr

08029fd4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8029fd4:	b480      	push	{r7}
 8029fd6:	b083      	sub	sp, #12
 8029fd8:	af00      	add	r7, sp, #0
 8029fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8029fdc:	bf00      	nop
 8029fde:	370c      	adds	r7, #12
 8029fe0:	46bd      	mov	sp, r7
 8029fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fe6:	4770      	bx	lr

08029fe8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8029fe8:	b480      	push	{r7}
 8029fea:	b083      	sub	sp, #12
 8029fec:	af00      	add	r7, sp, #0
 8029fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8029ff0:	bf00      	nop
 8029ff2:	370c      	adds	r7, #12
 8029ff4:	46bd      	mov	sp, r7
 8029ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ffa:	4770      	bx	lr

08029ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8029ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802a000:	b092      	sub	sp, #72	; 0x48
 802a002:	af00      	add	r7, sp, #0
 802a004:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 802a006:	2300      	movs	r3, #0
 802a008:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802a00c:	697b      	ldr	r3, [r7, #20]
 802a00e:	689a      	ldr	r2, [r3, #8]
 802a010:	697b      	ldr	r3, [r7, #20]
 802a012:	691b      	ldr	r3, [r3, #16]
 802a014:	431a      	orrs	r2, r3
 802a016:	697b      	ldr	r3, [r7, #20]
 802a018:	695b      	ldr	r3, [r3, #20]
 802a01a:	431a      	orrs	r2, r3
 802a01c:	697b      	ldr	r3, [r7, #20]
 802a01e:	69db      	ldr	r3, [r3, #28]
 802a020:	4313      	orrs	r3, r2
 802a022:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802a024:	697b      	ldr	r3, [r7, #20]
 802a026:	681b      	ldr	r3, [r3, #0]
 802a028:	681a      	ldr	r2, [r3, #0]
 802a02a:	4bbe      	ldr	r3, [pc, #760]	; (802a324 <UART_SetConfig+0x328>)
 802a02c:	4013      	ands	r3, r2
 802a02e:	697a      	ldr	r2, [r7, #20]
 802a030:	6812      	ldr	r2, [r2, #0]
 802a032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802a034:	430b      	orrs	r3, r1
 802a036:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802a038:	697b      	ldr	r3, [r7, #20]
 802a03a:	681b      	ldr	r3, [r3, #0]
 802a03c:	685b      	ldr	r3, [r3, #4]
 802a03e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802a042:	697b      	ldr	r3, [r7, #20]
 802a044:	68da      	ldr	r2, [r3, #12]
 802a046:	697b      	ldr	r3, [r7, #20]
 802a048:	681b      	ldr	r3, [r3, #0]
 802a04a:	430a      	orrs	r2, r1
 802a04c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802a04e:	697b      	ldr	r3, [r7, #20]
 802a050:	699b      	ldr	r3, [r3, #24]
 802a052:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 802a054:	697b      	ldr	r3, [r7, #20]
 802a056:	681b      	ldr	r3, [r3, #0]
 802a058:	4ab3      	ldr	r2, [pc, #716]	; (802a328 <UART_SetConfig+0x32c>)
 802a05a:	4293      	cmp	r3, r2
 802a05c:	d004      	beq.n	802a068 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802a05e:	697b      	ldr	r3, [r7, #20]
 802a060:	6a1b      	ldr	r3, [r3, #32]
 802a062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802a064:	4313      	orrs	r3, r2
 802a066:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 802a068:	697b      	ldr	r3, [r7, #20]
 802a06a:	681b      	ldr	r3, [r3, #0]
 802a06c:	689a      	ldr	r2, [r3, #8]
 802a06e:	4baf      	ldr	r3, [pc, #700]	; (802a32c <UART_SetConfig+0x330>)
 802a070:	4013      	ands	r3, r2
 802a072:	697a      	ldr	r2, [r7, #20]
 802a074:	6812      	ldr	r2, [r2, #0]
 802a076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802a078:	430b      	orrs	r3, r1
 802a07a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 802a07c:	697b      	ldr	r3, [r7, #20]
 802a07e:	681b      	ldr	r3, [r3, #0]
 802a080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a082:	f023 010f 	bic.w	r1, r3, #15
 802a086:	697b      	ldr	r3, [r7, #20]
 802a088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802a08a:	697b      	ldr	r3, [r7, #20]
 802a08c:	681b      	ldr	r3, [r3, #0]
 802a08e:	430a      	orrs	r2, r1
 802a090:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802a092:	697b      	ldr	r3, [r7, #20]
 802a094:	681b      	ldr	r3, [r3, #0]
 802a096:	4aa6      	ldr	r2, [pc, #664]	; (802a330 <UART_SetConfig+0x334>)
 802a098:	4293      	cmp	r3, r2
 802a09a:	d177      	bne.n	802a18c <UART_SetConfig+0x190>
 802a09c:	4ba5      	ldr	r3, [pc, #660]	; (802a334 <UART_SetConfig+0x338>)
 802a09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a0a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802a0a4:	2b28      	cmp	r3, #40	; 0x28
 802a0a6:	d86d      	bhi.n	802a184 <UART_SetConfig+0x188>
 802a0a8:	a201      	add	r2, pc, #4	; (adr r2, 802a0b0 <UART_SetConfig+0xb4>)
 802a0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a0ae:	bf00      	nop
 802a0b0:	0802a155 	.word	0x0802a155
 802a0b4:	0802a185 	.word	0x0802a185
 802a0b8:	0802a185 	.word	0x0802a185
 802a0bc:	0802a185 	.word	0x0802a185
 802a0c0:	0802a185 	.word	0x0802a185
 802a0c4:	0802a185 	.word	0x0802a185
 802a0c8:	0802a185 	.word	0x0802a185
 802a0cc:	0802a185 	.word	0x0802a185
 802a0d0:	0802a15d 	.word	0x0802a15d
 802a0d4:	0802a185 	.word	0x0802a185
 802a0d8:	0802a185 	.word	0x0802a185
 802a0dc:	0802a185 	.word	0x0802a185
 802a0e0:	0802a185 	.word	0x0802a185
 802a0e4:	0802a185 	.word	0x0802a185
 802a0e8:	0802a185 	.word	0x0802a185
 802a0ec:	0802a185 	.word	0x0802a185
 802a0f0:	0802a165 	.word	0x0802a165
 802a0f4:	0802a185 	.word	0x0802a185
 802a0f8:	0802a185 	.word	0x0802a185
 802a0fc:	0802a185 	.word	0x0802a185
 802a100:	0802a185 	.word	0x0802a185
 802a104:	0802a185 	.word	0x0802a185
 802a108:	0802a185 	.word	0x0802a185
 802a10c:	0802a185 	.word	0x0802a185
 802a110:	0802a16d 	.word	0x0802a16d
 802a114:	0802a185 	.word	0x0802a185
 802a118:	0802a185 	.word	0x0802a185
 802a11c:	0802a185 	.word	0x0802a185
 802a120:	0802a185 	.word	0x0802a185
 802a124:	0802a185 	.word	0x0802a185
 802a128:	0802a185 	.word	0x0802a185
 802a12c:	0802a185 	.word	0x0802a185
 802a130:	0802a175 	.word	0x0802a175
 802a134:	0802a185 	.word	0x0802a185
 802a138:	0802a185 	.word	0x0802a185
 802a13c:	0802a185 	.word	0x0802a185
 802a140:	0802a185 	.word	0x0802a185
 802a144:	0802a185 	.word	0x0802a185
 802a148:	0802a185 	.word	0x0802a185
 802a14c:	0802a185 	.word	0x0802a185
 802a150:	0802a17d 	.word	0x0802a17d
 802a154:	2301      	movs	r3, #1
 802a156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a15a:	e326      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a15c:	2304      	movs	r3, #4
 802a15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a162:	e322      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a164:	2308      	movs	r3, #8
 802a166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a16a:	e31e      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a16c:	2310      	movs	r3, #16
 802a16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a172:	e31a      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a174:	2320      	movs	r3, #32
 802a176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a17a:	e316      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a17c:	2340      	movs	r3, #64	; 0x40
 802a17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a182:	e312      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a184:	2380      	movs	r3, #128	; 0x80
 802a186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a18a:	e30e      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a18c:	697b      	ldr	r3, [r7, #20]
 802a18e:	681b      	ldr	r3, [r3, #0]
 802a190:	4a69      	ldr	r2, [pc, #420]	; (802a338 <UART_SetConfig+0x33c>)
 802a192:	4293      	cmp	r3, r2
 802a194:	d130      	bne.n	802a1f8 <UART_SetConfig+0x1fc>
 802a196:	4b67      	ldr	r3, [pc, #412]	; (802a334 <UART_SetConfig+0x338>)
 802a198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a19a:	f003 0307 	and.w	r3, r3, #7
 802a19e:	2b05      	cmp	r3, #5
 802a1a0:	d826      	bhi.n	802a1f0 <UART_SetConfig+0x1f4>
 802a1a2:	a201      	add	r2, pc, #4	; (adr r2, 802a1a8 <UART_SetConfig+0x1ac>)
 802a1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a1a8:	0802a1c1 	.word	0x0802a1c1
 802a1ac:	0802a1c9 	.word	0x0802a1c9
 802a1b0:	0802a1d1 	.word	0x0802a1d1
 802a1b4:	0802a1d9 	.word	0x0802a1d9
 802a1b8:	0802a1e1 	.word	0x0802a1e1
 802a1bc:	0802a1e9 	.word	0x0802a1e9
 802a1c0:	2300      	movs	r3, #0
 802a1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a1c6:	e2f0      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a1c8:	2304      	movs	r3, #4
 802a1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a1ce:	e2ec      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a1d0:	2308      	movs	r3, #8
 802a1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a1d6:	e2e8      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a1d8:	2310      	movs	r3, #16
 802a1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a1de:	e2e4      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a1e0:	2320      	movs	r3, #32
 802a1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a1e6:	e2e0      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a1e8:	2340      	movs	r3, #64	; 0x40
 802a1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a1ee:	e2dc      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a1f0:	2380      	movs	r3, #128	; 0x80
 802a1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a1f6:	e2d8      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a1f8:	697b      	ldr	r3, [r7, #20]
 802a1fa:	681b      	ldr	r3, [r3, #0]
 802a1fc:	4a4f      	ldr	r2, [pc, #316]	; (802a33c <UART_SetConfig+0x340>)
 802a1fe:	4293      	cmp	r3, r2
 802a200:	d130      	bne.n	802a264 <UART_SetConfig+0x268>
 802a202:	4b4c      	ldr	r3, [pc, #304]	; (802a334 <UART_SetConfig+0x338>)
 802a204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a206:	f003 0307 	and.w	r3, r3, #7
 802a20a:	2b05      	cmp	r3, #5
 802a20c:	d826      	bhi.n	802a25c <UART_SetConfig+0x260>
 802a20e:	a201      	add	r2, pc, #4	; (adr r2, 802a214 <UART_SetConfig+0x218>)
 802a210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a214:	0802a22d 	.word	0x0802a22d
 802a218:	0802a235 	.word	0x0802a235
 802a21c:	0802a23d 	.word	0x0802a23d
 802a220:	0802a245 	.word	0x0802a245
 802a224:	0802a24d 	.word	0x0802a24d
 802a228:	0802a255 	.word	0x0802a255
 802a22c:	2300      	movs	r3, #0
 802a22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a232:	e2ba      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a234:	2304      	movs	r3, #4
 802a236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a23a:	e2b6      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a23c:	2308      	movs	r3, #8
 802a23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a242:	e2b2      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a244:	2310      	movs	r3, #16
 802a246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a24a:	e2ae      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a24c:	2320      	movs	r3, #32
 802a24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a252:	e2aa      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a254:	2340      	movs	r3, #64	; 0x40
 802a256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a25a:	e2a6      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a25c:	2380      	movs	r3, #128	; 0x80
 802a25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a262:	e2a2      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a264:	697b      	ldr	r3, [r7, #20]
 802a266:	681b      	ldr	r3, [r3, #0]
 802a268:	4a35      	ldr	r2, [pc, #212]	; (802a340 <UART_SetConfig+0x344>)
 802a26a:	4293      	cmp	r3, r2
 802a26c:	d130      	bne.n	802a2d0 <UART_SetConfig+0x2d4>
 802a26e:	4b31      	ldr	r3, [pc, #196]	; (802a334 <UART_SetConfig+0x338>)
 802a270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a272:	f003 0307 	and.w	r3, r3, #7
 802a276:	2b05      	cmp	r3, #5
 802a278:	d826      	bhi.n	802a2c8 <UART_SetConfig+0x2cc>
 802a27a:	a201      	add	r2, pc, #4	; (adr r2, 802a280 <UART_SetConfig+0x284>)
 802a27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a280:	0802a299 	.word	0x0802a299
 802a284:	0802a2a1 	.word	0x0802a2a1
 802a288:	0802a2a9 	.word	0x0802a2a9
 802a28c:	0802a2b1 	.word	0x0802a2b1
 802a290:	0802a2b9 	.word	0x0802a2b9
 802a294:	0802a2c1 	.word	0x0802a2c1
 802a298:	2300      	movs	r3, #0
 802a29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a29e:	e284      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a2a0:	2304      	movs	r3, #4
 802a2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a2a6:	e280      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a2a8:	2308      	movs	r3, #8
 802a2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a2ae:	e27c      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a2b0:	2310      	movs	r3, #16
 802a2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a2b6:	e278      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a2b8:	2320      	movs	r3, #32
 802a2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a2be:	e274      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a2c0:	2340      	movs	r3, #64	; 0x40
 802a2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a2c6:	e270      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a2c8:	2380      	movs	r3, #128	; 0x80
 802a2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a2ce:	e26c      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a2d0:	697b      	ldr	r3, [r7, #20]
 802a2d2:	681b      	ldr	r3, [r3, #0]
 802a2d4:	4a1b      	ldr	r2, [pc, #108]	; (802a344 <UART_SetConfig+0x348>)
 802a2d6:	4293      	cmp	r3, r2
 802a2d8:	d142      	bne.n	802a360 <UART_SetConfig+0x364>
 802a2da:	4b16      	ldr	r3, [pc, #88]	; (802a334 <UART_SetConfig+0x338>)
 802a2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a2de:	f003 0307 	and.w	r3, r3, #7
 802a2e2:	2b05      	cmp	r3, #5
 802a2e4:	d838      	bhi.n	802a358 <UART_SetConfig+0x35c>
 802a2e6:	a201      	add	r2, pc, #4	; (adr r2, 802a2ec <UART_SetConfig+0x2f0>)
 802a2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a2ec:	0802a305 	.word	0x0802a305
 802a2f0:	0802a30d 	.word	0x0802a30d
 802a2f4:	0802a315 	.word	0x0802a315
 802a2f8:	0802a31d 	.word	0x0802a31d
 802a2fc:	0802a349 	.word	0x0802a349
 802a300:	0802a351 	.word	0x0802a351
 802a304:	2300      	movs	r3, #0
 802a306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a30a:	e24e      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a30c:	2304      	movs	r3, #4
 802a30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a312:	e24a      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a314:	2308      	movs	r3, #8
 802a316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a31a:	e246      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a31c:	2310      	movs	r3, #16
 802a31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a322:	e242      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a324:	cfff69f3 	.word	0xcfff69f3
 802a328:	58000c00 	.word	0x58000c00
 802a32c:	11fff4ff 	.word	0x11fff4ff
 802a330:	40011000 	.word	0x40011000
 802a334:	58024400 	.word	0x58024400
 802a338:	40004400 	.word	0x40004400
 802a33c:	40004800 	.word	0x40004800
 802a340:	40004c00 	.word	0x40004c00
 802a344:	40005000 	.word	0x40005000
 802a348:	2320      	movs	r3, #32
 802a34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a34e:	e22c      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a350:	2340      	movs	r3, #64	; 0x40
 802a352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a356:	e228      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a358:	2380      	movs	r3, #128	; 0x80
 802a35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a35e:	e224      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a360:	697b      	ldr	r3, [r7, #20]
 802a362:	681b      	ldr	r3, [r3, #0]
 802a364:	4ab1      	ldr	r2, [pc, #708]	; (802a62c <UART_SetConfig+0x630>)
 802a366:	4293      	cmp	r3, r2
 802a368:	d176      	bne.n	802a458 <UART_SetConfig+0x45c>
 802a36a:	4bb1      	ldr	r3, [pc, #708]	; (802a630 <UART_SetConfig+0x634>)
 802a36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a36e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802a372:	2b28      	cmp	r3, #40	; 0x28
 802a374:	d86c      	bhi.n	802a450 <UART_SetConfig+0x454>
 802a376:	a201      	add	r2, pc, #4	; (adr r2, 802a37c <UART_SetConfig+0x380>)
 802a378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a37c:	0802a421 	.word	0x0802a421
 802a380:	0802a451 	.word	0x0802a451
 802a384:	0802a451 	.word	0x0802a451
 802a388:	0802a451 	.word	0x0802a451
 802a38c:	0802a451 	.word	0x0802a451
 802a390:	0802a451 	.word	0x0802a451
 802a394:	0802a451 	.word	0x0802a451
 802a398:	0802a451 	.word	0x0802a451
 802a39c:	0802a429 	.word	0x0802a429
 802a3a0:	0802a451 	.word	0x0802a451
 802a3a4:	0802a451 	.word	0x0802a451
 802a3a8:	0802a451 	.word	0x0802a451
 802a3ac:	0802a451 	.word	0x0802a451
 802a3b0:	0802a451 	.word	0x0802a451
 802a3b4:	0802a451 	.word	0x0802a451
 802a3b8:	0802a451 	.word	0x0802a451
 802a3bc:	0802a431 	.word	0x0802a431
 802a3c0:	0802a451 	.word	0x0802a451
 802a3c4:	0802a451 	.word	0x0802a451
 802a3c8:	0802a451 	.word	0x0802a451
 802a3cc:	0802a451 	.word	0x0802a451
 802a3d0:	0802a451 	.word	0x0802a451
 802a3d4:	0802a451 	.word	0x0802a451
 802a3d8:	0802a451 	.word	0x0802a451
 802a3dc:	0802a439 	.word	0x0802a439
 802a3e0:	0802a451 	.word	0x0802a451
 802a3e4:	0802a451 	.word	0x0802a451
 802a3e8:	0802a451 	.word	0x0802a451
 802a3ec:	0802a451 	.word	0x0802a451
 802a3f0:	0802a451 	.word	0x0802a451
 802a3f4:	0802a451 	.word	0x0802a451
 802a3f8:	0802a451 	.word	0x0802a451
 802a3fc:	0802a441 	.word	0x0802a441
 802a400:	0802a451 	.word	0x0802a451
 802a404:	0802a451 	.word	0x0802a451
 802a408:	0802a451 	.word	0x0802a451
 802a40c:	0802a451 	.word	0x0802a451
 802a410:	0802a451 	.word	0x0802a451
 802a414:	0802a451 	.word	0x0802a451
 802a418:	0802a451 	.word	0x0802a451
 802a41c:	0802a449 	.word	0x0802a449
 802a420:	2301      	movs	r3, #1
 802a422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a426:	e1c0      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a428:	2304      	movs	r3, #4
 802a42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a42e:	e1bc      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a430:	2308      	movs	r3, #8
 802a432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a436:	e1b8      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a438:	2310      	movs	r3, #16
 802a43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a43e:	e1b4      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a440:	2320      	movs	r3, #32
 802a442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a446:	e1b0      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a448:	2340      	movs	r3, #64	; 0x40
 802a44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a44e:	e1ac      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a450:	2380      	movs	r3, #128	; 0x80
 802a452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a456:	e1a8      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a458:	697b      	ldr	r3, [r7, #20]
 802a45a:	681b      	ldr	r3, [r3, #0]
 802a45c:	4a75      	ldr	r2, [pc, #468]	; (802a634 <UART_SetConfig+0x638>)
 802a45e:	4293      	cmp	r3, r2
 802a460:	d130      	bne.n	802a4c4 <UART_SetConfig+0x4c8>
 802a462:	4b73      	ldr	r3, [pc, #460]	; (802a630 <UART_SetConfig+0x634>)
 802a464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a466:	f003 0307 	and.w	r3, r3, #7
 802a46a:	2b05      	cmp	r3, #5
 802a46c:	d826      	bhi.n	802a4bc <UART_SetConfig+0x4c0>
 802a46e:	a201      	add	r2, pc, #4	; (adr r2, 802a474 <UART_SetConfig+0x478>)
 802a470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a474:	0802a48d 	.word	0x0802a48d
 802a478:	0802a495 	.word	0x0802a495
 802a47c:	0802a49d 	.word	0x0802a49d
 802a480:	0802a4a5 	.word	0x0802a4a5
 802a484:	0802a4ad 	.word	0x0802a4ad
 802a488:	0802a4b5 	.word	0x0802a4b5
 802a48c:	2300      	movs	r3, #0
 802a48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a492:	e18a      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a494:	2304      	movs	r3, #4
 802a496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a49a:	e186      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a49c:	2308      	movs	r3, #8
 802a49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4a2:	e182      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a4a4:	2310      	movs	r3, #16
 802a4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4aa:	e17e      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a4ac:	2320      	movs	r3, #32
 802a4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4b2:	e17a      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a4b4:	2340      	movs	r3, #64	; 0x40
 802a4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4ba:	e176      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a4bc:	2380      	movs	r3, #128	; 0x80
 802a4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4c2:	e172      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a4c4:	697b      	ldr	r3, [r7, #20]
 802a4c6:	681b      	ldr	r3, [r3, #0]
 802a4c8:	4a5b      	ldr	r2, [pc, #364]	; (802a638 <UART_SetConfig+0x63c>)
 802a4ca:	4293      	cmp	r3, r2
 802a4cc:	d130      	bne.n	802a530 <UART_SetConfig+0x534>
 802a4ce:	4b58      	ldr	r3, [pc, #352]	; (802a630 <UART_SetConfig+0x634>)
 802a4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a4d2:	f003 0307 	and.w	r3, r3, #7
 802a4d6:	2b05      	cmp	r3, #5
 802a4d8:	d826      	bhi.n	802a528 <UART_SetConfig+0x52c>
 802a4da:	a201      	add	r2, pc, #4	; (adr r2, 802a4e0 <UART_SetConfig+0x4e4>)
 802a4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a4e0:	0802a4f9 	.word	0x0802a4f9
 802a4e4:	0802a501 	.word	0x0802a501
 802a4e8:	0802a509 	.word	0x0802a509
 802a4ec:	0802a511 	.word	0x0802a511
 802a4f0:	0802a519 	.word	0x0802a519
 802a4f4:	0802a521 	.word	0x0802a521
 802a4f8:	2300      	movs	r3, #0
 802a4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a4fe:	e154      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a500:	2304      	movs	r3, #4
 802a502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a506:	e150      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a508:	2308      	movs	r3, #8
 802a50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a50e:	e14c      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a510:	2310      	movs	r3, #16
 802a512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a516:	e148      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a518:	2320      	movs	r3, #32
 802a51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a51e:	e144      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a520:	2340      	movs	r3, #64	; 0x40
 802a522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a526:	e140      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a528:	2380      	movs	r3, #128	; 0x80
 802a52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a52e:	e13c      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a530:	697b      	ldr	r3, [r7, #20]
 802a532:	681b      	ldr	r3, [r3, #0]
 802a534:	4a41      	ldr	r2, [pc, #260]	; (802a63c <UART_SetConfig+0x640>)
 802a536:	4293      	cmp	r3, r2
 802a538:	f040 8082 	bne.w	802a640 <UART_SetConfig+0x644>
 802a53c:	4b3c      	ldr	r3, [pc, #240]	; (802a630 <UART_SetConfig+0x634>)
 802a53e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a540:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802a544:	2b28      	cmp	r3, #40	; 0x28
 802a546:	d86d      	bhi.n	802a624 <UART_SetConfig+0x628>
 802a548:	a201      	add	r2, pc, #4	; (adr r2, 802a550 <UART_SetConfig+0x554>)
 802a54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a54e:	bf00      	nop
 802a550:	0802a5f5 	.word	0x0802a5f5
 802a554:	0802a625 	.word	0x0802a625
 802a558:	0802a625 	.word	0x0802a625
 802a55c:	0802a625 	.word	0x0802a625
 802a560:	0802a625 	.word	0x0802a625
 802a564:	0802a625 	.word	0x0802a625
 802a568:	0802a625 	.word	0x0802a625
 802a56c:	0802a625 	.word	0x0802a625
 802a570:	0802a5fd 	.word	0x0802a5fd
 802a574:	0802a625 	.word	0x0802a625
 802a578:	0802a625 	.word	0x0802a625
 802a57c:	0802a625 	.word	0x0802a625
 802a580:	0802a625 	.word	0x0802a625
 802a584:	0802a625 	.word	0x0802a625
 802a588:	0802a625 	.word	0x0802a625
 802a58c:	0802a625 	.word	0x0802a625
 802a590:	0802a605 	.word	0x0802a605
 802a594:	0802a625 	.word	0x0802a625
 802a598:	0802a625 	.word	0x0802a625
 802a59c:	0802a625 	.word	0x0802a625
 802a5a0:	0802a625 	.word	0x0802a625
 802a5a4:	0802a625 	.word	0x0802a625
 802a5a8:	0802a625 	.word	0x0802a625
 802a5ac:	0802a625 	.word	0x0802a625
 802a5b0:	0802a60d 	.word	0x0802a60d
 802a5b4:	0802a625 	.word	0x0802a625
 802a5b8:	0802a625 	.word	0x0802a625
 802a5bc:	0802a625 	.word	0x0802a625
 802a5c0:	0802a625 	.word	0x0802a625
 802a5c4:	0802a625 	.word	0x0802a625
 802a5c8:	0802a625 	.word	0x0802a625
 802a5cc:	0802a625 	.word	0x0802a625
 802a5d0:	0802a615 	.word	0x0802a615
 802a5d4:	0802a625 	.word	0x0802a625
 802a5d8:	0802a625 	.word	0x0802a625
 802a5dc:	0802a625 	.word	0x0802a625
 802a5e0:	0802a625 	.word	0x0802a625
 802a5e4:	0802a625 	.word	0x0802a625
 802a5e8:	0802a625 	.word	0x0802a625
 802a5ec:	0802a625 	.word	0x0802a625
 802a5f0:	0802a61d 	.word	0x0802a61d
 802a5f4:	2301      	movs	r3, #1
 802a5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a5fa:	e0d6      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a5fc:	2304      	movs	r3, #4
 802a5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a602:	e0d2      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a604:	2308      	movs	r3, #8
 802a606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a60a:	e0ce      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a60c:	2310      	movs	r3, #16
 802a60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a612:	e0ca      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a614:	2320      	movs	r3, #32
 802a616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a61a:	e0c6      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a61c:	2340      	movs	r3, #64	; 0x40
 802a61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a622:	e0c2      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a624:	2380      	movs	r3, #128	; 0x80
 802a626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a62a:	e0be      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a62c:	40011400 	.word	0x40011400
 802a630:	58024400 	.word	0x58024400
 802a634:	40007800 	.word	0x40007800
 802a638:	40007c00 	.word	0x40007c00
 802a63c:	40011800 	.word	0x40011800
 802a640:	697b      	ldr	r3, [r7, #20]
 802a642:	681b      	ldr	r3, [r3, #0]
 802a644:	4aad      	ldr	r2, [pc, #692]	; (802a8fc <UART_SetConfig+0x900>)
 802a646:	4293      	cmp	r3, r2
 802a648:	d176      	bne.n	802a738 <UART_SetConfig+0x73c>
 802a64a:	4bad      	ldr	r3, [pc, #692]	; (802a900 <UART_SetConfig+0x904>)
 802a64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802a64e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802a652:	2b28      	cmp	r3, #40	; 0x28
 802a654:	d86c      	bhi.n	802a730 <UART_SetConfig+0x734>
 802a656:	a201      	add	r2, pc, #4	; (adr r2, 802a65c <UART_SetConfig+0x660>)
 802a658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a65c:	0802a701 	.word	0x0802a701
 802a660:	0802a731 	.word	0x0802a731
 802a664:	0802a731 	.word	0x0802a731
 802a668:	0802a731 	.word	0x0802a731
 802a66c:	0802a731 	.word	0x0802a731
 802a670:	0802a731 	.word	0x0802a731
 802a674:	0802a731 	.word	0x0802a731
 802a678:	0802a731 	.word	0x0802a731
 802a67c:	0802a709 	.word	0x0802a709
 802a680:	0802a731 	.word	0x0802a731
 802a684:	0802a731 	.word	0x0802a731
 802a688:	0802a731 	.word	0x0802a731
 802a68c:	0802a731 	.word	0x0802a731
 802a690:	0802a731 	.word	0x0802a731
 802a694:	0802a731 	.word	0x0802a731
 802a698:	0802a731 	.word	0x0802a731
 802a69c:	0802a711 	.word	0x0802a711
 802a6a0:	0802a731 	.word	0x0802a731
 802a6a4:	0802a731 	.word	0x0802a731
 802a6a8:	0802a731 	.word	0x0802a731
 802a6ac:	0802a731 	.word	0x0802a731
 802a6b0:	0802a731 	.word	0x0802a731
 802a6b4:	0802a731 	.word	0x0802a731
 802a6b8:	0802a731 	.word	0x0802a731
 802a6bc:	0802a719 	.word	0x0802a719
 802a6c0:	0802a731 	.word	0x0802a731
 802a6c4:	0802a731 	.word	0x0802a731
 802a6c8:	0802a731 	.word	0x0802a731
 802a6cc:	0802a731 	.word	0x0802a731
 802a6d0:	0802a731 	.word	0x0802a731
 802a6d4:	0802a731 	.word	0x0802a731
 802a6d8:	0802a731 	.word	0x0802a731
 802a6dc:	0802a721 	.word	0x0802a721
 802a6e0:	0802a731 	.word	0x0802a731
 802a6e4:	0802a731 	.word	0x0802a731
 802a6e8:	0802a731 	.word	0x0802a731
 802a6ec:	0802a731 	.word	0x0802a731
 802a6f0:	0802a731 	.word	0x0802a731
 802a6f4:	0802a731 	.word	0x0802a731
 802a6f8:	0802a731 	.word	0x0802a731
 802a6fc:	0802a729 	.word	0x0802a729
 802a700:	2301      	movs	r3, #1
 802a702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a706:	e050      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a708:	2304      	movs	r3, #4
 802a70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a70e:	e04c      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a710:	2308      	movs	r3, #8
 802a712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a716:	e048      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a718:	2310      	movs	r3, #16
 802a71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a71e:	e044      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a720:	2320      	movs	r3, #32
 802a722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a726:	e040      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a728:	2340      	movs	r3, #64	; 0x40
 802a72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a72e:	e03c      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a730:	2380      	movs	r3, #128	; 0x80
 802a732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a736:	e038      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a738:	697b      	ldr	r3, [r7, #20]
 802a73a:	681b      	ldr	r3, [r3, #0]
 802a73c:	4a71      	ldr	r2, [pc, #452]	; (802a904 <UART_SetConfig+0x908>)
 802a73e:	4293      	cmp	r3, r2
 802a740:	d130      	bne.n	802a7a4 <UART_SetConfig+0x7a8>
 802a742:	4b6f      	ldr	r3, [pc, #444]	; (802a900 <UART_SetConfig+0x904>)
 802a744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802a746:	f003 0307 	and.w	r3, r3, #7
 802a74a:	2b05      	cmp	r3, #5
 802a74c:	d826      	bhi.n	802a79c <UART_SetConfig+0x7a0>
 802a74e:	a201      	add	r2, pc, #4	; (adr r2, 802a754 <UART_SetConfig+0x758>)
 802a750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a754:	0802a76d 	.word	0x0802a76d
 802a758:	0802a775 	.word	0x0802a775
 802a75c:	0802a77d 	.word	0x0802a77d
 802a760:	0802a785 	.word	0x0802a785
 802a764:	0802a78d 	.word	0x0802a78d
 802a768:	0802a795 	.word	0x0802a795
 802a76c:	2302      	movs	r3, #2
 802a76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a772:	e01a      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a774:	2304      	movs	r3, #4
 802a776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a77a:	e016      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a77c:	2308      	movs	r3, #8
 802a77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a782:	e012      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a784:	2310      	movs	r3, #16
 802a786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a78a:	e00e      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a78c:	2320      	movs	r3, #32
 802a78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a792:	e00a      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a794:	2340      	movs	r3, #64	; 0x40
 802a796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a79a:	e006      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a79c:	2380      	movs	r3, #128	; 0x80
 802a79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802a7a2:	e002      	b.n	802a7aa <UART_SetConfig+0x7ae>
 802a7a4:	2380      	movs	r3, #128	; 0x80
 802a7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802a7aa:	697b      	ldr	r3, [r7, #20]
 802a7ac:	681b      	ldr	r3, [r3, #0]
 802a7ae:	4a55      	ldr	r2, [pc, #340]	; (802a904 <UART_SetConfig+0x908>)
 802a7b0:	4293      	cmp	r3, r2
 802a7b2:	f040 80f8 	bne.w	802a9a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 802a7b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802a7ba:	2b20      	cmp	r3, #32
 802a7bc:	dc46      	bgt.n	802a84c <UART_SetConfig+0x850>
 802a7be:	2b02      	cmp	r3, #2
 802a7c0:	db75      	blt.n	802a8ae <UART_SetConfig+0x8b2>
 802a7c2:	3b02      	subs	r3, #2
 802a7c4:	2b1e      	cmp	r3, #30
 802a7c6:	d872      	bhi.n	802a8ae <UART_SetConfig+0x8b2>
 802a7c8:	a201      	add	r2, pc, #4	; (adr r2, 802a7d0 <UART_SetConfig+0x7d4>)
 802a7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a7ce:	bf00      	nop
 802a7d0:	0802a853 	.word	0x0802a853
 802a7d4:	0802a8af 	.word	0x0802a8af
 802a7d8:	0802a85b 	.word	0x0802a85b
 802a7dc:	0802a8af 	.word	0x0802a8af
 802a7e0:	0802a8af 	.word	0x0802a8af
 802a7e4:	0802a8af 	.word	0x0802a8af
 802a7e8:	0802a86b 	.word	0x0802a86b
 802a7ec:	0802a8af 	.word	0x0802a8af
 802a7f0:	0802a8af 	.word	0x0802a8af
 802a7f4:	0802a8af 	.word	0x0802a8af
 802a7f8:	0802a8af 	.word	0x0802a8af
 802a7fc:	0802a8af 	.word	0x0802a8af
 802a800:	0802a8af 	.word	0x0802a8af
 802a804:	0802a8af 	.word	0x0802a8af
 802a808:	0802a87b 	.word	0x0802a87b
 802a80c:	0802a8af 	.word	0x0802a8af
 802a810:	0802a8af 	.word	0x0802a8af
 802a814:	0802a8af 	.word	0x0802a8af
 802a818:	0802a8af 	.word	0x0802a8af
 802a81c:	0802a8af 	.word	0x0802a8af
 802a820:	0802a8af 	.word	0x0802a8af
 802a824:	0802a8af 	.word	0x0802a8af
 802a828:	0802a8af 	.word	0x0802a8af
 802a82c:	0802a8af 	.word	0x0802a8af
 802a830:	0802a8af 	.word	0x0802a8af
 802a834:	0802a8af 	.word	0x0802a8af
 802a838:	0802a8af 	.word	0x0802a8af
 802a83c:	0802a8af 	.word	0x0802a8af
 802a840:	0802a8af 	.word	0x0802a8af
 802a844:	0802a8af 	.word	0x0802a8af
 802a848:	0802a8a1 	.word	0x0802a8a1
 802a84c:	2b40      	cmp	r3, #64	; 0x40
 802a84e:	d02a      	beq.n	802a8a6 <UART_SetConfig+0x8aa>
 802a850:	e02d      	b.n	802a8ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 802a852:	f7fe f815 	bl	8028880 <HAL_RCCEx_GetD3PCLK1Freq>
 802a856:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802a858:	e02f      	b.n	802a8ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802a85a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a85e:	4618      	mov	r0, r3
 802a860:	f7fe f824 	bl	80288ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802a864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802a868:	e027      	b.n	802a8ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802a86a:	f107 0318 	add.w	r3, r7, #24
 802a86e:	4618      	mov	r0, r3
 802a870:	f7fe f970 	bl	8028b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802a874:	69fb      	ldr	r3, [r7, #28]
 802a876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802a878:	e01f      	b.n	802a8ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802a87a:	4b21      	ldr	r3, [pc, #132]	; (802a900 <UART_SetConfig+0x904>)
 802a87c:	681b      	ldr	r3, [r3, #0]
 802a87e:	f003 0320 	and.w	r3, r3, #32
 802a882:	2b00      	cmp	r3, #0
 802a884:	d009      	beq.n	802a89a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802a886:	4b1e      	ldr	r3, [pc, #120]	; (802a900 <UART_SetConfig+0x904>)
 802a888:	681b      	ldr	r3, [r3, #0]
 802a88a:	08db      	lsrs	r3, r3, #3
 802a88c:	f003 0303 	and.w	r3, r3, #3
 802a890:	4a1d      	ldr	r2, [pc, #116]	; (802a908 <UART_SetConfig+0x90c>)
 802a892:	fa22 f303 	lsr.w	r3, r2, r3
 802a896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802a898:	e00f      	b.n	802a8ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 802a89a:	4b1b      	ldr	r3, [pc, #108]	; (802a908 <UART_SetConfig+0x90c>)
 802a89c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802a89e:	e00c      	b.n	802a8ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802a8a0:	4b1a      	ldr	r3, [pc, #104]	; (802a90c <UART_SetConfig+0x910>)
 802a8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802a8a4:	e009      	b.n	802a8ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802a8a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802a8ac:	e005      	b.n	802a8ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 802a8ae:	2300      	movs	r3, #0
 802a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802a8b2:	2301      	movs	r3, #1
 802a8b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802a8b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 802a8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a8bc:	2b00      	cmp	r3, #0
 802a8be:	f000 81ee 	beq.w	802ac9e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 802a8c2:	697b      	ldr	r3, [r7, #20]
 802a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a8c6:	4a12      	ldr	r2, [pc, #72]	; (802a910 <UART_SetConfig+0x914>)
 802a8c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802a8cc:	461a      	mov	r2, r3
 802a8ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a8d0:	fbb3 f3f2 	udiv	r3, r3, r2
 802a8d4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802a8d6:	697b      	ldr	r3, [r7, #20]
 802a8d8:	685a      	ldr	r2, [r3, #4]
 802a8da:	4613      	mov	r3, r2
 802a8dc:	005b      	lsls	r3, r3, #1
 802a8de:	4413      	add	r3, r2
 802a8e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802a8e2:	429a      	cmp	r2, r3
 802a8e4:	d305      	bcc.n	802a8f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 802a8e6:	697b      	ldr	r3, [r7, #20]
 802a8e8:	685b      	ldr	r3, [r3, #4]
 802a8ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802a8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802a8ee:	429a      	cmp	r2, r3
 802a8f0:	d910      	bls.n	802a914 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 802a8f2:	2301      	movs	r3, #1
 802a8f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802a8f8:	e1d1      	b.n	802ac9e <UART_SetConfig+0xca2>
 802a8fa:	bf00      	nop
 802a8fc:	40011c00 	.word	0x40011c00
 802a900:	58024400 	.word	0x58024400
 802a904:	58000c00 	.word	0x58000c00
 802a908:	03d09000 	.word	0x03d09000
 802a90c:	003d0900 	.word	0x003d0900
 802a910:	0803b8a8 	.word	0x0803b8a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802a914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a916:	2200      	movs	r2, #0
 802a918:	60bb      	str	r3, [r7, #8]
 802a91a:	60fa      	str	r2, [r7, #12]
 802a91c:	697b      	ldr	r3, [r7, #20]
 802a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a920:	4ac0      	ldr	r2, [pc, #768]	; (802ac24 <UART_SetConfig+0xc28>)
 802a922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802a926:	b29b      	uxth	r3, r3
 802a928:	2200      	movs	r2, #0
 802a92a:	603b      	str	r3, [r7, #0]
 802a92c:	607a      	str	r2, [r7, #4]
 802a92e:	e9d7 2300 	ldrd	r2, r3, [r7]
 802a932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802a936:	f7f5 fd53 	bl	80203e0 <__aeabi_uldivmod>
 802a93a:	4602      	mov	r2, r0
 802a93c:	460b      	mov	r3, r1
 802a93e:	4610      	mov	r0, r2
 802a940:	4619      	mov	r1, r3
 802a942:	f04f 0200 	mov.w	r2, #0
 802a946:	f04f 0300 	mov.w	r3, #0
 802a94a:	020b      	lsls	r3, r1, #8
 802a94c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802a950:	0202      	lsls	r2, r0, #8
 802a952:	6979      	ldr	r1, [r7, #20]
 802a954:	6849      	ldr	r1, [r1, #4]
 802a956:	0849      	lsrs	r1, r1, #1
 802a958:	2000      	movs	r0, #0
 802a95a:	460c      	mov	r4, r1
 802a95c:	4605      	mov	r5, r0
 802a95e:	eb12 0804 	adds.w	r8, r2, r4
 802a962:	eb43 0905 	adc.w	r9, r3, r5
 802a966:	697b      	ldr	r3, [r7, #20]
 802a968:	685b      	ldr	r3, [r3, #4]
 802a96a:	2200      	movs	r2, #0
 802a96c:	469a      	mov	sl, r3
 802a96e:	4693      	mov	fp, r2
 802a970:	4652      	mov	r2, sl
 802a972:	465b      	mov	r3, fp
 802a974:	4640      	mov	r0, r8
 802a976:	4649      	mov	r1, r9
 802a978:	f7f5 fd32 	bl	80203e0 <__aeabi_uldivmod>
 802a97c:	4602      	mov	r2, r0
 802a97e:	460b      	mov	r3, r1
 802a980:	4613      	mov	r3, r2
 802a982:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 802a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802a98a:	d308      	bcc.n	802a99e <UART_SetConfig+0x9a2>
 802a98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a98e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802a992:	d204      	bcs.n	802a99e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 802a994:	697b      	ldr	r3, [r7, #20]
 802a996:	681b      	ldr	r3, [r3, #0]
 802a998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802a99a:	60da      	str	r2, [r3, #12]
 802a99c:	e17f      	b.n	802ac9e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 802a99e:	2301      	movs	r3, #1
 802a9a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802a9a4:	e17b      	b.n	802ac9e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802a9a6:	697b      	ldr	r3, [r7, #20]
 802a9a8:	69db      	ldr	r3, [r3, #28]
 802a9aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802a9ae:	f040 80bd 	bne.w	802ab2c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 802a9b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802a9b6:	2b20      	cmp	r3, #32
 802a9b8:	dc48      	bgt.n	802aa4c <UART_SetConfig+0xa50>
 802a9ba:	2b00      	cmp	r3, #0
 802a9bc:	db7b      	blt.n	802aab6 <UART_SetConfig+0xaba>
 802a9be:	2b20      	cmp	r3, #32
 802a9c0:	d879      	bhi.n	802aab6 <UART_SetConfig+0xaba>
 802a9c2:	a201      	add	r2, pc, #4	; (adr r2, 802a9c8 <UART_SetConfig+0x9cc>)
 802a9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a9c8:	0802aa53 	.word	0x0802aa53
 802a9cc:	0802aa5b 	.word	0x0802aa5b
 802a9d0:	0802aab7 	.word	0x0802aab7
 802a9d4:	0802aab7 	.word	0x0802aab7
 802a9d8:	0802aa63 	.word	0x0802aa63
 802a9dc:	0802aab7 	.word	0x0802aab7
 802a9e0:	0802aab7 	.word	0x0802aab7
 802a9e4:	0802aab7 	.word	0x0802aab7
 802a9e8:	0802aa73 	.word	0x0802aa73
 802a9ec:	0802aab7 	.word	0x0802aab7
 802a9f0:	0802aab7 	.word	0x0802aab7
 802a9f4:	0802aab7 	.word	0x0802aab7
 802a9f8:	0802aab7 	.word	0x0802aab7
 802a9fc:	0802aab7 	.word	0x0802aab7
 802aa00:	0802aab7 	.word	0x0802aab7
 802aa04:	0802aab7 	.word	0x0802aab7
 802aa08:	0802aa83 	.word	0x0802aa83
 802aa0c:	0802aab7 	.word	0x0802aab7
 802aa10:	0802aab7 	.word	0x0802aab7
 802aa14:	0802aab7 	.word	0x0802aab7
 802aa18:	0802aab7 	.word	0x0802aab7
 802aa1c:	0802aab7 	.word	0x0802aab7
 802aa20:	0802aab7 	.word	0x0802aab7
 802aa24:	0802aab7 	.word	0x0802aab7
 802aa28:	0802aab7 	.word	0x0802aab7
 802aa2c:	0802aab7 	.word	0x0802aab7
 802aa30:	0802aab7 	.word	0x0802aab7
 802aa34:	0802aab7 	.word	0x0802aab7
 802aa38:	0802aab7 	.word	0x0802aab7
 802aa3c:	0802aab7 	.word	0x0802aab7
 802aa40:	0802aab7 	.word	0x0802aab7
 802aa44:	0802aab7 	.word	0x0802aab7
 802aa48:	0802aaa9 	.word	0x0802aaa9
 802aa4c:	2b40      	cmp	r3, #64	; 0x40
 802aa4e:	d02e      	beq.n	802aaae <UART_SetConfig+0xab2>
 802aa50:	e031      	b.n	802aab6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802aa52:	f7fc ffad 	bl	80279b0 <HAL_RCC_GetPCLK1Freq>
 802aa56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802aa58:	e033      	b.n	802aac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802aa5a:	f7fc ffbf 	bl	80279dc <HAL_RCC_GetPCLK2Freq>
 802aa5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802aa60:	e02f      	b.n	802aac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802aa62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802aa66:	4618      	mov	r0, r3
 802aa68:	f7fd ff20 	bl	80288ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802aa70:	e027      	b.n	802aac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802aa72:	f107 0318 	add.w	r3, r7, #24
 802aa76:	4618      	mov	r0, r3
 802aa78:	f7fe f86c 	bl	8028b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802aa7c:	69fb      	ldr	r3, [r7, #28]
 802aa7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802aa80:	e01f      	b.n	802aac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802aa82:	4b69      	ldr	r3, [pc, #420]	; (802ac28 <UART_SetConfig+0xc2c>)
 802aa84:	681b      	ldr	r3, [r3, #0]
 802aa86:	f003 0320 	and.w	r3, r3, #32
 802aa8a:	2b00      	cmp	r3, #0
 802aa8c:	d009      	beq.n	802aaa2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802aa8e:	4b66      	ldr	r3, [pc, #408]	; (802ac28 <UART_SetConfig+0xc2c>)
 802aa90:	681b      	ldr	r3, [r3, #0]
 802aa92:	08db      	lsrs	r3, r3, #3
 802aa94:	f003 0303 	and.w	r3, r3, #3
 802aa98:	4a64      	ldr	r2, [pc, #400]	; (802ac2c <UART_SetConfig+0xc30>)
 802aa9a:	fa22 f303 	lsr.w	r3, r2, r3
 802aa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802aaa0:	e00f      	b.n	802aac2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 802aaa2:	4b62      	ldr	r3, [pc, #392]	; (802ac2c <UART_SetConfig+0xc30>)
 802aaa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802aaa6:	e00c      	b.n	802aac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802aaa8:	4b61      	ldr	r3, [pc, #388]	; (802ac30 <UART_SetConfig+0xc34>)
 802aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802aaac:	e009      	b.n	802aac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802aaae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802aab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802aab4:	e005      	b.n	802aac2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 802aab6:	2300      	movs	r3, #0
 802aab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802aaba:	2301      	movs	r3, #1
 802aabc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802aac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 802aac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802aac4:	2b00      	cmp	r3, #0
 802aac6:	f000 80ea 	beq.w	802ac9e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802aaca:	697b      	ldr	r3, [r7, #20]
 802aacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802aace:	4a55      	ldr	r2, [pc, #340]	; (802ac24 <UART_SetConfig+0xc28>)
 802aad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802aad4:	461a      	mov	r2, r3
 802aad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802aad8:	fbb3 f3f2 	udiv	r3, r3, r2
 802aadc:	005a      	lsls	r2, r3, #1
 802aade:	697b      	ldr	r3, [r7, #20]
 802aae0:	685b      	ldr	r3, [r3, #4]
 802aae2:	085b      	lsrs	r3, r3, #1
 802aae4:	441a      	add	r2, r3
 802aae6:	697b      	ldr	r3, [r7, #20]
 802aae8:	685b      	ldr	r3, [r3, #4]
 802aaea:	fbb2 f3f3 	udiv	r3, r2, r3
 802aaee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802aaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802aaf2:	2b0f      	cmp	r3, #15
 802aaf4:	d916      	bls.n	802ab24 <UART_SetConfig+0xb28>
 802aaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802aaf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802aafc:	d212      	bcs.n	802ab24 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802aafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ab00:	b29b      	uxth	r3, r3
 802ab02:	f023 030f 	bic.w	r3, r3, #15
 802ab06:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802ab08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ab0a:	085b      	lsrs	r3, r3, #1
 802ab0c:	b29b      	uxth	r3, r3
 802ab0e:	f003 0307 	and.w	r3, r3, #7
 802ab12:	b29a      	uxth	r2, r3
 802ab14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802ab16:	4313      	orrs	r3, r2
 802ab18:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 802ab1a:	697b      	ldr	r3, [r7, #20]
 802ab1c:	681b      	ldr	r3, [r3, #0]
 802ab1e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802ab20:	60da      	str	r2, [r3, #12]
 802ab22:	e0bc      	b.n	802ac9e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 802ab24:	2301      	movs	r3, #1
 802ab26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802ab2a:	e0b8      	b.n	802ac9e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 802ab2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802ab30:	2b20      	cmp	r3, #32
 802ab32:	dc4b      	bgt.n	802abcc <UART_SetConfig+0xbd0>
 802ab34:	2b00      	cmp	r3, #0
 802ab36:	f2c0 8087 	blt.w	802ac48 <UART_SetConfig+0xc4c>
 802ab3a:	2b20      	cmp	r3, #32
 802ab3c:	f200 8084 	bhi.w	802ac48 <UART_SetConfig+0xc4c>
 802ab40:	a201      	add	r2, pc, #4	; (adr r2, 802ab48 <UART_SetConfig+0xb4c>)
 802ab42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ab46:	bf00      	nop
 802ab48:	0802abd3 	.word	0x0802abd3
 802ab4c:	0802abdb 	.word	0x0802abdb
 802ab50:	0802ac49 	.word	0x0802ac49
 802ab54:	0802ac49 	.word	0x0802ac49
 802ab58:	0802abe3 	.word	0x0802abe3
 802ab5c:	0802ac49 	.word	0x0802ac49
 802ab60:	0802ac49 	.word	0x0802ac49
 802ab64:	0802ac49 	.word	0x0802ac49
 802ab68:	0802abf3 	.word	0x0802abf3
 802ab6c:	0802ac49 	.word	0x0802ac49
 802ab70:	0802ac49 	.word	0x0802ac49
 802ab74:	0802ac49 	.word	0x0802ac49
 802ab78:	0802ac49 	.word	0x0802ac49
 802ab7c:	0802ac49 	.word	0x0802ac49
 802ab80:	0802ac49 	.word	0x0802ac49
 802ab84:	0802ac49 	.word	0x0802ac49
 802ab88:	0802ac03 	.word	0x0802ac03
 802ab8c:	0802ac49 	.word	0x0802ac49
 802ab90:	0802ac49 	.word	0x0802ac49
 802ab94:	0802ac49 	.word	0x0802ac49
 802ab98:	0802ac49 	.word	0x0802ac49
 802ab9c:	0802ac49 	.word	0x0802ac49
 802aba0:	0802ac49 	.word	0x0802ac49
 802aba4:	0802ac49 	.word	0x0802ac49
 802aba8:	0802ac49 	.word	0x0802ac49
 802abac:	0802ac49 	.word	0x0802ac49
 802abb0:	0802ac49 	.word	0x0802ac49
 802abb4:	0802ac49 	.word	0x0802ac49
 802abb8:	0802ac49 	.word	0x0802ac49
 802abbc:	0802ac49 	.word	0x0802ac49
 802abc0:	0802ac49 	.word	0x0802ac49
 802abc4:	0802ac49 	.word	0x0802ac49
 802abc8:	0802ac3b 	.word	0x0802ac3b
 802abcc:	2b40      	cmp	r3, #64	; 0x40
 802abce:	d037      	beq.n	802ac40 <UART_SetConfig+0xc44>
 802abd0:	e03a      	b.n	802ac48 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802abd2:	f7fc feed 	bl	80279b0 <HAL_RCC_GetPCLK1Freq>
 802abd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802abd8:	e03c      	b.n	802ac54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802abda:	f7fc feff 	bl	80279dc <HAL_RCC_GetPCLK2Freq>
 802abde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802abe0:	e038      	b.n	802ac54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802abe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802abe6:	4618      	mov	r0, r3
 802abe8:	f7fd fe60 	bl	80288ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802abec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802abee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802abf0:	e030      	b.n	802ac54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802abf2:	f107 0318 	add.w	r3, r7, #24
 802abf6:	4618      	mov	r0, r3
 802abf8:	f7fd ffac 	bl	8028b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802abfc:	69fb      	ldr	r3, [r7, #28]
 802abfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ac00:	e028      	b.n	802ac54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802ac02:	4b09      	ldr	r3, [pc, #36]	; (802ac28 <UART_SetConfig+0xc2c>)
 802ac04:	681b      	ldr	r3, [r3, #0]
 802ac06:	f003 0320 	and.w	r3, r3, #32
 802ac0a:	2b00      	cmp	r3, #0
 802ac0c:	d012      	beq.n	802ac34 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802ac0e:	4b06      	ldr	r3, [pc, #24]	; (802ac28 <UART_SetConfig+0xc2c>)
 802ac10:	681b      	ldr	r3, [r3, #0]
 802ac12:	08db      	lsrs	r3, r3, #3
 802ac14:	f003 0303 	and.w	r3, r3, #3
 802ac18:	4a04      	ldr	r2, [pc, #16]	; (802ac2c <UART_SetConfig+0xc30>)
 802ac1a:	fa22 f303 	lsr.w	r3, r2, r3
 802ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802ac20:	e018      	b.n	802ac54 <UART_SetConfig+0xc58>
 802ac22:	bf00      	nop
 802ac24:	0803b8a8 	.word	0x0803b8a8
 802ac28:	58024400 	.word	0x58024400
 802ac2c:	03d09000 	.word	0x03d09000
 802ac30:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 802ac34:	4b24      	ldr	r3, [pc, #144]	; (802acc8 <UART_SetConfig+0xccc>)
 802ac36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ac38:	e00c      	b.n	802ac54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802ac3a:	4b24      	ldr	r3, [pc, #144]	; (802accc <UART_SetConfig+0xcd0>)
 802ac3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ac3e:	e009      	b.n	802ac54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802ac40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802ac44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ac46:	e005      	b.n	802ac54 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 802ac48:	2300      	movs	r3, #0
 802ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802ac4c:	2301      	movs	r3, #1
 802ac4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802ac52:	bf00      	nop
    }

    if (pclk != 0U)
 802ac54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ac56:	2b00      	cmp	r3, #0
 802ac58:	d021      	beq.n	802ac9e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802ac5a:	697b      	ldr	r3, [r7, #20]
 802ac5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ac5e:	4a1c      	ldr	r2, [pc, #112]	; (802acd0 <UART_SetConfig+0xcd4>)
 802ac60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802ac64:	461a      	mov	r2, r3
 802ac66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ac68:	fbb3 f2f2 	udiv	r2, r3, r2
 802ac6c:	697b      	ldr	r3, [r7, #20]
 802ac6e:	685b      	ldr	r3, [r3, #4]
 802ac70:	085b      	lsrs	r3, r3, #1
 802ac72:	441a      	add	r2, r3
 802ac74:	697b      	ldr	r3, [r7, #20]
 802ac76:	685b      	ldr	r3, [r3, #4]
 802ac78:	fbb2 f3f3 	udiv	r3, r2, r3
 802ac7c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802ac7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ac80:	2b0f      	cmp	r3, #15
 802ac82:	d909      	bls.n	802ac98 <UART_SetConfig+0xc9c>
 802ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ac86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802ac8a:	d205      	bcs.n	802ac98 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802ac8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ac8e:	b29a      	uxth	r2, r3
 802ac90:	697b      	ldr	r3, [r7, #20]
 802ac92:	681b      	ldr	r3, [r3, #0]
 802ac94:	60da      	str	r2, [r3, #12]
 802ac96:	e002      	b.n	802ac9e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 802ac98:	2301      	movs	r3, #1
 802ac9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 802ac9e:	697b      	ldr	r3, [r7, #20]
 802aca0:	2201      	movs	r2, #1
 802aca2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 802aca6:	697b      	ldr	r3, [r7, #20]
 802aca8:	2201      	movs	r2, #1
 802acaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802acae:	697b      	ldr	r3, [r7, #20]
 802acb0:	2200      	movs	r2, #0
 802acb2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 802acb4:	697b      	ldr	r3, [r7, #20]
 802acb6:	2200      	movs	r2, #0
 802acb8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 802acba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 802acbe:	4618      	mov	r0, r3
 802acc0:	3748      	adds	r7, #72	; 0x48
 802acc2:	46bd      	mov	sp, r7
 802acc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802acc8:	03d09000 	.word	0x03d09000
 802accc:	003d0900 	.word	0x003d0900
 802acd0:	0803b8a8 	.word	0x0803b8a8

0802acd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 802acd4:	b480      	push	{r7}
 802acd6:	b083      	sub	sp, #12
 802acd8:	af00      	add	r7, sp, #0
 802acda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 802acdc:	687b      	ldr	r3, [r7, #4]
 802acde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ace0:	f003 0301 	and.w	r3, r3, #1
 802ace4:	2b00      	cmp	r3, #0
 802ace6:	d00a      	beq.n	802acfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802ace8:	687b      	ldr	r3, [r7, #4]
 802acea:	681b      	ldr	r3, [r3, #0]
 802acec:	685b      	ldr	r3, [r3, #4]
 802acee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 802acf2:	687b      	ldr	r3, [r7, #4]
 802acf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802acf6:	687b      	ldr	r3, [r7, #4]
 802acf8:	681b      	ldr	r3, [r3, #0]
 802acfa:	430a      	orrs	r2, r1
 802acfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 802acfe:	687b      	ldr	r3, [r7, #4]
 802ad00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ad02:	f003 0302 	and.w	r3, r3, #2
 802ad06:	2b00      	cmp	r3, #0
 802ad08:	d00a      	beq.n	802ad20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 802ad0a:	687b      	ldr	r3, [r7, #4]
 802ad0c:	681b      	ldr	r3, [r3, #0]
 802ad0e:	685b      	ldr	r3, [r3, #4]
 802ad10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 802ad14:	687b      	ldr	r3, [r7, #4]
 802ad16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ad18:	687b      	ldr	r3, [r7, #4]
 802ad1a:	681b      	ldr	r3, [r3, #0]
 802ad1c:	430a      	orrs	r2, r1
 802ad1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 802ad20:	687b      	ldr	r3, [r7, #4]
 802ad22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ad24:	f003 0304 	and.w	r3, r3, #4
 802ad28:	2b00      	cmp	r3, #0
 802ad2a:	d00a      	beq.n	802ad42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 802ad2c:	687b      	ldr	r3, [r7, #4]
 802ad2e:	681b      	ldr	r3, [r3, #0]
 802ad30:	685b      	ldr	r3, [r3, #4]
 802ad32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 802ad36:	687b      	ldr	r3, [r7, #4]
 802ad38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802ad3a:	687b      	ldr	r3, [r7, #4]
 802ad3c:	681b      	ldr	r3, [r3, #0]
 802ad3e:	430a      	orrs	r2, r1
 802ad40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 802ad42:	687b      	ldr	r3, [r7, #4]
 802ad44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ad46:	f003 0308 	and.w	r3, r3, #8
 802ad4a:	2b00      	cmp	r3, #0
 802ad4c:	d00a      	beq.n	802ad64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802ad4e:	687b      	ldr	r3, [r7, #4]
 802ad50:	681b      	ldr	r3, [r3, #0]
 802ad52:	685b      	ldr	r3, [r3, #4]
 802ad54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 802ad58:	687b      	ldr	r3, [r7, #4]
 802ad5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802ad5c:	687b      	ldr	r3, [r7, #4]
 802ad5e:	681b      	ldr	r3, [r3, #0]
 802ad60:	430a      	orrs	r2, r1
 802ad62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 802ad64:	687b      	ldr	r3, [r7, #4]
 802ad66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ad68:	f003 0310 	and.w	r3, r3, #16
 802ad6c:	2b00      	cmp	r3, #0
 802ad6e:	d00a      	beq.n	802ad86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 802ad70:	687b      	ldr	r3, [r7, #4]
 802ad72:	681b      	ldr	r3, [r3, #0]
 802ad74:	689b      	ldr	r3, [r3, #8]
 802ad76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 802ad7a:	687b      	ldr	r3, [r7, #4]
 802ad7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802ad7e:	687b      	ldr	r3, [r7, #4]
 802ad80:	681b      	ldr	r3, [r3, #0]
 802ad82:	430a      	orrs	r2, r1
 802ad84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802ad86:	687b      	ldr	r3, [r7, #4]
 802ad88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ad8a:	f003 0320 	and.w	r3, r3, #32
 802ad8e:	2b00      	cmp	r3, #0
 802ad90:	d00a      	beq.n	802ada8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802ad92:	687b      	ldr	r3, [r7, #4]
 802ad94:	681b      	ldr	r3, [r3, #0]
 802ad96:	689b      	ldr	r3, [r3, #8]
 802ad98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 802ad9c:	687b      	ldr	r3, [r7, #4]
 802ad9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802ada0:	687b      	ldr	r3, [r7, #4]
 802ada2:	681b      	ldr	r3, [r3, #0]
 802ada4:	430a      	orrs	r2, r1
 802ada6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802ada8:	687b      	ldr	r3, [r7, #4]
 802adaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802adac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802adb0:	2b00      	cmp	r3, #0
 802adb2:	d01a      	beq.n	802adea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 802adb4:	687b      	ldr	r3, [r7, #4]
 802adb6:	681b      	ldr	r3, [r3, #0]
 802adb8:	685b      	ldr	r3, [r3, #4]
 802adba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 802adbe:	687b      	ldr	r3, [r7, #4]
 802adc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802adc2:	687b      	ldr	r3, [r7, #4]
 802adc4:	681b      	ldr	r3, [r3, #0]
 802adc6:	430a      	orrs	r2, r1
 802adc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802adca:	687b      	ldr	r3, [r7, #4]
 802adcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802adce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802add2:	d10a      	bne.n	802adea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 802add4:	687b      	ldr	r3, [r7, #4]
 802add6:	681b      	ldr	r3, [r3, #0]
 802add8:	685b      	ldr	r3, [r3, #4]
 802adda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 802adde:	687b      	ldr	r3, [r7, #4]
 802ade0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802ade2:	687b      	ldr	r3, [r7, #4]
 802ade4:	681b      	ldr	r3, [r3, #0]
 802ade6:	430a      	orrs	r2, r1
 802ade8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802adea:	687b      	ldr	r3, [r7, #4]
 802adec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802adee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802adf2:	2b00      	cmp	r3, #0
 802adf4:	d00a      	beq.n	802ae0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802adf6:	687b      	ldr	r3, [r7, #4]
 802adf8:	681b      	ldr	r3, [r3, #0]
 802adfa:	685b      	ldr	r3, [r3, #4]
 802adfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 802ae00:	687b      	ldr	r3, [r7, #4]
 802ae02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802ae04:	687b      	ldr	r3, [r7, #4]
 802ae06:	681b      	ldr	r3, [r3, #0]
 802ae08:	430a      	orrs	r2, r1
 802ae0a:	605a      	str	r2, [r3, #4]
  }
}
 802ae0c:	bf00      	nop
 802ae0e:	370c      	adds	r7, #12
 802ae10:	46bd      	mov	sp, r7
 802ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae16:	4770      	bx	lr

0802ae18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802ae18:	b580      	push	{r7, lr}
 802ae1a:	b086      	sub	sp, #24
 802ae1c:	af02      	add	r7, sp, #8
 802ae1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802ae20:	687b      	ldr	r3, [r7, #4]
 802ae22:	2200      	movs	r2, #0
 802ae24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802ae28:	f7f7 f93a 	bl	80220a0 <HAL_GetTick>
 802ae2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802ae2e:	687b      	ldr	r3, [r7, #4]
 802ae30:	681b      	ldr	r3, [r3, #0]
 802ae32:	681b      	ldr	r3, [r3, #0]
 802ae34:	f003 0308 	and.w	r3, r3, #8
 802ae38:	2b08      	cmp	r3, #8
 802ae3a:	d10e      	bne.n	802ae5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802ae3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802ae40:	9300      	str	r3, [sp, #0]
 802ae42:	68fb      	ldr	r3, [r7, #12]
 802ae44:	2200      	movs	r2, #0
 802ae46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802ae4a:	6878      	ldr	r0, [r7, #4]
 802ae4c:	f000 f82f 	bl	802aeae <UART_WaitOnFlagUntilTimeout>
 802ae50:	4603      	mov	r3, r0
 802ae52:	2b00      	cmp	r3, #0
 802ae54:	d001      	beq.n	802ae5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802ae56:	2303      	movs	r3, #3
 802ae58:	e025      	b.n	802aea6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802ae5a:	687b      	ldr	r3, [r7, #4]
 802ae5c:	681b      	ldr	r3, [r3, #0]
 802ae5e:	681b      	ldr	r3, [r3, #0]
 802ae60:	f003 0304 	and.w	r3, r3, #4
 802ae64:	2b04      	cmp	r3, #4
 802ae66:	d10e      	bne.n	802ae86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802ae68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802ae6c:	9300      	str	r3, [sp, #0]
 802ae6e:	68fb      	ldr	r3, [r7, #12]
 802ae70:	2200      	movs	r2, #0
 802ae72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 802ae76:	6878      	ldr	r0, [r7, #4]
 802ae78:	f000 f819 	bl	802aeae <UART_WaitOnFlagUntilTimeout>
 802ae7c:	4603      	mov	r3, r0
 802ae7e:	2b00      	cmp	r3, #0
 802ae80:	d001      	beq.n	802ae86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802ae82:	2303      	movs	r3, #3
 802ae84:	e00f      	b.n	802aea6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802ae86:	687b      	ldr	r3, [r7, #4]
 802ae88:	2220      	movs	r2, #32
 802ae8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 802ae8e:	687b      	ldr	r3, [r7, #4]
 802ae90:	2220      	movs	r2, #32
 802ae92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802ae96:	687b      	ldr	r3, [r7, #4]
 802ae98:	2200      	movs	r2, #0
 802ae9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 802ae9c:	687b      	ldr	r3, [r7, #4]
 802ae9e:	2200      	movs	r2, #0
 802aea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802aea4:	2300      	movs	r3, #0
}
 802aea6:	4618      	mov	r0, r3
 802aea8:	3710      	adds	r7, #16
 802aeaa:	46bd      	mov	sp, r7
 802aeac:	bd80      	pop	{r7, pc}

0802aeae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802aeae:	b580      	push	{r7, lr}
 802aeb0:	b09c      	sub	sp, #112	; 0x70
 802aeb2:	af00      	add	r7, sp, #0
 802aeb4:	60f8      	str	r0, [r7, #12]
 802aeb6:	60b9      	str	r1, [r7, #8]
 802aeb8:	603b      	str	r3, [r7, #0]
 802aeba:	4613      	mov	r3, r2
 802aebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802aebe:	e0a9      	b.n	802b014 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802aec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802aec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802aec6:	f000 80a5 	beq.w	802b014 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802aeca:	f7f7 f8e9 	bl	80220a0 <HAL_GetTick>
 802aece:	4602      	mov	r2, r0
 802aed0:	683b      	ldr	r3, [r7, #0]
 802aed2:	1ad3      	subs	r3, r2, r3
 802aed4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802aed6:	429a      	cmp	r2, r3
 802aed8:	d302      	bcc.n	802aee0 <UART_WaitOnFlagUntilTimeout+0x32>
 802aeda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802aedc:	2b00      	cmp	r3, #0
 802aede:	d140      	bne.n	802af62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 802aee0:	68fb      	ldr	r3, [r7, #12]
 802aee2:	681b      	ldr	r3, [r3, #0]
 802aee4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802aee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802aee8:	e853 3f00 	ldrex	r3, [r3]
 802aeec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 802aeee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802aef0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802aef4:	667b      	str	r3, [r7, #100]	; 0x64
 802aef6:	68fb      	ldr	r3, [r7, #12]
 802aef8:	681b      	ldr	r3, [r3, #0]
 802aefa:	461a      	mov	r2, r3
 802aefc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802aefe:	65fb      	str	r3, [r7, #92]	; 0x5c
 802af00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802af02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802af04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802af06:	e841 2300 	strex	r3, r2, [r1]
 802af0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 802af0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802af0e:	2b00      	cmp	r3, #0
 802af10:	d1e6      	bne.n	802aee0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802af12:	68fb      	ldr	r3, [r7, #12]
 802af14:	681b      	ldr	r3, [r3, #0]
 802af16:	3308      	adds	r3, #8
 802af18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802af1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802af1c:	e853 3f00 	ldrex	r3, [r3]
 802af20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802af22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802af24:	f023 0301 	bic.w	r3, r3, #1
 802af28:	663b      	str	r3, [r7, #96]	; 0x60
 802af2a:	68fb      	ldr	r3, [r7, #12]
 802af2c:	681b      	ldr	r3, [r3, #0]
 802af2e:	3308      	adds	r3, #8
 802af30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802af32:	64ba      	str	r2, [r7, #72]	; 0x48
 802af34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802af36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802af38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802af3a:	e841 2300 	strex	r3, r2, [r1]
 802af3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 802af40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802af42:	2b00      	cmp	r3, #0
 802af44:	d1e5      	bne.n	802af12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 802af46:	68fb      	ldr	r3, [r7, #12]
 802af48:	2220      	movs	r2, #32
 802af4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 802af4e:	68fb      	ldr	r3, [r7, #12]
 802af50:	2220      	movs	r2, #32
 802af52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 802af56:	68fb      	ldr	r3, [r7, #12]
 802af58:	2200      	movs	r2, #0
 802af5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 802af5e:	2303      	movs	r3, #3
 802af60:	e069      	b.n	802b036 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 802af62:	68fb      	ldr	r3, [r7, #12]
 802af64:	681b      	ldr	r3, [r3, #0]
 802af66:	681b      	ldr	r3, [r3, #0]
 802af68:	f003 0304 	and.w	r3, r3, #4
 802af6c:	2b00      	cmp	r3, #0
 802af6e:	d051      	beq.n	802b014 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802af70:	68fb      	ldr	r3, [r7, #12]
 802af72:	681b      	ldr	r3, [r3, #0]
 802af74:	69db      	ldr	r3, [r3, #28]
 802af76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802af7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802af7e:	d149      	bne.n	802b014 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802af80:	68fb      	ldr	r3, [r7, #12]
 802af82:	681b      	ldr	r3, [r3, #0]
 802af84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802af88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 802af8a:	68fb      	ldr	r3, [r7, #12]
 802af8c:	681b      	ldr	r3, [r3, #0]
 802af8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af92:	e853 3f00 	ldrex	r3, [r3]
 802af96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802af9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802af9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 802afa0:	68fb      	ldr	r3, [r7, #12]
 802afa2:	681b      	ldr	r3, [r3, #0]
 802afa4:	461a      	mov	r2, r3
 802afa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802afa8:	637b      	str	r3, [r7, #52]	; 0x34
 802afaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802afac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802afae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802afb0:	e841 2300 	strex	r3, r2, [r1]
 802afb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802afb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802afb8:	2b00      	cmp	r3, #0
 802afba:	d1e6      	bne.n	802af8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802afbc:	68fb      	ldr	r3, [r7, #12]
 802afbe:	681b      	ldr	r3, [r3, #0]
 802afc0:	3308      	adds	r3, #8
 802afc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802afc4:	697b      	ldr	r3, [r7, #20]
 802afc6:	e853 3f00 	ldrex	r3, [r3]
 802afca:	613b      	str	r3, [r7, #16]
   return(result);
 802afcc:	693b      	ldr	r3, [r7, #16]
 802afce:	f023 0301 	bic.w	r3, r3, #1
 802afd2:	66bb      	str	r3, [r7, #104]	; 0x68
 802afd4:	68fb      	ldr	r3, [r7, #12]
 802afd6:	681b      	ldr	r3, [r3, #0]
 802afd8:	3308      	adds	r3, #8
 802afda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802afdc:	623a      	str	r2, [r7, #32]
 802afde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802afe0:	69f9      	ldr	r1, [r7, #28]
 802afe2:	6a3a      	ldr	r2, [r7, #32]
 802afe4:	e841 2300 	strex	r3, r2, [r1]
 802afe8:	61bb      	str	r3, [r7, #24]
   return(result);
 802afea:	69bb      	ldr	r3, [r7, #24]
 802afec:	2b00      	cmp	r3, #0
 802afee:	d1e5      	bne.n	802afbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 802aff0:	68fb      	ldr	r3, [r7, #12]
 802aff2:	2220      	movs	r2, #32
 802aff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 802aff8:	68fb      	ldr	r3, [r7, #12]
 802affa:	2220      	movs	r2, #32
 802affc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802b000:	68fb      	ldr	r3, [r7, #12]
 802b002:	2220      	movs	r2, #32
 802b004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802b008:	68fb      	ldr	r3, [r7, #12]
 802b00a:	2200      	movs	r2, #0
 802b00c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 802b010:	2303      	movs	r3, #3
 802b012:	e010      	b.n	802b036 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802b014:	68fb      	ldr	r3, [r7, #12]
 802b016:	681b      	ldr	r3, [r3, #0]
 802b018:	69da      	ldr	r2, [r3, #28]
 802b01a:	68bb      	ldr	r3, [r7, #8]
 802b01c:	4013      	ands	r3, r2
 802b01e:	68ba      	ldr	r2, [r7, #8]
 802b020:	429a      	cmp	r2, r3
 802b022:	bf0c      	ite	eq
 802b024:	2301      	moveq	r3, #1
 802b026:	2300      	movne	r3, #0
 802b028:	b2db      	uxtb	r3, r3
 802b02a:	461a      	mov	r2, r3
 802b02c:	79fb      	ldrb	r3, [r7, #7]
 802b02e:	429a      	cmp	r2, r3
 802b030:	f43f af46 	beq.w	802aec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802b034:	2300      	movs	r3, #0
}
 802b036:	4618      	mov	r0, r3
 802b038:	3770      	adds	r7, #112	; 0x70
 802b03a:	46bd      	mov	sp, r7
 802b03c:	bd80      	pop	{r7, pc}
	...

0802b040 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802b040:	b580      	push	{r7, lr}
 802b042:	b096      	sub	sp, #88	; 0x58
 802b044:	af00      	add	r7, sp, #0
 802b046:	60f8      	str	r0, [r7, #12]
 802b048:	60b9      	str	r1, [r7, #8]
 802b04a:	4613      	mov	r3, r2
 802b04c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 802b04e:	68fb      	ldr	r3, [r7, #12]
 802b050:	68ba      	ldr	r2, [r7, #8]
 802b052:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 802b054:	68fb      	ldr	r3, [r7, #12]
 802b056:	88fa      	ldrh	r2, [r7, #6]
 802b058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802b05c:	68fb      	ldr	r3, [r7, #12]
 802b05e:	2200      	movs	r2, #0
 802b060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 802b064:	68fb      	ldr	r3, [r7, #12]
 802b066:	2222      	movs	r2, #34	; 0x22
 802b068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 802b06c:	68fb      	ldr	r3, [r7, #12]
 802b06e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b070:	2b00      	cmp	r3, #0
 802b072:	d02c      	beq.n	802b0ce <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 802b074:	68fb      	ldr	r3, [r7, #12]
 802b076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b078:	4a42      	ldr	r2, [pc, #264]	; (802b184 <UART_Start_Receive_DMA+0x144>)
 802b07a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 802b07c:	68fb      	ldr	r3, [r7, #12]
 802b07e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b080:	4a41      	ldr	r2, [pc, #260]	; (802b188 <UART_Start_Receive_DMA+0x148>)
 802b082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 802b084:	68fb      	ldr	r3, [r7, #12]
 802b086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b088:	4a40      	ldr	r2, [pc, #256]	; (802b18c <UART_Start_Receive_DMA+0x14c>)
 802b08a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 802b08c:	68fb      	ldr	r3, [r7, #12]
 802b08e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b090:	2200      	movs	r2, #0
 802b092:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 802b094:	68fb      	ldr	r3, [r7, #12]
 802b096:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 802b098:	68fb      	ldr	r3, [r7, #12]
 802b09a:	681b      	ldr	r3, [r3, #0]
 802b09c:	3324      	adds	r3, #36	; 0x24
 802b09e:	4619      	mov	r1, r3
 802b0a0:	68fb      	ldr	r3, [r7, #12]
 802b0a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802b0a4:	461a      	mov	r2, r3
 802b0a6:	88fb      	ldrh	r3, [r7, #6]
 802b0a8:	f7f7 fc64 	bl	8022974 <HAL_DMA_Start_IT>
 802b0ac:	4603      	mov	r3, r0
 802b0ae:	2b00      	cmp	r3, #0
 802b0b0:	d00d      	beq.n	802b0ce <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 802b0b2:	68fb      	ldr	r3, [r7, #12]
 802b0b4:	2210      	movs	r2, #16
 802b0b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 802b0ba:	68fb      	ldr	r3, [r7, #12]
 802b0bc:	2200      	movs	r2, #0
 802b0be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 802b0c2:	68fb      	ldr	r3, [r7, #12]
 802b0c4:	2220      	movs	r2, #32
 802b0c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 802b0ca:	2301      	movs	r3, #1
 802b0cc:	e055      	b.n	802b17a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 802b0ce:	68fb      	ldr	r3, [r7, #12]
 802b0d0:	2200      	movs	r2, #0
 802b0d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 802b0d6:	68fb      	ldr	r3, [r7, #12]
 802b0d8:	691b      	ldr	r3, [r3, #16]
 802b0da:	2b00      	cmp	r3, #0
 802b0dc:	d018      	beq.n	802b110 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802b0de:	68fb      	ldr	r3, [r7, #12]
 802b0e0:	681b      	ldr	r3, [r3, #0]
 802b0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b0e6:	e853 3f00 	ldrex	r3, [r3]
 802b0ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b0ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b0f2:	657b      	str	r3, [r7, #84]	; 0x54
 802b0f4:	68fb      	ldr	r3, [r7, #12]
 802b0f6:	681b      	ldr	r3, [r3, #0]
 802b0f8:	461a      	mov	r2, r3
 802b0fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b0fc:	64bb      	str	r3, [r7, #72]	; 0x48
 802b0fe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b100:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802b102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b104:	e841 2300 	strex	r3, r2, [r1]
 802b108:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 802b10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b10c:	2b00      	cmp	r3, #0
 802b10e:	d1e6      	bne.n	802b0de <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802b110:	68fb      	ldr	r3, [r7, #12]
 802b112:	681b      	ldr	r3, [r3, #0]
 802b114:	3308      	adds	r3, #8
 802b116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b11a:	e853 3f00 	ldrex	r3, [r3]
 802b11e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b122:	f043 0301 	orr.w	r3, r3, #1
 802b126:	653b      	str	r3, [r7, #80]	; 0x50
 802b128:	68fb      	ldr	r3, [r7, #12]
 802b12a:	681b      	ldr	r3, [r3, #0]
 802b12c:	3308      	adds	r3, #8
 802b12e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b130:	637a      	str	r2, [r7, #52]	; 0x34
 802b132:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b134:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802b136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802b138:	e841 2300 	strex	r3, r2, [r1]
 802b13c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802b13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b140:	2b00      	cmp	r3, #0
 802b142:	d1e5      	bne.n	802b110 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802b144:	68fb      	ldr	r3, [r7, #12]
 802b146:	681b      	ldr	r3, [r3, #0]
 802b148:	3308      	adds	r3, #8
 802b14a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b14c:	697b      	ldr	r3, [r7, #20]
 802b14e:	e853 3f00 	ldrex	r3, [r3]
 802b152:	613b      	str	r3, [r7, #16]
   return(result);
 802b154:	693b      	ldr	r3, [r7, #16]
 802b156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b15a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b15c:	68fb      	ldr	r3, [r7, #12]
 802b15e:	681b      	ldr	r3, [r3, #0]
 802b160:	3308      	adds	r3, #8
 802b162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b164:	623a      	str	r2, [r7, #32]
 802b166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b168:	69f9      	ldr	r1, [r7, #28]
 802b16a:	6a3a      	ldr	r2, [r7, #32]
 802b16c:	e841 2300 	strex	r3, r2, [r1]
 802b170:	61bb      	str	r3, [r7, #24]
   return(result);
 802b172:	69bb      	ldr	r3, [r7, #24]
 802b174:	2b00      	cmp	r3, #0
 802b176:	d1e5      	bne.n	802b144 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 802b178:	2300      	movs	r3, #0
}
 802b17a:	4618      	mov	r0, r3
 802b17c:	3758      	adds	r7, #88	; 0x58
 802b17e:	46bd      	mov	sp, r7
 802b180:	bd80      	pop	{r7, pc}
 802b182:	bf00      	nop
 802b184:	0802b393 	.word	0x0802b393
 802b188:	0802b4b5 	.word	0x0802b4b5
 802b18c:	0802b4ed 	.word	0x0802b4ed

0802b190 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 802b190:	b480      	push	{r7}
 802b192:	b08f      	sub	sp, #60	; 0x3c
 802b194:	af00      	add	r7, sp, #0
 802b196:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 802b198:	687b      	ldr	r3, [r7, #4]
 802b19a:	681b      	ldr	r3, [r3, #0]
 802b19c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b19e:	6a3b      	ldr	r3, [r7, #32]
 802b1a0:	e853 3f00 	ldrex	r3, [r3]
 802b1a4:	61fb      	str	r3, [r7, #28]
   return(result);
 802b1a6:	69fb      	ldr	r3, [r7, #28]
 802b1a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 802b1ac:	637b      	str	r3, [r7, #52]	; 0x34
 802b1ae:	687b      	ldr	r3, [r7, #4]
 802b1b0:	681b      	ldr	r3, [r3, #0]
 802b1b2:	461a      	mov	r2, r3
 802b1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 802b1b8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b1ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802b1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802b1be:	e841 2300 	strex	r3, r2, [r1]
 802b1c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1c6:	2b00      	cmp	r3, #0
 802b1c8:	d1e6      	bne.n	802b198 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 802b1ca:	687b      	ldr	r3, [r7, #4]
 802b1cc:	681b      	ldr	r3, [r3, #0]
 802b1ce:	3308      	adds	r3, #8
 802b1d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b1d2:	68fb      	ldr	r3, [r7, #12]
 802b1d4:	e853 3f00 	ldrex	r3, [r3]
 802b1d8:	60bb      	str	r3, [r7, #8]
   return(result);
 802b1da:	68bb      	ldr	r3, [r7, #8]
 802b1dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 802b1e0:	633b      	str	r3, [r7, #48]	; 0x30
 802b1e2:	687b      	ldr	r3, [r7, #4]
 802b1e4:	681b      	ldr	r3, [r3, #0]
 802b1e6:	3308      	adds	r3, #8
 802b1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b1ea:	61ba      	str	r2, [r7, #24]
 802b1ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b1ee:	6979      	ldr	r1, [r7, #20]
 802b1f0:	69ba      	ldr	r2, [r7, #24]
 802b1f2:	e841 2300 	strex	r3, r2, [r1]
 802b1f6:	613b      	str	r3, [r7, #16]
   return(result);
 802b1f8:	693b      	ldr	r3, [r7, #16]
 802b1fa:	2b00      	cmp	r3, #0
 802b1fc:	d1e5      	bne.n	802b1ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802b1fe:	687b      	ldr	r3, [r7, #4]
 802b200:	2220      	movs	r2, #32
 802b202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 802b206:	bf00      	nop
 802b208:	373c      	adds	r7, #60	; 0x3c
 802b20a:	46bd      	mov	sp, r7
 802b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b210:	4770      	bx	lr
	...

0802b214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802b214:	b480      	push	{r7}
 802b216:	b095      	sub	sp, #84	; 0x54
 802b218:	af00      	add	r7, sp, #0
 802b21a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802b21c:	687b      	ldr	r3, [r7, #4]
 802b21e:	681b      	ldr	r3, [r3, #0]
 802b220:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b224:	e853 3f00 	ldrex	r3, [r3]
 802b228:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802b22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b22c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802b230:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b232:	687b      	ldr	r3, [r7, #4]
 802b234:	681b      	ldr	r3, [r3, #0]
 802b236:	461a      	mov	r2, r3
 802b238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b23a:	643b      	str	r3, [r7, #64]	; 0x40
 802b23c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b23e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802b240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802b242:	e841 2300 	strex	r3, r2, [r1]
 802b246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b24a:	2b00      	cmp	r3, #0
 802b24c:	d1e6      	bne.n	802b21c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802b24e:	687b      	ldr	r3, [r7, #4]
 802b250:	681b      	ldr	r3, [r3, #0]
 802b252:	3308      	adds	r3, #8
 802b254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b256:	6a3b      	ldr	r3, [r7, #32]
 802b258:	e853 3f00 	ldrex	r3, [r3]
 802b25c:	61fb      	str	r3, [r7, #28]
   return(result);
 802b25e:	69fa      	ldr	r2, [r7, #28]
 802b260:	4b1e      	ldr	r3, [pc, #120]	; (802b2dc <UART_EndRxTransfer+0xc8>)
 802b262:	4013      	ands	r3, r2
 802b264:	64bb      	str	r3, [r7, #72]	; 0x48
 802b266:	687b      	ldr	r3, [r7, #4]
 802b268:	681b      	ldr	r3, [r3, #0]
 802b26a:	3308      	adds	r3, #8
 802b26c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b26e:	62fa      	str	r2, [r7, #44]	; 0x2c
 802b270:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802b274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802b276:	e841 2300 	strex	r3, r2, [r1]
 802b27a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b27e:	2b00      	cmp	r3, #0
 802b280:	d1e5      	bne.n	802b24e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802b282:	687b      	ldr	r3, [r7, #4]
 802b284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802b286:	2b01      	cmp	r3, #1
 802b288:	d118      	bne.n	802b2bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802b28a:	687b      	ldr	r3, [r7, #4]
 802b28c:	681b      	ldr	r3, [r3, #0]
 802b28e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b290:	68fb      	ldr	r3, [r7, #12]
 802b292:	e853 3f00 	ldrex	r3, [r3]
 802b296:	60bb      	str	r3, [r7, #8]
   return(result);
 802b298:	68bb      	ldr	r3, [r7, #8]
 802b29a:	f023 0310 	bic.w	r3, r3, #16
 802b29e:	647b      	str	r3, [r7, #68]	; 0x44
 802b2a0:	687b      	ldr	r3, [r7, #4]
 802b2a2:	681b      	ldr	r3, [r3, #0]
 802b2a4:	461a      	mov	r2, r3
 802b2a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b2a8:	61bb      	str	r3, [r7, #24]
 802b2aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b2ac:	6979      	ldr	r1, [r7, #20]
 802b2ae:	69ba      	ldr	r2, [r7, #24]
 802b2b0:	e841 2300 	strex	r3, r2, [r1]
 802b2b4:	613b      	str	r3, [r7, #16]
   return(result);
 802b2b6:	693b      	ldr	r3, [r7, #16]
 802b2b8:	2b00      	cmp	r3, #0
 802b2ba:	d1e6      	bne.n	802b28a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802b2bc:	687b      	ldr	r3, [r7, #4]
 802b2be:	2220      	movs	r2, #32
 802b2c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802b2c4:	687b      	ldr	r3, [r7, #4]
 802b2c6:	2200      	movs	r2, #0
 802b2c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 802b2ca:	687b      	ldr	r3, [r7, #4]
 802b2cc:	2200      	movs	r2, #0
 802b2ce:	671a      	str	r2, [r3, #112]	; 0x70
}
 802b2d0:	bf00      	nop
 802b2d2:	3754      	adds	r7, #84	; 0x54
 802b2d4:	46bd      	mov	sp, r7
 802b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b2da:	4770      	bx	lr
 802b2dc:	effffffe 	.word	0xeffffffe

0802b2e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 802b2e0:	b580      	push	{r7, lr}
 802b2e2:	b090      	sub	sp, #64	; 0x40
 802b2e4:	af00      	add	r7, sp, #0
 802b2e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802b2e8:	687b      	ldr	r3, [r7, #4]
 802b2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b2ec:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 802b2ee:	687b      	ldr	r3, [r7, #4]
 802b2f0:	69db      	ldr	r3, [r3, #28]
 802b2f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b2f6:	d037      	beq.n	802b368 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 802b2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b2fa:	2200      	movs	r2, #0
 802b2fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 802b300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b302:	681b      	ldr	r3, [r3, #0]
 802b304:	3308      	adds	r3, #8
 802b306:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b30a:	e853 3f00 	ldrex	r3, [r3]
 802b30e:	623b      	str	r3, [r7, #32]
   return(result);
 802b310:	6a3b      	ldr	r3, [r7, #32]
 802b312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802b316:	63bb      	str	r3, [r7, #56]	; 0x38
 802b318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b31a:	681b      	ldr	r3, [r3, #0]
 802b31c:	3308      	adds	r3, #8
 802b31e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802b320:	633a      	str	r2, [r7, #48]	; 0x30
 802b322:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b324:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802b326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b328:	e841 2300 	strex	r3, r2, [r1]
 802b32c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802b32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b330:	2b00      	cmp	r3, #0
 802b332:	d1e5      	bne.n	802b300 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 802b334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b336:	681b      	ldr	r3, [r3, #0]
 802b338:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b33a:	693b      	ldr	r3, [r7, #16]
 802b33c:	e853 3f00 	ldrex	r3, [r3]
 802b340:	60fb      	str	r3, [r7, #12]
   return(result);
 802b342:	68fb      	ldr	r3, [r7, #12]
 802b344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b348:	637b      	str	r3, [r7, #52]	; 0x34
 802b34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b34c:	681b      	ldr	r3, [r3, #0]
 802b34e:	461a      	mov	r2, r3
 802b350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b352:	61fb      	str	r3, [r7, #28]
 802b354:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b356:	69b9      	ldr	r1, [r7, #24]
 802b358:	69fa      	ldr	r2, [r7, #28]
 802b35a:	e841 2300 	strex	r3, r2, [r1]
 802b35e:	617b      	str	r3, [r7, #20]
   return(result);
 802b360:	697b      	ldr	r3, [r7, #20]
 802b362:	2b00      	cmp	r3, #0
 802b364:	d1e6      	bne.n	802b334 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 802b366:	e002      	b.n	802b36e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 802b368:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802b36a:	f7f5 ff6d 	bl	8021248 <HAL_UART_TxCpltCallback>
}
 802b36e:	bf00      	nop
 802b370:	3740      	adds	r7, #64	; 0x40
 802b372:	46bd      	mov	sp, r7
 802b374:	bd80      	pop	{r7, pc}

0802b376 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 802b376:	b580      	push	{r7, lr}
 802b378:	b084      	sub	sp, #16
 802b37a:	af00      	add	r7, sp, #0
 802b37c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802b37e:	687b      	ldr	r3, [r7, #4]
 802b380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b382:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 802b384:	68f8      	ldr	r0, [r7, #12]
 802b386:	f7fe fe11 	bl	8029fac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802b38a:	bf00      	nop
 802b38c:	3710      	adds	r7, #16
 802b38e:	46bd      	mov	sp, r7
 802b390:	bd80      	pop	{r7, pc}

0802b392 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 802b392:	b580      	push	{r7, lr}
 802b394:	b09c      	sub	sp, #112	; 0x70
 802b396:	af00      	add	r7, sp, #0
 802b398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802b39a:	687b      	ldr	r3, [r7, #4]
 802b39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b39e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 802b3a0:	687b      	ldr	r3, [r7, #4]
 802b3a2:	69db      	ldr	r3, [r3, #28]
 802b3a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b3a8:	d071      	beq.n	802b48e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 802b3aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b3ac:	2200      	movs	r2, #0
 802b3ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802b3b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b3b4:	681b      	ldr	r3, [r3, #0]
 802b3b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b3b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b3ba:	e853 3f00 	ldrex	r3, [r3]
 802b3be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802b3c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b3c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802b3c6:	66bb      	str	r3, [r7, #104]	; 0x68
 802b3c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b3ca:	681b      	ldr	r3, [r3, #0]
 802b3cc:	461a      	mov	r2, r3
 802b3ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802b3d0:	65bb      	str	r3, [r7, #88]	; 0x58
 802b3d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b3d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802b3d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802b3d8:	e841 2300 	strex	r3, r2, [r1]
 802b3dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802b3de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b3e0:	2b00      	cmp	r3, #0
 802b3e2:	d1e6      	bne.n	802b3b2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802b3e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b3e6:	681b      	ldr	r3, [r3, #0]
 802b3e8:	3308      	adds	r3, #8
 802b3ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b3ee:	e853 3f00 	ldrex	r3, [r3]
 802b3f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802b3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b3f6:	f023 0301 	bic.w	r3, r3, #1
 802b3fa:	667b      	str	r3, [r7, #100]	; 0x64
 802b3fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b3fe:	681b      	ldr	r3, [r3, #0]
 802b400:	3308      	adds	r3, #8
 802b402:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 802b404:	647a      	str	r2, [r7, #68]	; 0x44
 802b406:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b408:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802b40a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802b40c:	e841 2300 	strex	r3, r2, [r1]
 802b410:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802b412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b414:	2b00      	cmp	r3, #0
 802b416:	d1e5      	bne.n	802b3e4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802b418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b41a:	681b      	ldr	r3, [r3, #0]
 802b41c:	3308      	adds	r3, #8
 802b41e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b422:	e853 3f00 	ldrex	r3, [r3]
 802b426:	623b      	str	r3, [r7, #32]
   return(result);
 802b428:	6a3b      	ldr	r3, [r7, #32]
 802b42a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802b42e:	663b      	str	r3, [r7, #96]	; 0x60
 802b430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b432:	681b      	ldr	r3, [r3, #0]
 802b434:	3308      	adds	r3, #8
 802b436:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802b438:	633a      	str	r2, [r7, #48]	; 0x30
 802b43a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b43c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802b43e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b440:	e841 2300 	strex	r3, r2, [r1]
 802b444:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802b446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b448:	2b00      	cmp	r3, #0
 802b44a:	d1e5      	bne.n	802b418 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 802b44c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b44e:	2220      	movs	r2, #32
 802b450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802b454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802b458:	2b01      	cmp	r3, #1
 802b45a:	d118      	bne.n	802b48e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802b45c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b45e:	681b      	ldr	r3, [r3, #0]
 802b460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b462:	693b      	ldr	r3, [r7, #16]
 802b464:	e853 3f00 	ldrex	r3, [r3]
 802b468:	60fb      	str	r3, [r7, #12]
   return(result);
 802b46a:	68fb      	ldr	r3, [r7, #12]
 802b46c:	f023 0310 	bic.w	r3, r3, #16
 802b470:	65fb      	str	r3, [r7, #92]	; 0x5c
 802b472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b474:	681b      	ldr	r3, [r3, #0]
 802b476:	461a      	mov	r2, r3
 802b478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802b47a:	61fb      	str	r3, [r7, #28]
 802b47c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b47e:	69b9      	ldr	r1, [r7, #24]
 802b480:	69fa      	ldr	r2, [r7, #28]
 802b482:	e841 2300 	strex	r3, r2, [r1]
 802b486:	617b      	str	r3, [r7, #20]
   return(result);
 802b488:	697b      	ldr	r3, [r7, #20]
 802b48a:	2b00      	cmp	r3, #0
 802b48c:	d1e6      	bne.n	802b45c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802b48e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802b492:	2b01      	cmp	r3, #1
 802b494:	d107      	bne.n	802b4a6 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802b496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b498:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802b49c:	4619      	mov	r1, r3
 802b49e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 802b4a0:	f7f5 fee8 	bl	8021274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 802b4a4:	e002      	b.n	802b4ac <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 802b4a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 802b4a8:	f7fe fd8a 	bl	8029fc0 <HAL_UART_RxCpltCallback>
}
 802b4ac:	bf00      	nop
 802b4ae:	3770      	adds	r7, #112	; 0x70
 802b4b0:	46bd      	mov	sp, r7
 802b4b2:	bd80      	pop	{r7, pc}

0802b4b4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 802b4b4:	b580      	push	{r7, lr}
 802b4b6:	b084      	sub	sp, #16
 802b4b8:	af00      	add	r7, sp, #0
 802b4ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802b4bc:	687b      	ldr	r3, [r7, #4]
 802b4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b4c0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802b4c2:	68fb      	ldr	r3, [r7, #12]
 802b4c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802b4c6:	2b01      	cmp	r3, #1
 802b4c8:	d109      	bne.n	802b4de <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 802b4ca:	68fb      	ldr	r3, [r7, #12]
 802b4cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802b4d0:	085b      	lsrs	r3, r3, #1
 802b4d2:	b29b      	uxth	r3, r3
 802b4d4:	4619      	mov	r1, r3
 802b4d6:	68f8      	ldr	r0, [r7, #12]
 802b4d8:	f7f5 fecc 	bl	8021274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 802b4dc:	e002      	b.n	802b4e4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 802b4de:	68f8      	ldr	r0, [r7, #12]
 802b4e0:	f7fe fd78 	bl	8029fd4 <HAL_UART_RxHalfCpltCallback>
}
 802b4e4:	bf00      	nop
 802b4e6:	3710      	adds	r7, #16
 802b4e8:	46bd      	mov	sp, r7
 802b4ea:	bd80      	pop	{r7, pc}

0802b4ec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 802b4ec:	b580      	push	{r7, lr}
 802b4ee:	b086      	sub	sp, #24
 802b4f0:	af00      	add	r7, sp, #0
 802b4f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802b4f4:	687b      	ldr	r3, [r7, #4]
 802b4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b4f8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 802b4fa:	697b      	ldr	r3, [r7, #20]
 802b4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b500:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 802b502:	697b      	ldr	r3, [r7, #20]
 802b504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802b508:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 802b50a:	697b      	ldr	r3, [r7, #20]
 802b50c:	681b      	ldr	r3, [r3, #0]
 802b50e:	689b      	ldr	r3, [r3, #8]
 802b510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b514:	2b80      	cmp	r3, #128	; 0x80
 802b516:	d109      	bne.n	802b52c <UART_DMAError+0x40>
 802b518:	693b      	ldr	r3, [r7, #16]
 802b51a:	2b21      	cmp	r3, #33	; 0x21
 802b51c:	d106      	bne.n	802b52c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 802b51e:	697b      	ldr	r3, [r7, #20]
 802b520:	2200      	movs	r2, #0
 802b522:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 802b526:	6978      	ldr	r0, [r7, #20]
 802b528:	f7ff fe32 	bl	802b190 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 802b52c:	697b      	ldr	r3, [r7, #20]
 802b52e:	681b      	ldr	r3, [r3, #0]
 802b530:	689b      	ldr	r3, [r3, #8]
 802b532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b536:	2b40      	cmp	r3, #64	; 0x40
 802b538:	d109      	bne.n	802b54e <UART_DMAError+0x62>
 802b53a:	68fb      	ldr	r3, [r7, #12]
 802b53c:	2b22      	cmp	r3, #34	; 0x22
 802b53e:	d106      	bne.n	802b54e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 802b540:	697b      	ldr	r3, [r7, #20]
 802b542:	2200      	movs	r2, #0
 802b544:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 802b548:	6978      	ldr	r0, [r7, #20]
 802b54a:	f7ff fe63 	bl	802b214 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 802b54e:	697b      	ldr	r3, [r7, #20]
 802b550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802b554:	f043 0210 	orr.w	r2, r3, #16
 802b558:	697b      	ldr	r3, [r7, #20]
 802b55a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802b55e:	6978      	ldr	r0, [r7, #20]
 802b560:	f7fe fd42 	bl	8029fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802b564:	bf00      	nop
 802b566:	3718      	adds	r7, #24
 802b568:	46bd      	mov	sp, r7
 802b56a:	bd80      	pop	{r7, pc}

0802b56c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802b56c:	b580      	push	{r7, lr}
 802b56e:	b084      	sub	sp, #16
 802b570:	af00      	add	r7, sp, #0
 802b572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802b574:	687b      	ldr	r3, [r7, #4]
 802b576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b578:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 802b57a:	68fb      	ldr	r3, [r7, #12]
 802b57c:	2200      	movs	r2, #0
 802b57e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 802b582:	68fb      	ldr	r3, [r7, #12]
 802b584:	2200      	movs	r2, #0
 802b586:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802b58a:	68f8      	ldr	r0, [r7, #12]
 802b58c:	f7fe fd2c 	bl	8029fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802b590:	bf00      	nop
 802b592:	3710      	adds	r7, #16
 802b594:	46bd      	mov	sp, r7
 802b596:	bd80      	pop	{r7, pc}

0802b598 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802b598:	b580      	push	{r7, lr}
 802b59a:	b088      	sub	sp, #32
 802b59c:	af00      	add	r7, sp, #0
 802b59e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 802b5a0:	687b      	ldr	r3, [r7, #4]
 802b5a2:	681b      	ldr	r3, [r3, #0]
 802b5a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b5a6:	68fb      	ldr	r3, [r7, #12]
 802b5a8:	e853 3f00 	ldrex	r3, [r3]
 802b5ac:	60bb      	str	r3, [r7, #8]
   return(result);
 802b5ae:	68bb      	ldr	r3, [r7, #8]
 802b5b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802b5b4:	61fb      	str	r3, [r7, #28]
 802b5b6:	687b      	ldr	r3, [r7, #4]
 802b5b8:	681b      	ldr	r3, [r3, #0]
 802b5ba:	461a      	mov	r2, r3
 802b5bc:	69fb      	ldr	r3, [r7, #28]
 802b5be:	61bb      	str	r3, [r7, #24]
 802b5c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b5c2:	6979      	ldr	r1, [r7, #20]
 802b5c4:	69ba      	ldr	r2, [r7, #24]
 802b5c6:	e841 2300 	strex	r3, r2, [r1]
 802b5ca:	613b      	str	r3, [r7, #16]
   return(result);
 802b5cc:	693b      	ldr	r3, [r7, #16]
 802b5ce:	2b00      	cmp	r3, #0
 802b5d0:	d1e6      	bne.n	802b5a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802b5d2:	687b      	ldr	r3, [r7, #4]
 802b5d4:	2220      	movs	r2, #32
 802b5d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 802b5da:	687b      	ldr	r3, [r7, #4]
 802b5dc:	2200      	movs	r2, #0
 802b5de:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802b5e0:	6878      	ldr	r0, [r7, #4]
 802b5e2:	f7f5 fe31 	bl	8021248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802b5e6:	bf00      	nop
 802b5e8:	3720      	adds	r7, #32
 802b5ea:	46bd      	mov	sp, r7
 802b5ec:	bd80      	pop	{r7, pc}

0802b5ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 802b5ee:	b480      	push	{r7}
 802b5f0:	b083      	sub	sp, #12
 802b5f2:	af00      	add	r7, sp, #0
 802b5f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 802b5f6:	bf00      	nop
 802b5f8:	370c      	adds	r7, #12
 802b5fa:	46bd      	mov	sp, r7
 802b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b600:	4770      	bx	lr

0802b602 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 802b602:	b480      	push	{r7}
 802b604:	b083      	sub	sp, #12
 802b606:	af00      	add	r7, sp, #0
 802b608:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 802b60a:	bf00      	nop
 802b60c:	370c      	adds	r7, #12
 802b60e:	46bd      	mov	sp, r7
 802b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b614:	4770      	bx	lr

0802b616 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 802b616:	b480      	push	{r7}
 802b618:	b083      	sub	sp, #12
 802b61a:	af00      	add	r7, sp, #0
 802b61c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 802b61e:	bf00      	nop
 802b620:	370c      	adds	r7, #12
 802b622:	46bd      	mov	sp, r7
 802b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b628:	4770      	bx	lr

0802b62a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 802b62a:	b480      	push	{r7}
 802b62c:	b085      	sub	sp, #20
 802b62e:	af00      	add	r7, sp, #0
 802b630:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802b632:	687b      	ldr	r3, [r7, #4]
 802b634:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802b638:	2b01      	cmp	r3, #1
 802b63a:	d101      	bne.n	802b640 <HAL_UARTEx_DisableFifoMode+0x16>
 802b63c:	2302      	movs	r3, #2
 802b63e:	e027      	b.n	802b690 <HAL_UARTEx_DisableFifoMode+0x66>
 802b640:	687b      	ldr	r3, [r7, #4]
 802b642:	2201      	movs	r2, #1
 802b644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802b648:	687b      	ldr	r3, [r7, #4]
 802b64a:	2224      	movs	r2, #36	; 0x24
 802b64c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802b650:	687b      	ldr	r3, [r7, #4]
 802b652:	681b      	ldr	r3, [r3, #0]
 802b654:	681b      	ldr	r3, [r3, #0]
 802b656:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802b658:	687b      	ldr	r3, [r7, #4]
 802b65a:	681b      	ldr	r3, [r3, #0]
 802b65c:	681a      	ldr	r2, [r3, #0]
 802b65e:	687b      	ldr	r3, [r7, #4]
 802b660:	681b      	ldr	r3, [r3, #0]
 802b662:	f022 0201 	bic.w	r2, r2, #1
 802b666:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802b668:	68fb      	ldr	r3, [r7, #12]
 802b66a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802b66e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802b670:	687b      	ldr	r3, [r7, #4]
 802b672:	2200      	movs	r2, #0
 802b674:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802b676:	687b      	ldr	r3, [r7, #4]
 802b678:	681b      	ldr	r3, [r3, #0]
 802b67a:	68fa      	ldr	r2, [r7, #12]
 802b67c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802b67e:	687b      	ldr	r3, [r7, #4]
 802b680:	2220      	movs	r2, #32
 802b682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802b686:	687b      	ldr	r3, [r7, #4]
 802b688:	2200      	movs	r2, #0
 802b68a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802b68e:	2300      	movs	r3, #0
}
 802b690:	4618      	mov	r0, r3
 802b692:	3714      	adds	r7, #20
 802b694:	46bd      	mov	sp, r7
 802b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b69a:	4770      	bx	lr

0802b69c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802b69c:	b580      	push	{r7, lr}
 802b69e:	b084      	sub	sp, #16
 802b6a0:	af00      	add	r7, sp, #0
 802b6a2:	6078      	str	r0, [r7, #4]
 802b6a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802b6a6:	687b      	ldr	r3, [r7, #4]
 802b6a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802b6ac:	2b01      	cmp	r3, #1
 802b6ae:	d101      	bne.n	802b6b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802b6b0:	2302      	movs	r3, #2
 802b6b2:	e02d      	b.n	802b710 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802b6b4:	687b      	ldr	r3, [r7, #4]
 802b6b6:	2201      	movs	r2, #1
 802b6b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802b6bc:	687b      	ldr	r3, [r7, #4]
 802b6be:	2224      	movs	r2, #36	; 0x24
 802b6c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802b6c4:	687b      	ldr	r3, [r7, #4]
 802b6c6:	681b      	ldr	r3, [r3, #0]
 802b6c8:	681b      	ldr	r3, [r3, #0]
 802b6ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802b6cc:	687b      	ldr	r3, [r7, #4]
 802b6ce:	681b      	ldr	r3, [r3, #0]
 802b6d0:	681a      	ldr	r2, [r3, #0]
 802b6d2:	687b      	ldr	r3, [r7, #4]
 802b6d4:	681b      	ldr	r3, [r3, #0]
 802b6d6:	f022 0201 	bic.w	r2, r2, #1
 802b6da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802b6dc:	687b      	ldr	r3, [r7, #4]
 802b6de:	681b      	ldr	r3, [r3, #0]
 802b6e0:	689b      	ldr	r3, [r3, #8]
 802b6e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 802b6e6:	687b      	ldr	r3, [r7, #4]
 802b6e8:	681b      	ldr	r3, [r3, #0]
 802b6ea:	683a      	ldr	r2, [r7, #0]
 802b6ec:	430a      	orrs	r2, r1
 802b6ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802b6f0:	6878      	ldr	r0, [r7, #4]
 802b6f2:	f000 f8ab 	bl	802b84c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802b6f6:	687b      	ldr	r3, [r7, #4]
 802b6f8:	681b      	ldr	r3, [r3, #0]
 802b6fa:	68fa      	ldr	r2, [r7, #12]
 802b6fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802b6fe:	687b      	ldr	r3, [r7, #4]
 802b700:	2220      	movs	r2, #32
 802b702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802b706:	687b      	ldr	r3, [r7, #4]
 802b708:	2200      	movs	r2, #0
 802b70a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802b70e:	2300      	movs	r3, #0
}
 802b710:	4618      	mov	r0, r3
 802b712:	3710      	adds	r7, #16
 802b714:	46bd      	mov	sp, r7
 802b716:	bd80      	pop	{r7, pc}

0802b718 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802b718:	b580      	push	{r7, lr}
 802b71a:	b084      	sub	sp, #16
 802b71c:	af00      	add	r7, sp, #0
 802b71e:	6078      	str	r0, [r7, #4]
 802b720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802b722:	687b      	ldr	r3, [r7, #4]
 802b724:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802b728:	2b01      	cmp	r3, #1
 802b72a:	d101      	bne.n	802b730 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802b72c:	2302      	movs	r3, #2
 802b72e:	e02d      	b.n	802b78c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802b730:	687b      	ldr	r3, [r7, #4]
 802b732:	2201      	movs	r2, #1
 802b734:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802b738:	687b      	ldr	r3, [r7, #4]
 802b73a:	2224      	movs	r2, #36	; 0x24
 802b73c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802b740:	687b      	ldr	r3, [r7, #4]
 802b742:	681b      	ldr	r3, [r3, #0]
 802b744:	681b      	ldr	r3, [r3, #0]
 802b746:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802b748:	687b      	ldr	r3, [r7, #4]
 802b74a:	681b      	ldr	r3, [r3, #0]
 802b74c:	681a      	ldr	r2, [r3, #0]
 802b74e:	687b      	ldr	r3, [r7, #4]
 802b750:	681b      	ldr	r3, [r3, #0]
 802b752:	f022 0201 	bic.w	r2, r2, #1
 802b756:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802b758:	687b      	ldr	r3, [r7, #4]
 802b75a:	681b      	ldr	r3, [r3, #0]
 802b75c:	689b      	ldr	r3, [r3, #8]
 802b75e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 802b762:	687b      	ldr	r3, [r7, #4]
 802b764:	681b      	ldr	r3, [r3, #0]
 802b766:	683a      	ldr	r2, [r7, #0]
 802b768:	430a      	orrs	r2, r1
 802b76a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802b76c:	6878      	ldr	r0, [r7, #4]
 802b76e:	f000 f86d 	bl	802b84c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802b772:	687b      	ldr	r3, [r7, #4]
 802b774:	681b      	ldr	r3, [r3, #0]
 802b776:	68fa      	ldr	r2, [r7, #12]
 802b778:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802b77a:	687b      	ldr	r3, [r7, #4]
 802b77c:	2220      	movs	r2, #32
 802b77e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802b782:	687b      	ldr	r3, [r7, #4]
 802b784:	2200      	movs	r2, #0
 802b786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802b78a:	2300      	movs	r3, #0
}
 802b78c:	4618      	mov	r0, r3
 802b78e:	3710      	adds	r7, #16
 802b790:	46bd      	mov	sp, r7
 802b792:	bd80      	pop	{r7, pc}

0802b794 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802b794:	b580      	push	{r7, lr}
 802b796:	b08c      	sub	sp, #48	; 0x30
 802b798:	af00      	add	r7, sp, #0
 802b79a:	60f8      	str	r0, [r7, #12]
 802b79c:	60b9      	str	r1, [r7, #8]
 802b79e:	4613      	mov	r3, r2
 802b7a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802b7a2:	68fb      	ldr	r3, [r7, #12]
 802b7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802b7a8:	2b20      	cmp	r3, #32
 802b7aa:	d14a      	bne.n	802b842 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 802b7ac:	68bb      	ldr	r3, [r7, #8]
 802b7ae:	2b00      	cmp	r3, #0
 802b7b0:	d002      	beq.n	802b7b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 802b7b2:	88fb      	ldrh	r3, [r7, #6]
 802b7b4:	2b00      	cmp	r3, #0
 802b7b6:	d101      	bne.n	802b7bc <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 802b7b8:	2301      	movs	r3, #1
 802b7ba:	e043      	b.n	802b844 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 802b7bc:	68fb      	ldr	r3, [r7, #12]
 802b7be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802b7c2:	2b01      	cmp	r3, #1
 802b7c4:	d101      	bne.n	802b7ca <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 802b7c6:	2302      	movs	r3, #2
 802b7c8:	e03c      	b.n	802b844 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 802b7ca:	68fb      	ldr	r3, [r7, #12]
 802b7cc:	2201      	movs	r2, #1
 802b7ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 802b7d2:	68fb      	ldr	r3, [r7, #12]
 802b7d4:	2201      	movs	r2, #1
 802b7d6:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 802b7d8:	88fb      	ldrh	r3, [r7, #6]
 802b7da:	461a      	mov	r2, r3
 802b7dc:	68b9      	ldr	r1, [r7, #8]
 802b7de:	68f8      	ldr	r0, [r7, #12]
 802b7e0:	f7ff fc2e 	bl	802b040 <UART_Start_Receive_DMA>
 802b7e4:	4603      	mov	r3, r0
 802b7e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 802b7ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b7ee:	2b00      	cmp	r3, #0
 802b7f0:	d124      	bne.n	802b83c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802b7f2:	68fb      	ldr	r3, [r7, #12]
 802b7f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802b7f6:	2b01      	cmp	r3, #1
 802b7f8:	d11d      	bne.n	802b836 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 802b7fa:	68fb      	ldr	r3, [r7, #12]
 802b7fc:	681b      	ldr	r3, [r3, #0]
 802b7fe:	2210      	movs	r2, #16
 802b800:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802b802:	68fb      	ldr	r3, [r7, #12]
 802b804:	681b      	ldr	r3, [r3, #0]
 802b806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b808:	69bb      	ldr	r3, [r7, #24]
 802b80a:	e853 3f00 	ldrex	r3, [r3]
 802b80e:	617b      	str	r3, [r7, #20]
   return(result);
 802b810:	697b      	ldr	r3, [r7, #20]
 802b812:	f043 0310 	orr.w	r3, r3, #16
 802b816:	62bb      	str	r3, [r7, #40]	; 0x28
 802b818:	68fb      	ldr	r3, [r7, #12]
 802b81a:	681b      	ldr	r3, [r3, #0]
 802b81c:	461a      	mov	r2, r3
 802b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b820:	627b      	str	r3, [r7, #36]	; 0x24
 802b822:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b824:	6a39      	ldr	r1, [r7, #32]
 802b826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b828:	e841 2300 	strex	r3, r2, [r1]
 802b82c:	61fb      	str	r3, [r7, #28]
   return(result);
 802b82e:	69fb      	ldr	r3, [r7, #28]
 802b830:	2b00      	cmp	r3, #0
 802b832:	d1e6      	bne.n	802b802 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 802b834:	e002      	b.n	802b83c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 802b836:	2301      	movs	r3, #1
 802b838:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 802b83c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b840:	e000      	b.n	802b844 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 802b842:	2302      	movs	r3, #2
  }
}
 802b844:	4618      	mov	r0, r3
 802b846:	3730      	adds	r7, #48	; 0x30
 802b848:	46bd      	mov	sp, r7
 802b84a:	bd80      	pop	{r7, pc}

0802b84c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 802b84c:	b480      	push	{r7}
 802b84e:	b085      	sub	sp, #20
 802b850:	af00      	add	r7, sp, #0
 802b852:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 802b854:	687b      	ldr	r3, [r7, #4]
 802b856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b858:	2b00      	cmp	r3, #0
 802b85a:	d108      	bne.n	802b86e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 802b85c:	687b      	ldr	r3, [r7, #4]
 802b85e:	2201      	movs	r2, #1
 802b860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 802b864:	687b      	ldr	r3, [r7, #4]
 802b866:	2201      	movs	r2, #1
 802b868:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 802b86c:	e031      	b.n	802b8d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 802b86e:	2310      	movs	r3, #16
 802b870:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802b872:	2310      	movs	r3, #16
 802b874:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802b876:	687b      	ldr	r3, [r7, #4]
 802b878:	681b      	ldr	r3, [r3, #0]
 802b87a:	689b      	ldr	r3, [r3, #8]
 802b87c:	0e5b      	lsrs	r3, r3, #25
 802b87e:	b2db      	uxtb	r3, r3
 802b880:	f003 0307 	and.w	r3, r3, #7
 802b884:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802b886:	687b      	ldr	r3, [r7, #4]
 802b888:	681b      	ldr	r3, [r3, #0]
 802b88a:	689b      	ldr	r3, [r3, #8]
 802b88c:	0f5b      	lsrs	r3, r3, #29
 802b88e:	b2db      	uxtb	r3, r3
 802b890:	f003 0307 	and.w	r3, r3, #7
 802b894:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802b896:	7bbb      	ldrb	r3, [r7, #14]
 802b898:	7b3a      	ldrb	r2, [r7, #12]
 802b89a:	4911      	ldr	r1, [pc, #68]	; (802b8e0 <UARTEx_SetNbDataToProcess+0x94>)
 802b89c:	5c8a      	ldrb	r2, [r1, r2]
 802b89e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802b8a2:	7b3a      	ldrb	r2, [r7, #12]
 802b8a4:	490f      	ldr	r1, [pc, #60]	; (802b8e4 <UARTEx_SetNbDataToProcess+0x98>)
 802b8a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802b8a8:	fb93 f3f2 	sdiv	r3, r3, r2
 802b8ac:	b29a      	uxth	r2, r3
 802b8ae:	687b      	ldr	r3, [r7, #4]
 802b8b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802b8b4:	7bfb      	ldrb	r3, [r7, #15]
 802b8b6:	7b7a      	ldrb	r2, [r7, #13]
 802b8b8:	4909      	ldr	r1, [pc, #36]	; (802b8e0 <UARTEx_SetNbDataToProcess+0x94>)
 802b8ba:	5c8a      	ldrb	r2, [r1, r2]
 802b8bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 802b8c0:	7b7a      	ldrb	r2, [r7, #13]
 802b8c2:	4908      	ldr	r1, [pc, #32]	; (802b8e4 <UARTEx_SetNbDataToProcess+0x98>)
 802b8c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802b8c6:	fb93 f3f2 	sdiv	r3, r3, r2
 802b8ca:	b29a      	uxth	r2, r3
 802b8cc:	687b      	ldr	r3, [r7, #4]
 802b8ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 802b8d2:	bf00      	nop
 802b8d4:	3714      	adds	r7, #20
 802b8d6:	46bd      	mov	sp, r7
 802b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8dc:	4770      	bx	lr
 802b8de:	bf00      	nop
 802b8e0:	0803b8c0 	.word	0x0803b8c0
 802b8e4:	0803b8c8 	.word	0x0803b8c8

0802b8e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802b8e8:	b084      	sub	sp, #16
 802b8ea:	b580      	push	{r7, lr}
 802b8ec:	b084      	sub	sp, #16
 802b8ee:	af00      	add	r7, sp, #0
 802b8f0:	6078      	str	r0, [r7, #4]
 802b8f2:	f107 001c 	add.w	r0, r7, #28
 802b8f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b8fc:	2b01      	cmp	r3, #1
 802b8fe:	d120      	bne.n	802b942 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802b900:	687b      	ldr	r3, [r7, #4]
 802b902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b904:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802b908:	687b      	ldr	r3, [r7, #4]
 802b90a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802b90c:	687b      	ldr	r3, [r7, #4]
 802b90e:	68da      	ldr	r2, [r3, #12]
 802b910:	4b2a      	ldr	r3, [pc, #168]	; (802b9bc <USB_CoreInit+0xd4>)
 802b912:	4013      	ands	r3, r2
 802b914:	687a      	ldr	r2, [r7, #4]
 802b916:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802b918:	687b      	ldr	r3, [r7, #4]
 802b91a:	68db      	ldr	r3, [r3, #12]
 802b91c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802b920:	687b      	ldr	r3, [r7, #4]
 802b922:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802b924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b926:	2b01      	cmp	r3, #1
 802b928:	d105      	bne.n	802b936 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802b92a:	687b      	ldr	r3, [r7, #4]
 802b92c:	68db      	ldr	r3, [r3, #12]
 802b92e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802b932:	687b      	ldr	r3, [r7, #4]
 802b934:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802b936:	6878      	ldr	r0, [r7, #4]
 802b938:	f000 f9ce 	bl	802bcd8 <USB_CoreReset>
 802b93c:	4603      	mov	r3, r0
 802b93e:	73fb      	strb	r3, [r7, #15]
 802b940:	e01a      	b.n	802b978 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802b942:	687b      	ldr	r3, [r7, #4]
 802b944:	68db      	ldr	r3, [r3, #12]
 802b946:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802b94a:	687b      	ldr	r3, [r7, #4]
 802b94c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802b94e:	6878      	ldr	r0, [r7, #4]
 802b950:	f000 f9c2 	bl	802bcd8 <USB_CoreReset>
 802b954:	4603      	mov	r3, r0
 802b956:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802b958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b95a:	2b00      	cmp	r3, #0
 802b95c:	d106      	bne.n	802b96c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802b95e:	687b      	ldr	r3, [r7, #4]
 802b960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b962:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802b966:	687b      	ldr	r3, [r7, #4]
 802b968:	639a      	str	r2, [r3, #56]	; 0x38
 802b96a:	e005      	b.n	802b978 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802b96c:	687b      	ldr	r3, [r7, #4]
 802b96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802b974:	687b      	ldr	r3, [r7, #4]
 802b976:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b97a:	2b01      	cmp	r3, #1
 802b97c:	d116      	bne.n	802b9ac <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 802b97e:	687b      	ldr	r3, [r7, #4]
 802b980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802b982:	b29a      	uxth	r2, r3
 802b984:	687b      	ldr	r3, [r7, #4]
 802b986:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 802b988:	687b      	ldr	r3, [r7, #4]
 802b98a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802b98c:	4b0c      	ldr	r3, [pc, #48]	; (802b9c0 <USB_CoreInit+0xd8>)
 802b98e:	4313      	orrs	r3, r2
 802b990:	687a      	ldr	r2, [r7, #4]
 802b992:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802b994:	687b      	ldr	r3, [r7, #4]
 802b996:	689b      	ldr	r3, [r3, #8]
 802b998:	f043 0206 	orr.w	r2, r3, #6
 802b99c:	687b      	ldr	r3, [r7, #4]
 802b99e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802b9a0:	687b      	ldr	r3, [r7, #4]
 802b9a2:	689b      	ldr	r3, [r3, #8]
 802b9a4:	f043 0220 	orr.w	r2, r3, #32
 802b9a8:	687b      	ldr	r3, [r7, #4]
 802b9aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802b9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 802b9ae:	4618      	mov	r0, r3
 802b9b0:	3710      	adds	r7, #16
 802b9b2:	46bd      	mov	sp, r7
 802b9b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802b9b8:	b004      	add	sp, #16
 802b9ba:	4770      	bx	lr
 802b9bc:	ffbdffbf 	.word	0xffbdffbf
 802b9c0:	03ee0000 	.word	0x03ee0000

0802b9c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802b9c4:	b480      	push	{r7}
 802b9c6:	b083      	sub	sp, #12
 802b9c8:	af00      	add	r7, sp, #0
 802b9ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802b9cc:	687b      	ldr	r3, [r7, #4]
 802b9ce:	689b      	ldr	r3, [r3, #8]
 802b9d0:	f043 0201 	orr.w	r2, r3, #1
 802b9d4:	687b      	ldr	r3, [r7, #4]
 802b9d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802b9d8:	2300      	movs	r3, #0
}
 802b9da:	4618      	mov	r0, r3
 802b9dc:	370c      	adds	r7, #12
 802b9de:	46bd      	mov	sp, r7
 802b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b9e4:	4770      	bx	lr

0802b9e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802b9e6:	b480      	push	{r7}
 802b9e8:	b083      	sub	sp, #12
 802b9ea:	af00      	add	r7, sp, #0
 802b9ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802b9ee:	687b      	ldr	r3, [r7, #4]
 802b9f0:	689b      	ldr	r3, [r3, #8]
 802b9f2:	f023 0201 	bic.w	r2, r3, #1
 802b9f6:	687b      	ldr	r3, [r7, #4]
 802b9f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802b9fa:	2300      	movs	r3, #0
}
 802b9fc:	4618      	mov	r0, r3
 802b9fe:	370c      	adds	r7, #12
 802ba00:	46bd      	mov	sp, r7
 802ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba06:	4770      	bx	lr

0802ba08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802ba08:	b580      	push	{r7, lr}
 802ba0a:	b084      	sub	sp, #16
 802ba0c:	af00      	add	r7, sp, #0
 802ba0e:	6078      	str	r0, [r7, #4]
 802ba10:	460b      	mov	r3, r1
 802ba12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802ba14:	2300      	movs	r3, #0
 802ba16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802ba18:	687b      	ldr	r3, [r7, #4]
 802ba1a:	68db      	ldr	r3, [r3, #12]
 802ba1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802ba20:	687b      	ldr	r3, [r7, #4]
 802ba22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802ba24:	78fb      	ldrb	r3, [r7, #3]
 802ba26:	2b01      	cmp	r3, #1
 802ba28:	d115      	bne.n	802ba56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802ba2a:	687b      	ldr	r3, [r7, #4]
 802ba2c:	68db      	ldr	r3, [r3, #12]
 802ba2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802ba32:	687b      	ldr	r3, [r7, #4]
 802ba34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802ba36:	2001      	movs	r0, #1
 802ba38:	f7f6 fb3e 	bl	80220b8 <HAL_Delay>
      ms++;
 802ba3c:	68fb      	ldr	r3, [r7, #12]
 802ba3e:	3301      	adds	r3, #1
 802ba40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802ba42:	6878      	ldr	r0, [r7, #4]
 802ba44:	f000 f939 	bl	802bcba <USB_GetMode>
 802ba48:	4603      	mov	r3, r0
 802ba4a:	2b01      	cmp	r3, #1
 802ba4c:	d01e      	beq.n	802ba8c <USB_SetCurrentMode+0x84>
 802ba4e:	68fb      	ldr	r3, [r7, #12]
 802ba50:	2b31      	cmp	r3, #49	; 0x31
 802ba52:	d9f0      	bls.n	802ba36 <USB_SetCurrentMode+0x2e>
 802ba54:	e01a      	b.n	802ba8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802ba56:	78fb      	ldrb	r3, [r7, #3]
 802ba58:	2b00      	cmp	r3, #0
 802ba5a:	d115      	bne.n	802ba88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802ba5c:	687b      	ldr	r3, [r7, #4]
 802ba5e:	68db      	ldr	r3, [r3, #12]
 802ba60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802ba64:	687b      	ldr	r3, [r7, #4]
 802ba66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802ba68:	2001      	movs	r0, #1
 802ba6a:	f7f6 fb25 	bl	80220b8 <HAL_Delay>
      ms++;
 802ba6e:	68fb      	ldr	r3, [r7, #12]
 802ba70:	3301      	adds	r3, #1
 802ba72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802ba74:	6878      	ldr	r0, [r7, #4]
 802ba76:	f000 f920 	bl	802bcba <USB_GetMode>
 802ba7a:	4603      	mov	r3, r0
 802ba7c:	2b00      	cmp	r3, #0
 802ba7e:	d005      	beq.n	802ba8c <USB_SetCurrentMode+0x84>
 802ba80:	68fb      	ldr	r3, [r7, #12]
 802ba82:	2b31      	cmp	r3, #49	; 0x31
 802ba84:	d9f0      	bls.n	802ba68 <USB_SetCurrentMode+0x60>
 802ba86:	e001      	b.n	802ba8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802ba88:	2301      	movs	r3, #1
 802ba8a:	e005      	b.n	802ba98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802ba8c:	68fb      	ldr	r3, [r7, #12]
 802ba8e:	2b32      	cmp	r3, #50	; 0x32
 802ba90:	d101      	bne.n	802ba96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802ba92:	2301      	movs	r3, #1
 802ba94:	e000      	b.n	802ba98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802ba96:	2300      	movs	r3, #0
}
 802ba98:	4618      	mov	r0, r3
 802ba9a:	3710      	adds	r7, #16
 802ba9c:	46bd      	mov	sp, r7
 802ba9e:	bd80      	pop	{r7, pc}

0802baa0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802baa0:	b480      	push	{r7}
 802baa2:	b085      	sub	sp, #20
 802baa4:	af00      	add	r7, sp, #0
 802baa6:	6078      	str	r0, [r7, #4]
 802baa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802baaa:	2300      	movs	r3, #0
 802baac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802baae:	68fb      	ldr	r3, [r7, #12]
 802bab0:	3301      	adds	r3, #1
 802bab2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802bab4:	68fb      	ldr	r3, [r7, #12]
 802bab6:	4a13      	ldr	r2, [pc, #76]	; (802bb04 <USB_FlushTxFifo+0x64>)
 802bab8:	4293      	cmp	r3, r2
 802baba:	d901      	bls.n	802bac0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802babc:	2303      	movs	r3, #3
 802babe:	e01b      	b.n	802baf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802bac0:	687b      	ldr	r3, [r7, #4]
 802bac2:	691b      	ldr	r3, [r3, #16]
 802bac4:	2b00      	cmp	r3, #0
 802bac6:	daf2      	bge.n	802baae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802bac8:	2300      	movs	r3, #0
 802baca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802bacc:	683b      	ldr	r3, [r7, #0]
 802bace:	019b      	lsls	r3, r3, #6
 802bad0:	f043 0220 	orr.w	r2, r3, #32
 802bad4:	687b      	ldr	r3, [r7, #4]
 802bad6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802bad8:	68fb      	ldr	r3, [r7, #12]
 802bada:	3301      	adds	r3, #1
 802badc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802bade:	68fb      	ldr	r3, [r7, #12]
 802bae0:	4a08      	ldr	r2, [pc, #32]	; (802bb04 <USB_FlushTxFifo+0x64>)
 802bae2:	4293      	cmp	r3, r2
 802bae4:	d901      	bls.n	802baea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802bae6:	2303      	movs	r3, #3
 802bae8:	e006      	b.n	802baf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802baea:	687b      	ldr	r3, [r7, #4]
 802baec:	691b      	ldr	r3, [r3, #16]
 802baee:	f003 0320 	and.w	r3, r3, #32
 802baf2:	2b20      	cmp	r3, #32
 802baf4:	d0f0      	beq.n	802bad8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802baf6:	2300      	movs	r3, #0
}
 802baf8:	4618      	mov	r0, r3
 802bafa:	3714      	adds	r7, #20
 802bafc:	46bd      	mov	sp, r7
 802bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb02:	4770      	bx	lr
 802bb04:	00030d40 	.word	0x00030d40

0802bb08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802bb08:	b480      	push	{r7}
 802bb0a:	b085      	sub	sp, #20
 802bb0c:	af00      	add	r7, sp, #0
 802bb0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802bb10:	2300      	movs	r3, #0
 802bb12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802bb14:	68fb      	ldr	r3, [r7, #12]
 802bb16:	3301      	adds	r3, #1
 802bb18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802bb1a:	68fb      	ldr	r3, [r7, #12]
 802bb1c:	4a11      	ldr	r2, [pc, #68]	; (802bb64 <USB_FlushRxFifo+0x5c>)
 802bb1e:	4293      	cmp	r3, r2
 802bb20:	d901      	bls.n	802bb26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802bb22:	2303      	movs	r3, #3
 802bb24:	e018      	b.n	802bb58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802bb26:	687b      	ldr	r3, [r7, #4]
 802bb28:	691b      	ldr	r3, [r3, #16]
 802bb2a:	2b00      	cmp	r3, #0
 802bb2c:	daf2      	bge.n	802bb14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802bb2e:	2300      	movs	r3, #0
 802bb30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802bb32:	687b      	ldr	r3, [r7, #4]
 802bb34:	2210      	movs	r2, #16
 802bb36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802bb38:	68fb      	ldr	r3, [r7, #12]
 802bb3a:	3301      	adds	r3, #1
 802bb3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802bb3e:	68fb      	ldr	r3, [r7, #12]
 802bb40:	4a08      	ldr	r2, [pc, #32]	; (802bb64 <USB_FlushRxFifo+0x5c>)
 802bb42:	4293      	cmp	r3, r2
 802bb44:	d901      	bls.n	802bb4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802bb46:	2303      	movs	r3, #3
 802bb48:	e006      	b.n	802bb58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802bb4a:	687b      	ldr	r3, [r7, #4]
 802bb4c:	691b      	ldr	r3, [r3, #16]
 802bb4e:	f003 0310 	and.w	r3, r3, #16
 802bb52:	2b10      	cmp	r3, #16
 802bb54:	d0f0      	beq.n	802bb38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802bb56:	2300      	movs	r3, #0
}
 802bb58:	4618      	mov	r0, r3
 802bb5a:	3714      	adds	r7, #20
 802bb5c:	46bd      	mov	sp, r7
 802bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb62:	4770      	bx	lr
 802bb64:	00030d40 	.word	0x00030d40

0802bb68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802bb68:	b480      	push	{r7}
 802bb6a:	b089      	sub	sp, #36	; 0x24
 802bb6c:	af00      	add	r7, sp, #0
 802bb6e:	60f8      	str	r0, [r7, #12]
 802bb70:	60b9      	str	r1, [r7, #8]
 802bb72:	4611      	mov	r1, r2
 802bb74:	461a      	mov	r2, r3
 802bb76:	460b      	mov	r3, r1
 802bb78:	71fb      	strb	r3, [r7, #7]
 802bb7a:	4613      	mov	r3, r2
 802bb7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802bb7e:	68fb      	ldr	r3, [r7, #12]
 802bb80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802bb82:	68bb      	ldr	r3, [r7, #8]
 802bb84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802bb86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802bb8a:	2b00      	cmp	r3, #0
 802bb8c:	d123      	bne.n	802bbd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802bb8e:	88bb      	ldrh	r3, [r7, #4]
 802bb90:	3303      	adds	r3, #3
 802bb92:	089b      	lsrs	r3, r3, #2
 802bb94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802bb96:	2300      	movs	r3, #0
 802bb98:	61bb      	str	r3, [r7, #24]
 802bb9a:	e018      	b.n	802bbce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802bb9c:	79fb      	ldrb	r3, [r7, #7]
 802bb9e:	031a      	lsls	r2, r3, #12
 802bba0:	697b      	ldr	r3, [r7, #20]
 802bba2:	4413      	add	r3, r2
 802bba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802bba8:	461a      	mov	r2, r3
 802bbaa:	69fb      	ldr	r3, [r7, #28]
 802bbac:	681b      	ldr	r3, [r3, #0]
 802bbae:	6013      	str	r3, [r2, #0]
      pSrc++;
 802bbb0:	69fb      	ldr	r3, [r7, #28]
 802bbb2:	3301      	adds	r3, #1
 802bbb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802bbb6:	69fb      	ldr	r3, [r7, #28]
 802bbb8:	3301      	adds	r3, #1
 802bbba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802bbbc:	69fb      	ldr	r3, [r7, #28]
 802bbbe:	3301      	adds	r3, #1
 802bbc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802bbc2:	69fb      	ldr	r3, [r7, #28]
 802bbc4:	3301      	adds	r3, #1
 802bbc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802bbc8:	69bb      	ldr	r3, [r7, #24]
 802bbca:	3301      	adds	r3, #1
 802bbcc:	61bb      	str	r3, [r7, #24]
 802bbce:	69ba      	ldr	r2, [r7, #24]
 802bbd0:	693b      	ldr	r3, [r7, #16]
 802bbd2:	429a      	cmp	r2, r3
 802bbd4:	d3e2      	bcc.n	802bb9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802bbd6:	2300      	movs	r3, #0
}
 802bbd8:	4618      	mov	r0, r3
 802bbda:	3724      	adds	r7, #36	; 0x24
 802bbdc:	46bd      	mov	sp, r7
 802bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bbe2:	4770      	bx	lr

0802bbe4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802bbe4:	b480      	push	{r7}
 802bbe6:	b08b      	sub	sp, #44	; 0x2c
 802bbe8:	af00      	add	r7, sp, #0
 802bbea:	60f8      	str	r0, [r7, #12]
 802bbec:	60b9      	str	r1, [r7, #8]
 802bbee:	4613      	mov	r3, r2
 802bbf0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802bbf2:	68fb      	ldr	r3, [r7, #12]
 802bbf4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802bbf6:	68bb      	ldr	r3, [r7, #8]
 802bbf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802bbfa:	88fb      	ldrh	r3, [r7, #6]
 802bbfc:	089b      	lsrs	r3, r3, #2
 802bbfe:	b29b      	uxth	r3, r3
 802bc00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802bc02:	88fb      	ldrh	r3, [r7, #6]
 802bc04:	f003 0303 	and.w	r3, r3, #3
 802bc08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802bc0a:	2300      	movs	r3, #0
 802bc0c:	623b      	str	r3, [r7, #32]
 802bc0e:	e014      	b.n	802bc3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802bc10:	69bb      	ldr	r3, [r7, #24]
 802bc12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802bc16:	681a      	ldr	r2, [r3, #0]
 802bc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc1a:	601a      	str	r2, [r3, #0]
    pDest++;
 802bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc1e:	3301      	adds	r3, #1
 802bc20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc24:	3301      	adds	r3, #1
 802bc26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc2a:	3301      	adds	r3, #1
 802bc2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc30:	3301      	adds	r3, #1
 802bc32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802bc34:	6a3b      	ldr	r3, [r7, #32]
 802bc36:	3301      	adds	r3, #1
 802bc38:	623b      	str	r3, [r7, #32]
 802bc3a:	6a3a      	ldr	r2, [r7, #32]
 802bc3c:	697b      	ldr	r3, [r7, #20]
 802bc3e:	429a      	cmp	r2, r3
 802bc40:	d3e6      	bcc.n	802bc10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802bc42:	8bfb      	ldrh	r3, [r7, #30]
 802bc44:	2b00      	cmp	r3, #0
 802bc46:	d01e      	beq.n	802bc86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802bc48:	2300      	movs	r3, #0
 802bc4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802bc4c:	69bb      	ldr	r3, [r7, #24]
 802bc4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802bc52:	461a      	mov	r2, r3
 802bc54:	f107 0310 	add.w	r3, r7, #16
 802bc58:	6812      	ldr	r2, [r2, #0]
 802bc5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802bc5c:	693a      	ldr	r2, [r7, #16]
 802bc5e:	6a3b      	ldr	r3, [r7, #32]
 802bc60:	b2db      	uxtb	r3, r3
 802bc62:	00db      	lsls	r3, r3, #3
 802bc64:	fa22 f303 	lsr.w	r3, r2, r3
 802bc68:	b2da      	uxtb	r2, r3
 802bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc6c:	701a      	strb	r2, [r3, #0]
      i++;
 802bc6e:	6a3b      	ldr	r3, [r7, #32]
 802bc70:	3301      	adds	r3, #1
 802bc72:	623b      	str	r3, [r7, #32]
      pDest++;
 802bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc76:	3301      	adds	r3, #1
 802bc78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802bc7a:	8bfb      	ldrh	r3, [r7, #30]
 802bc7c:	3b01      	subs	r3, #1
 802bc7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802bc80:	8bfb      	ldrh	r3, [r7, #30]
 802bc82:	2b00      	cmp	r3, #0
 802bc84:	d1ea      	bne.n	802bc5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802bc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802bc88:	4618      	mov	r0, r3
 802bc8a:	372c      	adds	r7, #44	; 0x2c
 802bc8c:	46bd      	mov	sp, r7
 802bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bc92:	4770      	bx	lr

0802bc94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802bc94:	b480      	push	{r7}
 802bc96:	b085      	sub	sp, #20
 802bc98:	af00      	add	r7, sp, #0
 802bc9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802bc9c:	687b      	ldr	r3, [r7, #4]
 802bc9e:	695b      	ldr	r3, [r3, #20]
 802bca0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802bca2:	687b      	ldr	r3, [r7, #4]
 802bca4:	699b      	ldr	r3, [r3, #24]
 802bca6:	68fa      	ldr	r2, [r7, #12]
 802bca8:	4013      	ands	r3, r2
 802bcaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802bcac:	68fb      	ldr	r3, [r7, #12]
}
 802bcae:	4618      	mov	r0, r3
 802bcb0:	3714      	adds	r7, #20
 802bcb2:	46bd      	mov	sp, r7
 802bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bcb8:	4770      	bx	lr

0802bcba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802bcba:	b480      	push	{r7}
 802bcbc:	b083      	sub	sp, #12
 802bcbe:	af00      	add	r7, sp, #0
 802bcc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802bcc2:	687b      	ldr	r3, [r7, #4]
 802bcc4:	695b      	ldr	r3, [r3, #20]
 802bcc6:	f003 0301 	and.w	r3, r3, #1
}
 802bcca:	4618      	mov	r0, r3
 802bccc:	370c      	adds	r7, #12
 802bcce:	46bd      	mov	sp, r7
 802bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bcd4:	4770      	bx	lr
	...

0802bcd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802bcd8:	b480      	push	{r7}
 802bcda:	b085      	sub	sp, #20
 802bcdc:	af00      	add	r7, sp, #0
 802bcde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802bce0:	2300      	movs	r3, #0
 802bce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802bce4:	68fb      	ldr	r3, [r7, #12]
 802bce6:	3301      	adds	r3, #1
 802bce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802bcea:	68fb      	ldr	r3, [r7, #12]
 802bcec:	4a13      	ldr	r2, [pc, #76]	; (802bd3c <USB_CoreReset+0x64>)
 802bcee:	4293      	cmp	r3, r2
 802bcf0:	d901      	bls.n	802bcf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802bcf2:	2303      	movs	r3, #3
 802bcf4:	e01b      	b.n	802bd2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802bcf6:	687b      	ldr	r3, [r7, #4]
 802bcf8:	691b      	ldr	r3, [r3, #16]
 802bcfa:	2b00      	cmp	r3, #0
 802bcfc:	daf2      	bge.n	802bce4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802bcfe:	2300      	movs	r3, #0
 802bd00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802bd02:	687b      	ldr	r3, [r7, #4]
 802bd04:	691b      	ldr	r3, [r3, #16]
 802bd06:	f043 0201 	orr.w	r2, r3, #1
 802bd0a:	687b      	ldr	r3, [r7, #4]
 802bd0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802bd0e:	68fb      	ldr	r3, [r7, #12]
 802bd10:	3301      	adds	r3, #1
 802bd12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802bd14:	68fb      	ldr	r3, [r7, #12]
 802bd16:	4a09      	ldr	r2, [pc, #36]	; (802bd3c <USB_CoreReset+0x64>)
 802bd18:	4293      	cmp	r3, r2
 802bd1a:	d901      	bls.n	802bd20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802bd1c:	2303      	movs	r3, #3
 802bd1e:	e006      	b.n	802bd2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802bd20:	687b      	ldr	r3, [r7, #4]
 802bd22:	691b      	ldr	r3, [r3, #16]
 802bd24:	f003 0301 	and.w	r3, r3, #1
 802bd28:	2b01      	cmp	r3, #1
 802bd2a:	d0f0      	beq.n	802bd0e <USB_CoreReset+0x36>

  return HAL_OK;
 802bd2c:	2300      	movs	r3, #0
}
 802bd2e:	4618      	mov	r0, r3
 802bd30:	3714      	adds	r7, #20
 802bd32:	46bd      	mov	sp, r7
 802bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bd38:	4770      	bx	lr
 802bd3a:	bf00      	nop
 802bd3c:	00030d40 	.word	0x00030d40

0802bd40 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802bd40:	b084      	sub	sp, #16
 802bd42:	b580      	push	{r7, lr}
 802bd44:	b086      	sub	sp, #24
 802bd46:	af00      	add	r7, sp, #0
 802bd48:	6078      	str	r0, [r7, #4]
 802bd4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802bd4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802bd52:	2300      	movs	r3, #0
 802bd54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802bd56:	687b      	ldr	r3, [r7, #4]
 802bd58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802bd5a:	68fb      	ldr	r3, [r7, #12]
 802bd5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802bd60:	461a      	mov	r2, r3
 802bd62:	2300      	movs	r3, #0
 802bd64:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 802bd66:	687b      	ldr	r3, [r7, #4]
 802bd68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bd6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 802bd6e:	687b      	ldr	r3, [r7, #4]
 802bd70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 802bd72:	687b      	ldr	r3, [r7, #4]
 802bd74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bd76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 802bd7a:	687b      	ldr	r3, [r7, #4]
 802bd7c:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 802bd7e:	687b      	ldr	r3, [r7, #4]
 802bd80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802bd82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802bd86:	2b00      	cmp	r3, #0
 802bd88:	d018      	beq.n	802bdbc <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 802bd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bd8c:	2b01      	cmp	r3, #1
 802bd8e:	d10a      	bne.n	802bda6 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 802bd90:	68fb      	ldr	r3, [r7, #12]
 802bd92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802bd96:	681b      	ldr	r3, [r3, #0]
 802bd98:	68fa      	ldr	r2, [r7, #12]
 802bd9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802bd9e:	f043 0304 	orr.w	r3, r3, #4
 802bda2:	6013      	str	r3, [r2, #0]
 802bda4:	e014      	b.n	802bdd0 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802bda6:	68fb      	ldr	r3, [r7, #12]
 802bda8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802bdac:	681b      	ldr	r3, [r3, #0]
 802bdae:	68fa      	ldr	r2, [r7, #12]
 802bdb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802bdb4:	f023 0304 	bic.w	r3, r3, #4
 802bdb8:	6013      	str	r3, [r2, #0]
 802bdba:	e009      	b.n	802bdd0 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802bdbc:	68fb      	ldr	r3, [r7, #12]
 802bdbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802bdc2:	681b      	ldr	r3, [r3, #0]
 802bdc4:	68fa      	ldr	r2, [r7, #12]
 802bdc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802bdca:	f023 0304 	bic.w	r3, r3, #4
 802bdce:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802bdd0:	2110      	movs	r1, #16
 802bdd2:	6878      	ldr	r0, [r7, #4]
 802bdd4:	f7ff fe64 	bl	802baa0 <USB_FlushTxFifo>
 802bdd8:	4603      	mov	r3, r0
 802bdda:	2b00      	cmp	r3, #0
 802bddc:	d001      	beq.n	802bde2 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 802bdde:	2301      	movs	r3, #1
 802bde0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802bde2:	6878      	ldr	r0, [r7, #4]
 802bde4:	f7ff fe90 	bl	802bb08 <USB_FlushRxFifo>
 802bde8:	4603      	mov	r3, r0
 802bdea:	2b00      	cmp	r3, #0
 802bdec:	d001      	beq.n	802bdf2 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 802bdee:	2301      	movs	r3, #1
 802bdf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802bdf2:	2300      	movs	r3, #0
 802bdf4:	613b      	str	r3, [r7, #16]
 802bdf6:	e015      	b.n	802be24 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802bdf8:	693b      	ldr	r3, [r7, #16]
 802bdfa:	015a      	lsls	r2, r3, #5
 802bdfc:	68fb      	ldr	r3, [r7, #12]
 802bdfe:	4413      	add	r3, r2
 802be00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802be04:	461a      	mov	r2, r3
 802be06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802be0a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 802be0c:	693b      	ldr	r3, [r7, #16]
 802be0e:	015a      	lsls	r2, r3, #5
 802be10:	68fb      	ldr	r3, [r7, #12]
 802be12:	4413      	add	r3, r2
 802be14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802be18:	461a      	mov	r2, r3
 802be1a:	2300      	movs	r3, #0
 802be1c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802be1e:	693b      	ldr	r3, [r7, #16]
 802be20:	3301      	adds	r3, #1
 802be22:	613b      	str	r3, [r7, #16]
 802be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802be26:	693a      	ldr	r2, [r7, #16]
 802be28:	429a      	cmp	r2, r3
 802be2a:	d3e5      	bcc.n	802bdf8 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802be2c:	687b      	ldr	r3, [r7, #4]
 802be2e:	2200      	movs	r2, #0
 802be30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802be32:	687b      	ldr	r3, [r7, #4]
 802be34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802be38:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802be3a:	687b      	ldr	r3, [r7, #4]
 802be3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802be3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802be42:	2b00      	cmp	r3, #0
 802be44:	d00b      	beq.n	802be5e <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802be46:	687b      	ldr	r3, [r7, #4]
 802be48:	f44f 7200 	mov.w	r2, #512	; 0x200
 802be4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802be4e:	687b      	ldr	r3, [r7, #4]
 802be50:	4a13      	ldr	r2, [pc, #76]	; (802bea0 <USB_HostInit+0x160>)
 802be52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802be54:	687b      	ldr	r3, [r7, #4]
 802be56:	4a13      	ldr	r2, [pc, #76]	; (802bea4 <USB_HostInit+0x164>)
 802be58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 802be5c:	e009      	b.n	802be72 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 802be5e:	687b      	ldr	r3, [r7, #4]
 802be60:	2280      	movs	r2, #128	; 0x80
 802be62:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802be64:	687b      	ldr	r3, [r7, #4]
 802be66:	4a10      	ldr	r2, [pc, #64]	; (802bea8 <USB_HostInit+0x168>)
 802be68:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802be6a:	687b      	ldr	r3, [r7, #4]
 802be6c:	4a0f      	ldr	r2, [pc, #60]	; (802beac <USB_HostInit+0x16c>)
 802be6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802be74:	2b00      	cmp	r3, #0
 802be76:	d105      	bne.n	802be84 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802be78:	687b      	ldr	r3, [r7, #4]
 802be7a:	699b      	ldr	r3, [r3, #24]
 802be7c:	f043 0210 	orr.w	r2, r3, #16
 802be80:	687b      	ldr	r3, [r7, #4]
 802be82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 802be84:	687b      	ldr	r3, [r7, #4]
 802be86:	699a      	ldr	r2, [r3, #24]
 802be88:	4b09      	ldr	r3, [pc, #36]	; (802beb0 <USB_HostInit+0x170>)
 802be8a:	4313      	orrs	r3, r2
 802be8c:	687a      	ldr	r2, [r7, #4]
 802be8e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 802be90:	7dfb      	ldrb	r3, [r7, #23]
}
 802be92:	4618      	mov	r0, r3
 802be94:	3718      	adds	r7, #24
 802be96:	46bd      	mov	sp, r7
 802be98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802be9c:	b004      	add	sp, #16
 802be9e:	4770      	bx	lr
 802bea0:	01000200 	.word	0x01000200
 802bea4:	00e00300 	.word	0x00e00300
 802bea8:	00600080 	.word	0x00600080
 802beac:	004000e0 	.word	0x004000e0
 802beb0:	a3200008 	.word	0xa3200008

0802beb4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 802beb4:	b480      	push	{r7}
 802beb6:	b085      	sub	sp, #20
 802beb8:	af00      	add	r7, sp, #0
 802beba:	6078      	str	r0, [r7, #4]
 802bebc:	460b      	mov	r3, r1
 802bebe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802bec0:	687b      	ldr	r3, [r7, #4]
 802bec2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 802bec4:	68fb      	ldr	r3, [r7, #12]
 802bec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802beca:	681b      	ldr	r3, [r3, #0]
 802becc:	68fa      	ldr	r2, [r7, #12]
 802bece:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802bed2:	f023 0303 	bic.w	r3, r3, #3
 802bed6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 802bed8:	68fb      	ldr	r3, [r7, #12]
 802beda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802bede:	681a      	ldr	r2, [r3, #0]
 802bee0:	78fb      	ldrb	r3, [r7, #3]
 802bee2:	f003 0303 	and.w	r3, r3, #3
 802bee6:	68f9      	ldr	r1, [r7, #12]
 802bee8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802beec:	4313      	orrs	r3, r2
 802beee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802bef0:	78fb      	ldrb	r3, [r7, #3]
 802bef2:	2b01      	cmp	r3, #1
 802bef4:	d107      	bne.n	802bf06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802bef6:	68fb      	ldr	r3, [r7, #12]
 802bef8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802befc:	461a      	mov	r2, r3
 802befe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802bf02:	6053      	str	r3, [r2, #4]
 802bf04:	e009      	b.n	802bf1a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802bf06:	78fb      	ldrb	r3, [r7, #3]
 802bf08:	2b02      	cmp	r3, #2
 802bf0a:	d106      	bne.n	802bf1a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 802bf0c:	68fb      	ldr	r3, [r7, #12]
 802bf0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802bf12:	461a      	mov	r2, r3
 802bf14:	f241 7370 	movw	r3, #6000	; 0x1770
 802bf18:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802bf1a:	2300      	movs	r3, #0
}
 802bf1c:	4618      	mov	r0, r3
 802bf1e:	3714      	adds	r7, #20
 802bf20:	46bd      	mov	sp, r7
 802bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bf26:	4770      	bx	lr

0802bf28 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802bf28:	b580      	push	{r7, lr}
 802bf2a:	b084      	sub	sp, #16
 802bf2c:	af00      	add	r7, sp, #0
 802bf2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802bf30:	687b      	ldr	r3, [r7, #4]
 802bf32:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 802bf34:	2300      	movs	r3, #0
 802bf36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802bf38:	68fb      	ldr	r3, [r7, #12]
 802bf3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802bf3e:	681b      	ldr	r3, [r3, #0]
 802bf40:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802bf42:	68bb      	ldr	r3, [r7, #8]
 802bf44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802bf48:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802bf4a:	68bb      	ldr	r3, [r7, #8]
 802bf4c:	68fa      	ldr	r2, [r7, #12]
 802bf4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802bf52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802bf56:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802bf58:	2064      	movs	r0, #100	; 0x64
 802bf5a:	f7f6 f8ad 	bl	80220b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 802bf5e:	68bb      	ldr	r3, [r7, #8]
 802bf60:	68fa      	ldr	r2, [r7, #12]
 802bf62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802bf66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802bf6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 802bf6c:	200a      	movs	r0, #10
 802bf6e:	f7f6 f8a3 	bl	80220b8 <HAL_Delay>

  return HAL_OK;
 802bf72:	2300      	movs	r3, #0
}
 802bf74:	4618      	mov	r0, r3
 802bf76:	3710      	adds	r7, #16
 802bf78:	46bd      	mov	sp, r7
 802bf7a:	bd80      	pop	{r7, pc}

0802bf7c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 802bf7c:	b480      	push	{r7}
 802bf7e:	b085      	sub	sp, #20
 802bf80:	af00      	add	r7, sp, #0
 802bf82:	6078      	str	r0, [r7, #4]
 802bf84:	460b      	mov	r3, r1
 802bf86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802bf88:	687b      	ldr	r3, [r7, #4]
 802bf8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802bf8c:	2300      	movs	r3, #0
 802bf8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802bf90:	68fb      	ldr	r3, [r7, #12]
 802bf92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802bf96:	681b      	ldr	r3, [r3, #0]
 802bf98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802bf9a:	68bb      	ldr	r3, [r7, #8]
 802bf9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802bfa0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 802bfa2:	68bb      	ldr	r3, [r7, #8]
 802bfa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802bfa8:	2b00      	cmp	r3, #0
 802bfaa:	d109      	bne.n	802bfc0 <USB_DriveVbus+0x44>
 802bfac:	78fb      	ldrb	r3, [r7, #3]
 802bfae:	2b01      	cmp	r3, #1
 802bfb0:	d106      	bne.n	802bfc0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 802bfb2:	68bb      	ldr	r3, [r7, #8]
 802bfb4:	68fa      	ldr	r2, [r7, #12]
 802bfb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802bfba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802bfbe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802bfc0:	68bb      	ldr	r3, [r7, #8]
 802bfc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802bfc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802bfca:	d109      	bne.n	802bfe0 <USB_DriveVbus+0x64>
 802bfcc:	78fb      	ldrb	r3, [r7, #3]
 802bfce:	2b00      	cmp	r3, #0
 802bfd0:	d106      	bne.n	802bfe0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802bfd2:	68bb      	ldr	r3, [r7, #8]
 802bfd4:	68fa      	ldr	r2, [r7, #12]
 802bfd6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802bfda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802bfde:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802bfe0:	2300      	movs	r3, #0
}
 802bfe2:	4618      	mov	r0, r3
 802bfe4:	3714      	adds	r7, #20
 802bfe6:	46bd      	mov	sp, r7
 802bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bfec:	4770      	bx	lr

0802bfee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802bfee:	b480      	push	{r7}
 802bff0:	b085      	sub	sp, #20
 802bff2:	af00      	add	r7, sp, #0
 802bff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802bff6:	687b      	ldr	r3, [r7, #4]
 802bff8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802bffa:	2300      	movs	r3, #0
 802bffc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802bffe:	68fb      	ldr	r3, [r7, #12]
 802c000:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802c004:	681b      	ldr	r3, [r3, #0]
 802c006:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802c008:	68bb      	ldr	r3, [r7, #8]
 802c00a:	0c5b      	lsrs	r3, r3, #17
 802c00c:	f003 0303 	and.w	r3, r3, #3
}
 802c010:	4618      	mov	r0, r3
 802c012:	3714      	adds	r7, #20
 802c014:	46bd      	mov	sp, r7
 802c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c01a:	4770      	bx	lr

0802c01c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 802c01c:	b480      	push	{r7}
 802c01e:	b085      	sub	sp, #20
 802c020:	af00      	add	r7, sp, #0
 802c022:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c024:	687b      	ldr	r3, [r7, #4]
 802c026:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802c028:	68fb      	ldr	r3, [r7, #12]
 802c02a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c02e:	689b      	ldr	r3, [r3, #8]
 802c030:	b29b      	uxth	r3, r3
}
 802c032:	4618      	mov	r0, r3
 802c034:	3714      	adds	r7, #20
 802c036:	46bd      	mov	sp, r7
 802c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c03c:	4770      	bx	lr
	...

0802c040 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802c040:	b580      	push	{r7, lr}
 802c042:	b088      	sub	sp, #32
 802c044:	af00      	add	r7, sp, #0
 802c046:	6078      	str	r0, [r7, #4]
 802c048:	4608      	mov	r0, r1
 802c04a:	4611      	mov	r1, r2
 802c04c:	461a      	mov	r2, r3
 802c04e:	4603      	mov	r3, r0
 802c050:	70fb      	strb	r3, [r7, #3]
 802c052:	460b      	mov	r3, r1
 802c054:	70bb      	strb	r3, [r7, #2]
 802c056:	4613      	mov	r3, r2
 802c058:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802c05a:	2300      	movs	r3, #0
 802c05c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c05e:	687b      	ldr	r3, [r7, #4]
 802c060:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 802c062:	78fb      	ldrb	r3, [r7, #3]
 802c064:	015a      	lsls	r2, r3, #5
 802c066:	693b      	ldr	r3, [r7, #16]
 802c068:	4413      	add	r3, r2
 802c06a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c06e:	461a      	mov	r2, r3
 802c070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802c074:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802c076:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802c07a:	2b03      	cmp	r3, #3
 802c07c:	d87e      	bhi.n	802c17c <USB_HC_Init+0x13c>
 802c07e:	a201      	add	r2, pc, #4	; (adr r2, 802c084 <USB_HC_Init+0x44>)
 802c080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c084:	0802c095 	.word	0x0802c095
 802c088:	0802c13f 	.word	0x0802c13f
 802c08c:	0802c095 	.word	0x0802c095
 802c090:	0802c101 	.word	0x0802c101
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802c094:	78fb      	ldrb	r3, [r7, #3]
 802c096:	015a      	lsls	r2, r3, #5
 802c098:	693b      	ldr	r3, [r7, #16]
 802c09a:	4413      	add	r3, r2
 802c09c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c0a0:	461a      	mov	r2, r3
 802c0a2:	f240 439d 	movw	r3, #1181	; 0x49d
 802c0a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 802c0a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802c0ac:	2b00      	cmp	r3, #0
 802c0ae:	da10      	bge.n	802c0d2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802c0b0:	78fb      	ldrb	r3, [r7, #3]
 802c0b2:	015a      	lsls	r2, r3, #5
 802c0b4:	693b      	ldr	r3, [r7, #16]
 802c0b6:	4413      	add	r3, r2
 802c0b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c0bc:	68db      	ldr	r3, [r3, #12]
 802c0be:	78fa      	ldrb	r2, [r7, #3]
 802c0c0:	0151      	lsls	r1, r2, #5
 802c0c2:	693a      	ldr	r2, [r7, #16]
 802c0c4:	440a      	add	r2, r1
 802c0c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c0ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802c0ce:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 802c0d0:	e057      	b.n	802c182 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802c0d2:	687b      	ldr	r3, [r7, #4]
 802c0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802c0d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802c0da:	2b00      	cmp	r3, #0
 802c0dc:	d051      	beq.n	802c182 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 802c0de:	78fb      	ldrb	r3, [r7, #3]
 802c0e0:	015a      	lsls	r2, r3, #5
 802c0e2:	693b      	ldr	r3, [r7, #16]
 802c0e4:	4413      	add	r3, r2
 802c0e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c0ea:	68db      	ldr	r3, [r3, #12]
 802c0ec:	78fa      	ldrb	r2, [r7, #3]
 802c0ee:	0151      	lsls	r1, r2, #5
 802c0f0:	693a      	ldr	r2, [r7, #16]
 802c0f2:	440a      	add	r2, r1
 802c0f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c0f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802c0fc:	60d3      	str	r3, [r2, #12]
      break;
 802c0fe:	e040      	b.n	802c182 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802c100:	78fb      	ldrb	r3, [r7, #3]
 802c102:	015a      	lsls	r2, r3, #5
 802c104:	693b      	ldr	r3, [r7, #16]
 802c106:	4413      	add	r3, r2
 802c108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c10c:	461a      	mov	r2, r3
 802c10e:	f240 639d 	movw	r3, #1693	; 0x69d
 802c112:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802c114:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802c118:	2b00      	cmp	r3, #0
 802c11a:	da34      	bge.n	802c186 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802c11c:	78fb      	ldrb	r3, [r7, #3]
 802c11e:	015a      	lsls	r2, r3, #5
 802c120:	693b      	ldr	r3, [r7, #16]
 802c122:	4413      	add	r3, r2
 802c124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c128:	68db      	ldr	r3, [r3, #12]
 802c12a:	78fa      	ldrb	r2, [r7, #3]
 802c12c:	0151      	lsls	r1, r2, #5
 802c12e:	693a      	ldr	r2, [r7, #16]
 802c130:	440a      	add	r2, r1
 802c132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802c13a:	60d3      	str	r3, [r2, #12]
      }

      break;
 802c13c:	e023      	b.n	802c186 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802c13e:	78fb      	ldrb	r3, [r7, #3]
 802c140:	015a      	lsls	r2, r3, #5
 802c142:	693b      	ldr	r3, [r7, #16]
 802c144:	4413      	add	r3, r2
 802c146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c14a:	461a      	mov	r2, r3
 802c14c:	f240 2325 	movw	r3, #549	; 0x225
 802c150:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802c152:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802c156:	2b00      	cmp	r3, #0
 802c158:	da17      	bge.n	802c18a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802c15a:	78fb      	ldrb	r3, [r7, #3]
 802c15c:	015a      	lsls	r2, r3, #5
 802c15e:	693b      	ldr	r3, [r7, #16]
 802c160:	4413      	add	r3, r2
 802c162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c166:	68db      	ldr	r3, [r3, #12]
 802c168:	78fa      	ldrb	r2, [r7, #3]
 802c16a:	0151      	lsls	r1, r2, #5
 802c16c:	693a      	ldr	r2, [r7, #16]
 802c16e:	440a      	add	r2, r1
 802c170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c174:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802c178:	60d3      	str	r3, [r2, #12]
      }
      break;
 802c17a:	e006      	b.n	802c18a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 802c17c:	2301      	movs	r3, #1
 802c17e:	77fb      	strb	r3, [r7, #31]
      break;
 802c180:	e004      	b.n	802c18c <USB_HC_Init+0x14c>
      break;
 802c182:	bf00      	nop
 802c184:	e002      	b.n	802c18c <USB_HC_Init+0x14c>
      break;
 802c186:	bf00      	nop
 802c188:	e000      	b.n	802c18c <USB_HC_Init+0x14c>
      break;
 802c18a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 802c18c:	78fb      	ldrb	r3, [r7, #3]
 802c18e:	015a      	lsls	r2, r3, #5
 802c190:	693b      	ldr	r3, [r7, #16]
 802c192:	4413      	add	r3, r2
 802c194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c198:	68db      	ldr	r3, [r3, #12]
 802c19a:	78fa      	ldrb	r2, [r7, #3]
 802c19c:	0151      	lsls	r1, r2, #5
 802c19e:	693a      	ldr	r2, [r7, #16]
 802c1a0:	440a      	add	r2, r1
 802c1a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c1a6:	f043 0302 	orr.w	r3, r3, #2
 802c1aa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 802c1ac:	693b      	ldr	r3, [r7, #16]
 802c1ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c1b2:	699a      	ldr	r2, [r3, #24]
 802c1b4:	78fb      	ldrb	r3, [r7, #3]
 802c1b6:	f003 030f 	and.w	r3, r3, #15
 802c1ba:	2101      	movs	r1, #1
 802c1bc:	fa01 f303 	lsl.w	r3, r1, r3
 802c1c0:	6939      	ldr	r1, [r7, #16]
 802c1c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802c1c6:	4313      	orrs	r3, r2
 802c1c8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 802c1ca:	687b      	ldr	r3, [r7, #4]
 802c1cc:	699b      	ldr	r3, [r3, #24]
 802c1ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802c1d2:	687b      	ldr	r3, [r7, #4]
 802c1d4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 802c1d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802c1da:	2b00      	cmp	r3, #0
 802c1dc:	da03      	bge.n	802c1e6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 802c1de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802c1e2:	61bb      	str	r3, [r7, #24]
 802c1e4:	e001      	b.n	802c1ea <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 802c1e6:	2300      	movs	r3, #0
 802c1e8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 802c1ea:	6878      	ldr	r0, [r7, #4]
 802c1ec:	f7ff feff 	bl	802bfee <USB_GetHostSpeed>
 802c1f0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 802c1f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802c1f6:	2b02      	cmp	r3, #2
 802c1f8:	d106      	bne.n	802c208 <USB_HC_Init+0x1c8>
 802c1fa:	68fb      	ldr	r3, [r7, #12]
 802c1fc:	2b02      	cmp	r3, #2
 802c1fe:	d003      	beq.n	802c208 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 802c200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802c204:	617b      	str	r3, [r7, #20]
 802c206:	e001      	b.n	802c20c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802c208:	2300      	movs	r3, #0
 802c20a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802c20c:	787b      	ldrb	r3, [r7, #1]
 802c20e:	059b      	lsls	r3, r3, #22
 802c210:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802c214:	78bb      	ldrb	r3, [r7, #2]
 802c216:	02db      	lsls	r3, r3, #11
 802c218:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802c21c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802c21e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802c222:	049b      	lsls	r3, r3, #18
 802c224:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802c228:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802c22a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802c22c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802c230:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802c232:	69bb      	ldr	r3, [r7, #24]
 802c234:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802c236:	78fb      	ldrb	r3, [r7, #3]
 802c238:	0159      	lsls	r1, r3, #5
 802c23a:	693b      	ldr	r3, [r7, #16]
 802c23c:	440b      	add	r3, r1
 802c23e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c242:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802c244:	697b      	ldr	r3, [r7, #20]
 802c246:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802c248:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 802c24a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802c24e:	2b03      	cmp	r3, #3
 802c250:	d003      	beq.n	802c25a <USB_HC_Init+0x21a>
 802c252:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802c256:	2b01      	cmp	r3, #1
 802c258:	d10f      	bne.n	802c27a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 802c25a:	78fb      	ldrb	r3, [r7, #3]
 802c25c:	015a      	lsls	r2, r3, #5
 802c25e:	693b      	ldr	r3, [r7, #16]
 802c260:	4413      	add	r3, r2
 802c262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c266:	681b      	ldr	r3, [r3, #0]
 802c268:	78fa      	ldrb	r2, [r7, #3]
 802c26a:	0151      	lsls	r1, r2, #5
 802c26c:	693a      	ldr	r2, [r7, #16]
 802c26e:	440a      	add	r2, r1
 802c270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c274:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802c278:	6013      	str	r3, [r2, #0]
  }

  return ret;
 802c27a:	7ffb      	ldrb	r3, [r7, #31]
}
 802c27c:	4618      	mov	r0, r3
 802c27e:	3720      	adds	r7, #32
 802c280:	46bd      	mov	sp, r7
 802c282:	bd80      	pop	{r7, pc}

0802c284 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 802c284:	b580      	push	{r7, lr}
 802c286:	b08c      	sub	sp, #48	; 0x30
 802c288:	af02      	add	r7, sp, #8
 802c28a:	60f8      	str	r0, [r7, #12]
 802c28c:	60b9      	str	r1, [r7, #8]
 802c28e:	4613      	mov	r3, r2
 802c290:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c292:	68fb      	ldr	r3, [r7, #12]
 802c294:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 802c296:	68bb      	ldr	r3, [r7, #8]
 802c298:	785b      	ldrb	r3, [r3, #1]
 802c29a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 802c29c:	f44f 7380 	mov.w	r3, #256	; 0x100
 802c2a0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802c2a2:	68fb      	ldr	r3, [r7, #12]
 802c2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802c2a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802c2aa:	2b00      	cmp	r3, #0
 802c2ac:	d02d      	beq.n	802c30a <USB_HC_StartXfer+0x86>
 802c2ae:	68bb      	ldr	r3, [r7, #8]
 802c2b0:	791b      	ldrb	r3, [r3, #4]
 802c2b2:	2b00      	cmp	r3, #0
 802c2b4:	d129      	bne.n	802c30a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 802c2b6:	79fb      	ldrb	r3, [r7, #7]
 802c2b8:	2b01      	cmp	r3, #1
 802c2ba:	d117      	bne.n	802c2ec <USB_HC_StartXfer+0x68>
 802c2bc:	68bb      	ldr	r3, [r7, #8]
 802c2be:	79db      	ldrb	r3, [r3, #7]
 802c2c0:	2b00      	cmp	r3, #0
 802c2c2:	d003      	beq.n	802c2cc <USB_HC_StartXfer+0x48>
 802c2c4:	68bb      	ldr	r3, [r7, #8]
 802c2c6:	79db      	ldrb	r3, [r3, #7]
 802c2c8:	2b02      	cmp	r3, #2
 802c2ca:	d10f      	bne.n	802c2ec <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 802c2cc:	69fb      	ldr	r3, [r7, #28]
 802c2ce:	015a      	lsls	r2, r3, #5
 802c2d0:	6a3b      	ldr	r3, [r7, #32]
 802c2d2:	4413      	add	r3, r2
 802c2d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c2d8:	68db      	ldr	r3, [r3, #12]
 802c2da:	69fa      	ldr	r2, [r7, #28]
 802c2dc:	0151      	lsls	r1, r2, #5
 802c2de:	6a3a      	ldr	r2, [r7, #32]
 802c2e0:	440a      	add	r2, r1
 802c2e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c2e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802c2ea:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 802c2ec:	79fb      	ldrb	r3, [r7, #7]
 802c2ee:	2b00      	cmp	r3, #0
 802c2f0:	d10b      	bne.n	802c30a <USB_HC_StartXfer+0x86>
 802c2f2:	68bb      	ldr	r3, [r7, #8]
 802c2f4:	795b      	ldrb	r3, [r3, #5]
 802c2f6:	2b01      	cmp	r3, #1
 802c2f8:	d107      	bne.n	802c30a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 802c2fa:	68bb      	ldr	r3, [r7, #8]
 802c2fc:	785b      	ldrb	r3, [r3, #1]
 802c2fe:	4619      	mov	r1, r3
 802c300:	68f8      	ldr	r0, [r7, #12]
 802c302:	f000 fa0f 	bl	802c724 <USB_DoPing>
      return HAL_OK;
 802c306:	2300      	movs	r3, #0
 802c308:	e0f8      	b.n	802c4fc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 802c30a:	68bb      	ldr	r3, [r7, #8]
 802c30c:	695b      	ldr	r3, [r3, #20]
 802c30e:	2b00      	cmp	r3, #0
 802c310:	d018      	beq.n	802c344 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802c312:	68bb      	ldr	r3, [r7, #8]
 802c314:	695b      	ldr	r3, [r3, #20]
 802c316:	68ba      	ldr	r2, [r7, #8]
 802c318:	8912      	ldrh	r2, [r2, #8]
 802c31a:	4413      	add	r3, r2
 802c31c:	3b01      	subs	r3, #1
 802c31e:	68ba      	ldr	r2, [r7, #8]
 802c320:	8912      	ldrh	r2, [r2, #8]
 802c322:	fbb3 f3f2 	udiv	r3, r3, r2
 802c326:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 802c328:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802c32a:	8b7b      	ldrh	r3, [r7, #26]
 802c32c:	429a      	cmp	r2, r3
 802c32e:	d90b      	bls.n	802c348 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 802c330:	8b7b      	ldrh	r3, [r7, #26]
 802c332:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802c334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802c336:	68ba      	ldr	r2, [r7, #8]
 802c338:	8912      	ldrh	r2, [r2, #8]
 802c33a:	fb03 f202 	mul.w	r2, r3, r2
 802c33e:	68bb      	ldr	r3, [r7, #8]
 802c340:	611a      	str	r2, [r3, #16]
 802c342:	e001      	b.n	802c348 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 802c344:	2301      	movs	r3, #1
 802c346:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 802c348:	68bb      	ldr	r3, [r7, #8]
 802c34a:	78db      	ldrb	r3, [r3, #3]
 802c34c:	2b00      	cmp	r3, #0
 802c34e:	d007      	beq.n	802c360 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802c350:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802c352:	68ba      	ldr	r2, [r7, #8]
 802c354:	8912      	ldrh	r2, [r2, #8]
 802c356:	fb03 f202 	mul.w	r2, r3, r2
 802c35a:	68bb      	ldr	r3, [r7, #8]
 802c35c:	611a      	str	r2, [r3, #16]
 802c35e:	e003      	b.n	802c368 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 802c360:	68bb      	ldr	r3, [r7, #8]
 802c362:	695a      	ldr	r2, [r3, #20]
 802c364:	68bb      	ldr	r3, [r7, #8]
 802c366:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802c368:	68bb      	ldr	r3, [r7, #8]
 802c36a:	691b      	ldr	r3, [r3, #16]
 802c36c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802c370:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802c372:	04d9      	lsls	r1, r3, #19
 802c374:	4b63      	ldr	r3, [pc, #396]	; (802c504 <USB_HC_StartXfer+0x280>)
 802c376:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802c378:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 802c37a:	68bb      	ldr	r3, [r7, #8]
 802c37c:	7a9b      	ldrb	r3, [r3, #10]
 802c37e:	075b      	lsls	r3, r3, #29
 802c380:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802c384:	69f9      	ldr	r1, [r7, #28]
 802c386:	0148      	lsls	r0, r1, #5
 802c388:	6a39      	ldr	r1, [r7, #32]
 802c38a:	4401      	add	r1, r0
 802c38c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802c390:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802c392:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 802c394:	79fb      	ldrb	r3, [r7, #7]
 802c396:	2b00      	cmp	r3, #0
 802c398:	d009      	beq.n	802c3ae <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 802c39a:	68bb      	ldr	r3, [r7, #8]
 802c39c:	68d9      	ldr	r1, [r3, #12]
 802c39e:	69fb      	ldr	r3, [r7, #28]
 802c3a0:	015a      	lsls	r2, r3, #5
 802c3a2:	6a3b      	ldr	r3, [r7, #32]
 802c3a4:	4413      	add	r3, r2
 802c3a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c3aa:	460a      	mov	r2, r1
 802c3ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 802c3ae:	6a3b      	ldr	r3, [r7, #32]
 802c3b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c3b4:	689b      	ldr	r3, [r3, #8]
 802c3b6:	f003 0301 	and.w	r3, r3, #1
 802c3ba:	2b00      	cmp	r3, #0
 802c3bc:	bf0c      	ite	eq
 802c3be:	2301      	moveq	r3, #1
 802c3c0:	2300      	movne	r3, #0
 802c3c2:	b2db      	uxtb	r3, r3
 802c3c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 802c3c6:	69fb      	ldr	r3, [r7, #28]
 802c3c8:	015a      	lsls	r2, r3, #5
 802c3ca:	6a3b      	ldr	r3, [r7, #32]
 802c3cc:	4413      	add	r3, r2
 802c3ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c3d2:	681b      	ldr	r3, [r3, #0]
 802c3d4:	69fa      	ldr	r2, [r7, #28]
 802c3d6:	0151      	lsls	r1, r2, #5
 802c3d8:	6a3a      	ldr	r2, [r7, #32]
 802c3da:	440a      	add	r2, r1
 802c3dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c3e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802c3e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 802c3e6:	69fb      	ldr	r3, [r7, #28]
 802c3e8:	015a      	lsls	r2, r3, #5
 802c3ea:	6a3b      	ldr	r3, [r7, #32]
 802c3ec:	4413      	add	r3, r2
 802c3ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c3f2:	681a      	ldr	r2, [r3, #0]
 802c3f4:	7e7b      	ldrb	r3, [r7, #25]
 802c3f6:	075b      	lsls	r3, r3, #29
 802c3f8:	69f9      	ldr	r1, [r7, #28]
 802c3fa:	0148      	lsls	r0, r1, #5
 802c3fc:	6a39      	ldr	r1, [r7, #32]
 802c3fe:	4401      	add	r1, r0
 802c400:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 802c404:	4313      	orrs	r3, r2
 802c406:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 802c408:	69fb      	ldr	r3, [r7, #28]
 802c40a:	015a      	lsls	r2, r3, #5
 802c40c:	6a3b      	ldr	r3, [r7, #32]
 802c40e:	4413      	add	r3, r2
 802c410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c414:	681b      	ldr	r3, [r3, #0]
 802c416:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802c418:	693b      	ldr	r3, [r7, #16]
 802c41a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802c41e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 802c420:	68bb      	ldr	r3, [r7, #8]
 802c422:	78db      	ldrb	r3, [r3, #3]
 802c424:	2b00      	cmp	r3, #0
 802c426:	d004      	beq.n	802c432 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 802c428:	693b      	ldr	r3, [r7, #16]
 802c42a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802c42e:	613b      	str	r3, [r7, #16]
 802c430:	e003      	b.n	802c43a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 802c432:	693b      	ldr	r3, [r7, #16]
 802c434:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802c438:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802c43a:	693b      	ldr	r3, [r7, #16]
 802c43c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c440:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 802c442:	69fb      	ldr	r3, [r7, #28]
 802c444:	015a      	lsls	r2, r3, #5
 802c446:	6a3b      	ldr	r3, [r7, #32]
 802c448:	4413      	add	r3, r2
 802c44a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c44e:	461a      	mov	r2, r3
 802c450:	693b      	ldr	r3, [r7, #16]
 802c452:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 802c454:	79fb      	ldrb	r3, [r7, #7]
 802c456:	2b00      	cmp	r3, #0
 802c458:	d001      	beq.n	802c45e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 802c45a:	2300      	movs	r3, #0
 802c45c:	e04e      	b.n	802c4fc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 802c45e:	68bb      	ldr	r3, [r7, #8]
 802c460:	78db      	ldrb	r3, [r3, #3]
 802c462:	2b00      	cmp	r3, #0
 802c464:	d149      	bne.n	802c4fa <USB_HC_StartXfer+0x276>
 802c466:	68bb      	ldr	r3, [r7, #8]
 802c468:	695b      	ldr	r3, [r3, #20]
 802c46a:	2b00      	cmp	r3, #0
 802c46c:	d045      	beq.n	802c4fa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 802c46e:	68bb      	ldr	r3, [r7, #8]
 802c470:	79db      	ldrb	r3, [r3, #7]
 802c472:	2b03      	cmp	r3, #3
 802c474:	d830      	bhi.n	802c4d8 <USB_HC_StartXfer+0x254>
 802c476:	a201      	add	r2, pc, #4	; (adr r2, 802c47c <USB_HC_StartXfer+0x1f8>)
 802c478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c47c:	0802c48d 	.word	0x0802c48d
 802c480:	0802c4b1 	.word	0x0802c4b1
 802c484:	0802c48d 	.word	0x0802c48d
 802c488:	0802c4b1 	.word	0x0802c4b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802c48c:	68bb      	ldr	r3, [r7, #8]
 802c48e:	695b      	ldr	r3, [r3, #20]
 802c490:	3303      	adds	r3, #3
 802c492:	089b      	lsrs	r3, r3, #2
 802c494:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 802c496:	8afa      	ldrh	r2, [r7, #22]
 802c498:	68fb      	ldr	r3, [r7, #12]
 802c49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c49c:	b29b      	uxth	r3, r3
 802c49e:	429a      	cmp	r2, r3
 802c4a0:	d91c      	bls.n	802c4dc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 802c4a2:	68fb      	ldr	r3, [r7, #12]
 802c4a4:	699b      	ldr	r3, [r3, #24]
 802c4a6:	f043 0220 	orr.w	r2, r3, #32
 802c4aa:	68fb      	ldr	r3, [r7, #12]
 802c4ac:	619a      	str	r2, [r3, #24]
        }
        break;
 802c4ae:	e015      	b.n	802c4dc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802c4b0:	68bb      	ldr	r3, [r7, #8]
 802c4b2:	695b      	ldr	r3, [r3, #20]
 802c4b4:	3303      	adds	r3, #3
 802c4b6:	089b      	lsrs	r3, r3, #2
 802c4b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 802c4ba:	8afa      	ldrh	r2, [r7, #22]
 802c4bc:	6a3b      	ldr	r3, [r7, #32]
 802c4be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c4c2:	691b      	ldr	r3, [r3, #16]
 802c4c4:	b29b      	uxth	r3, r3
 802c4c6:	429a      	cmp	r2, r3
 802c4c8:	d90a      	bls.n	802c4e0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 802c4ca:	68fb      	ldr	r3, [r7, #12]
 802c4cc:	699b      	ldr	r3, [r3, #24]
 802c4ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 802c4d2:	68fb      	ldr	r3, [r7, #12]
 802c4d4:	619a      	str	r2, [r3, #24]
        }
        break;
 802c4d6:	e003      	b.n	802c4e0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 802c4d8:	bf00      	nop
 802c4da:	e002      	b.n	802c4e2 <USB_HC_StartXfer+0x25e>
        break;
 802c4dc:	bf00      	nop
 802c4de:	e000      	b.n	802c4e2 <USB_HC_StartXfer+0x25e>
        break;
 802c4e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 802c4e2:	68bb      	ldr	r3, [r7, #8]
 802c4e4:	68d9      	ldr	r1, [r3, #12]
 802c4e6:	68bb      	ldr	r3, [r7, #8]
 802c4e8:	785a      	ldrb	r2, [r3, #1]
 802c4ea:	68bb      	ldr	r3, [r7, #8]
 802c4ec:	695b      	ldr	r3, [r3, #20]
 802c4ee:	b29b      	uxth	r3, r3
 802c4f0:	2000      	movs	r0, #0
 802c4f2:	9000      	str	r0, [sp, #0]
 802c4f4:	68f8      	ldr	r0, [r7, #12]
 802c4f6:	f7ff fb37 	bl	802bb68 <USB_WritePacket>
  }

  return HAL_OK;
 802c4fa:	2300      	movs	r3, #0
}
 802c4fc:	4618      	mov	r0, r3
 802c4fe:	3728      	adds	r7, #40	; 0x28
 802c500:	46bd      	mov	sp, r7
 802c502:	bd80      	pop	{r7, pc}
 802c504:	1ff80000 	.word	0x1ff80000

0802c508 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802c508:	b480      	push	{r7}
 802c50a:	b085      	sub	sp, #20
 802c50c:	af00      	add	r7, sp, #0
 802c50e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c510:	687b      	ldr	r3, [r7, #4]
 802c512:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802c514:	68fb      	ldr	r3, [r7, #12]
 802c516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c51a:	695b      	ldr	r3, [r3, #20]
 802c51c:	b29b      	uxth	r3, r3
}
 802c51e:	4618      	mov	r0, r3
 802c520:	3714      	adds	r7, #20
 802c522:	46bd      	mov	sp, r7
 802c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c528:	4770      	bx	lr

0802c52a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 802c52a:	b480      	push	{r7}
 802c52c:	b089      	sub	sp, #36	; 0x24
 802c52e:	af00      	add	r7, sp, #0
 802c530:	6078      	str	r0, [r7, #4]
 802c532:	460b      	mov	r3, r1
 802c534:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c536:	687b      	ldr	r3, [r7, #4]
 802c538:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 802c53a:	78fb      	ldrb	r3, [r7, #3]
 802c53c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 802c53e:	2300      	movs	r3, #0
 802c540:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802c542:	69bb      	ldr	r3, [r7, #24]
 802c544:	015a      	lsls	r2, r3, #5
 802c546:	69fb      	ldr	r3, [r7, #28]
 802c548:	4413      	add	r3, r2
 802c54a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c54e:	681b      	ldr	r3, [r3, #0]
 802c550:	0c9b      	lsrs	r3, r3, #18
 802c552:	f003 0303 	and.w	r3, r3, #3
 802c556:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 802c558:	69bb      	ldr	r3, [r7, #24]
 802c55a:	015a      	lsls	r2, r3, #5
 802c55c:	69fb      	ldr	r3, [r7, #28]
 802c55e:	4413      	add	r3, r2
 802c560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c564:	681b      	ldr	r3, [r3, #0]
 802c566:	0fdb      	lsrs	r3, r3, #31
 802c568:	f003 0301 	and.w	r3, r3, #1
 802c56c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 802c56e:	687b      	ldr	r3, [r7, #4]
 802c570:	689b      	ldr	r3, [r3, #8]
 802c572:	f003 0320 	and.w	r3, r3, #32
 802c576:	2b20      	cmp	r3, #32
 802c578:	d104      	bne.n	802c584 <USB_HC_Halt+0x5a>
 802c57a:	693b      	ldr	r3, [r7, #16]
 802c57c:	2b00      	cmp	r3, #0
 802c57e:	d101      	bne.n	802c584 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 802c580:	2300      	movs	r3, #0
 802c582:	e0c8      	b.n	802c716 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 802c584:	697b      	ldr	r3, [r7, #20]
 802c586:	2b00      	cmp	r3, #0
 802c588:	d002      	beq.n	802c590 <USB_HC_Halt+0x66>
 802c58a:	697b      	ldr	r3, [r7, #20]
 802c58c:	2b02      	cmp	r3, #2
 802c58e:	d163      	bne.n	802c658 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802c590:	69bb      	ldr	r3, [r7, #24]
 802c592:	015a      	lsls	r2, r3, #5
 802c594:	69fb      	ldr	r3, [r7, #28]
 802c596:	4413      	add	r3, r2
 802c598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c59c:	681b      	ldr	r3, [r3, #0]
 802c59e:	69ba      	ldr	r2, [r7, #24]
 802c5a0:	0151      	lsls	r1, r2, #5
 802c5a2:	69fa      	ldr	r2, [r7, #28]
 802c5a4:	440a      	add	r2, r1
 802c5a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c5aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802c5ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802c5b0:	687b      	ldr	r3, [r7, #4]
 802c5b2:	689b      	ldr	r3, [r3, #8]
 802c5b4:	f003 0320 	and.w	r3, r3, #32
 802c5b8:	2b00      	cmp	r3, #0
 802c5ba:	f040 80ab 	bne.w	802c714 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802c5be:	687b      	ldr	r3, [r7, #4]
 802c5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c5c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802c5c6:	2b00      	cmp	r3, #0
 802c5c8:	d133      	bne.n	802c632 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802c5ca:	69bb      	ldr	r3, [r7, #24]
 802c5cc:	015a      	lsls	r2, r3, #5
 802c5ce:	69fb      	ldr	r3, [r7, #28]
 802c5d0:	4413      	add	r3, r2
 802c5d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c5d6:	681b      	ldr	r3, [r3, #0]
 802c5d8:	69ba      	ldr	r2, [r7, #24]
 802c5da:	0151      	lsls	r1, r2, #5
 802c5dc:	69fa      	ldr	r2, [r7, #28]
 802c5de:	440a      	add	r2, r1
 802c5e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c5e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c5e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802c5ea:	69bb      	ldr	r3, [r7, #24]
 802c5ec:	015a      	lsls	r2, r3, #5
 802c5ee:	69fb      	ldr	r3, [r7, #28]
 802c5f0:	4413      	add	r3, r2
 802c5f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c5f6:	681b      	ldr	r3, [r3, #0]
 802c5f8:	69ba      	ldr	r2, [r7, #24]
 802c5fa:	0151      	lsls	r1, r2, #5
 802c5fc:	69fa      	ldr	r2, [r7, #28]
 802c5fe:	440a      	add	r2, r1
 802c600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c608:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 802c60a:	68fb      	ldr	r3, [r7, #12]
 802c60c:	3301      	adds	r3, #1
 802c60e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 802c610:	68fb      	ldr	r3, [r7, #12]
 802c612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c616:	d81d      	bhi.n	802c654 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802c618:	69bb      	ldr	r3, [r7, #24]
 802c61a:	015a      	lsls	r2, r3, #5
 802c61c:	69fb      	ldr	r3, [r7, #28]
 802c61e:	4413      	add	r3, r2
 802c620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c624:	681b      	ldr	r3, [r3, #0]
 802c626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c62a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802c62e:	d0ec      	beq.n	802c60a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802c630:	e070      	b.n	802c714 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802c632:	69bb      	ldr	r3, [r7, #24]
 802c634:	015a      	lsls	r2, r3, #5
 802c636:	69fb      	ldr	r3, [r7, #28]
 802c638:	4413      	add	r3, r2
 802c63a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c63e:	681b      	ldr	r3, [r3, #0]
 802c640:	69ba      	ldr	r2, [r7, #24]
 802c642:	0151      	lsls	r1, r2, #5
 802c644:	69fa      	ldr	r2, [r7, #28]
 802c646:	440a      	add	r2, r1
 802c648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c64c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c650:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802c652:	e05f      	b.n	802c714 <USB_HC_Halt+0x1ea>
            break;
 802c654:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802c656:	e05d      	b.n	802c714 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802c658:	69bb      	ldr	r3, [r7, #24]
 802c65a:	015a      	lsls	r2, r3, #5
 802c65c:	69fb      	ldr	r3, [r7, #28]
 802c65e:	4413      	add	r3, r2
 802c660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c664:	681b      	ldr	r3, [r3, #0]
 802c666:	69ba      	ldr	r2, [r7, #24]
 802c668:	0151      	lsls	r1, r2, #5
 802c66a:	69fa      	ldr	r2, [r7, #28]
 802c66c:	440a      	add	r2, r1
 802c66e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802c676:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 802c678:	69fb      	ldr	r3, [r7, #28]
 802c67a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c67e:	691b      	ldr	r3, [r3, #16]
 802c680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802c684:	2b00      	cmp	r3, #0
 802c686:	d133      	bne.n	802c6f0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802c688:	69bb      	ldr	r3, [r7, #24]
 802c68a:	015a      	lsls	r2, r3, #5
 802c68c:	69fb      	ldr	r3, [r7, #28]
 802c68e:	4413      	add	r3, r2
 802c690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c694:	681b      	ldr	r3, [r3, #0]
 802c696:	69ba      	ldr	r2, [r7, #24]
 802c698:	0151      	lsls	r1, r2, #5
 802c69a:	69fa      	ldr	r2, [r7, #28]
 802c69c:	440a      	add	r2, r1
 802c69e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c6a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c6a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802c6a8:	69bb      	ldr	r3, [r7, #24]
 802c6aa:	015a      	lsls	r2, r3, #5
 802c6ac:	69fb      	ldr	r3, [r7, #28]
 802c6ae:	4413      	add	r3, r2
 802c6b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c6b4:	681b      	ldr	r3, [r3, #0]
 802c6b6:	69ba      	ldr	r2, [r7, #24]
 802c6b8:	0151      	lsls	r1, r2, #5
 802c6ba:	69fa      	ldr	r2, [r7, #28]
 802c6bc:	440a      	add	r2, r1
 802c6be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c6c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c6c6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 802c6c8:	68fb      	ldr	r3, [r7, #12]
 802c6ca:	3301      	adds	r3, #1
 802c6cc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 802c6ce:	68fb      	ldr	r3, [r7, #12]
 802c6d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c6d4:	d81d      	bhi.n	802c712 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802c6d6:	69bb      	ldr	r3, [r7, #24]
 802c6d8:	015a      	lsls	r2, r3, #5
 802c6da:	69fb      	ldr	r3, [r7, #28]
 802c6dc:	4413      	add	r3, r2
 802c6de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c6e2:	681b      	ldr	r3, [r3, #0]
 802c6e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c6e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802c6ec:	d0ec      	beq.n	802c6c8 <USB_HC_Halt+0x19e>
 802c6ee:	e011      	b.n	802c714 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802c6f0:	69bb      	ldr	r3, [r7, #24]
 802c6f2:	015a      	lsls	r2, r3, #5
 802c6f4:	69fb      	ldr	r3, [r7, #28]
 802c6f6:	4413      	add	r3, r2
 802c6f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c6fc:	681b      	ldr	r3, [r3, #0]
 802c6fe:	69ba      	ldr	r2, [r7, #24]
 802c700:	0151      	lsls	r1, r2, #5
 802c702:	69fa      	ldr	r2, [r7, #28]
 802c704:	440a      	add	r2, r1
 802c706:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c70a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c70e:	6013      	str	r3, [r2, #0]
 802c710:	e000      	b.n	802c714 <USB_HC_Halt+0x1ea>
          break;
 802c712:	bf00      	nop
    }
  }

  return HAL_OK;
 802c714:	2300      	movs	r3, #0
}
 802c716:	4618      	mov	r0, r3
 802c718:	3724      	adds	r7, #36	; 0x24
 802c71a:	46bd      	mov	sp, r7
 802c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c720:	4770      	bx	lr
	...

0802c724 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 802c724:	b480      	push	{r7}
 802c726:	b087      	sub	sp, #28
 802c728:	af00      	add	r7, sp, #0
 802c72a:	6078      	str	r0, [r7, #4]
 802c72c:	460b      	mov	r3, r1
 802c72e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c730:	687b      	ldr	r3, [r7, #4]
 802c732:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 802c734:	78fb      	ldrb	r3, [r7, #3]
 802c736:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 802c738:	2301      	movs	r3, #1
 802c73a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802c73c:	68fb      	ldr	r3, [r7, #12]
 802c73e:	04da      	lsls	r2, r3, #19
 802c740:	4b15      	ldr	r3, [pc, #84]	; (802c798 <USB_DoPing+0x74>)
 802c742:	4013      	ands	r3, r2
 802c744:	693a      	ldr	r2, [r7, #16]
 802c746:	0151      	lsls	r1, r2, #5
 802c748:	697a      	ldr	r2, [r7, #20]
 802c74a:	440a      	add	r2, r1
 802c74c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802c750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c754:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 802c756:	693b      	ldr	r3, [r7, #16]
 802c758:	015a      	lsls	r2, r3, #5
 802c75a:	697b      	ldr	r3, [r7, #20]
 802c75c:	4413      	add	r3, r2
 802c75e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c762:	681b      	ldr	r3, [r3, #0]
 802c764:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802c766:	68bb      	ldr	r3, [r7, #8]
 802c768:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802c76c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802c76e:	68bb      	ldr	r3, [r7, #8]
 802c770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c774:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 802c776:	693b      	ldr	r3, [r7, #16]
 802c778:	015a      	lsls	r2, r3, #5
 802c77a:	697b      	ldr	r3, [r7, #20]
 802c77c:	4413      	add	r3, r2
 802c77e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c782:	461a      	mov	r2, r3
 802c784:	68bb      	ldr	r3, [r7, #8]
 802c786:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 802c788:	2300      	movs	r3, #0
}
 802c78a:	4618      	mov	r0, r3
 802c78c:	371c      	adds	r7, #28
 802c78e:	46bd      	mov	sp, r7
 802c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c794:	4770      	bx	lr
 802c796:	bf00      	nop
 802c798:	1ff80000 	.word	0x1ff80000

0802c79c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 802c79c:	b580      	push	{r7, lr}
 802c79e:	b088      	sub	sp, #32
 802c7a0:	af00      	add	r7, sp, #0
 802c7a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 802c7a4:	2300      	movs	r3, #0
 802c7a6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c7a8:	687b      	ldr	r3, [r7, #4]
 802c7aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 802c7ac:	2300      	movs	r3, #0
 802c7ae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 802c7b0:	6878      	ldr	r0, [r7, #4]
 802c7b2:	f7ff f918 	bl	802b9e6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802c7b6:	2110      	movs	r1, #16
 802c7b8:	6878      	ldr	r0, [r7, #4]
 802c7ba:	f7ff f971 	bl	802baa0 <USB_FlushTxFifo>
 802c7be:	4603      	mov	r3, r0
 802c7c0:	2b00      	cmp	r3, #0
 802c7c2:	d001      	beq.n	802c7c8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 802c7c4:	2301      	movs	r3, #1
 802c7c6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802c7c8:	6878      	ldr	r0, [r7, #4]
 802c7ca:	f7ff f99d 	bl	802bb08 <USB_FlushRxFifo>
 802c7ce:	4603      	mov	r3, r0
 802c7d0:	2b00      	cmp	r3, #0
 802c7d2:	d001      	beq.n	802c7d8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 802c7d4:	2301      	movs	r3, #1
 802c7d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802c7d8:	2300      	movs	r3, #0
 802c7da:	61bb      	str	r3, [r7, #24]
 802c7dc:	e01f      	b.n	802c81e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 802c7de:	69bb      	ldr	r3, [r7, #24]
 802c7e0:	015a      	lsls	r2, r3, #5
 802c7e2:	697b      	ldr	r3, [r7, #20]
 802c7e4:	4413      	add	r3, r2
 802c7e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c7ea:	681b      	ldr	r3, [r3, #0]
 802c7ec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802c7ee:	693b      	ldr	r3, [r7, #16]
 802c7f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802c7f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802c7f6:	693b      	ldr	r3, [r7, #16]
 802c7f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c7fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802c7fe:	693b      	ldr	r3, [r7, #16]
 802c800:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802c804:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802c806:	69bb      	ldr	r3, [r7, #24]
 802c808:	015a      	lsls	r2, r3, #5
 802c80a:	697b      	ldr	r3, [r7, #20]
 802c80c:	4413      	add	r3, r2
 802c80e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c812:	461a      	mov	r2, r3
 802c814:	693b      	ldr	r3, [r7, #16]
 802c816:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802c818:	69bb      	ldr	r3, [r7, #24]
 802c81a:	3301      	adds	r3, #1
 802c81c:	61bb      	str	r3, [r7, #24]
 802c81e:	69bb      	ldr	r3, [r7, #24]
 802c820:	2b0f      	cmp	r3, #15
 802c822:	d9dc      	bls.n	802c7de <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802c824:	2300      	movs	r3, #0
 802c826:	61bb      	str	r3, [r7, #24]
 802c828:	e034      	b.n	802c894 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 802c82a:	69bb      	ldr	r3, [r7, #24]
 802c82c:	015a      	lsls	r2, r3, #5
 802c82e:	697b      	ldr	r3, [r7, #20]
 802c830:	4413      	add	r3, r2
 802c832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c836:	681b      	ldr	r3, [r3, #0]
 802c838:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 802c83a:	693b      	ldr	r3, [r7, #16]
 802c83c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802c840:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 802c842:	693b      	ldr	r3, [r7, #16]
 802c844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c848:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802c84a:	693b      	ldr	r3, [r7, #16]
 802c84c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802c850:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802c852:	69bb      	ldr	r3, [r7, #24]
 802c854:	015a      	lsls	r2, r3, #5
 802c856:	697b      	ldr	r3, [r7, #20]
 802c858:	4413      	add	r3, r2
 802c85a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c85e:	461a      	mov	r2, r3
 802c860:	693b      	ldr	r3, [r7, #16]
 802c862:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 802c864:	68fb      	ldr	r3, [r7, #12]
 802c866:	3301      	adds	r3, #1
 802c868:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 802c86a:	68fb      	ldr	r3, [r7, #12]
 802c86c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c870:	d80c      	bhi.n	802c88c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802c872:	69bb      	ldr	r3, [r7, #24]
 802c874:	015a      	lsls	r2, r3, #5
 802c876:	697b      	ldr	r3, [r7, #20]
 802c878:	4413      	add	r3, r2
 802c87a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802c87e:	681b      	ldr	r3, [r3, #0]
 802c880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802c888:	d0ec      	beq.n	802c864 <USB_StopHost+0xc8>
 802c88a:	e000      	b.n	802c88e <USB_StopHost+0xf2>
        break;
 802c88c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802c88e:	69bb      	ldr	r3, [r7, #24]
 802c890:	3301      	adds	r3, #1
 802c892:	61bb      	str	r3, [r7, #24]
 802c894:	69bb      	ldr	r3, [r7, #24]
 802c896:	2b0f      	cmp	r3, #15
 802c898:	d9c7      	bls.n	802c82a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802c89a:	697b      	ldr	r3, [r7, #20]
 802c89c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802c8a0:	461a      	mov	r2, r3
 802c8a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802c8a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802c8a8:	687b      	ldr	r3, [r7, #4]
 802c8aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802c8ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802c8b0:	6878      	ldr	r0, [r7, #4]
 802c8b2:	f7ff f887 	bl	802b9c4 <USB_EnableGlobalInt>

  return ret;
 802c8b6:	7ffb      	ldrb	r3, [r7, #31]
}
 802c8b8:	4618      	mov	r0, r3
 802c8ba:	3720      	adds	r7, #32
 802c8bc:	46bd      	mov	sp, r7
 802c8be:	bd80      	pop	{r7, pc}

0802c8c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 802c8c0:	b580      	push	{r7, lr}
 802c8c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 802c8c4:	4904      	ldr	r1, [pc, #16]	; (802c8d8 <MX_FATFS_Init+0x18>)
 802c8c6:	4805      	ldr	r0, [pc, #20]	; (802c8dc <MX_FATFS_Init+0x1c>)
 802c8c8:	f009 f95c 	bl	8035b84 <FATFS_LinkDriver>
 802c8cc:	4603      	mov	r3, r0
 802c8ce:	461a      	mov	r2, r3
 802c8d0:	4b03      	ldr	r3, [pc, #12]	; (802c8e0 <MX_FATFS_Init+0x20>)
 802c8d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 802c8d4:	bf00      	nop
 802c8d6:	bd80      	pop	{r7, pc}
 802c8d8:	24000b4c 	.word	0x24000b4c
 802c8dc:	0803b8d0 	.word	0x0803b8d0
 802c8e0:	24000b48 	.word	0x24000b48

0802c8e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 802c8e4:	b480      	push	{r7}
 802c8e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 802c8e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 802c8ea:	4618      	mov	r0, r3
 802c8ec:	46bd      	mov	sp, r7
 802c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c8f2:	4770      	bx	lr

0802c8f4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 802c8f4:	b480      	push	{r7}
 802c8f6:	b083      	sub	sp, #12
 802c8f8:	af00      	add	r7, sp, #0
 802c8fa:	4603      	mov	r3, r0
 802c8fc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 802c8fe:	2300      	movs	r3, #0
}
 802c900:	4618      	mov	r0, r3
 802c902:	370c      	adds	r7, #12
 802c904:	46bd      	mov	sp, r7
 802c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c90a:	4770      	bx	lr

0802c90c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 802c90c:	b580      	push	{r7, lr}
 802c90e:	b084      	sub	sp, #16
 802c910:	af00      	add	r7, sp, #0
 802c912:	4603      	mov	r3, r0
 802c914:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 802c916:	2301      	movs	r3, #1
 802c918:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 802c91a:	79fb      	ldrb	r3, [r7, #7]
 802c91c:	4619      	mov	r1, r3
 802c91e:	4808      	ldr	r0, [pc, #32]	; (802c940 <USBH_status+0x34>)
 802c920:	f000 fe73 	bl	802d60a <USBH_MSC_UnitIsReady>
 802c924:	4603      	mov	r3, r0
 802c926:	2b00      	cmp	r3, #0
 802c928:	d002      	beq.n	802c930 <USBH_status+0x24>
  {
    res = RES_OK;
 802c92a:	2300      	movs	r3, #0
 802c92c:	73fb      	strb	r3, [r7, #15]
 802c92e:	e001      	b.n	802c934 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 802c930:	2301      	movs	r3, #1
 802c932:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 802c934:	7bfb      	ldrb	r3, [r7, #15]
}
 802c936:	4618      	mov	r0, r3
 802c938:	3710      	adds	r7, #16
 802c93a:	46bd      	mov	sp, r7
 802c93c:	bd80      	pop	{r7, pc}
 802c93e:	bf00      	nop
 802c940:	24006ae4 	.word	0x24006ae4

0802c944 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 802c944:	b580      	push	{r7, lr}
 802c946:	b094      	sub	sp, #80	; 0x50
 802c948:	af02      	add	r7, sp, #8
 802c94a:	60b9      	str	r1, [r7, #8]
 802c94c:	607a      	str	r2, [r7, #4]
 802c94e:	603b      	str	r3, [r7, #0]
 802c950:	4603      	mov	r3, r0
 802c952:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802c954:	2301      	movs	r3, #1
 802c956:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 802c95a:	7bf9      	ldrb	r1, [r7, #15]
 802c95c:	683b      	ldr	r3, [r7, #0]
 802c95e:	9300      	str	r3, [sp, #0]
 802c960:	68bb      	ldr	r3, [r7, #8]
 802c962:	687a      	ldr	r2, [r7, #4]
 802c964:	4813      	ldr	r0, [pc, #76]	; (802c9b4 <USBH_read+0x70>)
 802c966:	f000 fe9a 	bl	802d69e <USBH_MSC_Read>
 802c96a:	4603      	mov	r3, r0
 802c96c:	2b00      	cmp	r3, #0
 802c96e:	d103      	bne.n	802c978 <USBH_read+0x34>
  {
    res = RES_OK;
 802c970:	2300      	movs	r3, #0
 802c972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 802c976:	e017      	b.n	802c9a8 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 802c978:	f107 0210 	add.w	r2, r7, #16
 802c97c:	7bfb      	ldrb	r3, [r7, #15]
 802c97e:	4619      	mov	r1, r3
 802c980:	480c      	ldr	r0, [pc, #48]	; (802c9b4 <USBH_read+0x70>)
 802c982:	f000 fe68 	bl	802d656 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 802c986:	7f7b      	ldrb	r3, [r7, #29]
 802c988:	2b3a      	cmp	r3, #58	; 0x3a
 802c98a:	d005      	beq.n	802c998 <USBH_read+0x54>
 802c98c:	2b3a      	cmp	r3, #58	; 0x3a
 802c98e:	dc07      	bgt.n	802c9a0 <USBH_read+0x5c>
 802c990:	2b04      	cmp	r3, #4
 802c992:	d001      	beq.n	802c998 <USBH_read+0x54>
 802c994:	2b28      	cmp	r3, #40	; 0x28
 802c996:	d103      	bne.n	802c9a0 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 802c998:	2303      	movs	r3, #3
 802c99a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802c99e:	e003      	b.n	802c9a8 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 802c9a0:	2301      	movs	r3, #1
 802c9a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802c9a6:	bf00      	nop
    }
  }

  return res;
 802c9a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 802c9ac:	4618      	mov	r0, r3
 802c9ae:	3748      	adds	r7, #72	; 0x48
 802c9b0:	46bd      	mov	sp, r7
 802c9b2:	bd80      	pop	{r7, pc}
 802c9b4:	24006ae4 	.word	0x24006ae4

0802c9b8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 802c9b8:	b580      	push	{r7, lr}
 802c9ba:	b094      	sub	sp, #80	; 0x50
 802c9bc:	af02      	add	r7, sp, #8
 802c9be:	60b9      	str	r1, [r7, #8]
 802c9c0:	607a      	str	r2, [r7, #4]
 802c9c2:	603b      	str	r3, [r7, #0]
 802c9c4:	4603      	mov	r3, r0
 802c9c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802c9c8:	2301      	movs	r3, #1
 802c9ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 802c9ce:	7bf9      	ldrb	r1, [r7, #15]
 802c9d0:	683b      	ldr	r3, [r7, #0]
 802c9d2:	9300      	str	r3, [sp, #0]
 802c9d4:	68bb      	ldr	r3, [r7, #8]
 802c9d6:	687a      	ldr	r2, [r7, #4]
 802c9d8:	4817      	ldr	r0, [pc, #92]	; (802ca38 <USBH_write+0x80>)
 802c9da:	f000 fec9 	bl	802d770 <USBH_MSC_Write>
 802c9de:	4603      	mov	r3, r0
 802c9e0:	2b00      	cmp	r3, #0
 802c9e2:	d103      	bne.n	802c9ec <USBH_write+0x34>
  {
    res = RES_OK;
 802c9e4:	2300      	movs	r3, #0
 802c9e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 802c9ea:	e01f      	b.n	802ca2c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 802c9ec:	f107 0210 	add.w	r2, r7, #16
 802c9f0:	7bfb      	ldrb	r3, [r7, #15]
 802c9f2:	4619      	mov	r1, r3
 802c9f4:	4810      	ldr	r0, [pc, #64]	; (802ca38 <USBH_write+0x80>)
 802c9f6:	f000 fe2e 	bl	802d656 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 802c9fa:	7f7b      	ldrb	r3, [r7, #29]
 802c9fc:	2b3a      	cmp	r3, #58	; 0x3a
 802c9fe:	d00d      	beq.n	802ca1c <USBH_write+0x64>
 802ca00:	2b3a      	cmp	r3, #58	; 0x3a
 802ca02:	dc0f      	bgt.n	802ca24 <USBH_write+0x6c>
 802ca04:	2b28      	cmp	r3, #40	; 0x28
 802ca06:	d009      	beq.n	802ca1c <USBH_write+0x64>
 802ca08:	2b28      	cmp	r3, #40	; 0x28
 802ca0a:	dc0b      	bgt.n	802ca24 <USBH_write+0x6c>
 802ca0c:	2b04      	cmp	r3, #4
 802ca0e:	d005      	beq.n	802ca1c <USBH_write+0x64>
 802ca10:	2b27      	cmp	r3, #39	; 0x27
 802ca12:	d107      	bne.n	802ca24 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 802ca14:	2302      	movs	r3, #2
 802ca16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802ca1a:	e007      	b.n	802ca2c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 802ca1c:	2303      	movs	r3, #3
 802ca1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802ca22:	e003      	b.n	802ca2c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 802ca24:	2301      	movs	r3, #1
 802ca26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802ca2a:	bf00      	nop
    }
  }

  return res;
 802ca2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 802ca30:	4618      	mov	r0, r3
 802ca32:	3748      	adds	r7, #72	; 0x48
 802ca34:	46bd      	mov	sp, r7
 802ca36:	bd80      	pop	{r7, pc}
 802ca38:	24006ae4 	.word	0x24006ae4

0802ca3c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 802ca3c:	b580      	push	{r7, lr}
 802ca3e:	b090      	sub	sp, #64	; 0x40
 802ca40:	af00      	add	r7, sp, #0
 802ca42:	4603      	mov	r3, r0
 802ca44:	603a      	str	r2, [r7, #0]
 802ca46:	71fb      	strb	r3, [r7, #7]
 802ca48:	460b      	mov	r3, r1
 802ca4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 802ca4c:	2301      	movs	r3, #1
 802ca4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 802ca52:	79bb      	ldrb	r3, [r7, #6]
 802ca54:	2b03      	cmp	r3, #3
 802ca56:	d852      	bhi.n	802cafe <USBH_ioctl+0xc2>
 802ca58:	a201      	add	r2, pc, #4	; (adr r2, 802ca60 <USBH_ioctl+0x24>)
 802ca5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ca5e:	bf00      	nop
 802ca60:	0802ca71 	.word	0x0802ca71
 802ca64:	0802ca79 	.word	0x0802ca79
 802ca68:	0802caa3 	.word	0x0802caa3
 802ca6c:	0802cacf 	.word	0x0802cacf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 802ca70:	2300      	movs	r3, #0
 802ca72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802ca76:	e045      	b.n	802cb04 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 802ca78:	f107 0208 	add.w	r2, r7, #8
 802ca7c:	79fb      	ldrb	r3, [r7, #7]
 802ca7e:	4619      	mov	r1, r3
 802ca80:	4823      	ldr	r0, [pc, #140]	; (802cb10 <USBH_ioctl+0xd4>)
 802ca82:	f000 fde8 	bl	802d656 <USBH_MSC_GetLUNInfo>
 802ca86:	4603      	mov	r3, r0
 802ca88:	2b00      	cmp	r3, #0
 802ca8a:	d106      	bne.n	802ca9a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 802ca8c:	68fa      	ldr	r2, [r7, #12]
 802ca8e:	683b      	ldr	r3, [r7, #0]
 802ca90:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 802ca92:	2300      	movs	r3, #0
 802ca94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 802ca98:	e034      	b.n	802cb04 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 802ca9a:	2301      	movs	r3, #1
 802ca9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802caa0:	e030      	b.n	802cb04 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 802caa2:	f107 0208 	add.w	r2, r7, #8
 802caa6:	79fb      	ldrb	r3, [r7, #7]
 802caa8:	4619      	mov	r1, r3
 802caaa:	4819      	ldr	r0, [pc, #100]	; (802cb10 <USBH_ioctl+0xd4>)
 802caac:	f000 fdd3 	bl	802d656 <USBH_MSC_GetLUNInfo>
 802cab0:	4603      	mov	r3, r0
 802cab2:	2b00      	cmp	r3, #0
 802cab4:	d107      	bne.n	802cac6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 802cab6:	8a3b      	ldrh	r3, [r7, #16]
 802cab8:	461a      	mov	r2, r3
 802caba:	683b      	ldr	r3, [r7, #0]
 802cabc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 802cabe:	2300      	movs	r3, #0
 802cac0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 802cac4:	e01e      	b.n	802cb04 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 802cac6:	2301      	movs	r3, #1
 802cac8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802cacc:	e01a      	b.n	802cb04 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 802cace:	f107 0208 	add.w	r2, r7, #8
 802cad2:	79fb      	ldrb	r3, [r7, #7]
 802cad4:	4619      	mov	r1, r3
 802cad6:	480e      	ldr	r0, [pc, #56]	; (802cb10 <USBH_ioctl+0xd4>)
 802cad8:	f000 fdbd 	bl	802d656 <USBH_MSC_GetLUNInfo>
 802cadc:	4603      	mov	r3, r0
 802cade:	2b00      	cmp	r3, #0
 802cae0:	d109      	bne.n	802caf6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 802cae2:	8a3b      	ldrh	r3, [r7, #16]
 802cae4:	0a5b      	lsrs	r3, r3, #9
 802cae6:	b29b      	uxth	r3, r3
 802cae8:	461a      	mov	r2, r3
 802caea:	683b      	ldr	r3, [r7, #0]
 802caec:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 802caee:	2300      	movs	r3, #0
 802caf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 802caf4:	e006      	b.n	802cb04 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 802caf6:	2301      	movs	r3, #1
 802caf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802cafc:	e002      	b.n	802cb04 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 802cafe:	2304      	movs	r3, #4
 802cb00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 802cb04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 802cb08:	4618      	mov	r0, r3
 802cb0a:	3740      	adds	r7, #64	; 0x40
 802cb0c:	46bd      	mov	sp, r7
 802cb0e:	bd80      	pop	{r7, pc}
 802cb10:	24006ae4 	.word	0x24006ae4

0802cb14 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 802cb14:	b590      	push	{r4, r7, lr}
 802cb16:	b089      	sub	sp, #36	; 0x24
 802cb18:	af04      	add	r7, sp, #16
 802cb1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 802cb1c:	687b      	ldr	r3, [r7, #4]
 802cb1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cb22:	7919      	ldrb	r1, [r3, #4]
 802cb24:	2350      	movs	r3, #80	; 0x50
 802cb26:	2206      	movs	r2, #6
 802cb28:	6878      	ldr	r0, [r7, #4]
 802cb2a:	f001 fd5f 	bl	802e5ec <USBH_FindInterface>
 802cb2e:	4603      	mov	r3, r0
 802cb30:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 802cb32:	7bfb      	ldrb	r3, [r7, #15]
 802cb34:	2bff      	cmp	r3, #255	; 0xff
 802cb36:	d002      	beq.n	802cb3e <USBH_MSC_InterfaceInit+0x2a>
 802cb38:	7bfb      	ldrb	r3, [r7, #15]
 802cb3a:	2b01      	cmp	r3, #1
 802cb3c:	d901      	bls.n	802cb42 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802cb3e:	2302      	movs	r3, #2
 802cb40:	e106      	b.n	802cd50 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 802cb42:	7bfb      	ldrb	r3, [r7, #15]
 802cb44:	4619      	mov	r1, r3
 802cb46:	6878      	ldr	r0, [r7, #4]
 802cb48:	f001 fd34 	bl	802e5b4 <USBH_SelectInterface>
 802cb4c:	4603      	mov	r3, r0
 802cb4e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 802cb50:	7bbb      	ldrb	r3, [r7, #14]
 802cb52:	2b00      	cmp	r3, #0
 802cb54:	d001      	beq.n	802cb5a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 802cb56:	2302      	movs	r3, #2
 802cb58:	e0fa      	b.n	802cd50 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 802cb5a:	687b      	ldr	r3, [r7, #4]
 802cb5c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 802cb60:	f44f 7080 	mov.w	r0, #256	; 0x100
 802cb64:	f00d f9a0 	bl	8039ea8 <malloc>
 802cb68:	4603      	mov	r3, r0
 802cb6a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802cb6c:	687b      	ldr	r3, [r7, #4]
 802cb6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cb72:	69db      	ldr	r3, [r3, #28]
 802cb74:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 802cb76:	68bb      	ldr	r3, [r7, #8]
 802cb78:	2b00      	cmp	r3, #0
 802cb7a:	d101      	bne.n	802cb80 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 802cb7c:	2302      	movs	r3, #2
 802cb7e:	e0e7      	b.n	802cd50 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 802cb80:	f44f 7280 	mov.w	r2, #256	; 0x100
 802cb84:	2100      	movs	r1, #0
 802cb86:	68b8      	ldr	r0, [r7, #8]
 802cb88:	f00d f9ac 	bl	8039ee4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802cb8c:	7bfb      	ldrb	r3, [r7, #15]
 802cb8e:	687a      	ldr	r2, [r7, #4]
 802cb90:	211a      	movs	r1, #26
 802cb92:	fb01 f303 	mul.w	r3, r1, r3
 802cb96:	4413      	add	r3, r2
 802cb98:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802cb9c:	781b      	ldrb	r3, [r3, #0]
 802cb9e:	b25b      	sxtb	r3, r3
 802cba0:	2b00      	cmp	r3, #0
 802cba2:	da16      	bge.n	802cbd2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 802cba4:	7bfb      	ldrb	r3, [r7, #15]
 802cba6:	687a      	ldr	r2, [r7, #4]
 802cba8:	211a      	movs	r1, #26
 802cbaa:	fb01 f303 	mul.w	r3, r1, r3
 802cbae:	4413      	add	r3, r2
 802cbb0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802cbb4:	781a      	ldrb	r2, [r3, #0]
 802cbb6:	68bb      	ldr	r3, [r7, #8]
 802cbb8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802cbba:	7bfb      	ldrb	r3, [r7, #15]
 802cbbc:	687a      	ldr	r2, [r7, #4]
 802cbbe:	211a      	movs	r1, #26
 802cbc0:	fb01 f303 	mul.w	r3, r1, r3
 802cbc4:	4413      	add	r3, r2
 802cbc6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802cbca:	881a      	ldrh	r2, [r3, #0]
 802cbcc:	68bb      	ldr	r3, [r7, #8]
 802cbce:	815a      	strh	r2, [r3, #10]
 802cbd0:	e015      	b.n	802cbfe <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 802cbd2:	7bfb      	ldrb	r3, [r7, #15]
 802cbd4:	687a      	ldr	r2, [r7, #4]
 802cbd6:	211a      	movs	r1, #26
 802cbd8:	fb01 f303 	mul.w	r3, r1, r3
 802cbdc:	4413      	add	r3, r2
 802cbde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802cbe2:	781a      	ldrb	r2, [r3, #0]
 802cbe4:	68bb      	ldr	r3, [r7, #8]
 802cbe6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802cbe8:	7bfb      	ldrb	r3, [r7, #15]
 802cbea:	687a      	ldr	r2, [r7, #4]
 802cbec:	211a      	movs	r1, #26
 802cbee:	fb01 f303 	mul.w	r3, r1, r3
 802cbf2:	4413      	add	r3, r2
 802cbf4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802cbf8:	881a      	ldrh	r2, [r3, #0]
 802cbfa:	68bb      	ldr	r3, [r7, #8]
 802cbfc:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802cbfe:	7bfb      	ldrb	r3, [r7, #15]
 802cc00:	687a      	ldr	r2, [r7, #4]
 802cc02:	211a      	movs	r1, #26
 802cc04:	fb01 f303 	mul.w	r3, r1, r3
 802cc08:	4413      	add	r3, r2
 802cc0a:	f203 3356 	addw	r3, r3, #854	; 0x356
 802cc0e:	781b      	ldrb	r3, [r3, #0]
 802cc10:	b25b      	sxtb	r3, r3
 802cc12:	2b00      	cmp	r3, #0
 802cc14:	da16      	bge.n	802cc44 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 802cc16:	7bfb      	ldrb	r3, [r7, #15]
 802cc18:	687a      	ldr	r2, [r7, #4]
 802cc1a:	211a      	movs	r1, #26
 802cc1c:	fb01 f303 	mul.w	r3, r1, r3
 802cc20:	4413      	add	r3, r2
 802cc22:	f203 3356 	addw	r3, r3, #854	; 0x356
 802cc26:	781a      	ldrb	r2, [r3, #0]
 802cc28:	68bb      	ldr	r3, [r7, #8]
 802cc2a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802cc2c:	7bfb      	ldrb	r3, [r7, #15]
 802cc2e:	687a      	ldr	r2, [r7, #4]
 802cc30:	211a      	movs	r1, #26
 802cc32:	fb01 f303 	mul.w	r3, r1, r3
 802cc36:	4413      	add	r3, r2
 802cc38:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802cc3c:	881a      	ldrh	r2, [r3, #0]
 802cc3e:	68bb      	ldr	r3, [r7, #8]
 802cc40:	815a      	strh	r2, [r3, #10]
 802cc42:	e015      	b.n	802cc70 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 802cc44:	7bfb      	ldrb	r3, [r7, #15]
 802cc46:	687a      	ldr	r2, [r7, #4]
 802cc48:	211a      	movs	r1, #26
 802cc4a:	fb01 f303 	mul.w	r3, r1, r3
 802cc4e:	4413      	add	r3, r2
 802cc50:	f203 3356 	addw	r3, r3, #854	; 0x356
 802cc54:	781a      	ldrb	r2, [r3, #0]
 802cc56:	68bb      	ldr	r3, [r7, #8]
 802cc58:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802cc5a:	7bfb      	ldrb	r3, [r7, #15]
 802cc5c:	687a      	ldr	r2, [r7, #4]
 802cc5e:	211a      	movs	r1, #26
 802cc60:	fb01 f303 	mul.w	r3, r1, r3
 802cc64:	4413      	add	r3, r2
 802cc66:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802cc6a:	881a      	ldrh	r2, [r3, #0]
 802cc6c:	68bb      	ldr	r3, [r7, #8]
 802cc6e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 802cc70:	68bb      	ldr	r3, [r7, #8]
 802cc72:	2200      	movs	r2, #0
 802cc74:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 802cc76:	68bb      	ldr	r3, [r7, #8]
 802cc78:	2200      	movs	r2, #0
 802cc7a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 802cc7c:	68bb      	ldr	r3, [r7, #8]
 802cc7e:	2200      	movs	r2, #0
 802cc80:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 802cc82:	68bb      	ldr	r3, [r7, #8]
 802cc84:	799b      	ldrb	r3, [r3, #6]
 802cc86:	4619      	mov	r1, r3
 802cc88:	6878      	ldr	r0, [r7, #4]
 802cc8a:	f003 f9d6 	bl	803003a <USBH_AllocPipe>
 802cc8e:	4603      	mov	r3, r0
 802cc90:	461a      	mov	r2, r3
 802cc92:	68bb      	ldr	r3, [r7, #8]
 802cc94:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 802cc96:	68bb      	ldr	r3, [r7, #8]
 802cc98:	79db      	ldrb	r3, [r3, #7]
 802cc9a:	4619      	mov	r1, r3
 802cc9c:	6878      	ldr	r0, [r7, #4]
 802cc9e:	f003 f9cc 	bl	803003a <USBH_AllocPipe>
 802cca2:	4603      	mov	r3, r0
 802cca4:	461a      	mov	r2, r3
 802cca6:	68bb      	ldr	r3, [r7, #8]
 802cca8:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 802ccaa:	6878      	ldr	r0, [r7, #4]
 802ccac:	f000 fe04 	bl	802d8b8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 802ccb0:	68bb      	ldr	r3, [r7, #8]
 802ccb2:	799b      	ldrb	r3, [r3, #6]
 802ccb4:	2b00      	cmp	r3, #0
 802ccb6:	d01e      	beq.n	802ccf6 <USBH_MSC_InterfaceInit+0x1e2>
 802ccb8:	68bb      	ldr	r3, [r7, #8]
 802ccba:	891b      	ldrh	r3, [r3, #8]
 802ccbc:	2b00      	cmp	r3, #0
 802ccbe:	d01a      	beq.n	802ccf6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 802ccc0:	68bb      	ldr	r3, [r7, #8]
 802ccc2:	7959      	ldrb	r1, [r3, #5]
 802ccc4:	68bb      	ldr	r3, [r7, #8]
 802ccc6:	7998      	ldrb	r0, [r3, #6]
 802ccc8:	687b      	ldr	r3, [r7, #4]
 802ccca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802ccce:	687b      	ldr	r3, [r7, #4]
 802ccd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802ccd4:	68ba      	ldr	r2, [r7, #8]
 802ccd6:	8912      	ldrh	r2, [r2, #8]
 802ccd8:	9202      	str	r2, [sp, #8]
 802ccda:	2202      	movs	r2, #2
 802ccdc:	9201      	str	r2, [sp, #4]
 802ccde:	9300      	str	r3, [sp, #0]
 802cce0:	4623      	mov	r3, r4
 802cce2:	4602      	mov	r2, r0
 802cce4:	6878      	ldr	r0, [r7, #4]
 802cce6:	f003 f979 	bl	802ffdc <USBH_OpenPipe>
 802ccea:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 802ccec:	68bb      	ldr	r3, [r7, #8]
 802ccee:	79db      	ldrb	r3, [r3, #7]
 802ccf0:	2b00      	cmp	r3, #0
 802ccf2:	d02c      	beq.n	802cd4e <USBH_MSC_InterfaceInit+0x23a>
 802ccf4:	e001      	b.n	802ccfa <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 802ccf6:	2303      	movs	r3, #3
 802ccf8:	e02a      	b.n	802cd50 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 802ccfa:	68bb      	ldr	r3, [r7, #8]
 802ccfc:	895b      	ldrh	r3, [r3, #10]
 802ccfe:	2b00      	cmp	r3, #0
 802cd00:	d025      	beq.n	802cd4e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 802cd02:	68bb      	ldr	r3, [r7, #8]
 802cd04:	7919      	ldrb	r1, [r3, #4]
 802cd06:	68bb      	ldr	r3, [r7, #8]
 802cd08:	79d8      	ldrb	r0, [r3, #7]
 802cd0a:	687b      	ldr	r3, [r7, #4]
 802cd0c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802cd10:	687b      	ldr	r3, [r7, #4]
 802cd12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802cd16:	68ba      	ldr	r2, [r7, #8]
 802cd18:	8952      	ldrh	r2, [r2, #10]
 802cd1a:	9202      	str	r2, [sp, #8]
 802cd1c:	2202      	movs	r2, #2
 802cd1e:	9201      	str	r2, [sp, #4]
 802cd20:	9300      	str	r3, [sp, #0]
 802cd22:	4623      	mov	r3, r4
 802cd24:	4602      	mov	r2, r0
 802cd26:	6878      	ldr	r0, [r7, #4]
 802cd28:	f003 f958 	bl	802ffdc <USBH_OpenPipe>
 802cd2c:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 802cd2e:	68bb      	ldr	r3, [r7, #8]
 802cd30:	791b      	ldrb	r3, [r3, #4]
 802cd32:	2200      	movs	r2, #0
 802cd34:	4619      	mov	r1, r3
 802cd36:	6878      	ldr	r0, [r7, #4]
 802cd38:	f00c ffd8 	bl	8039cec <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 802cd3c:	68bb      	ldr	r3, [r7, #8]
 802cd3e:	795b      	ldrb	r3, [r3, #5]
 802cd40:	2200      	movs	r2, #0
 802cd42:	4619      	mov	r1, r3
 802cd44:	6878      	ldr	r0, [r7, #4]
 802cd46:	f00c ffd1 	bl	8039cec <USBH_LL_SetToggle>

  return USBH_OK;
 802cd4a:	2300      	movs	r3, #0
 802cd4c:	e000      	b.n	802cd50 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 802cd4e:	2303      	movs	r3, #3
}
 802cd50:	4618      	mov	r0, r3
 802cd52:	3714      	adds	r7, #20
 802cd54:	46bd      	mov	sp, r7
 802cd56:	bd90      	pop	{r4, r7, pc}

0802cd58 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 802cd58:	b580      	push	{r7, lr}
 802cd5a:	b084      	sub	sp, #16
 802cd5c:	af00      	add	r7, sp, #0
 802cd5e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802cd60:	687b      	ldr	r3, [r7, #4]
 802cd62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cd66:	69db      	ldr	r3, [r3, #28]
 802cd68:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 802cd6a:	68fb      	ldr	r3, [r7, #12]
 802cd6c:	795b      	ldrb	r3, [r3, #5]
 802cd6e:	2b00      	cmp	r3, #0
 802cd70:	d00e      	beq.n	802cd90 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 802cd72:	68fb      	ldr	r3, [r7, #12]
 802cd74:	795b      	ldrb	r3, [r3, #5]
 802cd76:	4619      	mov	r1, r3
 802cd78:	6878      	ldr	r0, [r7, #4]
 802cd7a:	f003 f94e 	bl	803001a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 802cd7e:	68fb      	ldr	r3, [r7, #12]
 802cd80:	795b      	ldrb	r3, [r3, #5]
 802cd82:	4619      	mov	r1, r3
 802cd84:	6878      	ldr	r0, [r7, #4]
 802cd86:	f003 f979 	bl	803007c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 802cd8a:	68fb      	ldr	r3, [r7, #12]
 802cd8c:	2200      	movs	r2, #0
 802cd8e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 802cd90:	68fb      	ldr	r3, [r7, #12]
 802cd92:	791b      	ldrb	r3, [r3, #4]
 802cd94:	2b00      	cmp	r3, #0
 802cd96:	d00e      	beq.n	802cdb6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 802cd98:	68fb      	ldr	r3, [r7, #12]
 802cd9a:	791b      	ldrb	r3, [r3, #4]
 802cd9c:	4619      	mov	r1, r3
 802cd9e:	6878      	ldr	r0, [r7, #4]
 802cda0:	f003 f93b 	bl	803001a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 802cda4:	68fb      	ldr	r3, [r7, #12]
 802cda6:	791b      	ldrb	r3, [r3, #4]
 802cda8:	4619      	mov	r1, r3
 802cdaa:	6878      	ldr	r0, [r7, #4]
 802cdac:	f003 f966 	bl	803007c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 802cdb0:	68fb      	ldr	r3, [r7, #12]
 802cdb2:	2200      	movs	r2, #0
 802cdb4:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 802cdb6:	687b      	ldr	r3, [r7, #4]
 802cdb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cdbc:	69db      	ldr	r3, [r3, #28]
 802cdbe:	2b00      	cmp	r3, #0
 802cdc0:	d00b      	beq.n	802cdda <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 802cdc2:	687b      	ldr	r3, [r7, #4]
 802cdc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cdc8:	69db      	ldr	r3, [r3, #28]
 802cdca:	4618      	mov	r0, r3
 802cdcc:	f00d f874 	bl	8039eb8 <free>
    phost->pActiveClass->pData = 0U;
 802cdd0:	687b      	ldr	r3, [r7, #4]
 802cdd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cdd6:	2200      	movs	r2, #0
 802cdd8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802cdda:	2300      	movs	r3, #0
}
 802cddc:	4618      	mov	r0, r3
 802cdde:	3710      	adds	r7, #16
 802cde0:	46bd      	mov	sp, r7
 802cde2:	bd80      	pop	{r7, pc}

0802cde4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 802cde4:	b580      	push	{r7, lr}
 802cde6:	b084      	sub	sp, #16
 802cde8:	af00      	add	r7, sp, #0
 802cdea:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802cdec:	687b      	ldr	r3, [r7, #4]
 802cdee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cdf2:	69db      	ldr	r3, [r3, #28]
 802cdf4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 802cdf6:	2301      	movs	r3, #1
 802cdf8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 802cdfa:	68bb      	ldr	r3, [r7, #8]
 802cdfc:	7b9b      	ldrb	r3, [r3, #14]
 802cdfe:	2b03      	cmp	r3, #3
 802ce00:	d041      	beq.n	802ce86 <USBH_MSC_ClassRequest+0xa2>
 802ce02:	2b03      	cmp	r3, #3
 802ce04:	dc4b      	bgt.n	802ce9e <USBH_MSC_ClassRequest+0xba>
 802ce06:	2b00      	cmp	r3, #0
 802ce08:	d001      	beq.n	802ce0e <USBH_MSC_ClassRequest+0x2a>
 802ce0a:	2b02      	cmp	r3, #2
 802ce0c:	d147      	bne.n	802ce9e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 802ce0e:	68bb      	ldr	r3, [r7, #8]
 802ce10:	4619      	mov	r1, r3
 802ce12:	6878      	ldr	r0, [r7, #4]
 802ce14:	f000 fd32 	bl	802d87c <USBH_MSC_BOT_REQ_GetMaxLUN>
 802ce18:	4603      	mov	r3, r0
 802ce1a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 802ce1c:	7bfb      	ldrb	r3, [r7, #15]
 802ce1e:	2b03      	cmp	r3, #3
 802ce20:	d104      	bne.n	802ce2c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 802ce22:	68bb      	ldr	r3, [r7, #8]
 802ce24:	2200      	movs	r2, #0
 802ce26:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 802ce28:	2300      	movs	r3, #0
 802ce2a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 802ce2c:	7bfb      	ldrb	r3, [r7, #15]
 802ce2e:	2b00      	cmp	r3, #0
 802ce30:	d137      	bne.n	802cea2 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 802ce32:	68bb      	ldr	r3, [r7, #8]
 802ce34:	781b      	ldrb	r3, [r3, #0]
 802ce36:	2b02      	cmp	r3, #2
 802ce38:	d804      	bhi.n	802ce44 <USBH_MSC_ClassRequest+0x60>
 802ce3a:	68bb      	ldr	r3, [r7, #8]
 802ce3c:	781b      	ldrb	r3, [r3, #0]
 802ce3e:	3301      	adds	r3, #1
 802ce40:	b2da      	uxtb	r2, r3
 802ce42:	e000      	b.n	802ce46 <USBH_MSC_ClassRequest+0x62>
 802ce44:	2202      	movs	r2, #2
 802ce46:	68bb      	ldr	r3, [r7, #8]
 802ce48:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 802ce4a:	2300      	movs	r3, #0
 802ce4c:	73bb      	strb	r3, [r7, #14]
 802ce4e:	e014      	b.n	802ce7a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 802ce50:	7bbb      	ldrb	r3, [r7, #14]
 802ce52:	68ba      	ldr	r2, [r7, #8]
 802ce54:	2134      	movs	r1, #52	; 0x34
 802ce56:	fb01 f303 	mul.w	r3, r1, r3
 802ce5a:	4413      	add	r3, r2
 802ce5c:	3392      	adds	r3, #146	; 0x92
 802ce5e:	2202      	movs	r2, #2
 802ce60:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 802ce62:	7bbb      	ldrb	r3, [r7, #14]
 802ce64:	68ba      	ldr	r2, [r7, #8]
 802ce66:	2134      	movs	r1, #52	; 0x34
 802ce68:	fb01 f303 	mul.w	r3, r1, r3
 802ce6c:	4413      	add	r3, r2
 802ce6e:	33c1      	adds	r3, #193	; 0xc1
 802ce70:	2200      	movs	r2, #0
 802ce72:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 802ce74:	7bbb      	ldrb	r3, [r7, #14]
 802ce76:	3301      	adds	r3, #1
 802ce78:	73bb      	strb	r3, [r7, #14]
 802ce7a:	68bb      	ldr	r3, [r7, #8]
 802ce7c:	781b      	ldrb	r3, [r3, #0]
 802ce7e:	7bba      	ldrb	r2, [r7, #14]
 802ce80:	429a      	cmp	r2, r3
 802ce82:	d3e5      	bcc.n	802ce50 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 802ce84:	e00d      	b.n	802cea2 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 802ce86:	2100      	movs	r1, #0
 802ce88:	6878      	ldr	r0, [r7, #4]
 802ce8a:	f002 fa96 	bl	802f3ba <USBH_ClrFeature>
 802ce8e:	4603      	mov	r3, r0
 802ce90:	2b00      	cmp	r3, #0
 802ce92:	d108      	bne.n	802cea6 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 802ce94:	68bb      	ldr	r3, [r7, #8]
 802ce96:	7bda      	ldrb	r2, [r3, #15]
 802ce98:	68bb      	ldr	r3, [r7, #8]
 802ce9a:	739a      	strb	r2, [r3, #14]
      }
      break;
 802ce9c:	e003      	b.n	802cea6 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 802ce9e:	bf00      	nop
 802cea0:	e002      	b.n	802cea8 <USBH_MSC_ClassRequest+0xc4>
      break;
 802cea2:	bf00      	nop
 802cea4:	e000      	b.n	802cea8 <USBH_MSC_ClassRequest+0xc4>
      break;
 802cea6:	bf00      	nop
  }

  return status;
 802cea8:	7bfb      	ldrb	r3, [r7, #15]
}
 802ceaa:	4618      	mov	r0, r3
 802ceac:	3710      	adds	r7, #16
 802ceae:	46bd      	mov	sp, r7
 802ceb0:	bd80      	pop	{r7, pc}
	...

0802ceb4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 802ceb4:	b580      	push	{r7, lr}
 802ceb6:	b086      	sub	sp, #24
 802ceb8:	af00      	add	r7, sp, #0
 802ceba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802cebc:	687b      	ldr	r3, [r7, #4]
 802cebe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cec2:	69db      	ldr	r3, [r3, #28]
 802cec4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 802cec6:	2301      	movs	r3, #1
 802cec8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 802ceca:	2301      	movs	r3, #1
 802cecc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 802cece:	2301      	movs	r3, #1
 802ced0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 802ced2:	693b      	ldr	r3, [r7, #16]
 802ced4:	7b1b      	ldrb	r3, [r3, #12]
 802ced6:	2b00      	cmp	r3, #0
 802ced8:	d003      	beq.n	802cee2 <USBH_MSC_Process+0x2e>
 802ceda:	2b01      	cmp	r3, #1
 802cedc:	f000 828d 	beq.w	802d3fa <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 802cee0:	e28e      	b.n	802d400 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 802cee2:	693b      	ldr	r3, [r7, #16]
 802cee4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 802cee8:	693b      	ldr	r3, [r7, #16]
 802ceea:	781b      	ldrb	r3, [r3, #0]
 802ceec:	b29b      	uxth	r3, r3
 802ceee:	429a      	cmp	r2, r3
 802cef0:	f080 8267 	bcs.w	802d3c2 <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 802cef4:	693b      	ldr	r3, [r7, #16]
 802cef6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cefa:	4619      	mov	r1, r3
 802cefc:	693a      	ldr	r2, [r7, #16]
 802cefe:	2334      	movs	r3, #52	; 0x34
 802cf00:	fb01 f303 	mul.w	r3, r1, r3
 802cf04:	4413      	add	r3, r2
 802cf06:	3391      	adds	r3, #145	; 0x91
 802cf08:	2201      	movs	r2, #1
 802cf0a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 802cf0c:	693b      	ldr	r3, [r7, #16]
 802cf0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cf12:	4619      	mov	r1, r3
 802cf14:	693a      	ldr	r2, [r7, #16]
 802cf16:	2334      	movs	r3, #52	; 0x34
 802cf18:	fb01 f303 	mul.w	r3, r1, r3
 802cf1c:	4413      	add	r3, r2
 802cf1e:	3390      	adds	r3, #144	; 0x90
 802cf20:	781b      	ldrb	r3, [r3, #0]
 802cf22:	2b08      	cmp	r3, #8
 802cf24:	f200 8235 	bhi.w	802d392 <USBH_MSC_Process+0x4de>
 802cf28:	a201      	add	r2, pc, #4	; (adr r2, 802cf30 <USBH_MSC_Process+0x7c>)
 802cf2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802cf2e:	bf00      	nop
 802cf30:	0802cf55 	.word	0x0802cf55
 802cf34:	0802d393 	.word	0x0802d393
 802cf38:	0802d01d 	.word	0x0802d01d
 802cf3c:	0802d1a1 	.word	0x0802d1a1
 802cf40:	0802cf7b 	.word	0x0802cf7b
 802cf44:	0802d26d 	.word	0x0802d26d
 802cf48:	0802d393 	.word	0x0802d393
 802cf4c:	0802d393 	.word	0x0802d393
 802cf50:	0802d381 	.word	0x0802d381
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 802cf54:	693b      	ldr	r3, [r7, #16]
 802cf56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cf5a:	4619      	mov	r1, r3
 802cf5c:	693a      	ldr	r2, [r7, #16]
 802cf5e:	2334      	movs	r3, #52	; 0x34
 802cf60:	fb01 f303 	mul.w	r3, r1, r3
 802cf64:	4413      	add	r3, r2
 802cf66:	3390      	adds	r3, #144	; 0x90
 802cf68:	2204      	movs	r2, #4
 802cf6a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 802cf6c:	687b      	ldr	r3, [r7, #4]
 802cf6e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 802cf72:	693b      	ldr	r3, [r7, #16]
 802cf74:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 802cf78:	e214      	b.n	802d3a4 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 802cf7a:	693b      	ldr	r3, [r7, #16]
 802cf7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cf80:	b2d9      	uxtb	r1, r3
 802cf82:	693b      	ldr	r3, [r7, #16]
 802cf84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cf88:	461a      	mov	r2, r3
 802cf8a:	2334      	movs	r3, #52	; 0x34
 802cf8c:	fb02 f303 	mul.w	r3, r2, r3
 802cf90:	3398      	adds	r3, #152	; 0x98
 802cf92:	693a      	ldr	r2, [r7, #16]
 802cf94:	4413      	add	r3, r2
 802cf96:	3307      	adds	r3, #7
 802cf98:	461a      	mov	r2, r3
 802cf9a:	6878      	ldr	r0, [r7, #4]
 802cf9c:	f001 f836 	bl	802e00c <USBH_MSC_SCSI_Inquiry>
 802cfa0:	4603      	mov	r3, r0
 802cfa2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 802cfa4:	7bfb      	ldrb	r3, [r7, #15]
 802cfa6:	2b00      	cmp	r3, #0
 802cfa8:	d10b      	bne.n	802cfc2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 802cfaa:	693b      	ldr	r3, [r7, #16]
 802cfac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cfb0:	4619      	mov	r1, r3
 802cfb2:	693a      	ldr	r2, [r7, #16]
 802cfb4:	2334      	movs	r3, #52	; 0x34
 802cfb6:	fb01 f303 	mul.w	r3, r1, r3
 802cfba:	4413      	add	r3, r2
 802cfbc:	3390      	adds	r3, #144	; 0x90
 802cfbe:	2202      	movs	r2, #2
 802cfc0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 802cfc2:	7bfb      	ldrb	r3, [r7, #15]
 802cfc4:	2b02      	cmp	r3, #2
 802cfc6:	d10c      	bne.n	802cfe2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 802cfc8:	693b      	ldr	r3, [r7, #16]
 802cfca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cfce:	4619      	mov	r1, r3
 802cfd0:	693a      	ldr	r2, [r7, #16]
 802cfd2:	2334      	movs	r3, #52	; 0x34
 802cfd4:	fb01 f303 	mul.w	r3, r1, r3
 802cfd8:	4413      	add	r3, r2
 802cfda:	3390      	adds	r3, #144	; 0x90
 802cfdc:	2205      	movs	r2, #5
 802cfde:	701a      	strb	r2, [r3, #0]
            break;
 802cfe0:	e1d9      	b.n	802d396 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 802cfe2:	7bfb      	ldrb	r3, [r7, #15]
 802cfe4:	2b04      	cmp	r3, #4
 802cfe6:	f040 81d6 	bne.w	802d396 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802cfea:	693b      	ldr	r3, [r7, #16]
 802cfec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802cff0:	4619      	mov	r1, r3
 802cff2:	693a      	ldr	r2, [r7, #16]
 802cff4:	2334      	movs	r3, #52	; 0x34
 802cff6:	fb01 f303 	mul.w	r3, r1, r3
 802cffa:	4413      	add	r3, r2
 802cffc:	3390      	adds	r3, #144	; 0x90
 802cffe:	2201      	movs	r2, #1
 802d000:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 802d002:	693b      	ldr	r3, [r7, #16]
 802d004:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d008:	4619      	mov	r1, r3
 802d00a:	693a      	ldr	r2, [r7, #16]
 802d00c:	2334      	movs	r3, #52	; 0x34
 802d00e:	fb01 f303 	mul.w	r3, r1, r3
 802d012:	4413      	add	r3, r2
 802d014:	3391      	adds	r3, #145	; 0x91
 802d016:	2202      	movs	r2, #2
 802d018:	701a      	strb	r2, [r3, #0]
            break;
 802d01a:	e1bc      	b.n	802d396 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 802d01c:	693b      	ldr	r3, [r7, #16]
 802d01e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d022:	b2db      	uxtb	r3, r3
 802d024:	4619      	mov	r1, r3
 802d026:	6878      	ldr	r0, [r7, #4]
 802d028:	f000 ff32 	bl	802de90 <USBH_MSC_SCSI_TestUnitReady>
 802d02c:	4603      	mov	r3, r0
 802d02e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 802d030:	7bbb      	ldrb	r3, [r7, #14]
 802d032:	2b00      	cmp	r3, #0
 802d034:	d149      	bne.n	802d0ca <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 802d036:	693b      	ldr	r3, [r7, #16]
 802d038:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d03c:	4619      	mov	r1, r3
 802d03e:	693a      	ldr	r2, [r7, #16]
 802d040:	2334      	movs	r3, #52	; 0x34
 802d042:	fb01 f303 	mul.w	r3, r1, r3
 802d046:	4413      	add	r3, r2
 802d048:	3392      	adds	r3, #146	; 0x92
 802d04a:	781b      	ldrb	r3, [r3, #0]
 802d04c:	2b00      	cmp	r3, #0
 802d04e:	d00c      	beq.n	802d06a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 802d050:	693b      	ldr	r3, [r7, #16]
 802d052:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d056:	4619      	mov	r1, r3
 802d058:	693a      	ldr	r2, [r7, #16]
 802d05a:	2334      	movs	r3, #52	; 0x34
 802d05c:	fb01 f303 	mul.w	r3, r1, r3
 802d060:	4413      	add	r3, r2
 802d062:	33c1      	adds	r3, #193	; 0xc1
 802d064:	2201      	movs	r2, #1
 802d066:	701a      	strb	r2, [r3, #0]
 802d068:	e00b      	b.n	802d082 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 802d06a:	693b      	ldr	r3, [r7, #16]
 802d06c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d070:	4619      	mov	r1, r3
 802d072:	693a      	ldr	r2, [r7, #16]
 802d074:	2334      	movs	r3, #52	; 0x34
 802d076:	fb01 f303 	mul.w	r3, r1, r3
 802d07a:	4413      	add	r3, r2
 802d07c:	33c1      	adds	r3, #193	; 0xc1
 802d07e:	2200      	movs	r2, #0
 802d080:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 802d082:	693b      	ldr	r3, [r7, #16]
 802d084:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d088:	4619      	mov	r1, r3
 802d08a:	693a      	ldr	r2, [r7, #16]
 802d08c:	2334      	movs	r3, #52	; 0x34
 802d08e:	fb01 f303 	mul.w	r3, r1, r3
 802d092:	4413      	add	r3, r2
 802d094:	3390      	adds	r3, #144	; 0x90
 802d096:	2203      	movs	r2, #3
 802d098:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 802d09a:	693b      	ldr	r3, [r7, #16]
 802d09c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d0a0:	4619      	mov	r1, r3
 802d0a2:	693a      	ldr	r2, [r7, #16]
 802d0a4:	2334      	movs	r3, #52	; 0x34
 802d0a6:	fb01 f303 	mul.w	r3, r1, r3
 802d0aa:	4413      	add	r3, r2
 802d0ac:	3391      	adds	r3, #145	; 0x91
 802d0ae:	2200      	movs	r2, #0
 802d0b0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 802d0b2:	693b      	ldr	r3, [r7, #16]
 802d0b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d0b8:	4619      	mov	r1, r3
 802d0ba:	693a      	ldr	r2, [r7, #16]
 802d0bc:	2334      	movs	r3, #52	; 0x34
 802d0be:	fb01 f303 	mul.w	r3, r1, r3
 802d0c2:	4413      	add	r3, r2
 802d0c4:	3392      	adds	r3, #146	; 0x92
 802d0c6:	2200      	movs	r2, #0
 802d0c8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 802d0ca:	7bbb      	ldrb	r3, [r7, #14]
 802d0cc:	2b02      	cmp	r3, #2
 802d0ce:	d14a      	bne.n	802d166 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 802d0d0:	693b      	ldr	r3, [r7, #16]
 802d0d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d0d6:	4619      	mov	r1, r3
 802d0d8:	693a      	ldr	r2, [r7, #16]
 802d0da:	2334      	movs	r3, #52	; 0x34
 802d0dc:	fb01 f303 	mul.w	r3, r1, r3
 802d0e0:	4413      	add	r3, r2
 802d0e2:	3392      	adds	r3, #146	; 0x92
 802d0e4:	781b      	ldrb	r3, [r3, #0]
 802d0e6:	2b02      	cmp	r3, #2
 802d0e8:	d00c      	beq.n	802d104 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 802d0ea:	693b      	ldr	r3, [r7, #16]
 802d0ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d0f0:	4619      	mov	r1, r3
 802d0f2:	693a      	ldr	r2, [r7, #16]
 802d0f4:	2334      	movs	r3, #52	; 0x34
 802d0f6:	fb01 f303 	mul.w	r3, r1, r3
 802d0fa:	4413      	add	r3, r2
 802d0fc:	33c1      	adds	r3, #193	; 0xc1
 802d0fe:	2201      	movs	r2, #1
 802d100:	701a      	strb	r2, [r3, #0]
 802d102:	e00b      	b.n	802d11c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 802d104:	693b      	ldr	r3, [r7, #16]
 802d106:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d10a:	4619      	mov	r1, r3
 802d10c:	693a      	ldr	r2, [r7, #16]
 802d10e:	2334      	movs	r3, #52	; 0x34
 802d110:	fb01 f303 	mul.w	r3, r1, r3
 802d114:	4413      	add	r3, r2
 802d116:	33c1      	adds	r3, #193	; 0xc1
 802d118:	2200      	movs	r2, #0
 802d11a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 802d11c:	693b      	ldr	r3, [r7, #16]
 802d11e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d122:	4619      	mov	r1, r3
 802d124:	693a      	ldr	r2, [r7, #16]
 802d126:	2334      	movs	r3, #52	; 0x34
 802d128:	fb01 f303 	mul.w	r3, r1, r3
 802d12c:	4413      	add	r3, r2
 802d12e:	3390      	adds	r3, #144	; 0x90
 802d130:	2205      	movs	r2, #5
 802d132:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 802d134:	693b      	ldr	r3, [r7, #16]
 802d136:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d13a:	4619      	mov	r1, r3
 802d13c:	693a      	ldr	r2, [r7, #16]
 802d13e:	2334      	movs	r3, #52	; 0x34
 802d140:	fb01 f303 	mul.w	r3, r1, r3
 802d144:	4413      	add	r3, r2
 802d146:	3391      	adds	r3, #145	; 0x91
 802d148:	2201      	movs	r2, #1
 802d14a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 802d14c:	693b      	ldr	r3, [r7, #16]
 802d14e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d152:	4619      	mov	r1, r3
 802d154:	693a      	ldr	r2, [r7, #16]
 802d156:	2334      	movs	r3, #52	; 0x34
 802d158:	fb01 f303 	mul.w	r3, r1, r3
 802d15c:	4413      	add	r3, r2
 802d15e:	3392      	adds	r3, #146	; 0x92
 802d160:	2202      	movs	r2, #2
 802d162:	701a      	strb	r2, [r3, #0]
            break;
 802d164:	e119      	b.n	802d39a <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 802d166:	7bbb      	ldrb	r3, [r7, #14]
 802d168:	2b04      	cmp	r3, #4
 802d16a:	f040 8116 	bne.w	802d39a <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802d16e:	693b      	ldr	r3, [r7, #16]
 802d170:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d174:	4619      	mov	r1, r3
 802d176:	693a      	ldr	r2, [r7, #16]
 802d178:	2334      	movs	r3, #52	; 0x34
 802d17a:	fb01 f303 	mul.w	r3, r1, r3
 802d17e:	4413      	add	r3, r2
 802d180:	3390      	adds	r3, #144	; 0x90
 802d182:	2201      	movs	r2, #1
 802d184:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 802d186:	693b      	ldr	r3, [r7, #16]
 802d188:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d18c:	4619      	mov	r1, r3
 802d18e:	693a      	ldr	r2, [r7, #16]
 802d190:	2334      	movs	r3, #52	; 0x34
 802d192:	fb01 f303 	mul.w	r3, r1, r3
 802d196:	4413      	add	r3, r2
 802d198:	3391      	adds	r3, #145	; 0x91
 802d19a:	2202      	movs	r2, #2
 802d19c:	701a      	strb	r2, [r3, #0]
            break;
 802d19e:	e0fc      	b.n	802d39a <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 802d1a0:	693b      	ldr	r3, [r7, #16]
 802d1a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d1a6:	b2d9      	uxtb	r1, r3
 802d1a8:	693b      	ldr	r3, [r7, #16]
 802d1aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d1ae:	461a      	mov	r2, r3
 802d1b0:	2334      	movs	r3, #52	; 0x34
 802d1b2:	fb02 f303 	mul.w	r3, r2, r3
 802d1b6:	3390      	adds	r3, #144	; 0x90
 802d1b8:	693a      	ldr	r2, [r7, #16]
 802d1ba:	4413      	add	r3, r2
 802d1bc:	3304      	adds	r3, #4
 802d1be:	461a      	mov	r2, r3
 802d1c0:	6878      	ldr	r0, [r7, #4]
 802d1c2:	f000 fea8 	bl	802df16 <USBH_MSC_SCSI_ReadCapacity>
 802d1c6:	4603      	mov	r3, r0
 802d1c8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 802d1ca:	7bfb      	ldrb	r3, [r7, #15]
 802d1cc:	2b00      	cmp	r3, #0
 802d1ce:	d120      	bne.n	802d212 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802d1d0:	693b      	ldr	r3, [r7, #16]
 802d1d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d1d6:	4619      	mov	r1, r3
 802d1d8:	693a      	ldr	r2, [r7, #16]
 802d1da:	2334      	movs	r3, #52	; 0x34
 802d1dc:	fb01 f303 	mul.w	r3, r1, r3
 802d1e0:	4413      	add	r3, r2
 802d1e2:	3390      	adds	r3, #144	; 0x90
 802d1e4:	2201      	movs	r2, #1
 802d1e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 802d1e8:	693b      	ldr	r3, [r7, #16]
 802d1ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d1ee:	4619      	mov	r1, r3
 802d1f0:	693a      	ldr	r2, [r7, #16]
 802d1f2:	2334      	movs	r3, #52	; 0x34
 802d1f4:	fb01 f303 	mul.w	r3, r1, r3
 802d1f8:	4413      	add	r3, r2
 802d1fa:	3391      	adds	r3, #145	; 0x91
 802d1fc:	2200      	movs	r2, #0
 802d1fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 802d200:	693b      	ldr	r3, [r7, #16]
 802d202:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d206:	3301      	adds	r3, #1
 802d208:	b29a      	uxth	r2, r3
 802d20a:	693b      	ldr	r3, [r7, #16]
 802d20c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 802d210:	e0c5      	b.n	802d39e <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 802d212:	7bfb      	ldrb	r3, [r7, #15]
 802d214:	2b02      	cmp	r3, #2
 802d216:	d10c      	bne.n	802d232 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 802d218:	693b      	ldr	r3, [r7, #16]
 802d21a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d21e:	4619      	mov	r1, r3
 802d220:	693a      	ldr	r2, [r7, #16]
 802d222:	2334      	movs	r3, #52	; 0x34
 802d224:	fb01 f303 	mul.w	r3, r1, r3
 802d228:	4413      	add	r3, r2
 802d22a:	3390      	adds	r3, #144	; 0x90
 802d22c:	2205      	movs	r2, #5
 802d22e:	701a      	strb	r2, [r3, #0]
            break;
 802d230:	e0b5      	b.n	802d39e <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 802d232:	7bfb      	ldrb	r3, [r7, #15]
 802d234:	2b04      	cmp	r3, #4
 802d236:	f040 80b2 	bne.w	802d39e <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802d23a:	693b      	ldr	r3, [r7, #16]
 802d23c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d240:	4619      	mov	r1, r3
 802d242:	693a      	ldr	r2, [r7, #16]
 802d244:	2334      	movs	r3, #52	; 0x34
 802d246:	fb01 f303 	mul.w	r3, r1, r3
 802d24a:	4413      	add	r3, r2
 802d24c:	3390      	adds	r3, #144	; 0x90
 802d24e:	2201      	movs	r2, #1
 802d250:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 802d252:	693b      	ldr	r3, [r7, #16]
 802d254:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d258:	4619      	mov	r1, r3
 802d25a:	693a      	ldr	r2, [r7, #16]
 802d25c:	2334      	movs	r3, #52	; 0x34
 802d25e:	fb01 f303 	mul.w	r3, r1, r3
 802d262:	4413      	add	r3, r2
 802d264:	3391      	adds	r3, #145	; 0x91
 802d266:	2202      	movs	r2, #2
 802d268:	701a      	strb	r2, [r3, #0]
            break;
 802d26a:	e098      	b.n	802d39e <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 802d26c:	693b      	ldr	r3, [r7, #16]
 802d26e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d272:	b2d9      	uxtb	r1, r3
 802d274:	693b      	ldr	r3, [r7, #16]
 802d276:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d27a:	461a      	mov	r2, r3
 802d27c:	2334      	movs	r3, #52	; 0x34
 802d27e:	fb02 f303 	mul.w	r3, r2, r3
 802d282:	3398      	adds	r3, #152	; 0x98
 802d284:	693a      	ldr	r2, [r7, #16]
 802d286:	4413      	add	r3, r2
 802d288:	3304      	adds	r3, #4
 802d28a:	461a      	mov	r2, r3
 802d28c:	6878      	ldr	r0, [r7, #4]
 802d28e:	f000 ff62 	bl	802e156 <USBH_MSC_SCSI_RequestSense>
 802d292:	4603      	mov	r3, r0
 802d294:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 802d296:	7bfb      	ldrb	r3, [r7, #15]
 802d298:	2b00      	cmp	r3, #0
 802d29a:	d145      	bne.n	802d328 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 802d29c:	693b      	ldr	r3, [r7, #16]
 802d29e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d2a2:	4619      	mov	r1, r3
 802d2a4:	693a      	ldr	r2, [r7, #16]
 802d2a6:	2334      	movs	r3, #52	; 0x34
 802d2a8:	fb01 f303 	mul.w	r3, r1, r3
 802d2ac:	4413      	add	r3, r2
 802d2ae:	339c      	adds	r3, #156	; 0x9c
 802d2b0:	781b      	ldrb	r3, [r3, #0]
 802d2b2:	2b06      	cmp	r3, #6
 802d2b4:	d00c      	beq.n	802d2d0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 802d2b6:	693b      	ldr	r3, [r7, #16]
 802d2b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d2bc:	4619      	mov	r1, r3
 802d2be:	693a      	ldr	r2, [r7, #16]
 802d2c0:	2334      	movs	r3, #52	; 0x34
 802d2c2:	fb01 f303 	mul.w	r3, r1, r3
 802d2c6:	4413      	add	r3, r2
 802d2c8:	339c      	adds	r3, #156	; 0x9c
 802d2ca:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 802d2cc:	2b02      	cmp	r3, #2
 802d2ce:	d117      	bne.n	802d300 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 802d2d0:	687b      	ldr	r3, [r7, #4]
 802d2d2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 802d2d6:	693b      	ldr	r3, [r7, #16]
 802d2d8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 802d2dc:	1ad3      	subs	r3, r2, r3
 802d2de:	f242 720f 	movw	r2, #9999	; 0x270f
 802d2e2:	4293      	cmp	r3, r2
 802d2e4:	d80c      	bhi.n	802d300 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 802d2e6:	693b      	ldr	r3, [r7, #16]
 802d2e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d2ec:	4619      	mov	r1, r3
 802d2ee:	693a      	ldr	r2, [r7, #16]
 802d2f0:	2334      	movs	r3, #52	; 0x34
 802d2f2:	fb01 f303 	mul.w	r3, r1, r3
 802d2f6:	4413      	add	r3, r2
 802d2f8:	3390      	adds	r3, #144	; 0x90
 802d2fa:	2202      	movs	r2, #2
 802d2fc:	701a      	strb	r2, [r3, #0]
                  break;
 802d2fe:	e051      	b.n	802d3a4 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802d300:	693b      	ldr	r3, [r7, #16]
 802d302:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d306:	4619      	mov	r1, r3
 802d308:	693a      	ldr	r2, [r7, #16]
 802d30a:	2334      	movs	r3, #52	; 0x34
 802d30c:	fb01 f303 	mul.w	r3, r1, r3
 802d310:	4413      	add	r3, r2
 802d312:	3390      	adds	r3, #144	; 0x90
 802d314:	2201      	movs	r2, #1
 802d316:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 802d318:	693b      	ldr	r3, [r7, #16]
 802d31a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d31e:	3301      	adds	r3, #1
 802d320:	b29a      	uxth	r2, r3
 802d322:	693b      	ldr	r3, [r7, #16]
 802d324:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 802d328:	7bfb      	ldrb	r3, [r7, #15]
 802d32a:	2b02      	cmp	r3, #2
 802d32c:	d10c      	bne.n	802d348 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 802d32e:	693b      	ldr	r3, [r7, #16]
 802d330:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d334:	4619      	mov	r1, r3
 802d336:	693a      	ldr	r2, [r7, #16]
 802d338:	2334      	movs	r3, #52	; 0x34
 802d33a:	fb01 f303 	mul.w	r3, r1, r3
 802d33e:	4413      	add	r3, r2
 802d340:	3390      	adds	r3, #144	; 0x90
 802d342:	2208      	movs	r2, #8
 802d344:	701a      	strb	r2, [r3, #0]
            break;
 802d346:	e02c      	b.n	802d3a2 <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 802d348:	7bfb      	ldrb	r3, [r7, #15]
 802d34a:	2b04      	cmp	r3, #4
 802d34c:	d129      	bne.n	802d3a2 <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802d34e:	693b      	ldr	r3, [r7, #16]
 802d350:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d354:	4619      	mov	r1, r3
 802d356:	693a      	ldr	r2, [r7, #16]
 802d358:	2334      	movs	r3, #52	; 0x34
 802d35a:	fb01 f303 	mul.w	r3, r1, r3
 802d35e:	4413      	add	r3, r2
 802d360:	3390      	adds	r3, #144	; 0x90
 802d362:	2201      	movs	r2, #1
 802d364:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 802d366:	693b      	ldr	r3, [r7, #16]
 802d368:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d36c:	4619      	mov	r1, r3
 802d36e:	693a      	ldr	r2, [r7, #16]
 802d370:	2334      	movs	r3, #52	; 0x34
 802d372:	fb01 f303 	mul.w	r3, r1, r3
 802d376:	4413      	add	r3, r2
 802d378:	3391      	adds	r3, #145	; 0x91
 802d37a:	2202      	movs	r2, #2
 802d37c:	701a      	strb	r2, [r3, #0]
            break;
 802d37e:	e010      	b.n	802d3a2 <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 802d380:	693b      	ldr	r3, [r7, #16]
 802d382:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802d386:	3301      	adds	r3, #1
 802d388:	b29a      	uxth	r2, r3
 802d38a:	693b      	ldr	r3, [r7, #16]
 802d38c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 802d390:	e008      	b.n	802d3a4 <USBH_MSC_Process+0x4f0>
            break;
 802d392:	bf00      	nop
 802d394:	e006      	b.n	802d3a4 <USBH_MSC_Process+0x4f0>
            break;
 802d396:	bf00      	nop
 802d398:	e004      	b.n	802d3a4 <USBH_MSC_Process+0x4f0>
            break;
 802d39a:	bf00      	nop
 802d39c:	e002      	b.n	802d3a4 <USBH_MSC_Process+0x4f0>
            break;
 802d39e:	bf00      	nop
 802d3a0:	e000      	b.n	802d3a4 <USBH_MSC_Process+0x4f0>
            break;
 802d3a2:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 802d3a4:	687b      	ldr	r3, [r7, #4]
 802d3a6:	2204      	movs	r2, #4
 802d3a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802d3ac:	687b      	ldr	r3, [r7, #4]
 802d3ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802d3b2:	687b      	ldr	r3, [r7, #4]
 802d3b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802d3b8:	2200      	movs	r2, #0
 802d3ba:	4619      	mov	r1, r3
 802d3bc:	f008 ff6e 	bl	803629c <osMessagePut>
      break;
 802d3c0:	e01e      	b.n	802d400 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 802d3c2:	693b      	ldr	r3, [r7, #16]
 802d3c4:	2200      	movs	r2, #0
 802d3c6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 802d3ca:	693b      	ldr	r3, [r7, #16]
 802d3cc:	2201      	movs	r2, #1
 802d3ce:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 802d3d0:	687b      	ldr	r3, [r7, #4]
 802d3d2:	2204      	movs	r2, #4
 802d3d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802d3d8:	687b      	ldr	r3, [r7, #4]
 802d3da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802d3de:	687b      	ldr	r3, [r7, #4]
 802d3e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802d3e4:	2200      	movs	r2, #0
 802d3e6:	4619      	mov	r1, r3
 802d3e8:	f008 ff58 	bl	803629c <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802d3ec:	687b      	ldr	r3, [r7, #4]
 802d3ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802d3f2:	2102      	movs	r1, #2
 802d3f4:	6878      	ldr	r0, [r7, #4]
 802d3f6:	4798      	blx	r3
      break;
 802d3f8:	e002      	b.n	802d400 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 802d3fa:	2300      	movs	r3, #0
 802d3fc:	75fb      	strb	r3, [r7, #23]
      break;
 802d3fe:	bf00      	nop
  }
  return error;
 802d400:	7dfb      	ldrb	r3, [r7, #23]
}
 802d402:	4618      	mov	r0, r3
 802d404:	3718      	adds	r7, #24
 802d406:	46bd      	mov	sp, r7
 802d408:	bd80      	pop	{r7, pc}
 802d40a:	bf00      	nop

0802d40c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 802d40c:	b480      	push	{r7}
 802d40e:	b083      	sub	sp, #12
 802d410:	af00      	add	r7, sp, #0
 802d412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 802d414:	2300      	movs	r3, #0
}
 802d416:	4618      	mov	r0, r3
 802d418:	370c      	adds	r7, #12
 802d41a:	46bd      	mov	sp, r7
 802d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d420:	4770      	bx	lr

0802d422 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 802d422:	b580      	push	{r7, lr}
 802d424:	b088      	sub	sp, #32
 802d426:	af02      	add	r7, sp, #8
 802d428:	6078      	str	r0, [r7, #4]
 802d42a:	460b      	mov	r3, r1
 802d42c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d42e:	687b      	ldr	r3, [r7, #4]
 802d430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d434:	69db      	ldr	r3, [r3, #28]
 802d436:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 802d438:	2301      	movs	r3, #1
 802d43a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 802d43c:	2301      	movs	r3, #1
 802d43e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 802d440:	78fb      	ldrb	r3, [r7, #3]
 802d442:	693a      	ldr	r2, [r7, #16]
 802d444:	2134      	movs	r1, #52	; 0x34
 802d446:	fb01 f303 	mul.w	r3, r1, r3
 802d44a:	4413      	add	r3, r2
 802d44c:	3390      	adds	r3, #144	; 0x90
 802d44e:	781b      	ldrb	r3, [r3, #0]
 802d450:	2b07      	cmp	r3, #7
 802d452:	d04b      	beq.n	802d4ec <USBH_MSC_RdWrProcess+0xca>
 802d454:	2b07      	cmp	r3, #7
 802d456:	f300 80d2 	bgt.w	802d5fe <USBH_MSC_RdWrProcess+0x1dc>
 802d45a:	2b05      	cmp	r3, #5
 802d45c:	f000 8089 	beq.w	802d572 <USBH_MSC_RdWrProcess+0x150>
 802d460:	2b06      	cmp	r3, #6
 802d462:	f040 80cc 	bne.w	802d5fe <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 802d466:	78f9      	ldrb	r1, [r7, #3]
 802d468:	2300      	movs	r3, #0
 802d46a:	9300      	str	r3, [sp, #0]
 802d46c:	2300      	movs	r3, #0
 802d46e:	2200      	movs	r2, #0
 802d470:	6878      	ldr	r0, [r7, #4]
 802d472:	f000 ff54 	bl	802e31e <USBH_MSC_SCSI_Read>
 802d476:	4603      	mov	r3, r0
 802d478:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 802d47a:	7bfb      	ldrb	r3, [r7, #15]
 802d47c:	2b00      	cmp	r3, #0
 802d47e:	d10b      	bne.n	802d498 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 802d480:	78fb      	ldrb	r3, [r7, #3]
 802d482:	693a      	ldr	r2, [r7, #16]
 802d484:	2134      	movs	r1, #52	; 0x34
 802d486:	fb01 f303 	mul.w	r3, r1, r3
 802d48a:	4413      	add	r3, r2
 802d48c:	3390      	adds	r3, #144	; 0x90
 802d48e:	2201      	movs	r2, #1
 802d490:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 802d492:	2300      	movs	r3, #0
 802d494:	75fb      	strb	r3, [r7, #23]
 802d496:	e01a      	b.n	802d4ce <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 802d498:	7bfb      	ldrb	r3, [r7, #15]
 802d49a:	2b02      	cmp	r3, #2
 802d49c:	d109      	bne.n	802d4b2 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 802d49e:	78fb      	ldrb	r3, [r7, #3]
 802d4a0:	693a      	ldr	r2, [r7, #16]
 802d4a2:	2134      	movs	r1, #52	; 0x34
 802d4a4:	fb01 f303 	mul.w	r3, r1, r3
 802d4a8:	4413      	add	r3, r2
 802d4aa:	3390      	adds	r3, #144	; 0x90
 802d4ac:	2205      	movs	r2, #5
 802d4ae:	701a      	strb	r2, [r3, #0]
 802d4b0:	e00d      	b.n	802d4ce <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 802d4b2:	7bfb      	ldrb	r3, [r7, #15]
 802d4b4:	2b04      	cmp	r3, #4
 802d4b6:	d10a      	bne.n	802d4ce <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 802d4b8:	78fb      	ldrb	r3, [r7, #3]
 802d4ba:	693a      	ldr	r2, [r7, #16]
 802d4bc:	2134      	movs	r1, #52	; 0x34
 802d4be:	fb01 f303 	mul.w	r3, r1, r3
 802d4c2:	4413      	add	r3, r2
 802d4c4:	3390      	adds	r3, #144	; 0x90
 802d4c6:	2208      	movs	r2, #8
 802d4c8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 802d4ca:	2302      	movs	r3, #2
 802d4cc:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 802d4ce:	687b      	ldr	r3, [r7, #4]
 802d4d0:	2204      	movs	r2, #4
 802d4d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802d4d6:	687b      	ldr	r3, [r7, #4]
 802d4d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802d4dc:	687b      	ldr	r3, [r7, #4]
 802d4de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802d4e2:	2200      	movs	r2, #0
 802d4e4:	4619      	mov	r1, r3
 802d4e6:	f008 fed9 	bl	803629c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802d4ea:	e089      	b.n	802d600 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 802d4ec:	78f9      	ldrb	r1, [r7, #3]
 802d4ee:	2300      	movs	r3, #0
 802d4f0:	9300      	str	r3, [sp, #0]
 802d4f2:	2300      	movs	r3, #0
 802d4f4:	2200      	movs	r2, #0
 802d4f6:	6878      	ldr	r0, [r7, #4]
 802d4f8:	f000 fea6 	bl	802e248 <USBH_MSC_SCSI_Write>
 802d4fc:	4603      	mov	r3, r0
 802d4fe:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 802d500:	7bfb      	ldrb	r3, [r7, #15]
 802d502:	2b00      	cmp	r3, #0
 802d504:	d10b      	bne.n	802d51e <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 802d506:	78fb      	ldrb	r3, [r7, #3]
 802d508:	693a      	ldr	r2, [r7, #16]
 802d50a:	2134      	movs	r1, #52	; 0x34
 802d50c:	fb01 f303 	mul.w	r3, r1, r3
 802d510:	4413      	add	r3, r2
 802d512:	3390      	adds	r3, #144	; 0x90
 802d514:	2201      	movs	r2, #1
 802d516:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 802d518:	2300      	movs	r3, #0
 802d51a:	75fb      	strb	r3, [r7, #23]
 802d51c:	e01a      	b.n	802d554 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 802d51e:	7bfb      	ldrb	r3, [r7, #15]
 802d520:	2b02      	cmp	r3, #2
 802d522:	d109      	bne.n	802d538 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 802d524:	78fb      	ldrb	r3, [r7, #3]
 802d526:	693a      	ldr	r2, [r7, #16]
 802d528:	2134      	movs	r1, #52	; 0x34
 802d52a:	fb01 f303 	mul.w	r3, r1, r3
 802d52e:	4413      	add	r3, r2
 802d530:	3390      	adds	r3, #144	; 0x90
 802d532:	2205      	movs	r2, #5
 802d534:	701a      	strb	r2, [r3, #0]
 802d536:	e00d      	b.n	802d554 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 802d538:	7bfb      	ldrb	r3, [r7, #15]
 802d53a:	2b04      	cmp	r3, #4
 802d53c:	d10a      	bne.n	802d554 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 802d53e:	78fb      	ldrb	r3, [r7, #3]
 802d540:	693a      	ldr	r2, [r7, #16]
 802d542:	2134      	movs	r1, #52	; 0x34
 802d544:	fb01 f303 	mul.w	r3, r1, r3
 802d548:	4413      	add	r3, r2
 802d54a:	3390      	adds	r3, #144	; 0x90
 802d54c:	2208      	movs	r2, #8
 802d54e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 802d550:	2302      	movs	r3, #2
 802d552:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 802d554:	687b      	ldr	r3, [r7, #4]
 802d556:	2204      	movs	r2, #4
 802d558:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802d55c:	687b      	ldr	r3, [r7, #4]
 802d55e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802d562:	687b      	ldr	r3, [r7, #4]
 802d564:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802d568:	2200      	movs	r2, #0
 802d56a:	4619      	mov	r1, r3
 802d56c:	f008 fe96 	bl	803629c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802d570:	e046      	b.n	802d600 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 802d572:	78fb      	ldrb	r3, [r7, #3]
 802d574:	2234      	movs	r2, #52	; 0x34
 802d576:	fb02 f303 	mul.w	r3, r2, r3
 802d57a:	3398      	adds	r3, #152	; 0x98
 802d57c:	693a      	ldr	r2, [r7, #16]
 802d57e:	4413      	add	r3, r2
 802d580:	1d1a      	adds	r2, r3, #4
 802d582:	78fb      	ldrb	r3, [r7, #3]
 802d584:	4619      	mov	r1, r3
 802d586:	6878      	ldr	r0, [r7, #4]
 802d588:	f000 fde5 	bl	802e156 <USBH_MSC_SCSI_RequestSense>
 802d58c:	4603      	mov	r3, r0
 802d58e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 802d590:	7bfb      	ldrb	r3, [r7, #15]
 802d592:	2b00      	cmp	r3, #0
 802d594:	d113      	bne.n	802d5be <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 802d596:	78fb      	ldrb	r3, [r7, #3]
 802d598:	693a      	ldr	r2, [r7, #16]
 802d59a:	2134      	movs	r1, #52	; 0x34
 802d59c:	fb01 f303 	mul.w	r3, r1, r3
 802d5a0:	4413      	add	r3, r2
 802d5a2:	3390      	adds	r3, #144	; 0x90
 802d5a4:	2201      	movs	r2, #1
 802d5a6:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 802d5a8:	78fb      	ldrb	r3, [r7, #3]
 802d5aa:	693a      	ldr	r2, [r7, #16]
 802d5ac:	2134      	movs	r1, #52	; 0x34
 802d5ae:	fb01 f303 	mul.w	r3, r1, r3
 802d5b2:	4413      	add	r3, r2
 802d5b4:	3391      	adds	r3, #145	; 0x91
 802d5b6:	2202      	movs	r2, #2
 802d5b8:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 802d5ba:	2302      	movs	r3, #2
 802d5bc:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 802d5be:	7bfb      	ldrb	r3, [r7, #15]
 802d5c0:	2b02      	cmp	r3, #2
 802d5c2:	d00d      	beq.n	802d5e0 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 802d5c4:	7bfb      	ldrb	r3, [r7, #15]
 802d5c6:	2b04      	cmp	r3, #4
 802d5c8:	d10a      	bne.n	802d5e0 <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 802d5ca:	78fb      	ldrb	r3, [r7, #3]
 802d5cc:	693a      	ldr	r2, [r7, #16]
 802d5ce:	2134      	movs	r1, #52	; 0x34
 802d5d0:	fb01 f303 	mul.w	r3, r1, r3
 802d5d4:	4413      	add	r3, r2
 802d5d6:	3390      	adds	r3, #144	; 0x90
 802d5d8:	2208      	movs	r2, #8
 802d5da:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 802d5dc:	2302      	movs	r3, #2
 802d5de:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 802d5e0:	687b      	ldr	r3, [r7, #4]
 802d5e2:	2204      	movs	r2, #4
 802d5e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802d5e8:	687b      	ldr	r3, [r7, #4]
 802d5ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802d5ee:	687b      	ldr	r3, [r7, #4]
 802d5f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802d5f4:	2200      	movs	r2, #0
 802d5f6:	4619      	mov	r1, r3
 802d5f8:	f008 fe50 	bl	803629c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802d5fc:	e000      	b.n	802d600 <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 802d5fe:	bf00      	nop

  }
  return error;
 802d600:	7dfb      	ldrb	r3, [r7, #23]
}
 802d602:	4618      	mov	r0, r3
 802d604:	3718      	adds	r7, #24
 802d606:	46bd      	mov	sp, r7
 802d608:	bd80      	pop	{r7, pc}

0802d60a <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 802d60a:	b480      	push	{r7}
 802d60c:	b085      	sub	sp, #20
 802d60e:	af00      	add	r7, sp, #0
 802d610:	6078      	str	r0, [r7, #4]
 802d612:	460b      	mov	r3, r1
 802d614:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d616:	687b      	ldr	r3, [r7, #4]
 802d618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d61c:	69db      	ldr	r3, [r3, #28]
 802d61e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 802d620:	687b      	ldr	r3, [r7, #4]
 802d622:	781b      	ldrb	r3, [r3, #0]
 802d624:	b2db      	uxtb	r3, r3
 802d626:	2b0b      	cmp	r3, #11
 802d628:	d10c      	bne.n	802d644 <USBH_MSC_UnitIsReady+0x3a>
 802d62a:	78fb      	ldrb	r3, [r7, #3]
 802d62c:	68ba      	ldr	r2, [r7, #8]
 802d62e:	2134      	movs	r1, #52	; 0x34
 802d630:	fb01 f303 	mul.w	r3, r1, r3
 802d634:	4413      	add	r3, r2
 802d636:	3391      	adds	r3, #145	; 0x91
 802d638:	781b      	ldrb	r3, [r3, #0]
 802d63a:	2b00      	cmp	r3, #0
 802d63c:	d102      	bne.n	802d644 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 802d63e:	2301      	movs	r3, #1
 802d640:	73fb      	strb	r3, [r7, #15]
 802d642:	e001      	b.n	802d648 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 802d644:	2300      	movs	r3, #0
 802d646:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 802d648:	7bfb      	ldrb	r3, [r7, #15]
}
 802d64a:	4618      	mov	r0, r3
 802d64c:	3714      	adds	r7, #20
 802d64e:	46bd      	mov	sp, r7
 802d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d654:	4770      	bx	lr

0802d656 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 802d656:	b580      	push	{r7, lr}
 802d658:	b086      	sub	sp, #24
 802d65a:	af00      	add	r7, sp, #0
 802d65c:	60f8      	str	r0, [r7, #12]
 802d65e:	460b      	mov	r3, r1
 802d660:	607a      	str	r2, [r7, #4]
 802d662:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d664:	68fb      	ldr	r3, [r7, #12]
 802d666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d66a:	69db      	ldr	r3, [r3, #28]
 802d66c:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 802d66e:	68fb      	ldr	r3, [r7, #12]
 802d670:	781b      	ldrb	r3, [r3, #0]
 802d672:	b2db      	uxtb	r3, r3
 802d674:	2b0b      	cmp	r3, #11
 802d676:	d10d      	bne.n	802d694 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 802d678:	7afb      	ldrb	r3, [r7, #11]
 802d67a:	2234      	movs	r2, #52	; 0x34
 802d67c:	fb02 f303 	mul.w	r3, r2, r3
 802d680:	3390      	adds	r3, #144	; 0x90
 802d682:	697a      	ldr	r2, [r7, #20]
 802d684:	4413      	add	r3, r2
 802d686:	2234      	movs	r2, #52	; 0x34
 802d688:	4619      	mov	r1, r3
 802d68a:	6878      	ldr	r0, [r7, #4]
 802d68c:	f00c fc1c 	bl	8039ec8 <memcpy>
    return USBH_OK;
 802d690:	2300      	movs	r3, #0
 802d692:	e000      	b.n	802d696 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 802d694:	2302      	movs	r3, #2
  }
}
 802d696:	4618      	mov	r0, r3
 802d698:	3718      	adds	r7, #24
 802d69a:	46bd      	mov	sp, r7
 802d69c:	bd80      	pop	{r7, pc}

0802d69e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 802d69e:	b580      	push	{r7, lr}
 802d6a0:	b088      	sub	sp, #32
 802d6a2:	af02      	add	r7, sp, #8
 802d6a4:	60f8      	str	r0, [r7, #12]
 802d6a6:	607a      	str	r2, [r7, #4]
 802d6a8:	603b      	str	r3, [r7, #0]
 802d6aa:	460b      	mov	r3, r1
 802d6ac:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d6ae:	68fb      	ldr	r3, [r7, #12]
 802d6b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d6b4:	69db      	ldr	r3, [r3, #28]
 802d6b6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 802d6b8:	68fb      	ldr	r3, [r7, #12]
 802d6ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802d6be:	b2db      	uxtb	r3, r3
 802d6c0:	2b00      	cmp	r3, #0
 802d6c2:	d00e      	beq.n	802d6e2 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 802d6c4:	68fb      	ldr	r3, [r7, #12]
 802d6c6:	781b      	ldrb	r3, [r3, #0]
 802d6c8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 802d6ca:	2b0b      	cmp	r3, #11
 802d6cc:	d109      	bne.n	802d6e2 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 802d6ce:	7afb      	ldrb	r3, [r7, #11]
 802d6d0:	697a      	ldr	r2, [r7, #20]
 802d6d2:	2134      	movs	r1, #52	; 0x34
 802d6d4:	fb01 f303 	mul.w	r3, r1, r3
 802d6d8:	4413      	add	r3, r2
 802d6da:	3390      	adds	r3, #144	; 0x90
 802d6dc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 802d6de:	2b01      	cmp	r3, #1
 802d6e0:	d001      	beq.n	802d6e6 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 802d6e2:	2302      	movs	r3, #2
 802d6e4:	e040      	b.n	802d768 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 802d6e6:	697b      	ldr	r3, [r7, #20]
 802d6e8:	2206      	movs	r2, #6
 802d6ea:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 802d6ec:	7afb      	ldrb	r3, [r7, #11]
 802d6ee:	697a      	ldr	r2, [r7, #20]
 802d6f0:	2134      	movs	r1, #52	; 0x34
 802d6f2:	fb01 f303 	mul.w	r3, r1, r3
 802d6f6:	4413      	add	r3, r2
 802d6f8:	3390      	adds	r3, #144	; 0x90
 802d6fa:	2206      	movs	r2, #6
 802d6fc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 802d6fe:	7afb      	ldrb	r3, [r7, #11]
 802d700:	b29a      	uxth	r2, r3
 802d702:	697b      	ldr	r3, [r7, #20]
 802d704:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 802d708:	7af9      	ldrb	r1, [r7, #11]
 802d70a:	6a3b      	ldr	r3, [r7, #32]
 802d70c:	9300      	str	r3, [sp, #0]
 802d70e:	683b      	ldr	r3, [r7, #0]
 802d710:	687a      	ldr	r2, [r7, #4]
 802d712:	68f8      	ldr	r0, [r7, #12]
 802d714:	f000 fe03 	bl	802e31e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 802d718:	68fb      	ldr	r3, [r7, #12]
 802d71a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d71e:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 802d720:	e016      	b.n	802d750 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 802d722:	68fb      	ldr	r3, [r7, #12]
 802d724:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 802d728:	693b      	ldr	r3, [r7, #16]
 802d72a:	1ad2      	subs	r2, r2, r3
 802d72c:	6a3b      	ldr	r3, [r7, #32]
 802d72e:	f242 7110 	movw	r1, #10000	; 0x2710
 802d732:	fb01 f303 	mul.w	r3, r1, r3
 802d736:	429a      	cmp	r2, r3
 802d738:	d805      	bhi.n	802d746 <USBH_MSC_Read+0xa8>
 802d73a:	68fb      	ldr	r3, [r7, #12]
 802d73c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802d740:	b2db      	uxtb	r3, r3
 802d742:	2b00      	cmp	r3, #0
 802d744:	d104      	bne.n	802d750 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 802d746:	697b      	ldr	r3, [r7, #20]
 802d748:	2201      	movs	r2, #1
 802d74a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 802d74c:	2302      	movs	r3, #2
 802d74e:	e00b      	b.n	802d768 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 802d750:	7afb      	ldrb	r3, [r7, #11]
 802d752:	4619      	mov	r1, r3
 802d754:	68f8      	ldr	r0, [r7, #12]
 802d756:	f7ff fe64 	bl	802d422 <USBH_MSC_RdWrProcess>
 802d75a:	4603      	mov	r3, r0
 802d75c:	2b01      	cmp	r3, #1
 802d75e:	d0e0      	beq.n	802d722 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 802d760:	697b      	ldr	r3, [r7, #20]
 802d762:	2201      	movs	r2, #1
 802d764:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 802d766:	2300      	movs	r3, #0
}
 802d768:	4618      	mov	r0, r3
 802d76a:	3718      	adds	r7, #24
 802d76c:	46bd      	mov	sp, r7
 802d76e:	bd80      	pop	{r7, pc}

0802d770 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 802d770:	b580      	push	{r7, lr}
 802d772:	b088      	sub	sp, #32
 802d774:	af02      	add	r7, sp, #8
 802d776:	60f8      	str	r0, [r7, #12]
 802d778:	607a      	str	r2, [r7, #4]
 802d77a:	603b      	str	r3, [r7, #0]
 802d77c:	460b      	mov	r3, r1
 802d77e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d780:	68fb      	ldr	r3, [r7, #12]
 802d782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d786:	69db      	ldr	r3, [r3, #28]
 802d788:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 802d78a:	68fb      	ldr	r3, [r7, #12]
 802d78c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802d790:	b2db      	uxtb	r3, r3
 802d792:	2b00      	cmp	r3, #0
 802d794:	d00e      	beq.n	802d7b4 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 802d796:	68fb      	ldr	r3, [r7, #12]
 802d798:	781b      	ldrb	r3, [r3, #0]
 802d79a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 802d79c:	2b0b      	cmp	r3, #11
 802d79e:	d109      	bne.n	802d7b4 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 802d7a0:	7afb      	ldrb	r3, [r7, #11]
 802d7a2:	697a      	ldr	r2, [r7, #20]
 802d7a4:	2134      	movs	r1, #52	; 0x34
 802d7a6:	fb01 f303 	mul.w	r3, r1, r3
 802d7aa:	4413      	add	r3, r2
 802d7ac:	3390      	adds	r3, #144	; 0x90
 802d7ae:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 802d7b0:	2b01      	cmp	r3, #1
 802d7b2:	d001      	beq.n	802d7b8 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 802d7b4:	2302      	movs	r3, #2
 802d7b6:	e040      	b.n	802d83a <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 802d7b8:	697b      	ldr	r3, [r7, #20]
 802d7ba:	2207      	movs	r2, #7
 802d7bc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 802d7be:	7afb      	ldrb	r3, [r7, #11]
 802d7c0:	697a      	ldr	r2, [r7, #20]
 802d7c2:	2134      	movs	r1, #52	; 0x34
 802d7c4:	fb01 f303 	mul.w	r3, r1, r3
 802d7c8:	4413      	add	r3, r2
 802d7ca:	3390      	adds	r3, #144	; 0x90
 802d7cc:	2207      	movs	r2, #7
 802d7ce:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 802d7d0:	7afb      	ldrb	r3, [r7, #11]
 802d7d2:	b29a      	uxth	r2, r3
 802d7d4:	697b      	ldr	r3, [r7, #20]
 802d7d6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 802d7da:	7af9      	ldrb	r1, [r7, #11]
 802d7dc:	6a3b      	ldr	r3, [r7, #32]
 802d7de:	9300      	str	r3, [sp, #0]
 802d7e0:	683b      	ldr	r3, [r7, #0]
 802d7e2:	687a      	ldr	r2, [r7, #4]
 802d7e4:	68f8      	ldr	r0, [r7, #12]
 802d7e6:	f000 fd2f 	bl	802e248 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 802d7ea:	68fb      	ldr	r3, [r7, #12]
 802d7ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d7f0:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 802d7f2:	e016      	b.n	802d822 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 802d7f4:	68fb      	ldr	r3, [r7, #12]
 802d7f6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 802d7fa:	693b      	ldr	r3, [r7, #16]
 802d7fc:	1ad2      	subs	r2, r2, r3
 802d7fe:	6a3b      	ldr	r3, [r7, #32]
 802d800:	f242 7110 	movw	r1, #10000	; 0x2710
 802d804:	fb01 f303 	mul.w	r3, r1, r3
 802d808:	429a      	cmp	r2, r3
 802d80a:	d805      	bhi.n	802d818 <USBH_MSC_Write+0xa8>
 802d80c:	68fb      	ldr	r3, [r7, #12]
 802d80e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802d812:	b2db      	uxtb	r3, r3
 802d814:	2b00      	cmp	r3, #0
 802d816:	d104      	bne.n	802d822 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 802d818:	697b      	ldr	r3, [r7, #20]
 802d81a:	2201      	movs	r2, #1
 802d81c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 802d81e:	2302      	movs	r3, #2
 802d820:	e00b      	b.n	802d83a <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 802d822:	7afb      	ldrb	r3, [r7, #11]
 802d824:	4619      	mov	r1, r3
 802d826:	68f8      	ldr	r0, [r7, #12]
 802d828:	f7ff fdfb 	bl	802d422 <USBH_MSC_RdWrProcess>
 802d82c:	4603      	mov	r3, r0
 802d82e:	2b01      	cmp	r3, #1
 802d830:	d0e0      	beq.n	802d7f4 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 802d832:	697b      	ldr	r3, [r7, #20]
 802d834:	2201      	movs	r2, #1
 802d836:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 802d838:	2300      	movs	r3, #0
}
 802d83a:	4618      	mov	r0, r3
 802d83c:	3718      	adds	r7, #24
 802d83e:	46bd      	mov	sp, r7
 802d840:	bd80      	pop	{r7, pc}

0802d842 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 802d842:	b580      	push	{r7, lr}
 802d844:	b082      	sub	sp, #8
 802d846:	af00      	add	r7, sp, #0
 802d848:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 802d84a:	687b      	ldr	r3, [r7, #4]
 802d84c:	2221      	movs	r2, #33	; 0x21
 802d84e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 802d850:	687b      	ldr	r3, [r7, #4]
 802d852:	22ff      	movs	r2, #255	; 0xff
 802d854:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802d856:	687b      	ldr	r3, [r7, #4]
 802d858:	2200      	movs	r2, #0
 802d85a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802d85c:	687b      	ldr	r3, [r7, #4]
 802d85e:	2200      	movs	r2, #0
 802d860:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 802d862:	687b      	ldr	r3, [r7, #4]
 802d864:	2200      	movs	r2, #0
 802d866:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 802d868:	2200      	movs	r2, #0
 802d86a:	2100      	movs	r1, #0
 802d86c:	6878      	ldr	r0, [r7, #4]
 802d86e:	f002 f873 	bl	802f958 <USBH_CtlReq>
 802d872:	4603      	mov	r3, r0
}
 802d874:	4618      	mov	r0, r3
 802d876:	3708      	adds	r7, #8
 802d878:	46bd      	mov	sp, r7
 802d87a:	bd80      	pop	{r7, pc}

0802d87c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 802d87c:	b580      	push	{r7, lr}
 802d87e:	b082      	sub	sp, #8
 802d880:	af00      	add	r7, sp, #0
 802d882:	6078      	str	r0, [r7, #4]
 802d884:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 802d886:	687b      	ldr	r3, [r7, #4]
 802d888:	22a1      	movs	r2, #161	; 0xa1
 802d88a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 802d88c:	687b      	ldr	r3, [r7, #4]
 802d88e:	22fe      	movs	r2, #254	; 0xfe
 802d890:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802d892:	687b      	ldr	r3, [r7, #4]
 802d894:	2200      	movs	r2, #0
 802d896:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802d898:	687b      	ldr	r3, [r7, #4]
 802d89a:	2200      	movs	r2, #0
 802d89c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 802d89e:	687b      	ldr	r3, [r7, #4]
 802d8a0:	2201      	movs	r2, #1
 802d8a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 802d8a4:	2201      	movs	r2, #1
 802d8a6:	6839      	ldr	r1, [r7, #0]
 802d8a8:	6878      	ldr	r0, [r7, #4]
 802d8aa:	f002 f855 	bl	802f958 <USBH_CtlReq>
 802d8ae:	4603      	mov	r3, r0
}
 802d8b0:	4618      	mov	r0, r3
 802d8b2:	3708      	adds	r7, #8
 802d8b4:	46bd      	mov	sp, r7
 802d8b6:	bd80      	pop	{r7, pc}

0802d8b8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 802d8b8:	b480      	push	{r7}
 802d8ba:	b085      	sub	sp, #20
 802d8bc:	af00      	add	r7, sp, #0
 802d8be:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d8c0:	687b      	ldr	r3, [r7, #4]
 802d8c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d8c6:	69db      	ldr	r3, [r3, #28]
 802d8c8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 802d8ca:	68fb      	ldr	r3, [r7, #12]
 802d8cc:	4a09      	ldr	r2, [pc, #36]	; (802d8f4 <USBH_MSC_BOT_Init+0x3c>)
 802d8ce:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 802d8d0:	68fb      	ldr	r3, [r7, #12]
 802d8d2:	4a09      	ldr	r2, [pc, #36]	; (802d8f8 <USBH_MSC_BOT_Init+0x40>)
 802d8d4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 802d8d6:	68fb      	ldr	r3, [r7, #12]
 802d8d8:	2201      	movs	r2, #1
 802d8da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 802d8de:	68fb      	ldr	r3, [r7, #12]
 802d8e0:	2201      	movs	r2, #1
 802d8e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 802d8e6:	2300      	movs	r3, #0
}
 802d8e8:	4618      	mov	r0, r3
 802d8ea:	3714      	adds	r7, #20
 802d8ec:	46bd      	mov	sp, r7
 802d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d8f2:	4770      	bx	lr
 802d8f4:	43425355 	.word	0x43425355
 802d8f8:	20304050 	.word	0x20304050

0802d8fc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 802d8fc:	b580      	push	{r7, lr}
 802d8fe:	b088      	sub	sp, #32
 802d900:	af02      	add	r7, sp, #8
 802d902:	6078      	str	r0, [r7, #4]
 802d904:	460b      	mov	r3, r1
 802d906:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 802d908:	2301      	movs	r3, #1
 802d90a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 802d90c:	2301      	movs	r3, #1
 802d90e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 802d910:	2301      	movs	r3, #1
 802d912:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802d914:	2300      	movs	r3, #0
 802d916:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802d918:	687b      	ldr	r3, [r7, #4]
 802d91a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802d91e:	69db      	ldr	r3, [r3, #28]
 802d920:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 802d922:	2300      	movs	r3, #0
 802d924:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 802d926:	693b      	ldr	r3, [r7, #16]
 802d928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802d92c:	3b01      	subs	r3, #1
 802d92e:	2b0a      	cmp	r3, #10
 802d930:	f200 822a 	bhi.w	802dd88 <USBH_MSC_BOT_Process+0x48c>
 802d934:	a201      	add	r2, pc, #4	; (adr r2, 802d93c <USBH_MSC_BOT_Process+0x40>)
 802d936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d93a:	bf00      	nop
 802d93c:	0802d969 	.word	0x0802d969
 802d940:	0802d991 	.word	0x0802d991
 802d944:	0802da4f 	.word	0x0802da4f
 802d948:	0802da6d 	.word	0x0802da6d
 802d94c:	0802db29 	.word	0x0802db29
 802d950:	0802db4b 	.word	0x0802db4b
 802d954:	0802dc37 	.word	0x0802dc37
 802d958:	0802dc53 	.word	0x0802dc53
 802d95c:	0802dcdd 	.word	0x0802dcdd
 802d960:	0802dd0d 	.word	0x0802dd0d
 802d964:	0802dd6f 	.word	0x0802dd6f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 802d968:	693b      	ldr	r3, [r7, #16]
 802d96a:	78fa      	ldrb	r2, [r7, #3]
 802d96c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 802d970:	693b      	ldr	r3, [r7, #16]
 802d972:	2202      	movs	r2, #2
 802d974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 802d978:	693b      	ldr	r3, [r7, #16]
 802d97a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 802d97e:	693b      	ldr	r3, [r7, #16]
 802d980:	795b      	ldrb	r3, [r3, #5]
 802d982:	2201      	movs	r2, #1
 802d984:	9200      	str	r2, [sp, #0]
 802d986:	221f      	movs	r2, #31
 802d988:	6878      	ldr	r0, [r7, #4]
 802d98a:	f002 fae4 	bl	802ff56 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 802d98e:	e20a      	b.n	802dda6 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 802d990:	693b      	ldr	r3, [r7, #16]
 802d992:	795b      	ldrb	r3, [r3, #5]
 802d994:	4619      	mov	r1, r3
 802d996:	6878      	ldr	r0, [r7, #4]
 802d998:	f00c f97e 	bl	8039c98 <USBH_LL_GetURBState>
 802d99c:	4603      	mov	r3, r0
 802d99e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 802d9a0:	7d3b      	ldrb	r3, [r7, #20]
 802d9a2:	2b01      	cmp	r3, #1
 802d9a4:	d126      	bne.n	802d9f4 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 802d9a6:	693b      	ldr	r3, [r7, #16]
 802d9a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d9aa:	2b00      	cmp	r3, #0
 802d9ac:	d00f      	beq.n	802d9ce <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 802d9ae:	693b      	ldr	r3, [r7, #16]
 802d9b0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 802d9b4:	b25b      	sxtb	r3, r3
 802d9b6:	2b00      	cmp	r3, #0
 802d9b8:	da04      	bge.n	802d9c4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 802d9ba:	693b      	ldr	r3, [r7, #16]
 802d9bc:	2203      	movs	r2, #3
 802d9be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 802d9c2:	e008      	b.n	802d9d6 <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 802d9c4:	693b      	ldr	r3, [r7, #16]
 802d9c6:	2205      	movs	r2, #5
 802d9c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 802d9cc:	e003      	b.n	802d9d6 <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 802d9ce:	693b      	ldr	r3, [r7, #16]
 802d9d0:	2207      	movs	r2, #7
 802d9d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802d9d6:	687b      	ldr	r3, [r7, #4]
 802d9d8:	2202      	movs	r2, #2
 802d9da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802d9de:	687b      	ldr	r3, [r7, #4]
 802d9e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802d9e4:	687b      	ldr	r3, [r7, #4]
 802d9e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802d9ea:	2200      	movs	r2, #0
 802d9ec:	4619      	mov	r1, r3
 802d9ee:	f008 fc55 	bl	803629c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d9f2:	e1cb      	b.n	802dd8c <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 802d9f4:	7d3b      	ldrb	r3, [r7, #20]
 802d9f6:	2b02      	cmp	r3, #2
 802d9f8:	d112      	bne.n	802da20 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 802d9fa:	693b      	ldr	r3, [r7, #16]
 802d9fc:	2201      	movs	r2, #1
 802d9fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802da02:	687b      	ldr	r3, [r7, #4]
 802da04:	2202      	movs	r2, #2
 802da06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802da0a:	687b      	ldr	r3, [r7, #4]
 802da0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802da10:	687b      	ldr	r3, [r7, #4]
 802da12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802da16:	2200      	movs	r2, #0
 802da18:	4619      	mov	r1, r3
 802da1a:	f008 fc3f 	bl	803629c <osMessagePut>
      break;
 802da1e:	e1b5      	b.n	802dd8c <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 802da20:	7d3b      	ldrb	r3, [r7, #20]
 802da22:	2b05      	cmp	r3, #5
 802da24:	f040 81b2 	bne.w	802dd8c <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 802da28:	693b      	ldr	r3, [r7, #16]
 802da2a:	220a      	movs	r2, #10
 802da2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802da30:	687b      	ldr	r3, [r7, #4]
 802da32:	2202      	movs	r2, #2
 802da34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802da38:	687b      	ldr	r3, [r7, #4]
 802da3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802da3e:	687b      	ldr	r3, [r7, #4]
 802da40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802da44:	2200      	movs	r2, #0
 802da46:	4619      	mov	r1, r3
 802da48:	f008 fc28 	bl	803629c <osMessagePut>
      break;
 802da4c:	e19e      	b.n	802dd8c <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 802da4e:	693b      	ldr	r3, [r7, #16]
 802da50:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 802da54:	693b      	ldr	r3, [r7, #16]
 802da56:	895a      	ldrh	r2, [r3, #10]
 802da58:	693b      	ldr	r3, [r7, #16]
 802da5a:	791b      	ldrb	r3, [r3, #4]
 802da5c:	6878      	ldr	r0, [r7, #4]
 802da5e:	f002 fa9f 	bl	802ffa0 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 802da62:	693b      	ldr	r3, [r7, #16]
 802da64:	2204      	movs	r2, #4
 802da66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 802da6a:	e19c      	b.n	802dda6 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 802da6c:	693b      	ldr	r3, [r7, #16]
 802da6e:	791b      	ldrb	r3, [r3, #4]
 802da70:	4619      	mov	r1, r3
 802da72:	6878      	ldr	r0, [r7, #4]
 802da74:	f00c f910 	bl	8039c98 <USBH_LL_GetURBState>
 802da78:	4603      	mov	r3, r0
 802da7a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 802da7c:	7d3b      	ldrb	r3, [r7, #20]
 802da7e:	2b01      	cmp	r3, #1
 802da80:	d13b      	bne.n	802dafa <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 802da82:	693b      	ldr	r3, [r7, #16]
 802da84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802da86:	693a      	ldr	r2, [r7, #16]
 802da88:	8952      	ldrh	r2, [r2, #10]
 802da8a:	4293      	cmp	r3, r2
 802da8c:	d910      	bls.n	802dab0 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 802da8e:	693b      	ldr	r3, [r7, #16]
 802da90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802da94:	693a      	ldr	r2, [r7, #16]
 802da96:	8952      	ldrh	r2, [r2, #10]
 802da98:	441a      	add	r2, r3
 802da9a:	693b      	ldr	r3, [r7, #16]
 802da9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 802daa0:	693b      	ldr	r3, [r7, #16]
 802daa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802daa4:	693a      	ldr	r2, [r7, #16]
 802daa6:	8952      	ldrh	r2, [r2, #10]
 802daa8:	1a9a      	subs	r2, r3, r2
 802daaa:	693b      	ldr	r3, [r7, #16]
 802daac:	65da      	str	r2, [r3, #92]	; 0x5c
 802daae:	e002      	b.n	802dab6 <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 802dab0:	693b      	ldr	r3, [r7, #16]
 802dab2:	2200      	movs	r2, #0
 802dab4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 802dab6:	693b      	ldr	r3, [r7, #16]
 802dab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802daba:	2b00      	cmp	r3, #0
 802dabc:	d00a      	beq.n	802dad4 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 802dabe:	693b      	ldr	r3, [r7, #16]
 802dac0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 802dac4:	693b      	ldr	r3, [r7, #16]
 802dac6:	895a      	ldrh	r2, [r3, #10]
 802dac8:	693b      	ldr	r3, [r7, #16]
 802daca:	791b      	ldrb	r3, [r3, #4]
 802dacc:	6878      	ldr	r0, [r7, #4]
 802dace:	f002 fa67 	bl	802ffa0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 802dad2:	e15d      	b.n	802dd90 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 802dad4:	693b      	ldr	r3, [r7, #16]
 802dad6:	2207      	movs	r2, #7
 802dad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802dadc:	687b      	ldr	r3, [r7, #4]
 802dade:	2202      	movs	r2, #2
 802dae0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802dae4:	687b      	ldr	r3, [r7, #4]
 802dae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802daea:	687b      	ldr	r3, [r7, #4]
 802daec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802daf0:	2200      	movs	r2, #0
 802daf2:	4619      	mov	r1, r3
 802daf4:	f008 fbd2 	bl	803629c <osMessagePut>
      break;
 802daf8:	e14a      	b.n	802dd90 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 802dafa:	7d3b      	ldrb	r3, [r7, #20]
 802dafc:	2b05      	cmp	r3, #5
 802dafe:	f040 8147 	bne.w	802dd90 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 802db02:	693b      	ldr	r3, [r7, #16]
 802db04:	2209      	movs	r2, #9
 802db06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802db0a:	687b      	ldr	r3, [r7, #4]
 802db0c:	2202      	movs	r2, #2
 802db0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802db12:	687b      	ldr	r3, [r7, #4]
 802db14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802db18:	687b      	ldr	r3, [r7, #4]
 802db1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802db1e:	2200      	movs	r2, #0
 802db20:	4619      	mov	r1, r3
 802db22:	f008 fbbb 	bl	803629c <osMessagePut>
      break;
 802db26:	e133      	b.n	802dd90 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 802db28:	693b      	ldr	r3, [r7, #16]
 802db2a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 802db2e:	693b      	ldr	r3, [r7, #16]
 802db30:	891a      	ldrh	r2, [r3, #8]
 802db32:	693b      	ldr	r3, [r7, #16]
 802db34:	795b      	ldrb	r3, [r3, #5]
 802db36:	2001      	movs	r0, #1
 802db38:	9000      	str	r0, [sp, #0]
 802db3a:	6878      	ldr	r0, [r7, #4]
 802db3c:	f002 fa0b 	bl	802ff56 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 802db40:	693b      	ldr	r3, [r7, #16]
 802db42:	2206      	movs	r2, #6
 802db44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 802db48:	e12d      	b.n	802dda6 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 802db4a:	693b      	ldr	r3, [r7, #16]
 802db4c:	795b      	ldrb	r3, [r3, #5]
 802db4e:	4619      	mov	r1, r3
 802db50:	6878      	ldr	r0, [r7, #4]
 802db52:	f00c f8a1 	bl	8039c98 <USBH_LL_GetURBState>
 802db56:	4603      	mov	r3, r0
 802db58:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 802db5a:	7d3b      	ldrb	r3, [r7, #20]
 802db5c:	2b01      	cmp	r3, #1
 802db5e:	d13d      	bne.n	802dbdc <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 802db60:	693b      	ldr	r3, [r7, #16]
 802db62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802db64:	693a      	ldr	r2, [r7, #16]
 802db66:	8912      	ldrh	r2, [r2, #8]
 802db68:	4293      	cmp	r3, r2
 802db6a:	d910      	bls.n	802db8e <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 802db6c:	693b      	ldr	r3, [r7, #16]
 802db6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802db72:	693a      	ldr	r2, [r7, #16]
 802db74:	8912      	ldrh	r2, [r2, #8]
 802db76:	441a      	add	r2, r3
 802db78:	693b      	ldr	r3, [r7, #16]
 802db7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 802db7e:	693b      	ldr	r3, [r7, #16]
 802db80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802db82:	693a      	ldr	r2, [r7, #16]
 802db84:	8912      	ldrh	r2, [r2, #8]
 802db86:	1a9a      	subs	r2, r3, r2
 802db88:	693b      	ldr	r3, [r7, #16]
 802db8a:	65da      	str	r2, [r3, #92]	; 0x5c
 802db8c:	e002      	b.n	802db94 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 802db8e:	693b      	ldr	r3, [r7, #16]
 802db90:	2200      	movs	r2, #0
 802db92:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 802db94:	693b      	ldr	r3, [r7, #16]
 802db96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802db98:	2b00      	cmp	r3, #0
 802db9a:	d00c      	beq.n	802dbb6 <USBH_MSC_BOT_Process+0x2ba>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 802db9c:	693b      	ldr	r3, [r7, #16]
 802db9e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 802dba2:	693b      	ldr	r3, [r7, #16]
 802dba4:	891a      	ldrh	r2, [r3, #8]
 802dba6:	693b      	ldr	r3, [r7, #16]
 802dba8:	795b      	ldrb	r3, [r3, #5]
 802dbaa:	2001      	movs	r0, #1
 802dbac:	9000      	str	r0, [sp, #0]
 802dbae:	6878      	ldr	r0, [r7, #4]
 802dbb0:	f002 f9d1 	bl	802ff56 <USBH_BulkSendData>
 802dbb4:	e003      	b.n	802dbbe <USBH_MSC_BOT_Process+0x2c2>
                                  MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 802dbb6:	693b      	ldr	r3, [r7, #16]
 802dbb8:	2207      	movs	r2, #7
 802dbba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802dbbe:	687b      	ldr	r3, [r7, #4]
 802dbc0:	2202      	movs	r2, #2
 802dbc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802dbc6:	687b      	ldr	r3, [r7, #4]
 802dbc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802dbcc:	687b      	ldr	r3, [r7, #4]
 802dbce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802dbd2:	2200      	movs	r2, #0
 802dbd4:	4619      	mov	r1, r3
 802dbd6:	f008 fb61 	bl	803629c <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 802dbda:	e0db      	b.n	802dd94 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 802dbdc:	7d3b      	ldrb	r3, [r7, #20]
 802dbde:	2b02      	cmp	r3, #2
 802dbe0:	d112      	bne.n	802dc08 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 802dbe2:	693b      	ldr	r3, [r7, #16]
 802dbe4:	2205      	movs	r2, #5
 802dbe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802dbea:	687b      	ldr	r3, [r7, #4]
 802dbec:	2202      	movs	r2, #2
 802dbee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802dbf2:	687b      	ldr	r3, [r7, #4]
 802dbf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802dbf8:	687b      	ldr	r3, [r7, #4]
 802dbfa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802dbfe:	2200      	movs	r2, #0
 802dc00:	4619      	mov	r1, r3
 802dc02:	f008 fb4b 	bl	803629c <osMessagePut>
      break;
 802dc06:	e0c5      	b.n	802dd94 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 802dc08:	7d3b      	ldrb	r3, [r7, #20]
 802dc0a:	2b05      	cmp	r3, #5
 802dc0c:	f040 80c2 	bne.w	802dd94 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 802dc10:	693b      	ldr	r3, [r7, #16]
 802dc12:	220a      	movs	r2, #10
 802dc14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802dc18:	687b      	ldr	r3, [r7, #4]
 802dc1a:	2202      	movs	r2, #2
 802dc1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802dc20:	687b      	ldr	r3, [r7, #4]
 802dc22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802dc26:	687b      	ldr	r3, [r7, #4]
 802dc28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802dc2c:	2200      	movs	r2, #0
 802dc2e:	4619      	mov	r1, r3
 802dc30:	f008 fb34 	bl	803629c <osMessagePut>
      break;
 802dc34:	e0ae      	b.n	802dd94 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 802dc36:	693b      	ldr	r3, [r7, #16]
 802dc38:	f103 0178 	add.w	r1, r3, #120	; 0x78
 802dc3c:	693b      	ldr	r3, [r7, #16]
 802dc3e:	791b      	ldrb	r3, [r3, #4]
 802dc40:	220d      	movs	r2, #13
 802dc42:	6878      	ldr	r0, [r7, #4]
 802dc44:	f002 f9ac 	bl	802ffa0 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 802dc48:	693b      	ldr	r3, [r7, #16]
 802dc4a:	2208      	movs	r2, #8
 802dc4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 802dc50:	e0a9      	b.n	802dda6 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 802dc52:	693b      	ldr	r3, [r7, #16]
 802dc54:	791b      	ldrb	r3, [r3, #4]
 802dc56:	4619      	mov	r1, r3
 802dc58:	6878      	ldr	r0, [r7, #4]
 802dc5a:	f00c f81d 	bl	8039c98 <USBH_LL_GetURBState>
 802dc5e:	4603      	mov	r3, r0
 802dc60:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 802dc62:	7d3b      	ldrb	r3, [r7, #20]
 802dc64:	2b01      	cmp	r3, #1
 802dc66:	d123      	bne.n	802dcb0 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 802dc68:	693b      	ldr	r3, [r7, #16]
 802dc6a:	2201      	movs	r2, #1
 802dc6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 802dc70:	693b      	ldr	r3, [r7, #16]
 802dc72:	2201      	movs	r2, #1
 802dc74:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 802dc78:	6878      	ldr	r0, [r7, #4]
 802dc7a:	f000 f8c5 	bl	802de08 <USBH_MSC_DecodeCSW>
 802dc7e:	4603      	mov	r3, r0
 802dc80:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 802dc82:	7d7b      	ldrb	r3, [r7, #21]
 802dc84:	2b00      	cmp	r3, #0
 802dc86:	d102      	bne.n	802dc8e <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 802dc88:	2300      	movs	r3, #0
 802dc8a:	75fb      	strb	r3, [r7, #23]
 802dc8c:	e001      	b.n	802dc92 <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 802dc8e:	2302      	movs	r3, #2
 802dc90:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802dc92:	687b      	ldr	r3, [r7, #4]
 802dc94:	2202      	movs	r2, #2
 802dc96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802dc9a:	687b      	ldr	r3, [r7, #4]
 802dc9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802dca0:	687b      	ldr	r3, [r7, #4]
 802dca2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802dca6:	2200      	movs	r2, #0
 802dca8:	4619      	mov	r1, r3
 802dcaa:	f008 faf7 	bl	803629c <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 802dcae:	e073      	b.n	802dd98 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 802dcb0:	7d3b      	ldrb	r3, [r7, #20]
 802dcb2:	2b05      	cmp	r3, #5
 802dcb4:	d170      	bne.n	802dd98 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 802dcb6:	693b      	ldr	r3, [r7, #16]
 802dcb8:	2209      	movs	r2, #9
 802dcba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 802dcbe:	687b      	ldr	r3, [r7, #4]
 802dcc0:	2202      	movs	r2, #2
 802dcc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802dcc6:	687b      	ldr	r3, [r7, #4]
 802dcc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802dccc:	687b      	ldr	r3, [r7, #4]
 802dcce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802dcd2:	2200      	movs	r2, #0
 802dcd4:	4619      	mov	r1, r3
 802dcd6:	f008 fae1 	bl	803629c <osMessagePut>
      break;
 802dcda:	e05d      	b.n	802dd98 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 802dcdc:	78fb      	ldrb	r3, [r7, #3]
 802dcde:	2200      	movs	r2, #0
 802dce0:	4619      	mov	r1, r3
 802dce2:	6878      	ldr	r0, [r7, #4]
 802dce4:	f000 f864 	bl	802ddb0 <USBH_MSC_BOT_Abort>
 802dce8:	4603      	mov	r3, r0
 802dcea:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 802dcec:	7dbb      	ldrb	r3, [r7, #22]
 802dcee:	2b00      	cmp	r3, #0
 802dcf0:	d104      	bne.n	802dcfc <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 802dcf2:	693b      	ldr	r3, [r7, #16]
 802dcf4:	2207      	movs	r2, #7
 802dcf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 802dcfa:	e04f      	b.n	802dd9c <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 802dcfc:	7dbb      	ldrb	r3, [r7, #22]
 802dcfe:	2b04      	cmp	r3, #4
 802dd00:	d14c      	bne.n	802dd9c <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 802dd02:	693b      	ldr	r3, [r7, #16]
 802dd04:	220b      	movs	r2, #11
 802dd06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 802dd0a:	e047      	b.n	802dd9c <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 802dd0c:	78fb      	ldrb	r3, [r7, #3]
 802dd0e:	2201      	movs	r2, #1
 802dd10:	4619      	mov	r1, r3
 802dd12:	6878      	ldr	r0, [r7, #4]
 802dd14:	f000 f84c 	bl	802ddb0 <USBH_MSC_BOT_Abort>
 802dd18:	4603      	mov	r3, r0
 802dd1a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 802dd1c:	7dbb      	ldrb	r3, [r7, #22]
 802dd1e:	2b00      	cmp	r3, #0
 802dd20:	d11d      	bne.n	802dd5e <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 802dd22:	693b      	ldr	r3, [r7, #16]
 802dd24:	795b      	ldrb	r3, [r3, #5]
 802dd26:	4619      	mov	r1, r3
 802dd28:	6878      	ldr	r0, [r7, #4]
 802dd2a:	f00c f80f 	bl	8039d4c <USBH_LL_GetToggle>
 802dd2e:	4603      	mov	r3, r0
 802dd30:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 802dd32:	693b      	ldr	r3, [r7, #16]
 802dd34:	7959      	ldrb	r1, [r3, #5]
 802dd36:	7bfb      	ldrb	r3, [r7, #15]
 802dd38:	f1c3 0301 	rsb	r3, r3, #1
 802dd3c:	b2db      	uxtb	r3, r3
 802dd3e:	461a      	mov	r2, r3
 802dd40:	6878      	ldr	r0, [r7, #4]
 802dd42:	f00b ffd3 	bl	8039cec <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 802dd46:	693b      	ldr	r3, [r7, #16]
 802dd48:	791b      	ldrb	r3, [r3, #4]
 802dd4a:	2200      	movs	r2, #0
 802dd4c:	4619      	mov	r1, r3
 802dd4e:	6878      	ldr	r0, [r7, #4]
 802dd50:	f00b ffcc 	bl	8039cec <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 802dd54:	693b      	ldr	r3, [r7, #16]
 802dd56:	2209      	movs	r2, #9
 802dd58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 802dd5c:	e020      	b.n	802dda0 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 802dd5e:	7dbb      	ldrb	r3, [r7, #22]
 802dd60:	2b04      	cmp	r3, #4
 802dd62:	d11d      	bne.n	802dda0 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 802dd64:	693b      	ldr	r3, [r7, #16]
 802dd66:	220b      	movs	r2, #11
 802dd68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 802dd6c:	e018      	b.n	802dda0 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 802dd6e:	6878      	ldr	r0, [r7, #4]
 802dd70:	f7ff fd67 	bl	802d842 <USBH_MSC_BOT_REQ_Reset>
 802dd74:	4603      	mov	r3, r0
 802dd76:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 802dd78:	7dfb      	ldrb	r3, [r7, #23]
 802dd7a:	2b00      	cmp	r3, #0
 802dd7c:	d112      	bne.n	802dda4 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 802dd7e:	693b      	ldr	r3, [r7, #16]
 802dd80:	2201      	movs	r2, #1
 802dd82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 802dd86:	e00d      	b.n	802dda4 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 802dd88:	bf00      	nop
 802dd8a:	e00c      	b.n	802dda6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802dd8c:	bf00      	nop
 802dd8e:	e00a      	b.n	802dda6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802dd90:	bf00      	nop
 802dd92:	e008      	b.n	802dda6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802dd94:	bf00      	nop
 802dd96:	e006      	b.n	802dda6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802dd98:	bf00      	nop
 802dd9a:	e004      	b.n	802dda6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802dd9c:	bf00      	nop
 802dd9e:	e002      	b.n	802dda6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802dda0:	bf00      	nop
 802dda2:	e000      	b.n	802dda6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 802dda4:	bf00      	nop
  }
  return status;
 802dda6:	7dfb      	ldrb	r3, [r7, #23]
}
 802dda8:	4618      	mov	r0, r3
 802ddaa:	3718      	adds	r7, #24
 802ddac:	46bd      	mov	sp, r7
 802ddae:	bd80      	pop	{r7, pc}

0802ddb0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 802ddb0:	b580      	push	{r7, lr}
 802ddb2:	b084      	sub	sp, #16
 802ddb4:	af00      	add	r7, sp, #0
 802ddb6:	6078      	str	r0, [r7, #4]
 802ddb8:	460b      	mov	r3, r1
 802ddba:	70fb      	strb	r3, [r7, #3]
 802ddbc:	4613      	mov	r3, r2
 802ddbe:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 802ddc0:	2302      	movs	r3, #2
 802ddc2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802ddc4:	687b      	ldr	r3, [r7, #4]
 802ddc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ddca:	69db      	ldr	r3, [r3, #28]
 802ddcc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 802ddce:	78bb      	ldrb	r3, [r7, #2]
 802ddd0:	2b00      	cmp	r3, #0
 802ddd2:	d002      	beq.n	802ddda <USBH_MSC_BOT_Abort+0x2a>
 802ddd4:	2b01      	cmp	r3, #1
 802ddd6:	d009      	beq.n	802ddec <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 802ddd8:	e011      	b.n	802ddfe <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 802ddda:	68bb      	ldr	r3, [r7, #8]
 802dddc:	79db      	ldrb	r3, [r3, #7]
 802ddde:	4619      	mov	r1, r3
 802dde0:	6878      	ldr	r0, [r7, #4]
 802dde2:	f001 faea 	bl	802f3ba <USBH_ClrFeature>
 802dde6:	4603      	mov	r3, r0
 802dde8:	73fb      	strb	r3, [r7, #15]
      break;
 802ddea:	e008      	b.n	802ddfe <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 802ddec:	68bb      	ldr	r3, [r7, #8]
 802ddee:	799b      	ldrb	r3, [r3, #6]
 802ddf0:	4619      	mov	r1, r3
 802ddf2:	6878      	ldr	r0, [r7, #4]
 802ddf4:	f001 fae1 	bl	802f3ba <USBH_ClrFeature>
 802ddf8:	4603      	mov	r3, r0
 802ddfa:	73fb      	strb	r3, [r7, #15]
      break;
 802ddfc:	bf00      	nop
  }
  return status;
 802ddfe:	7bfb      	ldrb	r3, [r7, #15]
}
 802de00:	4618      	mov	r0, r3
 802de02:	3710      	adds	r7, #16
 802de04:	46bd      	mov	sp, r7
 802de06:	bd80      	pop	{r7, pc}

0802de08 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 802de08:	b580      	push	{r7, lr}
 802de0a:	b084      	sub	sp, #16
 802de0c:	af00      	add	r7, sp, #0
 802de0e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802de10:	687b      	ldr	r3, [r7, #4]
 802de12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802de16:	69db      	ldr	r3, [r3, #28]
 802de18:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 802de1a:	2301      	movs	r3, #1
 802de1c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 802de1e:	68bb      	ldr	r3, [r7, #8]
 802de20:	791b      	ldrb	r3, [r3, #4]
 802de22:	4619      	mov	r1, r3
 802de24:	6878      	ldr	r0, [r7, #4]
 802de26:	f00b fea5 	bl	8039b74 <USBH_LL_GetLastXferSize>
 802de2a:	4603      	mov	r3, r0
 802de2c:	2b0d      	cmp	r3, #13
 802de2e:	d002      	beq.n	802de36 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 802de30:	2302      	movs	r3, #2
 802de32:	73fb      	strb	r3, [r7, #15]
 802de34:	e024      	b.n	802de80 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 802de36:	68bb      	ldr	r3, [r7, #8]
 802de38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802de3a:	4a14      	ldr	r2, [pc, #80]	; (802de8c <USBH_MSC_DecodeCSW+0x84>)
 802de3c:	4293      	cmp	r3, r2
 802de3e:	d11d      	bne.n	802de7c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 802de40:	68bb      	ldr	r3, [r7, #8]
 802de42:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 802de44:	68bb      	ldr	r3, [r7, #8]
 802de46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802de48:	429a      	cmp	r2, r3
 802de4a:	d119      	bne.n	802de80 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 802de4c:	68bb      	ldr	r3, [r7, #8]
 802de4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802de52:	2b00      	cmp	r3, #0
 802de54:	d102      	bne.n	802de5c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 802de56:	2300      	movs	r3, #0
 802de58:	73fb      	strb	r3, [r7, #15]
 802de5a:	e011      	b.n	802de80 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 802de5c:	68bb      	ldr	r3, [r7, #8]
 802de5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802de62:	2b01      	cmp	r3, #1
 802de64:	d102      	bne.n	802de6c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 802de66:	2301      	movs	r3, #1
 802de68:	73fb      	strb	r3, [r7, #15]
 802de6a:	e009      	b.n	802de80 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 802de6c:	68bb      	ldr	r3, [r7, #8]
 802de6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802de72:	2b02      	cmp	r3, #2
 802de74:	d104      	bne.n	802de80 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 802de76:	2302      	movs	r3, #2
 802de78:	73fb      	strb	r3, [r7, #15]
 802de7a:	e001      	b.n	802de80 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 802de7c:	2302      	movs	r3, #2
 802de7e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 802de80:	7bfb      	ldrb	r3, [r7, #15]
}
 802de82:	4618      	mov	r0, r3
 802de84:	3710      	adds	r7, #16
 802de86:	46bd      	mov	sp, r7
 802de88:	bd80      	pop	{r7, pc}
 802de8a:	bf00      	nop
 802de8c:	53425355 	.word	0x53425355

0802de90 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 802de90:	b580      	push	{r7, lr}
 802de92:	b084      	sub	sp, #16
 802de94:	af00      	add	r7, sp, #0
 802de96:	6078      	str	r0, [r7, #4]
 802de98:	460b      	mov	r3, r1
 802de9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 802de9c:	2302      	movs	r3, #2
 802de9e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802dea0:	687b      	ldr	r3, [r7, #4]
 802dea2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802dea6:	69db      	ldr	r3, [r3, #28]
 802dea8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 802deaa:	68bb      	ldr	r3, [r7, #8]
 802deac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 802deb0:	2b01      	cmp	r3, #1
 802deb2:	d002      	beq.n	802deba <USBH_MSC_SCSI_TestUnitReady+0x2a>
 802deb4:	2b02      	cmp	r3, #2
 802deb6:	d021      	beq.n	802defc <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 802deb8:	e028      	b.n	802df0c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 802deba:	68bb      	ldr	r3, [r7, #8]
 802debc:	2200      	movs	r2, #0
 802debe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 802dec0:	68bb      	ldr	r3, [r7, #8]
 802dec2:	2200      	movs	r2, #0
 802dec4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802dec8:	68bb      	ldr	r3, [r7, #8]
 802deca:	220a      	movs	r2, #10
 802decc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 802ded0:	68bb      	ldr	r3, [r7, #8]
 802ded2:	3363      	adds	r3, #99	; 0x63
 802ded4:	2210      	movs	r2, #16
 802ded6:	2100      	movs	r1, #0
 802ded8:	4618      	mov	r0, r3
 802deda:	f00c f803 	bl	8039ee4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 802dede:	68bb      	ldr	r3, [r7, #8]
 802dee0:	2200      	movs	r2, #0
 802dee2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802dee6:	68bb      	ldr	r3, [r7, #8]
 802dee8:	2201      	movs	r2, #1
 802deea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802deee:	68bb      	ldr	r3, [r7, #8]
 802def0:	2202      	movs	r2, #2
 802def2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 802def6:	2301      	movs	r3, #1
 802def8:	73fb      	strb	r3, [r7, #15]
      break;
 802defa:	e007      	b.n	802df0c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 802defc:	78fb      	ldrb	r3, [r7, #3]
 802defe:	4619      	mov	r1, r3
 802df00:	6878      	ldr	r0, [r7, #4]
 802df02:	f7ff fcfb 	bl	802d8fc <USBH_MSC_BOT_Process>
 802df06:	4603      	mov	r3, r0
 802df08:	73fb      	strb	r3, [r7, #15]
      break;
 802df0a:	bf00      	nop
  }

  return error;
 802df0c:	7bfb      	ldrb	r3, [r7, #15]
}
 802df0e:	4618      	mov	r0, r3
 802df10:	3710      	adds	r7, #16
 802df12:	46bd      	mov	sp, r7
 802df14:	bd80      	pop	{r7, pc}

0802df16 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 802df16:	b580      	push	{r7, lr}
 802df18:	b086      	sub	sp, #24
 802df1a:	af00      	add	r7, sp, #0
 802df1c:	60f8      	str	r0, [r7, #12]
 802df1e:	460b      	mov	r3, r1
 802df20:	607a      	str	r2, [r7, #4]
 802df22:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 802df24:	2301      	movs	r3, #1
 802df26:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802df28:	68fb      	ldr	r3, [r7, #12]
 802df2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802df2e:	69db      	ldr	r3, [r3, #28]
 802df30:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 802df32:	693b      	ldr	r3, [r7, #16]
 802df34:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 802df38:	2b01      	cmp	r3, #1
 802df3a:	d002      	beq.n	802df42 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 802df3c:	2b02      	cmp	r3, #2
 802df3e:	d027      	beq.n	802df90 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 802df40:	e05f      	b.n	802e002 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 802df42:	693b      	ldr	r3, [r7, #16]
 802df44:	2208      	movs	r2, #8
 802df46:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 802df48:	693b      	ldr	r3, [r7, #16]
 802df4a:	2280      	movs	r2, #128	; 0x80
 802df4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802df50:	693b      	ldr	r3, [r7, #16]
 802df52:	220a      	movs	r2, #10
 802df54:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 802df58:	693b      	ldr	r3, [r7, #16]
 802df5a:	3363      	adds	r3, #99	; 0x63
 802df5c:	2210      	movs	r2, #16
 802df5e:	2100      	movs	r1, #0
 802df60:	4618      	mov	r0, r3
 802df62:	f00b ffbf 	bl	8039ee4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 802df66:	693b      	ldr	r3, [r7, #16]
 802df68:	2225      	movs	r2, #37	; 0x25
 802df6a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802df6e:	693b      	ldr	r3, [r7, #16]
 802df70:	2201      	movs	r2, #1
 802df72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802df76:	693b      	ldr	r3, [r7, #16]
 802df78:	2202      	movs	r2, #2
 802df7a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 802df7e:	693b      	ldr	r3, [r7, #16]
 802df80:	f103 0210 	add.w	r2, r3, #16
 802df84:	693b      	ldr	r3, [r7, #16]
 802df86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 802df8a:	2301      	movs	r3, #1
 802df8c:	75fb      	strb	r3, [r7, #23]
      break;
 802df8e:	e038      	b.n	802e002 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 802df90:	7afb      	ldrb	r3, [r7, #11]
 802df92:	4619      	mov	r1, r3
 802df94:	68f8      	ldr	r0, [r7, #12]
 802df96:	f7ff fcb1 	bl	802d8fc <USBH_MSC_BOT_Process>
 802df9a:	4603      	mov	r3, r0
 802df9c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 802df9e:	7dfb      	ldrb	r3, [r7, #23]
 802dfa0:	2b00      	cmp	r3, #0
 802dfa2:	d12d      	bne.n	802e000 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 802dfa4:	693b      	ldr	r3, [r7, #16]
 802dfa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dfaa:	3303      	adds	r3, #3
 802dfac:	781b      	ldrb	r3, [r3, #0]
 802dfae:	461a      	mov	r2, r3
 802dfb0:	693b      	ldr	r3, [r7, #16]
 802dfb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dfb6:	3302      	adds	r3, #2
 802dfb8:	781b      	ldrb	r3, [r3, #0]
 802dfba:	021b      	lsls	r3, r3, #8
 802dfbc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 802dfbe:	693b      	ldr	r3, [r7, #16]
 802dfc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dfc4:	3301      	adds	r3, #1
 802dfc6:	781b      	ldrb	r3, [r3, #0]
 802dfc8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 802dfca:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 802dfcc:	693b      	ldr	r3, [r7, #16]
 802dfce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dfd2:	781b      	ldrb	r3, [r3, #0]
 802dfd4:	061b      	lsls	r3, r3, #24
 802dfd6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 802dfd8:	687b      	ldr	r3, [r7, #4]
 802dfda:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 802dfdc:	693b      	ldr	r3, [r7, #16]
 802dfde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dfe2:	3307      	adds	r3, #7
 802dfe4:	781b      	ldrb	r3, [r3, #0]
 802dfe6:	b29a      	uxth	r2, r3
 802dfe8:	693b      	ldr	r3, [r7, #16]
 802dfea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dfee:	3306      	adds	r3, #6
 802dff0:	781b      	ldrb	r3, [r3, #0]
 802dff2:	b29b      	uxth	r3, r3
 802dff4:	021b      	lsls	r3, r3, #8
 802dff6:	b29b      	uxth	r3, r3
 802dff8:	4313      	orrs	r3, r2
 802dffa:	b29a      	uxth	r2, r3
 802dffc:	687b      	ldr	r3, [r7, #4]
 802dffe:	809a      	strh	r2, [r3, #4]
      break;
 802e000:	bf00      	nop
  }

  return error;
 802e002:	7dfb      	ldrb	r3, [r7, #23]
}
 802e004:	4618      	mov	r0, r3
 802e006:	3718      	adds	r7, #24
 802e008:	46bd      	mov	sp, r7
 802e00a:	bd80      	pop	{r7, pc}

0802e00c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 802e00c:	b580      	push	{r7, lr}
 802e00e:	b086      	sub	sp, #24
 802e010:	af00      	add	r7, sp, #0
 802e012:	60f8      	str	r0, [r7, #12]
 802e014:	460b      	mov	r3, r1
 802e016:	607a      	str	r2, [r7, #4]
 802e018:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 802e01a:	2302      	movs	r3, #2
 802e01c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802e01e:	68fb      	ldr	r3, [r7, #12]
 802e020:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802e024:	69db      	ldr	r3, [r3, #28]
 802e026:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 802e028:	693b      	ldr	r3, [r7, #16]
 802e02a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 802e02e:	2b01      	cmp	r3, #1
 802e030:	d002      	beq.n	802e038 <USBH_MSC_SCSI_Inquiry+0x2c>
 802e032:	2b02      	cmp	r3, #2
 802e034:	d03d      	beq.n	802e0b2 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 802e036:	e089      	b.n	802e14c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 802e038:	693b      	ldr	r3, [r7, #16]
 802e03a:	2224      	movs	r2, #36	; 0x24
 802e03c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 802e03e:	693b      	ldr	r3, [r7, #16]
 802e040:	2280      	movs	r2, #128	; 0x80
 802e042:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802e046:	693b      	ldr	r3, [r7, #16]
 802e048:	220a      	movs	r2, #10
 802e04a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 802e04e:	693b      	ldr	r3, [r7, #16]
 802e050:	3363      	adds	r3, #99	; 0x63
 802e052:	220a      	movs	r2, #10
 802e054:	2100      	movs	r1, #0
 802e056:	4618      	mov	r0, r3
 802e058:	f00b ff44 	bl	8039ee4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 802e05c:	693b      	ldr	r3, [r7, #16]
 802e05e:	2212      	movs	r2, #18
 802e060:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 802e064:	7afb      	ldrb	r3, [r7, #11]
 802e066:	015b      	lsls	r3, r3, #5
 802e068:	b2da      	uxtb	r2, r3
 802e06a:	693b      	ldr	r3, [r7, #16]
 802e06c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 802e070:	693b      	ldr	r3, [r7, #16]
 802e072:	2200      	movs	r2, #0
 802e074:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 802e078:	693b      	ldr	r3, [r7, #16]
 802e07a:	2200      	movs	r2, #0
 802e07c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 802e080:	693b      	ldr	r3, [r7, #16]
 802e082:	2224      	movs	r2, #36	; 0x24
 802e084:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 802e088:	693b      	ldr	r3, [r7, #16]
 802e08a:	2200      	movs	r2, #0
 802e08c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802e090:	693b      	ldr	r3, [r7, #16]
 802e092:	2201      	movs	r2, #1
 802e094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802e098:	693b      	ldr	r3, [r7, #16]
 802e09a:	2202      	movs	r2, #2
 802e09c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 802e0a0:	693b      	ldr	r3, [r7, #16]
 802e0a2:	f103 0210 	add.w	r2, r3, #16
 802e0a6:	693b      	ldr	r3, [r7, #16]
 802e0a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 802e0ac:	2301      	movs	r3, #1
 802e0ae:	75fb      	strb	r3, [r7, #23]
      break;
 802e0b0:	e04c      	b.n	802e14c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 802e0b2:	7afb      	ldrb	r3, [r7, #11]
 802e0b4:	4619      	mov	r1, r3
 802e0b6:	68f8      	ldr	r0, [r7, #12]
 802e0b8:	f7ff fc20 	bl	802d8fc <USBH_MSC_BOT_Process>
 802e0bc:	4603      	mov	r3, r0
 802e0be:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 802e0c0:	7dfb      	ldrb	r3, [r7, #23]
 802e0c2:	2b00      	cmp	r3, #0
 802e0c4:	d141      	bne.n	802e14a <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 802e0c6:	2222      	movs	r2, #34	; 0x22
 802e0c8:	2100      	movs	r1, #0
 802e0ca:	6878      	ldr	r0, [r7, #4]
 802e0cc:	f00b ff0a 	bl	8039ee4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 802e0d0:	693b      	ldr	r3, [r7, #16]
 802e0d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e0d6:	781b      	ldrb	r3, [r3, #0]
 802e0d8:	f003 031f 	and.w	r3, r3, #31
 802e0dc:	b2da      	uxtb	r2, r3
 802e0de:	687b      	ldr	r3, [r7, #4]
 802e0e0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 802e0e2:	693b      	ldr	r3, [r7, #16]
 802e0e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e0e8:	781b      	ldrb	r3, [r3, #0]
 802e0ea:	095b      	lsrs	r3, r3, #5
 802e0ec:	b2da      	uxtb	r2, r3
 802e0ee:	687b      	ldr	r3, [r7, #4]
 802e0f0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 802e0f2:	693b      	ldr	r3, [r7, #16]
 802e0f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e0f8:	3301      	adds	r3, #1
 802e0fa:	781b      	ldrb	r3, [r3, #0]
 802e0fc:	b25b      	sxtb	r3, r3
 802e0fe:	2b00      	cmp	r3, #0
 802e100:	da03      	bge.n	802e10a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 802e102:	687b      	ldr	r3, [r7, #4]
 802e104:	2201      	movs	r2, #1
 802e106:	709a      	strb	r2, [r3, #2]
 802e108:	e002      	b.n	802e110 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 802e10a:	687b      	ldr	r3, [r7, #4]
 802e10c:	2200      	movs	r2, #0
 802e10e:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 802e110:	687b      	ldr	r3, [r7, #4]
 802e112:	1cd8      	adds	r0, r3, #3
 802e114:	693b      	ldr	r3, [r7, #16]
 802e116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e11a:	3308      	adds	r3, #8
 802e11c:	2208      	movs	r2, #8
 802e11e:	4619      	mov	r1, r3
 802e120:	f00b fed2 	bl	8039ec8 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 802e124:	687b      	ldr	r3, [r7, #4]
 802e126:	f103 000c 	add.w	r0, r3, #12
 802e12a:	693b      	ldr	r3, [r7, #16]
 802e12c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e130:	3310      	adds	r3, #16
 802e132:	2210      	movs	r2, #16
 802e134:	4619      	mov	r1, r3
 802e136:	f00b fec7 	bl	8039ec8 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 802e13a:	687b      	ldr	r3, [r7, #4]
 802e13c:	331d      	adds	r3, #29
 802e13e:	693a      	ldr	r2, [r7, #16]
 802e140:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 802e144:	3220      	adds	r2, #32
 802e146:	6812      	ldr	r2, [r2, #0]
 802e148:	601a      	str	r2, [r3, #0]
      break;
 802e14a:	bf00      	nop
  }

  return error;
 802e14c:	7dfb      	ldrb	r3, [r7, #23]
}
 802e14e:	4618      	mov	r0, r3
 802e150:	3718      	adds	r7, #24
 802e152:	46bd      	mov	sp, r7
 802e154:	bd80      	pop	{r7, pc}

0802e156 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 802e156:	b580      	push	{r7, lr}
 802e158:	b086      	sub	sp, #24
 802e15a:	af00      	add	r7, sp, #0
 802e15c:	60f8      	str	r0, [r7, #12]
 802e15e:	460b      	mov	r3, r1
 802e160:	607a      	str	r2, [r7, #4]
 802e162:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 802e164:	2302      	movs	r3, #2
 802e166:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802e168:	68fb      	ldr	r3, [r7, #12]
 802e16a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802e16e:	69db      	ldr	r3, [r3, #28]
 802e170:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 802e172:	693b      	ldr	r3, [r7, #16]
 802e174:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 802e178:	2b01      	cmp	r3, #1
 802e17a:	d002      	beq.n	802e182 <USBH_MSC_SCSI_RequestSense+0x2c>
 802e17c:	2b02      	cmp	r3, #2
 802e17e:	d03d      	beq.n	802e1fc <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 802e180:	e05d      	b.n	802e23e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 802e182:	693b      	ldr	r3, [r7, #16]
 802e184:	220e      	movs	r2, #14
 802e186:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 802e188:	693b      	ldr	r3, [r7, #16]
 802e18a:	2280      	movs	r2, #128	; 0x80
 802e18c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802e190:	693b      	ldr	r3, [r7, #16]
 802e192:	220a      	movs	r2, #10
 802e194:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 802e198:	693b      	ldr	r3, [r7, #16]
 802e19a:	3363      	adds	r3, #99	; 0x63
 802e19c:	2210      	movs	r2, #16
 802e19e:	2100      	movs	r1, #0
 802e1a0:	4618      	mov	r0, r3
 802e1a2:	f00b fe9f 	bl	8039ee4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 802e1a6:	693b      	ldr	r3, [r7, #16]
 802e1a8:	2203      	movs	r2, #3
 802e1aa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 802e1ae:	7afb      	ldrb	r3, [r7, #11]
 802e1b0:	015b      	lsls	r3, r3, #5
 802e1b2:	b2da      	uxtb	r2, r3
 802e1b4:	693b      	ldr	r3, [r7, #16]
 802e1b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 802e1ba:	693b      	ldr	r3, [r7, #16]
 802e1bc:	2200      	movs	r2, #0
 802e1be:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 802e1c2:	693b      	ldr	r3, [r7, #16]
 802e1c4:	2200      	movs	r2, #0
 802e1c6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 802e1ca:	693b      	ldr	r3, [r7, #16]
 802e1cc:	220e      	movs	r2, #14
 802e1ce:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 802e1d2:	693b      	ldr	r3, [r7, #16]
 802e1d4:	2200      	movs	r2, #0
 802e1d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802e1da:	693b      	ldr	r3, [r7, #16]
 802e1dc:	2201      	movs	r2, #1
 802e1de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802e1e2:	693b      	ldr	r3, [r7, #16]
 802e1e4:	2202      	movs	r2, #2
 802e1e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 802e1ea:	693b      	ldr	r3, [r7, #16]
 802e1ec:	f103 0210 	add.w	r2, r3, #16
 802e1f0:	693b      	ldr	r3, [r7, #16]
 802e1f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 802e1f6:	2301      	movs	r3, #1
 802e1f8:	75fb      	strb	r3, [r7, #23]
      break;
 802e1fa:	e020      	b.n	802e23e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 802e1fc:	7afb      	ldrb	r3, [r7, #11]
 802e1fe:	4619      	mov	r1, r3
 802e200:	68f8      	ldr	r0, [r7, #12]
 802e202:	f7ff fb7b 	bl	802d8fc <USBH_MSC_BOT_Process>
 802e206:	4603      	mov	r3, r0
 802e208:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 802e20a:	7dfb      	ldrb	r3, [r7, #23]
 802e20c:	2b00      	cmp	r3, #0
 802e20e:	d115      	bne.n	802e23c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 802e210:	693b      	ldr	r3, [r7, #16]
 802e212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e216:	3302      	adds	r3, #2
 802e218:	781b      	ldrb	r3, [r3, #0]
 802e21a:	f003 030f 	and.w	r3, r3, #15
 802e21e:	b2da      	uxtb	r2, r3
 802e220:	687b      	ldr	r3, [r7, #4]
 802e222:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 802e224:	693b      	ldr	r3, [r7, #16]
 802e226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e22a:	7b1a      	ldrb	r2, [r3, #12]
 802e22c:	687b      	ldr	r3, [r7, #4]
 802e22e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 802e230:	693b      	ldr	r3, [r7, #16]
 802e232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e236:	7b5a      	ldrb	r2, [r3, #13]
 802e238:	687b      	ldr	r3, [r7, #4]
 802e23a:	709a      	strb	r2, [r3, #2]
      break;
 802e23c:	bf00      	nop
  }

  return error;
 802e23e:	7dfb      	ldrb	r3, [r7, #23]
}
 802e240:	4618      	mov	r0, r3
 802e242:	3718      	adds	r7, #24
 802e244:	46bd      	mov	sp, r7
 802e246:	bd80      	pop	{r7, pc}

0802e248 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 802e248:	b580      	push	{r7, lr}
 802e24a:	b086      	sub	sp, #24
 802e24c:	af00      	add	r7, sp, #0
 802e24e:	60f8      	str	r0, [r7, #12]
 802e250:	607a      	str	r2, [r7, #4]
 802e252:	603b      	str	r3, [r7, #0]
 802e254:	460b      	mov	r3, r1
 802e256:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 802e258:	2302      	movs	r3, #2
 802e25a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802e25c:	68fb      	ldr	r3, [r7, #12]
 802e25e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802e262:	69db      	ldr	r3, [r3, #28]
 802e264:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 802e266:	693b      	ldr	r3, [r7, #16]
 802e268:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 802e26c:	2b01      	cmp	r3, #1
 802e26e:	d002      	beq.n	802e276 <USBH_MSC_SCSI_Write+0x2e>
 802e270:	2b02      	cmp	r3, #2
 802e272:	d047      	beq.n	802e304 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 802e274:	e04e      	b.n	802e314 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 802e276:	693b      	ldr	r3, [r7, #16]
 802e278:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 802e27c:	461a      	mov	r2, r3
 802e27e:	6a3b      	ldr	r3, [r7, #32]
 802e280:	fb03 f202 	mul.w	r2, r3, r2
 802e284:	693b      	ldr	r3, [r7, #16]
 802e286:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 802e288:	693b      	ldr	r3, [r7, #16]
 802e28a:	2200      	movs	r2, #0
 802e28c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802e290:	693b      	ldr	r3, [r7, #16]
 802e292:	220a      	movs	r2, #10
 802e294:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 802e298:	693b      	ldr	r3, [r7, #16]
 802e29a:	3363      	adds	r3, #99	; 0x63
 802e29c:	2210      	movs	r2, #16
 802e29e:	2100      	movs	r1, #0
 802e2a0:	4618      	mov	r0, r3
 802e2a2:	f00b fe1f 	bl	8039ee4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 802e2a6:	693b      	ldr	r3, [r7, #16]
 802e2a8:	222a      	movs	r2, #42	; 0x2a
 802e2aa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 802e2ae:	79fa      	ldrb	r2, [r7, #7]
 802e2b0:	693b      	ldr	r3, [r7, #16]
 802e2b2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 802e2b6:	79ba      	ldrb	r2, [r7, #6]
 802e2b8:	693b      	ldr	r3, [r7, #16]
 802e2ba:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 802e2be:	797a      	ldrb	r2, [r7, #5]
 802e2c0:	693b      	ldr	r3, [r7, #16]
 802e2c2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 802e2c6:	1d3b      	adds	r3, r7, #4
 802e2c8:	781a      	ldrb	r2, [r3, #0]
 802e2ca:	693b      	ldr	r3, [r7, #16]
 802e2cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 802e2d0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 802e2d4:	693b      	ldr	r3, [r7, #16]
 802e2d6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 802e2da:	f107 0320 	add.w	r3, r7, #32
 802e2de:	781a      	ldrb	r2, [r3, #0]
 802e2e0:	693b      	ldr	r3, [r7, #16]
 802e2e2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802e2e6:	693b      	ldr	r3, [r7, #16]
 802e2e8:	2201      	movs	r2, #1
 802e2ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802e2ee:	693b      	ldr	r3, [r7, #16]
 802e2f0:	2202      	movs	r2, #2
 802e2f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 802e2f6:	693b      	ldr	r3, [r7, #16]
 802e2f8:	683a      	ldr	r2, [r7, #0]
 802e2fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 802e2fe:	2301      	movs	r3, #1
 802e300:	75fb      	strb	r3, [r7, #23]
      break;
 802e302:	e007      	b.n	802e314 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 802e304:	7afb      	ldrb	r3, [r7, #11]
 802e306:	4619      	mov	r1, r3
 802e308:	68f8      	ldr	r0, [r7, #12]
 802e30a:	f7ff faf7 	bl	802d8fc <USBH_MSC_BOT_Process>
 802e30e:	4603      	mov	r3, r0
 802e310:	75fb      	strb	r3, [r7, #23]
      break;
 802e312:	bf00      	nop
  }

  return error;
 802e314:	7dfb      	ldrb	r3, [r7, #23]
}
 802e316:	4618      	mov	r0, r3
 802e318:	3718      	adds	r7, #24
 802e31a:	46bd      	mov	sp, r7
 802e31c:	bd80      	pop	{r7, pc}

0802e31e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 802e31e:	b580      	push	{r7, lr}
 802e320:	b086      	sub	sp, #24
 802e322:	af00      	add	r7, sp, #0
 802e324:	60f8      	str	r0, [r7, #12]
 802e326:	607a      	str	r2, [r7, #4]
 802e328:	603b      	str	r3, [r7, #0]
 802e32a:	460b      	mov	r3, r1
 802e32c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 802e32e:	2302      	movs	r3, #2
 802e330:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802e332:	68fb      	ldr	r3, [r7, #12]
 802e334:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802e338:	69db      	ldr	r3, [r3, #28]
 802e33a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 802e33c:	693b      	ldr	r3, [r7, #16]
 802e33e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 802e342:	2b01      	cmp	r3, #1
 802e344:	d002      	beq.n	802e34c <USBH_MSC_SCSI_Read+0x2e>
 802e346:	2b02      	cmp	r3, #2
 802e348:	d047      	beq.n	802e3da <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 802e34a:	e04e      	b.n	802e3ea <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 802e34c:	693b      	ldr	r3, [r7, #16]
 802e34e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 802e352:	461a      	mov	r2, r3
 802e354:	6a3b      	ldr	r3, [r7, #32]
 802e356:	fb03 f202 	mul.w	r2, r3, r2
 802e35a:	693b      	ldr	r3, [r7, #16]
 802e35c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 802e35e:	693b      	ldr	r3, [r7, #16]
 802e360:	2280      	movs	r2, #128	; 0x80
 802e362:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802e366:	693b      	ldr	r3, [r7, #16]
 802e368:	220a      	movs	r2, #10
 802e36a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 802e36e:	693b      	ldr	r3, [r7, #16]
 802e370:	3363      	adds	r3, #99	; 0x63
 802e372:	2210      	movs	r2, #16
 802e374:	2100      	movs	r1, #0
 802e376:	4618      	mov	r0, r3
 802e378:	f00b fdb4 	bl	8039ee4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 802e37c:	693b      	ldr	r3, [r7, #16]
 802e37e:	2228      	movs	r2, #40	; 0x28
 802e380:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 802e384:	79fa      	ldrb	r2, [r7, #7]
 802e386:	693b      	ldr	r3, [r7, #16]
 802e388:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 802e38c:	79ba      	ldrb	r2, [r7, #6]
 802e38e:	693b      	ldr	r3, [r7, #16]
 802e390:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 802e394:	797a      	ldrb	r2, [r7, #5]
 802e396:	693b      	ldr	r3, [r7, #16]
 802e398:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 802e39c:	1d3b      	adds	r3, r7, #4
 802e39e:	781a      	ldrb	r2, [r3, #0]
 802e3a0:	693b      	ldr	r3, [r7, #16]
 802e3a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 802e3a6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 802e3aa:	693b      	ldr	r3, [r7, #16]
 802e3ac:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 802e3b0:	f107 0320 	add.w	r3, r7, #32
 802e3b4:	781a      	ldrb	r2, [r3, #0]
 802e3b6:	693b      	ldr	r3, [r7, #16]
 802e3b8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802e3bc:	693b      	ldr	r3, [r7, #16]
 802e3be:	2201      	movs	r2, #1
 802e3c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802e3c4:	693b      	ldr	r3, [r7, #16]
 802e3c6:	2202      	movs	r2, #2
 802e3c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 802e3cc:	693b      	ldr	r3, [r7, #16]
 802e3ce:	683a      	ldr	r2, [r7, #0]
 802e3d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 802e3d4:	2301      	movs	r3, #1
 802e3d6:	75fb      	strb	r3, [r7, #23]
      break;
 802e3d8:	e007      	b.n	802e3ea <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 802e3da:	7afb      	ldrb	r3, [r7, #11]
 802e3dc:	4619      	mov	r1, r3
 802e3de:	68f8      	ldr	r0, [r7, #12]
 802e3e0:	f7ff fa8c 	bl	802d8fc <USBH_MSC_BOT_Process>
 802e3e4:	4603      	mov	r3, r0
 802e3e6:	75fb      	strb	r3, [r7, #23]
      break;
 802e3e8:	bf00      	nop
  }

  return error;
 802e3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 802e3ec:	4618      	mov	r0, r3
 802e3ee:	3718      	adds	r7, #24
 802e3f0:	46bd      	mov	sp, r7
 802e3f2:	bd80      	pop	{r7, pc}

0802e3f4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 802e3f4:	b5b0      	push	{r4, r5, r7, lr}
 802e3f6:	b090      	sub	sp, #64	; 0x40
 802e3f8:	af00      	add	r7, sp, #0
 802e3fa:	60f8      	str	r0, [r7, #12]
 802e3fc:	60b9      	str	r1, [r7, #8]
 802e3fe:	4613      	mov	r3, r2
 802e400:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802e402:	68fb      	ldr	r3, [r7, #12]
 802e404:	2b00      	cmp	r3, #0
 802e406:	d101      	bne.n	802e40c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 802e408:	2302      	movs	r3, #2
 802e40a:	e04d      	b.n	802e4a8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 802e40c:	68fb      	ldr	r3, [r7, #12]
 802e40e:	79fa      	ldrb	r2, [r7, #7]
 802e410:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802e414:	68fb      	ldr	r3, [r7, #12]
 802e416:	2200      	movs	r2, #0
 802e418:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 802e41c:	68fb      	ldr	r3, [r7, #12]
 802e41e:	2200      	movs	r2, #0
 802e420:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 802e424:	68f8      	ldr	r0, [r7, #12]
 802e426:	f000 f847 	bl	802e4b8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 802e42a:	68fb      	ldr	r3, [r7, #12]
 802e42c:	2200      	movs	r2, #0
 802e42e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802e432:	68fb      	ldr	r3, [r7, #12]
 802e434:	2200      	movs	r2, #0
 802e436:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802e43a:	68fb      	ldr	r3, [r7, #12]
 802e43c:	2200      	movs	r2, #0
 802e43e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802e442:	68fb      	ldr	r3, [r7, #12]
 802e444:	2200      	movs	r2, #0
 802e446:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 802e44a:	68bb      	ldr	r3, [r7, #8]
 802e44c:	2b00      	cmp	r3, #0
 802e44e:	d003      	beq.n	802e458 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802e450:	68fb      	ldr	r3, [r7, #12]
 802e452:	68ba      	ldr	r2, [r7, #8]
 802e454:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 802e458:	4b15      	ldr	r3, [pc, #84]	; (802e4b0 <USBH_Init+0xbc>)
 802e45a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 802e45e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802e460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 802e464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802e468:	2100      	movs	r1, #0
 802e46a:	4618      	mov	r0, r3
 802e46c:	f007 feee 	bl	803624c <osMessageCreate>
 802e470:	4602      	mov	r2, r0
 802e472:	68fb      	ldr	r3, [r7, #12]
 802e474:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 802e478:	4b0e      	ldr	r3, [pc, #56]	; (802e4b4 <USBH_Init+0xc0>)
 802e47a:	f107 0414 	add.w	r4, r7, #20
 802e47e:	461d      	mov	r5, r3
 802e480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802e482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802e484:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802e488:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 802e48c:	f107 0314 	add.w	r3, r7, #20
 802e490:	68f9      	ldr	r1, [r7, #12]
 802e492:	4618      	mov	r0, r3
 802e494:	f007 fcdf 	bl	8035e56 <osThreadCreate>
 802e498:	4602      	mov	r2, r0
 802e49a:	68fb      	ldr	r3, [r7, #12]
 802e49c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 802e4a0:	68f8      	ldr	r0, [r7, #12]
 802e4a2:	f00b faad 	bl	8039a00 <USBH_LL_Init>

  return USBH_OK;
 802e4a6:	2300      	movs	r3, #0
}
 802e4a8:	4618      	mov	r0, r3
 802e4aa:	3740      	adds	r7, #64	; 0x40
 802e4ac:	46bd      	mov	sp, r7
 802e4ae:	bdb0      	pop	{r4, r5, r7, pc}
 802e4b0:	0803b7b0 	.word	0x0803b7b0
 802e4b4:	0803b7c0 	.word	0x0803b7c0

0802e4b8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 802e4b8:	b480      	push	{r7}
 802e4ba:	b085      	sub	sp, #20
 802e4bc:	af00      	add	r7, sp, #0
 802e4be:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802e4c0:	2300      	movs	r3, #0
 802e4c2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802e4c4:	2300      	movs	r3, #0
 802e4c6:	60fb      	str	r3, [r7, #12]
 802e4c8:	e009      	b.n	802e4de <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 802e4ca:	687a      	ldr	r2, [r7, #4]
 802e4cc:	68fb      	ldr	r3, [r7, #12]
 802e4ce:	33e0      	adds	r3, #224	; 0xe0
 802e4d0:	009b      	lsls	r3, r3, #2
 802e4d2:	4413      	add	r3, r2
 802e4d4:	2200      	movs	r2, #0
 802e4d6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802e4d8:	68fb      	ldr	r3, [r7, #12]
 802e4da:	3301      	adds	r3, #1
 802e4dc:	60fb      	str	r3, [r7, #12]
 802e4de:	68fb      	ldr	r3, [r7, #12]
 802e4e0:	2b0f      	cmp	r3, #15
 802e4e2:	d9f2      	bls.n	802e4ca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802e4e4:	2300      	movs	r3, #0
 802e4e6:	60fb      	str	r3, [r7, #12]
 802e4e8:	e009      	b.n	802e4fe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802e4ea:	687a      	ldr	r2, [r7, #4]
 802e4ec:	68fb      	ldr	r3, [r7, #12]
 802e4ee:	4413      	add	r3, r2
 802e4f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802e4f4:	2200      	movs	r2, #0
 802e4f6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802e4f8:	68fb      	ldr	r3, [r7, #12]
 802e4fa:	3301      	adds	r3, #1
 802e4fc:	60fb      	str	r3, [r7, #12]
 802e4fe:	68fb      	ldr	r3, [r7, #12]
 802e500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802e504:	d3f1      	bcc.n	802e4ea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 802e506:	687b      	ldr	r3, [r7, #4]
 802e508:	2200      	movs	r2, #0
 802e50a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802e50c:	687b      	ldr	r3, [r7, #4]
 802e50e:	2200      	movs	r2, #0
 802e510:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 802e512:	687b      	ldr	r3, [r7, #4]
 802e514:	2201      	movs	r2, #1
 802e516:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 802e518:	687b      	ldr	r3, [r7, #4]
 802e51a:	2200      	movs	r2, #0
 802e51c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 802e520:	687b      	ldr	r3, [r7, #4]
 802e522:	2201      	movs	r2, #1
 802e524:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 802e526:	687b      	ldr	r3, [r7, #4]
 802e528:	2240      	movs	r2, #64	; 0x40
 802e52a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802e52c:	687b      	ldr	r3, [r7, #4]
 802e52e:	2200      	movs	r2, #0
 802e530:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802e532:	687b      	ldr	r3, [r7, #4]
 802e534:	2200      	movs	r2, #0
 802e536:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802e53a:	687b      	ldr	r3, [r7, #4]
 802e53c:	2201      	movs	r2, #1
 802e53e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802e542:	687b      	ldr	r3, [r7, #4]
 802e544:	2200      	movs	r2, #0
 802e546:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 802e54a:	687b      	ldr	r3, [r7, #4]
 802e54c:	2200      	movs	r2, #0
 802e54e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802e552:	2300      	movs	r3, #0
}
 802e554:	4618      	mov	r0, r3
 802e556:	3714      	adds	r7, #20
 802e558:	46bd      	mov	sp, r7
 802e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e55e:	4770      	bx	lr

0802e560 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802e560:	b480      	push	{r7}
 802e562:	b085      	sub	sp, #20
 802e564:	af00      	add	r7, sp, #0
 802e566:	6078      	str	r0, [r7, #4]
 802e568:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 802e56a:	2300      	movs	r3, #0
 802e56c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802e56e:	683b      	ldr	r3, [r7, #0]
 802e570:	2b00      	cmp	r3, #0
 802e572:	d016      	beq.n	802e5a2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802e574:	687b      	ldr	r3, [r7, #4]
 802e576:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802e57a:	2b00      	cmp	r3, #0
 802e57c:	d10e      	bne.n	802e59c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802e57e:	687b      	ldr	r3, [r7, #4]
 802e580:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802e584:	1c59      	adds	r1, r3, #1
 802e586:	687a      	ldr	r2, [r7, #4]
 802e588:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 802e58c:	687a      	ldr	r2, [r7, #4]
 802e58e:	33de      	adds	r3, #222	; 0xde
 802e590:	6839      	ldr	r1, [r7, #0]
 802e592:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802e596:	2300      	movs	r3, #0
 802e598:	73fb      	strb	r3, [r7, #15]
 802e59a:	e004      	b.n	802e5a6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 802e59c:	2302      	movs	r3, #2
 802e59e:	73fb      	strb	r3, [r7, #15]
 802e5a0:	e001      	b.n	802e5a6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802e5a2:	2302      	movs	r3, #2
 802e5a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802e5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 802e5a8:	4618      	mov	r0, r3
 802e5aa:	3714      	adds	r7, #20
 802e5ac:	46bd      	mov	sp, r7
 802e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e5b2:	4770      	bx	lr

0802e5b4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802e5b4:	b480      	push	{r7}
 802e5b6:	b085      	sub	sp, #20
 802e5b8:	af00      	add	r7, sp, #0
 802e5ba:	6078      	str	r0, [r7, #4]
 802e5bc:	460b      	mov	r3, r1
 802e5be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802e5c0:	2300      	movs	r3, #0
 802e5c2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802e5c4:	687b      	ldr	r3, [r7, #4]
 802e5c6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 802e5ca:	78fa      	ldrb	r2, [r7, #3]
 802e5cc:	429a      	cmp	r2, r3
 802e5ce:	d204      	bcs.n	802e5da <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 802e5d0:	687b      	ldr	r3, [r7, #4]
 802e5d2:	78fa      	ldrb	r2, [r7, #3]
 802e5d4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 802e5d8:	e001      	b.n	802e5de <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 802e5da:	2302      	movs	r3, #2
 802e5dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802e5de:	7bfb      	ldrb	r3, [r7, #15]
}
 802e5e0:	4618      	mov	r0, r3
 802e5e2:	3714      	adds	r7, #20
 802e5e4:	46bd      	mov	sp, r7
 802e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e5ea:	4770      	bx	lr

0802e5ec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 802e5ec:	b480      	push	{r7}
 802e5ee:	b087      	sub	sp, #28
 802e5f0:	af00      	add	r7, sp, #0
 802e5f2:	6078      	str	r0, [r7, #4]
 802e5f4:	4608      	mov	r0, r1
 802e5f6:	4611      	mov	r1, r2
 802e5f8:	461a      	mov	r2, r3
 802e5fa:	4603      	mov	r3, r0
 802e5fc:	70fb      	strb	r3, [r7, #3]
 802e5fe:	460b      	mov	r3, r1
 802e600:	70bb      	strb	r3, [r7, #2]
 802e602:	4613      	mov	r3, r2
 802e604:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 802e606:	2300      	movs	r3, #0
 802e608:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 802e60a:	2300      	movs	r3, #0
 802e60c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 802e60e:	687b      	ldr	r3, [r7, #4]
 802e610:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802e614:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802e616:	e025      	b.n	802e664 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 802e618:	7dfb      	ldrb	r3, [r7, #23]
 802e61a:	221a      	movs	r2, #26
 802e61c:	fb02 f303 	mul.w	r3, r2, r3
 802e620:	3308      	adds	r3, #8
 802e622:	68fa      	ldr	r2, [r7, #12]
 802e624:	4413      	add	r3, r2
 802e626:	3302      	adds	r3, #2
 802e628:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802e62a:	693b      	ldr	r3, [r7, #16]
 802e62c:	795b      	ldrb	r3, [r3, #5]
 802e62e:	78fa      	ldrb	r2, [r7, #3]
 802e630:	429a      	cmp	r2, r3
 802e632:	d002      	beq.n	802e63a <USBH_FindInterface+0x4e>
 802e634:	78fb      	ldrb	r3, [r7, #3]
 802e636:	2bff      	cmp	r3, #255	; 0xff
 802e638:	d111      	bne.n	802e65e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802e63a:	693b      	ldr	r3, [r7, #16]
 802e63c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802e63e:	78ba      	ldrb	r2, [r7, #2]
 802e640:	429a      	cmp	r2, r3
 802e642:	d002      	beq.n	802e64a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802e644:	78bb      	ldrb	r3, [r7, #2]
 802e646:	2bff      	cmp	r3, #255	; 0xff
 802e648:	d109      	bne.n	802e65e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802e64a:	693b      	ldr	r3, [r7, #16]
 802e64c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802e64e:	787a      	ldrb	r2, [r7, #1]
 802e650:	429a      	cmp	r2, r3
 802e652:	d002      	beq.n	802e65a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802e654:	787b      	ldrb	r3, [r7, #1]
 802e656:	2bff      	cmp	r3, #255	; 0xff
 802e658:	d101      	bne.n	802e65e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 802e65a:	7dfb      	ldrb	r3, [r7, #23]
 802e65c:	e006      	b.n	802e66c <USBH_FindInterface+0x80>
    }
    if_ix++;
 802e65e:	7dfb      	ldrb	r3, [r7, #23]
 802e660:	3301      	adds	r3, #1
 802e662:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802e664:	7dfb      	ldrb	r3, [r7, #23]
 802e666:	2b01      	cmp	r3, #1
 802e668:	d9d6      	bls.n	802e618 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 802e66a:	23ff      	movs	r3, #255	; 0xff
}
 802e66c:	4618      	mov	r0, r3
 802e66e:	371c      	adds	r7, #28
 802e670:	46bd      	mov	sp, r7
 802e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e676:	4770      	bx	lr

0802e678 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 802e678:	b580      	push	{r7, lr}
 802e67a:	b082      	sub	sp, #8
 802e67c:	af00      	add	r7, sp, #0
 802e67e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 802e680:	6878      	ldr	r0, [r7, #4]
 802e682:	f00b f9ff 	bl	8039a84 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 802e686:	2101      	movs	r1, #1
 802e688:	6878      	ldr	r0, [r7, #4]
 802e68a:	f00b fb18 	bl	8039cbe <USBH_LL_DriverVBUS>

  return USBH_OK;
 802e68e:	2300      	movs	r3, #0
}
 802e690:	4618      	mov	r0, r3
 802e692:	3708      	adds	r7, #8
 802e694:	46bd      	mov	sp, r7
 802e696:	bd80      	pop	{r7, pc}

0802e698 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 802e698:	b580      	push	{r7, lr}
 802e69a:	b088      	sub	sp, #32
 802e69c:	af04      	add	r7, sp, #16
 802e69e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802e6a0:	2302      	movs	r3, #2
 802e6a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802e6a4:	2300      	movs	r3, #0
 802e6a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 802e6a8:	687b      	ldr	r3, [r7, #4]
 802e6aa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802e6ae:	b2db      	uxtb	r3, r3
 802e6b0:	2b01      	cmp	r3, #1
 802e6b2:	d102      	bne.n	802e6ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802e6b4:	687b      	ldr	r3, [r7, #4]
 802e6b6:	2203      	movs	r2, #3
 802e6b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 802e6ba:	687b      	ldr	r3, [r7, #4]
 802e6bc:	781b      	ldrb	r3, [r3, #0]
 802e6be:	b2db      	uxtb	r3, r3
 802e6c0:	2b0b      	cmp	r3, #11
 802e6c2:	f200 8247 	bhi.w	802eb54 <USBH_Process+0x4bc>
 802e6c6:	a201      	add	r2, pc, #4	; (adr r2, 802e6cc <USBH_Process+0x34>)
 802e6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802e6cc:	0802e6fd 	.word	0x0802e6fd
 802e6d0:	0802e74b 	.word	0x0802e74b
 802e6d4:	0802e7cf 	.word	0x0802e7cf
 802e6d8:	0802ead3 	.word	0x0802ead3
 802e6dc:	0802eb55 	.word	0x0802eb55
 802e6e0:	0802e88f 	.word	0x0802e88f
 802e6e4:	0802ea5d 	.word	0x0802ea5d
 802e6e8:	0802e8e1 	.word	0x0802e8e1
 802e6ec:	0802e91d 	.word	0x0802e91d
 802e6f0:	0802e957 	.word	0x0802e957
 802e6f4:	0802e9b5 	.word	0x0802e9b5
 802e6f8:	0802eabb 	.word	0x0802eabb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 802e6fc:	687b      	ldr	r3, [r7, #4]
 802e6fe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802e702:	b2db      	uxtb	r3, r3
 802e704:	2b00      	cmp	r3, #0
 802e706:	f000 8227 	beq.w	802eb58 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 802e70a:	687b      	ldr	r3, [r7, #4]
 802e70c:	2201      	movs	r2, #1
 802e70e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 802e710:	20c8      	movs	r0, #200	; 0xc8
 802e712:	f00b fb4b 	bl	8039dac <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 802e716:	6878      	ldr	r0, [r7, #4]
 802e718:	f00b fa11 	bl	8039b3e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 802e71c:	687b      	ldr	r3, [r7, #4]
 802e71e:	2200      	movs	r2, #0
 802e720:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 802e724:	687b      	ldr	r3, [r7, #4]
 802e726:	2200      	movs	r2, #0
 802e728:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802e72c:	687b      	ldr	r3, [r7, #4]
 802e72e:	2201      	movs	r2, #1
 802e730:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e734:	687b      	ldr	r3, [r7, #4]
 802e736:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e73a:	687b      	ldr	r3, [r7, #4]
 802e73c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e740:	2200      	movs	r2, #0
 802e742:	4619      	mov	r1, r3
 802e744:	f007 fdaa 	bl	803629c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802e748:	e206      	b.n	802eb58 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 802e74a:	687b      	ldr	r3, [r7, #4]
 802e74c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802e750:	2b01      	cmp	r3, #1
 802e752:	d107      	bne.n	802e764 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 802e754:	687b      	ldr	r3, [r7, #4]
 802e756:	2200      	movs	r2, #0
 802e758:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 802e75c:	687b      	ldr	r3, [r7, #4]
 802e75e:	2202      	movs	r2, #2
 802e760:	701a      	strb	r2, [r3, #0]
 802e762:	e025      	b.n	802e7b0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 802e764:	687b      	ldr	r3, [r7, #4]
 802e766:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802e76a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802e76e:	d914      	bls.n	802e79a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 802e770:	687b      	ldr	r3, [r7, #4]
 802e772:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802e776:	3301      	adds	r3, #1
 802e778:	b2da      	uxtb	r2, r3
 802e77a:	687b      	ldr	r3, [r7, #4]
 802e77c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802e780:	687b      	ldr	r3, [r7, #4]
 802e782:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802e786:	2b03      	cmp	r3, #3
 802e788:	d903      	bls.n	802e792 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 802e78a:	687b      	ldr	r3, [r7, #4]
 802e78c:	220d      	movs	r2, #13
 802e78e:	701a      	strb	r2, [r3, #0]
 802e790:	e00e      	b.n	802e7b0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 802e792:	687b      	ldr	r3, [r7, #4]
 802e794:	2200      	movs	r2, #0
 802e796:	701a      	strb	r2, [r3, #0]
 802e798:	e00a      	b.n	802e7b0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 802e79a:	687b      	ldr	r3, [r7, #4]
 802e79c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802e7a0:	f103 020a 	add.w	r2, r3, #10
 802e7a4:	687b      	ldr	r3, [r7, #4]
 802e7a6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 802e7aa:	200a      	movs	r0, #10
 802e7ac:	f00b fafe 	bl	8039dac <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802e7b0:	687b      	ldr	r3, [r7, #4]
 802e7b2:	2201      	movs	r2, #1
 802e7b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e7b8:	687b      	ldr	r3, [r7, #4]
 802e7ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e7be:	687b      	ldr	r3, [r7, #4]
 802e7c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e7c4:	2200      	movs	r2, #0
 802e7c6:	4619      	mov	r1, r3
 802e7c8:	f007 fd68 	bl	803629c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802e7cc:	e1cb      	b.n	802eb66 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802e7ce:	687b      	ldr	r3, [r7, #4]
 802e7d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802e7d4:	2b00      	cmp	r3, #0
 802e7d6:	d005      	beq.n	802e7e4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 802e7d8:	687b      	ldr	r3, [r7, #4]
 802e7da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802e7de:	2104      	movs	r1, #4
 802e7e0:	6878      	ldr	r0, [r7, #4]
 802e7e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 802e7e4:	2064      	movs	r0, #100	; 0x64
 802e7e6:	f00b fae1 	bl	8039dac <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 802e7ea:	6878      	ldr	r0, [r7, #4]
 802e7ec:	f00b f980 	bl	8039af0 <USBH_LL_GetSpeed>
 802e7f0:	4603      	mov	r3, r0
 802e7f2:	461a      	mov	r2, r3
 802e7f4:	687b      	ldr	r3, [r7, #4]
 802e7f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802e7fa:	687b      	ldr	r3, [r7, #4]
 802e7fc:	2205      	movs	r2, #5
 802e7fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 802e800:	2100      	movs	r1, #0
 802e802:	6878      	ldr	r0, [r7, #4]
 802e804:	f001 fc19 	bl	803003a <USBH_AllocPipe>
 802e808:	4603      	mov	r3, r0
 802e80a:	461a      	mov	r2, r3
 802e80c:	687b      	ldr	r3, [r7, #4]
 802e80e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 802e810:	2180      	movs	r1, #128	; 0x80
 802e812:	6878      	ldr	r0, [r7, #4]
 802e814:	f001 fc11 	bl	803003a <USBH_AllocPipe>
 802e818:	4603      	mov	r3, r0
 802e81a:	461a      	mov	r2, r3
 802e81c:	687b      	ldr	r3, [r7, #4]
 802e81e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802e820:	687b      	ldr	r3, [r7, #4]
 802e822:	7919      	ldrb	r1, [r3, #4]
 802e824:	687b      	ldr	r3, [r7, #4]
 802e826:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802e82a:	687b      	ldr	r3, [r7, #4]
 802e82c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802e830:	687a      	ldr	r2, [r7, #4]
 802e832:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802e834:	b292      	uxth	r2, r2
 802e836:	9202      	str	r2, [sp, #8]
 802e838:	2200      	movs	r2, #0
 802e83a:	9201      	str	r2, [sp, #4]
 802e83c:	9300      	str	r3, [sp, #0]
 802e83e:	4603      	mov	r3, r0
 802e840:	2280      	movs	r2, #128	; 0x80
 802e842:	6878      	ldr	r0, [r7, #4]
 802e844:	f001 fbca 	bl	802ffdc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802e848:	687b      	ldr	r3, [r7, #4]
 802e84a:	7959      	ldrb	r1, [r3, #5]
 802e84c:	687b      	ldr	r3, [r7, #4]
 802e84e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802e852:	687b      	ldr	r3, [r7, #4]
 802e854:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802e858:	687a      	ldr	r2, [r7, #4]
 802e85a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802e85c:	b292      	uxth	r2, r2
 802e85e:	9202      	str	r2, [sp, #8]
 802e860:	2200      	movs	r2, #0
 802e862:	9201      	str	r2, [sp, #4]
 802e864:	9300      	str	r3, [sp, #0]
 802e866:	4603      	mov	r3, r0
 802e868:	2200      	movs	r2, #0
 802e86a:	6878      	ldr	r0, [r7, #4]
 802e86c:	f001 fbb6 	bl	802ffdc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802e870:	687b      	ldr	r3, [r7, #4]
 802e872:	2201      	movs	r2, #1
 802e874:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e878:	687b      	ldr	r3, [r7, #4]
 802e87a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e87e:	687b      	ldr	r3, [r7, #4]
 802e880:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e884:	2200      	movs	r2, #0
 802e886:	4619      	mov	r1, r3
 802e888:	f007 fd08 	bl	803629c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802e88c:	e16b      	b.n	802eb66 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802e88e:	6878      	ldr	r0, [r7, #4]
 802e890:	f000 f96e 	bl	802eb70 <USBH_HandleEnum>
 802e894:	4603      	mov	r3, r0
 802e896:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 802e898:	7bbb      	ldrb	r3, [r7, #14]
 802e89a:	b2db      	uxtb	r3, r3
 802e89c:	2b00      	cmp	r3, #0
 802e89e:	f040 815d 	bne.w	802eb5c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802e8a2:	687b      	ldr	r3, [r7, #4]
 802e8a4:	2200      	movs	r2, #0
 802e8a6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 802e8aa:	687b      	ldr	r3, [r7, #4]
 802e8ac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802e8b0:	2b01      	cmp	r3, #1
 802e8b2:	d103      	bne.n	802e8bc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 802e8b4:	687b      	ldr	r3, [r7, #4]
 802e8b6:	2208      	movs	r2, #8
 802e8b8:	701a      	strb	r2, [r3, #0]
 802e8ba:	e002      	b.n	802e8c2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 802e8bc:	687b      	ldr	r3, [r7, #4]
 802e8be:	2207      	movs	r2, #7
 802e8c0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802e8c2:	687b      	ldr	r3, [r7, #4]
 802e8c4:	2205      	movs	r2, #5
 802e8c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e8ca:	687b      	ldr	r3, [r7, #4]
 802e8cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e8d0:	687b      	ldr	r3, [r7, #4]
 802e8d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e8d6:	2200      	movs	r2, #0
 802e8d8:	4619      	mov	r1, r3
 802e8da:	f007 fcdf 	bl	803629c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802e8de:	e13d      	b.n	802eb5c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 802e8e0:	687b      	ldr	r3, [r7, #4]
 802e8e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802e8e6:	2b00      	cmp	r3, #0
 802e8e8:	f000 813a 	beq.w	802eb60 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 802e8ec:	687b      	ldr	r3, [r7, #4]
 802e8ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802e8f2:	2101      	movs	r1, #1
 802e8f4:	6878      	ldr	r0, [r7, #4]
 802e8f6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 802e8f8:	687b      	ldr	r3, [r7, #4]
 802e8fa:	2208      	movs	r2, #8
 802e8fc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802e8fe:	687b      	ldr	r3, [r7, #4]
 802e900:	2205      	movs	r2, #5
 802e902:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e906:	687b      	ldr	r3, [r7, #4]
 802e908:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e90c:	687b      	ldr	r3, [r7, #4]
 802e90e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e912:	2200      	movs	r2, #0
 802e914:	4619      	mov	r1, r3
 802e916:	f007 fcc1 	bl	803629c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 802e91a:	e121      	b.n	802eb60 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 802e91c:	687b      	ldr	r3, [r7, #4]
 802e91e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 802e922:	b29b      	uxth	r3, r3
 802e924:	4619      	mov	r1, r3
 802e926:	6878      	ldr	r0, [r7, #4]
 802e928:	f000 fd00 	bl	802f32c <USBH_SetCfg>
 802e92c:	4603      	mov	r3, r0
 802e92e:	2b00      	cmp	r3, #0
 802e930:	d102      	bne.n	802e938 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802e932:	687b      	ldr	r3, [r7, #4]
 802e934:	2209      	movs	r2, #9
 802e936:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802e938:	687b      	ldr	r3, [r7, #4]
 802e93a:	2201      	movs	r2, #1
 802e93c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e940:	687b      	ldr	r3, [r7, #4]
 802e942:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e946:	687b      	ldr	r3, [r7, #4]
 802e948:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e94c:	2200      	movs	r2, #0
 802e94e:	4619      	mov	r1, r3
 802e950:	f007 fca4 	bl	803629c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802e954:	e107      	b.n	802eb66 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 802e956:	687b      	ldr	r3, [r7, #4]
 802e958:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 802e95c:	f003 0320 	and.w	r3, r3, #32
 802e960:	2b00      	cmp	r3, #0
 802e962:	d015      	beq.n	802e990 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 802e964:	2101      	movs	r1, #1
 802e966:	6878      	ldr	r0, [r7, #4]
 802e968:	f000 fd03 	bl	802f372 <USBH_SetFeature>
 802e96c:	4603      	mov	r3, r0
 802e96e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802e970:	7bbb      	ldrb	r3, [r7, #14]
 802e972:	b2db      	uxtb	r3, r3
 802e974:	2b00      	cmp	r3, #0
 802e976:	d103      	bne.n	802e980 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802e978:	687b      	ldr	r3, [r7, #4]
 802e97a:	220a      	movs	r2, #10
 802e97c:	701a      	strb	r2, [r3, #0]
 802e97e:	e00a      	b.n	802e996 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 802e980:	7bbb      	ldrb	r3, [r7, #14]
 802e982:	b2db      	uxtb	r3, r3
 802e984:	2b03      	cmp	r3, #3
 802e986:	d106      	bne.n	802e996 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 802e988:	687b      	ldr	r3, [r7, #4]
 802e98a:	220a      	movs	r2, #10
 802e98c:	701a      	strb	r2, [r3, #0]
 802e98e:	e002      	b.n	802e996 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 802e990:	687b      	ldr	r3, [r7, #4]
 802e992:	220a      	movs	r2, #10
 802e994:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802e996:	687b      	ldr	r3, [r7, #4]
 802e998:	2201      	movs	r2, #1
 802e99a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802e99e:	687b      	ldr	r3, [r7, #4]
 802e9a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802e9a4:	687b      	ldr	r3, [r7, #4]
 802e9a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802e9aa:	2200      	movs	r2, #0
 802e9ac:	4619      	mov	r1, r3
 802e9ae:	f007 fc75 	bl	803629c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802e9b2:	e0d8      	b.n	802eb66 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802e9b4:	687b      	ldr	r3, [r7, #4]
 802e9b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802e9ba:	2b00      	cmp	r3, #0
 802e9bc:	d03f      	beq.n	802ea3e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 802e9be:	687b      	ldr	r3, [r7, #4]
 802e9c0:	2200      	movs	r2, #0
 802e9c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802e9c6:	2300      	movs	r3, #0
 802e9c8:	73fb      	strb	r3, [r7, #15]
 802e9ca:	e016      	b.n	802e9fa <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 802e9cc:	7bfa      	ldrb	r2, [r7, #15]
 802e9ce:	687b      	ldr	r3, [r7, #4]
 802e9d0:	32de      	adds	r2, #222	; 0xde
 802e9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e9d6:	791a      	ldrb	r2, [r3, #4]
 802e9d8:	687b      	ldr	r3, [r7, #4]
 802e9da:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 802e9de:	429a      	cmp	r2, r3
 802e9e0:	d108      	bne.n	802e9f4 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 802e9e2:	7bfa      	ldrb	r2, [r7, #15]
 802e9e4:	687b      	ldr	r3, [r7, #4]
 802e9e6:	32de      	adds	r2, #222	; 0xde
 802e9e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802e9ec:	687b      	ldr	r3, [r7, #4]
 802e9ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 802e9f2:	e005      	b.n	802ea00 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802e9f4:	7bfb      	ldrb	r3, [r7, #15]
 802e9f6:	3301      	adds	r3, #1
 802e9f8:	73fb      	strb	r3, [r7, #15]
 802e9fa:	7bfb      	ldrb	r3, [r7, #15]
 802e9fc:	2b00      	cmp	r3, #0
 802e9fe:	d0e5      	beq.n	802e9cc <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 802ea00:	687b      	ldr	r3, [r7, #4]
 802ea02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ea06:	2b00      	cmp	r3, #0
 802ea08:	d016      	beq.n	802ea38 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 802ea0a:	687b      	ldr	r3, [r7, #4]
 802ea0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ea10:	689b      	ldr	r3, [r3, #8]
 802ea12:	6878      	ldr	r0, [r7, #4]
 802ea14:	4798      	blx	r3
 802ea16:	4603      	mov	r3, r0
 802ea18:	2b00      	cmp	r3, #0
 802ea1a:	d109      	bne.n	802ea30 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 802ea1c:	687b      	ldr	r3, [r7, #4]
 802ea1e:	2206      	movs	r2, #6
 802ea20:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 802ea22:	687b      	ldr	r3, [r7, #4]
 802ea24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802ea28:	2103      	movs	r1, #3
 802ea2a:	6878      	ldr	r0, [r7, #4]
 802ea2c:	4798      	blx	r3
 802ea2e:	e006      	b.n	802ea3e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 802ea30:	687b      	ldr	r3, [r7, #4]
 802ea32:	220d      	movs	r2, #13
 802ea34:	701a      	strb	r2, [r3, #0]
 802ea36:	e002      	b.n	802ea3e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 802ea38:	687b      	ldr	r3, [r7, #4]
 802ea3a:	220d      	movs	r2, #13
 802ea3c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802ea3e:	687b      	ldr	r3, [r7, #4]
 802ea40:	2205      	movs	r2, #5
 802ea42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802ea46:	687b      	ldr	r3, [r7, #4]
 802ea48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802ea4c:	687b      	ldr	r3, [r7, #4]
 802ea4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802ea52:	2200      	movs	r2, #0
 802ea54:	4619      	mov	r1, r3
 802ea56:	f007 fc21 	bl	803629c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802ea5a:	e084      	b.n	802eb66 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 802ea5c:	687b      	ldr	r3, [r7, #4]
 802ea5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ea62:	2b00      	cmp	r3, #0
 802ea64:	d017      	beq.n	802ea96 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 802ea66:	687b      	ldr	r3, [r7, #4]
 802ea68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ea6c:	691b      	ldr	r3, [r3, #16]
 802ea6e:	6878      	ldr	r0, [r7, #4]
 802ea70:	4798      	blx	r3
 802ea72:	4603      	mov	r3, r0
 802ea74:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802ea76:	7bbb      	ldrb	r3, [r7, #14]
 802ea78:	b2db      	uxtb	r3, r3
 802ea7a:	2b00      	cmp	r3, #0
 802ea7c:	d103      	bne.n	802ea86 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 802ea7e:	687b      	ldr	r3, [r7, #4]
 802ea80:	220b      	movs	r2, #11
 802ea82:	701a      	strb	r2, [r3, #0]
 802ea84:	e00a      	b.n	802ea9c <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 802ea86:	7bbb      	ldrb	r3, [r7, #14]
 802ea88:	b2db      	uxtb	r3, r3
 802ea8a:	2b02      	cmp	r3, #2
 802ea8c:	d106      	bne.n	802ea9c <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 802ea8e:	687b      	ldr	r3, [r7, #4]
 802ea90:	220d      	movs	r2, #13
 802ea92:	701a      	strb	r2, [r3, #0]
 802ea94:	e002      	b.n	802ea9c <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 802ea96:	687b      	ldr	r3, [r7, #4]
 802ea98:	220d      	movs	r2, #13
 802ea9a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802ea9c:	687b      	ldr	r3, [r7, #4]
 802ea9e:	2205      	movs	r2, #5
 802eaa0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802eaa4:	687b      	ldr	r3, [r7, #4]
 802eaa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802eaaa:	687b      	ldr	r3, [r7, #4]
 802eaac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802eab0:	2200      	movs	r2, #0
 802eab2:	4619      	mov	r1, r3
 802eab4:	f007 fbf2 	bl	803629c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802eab8:	e055      	b.n	802eb66 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 802eaba:	687b      	ldr	r3, [r7, #4]
 802eabc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802eac0:	2b00      	cmp	r3, #0
 802eac2:	d04f      	beq.n	802eb64 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 802eac4:	687b      	ldr	r3, [r7, #4]
 802eac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802eaca:	695b      	ldr	r3, [r3, #20]
 802eacc:	6878      	ldr	r0, [r7, #4]
 802eace:	4798      	blx	r3
      }
      break;
 802ead0:	e048      	b.n	802eb64 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 802ead2:	687b      	ldr	r3, [r7, #4]
 802ead4:	2200      	movs	r2, #0
 802ead6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 802eada:	6878      	ldr	r0, [r7, #4]
 802eadc:	f7ff fcec 	bl	802e4b8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 802eae0:	687b      	ldr	r3, [r7, #4]
 802eae2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802eae6:	2b00      	cmp	r3, #0
 802eae8:	d009      	beq.n	802eafe <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 802eaea:	687b      	ldr	r3, [r7, #4]
 802eaec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802eaf0:	68db      	ldr	r3, [r3, #12]
 802eaf2:	6878      	ldr	r0, [r7, #4]
 802eaf4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 802eaf6:	687b      	ldr	r3, [r7, #4]
 802eaf8:	2200      	movs	r2, #0
 802eafa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 802eafe:	687b      	ldr	r3, [r7, #4]
 802eb00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802eb04:	2b00      	cmp	r3, #0
 802eb06:	d005      	beq.n	802eb14 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 802eb08:	687b      	ldr	r3, [r7, #4]
 802eb0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802eb0e:	2105      	movs	r1, #5
 802eb10:	6878      	ldr	r0, [r7, #4]
 802eb12:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 802eb14:	687b      	ldr	r3, [r7, #4]
 802eb16:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 802eb1a:	b2db      	uxtb	r3, r3
 802eb1c:	2b01      	cmp	r3, #1
 802eb1e:	d107      	bne.n	802eb30 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 802eb20:	687b      	ldr	r3, [r7, #4]
 802eb22:	2200      	movs	r2, #0
 802eb24:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 802eb28:	6878      	ldr	r0, [r7, #4]
 802eb2a:	f7ff fda5 	bl	802e678 <USBH_Start>
 802eb2e:	e002      	b.n	802eb36 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 802eb30:	6878      	ldr	r0, [r7, #4]
 802eb32:	f00a ffa7 	bl	8039a84 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802eb36:	687b      	ldr	r3, [r7, #4]
 802eb38:	2201      	movs	r2, #1
 802eb3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802eb3e:	687b      	ldr	r3, [r7, #4]
 802eb40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802eb44:	687b      	ldr	r3, [r7, #4]
 802eb46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802eb4a:	2200      	movs	r2, #0
 802eb4c:	4619      	mov	r1, r3
 802eb4e:	f007 fba5 	bl	803629c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802eb52:	e008      	b.n	802eb66 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 802eb54:	bf00      	nop
 802eb56:	e006      	b.n	802eb66 <USBH_Process+0x4ce>
      break;
 802eb58:	bf00      	nop
 802eb5a:	e004      	b.n	802eb66 <USBH_Process+0x4ce>
      break;
 802eb5c:	bf00      	nop
 802eb5e:	e002      	b.n	802eb66 <USBH_Process+0x4ce>
    break;
 802eb60:	bf00      	nop
 802eb62:	e000      	b.n	802eb66 <USBH_Process+0x4ce>
      break;
 802eb64:	bf00      	nop
  }
  return USBH_OK;
 802eb66:	2300      	movs	r3, #0
}
 802eb68:	4618      	mov	r0, r3
 802eb6a:	3710      	adds	r7, #16
 802eb6c:	46bd      	mov	sp, r7
 802eb6e:	bd80      	pop	{r7, pc}

0802eb70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 802eb70:	b580      	push	{r7, lr}
 802eb72:	b088      	sub	sp, #32
 802eb74:	af04      	add	r7, sp, #16
 802eb76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 802eb78:	2301      	movs	r3, #1
 802eb7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 802eb7c:	2301      	movs	r3, #1
 802eb7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 802eb80:	687b      	ldr	r3, [r7, #4]
 802eb82:	785b      	ldrb	r3, [r3, #1]
 802eb84:	2b07      	cmp	r3, #7
 802eb86:	f200 8208 	bhi.w	802ef9a <USBH_HandleEnum+0x42a>
 802eb8a:	a201      	add	r2, pc, #4	; (adr r2, 802eb90 <USBH_HandleEnum+0x20>)
 802eb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802eb90:	0802ebb1 	.word	0x0802ebb1
 802eb94:	0802ec6f 	.word	0x0802ec6f
 802eb98:	0802ecd9 	.word	0x0802ecd9
 802eb9c:	0802ed67 	.word	0x0802ed67
 802eba0:	0802edd1 	.word	0x0802edd1
 802eba4:	0802ee41 	.word	0x0802ee41
 802eba8:	0802eedd 	.word	0x0802eedd
 802ebac:	0802ef5b 	.word	0x0802ef5b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802ebb0:	2108      	movs	r1, #8
 802ebb2:	6878      	ldr	r0, [r7, #4]
 802ebb4:	f000 faea 	bl	802f18c <USBH_Get_DevDesc>
 802ebb8:	4603      	mov	r3, r0
 802ebba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ebbc:	7bbb      	ldrb	r3, [r7, #14]
 802ebbe:	2b00      	cmp	r3, #0
 802ebc0:	d130      	bne.n	802ec24 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802ebc2:	687b      	ldr	r3, [r7, #4]
 802ebc4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 802ebc8:	687b      	ldr	r3, [r7, #4]
 802ebca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 802ebcc:	687b      	ldr	r3, [r7, #4]
 802ebce:	2201      	movs	r2, #1
 802ebd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802ebd2:	687b      	ldr	r3, [r7, #4]
 802ebd4:	7919      	ldrb	r1, [r3, #4]
 802ebd6:	687b      	ldr	r3, [r7, #4]
 802ebd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ebdc:	687b      	ldr	r3, [r7, #4]
 802ebde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802ebe2:	687a      	ldr	r2, [r7, #4]
 802ebe4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802ebe6:	b292      	uxth	r2, r2
 802ebe8:	9202      	str	r2, [sp, #8]
 802ebea:	2200      	movs	r2, #0
 802ebec:	9201      	str	r2, [sp, #4]
 802ebee:	9300      	str	r3, [sp, #0]
 802ebf0:	4603      	mov	r3, r0
 802ebf2:	2280      	movs	r2, #128	; 0x80
 802ebf4:	6878      	ldr	r0, [r7, #4]
 802ebf6:	f001 f9f1 	bl	802ffdc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802ebfa:	687b      	ldr	r3, [r7, #4]
 802ebfc:	7959      	ldrb	r1, [r3, #5]
 802ebfe:	687b      	ldr	r3, [r7, #4]
 802ec00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ec04:	687b      	ldr	r3, [r7, #4]
 802ec06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802ec0a:	687a      	ldr	r2, [r7, #4]
 802ec0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802ec0e:	b292      	uxth	r2, r2
 802ec10:	9202      	str	r2, [sp, #8]
 802ec12:	2200      	movs	r2, #0
 802ec14:	9201      	str	r2, [sp, #4]
 802ec16:	9300      	str	r3, [sp, #0]
 802ec18:	4603      	mov	r3, r0
 802ec1a:	2200      	movs	r2, #0
 802ec1c:	6878      	ldr	r0, [r7, #4]
 802ec1e:	f001 f9dd 	bl	802ffdc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802ec22:	e1bc      	b.n	802ef9e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ec24:	7bbb      	ldrb	r3, [r7, #14]
 802ec26:	2b03      	cmp	r3, #3
 802ec28:	f040 81b9 	bne.w	802ef9e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 802ec2c:	687b      	ldr	r3, [r7, #4]
 802ec2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ec32:	3301      	adds	r3, #1
 802ec34:	b2da      	uxtb	r2, r3
 802ec36:	687b      	ldr	r3, [r7, #4]
 802ec38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802ec3c:	687b      	ldr	r3, [r7, #4]
 802ec3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ec42:	2b03      	cmp	r3, #3
 802ec44:	d903      	bls.n	802ec4e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 802ec46:	687b      	ldr	r3, [r7, #4]
 802ec48:	220d      	movs	r2, #13
 802ec4a:	701a      	strb	r2, [r3, #0]
      break;
 802ec4c:	e1a7      	b.n	802ef9e <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ec4e:	687b      	ldr	r3, [r7, #4]
 802ec50:	795b      	ldrb	r3, [r3, #5]
 802ec52:	4619      	mov	r1, r3
 802ec54:	6878      	ldr	r0, [r7, #4]
 802ec56:	f001 fa11 	bl	803007c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ec5a:	687b      	ldr	r3, [r7, #4]
 802ec5c:	791b      	ldrb	r3, [r3, #4]
 802ec5e:	4619      	mov	r1, r3
 802ec60:	6878      	ldr	r0, [r7, #4]
 802ec62:	f001 fa0b 	bl	803007c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 802ec66:	687b      	ldr	r3, [r7, #4]
 802ec68:	2200      	movs	r2, #0
 802ec6a:	701a      	strb	r2, [r3, #0]
      break;
 802ec6c:	e197      	b.n	802ef9e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 802ec6e:	2112      	movs	r1, #18
 802ec70:	6878      	ldr	r0, [r7, #4]
 802ec72:	f000 fa8b 	bl	802f18c <USBH_Get_DevDesc>
 802ec76:	4603      	mov	r3, r0
 802ec78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ec7a:	7bbb      	ldrb	r3, [r7, #14]
 802ec7c:	2b00      	cmp	r3, #0
 802ec7e:	d103      	bne.n	802ec88 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 802ec80:	687b      	ldr	r3, [r7, #4]
 802ec82:	2202      	movs	r2, #2
 802ec84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802ec86:	e18c      	b.n	802efa2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ec88:	7bbb      	ldrb	r3, [r7, #14]
 802ec8a:	2b03      	cmp	r3, #3
 802ec8c:	f040 8189 	bne.w	802efa2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 802ec90:	687b      	ldr	r3, [r7, #4]
 802ec92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ec96:	3301      	adds	r3, #1
 802ec98:	b2da      	uxtb	r2, r3
 802ec9a:	687b      	ldr	r3, [r7, #4]
 802ec9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802eca0:	687b      	ldr	r3, [r7, #4]
 802eca2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802eca6:	2b03      	cmp	r3, #3
 802eca8:	d903      	bls.n	802ecb2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 802ecaa:	687b      	ldr	r3, [r7, #4]
 802ecac:	220d      	movs	r2, #13
 802ecae:	701a      	strb	r2, [r3, #0]
      break;
 802ecb0:	e177      	b.n	802efa2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ecb2:	687b      	ldr	r3, [r7, #4]
 802ecb4:	795b      	ldrb	r3, [r3, #5]
 802ecb6:	4619      	mov	r1, r3
 802ecb8:	6878      	ldr	r0, [r7, #4]
 802ecba:	f001 f9df 	bl	803007c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ecbe:	687b      	ldr	r3, [r7, #4]
 802ecc0:	791b      	ldrb	r3, [r3, #4]
 802ecc2:	4619      	mov	r1, r3
 802ecc4:	6878      	ldr	r0, [r7, #4]
 802ecc6:	f001 f9d9 	bl	803007c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802ecca:	687b      	ldr	r3, [r7, #4]
 802eccc:	2200      	movs	r2, #0
 802ecce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802ecd0:	687b      	ldr	r3, [r7, #4]
 802ecd2:	2200      	movs	r2, #0
 802ecd4:	701a      	strb	r2, [r3, #0]
      break;
 802ecd6:	e164      	b.n	802efa2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 802ecd8:	2101      	movs	r1, #1
 802ecda:	6878      	ldr	r0, [r7, #4]
 802ecdc:	f000 fb02 	bl	802f2e4 <USBH_SetAddress>
 802ece0:	4603      	mov	r3, r0
 802ece2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ece4:	7bbb      	ldrb	r3, [r7, #14]
 802ece6:	2b00      	cmp	r3, #0
 802ece8:	d132      	bne.n	802ed50 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 802ecea:	2002      	movs	r0, #2
 802ecec:	f00b f85e 	bl	8039dac <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 802ecf0:	687b      	ldr	r3, [r7, #4]
 802ecf2:	2201      	movs	r2, #1
 802ecf4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 802ecf8:	687b      	ldr	r3, [r7, #4]
 802ecfa:	2203      	movs	r2, #3
 802ecfc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802ecfe:	687b      	ldr	r3, [r7, #4]
 802ed00:	7919      	ldrb	r1, [r3, #4]
 802ed02:	687b      	ldr	r3, [r7, #4]
 802ed04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ed08:	687b      	ldr	r3, [r7, #4]
 802ed0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802ed0e:	687a      	ldr	r2, [r7, #4]
 802ed10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802ed12:	b292      	uxth	r2, r2
 802ed14:	9202      	str	r2, [sp, #8]
 802ed16:	2200      	movs	r2, #0
 802ed18:	9201      	str	r2, [sp, #4]
 802ed1a:	9300      	str	r3, [sp, #0]
 802ed1c:	4603      	mov	r3, r0
 802ed1e:	2280      	movs	r2, #128	; 0x80
 802ed20:	6878      	ldr	r0, [r7, #4]
 802ed22:	f001 f95b 	bl	802ffdc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802ed26:	687b      	ldr	r3, [r7, #4]
 802ed28:	7959      	ldrb	r1, [r3, #5]
 802ed2a:	687b      	ldr	r3, [r7, #4]
 802ed2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ed30:	687b      	ldr	r3, [r7, #4]
 802ed32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802ed36:	687a      	ldr	r2, [r7, #4]
 802ed38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802ed3a:	b292      	uxth	r2, r2
 802ed3c:	9202      	str	r2, [sp, #8]
 802ed3e:	2200      	movs	r2, #0
 802ed40:	9201      	str	r2, [sp, #4]
 802ed42:	9300      	str	r3, [sp, #0]
 802ed44:	4603      	mov	r3, r0
 802ed46:	2200      	movs	r2, #0
 802ed48:	6878      	ldr	r0, [r7, #4]
 802ed4a:	f001 f947 	bl	802ffdc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802ed4e:	e12a      	b.n	802efa6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ed50:	7bbb      	ldrb	r3, [r7, #14]
 802ed52:	2b03      	cmp	r3, #3
 802ed54:	f040 8127 	bne.w	802efa6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 802ed58:	687b      	ldr	r3, [r7, #4]
 802ed5a:	220d      	movs	r2, #13
 802ed5c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 802ed5e:	687b      	ldr	r3, [r7, #4]
 802ed60:	2200      	movs	r2, #0
 802ed62:	705a      	strb	r2, [r3, #1]
      break;
 802ed64:	e11f      	b.n	802efa6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 802ed66:	2109      	movs	r1, #9
 802ed68:	6878      	ldr	r0, [r7, #4]
 802ed6a:	f000 fa37 	bl	802f1dc <USBH_Get_CfgDesc>
 802ed6e:	4603      	mov	r3, r0
 802ed70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ed72:	7bbb      	ldrb	r3, [r7, #14]
 802ed74:	2b00      	cmp	r3, #0
 802ed76:	d103      	bne.n	802ed80 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 802ed78:	687b      	ldr	r3, [r7, #4]
 802ed7a:	2204      	movs	r2, #4
 802ed7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802ed7e:	e114      	b.n	802efaa <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ed80:	7bbb      	ldrb	r3, [r7, #14]
 802ed82:	2b03      	cmp	r3, #3
 802ed84:	f040 8111 	bne.w	802efaa <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 802ed88:	687b      	ldr	r3, [r7, #4]
 802ed8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ed8e:	3301      	adds	r3, #1
 802ed90:	b2da      	uxtb	r2, r3
 802ed92:	687b      	ldr	r3, [r7, #4]
 802ed94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802ed98:	687b      	ldr	r3, [r7, #4]
 802ed9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ed9e:	2b03      	cmp	r3, #3
 802eda0:	d903      	bls.n	802edaa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 802eda2:	687b      	ldr	r3, [r7, #4]
 802eda4:	220d      	movs	r2, #13
 802eda6:	701a      	strb	r2, [r3, #0]
      break;
 802eda8:	e0ff      	b.n	802efaa <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802edaa:	687b      	ldr	r3, [r7, #4]
 802edac:	795b      	ldrb	r3, [r3, #5]
 802edae:	4619      	mov	r1, r3
 802edb0:	6878      	ldr	r0, [r7, #4]
 802edb2:	f001 f963 	bl	803007c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802edb6:	687b      	ldr	r3, [r7, #4]
 802edb8:	791b      	ldrb	r3, [r3, #4]
 802edba:	4619      	mov	r1, r3
 802edbc:	6878      	ldr	r0, [r7, #4]
 802edbe:	f001 f95d 	bl	803007c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802edc2:	687b      	ldr	r3, [r7, #4]
 802edc4:	2200      	movs	r2, #0
 802edc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802edc8:	687b      	ldr	r3, [r7, #4]
 802edca:	2200      	movs	r2, #0
 802edcc:	701a      	strb	r2, [r3, #0]
      break;
 802edce:	e0ec      	b.n	802efaa <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 802edd0:	687b      	ldr	r3, [r7, #4]
 802edd2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 802edd6:	4619      	mov	r1, r3
 802edd8:	6878      	ldr	r0, [r7, #4]
 802edda:	f000 f9ff 	bl	802f1dc <USBH_Get_CfgDesc>
 802edde:	4603      	mov	r3, r0
 802ede0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ede2:	7bbb      	ldrb	r3, [r7, #14]
 802ede4:	2b00      	cmp	r3, #0
 802ede6:	d103      	bne.n	802edf0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802ede8:	687b      	ldr	r3, [r7, #4]
 802edea:	2205      	movs	r2, #5
 802edec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802edee:	e0de      	b.n	802efae <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802edf0:	7bbb      	ldrb	r3, [r7, #14]
 802edf2:	2b03      	cmp	r3, #3
 802edf4:	f040 80db 	bne.w	802efae <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 802edf8:	687b      	ldr	r3, [r7, #4]
 802edfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802edfe:	3301      	adds	r3, #1
 802ee00:	b2da      	uxtb	r2, r3
 802ee02:	687b      	ldr	r3, [r7, #4]
 802ee04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802ee08:	687b      	ldr	r3, [r7, #4]
 802ee0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ee0e:	2b03      	cmp	r3, #3
 802ee10:	d903      	bls.n	802ee1a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 802ee12:	687b      	ldr	r3, [r7, #4]
 802ee14:	220d      	movs	r2, #13
 802ee16:	701a      	strb	r2, [r3, #0]
      break;
 802ee18:	e0c9      	b.n	802efae <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ee1a:	687b      	ldr	r3, [r7, #4]
 802ee1c:	795b      	ldrb	r3, [r3, #5]
 802ee1e:	4619      	mov	r1, r3
 802ee20:	6878      	ldr	r0, [r7, #4]
 802ee22:	f001 f92b 	bl	803007c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ee26:	687b      	ldr	r3, [r7, #4]
 802ee28:	791b      	ldrb	r3, [r3, #4]
 802ee2a:	4619      	mov	r1, r3
 802ee2c:	6878      	ldr	r0, [r7, #4]
 802ee2e:	f001 f925 	bl	803007c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802ee32:	687b      	ldr	r3, [r7, #4]
 802ee34:	2200      	movs	r2, #0
 802ee36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802ee38:	687b      	ldr	r3, [r7, #4]
 802ee3a:	2200      	movs	r2, #0
 802ee3c:	701a      	strb	r2, [r3, #0]
      break;
 802ee3e:	e0b6      	b.n	802efae <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 802ee40:	687b      	ldr	r3, [r7, #4]
 802ee42:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 802ee46:	2b00      	cmp	r3, #0
 802ee48:	d036      	beq.n	802eeb8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802ee4a:	687b      	ldr	r3, [r7, #4]
 802ee4c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 802ee50:	687b      	ldr	r3, [r7, #4]
 802ee52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802ee56:	23ff      	movs	r3, #255	; 0xff
 802ee58:	6878      	ldr	r0, [r7, #4]
 802ee5a:	f000 f9e3 	bl	802f224 <USBH_Get_StringDesc>
 802ee5e:	4603      	mov	r3, r0
 802ee60:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802ee62:	7bbb      	ldrb	r3, [r7, #14]
 802ee64:	2b00      	cmp	r3, #0
 802ee66:	d111      	bne.n	802ee8c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802ee68:	687b      	ldr	r3, [r7, #4]
 802ee6a:	2206      	movs	r2, #6
 802ee6c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802ee6e:	687b      	ldr	r3, [r7, #4]
 802ee70:	2205      	movs	r2, #5
 802ee72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802ee76:	687b      	ldr	r3, [r7, #4]
 802ee78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802ee7c:	687b      	ldr	r3, [r7, #4]
 802ee7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802ee82:	2200      	movs	r2, #0
 802ee84:	4619      	mov	r1, r3
 802ee86:	f007 fa09 	bl	803629c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802ee8a:	e092      	b.n	802efb2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ee8c:	7bbb      	ldrb	r3, [r7, #14]
 802ee8e:	2b03      	cmp	r3, #3
 802ee90:	f040 808f 	bne.w	802efb2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802ee94:	687b      	ldr	r3, [r7, #4]
 802ee96:	2206      	movs	r2, #6
 802ee98:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802ee9a:	687b      	ldr	r3, [r7, #4]
 802ee9c:	2205      	movs	r2, #5
 802ee9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802eea2:	687b      	ldr	r3, [r7, #4]
 802eea4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802eea8:	687b      	ldr	r3, [r7, #4]
 802eeaa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802eeae:	2200      	movs	r2, #0
 802eeb0:	4619      	mov	r1, r3
 802eeb2:	f007 f9f3 	bl	803629c <osMessagePut>
      break;
 802eeb6:	e07c      	b.n	802efb2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802eeb8:	687b      	ldr	r3, [r7, #4]
 802eeba:	2206      	movs	r2, #6
 802eebc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802eebe:	687b      	ldr	r3, [r7, #4]
 802eec0:	2205      	movs	r2, #5
 802eec2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802eec6:	687b      	ldr	r3, [r7, #4]
 802eec8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802eecc:	687b      	ldr	r3, [r7, #4]
 802eece:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802eed2:	2200      	movs	r2, #0
 802eed4:	4619      	mov	r1, r3
 802eed6:	f007 f9e1 	bl	803629c <osMessagePut>
      break;
 802eeda:	e06a      	b.n	802efb2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 802eedc:	687b      	ldr	r3, [r7, #4]
 802eede:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 802eee2:	2b00      	cmp	r3, #0
 802eee4:	d027      	beq.n	802ef36 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802eee6:	687b      	ldr	r3, [r7, #4]
 802eee8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 802eeec:	687b      	ldr	r3, [r7, #4]
 802eeee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802eef2:	23ff      	movs	r3, #255	; 0xff
 802eef4:	6878      	ldr	r0, [r7, #4]
 802eef6:	f000 f995 	bl	802f224 <USBH_Get_StringDesc>
 802eefa:	4603      	mov	r3, r0
 802eefc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802eefe:	7bbb      	ldrb	r3, [r7, #14]
 802ef00:	2b00      	cmp	r3, #0
 802ef02:	d103      	bne.n	802ef0c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802ef04:	687b      	ldr	r3, [r7, #4]
 802ef06:	2207      	movs	r2, #7
 802ef08:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802ef0a:	e054      	b.n	802efb6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ef0c:	7bbb      	ldrb	r3, [r7, #14]
 802ef0e:	2b03      	cmp	r3, #3
 802ef10:	d151      	bne.n	802efb6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802ef12:	687b      	ldr	r3, [r7, #4]
 802ef14:	2207      	movs	r2, #7
 802ef16:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802ef18:	687b      	ldr	r3, [r7, #4]
 802ef1a:	2205      	movs	r2, #5
 802ef1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802ef20:	687b      	ldr	r3, [r7, #4]
 802ef22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802ef26:	687b      	ldr	r3, [r7, #4]
 802ef28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802ef2c:	2200      	movs	r2, #0
 802ef2e:	4619      	mov	r1, r3
 802ef30:	f007 f9b4 	bl	803629c <osMessagePut>
      break;
 802ef34:	e03f      	b.n	802efb6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802ef36:	687b      	ldr	r3, [r7, #4]
 802ef38:	2207      	movs	r2, #7
 802ef3a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802ef3c:	687b      	ldr	r3, [r7, #4]
 802ef3e:	2205      	movs	r2, #5
 802ef40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802ef44:	687b      	ldr	r3, [r7, #4]
 802ef46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802ef4a:	687b      	ldr	r3, [r7, #4]
 802ef4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802ef50:	2200      	movs	r2, #0
 802ef52:	4619      	mov	r1, r3
 802ef54:	f007 f9a2 	bl	803629c <osMessagePut>
      break;
 802ef58:	e02d      	b.n	802efb6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 802ef5a:	687b      	ldr	r3, [r7, #4]
 802ef5c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802ef60:	2b00      	cmp	r3, #0
 802ef62:	d017      	beq.n	802ef94 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802ef64:	687b      	ldr	r3, [r7, #4]
 802ef66:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 802ef6a:	687b      	ldr	r3, [r7, #4]
 802ef6c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802ef70:	23ff      	movs	r3, #255	; 0xff
 802ef72:	6878      	ldr	r0, [r7, #4]
 802ef74:	f000 f956 	bl	802f224 <USBH_Get_StringDesc>
 802ef78:	4603      	mov	r3, r0
 802ef7a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802ef7c:	7bbb      	ldrb	r3, [r7, #14]
 802ef7e:	2b00      	cmp	r3, #0
 802ef80:	d102      	bne.n	802ef88 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 802ef82:	2300      	movs	r3, #0
 802ef84:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 802ef86:	e018      	b.n	802efba <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ef88:	7bbb      	ldrb	r3, [r7, #14]
 802ef8a:	2b03      	cmp	r3, #3
 802ef8c:	d115      	bne.n	802efba <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 802ef8e:	2300      	movs	r3, #0
 802ef90:	73fb      	strb	r3, [r7, #15]
      break;
 802ef92:	e012      	b.n	802efba <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 802ef94:	2300      	movs	r3, #0
 802ef96:	73fb      	strb	r3, [r7, #15]
      break;
 802ef98:	e00f      	b.n	802efba <USBH_HandleEnum+0x44a>

    default:
      break;
 802ef9a:	bf00      	nop
 802ef9c:	e00e      	b.n	802efbc <USBH_HandleEnum+0x44c>
      break;
 802ef9e:	bf00      	nop
 802efa0:	e00c      	b.n	802efbc <USBH_HandleEnum+0x44c>
      break;
 802efa2:	bf00      	nop
 802efa4:	e00a      	b.n	802efbc <USBH_HandleEnum+0x44c>
      break;
 802efa6:	bf00      	nop
 802efa8:	e008      	b.n	802efbc <USBH_HandleEnum+0x44c>
      break;
 802efaa:	bf00      	nop
 802efac:	e006      	b.n	802efbc <USBH_HandleEnum+0x44c>
      break;
 802efae:	bf00      	nop
 802efb0:	e004      	b.n	802efbc <USBH_HandleEnum+0x44c>
      break;
 802efb2:	bf00      	nop
 802efb4:	e002      	b.n	802efbc <USBH_HandleEnum+0x44c>
      break;
 802efb6:	bf00      	nop
 802efb8:	e000      	b.n	802efbc <USBH_HandleEnum+0x44c>
      break;
 802efba:	bf00      	nop
  }
  return Status;
 802efbc:	7bfb      	ldrb	r3, [r7, #15]
}
 802efbe:	4618      	mov	r0, r3
 802efc0:	3710      	adds	r7, #16
 802efc2:	46bd      	mov	sp, r7
 802efc4:	bd80      	pop	{r7, pc}
 802efc6:	bf00      	nop

0802efc8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802efc8:	b480      	push	{r7}
 802efca:	b083      	sub	sp, #12
 802efcc:	af00      	add	r7, sp, #0
 802efce:	6078      	str	r0, [r7, #4]
 802efd0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 802efd2:	687b      	ldr	r3, [r7, #4]
 802efd4:	683a      	ldr	r2, [r7, #0]
 802efd6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802efda:	bf00      	nop
 802efdc:	370c      	adds	r7, #12
 802efde:	46bd      	mov	sp, r7
 802efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802efe4:	4770      	bx	lr

0802efe6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802efe6:	b580      	push	{r7, lr}
 802efe8:	b082      	sub	sp, #8
 802efea:	af00      	add	r7, sp, #0
 802efec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802efee:	687b      	ldr	r3, [r7, #4]
 802eff0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802eff4:	1c5a      	adds	r2, r3, #1
 802eff6:	687b      	ldr	r3, [r7, #4]
 802eff8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802effc:	6878      	ldr	r0, [r7, #4]
 802effe:	f000 f804 	bl	802f00a <USBH_HandleSof>
}
 802f002:	bf00      	nop
 802f004:	3708      	adds	r7, #8
 802f006:	46bd      	mov	sp, r7
 802f008:	bd80      	pop	{r7, pc}

0802f00a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802f00a:	b580      	push	{r7, lr}
 802f00c:	b082      	sub	sp, #8
 802f00e:	af00      	add	r7, sp, #0
 802f010:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 802f012:	687b      	ldr	r3, [r7, #4]
 802f014:	781b      	ldrb	r3, [r3, #0]
 802f016:	b2db      	uxtb	r3, r3
 802f018:	2b0b      	cmp	r3, #11
 802f01a:	d10a      	bne.n	802f032 <USBH_HandleSof+0x28>
 802f01c:	687b      	ldr	r3, [r7, #4]
 802f01e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802f022:	2b00      	cmp	r3, #0
 802f024:	d005      	beq.n	802f032 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802f026:	687b      	ldr	r3, [r7, #4]
 802f028:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802f02c:	699b      	ldr	r3, [r3, #24]
 802f02e:	6878      	ldr	r0, [r7, #4]
 802f030:	4798      	blx	r3
  }
}
 802f032:	bf00      	nop
 802f034:	3708      	adds	r7, #8
 802f036:	46bd      	mov	sp, r7
 802f038:	bd80      	pop	{r7, pc}

0802f03a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802f03a:	b580      	push	{r7, lr}
 802f03c:	b082      	sub	sp, #8
 802f03e:	af00      	add	r7, sp, #0
 802f040:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 802f042:	687b      	ldr	r3, [r7, #4]
 802f044:	2201      	movs	r2, #1
 802f046:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802f04a:	687b      	ldr	r3, [r7, #4]
 802f04c:	2201      	movs	r2, #1
 802f04e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802f052:	687b      	ldr	r3, [r7, #4]
 802f054:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802f058:	687b      	ldr	r3, [r7, #4]
 802f05a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802f05e:	2200      	movs	r2, #0
 802f060:	4619      	mov	r1, r3
 802f062:	f007 f91b 	bl	803629c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 802f066:	bf00      	nop
}
 802f068:	3708      	adds	r7, #8
 802f06a:	46bd      	mov	sp, r7
 802f06c:	bd80      	pop	{r7, pc}

0802f06e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 802f06e:	b480      	push	{r7}
 802f070:	b083      	sub	sp, #12
 802f072:	af00      	add	r7, sp, #0
 802f074:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802f076:	687b      	ldr	r3, [r7, #4]
 802f078:	2200      	movs	r2, #0
 802f07a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 802f07e:	bf00      	nop
}
 802f080:	370c      	adds	r7, #12
 802f082:	46bd      	mov	sp, r7
 802f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f088:	4770      	bx	lr

0802f08a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 802f08a:	b580      	push	{r7, lr}
 802f08c:	b082      	sub	sp, #8
 802f08e:	af00      	add	r7, sp, #0
 802f090:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 802f092:	687b      	ldr	r3, [r7, #4]
 802f094:	2201      	movs	r2, #1
 802f096:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802f09a:	687b      	ldr	r3, [r7, #4]
 802f09c:	2200      	movs	r2, #0
 802f09e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802f0a2:	687b      	ldr	r3, [r7, #4]
 802f0a4:	2200      	movs	r2, #0
 802f0a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802f0aa:	687b      	ldr	r3, [r7, #4]
 802f0ac:	2201      	movs	r2, #1
 802f0ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802f0b2:	687b      	ldr	r3, [r7, #4]
 802f0b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802f0b8:	687b      	ldr	r3, [r7, #4]
 802f0ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802f0be:	2200      	movs	r2, #0
 802f0c0:	4619      	mov	r1, r3
 802f0c2:	f007 f8eb 	bl	803629c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802f0c6:	2300      	movs	r3, #0
}
 802f0c8:	4618      	mov	r0, r3
 802f0ca:	3708      	adds	r7, #8
 802f0cc:	46bd      	mov	sp, r7
 802f0ce:	bd80      	pop	{r7, pc}

0802f0d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 802f0d0:	b580      	push	{r7, lr}
 802f0d2:	b082      	sub	sp, #8
 802f0d4:	af00      	add	r7, sp, #0
 802f0d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802f0d8:	687b      	ldr	r3, [r7, #4]
 802f0da:	2201      	movs	r2, #1
 802f0dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 802f0e0:	687b      	ldr	r3, [r7, #4]
 802f0e2:	2200      	movs	r2, #0
 802f0e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 802f0e8:	687b      	ldr	r3, [r7, #4]
 802f0ea:	2200      	movs	r2, #0
 802f0ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 802f0f0:	6878      	ldr	r0, [r7, #4]
 802f0f2:	f00a fce2 	bl	8039aba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802f0f6:	687b      	ldr	r3, [r7, #4]
 802f0f8:	791b      	ldrb	r3, [r3, #4]
 802f0fa:	4619      	mov	r1, r3
 802f0fc:	6878      	ldr	r0, [r7, #4]
 802f0fe:	f000 ffbd 	bl	803007c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802f102:	687b      	ldr	r3, [r7, #4]
 802f104:	795b      	ldrb	r3, [r3, #5]
 802f106:	4619      	mov	r1, r3
 802f108:	6878      	ldr	r0, [r7, #4]
 802f10a:	f000 ffb7 	bl	803007c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802f10e:	687b      	ldr	r3, [r7, #4]
 802f110:	2201      	movs	r2, #1
 802f112:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802f116:	687b      	ldr	r3, [r7, #4]
 802f118:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802f11c:	687b      	ldr	r3, [r7, #4]
 802f11e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802f122:	2200      	movs	r2, #0
 802f124:	4619      	mov	r1, r3
 802f126:	f007 f8b9 	bl	803629c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802f12a:	2300      	movs	r3, #0
}
 802f12c:	4618      	mov	r0, r3
 802f12e:	3708      	adds	r7, #8
 802f130:	46bd      	mov	sp, r7
 802f132:	bd80      	pop	{r7, pc}

0802f134 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 802f134:	b580      	push	{r7, lr}
 802f136:	b086      	sub	sp, #24
 802f138:	af00      	add	r7, sp, #0
 802f13a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 802f13c:	687b      	ldr	r3, [r7, #4]
 802f13e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 802f142:	f107 030c 	add.w	r3, r7, #12
 802f146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802f14a:	4618      	mov	r0, r3
 802f14c:	f007 f8e6 	bl	803631c <osMessageGet>
    if (event.status == osEventMessage)
 802f150:	68fb      	ldr	r3, [r7, #12]
 802f152:	2b10      	cmp	r3, #16
 802f154:	d1f2      	bne.n	802f13c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 802f156:	6878      	ldr	r0, [r7, #4]
 802f158:	f7ff fa9e 	bl	802e698 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 802f15c:	e7ee      	b.n	802f13c <USBH_Process_OS+0x8>

0802f15e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 802f15e:	b580      	push	{r7, lr}
 802f160:	b082      	sub	sp, #8
 802f162:	af00      	add	r7, sp, #0
 802f164:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802f166:	687b      	ldr	r3, [r7, #4]
 802f168:	2201      	movs	r2, #1
 802f16a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802f16e:	687b      	ldr	r3, [r7, #4]
 802f170:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802f174:	687b      	ldr	r3, [r7, #4]
 802f176:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802f17a:	2200      	movs	r2, #0
 802f17c:	4619      	mov	r1, r3
 802f17e:	f007 f88d 	bl	803629c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 802f182:	2300      	movs	r3, #0
}
 802f184:	4618      	mov	r0, r3
 802f186:	3708      	adds	r7, #8
 802f188:	46bd      	mov	sp, r7
 802f18a:	bd80      	pop	{r7, pc}

0802f18c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 802f18c:	b580      	push	{r7, lr}
 802f18e:	b086      	sub	sp, #24
 802f190:	af02      	add	r7, sp, #8
 802f192:	6078      	str	r0, [r7, #4]
 802f194:	460b      	mov	r3, r1
 802f196:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 802f198:	687b      	ldr	r3, [r7, #4]
 802f19a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802f19e:	78fb      	ldrb	r3, [r7, #3]
 802f1a0:	b29b      	uxth	r3, r3
 802f1a2:	9300      	str	r3, [sp, #0]
 802f1a4:	4613      	mov	r3, r2
 802f1a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 802f1aa:	2100      	movs	r1, #0
 802f1ac:	6878      	ldr	r0, [r7, #4]
 802f1ae:	f000 f864 	bl	802f27a <USBH_GetDescriptor>
 802f1b2:	4603      	mov	r3, r0
 802f1b4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 802f1b6:	7bfb      	ldrb	r3, [r7, #15]
 802f1b8:	2b00      	cmp	r3, #0
 802f1ba:	d10a      	bne.n	802f1d2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 802f1bc:	687b      	ldr	r3, [r7, #4]
 802f1be:	f203 3026 	addw	r0, r3, #806	; 0x326
 802f1c2:	687b      	ldr	r3, [r7, #4]
 802f1c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802f1c8:	78fa      	ldrb	r2, [r7, #3]
 802f1ca:	b292      	uxth	r2, r2
 802f1cc:	4619      	mov	r1, r3
 802f1ce:	f000 f919 	bl	802f404 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802f1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 802f1d4:	4618      	mov	r0, r3
 802f1d6:	3710      	adds	r7, #16
 802f1d8:	46bd      	mov	sp, r7
 802f1da:	bd80      	pop	{r7, pc}

0802f1dc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 802f1dc:	b580      	push	{r7, lr}
 802f1de:	b086      	sub	sp, #24
 802f1e0:	af02      	add	r7, sp, #8
 802f1e2:	6078      	str	r0, [r7, #4]
 802f1e4:	460b      	mov	r3, r1
 802f1e6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 802f1e8:	687b      	ldr	r3, [r7, #4]
 802f1ea:	331c      	adds	r3, #28
 802f1ec:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802f1ee:	887b      	ldrh	r3, [r7, #2]
 802f1f0:	9300      	str	r3, [sp, #0]
 802f1f2:	68bb      	ldr	r3, [r7, #8]
 802f1f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 802f1f8:	2100      	movs	r1, #0
 802f1fa:	6878      	ldr	r0, [r7, #4]
 802f1fc:	f000 f83d 	bl	802f27a <USBH_GetDescriptor>
 802f200:	4603      	mov	r3, r0
 802f202:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 802f204:	7bfb      	ldrb	r3, [r7, #15]
 802f206:	2b00      	cmp	r3, #0
 802f208:	d107      	bne.n	802f21a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 802f20a:	887b      	ldrh	r3, [r7, #2]
 802f20c:	461a      	mov	r2, r3
 802f20e:	68b9      	ldr	r1, [r7, #8]
 802f210:	6878      	ldr	r0, [r7, #4]
 802f212:	f000 f987 	bl	802f524 <USBH_ParseCfgDesc>
 802f216:	4603      	mov	r3, r0
 802f218:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802f21a:	7bfb      	ldrb	r3, [r7, #15]
}
 802f21c:	4618      	mov	r0, r3
 802f21e:	3710      	adds	r7, #16
 802f220:	46bd      	mov	sp, r7
 802f222:	bd80      	pop	{r7, pc}

0802f224 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 802f224:	b580      	push	{r7, lr}
 802f226:	b088      	sub	sp, #32
 802f228:	af02      	add	r7, sp, #8
 802f22a:	60f8      	str	r0, [r7, #12]
 802f22c:	607a      	str	r2, [r7, #4]
 802f22e:	461a      	mov	r2, r3
 802f230:	460b      	mov	r3, r1
 802f232:	72fb      	strb	r3, [r7, #11]
 802f234:	4613      	mov	r3, r2
 802f236:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 802f238:	7afb      	ldrb	r3, [r7, #11]
 802f23a:	b29b      	uxth	r3, r3
 802f23c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802f240:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 802f242:	68fb      	ldr	r3, [r7, #12]
 802f244:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802f248:	893b      	ldrh	r3, [r7, #8]
 802f24a:	9300      	str	r3, [sp, #0]
 802f24c:	460b      	mov	r3, r1
 802f24e:	2100      	movs	r1, #0
 802f250:	68f8      	ldr	r0, [r7, #12]
 802f252:	f000 f812 	bl	802f27a <USBH_GetDescriptor>
 802f256:	4603      	mov	r3, r0
 802f258:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 802f25a:	7dfb      	ldrb	r3, [r7, #23]
 802f25c:	2b00      	cmp	r3, #0
 802f25e:	d107      	bne.n	802f270 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 802f260:	68fb      	ldr	r3, [r7, #12]
 802f262:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802f266:	893a      	ldrh	r2, [r7, #8]
 802f268:	6879      	ldr	r1, [r7, #4]
 802f26a:	4618      	mov	r0, r3
 802f26c:	f000 fb26 	bl	802f8bc <USBH_ParseStringDesc>
  }

  return status;
 802f270:	7dfb      	ldrb	r3, [r7, #23]
}
 802f272:	4618      	mov	r0, r3
 802f274:	3718      	adds	r7, #24
 802f276:	46bd      	mov	sp, r7
 802f278:	bd80      	pop	{r7, pc}

0802f27a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 802f27a:	b580      	push	{r7, lr}
 802f27c:	b084      	sub	sp, #16
 802f27e:	af00      	add	r7, sp, #0
 802f280:	60f8      	str	r0, [r7, #12]
 802f282:	607b      	str	r3, [r7, #4]
 802f284:	460b      	mov	r3, r1
 802f286:	72fb      	strb	r3, [r7, #11]
 802f288:	4613      	mov	r3, r2
 802f28a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802f28c:	68fb      	ldr	r3, [r7, #12]
 802f28e:	789b      	ldrb	r3, [r3, #2]
 802f290:	2b01      	cmp	r3, #1
 802f292:	d11c      	bne.n	802f2ce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802f294:	7afb      	ldrb	r3, [r7, #11]
 802f296:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802f29a:	b2da      	uxtb	r2, r3
 802f29c:	68fb      	ldr	r3, [r7, #12]
 802f29e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802f2a0:	68fb      	ldr	r3, [r7, #12]
 802f2a2:	2206      	movs	r2, #6
 802f2a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802f2a6:	68fb      	ldr	r3, [r7, #12]
 802f2a8:	893a      	ldrh	r2, [r7, #8]
 802f2aa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802f2ac:	893b      	ldrh	r3, [r7, #8]
 802f2ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802f2b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802f2b6:	d104      	bne.n	802f2c2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 802f2b8:	68fb      	ldr	r3, [r7, #12]
 802f2ba:	f240 4209 	movw	r2, #1033	; 0x409
 802f2be:	829a      	strh	r2, [r3, #20]
 802f2c0:	e002      	b.n	802f2c8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802f2c2:	68fb      	ldr	r3, [r7, #12]
 802f2c4:	2200      	movs	r2, #0
 802f2c6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 802f2c8:	68fb      	ldr	r3, [r7, #12]
 802f2ca:	8b3a      	ldrh	r2, [r7, #24]
 802f2cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802f2ce:	8b3b      	ldrh	r3, [r7, #24]
 802f2d0:	461a      	mov	r2, r3
 802f2d2:	6879      	ldr	r1, [r7, #4]
 802f2d4:	68f8      	ldr	r0, [r7, #12]
 802f2d6:	f000 fb3f 	bl	802f958 <USBH_CtlReq>
 802f2da:	4603      	mov	r3, r0
}
 802f2dc:	4618      	mov	r0, r3
 802f2de:	3710      	adds	r7, #16
 802f2e0:	46bd      	mov	sp, r7
 802f2e2:	bd80      	pop	{r7, pc}

0802f2e4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 802f2e4:	b580      	push	{r7, lr}
 802f2e6:	b082      	sub	sp, #8
 802f2e8:	af00      	add	r7, sp, #0
 802f2ea:	6078      	str	r0, [r7, #4]
 802f2ec:	460b      	mov	r3, r1
 802f2ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802f2f0:	687b      	ldr	r3, [r7, #4]
 802f2f2:	789b      	ldrb	r3, [r3, #2]
 802f2f4:	2b01      	cmp	r3, #1
 802f2f6:	d10f      	bne.n	802f318 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 802f2f8:	687b      	ldr	r3, [r7, #4]
 802f2fa:	2200      	movs	r2, #0
 802f2fc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802f2fe:	687b      	ldr	r3, [r7, #4]
 802f300:	2205      	movs	r2, #5
 802f302:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 802f304:	78fb      	ldrb	r3, [r7, #3]
 802f306:	b29a      	uxth	r2, r3
 802f308:	687b      	ldr	r3, [r7, #4]
 802f30a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802f30c:	687b      	ldr	r3, [r7, #4]
 802f30e:	2200      	movs	r2, #0
 802f310:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802f312:	687b      	ldr	r3, [r7, #4]
 802f314:	2200      	movs	r2, #0
 802f316:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802f318:	2200      	movs	r2, #0
 802f31a:	2100      	movs	r1, #0
 802f31c:	6878      	ldr	r0, [r7, #4]
 802f31e:	f000 fb1b 	bl	802f958 <USBH_CtlReq>
 802f322:	4603      	mov	r3, r0
}
 802f324:	4618      	mov	r0, r3
 802f326:	3708      	adds	r7, #8
 802f328:	46bd      	mov	sp, r7
 802f32a:	bd80      	pop	{r7, pc}

0802f32c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 802f32c:	b580      	push	{r7, lr}
 802f32e:	b082      	sub	sp, #8
 802f330:	af00      	add	r7, sp, #0
 802f332:	6078      	str	r0, [r7, #4]
 802f334:	460b      	mov	r3, r1
 802f336:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 802f338:	687b      	ldr	r3, [r7, #4]
 802f33a:	789b      	ldrb	r3, [r3, #2]
 802f33c:	2b01      	cmp	r3, #1
 802f33e:	d10e      	bne.n	802f35e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802f340:	687b      	ldr	r3, [r7, #4]
 802f342:	2200      	movs	r2, #0
 802f344:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802f346:	687b      	ldr	r3, [r7, #4]
 802f348:	2209      	movs	r2, #9
 802f34a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 802f34c:	687b      	ldr	r3, [r7, #4]
 802f34e:	887a      	ldrh	r2, [r7, #2]
 802f350:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802f352:	687b      	ldr	r3, [r7, #4]
 802f354:	2200      	movs	r2, #0
 802f356:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802f358:	687b      	ldr	r3, [r7, #4]
 802f35a:	2200      	movs	r2, #0
 802f35c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802f35e:	2200      	movs	r2, #0
 802f360:	2100      	movs	r1, #0
 802f362:	6878      	ldr	r0, [r7, #4]
 802f364:	f000 faf8 	bl	802f958 <USBH_CtlReq>
 802f368:	4603      	mov	r3, r0
}
 802f36a:	4618      	mov	r0, r3
 802f36c:	3708      	adds	r7, #8
 802f36e:	46bd      	mov	sp, r7
 802f370:	bd80      	pop	{r7, pc}

0802f372 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802f372:	b580      	push	{r7, lr}
 802f374:	b082      	sub	sp, #8
 802f376:	af00      	add	r7, sp, #0
 802f378:	6078      	str	r0, [r7, #4]
 802f37a:	460b      	mov	r3, r1
 802f37c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802f37e:	687b      	ldr	r3, [r7, #4]
 802f380:	789b      	ldrb	r3, [r3, #2]
 802f382:	2b01      	cmp	r3, #1
 802f384:	d10f      	bne.n	802f3a6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802f386:	687b      	ldr	r3, [r7, #4]
 802f388:	2200      	movs	r2, #0
 802f38a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802f38c:	687b      	ldr	r3, [r7, #4]
 802f38e:	2203      	movs	r2, #3
 802f390:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802f392:	78fb      	ldrb	r3, [r7, #3]
 802f394:	b29a      	uxth	r2, r3
 802f396:	687b      	ldr	r3, [r7, #4]
 802f398:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802f39a:	687b      	ldr	r3, [r7, #4]
 802f39c:	2200      	movs	r2, #0
 802f39e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802f3a0:	687b      	ldr	r3, [r7, #4]
 802f3a2:	2200      	movs	r2, #0
 802f3a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802f3a6:	2200      	movs	r2, #0
 802f3a8:	2100      	movs	r1, #0
 802f3aa:	6878      	ldr	r0, [r7, #4]
 802f3ac:	f000 fad4 	bl	802f958 <USBH_CtlReq>
 802f3b0:	4603      	mov	r3, r0
}
 802f3b2:	4618      	mov	r0, r3
 802f3b4:	3708      	adds	r7, #8
 802f3b6:	46bd      	mov	sp, r7
 802f3b8:	bd80      	pop	{r7, pc}

0802f3ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 802f3ba:	b580      	push	{r7, lr}
 802f3bc:	b082      	sub	sp, #8
 802f3be:	af00      	add	r7, sp, #0
 802f3c0:	6078      	str	r0, [r7, #4]
 802f3c2:	460b      	mov	r3, r1
 802f3c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802f3c6:	687b      	ldr	r3, [r7, #4]
 802f3c8:	789b      	ldrb	r3, [r3, #2]
 802f3ca:	2b01      	cmp	r3, #1
 802f3cc:	d10f      	bne.n	802f3ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802f3ce:	687b      	ldr	r3, [r7, #4]
 802f3d0:	2202      	movs	r2, #2
 802f3d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802f3d4:	687b      	ldr	r3, [r7, #4]
 802f3d6:	2201      	movs	r2, #1
 802f3d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 802f3da:	687b      	ldr	r3, [r7, #4]
 802f3dc:	2200      	movs	r2, #0
 802f3de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802f3e0:	78fb      	ldrb	r3, [r7, #3]
 802f3e2:	b29a      	uxth	r2, r3
 802f3e4:	687b      	ldr	r3, [r7, #4]
 802f3e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802f3e8:	687b      	ldr	r3, [r7, #4]
 802f3ea:	2200      	movs	r2, #0
 802f3ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 802f3ee:	2200      	movs	r2, #0
 802f3f0:	2100      	movs	r1, #0
 802f3f2:	6878      	ldr	r0, [r7, #4]
 802f3f4:	f000 fab0 	bl	802f958 <USBH_CtlReq>
 802f3f8:	4603      	mov	r3, r0
}
 802f3fa:	4618      	mov	r0, r3
 802f3fc:	3708      	adds	r7, #8
 802f3fe:	46bd      	mov	sp, r7
 802f400:	bd80      	pop	{r7, pc}
	...

0802f404 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802f404:	b480      	push	{r7}
 802f406:	b085      	sub	sp, #20
 802f408:	af00      	add	r7, sp, #0
 802f40a:	60f8      	str	r0, [r7, #12]
 802f40c:	60b9      	str	r1, [r7, #8]
 802f40e:	4613      	mov	r3, r2
 802f410:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802f412:	68bb      	ldr	r3, [r7, #8]
 802f414:	781a      	ldrb	r2, [r3, #0]
 802f416:	68fb      	ldr	r3, [r7, #12]
 802f418:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 802f41a:	68bb      	ldr	r3, [r7, #8]
 802f41c:	785a      	ldrb	r2, [r3, #1]
 802f41e:	68fb      	ldr	r3, [r7, #12]
 802f420:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 802f422:	68bb      	ldr	r3, [r7, #8]
 802f424:	3302      	adds	r3, #2
 802f426:	781b      	ldrb	r3, [r3, #0]
 802f428:	b29a      	uxth	r2, r3
 802f42a:	68bb      	ldr	r3, [r7, #8]
 802f42c:	3303      	adds	r3, #3
 802f42e:	781b      	ldrb	r3, [r3, #0]
 802f430:	b29b      	uxth	r3, r3
 802f432:	021b      	lsls	r3, r3, #8
 802f434:	b29b      	uxth	r3, r3
 802f436:	4313      	orrs	r3, r2
 802f438:	b29a      	uxth	r2, r3
 802f43a:	68fb      	ldr	r3, [r7, #12]
 802f43c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 802f43e:	68bb      	ldr	r3, [r7, #8]
 802f440:	791a      	ldrb	r2, [r3, #4]
 802f442:	68fb      	ldr	r3, [r7, #12]
 802f444:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802f446:	68bb      	ldr	r3, [r7, #8]
 802f448:	795a      	ldrb	r2, [r3, #5]
 802f44a:	68fb      	ldr	r3, [r7, #12]
 802f44c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 802f44e:	68bb      	ldr	r3, [r7, #8]
 802f450:	799a      	ldrb	r2, [r3, #6]
 802f452:	68fb      	ldr	r3, [r7, #12]
 802f454:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802f456:	68bb      	ldr	r3, [r7, #8]
 802f458:	79da      	ldrb	r2, [r3, #7]
 802f45a:	68fb      	ldr	r3, [r7, #12]
 802f45c:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 802f45e:	68fb      	ldr	r3, [r7, #12]
 802f460:	79db      	ldrb	r3, [r3, #7]
 802f462:	2b20      	cmp	r3, #32
 802f464:	dc0e      	bgt.n	802f484 <USBH_ParseDevDesc+0x80>
 802f466:	2b08      	cmp	r3, #8
 802f468:	db13      	blt.n	802f492 <USBH_ParseDevDesc+0x8e>
 802f46a:	3b08      	subs	r3, #8
 802f46c:	2201      	movs	r2, #1
 802f46e:	409a      	lsls	r2, r3
 802f470:	4b2b      	ldr	r3, [pc, #172]	; (802f520 <USBH_ParseDevDesc+0x11c>)
 802f472:	4013      	ands	r3, r2
 802f474:	2b00      	cmp	r3, #0
 802f476:	bf14      	ite	ne
 802f478:	2301      	movne	r3, #1
 802f47a:	2300      	moveq	r3, #0
 802f47c:	b2db      	uxtb	r3, r3
 802f47e:	2b00      	cmp	r3, #0
 802f480:	d102      	bne.n	802f488 <USBH_ParseDevDesc+0x84>
 802f482:	e006      	b.n	802f492 <USBH_ParseDevDesc+0x8e>
 802f484:	2b40      	cmp	r3, #64	; 0x40
 802f486:	d104      	bne.n	802f492 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 802f488:	68fb      	ldr	r3, [r7, #12]
 802f48a:	79da      	ldrb	r2, [r3, #7]
 802f48c:	68fb      	ldr	r3, [r7, #12]
 802f48e:	71da      	strb	r2, [r3, #7]
      break;
 802f490:	e003      	b.n	802f49a <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 802f492:	68fb      	ldr	r3, [r7, #12]
 802f494:	2240      	movs	r2, #64	; 0x40
 802f496:	71da      	strb	r2, [r3, #7]
      break;
 802f498:	bf00      	nop
  }

  if (length > 8U)
 802f49a:	88fb      	ldrh	r3, [r7, #6]
 802f49c:	2b08      	cmp	r3, #8
 802f49e:	d939      	bls.n	802f514 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802f4a0:	68bb      	ldr	r3, [r7, #8]
 802f4a2:	3308      	adds	r3, #8
 802f4a4:	781b      	ldrb	r3, [r3, #0]
 802f4a6:	b29a      	uxth	r2, r3
 802f4a8:	68bb      	ldr	r3, [r7, #8]
 802f4aa:	3309      	adds	r3, #9
 802f4ac:	781b      	ldrb	r3, [r3, #0]
 802f4ae:	b29b      	uxth	r3, r3
 802f4b0:	021b      	lsls	r3, r3, #8
 802f4b2:	b29b      	uxth	r3, r3
 802f4b4:	4313      	orrs	r3, r2
 802f4b6:	b29a      	uxth	r2, r3
 802f4b8:	68fb      	ldr	r3, [r7, #12]
 802f4ba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802f4bc:	68bb      	ldr	r3, [r7, #8]
 802f4be:	330a      	adds	r3, #10
 802f4c0:	781b      	ldrb	r3, [r3, #0]
 802f4c2:	b29a      	uxth	r2, r3
 802f4c4:	68bb      	ldr	r3, [r7, #8]
 802f4c6:	330b      	adds	r3, #11
 802f4c8:	781b      	ldrb	r3, [r3, #0]
 802f4ca:	b29b      	uxth	r3, r3
 802f4cc:	021b      	lsls	r3, r3, #8
 802f4ce:	b29b      	uxth	r3, r3
 802f4d0:	4313      	orrs	r3, r2
 802f4d2:	b29a      	uxth	r2, r3
 802f4d4:	68fb      	ldr	r3, [r7, #12]
 802f4d6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 802f4d8:	68bb      	ldr	r3, [r7, #8]
 802f4da:	330c      	adds	r3, #12
 802f4dc:	781b      	ldrb	r3, [r3, #0]
 802f4de:	b29a      	uxth	r2, r3
 802f4e0:	68bb      	ldr	r3, [r7, #8]
 802f4e2:	330d      	adds	r3, #13
 802f4e4:	781b      	ldrb	r3, [r3, #0]
 802f4e6:	b29b      	uxth	r3, r3
 802f4e8:	021b      	lsls	r3, r3, #8
 802f4ea:	b29b      	uxth	r3, r3
 802f4ec:	4313      	orrs	r3, r2
 802f4ee:	b29a      	uxth	r2, r3
 802f4f0:	68fb      	ldr	r3, [r7, #12]
 802f4f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802f4f4:	68bb      	ldr	r3, [r7, #8]
 802f4f6:	7b9a      	ldrb	r2, [r3, #14]
 802f4f8:	68fb      	ldr	r3, [r7, #12]
 802f4fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802f4fc:	68bb      	ldr	r3, [r7, #8]
 802f4fe:	7bda      	ldrb	r2, [r3, #15]
 802f500:	68fb      	ldr	r3, [r7, #12]
 802f502:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802f504:	68bb      	ldr	r3, [r7, #8]
 802f506:	7c1a      	ldrb	r2, [r3, #16]
 802f508:	68fb      	ldr	r3, [r7, #12]
 802f50a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802f50c:	68bb      	ldr	r3, [r7, #8]
 802f50e:	7c5a      	ldrb	r2, [r3, #17]
 802f510:	68fb      	ldr	r3, [r7, #12]
 802f512:	745a      	strb	r2, [r3, #17]
  }
}
 802f514:	bf00      	nop
 802f516:	3714      	adds	r7, #20
 802f518:	46bd      	mov	sp, r7
 802f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f51e:	4770      	bx	lr
 802f520:	01000101 	.word	0x01000101

0802f524 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 802f524:	b580      	push	{r7, lr}
 802f526:	b08c      	sub	sp, #48	; 0x30
 802f528:	af00      	add	r7, sp, #0
 802f52a:	60f8      	str	r0, [r7, #12]
 802f52c:	60b9      	str	r1, [r7, #8]
 802f52e:	4613      	mov	r3, r2
 802f530:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 802f532:	68fb      	ldr	r3, [r7, #12]
 802f534:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802f538:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 802f53a:	2300      	movs	r3, #0
 802f53c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802f540:	68bb      	ldr	r3, [r7, #8]
 802f542:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 802f544:	2300      	movs	r3, #0
 802f546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 802f54a:	2300      	movs	r3, #0
 802f54c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802f550:	68bb      	ldr	r3, [r7, #8]
 802f552:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 802f554:	68bb      	ldr	r3, [r7, #8]
 802f556:	781a      	ldrb	r2, [r3, #0]
 802f558:	6a3b      	ldr	r3, [r7, #32]
 802f55a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 802f55c:	68bb      	ldr	r3, [r7, #8]
 802f55e:	785a      	ldrb	r2, [r3, #1]
 802f560:	6a3b      	ldr	r3, [r7, #32]
 802f562:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 802f564:	68bb      	ldr	r3, [r7, #8]
 802f566:	3302      	adds	r3, #2
 802f568:	781b      	ldrb	r3, [r3, #0]
 802f56a:	b29a      	uxth	r2, r3
 802f56c:	68bb      	ldr	r3, [r7, #8]
 802f56e:	3303      	adds	r3, #3
 802f570:	781b      	ldrb	r3, [r3, #0]
 802f572:	b29b      	uxth	r3, r3
 802f574:	021b      	lsls	r3, r3, #8
 802f576:	b29b      	uxth	r3, r3
 802f578:	4313      	orrs	r3, r2
 802f57a:	b29b      	uxth	r3, r3
 802f57c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802f580:	bf28      	it	cs
 802f582:	f44f 7380 	movcs.w	r3, #256	; 0x100
 802f586:	b29a      	uxth	r2, r3
 802f588:	6a3b      	ldr	r3, [r7, #32]
 802f58a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 802f58c:	68bb      	ldr	r3, [r7, #8]
 802f58e:	791a      	ldrb	r2, [r3, #4]
 802f590:	6a3b      	ldr	r3, [r7, #32]
 802f592:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 802f594:	68bb      	ldr	r3, [r7, #8]
 802f596:	795a      	ldrb	r2, [r3, #5]
 802f598:	6a3b      	ldr	r3, [r7, #32]
 802f59a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 802f59c:	68bb      	ldr	r3, [r7, #8]
 802f59e:	799a      	ldrb	r2, [r3, #6]
 802f5a0:	6a3b      	ldr	r3, [r7, #32]
 802f5a2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 802f5a4:	68bb      	ldr	r3, [r7, #8]
 802f5a6:	79da      	ldrb	r2, [r3, #7]
 802f5a8:	6a3b      	ldr	r3, [r7, #32]
 802f5aa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 802f5ac:	68bb      	ldr	r3, [r7, #8]
 802f5ae:	7a1a      	ldrb	r2, [r3, #8]
 802f5b0:	6a3b      	ldr	r3, [r7, #32]
 802f5b2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 802f5b4:	6a3b      	ldr	r3, [r7, #32]
 802f5b6:	781b      	ldrb	r3, [r3, #0]
 802f5b8:	2b09      	cmp	r3, #9
 802f5ba:	d002      	beq.n	802f5c2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 802f5bc:	6a3b      	ldr	r3, [r7, #32]
 802f5be:	2209      	movs	r2, #9
 802f5c0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 802f5c2:	88fb      	ldrh	r3, [r7, #6]
 802f5c4:	2b09      	cmp	r3, #9
 802f5c6:	f240 809d 	bls.w	802f704 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 802f5ca:	2309      	movs	r3, #9
 802f5cc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 802f5ce:	2300      	movs	r3, #0
 802f5d0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802f5d2:	e081      	b.n	802f6d8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802f5d4:	f107 0316 	add.w	r3, r7, #22
 802f5d8:	4619      	mov	r1, r3
 802f5da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802f5dc:	f000 f9a1 	bl	802f922 <USBH_GetNextDesc>
 802f5e0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 802f5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f5e4:	785b      	ldrb	r3, [r3, #1]
 802f5e6:	2b04      	cmp	r3, #4
 802f5e8:	d176      	bne.n	802f6d8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 802f5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f5ec:	781b      	ldrb	r3, [r3, #0]
 802f5ee:	2b09      	cmp	r3, #9
 802f5f0:	d002      	beq.n	802f5f8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 802f5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f5f4:	2209      	movs	r2, #9
 802f5f6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 802f5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f5fc:	221a      	movs	r2, #26
 802f5fe:	fb02 f303 	mul.w	r3, r2, r3
 802f602:	3308      	adds	r3, #8
 802f604:	6a3a      	ldr	r2, [r7, #32]
 802f606:	4413      	add	r3, r2
 802f608:	3302      	adds	r3, #2
 802f60a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802f60c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802f60e:	69f8      	ldr	r0, [r7, #28]
 802f610:	f000 f87e 	bl	802f710 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 802f614:	2300      	movs	r3, #0
 802f616:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 802f61a:	2300      	movs	r3, #0
 802f61c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802f61e:	e043      	b.n	802f6a8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802f620:	f107 0316 	add.w	r3, r7, #22
 802f624:	4619      	mov	r1, r3
 802f626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802f628:	f000 f97b 	bl	802f922 <USBH_GetNextDesc>
 802f62c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802f62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f630:	785b      	ldrb	r3, [r3, #1]
 802f632:	2b05      	cmp	r3, #5
 802f634:	d138      	bne.n	802f6a8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 802f636:	69fb      	ldr	r3, [r7, #28]
 802f638:	795b      	ldrb	r3, [r3, #5]
 802f63a:	2b01      	cmp	r3, #1
 802f63c:	d10f      	bne.n	802f65e <USBH_ParseCfgDesc+0x13a>
 802f63e:	69fb      	ldr	r3, [r7, #28]
 802f640:	799b      	ldrb	r3, [r3, #6]
 802f642:	2b02      	cmp	r3, #2
 802f644:	d10b      	bne.n	802f65e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802f646:	69fb      	ldr	r3, [r7, #28]
 802f648:	79db      	ldrb	r3, [r3, #7]
 802f64a:	2b00      	cmp	r3, #0
 802f64c:	d10f      	bne.n	802f66e <USBH_ParseCfgDesc+0x14a>
 802f64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f650:	781b      	ldrb	r3, [r3, #0]
 802f652:	2b09      	cmp	r3, #9
 802f654:	d00b      	beq.n	802f66e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 802f656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f658:	2209      	movs	r2, #9
 802f65a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802f65c:	e007      	b.n	802f66e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 802f65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f660:	781b      	ldrb	r3, [r3, #0]
 802f662:	2b07      	cmp	r3, #7
 802f664:	d004      	beq.n	802f670 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 802f666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f668:	2207      	movs	r2, #7
 802f66a:	701a      	strb	r2, [r3, #0]
 802f66c:	e000      	b.n	802f670 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802f66e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 802f670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f674:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802f678:	3201      	adds	r2, #1
 802f67a:	00d2      	lsls	r2, r2, #3
 802f67c:	211a      	movs	r1, #26
 802f67e:	fb01 f303 	mul.w	r3, r1, r3
 802f682:	4413      	add	r3, r2
 802f684:	3308      	adds	r3, #8
 802f686:	6a3a      	ldr	r2, [r7, #32]
 802f688:	4413      	add	r3, r2
 802f68a:	3304      	adds	r3, #4
 802f68c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 802f68e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802f690:	69b9      	ldr	r1, [r7, #24]
 802f692:	68f8      	ldr	r0, [r7, #12]
 802f694:	f000 f86c 	bl	802f770 <USBH_ParseEPDesc>
 802f698:	4603      	mov	r3, r0
 802f69a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 802f69e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802f6a2:	3301      	adds	r3, #1
 802f6a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802f6a8:	69fb      	ldr	r3, [r7, #28]
 802f6aa:	791b      	ldrb	r3, [r3, #4]
 802f6ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802f6b0:	429a      	cmp	r2, r3
 802f6b2:	d204      	bcs.n	802f6be <USBH_ParseCfgDesc+0x19a>
 802f6b4:	6a3b      	ldr	r3, [r7, #32]
 802f6b6:	885a      	ldrh	r2, [r3, #2]
 802f6b8:	8afb      	ldrh	r3, [r7, #22]
 802f6ba:	429a      	cmp	r2, r3
 802f6bc:	d8b0      	bhi.n	802f620 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 802f6be:	69fb      	ldr	r3, [r7, #28]
 802f6c0:	791b      	ldrb	r3, [r3, #4]
 802f6c2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802f6c6:	429a      	cmp	r2, r3
 802f6c8:	d201      	bcs.n	802f6ce <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 802f6ca:	2303      	movs	r3, #3
 802f6cc:	e01c      	b.n	802f708 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 802f6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f6d2:	3301      	adds	r3, #1
 802f6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802f6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f6dc:	2b01      	cmp	r3, #1
 802f6de:	d805      	bhi.n	802f6ec <USBH_ParseCfgDesc+0x1c8>
 802f6e0:	6a3b      	ldr	r3, [r7, #32]
 802f6e2:	885a      	ldrh	r2, [r3, #2]
 802f6e4:	8afb      	ldrh	r3, [r7, #22]
 802f6e6:	429a      	cmp	r2, r3
 802f6e8:	f63f af74 	bhi.w	802f5d4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 802f6ec:	6a3b      	ldr	r3, [r7, #32]
 802f6ee:	791b      	ldrb	r3, [r3, #4]
 802f6f0:	2b02      	cmp	r3, #2
 802f6f2:	bf28      	it	cs
 802f6f4:	2302      	movcs	r3, #2
 802f6f6:	b2db      	uxtb	r3, r3
 802f6f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802f6fc:	429a      	cmp	r2, r3
 802f6fe:	d201      	bcs.n	802f704 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 802f700:	2303      	movs	r3, #3
 802f702:	e001      	b.n	802f708 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 802f704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802f708:	4618      	mov	r0, r3
 802f70a:	3730      	adds	r7, #48	; 0x30
 802f70c:	46bd      	mov	sp, r7
 802f70e:	bd80      	pop	{r7, pc}

0802f710 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 802f710:	b480      	push	{r7}
 802f712:	b083      	sub	sp, #12
 802f714:	af00      	add	r7, sp, #0
 802f716:	6078      	str	r0, [r7, #4]
 802f718:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 802f71a:	683b      	ldr	r3, [r7, #0]
 802f71c:	781a      	ldrb	r2, [r3, #0]
 802f71e:	687b      	ldr	r3, [r7, #4]
 802f720:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 802f722:	683b      	ldr	r3, [r7, #0]
 802f724:	785a      	ldrb	r2, [r3, #1]
 802f726:	687b      	ldr	r3, [r7, #4]
 802f728:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 802f72a:	683b      	ldr	r3, [r7, #0]
 802f72c:	789a      	ldrb	r2, [r3, #2]
 802f72e:	687b      	ldr	r3, [r7, #4]
 802f730:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 802f732:	683b      	ldr	r3, [r7, #0]
 802f734:	78da      	ldrb	r2, [r3, #3]
 802f736:	687b      	ldr	r3, [r7, #4]
 802f738:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 802f73a:	683b      	ldr	r3, [r7, #0]
 802f73c:	791a      	ldrb	r2, [r3, #4]
 802f73e:	687b      	ldr	r3, [r7, #4]
 802f740:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 802f742:	683b      	ldr	r3, [r7, #0]
 802f744:	795a      	ldrb	r2, [r3, #5]
 802f746:	687b      	ldr	r3, [r7, #4]
 802f748:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 802f74a:	683b      	ldr	r3, [r7, #0]
 802f74c:	799a      	ldrb	r2, [r3, #6]
 802f74e:	687b      	ldr	r3, [r7, #4]
 802f750:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 802f752:	683b      	ldr	r3, [r7, #0]
 802f754:	79da      	ldrb	r2, [r3, #7]
 802f756:	687b      	ldr	r3, [r7, #4]
 802f758:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 802f75a:	683b      	ldr	r3, [r7, #0]
 802f75c:	7a1a      	ldrb	r2, [r3, #8]
 802f75e:	687b      	ldr	r3, [r7, #4]
 802f760:	721a      	strb	r2, [r3, #8]
}
 802f762:	bf00      	nop
 802f764:	370c      	adds	r7, #12
 802f766:	46bd      	mov	sp, r7
 802f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f76c:	4770      	bx	lr
	...

0802f770 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 802f770:	b480      	push	{r7}
 802f772:	b087      	sub	sp, #28
 802f774:	af00      	add	r7, sp, #0
 802f776:	60f8      	str	r0, [r7, #12]
 802f778:	60b9      	str	r1, [r7, #8]
 802f77a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 802f77c:	2300      	movs	r3, #0
 802f77e:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802f780:	687b      	ldr	r3, [r7, #4]
 802f782:	781a      	ldrb	r2, [r3, #0]
 802f784:	68bb      	ldr	r3, [r7, #8]
 802f786:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802f788:	687b      	ldr	r3, [r7, #4]
 802f78a:	785a      	ldrb	r2, [r3, #1]
 802f78c:	68bb      	ldr	r3, [r7, #8]
 802f78e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802f790:	687b      	ldr	r3, [r7, #4]
 802f792:	789a      	ldrb	r2, [r3, #2]
 802f794:	68bb      	ldr	r3, [r7, #8]
 802f796:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802f798:	687b      	ldr	r3, [r7, #4]
 802f79a:	78da      	ldrb	r2, [r3, #3]
 802f79c:	68bb      	ldr	r3, [r7, #8]
 802f79e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802f7a0:	687b      	ldr	r3, [r7, #4]
 802f7a2:	3304      	adds	r3, #4
 802f7a4:	781b      	ldrb	r3, [r3, #0]
 802f7a6:	b29a      	uxth	r2, r3
 802f7a8:	687b      	ldr	r3, [r7, #4]
 802f7aa:	3305      	adds	r3, #5
 802f7ac:	781b      	ldrb	r3, [r3, #0]
 802f7ae:	b29b      	uxth	r3, r3
 802f7b0:	021b      	lsls	r3, r3, #8
 802f7b2:	b29b      	uxth	r3, r3
 802f7b4:	4313      	orrs	r3, r2
 802f7b6:	b29a      	uxth	r2, r3
 802f7b8:	68bb      	ldr	r3, [r7, #8]
 802f7ba:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 802f7bc:	687b      	ldr	r3, [r7, #4]
 802f7be:	799a      	ldrb	r2, [r3, #6]
 802f7c0:	68bb      	ldr	r3, [r7, #8]
 802f7c2:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 802f7c4:	68bb      	ldr	r3, [r7, #8]
 802f7c6:	889b      	ldrh	r3, [r3, #4]
 802f7c8:	2b00      	cmp	r3, #0
 802f7ca:	d102      	bne.n	802f7d2 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 802f7cc:	2303      	movs	r3, #3
 802f7ce:	75fb      	strb	r3, [r7, #23]
 802f7d0:	e031      	b.n	802f836 <USBH_ParseEPDesc+0xc6>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 802f7d2:	68bb      	ldr	r3, [r7, #8]
 802f7d4:	889a      	ldrh	r2, [r3, #4]
 802f7d6:	4b38      	ldr	r3, [pc, #224]	; (802f8b8 <USBH_ParseEPDesc+0x148>)
 802f7d8:	4013      	ands	r3, r2
 802f7da:	b29a      	uxth	r2, r3
 802f7dc:	68bb      	ldr	r3, [r7, #8]
 802f7de:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 802f7e0:	68bb      	ldr	r3, [r7, #8]
 802f7e2:	889b      	ldrh	r3, [r3, #4]
 802f7e4:	b21a      	sxth	r2, r3
 802f7e6:	687b      	ldr	r3, [r7, #4]
 802f7e8:	3304      	adds	r3, #4
 802f7ea:	781b      	ldrb	r3, [r3, #0]
 802f7ec:	b299      	uxth	r1, r3
 802f7ee:	687b      	ldr	r3, [r7, #4]
 802f7f0:	3305      	adds	r3, #5
 802f7f2:	781b      	ldrb	r3, [r3, #0]
 802f7f4:	b29b      	uxth	r3, r3
 802f7f6:	021b      	lsls	r3, r3, #8
 802f7f8:	b29b      	uxth	r3, r3
 802f7fa:	430b      	orrs	r3, r1
 802f7fc:	b29b      	uxth	r3, r3
 802f7fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802f802:	2b00      	cmp	r3, #0
 802f804:	d110      	bne.n	802f828 <USBH_ParseEPDesc+0xb8>
 802f806:	687b      	ldr	r3, [r7, #4]
 802f808:	3304      	adds	r3, #4
 802f80a:	781b      	ldrb	r3, [r3, #0]
 802f80c:	b299      	uxth	r1, r3
 802f80e:	687b      	ldr	r3, [r7, #4]
 802f810:	3305      	adds	r3, #5
 802f812:	781b      	ldrb	r3, [r3, #0]
 802f814:	b29b      	uxth	r3, r3
 802f816:	021b      	lsls	r3, r3, #8
 802f818:	b29b      	uxth	r3, r3
 802f81a:	430b      	orrs	r3, r1
 802f81c:	b29b      	uxth	r3, r3
 802f81e:	b21b      	sxth	r3, r3
 802f820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f824:	b21b      	sxth	r3, r3
 802f826:	e001      	b.n	802f82c <USBH_ParseEPDesc+0xbc>
 802f828:	f44f 7300 	mov.w	r3, #512	; 0x200
 802f82c:	4313      	orrs	r3, r2
 802f82e:	b21b      	sxth	r3, r3
 802f830:	b29a      	uxth	r2, r3
 802f832:	68bb      	ldr	r3, [r7, #8]
 802f834:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 802f836:	68fb      	ldr	r3, [r7, #12]
 802f838:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802f83c:	2b00      	cmp	r3, #0
 802f83e:	d116      	bne.n	802f86e <USBH_ParseEPDesc+0xfe>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802f840:	68bb      	ldr	r3, [r7, #8]
 802f842:	78db      	ldrb	r3, [r3, #3]
 802f844:	f003 0303 	and.w	r3, r3, #3
 802f848:	2b01      	cmp	r3, #1
 802f84a:	d005      	beq.n	802f858 <USBH_ParseEPDesc+0xe8>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 802f84c:	68bb      	ldr	r3, [r7, #8]
 802f84e:	78db      	ldrb	r3, [r3, #3]
 802f850:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802f854:	2b03      	cmp	r3, #3
 802f856:	d127      	bne.n	802f8a8 <USBH_ParseEPDesc+0x138>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802f858:	68bb      	ldr	r3, [r7, #8]
 802f85a:	799b      	ldrb	r3, [r3, #6]
 802f85c:	2b00      	cmp	r3, #0
 802f85e:	d003      	beq.n	802f868 <USBH_ParseEPDesc+0xf8>
 802f860:	68bb      	ldr	r3, [r7, #8]
 802f862:	799b      	ldrb	r3, [r3, #6]
 802f864:	2b10      	cmp	r3, #16
 802f866:	d91f      	bls.n	802f8a8 <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 802f868:	2303      	movs	r3, #3
 802f86a:	75fb      	strb	r3, [r7, #23]
 802f86c:	e01c      	b.n	802f8a8 <USBH_ParseEPDesc+0x138>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 802f86e:	68bb      	ldr	r3, [r7, #8]
 802f870:	78db      	ldrb	r3, [r3, #3]
 802f872:	f003 0303 	and.w	r3, r3, #3
 802f876:	2b01      	cmp	r3, #1
 802f878:	d10a      	bne.n	802f890 <USBH_ParseEPDesc+0x120>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802f87a:	68bb      	ldr	r3, [r7, #8]
 802f87c:	799b      	ldrb	r3, [r3, #6]
 802f87e:	2b00      	cmp	r3, #0
 802f880:	d003      	beq.n	802f88a <USBH_ParseEPDesc+0x11a>
 802f882:	68bb      	ldr	r3, [r7, #8]
 802f884:	799b      	ldrb	r3, [r3, #6]
 802f886:	2b10      	cmp	r3, #16
 802f888:	d90e      	bls.n	802f8a8 <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 802f88a:	2303      	movs	r3, #3
 802f88c:	75fb      	strb	r3, [r7, #23]
 802f88e:	e00b      	b.n	802f8a8 <USBH_ParseEPDesc+0x138>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 802f890:	68bb      	ldr	r3, [r7, #8]
 802f892:	78db      	ldrb	r3, [r3, #3]
 802f894:	f003 0303 	and.w	r3, r3, #3
 802f898:	2b03      	cmp	r3, #3
 802f89a:	d105      	bne.n	802f8a8 <USBH_ParseEPDesc+0x138>
    {
      if (ep_descriptor->bInterval == 0U)
 802f89c:	68bb      	ldr	r3, [r7, #8]
 802f89e:	799b      	ldrb	r3, [r3, #6]
 802f8a0:	2b00      	cmp	r3, #0
 802f8a2:	d101      	bne.n	802f8a8 <USBH_ParseEPDesc+0x138>
      {
        status = USBH_NOT_SUPPORTED;
 802f8a4:	2303      	movs	r3, #3
 802f8a6:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 802f8a8:	7dfb      	ldrb	r3, [r7, #23]
}
 802f8aa:	4618      	mov	r0, r3
 802f8ac:	371c      	adds	r7, #28
 802f8ae:	46bd      	mov	sp, r7
 802f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f8b4:	4770      	bx	lr
 802f8b6:	bf00      	nop
 802f8b8:	fffff800 	.word	0xfffff800

0802f8bc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802f8bc:	b480      	push	{r7}
 802f8be:	b087      	sub	sp, #28
 802f8c0:	af00      	add	r7, sp, #0
 802f8c2:	60f8      	str	r0, [r7, #12]
 802f8c4:	60b9      	str	r1, [r7, #8]
 802f8c6:	4613      	mov	r3, r2
 802f8c8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 802f8ca:	68fb      	ldr	r3, [r7, #12]
 802f8cc:	3301      	adds	r3, #1
 802f8ce:	781b      	ldrb	r3, [r3, #0]
 802f8d0:	2b03      	cmp	r3, #3
 802f8d2:	d120      	bne.n	802f916 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 802f8d4:	68fb      	ldr	r3, [r7, #12]
 802f8d6:	781b      	ldrb	r3, [r3, #0]
 802f8d8:	1e9a      	subs	r2, r3, #2
 802f8da:	88fb      	ldrh	r3, [r7, #6]
 802f8dc:	4293      	cmp	r3, r2
 802f8de:	bf28      	it	cs
 802f8e0:	4613      	movcs	r3, r2
 802f8e2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 802f8e4:	68fb      	ldr	r3, [r7, #12]
 802f8e6:	3302      	adds	r3, #2
 802f8e8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 802f8ea:	2300      	movs	r3, #0
 802f8ec:	82fb      	strh	r3, [r7, #22]
 802f8ee:	e00b      	b.n	802f908 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802f8f0:	8afb      	ldrh	r3, [r7, #22]
 802f8f2:	68fa      	ldr	r2, [r7, #12]
 802f8f4:	4413      	add	r3, r2
 802f8f6:	781a      	ldrb	r2, [r3, #0]
 802f8f8:	68bb      	ldr	r3, [r7, #8]
 802f8fa:	701a      	strb	r2, [r3, #0]
      pdest++;
 802f8fc:	68bb      	ldr	r3, [r7, #8]
 802f8fe:	3301      	adds	r3, #1
 802f900:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 802f902:	8afb      	ldrh	r3, [r7, #22]
 802f904:	3302      	adds	r3, #2
 802f906:	82fb      	strh	r3, [r7, #22]
 802f908:	8afa      	ldrh	r2, [r7, #22]
 802f90a:	8abb      	ldrh	r3, [r7, #20]
 802f90c:	429a      	cmp	r2, r3
 802f90e:	d3ef      	bcc.n	802f8f0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 802f910:	68bb      	ldr	r3, [r7, #8]
 802f912:	2200      	movs	r2, #0
 802f914:	701a      	strb	r2, [r3, #0]
  }
}
 802f916:	bf00      	nop
 802f918:	371c      	adds	r7, #28
 802f91a:	46bd      	mov	sp, r7
 802f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f920:	4770      	bx	lr

0802f922 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802f922:	b480      	push	{r7}
 802f924:	b085      	sub	sp, #20
 802f926:	af00      	add	r7, sp, #0
 802f928:	6078      	str	r0, [r7, #4]
 802f92a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 802f92c:	683b      	ldr	r3, [r7, #0]
 802f92e:	881a      	ldrh	r2, [r3, #0]
 802f930:	687b      	ldr	r3, [r7, #4]
 802f932:	781b      	ldrb	r3, [r3, #0]
 802f934:	b29b      	uxth	r3, r3
 802f936:	4413      	add	r3, r2
 802f938:	b29a      	uxth	r2, r3
 802f93a:	683b      	ldr	r3, [r7, #0]
 802f93c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 802f93e:	687b      	ldr	r3, [r7, #4]
 802f940:	781b      	ldrb	r3, [r3, #0]
 802f942:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802f944:	687b      	ldr	r3, [r7, #4]
 802f946:	4413      	add	r3, r2
 802f948:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802f94a:	68fb      	ldr	r3, [r7, #12]
}
 802f94c:	4618      	mov	r0, r3
 802f94e:	3714      	adds	r7, #20
 802f950:	46bd      	mov	sp, r7
 802f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f956:	4770      	bx	lr

0802f958 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 802f958:	b580      	push	{r7, lr}
 802f95a:	b086      	sub	sp, #24
 802f95c:	af00      	add	r7, sp, #0
 802f95e:	60f8      	str	r0, [r7, #12]
 802f960:	60b9      	str	r1, [r7, #8]
 802f962:	4613      	mov	r3, r2
 802f964:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 802f966:	2301      	movs	r3, #1
 802f968:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 802f96a:	68fb      	ldr	r3, [r7, #12]
 802f96c:	789b      	ldrb	r3, [r3, #2]
 802f96e:	2b01      	cmp	r3, #1
 802f970:	d002      	beq.n	802f978 <USBH_CtlReq+0x20>
 802f972:	2b02      	cmp	r3, #2
 802f974:	d01d      	beq.n	802f9b2 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 802f976:	e043      	b.n	802fa00 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 802f978:	68fb      	ldr	r3, [r7, #12]
 802f97a:	68ba      	ldr	r2, [r7, #8]
 802f97c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802f97e:	68fb      	ldr	r3, [r7, #12]
 802f980:	88fa      	ldrh	r2, [r7, #6]
 802f982:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802f984:	68fb      	ldr	r3, [r7, #12]
 802f986:	2201      	movs	r2, #1
 802f988:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 802f98a:	68fb      	ldr	r3, [r7, #12]
 802f98c:	2202      	movs	r2, #2
 802f98e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802f990:	2301      	movs	r3, #1
 802f992:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802f994:	68fb      	ldr	r3, [r7, #12]
 802f996:	2203      	movs	r2, #3
 802f998:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802f99c:	68fb      	ldr	r3, [r7, #12]
 802f99e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802f9a2:	68fb      	ldr	r3, [r7, #12]
 802f9a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802f9a8:	2200      	movs	r2, #0
 802f9aa:	4619      	mov	r1, r3
 802f9ac:	f006 fc76 	bl	803629c <osMessagePut>
      break;
 802f9b0:	e026      	b.n	802fa00 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 802f9b2:	68f8      	ldr	r0, [r7, #12]
 802f9b4:	f000 f82a 	bl	802fa0c <USBH_HandleControl>
 802f9b8:	4603      	mov	r3, r0
 802f9ba:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802f9bc:	7dfb      	ldrb	r3, [r7, #23]
 802f9be:	2b00      	cmp	r3, #0
 802f9c0:	d002      	beq.n	802f9c8 <USBH_CtlReq+0x70>
 802f9c2:	7dfb      	ldrb	r3, [r7, #23]
 802f9c4:	2b03      	cmp	r3, #3
 802f9c6:	d106      	bne.n	802f9d6 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 802f9c8:	68fb      	ldr	r3, [r7, #12]
 802f9ca:	2201      	movs	r2, #1
 802f9cc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 802f9ce:	68fb      	ldr	r3, [r7, #12]
 802f9d0:	2200      	movs	r2, #0
 802f9d2:	761a      	strb	r2, [r3, #24]
 802f9d4:	e005      	b.n	802f9e2 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 802f9d6:	7dfb      	ldrb	r3, [r7, #23]
 802f9d8:	2b02      	cmp	r3, #2
 802f9da:	d102      	bne.n	802f9e2 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 802f9dc:	68fb      	ldr	r3, [r7, #12]
 802f9de:	2201      	movs	r2, #1
 802f9e0:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802f9e2:	68fb      	ldr	r3, [r7, #12]
 802f9e4:	2203      	movs	r2, #3
 802f9e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802f9ea:	68fb      	ldr	r3, [r7, #12]
 802f9ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802f9f0:	68fb      	ldr	r3, [r7, #12]
 802f9f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802f9f6:	2200      	movs	r2, #0
 802f9f8:	4619      	mov	r1, r3
 802f9fa:	f006 fc4f 	bl	803629c <osMessagePut>
      break;
 802f9fe:	bf00      	nop
  }
  return status;
 802fa00:	7dfb      	ldrb	r3, [r7, #23]
}
 802fa02:	4618      	mov	r0, r3
 802fa04:	3718      	adds	r7, #24
 802fa06:	46bd      	mov	sp, r7
 802fa08:	bd80      	pop	{r7, pc}
	...

0802fa0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 802fa0c:	b580      	push	{r7, lr}
 802fa0e:	b086      	sub	sp, #24
 802fa10:	af02      	add	r7, sp, #8
 802fa12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 802fa14:	2301      	movs	r3, #1
 802fa16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802fa18:	2300      	movs	r3, #0
 802fa1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 802fa1c:	687b      	ldr	r3, [r7, #4]
 802fa1e:	7e1b      	ldrb	r3, [r3, #24]
 802fa20:	3b01      	subs	r3, #1
 802fa22:	2b0a      	cmp	r3, #10
 802fa24:	f200 8229 	bhi.w	802fe7a <USBH_HandleControl+0x46e>
 802fa28:	a201      	add	r2, pc, #4	; (adr r2, 802fa30 <USBH_HandleControl+0x24>)
 802fa2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fa2e:	bf00      	nop
 802fa30:	0802fa5d 	.word	0x0802fa5d
 802fa34:	0802fa77 	.word	0x0802fa77
 802fa38:	0802fb19 	.word	0x0802fb19
 802fa3c:	0802fb3f 	.word	0x0802fb3f
 802fa40:	0802fbcb 	.word	0x0802fbcb
 802fa44:	0802fbf5 	.word	0x0802fbf5
 802fa48:	0802fcb7 	.word	0x0802fcb7
 802fa4c:	0802fcd9 	.word	0x0802fcd9
 802fa50:	0802fd6b 	.word	0x0802fd6b
 802fa54:	0802fd91 	.word	0x0802fd91
 802fa58:	0802fe23 	.word	0x0802fe23
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 802fa5c:	687b      	ldr	r3, [r7, #4]
 802fa5e:	f103 0110 	add.w	r1, r3, #16
 802fa62:	687b      	ldr	r3, [r7, #4]
 802fa64:	795b      	ldrb	r3, [r3, #5]
 802fa66:	461a      	mov	r2, r3
 802fa68:	6878      	ldr	r0, [r7, #4]
 802fa6a:	f000 fa17 	bl	802fe9c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 802fa6e:	687b      	ldr	r3, [r7, #4]
 802fa70:	2202      	movs	r2, #2
 802fa72:	761a      	strb	r2, [r3, #24]
      break;
 802fa74:	e20c      	b.n	802fe90 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802fa76:	687b      	ldr	r3, [r7, #4]
 802fa78:	795b      	ldrb	r3, [r3, #5]
 802fa7a:	4619      	mov	r1, r3
 802fa7c:	6878      	ldr	r0, [r7, #4]
 802fa7e:	f00a f90b 	bl	8039c98 <USBH_LL_GetURBState>
 802fa82:	4603      	mov	r3, r0
 802fa84:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802fa86:	7bbb      	ldrb	r3, [r7, #14]
 802fa88:	2b01      	cmp	r3, #1
 802fa8a:	d12c      	bne.n	802fae6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 802fa8c:	687b      	ldr	r3, [r7, #4]
 802fa8e:	7c1b      	ldrb	r3, [r3, #16]
 802fa90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802fa94:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802fa96:	687b      	ldr	r3, [r7, #4]
 802fa98:	8adb      	ldrh	r3, [r3, #22]
 802fa9a:	2b00      	cmp	r3, #0
 802fa9c:	d00a      	beq.n	802fab4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 802fa9e:	7b7b      	ldrb	r3, [r7, #13]
 802faa0:	2b80      	cmp	r3, #128	; 0x80
 802faa2:	d103      	bne.n	802faac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802faa4:	687b      	ldr	r3, [r7, #4]
 802faa6:	2203      	movs	r2, #3
 802faa8:	761a      	strb	r2, [r3, #24]
 802faaa:	e00d      	b.n	802fac8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 802faac:	687b      	ldr	r3, [r7, #4]
 802faae:	2205      	movs	r2, #5
 802fab0:	761a      	strb	r2, [r3, #24]
 802fab2:	e009      	b.n	802fac8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 802fab4:	7b7b      	ldrb	r3, [r7, #13]
 802fab6:	2b80      	cmp	r3, #128	; 0x80
 802fab8:	d103      	bne.n	802fac2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 802faba:	687b      	ldr	r3, [r7, #4]
 802fabc:	2209      	movs	r2, #9
 802fabe:	761a      	strb	r2, [r3, #24]
 802fac0:	e002      	b.n	802fac8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 802fac2:	687b      	ldr	r3, [r7, #4]
 802fac4:	2207      	movs	r2, #7
 802fac6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fac8:	687b      	ldr	r3, [r7, #4]
 802faca:	2203      	movs	r2, #3
 802facc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fad0:	687b      	ldr	r3, [r7, #4]
 802fad2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fad6:	687b      	ldr	r3, [r7, #4]
 802fad8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fadc:	2200      	movs	r2, #0
 802fade:	4619      	mov	r1, r3
 802fae0:	f006 fbdc 	bl	803629c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802fae4:	e1cb      	b.n	802fe7e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802fae6:	7bbb      	ldrb	r3, [r7, #14]
 802fae8:	2b04      	cmp	r3, #4
 802faea:	d003      	beq.n	802faf4 <USBH_HandleControl+0xe8>
 802faec:	7bbb      	ldrb	r3, [r7, #14]
 802faee:	2b02      	cmp	r3, #2
 802faf0:	f040 81c5 	bne.w	802fe7e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 802faf4:	687b      	ldr	r3, [r7, #4]
 802faf6:	220b      	movs	r2, #11
 802faf8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fafa:	687b      	ldr	r3, [r7, #4]
 802fafc:	2203      	movs	r2, #3
 802fafe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fb02:	687b      	ldr	r3, [r7, #4]
 802fb04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fb08:	687b      	ldr	r3, [r7, #4]
 802fb0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fb0e:	2200      	movs	r2, #0
 802fb10:	4619      	mov	r1, r3
 802fb12:	f006 fbc3 	bl	803629c <osMessagePut>
      break;
 802fb16:	e1b2      	b.n	802fe7e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 802fb18:	687b      	ldr	r3, [r7, #4]
 802fb1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802fb1e:	b29a      	uxth	r2, r3
 802fb20:	687b      	ldr	r3, [r7, #4]
 802fb22:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802fb24:	687b      	ldr	r3, [r7, #4]
 802fb26:	6899      	ldr	r1, [r3, #8]
 802fb28:	687b      	ldr	r3, [r7, #4]
 802fb2a:	899a      	ldrh	r2, [r3, #12]
 802fb2c:	687b      	ldr	r3, [r7, #4]
 802fb2e:	791b      	ldrb	r3, [r3, #4]
 802fb30:	6878      	ldr	r0, [r7, #4]
 802fb32:	f000 f9f2 	bl	802ff1a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802fb36:	687b      	ldr	r3, [r7, #4]
 802fb38:	2204      	movs	r2, #4
 802fb3a:	761a      	strb	r2, [r3, #24]
      break;
 802fb3c:	e1a8      	b.n	802fe90 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802fb3e:	687b      	ldr	r3, [r7, #4]
 802fb40:	791b      	ldrb	r3, [r3, #4]
 802fb42:	4619      	mov	r1, r3
 802fb44:	6878      	ldr	r0, [r7, #4]
 802fb46:	f00a f8a7 	bl	8039c98 <USBH_LL_GetURBState>
 802fb4a:	4603      	mov	r3, r0
 802fb4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802fb4e:	7bbb      	ldrb	r3, [r7, #14]
 802fb50:	2b01      	cmp	r3, #1
 802fb52:	d110      	bne.n	802fb76 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802fb54:	687b      	ldr	r3, [r7, #4]
 802fb56:	2209      	movs	r2, #9
 802fb58:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fb5a:	687b      	ldr	r3, [r7, #4]
 802fb5c:	2203      	movs	r2, #3
 802fb5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fb62:	687b      	ldr	r3, [r7, #4]
 802fb64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fb68:	687b      	ldr	r3, [r7, #4]
 802fb6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fb6e:	2200      	movs	r2, #0
 802fb70:	4619      	mov	r1, r3
 802fb72:	f006 fb93 	bl	803629c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802fb76:	7bbb      	ldrb	r3, [r7, #14]
 802fb78:	2b05      	cmp	r3, #5
 802fb7a:	d110      	bne.n	802fb9e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802fb7c:	2303      	movs	r3, #3
 802fb7e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fb80:	687b      	ldr	r3, [r7, #4]
 802fb82:	2203      	movs	r2, #3
 802fb84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fb88:	687b      	ldr	r3, [r7, #4]
 802fb8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fb8e:	687b      	ldr	r3, [r7, #4]
 802fb90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fb94:	2200      	movs	r2, #0
 802fb96:	4619      	mov	r1, r3
 802fb98:	f006 fb80 	bl	803629c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802fb9c:	e171      	b.n	802fe82 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 802fb9e:	7bbb      	ldrb	r3, [r7, #14]
 802fba0:	2b04      	cmp	r3, #4
 802fba2:	f040 816e 	bne.w	802fe82 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 802fba6:	687b      	ldr	r3, [r7, #4]
 802fba8:	220b      	movs	r2, #11
 802fbaa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fbac:	687b      	ldr	r3, [r7, #4]
 802fbae:	2203      	movs	r2, #3
 802fbb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fbb4:	687b      	ldr	r3, [r7, #4]
 802fbb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fbba:	687b      	ldr	r3, [r7, #4]
 802fbbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fbc0:	2200      	movs	r2, #0
 802fbc2:	4619      	mov	r1, r3
 802fbc4:	f006 fb6a 	bl	803629c <osMessagePut>
      break;
 802fbc8:	e15b      	b.n	802fe82 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 802fbca:	687b      	ldr	r3, [r7, #4]
 802fbcc:	6899      	ldr	r1, [r3, #8]
 802fbce:	687b      	ldr	r3, [r7, #4]
 802fbd0:	899a      	ldrh	r2, [r3, #12]
 802fbd2:	687b      	ldr	r3, [r7, #4]
 802fbd4:	795b      	ldrb	r3, [r3, #5]
 802fbd6:	2001      	movs	r0, #1
 802fbd8:	9000      	str	r0, [sp, #0]
 802fbda:	6878      	ldr	r0, [r7, #4]
 802fbdc:	f000 f978 	bl	802fed0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 802fbe0:	687b      	ldr	r3, [r7, #4]
 802fbe2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802fbe6:	b29a      	uxth	r2, r3
 802fbe8:	687b      	ldr	r3, [r7, #4]
 802fbea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 802fbec:	687b      	ldr	r3, [r7, #4]
 802fbee:	2206      	movs	r2, #6
 802fbf0:	761a      	strb	r2, [r3, #24]
      break;
 802fbf2:	e14d      	b.n	802fe90 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802fbf4:	687b      	ldr	r3, [r7, #4]
 802fbf6:	795b      	ldrb	r3, [r3, #5]
 802fbf8:	4619      	mov	r1, r3
 802fbfa:	6878      	ldr	r0, [r7, #4]
 802fbfc:	f00a f84c 	bl	8039c98 <USBH_LL_GetURBState>
 802fc00:	4603      	mov	r3, r0
 802fc02:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802fc04:	7bbb      	ldrb	r3, [r7, #14]
 802fc06:	2b01      	cmp	r3, #1
 802fc08:	d111      	bne.n	802fc2e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 802fc0a:	687b      	ldr	r3, [r7, #4]
 802fc0c:	2207      	movs	r2, #7
 802fc0e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fc10:	687b      	ldr	r3, [r7, #4]
 802fc12:	2203      	movs	r2, #3
 802fc14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fc18:	687b      	ldr	r3, [r7, #4]
 802fc1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fc1e:	687b      	ldr	r3, [r7, #4]
 802fc20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fc24:	2200      	movs	r2, #0
 802fc26:	4619      	mov	r1, r3
 802fc28:	f006 fb38 	bl	803629c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802fc2c:	e12b      	b.n	802fe86 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 802fc2e:	7bbb      	ldrb	r3, [r7, #14]
 802fc30:	2b05      	cmp	r3, #5
 802fc32:	d113      	bne.n	802fc5c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 802fc34:	687b      	ldr	r3, [r7, #4]
 802fc36:	220c      	movs	r2, #12
 802fc38:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 802fc3a:	2303      	movs	r3, #3
 802fc3c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fc3e:	687b      	ldr	r3, [r7, #4]
 802fc40:	2203      	movs	r2, #3
 802fc42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fc46:	687b      	ldr	r3, [r7, #4]
 802fc48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fc4c:	687b      	ldr	r3, [r7, #4]
 802fc4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fc52:	2200      	movs	r2, #0
 802fc54:	4619      	mov	r1, r3
 802fc56:	f006 fb21 	bl	803629c <osMessagePut>
      break;
 802fc5a:	e114      	b.n	802fe86 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 802fc5c:	7bbb      	ldrb	r3, [r7, #14]
 802fc5e:	2b02      	cmp	r3, #2
 802fc60:	d111      	bne.n	802fc86 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 802fc62:	687b      	ldr	r3, [r7, #4]
 802fc64:	2205      	movs	r2, #5
 802fc66:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fc68:	687b      	ldr	r3, [r7, #4]
 802fc6a:	2203      	movs	r2, #3
 802fc6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fc70:	687b      	ldr	r3, [r7, #4]
 802fc72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fc76:	687b      	ldr	r3, [r7, #4]
 802fc78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fc7c:	2200      	movs	r2, #0
 802fc7e:	4619      	mov	r1, r3
 802fc80:	f006 fb0c 	bl	803629c <osMessagePut>
      break;
 802fc84:	e0ff      	b.n	802fe86 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 802fc86:	7bbb      	ldrb	r3, [r7, #14]
 802fc88:	2b04      	cmp	r3, #4
 802fc8a:	f040 80fc 	bne.w	802fe86 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 802fc8e:	687b      	ldr	r3, [r7, #4]
 802fc90:	220b      	movs	r2, #11
 802fc92:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802fc94:	2302      	movs	r3, #2
 802fc96:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fc98:	687b      	ldr	r3, [r7, #4]
 802fc9a:	2203      	movs	r2, #3
 802fc9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fca0:	687b      	ldr	r3, [r7, #4]
 802fca2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fca6:	687b      	ldr	r3, [r7, #4]
 802fca8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fcac:	2200      	movs	r2, #0
 802fcae:	4619      	mov	r1, r3
 802fcb0:	f006 faf4 	bl	803629c <osMessagePut>
      break;
 802fcb4:	e0e7      	b.n	802fe86 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 802fcb6:	687b      	ldr	r3, [r7, #4]
 802fcb8:	791b      	ldrb	r3, [r3, #4]
 802fcba:	2200      	movs	r2, #0
 802fcbc:	2100      	movs	r1, #0
 802fcbe:	6878      	ldr	r0, [r7, #4]
 802fcc0:	f000 f92b 	bl	802ff1a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802fcc4:	687b      	ldr	r3, [r7, #4]
 802fcc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802fcca:	b29a      	uxth	r2, r3
 802fccc:	687b      	ldr	r3, [r7, #4]
 802fcce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 802fcd0:	687b      	ldr	r3, [r7, #4]
 802fcd2:	2208      	movs	r2, #8
 802fcd4:	761a      	strb	r2, [r3, #24]

      break;
 802fcd6:	e0db      	b.n	802fe90 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802fcd8:	687b      	ldr	r3, [r7, #4]
 802fcda:	791b      	ldrb	r3, [r3, #4]
 802fcdc:	4619      	mov	r1, r3
 802fcde:	6878      	ldr	r0, [r7, #4]
 802fce0:	f009 ffda 	bl	8039c98 <USBH_LL_GetURBState>
 802fce4:	4603      	mov	r3, r0
 802fce6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802fce8:	7bbb      	ldrb	r3, [r7, #14]
 802fcea:	2b01      	cmp	r3, #1
 802fcec:	d113      	bne.n	802fd16 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 802fcee:	687b      	ldr	r3, [r7, #4]
 802fcf0:	220d      	movs	r2, #13
 802fcf2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802fcf4:	2300      	movs	r3, #0
 802fcf6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fcf8:	687b      	ldr	r3, [r7, #4]
 802fcfa:	2203      	movs	r2, #3
 802fcfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fd00:	687b      	ldr	r3, [r7, #4]
 802fd02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fd06:	687b      	ldr	r3, [r7, #4]
 802fd08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fd0c:	2200      	movs	r2, #0
 802fd0e:	4619      	mov	r1, r3
 802fd10:	f006 fac4 	bl	803629c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802fd14:	e0b9      	b.n	802fe8a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 802fd16:	7bbb      	ldrb	r3, [r7, #14]
 802fd18:	2b04      	cmp	r3, #4
 802fd1a:	d111      	bne.n	802fd40 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 802fd1c:	687b      	ldr	r3, [r7, #4]
 802fd1e:	220b      	movs	r2, #11
 802fd20:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fd22:	687b      	ldr	r3, [r7, #4]
 802fd24:	2203      	movs	r2, #3
 802fd26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fd2a:	687b      	ldr	r3, [r7, #4]
 802fd2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fd30:	687b      	ldr	r3, [r7, #4]
 802fd32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fd36:	2200      	movs	r2, #0
 802fd38:	4619      	mov	r1, r3
 802fd3a:	f006 faaf 	bl	803629c <osMessagePut>
      break;
 802fd3e:	e0a4      	b.n	802fe8a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 802fd40:	7bbb      	ldrb	r3, [r7, #14]
 802fd42:	2b05      	cmp	r3, #5
 802fd44:	f040 80a1 	bne.w	802fe8a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 802fd48:	2303      	movs	r3, #3
 802fd4a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fd4c:	687b      	ldr	r3, [r7, #4]
 802fd4e:	2203      	movs	r2, #3
 802fd50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fd54:	687b      	ldr	r3, [r7, #4]
 802fd56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fd5a:	687b      	ldr	r3, [r7, #4]
 802fd5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fd60:	2200      	movs	r2, #0
 802fd62:	4619      	mov	r1, r3
 802fd64:	f006 fa9a 	bl	803629c <osMessagePut>
      break;
 802fd68:	e08f      	b.n	802fe8a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 802fd6a:	687b      	ldr	r3, [r7, #4]
 802fd6c:	795b      	ldrb	r3, [r3, #5]
 802fd6e:	2201      	movs	r2, #1
 802fd70:	9200      	str	r2, [sp, #0]
 802fd72:	2200      	movs	r2, #0
 802fd74:	2100      	movs	r1, #0
 802fd76:	6878      	ldr	r0, [r7, #4]
 802fd78:	f000 f8aa 	bl	802fed0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802fd7c:	687b      	ldr	r3, [r7, #4]
 802fd7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802fd82:	b29a      	uxth	r2, r3
 802fd84:	687b      	ldr	r3, [r7, #4]
 802fd86:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 802fd88:	687b      	ldr	r3, [r7, #4]
 802fd8a:	220a      	movs	r2, #10
 802fd8c:	761a      	strb	r2, [r3, #24]
      break;
 802fd8e:	e07f      	b.n	802fe90 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802fd90:	687b      	ldr	r3, [r7, #4]
 802fd92:	795b      	ldrb	r3, [r3, #5]
 802fd94:	4619      	mov	r1, r3
 802fd96:	6878      	ldr	r0, [r7, #4]
 802fd98:	f009 ff7e 	bl	8039c98 <USBH_LL_GetURBState>
 802fd9c:	4603      	mov	r3, r0
 802fd9e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 802fda0:	7bbb      	ldrb	r3, [r7, #14]
 802fda2:	2b01      	cmp	r3, #1
 802fda4:	d113      	bne.n	802fdce <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 802fda6:	2300      	movs	r3, #0
 802fda8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 802fdaa:	687b      	ldr	r3, [r7, #4]
 802fdac:	220d      	movs	r2, #13
 802fdae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fdb0:	687b      	ldr	r3, [r7, #4]
 802fdb2:	2203      	movs	r2, #3
 802fdb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fdb8:	687b      	ldr	r3, [r7, #4]
 802fdba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fdbe:	687b      	ldr	r3, [r7, #4]
 802fdc0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fdc4:	2200      	movs	r2, #0
 802fdc6:	4619      	mov	r1, r3
 802fdc8:	f006 fa68 	bl	803629c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802fdcc:	e05f      	b.n	802fe8e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 802fdce:	7bbb      	ldrb	r3, [r7, #14]
 802fdd0:	2b02      	cmp	r3, #2
 802fdd2:	d111      	bne.n	802fdf8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 802fdd4:	687b      	ldr	r3, [r7, #4]
 802fdd6:	2209      	movs	r2, #9
 802fdd8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fdda:	687b      	ldr	r3, [r7, #4]
 802fddc:	2203      	movs	r2, #3
 802fdde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fde2:	687b      	ldr	r3, [r7, #4]
 802fde4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fde8:	687b      	ldr	r3, [r7, #4]
 802fdea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fdee:	2200      	movs	r2, #0
 802fdf0:	4619      	mov	r1, r3
 802fdf2:	f006 fa53 	bl	803629c <osMessagePut>
      break;
 802fdf6:	e04a      	b.n	802fe8e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 802fdf8:	7bbb      	ldrb	r3, [r7, #14]
 802fdfa:	2b04      	cmp	r3, #4
 802fdfc:	d147      	bne.n	802fe8e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 802fdfe:	687b      	ldr	r3, [r7, #4]
 802fe00:	220b      	movs	r2, #11
 802fe02:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802fe04:	687b      	ldr	r3, [r7, #4]
 802fe06:	2203      	movs	r2, #3
 802fe08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802fe0c:	687b      	ldr	r3, [r7, #4]
 802fe0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802fe12:	687b      	ldr	r3, [r7, #4]
 802fe14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802fe18:	2200      	movs	r2, #0
 802fe1a:	4619      	mov	r1, r3
 802fe1c:	f006 fa3e 	bl	803629c <osMessagePut>
      break;
 802fe20:	e035      	b.n	802fe8e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802fe22:	687b      	ldr	r3, [r7, #4]
 802fe24:	7e5b      	ldrb	r3, [r3, #25]
 802fe26:	3301      	adds	r3, #1
 802fe28:	b2da      	uxtb	r2, r3
 802fe2a:	687b      	ldr	r3, [r7, #4]
 802fe2c:	765a      	strb	r2, [r3, #25]
 802fe2e:	687b      	ldr	r3, [r7, #4]
 802fe30:	7e5b      	ldrb	r3, [r3, #25]
 802fe32:	2b02      	cmp	r3, #2
 802fe34:	d806      	bhi.n	802fe44 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802fe36:	687b      	ldr	r3, [r7, #4]
 802fe38:	2201      	movs	r2, #1
 802fe3a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 802fe3c:	687b      	ldr	r3, [r7, #4]
 802fe3e:	2201      	movs	r2, #1
 802fe40:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802fe42:	e025      	b.n	802fe90 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802fe44:	687b      	ldr	r3, [r7, #4]
 802fe46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802fe4a:	2106      	movs	r1, #6
 802fe4c:	6878      	ldr	r0, [r7, #4]
 802fe4e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 802fe50:	687b      	ldr	r3, [r7, #4]
 802fe52:	2200      	movs	r2, #0
 802fe54:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802fe56:	687b      	ldr	r3, [r7, #4]
 802fe58:	795b      	ldrb	r3, [r3, #5]
 802fe5a:	4619      	mov	r1, r3
 802fe5c:	6878      	ldr	r0, [r7, #4]
 802fe5e:	f000 f90d 	bl	803007c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802fe62:	687b      	ldr	r3, [r7, #4]
 802fe64:	791b      	ldrb	r3, [r3, #4]
 802fe66:	4619      	mov	r1, r3
 802fe68:	6878      	ldr	r0, [r7, #4]
 802fe6a:	f000 f907 	bl	803007c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 802fe6e:	687b      	ldr	r3, [r7, #4]
 802fe70:	2200      	movs	r2, #0
 802fe72:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 802fe74:	2302      	movs	r3, #2
 802fe76:	73fb      	strb	r3, [r7, #15]
      break;
 802fe78:	e00a      	b.n	802fe90 <USBH_HandleControl+0x484>

    default:
      break;
 802fe7a:	bf00      	nop
 802fe7c:	e008      	b.n	802fe90 <USBH_HandleControl+0x484>
      break;
 802fe7e:	bf00      	nop
 802fe80:	e006      	b.n	802fe90 <USBH_HandleControl+0x484>
      break;
 802fe82:	bf00      	nop
 802fe84:	e004      	b.n	802fe90 <USBH_HandleControl+0x484>
      break;
 802fe86:	bf00      	nop
 802fe88:	e002      	b.n	802fe90 <USBH_HandleControl+0x484>
      break;
 802fe8a:	bf00      	nop
 802fe8c:	e000      	b.n	802fe90 <USBH_HandleControl+0x484>
      break;
 802fe8e:	bf00      	nop
  }

  return status;
 802fe90:	7bfb      	ldrb	r3, [r7, #15]
}
 802fe92:	4618      	mov	r0, r3
 802fe94:	3710      	adds	r7, #16
 802fe96:	46bd      	mov	sp, r7
 802fe98:	bd80      	pop	{r7, pc}
 802fe9a:	bf00      	nop

0802fe9c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 802fe9c:	b580      	push	{r7, lr}
 802fe9e:	b088      	sub	sp, #32
 802fea0:	af04      	add	r7, sp, #16
 802fea2:	60f8      	str	r0, [r7, #12]
 802fea4:	60b9      	str	r1, [r7, #8]
 802fea6:	4613      	mov	r3, r2
 802fea8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802feaa:	79f9      	ldrb	r1, [r7, #7]
 802feac:	2300      	movs	r3, #0
 802feae:	9303      	str	r3, [sp, #12]
 802feb0:	2308      	movs	r3, #8
 802feb2:	9302      	str	r3, [sp, #8]
 802feb4:	68bb      	ldr	r3, [r7, #8]
 802feb6:	9301      	str	r3, [sp, #4]
 802feb8:	2300      	movs	r3, #0
 802feba:	9300      	str	r3, [sp, #0]
 802febc:	2300      	movs	r3, #0
 802febe:	2200      	movs	r2, #0
 802fec0:	68f8      	ldr	r0, [r7, #12]
 802fec2:	f009 feb8 	bl	8039c36 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802fec6:	2300      	movs	r3, #0
}
 802fec8:	4618      	mov	r0, r3
 802feca:	3710      	adds	r7, #16
 802fecc:	46bd      	mov	sp, r7
 802fece:	bd80      	pop	{r7, pc}

0802fed0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 802fed0:	b580      	push	{r7, lr}
 802fed2:	b088      	sub	sp, #32
 802fed4:	af04      	add	r7, sp, #16
 802fed6:	60f8      	str	r0, [r7, #12]
 802fed8:	60b9      	str	r1, [r7, #8]
 802feda:	4611      	mov	r1, r2
 802fedc:	461a      	mov	r2, r3
 802fede:	460b      	mov	r3, r1
 802fee0:	80fb      	strh	r3, [r7, #6]
 802fee2:	4613      	mov	r3, r2
 802fee4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802fee6:	68fb      	ldr	r3, [r7, #12]
 802fee8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802feec:	2b00      	cmp	r3, #0
 802feee:	d001      	beq.n	802fef4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 802fef0:	2300      	movs	r3, #0
 802fef2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802fef4:	7979      	ldrb	r1, [r7, #5]
 802fef6:	7e3b      	ldrb	r3, [r7, #24]
 802fef8:	9303      	str	r3, [sp, #12]
 802fefa:	88fb      	ldrh	r3, [r7, #6]
 802fefc:	9302      	str	r3, [sp, #8]
 802fefe:	68bb      	ldr	r3, [r7, #8]
 802ff00:	9301      	str	r3, [sp, #4]
 802ff02:	2301      	movs	r3, #1
 802ff04:	9300      	str	r3, [sp, #0]
 802ff06:	2300      	movs	r3, #0
 802ff08:	2200      	movs	r2, #0
 802ff0a:	68f8      	ldr	r0, [r7, #12]
 802ff0c:	f009 fe93 	bl	8039c36 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 802ff10:	2300      	movs	r3, #0
}
 802ff12:	4618      	mov	r0, r3
 802ff14:	3710      	adds	r7, #16
 802ff16:	46bd      	mov	sp, r7
 802ff18:	bd80      	pop	{r7, pc}

0802ff1a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 802ff1a:	b580      	push	{r7, lr}
 802ff1c:	b088      	sub	sp, #32
 802ff1e:	af04      	add	r7, sp, #16
 802ff20:	60f8      	str	r0, [r7, #12]
 802ff22:	60b9      	str	r1, [r7, #8]
 802ff24:	4611      	mov	r1, r2
 802ff26:	461a      	mov	r2, r3
 802ff28:	460b      	mov	r3, r1
 802ff2a:	80fb      	strh	r3, [r7, #6]
 802ff2c:	4613      	mov	r3, r2
 802ff2e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802ff30:	7979      	ldrb	r1, [r7, #5]
 802ff32:	2300      	movs	r3, #0
 802ff34:	9303      	str	r3, [sp, #12]
 802ff36:	88fb      	ldrh	r3, [r7, #6]
 802ff38:	9302      	str	r3, [sp, #8]
 802ff3a:	68bb      	ldr	r3, [r7, #8]
 802ff3c:	9301      	str	r3, [sp, #4]
 802ff3e:	2301      	movs	r3, #1
 802ff40:	9300      	str	r3, [sp, #0]
 802ff42:	2300      	movs	r3, #0
 802ff44:	2201      	movs	r2, #1
 802ff46:	68f8      	ldr	r0, [r7, #12]
 802ff48:	f009 fe75 	bl	8039c36 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802ff4c:	2300      	movs	r3, #0

}
 802ff4e:	4618      	mov	r0, r3
 802ff50:	3710      	adds	r7, #16
 802ff52:	46bd      	mov	sp, r7
 802ff54:	bd80      	pop	{r7, pc}

0802ff56 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802ff56:	b580      	push	{r7, lr}
 802ff58:	b088      	sub	sp, #32
 802ff5a:	af04      	add	r7, sp, #16
 802ff5c:	60f8      	str	r0, [r7, #12]
 802ff5e:	60b9      	str	r1, [r7, #8]
 802ff60:	4611      	mov	r1, r2
 802ff62:	461a      	mov	r2, r3
 802ff64:	460b      	mov	r3, r1
 802ff66:	80fb      	strh	r3, [r7, #6]
 802ff68:	4613      	mov	r3, r2
 802ff6a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802ff6c:	68fb      	ldr	r3, [r7, #12]
 802ff6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802ff72:	2b00      	cmp	r3, #0
 802ff74:	d001      	beq.n	802ff7a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 802ff76:	2300      	movs	r3, #0
 802ff78:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802ff7a:	7979      	ldrb	r1, [r7, #5]
 802ff7c:	7e3b      	ldrb	r3, [r7, #24]
 802ff7e:	9303      	str	r3, [sp, #12]
 802ff80:	88fb      	ldrh	r3, [r7, #6]
 802ff82:	9302      	str	r3, [sp, #8]
 802ff84:	68bb      	ldr	r3, [r7, #8]
 802ff86:	9301      	str	r3, [sp, #4]
 802ff88:	2301      	movs	r3, #1
 802ff8a:	9300      	str	r3, [sp, #0]
 802ff8c:	2302      	movs	r3, #2
 802ff8e:	2200      	movs	r2, #0
 802ff90:	68f8      	ldr	r0, [r7, #12]
 802ff92:	f009 fe50 	bl	8039c36 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 802ff96:	2300      	movs	r3, #0
}
 802ff98:	4618      	mov	r0, r3
 802ff9a:	3710      	adds	r7, #16
 802ff9c:	46bd      	mov	sp, r7
 802ff9e:	bd80      	pop	{r7, pc}

0802ffa0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 802ffa0:	b580      	push	{r7, lr}
 802ffa2:	b088      	sub	sp, #32
 802ffa4:	af04      	add	r7, sp, #16
 802ffa6:	60f8      	str	r0, [r7, #12]
 802ffa8:	60b9      	str	r1, [r7, #8]
 802ffaa:	4611      	mov	r1, r2
 802ffac:	461a      	mov	r2, r3
 802ffae:	460b      	mov	r3, r1
 802ffb0:	80fb      	strh	r3, [r7, #6]
 802ffb2:	4613      	mov	r3, r2
 802ffb4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802ffb6:	7979      	ldrb	r1, [r7, #5]
 802ffb8:	2300      	movs	r3, #0
 802ffba:	9303      	str	r3, [sp, #12]
 802ffbc:	88fb      	ldrh	r3, [r7, #6]
 802ffbe:	9302      	str	r3, [sp, #8]
 802ffc0:	68bb      	ldr	r3, [r7, #8]
 802ffc2:	9301      	str	r3, [sp, #4]
 802ffc4:	2301      	movs	r3, #1
 802ffc6:	9300      	str	r3, [sp, #0]
 802ffc8:	2302      	movs	r3, #2
 802ffca:	2201      	movs	r2, #1
 802ffcc:	68f8      	ldr	r0, [r7, #12]
 802ffce:	f009 fe32 	bl	8039c36 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802ffd2:	2300      	movs	r3, #0
}
 802ffd4:	4618      	mov	r0, r3
 802ffd6:	3710      	adds	r7, #16
 802ffd8:	46bd      	mov	sp, r7
 802ffda:	bd80      	pop	{r7, pc}

0802ffdc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802ffdc:	b580      	push	{r7, lr}
 802ffde:	b086      	sub	sp, #24
 802ffe0:	af04      	add	r7, sp, #16
 802ffe2:	6078      	str	r0, [r7, #4]
 802ffe4:	4608      	mov	r0, r1
 802ffe6:	4611      	mov	r1, r2
 802ffe8:	461a      	mov	r2, r3
 802ffea:	4603      	mov	r3, r0
 802ffec:	70fb      	strb	r3, [r7, #3]
 802ffee:	460b      	mov	r3, r1
 802fff0:	70bb      	strb	r3, [r7, #2]
 802fff2:	4613      	mov	r3, r2
 802fff4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 802fff6:	7878      	ldrb	r0, [r7, #1]
 802fff8:	78ba      	ldrb	r2, [r7, #2]
 802fffa:	78f9      	ldrb	r1, [r7, #3]
 802fffc:	8b3b      	ldrh	r3, [r7, #24]
 802fffe:	9302      	str	r3, [sp, #8]
 8030000:	7d3b      	ldrb	r3, [r7, #20]
 8030002:	9301      	str	r3, [sp, #4]
 8030004:	7c3b      	ldrb	r3, [r7, #16]
 8030006:	9300      	str	r3, [sp, #0]
 8030008:	4603      	mov	r3, r0
 803000a:	6878      	ldr	r0, [r7, #4]
 803000c:	f009 fdc5 	bl	8039b9a <USBH_LL_OpenPipe>

  return USBH_OK;
 8030010:	2300      	movs	r3, #0
}
 8030012:	4618      	mov	r0, r3
 8030014:	3708      	adds	r7, #8
 8030016:	46bd      	mov	sp, r7
 8030018:	bd80      	pop	{r7, pc}

0803001a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 803001a:	b580      	push	{r7, lr}
 803001c:	b082      	sub	sp, #8
 803001e:	af00      	add	r7, sp, #0
 8030020:	6078      	str	r0, [r7, #4]
 8030022:	460b      	mov	r3, r1
 8030024:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8030026:	78fb      	ldrb	r3, [r7, #3]
 8030028:	4619      	mov	r1, r3
 803002a:	6878      	ldr	r0, [r7, #4]
 803002c:	f009 fde4 	bl	8039bf8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8030030:	2300      	movs	r3, #0
}
 8030032:	4618      	mov	r0, r3
 8030034:	3708      	adds	r7, #8
 8030036:	46bd      	mov	sp, r7
 8030038:	bd80      	pop	{r7, pc}

0803003a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 803003a:	b580      	push	{r7, lr}
 803003c:	b084      	sub	sp, #16
 803003e:	af00      	add	r7, sp, #0
 8030040:	6078      	str	r0, [r7, #4]
 8030042:	460b      	mov	r3, r1
 8030044:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8030046:	6878      	ldr	r0, [r7, #4]
 8030048:	f000 f836 	bl	80300b8 <USBH_GetFreePipe>
 803004c:	4603      	mov	r3, r0
 803004e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8030050:	89fb      	ldrh	r3, [r7, #14]
 8030052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8030056:	4293      	cmp	r3, r2
 8030058:	d00a      	beq.n	8030070 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 803005a:	78fa      	ldrb	r2, [r7, #3]
 803005c:	89fb      	ldrh	r3, [r7, #14]
 803005e:	f003 030f 	and.w	r3, r3, #15
 8030062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8030066:	6879      	ldr	r1, [r7, #4]
 8030068:	33e0      	adds	r3, #224	; 0xe0
 803006a:	009b      	lsls	r3, r3, #2
 803006c:	440b      	add	r3, r1
 803006e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8030070:	89fb      	ldrh	r3, [r7, #14]
 8030072:	b2db      	uxtb	r3, r3
}
 8030074:	4618      	mov	r0, r3
 8030076:	3710      	adds	r7, #16
 8030078:	46bd      	mov	sp, r7
 803007a:	bd80      	pop	{r7, pc}

0803007c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 803007c:	b480      	push	{r7}
 803007e:	b083      	sub	sp, #12
 8030080:	af00      	add	r7, sp, #0
 8030082:	6078      	str	r0, [r7, #4]
 8030084:	460b      	mov	r3, r1
 8030086:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8030088:	78fb      	ldrb	r3, [r7, #3]
 803008a:	2b0f      	cmp	r3, #15
 803008c:	d80d      	bhi.n	80300aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 803008e:	78fb      	ldrb	r3, [r7, #3]
 8030090:	687a      	ldr	r2, [r7, #4]
 8030092:	33e0      	adds	r3, #224	; 0xe0
 8030094:	009b      	lsls	r3, r3, #2
 8030096:	4413      	add	r3, r2
 8030098:	685a      	ldr	r2, [r3, #4]
 803009a:	78fb      	ldrb	r3, [r7, #3]
 803009c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80300a0:	6879      	ldr	r1, [r7, #4]
 80300a2:	33e0      	adds	r3, #224	; 0xe0
 80300a4:	009b      	lsls	r3, r3, #2
 80300a6:	440b      	add	r3, r1
 80300a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80300aa:	2300      	movs	r3, #0
}
 80300ac:	4618      	mov	r0, r3
 80300ae:	370c      	adds	r7, #12
 80300b0:	46bd      	mov	sp, r7
 80300b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80300b6:	4770      	bx	lr

080300b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80300b8:	b480      	push	{r7}
 80300ba:	b085      	sub	sp, #20
 80300bc:	af00      	add	r7, sp, #0
 80300be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80300c0:	2300      	movs	r3, #0
 80300c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80300c4:	2300      	movs	r3, #0
 80300c6:	73fb      	strb	r3, [r7, #15]
 80300c8:	e00f      	b.n	80300ea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80300ca:	7bfb      	ldrb	r3, [r7, #15]
 80300cc:	687a      	ldr	r2, [r7, #4]
 80300ce:	33e0      	adds	r3, #224	; 0xe0
 80300d0:	009b      	lsls	r3, r3, #2
 80300d2:	4413      	add	r3, r2
 80300d4:	685b      	ldr	r3, [r3, #4]
 80300d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80300da:	2b00      	cmp	r3, #0
 80300dc:	d102      	bne.n	80300e4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80300de:	7bfb      	ldrb	r3, [r7, #15]
 80300e0:	b29b      	uxth	r3, r3
 80300e2:	e007      	b.n	80300f4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80300e4:	7bfb      	ldrb	r3, [r7, #15]
 80300e6:	3301      	adds	r3, #1
 80300e8:	73fb      	strb	r3, [r7, #15]
 80300ea:	7bfb      	ldrb	r3, [r7, #15]
 80300ec:	2b0f      	cmp	r3, #15
 80300ee:	d9ec      	bls.n	80300ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80300f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80300f4:	4618      	mov	r0, r3
 80300f6:	3714      	adds	r7, #20
 80300f8:	46bd      	mov	sp, r7
 80300fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80300fe:	4770      	bx	lr

08030100 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8030100:	b580      	push	{r7, lr}
 8030102:	b084      	sub	sp, #16
 8030104:	af00      	add	r7, sp, #0
 8030106:	4603      	mov	r3, r0
 8030108:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 803010a:	79fb      	ldrb	r3, [r7, #7]
 803010c:	4a08      	ldr	r2, [pc, #32]	; (8030130 <disk_status+0x30>)
 803010e:	009b      	lsls	r3, r3, #2
 8030110:	4413      	add	r3, r2
 8030112:	685b      	ldr	r3, [r3, #4]
 8030114:	685b      	ldr	r3, [r3, #4]
 8030116:	79fa      	ldrb	r2, [r7, #7]
 8030118:	4905      	ldr	r1, [pc, #20]	; (8030130 <disk_status+0x30>)
 803011a:	440a      	add	r2, r1
 803011c:	7a12      	ldrb	r2, [r2, #8]
 803011e:	4610      	mov	r0, r2
 8030120:	4798      	blx	r3
 8030122:	4603      	mov	r3, r0
 8030124:	73fb      	strb	r3, [r7, #15]
  return stat;
 8030126:	7bfb      	ldrb	r3, [r7, #15]
}
 8030128:	4618      	mov	r0, r3
 803012a:	3710      	adds	r7, #16
 803012c:	46bd      	mov	sp, r7
 803012e:	bd80      	pop	{r7, pc}
 8030130:	24002c20 	.word	0x24002c20

08030134 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8030134:	b580      	push	{r7, lr}
 8030136:	b084      	sub	sp, #16
 8030138:	af00      	add	r7, sp, #0
 803013a:	4603      	mov	r3, r0
 803013c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 803013e:	2300      	movs	r3, #0
 8030140:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8030142:	79fb      	ldrb	r3, [r7, #7]
 8030144:	4a0d      	ldr	r2, [pc, #52]	; (803017c <disk_initialize+0x48>)
 8030146:	5cd3      	ldrb	r3, [r2, r3]
 8030148:	2b00      	cmp	r3, #0
 803014a:	d111      	bne.n	8030170 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 803014c:	79fb      	ldrb	r3, [r7, #7]
 803014e:	4a0b      	ldr	r2, [pc, #44]	; (803017c <disk_initialize+0x48>)
 8030150:	2101      	movs	r1, #1
 8030152:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8030154:	79fb      	ldrb	r3, [r7, #7]
 8030156:	4a09      	ldr	r2, [pc, #36]	; (803017c <disk_initialize+0x48>)
 8030158:	009b      	lsls	r3, r3, #2
 803015a:	4413      	add	r3, r2
 803015c:	685b      	ldr	r3, [r3, #4]
 803015e:	681b      	ldr	r3, [r3, #0]
 8030160:	79fa      	ldrb	r2, [r7, #7]
 8030162:	4906      	ldr	r1, [pc, #24]	; (803017c <disk_initialize+0x48>)
 8030164:	440a      	add	r2, r1
 8030166:	7a12      	ldrb	r2, [r2, #8]
 8030168:	4610      	mov	r0, r2
 803016a:	4798      	blx	r3
 803016c:	4603      	mov	r3, r0
 803016e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8030170:	7bfb      	ldrb	r3, [r7, #15]
}
 8030172:	4618      	mov	r0, r3
 8030174:	3710      	adds	r7, #16
 8030176:	46bd      	mov	sp, r7
 8030178:	bd80      	pop	{r7, pc}
 803017a:	bf00      	nop
 803017c:	24002c20 	.word	0x24002c20

08030180 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8030180:	b590      	push	{r4, r7, lr}
 8030182:	b087      	sub	sp, #28
 8030184:	af00      	add	r7, sp, #0
 8030186:	60b9      	str	r1, [r7, #8]
 8030188:	607a      	str	r2, [r7, #4]
 803018a:	603b      	str	r3, [r7, #0]
 803018c:	4603      	mov	r3, r0
 803018e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8030190:	7bfb      	ldrb	r3, [r7, #15]
 8030192:	4a0a      	ldr	r2, [pc, #40]	; (80301bc <disk_read+0x3c>)
 8030194:	009b      	lsls	r3, r3, #2
 8030196:	4413      	add	r3, r2
 8030198:	685b      	ldr	r3, [r3, #4]
 803019a:	689c      	ldr	r4, [r3, #8]
 803019c:	7bfb      	ldrb	r3, [r7, #15]
 803019e:	4a07      	ldr	r2, [pc, #28]	; (80301bc <disk_read+0x3c>)
 80301a0:	4413      	add	r3, r2
 80301a2:	7a18      	ldrb	r0, [r3, #8]
 80301a4:	683b      	ldr	r3, [r7, #0]
 80301a6:	687a      	ldr	r2, [r7, #4]
 80301a8:	68b9      	ldr	r1, [r7, #8]
 80301aa:	47a0      	blx	r4
 80301ac:	4603      	mov	r3, r0
 80301ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80301b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80301b2:	4618      	mov	r0, r3
 80301b4:	371c      	adds	r7, #28
 80301b6:	46bd      	mov	sp, r7
 80301b8:	bd90      	pop	{r4, r7, pc}
 80301ba:	bf00      	nop
 80301bc:	24002c20 	.word	0x24002c20

080301c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80301c0:	b590      	push	{r4, r7, lr}
 80301c2:	b087      	sub	sp, #28
 80301c4:	af00      	add	r7, sp, #0
 80301c6:	60b9      	str	r1, [r7, #8]
 80301c8:	607a      	str	r2, [r7, #4]
 80301ca:	603b      	str	r3, [r7, #0]
 80301cc:	4603      	mov	r3, r0
 80301ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80301d0:	7bfb      	ldrb	r3, [r7, #15]
 80301d2:	4a0a      	ldr	r2, [pc, #40]	; (80301fc <disk_write+0x3c>)
 80301d4:	009b      	lsls	r3, r3, #2
 80301d6:	4413      	add	r3, r2
 80301d8:	685b      	ldr	r3, [r3, #4]
 80301da:	68dc      	ldr	r4, [r3, #12]
 80301dc:	7bfb      	ldrb	r3, [r7, #15]
 80301de:	4a07      	ldr	r2, [pc, #28]	; (80301fc <disk_write+0x3c>)
 80301e0:	4413      	add	r3, r2
 80301e2:	7a18      	ldrb	r0, [r3, #8]
 80301e4:	683b      	ldr	r3, [r7, #0]
 80301e6:	687a      	ldr	r2, [r7, #4]
 80301e8:	68b9      	ldr	r1, [r7, #8]
 80301ea:	47a0      	blx	r4
 80301ec:	4603      	mov	r3, r0
 80301ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80301f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80301f2:	4618      	mov	r0, r3
 80301f4:	371c      	adds	r7, #28
 80301f6:	46bd      	mov	sp, r7
 80301f8:	bd90      	pop	{r4, r7, pc}
 80301fa:	bf00      	nop
 80301fc:	24002c20 	.word	0x24002c20

08030200 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8030200:	b580      	push	{r7, lr}
 8030202:	b084      	sub	sp, #16
 8030204:	af00      	add	r7, sp, #0
 8030206:	4603      	mov	r3, r0
 8030208:	603a      	str	r2, [r7, #0]
 803020a:	71fb      	strb	r3, [r7, #7]
 803020c:	460b      	mov	r3, r1
 803020e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8030210:	79fb      	ldrb	r3, [r7, #7]
 8030212:	4a09      	ldr	r2, [pc, #36]	; (8030238 <disk_ioctl+0x38>)
 8030214:	009b      	lsls	r3, r3, #2
 8030216:	4413      	add	r3, r2
 8030218:	685b      	ldr	r3, [r3, #4]
 803021a:	691b      	ldr	r3, [r3, #16]
 803021c:	79fa      	ldrb	r2, [r7, #7]
 803021e:	4906      	ldr	r1, [pc, #24]	; (8030238 <disk_ioctl+0x38>)
 8030220:	440a      	add	r2, r1
 8030222:	7a10      	ldrb	r0, [r2, #8]
 8030224:	79b9      	ldrb	r1, [r7, #6]
 8030226:	683a      	ldr	r2, [r7, #0]
 8030228:	4798      	blx	r3
 803022a:	4603      	mov	r3, r0
 803022c:	73fb      	strb	r3, [r7, #15]
  return res;
 803022e:	7bfb      	ldrb	r3, [r7, #15]
}
 8030230:	4618      	mov	r0, r3
 8030232:	3710      	adds	r7, #16
 8030234:	46bd      	mov	sp, r7
 8030236:	bd80      	pop	{r7, pc}
 8030238:	24002c20 	.word	0x24002c20

0803023c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 803023c:	b480      	push	{r7}
 803023e:	b085      	sub	sp, #20
 8030240:	af00      	add	r7, sp, #0
 8030242:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8030244:	687b      	ldr	r3, [r7, #4]
 8030246:	3301      	adds	r3, #1
 8030248:	781b      	ldrb	r3, [r3, #0]
 803024a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 803024c:	89fb      	ldrh	r3, [r7, #14]
 803024e:	021b      	lsls	r3, r3, #8
 8030250:	b21a      	sxth	r2, r3
 8030252:	687b      	ldr	r3, [r7, #4]
 8030254:	781b      	ldrb	r3, [r3, #0]
 8030256:	b21b      	sxth	r3, r3
 8030258:	4313      	orrs	r3, r2
 803025a:	b21b      	sxth	r3, r3
 803025c:	81fb      	strh	r3, [r7, #14]
	return rv;
 803025e:	89fb      	ldrh	r3, [r7, #14]
}
 8030260:	4618      	mov	r0, r3
 8030262:	3714      	adds	r7, #20
 8030264:	46bd      	mov	sp, r7
 8030266:	f85d 7b04 	ldr.w	r7, [sp], #4
 803026a:	4770      	bx	lr

0803026c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 803026c:	b480      	push	{r7}
 803026e:	b085      	sub	sp, #20
 8030270:	af00      	add	r7, sp, #0
 8030272:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8030274:	687b      	ldr	r3, [r7, #4]
 8030276:	3303      	adds	r3, #3
 8030278:	781b      	ldrb	r3, [r3, #0]
 803027a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 803027c:	68fb      	ldr	r3, [r7, #12]
 803027e:	021b      	lsls	r3, r3, #8
 8030280:	687a      	ldr	r2, [r7, #4]
 8030282:	3202      	adds	r2, #2
 8030284:	7812      	ldrb	r2, [r2, #0]
 8030286:	4313      	orrs	r3, r2
 8030288:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 803028a:	68fb      	ldr	r3, [r7, #12]
 803028c:	021b      	lsls	r3, r3, #8
 803028e:	687a      	ldr	r2, [r7, #4]
 8030290:	3201      	adds	r2, #1
 8030292:	7812      	ldrb	r2, [r2, #0]
 8030294:	4313      	orrs	r3, r2
 8030296:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8030298:	68fb      	ldr	r3, [r7, #12]
 803029a:	021b      	lsls	r3, r3, #8
 803029c:	687a      	ldr	r2, [r7, #4]
 803029e:	7812      	ldrb	r2, [r2, #0]
 80302a0:	4313      	orrs	r3, r2
 80302a2:	60fb      	str	r3, [r7, #12]
	return rv;
 80302a4:	68fb      	ldr	r3, [r7, #12]
}
 80302a6:	4618      	mov	r0, r3
 80302a8:	3714      	adds	r7, #20
 80302aa:	46bd      	mov	sp, r7
 80302ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80302b0:	4770      	bx	lr

080302b2 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80302b2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80302b6:	b09d      	sub	sp, #116	; 0x74
 80302b8:	af00      	add	r7, sp, #0
 80302ba:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 80302bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80302be:	3307      	adds	r3, #7
 80302c0:	781b      	ldrb	r3, [r3, #0]
 80302c2:	b2db      	uxtb	r3, r3
 80302c4:	2200      	movs	r2, #0
 80302c6:	469a      	mov	sl, r3
 80302c8:	4693      	mov	fp, r2
 80302ca:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 80302ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80302d2:	f04f 0000 	mov.w	r0, #0
 80302d6:	f04f 0100 	mov.w	r1, #0
 80302da:	0219      	lsls	r1, r3, #8
 80302dc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80302e0:	0210      	lsls	r0, r2, #8
 80302e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80302e4:	3306      	adds	r3, #6
 80302e6:	781b      	ldrb	r3, [r3, #0]
 80302e8:	b2db      	uxtb	r3, r3
 80302ea:	2200      	movs	r2, #0
 80302ec:	461c      	mov	r4, r3
 80302ee:	4615      	mov	r5, r2
 80302f0:	ea40 0804 	orr.w	r8, r0, r4
 80302f4:	ea41 0905 	orr.w	r9, r1, r5
 80302f8:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 80302fc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8030300:	f04f 0000 	mov.w	r0, #0
 8030304:	f04f 0100 	mov.w	r1, #0
 8030308:	0219      	lsls	r1, r3, #8
 803030a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 803030e:	0210      	lsls	r0, r2, #8
 8030310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8030312:	3305      	adds	r3, #5
 8030314:	781b      	ldrb	r3, [r3, #0]
 8030316:	b2db      	uxtb	r3, r3
 8030318:	2200      	movs	r2, #0
 803031a:	65bb      	str	r3, [r7, #88]	; 0x58
 803031c:	65fa      	str	r2, [r7, #92]	; 0x5c
 803031e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8030322:	4623      	mov	r3, r4
 8030324:	4303      	orrs	r3, r0
 8030326:	62bb      	str	r3, [r7, #40]	; 0x28
 8030328:	462b      	mov	r3, r5
 803032a:	430b      	orrs	r3, r1
 803032c:	62fb      	str	r3, [r7, #44]	; 0x2c
 803032e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8030332:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8030336:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 803033a:	f04f 0000 	mov.w	r0, #0
 803033e:	f04f 0100 	mov.w	r1, #0
 8030342:	0219      	lsls	r1, r3, #8
 8030344:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8030348:	0210      	lsls	r0, r2, #8
 803034a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803034c:	3304      	adds	r3, #4
 803034e:	781b      	ldrb	r3, [r3, #0]
 8030350:	b2db      	uxtb	r3, r3
 8030352:	2200      	movs	r2, #0
 8030354:	653b      	str	r3, [r7, #80]	; 0x50
 8030356:	657a      	str	r2, [r7, #84]	; 0x54
 8030358:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 803035c:	4623      	mov	r3, r4
 803035e:	4303      	orrs	r3, r0
 8030360:	623b      	str	r3, [r7, #32]
 8030362:	462b      	mov	r3, r5
 8030364:	430b      	orrs	r3, r1
 8030366:	627b      	str	r3, [r7, #36]	; 0x24
 8030368:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 803036c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8030370:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8030374:	f04f 0000 	mov.w	r0, #0
 8030378:	f04f 0100 	mov.w	r1, #0
 803037c:	0219      	lsls	r1, r3, #8
 803037e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8030382:	0210      	lsls	r0, r2, #8
 8030384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8030386:	3303      	adds	r3, #3
 8030388:	781b      	ldrb	r3, [r3, #0]
 803038a:	b2db      	uxtb	r3, r3
 803038c:	2200      	movs	r2, #0
 803038e:	64bb      	str	r3, [r7, #72]	; 0x48
 8030390:	64fa      	str	r2, [r7, #76]	; 0x4c
 8030392:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8030396:	4623      	mov	r3, r4
 8030398:	4303      	orrs	r3, r0
 803039a:	61bb      	str	r3, [r7, #24]
 803039c:	462b      	mov	r3, r5
 803039e:	430b      	orrs	r3, r1
 80303a0:	61fb      	str	r3, [r7, #28]
 80303a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80303a6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 80303aa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80303ae:	f04f 0000 	mov.w	r0, #0
 80303b2:	f04f 0100 	mov.w	r1, #0
 80303b6:	0219      	lsls	r1, r3, #8
 80303b8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80303bc:	0210      	lsls	r0, r2, #8
 80303be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80303c0:	3302      	adds	r3, #2
 80303c2:	781b      	ldrb	r3, [r3, #0]
 80303c4:	b2db      	uxtb	r3, r3
 80303c6:	2200      	movs	r2, #0
 80303c8:	643b      	str	r3, [r7, #64]	; 0x40
 80303ca:	647a      	str	r2, [r7, #68]	; 0x44
 80303cc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80303d0:	4623      	mov	r3, r4
 80303d2:	4303      	orrs	r3, r0
 80303d4:	613b      	str	r3, [r7, #16]
 80303d6:	462b      	mov	r3, r5
 80303d8:	430b      	orrs	r3, r1
 80303da:	617b      	str	r3, [r7, #20]
 80303dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80303e0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 80303e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80303e8:	f04f 0200 	mov.w	r2, #0
 80303ec:	f04f 0300 	mov.w	r3, #0
 80303f0:	020b      	lsls	r3, r1, #8
 80303f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80303f6:	0202      	lsls	r2, r0, #8
 80303f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80303fa:	3101      	adds	r1, #1
 80303fc:	7809      	ldrb	r1, [r1, #0]
 80303fe:	b2c9      	uxtb	r1, r1
 8030400:	2000      	movs	r0, #0
 8030402:	63b9      	str	r1, [r7, #56]	; 0x38
 8030404:	63f8      	str	r0, [r7, #60]	; 0x3c
 8030406:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 803040a:	4621      	mov	r1, r4
 803040c:	4311      	orrs	r1, r2
 803040e:	60b9      	str	r1, [r7, #8]
 8030410:	4629      	mov	r1, r5
 8030412:	4319      	orrs	r1, r3
 8030414:	60f9      	str	r1, [r7, #12]
 8030416:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 803041a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 803041e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8030422:	f04f 0200 	mov.w	r2, #0
 8030426:	f04f 0300 	mov.w	r3, #0
 803042a:	020b      	lsls	r3, r1, #8
 803042c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8030430:	0202      	lsls	r2, r0, #8
 8030432:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8030434:	7809      	ldrb	r1, [r1, #0]
 8030436:	b2c9      	uxtb	r1, r1
 8030438:	2000      	movs	r0, #0
 803043a:	6339      	str	r1, [r7, #48]	; 0x30
 803043c:	6378      	str	r0, [r7, #52]	; 0x34
 803043e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8030442:	4621      	mov	r1, r4
 8030444:	4311      	orrs	r1, r2
 8030446:	6039      	str	r1, [r7, #0]
 8030448:	4629      	mov	r1, r5
 803044a:	4319      	orrs	r1, r3
 803044c:	6079      	str	r1, [r7, #4]
 803044e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8030452:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8030456:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 803045a:	4610      	mov	r0, r2
 803045c:	4619      	mov	r1, r3
 803045e:	3774      	adds	r7, #116	; 0x74
 8030460:	46bd      	mov	sp, r7
 8030462:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8030466:	4770      	bx	lr

08030468 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8030468:	b480      	push	{r7}
 803046a:	b083      	sub	sp, #12
 803046c:	af00      	add	r7, sp, #0
 803046e:	6078      	str	r0, [r7, #4]
 8030470:	460b      	mov	r3, r1
 8030472:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8030474:	687b      	ldr	r3, [r7, #4]
 8030476:	1c5a      	adds	r2, r3, #1
 8030478:	607a      	str	r2, [r7, #4]
 803047a:	887a      	ldrh	r2, [r7, #2]
 803047c:	b2d2      	uxtb	r2, r2
 803047e:	701a      	strb	r2, [r3, #0]
 8030480:	887b      	ldrh	r3, [r7, #2]
 8030482:	0a1b      	lsrs	r3, r3, #8
 8030484:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8030486:	687b      	ldr	r3, [r7, #4]
 8030488:	1c5a      	adds	r2, r3, #1
 803048a:	607a      	str	r2, [r7, #4]
 803048c:	887a      	ldrh	r2, [r7, #2]
 803048e:	b2d2      	uxtb	r2, r2
 8030490:	701a      	strb	r2, [r3, #0]
}
 8030492:	bf00      	nop
 8030494:	370c      	adds	r7, #12
 8030496:	46bd      	mov	sp, r7
 8030498:	f85d 7b04 	ldr.w	r7, [sp], #4
 803049c:	4770      	bx	lr

0803049e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 803049e:	b480      	push	{r7}
 80304a0:	b083      	sub	sp, #12
 80304a2:	af00      	add	r7, sp, #0
 80304a4:	6078      	str	r0, [r7, #4]
 80304a6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80304a8:	687b      	ldr	r3, [r7, #4]
 80304aa:	1c5a      	adds	r2, r3, #1
 80304ac:	607a      	str	r2, [r7, #4]
 80304ae:	683a      	ldr	r2, [r7, #0]
 80304b0:	b2d2      	uxtb	r2, r2
 80304b2:	701a      	strb	r2, [r3, #0]
 80304b4:	683b      	ldr	r3, [r7, #0]
 80304b6:	0a1b      	lsrs	r3, r3, #8
 80304b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80304ba:	687b      	ldr	r3, [r7, #4]
 80304bc:	1c5a      	adds	r2, r3, #1
 80304be:	607a      	str	r2, [r7, #4]
 80304c0:	683a      	ldr	r2, [r7, #0]
 80304c2:	b2d2      	uxtb	r2, r2
 80304c4:	701a      	strb	r2, [r3, #0]
 80304c6:	683b      	ldr	r3, [r7, #0]
 80304c8:	0a1b      	lsrs	r3, r3, #8
 80304ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80304cc:	687b      	ldr	r3, [r7, #4]
 80304ce:	1c5a      	adds	r2, r3, #1
 80304d0:	607a      	str	r2, [r7, #4]
 80304d2:	683a      	ldr	r2, [r7, #0]
 80304d4:	b2d2      	uxtb	r2, r2
 80304d6:	701a      	strb	r2, [r3, #0]
 80304d8:	683b      	ldr	r3, [r7, #0]
 80304da:	0a1b      	lsrs	r3, r3, #8
 80304dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80304de:	687b      	ldr	r3, [r7, #4]
 80304e0:	1c5a      	adds	r2, r3, #1
 80304e2:	607a      	str	r2, [r7, #4]
 80304e4:	683a      	ldr	r2, [r7, #0]
 80304e6:	b2d2      	uxtb	r2, r2
 80304e8:	701a      	strb	r2, [r3, #0]
}
 80304ea:	bf00      	nop
 80304ec:	370c      	adds	r7, #12
 80304ee:	46bd      	mov	sp, r7
 80304f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80304f4:	4770      	bx	lr

080304f6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80304f6:	b480      	push	{r7}
 80304f8:	b085      	sub	sp, #20
 80304fa:	af00      	add	r7, sp, #0
 80304fc:	60f8      	str	r0, [r7, #12]
 80304fe:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8030502:	68fb      	ldr	r3, [r7, #12]
 8030504:	1c5a      	adds	r2, r3, #1
 8030506:	60fa      	str	r2, [r7, #12]
 8030508:	783a      	ldrb	r2, [r7, #0]
 803050a:	701a      	strb	r2, [r3, #0]
 803050c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8030510:	f04f 0200 	mov.w	r2, #0
 8030514:	f04f 0300 	mov.w	r3, #0
 8030518:	0a02      	lsrs	r2, r0, #8
 803051a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 803051e:	0a0b      	lsrs	r3, r1, #8
 8030520:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8030524:	68fb      	ldr	r3, [r7, #12]
 8030526:	1c5a      	adds	r2, r3, #1
 8030528:	60fa      	str	r2, [r7, #12]
 803052a:	783a      	ldrb	r2, [r7, #0]
 803052c:	701a      	strb	r2, [r3, #0]
 803052e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8030532:	f04f 0200 	mov.w	r2, #0
 8030536:	f04f 0300 	mov.w	r3, #0
 803053a:	0a02      	lsrs	r2, r0, #8
 803053c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8030540:	0a0b      	lsrs	r3, r1, #8
 8030542:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8030546:	68fb      	ldr	r3, [r7, #12]
 8030548:	1c5a      	adds	r2, r3, #1
 803054a:	60fa      	str	r2, [r7, #12]
 803054c:	783a      	ldrb	r2, [r7, #0]
 803054e:	701a      	strb	r2, [r3, #0]
 8030550:	e9d7 0100 	ldrd	r0, r1, [r7]
 8030554:	f04f 0200 	mov.w	r2, #0
 8030558:	f04f 0300 	mov.w	r3, #0
 803055c:	0a02      	lsrs	r2, r0, #8
 803055e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8030562:	0a0b      	lsrs	r3, r1, #8
 8030564:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8030568:	68fb      	ldr	r3, [r7, #12]
 803056a:	1c5a      	adds	r2, r3, #1
 803056c:	60fa      	str	r2, [r7, #12]
 803056e:	783a      	ldrb	r2, [r7, #0]
 8030570:	701a      	strb	r2, [r3, #0]
 8030572:	e9d7 0100 	ldrd	r0, r1, [r7]
 8030576:	f04f 0200 	mov.w	r2, #0
 803057a:	f04f 0300 	mov.w	r3, #0
 803057e:	0a02      	lsrs	r2, r0, #8
 8030580:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8030584:	0a0b      	lsrs	r3, r1, #8
 8030586:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 803058a:	68fb      	ldr	r3, [r7, #12]
 803058c:	1c5a      	adds	r2, r3, #1
 803058e:	60fa      	str	r2, [r7, #12]
 8030590:	783a      	ldrb	r2, [r7, #0]
 8030592:	701a      	strb	r2, [r3, #0]
 8030594:	e9d7 0100 	ldrd	r0, r1, [r7]
 8030598:	f04f 0200 	mov.w	r2, #0
 803059c:	f04f 0300 	mov.w	r3, #0
 80305a0:	0a02      	lsrs	r2, r0, #8
 80305a2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80305a6:	0a0b      	lsrs	r3, r1, #8
 80305a8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80305ac:	68fb      	ldr	r3, [r7, #12]
 80305ae:	1c5a      	adds	r2, r3, #1
 80305b0:	60fa      	str	r2, [r7, #12]
 80305b2:	783a      	ldrb	r2, [r7, #0]
 80305b4:	701a      	strb	r2, [r3, #0]
 80305b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80305ba:	f04f 0200 	mov.w	r2, #0
 80305be:	f04f 0300 	mov.w	r3, #0
 80305c2:	0a02      	lsrs	r2, r0, #8
 80305c4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80305c8:	0a0b      	lsrs	r3, r1, #8
 80305ca:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80305ce:	68fb      	ldr	r3, [r7, #12]
 80305d0:	1c5a      	adds	r2, r3, #1
 80305d2:	60fa      	str	r2, [r7, #12]
 80305d4:	783a      	ldrb	r2, [r7, #0]
 80305d6:	701a      	strb	r2, [r3, #0]
 80305d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80305dc:	f04f 0200 	mov.w	r2, #0
 80305e0:	f04f 0300 	mov.w	r3, #0
 80305e4:	0a02      	lsrs	r2, r0, #8
 80305e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80305ea:	0a0b      	lsrs	r3, r1, #8
 80305ec:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 80305f0:	68fb      	ldr	r3, [r7, #12]
 80305f2:	1c5a      	adds	r2, r3, #1
 80305f4:	60fa      	str	r2, [r7, #12]
 80305f6:	783a      	ldrb	r2, [r7, #0]
 80305f8:	701a      	strb	r2, [r3, #0]
}
 80305fa:	bf00      	nop
 80305fc:	3714      	adds	r7, #20
 80305fe:	46bd      	mov	sp, r7
 8030600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030604:	4770      	bx	lr

08030606 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8030606:	b480      	push	{r7}
 8030608:	b087      	sub	sp, #28
 803060a:	af00      	add	r7, sp, #0
 803060c:	60f8      	str	r0, [r7, #12]
 803060e:	60b9      	str	r1, [r7, #8]
 8030610:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8030612:	68fb      	ldr	r3, [r7, #12]
 8030614:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8030616:	68bb      	ldr	r3, [r7, #8]
 8030618:	613b      	str	r3, [r7, #16]

	if (cnt) {
 803061a:	687b      	ldr	r3, [r7, #4]
 803061c:	2b00      	cmp	r3, #0
 803061e:	d00d      	beq.n	803063c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8030620:	693a      	ldr	r2, [r7, #16]
 8030622:	1c53      	adds	r3, r2, #1
 8030624:	613b      	str	r3, [r7, #16]
 8030626:	697b      	ldr	r3, [r7, #20]
 8030628:	1c59      	adds	r1, r3, #1
 803062a:	6179      	str	r1, [r7, #20]
 803062c:	7812      	ldrb	r2, [r2, #0]
 803062e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8030630:	687b      	ldr	r3, [r7, #4]
 8030632:	3b01      	subs	r3, #1
 8030634:	607b      	str	r3, [r7, #4]
 8030636:	687b      	ldr	r3, [r7, #4]
 8030638:	2b00      	cmp	r3, #0
 803063a:	d1f1      	bne.n	8030620 <mem_cpy+0x1a>
	}
}
 803063c:	bf00      	nop
 803063e:	371c      	adds	r7, #28
 8030640:	46bd      	mov	sp, r7
 8030642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030646:	4770      	bx	lr

08030648 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8030648:	b480      	push	{r7}
 803064a:	b087      	sub	sp, #28
 803064c:	af00      	add	r7, sp, #0
 803064e:	60f8      	str	r0, [r7, #12]
 8030650:	60b9      	str	r1, [r7, #8]
 8030652:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8030654:	68fb      	ldr	r3, [r7, #12]
 8030656:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8030658:	697b      	ldr	r3, [r7, #20]
 803065a:	1c5a      	adds	r2, r3, #1
 803065c:	617a      	str	r2, [r7, #20]
 803065e:	68ba      	ldr	r2, [r7, #8]
 8030660:	b2d2      	uxtb	r2, r2
 8030662:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8030664:	687b      	ldr	r3, [r7, #4]
 8030666:	3b01      	subs	r3, #1
 8030668:	607b      	str	r3, [r7, #4]
 803066a:	687b      	ldr	r3, [r7, #4]
 803066c:	2b00      	cmp	r3, #0
 803066e:	d1f3      	bne.n	8030658 <mem_set+0x10>
}
 8030670:	bf00      	nop
 8030672:	bf00      	nop
 8030674:	371c      	adds	r7, #28
 8030676:	46bd      	mov	sp, r7
 8030678:	f85d 7b04 	ldr.w	r7, [sp], #4
 803067c:	4770      	bx	lr

0803067e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 803067e:	b480      	push	{r7}
 8030680:	b089      	sub	sp, #36	; 0x24
 8030682:	af00      	add	r7, sp, #0
 8030684:	60f8      	str	r0, [r7, #12]
 8030686:	60b9      	str	r1, [r7, #8]
 8030688:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 803068a:	68fb      	ldr	r3, [r7, #12]
 803068c:	61fb      	str	r3, [r7, #28]
 803068e:	68bb      	ldr	r3, [r7, #8]
 8030690:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8030692:	2300      	movs	r3, #0
 8030694:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8030696:	69fb      	ldr	r3, [r7, #28]
 8030698:	1c5a      	adds	r2, r3, #1
 803069a:	61fa      	str	r2, [r7, #28]
 803069c:	781b      	ldrb	r3, [r3, #0]
 803069e:	4619      	mov	r1, r3
 80306a0:	69bb      	ldr	r3, [r7, #24]
 80306a2:	1c5a      	adds	r2, r3, #1
 80306a4:	61ba      	str	r2, [r7, #24]
 80306a6:	781b      	ldrb	r3, [r3, #0]
 80306a8:	1acb      	subs	r3, r1, r3
 80306aa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80306ac:	687b      	ldr	r3, [r7, #4]
 80306ae:	3b01      	subs	r3, #1
 80306b0:	607b      	str	r3, [r7, #4]
 80306b2:	687b      	ldr	r3, [r7, #4]
 80306b4:	2b00      	cmp	r3, #0
 80306b6:	d002      	beq.n	80306be <mem_cmp+0x40>
 80306b8:	697b      	ldr	r3, [r7, #20]
 80306ba:	2b00      	cmp	r3, #0
 80306bc:	d0eb      	beq.n	8030696 <mem_cmp+0x18>

	return r;
 80306be:	697b      	ldr	r3, [r7, #20]
}
 80306c0:	4618      	mov	r0, r3
 80306c2:	3724      	adds	r7, #36	; 0x24
 80306c4:	46bd      	mov	sp, r7
 80306c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80306ca:	4770      	bx	lr

080306cc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80306cc:	b480      	push	{r7}
 80306ce:	b083      	sub	sp, #12
 80306d0:	af00      	add	r7, sp, #0
 80306d2:	6078      	str	r0, [r7, #4]
 80306d4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80306d6:	e002      	b.n	80306de <chk_chr+0x12>
 80306d8:	687b      	ldr	r3, [r7, #4]
 80306da:	3301      	adds	r3, #1
 80306dc:	607b      	str	r3, [r7, #4]
 80306de:	687b      	ldr	r3, [r7, #4]
 80306e0:	781b      	ldrb	r3, [r3, #0]
 80306e2:	2b00      	cmp	r3, #0
 80306e4:	d005      	beq.n	80306f2 <chk_chr+0x26>
 80306e6:	687b      	ldr	r3, [r7, #4]
 80306e8:	781b      	ldrb	r3, [r3, #0]
 80306ea:	461a      	mov	r2, r3
 80306ec:	683b      	ldr	r3, [r7, #0]
 80306ee:	4293      	cmp	r3, r2
 80306f0:	d1f2      	bne.n	80306d8 <chk_chr+0xc>
	return *str;
 80306f2:	687b      	ldr	r3, [r7, #4]
 80306f4:	781b      	ldrb	r3, [r3, #0]
}
 80306f6:	4618      	mov	r0, r3
 80306f8:	370c      	adds	r7, #12
 80306fa:	46bd      	mov	sp, r7
 80306fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030700:	4770      	bx	lr

08030702 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8030702:	b580      	push	{r7, lr}
 8030704:	b082      	sub	sp, #8
 8030706:	af00      	add	r7, sp, #0
 8030708:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 803070a:	687b      	ldr	r3, [r7, #4]
 803070c:	2b00      	cmp	r3, #0
 803070e:	d009      	beq.n	8030724 <lock_fs+0x22>
 8030710:	687b      	ldr	r3, [r7, #4]
 8030712:	699b      	ldr	r3, [r3, #24]
 8030714:	4618      	mov	r0, r3
 8030716:	f005 fb36 	bl	8035d86 <ff_req_grant>
 803071a:	4603      	mov	r3, r0
 803071c:	2b00      	cmp	r3, #0
 803071e:	d001      	beq.n	8030724 <lock_fs+0x22>
 8030720:	2301      	movs	r3, #1
 8030722:	e000      	b.n	8030726 <lock_fs+0x24>
 8030724:	2300      	movs	r3, #0
}
 8030726:	4618      	mov	r0, r3
 8030728:	3708      	adds	r7, #8
 803072a:	46bd      	mov	sp, r7
 803072c:	bd80      	pop	{r7, pc}

0803072e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 803072e:	b580      	push	{r7, lr}
 8030730:	b082      	sub	sp, #8
 8030732:	af00      	add	r7, sp, #0
 8030734:	6078      	str	r0, [r7, #4]
 8030736:	460b      	mov	r3, r1
 8030738:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 803073a:	687b      	ldr	r3, [r7, #4]
 803073c:	2b00      	cmp	r3, #0
 803073e:	d00d      	beq.n	803075c <unlock_fs+0x2e>
 8030740:	78fb      	ldrb	r3, [r7, #3]
 8030742:	2b0c      	cmp	r3, #12
 8030744:	d00a      	beq.n	803075c <unlock_fs+0x2e>
 8030746:	78fb      	ldrb	r3, [r7, #3]
 8030748:	2b0b      	cmp	r3, #11
 803074a:	d007      	beq.n	803075c <unlock_fs+0x2e>
 803074c:	78fb      	ldrb	r3, [r7, #3]
 803074e:	2b0f      	cmp	r3, #15
 8030750:	d004      	beq.n	803075c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8030752:	687b      	ldr	r3, [r7, #4]
 8030754:	699b      	ldr	r3, [r3, #24]
 8030756:	4618      	mov	r0, r3
 8030758:	f005 fb2a 	bl	8035db0 <ff_rel_grant>
	}
}
 803075c:	bf00      	nop
 803075e:	3708      	adds	r7, #8
 8030760:	46bd      	mov	sp, r7
 8030762:	bd80      	pop	{r7, pc}

08030764 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8030764:	b480      	push	{r7}
 8030766:	b085      	sub	sp, #20
 8030768:	af00      	add	r7, sp, #0
 803076a:	6078      	str	r0, [r7, #4]
 803076c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 803076e:	2300      	movs	r3, #0
 8030770:	60bb      	str	r3, [r7, #8]
 8030772:	68bb      	ldr	r3, [r7, #8]
 8030774:	60fb      	str	r3, [r7, #12]
 8030776:	e029      	b.n	80307cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8030778:	4a27      	ldr	r2, [pc, #156]	; (8030818 <chk_lock+0xb4>)
 803077a:	68fb      	ldr	r3, [r7, #12]
 803077c:	011b      	lsls	r3, r3, #4
 803077e:	4413      	add	r3, r2
 8030780:	681b      	ldr	r3, [r3, #0]
 8030782:	2b00      	cmp	r3, #0
 8030784:	d01d      	beq.n	80307c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8030786:	4a24      	ldr	r2, [pc, #144]	; (8030818 <chk_lock+0xb4>)
 8030788:	68fb      	ldr	r3, [r7, #12]
 803078a:	011b      	lsls	r3, r3, #4
 803078c:	4413      	add	r3, r2
 803078e:	681a      	ldr	r2, [r3, #0]
 8030790:	687b      	ldr	r3, [r7, #4]
 8030792:	681b      	ldr	r3, [r3, #0]
 8030794:	429a      	cmp	r2, r3
 8030796:	d116      	bne.n	80307c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8030798:	4a1f      	ldr	r2, [pc, #124]	; (8030818 <chk_lock+0xb4>)
 803079a:	68fb      	ldr	r3, [r7, #12]
 803079c:	011b      	lsls	r3, r3, #4
 803079e:	4413      	add	r3, r2
 80307a0:	3304      	adds	r3, #4
 80307a2:	681a      	ldr	r2, [r3, #0]
 80307a4:	687b      	ldr	r3, [r7, #4]
 80307a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80307a8:	429a      	cmp	r2, r3
 80307aa:	d10c      	bne.n	80307c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80307ac:	4a1a      	ldr	r2, [pc, #104]	; (8030818 <chk_lock+0xb4>)
 80307ae:	68fb      	ldr	r3, [r7, #12]
 80307b0:	011b      	lsls	r3, r3, #4
 80307b2:	4413      	add	r3, r2
 80307b4:	3308      	adds	r3, #8
 80307b6:	681a      	ldr	r2, [r3, #0]
 80307b8:	687b      	ldr	r3, [r7, #4]
 80307ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 80307bc:	429a      	cmp	r2, r3
 80307be:	d102      	bne.n	80307c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80307c0:	e007      	b.n	80307d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80307c2:	2301      	movs	r3, #1
 80307c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80307c6:	68fb      	ldr	r3, [r7, #12]
 80307c8:	3301      	adds	r3, #1
 80307ca:	60fb      	str	r3, [r7, #12]
 80307cc:	68fb      	ldr	r3, [r7, #12]
 80307ce:	2b01      	cmp	r3, #1
 80307d0:	d9d2      	bls.n	8030778 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80307d2:	68fb      	ldr	r3, [r7, #12]
 80307d4:	2b02      	cmp	r3, #2
 80307d6:	d109      	bne.n	80307ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80307d8:	68bb      	ldr	r3, [r7, #8]
 80307da:	2b00      	cmp	r3, #0
 80307dc:	d102      	bne.n	80307e4 <chk_lock+0x80>
 80307de:	683b      	ldr	r3, [r7, #0]
 80307e0:	2b02      	cmp	r3, #2
 80307e2:	d101      	bne.n	80307e8 <chk_lock+0x84>
 80307e4:	2300      	movs	r3, #0
 80307e6:	e010      	b.n	803080a <chk_lock+0xa6>
 80307e8:	2312      	movs	r3, #18
 80307ea:	e00e      	b.n	803080a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80307ec:	683b      	ldr	r3, [r7, #0]
 80307ee:	2b00      	cmp	r3, #0
 80307f0:	d108      	bne.n	8030804 <chk_lock+0xa0>
 80307f2:	4a09      	ldr	r2, [pc, #36]	; (8030818 <chk_lock+0xb4>)
 80307f4:	68fb      	ldr	r3, [r7, #12]
 80307f6:	011b      	lsls	r3, r3, #4
 80307f8:	4413      	add	r3, r2
 80307fa:	330c      	adds	r3, #12
 80307fc:	881b      	ldrh	r3, [r3, #0]
 80307fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8030802:	d101      	bne.n	8030808 <chk_lock+0xa4>
 8030804:	2310      	movs	r3, #16
 8030806:	e000      	b.n	803080a <chk_lock+0xa6>
 8030808:	2300      	movs	r3, #0
}
 803080a:	4618      	mov	r0, r3
 803080c:	3714      	adds	r7, #20
 803080e:	46bd      	mov	sp, r7
 8030810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030814:	4770      	bx	lr
 8030816:	bf00      	nop
 8030818:	24002c00 	.word	0x24002c00

0803081c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 803081c:	b480      	push	{r7}
 803081e:	b083      	sub	sp, #12
 8030820:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8030822:	2300      	movs	r3, #0
 8030824:	607b      	str	r3, [r7, #4]
 8030826:	e002      	b.n	803082e <enq_lock+0x12>
 8030828:	687b      	ldr	r3, [r7, #4]
 803082a:	3301      	adds	r3, #1
 803082c:	607b      	str	r3, [r7, #4]
 803082e:	687b      	ldr	r3, [r7, #4]
 8030830:	2b01      	cmp	r3, #1
 8030832:	d806      	bhi.n	8030842 <enq_lock+0x26>
 8030834:	4a09      	ldr	r2, [pc, #36]	; (803085c <enq_lock+0x40>)
 8030836:	687b      	ldr	r3, [r7, #4]
 8030838:	011b      	lsls	r3, r3, #4
 803083a:	4413      	add	r3, r2
 803083c:	681b      	ldr	r3, [r3, #0]
 803083e:	2b00      	cmp	r3, #0
 8030840:	d1f2      	bne.n	8030828 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8030842:	687b      	ldr	r3, [r7, #4]
 8030844:	2b02      	cmp	r3, #2
 8030846:	bf14      	ite	ne
 8030848:	2301      	movne	r3, #1
 803084a:	2300      	moveq	r3, #0
 803084c:	b2db      	uxtb	r3, r3
}
 803084e:	4618      	mov	r0, r3
 8030850:	370c      	adds	r7, #12
 8030852:	46bd      	mov	sp, r7
 8030854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030858:	4770      	bx	lr
 803085a:	bf00      	nop
 803085c:	24002c00 	.word	0x24002c00

08030860 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8030860:	b480      	push	{r7}
 8030862:	b085      	sub	sp, #20
 8030864:	af00      	add	r7, sp, #0
 8030866:	6078      	str	r0, [r7, #4]
 8030868:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 803086a:	2300      	movs	r3, #0
 803086c:	60fb      	str	r3, [r7, #12]
 803086e:	e01f      	b.n	80308b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8030870:	4a41      	ldr	r2, [pc, #260]	; (8030978 <inc_lock+0x118>)
 8030872:	68fb      	ldr	r3, [r7, #12]
 8030874:	011b      	lsls	r3, r3, #4
 8030876:	4413      	add	r3, r2
 8030878:	681a      	ldr	r2, [r3, #0]
 803087a:	687b      	ldr	r3, [r7, #4]
 803087c:	681b      	ldr	r3, [r3, #0]
 803087e:	429a      	cmp	r2, r3
 8030880:	d113      	bne.n	80308aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8030882:	4a3d      	ldr	r2, [pc, #244]	; (8030978 <inc_lock+0x118>)
 8030884:	68fb      	ldr	r3, [r7, #12]
 8030886:	011b      	lsls	r3, r3, #4
 8030888:	4413      	add	r3, r2
 803088a:	3304      	adds	r3, #4
 803088c:	681a      	ldr	r2, [r3, #0]
 803088e:	687b      	ldr	r3, [r7, #4]
 8030890:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8030892:	429a      	cmp	r2, r3
 8030894:	d109      	bne.n	80308aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8030896:	4a38      	ldr	r2, [pc, #224]	; (8030978 <inc_lock+0x118>)
 8030898:	68fb      	ldr	r3, [r7, #12]
 803089a:	011b      	lsls	r3, r3, #4
 803089c:	4413      	add	r3, r2
 803089e:	3308      	adds	r3, #8
 80308a0:	681a      	ldr	r2, [r3, #0]
 80308a2:	687b      	ldr	r3, [r7, #4]
 80308a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80308a6:	429a      	cmp	r2, r3
 80308a8:	d006      	beq.n	80308b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80308aa:	68fb      	ldr	r3, [r7, #12]
 80308ac:	3301      	adds	r3, #1
 80308ae:	60fb      	str	r3, [r7, #12]
 80308b0:	68fb      	ldr	r3, [r7, #12]
 80308b2:	2b01      	cmp	r3, #1
 80308b4:	d9dc      	bls.n	8030870 <inc_lock+0x10>
 80308b6:	e000      	b.n	80308ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80308b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80308ba:	68fb      	ldr	r3, [r7, #12]
 80308bc:	2b02      	cmp	r3, #2
 80308be:	d132      	bne.n	8030926 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80308c0:	2300      	movs	r3, #0
 80308c2:	60fb      	str	r3, [r7, #12]
 80308c4:	e002      	b.n	80308cc <inc_lock+0x6c>
 80308c6:	68fb      	ldr	r3, [r7, #12]
 80308c8:	3301      	adds	r3, #1
 80308ca:	60fb      	str	r3, [r7, #12]
 80308cc:	68fb      	ldr	r3, [r7, #12]
 80308ce:	2b01      	cmp	r3, #1
 80308d0:	d806      	bhi.n	80308e0 <inc_lock+0x80>
 80308d2:	4a29      	ldr	r2, [pc, #164]	; (8030978 <inc_lock+0x118>)
 80308d4:	68fb      	ldr	r3, [r7, #12]
 80308d6:	011b      	lsls	r3, r3, #4
 80308d8:	4413      	add	r3, r2
 80308da:	681b      	ldr	r3, [r3, #0]
 80308dc:	2b00      	cmp	r3, #0
 80308de:	d1f2      	bne.n	80308c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80308e0:	68fb      	ldr	r3, [r7, #12]
 80308e2:	2b02      	cmp	r3, #2
 80308e4:	d101      	bne.n	80308ea <inc_lock+0x8a>
 80308e6:	2300      	movs	r3, #0
 80308e8:	e040      	b.n	803096c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80308ea:	687b      	ldr	r3, [r7, #4]
 80308ec:	681a      	ldr	r2, [r3, #0]
 80308ee:	4922      	ldr	r1, [pc, #136]	; (8030978 <inc_lock+0x118>)
 80308f0:	68fb      	ldr	r3, [r7, #12]
 80308f2:	011b      	lsls	r3, r3, #4
 80308f4:	440b      	add	r3, r1
 80308f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80308f8:	687b      	ldr	r3, [r7, #4]
 80308fa:	689a      	ldr	r2, [r3, #8]
 80308fc:	491e      	ldr	r1, [pc, #120]	; (8030978 <inc_lock+0x118>)
 80308fe:	68fb      	ldr	r3, [r7, #12]
 8030900:	011b      	lsls	r3, r3, #4
 8030902:	440b      	add	r3, r1
 8030904:	3304      	adds	r3, #4
 8030906:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8030908:	687b      	ldr	r3, [r7, #4]
 803090a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803090c:	491a      	ldr	r1, [pc, #104]	; (8030978 <inc_lock+0x118>)
 803090e:	68fb      	ldr	r3, [r7, #12]
 8030910:	011b      	lsls	r3, r3, #4
 8030912:	440b      	add	r3, r1
 8030914:	3308      	adds	r3, #8
 8030916:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8030918:	4a17      	ldr	r2, [pc, #92]	; (8030978 <inc_lock+0x118>)
 803091a:	68fb      	ldr	r3, [r7, #12]
 803091c:	011b      	lsls	r3, r3, #4
 803091e:	4413      	add	r3, r2
 8030920:	330c      	adds	r3, #12
 8030922:	2200      	movs	r2, #0
 8030924:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8030926:	683b      	ldr	r3, [r7, #0]
 8030928:	2b00      	cmp	r3, #0
 803092a:	d009      	beq.n	8030940 <inc_lock+0xe0>
 803092c:	4a12      	ldr	r2, [pc, #72]	; (8030978 <inc_lock+0x118>)
 803092e:	68fb      	ldr	r3, [r7, #12]
 8030930:	011b      	lsls	r3, r3, #4
 8030932:	4413      	add	r3, r2
 8030934:	330c      	adds	r3, #12
 8030936:	881b      	ldrh	r3, [r3, #0]
 8030938:	2b00      	cmp	r3, #0
 803093a:	d001      	beq.n	8030940 <inc_lock+0xe0>
 803093c:	2300      	movs	r3, #0
 803093e:	e015      	b.n	803096c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8030940:	683b      	ldr	r3, [r7, #0]
 8030942:	2b00      	cmp	r3, #0
 8030944:	d108      	bne.n	8030958 <inc_lock+0xf8>
 8030946:	4a0c      	ldr	r2, [pc, #48]	; (8030978 <inc_lock+0x118>)
 8030948:	68fb      	ldr	r3, [r7, #12]
 803094a:	011b      	lsls	r3, r3, #4
 803094c:	4413      	add	r3, r2
 803094e:	330c      	adds	r3, #12
 8030950:	881b      	ldrh	r3, [r3, #0]
 8030952:	3301      	adds	r3, #1
 8030954:	b29a      	uxth	r2, r3
 8030956:	e001      	b.n	803095c <inc_lock+0xfc>
 8030958:	f44f 7280 	mov.w	r2, #256	; 0x100
 803095c:	4906      	ldr	r1, [pc, #24]	; (8030978 <inc_lock+0x118>)
 803095e:	68fb      	ldr	r3, [r7, #12]
 8030960:	011b      	lsls	r3, r3, #4
 8030962:	440b      	add	r3, r1
 8030964:	330c      	adds	r3, #12
 8030966:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8030968:	68fb      	ldr	r3, [r7, #12]
 803096a:	3301      	adds	r3, #1
}
 803096c:	4618      	mov	r0, r3
 803096e:	3714      	adds	r7, #20
 8030970:	46bd      	mov	sp, r7
 8030972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030976:	4770      	bx	lr
 8030978:	24002c00 	.word	0x24002c00

0803097c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 803097c:	b480      	push	{r7}
 803097e:	b085      	sub	sp, #20
 8030980:	af00      	add	r7, sp, #0
 8030982:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8030984:	687b      	ldr	r3, [r7, #4]
 8030986:	3b01      	subs	r3, #1
 8030988:	607b      	str	r3, [r7, #4]
 803098a:	687b      	ldr	r3, [r7, #4]
 803098c:	2b01      	cmp	r3, #1
 803098e:	d825      	bhi.n	80309dc <dec_lock+0x60>
		n = Files[i].ctr;
 8030990:	4a17      	ldr	r2, [pc, #92]	; (80309f0 <dec_lock+0x74>)
 8030992:	687b      	ldr	r3, [r7, #4]
 8030994:	011b      	lsls	r3, r3, #4
 8030996:	4413      	add	r3, r2
 8030998:	330c      	adds	r3, #12
 803099a:	881b      	ldrh	r3, [r3, #0]
 803099c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 803099e:	89fb      	ldrh	r3, [r7, #14]
 80309a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80309a4:	d101      	bne.n	80309aa <dec_lock+0x2e>
 80309a6:	2300      	movs	r3, #0
 80309a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80309aa:	89fb      	ldrh	r3, [r7, #14]
 80309ac:	2b00      	cmp	r3, #0
 80309ae:	d002      	beq.n	80309b6 <dec_lock+0x3a>
 80309b0:	89fb      	ldrh	r3, [r7, #14]
 80309b2:	3b01      	subs	r3, #1
 80309b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80309b6:	4a0e      	ldr	r2, [pc, #56]	; (80309f0 <dec_lock+0x74>)
 80309b8:	687b      	ldr	r3, [r7, #4]
 80309ba:	011b      	lsls	r3, r3, #4
 80309bc:	4413      	add	r3, r2
 80309be:	330c      	adds	r3, #12
 80309c0:	89fa      	ldrh	r2, [r7, #14]
 80309c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80309c4:	89fb      	ldrh	r3, [r7, #14]
 80309c6:	2b00      	cmp	r3, #0
 80309c8:	d105      	bne.n	80309d6 <dec_lock+0x5a>
 80309ca:	4a09      	ldr	r2, [pc, #36]	; (80309f0 <dec_lock+0x74>)
 80309cc:	687b      	ldr	r3, [r7, #4]
 80309ce:	011b      	lsls	r3, r3, #4
 80309d0:	4413      	add	r3, r2
 80309d2:	2200      	movs	r2, #0
 80309d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80309d6:	2300      	movs	r3, #0
 80309d8:	737b      	strb	r3, [r7, #13]
 80309da:	e001      	b.n	80309e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80309dc:	2302      	movs	r3, #2
 80309de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80309e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80309e2:	4618      	mov	r0, r3
 80309e4:	3714      	adds	r7, #20
 80309e6:	46bd      	mov	sp, r7
 80309e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80309ec:	4770      	bx	lr
 80309ee:	bf00      	nop
 80309f0:	24002c00 	.word	0x24002c00

080309f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80309f4:	b480      	push	{r7}
 80309f6:	b085      	sub	sp, #20
 80309f8:	af00      	add	r7, sp, #0
 80309fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80309fc:	2300      	movs	r3, #0
 80309fe:	60fb      	str	r3, [r7, #12]
 8030a00:	e010      	b.n	8030a24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8030a02:	4a0d      	ldr	r2, [pc, #52]	; (8030a38 <clear_lock+0x44>)
 8030a04:	68fb      	ldr	r3, [r7, #12]
 8030a06:	011b      	lsls	r3, r3, #4
 8030a08:	4413      	add	r3, r2
 8030a0a:	681b      	ldr	r3, [r3, #0]
 8030a0c:	687a      	ldr	r2, [r7, #4]
 8030a0e:	429a      	cmp	r2, r3
 8030a10:	d105      	bne.n	8030a1e <clear_lock+0x2a>
 8030a12:	4a09      	ldr	r2, [pc, #36]	; (8030a38 <clear_lock+0x44>)
 8030a14:	68fb      	ldr	r3, [r7, #12]
 8030a16:	011b      	lsls	r3, r3, #4
 8030a18:	4413      	add	r3, r2
 8030a1a:	2200      	movs	r2, #0
 8030a1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8030a1e:	68fb      	ldr	r3, [r7, #12]
 8030a20:	3301      	adds	r3, #1
 8030a22:	60fb      	str	r3, [r7, #12]
 8030a24:	68fb      	ldr	r3, [r7, #12]
 8030a26:	2b01      	cmp	r3, #1
 8030a28:	d9eb      	bls.n	8030a02 <clear_lock+0xe>
	}
}
 8030a2a:	bf00      	nop
 8030a2c:	bf00      	nop
 8030a2e:	3714      	adds	r7, #20
 8030a30:	46bd      	mov	sp, r7
 8030a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a36:	4770      	bx	lr
 8030a38:	24002c00 	.word	0x24002c00

08030a3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8030a3c:	b580      	push	{r7, lr}
 8030a3e:	b086      	sub	sp, #24
 8030a40:	af00      	add	r7, sp, #0
 8030a42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8030a44:	2300      	movs	r3, #0
 8030a46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8030a48:	687b      	ldr	r3, [r7, #4]
 8030a4a:	78db      	ldrb	r3, [r3, #3]
 8030a4c:	2b00      	cmp	r3, #0
 8030a4e:	d034      	beq.n	8030aba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8030a50:	687b      	ldr	r3, [r7, #4]
 8030a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8030a54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8030a56:	687b      	ldr	r3, [r7, #4]
 8030a58:	7858      	ldrb	r0, [r3, #1]
 8030a5a:	687b      	ldr	r3, [r7, #4]
 8030a5c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030a60:	2301      	movs	r3, #1
 8030a62:	697a      	ldr	r2, [r7, #20]
 8030a64:	f7ff fbac 	bl	80301c0 <disk_write>
 8030a68:	4603      	mov	r3, r0
 8030a6a:	2b00      	cmp	r3, #0
 8030a6c:	d002      	beq.n	8030a74 <sync_window+0x38>
			res = FR_DISK_ERR;
 8030a6e:	2301      	movs	r3, #1
 8030a70:	73fb      	strb	r3, [r7, #15]
 8030a72:	e022      	b.n	8030aba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8030a74:	687b      	ldr	r3, [r7, #4]
 8030a76:	2200      	movs	r2, #0
 8030a78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8030a7a:	687b      	ldr	r3, [r7, #4]
 8030a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030a7e:	697a      	ldr	r2, [r7, #20]
 8030a80:	1ad2      	subs	r2, r2, r3
 8030a82:	687b      	ldr	r3, [r7, #4]
 8030a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030a86:	429a      	cmp	r2, r3
 8030a88:	d217      	bcs.n	8030aba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8030a8a:	687b      	ldr	r3, [r7, #4]
 8030a8c:	789b      	ldrb	r3, [r3, #2]
 8030a8e:	613b      	str	r3, [r7, #16]
 8030a90:	e010      	b.n	8030ab4 <sync_window+0x78>
					wsect += fs->fsize;
 8030a92:	687b      	ldr	r3, [r7, #4]
 8030a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030a96:	697a      	ldr	r2, [r7, #20]
 8030a98:	4413      	add	r3, r2
 8030a9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8030a9c:	687b      	ldr	r3, [r7, #4]
 8030a9e:	7858      	ldrb	r0, [r3, #1]
 8030aa0:	687b      	ldr	r3, [r7, #4]
 8030aa2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030aa6:	2301      	movs	r3, #1
 8030aa8:	697a      	ldr	r2, [r7, #20]
 8030aaa:	f7ff fb89 	bl	80301c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8030aae:	693b      	ldr	r3, [r7, #16]
 8030ab0:	3b01      	subs	r3, #1
 8030ab2:	613b      	str	r3, [r7, #16]
 8030ab4:	693b      	ldr	r3, [r7, #16]
 8030ab6:	2b01      	cmp	r3, #1
 8030ab8:	d8eb      	bhi.n	8030a92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8030aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8030abc:	4618      	mov	r0, r3
 8030abe:	3718      	adds	r7, #24
 8030ac0:	46bd      	mov	sp, r7
 8030ac2:	bd80      	pop	{r7, pc}

08030ac4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8030ac4:	b580      	push	{r7, lr}
 8030ac6:	b084      	sub	sp, #16
 8030ac8:	af00      	add	r7, sp, #0
 8030aca:	6078      	str	r0, [r7, #4]
 8030acc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8030ace:	2300      	movs	r3, #0
 8030ad0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8030ad2:	687b      	ldr	r3, [r7, #4]
 8030ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8030ad6:	683a      	ldr	r2, [r7, #0]
 8030ad8:	429a      	cmp	r2, r3
 8030ada:	d01b      	beq.n	8030b14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8030adc:	6878      	ldr	r0, [r7, #4]
 8030ade:	f7ff ffad 	bl	8030a3c <sync_window>
 8030ae2:	4603      	mov	r3, r0
 8030ae4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8030ae6:	7bfb      	ldrb	r3, [r7, #15]
 8030ae8:	2b00      	cmp	r3, #0
 8030aea:	d113      	bne.n	8030b14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8030aec:	687b      	ldr	r3, [r7, #4]
 8030aee:	7858      	ldrb	r0, [r3, #1]
 8030af0:	687b      	ldr	r3, [r7, #4]
 8030af2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030af6:	2301      	movs	r3, #1
 8030af8:	683a      	ldr	r2, [r7, #0]
 8030afa:	f7ff fb41 	bl	8030180 <disk_read>
 8030afe:	4603      	mov	r3, r0
 8030b00:	2b00      	cmp	r3, #0
 8030b02:	d004      	beq.n	8030b0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8030b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8030b08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8030b0a:	2301      	movs	r3, #1
 8030b0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8030b0e:	687b      	ldr	r3, [r7, #4]
 8030b10:	683a      	ldr	r2, [r7, #0]
 8030b12:	64da      	str	r2, [r3, #76]	; 0x4c
		}
	}
	return res;
 8030b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8030b16:	4618      	mov	r0, r3
 8030b18:	3710      	adds	r7, #16
 8030b1a:	46bd      	mov	sp, r7
 8030b1c:	bd80      	pop	{r7, pc}
	...

08030b20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8030b20:	b580      	push	{r7, lr}
 8030b22:	b084      	sub	sp, #16
 8030b24:	af00      	add	r7, sp, #0
 8030b26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8030b28:	6878      	ldr	r0, [r7, #4]
 8030b2a:	f7ff ff87 	bl	8030a3c <sync_window>
 8030b2e:	4603      	mov	r3, r0
 8030b30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8030b32:	7bfb      	ldrb	r3, [r7, #15]
 8030b34:	2b00      	cmp	r3, #0
 8030b36:	d159      	bne.n	8030bec <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8030b38:	687b      	ldr	r3, [r7, #4]
 8030b3a:	781b      	ldrb	r3, [r3, #0]
 8030b3c:	2b03      	cmp	r3, #3
 8030b3e:	d149      	bne.n	8030bd4 <sync_fs+0xb4>
 8030b40:	687b      	ldr	r3, [r7, #4]
 8030b42:	791b      	ldrb	r3, [r3, #4]
 8030b44:	2b01      	cmp	r3, #1
 8030b46:	d145      	bne.n	8030bd4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8030b48:	687b      	ldr	r3, [r7, #4]
 8030b4a:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8030b4e:	687b      	ldr	r3, [r7, #4]
 8030b50:	899b      	ldrh	r3, [r3, #12]
 8030b52:	461a      	mov	r2, r3
 8030b54:	2100      	movs	r1, #0
 8030b56:	f7ff fd77 	bl	8030648 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8030b5a:	687b      	ldr	r3, [r7, #4]
 8030b5c:	3350      	adds	r3, #80	; 0x50
 8030b5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8030b62:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8030b66:	4618      	mov	r0, r3
 8030b68:	f7ff fc7e 	bl	8030468 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8030b6c:	687b      	ldr	r3, [r7, #4]
 8030b6e:	3350      	adds	r3, #80	; 0x50
 8030b70:	4921      	ldr	r1, [pc, #132]	; (8030bf8 <sync_fs+0xd8>)
 8030b72:	4618      	mov	r0, r3
 8030b74:	f7ff fc93 	bl	803049e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8030b78:	687b      	ldr	r3, [r7, #4]
 8030b7a:	3350      	adds	r3, #80	; 0x50
 8030b7c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8030b80:	491e      	ldr	r1, [pc, #120]	; (8030bfc <sync_fs+0xdc>)
 8030b82:	4618      	mov	r0, r3
 8030b84:	f7ff fc8b 	bl	803049e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8030b88:	687b      	ldr	r3, [r7, #4]
 8030b8a:	3350      	adds	r3, #80	; 0x50
 8030b8c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8030b90:	687b      	ldr	r3, [r7, #4]
 8030b92:	6a1b      	ldr	r3, [r3, #32]
 8030b94:	4619      	mov	r1, r3
 8030b96:	4610      	mov	r0, r2
 8030b98:	f7ff fc81 	bl	803049e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8030b9c:	687b      	ldr	r3, [r7, #4]
 8030b9e:	3350      	adds	r3, #80	; 0x50
 8030ba0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8030ba4:	687b      	ldr	r3, [r7, #4]
 8030ba6:	69db      	ldr	r3, [r3, #28]
 8030ba8:	4619      	mov	r1, r3
 8030baa:	4610      	mov	r0, r2
 8030bac:	f7ff fc77 	bl	803049e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8030bb0:	687b      	ldr	r3, [r7, #4]
 8030bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030bb4:	1c5a      	adds	r2, r3, #1
 8030bb6:	687b      	ldr	r3, [r7, #4]
 8030bb8:	64da      	str	r2, [r3, #76]	; 0x4c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8030bba:	687b      	ldr	r3, [r7, #4]
 8030bbc:	7858      	ldrb	r0, [r3, #1]
 8030bbe:	687b      	ldr	r3, [r7, #4]
 8030bc0:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030bc4:	687b      	ldr	r3, [r7, #4]
 8030bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8030bc8:	2301      	movs	r3, #1
 8030bca:	f7ff faf9 	bl	80301c0 <disk_write>
			fs->fsi_flag = 0;
 8030bce:	687b      	ldr	r3, [r7, #4]
 8030bd0:	2200      	movs	r2, #0
 8030bd2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8030bd4:	687b      	ldr	r3, [r7, #4]
 8030bd6:	785b      	ldrb	r3, [r3, #1]
 8030bd8:	2200      	movs	r2, #0
 8030bda:	2100      	movs	r1, #0
 8030bdc:	4618      	mov	r0, r3
 8030bde:	f7ff fb0f 	bl	8030200 <disk_ioctl>
 8030be2:	4603      	mov	r3, r0
 8030be4:	2b00      	cmp	r3, #0
 8030be6:	d001      	beq.n	8030bec <sync_fs+0xcc>
 8030be8:	2301      	movs	r3, #1
 8030bea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8030bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8030bee:	4618      	mov	r0, r3
 8030bf0:	3710      	adds	r7, #16
 8030bf2:	46bd      	mov	sp, r7
 8030bf4:	bd80      	pop	{r7, pc}
 8030bf6:	bf00      	nop
 8030bf8:	41615252 	.word	0x41615252
 8030bfc:	61417272 	.word	0x61417272

08030c00 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8030c00:	b480      	push	{r7}
 8030c02:	b083      	sub	sp, #12
 8030c04:	af00      	add	r7, sp, #0
 8030c06:	6078      	str	r0, [r7, #4]
 8030c08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8030c0a:	683b      	ldr	r3, [r7, #0]
 8030c0c:	3b02      	subs	r3, #2
 8030c0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8030c10:	687b      	ldr	r3, [r7, #4]
 8030c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030c14:	3b02      	subs	r3, #2
 8030c16:	683a      	ldr	r2, [r7, #0]
 8030c18:	429a      	cmp	r2, r3
 8030c1a:	d301      	bcc.n	8030c20 <clust2sect+0x20>
 8030c1c:	2300      	movs	r3, #0
 8030c1e:	e008      	b.n	8030c32 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8030c20:	687b      	ldr	r3, [r7, #4]
 8030c22:	895b      	ldrh	r3, [r3, #10]
 8030c24:	461a      	mov	r2, r3
 8030c26:	683b      	ldr	r3, [r7, #0]
 8030c28:	fb03 f202 	mul.w	r2, r3, r2
 8030c2c:	687b      	ldr	r3, [r7, #4]
 8030c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8030c30:	4413      	add	r3, r2
}
 8030c32:	4618      	mov	r0, r3
 8030c34:	370c      	adds	r7, #12
 8030c36:	46bd      	mov	sp, r7
 8030c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030c3c:	4770      	bx	lr
	...

08030c40 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8030c40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8030c44:	b088      	sub	sp, #32
 8030c46:	af00      	add	r7, sp, #0
 8030c48:	6078      	str	r0, [r7, #4]
 8030c4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8030c4c:	687b      	ldr	r3, [r7, #4]
 8030c4e:	681b      	ldr	r3, [r3, #0]
 8030c50:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8030c52:	683b      	ldr	r3, [r7, #0]
 8030c54:	2b01      	cmp	r3, #1
 8030c56:	d904      	bls.n	8030c62 <get_fat+0x22>
 8030c58:	69bb      	ldr	r3, [r7, #24]
 8030c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030c5c:	683a      	ldr	r2, [r7, #0]
 8030c5e:	429a      	cmp	r2, r3
 8030c60:	d302      	bcc.n	8030c68 <get_fat+0x28>
		val = 1;	/* Internal error */
 8030c62:	2301      	movs	r3, #1
 8030c64:	61fb      	str	r3, [r7, #28]
 8030c66:	e13a      	b.n	8030ede <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8030c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8030c6c:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8030c6e:	69bb      	ldr	r3, [r7, #24]
 8030c70:	781b      	ldrb	r3, [r3, #0]
 8030c72:	3b01      	subs	r3, #1
 8030c74:	2b03      	cmp	r3, #3
 8030c76:	f200 8126 	bhi.w	8030ec6 <get_fat+0x286>
 8030c7a:	a201      	add	r2, pc, #4	; (adr r2, 8030c80 <get_fat+0x40>)
 8030c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030c80:	08030c91 	.word	0x08030c91
 8030c84:	08030d3f 	.word	0x08030d3f
 8030c88:	08030d8b 	.word	0x08030d8b
 8030c8c:	08030ddb 	.word	0x08030ddb
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8030c90:	683b      	ldr	r3, [r7, #0]
 8030c92:	60fb      	str	r3, [r7, #12]
 8030c94:	68fb      	ldr	r3, [r7, #12]
 8030c96:	085b      	lsrs	r3, r3, #1
 8030c98:	68fa      	ldr	r2, [r7, #12]
 8030c9a:	4413      	add	r3, r2
 8030c9c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8030c9e:	69bb      	ldr	r3, [r7, #24]
 8030ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030ca2:	69bb      	ldr	r3, [r7, #24]
 8030ca4:	899b      	ldrh	r3, [r3, #12]
 8030ca6:	4619      	mov	r1, r3
 8030ca8:	68fb      	ldr	r3, [r7, #12]
 8030caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8030cae:	4413      	add	r3, r2
 8030cb0:	4619      	mov	r1, r3
 8030cb2:	69b8      	ldr	r0, [r7, #24]
 8030cb4:	f7ff ff06 	bl	8030ac4 <move_window>
 8030cb8:	4603      	mov	r3, r0
 8030cba:	2b00      	cmp	r3, #0
 8030cbc:	f040 8106 	bne.w	8030ecc <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 8030cc0:	68fb      	ldr	r3, [r7, #12]
 8030cc2:	1c5a      	adds	r2, r3, #1
 8030cc4:	60fa      	str	r2, [r7, #12]
 8030cc6:	69ba      	ldr	r2, [r7, #24]
 8030cc8:	8992      	ldrh	r2, [r2, #12]
 8030cca:	fbb3 f1f2 	udiv	r1, r3, r2
 8030cce:	fb01 f202 	mul.w	r2, r1, r2
 8030cd2:	1a9b      	subs	r3, r3, r2
 8030cd4:	69ba      	ldr	r2, [r7, #24]
 8030cd6:	4413      	add	r3, r2
 8030cd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8030cdc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8030cde:	69bb      	ldr	r3, [r7, #24]
 8030ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030ce2:	69bb      	ldr	r3, [r7, #24]
 8030ce4:	899b      	ldrh	r3, [r3, #12]
 8030ce6:	4619      	mov	r1, r3
 8030ce8:	68fb      	ldr	r3, [r7, #12]
 8030cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8030cee:	4413      	add	r3, r2
 8030cf0:	4619      	mov	r1, r3
 8030cf2:	69b8      	ldr	r0, [r7, #24]
 8030cf4:	f7ff fee6 	bl	8030ac4 <move_window>
 8030cf8:	4603      	mov	r3, r0
 8030cfa:	2b00      	cmp	r3, #0
 8030cfc:	f040 80e8 	bne.w	8030ed0 <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 8030d00:	69bb      	ldr	r3, [r7, #24]
 8030d02:	899b      	ldrh	r3, [r3, #12]
 8030d04:	461a      	mov	r2, r3
 8030d06:	68fb      	ldr	r3, [r7, #12]
 8030d08:	fbb3 f1f2 	udiv	r1, r3, r2
 8030d0c:	fb01 f202 	mul.w	r2, r1, r2
 8030d10:	1a9b      	subs	r3, r3, r2
 8030d12:	69ba      	ldr	r2, [r7, #24]
 8030d14:	4413      	add	r3, r2
 8030d16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8030d1a:	021b      	lsls	r3, r3, #8
 8030d1c:	461a      	mov	r2, r3
 8030d1e:	68bb      	ldr	r3, [r7, #8]
 8030d20:	4313      	orrs	r3, r2
 8030d22:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8030d24:	683b      	ldr	r3, [r7, #0]
 8030d26:	f003 0301 	and.w	r3, r3, #1
 8030d2a:	2b00      	cmp	r3, #0
 8030d2c:	d002      	beq.n	8030d34 <get_fat+0xf4>
 8030d2e:	68bb      	ldr	r3, [r7, #8]
 8030d30:	091b      	lsrs	r3, r3, #4
 8030d32:	e002      	b.n	8030d3a <get_fat+0xfa>
 8030d34:	68bb      	ldr	r3, [r7, #8]
 8030d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8030d3a:	61fb      	str	r3, [r7, #28]
			break;
 8030d3c:	e0cf      	b.n	8030ede <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8030d3e:	69bb      	ldr	r3, [r7, #24]
 8030d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030d42:	69bb      	ldr	r3, [r7, #24]
 8030d44:	899b      	ldrh	r3, [r3, #12]
 8030d46:	085b      	lsrs	r3, r3, #1
 8030d48:	b29b      	uxth	r3, r3
 8030d4a:	4619      	mov	r1, r3
 8030d4c:	683b      	ldr	r3, [r7, #0]
 8030d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8030d52:	4413      	add	r3, r2
 8030d54:	4619      	mov	r1, r3
 8030d56:	69b8      	ldr	r0, [r7, #24]
 8030d58:	f7ff feb4 	bl	8030ac4 <move_window>
 8030d5c:	4603      	mov	r3, r0
 8030d5e:	2b00      	cmp	r3, #0
 8030d60:	f040 80b8 	bne.w	8030ed4 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8030d64:	69bb      	ldr	r3, [r7, #24]
 8030d66:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030d6a:	683b      	ldr	r3, [r7, #0]
 8030d6c:	005b      	lsls	r3, r3, #1
 8030d6e:	69ba      	ldr	r2, [r7, #24]
 8030d70:	8992      	ldrh	r2, [r2, #12]
 8030d72:	fbb3 f0f2 	udiv	r0, r3, r2
 8030d76:	fb00 f202 	mul.w	r2, r0, r2
 8030d7a:	1a9b      	subs	r3, r3, r2
 8030d7c:	440b      	add	r3, r1
 8030d7e:	4618      	mov	r0, r3
 8030d80:	f7ff fa5c 	bl	803023c <ld_word>
 8030d84:	4603      	mov	r3, r0
 8030d86:	61fb      	str	r3, [r7, #28]
			break;
 8030d88:	e0a9      	b.n	8030ede <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8030d8a:	69bb      	ldr	r3, [r7, #24]
 8030d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030d8e:	69bb      	ldr	r3, [r7, #24]
 8030d90:	899b      	ldrh	r3, [r3, #12]
 8030d92:	089b      	lsrs	r3, r3, #2
 8030d94:	b29b      	uxth	r3, r3
 8030d96:	4619      	mov	r1, r3
 8030d98:	683b      	ldr	r3, [r7, #0]
 8030d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8030d9e:	4413      	add	r3, r2
 8030da0:	4619      	mov	r1, r3
 8030da2:	69b8      	ldr	r0, [r7, #24]
 8030da4:	f7ff fe8e 	bl	8030ac4 <move_window>
 8030da8:	4603      	mov	r3, r0
 8030daa:	2b00      	cmp	r3, #0
 8030dac:	f040 8094 	bne.w	8030ed8 <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8030db0:	69bb      	ldr	r3, [r7, #24]
 8030db2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030db6:	683b      	ldr	r3, [r7, #0]
 8030db8:	009b      	lsls	r3, r3, #2
 8030dba:	69ba      	ldr	r2, [r7, #24]
 8030dbc:	8992      	ldrh	r2, [r2, #12]
 8030dbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8030dc2:	fb00 f202 	mul.w	r2, r0, r2
 8030dc6:	1a9b      	subs	r3, r3, r2
 8030dc8:	440b      	add	r3, r1
 8030dca:	4618      	mov	r0, r3
 8030dcc:	f7ff fa4e 	bl	803026c <ld_dword>
 8030dd0:	4603      	mov	r3, r0
 8030dd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8030dd6:	61fb      	str	r3, [r7, #28]
			break;
 8030dd8:	e081      	b.n	8030ede <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8030dda:	687b      	ldr	r3, [r7, #4]
 8030ddc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8030de0:	4313      	orrs	r3, r2
 8030de2:	d070      	beq.n	8030ec6 <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8030de4:	687b      	ldr	r3, [r7, #4]
 8030de6:	689b      	ldr	r3, [r3, #8]
 8030de8:	683a      	ldr	r2, [r7, #0]
 8030dea:	1ad3      	subs	r3, r2, r3
 8030dec:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8030dee:	687b      	ldr	r3, [r7, #4]
 8030df0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8030df4:	1e54      	subs	r4, r2, #1
 8030df6:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 8030dfa:	69bb      	ldr	r3, [r7, #24]
 8030dfc:	899b      	ldrh	r3, [r3, #12]
 8030dfe:	b29b      	uxth	r3, r3
 8030e00:	2200      	movs	r2, #0
 8030e02:	4698      	mov	r8, r3
 8030e04:	4691      	mov	r9, r2
 8030e06:	4642      	mov	r2, r8
 8030e08:	464b      	mov	r3, r9
 8030e0a:	4620      	mov	r0, r4
 8030e0c:	4629      	mov	r1, r5
 8030e0e:	f7ef fae7 	bl	80203e0 <__aeabi_uldivmod>
 8030e12:	4602      	mov	r2, r0
 8030e14:	460b      	mov	r3, r1
 8030e16:	69bb      	ldr	r3, [r7, #24]
 8030e18:	895b      	ldrh	r3, [r3, #10]
 8030e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8030e1e:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8030e20:	687b      	ldr	r3, [r7, #4]
 8030e22:	79db      	ldrb	r3, [r3, #7]
 8030e24:	2b02      	cmp	r3, #2
 8030e26:	d10e      	bne.n	8030e46 <get_fat+0x206>
					if (cofs <= clen) {
 8030e28:	697a      	ldr	r2, [r7, #20]
 8030e2a:	693b      	ldr	r3, [r7, #16]
 8030e2c:	429a      	cmp	r2, r3
 8030e2e:	d80a      	bhi.n	8030e46 <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8030e30:	697a      	ldr	r2, [r7, #20]
 8030e32:	693b      	ldr	r3, [r7, #16]
 8030e34:	429a      	cmp	r2, r3
 8030e36:	d002      	beq.n	8030e3e <get_fat+0x1fe>
 8030e38:	683b      	ldr	r3, [r7, #0]
 8030e3a:	3301      	adds	r3, #1
 8030e3c:	e001      	b.n	8030e42 <get_fat+0x202>
 8030e3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8030e42:	61fb      	str	r3, [r7, #28]
						break;
 8030e44:	e04b      	b.n	8030ede <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8030e46:	687b      	ldr	r3, [r7, #4]
 8030e48:	79db      	ldrb	r3, [r3, #7]
 8030e4a:	2b03      	cmp	r3, #3
 8030e4c:	d108      	bne.n	8030e60 <get_fat+0x220>
 8030e4e:	687b      	ldr	r3, [r7, #4]
 8030e50:	699b      	ldr	r3, [r3, #24]
 8030e52:	697a      	ldr	r2, [r7, #20]
 8030e54:	429a      	cmp	r2, r3
 8030e56:	d203      	bcs.n	8030e60 <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 8030e58:	683b      	ldr	r3, [r7, #0]
 8030e5a:	3301      	adds	r3, #1
 8030e5c:	61fb      	str	r3, [r7, #28]
					break;
 8030e5e:	e03e      	b.n	8030ede <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8030e60:	687b      	ldr	r3, [r7, #4]
 8030e62:	79db      	ldrb	r3, [r3, #7]
 8030e64:	2b02      	cmp	r3, #2
 8030e66:	d02e      	beq.n	8030ec6 <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8030e68:	687b      	ldr	r3, [r7, #4]
 8030e6a:	69db      	ldr	r3, [r3, #28]
 8030e6c:	2b00      	cmp	r3, #0
 8030e6e:	d003      	beq.n	8030e78 <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8030e70:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8030e74:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8030e76:	e032      	b.n	8030ede <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8030e78:	69bb      	ldr	r3, [r7, #24]
 8030e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030e7c:	69bb      	ldr	r3, [r7, #24]
 8030e7e:	899b      	ldrh	r3, [r3, #12]
 8030e80:	089b      	lsrs	r3, r3, #2
 8030e82:	b29b      	uxth	r3, r3
 8030e84:	4619      	mov	r1, r3
 8030e86:	683b      	ldr	r3, [r7, #0]
 8030e88:	fbb3 f3f1 	udiv	r3, r3, r1
 8030e8c:	4413      	add	r3, r2
 8030e8e:	4619      	mov	r1, r3
 8030e90:	69b8      	ldr	r0, [r7, #24]
 8030e92:	f7ff fe17 	bl	8030ac4 <move_window>
 8030e96:	4603      	mov	r3, r0
 8030e98:	2b00      	cmp	r3, #0
 8030e9a:	d11f      	bne.n	8030edc <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8030e9c:	69bb      	ldr	r3, [r7, #24]
 8030e9e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030ea2:	683b      	ldr	r3, [r7, #0]
 8030ea4:	009b      	lsls	r3, r3, #2
 8030ea6:	69ba      	ldr	r2, [r7, #24]
 8030ea8:	8992      	ldrh	r2, [r2, #12]
 8030eaa:	fbb3 f0f2 	udiv	r0, r3, r2
 8030eae:	fb00 f202 	mul.w	r2, r0, r2
 8030eb2:	1a9b      	subs	r3, r3, r2
 8030eb4:	440b      	add	r3, r1
 8030eb6:	4618      	mov	r0, r3
 8030eb8:	f7ff f9d8 	bl	803026c <ld_dword>
 8030ebc:	4603      	mov	r3, r0
 8030ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8030ec2:	61fb      	str	r3, [r7, #28]
					break;
 8030ec4:	e00b      	b.n	8030ede <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8030ec6:	2301      	movs	r3, #1
 8030ec8:	61fb      	str	r3, [r7, #28]
 8030eca:	e008      	b.n	8030ede <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8030ecc:	bf00      	nop
 8030ece:	e006      	b.n	8030ede <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8030ed0:	bf00      	nop
 8030ed2:	e004      	b.n	8030ede <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8030ed4:	bf00      	nop
 8030ed6:	e002      	b.n	8030ede <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8030ed8:	bf00      	nop
 8030eda:	e000      	b.n	8030ede <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8030edc:	bf00      	nop
		}
	}

	return val;
 8030ede:	69fb      	ldr	r3, [r7, #28]
}
 8030ee0:	4618      	mov	r0, r3
 8030ee2:	3720      	adds	r7, #32
 8030ee4:	46bd      	mov	sp, r7
 8030ee6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8030eea:	bf00      	nop

08030eec <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8030eec:	b590      	push	{r4, r7, lr}
 8030eee:	b089      	sub	sp, #36	; 0x24
 8030ef0:	af00      	add	r7, sp, #0
 8030ef2:	60f8      	str	r0, [r7, #12]
 8030ef4:	60b9      	str	r1, [r7, #8]
 8030ef6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8030ef8:	2302      	movs	r3, #2
 8030efa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8030efc:	68bb      	ldr	r3, [r7, #8]
 8030efe:	2b01      	cmp	r3, #1
 8030f00:	f240 8106 	bls.w	8031110 <put_fat+0x224>
 8030f04:	68fb      	ldr	r3, [r7, #12]
 8030f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030f08:	68ba      	ldr	r2, [r7, #8]
 8030f0a:	429a      	cmp	r2, r3
 8030f0c:	f080 8100 	bcs.w	8031110 <put_fat+0x224>
		switch (fs->fs_type) {
 8030f10:	68fb      	ldr	r3, [r7, #12]
 8030f12:	781b      	ldrb	r3, [r3, #0]
 8030f14:	2b04      	cmp	r3, #4
 8030f16:	f300 8104 	bgt.w	8031122 <put_fat+0x236>
 8030f1a:	2b03      	cmp	r3, #3
 8030f1c:	f280 80b3 	bge.w	8031086 <put_fat+0x19a>
 8030f20:	2b01      	cmp	r3, #1
 8030f22:	d003      	beq.n	8030f2c <put_fat+0x40>
 8030f24:	2b02      	cmp	r3, #2
 8030f26:	f000 8083 	beq.w	8031030 <put_fat+0x144>
 8030f2a:	e0fa      	b.n	8031122 <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8030f2c:	68bb      	ldr	r3, [r7, #8]
 8030f2e:	61bb      	str	r3, [r7, #24]
 8030f30:	69bb      	ldr	r3, [r7, #24]
 8030f32:	085b      	lsrs	r3, r3, #1
 8030f34:	69ba      	ldr	r2, [r7, #24]
 8030f36:	4413      	add	r3, r2
 8030f38:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8030f3a:	68fb      	ldr	r3, [r7, #12]
 8030f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030f3e:	68fb      	ldr	r3, [r7, #12]
 8030f40:	899b      	ldrh	r3, [r3, #12]
 8030f42:	4619      	mov	r1, r3
 8030f44:	69bb      	ldr	r3, [r7, #24]
 8030f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8030f4a:	4413      	add	r3, r2
 8030f4c:	4619      	mov	r1, r3
 8030f4e:	68f8      	ldr	r0, [r7, #12]
 8030f50:	f7ff fdb8 	bl	8030ac4 <move_window>
 8030f54:	4603      	mov	r3, r0
 8030f56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8030f58:	7ffb      	ldrb	r3, [r7, #31]
 8030f5a:	2b00      	cmp	r3, #0
 8030f5c:	f040 80da 	bne.w	8031114 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 8030f60:	68fb      	ldr	r3, [r7, #12]
 8030f62:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030f66:	69bb      	ldr	r3, [r7, #24]
 8030f68:	1c5a      	adds	r2, r3, #1
 8030f6a:	61ba      	str	r2, [r7, #24]
 8030f6c:	68fa      	ldr	r2, [r7, #12]
 8030f6e:	8992      	ldrh	r2, [r2, #12]
 8030f70:	fbb3 f0f2 	udiv	r0, r3, r2
 8030f74:	fb00 f202 	mul.w	r2, r0, r2
 8030f78:	1a9b      	subs	r3, r3, r2
 8030f7a:	440b      	add	r3, r1
 8030f7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8030f7e:	68bb      	ldr	r3, [r7, #8]
 8030f80:	f003 0301 	and.w	r3, r3, #1
 8030f84:	2b00      	cmp	r3, #0
 8030f86:	d00d      	beq.n	8030fa4 <put_fat+0xb8>
 8030f88:	697b      	ldr	r3, [r7, #20]
 8030f8a:	781b      	ldrb	r3, [r3, #0]
 8030f8c:	b25b      	sxtb	r3, r3
 8030f8e:	f003 030f 	and.w	r3, r3, #15
 8030f92:	b25a      	sxtb	r2, r3
 8030f94:	687b      	ldr	r3, [r7, #4]
 8030f96:	b2db      	uxtb	r3, r3
 8030f98:	011b      	lsls	r3, r3, #4
 8030f9a:	b25b      	sxtb	r3, r3
 8030f9c:	4313      	orrs	r3, r2
 8030f9e:	b25b      	sxtb	r3, r3
 8030fa0:	b2db      	uxtb	r3, r3
 8030fa2:	e001      	b.n	8030fa8 <put_fat+0xbc>
 8030fa4:	687b      	ldr	r3, [r7, #4]
 8030fa6:	b2db      	uxtb	r3, r3
 8030fa8:	697a      	ldr	r2, [r7, #20]
 8030faa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8030fac:	68fb      	ldr	r3, [r7, #12]
 8030fae:	2201      	movs	r2, #1
 8030fb0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8030fb2:	68fb      	ldr	r3, [r7, #12]
 8030fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8030fb6:	68fb      	ldr	r3, [r7, #12]
 8030fb8:	899b      	ldrh	r3, [r3, #12]
 8030fba:	4619      	mov	r1, r3
 8030fbc:	69bb      	ldr	r3, [r7, #24]
 8030fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8030fc2:	4413      	add	r3, r2
 8030fc4:	4619      	mov	r1, r3
 8030fc6:	68f8      	ldr	r0, [r7, #12]
 8030fc8:	f7ff fd7c 	bl	8030ac4 <move_window>
 8030fcc:	4603      	mov	r3, r0
 8030fce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8030fd0:	7ffb      	ldrb	r3, [r7, #31]
 8030fd2:	2b00      	cmp	r3, #0
 8030fd4:	f040 80a0 	bne.w	8031118 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 8030fd8:	68fb      	ldr	r3, [r7, #12]
 8030fda:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8030fde:	68fb      	ldr	r3, [r7, #12]
 8030fe0:	899b      	ldrh	r3, [r3, #12]
 8030fe2:	461a      	mov	r2, r3
 8030fe4:	69bb      	ldr	r3, [r7, #24]
 8030fe6:	fbb3 f0f2 	udiv	r0, r3, r2
 8030fea:	fb00 f202 	mul.w	r2, r0, r2
 8030fee:	1a9b      	subs	r3, r3, r2
 8030ff0:	440b      	add	r3, r1
 8030ff2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8030ff4:	68bb      	ldr	r3, [r7, #8]
 8030ff6:	f003 0301 	and.w	r3, r3, #1
 8030ffa:	2b00      	cmp	r3, #0
 8030ffc:	d003      	beq.n	8031006 <put_fat+0x11a>
 8030ffe:	687b      	ldr	r3, [r7, #4]
 8031000:	091b      	lsrs	r3, r3, #4
 8031002:	b2db      	uxtb	r3, r3
 8031004:	e00e      	b.n	8031024 <put_fat+0x138>
 8031006:	697b      	ldr	r3, [r7, #20]
 8031008:	781b      	ldrb	r3, [r3, #0]
 803100a:	b25b      	sxtb	r3, r3
 803100c:	f023 030f 	bic.w	r3, r3, #15
 8031010:	b25a      	sxtb	r2, r3
 8031012:	687b      	ldr	r3, [r7, #4]
 8031014:	0a1b      	lsrs	r3, r3, #8
 8031016:	b25b      	sxtb	r3, r3
 8031018:	f003 030f 	and.w	r3, r3, #15
 803101c:	b25b      	sxtb	r3, r3
 803101e:	4313      	orrs	r3, r2
 8031020:	b25b      	sxtb	r3, r3
 8031022:	b2db      	uxtb	r3, r3
 8031024:	697a      	ldr	r2, [r7, #20]
 8031026:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8031028:	68fb      	ldr	r3, [r7, #12]
 803102a:	2201      	movs	r2, #1
 803102c:	70da      	strb	r2, [r3, #3]
			break;
 803102e:	e078      	b.n	8031122 <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8031030:	68fb      	ldr	r3, [r7, #12]
 8031032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8031034:	68fb      	ldr	r3, [r7, #12]
 8031036:	899b      	ldrh	r3, [r3, #12]
 8031038:	085b      	lsrs	r3, r3, #1
 803103a:	b29b      	uxth	r3, r3
 803103c:	4619      	mov	r1, r3
 803103e:	68bb      	ldr	r3, [r7, #8]
 8031040:	fbb3 f3f1 	udiv	r3, r3, r1
 8031044:	4413      	add	r3, r2
 8031046:	4619      	mov	r1, r3
 8031048:	68f8      	ldr	r0, [r7, #12]
 803104a:	f7ff fd3b 	bl	8030ac4 <move_window>
 803104e:	4603      	mov	r3, r0
 8031050:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8031052:	7ffb      	ldrb	r3, [r7, #31]
 8031054:	2b00      	cmp	r3, #0
 8031056:	d161      	bne.n	803111c <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8031058:	68fb      	ldr	r3, [r7, #12]
 803105a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 803105e:	68bb      	ldr	r3, [r7, #8]
 8031060:	005b      	lsls	r3, r3, #1
 8031062:	68fa      	ldr	r2, [r7, #12]
 8031064:	8992      	ldrh	r2, [r2, #12]
 8031066:	fbb3 f0f2 	udiv	r0, r3, r2
 803106a:	fb00 f202 	mul.w	r2, r0, r2
 803106e:	1a9b      	subs	r3, r3, r2
 8031070:	440b      	add	r3, r1
 8031072:	687a      	ldr	r2, [r7, #4]
 8031074:	b292      	uxth	r2, r2
 8031076:	4611      	mov	r1, r2
 8031078:	4618      	mov	r0, r3
 803107a:	f7ff f9f5 	bl	8030468 <st_word>
			fs->wflag = 1;
 803107e:	68fb      	ldr	r3, [r7, #12]
 8031080:	2201      	movs	r2, #1
 8031082:	70da      	strb	r2, [r3, #3]
			break;
 8031084:	e04d      	b.n	8031122 <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8031086:	68fb      	ldr	r3, [r7, #12]
 8031088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 803108a:	68fb      	ldr	r3, [r7, #12]
 803108c:	899b      	ldrh	r3, [r3, #12]
 803108e:	089b      	lsrs	r3, r3, #2
 8031090:	b29b      	uxth	r3, r3
 8031092:	4619      	mov	r1, r3
 8031094:	68bb      	ldr	r3, [r7, #8]
 8031096:	fbb3 f3f1 	udiv	r3, r3, r1
 803109a:	4413      	add	r3, r2
 803109c:	4619      	mov	r1, r3
 803109e:	68f8      	ldr	r0, [r7, #12]
 80310a0:	f7ff fd10 	bl	8030ac4 <move_window>
 80310a4:	4603      	mov	r3, r0
 80310a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80310a8:	7ffb      	ldrb	r3, [r7, #31]
 80310aa:	2b00      	cmp	r3, #0
 80310ac:	d138      	bne.n	8031120 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80310ae:	68fb      	ldr	r3, [r7, #12]
 80310b0:	781b      	ldrb	r3, [r3, #0]
 80310b2:	2b04      	cmp	r3, #4
 80310b4:	d017      	beq.n	80310e6 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80310b6:	687b      	ldr	r3, [r7, #4]
 80310b8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80310bc:	68fb      	ldr	r3, [r7, #12]
 80310be:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80310c2:	68bb      	ldr	r3, [r7, #8]
 80310c4:	009b      	lsls	r3, r3, #2
 80310c6:	68fa      	ldr	r2, [r7, #12]
 80310c8:	8992      	ldrh	r2, [r2, #12]
 80310ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80310ce:	fb00 f202 	mul.w	r2, r0, r2
 80310d2:	1a9b      	subs	r3, r3, r2
 80310d4:	440b      	add	r3, r1
 80310d6:	4618      	mov	r0, r3
 80310d8:	f7ff f8c8 	bl	803026c <ld_dword>
 80310dc:	4603      	mov	r3, r0
 80310de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80310e2:	4323      	orrs	r3, r4
 80310e4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80310e6:	68fb      	ldr	r3, [r7, #12]
 80310e8:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80310ec:	68bb      	ldr	r3, [r7, #8]
 80310ee:	009b      	lsls	r3, r3, #2
 80310f0:	68fa      	ldr	r2, [r7, #12]
 80310f2:	8992      	ldrh	r2, [r2, #12]
 80310f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80310f8:	fb00 f202 	mul.w	r2, r0, r2
 80310fc:	1a9b      	subs	r3, r3, r2
 80310fe:	440b      	add	r3, r1
 8031100:	6879      	ldr	r1, [r7, #4]
 8031102:	4618      	mov	r0, r3
 8031104:	f7ff f9cb 	bl	803049e <st_dword>
			fs->wflag = 1;
 8031108:	68fb      	ldr	r3, [r7, #12]
 803110a:	2201      	movs	r2, #1
 803110c:	70da      	strb	r2, [r3, #3]
			break;
 803110e:	e008      	b.n	8031122 <put_fat+0x236>
		}
	}
 8031110:	bf00      	nop
 8031112:	e006      	b.n	8031122 <put_fat+0x236>
			if (res != FR_OK) break;
 8031114:	bf00      	nop
 8031116:	e004      	b.n	8031122 <put_fat+0x236>
			if (res != FR_OK) break;
 8031118:	bf00      	nop
 803111a:	e002      	b.n	8031122 <put_fat+0x236>
			if (res != FR_OK) break;
 803111c:	bf00      	nop
 803111e:	e000      	b.n	8031122 <put_fat+0x236>
			if (res != FR_OK) break;
 8031120:	bf00      	nop
	return res;
 8031122:	7ffb      	ldrb	r3, [r7, #31]
}
 8031124:	4618      	mov	r0, r3
 8031126:	3724      	adds	r7, #36	; 0x24
 8031128:	46bd      	mov	sp, r7
 803112a:	bd90      	pop	{r4, r7, pc}

0803112c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 803112c:	b580      	push	{r7, lr}
 803112e:	b08a      	sub	sp, #40	; 0x28
 8031130:	af00      	add	r7, sp, #0
 8031132:	60f8      	str	r0, [r7, #12]
 8031134:	60b9      	str	r1, [r7, #8]
 8031136:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8031138:	68bb      	ldr	r3, [r7, #8]
 803113a:	3b02      	subs	r3, #2
 803113c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 803113e:	68fb      	ldr	r3, [r7, #12]
 8031140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031142:	3b02      	subs	r3, #2
 8031144:	68ba      	ldr	r2, [r7, #8]
 8031146:	429a      	cmp	r2, r3
 8031148:	d301      	bcc.n	803114e <find_bitmap+0x22>
 803114a:	2300      	movs	r3, #0
 803114c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 803114e:	68bb      	ldr	r3, [r7, #8]
 8031150:	61fb      	str	r3, [r7, #28]
 8031152:	69fb      	ldr	r3, [r7, #28]
 8031154:	61bb      	str	r3, [r7, #24]
 8031156:	2300      	movs	r3, #0
 8031158:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 803115a:	68fb      	ldr	r3, [r7, #12]
 803115c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 803115e:	69fb      	ldr	r3, [r7, #28]
 8031160:	08db      	lsrs	r3, r3, #3
 8031162:	68f9      	ldr	r1, [r7, #12]
 8031164:	8989      	ldrh	r1, [r1, #12]
 8031166:	fbb3 f3f1 	udiv	r3, r3, r1
 803116a:	4413      	add	r3, r2
 803116c:	4619      	mov	r1, r3
 803116e:	68f8      	ldr	r0, [r7, #12]
 8031170:	f7ff fca8 	bl	8030ac4 <move_window>
 8031174:	4603      	mov	r3, r0
 8031176:	2b00      	cmp	r3, #0
 8031178:	d002      	beq.n	8031180 <find_bitmap+0x54>
 803117a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803117e:	e058      	b.n	8031232 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8031180:	69fb      	ldr	r3, [r7, #28]
 8031182:	08db      	lsrs	r3, r3, #3
 8031184:	68fa      	ldr	r2, [r7, #12]
 8031186:	8992      	ldrh	r2, [r2, #12]
 8031188:	fbb3 f1f2 	udiv	r1, r3, r2
 803118c:	fb01 f202 	mul.w	r2, r1, r2
 8031190:	1a9b      	subs	r3, r3, r2
 8031192:	623b      	str	r3, [r7, #32]
 8031194:	69fb      	ldr	r3, [r7, #28]
 8031196:	f003 0307 	and.w	r3, r3, #7
 803119a:	2201      	movs	r2, #1
 803119c:	fa02 f303 	lsl.w	r3, r2, r3
 80311a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80311a4:	68fa      	ldr	r2, [r7, #12]
 80311a6:	6a3b      	ldr	r3, [r7, #32]
 80311a8:	4413      	add	r3, r2
 80311aa:	3350      	adds	r3, #80	; 0x50
 80311ac:	781a      	ldrb	r2, [r3, #0]
 80311ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80311b2:	4013      	ands	r3, r2
 80311b4:	74fb      	strb	r3, [r7, #19]
 80311b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80311ba:	005b      	lsls	r3, r3, #1
 80311bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80311c0:	69fb      	ldr	r3, [r7, #28]
 80311c2:	3301      	adds	r3, #1
 80311c4:	61fb      	str	r3, [r7, #28]
 80311c6:	68fb      	ldr	r3, [r7, #12]
 80311c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80311ca:	3b02      	subs	r3, #2
 80311cc:	69fa      	ldr	r2, [r7, #28]
 80311ce:	429a      	cmp	r2, r3
 80311d0:	d307      	bcc.n	80311e2 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 80311d2:	2300      	movs	r3, #0
 80311d4:	61fb      	str	r3, [r7, #28]
 80311d6:	2300      	movs	r3, #0
 80311d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80311dc:	68fb      	ldr	r3, [r7, #12]
 80311de:	899b      	ldrh	r3, [r3, #12]
 80311e0:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80311e2:	7cfb      	ldrb	r3, [r7, #19]
 80311e4:	2b00      	cmp	r3, #0
 80311e6:	d109      	bne.n	80311fc <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80311e8:	697b      	ldr	r3, [r7, #20]
 80311ea:	3301      	adds	r3, #1
 80311ec:	617b      	str	r3, [r7, #20]
 80311ee:	697a      	ldr	r2, [r7, #20]
 80311f0:	687b      	ldr	r3, [r7, #4]
 80311f2:	429a      	cmp	r2, r3
 80311f4:	d106      	bne.n	8031204 <find_bitmap+0xd8>
 80311f6:	69bb      	ldr	r3, [r7, #24]
 80311f8:	3302      	adds	r3, #2
 80311fa:	e01a      	b.n	8031232 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80311fc:	69fb      	ldr	r3, [r7, #28]
 80311fe:	61bb      	str	r3, [r7, #24]
 8031200:	2300      	movs	r3, #0
 8031202:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8031204:	69fa      	ldr	r2, [r7, #28]
 8031206:	68bb      	ldr	r3, [r7, #8]
 8031208:	429a      	cmp	r2, r3
 803120a:	d101      	bne.n	8031210 <find_bitmap+0xe4>
 803120c:	2300      	movs	r3, #0
 803120e:	e010      	b.n	8031232 <find_bitmap+0x106>
			} while (bm);
 8031210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8031214:	2b00      	cmp	r3, #0
 8031216:	d1c5      	bne.n	80311a4 <find_bitmap+0x78>
			bm = 1;
 8031218:	2301      	movs	r3, #1
 803121a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 803121e:	6a3b      	ldr	r3, [r7, #32]
 8031220:	3301      	adds	r3, #1
 8031222:	623b      	str	r3, [r7, #32]
 8031224:	68fb      	ldr	r3, [r7, #12]
 8031226:	899b      	ldrh	r3, [r3, #12]
 8031228:	461a      	mov	r2, r3
 803122a:	6a3b      	ldr	r3, [r7, #32]
 803122c:	4293      	cmp	r3, r2
 803122e:	d3b9      	bcc.n	80311a4 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8031230:	e793      	b.n	803115a <find_bitmap+0x2e>
	}
}
 8031232:	4618      	mov	r0, r3
 8031234:	3728      	adds	r7, #40	; 0x28
 8031236:	46bd      	mov	sp, r7
 8031238:	bd80      	pop	{r7, pc}

0803123a <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 803123a:	b580      	push	{r7, lr}
 803123c:	b088      	sub	sp, #32
 803123e:	af00      	add	r7, sp, #0
 8031240:	60f8      	str	r0, [r7, #12]
 8031242:	60b9      	str	r1, [r7, #8]
 8031244:	607a      	str	r2, [r7, #4]
 8031246:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8031248:	68bb      	ldr	r3, [r7, #8]
 803124a:	3b02      	subs	r3, #2
 803124c:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 803124e:	68fb      	ldr	r3, [r7, #12]
 8031250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8031252:	68bb      	ldr	r3, [r7, #8]
 8031254:	08db      	lsrs	r3, r3, #3
 8031256:	68f9      	ldr	r1, [r7, #12]
 8031258:	8989      	ldrh	r1, [r1, #12]
 803125a:	fbb3 f3f1 	udiv	r3, r3, r1
 803125e:	4413      	add	r3, r2
 8031260:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8031262:	68bb      	ldr	r3, [r7, #8]
 8031264:	08db      	lsrs	r3, r3, #3
 8031266:	68fa      	ldr	r2, [r7, #12]
 8031268:	8992      	ldrh	r2, [r2, #12]
 803126a:	fbb3 f1f2 	udiv	r1, r3, r2
 803126e:	fb01 f202 	mul.w	r2, r1, r2
 8031272:	1a9b      	subs	r3, r3, r2
 8031274:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8031276:	68bb      	ldr	r3, [r7, #8]
 8031278:	f003 0307 	and.w	r3, r3, #7
 803127c:	2201      	movs	r2, #1
 803127e:	fa02 f303 	lsl.w	r3, r2, r3
 8031282:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8031284:	697b      	ldr	r3, [r7, #20]
 8031286:	1c5a      	adds	r2, r3, #1
 8031288:	617a      	str	r2, [r7, #20]
 803128a:	4619      	mov	r1, r3
 803128c:	68f8      	ldr	r0, [r7, #12]
 803128e:	f7ff fc19 	bl	8030ac4 <move_window>
 8031292:	4603      	mov	r3, r0
 8031294:	2b00      	cmp	r3, #0
 8031296:	d001      	beq.n	803129c <change_bitmap+0x62>
 8031298:	2301      	movs	r3, #1
 803129a:	e03f      	b.n	803131c <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 803129c:	68fa      	ldr	r2, [r7, #12]
 803129e:	69bb      	ldr	r3, [r7, #24]
 80312a0:	4413      	add	r3, r2
 80312a2:	3350      	adds	r3, #80	; 0x50
 80312a4:	781a      	ldrb	r2, [r3, #0]
 80312a6:	7ffb      	ldrb	r3, [r7, #31]
 80312a8:	4013      	ands	r3, r2
 80312aa:	b2db      	uxtb	r3, r3
 80312ac:	2b00      	cmp	r3, #0
 80312ae:	bf14      	ite	ne
 80312b0:	2301      	movne	r3, #1
 80312b2:	2300      	moveq	r3, #0
 80312b4:	b2db      	uxtb	r3, r3
 80312b6:	461a      	mov	r2, r3
 80312b8:	683b      	ldr	r3, [r7, #0]
 80312ba:	4293      	cmp	r3, r2
 80312bc:	d101      	bne.n	80312c2 <change_bitmap+0x88>
 80312be:	2302      	movs	r3, #2
 80312c0:	e02c      	b.n	803131c <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 80312c2:	68fa      	ldr	r2, [r7, #12]
 80312c4:	69bb      	ldr	r3, [r7, #24]
 80312c6:	4413      	add	r3, r2
 80312c8:	3350      	adds	r3, #80	; 0x50
 80312ca:	781a      	ldrb	r2, [r3, #0]
 80312cc:	7ffb      	ldrb	r3, [r7, #31]
 80312ce:	4053      	eors	r3, r2
 80312d0:	b2d9      	uxtb	r1, r3
 80312d2:	68fa      	ldr	r2, [r7, #12]
 80312d4:	69bb      	ldr	r3, [r7, #24]
 80312d6:	4413      	add	r3, r2
 80312d8:	3350      	adds	r3, #80	; 0x50
 80312da:	460a      	mov	r2, r1
 80312dc:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80312de:	68fb      	ldr	r3, [r7, #12]
 80312e0:	2201      	movs	r2, #1
 80312e2:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80312e4:	687b      	ldr	r3, [r7, #4]
 80312e6:	3b01      	subs	r3, #1
 80312e8:	607b      	str	r3, [r7, #4]
 80312ea:	687b      	ldr	r3, [r7, #4]
 80312ec:	2b00      	cmp	r3, #0
 80312ee:	d101      	bne.n	80312f4 <change_bitmap+0xba>
 80312f0:	2300      	movs	r3, #0
 80312f2:	e013      	b.n	803131c <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 80312f4:	7ffb      	ldrb	r3, [r7, #31]
 80312f6:	005b      	lsls	r3, r3, #1
 80312f8:	77fb      	strb	r3, [r7, #31]
 80312fa:	7ffb      	ldrb	r3, [r7, #31]
 80312fc:	2b00      	cmp	r3, #0
 80312fe:	d1cd      	bne.n	803129c <change_bitmap+0x62>
			bm = 1;
 8031300:	2301      	movs	r3, #1
 8031302:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8031304:	69bb      	ldr	r3, [r7, #24]
 8031306:	3301      	adds	r3, #1
 8031308:	61bb      	str	r3, [r7, #24]
 803130a:	68fb      	ldr	r3, [r7, #12]
 803130c:	899b      	ldrh	r3, [r3, #12]
 803130e:	461a      	mov	r2, r3
 8031310:	69bb      	ldr	r3, [r7, #24]
 8031312:	4293      	cmp	r3, r2
 8031314:	d3c2      	bcc.n	803129c <change_bitmap+0x62>
		i = 0;
 8031316:	2300      	movs	r3, #0
 8031318:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 803131a:	e7b3      	b.n	8031284 <change_bitmap+0x4a>
	}
}
 803131c:	4618      	mov	r0, r3
 803131e:	3720      	adds	r7, #32
 8031320:	46bd      	mov	sp, r7
 8031322:	bd80      	pop	{r7, pc}

08031324 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8031324:	b580      	push	{r7, lr}
 8031326:	b086      	sub	sp, #24
 8031328:	af00      	add	r7, sp, #0
 803132a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 803132c:	687b      	ldr	r3, [r7, #4]
 803132e:	79db      	ldrb	r3, [r3, #7]
 8031330:	2b03      	cmp	r3, #3
 8031332:	d121      	bne.n	8031378 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8031334:	687b      	ldr	r3, [r7, #4]
 8031336:	689b      	ldr	r3, [r3, #8]
 8031338:	617b      	str	r3, [r7, #20]
 803133a:	687b      	ldr	r3, [r7, #4]
 803133c:	699b      	ldr	r3, [r3, #24]
 803133e:	613b      	str	r3, [r7, #16]
 8031340:	e014      	b.n	803136c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8031342:	687b      	ldr	r3, [r7, #4]
 8031344:	6818      	ldr	r0, [r3, #0]
 8031346:	697b      	ldr	r3, [r7, #20]
 8031348:	3301      	adds	r3, #1
 803134a:	461a      	mov	r2, r3
 803134c:	6979      	ldr	r1, [r7, #20]
 803134e:	f7ff fdcd 	bl	8030eec <put_fat>
 8031352:	4603      	mov	r3, r0
 8031354:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8031356:	7bfb      	ldrb	r3, [r7, #15]
 8031358:	2b00      	cmp	r3, #0
 803135a:	d001      	beq.n	8031360 <fill_first_frag+0x3c>
 803135c:	7bfb      	ldrb	r3, [r7, #15]
 803135e:	e00c      	b.n	803137a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8031360:	697b      	ldr	r3, [r7, #20]
 8031362:	3301      	adds	r3, #1
 8031364:	617b      	str	r3, [r7, #20]
 8031366:	693b      	ldr	r3, [r7, #16]
 8031368:	3b01      	subs	r3, #1
 803136a:	613b      	str	r3, [r7, #16]
 803136c:	693b      	ldr	r3, [r7, #16]
 803136e:	2b00      	cmp	r3, #0
 8031370:	d1e7      	bne.n	8031342 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8031372:	687b      	ldr	r3, [r7, #4]
 8031374:	2200      	movs	r2, #0
 8031376:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8031378:	2300      	movs	r3, #0
}
 803137a:	4618      	mov	r0, r3
 803137c:	3718      	adds	r7, #24
 803137e:	46bd      	mov	sp, r7
 8031380:	bd80      	pop	{r7, pc}

08031382 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8031382:	b580      	push	{r7, lr}
 8031384:	b086      	sub	sp, #24
 8031386:	af00      	add	r7, sp, #0
 8031388:	60f8      	str	r0, [r7, #12]
 803138a:	60b9      	str	r1, [r7, #8]
 803138c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 803138e:	e020      	b.n	80313d2 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8031390:	68fb      	ldr	r3, [r7, #12]
 8031392:	6818      	ldr	r0, [r3, #0]
 8031394:	68fb      	ldr	r3, [r7, #12]
 8031396:	69db      	ldr	r3, [r3, #28]
 8031398:	68ba      	ldr	r2, [r7, #8]
 803139a:	1ad3      	subs	r3, r2, r3
 803139c:	1c59      	adds	r1, r3, #1
 803139e:	68fb      	ldr	r3, [r7, #12]
 80313a0:	69db      	ldr	r3, [r3, #28]
 80313a2:	2b01      	cmp	r3, #1
 80313a4:	d905      	bls.n	80313b2 <fill_last_frag+0x30>
 80313a6:	68fb      	ldr	r3, [r7, #12]
 80313a8:	69db      	ldr	r3, [r3, #28]
 80313aa:	68ba      	ldr	r2, [r7, #8]
 80313ac:	1ad3      	subs	r3, r2, r3
 80313ae:	3302      	adds	r3, #2
 80313b0:	e000      	b.n	80313b4 <fill_last_frag+0x32>
 80313b2:	687b      	ldr	r3, [r7, #4]
 80313b4:	461a      	mov	r2, r3
 80313b6:	f7ff fd99 	bl	8030eec <put_fat>
 80313ba:	4603      	mov	r3, r0
 80313bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80313be:	7dfb      	ldrb	r3, [r7, #23]
 80313c0:	2b00      	cmp	r3, #0
 80313c2:	d001      	beq.n	80313c8 <fill_last_frag+0x46>
 80313c4:	7dfb      	ldrb	r3, [r7, #23]
 80313c6:	e009      	b.n	80313dc <fill_last_frag+0x5a>
		obj->n_frag--;
 80313c8:	68fb      	ldr	r3, [r7, #12]
 80313ca:	69db      	ldr	r3, [r3, #28]
 80313cc:	1e5a      	subs	r2, r3, #1
 80313ce:	68fb      	ldr	r3, [r7, #12]
 80313d0:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80313d2:	68fb      	ldr	r3, [r7, #12]
 80313d4:	69db      	ldr	r3, [r3, #28]
 80313d6:	2b00      	cmp	r3, #0
 80313d8:	d1da      	bne.n	8031390 <fill_last_frag+0xe>
	}
	return FR_OK;
 80313da:	2300      	movs	r3, #0
}
 80313dc:	4618      	mov	r0, r3
 80313de:	3718      	adds	r7, #24
 80313e0:	46bd      	mov	sp, r7
 80313e2:	bd80      	pop	{r7, pc}

080313e4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80313e4:	b580      	push	{r7, lr}
 80313e6:	b08a      	sub	sp, #40	; 0x28
 80313e8:	af00      	add	r7, sp, #0
 80313ea:	60f8      	str	r0, [r7, #12]
 80313ec:	60b9      	str	r1, [r7, #8]
 80313ee:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80313f0:	2300      	movs	r3, #0
 80313f2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80313f4:	68fb      	ldr	r3, [r7, #12]
 80313f6:	681b      	ldr	r3, [r3, #0]
 80313f8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 80313fa:	68bb      	ldr	r3, [r7, #8]
 80313fc:	627b      	str	r3, [r7, #36]	; 0x24
 80313fe:	68bb      	ldr	r3, [r7, #8]
 8031400:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8031402:	68bb      	ldr	r3, [r7, #8]
 8031404:	2b01      	cmp	r3, #1
 8031406:	d904      	bls.n	8031412 <remove_chain+0x2e>
 8031408:	69bb      	ldr	r3, [r7, #24]
 803140a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803140c:	68ba      	ldr	r2, [r7, #8]
 803140e:	429a      	cmp	r2, r3
 8031410:	d301      	bcc.n	8031416 <remove_chain+0x32>
 8031412:	2302      	movs	r3, #2
 8031414:	e096      	b.n	8031544 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8031416:	687b      	ldr	r3, [r7, #4]
 8031418:	2b00      	cmp	r3, #0
 803141a:	d014      	beq.n	8031446 <remove_chain+0x62>
 803141c:	69bb      	ldr	r3, [r7, #24]
 803141e:	781b      	ldrb	r3, [r3, #0]
 8031420:	2b04      	cmp	r3, #4
 8031422:	d103      	bne.n	803142c <remove_chain+0x48>
 8031424:	68fb      	ldr	r3, [r7, #12]
 8031426:	79db      	ldrb	r3, [r3, #7]
 8031428:	2b02      	cmp	r3, #2
 803142a:	d00c      	beq.n	8031446 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 803142c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8031430:	6879      	ldr	r1, [r7, #4]
 8031432:	69b8      	ldr	r0, [r7, #24]
 8031434:	f7ff fd5a 	bl	8030eec <put_fat>
 8031438:	4603      	mov	r3, r0
 803143a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 803143c:	7ffb      	ldrb	r3, [r7, #31]
 803143e:	2b00      	cmp	r3, #0
 8031440:	d001      	beq.n	8031446 <remove_chain+0x62>
 8031442:	7ffb      	ldrb	r3, [r7, #31]
 8031444:	e07e      	b.n	8031544 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8031446:	68b9      	ldr	r1, [r7, #8]
 8031448:	68f8      	ldr	r0, [r7, #12]
 803144a:	f7ff fbf9 	bl	8030c40 <get_fat>
 803144e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8031450:	697b      	ldr	r3, [r7, #20]
 8031452:	2b00      	cmp	r3, #0
 8031454:	d055      	beq.n	8031502 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8031456:	697b      	ldr	r3, [r7, #20]
 8031458:	2b01      	cmp	r3, #1
 803145a:	d101      	bne.n	8031460 <remove_chain+0x7c>
 803145c:	2302      	movs	r3, #2
 803145e:	e071      	b.n	8031544 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8031460:	697b      	ldr	r3, [r7, #20]
 8031462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8031466:	d101      	bne.n	803146c <remove_chain+0x88>
 8031468:	2301      	movs	r3, #1
 803146a:	e06b      	b.n	8031544 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 803146c:	69bb      	ldr	r3, [r7, #24]
 803146e:	781b      	ldrb	r3, [r3, #0]
 8031470:	2b04      	cmp	r3, #4
 8031472:	d00b      	beq.n	803148c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8031474:	2200      	movs	r2, #0
 8031476:	68b9      	ldr	r1, [r7, #8]
 8031478:	69b8      	ldr	r0, [r7, #24]
 803147a:	f7ff fd37 	bl	8030eec <put_fat>
 803147e:	4603      	mov	r3, r0
 8031480:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8031482:	7ffb      	ldrb	r3, [r7, #31]
 8031484:	2b00      	cmp	r3, #0
 8031486:	d001      	beq.n	803148c <remove_chain+0xa8>
 8031488:	7ffb      	ldrb	r3, [r7, #31]
 803148a:	e05b      	b.n	8031544 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 803148c:	69bb      	ldr	r3, [r7, #24]
 803148e:	6a1a      	ldr	r2, [r3, #32]
 8031490:	69bb      	ldr	r3, [r7, #24]
 8031492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031494:	3b02      	subs	r3, #2
 8031496:	429a      	cmp	r2, r3
 8031498:	d20b      	bcs.n	80314b2 <remove_chain+0xce>
			fs->free_clst++;
 803149a:	69bb      	ldr	r3, [r7, #24]
 803149c:	6a1b      	ldr	r3, [r3, #32]
 803149e:	1c5a      	adds	r2, r3, #1
 80314a0:	69bb      	ldr	r3, [r7, #24]
 80314a2:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 80314a4:	69bb      	ldr	r3, [r7, #24]
 80314a6:	791b      	ldrb	r3, [r3, #4]
 80314a8:	f043 0301 	orr.w	r3, r3, #1
 80314ac:	b2da      	uxtb	r2, r3
 80314ae:	69bb      	ldr	r3, [r7, #24]
 80314b0:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80314b2:	6a3b      	ldr	r3, [r7, #32]
 80314b4:	3301      	adds	r3, #1
 80314b6:	697a      	ldr	r2, [r7, #20]
 80314b8:	429a      	cmp	r2, r3
 80314ba:	d102      	bne.n	80314c2 <remove_chain+0xde>
			ecl = nxt;
 80314bc:	697b      	ldr	r3, [r7, #20]
 80314be:	623b      	str	r3, [r7, #32]
 80314c0:	e017      	b.n	80314f2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80314c2:	69bb      	ldr	r3, [r7, #24]
 80314c4:	781b      	ldrb	r3, [r3, #0]
 80314c6:	2b04      	cmp	r3, #4
 80314c8:	d10f      	bne.n	80314ea <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80314ca:	6a3a      	ldr	r2, [r7, #32]
 80314cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80314ce:	1ad3      	subs	r3, r2, r3
 80314d0:	1c5a      	adds	r2, r3, #1
 80314d2:	2300      	movs	r3, #0
 80314d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80314d6:	69b8      	ldr	r0, [r7, #24]
 80314d8:	f7ff feaf 	bl	803123a <change_bitmap>
 80314dc:	4603      	mov	r3, r0
 80314de:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80314e0:	7ffb      	ldrb	r3, [r7, #31]
 80314e2:	2b00      	cmp	r3, #0
 80314e4:	d001      	beq.n	80314ea <remove_chain+0x106>
 80314e6:	7ffb      	ldrb	r3, [r7, #31]
 80314e8:	e02c      	b.n	8031544 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 80314ea:	697b      	ldr	r3, [r7, #20]
 80314ec:	623b      	str	r3, [r7, #32]
 80314ee:	6a3b      	ldr	r3, [r7, #32]
 80314f0:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80314f2:	697b      	ldr	r3, [r7, #20]
 80314f4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80314f6:	69bb      	ldr	r3, [r7, #24]
 80314f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80314fa:	68ba      	ldr	r2, [r7, #8]
 80314fc:	429a      	cmp	r2, r3
 80314fe:	d3a2      	bcc.n	8031446 <remove_chain+0x62>
 8031500:	e000      	b.n	8031504 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8031502:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8031504:	69bb      	ldr	r3, [r7, #24]
 8031506:	781b      	ldrb	r3, [r3, #0]
 8031508:	2b04      	cmp	r3, #4
 803150a:	d11a      	bne.n	8031542 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 803150c:	687b      	ldr	r3, [r7, #4]
 803150e:	2b00      	cmp	r3, #0
 8031510:	d103      	bne.n	803151a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8031512:	68fb      	ldr	r3, [r7, #12]
 8031514:	2200      	movs	r2, #0
 8031516:	71da      	strb	r2, [r3, #7]
 8031518:	e013      	b.n	8031542 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 803151a:	68fb      	ldr	r3, [r7, #12]
 803151c:	79db      	ldrb	r3, [r3, #7]
 803151e:	2b03      	cmp	r3, #3
 8031520:	d10f      	bne.n	8031542 <remove_chain+0x15e>
 8031522:	68fb      	ldr	r3, [r7, #12]
 8031524:	689b      	ldr	r3, [r3, #8]
 8031526:	687a      	ldr	r2, [r7, #4]
 8031528:	429a      	cmp	r2, r3
 803152a:	d30a      	bcc.n	8031542 <remove_chain+0x15e>
 803152c:	68fb      	ldr	r3, [r7, #12]
 803152e:	689a      	ldr	r2, [r3, #8]
 8031530:	68fb      	ldr	r3, [r7, #12]
 8031532:	699b      	ldr	r3, [r3, #24]
 8031534:	4413      	add	r3, r2
 8031536:	687a      	ldr	r2, [r7, #4]
 8031538:	429a      	cmp	r2, r3
 803153a:	d802      	bhi.n	8031542 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 803153c:	68fb      	ldr	r3, [r7, #12]
 803153e:	2202      	movs	r2, #2
 8031540:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8031542:	2300      	movs	r3, #0
}
 8031544:	4618      	mov	r0, r3
 8031546:	3728      	adds	r7, #40	; 0x28
 8031548:	46bd      	mov	sp, r7
 803154a:	bd80      	pop	{r7, pc}

0803154c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 803154c:	b580      	push	{r7, lr}
 803154e:	b088      	sub	sp, #32
 8031550:	af00      	add	r7, sp, #0
 8031552:	6078      	str	r0, [r7, #4]
 8031554:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8031556:	687b      	ldr	r3, [r7, #4]
 8031558:	681b      	ldr	r3, [r3, #0]
 803155a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 803155c:	683b      	ldr	r3, [r7, #0]
 803155e:	2b00      	cmp	r3, #0
 8031560:	d10d      	bne.n	803157e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8031562:	693b      	ldr	r3, [r7, #16]
 8031564:	69db      	ldr	r3, [r3, #28]
 8031566:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8031568:	69bb      	ldr	r3, [r7, #24]
 803156a:	2b00      	cmp	r3, #0
 803156c:	d004      	beq.n	8031578 <create_chain+0x2c>
 803156e:	693b      	ldr	r3, [r7, #16]
 8031570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031572:	69ba      	ldr	r2, [r7, #24]
 8031574:	429a      	cmp	r2, r3
 8031576:	d31b      	bcc.n	80315b0 <create_chain+0x64>
 8031578:	2301      	movs	r3, #1
 803157a:	61bb      	str	r3, [r7, #24]
 803157c:	e018      	b.n	80315b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 803157e:	6839      	ldr	r1, [r7, #0]
 8031580:	6878      	ldr	r0, [r7, #4]
 8031582:	f7ff fb5d 	bl	8030c40 <get_fat>
 8031586:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8031588:	68fb      	ldr	r3, [r7, #12]
 803158a:	2b01      	cmp	r3, #1
 803158c:	d801      	bhi.n	8031592 <create_chain+0x46>
 803158e:	2301      	movs	r3, #1
 8031590:	e0d9      	b.n	8031746 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8031592:	68fb      	ldr	r3, [r7, #12]
 8031594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8031598:	d101      	bne.n	803159e <create_chain+0x52>
 803159a:	68fb      	ldr	r3, [r7, #12]
 803159c:	e0d3      	b.n	8031746 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 803159e:	693b      	ldr	r3, [r7, #16]
 80315a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80315a2:	68fa      	ldr	r2, [r7, #12]
 80315a4:	429a      	cmp	r2, r3
 80315a6:	d201      	bcs.n	80315ac <create_chain+0x60>
 80315a8:	68fb      	ldr	r3, [r7, #12]
 80315aa:	e0cc      	b.n	8031746 <create_chain+0x1fa>
		scl = clst;
 80315ac:	683b      	ldr	r3, [r7, #0]
 80315ae:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80315b0:	693b      	ldr	r3, [r7, #16]
 80315b2:	781b      	ldrb	r3, [r3, #0]
 80315b4:	2b04      	cmp	r3, #4
 80315b6:	d164      	bne.n	8031682 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80315b8:	2201      	movs	r2, #1
 80315ba:	69b9      	ldr	r1, [r7, #24]
 80315bc:	6938      	ldr	r0, [r7, #16]
 80315be:	f7ff fdb5 	bl	803112c <find_bitmap>
 80315c2:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80315c4:	69fb      	ldr	r3, [r7, #28]
 80315c6:	2b00      	cmp	r3, #0
 80315c8:	d003      	beq.n	80315d2 <create_chain+0x86>
 80315ca:	69fb      	ldr	r3, [r7, #28]
 80315cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80315d0:	d101      	bne.n	80315d6 <create_chain+0x8a>
 80315d2:	69fb      	ldr	r3, [r7, #28]
 80315d4:	e0b7      	b.n	8031746 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80315d6:	2301      	movs	r3, #1
 80315d8:	2201      	movs	r2, #1
 80315da:	69f9      	ldr	r1, [r7, #28]
 80315dc:	6938      	ldr	r0, [r7, #16]
 80315de:	f7ff fe2c 	bl	803123a <change_bitmap>
 80315e2:	4603      	mov	r3, r0
 80315e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 80315e6:	7dfb      	ldrb	r3, [r7, #23]
 80315e8:	2b02      	cmp	r3, #2
 80315ea:	d101      	bne.n	80315f0 <create_chain+0xa4>
 80315ec:	2301      	movs	r3, #1
 80315ee:	e0aa      	b.n	8031746 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80315f0:	7dfb      	ldrb	r3, [r7, #23]
 80315f2:	2b01      	cmp	r3, #1
 80315f4:	d102      	bne.n	80315fc <create_chain+0xb0>
 80315f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80315fa:	e0a4      	b.n	8031746 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 80315fc:	683b      	ldr	r3, [r7, #0]
 80315fe:	2b00      	cmp	r3, #0
 8031600:	d103      	bne.n	803160a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8031602:	687b      	ldr	r3, [r7, #4]
 8031604:	2202      	movs	r2, #2
 8031606:	71da      	strb	r2, [r3, #7]
 8031608:	e011      	b.n	803162e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 803160a:	687b      	ldr	r3, [r7, #4]
 803160c:	79db      	ldrb	r3, [r3, #7]
 803160e:	2b02      	cmp	r3, #2
 8031610:	d10d      	bne.n	803162e <create_chain+0xe2>
 8031612:	69bb      	ldr	r3, [r7, #24]
 8031614:	3301      	adds	r3, #1
 8031616:	69fa      	ldr	r2, [r7, #28]
 8031618:	429a      	cmp	r2, r3
 803161a:	d008      	beq.n	803162e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 803161c:	687b      	ldr	r3, [r7, #4]
 803161e:	689b      	ldr	r3, [r3, #8]
 8031620:	69ba      	ldr	r2, [r7, #24]
 8031622:	1ad2      	subs	r2, r2, r3
 8031624:	687b      	ldr	r3, [r7, #4]
 8031626:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8031628:	687b      	ldr	r3, [r7, #4]
 803162a:	2203      	movs	r2, #3
 803162c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 803162e:	687b      	ldr	r3, [r7, #4]
 8031630:	79db      	ldrb	r3, [r3, #7]
 8031632:	2b02      	cmp	r3, #2
 8031634:	d064      	beq.n	8031700 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8031636:	683b      	ldr	r3, [r7, #0]
 8031638:	3301      	adds	r3, #1
 803163a:	69fa      	ldr	r2, [r7, #28]
 803163c:	429a      	cmp	r2, r3
 803163e:	d10b      	bne.n	8031658 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8031640:	687b      	ldr	r3, [r7, #4]
 8031642:	69db      	ldr	r3, [r3, #28]
 8031644:	2b00      	cmp	r3, #0
 8031646:	d003      	beq.n	8031650 <create_chain+0x104>
 8031648:	687b      	ldr	r3, [r7, #4]
 803164a:	69db      	ldr	r3, [r3, #28]
 803164c:	3301      	adds	r3, #1
 803164e:	e000      	b.n	8031652 <create_chain+0x106>
 8031650:	2302      	movs	r3, #2
 8031652:	687a      	ldr	r2, [r7, #4]
 8031654:	61d3      	str	r3, [r2, #28]
 8031656:	e053      	b.n	8031700 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8031658:	687b      	ldr	r3, [r7, #4]
 803165a:	69db      	ldr	r3, [r3, #28]
 803165c:	2b00      	cmp	r3, #0
 803165e:	d102      	bne.n	8031666 <create_chain+0x11a>
 8031660:	687b      	ldr	r3, [r7, #4]
 8031662:	2201      	movs	r2, #1
 8031664:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8031666:	69fa      	ldr	r2, [r7, #28]
 8031668:	6839      	ldr	r1, [r7, #0]
 803166a:	6878      	ldr	r0, [r7, #4]
 803166c:	f7ff fe89 	bl	8031382 <fill_last_frag>
 8031670:	4603      	mov	r3, r0
 8031672:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8031674:	7dfb      	ldrb	r3, [r7, #23]
 8031676:	2b00      	cmp	r3, #0
 8031678:	d142      	bne.n	8031700 <create_chain+0x1b4>
 803167a:	687b      	ldr	r3, [r7, #4]
 803167c:	2201      	movs	r2, #1
 803167e:	61da      	str	r2, [r3, #28]
 8031680:	e03e      	b.n	8031700 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8031682:	69bb      	ldr	r3, [r7, #24]
 8031684:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8031686:	69fb      	ldr	r3, [r7, #28]
 8031688:	3301      	adds	r3, #1
 803168a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 803168c:	693b      	ldr	r3, [r7, #16]
 803168e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031690:	69fa      	ldr	r2, [r7, #28]
 8031692:	429a      	cmp	r2, r3
 8031694:	d307      	bcc.n	80316a6 <create_chain+0x15a>
				ncl = 2;
 8031696:	2302      	movs	r3, #2
 8031698:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 803169a:	69fa      	ldr	r2, [r7, #28]
 803169c:	69bb      	ldr	r3, [r7, #24]
 803169e:	429a      	cmp	r2, r3
 80316a0:	d901      	bls.n	80316a6 <create_chain+0x15a>
 80316a2:	2300      	movs	r3, #0
 80316a4:	e04f      	b.n	8031746 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80316a6:	69f9      	ldr	r1, [r7, #28]
 80316a8:	6878      	ldr	r0, [r7, #4]
 80316aa:	f7ff fac9 	bl	8030c40 <get_fat>
 80316ae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80316b0:	68fb      	ldr	r3, [r7, #12]
 80316b2:	2b00      	cmp	r3, #0
 80316b4:	d00e      	beq.n	80316d4 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80316b6:	68fb      	ldr	r3, [r7, #12]
 80316b8:	2b01      	cmp	r3, #1
 80316ba:	d003      	beq.n	80316c4 <create_chain+0x178>
 80316bc:	68fb      	ldr	r3, [r7, #12]
 80316be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80316c2:	d101      	bne.n	80316c8 <create_chain+0x17c>
 80316c4:	68fb      	ldr	r3, [r7, #12]
 80316c6:	e03e      	b.n	8031746 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 80316c8:	69fa      	ldr	r2, [r7, #28]
 80316ca:	69bb      	ldr	r3, [r7, #24]
 80316cc:	429a      	cmp	r2, r3
 80316ce:	d1da      	bne.n	8031686 <create_chain+0x13a>
 80316d0:	2300      	movs	r3, #0
 80316d2:	e038      	b.n	8031746 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 80316d4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80316d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80316da:	69f9      	ldr	r1, [r7, #28]
 80316dc:	6938      	ldr	r0, [r7, #16]
 80316de:	f7ff fc05 	bl	8030eec <put_fat>
 80316e2:	4603      	mov	r3, r0
 80316e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80316e6:	7dfb      	ldrb	r3, [r7, #23]
 80316e8:	2b00      	cmp	r3, #0
 80316ea:	d109      	bne.n	8031700 <create_chain+0x1b4>
 80316ec:	683b      	ldr	r3, [r7, #0]
 80316ee:	2b00      	cmp	r3, #0
 80316f0:	d006      	beq.n	8031700 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80316f2:	69fa      	ldr	r2, [r7, #28]
 80316f4:	6839      	ldr	r1, [r7, #0]
 80316f6:	6938      	ldr	r0, [r7, #16]
 80316f8:	f7ff fbf8 	bl	8030eec <put_fat>
 80316fc:	4603      	mov	r3, r0
 80316fe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8031700:	7dfb      	ldrb	r3, [r7, #23]
 8031702:	2b00      	cmp	r3, #0
 8031704:	d116      	bne.n	8031734 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8031706:	693b      	ldr	r3, [r7, #16]
 8031708:	69fa      	ldr	r2, [r7, #28]
 803170a:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 803170c:	693b      	ldr	r3, [r7, #16]
 803170e:	6a1a      	ldr	r2, [r3, #32]
 8031710:	693b      	ldr	r3, [r7, #16]
 8031712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031714:	3b02      	subs	r3, #2
 8031716:	429a      	cmp	r2, r3
 8031718:	d804      	bhi.n	8031724 <create_chain+0x1d8>
 803171a:	693b      	ldr	r3, [r7, #16]
 803171c:	6a1b      	ldr	r3, [r3, #32]
 803171e:	1e5a      	subs	r2, r3, #1
 8031720:	693b      	ldr	r3, [r7, #16]
 8031722:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 8031724:	693b      	ldr	r3, [r7, #16]
 8031726:	791b      	ldrb	r3, [r3, #4]
 8031728:	f043 0301 	orr.w	r3, r3, #1
 803172c:	b2da      	uxtb	r2, r3
 803172e:	693b      	ldr	r3, [r7, #16]
 8031730:	711a      	strb	r2, [r3, #4]
 8031732:	e007      	b.n	8031744 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8031734:	7dfb      	ldrb	r3, [r7, #23]
 8031736:	2b01      	cmp	r3, #1
 8031738:	d102      	bne.n	8031740 <create_chain+0x1f4>
 803173a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803173e:	e000      	b.n	8031742 <create_chain+0x1f6>
 8031740:	2301      	movs	r3, #1
 8031742:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8031744:	69fb      	ldr	r3, [r7, #28]
}
 8031746:	4618      	mov	r0, r3
 8031748:	3720      	adds	r7, #32
 803174a:	46bd      	mov	sp, r7
 803174c:	bd80      	pop	{r7, pc}

0803174e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 803174e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8031752:	b088      	sub	sp, #32
 8031754:	af00      	add	r7, sp, #0
 8031756:	60f8      	str	r0, [r7, #12]
 8031758:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 803175c:	68fb      	ldr	r3, [r7, #12]
 803175e:	681b      	ldr	r3, [r3, #0]
 8031760:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8031762:	68fb      	ldr	r3, [r7, #12]
 8031764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031766:	3304      	adds	r3, #4
 8031768:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 803176a:	697b      	ldr	r3, [r7, #20]
 803176c:	899b      	ldrh	r3, [r3, #12]
 803176e:	b29b      	uxth	r3, r3
 8031770:	2200      	movs	r2, #0
 8031772:	4698      	mov	r8, r3
 8031774:	4691      	mov	r9, r2
 8031776:	4642      	mov	r2, r8
 8031778:	464b      	mov	r3, r9
 803177a:	e9d7 0100 	ldrd	r0, r1, [r7]
 803177e:	f7ee fe2f 	bl	80203e0 <__aeabi_uldivmod>
 8031782:	4602      	mov	r2, r0
 8031784:	460b      	mov	r3, r1
 8031786:	4610      	mov	r0, r2
 8031788:	4619      	mov	r1, r3
 803178a:	697b      	ldr	r3, [r7, #20]
 803178c:	895b      	ldrh	r3, [r3, #10]
 803178e:	b29b      	uxth	r3, r3
 8031790:	2200      	movs	r2, #0
 8031792:	461c      	mov	r4, r3
 8031794:	4615      	mov	r5, r2
 8031796:	4622      	mov	r2, r4
 8031798:	462b      	mov	r3, r5
 803179a:	f7ee fe21 	bl	80203e0 <__aeabi_uldivmod>
 803179e:	4602      	mov	r2, r0
 80317a0:	460b      	mov	r3, r1
 80317a2:	4613      	mov	r3, r2
 80317a4:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80317a6:	69bb      	ldr	r3, [r7, #24]
 80317a8:	1d1a      	adds	r2, r3, #4
 80317aa:	61ba      	str	r2, [r7, #24]
 80317ac:	681b      	ldr	r3, [r3, #0]
 80317ae:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80317b0:	693b      	ldr	r3, [r7, #16]
 80317b2:	2b00      	cmp	r3, #0
 80317b4:	d101      	bne.n	80317ba <clmt_clust+0x6c>
 80317b6:	2300      	movs	r3, #0
 80317b8:	e010      	b.n	80317dc <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 80317ba:	69fa      	ldr	r2, [r7, #28]
 80317bc:	693b      	ldr	r3, [r7, #16]
 80317be:	429a      	cmp	r2, r3
 80317c0:	d307      	bcc.n	80317d2 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 80317c2:	69fa      	ldr	r2, [r7, #28]
 80317c4:	693b      	ldr	r3, [r7, #16]
 80317c6:	1ad3      	subs	r3, r2, r3
 80317c8:	61fb      	str	r3, [r7, #28]
 80317ca:	69bb      	ldr	r3, [r7, #24]
 80317cc:	3304      	adds	r3, #4
 80317ce:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80317d0:	e7e9      	b.n	80317a6 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 80317d2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80317d4:	69bb      	ldr	r3, [r7, #24]
 80317d6:	681a      	ldr	r2, [r3, #0]
 80317d8:	69fb      	ldr	r3, [r7, #28]
 80317da:	4413      	add	r3, r2
}
 80317dc:	4618      	mov	r0, r3
 80317de:	3720      	adds	r7, #32
 80317e0:	46bd      	mov	sp, r7
 80317e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080317e6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80317e6:	b580      	push	{r7, lr}
 80317e8:	b086      	sub	sp, #24
 80317ea:	af00      	add	r7, sp, #0
 80317ec:	6078      	str	r0, [r7, #4]
 80317ee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80317f0:	687b      	ldr	r3, [r7, #4]
 80317f2:	681b      	ldr	r3, [r3, #0]
 80317f4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80317f6:	693b      	ldr	r3, [r7, #16]
 80317f8:	781b      	ldrb	r3, [r3, #0]
 80317fa:	2b04      	cmp	r3, #4
 80317fc:	d102      	bne.n	8031804 <dir_sdi+0x1e>
 80317fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8031802:	e001      	b.n	8031808 <dir_sdi+0x22>
 8031804:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8031808:	683b      	ldr	r3, [r7, #0]
 803180a:	429a      	cmp	r2, r3
 803180c:	d904      	bls.n	8031818 <dir_sdi+0x32>
 803180e:	683b      	ldr	r3, [r7, #0]
 8031810:	f003 031f 	and.w	r3, r3, #31
 8031814:	2b00      	cmp	r3, #0
 8031816:	d001      	beq.n	803181c <dir_sdi+0x36>
		return FR_INT_ERR;
 8031818:	2302      	movs	r3, #2
 803181a:	e074      	b.n	8031906 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 803181c:	687b      	ldr	r3, [r7, #4]
 803181e:	683a      	ldr	r2, [r7, #0]
 8031820:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8031822:	687b      	ldr	r3, [r7, #4]
 8031824:	689b      	ldr	r3, [r3, #8]
 8031826:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8031828:	697b      	ldr	r3, [r7, #20]
 803182a:	2b00      	cmp	r3, #0
 803182c:	d109      	bne.n	8031842 <dir_sdi+0x5c>
 803182e:	693b      	ldr	r3, [r7, #16]
 8031830:	781b      	ldrb	r3, [r3, #0]
 8031832:	2b02      	cmp	r3, #2
 8031834:	d905      	bls.n	8031842 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8031836:	693b      	ldr	r3, [r7, #16]
 8031838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803183a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 803183c:	687b      	ldr	r3, [r7, #4]
 803183e:	2200      	movs	r2, #0
 8031840:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8031842:	697b      	ldr	r3, [r7, #20]
 8031844:	2b00      	cmp	r3, #0
 8031846:	d10c      	bne.n	8031862 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8031848:	683b      	ldr	r3, [r7, #0]
 803184a:	095b      	lsrs	r3, r3, #5
 803184c:	693a      	ldr	r2, [r7, #16]
 803184e:	8912      	ldrh	r2, [r2, #8]
 8031850:	4293      	cmp	r3, r2
 8031852:	d301      	bcc.n	8031858 <dir_sdi+0x72>
 8031854:	2302      	movs	r3, #2
 8031856:	e056      	b.n	8031906 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8031858:	693b      	ldr	r3, [r7, #16]
 803185a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803185c:	687b      	ldr	r3, [r7, #4]
 803185e:	639a      	str	r2, [r3, #56]	; 0x38
 8031860:	e02d      	b.n	80318be <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8031862:	693b      	ldr	r3, [r7, #16]
 8031864:	895b      	ldrh	r3, [r3, #10]
 8031866:	461a      	mov	r2, r3
 8031868:	693b      	ldr	r3, [r7, #16]
 803186a:	899b      	ldrh	r3, [r3, #12]
 803186c:	fb02 f303 	mul.w	r3, r2, r3
 8031870:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8031872:	e019      	b.n	80318a8 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8031874:	687b      	ldr	r3, [r7, #4]
 8031876:	6979      	ldr	r1, [r7, #20]
 8031878:	4618      	mov	r0, r3
 803187a:	f7ff f9e1 	bl	8030c40 <get_fat>
 803187e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8031880:	697b      	ldr	r3, [r7, #20]
 8031882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8031886:	d101      	bne.n	803188c <dir_sdi+0xa6>
 8031888:	2301      	movs	r3, #1
 803188a:	e03c      	b.n	8031906 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 803188c:	697b      	ldr	r3, [r7, #20]
 803188e:	2b01      	cmp	r3, #1
 8031890:	d904      	bls.n	803189c <dir_sdi+0xb6>
 8031892:	693b      	ldr	r3, [r7, #16]
 8031894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031896:	697a      	ldr	r2, [r7, #20]
 8031898:	429a      	cmp	r2, r3
 803189a:	d301      	bcc.n	80318a0 <dir_sdi+0xba>
 803189c:	2302      	movs	r3, #2
 803189e:	e032      	b.n	8031906 <dir_sdi+0x120>
			ofs -= csz;
 80318a0:	683a      	ldr	r2, [r7, #0]
 80318a2:	68fb      	ldr	r3, [r7, #12]
 80318a4:	1ad3      	subs	r3, r2, r3
 80318a6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80318a8:	683a      	ldr	r2, [r7, #0]
 80318aa:	68fb      	ldr	r3, [r7, #12]
 80318ac:	429a      	cmp	r2, r3
 80318ae:	d2e1      	bcs.n	8031874 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 80318b0:	6979      	ldr	r1, [r7, #20]
 80318b2:	6938      	ldr	r0, [r7, #16]
 80318b4:	f7ff f9a4 	bl	8030c00 <clust2sect>
 80318b8:	4602      	mov	r2, r0
 80318ba:	687b      	ldr	r3, [r7, #4]
 80318bc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 80318be:	687b      	ldr	r3, [r7, #4]
 80318c0:	697a      	ldr	r2, [r7, #20]
 80318c2:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 80318c4:	687b      	ldr	r3, [r7, #4]
 80318c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80318c8:	2b00      	cmp	r3, #0
 80318ca:	d101      	bne.n	80318d0 <dir_sdi+0xea>
 80318cc:	2302      	movs	r3, #2
 80318ce:	e01a      	b.n	8031906 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80318d0:	687b      	ldr	r3, [r7, #4]
 80318d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80318d4:	693b      	ldr	r3, [r7, #16]
 80318d6:	899b      	ldrh	r3, [r3, #12]
 80318d8:	4619      	mov	r1, r3
 80318da:	683b      	ldr	r3, [r7, #0]
 80318dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80318e0:	441a      	add	r2, r3
 80318e2:	687b      	ldr	r3, [r7, #4]
 80318e4:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80318e6:	693b      	ldr	r3, [r7, #16]
 80318e8:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80318ec:	693b      	ldr	r3, [r7, #16]
 80318ee:	899b      	ldrh	r3, [r3, #12]
 80318f0:	461a      	mov	r2, r3
 80318f2:	683b      	ldr	r3, [r7, #0]
 80318f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80318f8:	fb00 f202 	mul.w	r2, r0, r2
 80318fc:	1a9b      	subs	r3, r3, r2
 80318fe:	18ca      	adds	r2, r1, r3
 8031900:	687b      	ldr	r3, [r7, #4]
 8031902:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8031904:	2300      	movs	r3, #0
}
 8031906:	4618      	mov	r0, r3
 8031908:	3718      	adds	r7, #24
 803190a:	46bd      	mov	sp, r7
 803190c:	bd80      	pop	{r7, pc}

0803190e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 803190e:	b580      	push	{r7, lr}
 8031910:	b086      	sub	sp, #24
 8031912:	af00      	add	r7, sp, #0
 8031914:	6078      	str	r0, [r7, #4]
 8031916:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8031918:	687b      	ldr	r3, [r7, #4]
 803191a:	681b      	ldr	r3, [r3, #0]
 803191c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 803191e:	687b      	ldr	r3, [r7, #4]
 8031920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031922:	3320      	adds	r3, #32
 8031924:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8031926:	687b      	ldr	r3, [r7, #4]
 8031928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803192a:	2b00      	cmp	r3, #0
 803192c:	d00b      	beq.n	8031946 <dir_next+0x38>
 803192e:	68fb      	ldr	r3, [r7, #12]
 8031930:	781b      	ldrb	r3, [r3, #0]
 8031932:	2b04      	cmp	r3, #4
 8031934:	d102      	bne.n	803193c <dir_next+0x2e>
 8031936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803193a:	e001      	b.n	8031940 <dir_next+0x32>
 803193c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8031940:	68bb      	ldr	r3, [r7, #8]
 8031942:	429a      	cmp	r2, r3
 8031944:	d801      	bhi.n	803194a <dir_next+0x3c>
 8031946:	2304      	movs	r3, #4
 8031948:	e0c3      	b.n	8031ad2 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 803194a:	68fb      	ldr	r3, [r7, #12]
 803194c:	899b      	ldrh	r3, [r3, #12]
 803194e:	461a      	mov	r2, r3
 8031950:	68bb      	ldr	r3, [r7, #8]
 8031952:	fbb3 f1f2 	udiv	r1, r3, r2
 8031956:	fb01 f202 	mul.w	r2, r1, r2
 803195a:	1a9b      	subs	r3, r3, r2
 803195c:	2b00      	cmp	r3, #0
 803195e:	f040 80a5 	bne.w	8031aac <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8031962:	687b      	ldr	r3, [r7, #4]
 8031964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031966:	1c5a      	adds	r2, r3, #1
 8031968:	687b      	ldr	r3, [r7, #4]
 803196a:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 803196c:	687b      	ldr	r3, [r7, #4]
 803196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031970:	2b00      	cmp	r3, #0
 8031972:	d10b      	bne.n	803198c <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8031974:	68bb      	ldr	r3, [r7, #8]
 8031976:	095b      	lsrs	r3, r3, #5
 8031978:	68fa      	ldr	r2, [r7, #12]
 803197a:	8912      	ldrh	r2, [r2, #8]
 803197c:	4293      	cmp	r3, r2
 803197e:	f0c0 8095 	bcc.w	8031aac <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8031982:	687b      	ldr	r3, [r7, #4]
 8031984:	2200      	movs	r2, #0
 8031986:	639a      	str	r2, [r3, #56]	; 0x38
 8031988:	2304      	movs	r3, #4
 803198a:	e0a2      	b.n	8031ad2 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 803198c:	68fb      	ldr	r3, [r7, #12]
 803198e:	899b      	ldrh	r3, [r3, #12]
 8031990:	461a      	mov	r2, r3
 8031992:	68bb      	ldr	r3, [r7, #8]
 8031994:	fbb3 f3f2 	udiv	r3, r3, r2
 8031998:	68fa      	ldr	r2, [r7, #12]
 803199a:	8952      	ldrh	r2, [r2, #10]
 803199c:	3a01      	subs	r2, #1
 803199e:	4013      	ands	r3, r2
 80319a0:	2b00      	cmp	r3, #0
 80319a2:	f040 8083 	bne.w	8031aac <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80319a6:	687a      	ldr	r2, [r7, #4]
 80319a8:	687b      	ldr	r3, [r7, #4]
 80319aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80319ac:	4619      	mov	r1, r3
 80319ae:	4610      	mov	r0, r2
 80319b0:	f7ff f946 	bl	8030c40 <get_fat>
 80319b4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80319b6:	697b      	ldr	r3, [r7, #20]
 80319b8:	2b01      	cmp	r3, #1
 80319ba:	d801      	bhi.n	80319c0 <dir_next+0xb2>
 80319bc:	2302      	movs	r3, #2
 80319be:	e088      	b.n	8031ad2 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80319c0:	697b      	ldr	r3, [r7, #20]
 80319c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80319c6:	d101      	bne.n	80319cc <dir_next+0xbe>
 80319c8:	2301      	movs	r3, #1
 80319ca:	e082      	b.n	8031ad2 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80319cc:	68fb      	ldr	r3, [r7, #12]
 80319ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80319d0:	697a      	ldr	r2, [r7, #20]
 80319d2:	429a      	cmp	r2, r3
 80319d4:	d360      	bcc.n	8031a98 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80319d6:	683b      	ldr	r3, [r7, #0]
 80319d8:	2b00      	cmp	r3, #0
 80319da:	d104      	bne.n	80319e6 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 80319dc:	687b      	ldr	r3, [r7, #4]
 80319de:	2200      	movs	r2, #0
 80319e0:	639a      	str	r2, [r3, #56]	; 0x38
 80319e2:	2304      	movs	r3, #4
 80319e4:	e075      	b.n	8031ad2 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80319e6:	687a      	ldr	r2, [r7, #4]
 80319e8:	687b      	ldr	r3, [r7, #4]
 80319ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80319ec:	4619      	mov	r1, r3
 80319ee:	4610      	mov	r0, r2
 80319f0:	f7ff fdac 	bl	803154c <create_chain>
 80319f4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80319f6:	697b      	ldr	r3, [r7, #20]
 80319f8:	2b00      	cmp	r3, #0
 80319fa:	d101      	bne.n	8031a00 <dir_next+0xf2>
 80319fc:	2307      	movs	r3, #7
 80319fe:	e068      	b.n	8031ad2 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8031a00:	697b      	ldr	r3, [r7, #20]
 8031a02:	2b01      	cmp	r3, #1
 8031a04:	d101      	bne.n	8031a0a <dir_next+0xfc>
 8031a06:	2302      	movs	r3, #2
 8031a08:	e063      	b.n	8031ad2 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8031a0a:	697b      	ldr	r3, [r7, #20]
 8031a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8031a10:	d101      	bne.n	8031a16 <dir_next+0x108>
 8031a12:	2301      	movs	r3, #1
 8031a14:	e05d      	b.n	8031ad2 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8031a16:	687b      	ldr	r3, [r7, #4]
 8031a18:	79db      	ldrb	r3, [r3, #7]
 8031a1a:	f043 0304 	orr.w	r3, r3, #4
 8031a1e:	b2da      	uxtb	r2, r3
 8031a20:	687b      	ldr	r3, [r7, #4]
 8031a22:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8031a24:	68f8      	ldr	r0, [r7, #12]
 8031a26:	f7ff f809 	bl	8030a3c <sync_window>
 8031a2a:	4603      	mov	r3, r0
 8031a2c:	2b00      	cmp	r3, #0
 8031a2e:	d001      	beq.n	8031a34 <dir_next+0x126>
 8031a30:	2301      	movs	r3, #1
 8031a32:	e04e      	b.n	8031ad2 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8031a34:	68fb      	ldr	r3, [r7, #12]
 8031a36:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8031a3a:	68fb      	ldr	r3, [r7, #12]
 8031a3c:	899b      	ldrh	r3, [r3, #12]
 8031a3e:	461a      	mov	r2, r3
 8031a40:	2100      	movs	r1, #0
 8031a42:	f7fe fe01 	bl	8030648 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8031a46:	2300      	movs	r3, #0
 8031a48:	613b      	str	r3, [r7, #16]
 8031a4a:	6979      	ldr	r1, [r7, #20]
 8031a4c:	68f8      	ldr	r0, [r7, #12]
 8031a4e:	f7ff f8d7 	bl	8030c00 <clust2sect>
 8031a52:	4602      	mov	r2, r0
 8031a54:	68fb      	ldr	r3, [r7, #12]
 8031a56:	64da      	str	r2, [r3, #76]	; 0x4c
 8031a58:	e012      	b.n	8031a80 <dir_next+0x172>
						fs->wflag = 1;
 8031a5a:	68fb      	ldr	r3, [r7, #12]
 8031a5c:	2201      	movs	r2, #1
 8031a5e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8031a60:	68f8      	ldr	r0, [r7, #12]
 8031a62:	f7fe ffeb 	bl	8030a3c <sync_window>
 8031a66:	4603      	mov	r3, r0
 8031a68:	2b00      	cmp	r3, #0
 8031a6a:	d001      	beq.n	8031a70 <dir_next+0x162>
 8031a6c:	2301      	movs	r3, #1
 8031a6e:	e030      	b.n	8031ad2 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8031a70:	693b      	ldr	r3, [r7, #16]
 8031a72:	3301      	adds	r3, #1
 8031a74:	613b      	str	r3, [r7, #16]
 8031a76:	68fb      	ldr	r3, [r7, #12]
 8031a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031a7a:	1c5a      	adds	r2, r3, #1
 8031a7c:	68fb      	ldr	r3, [r7, #12]
 8031a7e:	64da      	str	r2, [r3, #76]	; 0x4c
 8031a80:	68fb      	ldr	r3, [r7, #12]
 8031a82:	895b      	ldrh	r3, [r3, #10]
 8031a84:	461a      	mov	r2, r3
 8031a86:	693b      	ldr	r3, [r7, #16]
 8031a88:	4293      	cmp	r3, r2
 8031a8a:	d3e6      	bcc.n	8031a5a <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8031a8c:	68fb      	ldr	r3, [r7, #12]
 8031a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8031a90:	693b      	ldr	r3, [r7, #16]
 8031a92:	1ad2      	subs	r2, r2, r3
 8031a94:	68fb      	ldr	r3, [r7, #12]
 8031a96:	64da      	str	r2, [r3, #76]	; 0x4c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8031a98:	687b      	ldr	r3, [r7, #4]
 8031a9a:	697a      	ldr	r2, [r7, #20]
 8031a9c:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8031a9e:	6979      	ldr	r1, [r7, #20]
 8031aa0:	68f8      	ldr	r0, [r7, #12]
 8031aa2:	f7ff f8ad 	bl	8030c00 <clust2sect>
 8031aa6:	4602      	mov	r2, r0
 8031aa8:	687b      	ldr	r3, [r7, #4]
 8031aaa:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8031aac:	687b      	ldr	r3, [r7, #4]
 8031aae:	68ba      	ldr	r2, [r7, #8]
 8031ab0:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8031ab2:	68fb      	ldr	r3, [r7, #12]
 8031ab4:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8031ab8:	68fb      	ldr	r3, [r7, #12]
 8031aba:	899b      	ldrh	r3, [r3, #12]
 8031abc:	461a      	mov	r2, r3
 8031abe:	68bb      	ldr	r3, [r7, #8]
 8031ac0:	fbb3 f0f2 	udiv	r0, r3, r2
 8031ac4:	fb00 f202 	mul.w	r2, r0, r2
 8031ac8:	1a9b      	subs	r3, r3, r2
 8031aca:	18ca      	adds	r2, r1, r3
 8031acc:	687b      	ldr	r3, [r7, #4]
 8031ace:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8031ad0:	2300      	movs	r3, #0
}
 8031ad2:	4618      	mov	r0, r3
 8031ad4:	3718      	adds	r7, #24
 8031ad6:	46bd      	mov	sp, r7
 8031ad8:	bd80      	pop	{r7, pc}

08031ada <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8031ada:	b580      	push	{r7, lr}
 8031adc:	b086      	sub	sp, #24
 8031ade:	af00      	add	r7, sp, #0
 8031ae0:	6078      	str	r0, [r7, #4]
 8031ae2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8031ae4:	687b      	ldr	r3, [r7, #4]
 8031ae6:	681b      	ldr	r3, [r3, #0]
 8031ae8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8031aea:	2100      	movs	r1, #0
 8031aec:	6878      	ldr	r0, [r7, #4]
 8031aee:	f7ff fe7a 	bl	80317e6 <dir_sdi>
 8031af2:	4603      	mov	r3, r0
 8031af4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8031af6:	7dfb      	ldrb	r3, [r7, #23]
 8031af8:	2b00      	cmp	r3, #0
 8031afa:	d140      	bne.n	8031b7e <dir_alloc+0xa4>
		n = 0;
 8031afc:	2300      	movs	r3, #0
 8031afe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8031b00:	687b      	ldr	r3, [r7, #4]
 8031b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031b04:	4619      	mov	r1, r3
 8031b06:	68f8      	ldr	r0, [r7, #12]
 8031b08:	f7fe ffdc 	bl	8030ac4 <move_window>
 8031b0c:	4603      	mov	r3, r0
 8031b0e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8031b10:	7dfb      	ldrb	r3, [r7, #23]
 8031b12:	2b00      	cmp	r3, #0
 8031b14:	d132      	bne.n	8031b7c <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8031b16:	68fb      	ldr	r3, [r7, #12]
 8031b18:	781b      	ldrb	r3, [r3, #0]
 8031b1a:	2b04      	cmp	r3, #4
 8031b1c:	d108      	bne.n	8031b30 <dir_alloc+0x56>
 8031b1e:	687b      	ldr	r3, [r7, #4]
 8031b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031b22:	781b      	ldrb	r3, [r3, #0]
 8031b24:	b25b      	sxtb	r3, r3
 8031b26:	43db      	mvns	r3, r3
 8031b28:	b2db      	uxtb	r3, r3
 8031b2a:	09db      	lsrs	r3, r3, #7
 8031b2c:	b2db      	uxtb	r3, r3
 8031b2e:	e00f      	b.n	8031b50 <dir_alloc+0x76>
 8031b30:	687b      	ldr	r3, [r7, #4]
 8031b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031b34:	781b      	ldrb	r3, [r3, #0]
 8031b36:	2be5      	cmp	r3, #229	; 0xe5
 8031b38:	d004      	beq.n	8031b44 <dir_alloc+0x6a>
 8031b3a:	687b      	ldr	r3, [r7, #4]
 8031b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031b3e:	781b      	ldrb	r3, [r3, #0]
 8031b40:	2b00      	cmp	r3, #0
 8031b42:	d101      	bne.n	8031b48 <dir_alloc+0x6e>
 8031b44:	2301      	movs	r3, #1
 8031b46:	e000      	b.n	8031b4a <dir_alloc+0x70>
 8031b48:	2300      	movs	r3, #0
 8031b4a:	f003 0301 	and.w	r3, r3, #1
 8031b4e:	b2db      	uxtb	r3, r3
 8031b50:	2b00      	cmp	r3, #0
 8031b52:	d007      	beq.n	8031b64 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8031b54:	693b      	ldr	r3, [r7, #16]
 8031b56:	3301      	adds	r3, #1
 8031b58:	613b      	str	r3, [r7, #16]
 8031b5a:	693a      	ldr	r2, [r7, #16]
 8031b5c:	683b      	ldr	r3, [r7, #0]
 8031b5e:	429a      	cmp	r2, r3
 8031b60:	d102      	bne.n	8031b68 <dir_alloc+0x8e>
 8031b62:	e00c      	b.n	8031b7e <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8031b64:	2300      	movs	r3, #0
 8031b66:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8031b68:	2101      	movs	r1, #1
 8031b6a:	6878      	ldr	r0, [r7, #4]
 8031b6c:	f7ff fecf 	bl	803190e <dir_next>
 8031b70:	4603      	mov	r3, r0
 8031b72:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8031b74:	7dfb      	ldrb	r3, [r7, #23]
 8031b76:	2b00      	cmp	r3, #0
 8031b78:	d0c2      	beq.n	8031b00 <dir_alloc+0x26>
 8031b7a:	e000      	b.n	8031b7e <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8031b7c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8031b7e:	7dfb      	ldrb	r3, [r7, #23]
 8031b80:	2b04      	cmp	r3, #4
 8031b82:	d101      	bne.n	8031b88 <dir_alloc+0xae>
 8031b84:	2307      	movs	r3, #7
 8031b86:	75fb      	strb	r3, [r7, #23]
	return res;
 8031b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8031b8a:	4618      	mov	r0, r3
 8031b8c:	3718      	adds	r7, #24
 8031b8e:	46bd      	mov	sp, r7
 8031b90:	bd80      	pop	{r7, pc}

08031b92 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8031b92:	b580      	push	{r7, lr}
 8031b94:	b084      	sub	sp, #16
 8031b96:	af00      	add	r7, sp, #0
 8031b98:	6078      	str	r0, [r7, #4]
 8031b9a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8031b9c:	683b      	ldr	r3, [r7, #0]
 8031b9e:	331a      	adds	r3, #26
 8031ba0:	4618      	mov	r0, r3
 8031ba2:	f7fe fb4b 	bl	803023c <ld_word>
 8031ba6:	4603      	mov	r3, r0
 8031ba8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8031baa:	687b      	ldr	r3, [r7, #4]
 8031bac:	781b      	ldrb	r3, [r3, #0]
 8031bae:	2b03      	cmp	r3, #3
 8031bb0:	d109      	bne.n	8031bc6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8031bb2:	683b      	ldr	r3, [r7, #0]
 8031bb4:	3314      	adds	r3, #20
 8031bb6:	4618      	mov	r0, r3
 8031bb8:	f7fe fb40 	bl	803023c <ld_word>
 8031bbc:	4603      	mov	r3, r0
 8031bbe:	041b      	lsls	r3, r3, #16
 8031bc0:	68fa      	ldr	r2, [r7, #12]
 8031bc2:	4313      	orrs	r3, r2
 8031bc4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8031bc6:	68fb      	ldr	r3, [r7, #12]
}
 8031bc8:	4618      	mov	r0, r3
 8031bca:	3710      	adds	r7, #16
 8031bcc:	46bd      	mov	sp, r7
 8031bce:	bd80      	pop	{r7, pc}

08031bd0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8031bd0:	b580      	push	{r7, lr}
 8031bd2:	b084      	sub	sp, #16
 8031bd4:	af00      	add	r7, sp, #0
 8031bd6:	60f8      	str	r0, [r7, #12]
 8031bd8:	60b9      	str	r1, [r7, #8]
 8031bda:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8031bdc:	68bb      	ldr	r3, [r7, #8]
 8031bde:	331a      	adds	r3, #26
 8031be0:	687a      	ldr	r2, [r7, #4]
 8031be2:	b292      	uxth	r2, r2
 8031be4:	4611      	mov	r1, r2
 8031be6:	4618      	mov	r0, r3
 8031be8:	f7fe fc3e 	bl	8030468 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8031bec:	68fb      	ldr	r3, [r7, #12]
 8031bee:	781b      	ldrb	r3, [r3, #0]
 8031bf0:	2b03      	cmp	r3, #3
 8031bf2:	d109      	bne.n	8031c08 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8031bf4:	68bb      	ldr	r3, [r7, #8]
 8031bf6:	f103 0214 	add.w	r2, r3, #20
 8031bfa:	687b      	ldr	r3, [r7, #4]
 8031bfc:	0c1b      	lsrs	r3, r3, #16
 8031bfe:	b29b      	uxth	r3, r3
 8031c00:	4619      	mov	r1, r3
 8031c02:	4610      	mov	r0, r2
 8031c04:	f7fe fc30 	bl	8030468 <st_word>
	}
}
 8031c08:	bf00      	nop
 8031c0a:	3710      	adds	r7, #16
 8031c0c:	46bd      	mov	sp, r7
 8031c0e:	bd80      	pop	{r7, pc}

08031c10 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8031c10:	b590      	push	{r4, r7, lr}
 8031c12:	b087      	sub	sp, #28
 8031c14:	af00      	add	r7, sp, #0
 8031c16:	6078      	str	r0, [r7, #4]
 8031c18:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8031c1a:	683b      	ldr	r3, [r7, #0]
 8031c1c:	331a      	adds	r3, #26
 8031c1e:	4618      	mov	r0, r3
 8031c20:	f7fe fb0c 	bl	803023c <ld_word>
 8031c24:	4603      	mov	r3, r0
 8031c26:	2b00      	cmp	r3, #0
 8031c28:	d001      	beq.n	8031c2e <cmp_lfn+0x1e>
 8031c2a:	2300      	movs	r3, #0
 8031c2c:	e059      	b.n	8031ce2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8031c2e:	683b      	ldr	r3, [r7, #0]
 8031c30:	781b      	ldrb	r3, [r3, #0]
 8031c32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8031c36:	1e5a      	subs	r2, r3, #1
 8031c38:	4613      	mov	r3, r2
 8031c3a:	005b      	lsls	r3, r3, #1
 8031c3c:	4413      	add	r3, r2
 8031c3e:	009b      	lsls	r3, r3, #2
 8031c40:	4413      	add	r3, r2
 8031c42:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8031c44:	2301      	movs	r3, #1
 8031c46:	81fb      	strh	r3, [r7, #14]
 8031c48:	2300      	movs	r3, #0
 8031c4a:	613b      	str	r3, [r7, #16]
 8031c4c:	e033      	b.n	8031cb6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8031c4e:	4a27      	ldr	r2, [pc, #156]	; (8031cec <cmp_lfn+0xdc>)
 8031c50:	693b      	ldr	r3, [r7, #16]
 8031c52:	4413      	add	r3, r2
 8031c54:	781b      	ldrb	r3, [r3, #0]
 8031c56:	461a      	mov	r2, r3
 8031c58:	683b      	ldr	r3, [r7, #0]
 8031c5a:	4413      	add	r3, r2
 8031c5c:	4618      	mov	r0, r3
 8031c5e:	f7fe faed 	bl	803023c <ld_word>
 8031c62:	4603      	mov	r3, r0
 8031c64:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8031c66:	89fb      	ldrh	r3, [r7, #14]
 8031c68:	2b00      	cmp	r3, #0
 8031c6a:	d01a      	beq.n	8031ca2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8031c6c:	697b      	ldr	r3, [r7, #20]
 8031c6e:	2bfe      	cmp	r3, #254	; 0xfe
 8031c70:	d812      	bhi.n	8031c98 <cmp_lfn+0x88>
 8031c72:	89bb      	ldrh	r3, [r7, #12]
 8031c74:	4618      	mov	r0, r3
 8031c76:	f003 ffd1 	bl	8035c1c <ff_wtoupper>
 8031c7a:	4603      	mov	r3, r0
 8031c7c:	461c      	mov	r4, r3
 8031c7e:	697b      	ldr	r3, [r7, #20]
 8031c80:	1c5a      	adds	r2, r3, #1
 8031c82:	617a      	str	r2, [r7, #20]
 8031c84:	005b      	lsls	r3, r3, #1
 8031c86:	687a      	ldr	r2, [r7, #4]
 8031c88:	4413      	add	r3, r2
 8031c8a:	881b      	ldrh	r3, [r3, #0]
 8031c8c:	4618      	mov	r0, r3
 8031c8e:	f003 ffc5 	bl	8035c1c <ff_wtoupper>
 8031c92:	4603      	mov	r3, r0
 8031c94:	429c      	cmp	r4, r3
 8031c96:	d001      	beq.n	8031c9c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8031c98:	2300      	movs	r3, #0
 8031c9a:	e022      	b.n	8031ce2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8031c9c:	89bb      	ldrh	r3, [r7, #12]
 8031c9e:	81fb      	strh	r3, [r7, #14]
 8031ca0:	e006      	b.n	8031cb0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8031ca2:	89bb      	ldrh	r3, [r7, #12]
 8031ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031ca8:	4293      	cmp	r3, r2
 8031caa:	d001      	beq.n	8031cb0 <cmp_lfn+0xa0>
 8031cac:	2300      	movs	r3, #0
 8031cae:	e018      	b.n	8031ce2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8031cb0:	693b      	ldr	r3, [r7, #16]
 8031cb2:	3301      	adds	r3, #1
 8031cb4:	613b      	str	r3, [r7, #16]
 8031cb6:	693b      	ldr	r3, [r7, #16]
 8031cb8:	2b0c      	cmp	r3, #12
 8031cba:	d9c8      	bls.n	8031c4e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8031cbc:	683b      	ldr	r3, [r7, #0]
 8031cbe:	781b      	ldrb	r3, [r3, #0]
 8031cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8031cc4:	2b00      	cmp	r3, #0
 8031cc6:	d00b      	beq.n	8031ce0 <cmp_lfn+0xd0>
 8031cc8:	89fb      	ldrh	r3, [r7, #14]
 8031cca:	2b00      	cmp	r3, #0
 8031ccc:	d008      	beq.n	8031ce0 <cmp_lfn+0xd0>
 8031cce:	697b      	ldr	r3, [r7, #20]
 8031cd0:	005b      	lsls	r3, r3, #1
 8031cd2:	687a      	ldr	r2, [r7, #4]
 8031cd4:	4413      	add	r3, r2
 8031cd6:	881b      	ldrh	r3, [r3, #0]
 8031cd8:	2b00      	cmp	r3, #0
 8031cda:	d001      	beq.n	8031ce0 <cmp_lfn+0xd0>
 8031cdc:	2300      	movs	r3, #0
 8031cde:	e000      	b.n	8031ce2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8031ce0:	2301      	movs	r3, #1
}
 8031ce2:	4618      	mov	r0, r3
 8031ce4:	371c      	adds	r7, #28
 8031ce6:	46bd      	mov	sp, r7
 8031ce8:	bd90      	pop	{r4, r7, pc}
 8031cea:	bf00      	nop
 8031cec:	0803b964 	.word	0x0803b964

08031cf0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8031cf0:	b580      	push	{r7, lr}
 8031cf2:	b086      	sub	sp, #24
 8031cf4:	af00      	add	r7, sp, #0
 8031cf6:	6078      	str	r0, [r7, #4]
 8031cf8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8031cfa:	683b      	ldr	r3, [r7, #0]
 8031cfc:	331a      	adds	r3, #26
 8031cfe:	4618      	mov	r0, r3
 8031d00:	f7fe fa9c 	bl	803023c <ld_word>
 8031d04:	4603      	mov	r3, r0
 8031d06:	2b00      	cmp	r3, #0
 8031d08:	d001      	beq.n	8031d0e <pick_lfn+0x1e>
 8031d0a:	2300      	movs	r3, #0
 8031d0c:	e04d      	b.n	8031daa <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8031d0e:	683b      	ldr	r3, [r7, #0]
 8031d10:	781b      	ldrb	r3, [r3, #0]
 8031d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8031d16:	1e5a      	subs	r2, r3, #1
 8031d18:	4613      	mov	r3, r2
 8031d1a:	005b      	lsls	r3, r3, #1
 8031d1c:	4413      	add	r3, r2
 8031d1e:	009b      	lsls	r3, r3, #2
 8031d20:	4413      	add	r3, r2
 8031d22:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8031d24:	2301      	movs	r3, #1
 8031d26:	81fb      	strh	r3, [r7, #14]
 8031d28:	2300      	movs	r3, #0
 8031d2a:	613b      	str	r3, [r7, #16]
 8031d2c:	e028      	b.n	8031d80 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8031d2e:	4a21      	ldr	r2, [pc, #132]	; (8031db4 <pick_lfn+0xc4>)
 8031d30:	693b      	ldr	r3, [r7, #16]
 8031d32:	4413      	add	r3, r2
 8031d34:	781b      	ldrb	r3, [r3, #0]
 8031d36:	461a      	mov	r2, r3
 8031d38:	683b      	ldr	r3, [r7, #0]
 8031d3a:	4413      	add	r3, r2
 8031d3c:	4618      	mov	r0, r3
 8031d3e:	f7fe fa7d 	bl	803023c <ld_word>
 8031d42:	4603      	mov	r3, r0
 8031d44:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8031d46:	89fb      	ldrh	r3, [r7, #14]
 8031d48:	2b00      	cmp	r3, #0
 8031d4a:	d00f      	beq.n	8031d6c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8031d4c:	697b      	ldr	r3, [r7, #20]
 8031d4e:	2bfe      	cmp	r3, #254	; 0xfe
 8031d50:	d901      	bls.n	8031d56 <pick_lfn+0x66>
 8031d52:	2300      	movs	r3, #0
 8031d54:	e029      	b.n	8031daa <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8031d56:	89bb      	ldrh	r3, [r7, #12]
 8031d58:	81fb      	strh	r3, [r7, #14]
 8031d5a:	697b      	ldr	r3, [r7, #20]
 8031d5c:	1c5a      	adds	r2, r3, #1
 8031d5e:	617a      	str	r2, [r7, #20]
 8031d60:	005b      	lsls	r3, r3, #1
 8031d62:	687a      	ldr	r2, [r7, #4]
 8031d64:	4413      	add	r3, r2
 8031d66:	89fa      	ldrh	r2, [r7, #14]
 8031d68:	801a      	strh	r2, [r3, #0]
 8031d6a:	e006      	b.n	8031d7a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8031d6c:	89bb      	ldrh	r3, [r7, #12]
 8031d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031d72:	4293      	cmp	r3, r2
 8031d74:	d001      	beq.n	8031d7a <pick_lfn+0x8a>
 8031d76:	2300      	movs	r3, #0
 8031d78:	e017      	b.n	8031daa <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8031d7a:	693b      	ldr	r3, [r7, #16]
 8031d7c:	3301      	adds	r3, #1
 8031d7e:	613b      	str	r3, [r7, #16]
 8031d80:	693b      	ldr	r3, [r7, #16]
 8031d82:	2b0c      	cmp	r3, #12
 8031d84:	d9d3      	bls.n	8031d2e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8031d86:	683b      	ldr	r3, [r7, #0]
 8031d88:	781b      	ldrb	r3, [r3, #0]
 8031d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8031d8e:	2b00      	cmp	r3, #0
 8031d90:	d00a      	beq.n	8031da8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8031d92:	697b      	ldr	r3, [r7, #20]
 8031d94:	2bfe      	cmp	r3, #254	; 0xfe
 8031d96:	d901      	bls.n	8031d9c <pick_lfn+0xac>
 8031d98:	2300      	movs	r3, #0
 8031d9a:	e006      	b.n	8031daa <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8031d9c:	697b      	ldr	r3, [r7, #20]
 8031d9e:	005b      	lsls	r3, r3, #1
 8031da0:	687a      	ldr	r2, [r7, #4]
 8031da2:	4413      	add	r3, r2
 8031da4:	2200      	movs	r2, #0
 8031da6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8031da8:	2301      	movs	r3, #1
}
 8031daa:	4618      	mov	r0, r3
 8031dac:	3718      	adds	r7, #24
 8031dae:	46bd      	mov	sp, r7
 8031db0:	bd80      	pop	{r7, pc}
 8031db2:	bf00      	nop
 8031db4:	0803b964 	.word	0x0803b964

08031db8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8031db8:	b580      	push	{r7, lr}
 8031dba:	b088      	sub	sp, #32
 8031dbc:	af00      	add	r7, sp, #0
 8031dbe:	60f8      	str	r0, [r7, #12]
 8031dc0:	60b9      	str	r1, [r7, #8]
 8031dc2:	4611      	mov	r1, r2
 8031dc4:	461a      	mov	r2, r3
 8031dc6:	460b      	mov	r3, r1
 8031dc8:	71fb      	strb	r3, [r7, #7]
 8031dca:	4613      	mov	r3, r2
 8031dcc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8031dce:	68bb      	ldr	r3, [r7, #8]
 8031dd0:	330d      	adds	r3, #13
 8031dd2:	79ba      	ldrb	r2, [r7, #6]
 8031dd4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8031dd6:	68bb      	ldr	r3, [r7, #8]
 8031dd8:	330b      	adds	r3, #11
 8031dda:	220f      	movs	r2, #15
 8031ddc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8031dde:	68bb      	ldr	r3, [r7, #8]
 8031de0:	330c      	adds	r3, #12
 8031de2:	2200      	movs	r2, #0
 8031de4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8031de6:	68bb      	ldr	r3, [r7, #8]
 8031de8:	331a      	adds	r3, #26
 8031dea:	2100      	movs	r1, #0
 8031dec:	4618      	mov	r0, r3
 8031dee:	f7fe fb3b 	bl	8030468 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8031df2:	79fb      	ldrb	r3, [r7, #7]
 8031df4:	1e5a      	subs	r2, r3, #1
 8031df6:	4613      	mov	r3, r2
 8031df8:	005b      	lsls	r3, r3, #1
 8031dfa:	4413      	add	r3, r2
 8031dfc:	009b      	lsls	r3, r3, #2
 8031dfe:	4413      	add	r3, r2
 8031e00:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8031e02:	2300      	movs	r3, #0
 8031e04:	82fb      	strh	r3, [r7, #22]
 8031e06:	2300      	movs	r3, #0
 8031e08:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8031e0a:	8afb      	ldrh	r3, [r7, #22]
 8031e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031e10:	4293      	cmp	r3, r2
 8031e12:	d007      	beq.n	8031e24 <put_lfn+0x6c>
 8031e14:	69fb      	ldr	r3, [r7, #28]
 8031e16:	1c5a      	adds	r2, r3, #1
 8031e18:	61fa      	str	r2, [r7, #28]
 8031e1a:	005b      	lsls	r3, r3, #1
 8031e1c:	68fa      	ldr	r2, [r7, #12]
 8031e1e:	4413      	add	r3, r2
 8031e20:	881b      	ldrh	r3, [r3, #0]
 8031e22:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8031e24:	4a17      	ldr	r2, [pc, #92]	; (8031e84 <put_lfn+0xcc>)
 8031e26:	69bb      	ldr	r3, [r7, #24]
 8031e28:	4413      	add	r3, r2
 8031e2a:	781b      	ldrb	r3, [r3, #0]
 8031e2c:	461a      	mov	r2, r3
 8031e2e:	68bb      	ldr	r3, [r7, #8]
 8031e30:	4413      	add	r3, r2
 8031e32:	8afa      	ldrh	r2, [r7, #22]
 8031e34:	4611      	mov	r1, r2
 8031e36:	4618      	mov	r0, r3
 8031e38:	f7fe fb16 	bl	8030468 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8031e3c:	8afb      	ldrh	r3, [r7, #22]
 8031e3e:	2b00      	cmp	r3, #0
 8031e40:	d102      	bne.n	8031e48 <put_lfn+0x90>
 8031e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8031e46:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8031e48:	69bb      	ldr	r3, [r7, #24]
 8031e4a:	3301      	adds	r3, #1
 8031e4c:	61bb      	str	r3, [r7, #24]
 8031e4e:	69bb      	ldr	r3, [r7, #24]
 8031e50:	2b0c      	cmp	r3, #12
 8031e52:	d9da      	bls.n	8031e0a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8031e54:	8afb      	ldrh	r3, [r7, #22]
 8031e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031e5a:	4293      	cmp	r3, r2
 8031e5c:	d006      	beq.n	8031e6c <put_lfn+0xb4>
 8031e5e:	69fb      	ldr	r3, [r7, #28]
 8031e60:	005b      	lsls	r3, r3, #1
 8031e62:	68fa      	ldr	r2, [r7, #12]
 8031e64:	4413      	add	r3, r2
 8031e66:	881b      	ldrh	r3, [r3, #0]
 8031e68:	2b00      	cmp	r3, #0
 8031e6a:	d103      	bne.n	8031e74 <put_lfn+0xbc>
 8031e6c:	79fb      	ldrb	r3, [r7, #7]
 8031e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8031e72:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8031e74:	68bb      	ldr	r3, [r7, #8]
 8031e76:	79fa      	ldrb	r2, [r7, #7]
 8031e78:	701a      	strb	r2, [r3, #0]
}
 8031e7a:	bf00      	nop
 8031e7c:	3720      	adds	r7, #32
 8031e7e:	46bd      	mov	sp, r7
 8031e80:	bd80      	pop	{r7, pc}
 8031e82:	bf00      	nop
 8031e84:	0803b964 	.word	0x0803b964

08031e88 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8031e88:	b580      	push	{r7, lr}
 8031e8a:	b08c      	sub	sp, #48	; 0x30
 8031e8c:	af00      	add	r7, sp, #0
 8031e8e:	60f8      	str	r0, [r7, #12]
 8031e90:	60b9      	str	r1, [r7, #8]
 8031e92:	607a      	str	r2, [r7, #4]
 8031e94:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8031e96:	220b      	movs	r2, #11
 8031e98:	68b9      	ldr	r1, [r7, #8]
 8031e9a:	68f8      	ldr	r0, [r7, #12]
 8031e9c:	f7fe fbb3 	bl	8030606 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8031ea0:	683b      	ldr	r3, [r7, #0]
 8031ea2:	2b05      	cmp	r3, #5
 8031ea4:	d929      	bls.n	8031efa <gen_numname+0x72>
		sr = seq;
 8031ea6:	683b      	ldr	r3, [r7, #0]
 8031ea8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8031eaa:	e020      	b.n	8031eee <gen_numname+0x66>
			wc = *lfn++;
 8031eac:	687b      	ldr	r3, [r7, #4]
 8031eae:	1c9a      	adds	r2, r3, #2
 8031eb0:	607a      	str	r2, [r7, #4]
 8031eb2:	881b      	ldrh	r3, [r3, #0]
 8031eb4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8031eb6:	2300      	movs	r3, #0
 8031eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8031eba:	e015      	b.n	8031ee8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8031ebc:	69fb      	ldr	r3, [r7, #28]
 8031ebe:	005a      	lsls	r2, r3, #1
 8031ec0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8031ec2:	f003 0301 	and.w	r3, r3, #1
 8031ec6:	4413      	add	r3, r2
 8031ec8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8031eca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8031ecc:	085b      	lsrs	r3, r3, #1
 8031ece:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8031ed0:	69fb      	ldr	r3, [r7, #28]
 8031ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8031ed6:	2b00      	cmp	r3, #0
 8031ed8:	d003      	beq.n	8031ee2 <gen_numname+0x5a>
 8031eda:	69fa      	ldr	r2, [r7, #28]
 8031edc:	4b30      	ldr	r3, [pc, #192]	; (8031fa0 <gen_numname+0x118>)
 8031ede:	4053      	eors	r3, r2
 8031ee0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8031ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031ee4:	3301      	adds	r3, #1
 8031ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8031ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031eea:	2b0f      	cmp	r3, #15
 8031eec:	d9e6      	bls.n	8031ebc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8031eee:	687b      	ldr	r3, [r7, #4]
 8031ef0:	881b      	ldrh	r3, [r3, #0]
 8031ef2:	2b00      	cmp	r3, #0
 8031ef4:	d1da      	bne.n	8031eac <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8031ef6:	69fb      	ldr	r3, [r7, #28]
 8031ef8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8031efa:	2307      	movs	r3, #7
 8031efc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8031efe:	683b      	ldr	r3, [r7, #0]
 8031f00:	b2db      	uxtb	r3, r3
 8031f02:	f003 030f 	and.w	r3, r3, #15
 8031f06:	b2db      	uxtb	r3, r3
 8031f08:	3330      	adds	r3, #48	; 0x30
 8031f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8031f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8031f12:	2b39      	cmp	r3, #57	; 0x39
 8031f14:	d904      	bls.n	8031f20 <gen_numname+0x98>
 8031f16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8031f1a:	3307      	adds	r3, #7
 8031f1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8031f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031f22:	1e5a      	subs	r2, r3, #1
 8031f24:	62ba      	str	r2, [r7, #40]	; 0x28
 8031f26:	3330      	adds	r3, #48	; 0x30
 8031f28:	443b      	add	r3, r7
 8031f2a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8031f2e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8031f32:	683b      	ldr	r3, [r7, #0]
 8031f34:	091b      	lsrs	r3, r3, #4
 8031f36:	603b      	str	r3, [r7, #0]
	} while (seq);
 8031f38:	683b      	ldr	r3, [r7, #0]
 8031f3a:	2b00      	cmp	r3, #0
 8031f3c:	d1df      	bne.n	8031efe <gen_numname+0x76>
	ns[i] = '~';
 8031f3e:	f107 0214 	add.w	r2, r7, #20
 8031f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031f44:	4413      	add	r3, r2
 8031f46:	227e      	movs	r2, #126	; 0x7e
 8031f48:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8031f4a:	2300      	movs	r3, #0
 8031f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8031f4e:	e002      	b.n	8031f56 <gen_numname+0xce>
 8031f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031f52:	3301      	adds	r3, #1
 8031f54:	627b      	str	r3, [r7, #36]	; 0x24
 8031f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031f5a:	429a      	cmp	r2, r3
 8031f5c:	d205      	bcs.n	8031f6a <gen_numname+0xe2>
 8031f5e:	68fa      	ldr	r2, [r7, #12]
 8031f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031f62:	4413      	add	r3, r2
 8031f64:	781b      	ldrb	r3, [r3, #0]
 8031f66:	2b20      	cmp	r3, #32
 8031f68:	d1f2      	bne.n	8031f50 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8031f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031f6c:	2b07      	cmp	r3, #7
 8031f6e:	d807      	bhi.n	8031f80 <gen_numname+0xf8>
 8031f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031f72:	1c5a      	adds	r2, r3, #1
 8031f74:	62ba      	str	r2, [r7, #40]	; 0x28
 8031f76:	3330      	adds	r3, #48	; 0x30
 8031f78:	443b      	add	r3, r7
 8031f7a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8031f7e:	e000      	b.n	8031f82 <gen_numname+0xfa>
 8031f80:	2120      	movs	r1, #32
 8031f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031f84:	1c5a      	adds	r2, r3, #1
 8031f86:	627a      	str	r2, [r7, #36]	; 0x24
 8031f88:	68fa      	ldr	r2, [r7, #12]
 8031f8a:	4413      	add	r3, r2
 8031f8c:	460a      	mov	r2, r1
 8031f8e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8031f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031f92:	2b07      	cmp	r3, #7
 8031f94:	d9e9      	bls.n	8031f6a <gen_numname+0xe2>
}
 8031f96:	bf00      	nop
 8031f98:	bf00      	nop
 8031f9a:	3730      	adds	r7, #48	; 0x30
 8031f9c:	46bd      	mov	sp, r7
 8031f9e:	bd80      	pop	{r7, pc}
 8031fa0:	00011021 	.word	0x00011021

08031fa4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8031fa4:	b480      	push	{r7}
 8031fa6:	b085      	sub	sp, #20
 8031fa8:	af00      	add	r7, sp, #0
 8031faa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8031fac:	2300      	movs	r3, #0
 8031fae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8031fb0:	230b      	movs	r3, #11
 8031fb2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8031fb4:	7bfb      	ldrb	r3, [r7, #15]
 8031fb6:	b2da      	uxtb	r2, r3
 8031fb8:	0852      	lsrs	r2, r2, #1
 8031fba:	01db      	lsls	r3, r3, #7
 8031fbc:	4313      	orrs	r3, r2
 8031fbe:	b2da      	uxtb	r2, r3
 8031fc0:	687b      	ldr	r3, [r7, #4]
 8031fc2:	1c59      	adds	r1, r3, #1
 8031fc4:	6079      	str	r1, [r7, #4]
 8031fc6:	781b      	ldrb	r3, [r3, #0]
 8031fc8:	4413      	add	r3, r2
 8031fca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8031fcc:	68bb      	ldr	r3, [r7, #8]
 8031fce:	3b01      	subs	r3, #1
 8031fd0:	60bb      	str	r3, [r7, #8]
 8031fd2:	68bb      	ldr	r3, [r7, #8]
 8031fd4:	2b00      	cmp	r3, #0
 8031fd6:	d1ed      	bne.n	8031fb4 <sum_sfn+0x10>
	return sum;
 8031fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8031fda:	4618      	mov	r0, r3
 8031fdc:	3714      	adds	r7, #20
 8031fde:	46bd      	mov	sp, r7
 8031fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031fe4:	4770      	bx	lr

08031fe6 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8031fe6:	b480      	push	{r7}
 8031fe8:	b087      	sub	sp, #28
 8031fea:	af00      	add	r7, sp, #0
 8031fec:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8031fee:	687b      	ldr	r3, [r7, #4]
 8031ff0:	3301      	adds	r3, #1
 8031ff2:	781b      	ldrb	r3, [r3, #0]
 8031ff4:	3301      	adds	r3, #1
 8031ff6:	015b      	lsls	r3, r3, #5
 8031ff8:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8031ffa:	2300      	movs	r3, #0
 8031ffc:	827b      	strh	r3, [r7, #18]
 8031ffe:	2300      	movs	r3, #0
 8032000:	617b      	str	r3, [r7, #20]
 8032002:	e018      	b.n	8032036 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8032004:	697b      	ldr	r3, [r7, #20]
 8032006:	2b02      	cmp	r3, #2
 8032008:	d103      	bne.n	8032012 <xdir_sum+0x2c>
			i++;
 803200a:	697b      	ldr	r3, [r7, #20]
 803200c:	3301      	adds	r3, #1
 803200e:	617b      	str	r3, [r7, #20]
 8032010:	e00e      	b.n	8032030 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8032012:	8a7b      	ldrh	r3, [r7, #18]
 8032014:	03db      	lsls	r3, r3, #15
 8032016:	b29a      	uxth	r2, r3
 8032018:	8a7b      	ldrh	r3, [r7, #18]
 803201a:	085b      	lsrs	r3, r3, #1
 803201c:	b29b      	uxth	r3, r3
 803201e:	4413      	add	r3, r2
 8032020:	b29a      	uxth	r2, r3
 8032022:	6879      	ldr	r1, [r7, #4]
 8032024:	697b      	ldr	r3, [r7, #20]
 8032026:	440b      	add	r3, r1
 8032028:	781b      	ldrb	r3, [r3, #0]
 803202a:	b29b      	uxth	r3, r3
 803202c:	4413      	add	r3, r2
 803202e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8032030:	697b      	ldr	r3, [r7, #20]
 8032032:	3301      	adds	r3, #1
 8032034:	617b      	str	r3, [r7, #20]
 8032036:	697a      	ldr	r2, [r7, #20]
 8032038:	68fb      	ldr	r3, [r7, #12]
 803203a:	429a      	cmp	r2, r3
 803203c:	d3e2      	bcc.n	8032004 <xdir_sum+0x1e>
		}
	}
	return sum;
 803203e:	8a7b      	ldrh	r3, [r7, #18]
}
 8032040:	4618      	mov	r0, r3
 8032042:	371c      	adds	r7, #28
 8032044:	46bd      	mov	sp, r7
 8032046:	f85d 7b04 	ldr.w	r7, [sp], #4
 803204a:	4770      	bx	lr

0803204c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 803204c:	b580      	push	{r7, lr}
 803204e:	b084      	sub	sp, #16
 8032050:	af00      	add	r7, sp, #0
 8032052:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8032054:	2300      	movs	r3, #0
 8032056:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8032058:	e01f      	b.n	803209a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 803205a:	89bb      	ldrh	r3, [r7, #12]
 803205c:	4618      	mov	r0, r3
 803205e:	f003 fddd 	bl	8035c1c <ff_wtoupper>
 8032062:	4603      	mov	r3, r0
 8032064:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8032066:	89fb      	ldrh	r3, [r7, #14]
 8032068:	03db      	lsls	r3, r3, #15
 803206a:	b29a      	uxth	r2, r3
 803206c:	89fb      	ldrh	r3, [r7, #14]
 803206e:	085b      	lsrs	r3, r3, #1
 8032070:	b29b      	uxth	r3, r3
 8032072:	4413      	add	r3, r2
 8032074:	b29a      	uxth	r2, r3
 8032076:	89bb      	ldrh	r3, [r7, #12]
 8032078:	b2db      	uxtb	r3, r3
 803207a:	b29b      	uxth	r3, r3
 803207c:	4413      	add	r3, r2
 803207e:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8032080:	89fb      	ldrh	r3, [r7, #14]
 8032082:	03db      	lsls	r3, r3, #15
 8032084:	b29a      	uxth	r2, r3
 8032086:	89fb      	ldrh	r3, [r7, #14]
 8032088:	085b      	lsrs	r3, r3, #1
 803208a:	b29b      	uxth	r3, r3
 803208c:	4413      	add	r3, r2
 803208e:	b29a      	uxth	r2, r3
 8032090:	89bb      	ldrh	r3, [r7, #12]
 8032092:	0a1b      	lsrs	r3, r3, #8
 8032094:	b29b      	uxth	r3, r3
 8032096:	4413      	add	r3, r2
 8032098:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 803209a:	687b      	ldr	r3, [r7, #4]
 803209c:	1c9a      	adds	r2, r3, #2
 803209e:	607a      	str	r2, [r7, #4]
 80320a0:	881b      	ldrh	r3, [r3, #0]
 80320a2:	81bb      	strh	r3, [r7, #12]
 80320a4:	89bb      	ldrh	r3, [r7, #12]
 80320a6:	2b00      	cmp	r3, #0
 80320a8:	d1d7      	bne.n	803205a <xname_sum+0xe>
	}
	return sum;
 80320aa:	89fb      	ldrh	r3, [r7, #14]
}
 80320ac:	4618      	mov	r0, r3
 80320ae:	3710      	adds	r7, #16
 80320b0:	46bd      	mov	sp, r7
 80320b2:	bd80      	pop	{r7, pc}

080320b4 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 80320b4:	b580      	push	{r7, lr}
 80320b6:	b086      	sub	sp, #24
 80320b8:	af00      	add	r7, sp, #0
 80320ba:	6078      	str	r0, [r7, #4]
 80320bc:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 80320be:	2300      	movs	r3, #0
 80320c0:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 80320c2:	2340      	movs	r3, #64	; 0x40
 80320c4:	613b      	str	r3, [r7, #16]
 80320c6:	2300      	movs	r3, #0
 80320c8:	60fb      	str	r3, [r7, #12]
 80320ca:	e02c      	b.n	8032126 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 80320cc:	693b      	ldr	r3, [r7, #16]
 80320ce:	f003 031f 	and.w	r3, r3, #31
 80320d2:	2b00      	cmp	r3, #0
 80320d4:	d102      	bne.n	80320dc <get_xdir_info+0x28>
 80320d6:	693b      	ldr	r3, [r7, #16]
 80320d8:	3302      	adds	r3, #2
 80320da:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 80320dc:	687a      	ldr	r2, [r7, #4]
 80320de:	693b      	ldr	r3, [r7, #16]
 80320e0:	4413      	add	r3, r2
 80320e2:	4618      	mov	r0, r3
 80320e4:	f7fe f8aa 	bl	803023c <ld_word>
 80320e8:	4603      	mov	r3, r0
 80320ea:	2100      	movs	r1, #0
 80320ec:	4618      	mov	r0, r3
 80320ee:	f003 fd59 	bl	8035ba4 <ff_convert>
 80320f2:	4603      	mov	r3, r0
 80320f4:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 80320f6:	897b      	ldrh	r3, [r7, #10]
 80320f8:	2b00      	cmp	r3, #0
 80320fa:	d002      	beq.n	8032102 <get_xdir_info+0x4e>
 80320fc:	697b      	ldr	r3, [r7, #20]
 80320fe:	2bfe      	cmp	r3, #254	; 0xfe
 8032100:	d902      	bls.n	8032108 <get_xdir_info+0x54>
 8032102:	2300      	movs	r3, #0
 8032104:	617b      	str	r3, [r7, #20]
 8032106:	e015      	b.n	8032134 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 8032108:	697b      	ldr	r3, [r7, #20]
 803210a:	1c5a      	adds	r2, r3, #1
 803210c:	617a      	str	r2, [r7, #20]
 803210e:	897a      	ldrh	r2, [r7, #10]
 8032110:	b2d1      	uxtb	r1, r2
 8032112:	683a      	ldr	r2, [r7, #0]
 8032114:	4413      	add	r3, r2
 8032116:	460a      	mov	r2, r1
 8032118:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 803211a:	693b      	ldr	r3, [r7, #16]
 803211c:	3302      	adds	r3, #2
 803211e:	613b      	str	r3, [r7, #16]
 8032120:	68fb      	ldr	r3, [r7, #12]
 8032122:	3301      	adds	r3, #1
 8032124:	60fb      	str	r3, [r7, #12]
 8032126:	687b      	ldr	r3, [r7, #4]
 8032128:	3323      	adds	r3, #35	; 0x23
 803212a:	781b      	ldrb	r3, [r3, #0]
 803212c:	461a      	mov	r2, r3
 803212e:	68fb      	ldr	r3, [r7, #12]
 8032130:	4293      	cmp	r3, r2
 8032132:	d3cb      	bcc.n	80320cc <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8032134:	697b      	ldr	r3, [r7, #20]
 8032136:	2b00      	cmp	r3, #0
 8032138:	d106      	bne.n	8032148 <get_xdir_info+0x94>
 803213a:	697b      	ldr	r3, [r7, #20]
 803213c:	1c5a      	adds	r2, r3, #1
 803213e:	617a      	str	r2, [r7, #20]
 8032140:	683a      	ldr	r2, [r7, #0]
 8032142:	4413      	add	r3, r2
 8032144:	223f      	movs	r2, #63	; 0x3f
 8032146:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 8032148:	683a      	ldr	r2, [r7, #0]
 803214a:	697b      	ldr	r3, [r7, #20]
 803214c:	4413      	add	r3, r2
 803214e:	331a      	adds	r3, #26
 8032150:	2200      	movs	r2, #0
 8032152:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 8032154:	683b      	ldr	r3, [r7, #0]
 8032156:	2200      	movs	r2, #0
 8032158:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 803215a:	687b      	ldr	r3, [r7, #4]
 803215c:	791a      	ldrb	r2, [r3, #4]
 803215e:	683b      	ldr	r3, [r7, #0]
 8032160:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8032162:	683b      	ldr	r3, [r7, #0]
 8032164:	7b1b      	ldrb	r3, [r3, #12]
 8032166:	f003 0310 	and.w	r3, r3, #16
 803216a:	2b00      	cmp	r3, #0
 803216c:	d107      	bne.n	803217e <get_xdir_info+0xca>
 803216e:	687b      	ldr	r3, [r7, #4]
 8032170:	3338      	adds	r3, #56	; 0x38
 8032172:	4618      	mov	r0, r3
 8032174:	f7fe f89d 	bl	80302b2 <ld_qword>
 8032178:	4602      	mov	r2, r0
 803217a:	460b      	mov	r3, r1
 803217c:	e003      	b.n	8032186 <get_xdir_info+0xd2>
 803217e:	f04f 0200 	mov.w	r2, #0
 8032182:	f04f 0300 	mov.w	r3, #0
 8032186:	6839      	ldr	r1, [r7, #0]
 8032188:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 803218c:	687b      	ldr	r3, [r7, #4]
 803218e:	330c      	adds	r3, #12
 8032190:	4618      	mov	r0, r3
 8032192:	f7fe f853 	bl	803023c <ld_word>
 8032196:	4603      	mov	r3, r0
 8032198:	461a      	mov	r2, r3
 803219a:	683b      	ldr	r3, [r7, #0]
 803219c:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 803219e:	687b      	ldr	r3, [r7, #4]
 80321a0:	330e      	adds	r3, #14
 80321a2:	4618      	mov	r0, r3
 80321a4:	f7fe f84a 	bl	803023c <ld_word>
 80321a8:	4603      	mov	r3, r0
 80321aa:	461a      	mov	r2, r3
 80321ac:	683b      	ldr	r3, [r7, #0]
 80321ae:	811a      	strh	r2, [r3, #8]
}
 80321b0:	bf00      	nop
 80321b2:	3718      	adds	r7, #24
 80321b4:	46bd      	mov	sp, r7
 80321b6:	bd80      	pop	{r7, pc}

080321b8 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80321b8:	b590      	push	{r4, r7, lr}
 80321ba:	b087      	sub	sp, #28
 80321bc:	af00      	add	r7, sp, #0
 80321be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80321c0:	687b      	ldr	r3, [r7, #4]
 80321c2:	681b      	ldr	r3, [r3, #0]
 80321c4:	695b      	ldr	r3, [r3, #20]
 80321c6:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80321c8:	687b      	ldr	r3, [r7, #4]
 80321ca:	681a      	ldr	r2, [r3, #0]
 80321cc:	687b      	ldr	r3, [r7, #4]
 80321ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80321d0:	4619      	mov	r1, r3
 80321d2:	4610      	mov	r0, r2
 80321d4:	f7fe fc76 	bl	8030ac4 <move_window>
 80321d8:	4603      	mov	r3, r0
 80321da:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80321dc:	7bfb      	ldrb	r3, [r7, #15]
 80321de:	2b00      	cmp	r3, #0
 80321e0:	d001      	beq.n	80321e6 <load_xdir+0x2e>
 80321e2:	7bfb      	ldrb	r3, [r7, #15]
 80321e4:	e09f      	b.n	8032326 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80321e6:	687b      	ldr	r3, [r7, #4]
 80321e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80321ea:	781b      	ldrb	r3, [r3, #0]
 80321ec:	2b85      	cmp	r3, #133	; 0x85
 80321ee:	d001      	beq.n	80321f4 <load_xdir+0x3c>
 80321f0:	2302      	movs	r3, #2
 80321f2:	e098      	b.n	8032326 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80321f4:	687b      	ldr	r3, [r7, #4]
 80321f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80321f8:	2220      	movs	r2, #32
 80321fa:	4619      	mov	r1, r3
 80321fc:	6938      	ldr	r0, [r7, #16]
 80321fe:	f7fe fa02 	bl	8030606 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8032202:	693b      	ldr	r3, [r7, #16]
 8032204:	3301      	adds	r3, #1
 8032206:	781b      	ldrb	r3, [r3, #0]
 8032208:	3301      	adds	r3, #1
 803220a:	015b      	lsls	r3, r3, #5
 803220c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 803220e:	68bb      	ldr	r3, [r7, #8]
 8032210:	2b5f      	cmp	r3, #95	; 0x5f
 8032212:	d903      	bls.n	803221c <load_xdir+0x64>
 8032214:	68bb      	ldr	r3, [r7, #8]
 8032216:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 803221a:	d901      	bls.n	8032220 <load_xdir+0x68>
 803221c:	2302      	movs	r3, #2
 803221e:	e082      	b.n	8032326 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8032220:	2100      	movs	r1, #0
 8032222:	6878      	ldr	r0, [r7, #4]
 8032224:	f7ff fb73 	bl	803190e <dir_next>
 8032228:	4603      	mov	r3, r0
 803222a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 803222c:	7bfb      	ldrb	r3, [r7, #15]
 803222e:	2b00      	cmp	r3, #0
 8032230:	d001      	beq.n	8032236 <load_xdir+0x7e>
 8032232:	7bfb      	ldrb	r3, [r7, #15]
 8032234:	e077      	b.n	8032326 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8032236:	687b      	ldr	r3, [r7, #4]
 8032238:	681a      	ldr	r2, [r3, #0]
 803223a:	687b      	ldr	r3, [r7, #4]
 803223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803223e:	4619      	mov	r1, r3
 8032240:	4610      	mov	r0, r2
 8032242:	f7fe fc3f 	bl	8030ac4 <move_window>
 8032246:	4603      	mov	r3, r0
 8032248:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 803224a:	7bfb      	ldrb	r3, [r7, #15]
 803224c:	2b00      	cmp	r3, #0
 803224e:	d001      	beq.n	8032254 <load_xdir+0x9c>
 8032250:	7bfb      	ldrb	r3, [r7, #15]
 8032252:	e068      	b.n	8032326 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8032254:	687b      	ldr	r3, [r7, #4]
 8032256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032258:	781b      	ldrb	r3, [r3, #0]
 803225a:	2bc0      	cmp	r3, #192	; 0xc0
 803225c:	d001      	beq.n	8032262 <load_xdir+0xaa>
 803225e:	2302      	movs	r3, #2
 8032260:	e061      	b.n	8032326 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8032262:	693b      	ldr	r3, [r7, #16]
 8032264:	f103 0020 	add.w	r0, r3, #32
 8032268:	687b      	ldr	r3, [r7, #4]
 803226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803226c:	2220      	movs	r2, #32
 803226e:	4619      	mov	r1, r3
 8032270:	f7fe f9c9 	bl	8030606 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8032274:	693b      	ldr	r3, [r7, #16]
 8032276:	3323      	adds	r3, #35	; 0x23
 8032278:	781b      	ldrb	r3, [r3, #0]
 803227a:	332c      	adds	r3, #44	; 0x2c
 803227c:	4a2c      	ldr	r2, [pc, #176]	; (8032330 <load_xdir+0x178>)
 803227e:	fba2 2303 	umull	r2, r3, r2, r3
 8032282:	08db      	lsrs	r3, r3, #3
 8032284:	015b      	lsls	r3, r3, #5
 8032286:	68ba      	ldr	r2, [r7, #8]
 8032288:	429a      	cmp	r2, r3
 803228a:	d201      	bcs.n	8032290 <load_xdir+0xd8>
 803228c:	2302      	movs	r3, #2
 803228e:	e04a      	b.n	8032326 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8032290:	2340      	movs	r3, #64	; 0x40
 8032292:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8032294:	2100      	movs	r1, #0
 8032296:	6878      	ldr	r0, [r7, #4]
 8032298:	f7ff fb39 	bl	803190e <dir_next>
 803229c:	4603      	mov	r3, r0
 803229e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80322a0:	7bfb      	ldrb	r3, [r7, #15]
 80322a2:	2b00      	cmp	r3, #0
 80322a4:	d001      	beq.n	80322aa <load_xdir+0xf2>
 80322a6:	7bfb      	ldrb	r3, [r7, #15]
 80322a8:	e03d      	b.n	8032326 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 80322aa:	687b      	ldr	r3, [r7, #4]
 80322ac:	681a      	ldr	r2, [r3, #0]
 80322ae:	687b      	ldr	r3, [r7, #4]
 80322b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80322b2:	4619      	mov	r1, r3
 80322b4:	4610      	mov	r0, r2
 80322b6:	f7fe fc05 	bl	8030ac4 <move_window>
 80322ba:	4603      	mov	r3, r0
 80322bc:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80322be:	7bfb      	ldrb	r3, [r7, #15]
 80322c0:	2b00      	cmp	r3, #0
 80322c2:	d001      	beq.n	80322c8 <load_xdir+0x110>
 80322c4:	7bfb      	ldrb	r3, [r7, #15]
 80322c6:	e02e      	b.n	8032326 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80322c8:	687b      	ldr	r3, [r7, #4]
 80322ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80322cc:	781b      	ldrb	r3, [r3, #0]
 80322ce:	2bc1      	cmp	r3, #193	; 0xc1
 80322d0:	d001      	beq.n	80322d6 <load_xdir+0x11e>
 80322d2:	2302      	movs	r3, #2
 80322d4:	e027      	b.n	8032326 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80322d6:	697b      	ldr	r3, [r7, #20]
 80322d8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80322dc:	d208      	bcs.n	80322f0 <load_xdir+0x138>
 80322de:	693a      	ldr	r2, [r7, #16]
 80322e0:	697b      	ldr	r3, [r7, #20]
 80322e2:	18d0      	adds	r0, r2, r3
 80322e4:	687b      	ldr	r3, [r7, #4]
 80322e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80322e8:	2220      	movs	r2, #32
 80322ea:	4619      	mov	r1, r3
 80322ec:	f7fe f98b 	bl	8030606 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 80322f0:	697b      	ldr	r3, [r7, #20]
 80322f2:	3320      	adds	r3, #32
 80322f4:	617b      	str	r3, [r7, #20]
 80322f6:	697a      	ldr	r2, [r7, #20]
 80322f8:	68bb      	ldr	r3, [r7, #8]
 80322fa:	429a      	cmp	r2, r3
 80322fc:	d3ca      	bcc.n	8032294 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80322fe:	697b      	ldr	r3, [r7, #20]
 8032300:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8032304:	d80e      	bhi.n	8032324 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8032306:	6938      	ldr	r0, [r7, #16]
 8032308:	f7ff fe6d 	bl	8031fe6 <xdir_sum>
 803230c:	4603      	mov	r3, r0
 803230e:	461c      	mov	r4, r3
 8032310:	693b      	ldr	r3, [r7, #16]
 8032312:	3302      	adds	r3, #2
 8032314:	4618      	mov	r0, r3
 8032316:	f7fd ff91 	bl	803023c <ld_word>
 803231a:	4603      	mov	r3, r0
 803231c:	429c      	cmp	r4, r3
 803231e:	d001      	beq.n	8032324 <load_xdir+0x16c>
 8032320:	2302      	movs	r3, #2
 8032322:	e000      	b.n	8032326 <load_xdir+0x16e>
	}
	return FR_OK;
 8032324:	2300      	movs	r3, #0
}
 8032326:	4618      	mov	r0, r3
 8032328:	371c      	adds	r7, #28
 803232a:	46bd      	mov	sp, r7
 803232c:	bd90      	pop	{r4, r7, pc}
 803232e:	bf00      	nop
 8032330:	88888889 	.word	0x88888889

08032334 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8032334:	b5b0      	push	{r4, r5, r7, lr}
 8032336:	b084      	sub	sp, #16
 8032338:	af00      	add	r7, sp, #0
 803233a:	6078      	str	r0, [r7, #4]
 803233c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 803233e:	6839      	ldr	r1, [r7, #0]
 8032340:	6808      	ldr	r0, [r1, #0]
 8032342:	6879      	ldr	r1, [r7, #4]
 8032344:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8032346:	6839      	ldr	r1, [r7, #0]
 8032348:	6a08      	ldr	r0, [r1, #32]
 803234a:	6879      	ldr	r1, [r7, #4]
 803234c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 803234e:	6839      	ldr	r1, [r7, #0]
 8032350:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8032352:	b2c8      	uxtb	r0, r1
 8032354:	6879      	ldr	r1, [r7, #4]
 8032356:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8032358:	6839      	ldr	r1, [r7, #0]
 803235a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 803235c:	2000      	movs	r0, #0
 803235e:	460c      	mov	r4, r1
 8032360:	4605      	mov	r5, r0
 8032362:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8032366:	2300      	movs	r3, #0
 8032368:	6879      	ldr	r1, [r7, #4]
 803236a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 803236e:	683b      	ldr	r3, [r7, #0]
 8032370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8032372:	687b      	ldr	r3, [r7, #4]
 8032374:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8032376:	687b      	ldr	r3, [r7, #4]
 8032378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803237a:	4619      	mov	r1, r3
 803237c:	6878      	ldr	r0, [r7, #4]
 803237e:	f7ff fa32 	bl	80317e6 <dir_sdi>
 8032382:	4603      	mov	r3, r0
 8032384:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8032386:	7bfb      	ldrb	r3, [r7, #15]
 8032388:	2b00      	cmp	r3, #0
 803238a:	d104      	bne.n	8032396 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 803238c:	6878      	ldr	r0, [r7, #4]
 803238e:	f7ff ff13 	bl	80321b8 <load_xdir>
 8032392:	4603      	mov	r3, r0
 8032394:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8032396:	7bfb      	ldrb	r3, [r7, #15]
}
 8032398:	4618      	mov	r0, r3
 803239a:	3710      	adds	r7, #16
 803239c:	46bd      	mov	sp, r7
 803239e:	bdb0      	pop	{r4, r5, r7, pc}

080323a0 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 80323a0:	b590      	push	{r4, r7, lr}
 80323a2:	b087      	sub	sp, #28
 80323a4:	af00      	add	r7, sp, #0
 80323a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80323a8:	687b      	ldr	r3, [r7, #4]
 80323aa:	681b      	ldr	r3, [r3, #0]
 80323ac:	695b      	ldr	r3, [r3, #20]
 80323ae:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80323b0:	68fb      	ldr	r3, [r7, #12]
 80323b2:	1c9c      	adds	r4, r3, #2
 80323b4:	68f8      	ldr	r0, [r7, #12]
 80323b6:	f7ff fe16 	bl	8031fe6 <xdir_sum>
 80323ba:	4603      	mov	r3, r0
 80323bc:	4619      	mov	r1, r3
 80323be:	4620      	mov	r0, r4
 80323c0:	f7fe f852 	bl	8030468 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80323c4:	68fb      	ldr	r3, [r7, #12]
 80323c6:	3301      	adds	r3, #1
 80323c8:	781b      	ldrb	r3, [r3, #0]
 80323ca:	3301      	adds	r3, #1
 80323cc:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 80323ce:	687b      	ldr	r3, [r7, #4]
 80323d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80323d2:	4619      	mov	r1, r3
 80323d4:	6878      	ldr	r0, [r7, #4]
 80323d6:	f7ff fa06 	bl	80317e6 <dir_sdi>
 80323da:	4603      	mov	r3, r0
 80323dc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80323de:	e026      	b.n	803242e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 80323e0:	687b      	ldr	r3, [r7, #4]
 80323e2:	681a      	ldr	r2, [r3, #0]
 80323e4:	687b      	ldr	r3, [r7, #4]
 80323e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80323e8:	4619      	mov	r1, r3
 80323ea:	4610      	mov	r0, r2
 80323ec:	f7fe fb6a 	bl	8030ac4 <move_window>
 80323f0:	4603      	mov	r3, r0
 80323f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80323f4:	7dfb      	ldrb	r3, [r7, #23]
 80323f6:	2b00      	cmp	r3, #0
 80323f8:	d11d      	bne.n	8032436 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80323fa:	687b      	ldr	r3, [r7, #4]
 80323fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80323fe:	2220      	movs	r2, #32
 8032400:	68f9      	ldr	r1, [r7, #12]
 8032402:	4618      	mov	r0, r3
 8032404:	f7fe f8ff 	bl	8030606 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8032408:	687b      	ldr	r3, [r7, #4]
 803240a:	681b      	ldr	r3, [r3, #0]
 803240c:	2201      	movs	r2, #1
 803240e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8032410:	693b      	ldr	r3, [r7, #16]
 8032412:	3b01      	subs	r3, #1
 8032414:	613b      	str	r3, [r7, #16]
 8032416:	693b      	ldr	r3, [r7, #16]
 8032418:	2b00      	cmp	r3, #0
 803241a:	d00e      	beq.n	803243a <store_xdir+0x9a>
		dirb += SZDIRE;
 803241c:	68fb      	ldr	r3, [r7, #12]
 803241e:	3320      	adds	r3, #32
 8032420:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8032422:	2100      	movs	r1, #0
 8032424:	6878      	ldr	r0, [r7, #4]
 8032426:	f7ff fa72 	bl	803190e <dir_next>
 803242a:	4603      	mov	r3, r0
 803242c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 803242e:	7dfb      	ldrb	r3, [r7, #23]
 8032430:	2b00      	cmp	r3, #0
 8032432:	d0d5      	beq.n	80323e0 <store_xdir+0x40>
 8032434:	e002      	b.n	803243c <store_xdir+0x9c>
		if (res != FR_OK) break;
 8032436:	bf00      	nop
 8032438:	e000      	b.n	803243c <store_xdir+0x9c>
		if (--nent == 0) break;
 803243a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 803243c:	7dfb      	ldrb	r3, [r7, #23]
 803243e:	2b00      	cmp	r3, #0
 8032440:	d002      	beq.n	8032448 <store_xdir+0xa8>
 8032442:	7dfb      	ldrb	r3, [r7, #23]
 8032444:	2b01      	cmp	r3, #1
 8032446:	d101      	bne.n	803244c <store_xdir+0xac>
 8032448:	7dfb      	ldrb	r3, [r7, #23]
 803244a:	e000      	b.n	803244e <store_xdir+0xae>
 803244c:	2302      	movs	r3, #2
}
 803244e:	4618      	mov	r0, r3
 8032450:	371c      	adds	r7, #28
 8032452:	46bd      	mov	sp, r7
 8032454:	bd90      	pop	{r4, r7, pc}

08032456 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8032456:	b590      	push	{r4, r7, lr}
 8032458:	b085      	sub	sp, #20
 803245a:	af00      	add	r7, sp, #0
 803245c:	6078      	str	r0, [r7, #4]
 803245e:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8032460:	2240      	movs	r2, #64	; 0x40
 8032462:	2100      	movs	r1, #0
 8032464:	6878      	ldr	r0, [r7, #4]
 8032466:	f7fe f8ef 	bl	8030648 <mem_set>
	dirb[XDIR_Type] = 0x85;
 803246a:	687b      	ldr	r3, [r7, #4]
 803246c:	2285      	movs	r2, #133	; 0x85
 803246e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8032470:	687b      	ldr	r3, [r7, #4]
 8032472:	3320      	adds	r3, #32
 8032474:	22c0      	movs	r2, #192	; 0xc0
 8032476:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8032478:	2300      	movs	r3, #0
 803247a:	72bb      	strb	r3, [r7, #10]
 803247c:	2301      	movs	r3, #1
 803247e:	72fb      	strb	r3, [r7, #11]
 8032480:	2301      	movs	r3, #1
 8032482:	813b      	strh	r3, [r7, #8]
 8032484:	2340      	movs	r3, #64	; 0x40
 8032486:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8032488:	68fb      	ldr	r3, [r7, #12]
 803248a:	1c5a      	adds	r2, r3, #1
 803248c:	60fa      	str	r2, [r7, #12]
 803248e:	687a      	ldr	r2, [r7, #4]
 8032490:	4413      	add	r3, r2
 8032492:	22c1      	movs	r2, #193	; 0xc1
 8032494:	701a      	strb	r2, [r3, #0]
 8032496:	68fb      	ldr	r3, [r7, #12]
 8032498:	1c5a      	adds	r2, r3, #1
 803249a:	60fa      	str	r2, [r7, #12]
 803249c:	687a      	ldr	r2, [r7, #4]
 803249e:	4413      	add	r3, r2
 80324a0:	2200      	movs	r2, #0
 80324a2:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80324a4:	893b      	ldrh	r3, [r7, #8]
 80324a6:	2b00      	cmp	r3, #0
 80324a8:	d00b      	beq.n	80324c2 <create_xdir+0x6c>
 80324aa:	7abb      	ldrb	r3, [r7, #10]
 80324ac:	005b      	lsls	r3, r3, #1
 80324ae:	683a      	ldr	r2, [r7, #0]
 80324b0:	4413      	add	r3, r2
 80324b2:	881b      	ldrh	r3, [r3, #0]
 80324b4:	813b      	strh	r3, [r7, #8]
 80324b6:	893b      	ldrh	r3, [r7, #8]
 80324b8:	2b00      	cmp	r3, #0
 80324ba:	d002      	beq.n	80324c2 <create_xdir+0x6c>
 80324bc:	7abb      	ldrb	r3, [r7, #10]
 80324be:	3301      	adds	r3, #1
 80324c0:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 80324c2:	687a      	ldr	r2, [r7, #4]
 80324c4:	68fb      	ldr	r3, [r7, #12]
 80324c6:	4413      	add	r3, r2
 80324c8:	893a      	ldrh	r2, [r7, #8]
 80324ca:	4611      	mov	r1, r2
 80324cc:	4618      	mov	r0, r3
 80324ce:	f7fd ffcb 	bl	8030468 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 80324d2:	68fb      	ldr	r3, [r7, #12]
 80324d4:	3302      	adds	r3, #2
 80324d6:	60fb      	str	r3, [r7, #12]
 80324d8:	68fb      	ldr	r3, [r7, #12]
 80324da:	f003 031f 	and.w	r3, r3, #31
 80324de:	2b00      	cmp	r3, #0
 80324e0:	d1e0      	bne.n	80324a4 <create_xdir+0x4e>
		nb++;
 80324e2:	7afb      	ldrb	r3, [r7, #11]
 80324e4:	3301      	adds	r3, #1
 80324e6:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80324e8:	7abb      	ldrb	r3, [r7, #10]
 80324ea:	005b      	lsls	r3, r3, #1
 80324ec:	683a      	ldr	r2, [r7, #0]
 80324ee:	4413      	add	r3, r2
 80324f0:	881b      	ldrh	r3, [r3, #0]
 80324f2:	2b00      	cmp	r3, #0
 80324f4:	d1c8      	bne.n	8032488 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 80324f6:	687b      	ldr	r3, [r7, #4]
 80324f8:	3323      	adds	r3, #35	; 0x23
 80324fa:	7aba      	ldrb	r2, [r7, #10]
 80324fc:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80324fe:	687b      	ldr	r3, [r7, #4]
 8032500:	3301      	adds	r3, #1
 8032502:	7afa      	ldrb	r2, [r7, #11]
 8032504:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8032506:	687b      	ldr	r3, [r7, #4]
 8032508:	f103 0424 	add.w	r4, r3, #36	; 0x24
 803250c:	6838      	ldr	r0, [r7, #0]
 803250e:	f7ff fd9d 	bl	803204c <xname_sum>
 8032512:	4603      	mov	r3, r0
 8032514:	4619      	mov	r1, r3
 8032516:	4620      	mov	r0, r4
 8032518:	f7fd ffa6 	bl	8030468 <st_word>
}
 803251c:	bf00      	nop
 803251e:	3714      	adds	r7, #20
 8032520:	46bd      	mov	sp, r7
 8032522:	bd90      	pop	{r4, r7, pc}

08032524 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8032524:	b580      	push	{r7, lr}
 8032526:	b086      	sub	sp, #24
 8032528:	af00      	add	r7, sp, #0
 803252a:	6078      	str	r0, [r7, #4]
 803252c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 803252e:	2304      	movs	r3, #4
 8032530:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8032532:	687b      	ldr	r3, [r7, #4]
 8032534:	681b      	ldr	r3, [r3, #0]
 8032536:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8032538:	23ff      	movs	r3, #255	; 0xff
 803253a:	757b      	strb	r3, [r7, #21]
 803253c:	23ff      	movs	r3, #255	; 0xff
 803253e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8032540:	e09f      	b.n	8032682 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8032542:	687b      	ldr	r3, [r7, #4]
 8032544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032546:	4619      	mov	r1, r3
 8032548:	6938      	ldr	r0, [r7, #16]
 803254a:	f7fe fabb 	bl	8030ac4 <move_window>
 803254e:	4603      	mov	r3, r0
 8032550:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8032552:	7dfb      	ldrb	r3, [r7, #23]
 8032554:	2b00      	cmp	r3, #0
 8032556:	f040 809a 	bne.w	803268e <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 803255a:	687b      	ldr	r3, [r7, #4]
 803255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803255e:	781b      	ldrb	r3, [r3, #0]
 8032560:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8032562:	7dbb      	ldrb	r3, [r7, #22]
 8032564:	2b00      	cmp	r3, #0
 8032566:	d102      	bne.n	803256e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8032568:	2304      	movs	r3, #4
 803256a:	75fb      	strb	r3, [r7, #23]
 803256c:	e096      	b.n	803269c <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 803256e:	693b      	ldr	r3, [r7, #16]
 8032570:	781b      	ldrb	r3, [r3, #0]
 8032572:	2b04      	cmp	r3, #4
 8032574:	d118      	bne.n	80325a8 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8032576:	7dbb      	ldrb	r3, [r7, #22]
 8032578:	2b85      	cmp	r3, #133	; 0x85
 803257a:	d179      	bne.n	8032670 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 803257c:	687b      	ldr	r3, [r7, #4]
 803257e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8032580:	687b      	ldr	r3, [r7, #4]
 8032582:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8032584:	6878      	ldr	r0, [r7, #4]
 8032586:	f7ff fe17 	bl	80321b8 <load_xdir>
 803258a:	4603      	mov	r3, r0
 803258c:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 803258e:	7dfb      	ldrb	r3, [r7, #23]
 8032590:	2b00      	cmp	r3, #0
 8032592:	d17e      	bne.n	8032692 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8032594:	693b      	ldr	r3, [r7, #16]
 8032596:	695b      	ldr	r3, [r3, #20]
 8032598:	3304      	adds	r3, #4
 803259a:	781b      	ldrb	r3, [r3, #0]
 803259c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80325a0:	b2da      	uxtb	r2, r3
 80325a2:	687b      	ldr	r3, [r7, #4]
 80325a4:	719a      	strb	r2, [r3, #6]
					}
					break;
 80325a6:	e074      	b.n	8032692 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80325a8:	687b      	ldr	r3, [r7, #4]
 80325aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80325ac:	330b      	adds	r3, #11
 80325ae:	781b      	ldrb	r3, [r3, #0]
 80325b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80325b4:	73fb      	strb	r3, [r7, #15]
 80325b6:	687b      	ldr	r3, [r7, #4]
 80325b8:	7bfa      	ldrb	r2, [r7, #15]
 80325ba:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80325bc:	7dbb      	ldrb	r3, [r7, #22]
 80325be:	2be5      	cmp	r3, #229	; 0xe5
 80325c0:	d00e      	beq.n	80325e0 <dir_read+0xbc>
 80325c2:	7dbb      	ldrb	r3, [r7, #22]
 80325c4:	2b2e      	cmp	r3, #46	; 0x2e
 80325c6:	d00b      	beq.n	80325e0 <dir_read+0xbc>
 80325c8:	7bfb      	ldrb	r3, [r7, #15]
 80325ca:	f023 0320 	bic.w	r3, r3, #32
 80325ce:	2b08      	cmp	r3, #8
 80325d0:	bf0c      	ite	eq
 80325d2:	2301      	moveq	r3, #1
 80325d4:	2300      	movne	r3, #0
 80325d6:	b2db      	uxtb	r3, r3
 80325d8:	461a      	mov	r2, r3
 80325da:	683b      	ldr	r3, [r7, #0]
 80325dc:	4293      	cmp	r3, r2
 80325de:	d002      	beq.n	80325e6 <dir_read+0xc2>
				ord = 0xFF;
 80325e0:	23ff      	movs	r3, #255	; 0xff
 80325e2:	757b      	strb	r3, [r7, #21]
 80325e4:	e044      	b.n	8032670 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80325e6:	7bfb      	ldrb	r3, [r7, #15]
 80325e8:	2b0f      	cmp	r3, #15
 80325ea:	d12f      	bne.n	803264c <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80325ec:	7dbb      	ldrb	r3, [r7, #22]
 80325ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80325f2:	2b00      	cmp	r3, #0
 80325f4:	d00d      	beq.n	8032612 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80325f6:	687b      	ldr	r3, [r7, #4]
 80325f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80325fa:	7b5b      	ldrb	r3, [r3, #13]
 80325fc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80325fe:	7dbb      	ldrb	r3, [r7, #22]
 8032600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8032604:	75bb      	strb	r3, [r7, #22]
 8032606:	7dbb      	ldrb	r3, [r7, #22]
 8032608:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 803260a:	687b      	ldr	r3, [r7, #4]
 803260c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803260e:	687b      	ldr	r3, [r7, #4]
 8032610:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8032612:	7dba      	ldrb	r2, [r7, #22]
 8032614:	7d7b      	ldrb	r3, [r7, #21]
 8032616:	429a      	cmp	r2, r3
 8032618:	d115      	bne.n	8032646 <dir_read+0x122>
 803261a:	687b      	ldr	r3, [r7, #4]
 803261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803261e:	330d      	adds	r3, #13
 8032620:	781b      	ldrb	r3, [r3, #0]
 8032622:	7d3a      	ldrb	r2, [r7, #20]
 8032624:	429a      	cmp	r2, r3
 8032626:	d10e      	bne.n	8032646 <dir_read+0x122>
 8032628:	693b      	ldr	r3, [r7, #16]
 803262a:	691a      	ldr	r2, [r3, #16]
 803262c:	687b      	ldr	r3, [r7, #4]
 803262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032630:	4619      	mov	r1, r3
 8032632:	4610      	mov	r0, r2
 8032634:	f7ff fb5c 	bl	8031cf0 <pick_lfn>
 8032638:	4603      	mov	r3, r0
 803263a:	2b00      	cmp	r3, #0
 803263c:	d003      	beq.n	8032646 <dir_read+0x122>
 803263e:	7d7b      	ldrb	r3, [r7, #21]
 8032640:	3b01      	subs	r3, #1
 8032642:	b2db      	uxtb	r3, r3
 8032644:	e000      	b.n	8032648 <dir_read+0x124>
 8032646:	23ff      	movs	r3, #255	; 0xff
 8032648:	757b      	strb	r3, [r7, #21]
 803264a:	e011      	b.n	8032670 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 803264c:	7d7b      	ldrb	r3, [r7, #21]
 803264e:	2b00      	cmp	r3, #0
 8032650:	d109      	bne.n	8032666 <dir_read+0x142>
 8032652:	687b      	ldr	r3, [r7, #4]
 8032654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032656:	4618      	mov	r0, r3
 8032658:	f7ff fca4 	bl	8031fa4 <sum_sfn>
 803265c:	4603      	mov	r3, r0
 803265e:	461a      	mov	r2, r3
 8032660:	7d3b      	ldrb	r3, [r7, #20]
 8032662:	4293      	cmp	r3, r2
 8032664:	d017      	beq.n	8032696 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8032666:	687b      	ldr	r3, [r7, #4]
 8032668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803266c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 803266e:	e012      	b.n	8032696 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8032670:	2100      	movs	r1, #0
 8032672:	6878      	ldr	r0, [r7, #4]
 8032674:	f7ff f94b 	bl	803190e <dir_next>
 8032678:	4603      	mov	r3, r0
 803267a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 803267c:	7dfb      	ldrb	r3, [r7, #23]
 803267e:	2b00      	cmp	r3, #0
 8032680:	d10b      	bne.n	803269a <dir_read+0x176>
	while (dp->sect) {
 8032682:	687b      	ldr	r3, [r7, #4]
 8032684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032686:	2b00      	cmp	r3, #0
 8032688:	f47f af5b 	bne.w	8032542 <dir_read+0x1e>
 803268c:	e006      	b.n	803269c <dir_read+0x178>
		if (res != FR_OK) break;
 803268e:	bf00      	nop
 8032690:	e004      	b.n	803269c <dir_read+0x178>
					break;
 8032692:	bf00      	nop
 8032694:	e002      	b.n	803269c <dir_read+0x178>
					break;
 8032696:	bf00      	nop
 8032698:	e000      	b.n	803269c <dir_read+0x178>
		if (res != FR_OK) break;
 803269a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 803269c:	7dfb      	ldrb	r3, [r7, #23]
 803269e:	2b00      	cmp	r3, #0
 80326a0:	d002      	beq.n	80326a8 <dir_read+0x184>
 80326a2:	687b      	ldr	r3, [r7, #4]
 80326a4:	2200      	movs	r2, #0
 80326a6:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 80326a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80326aa:	4618      	mov	r0, r3
 80326ac:	3718      	adds	r7, #24
 80326ae:	46bd      	mov	sp, r7
 80326b0:	bd80      	pop	{r7, pc}

080326b2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80326b2:	b590      	push	{r4, r7, lr}
 80326b4:	b089      	sub	sp, #36	; 0x24
 80326b6:	af00      	add	r7, sp, #0
 80326b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80326ba:	687b      	ldr	r3, [r7, #4]
 80326bc:	681b      	ldr	r3, [r3, #0]
 80326be:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80326c0:	2100      	movs	r1, #0
 80326c2:	6878      	ldr	r0, [r7, #4]
 80326c4:	f7ff f88f 	bl	80317e6 <dir_sdi>
 80326c8:	4603      	mov	r3, r0
 80326ca:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80326cc:	7ffb      	ldrb	r3, [r7, #31]
 80326ce:	2b00      	cmp	r3, #0
 80326d0:	d001      	beq.n	80326d6 <dir_find+0x24>
 80326d2:	7ffb      	ldrb	r3, [r7, #31]
 80326d4:	e112      	b.n	80328fc <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80326d6:	68fb      	ldr	r3, [r7, #12]
 80326d8:	781b      	ldrb	r3, [r3, #0]
 80326da:	2b04      	cmp	r3, #4
 80326dc:	d164      	bne.n	80327a8 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80326de:	68fb      	ldr	r3, [r7, #12]
 80326e0:	691b      	ldr	r3, [r3, #16]
 80326e2:	4618      	mov	r0, r3
 80326e4:	f7ff fcb2 	bl	803204c <xname_sum>
 80326e8:	4603      	mov	r3, r0
 80326ea:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80326ec:	e04f      	b.n	803278e <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80326ee:	68fb      	ldr	r3, [r7, #12]
 80326f0:	695b      	ldr	r3, [r3, #20]
 80326f2:	3324      	adds	r3, #36	; 0x24
 80326f4:	4618      	mov	r0, r3
 80326f6:	f7fd fda1 	bl	803023c <ld_word>
 80326fa:	4603      	mov	r3, r0
 80326fc:	461a      	mov	r2, r3
 80326fe:	893b      	ldrh	r3, [r7, #8]
 8032700:	4293      	cmp	r3, r2
 8032702:	d000      	beq.n	8032706 <dir_find+0x54>
 8032704:	e043      	b.n	803278e <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8032706:	68fb      	ldr	r3, [r7, #12]
 8032708:	695b      	ldr	r3, [r3, #20]
 803270a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 803270e:	76fb      	strb	r3, [r7, #27]
 8032710:	2340      	movs	r3, #64	; 0x40
 8032712:	617b      	str	r3, [r7, #20]
 8032714:	2300      	movs	r3, #0
 8032716:	613b      	str	r3, [r7, #16]
 8032718:	e029      	b.n	803276e <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 803271a:	697b      	ldr	r3, [r7, #20]
 803271c:	f003 031f 	and.w	r3, r3, #31
 8032720:	2b00      	cmp	r3, #0
 8032722:	d102      	bne.n	803272a <dir_find+0x78>
 8032724:	697b      	ldr	r3, [r7, #20]
 8032726:	3302      	adds	r3, #2
 8032728:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 803272a:	68fb      	ldr	r3, [r7, #12]
 803272c:	695a      	ldr	r2, [r3, #20]
 803272e:	697b      	ldr	r3, [r7, #20]
 8032730:	4413      	add	r3, r2
 8032732:	4618      	mov	r0, r3
 8032734:	f7fd fd82 	bl	803023c <ld_word>
 8032738:	4603      	mov	r3, r0
 803273a:	4618      	mov	r0, r3
 803273c:	f003 fa6e 	bl	8035c1c <ff_wtoupper>
 8032740:	4603      	mov	r3, r0
 8032742:	461c      	mov	r4, r3
 8032744:	68fb      	ldr	r3, [r7, #12]
 8032746:	691a      	ldr	r2, [r3, #16]
 8032748:	693b      	ldr	r3, [r7, #16]
 803274a:	005b      	lsls	r3, r3, #1
 803274c:	4413      	add	r3, r2
 803274e:	881b      	ldrh	r3, [r3, #0]
 8032750:	4618      	mov	r0, r3
 8032752:	f003 fa63 	bl	8035c1c <ff_wtoupper>
 8032756:	4603      	mov	r3, r0
 8032758:	429c      	cmp	r4, r3
 803275a:	d10c      	bne.n	8032776 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 803275c:	7efb      	ldrb	r3, [r7, #27]
 803275e:	3b01      	subs	r3, #1
 8032760:	76fb      	strb	r3, [r7, #27]
 8032762:	697b      	ldr	r3, [r7, #20]
 8032764:	3302      	adds	r3, #2
 8032766:	617b      	str	r3, [r7, #20]
 8032768:	693b      	ldr	r3, [r7, #16]
 803276a:	3301      	adds	r3, #1
 803276c:	613b      	str	r3, [r7, #16]
 803276e:	7efb      	ldrb	r3, [r7, #27]
 8032770:	2b00      	cmp	r3, #0
 8032772:	d1d2      	bne.n	803271a <dir_find+0x68>
 8032774:	e000      	b.n	8032778 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8032776:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8032778:	7efb      	ldrb	r3, [r7, #27]
 803277a:	2b00      	cmp	r3, #0
 803277c:	d107      	bne.n	803278e <dir_find+0xdc>
 803277e:	68fb      	ldr	r3, [r7, #12]
 8032780:	691a      	ldr	r2, [r3, #16]
 8032782:	693b      	ldr	r3, [r7, #16]
 8032784:	005b      	lsls	r3, r3, #1
 8032786:	4413      	add	r3, r2
 8032788:	881b      	ldrh	r3, [r3, #0]
 803278a:	2b00      	cmp	r3, #0
 803278c:	d009      	beq.n	80327a2 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 803278e:	2100      	movs	r1, #0
 8032790:	6878      	ldr	r0, [r7, #4]
 8032792:	f7ff fec7 	bl	8032524 <dir_read>
 8032796:	4603      	mov	r3, r0
 8032798:	77fb      	strb	r3, [r7, #31]
 803279a:	7ffb      	ldrb	r3, [r7, #31]
 803279c:	2b00      	cmp	r3, #0
 803279e:	d0a6      	beq.n	80326ee <dir_find+0x3c>
 80327a0:	e000      	b.n	80327a4 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80327a2:	bf00      	nop
		}
		return res;
 80327a4:	7ffb      	ldrb	r3, [r7, #31]
 80327a6:	e0a9      	b.n	80328fc <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80327a8:	23ff      	movs	r3, #255	; 0xff
 80327aa:	773b      	strb	r3, [r7, #28]
 80327ac:	7f3b      	ldrb	r3, [r7, #28]
 80327ae:	777b      	strb	r3, [r7, #29]
 80327b0:	687b      	ldr	r3, [r7, #4]
 80327b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80327b6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80327b8:	687b      	ldr	r3, [r7, #4]
 80327ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80327bc:	4619      	mov	r1, r3
 80327be:	68f8      	ldr	r0, [r7, #12]
 80327c0:	f7fe f980 	bl	8030ac4 <move_window>
 80327c4:	4603      	mov	r3, r0
 80327c6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 80327c8:	7ffb      	ldrb	r3, [r7, #31]
 80327ca:	2b00      	cmp	r3, #0
 80327cc:	f040 8090 	bne.w	80328f0 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 80327d0:	687b      	ldr	r3, [r7, #4]
 80327d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80327d4:	781b      	ldrb	r3, [r3, #0]
 80327d6:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80327d8:	7fbb      	ldrb	r3, [r7, #30]
 80327da:	2b00      	cmp	r3, #0
 80327dc:	d102      	bne.n	80327e4 <dir_find+0x132>
 80327de:	2304      	movs	r3, #4
 80327e0:	77fb      	strb	r3, [r7, #31]
 80327e2:	e08a      	b.n	80328fa <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80327e4:	687b      	ldr	r3, [r7, #4]
 80327e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80327e8:	330b      	adds	r3, #11
 80327ea:	781b      	ldrb	r3, [r3, #0]
 80327ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80327f0:	72fb      	strb	r3, [r7, #11]
 80327f2:	687b      	ldr	r3, [r7, #4]
 80327f4:	7afa      	ldrb	r2, [r7, #11]
 80327f6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80327f8:	7fbb      	ldrb	r3, [r7, #30]
 80327fa:	2be5      	cmp	r3, #229	; 0xe5
 80327fc:	d007      	beq.n	803280e <dir_find+0x15c>
 80327fe:	7afb      	ldrb	r3, [r7, #11]
 8032800:	f003 0308 	and.w	r3, r3, #8
 8032804:	2b00      	cmp	r3, #0
 8032806:	d009      	beq.n	803281c <dir_find+0x16a>
 8032808:	7afb      	ldrb	r3, [r7, #11]
 803280a:	2b0f      	cmp	r3, #15
 803280c:	d006      	beq.n	803281c <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 803280e:	23ff      	movs	r3, #255	; 0xff
 8032810:	777b      	strb	r3, [r7, #29]
 8032812:	687b      	ldr	r3, [r7, #4]
 8032814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8032818:	64da      	str	r2, [r3, #76]	; 0x4c
 803281a:	e05e      	b.n	80328da <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 803281c:	7afb      	ldrb	r3, [r7, #11]
 803281e:	2b0f      	cmp	r3, #15
 8032820:	d136      	bne.n	8032890 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8032822:	687b      	ldr	r3, [r7, #4]
 8032824:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8032828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803282c:	2b00      	cmp	r3, #0
 803282e:	d154      	bne.n	80328da <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8032830:	7fbb      	ldrb	r3, [r7, #30]
 8032832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8032836:	2b00      	cmp	r3, #0
 8032838:	d00d      	beq.n	8032856 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 803283a:	687b      	ldr	r3, [r7, #4]
 803283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803283e:	7b5b      	ldrb	r3, [r3, #13]
 8032840:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8032842:	7fbb      	ldrb	r3, [r7, #30]
 8032844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8032848:	77bb      	strb	r3, [r7, #30]
 803284a:	7fbb      	ldrb	r3, [r7, #30]
 803284c:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 803284e:	687b      	ldr	r3, [r7, #4]
 8032850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8032852:	687b      	ldr	r3, [r7, #4]
 8032854:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8032856:	7fba      	ldrb	r2, [r7, #30]
 8032858:	7f7b      	ldrb	r3, [r7, #29]
 803285a:	429a      	cmp	r2, r3
 803285c:	d115      	bne.n	803288a <dir_find+0x1d8>
 803285e:	687b      	ldr	r3, [r7, #4]
 8032860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032862:	330d      	adds	r3, #13
 8032864:	781b      	ldrb	r3, [r3, #0]
 8032866:	7f3a      	ldrb	r2, [r7, #28]
 8032868:	429a      	cmp	r2, r3
 803286a:	d10e      	bne.n	803288a <dir_find+0x1d8>
 803286c:	68fb      	ldr	r3, [r7, #12]
 803286e:	691a      	ldr	r2, [r3, #16]
 8032870:	687b      	ldr	r3, [r7, #4]
 8032872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032874:	4619      	mov	r1, r3
 8032876:	4610      	mov	r0, r2
 8032878:	f7ff f9ca 	bl	8031c10 <cmp_lfn>
 803287c:	4603      	mov	r3, r0
 803287e:	2b00      	cmp	r3, #0
 8032880:	d003      	beq.n	803288a <dir_find+0x1d8>
 8032882:	7f7b      	ldrb	r3, [r7, #29]
 8032884:	3b01      	subs	r3, #1
 8032886:	b2db      	uxtb	r3, r3
 8032888:	e000      	b.n	803288c <dir_find+0x1da>
 803288a:	23ff      	movs	r3, #255	; 0xff
 803288c:	777b      	strb	r3, [r7, #29]
 803288e:	e024      	b.n	80328da <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8032890:	7f7b      	ldrb	r3, [r7, #29]
 8032892:	2b00      	cmp	r3, #0
 8032894:	d109      	bne.n	80328aa <dir_find+0x1f8>
 8032896:	687b      	ldr	r3, [r7, #4]
 8032898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803289a:	4618      	mov	r0, r3
 803289c:	f7ff fb82 	bl	8031fa4 <sum_sfn>
 80328a0:	4603      	mov	r3, r0
 80328a2:	461a      	mov	r2, r3
 80328a4:	7f3b      	ldrb	r3, [r7, #28]
 80328a6:	4293      	cmp	r3, r2
 80328a8:	d024      	beq.n	80328f4 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80328aa:	687b      	ldr	r3, [r7, #4]
 80328ac:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80328b0:	f003 0301 	and.w	r3, r3, #1
 80328b4:	2b00      	cmp	r3, #0
 80328b6:	d10a      	bne.n	80328ce <dir_find+0x21c>
 80328b8:	687b      	ldr	r3, [r7, #4]
 80328ba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80328bc:	687b      	ldr	r3, [r7, #4]
 80328be:	3340      	adds	r3, #64	; 0x40
 80328c0:	220b      	movs	r2, #11
 80328c2:	4619      	mov	r1, r3
 80328c4:	f7fd fedb 	bl	803067e <mem_cmp>
 80328c8:	4603      	mov	r3, r0
 80328ca:	2b00      	cmp	r3, #0
 80328cc:	d014      	beq.n	80328f8 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80328ce:	23ff      	movs	r3, #255	; 0xff
 80328d0:	777b      	strb	r3, [r7, #29]
 80328d2:	687b      	ldr	r3, [r7, #4]
 80328d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80328d8:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80328da:	2100      	movs	r1, #0
 80328dc:	6878      	ldr	r0, [r7, #4]
 80328de:	f7ff f816 	bl	803190e <dir_next>
 80328e2:	4603      	mov	r3, r0
 80328e4:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 80328e6:	7ffb      	ldrb	r3, [r7, #31]
 80328e8:	2b00      	cmp	r3, #0
 80328ea:	f43f af65 	beq.w	80327b8 <dir_find+0x106>
 80328ee:	e004      	b.n	80328fa <dir_find+0x248>
		if (res != FR_OK) break;
 80328f0:	bf00      	nop
 80328f2:	e002      	b.n	80328fa <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80328f4:	bf00      	nop
 80328f6:	e000      	b.n	80328fa <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80328f8:	bf00      	nop

	return res;
 80328fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80328fc:	4618      	mov	r0, r3
 80328fe:	3724      	adds	r7, #36	; 0x24
 8032900:	46bd      	mov	sp, r7
 8032902:	bd90      	pop	{r4, r7, pc}

08032904 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8032904:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8032908:	b0a0      	sub	sp, #128	; 0x80
 803290a:	af00      	add	r7, sp, #0
 803290c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 803290e:	687b      	ldr	r3, [r7, #4]
 8032910:	681b      	ldr	r3, [r3, #0]
 8032912:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8032914:	687b      	ldr	r3, [r7, #4]
 8032916:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 803291a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 803291e:	2b00      	cmp	r3, #0
 8032920:	d001      	beq.n	8032926 <dir_register+0x22>
 8032922:	2306      	movs	r3, #6
 8032924:	e192      	b.n	8032c4c <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8032926:	2300      	movs	r3, #0
 8032928:	677b      	str	r3, [r7, #116]	; 0x74
 803292a:	e002      	b.n	8032932 <dir_register+0x2e>
 803292c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803292e:	3301      	adds	r3, #1
 8032930:	677b      	str	r3, [r7, #116]	; 0x74
 8032932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032934:	691a      	ldr	r2, [r3, #16]
 8032936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8032938:	005b      	lsls	r3, r3, #1
 803293a:	4413      	add	r3, r2
 803293c:	881b      	ldrh	r3, [r3, #0]
 803293e:	2b00      	cmp	r3, #0
 8032940:	d1f4      	bne.n	803292c <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8032942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032944:	781b      	ldrb	r3, [r3, #0]
 8032946:	2b04      	cmp	r3, #4
 8032948:	f040 80a3 	bne.w	8032a92 <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 803294c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803294e:	330e      	adds	r3, #14
 8032950:	4aa4      	ldr	r2, [pc, #656]	; (8032be4 <dir_register+0x2e0>)
 8032952:	fba2 2303 	umull	r2, r3, r2, r3
 8032956:	08db      	lsrs	r3, r3, #3
 8032958:	3302      	adds	r3, #2
 803295a:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 803295c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 803295e:	6878      	ldr	r0, [r7, #4]
 8032960:	f7ff f8bb 	bl	8031ada <dir_alloc>
 8032964:	4603      	mov	r3, r0
 8032966:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 803296a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 803296e:	2b00      	cmp	r3, #0
 8032970:	d002      	beq.n	8032978 <dir_register+0x74>
 8032972:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032976:	e169      	b.n	8032c4c <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8032978:	687b      	ldr	r3, [r7, #4]
 803297a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803297c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 803297e:	3b01      	subs	r3, #1
 8032980:	015b      	lsls	r3, r3, #5
 8032982:	1ad2      	subs	r2, r2, r3
 8032984:	687b      	ldr	r3, [r7, #4]
 8032986:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8032988:	687b      	ldr	r3, [r7, #4]
 803298a:	689b      	ldr	r3, [r3, #8]
 803298c:	2b00      	cmp	r3, #0
 803298e:	d076      	beq.n	8032a7e <dir_register+0x17a>
 8032990:	687b      	ldr	r3, [r7, #4]
 8032992:	79db      	ldrb	r3, [r3, #7]
 8032994:	f003 0304 	and.w	r3, r3, #4
 8032998:	2b00      	cmp	r3, #0
 803299a:	d070      	beq.n	8032a7e <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 803299c:	687b      	ldr	r3, [r7, #4]
 803299e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80329a2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80329a4:	8949      	ldrh	r1, [r1, #10]
 80329a6:	4608      	mov	r0, r1
 80329a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80329aa:	8989      	ldrh	r1, [r1, #12]
 80329ac:	fb00 f101 	mul.w	r1, r0, r1
 80329b0:	2000      	movs	r0, #0
 80329b2:	460c      	mov	r4, r1
 80329b4:	4605      	mov	r5, r0
 80329b6:	eb12 0804 	adds.w	r8, r2, r4
 80329ba:	eb43 0905 	adc.w	r9, r3, r5
 80329be:	687b      	ldr	r3, [r7, #4]
 80329c0:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 80329c4:	687b      	ldr	r3, [r7, #4]
 80329c6:	4618      	mov	r0, r3
 80329c8:	f7fe fcac 	bl	8031324 <fill_first_frag>
 80329cc:	4603      	mov	r3, r0
 80329ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80329d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80329d6:	2b00      	cmp	r3, #0
 80329d8:	d002      	beq.n	80329e0 <dir_register+0xdc>
 80329da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80329de:	e135      	b.n	8032c4c <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80329e0:	6878      	ldr	r0, [r7, #4]
 80329e2:	687b      	ldr	r3, [r7, #4]
 80329e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80329e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80329ea:	4619      	mov	r1, r3
 80329ec:	f7fe fcc9 	bl	8031382 <fill_last_frag>
 80329f0:	4603      	mov	r3, r0
 80329f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80329f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80329fa:	2b00      	cmp	r3, #0
 80329fc:	d002      	beq.n	8032a04 <dir_register+0x100>
 80329fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032a02:	e123      	b.n	8032c4c <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8032a04:	687a      	ldr	r2, [r7, #4]
 8032a06:	f107 0308 	add.w	r3, r7, #8
 8032a0a:	4611      	mov	r1, r2
 8032a0c:	4618      	mov	r0, r3
 8032a0e:	f7ff fc91 	bl	8032334 <load_obj_dir>
 8032a12:	4603      	mov	r3, r0
 8032a14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8032a18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032a1c:	2b00      	cmp	r3, #0
 8032a1e:	d002      	beq.n	8032a26 <dir_register+0x122>
 8032a20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032a24:	e112      	b.n	8032c4c <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8032a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032a28:	695b      	ldr	r3, [r3, #20]
 8032a2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8032a2e:	687b      	ldr	r3, [r7, #4]
 8032a30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8032a34:	4608      	mov	r0, r1
 8032a36:	f7fd fd5e 	bl	80304f6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8032a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032a3c:	695b      	ldr	r3, [r3, #20]
 8032a3e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8032a42:	687b      	ldr	r3, [r7, #4]
 8032a44:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8032a48:	4608      	mov	r0, r1
 8032a4a:	f7fd fd54 	bl	80304f6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8032a4e:	687b      	ldr	r3, [r7, #4]
 8032a50:	79da      	ldrb	r2, [r3, #7]
 8032a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032a54:	695b      	ldr	r3, [r3, #20]
 8032a56:	3321      	adds	r3, #33	; 0x21
 8032a58:	f042 0201 	orr.w	r2, r2, #1
 8032a5c:	b2d2      	uxtb	r2, r2
 8032a5e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8032a60:	f107 0308 	add.w	r3, r7, #8
 8032a64:	4618      	mov	r0, r3
 8032a66:	f7ff fc9b 	bl	80323a0 <store_xdir>
 8032a6a:	4603      	mov	r3, r0
 8032a6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8032a70:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032a74:	2b00      	cmp	r3, #0
 8032a76:	d002      	beq.n	8032a7e <dir_register+0x17a>
 8032a78:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032a7c:	e0e6      	b.n	8032c4c <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8032a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032a80:	695a      	ldr	r2, [r3, #20]
 8032a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032a84:	691b      	ldr	r3, [r3, #16]
 8032a86:	4619      	mov	r1, r3
 8032a88:	4610      	mov	r0, r2
 8032a8a:	f7ff fce4 	bl	8032456 <create_xdir>
		return FR_OK;
 8032a8e:	2300      	movs	r3, #0
 8032a90:	e0dc      	b.n	8032c4c <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8032a92:	687b      	ldr	r3, [r7, #4]
 8032a94:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8032a98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8032a9c:	220c      	movs	r2, #12
 8032a9e:	4618      	mov	r0, r3
 8032aa0:	f7fd fdb1 	bl	8030606 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8032aa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8032aa8:	f003 0301 	and.w	r3, r3, #1
 8032aac:	2b00      	cmp	r3, #0
 8032aae:	d033      	beq.n	8032b18 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8032ab0:	687b      	ldr	r3, [r7, #4]
 8032ab2:	2240      	movs	r2, #64	; 0x40
 8032ab4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8032ab8:	2301      	movs	r3, #1
 8032aba:	67bb      	str	r3, [r7, #120]	; 0x78
 8032abc:	e016      	b.n	8032aec <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8032abe:	687b      	ldr	r3, [r7, #4]
 8032ac0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8032ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032ac6:	691a      	ldr	r2, [r3, #16]
 8032ac8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8032acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8032ace:	f7ff f9db 	bl	8031e88 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8032ad2:	6878      	ldr	r0, [r7, #4]
 8032ad4:	f7ff fded 	bl	80326b2 <dir_find>
 8032ad8:	4603      	mov	r3, r0
 8032ada:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8032ade:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032ae2:	2b00      	cmp	r3, #0
 8032ae4:	d106      	bne.n	8032af4 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 8032ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8032ae8:	3301      	adds	r3, #1
 8032aea:	67bb      	str	r3, [r7, #120]	; 0x78
 8032aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8032aee:	2b63      	cmp	r3, #99	; 0x63
 8032af0:	d9e5      	bls.n	8032abe <dir_register+0x1ba>
 8032af2:	e000      	b.n	8032af6 <dir_register+0x1f2>
			if (res != FR_OK) break;
 8032af4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8032af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8032af8:	2b64      	cmp	r3, #100	; 0x64
 8032afa:	d101      	bne.n	8032b00 <dir_register+0x1fc>
 8032afc:	2307      	movs	r3, #7
 8032afe:	e0a5      	b.n	8032c4c <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8032b00:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032b04:	2b04      	cmp	r3, #4
 8032b06:	d002      	beq.n	8032b0e <dir_register+0x20a>
 8032b08:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032b0c:	e09e      	b.n	8032c4c <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8032b0e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8032b12:	687b      	ldr	r3, [r7, #4]
 8032b14:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8032b18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8032b1c:	f003 0302 	and.w	r3, r3, #2
 8032b20:	2b00      	cmp	r3, #0
 8032b22:	d007      	beq.n	8032b34 <dir_register+0x230>
 8032b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8032b26:	330c      	adds	r3, #12
 8032b28:	4a2f      	ldr	r2, [pc, #188]	; (8032be8 <dir_register+0x2e4>)
 8032b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8032b2e:	089b      	lsrs	r3, r3, #2
 8032b30:	3301      	adds	r3, #1
 8032b32:	e000      	b.n	8032b36 <dir_register+0x232>
 8032b34:	2301      	movs	r3, #1
 8032b36:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8032b38:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8032b3a:	6878      	ldr	r0, [r7, #4]
 8032b3c:	f7fe ffcd 	bl	8031ada <dir_alloc>
 8032b40:	4603      	mov	r3, r0
 8032b42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8032b46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032b4a:	2b00      	cmp	r3, #0
 8032b4c:	d14f      	bne.n	8032bee <dir_register+0x2ea>
 8032b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8032b50:	3b01      	subs	r3, #1
 8032b52:	673b      	str	r3, [r7, #112]	; 0x70
 8032b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8032b56:	2b00      	cmp	r3, #0
 8032b58:	d049      	beq.n	8032bee <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8032b5a:	687b      	ldr	r3, [r7, #4]
 8032b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8032b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8032b60:	015b      	lsls	r3, r3, #5
 8032b62:	1ad3      	subs	r3, r2, r3
 8032b64:	4619      	mov	r1, r3
 8032b66:	6878      	ldr	r0, [r7, #4]
 8032b68:	f7fe fe3d 	bl	80317e6 <dir_sdi>
 8032b6c:	4603      	mov	r3, r0
 8032b6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8032b72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032b76:	2b00      	cmp	r3, #0
 8032b78:	d139      	bne.n	8032bee <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8032b7a:	687b      	ldr	r3, [r7, #4]
 8032b7c:	3340      	adds	r3, #64	; 0x40
 8032b7e:	4618      	mov	r0, r3
 8032b80:	f7ff fa10 	bl	8031fa4 <sum_sfn>
 8032b84:	4603      	mov	r3, r0
 8032b86:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8032b8a:	687b      	ldr	r3, [r7, #4]
 8032b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032b8e:	4619      	mov	r1, r3
 8032b90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8032b92:	f7fd ff97 	bl	8030ac4 <move_window>
 8032b96:	4603      	mov	r3, r0
 8032b98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8032b9c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032ba0:	2b00      	cmp	r3, #0
 8032ba2:	d123      	bne.n	8032bec <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8032ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032ba6:	6918      	ldr	r0, [r3, #16]
 8032ba8:	687b      	ldr	r3, [r7, #4]
 8032baa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8032bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8032bae:	b2da      	uxtb	r2, r3
 8032bb0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8032bb4:	f7ff f900 	bl	8031db8 <put_lfn>
				fs->wflag = 1;
 8032bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032bba:	2201      	movs	r2, #1
 8032bbc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8032bbe:	2100      	movs	r1, #0
 8032bc0:	6878      	ldr	r0, [r7, #4]
 8032bc2:	f7fe fea4 	bl	803190e <dir_next>
 8032bc6:	4603      	mov	r3, r0
 8032bc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8032bcc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032bd0:	2b00      	cmp	r3, #0
 8032bd2:	d10c      	bne.n	8032bee <dir_register+0x2ea>
 8032bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8032bd6:	3b01      	subs	r3, #1
 8032bd8:	673b      	str	r3, [r7, #112]	; 0x70
 8032bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8032bdc:	2b00      	cmp	r3, #0
 8032bde:	d1d4      	bne.n	8032b8a <dir_register+0x286>
 8032be0:	e005      	b.n	8032bee <dir_register+0x2ea>
 8032be2:	bf00      	nop
 8032be4:	88888889 	.word	0x88888889
 8032be8:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8032bec:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8032bee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032bf2:	2b00      	cmp	r3, #0
 8032bf4:	d128      	bne.n	8032c48 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 8032bf6:	687b      	ldr	r3, [r7, #4]
 8032bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032bfa:	4619      	mov	r1, r3
 8032bfc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8032bfe:	f7fd ff61 	bl	8030ac4 <move_window>
 8032c02:	4603      	mov	r3, r0
 8032c04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8032c08:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8032c0c:	2b00      	cmp	r3, #0
 8032c0e:	d11b      	bne.n	8032c48 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8032c10:	687b      	ldr	r3, [r7, #4]
 8032c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032c14:	2220      	movs	r2, #32
 8032c16:	2100      	movs	r1, #0
 8032c18:	4618      	mov	r0, r3
 8032c1a:	f7fd fd15 	bl	8030648 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8032c1e:	687b      	ldr	r3, [r7, #4]
 8032c20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8032c22:	687b      	ldr	r3, [r7, #4]
 8032c24:	3340      	adds	r3, #64	; 0x40
 8032c26:	220b      	movs	r2, #11
 8032c28:	4619      	mov	r1, r3
 8032c2a:	f7fd fcec 	bl	8030606 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8032c2e:	687b      	ldr	r3, [r7, #4]
 8032c30:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8032c34:	687b      	ldr	r3, [r7, #4]
 8032c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032c38:	330c      	adds	r3, #12
 8032c3a:	f002 0218 	and.w	r2, r2, #24
 8032c3e:	b2d2      	uxtb	r2, r2
 8032c40:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8032c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8032c44:	2201      	movs	r2, #1
 8032c46:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8032c48:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8032c4c:	4618      	mov	r0, r3
 8032c4e:	3780      	adds	r7, #128	; 0x80
 8032c50:	46bd      	mov	sp, r7
 8032c52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8032c56:	bf00      	nop

08032c58 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8032c58:	b580      	push	{r7, lr}
 8032c5a:	b086      	sub	sp, #24
 8032c5c:	af00      	add	r7, sp, #0
 8032c5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8032c60:	687b      	ldr	r3, [r7, #4]
 8032c62:	681b      	ldr	r3, [r3, #0]
 8032c64:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8032c66:	687b      	ldr	r3, [r7, #4]
 8032c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032c6a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8032c6c:	687b      	ldr	r3, [r7, #4]
 8032c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8032c74:	d007      	beq.n	8032c86 <dir_remove+0x2e>
 8032c76:	687b      	ldr	r3, [r7, #4]
 8032c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032c7a:	4619      	mov	r1, r3
 8032c7c:	6878      	ldr	r0, [r7, #4]
 8032c7e:	f7fe fdb2 	bl	80317e6 <dir_sdi>
 8032c82:	4603      	mov	r3, r0
 8032c84:	e000      	b.n	8032c88 <dir_remove+0x30>
 8032c86:	2300      	movs	r3, #0
 8032c88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8032c8a:	7dfb      	ldrb	r3, [r7, #23]
 8032c8c:	2b00      	cmp	r3, #0
 8032c8e:	d136      	bne.n	8032cfe <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 8032c90:	687b      	ldr	r3, [r7, #4]
 8032c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032c94:	4619      	mov	r1, r3
 8032c96:	6938      	ldr	r0, [r7, #16]
 8032c98:	f7fd ff14 	bl	8030ac4 <move_window>
 8032c9c:	4603      	mov	r3, r0
 8032c9e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8032ca0:	7dfb      	ldrb	r3, [r7, #23]
 8032ca2:	2b00      	cmp	r3, #0
 8032ca4:	d123      	bne.n	8032cee <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8032ca6:	693b      	ldr	r3, [r7, #16]
 8032ca8:	781b      	ldrb	r3, [r3, #0]
 8032caa:	2b04      	cmp	r3, #4
 8032cac:	d109      	bne.n	8032cc2 <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 8032cae:	687b      	ldr	r3, [r7, #4]
 8032cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032cb2:	781a      	ldrb	r2, [r3, #0]
 8032cb4:	687b      	ldr	r3, [r7, #4]
 8032cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032cb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8032cbc:	b2d2      	uxtb	r2, r2
 8032cbe:	701a      	strb	r2, [r3, #0]
 8032cc0:	e003      	b.n	8032cca <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8032cc2:	687b      	ldr	r3, [r7, #4]
 8032cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032cc6:	22e5      	movs	r2, #229	; 0xe5
 8032cc8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8032cca:	693b      	ldr	r3, [r7, #16]
 8032ccc:	2201      	movs	r2, #1
 8032cce:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8032cd0:	687b      	ldr	r3, [r7, #4]
 8032cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032cd4:	68fa      	ldr	r2, [r7, #12]
 8032cd6:	429a      	cmp	r2, r3
 8032cd8:	d90b      	bls.n	8032cf2 <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 8032cda:	2100      	movs	r1, #0
 8032cdc:	6878      	ldr	r0, [r7, #4]
 8032cde:	f7fe fe16 	bl	803190e <dir_next>
 8032ce2:	4603      	mov	r3, r0
 8032ce4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8032ce6:	7dfb      	ldrb	r3, [r7, #23]
 8032ce8:	2b00      	cmp	r3, #0
 8032cea:	d0d1      	beq.n	8032c90 <dir_remove+0x38>
 8032cec:	e002      	b.n	8032cf4 <dir_remove+0x9c>
			if (res != FR_OK) break;
 8032cee:	bf00      	nop
 8032cf0:	e000      	b.n	8032cf4 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8032cf2:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8032cf4:	7dfb      	ldrb	r3, [r7, #23]
 8032cf6:	2b04      	cmp	r3, #4
 8032cf8:	d101      	bne.n	8032cfe <dir_remove+0xa6>
 8032cfa:	2302      	movs	r3, #2
 8032cfc:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8032cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8032d00:	4618      	mov	r0, r3
 8032d02:	3718      	adds	r7, #24
 8032d04:	46bd      	mov	sp, r7
 8032d06:	bd80      	pop	{r7, pc}

08032d08 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8032d08:	b5b0      	push	{r4, r5, r7, lr}
 8032d0a:	b088      	sub	sp, #32
 8032d0c:	af00      	add	r7, sp, #0
 8032d0e:	6078      	str	r0, [r7, #4]
 8032d10:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8032d12:	687b      	ldr	r3, [r7, #4]
 8032d14:	681b      	ldr	r3, [r3, #0]
 8032d16:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8032d18:	683b      	ldr	r3, [r7, #0]
 8032d1a:	2200      	movs	r2, #0
 8032d1c:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8032d1e:	687b      	ldr	r3, [r7, #4]
 8032d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032d22:	2b00      	cmp	r3, #0
 8032d24:	f000 80d8 	beq.w	8032ed8 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8032d28:	693b      	ldr	r3, [r7, #16]
 8032d2a:	781b      	ldrb	r3, [r3, #0]
 8032d2c:	2b04      	cmp	r3, #4
 8032d2e:	d106      	bne.n	8032d3e <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 8032d30:	693b      	ldr	r3, [r7, #16]
 8032d32:	695b      	ldr	r3, [r3, #20]
 8032d34:	6839      	ldr	r1, [r7, #0]
 8032d36:	4618      	mov	r0, r3
 8032d38:	f7ff f9bc 	bl	80320b4 <get_xdir_info>
		return;
 8032d3c:	e0cd      	b.n	8032eda <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8032d3e:	687b      	ldr	r3, [r7, #4]
 8032d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8032d46:	d032      	beq.n	8032dae <get_fileinfo+0xa6>
			i = j = 0;
 8032d48:	2300      	movs	r3, #0
 8032d4a:	61bb      	str	r3, [r7, #24]
 8032d4c:	69bb      	ldr	r3, [r7, #24]
 8032d4e:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8032d50:	e01b      	b.n	8032d8a <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8032d52:	89fb      	ldrh	r3, [r7, #14]
 8032d54:	2100      	movs	r1, #0
 8032d56:	4618      	mov	r0, r3
 8032d58:	f002 ff24 	bl	8035ba4 <ff_convert>
 8032d5c:	4603      	mov	r3, r0
 8032d5e:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8032d60:	89fb      	ldrh	r3, [r7, #14]
 8032d62:	2b00      	cmp	r3, #0
 8032d64:	d102      	bne.n	8032d6c <get_fileinfo+0x64>
 8032d66:	2300      	movs	r3, #0
 8032d68:	61fb      	str	r3, [r7, #28]
 8032d6a:	e01a      	b.n	8032da2 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8032d6c:	69fb      	ldr	r3, [r7, #28]
 8032d6e:	2bfe      	cmp	r3, #254	; 0xfe
 8032d70:	d902      	bls.n	8032d78 <get_fileinfo+0x70>
 8032d72:	2300      	movs	r3, #0
 8032d74:	61fb      	str	r3, [r7, #28]
 8032d76:	e014      	b.n	8032da2 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 8032d78:	69fb      	ldr	r3, [r7, #28]
 8032d7a:	1c5a      	adds	r2, r3, #1
 8032d7c:	61fa      	str	r2, [r7, #28]
 8032d7e:	89fa      	ldrh	r2, [r7, #14]
 8032d80:	b2d1      	uxtb	r1, r2
 8032d82:	683a      	ldr	r2, [r7, #0]
 8032d84:	4413      	add	r3, r2
 8032d86:	460a      	mov	r2, r1
 8032d88:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8032d8a:	693b      	ldr	r3, [r7, #16]
 8032d8c:	691a      	ldr	r2, [r3, #16]
 8032d8e:	69bb      	ldr	r3, [r7, #24]
 8032d90:	1c59      	adds	r1, r3, #1
 8032d92:	61b9      	str	r1, [r7, #24]
 8032d94:	005b      	lsls	r3, r3, #1
 8032d96:	4413      	add	r3, r2
 8032d98:	881b      	ldrh	r3, [r3, #0]
 8032d9a:	81fb      	strh	r3, [r7, #14]
 8032d9c:	89fb      	ldrh	r3, [r7, #14]
 8032d9e:	2b00      	cmp	r3, #0
 8032da0:	d1d7      	bne.n	8032d52 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8032da2:	683a      	ldr	r2, [r7, #0]
 8032da4:	69fb      	ldr	r3, [r7, #28]
 8032da6:	4413      	add	r3, r2
 8032da8:	331a      	adds	r3, #26
 8032daa:	2200      	movs	r2, #0
 8032dac:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8032dae:	2300      	movs	r3, #0
 8032db0:	61bb      	str	r3, [r7, #24]
 8032db2:	69bb      	ldr	r3, [r7, #24]
 8032db4:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8032db6:	683a      	ldr	r2, [r7, #0]
 8032db8:	69fb      	ldr	r3, [r7, #28]
 8032dba:	4413      	add	r3, r2
 8032dbc:	331a      	adds	r3, #26
 8032dbe:	781b      	ldrb	r3, [r3, #0]
 8032dc0:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8032dc2:	e04c      	b.n	8032e5e <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 8032dc4:	687b      	ldr	r3, [r7, #4]
 8032dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8032dc8:	69fb      	ldr	r3, [r7, #28]
 8032dca:	1c59      	adds	r1, r3, #1
 8032dcc:	61f9      	str	r1, [r7, #28]
 8032dce:	4413      	add	r3, r2
 8032dd0:	781b      	ldrb	r3, [r3, #0]
 8032dd2:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8032dd4:	7dfb      	ldrb	r3, [r7, #23]
 8032dd6:	2b20      	cmp	r3, #32
 8032dd8:	d100      	bne.n	8032ddc <get_fileinfo+0xd4>
 8032dda:	e040      	b.n	8032e5e <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8032ddc:	7dfb      	ldrb	r3, [r7, #23]
 8032dde:	2b05      	cmp	r3, #5
 8032de0:	d101      	bne.n	8032de6 <get_fileinfo+0xde>
 8032de2:	23e5      	movs	r3, #229	; 0xe5
 8032de4:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8032de6:	69fb      	ldr	r3, [r7, #28]
 8032de8:	2b09      	cmp	r3, #9
 8032dea:	d10f      	bne.n	8032e0c <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 8032dec:	89bb      	ldrh	r3, [r7, #12]
 8032dee:	2b00      	cmp	r3, #0
 8032df0:	d105      	bne.n	8032dfe <get_fileinfo+0xf6>
 8032df2:	683a      	ldr	r2, [r7, #0]
 8032df4:	69bb      	ldr	r3, [r7, #24]
 8032df6:	4413      	add	r3, r2
 8032df8:	331a      	adds	r3, #26
 8032dfa:	222e      	movs	r2, #46	; 0x2e
 8032dfc:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8032dfe:	69bb      	ldr	r3, [r7, #24]
 8032e00:	1c5a      	adds	r2, r3, #1
 8032e02:	61ba      	str	r2, [r7, #24]
 8032e04:	683a      	ldr	r2, [r7, #0]
 8032e06:	4413      	add	r3, r2
 8032e08:	222e      	movs	r2, #46	; 0x2e
 8032e0a:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8032e0c:	683a      	ldr	r2, [r7, #0]
 8032e0e:	69bb      	ldr	r3, [r7, #24]
 8032e10:	4413      	add	r3, r2
 8032e12:	330d      	adds	r3, #13
 8032e14:	7dfa      	ldrb	r2, [r7, #23]
 8032e16:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8032e18:	89bb      	ldrh	r3, [r7, #12]
 8032e1a:	2b00      	cmp	r3, #0
 8032e1c:	d11c      	bne.n	8032e58 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8032e1e:	7dfb      	ldrb	r3, [r7, #23]
 8032e20:	2b40      	cmp	r3, #64	; 0x40
 8032e22:	d913      	bls.n	8032e4c <get_fileinfo+0x144>
 8032e24:	7dfb      	ldrb	r3, [r7, #23]
 8032e26:	2b5a      	cmp	r3, #90	; 0x5a
 8032e28:	d810      	bhi.n	8032e4c <get_fileinfo+0x144>
 8032e2a:	687b      	ldr	r3, [r7, #4]
 8032e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032e2e:	330c      	adds	r3, #12
 8032e30:	781b      	ldrb	r3, [r3, #0]
 8032e32:	461a      	mov	r2, r3
 8032e34:	69fb      	ldr	r3, [r7, #28]
 8032e36:	2b08      	cmp	r3, #8
 8032e38:	d901      	bls.n	8032e3e <get_fileinfo+0x136>
 8032e3a:	2310      	movs	r3, #16
 8032e3c:	e000      	b.n	8032e40 <get_fileinfo+0x138>
 8032e3e:	2308      	movs	r3, #8
 8032e40:	4013      	ands	r3, r2
 8032e42:	2b00      	cmp	r3, #0
 8032e44:	d002      	beq.n	8032e4c <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 8032e46:	7dfb      	ldrb	r3, [r7, #23]
 8032e48:	3320      	adds	r3, #32
 8032e4a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8032e4c:	683a      	ldr	r2, [r7, #0]
 8032e4e:	69bb      	ldr	r3, [r7, #24]
 8032e50:	4413      	add	r3, r2
 8032e52:	331a      	adds	r3, #26
 8032e54:	7dfa      	ldrb	r2, [r7, #23]
 8032e56:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8032e58:	69bb      	ldr	r3, [r7, #24]
 8032e5a:	3301      	adds	r3, #1
 8032e5c:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8032e5e:	69fb      	ldr	r3, [r7, #28]
 8032e60:	2b0a      	cmp	r3, #10
 8032e62:	d9af      	bls.n	8032dc4 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 8032e64:	89bb      	ldrh	r3, [r7, #12]
 8032e66:	2b00      	cmp	r3, #0
 8032e68:	d10d      	bne.n	8032e86 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 8032e6a:	683a      	ldr	r2, [r7, #0]
 8032e6c:	69bb      	ldr	r3, [r7, #24]
 8032e6e:	4413      	add	r3, r2
 8032e70:	331a      	adds	r3, #26
 8032e72:	2200      	movs	r2, #0
 8032e74:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8032e76:	687b      	ldr	r3, [r7, #4]
 8032e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032e7a:	330c      	adds	r3, #12
 8032e7c:	781b      	ldrb	r3, [r3, #0]
 8032e7e:	2b00      	cmp	r3, #0
 8032e80:	d101      	bne.n	8032e86 <get_fileinfo+0x17e>
 8032e82:	2300      	movs	r3, #0
 8032e84:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8032e86:	683a      	ldr	r2, [r7, #0]
 8032e88:	69bb      	ldr	r3, [r7, #24]
 8032e8a:	4413      	add	r3, r2
 8032e8c:	330d      	adds	r3, #13
 8032e8e:	2200      	movs	r2, #0
 8032e90:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8032e92:	687b      	ldr	r3, [r7, #4]
 8032e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032e96:	7ada      	ldrb	r2, [r3, #11]
 8032e98:	683b      	ldr	r3, [r7, #0]
 8032e9a:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8032e9c:	687b      	ldr	r3, [r7, #4]
 8032e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032ea0:	331c      	adds	r3, #28
 8032ea2:	4618      	mov	r0, r3
 8032ea4:	f7fd f9e2 	bl	803026c <ld_dword>
 8032ea8:	4603      	mov	r3, r0
 8032eaa:	2200      	movs	r2, #0
 8032eac:	461c      	mov	r4, r3
 8032eae:	4615      	mov	r5, r2
 8032eb0:	683b      	ldr	r3, [r7, #0]
 8032eb2:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8032eb6:	687b      	ldr	r3, [r7, #4]
 8032eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032eba:	3316      	adds	r3, #22
 8032ebc:	4618      	mov	r0, r3
 8032ebe:	f7fd f9d5 	bl	803026c <ld_dword>
 8032ec2:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8032ec4:	68bb      	ldr	r3, [r7, #8]
 8032ec6:	b29a      	uxth	r2, r3
 8032ec8:	683b      	ldr	r3, [r7, #0]
 8032eca:	815a      	strh	r2, [r3, #10]
 8032ecc:	68bb      	ldr	r3, [r7, #8]
 8032ece:	0c1b      	lsrs	r3, r3, #16
 8032ed0:	b29a      	uxth	r2, r3
 8032ed2:	683b      	ldr	r3, [r7, #0]
 8032ed4:	811a      	strh	r2, [r3, #8]
 8032ed6:	e000      	b.n	8032eda <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8032ed8:	bf00      	nop
}
 8032eda:	3720      	adds	r7, #32
 8032edc:	46bd      	mov	sp, r7
 8032ede:	bdb0      	pop	{r4, r5, r7, pc}

08032ee0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8032ee0:	b580      	push	{r7, lr}
 8032ee2:	b08a      	sub	sp, #40	; 0x28
 8032ee4:	af00      	add	r7, sp, #0
 8032ee6:	6078      	str	r0, [r7, #4]
 8032ee8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8032eea:	683b      	ldr	r3, [r7, #0]
 8032eec:	681b      	ldr	r3, [r3, #0]
 8032eee:	613b      	str	r3, [r7, #16]
 8032ef0:	687b      	ldr	r3, [r7, #4]
 8032ef2:	681b      	ldr	r3, [r3, #0]
 8032ef4:	691b      	ldr	r3, [r3, #16]
 8032ef6:	60fb      	str	r3, [r7, #12]
 8032ef8:	2300      	movs	r3, #0
 8032efa:	617b      	str	r3, [r7, #20]
 8032efc:	697b      	ldr	r3, [r7, #20]
 8032efe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8032f00:	69bb      	ldr	r3, [r7, #24]
 8032f02:	1c5a      	adds	r2, r3, #1
 8032f04:	61ba      	str	r2, [r7, #24]
 8032f06:	693a      	ldr	r2, [r7, #16]
 8032f08:	4413      	add	r3, r2
 8032f0a:	781b      	ldrb	r3, [r3, #0]
 8032f0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8032f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f10:	2b1f      	cmp	r3, #31
 8032f12:	d940      	bls.n	8032f96 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8032f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f16:	2b2f      	cmp	r3, #47	; 0x2f
 8032f18:	d006      	beq.n	8032f28 <create_name+0x48>
 8032f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f1c:	2b5c      	cmp	r3, #92	; 0x5c
 8032f1e:	d110      	bne.n	8032f42 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8032f20:	e002      	b.n	8032f28 <create_name+0x48>
 8032f22:	69bb      	ldr	r3, [r7, #24]
 8032f24:	3301      	adds	r3, #1
 8032f26:	61bb      	str	r3, [r7, #24]
 8032f28:	693a      	ldr	r2, [r7, #16]
 8032f2a:	69bb      	ldr	r3, [r7, #24]
 8032f2c:	4413      	add	r3, r2
 8032f2e:	781b      	ldrb	r3, [r3, #0]
 8032f30:	2b2f      	cmp	r3, #47	; 0x2f
 8032f32:	d0f6      	beq.n	8032f22 <create_name+0x42>
 8032f34:	693a      	ldr	r2, [r7, #16]
 8032f36:	69bb      	ldr	r3, [r7, #24]
 8032f38:	4413      	add	r3, r2
 8032f3a:	781b      	ldrb	r3, [r3, #0]
 8032f3c:	2b5c      	cmp	r3, #92	; 0x5c
 8032f3e:	d0f0      	beq.n	8032f22 <create_name+0x42>
			break;
 8032f40:	e02a      	b.n	8032f98 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8032f42:	697b      	ldr	r3, [r7, #20]
 8032f44:	2bfe      	cmp	r3, #254	; 0xfe
 8032f46:	d901      	bls.n	8032f4c <create_name+0x6c>
 8032f48:	2306      	movs	r3, #6
 8032f4a:	e1ca      	b.n	80332e2 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8032f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f4e:	b2db      	uxtb	r3, r3
 8032f50:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8032f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f54:	2101      	movs	r1, #1
 8032f56:	4618      	mov	r0, r3
 8032f58:	f002 fe24 	bl	8035ba4 <ff_convert>
 8032f5c:	4603      	mov	r3, r0
 8032f5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8032f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f62:	2b00      	cmp	r3, #0
 8032f64:	d101      	bne.n	8032f6a <create_name+0x8a>
 8032f66:	2306      	movs	r3, #6
 8032f68:	e1bb      	b.n	80332e2 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8032f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8032f6e:	d809      	bhi.n	8032f84 <create_name+0xa4>
 8032f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032f72:	4619      	mov	r1, r3
 8032f74:	489e      	ldr	r0, [pc, #632]	; (80331f0 <create_name+0x310>)
 8032f76:	f7fd fba9 	bl	80306cc <chk_chr>
 8032f7a:	4603      	mov	r3, r0
 8032f7c:	2b00      	cmp	r3, #0
 8032f7e:	d001      	beq.n	8032f84 <create_name+0xa4>
 8032f80:	2306      	movs	r3, #6
 8032f82:	e1ae      	b.n	80332e2 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8032f84:	697b      	ldr	r3, [r7, #20]
 8032f86:	1c5a      	adds	r2, r3, #1
 8032f88:	617a      	str	r2, [r7, #20]
 8032f8a:	005b      	lsls	r3, r3, #1
 8032f8c:	68fa      	ldr	r2, [r7, #12]
 8032f8e:	4413      	add	r3, r2
 8032f90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8032f92:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8032f94:	e7b4      	b.n	8032f00 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8032f96:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8032f98:	693a      	ldr	r2, [r7, #16]
 8032f9a:	69bb      	ldr	r3, [r7, #24]
 8032f9c:	441a      	add	r2, r3
 8032f9e:	683b      	ldr	r3, [r7, #0]
 8032fa0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8032fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032fa4:	2b1f      	cmp	r3, #31
 8032fa6:	d801      	bhi.n	8032fac <create_name+0xcc>
 8032fa8:	2304      	movs	r3, #4
 8032faa:	e000      	b.n	8032fae <create_name+0xce>
 8032fac:	2300      	movs	r3, #0
 8032fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8032fb2:	697b      	ldr	r3, [r7, #20]
 8032fb4:	2b01      	cmp	r3, #1
 8032fb6:	d109      	bne.n	8032fcc <create_name+0xec>
 8032fb8:	697a      	ldr	r2, [r7, #20]
 8032fba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8032fbe:	4413      	add	r3, r2
 8032fc0:	005b      	lsls	r3, r3, #1
 8032fc2:	68fa      	ldr	r2, [r7, #12]
 8032fc4:	4413      	add	r3, r2
 8032fc6:	881b      	ldrh	r3, [r3, #0]
 8032fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8032fca:	d015      	beq.n	8032ff8 <create_name+0x118>
 8032fcc:	697b      	ldr	r3, [r7, #20]
 8032fce:	2b02      	cmp	r3, #2
 8032fd0:	d14d      	bne.n	803306e <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8032fd2:	697a      	ldr	r2, [r7, #20]
 8032fd4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8032fd8:	4413      	add	r3, r2
 8032fda:	005b      	lsls	r3, r3, #1
 8032fdc:	68fa      	ldr	r2, [r7, #12]
 8032fde:	4413      	add	r3, r2
 8032fe0:	881b      	ldrh	r3, [r3, #0]
 8032fe2:	2b2e      	cmp	r3, #46	; 0x2e
 8032fe4:	d143      	bne.n	803306e <create_name+0x18e>
 8032fe6:	697a      	ldr	r2, [r7, #20]
 8032fe8:	4b82      	ldr	r3, [pc, #520]	; (80331f4 <create_name+0x314>)
 8032fea:	4413      	add	r3, r2
 8032fec:	005b      	lsls	r3, r3, #1
 8032fee:	68fa      	ldr	r2, [r7, #12]
 8032ff0:	4413      	add	r3, r2
 8032ff2:	881b      	ldrh	r3, [r3, #0]
 8032ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8032ff6:	d13a      	bne.n	803306e <create_name+0x18e>
		lfn[di] = 0;
 8032ff8:	697b      	ldr	r3, [r7, #20]
 8032ffa:	005b      	lsls	r3, r3, #1
 8032ffc:	68fa      	ldr	r2, [r7, #12]
 8032ffe:	4413      	add	r3, r2
 8033000:	2200      	movs	r2, #0
 8033002:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8033004:	2300      	movs	r3, #0
 8033006:	623b      	str	r3, [r7, #32]
 8033008:	e00f      	b.n	803302a <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 803300a:	6a3a      	ldr	r2, [r7, #32]
 803300c:	697b      	ldr	r3, [r7, #20]
 803300e:	429a      	cmp	r2, r3
 8033010:	d201      	bcs.n	8033016 <create_name+0x136>
 8033012:	212e      	movs	r1, #46	; 0x2e
 8033014:	e000      	b.n	8033018 <create_name+0x138>
 8033016:	2120      	movs	r1, #32
 8033018:	687a      	ldr	r2, [r7, #4]
 803301a:	6a3b      	ldr	r3, [r7, #32]
 803301c:	4413      	add	r3, r2
 803301e:	3340      	adds	r3, #64	; 0x40
 8033020:	460a      	mov	r2, r1
 8033022:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8033024:	6a3b      	ldr	r3, [r7, #32]
 8033026:	3301      	adds	r3, #1
 8033028:	623b      	str	r3, [r7, #32]
 803302a:	6a3b      	ldr	r3, [r7, #32]
 803302c:	2b0a      	cmp	r3, #10
 803302e:	d9ec      	bls.n	803300a <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8033030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8033034:	f043 0320 	orr.w	r3, r3, #32
 8033038:	b2d9      	uxtb	r1, r3
 803303a:	687a      	ldr	r2, [r7, #4]
 803303c:	6a3b      	ldr	r3, [r7, #32]
 803303e:	4413      	add	r3, r2
 8033040:	3340      	adds	r3, #64	; 0x40
 8033042:	460a      	mov	r2, r1
 8033044:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8033046:	2300      	movs	r3, #0
 8033048:	e14b      	b.n	80332e2 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 803304a:	697a      	ldr	r2, [r7, #20]
 803304c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8033050:	4413      	add	r3, r2
 8033052:	005b      	lsls	r3, r3, #1
 8033054:	68fa      	ldr	r2, [r7, #12]
 8033056:	4413      	add	r3, r2
 8033058:	881b      	ldrh	r3, [r3, #0]
 803305a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 803305c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803305e:	2b20      	cmp	r3, #32
 8033060:	d002      	beq.n	8033068 <create_name+0x188>
 8033062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033064:	2b2e      	cmp	r3, #46	; 0x2e
 8033066:	d106      	bne.n	8033076 <create_name+0x196>
		di--;
 8033068:	697b      	ldr	r3, [r7, #20]
 803306a:	3b01      	subs	r3, #1
 803306c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 803306e:	697b      	ldr	r3, [r7, #20]
 8033070:	2b00      	cmp	r3, #0
 8033072:	d1ea      	bne.n	803304a <create_name+0x16a>
 8033074:	e000      	b.n	8033078 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 8033076:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8033078:	697b      	ldr	r3, [r7, #20]
 803307a:	005b      	lsls	r3, r3, #1
 803307c:	68fa      	ldr	r2, [r7, #12]
 803307e:	4413      	add	r3, r2
 8033080:	2200      	movs	r2, #0
 8033082:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8033084:	697b      	ldr	r3, [r7, #20]
 8033086:	2b00      	cmp	r3, #0
 8033088:	d101      	bne.n	803308e <create_name+0x1ae>
 803308a:	2306      	movs	r3, #6
 803308c:	e129      	b.n	80332e2 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 803308e:	687b      	ldr	r3, [r7, #4]
 8033090:	3340      	adds	r3, #64	; 0x40
 8033092:	220b      	movs	r2, #11
 8033094:	2120      	movs	r1, #32
 8033096:	4618      	mov	r0, r3
 8033098:	f7fd fad6 	bl	8030648 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 803309c:	2300      	movs	r3, #0
 803309e:	61bb      	str	r3, [r7, #24]
 80330a0:	e002      	b.n	80330a8 <create_name+0x1c8>
 80330a2:	69bb      	ldr	r3, [r7, #24]
 80330a4:	3301      	adds	r3, #1
 80330a6:	61bb      	str	r3, [r7, #24]
 80330a8:	69bb      	ldr	r3, [r7, #24]
 80330aa:	005b      	lsls	r3, r3, #1
 80330ac:	68fa      	ldr	r2, [r7, #12]
 80330ae:	4413      	add	r3, r2
 80330b0:	881b      	ldrh	r3, [r3, #0]
 80330b2:	2b20      	cmp	r3, #32
 80330b4:	d0f5      	beq.n	80330a2 <create_name+0x1c2>
 80330b6:	69bb      	ldr	r3, [r7, #24]
 80330b8:	005b      	lsls	r3, r3, #1
 80330ba:	68fa      	ldr	r2, [r7, #12]
 80330bc:	4413      	add	r3, r2
 80330be:	881b      	ldrh	r3, [r3, #0]
 80330c0:	2b2e      	cmp	r3, #46	; 0x2e
 80330c2:	d0ee      	beq.n	80330a2 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 80330c4:	69bb      	ldr	r3, [r7, #24]
 80330c6:	2b00      	cmp	r3, #0
 80330c8:	d009      	beq.n	80330de <create_name+0x1fe>
 80330ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80330ce:	f043 0303 	orr.w	r3, r3, #3
 80330d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80330d6:	e002      	b.n	80330de <create_name+0x1fe>
 80330d8:	697b      	ldr	r3, [r7, #20]
 80330da:	3b01      	subs	r3, #1
 80330dc:	617b      	str	r3, [r7, #20]
 80330de:	697b      	ldr	r3, [r7, #20]
 80330e0:	2b00      	cmp	r3, #0
 80330e2:	d009      	beq.n	80330f8 <create_name+0x218>
 80330e4:	697a      	ldr	r2, [r7, #20]
 80330e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80330ea:	4413      	add	r3, r2
 80330ec:	005b      	lsls	r3, r3, #1
 80330ee:	68fa      	ldr	r2, [r7, #12]
 80330f0:	4413      	add	r3, r2
 80330f2:	881b      	ldrh	r3, [r3, #0]
 80330f4:	2b2e      	cmp	r3, #46	; 0x2e
 80330f6:	d1ef      	bne.n	80330d8 <create_name+0x1f8>

	i = b = 0; ni = 8;
 80330f8:	2300      	movs	r3, #0
 80330fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80330fe:	2300      	movs	r3, #0
 8033100:	623b      	str	r3, [r7, #32]
 8033102:	2308      	movs	r3, #8
 8033104:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8033106:	69bb      	ldr	r3, [r7, #24]
 8033108:	1c5a      	adds	r2, r3, #1
 803310a:	61ba      	str	r2, [r7, #24]
 803310c:	005b      	lsls	r3, r3, #1
 803310e:	68fa      	ldr	r2, [r7, #12]
 8033110:	4413      	add	r3, r2
 8033112:	881b      	ldrh	r3, [r3, #0]
 8033114:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8033116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033118:	2b00      	cmp	r3, #0
 803311a:	f000 8098 	beq.w	803324e <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 803311e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033120:	2b20      	cmp	r3, #32
 8033122:	d006      	beq.n	8033132 <create_name+0x252>
 8033124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033126:	2b2e      	cmp	r3, #46	; 0x2e
 8033128:	d10a      	bne.n	8033140 <create_name+0x260>
 803312a:	69ba      	ldr	r2, [r7, #24]
 803312c:	697b      	ldr	r3, [r7, #20]
 803312e:	429a      	cmp	r2, r3
 8033130:	d006      	beq.n	8033140 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 8033132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8033136:	f043 0303 	orr.w	r3, r3, #3
 803313a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 803313e:	e085      	b.n	803324c <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8033140:	6a3a      	ldr	r2, [r7, #32]
 8033142:	69fb      	ldr	r3, [r7, #28]
 8033144:	429a      	cmp	r2, r3
 8033146:	d203      	bcs.n	8033150 <create_name+0x270>
 8033148:	69ba      	ldr	r2, [r7, #24]
 803314a:	697b      	ldr	r3, [r7, #20]
 803314c:	429a      	cmp	r2, r3
 803314e:	d123      	bne.n	8033198 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8033150:	69fb      	ldr	r3, [r7, #28]
 8033152:	2b0b      	cmp	r3, #11
 8033154:	d106      	bne.n	8033164 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 8033156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 803315a:	f043 0303 	orr.w	r3, r3, #3
 803315e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8033162:	e077      	b.n	8033254 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8033164:	69ba      	ldr	r2, [r7, #24]
 8033166:	697b      	ldr	r3, [r7, #20]
 8033168:	429a      	cmp	r2, r3
 803316a:	d005      	beq.n	8033178 <create_name+0x298>
 803316c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8033170:	f043 0303 	orr.w	r3, r3, #3
 8033174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8033178:	69ba      	ldr	r2, [r7, #24]
 803317a:	697b      	ldr	r3, [r7, #20]
 803317c:	429a      	cmp	r2, r3
 803317e:	d868      	bhi.n	8033252 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8033180:	697b      	ldr	r3, [r7, #20]
 8033182:	61bb      	str	r3, [r7, #24]
 8033184:	2308      	movs	r3, #8
 8033186:	623b      	str	r3, [r7, #32]
 8033188:	230b      	movs	r3, #11
 803318a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 803318c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8033190:	009b      	lsls	r3, r3, #2
 8033192:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8033196:	e059      	b.n	803324c <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8033198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803319a:	2b7f      	cmp	r3, #127	; 0x7f
 803319c:	d914      	bls.n	80331c8 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 803319e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80331a0:	2100      	movs	r1, #0
 80331a2:	4618      	mov	r0, r3
 80331a4:	f002 fcfe 	bl	8035ba4 <ff_convert>
 80331a8:	4603      	mov	r3, r0
 80331aa:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80331ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80331ae:	2b00      	cmp	r3, #0
 80331b0:	d004      	beq.n	80331bc <create_name+0x2dc>
 80331b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80331b4:	3b80      	subs	r3, #128	; 0x80
 80331b6:	4a10      	ldr	r2, [pc, #64]	; (80331f8 <create_name+0x318>)
 80331b8:	5cd3      	ldrb	r3, [r2, r3]
 80331ba:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80331bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80331c0:	f043 0302 	orr.w	r3, r3, #2
 80331c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80331c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80331ca:	2b00      	cmp	r3, #0
 80331cc:	d007      	beq.n	80331de <create_name+0x2fe>
 80331ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80331d0:	4619      	mov	r1, r3
 80331d2:	480a      	ldr	r0, [pc, #40]	; (80331fc <create_name+0x31c>)
 80331d4:	f7fd fa7a 	bl	80306cc <chk_chr>
 80331d8:	4603      	mov	r3, r0
 80331da:	2b00      	cmp	r3, #0
 80331dc:	d010      	beq.n	8033200 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80331de:	235f      	movs	r3, #95	; 0x5f
 80331e0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80331e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80331e6:	f043 0303 	orr.w	r3, r3, #3
 80331ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80331ee:	e023      	b.n	8033238 <create_name+0x358>
 80331f0:	0803b7dc 	.word	0x0803b7dc
 80331f4:	7ffffffe 	.word	0x7ffffffe
 80331f8:	0803b8e4 	.word	0x0803b8e4
 80331fc:	0803b7e8 	.word	0x0803b7e8
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8033200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033202:	2b40      	cmp	r3, #64	; 0x40
 8033204:	d909      	bls.n	803321a <create_name+0x33a>
 8033206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033208:	2b5a      	cmp	r3, #90	; 0x5a
 803320a:	d806      	bhi.n	803321a <create_name+0x33a>
					b |= 2;
 803320c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8033210:	f043 0302 	orr.w	r3, r3, #2
 8033214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8033218:	e00e      	b.n	8033238 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 803321a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803321c:	2b60      	cmp	r3, #96	; 0x60
 803321e:	d90b      	bls.n	8033238 <create_name+0x358>
 8033220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033222:	2b7a      	cmp	r3, #122	; 0x7a
 8033224:	d808      	bhi.n	8033238 <create_name+0x358>
						b |= 1; w -= 0x20;
 8033226:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 803322a:	f043 0301 	orr.w	r3, r3, #1
 803322e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8033232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033234:	3b20      	subs	r3, #32
 8033236:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8033238:	6a3b      	ldr	r3, [r7, #32]
 803323a:	1c5a      	adds	r2, r3, #1
 803323c:	623a      	str	r2, [r7, #32]
 803323e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8033240:	b2d1      	uxtb	r1, r2
 8033242:	687a      	ldr	r2, [r7, #4]
 8033244:	4413      	add	r3, r2
 8033246:	460a      	mov	r2, r1
 8033248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 803324c:	e75b      	b.n	8033106 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 803324e:	bf00      	nop
 8033250:	e000      	b.n	8033254 <create_name+0x374>
			if (si > di) break;			/* No extension */
 8033252:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8033254:	687b      	ldr	r3, [r7, #4]
 8033256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 803325a:	2be5      	cmp	r3, #229	; 0xe5
 803325c:	d103      	bne.n	8033266 <create_name+0x386>
 803325e:	687b      	ldr	r3, [r7, #4]
 8033260:	2205      	movs	r2, #5
 8033262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8033266:	69fb      	ldr	r3, [r7, #28]
 8033268:	2b08      	cmp	r3, #8
 803326a:	d104      	bne.n	8033276 <create_name+0x396>
 803326c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8033270:	009b      	lsls	r3, r3, #2
 8033272:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8033276:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 803327a:	f003 030c 	and.w	r3, r3, #12
 803327e:	2b0c      	cmp	r3, #12
 8033280:	d005      	beq.n	803328e <create_name+0x3ae>
 8033282:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8033286:	f003 0303 	and.w	r3, r3, #3
 803328a:	2b03      	cmp	r3, #3
 803328c:	d105      	bne.n	803329a <create_name+0x3ba>
 803328e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8033292:	f043 0302 	orr.w	r3, r3, #2
 8033296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 803329a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 803329e:	f003 0302 	and.w	r3, r3, #2
 80332a2:	2b00      	cmp	r3, #0
 80332a4:	d117      	bne.n	80332d6 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80332a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80332aa:	f003 0303 	and.w	r3, r3, #3
 80332ae:	2b01      	cmp	r3, #1
 80332b0:	d105      	bne.n	80332be <create_name+0x3de>
 80332b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80332b6:	f043 0310 	orr.w	r3, r3, #16
 80332ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80332be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80332c2:	f003 030c 	and.w	r3, r3, #12
 80332c6:	2b04      	cmp	r3, #4
 80332c8:	d105      	bne.n	80332d6 <create_name+0x3f6>
 80332ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80332ce:	f043 0308 	orr.w	r3, r3, #8
 80332d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80332d6:	687b      	ldr	r3, [r7, #4]
 80332d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80332dc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 80332e0:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80332e2:	4618      	mov	r0, r3
 80332e4:	3728      	adds	r7, #40	; 0x28
 80332e6:	46bd      	mov	sp, r7
 80332e8:	bd80      	pop	{r7, pc}
 80332ea:	bf00      	nop

080332ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80332ec:	b5b0      	push	{r4, r5, r7, lr}
 80332ee:	b09a      	sub	sp, #104	; 0x68
 80332f0:	af00      	add	r7, sp, #0
 80332f2:	6078      	str	r0, [r7, #4]
 80332f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80332f6:	687b      	ldr	r3, [r7, #4]
 80332f8:	663b      	str	r3, [r7, #96]	; 0x60
	FATFS *fs = obj->fs;
 80332fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80332fc:	681b      	ldr	r3, [r3, #0]
 80332fe:	65fb      	str	r3, [r7, #92]	; 0x5c


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8033300:	683b      	ldr	r3, [r7, #0]
 8033302:	781b      	ldrb	r3, [r3, #0]
 8033304:	2b2f      	cmp	r3, #47	; 0x2f
 8033306:	d00b      	beq.n	8033320 <follow_path+0x34>
 8033308:	683b      	ldr	r3, [r7, #0]
 803330a:	781b      	ldrb	r3, [r3, #0]
 803330c:	2b5c      	cmp	r3, #92	; 0x5c
 803330e:	d007      	beq.n	8033320 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8033310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8033314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033316:	609a      	str	r2, [r3, #8]
 8033318:	e00d      	b.n	8033336 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 803331a:	683b      	ldr	r3, [r7, #0]
 803331c:	3301      	adds	r3, #1
 803331e:	603b      	str	r3, [r7, #0]
 8033320:	683b      	ldr	r3, [r7, #0]
 8033322:	781b      	ldrb	r3, [r3, #0]
 8033324:	2b2f      	cmp	r3, #47	; 0x2f
 8033326:	d0f8      	beq.n	803331a <follow_path+0x2e>
 8033328:	683b      	ldr	r3, [r7, #0]
 803332a:	781b      	ldrb	r3, [r3, #0]
 803332c:	2b5c      	cmp	r3, #92	; 0x5c
 803332e:	d0f4      	beq.n	803331a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8033330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033332:	2200      	movs	r2, #0
 8033334:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8033336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033338:	2200      	movs	r2, #0
 803333a:	61da      	str	r2, [r3, #28]
#if _FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
 803333c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803333e:	781b      	ldrb	r3, [r3, #0]
 8033340:	2b04      	cmp	r3, #4
 8033342:	d135      	bne.n	80333b0 <follow_path+0xc4>
 8033344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033346:	689b      	ldr	r3, [r3, #8]
 8033348:	2b00      	cmp	r3, #0
 803334a:	d031      	beq.n	80333b0 <follow_path+0xc4>
		DIR dj;

		obj->c_scl = fs->cdc_scl;
 803334c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803334e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8033350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033352:	621a      	str	r2, [r3, #32]
		obj->c_size = fs->cdc_size;
 8033354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8033358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803335a:	625a      	str	r2, [r3, #36]	; 0x24
		obj->c_ofs = fs->cdc_ofs;
 803335c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803335e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8033360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033362:	629a      	str	r2, [r3, #40]	; 0x28
		res = load_obj_dir(&dj, obj);
 8033364:	f107 0308 	add.w	r3, r7, #8
 8033368:	6e39      	ldr	r1, [r7, #96]	; 0x60
 803336a:	4618      	mov	r0, r3
 803336c:	f7fe ffe2 	bl	8032334 <load_obj_dir>
 8033370:	4603      	mov	r3, r0
 8033372:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res != FR_OK) return res;
 8033376:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 803337a:	2b00      	cmp	r3, #0
 803337c:	d002      	beq.n	8033384 <follow_path+0x98>
 803337e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033382:	e0c6      	b.n	8033512 <follow_path+0x226>
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 8033384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033386:	695b      	ldr	r3, [r3, #20]
 8033388:	3338      	adds	r3, #56	; 0x38
 803338a:	4618      	mov	r0, r3
 803338c:	f7fc ff6e 	bl	803026c <ld_dword>
 8033390:	4603      	mov	r3, r0
 8033392:	2200      	movs	r2, #0
 8033394:	461c      	mov	r4, r3
 8033396:	4615      	mov	r5, r2
 8033398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803339a:	e9c3 4504 	strd	r4, r5, [r3, #16]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 803339e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80333a0:	695b      	ldr	r3, [r3, #20]
 80333a2:	3321      	adds	r3, #33	; 0x21
 80333a4:	781b      	ldrb	r3, [r3, #0]
 80333a6:	f003 0302 	and.w	r3, r3, #2
 80333aa:	b2da      	uxtb	r2, r3
 80333ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80333ae:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80333b0:	683b      	ldr	r3, [r7, #0]
 80333b2:	781b      	ldrb	r3, [r3, #0]
 80333b4:	2b1f      	cmp	r3, #31
 80333b6:	d80b      	bhi.n	80333d0 <follow_path+0xe4>
		dp->fn[NSFLAG] = NS_NONAME;
 80333b8:	687b      	ldr	r3, [r7, #4]
 80333ba:	2280      	movs	r2, #128	; 0x80
 80333bc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 80333c0:	2100      	movs	r1, #0
 80333c2:	6878      	ldr	r0, [r7, #4]
 80333c4:	f7fe fa0f 	bl	80317e6 <dir_sdi>
 80333c8:	4603      	mov	r3, r0
 80333ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80333ce:	e09e      	b.n	803350e <follow_path+0x222>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80333d0:	463b      	mov	r3, r7
 80333d2:	4619      	mov	r1, r3
 80333d4:	6878      	ldr	r0, [r7, #4]
 80333d6:	f7ff fd83 	bl	8032ee0 <create_name>
 80333da:	4603      	mov	r3, r0
 80333dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (res != FR_OK) break;
 80333e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80333e4:	2b00      	cmp	r3, #0
 80333e6:	f040 808d 	bne.w	8033504 <follow_path+0x218>
			res = dir_find(dp);				/* Find an object with the segment name */
 80333ea:	6878      	ldr	r0, [r7, #4]
 80333ec:	f7ff f961 	bl	80326b2 <dir_find>
 80333f0:	4603      	mov	r3, r0
 80333f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			ns = dp->fn[NSFLAG];
 80333f6:	687b      	ldr	r3, [r7, #4]
 80333f8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80333fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			if (res != FR_OK) {				/* Failed to find the object */
 8033400:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033404:	2b00      	cmp	r3, #0
 8033406:	d021      	beq.n	803344c <follow_path+0x160>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8033408:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 803340c:	2b04      	cmp	r3, #4
 803340e:	d17b      	bne.n	8033508 <follow_path+0x21c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8033410:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8033414:	f003 0320 	and.w	r3, r3, #32
 8033418:	2b00      	cmp	r3, #0
 803341a:	d00d      	beq.n	8033438 <follow_path+0x14c>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 803341c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8033420:	f003 0304 	and.w	r3, r3, #4
 8033424:	2b00      	cmp	r3, #0
 8033426:	d06b      	beq.n	8033500 <follow_path+0x214>
						dp->fn[NSFLAG] = NS_NONAME;
 8033428:	687b      	ldr	r3, [r7, #4]
 803342a:	2280      	movs	r2, #128	; 0x80
 803342c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
						res = FR_OK;
 8033430:	2300      	movs	r3, #0
 8033432:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8033436:	e067      	b.n	8033508 <follow_path+0x21c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8033438:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 803343c:	f003 0304 	and.w	r3, r3, #4
 8033440:	2b00      	cmp	r3, #0
 8033442:	d161      	bne.n	8033508 <follow_path+0x21c>
 8033444:	2305      	movs	r3, #5
 8033446:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 803344a:	e05d      	b.n	8033508 <follow_path+0x21c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 803344c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8033450:	f003 0304 	and.w	r3, r3, #4
 8033454:	2b00      	cmp	r3, #0
 8033456:	d159      	bne.n	803350c <follow_path+0x220>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8033458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803345a:	799b      	ldrb	r3, [r3, #6]
 803345c:	f003 0310 	and.w	r3, r3, #16
 8033460:	2b00      	cmp	r3, #0
 8033462:	d103      	bne.n	803346c <follow_path+0x180>
				res = FR_NO_PATH; break;
 8033464:	2305      	movs	r3, #5
 8033466:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 803346a:	e050      	b.n	803350e <follow_path+0x222>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 803346c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803346e:	781b      	ldrb	r3, [r3, #0]
 8033470:	2b04      	cmp	r3, #4
 8033472:	d130      	bne.n	80334d6 <follow_path+0x1ea>
				obj->c_scl = obj->sclust;
 8033474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033476:	689a      	ldr	r2, [r3, #8]
 8033478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803347a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 803347c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803347e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8033482:	4613      	mov	r3, r2
 8033484:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8033488:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 803348a:	79d2      	ldrb	r2, [r2, #7]
 803348c:	431a      	orrs	r2, r3
 803348e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033490:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8033492:	687b      	ldr	r3, [r7, #4]
 8033494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8033496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033498:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 803349a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803349c:	695b      	ldr	r3, [r3, #20]
 803349e:	3334      	adds	r3, #52	; 0x34
 80334a0:	4618      	mov	r0, r3
 80334a2:	f7fc fee3 	bl	803026c <ld_dword>
 80334a6:	4602      	mov	r2, r0
 80334a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80334aa:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80334ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80334ae:	695b      	ldr	r3, [r3, #20]
 80334b0:	3321      	adds	r3, #33	; 0x21
 80334b2:	781b      	ldrb	r3, [r3, #0]
 80334b4:	f003 0302 	and.w	r3, r3, #2
 80334b8:	b2da      	uxtb	r2, r3
 80334ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80334bc:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80334be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80334c0:	695b      	ldr	r3, [r3, #20]
 80334c2:	3338      	adds	r3, #56	; 0x38
 80334c4:	4618      	mov	r0, r3
 80334c6:	f7fc fef4 	bl	80302b2 <ld_qword>
 80334ca:	4602      	mov	r2, r0
 80334cc:	460b      	mov	r3, r1
 80334ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80334d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80334d4:	e77c      	b.n	80333d0 <follow_path+0xe4>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80334d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80334d8:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80334dc:	687b      	ldr	r3, [r7, #4]
 80334de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80334e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80334e2:	8992      	ldrh	r2, [r2, #12]
 80334e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80334e8:	fb00 f202 	mul.w	r2, r0, r2
 80334ec:	1a9b      	subs	r3, r3, r2
 80334ee:	440b      	add	r3, r1
 80334f0:	4619      	mov	r1, r3
 80334f2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80334f4:	f7fe fb4d 	bl	8031b92 <ld_clust>
 80334f8:	4602      	mov	r2, r0
 80334fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80334fc:	609a      	str	r2, [r3, #8]
 80334fe:	e767      	b.n	80333d0 <follow_path+0xe4>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8033500:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8033502:	e765      	b.n	80333d0 <follow_path+0xe4>
			if (res != FR_OK) break;
 8033504:	bf00      	nop
 8033506:	e002      	b.n	803350e <follow_path+0x222>
				break;
 8033508:	bf00      	nop
 803350a:	e000      	b.n	803350e <follow_path+0x222>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 803350c:	bf00      	nop
			}
		}
	}

	return res;
 803350e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8033512:	4618      	mov	r0, r3
 8033514:	3768      	adds	r7, #104	; 0x68
 8033516:	46bd      	mov	sp, r7
 8033518:	bdb0      	pop	{r4, r5, r7, pc}

0803351a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 803351a:	b480      	push	{r7}
 803351c:	b087      	sub	sp, #28
 803351e:	af00      	add	r7, sp, #0
 8033520:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8033522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8033526:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8033528:	687b      	ldr	r3, [r7, #4]
 803352a:	681b      	ldr	r3, [r3, #0]
 803352c:	2b00      	cmp	r3, #0
 803352e:	d031      	beq.n	8033594 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8033530:	687b      	ldr	r3, [r7, #4]
 8033532:	681b      	ldr	r3, [r3, #0]
 8033534:	617b      	str	r3, [r7, #20]
 8033536:	e002      	b.n	803353e <get_ldnumber+0x24>
 8033538:	697b      	ldr	r3, [r7, #20]
 803353a:	3301      	adds	r3, #1
 803353c:	617b      	str	r3, [r7, #20]
 803353e:	697b      	ldr	r3, [r7, #20]
 8033540:	781b      	ldrb	r3, [r3, #0]
 8033542:	2b1f      	cmp	r3, #31
 8033544:	d903      	bls.n	803354e <get_ldnumber+0x34>
 8033546:	697b      	ldr	r3, [r7, #20]
 8033548:	781b      	ldrb	r3, [r3, #0]
 803354a:	2b3a      	cmp	r3, #58	; 0x3a
 803354c:	d1f4      	bne.n	8033538 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 803354e:	697b      	ldr	r3, [r7, #20]
 8033550:	781b      	ldrb	r3, [r3, #0]
 8033552:	2b3a      	cmp	r3, #58	; 0x3a
 8033554:	d11c      	bne.n	8033590 <get_ldnumber+0x76>
			tp = *path;
 8033556:	687b      	ldr	r3, [r7, #4]
 8033558:	681b      	ldr	r3, [r3, #0]
 803355a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 803355c:	68fb      	ldr	r3, [r7, #12]
 803355e:	1c5a      	adds	r2, r3, #1
 8033560:	60fa      	str	r2, [r7, #12]
 8033562:	781b      	ldrb	r3, [r3, #0]
 8033564:	3b30      	subs	r3, #48	; 0x30
 8033566:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8033568:	68bb      	ldr	r3, [r7, #8]
 803356a:	2b09      	cmp	r3, #9
 803356c:	d80e      	bhi.n	803358c <get_ldnumber+0x72>
 803356e:	68fa      	ldr	r2, [r7, #12]
 8033570:	697b      	ldr	r3, [r7, #20]
 8033572:	429a      	cmp	r2, r3
 8033574:	d10a      	bne.n	803358c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8033576:	68bb      	ldr	r3, [r7, #8]
 8033578:	2b00      	cmp	r3, #0
 803357a:	d107      	bne.n	803358c <get_ldnumber+0x72>
					vol = (int)i;
 803357c:	68bb      	ldr	r3, [r7, #8]
 803357e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8033580:	697b      	ldr	r3, [r7, #20]
 8033582:	3301      	adds	r3, #1
 8033584:	617b      	str	r3, [r7, #20]
 8033586:	687b      	ldr	r3, [r7, #4]
 8033588:	697a      	ldr	r2, [r7, #20]
 803358a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 803358c:	693b      	ldr	r3, [r7, #16]
 803358e:	e002      	b.n	8033596 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8033590:	2300      	movs	r3, #0
 8033592:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8033594:	693b      	ldr	r3, [r7, #16]
}
 8033596:	4618      	mov	r0, r3
 8033598:	371c      	adds	r7, #28
 803359a:	46bd      	mov	sp, r7
 803359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80335a0:	4770      	bx	lr
	...

080335a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80335a4:	b580      	push	{r7, lr}
 80335a6:	b082      	sub	sp, #8
 80335a8:	af00      	add	r7, sp, #0
 80335aa:	6078      	str	r0, [r7, #4]
 80335ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80335ae:	687b      	ldr	r3, [r7, #4]
 80335b0:	2200      	movs	r2, #0
 80335b2:	70da      	strb	r2, [r3, #3]
 80335b4:	687b      	ldr	r3, [r7, #4]
 80335b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80335ba:	64da      	str	r2, [r3, #76]	; 0x4c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80335bc:	6839      	ldr	r1, [r7, #0]
 80335be:	6878      	ldr	r0, [r7, #4]
 80335c0:	f7fd fa80 	bl	8030ac4 <move_window>
 80335c4:	4603      	mov	r3, r0
 80335c6:	2b00      	cmp	r3, #0
 80335c8:	d001      	beq.n	80335ce <check_fs+0x2a>
 80335ca:	2304      	movs	r3, #4
 80335cc:	e044      	b.n	8033658 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80335ce:	687b      	ldr	r3, [r7, #4]
 80335d0:	3350      	adds	r3, #80	; 0x50
 80335d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80335d6:	4618      	mov	r0, r3
 80335d8:	f7fc fe30 	bl	803023c <ld_word>
 80335dc:	4603      	mov	r3, r0
 80335de:	461a      	mov	r2, r3
 80335e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80335e4:	429a      	cmp	r2, r3
 80335e6:	d001      	beq.n	80335ec <check_fs+0x48>
 80335e8:	2303      	movs	r3, #3
 80335ea:	e035      	b.n	8033658 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80335ec:	687b      	ldr	r3, [r7, #4]
 80335ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80335f2:	2be9      	cmp	r3, #233	; 0xe9
 80335f4:	d009      	beq.n	803360a <check_fs+0x66>
 80335f6:	687b      	ldr	r3, [r7, #4]
 80335f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80335fc:	2beb      	cmp	r3, #235	; 0xeb
 80335fe:	d11e      	bne.n	803363e <check_fs+0x9a>
 8033600:	687b      	ldr	r3, [r7, #4]
 8033602:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8033606:	2b90      	cmp	r3, #144	; 0x90
 8033608:	d119      	bne.n	803363e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 803360a:	687b      	ldr	r3, [r7, #4]
 803360c:	3350      	adds	r3, #80	; 0x50
 803360e:	3336      	adds	r3, #54	; 0x36
 8033610:	4618      	mov	r0, r3
 8033612:	f7fc fe2b 	bl	803026c <ld_dword>
 8033616:	4603      	mov	r3, r0
 8033618:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 803361c:	4a10      	ldr	r2, [pc, #64]	; (8033660 <check_fs+0xbc>)
 803361e:	4293      	cmp	r3, r2
 8033620:	d101      	bne.n	8033626 <check_fs+0x82>
 8033622:	2300      	movs	r3, #0
 8033624:	e018      	b.n	8033658 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8033626:	687b      	ldr	r3, [r7, #4]
 8033628:	3350      	adds	r3, #80	; 0x50
 803362a:	3352      	adds	r3, #82	; 0x52
 803362c:	4618      	mov	r0, r3
 803362e:	f7fc fe1d 	bl	803026c <ld_dword>
 8033632:	4603      	mov	r3, r0
 8033634:	4a0b      	ldr	r2, [pc, #44]	; (8033664 <check_fs+0xc0>)
 8033636:	4293      	cmp	r3, r2
 8033638:	d101      	bne.n	803363e <check_fs+0x9a>
 803363a:	2300      	movs	r3, #0
 803363c:	e00c      	b.n	8033658 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 803363e:	687b      	ldr	r3, [r7, #4]
 8033640:	3350      	adds	r3, #80	; 0x50
 8033642:	220b      	movs	r2, #11
 8033644:	4908      	ldr	r1, [pc, #32]	; (8033668 <check_fs+0xc4>)
 8033646:	4618      	mov	r0, r3
 8033648:	f7fd f819 	bl	803067e <mem_cmp>
 803364c:	4603      	mov	r3, r0
 803364e:	2b00      	cmp	r3, #0
 8033650:	d101      	bne.n	8033656 <check_fs+0xb2>
 8033652:	2301      	movs	r3, #1
 8033654:	e000      	b.n	8033658 <check_fs+0xb4>
#endif
	return 2;
 8033656:	2302      	movs	r3, #2
}
 8033658:	4618      	mov	r0, r3
 803365a:	3708      	adds	r7, #8
 803365c:	46bd      	mov	sp, r7
 803365e:	bd80      	pop	{r7, pc}
 8033660:	00544146 	.word	0x00544146
 8033664:	33544146 	.word	0x33544146
 8033668:	0803b7f0 	.word	0x0803b7f0

0803366c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 803366c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8033670:	b09c      	sub	sp, #112	; 0x70
 8033672:	af00      	add	r7, sp, #0
 8033674:	61f8      	str	r0, [r7, #28]
 8033676:	61b9      	str	r1, [r7, #24]
 8033678:	4613      	mov	r3, r2
 803367a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 803367c:	69bb      	ldr	r3, [r7, #24]
 803367e:	2200      	movs	r2, #0
 8033680:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8033682:	69f8      	ldr	r0, [r7, #28]
 8033684:	f7ff ff49 	bl	803351a <get_ldnumber>
 8033688:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 803368a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803368c:	2b00      	cmp	r3, #0
 803368e:	da01      	bge.n	8033694 <find_volume+0x28>
 8033690:	230b      	movs	r3, #11
 8033692:	e37b      	b.n	8033d8c <find_volume+0x720>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8033694:	4aa2      	ldr	r2, [pc, #648]	; (8033920 <find_volume+0x2b4>)
 8033696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8033698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 803369c:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 803369e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80336a0:	2b00      	cmp	r3, #0
 80336a2:	d101      	bne.n	80336a8 <find_volume+0x3c>
 80336a4:	230c      	movs	r3, #12
 80336a6:	e371      	b.n	8033d8c <find_volume+0x720>

	ENTER_FF(fs);						/* Lock the volume */
 80336a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80336aa:	f7fd f82a 	bl	8030702 <lock_fs>
 80336ae:	4603      	mov	r3, r0
 80336b0:	2b00      	cmp	r3, #0
 80336b2:	d101      	bne.n	80336b8 <find_volume+0x4c>
 80336b4:	230f      	movs	r3, #15
 80336b6:	e369      	b.n	8033d8c <find_volume+0x720>
	*rfs = fs;							/* Return pointer to the file system object */
 80336b8:	69bb      	ldr	r3, [r7, #24]
 80336ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80336bc:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80336be:	7dfb      	ldrb	r3, [r7, #23]
 80336c0:	f023 0301 	bic.w	r3, r3, #1
 80336c4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80336c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80336c8:	781b      	ldrb	r3, [r3, #0]
 80336ca:	2b00      	cmp	r3, #0
 80336cc:	d01a      	beq.n	8033704 <find_volume+0x98>
		stat = disk_status(fs->drv);
 80336ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80336d0:	785b      	ldrb	r3, [r3, #1]
 80336d2:	4618      	mov	r0, r3
 80336d4:	f7fc fd14 	bl	8030100 <disk_status>
 80336d8:	4603      	mov	r3, r0
 80336da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80336de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80336e2:	f003 0301 	and.w	r3, r3, #1
 80336e6:	2b00      	cmp	r3, #0
 80336e8:	d10c      	bne.n	8033704 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80336ea:	7dfb      	ldrb	r3, [r7, #23]
 80336ec:	2b00      	cmp	r3, #0
 80336ee:	d007      	beq.n	8033700 <find_volume+0x94>
 80336f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80336f4:	f003 0304 	and.w	r3, r3, #4
 80336f8:	2b00      	cmp	r3, #0
 80336fa:	d001      	beq.n	8033700 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 80336fc:	230a      	movs	r3, #10
 80336fe:	e345      	b.n	8033d8c <find_volume+0x720>
			}
			return FR_OK;				/* The file system object is valid */
 8033700:	2300      	movs	r3, #0
 8033702:	e343      	b.n	8033d8c <find_volume+0x720>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8033704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033706:	2200      	movs	r2, #0
 8033708:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 803370a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803370c:	b2da      	uxtb	r2, r3
 803370e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033710:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8033712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033714:	785b      	ldrb	r3, [r3, #1]
 8033716:	4618      	mov	r0, r3
 8033718:	f7fc fd0c 	bl	8030134 <disk_initialize>
 803371c:	4603      	mov	r3, r0
 803371e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8033722:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8033726:	f003 0301 	and.w	r3, r3, #1
 803372a:	2b00      	cmp	r3, #0
 803372c:	d001      	beq.n	8033732 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 803372e:	2303      	movs	r3, #3
 8033730:	e32c      	b.n	8033d8c <find_volume+0x720>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8033732:	7dfb      	ldrb	r3, [r7, #23]
 8033734:	2b00      	cmp	r3, #0
 8033736:	d007      	beq.n	8033748 <find_volume+0xdc>
 8033738:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 803373c:	f003 0304 	and.w	r3, r3, #4
 8033740:	2b00      	cmp	r3, #0
 8033742:	d001      	beq.n	8033748 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8033744:	230a      	movs	r3, #10
 8033746:	e321      	b.n	8033d8c <find_volume+0x720>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8033748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803374a:	7858      	ldrb	r0, [r3, #1]
 803374c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803374e:	330c      	adds	r3, #12
 8033750:	461a      	mov	r2, r3
 8033752:	2102      	movs	r1, #2
 8033754:	f7fc fd54 	bl	8030200 <disk_ioctl>
 8033758:	4603      	mov	r3, r0
 803375a:	2b00      	cmp	r3, #0
 803375c:	d001      	beq.n	8033762 <find_volume+0xf6>
 803375e:	2301      	movs	r3, #1
 8033760:	e314      	b.n	8033d8c <find_volume+0x720>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8033762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033764:	899b      	ldrh	r3, [r3, #12]
 8033766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803376a:	d80d      	bhi.n	8033788 <find_volume+0x11c>
 803376c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803376e:	899b      	ldrh	r3, [r3, #12]
 8033770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8033774:	d308      	bcc.n	8033788 <find_volume+0x11c>
 8033776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033778:	899b      	ldrh	r3, [r3, #12]
 803377a:	461a      	mov	r2, r3
 803377c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803377e:	899b      	ldrh	r3, [r3, #12]
 8033780:	3b01      	subs	r3, #1
 8033782:	4013      	ands	r3, r2
 8033784:	2b00      	cmp	r3, #0
 8033786:	d001      	beq.n	803378c <find_volume+0x120>
 8033788:	2301      	movs	r3, #1
 803378a:	e2ff      	b.n	8033d8c <find_volume+0x720>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 803378c:	2300      	movs	r3, #0
 803378e:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8033790:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8033792:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8033794:	f7ff ff06 	bl	80335a4 <check_fs>
 8033798:	4603      	mov	r3, r0
 803379a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 803379e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80337a2:	2b02      	cmp	r3, #2
 80337a4:	d14d      	bne.n	8033842 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80337a6:	2300      	movs	r3, #0
 80337a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80337aa:	e020      	b.n	80337ee <find_volume+0x182>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80337ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80337ae:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80337b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80337b4:	011b      	lsls	r3, r3, #4
 80337b6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80337ba:	4413      	add	r3, r2
 80337bc:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80337be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80337c0:	3304      	adds	r3, #4
 80337c2:	781b      	ldrb	r3, [r3, #0]
 80337c4:	2b00      	cmp	r3, #0
 80337c6:	d006      	beq.n	80337d6 <find_volume+0x16a>
 80337c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80337ca:	3308      	adds	r3, #8
 80337cc:	4618      	mov	r0, r3
 80337ce:	f7fc fd4d 	bl	803026c <ld_dword>
 80337d2:	4602      	mov	r2, r0
 80337d4:	e000      	b.n	80337d8 <find_volume+0x16c>
 80337d6:	2200      	movs	r2, #0
 80337d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80337da:	009b      	lsls	r3, r3, #2
 80337dc:	3360      	adds	r3, #96	; 0x60
 80337de:	f107 0110 	add.w	r1, r7, #16
 80337e2:	440b      	add	r3, r1
 80337e4:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80337e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80337ea:	3301      	adds	r3, #1
 80337ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80337ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80337f0:	2b03      	cmp	r3, #3
 80337f2:	d9db      	bls.n	80337ac <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80337f4:	2300      	movs	r3, #0
 80337f6:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 80337f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80337fa:	2b00      	cmp	r3, #0
 80337fc:	d002      	beq.n	8033804 <find_volume+0x198>
 80337fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033800:	3b01      	subs	r3, #1
 8033802:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8033804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033806:	009b      	lsls	r3, r3, #2
 8033808:	3360      	adds	r3, #96	; 0x60
 803380a:	f107 0210 	add.w	r2, r7, #16
 803380e:	4413      	add	r3, r2
 8033810:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8033814:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8033816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8033818:	2b00      	cmp	r3, #0
 803381a:	d005      	beq.n	8033828 <find_volume+0x1bc>
 803381c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 803381e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8033820:	f7ff fec0 	bl	80335a4 <check_fs>
 8033824:	4603      	mov	r3, r0
 8033826:	e000      	b.n	803382a <find_volume+0x1be>
 8033828:	2303      	movs	r3, #3
 803382a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 803382e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8033832:	2b01      	cmp	r3, #1
 8033834:	d905      	bls.n	8033842 <find_volume+0x1d6>
 8033836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033838:	3301      	adds	r3, #1
 803383a:	65bb      	str	r3, [r7, #88]	; 0x58
 803383c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803383e:	2b03      	cmp	r3, #3
 8033840:	d9e0      	bls.n	8033804 <find_volume+0x198>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8033842:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8033846:	2b04      	cmp	r3, #4
 8033848:	d101      	bne.n	803384e <find_volume+0x1e2>
 803384a:	2301      	movs	r3, #1
 803384c:	e29e      	b.n	8033d8c <find_volume+0x720>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 803384e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8033852:	2b01      	cmp	r3, #1
 8033854:	d901      	bls.n	803385a <find_volume+0x1ee>
 8033856:	230d      	movs	r3, #13
 8033858:	e298      	b.n	8033d8c <find_volume+0x720>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 803385a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 803385e:	2b01      	cmp	r3, #1
 8033860:	f040 8100 	bne.w	8033a64 <find_volume+0x3f8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8033864:	230b      	movs	r3, #11
 8033866:	65bb      	str	r3, [r7, #88]	; 0x58
 8033868:	e002      	b.n	8033870 <find_volume+0x204>
 803386a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803386c:	3301      	adds	r3, #1
 803386e:	65bb      	str	r3, [r7, #88]	; 0x58
 8033870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033872:	2b3f      	cmp	r3, #63	; 0x3f
 8033874:	d806      	bhi.n	8033884 <find_volume+0x218>
 8033876:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803387a:	4413      	add	r3, r2
 803387c:	3350      	adds	r3, #80	; 0x50
 803387e:	781b      	ldrb	r3, [r3, #0]
 8033880:	2b00      	cmp	r3, #0
 8033882:	d0f2      	beq.n	803386a <find_volume+0x1fe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8033884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033886:	2b3f      	cmp	r3, #63	; 0x3f
 8033888:	d801      	bhi.n	803388e <find_volume+0x222>
 803388a:	230d      	movs	r3, #13
 803388c:	e27e      	b.n	8033d8c <find_volume+0x720>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 803388e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033890:	3350      	adds	r3, #80	; 0x50
 8033892:	3368      	adds	r3, #104	; 0x68
 8033894:	4618      	mov	r0, r3
 8033896:	f7fc fcd1 	bl	803023c <ld_word>
 803389a:	4603      	mov	r3, r0
 803389c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80338a0:	d001      	beq.n	80338a6 <find_volume+0x23a>
 80338a2:	230d      	movs	r3, #13
 80338a4:	e272      	b.n	8033d8c <find_volume+0x720>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80338a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80338a8:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80338ac:	461a      	mov	r2, r3
 80338ae:	2301      	movs	r3, #1
 80338b0:	4093      	lsls	r3, r2
 80338b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80338b4:	8992      	ldrh	r2, [r2, #12]
 80338b6:	4293      	cmp	r3, r2
 80338b8:	d001      	beq.n	80338be <find_volume+0x252>
			return FR_NO_FILESYSTEM;
 80338ba:	230d      	movs	r3, #13
 80338bc:	e266      	b.n	8033d8c <find_volume+0x720>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80338be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80338c0:	3350      	adds	r3, #80	; 0x50
 80338c2:	3348      	adds	r3, #72	; 0x48
 80338c4:	4618      	mov	r0, r3
 80338c6:	f7fc fcf4 	bl	80302b2 <ld_qword>
 80338ca:	4602      	mov	r2, r0
 80338cc:	460b      	mov	r3, r1
 80338ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80338d0:	2000      	movs	r0, #0
 80338d2:	60b9      	str	r1, [r7, #8]
 80338d4:	60f8      	str	r0, [r7, #12]
 80338d6:	68b9      	ldr	r1, [r7, #8]
 80338d8:	1851      	adds	r1, r2, r1
 80338da:	6039      	str	r1, [r7, #0]
 80338dc:	68f9      	ldr	r1, [r7, #12]
 80338de:	eb43 0101 	adc.w	r1, r3, r1
 80338e2:	6079      	str	r1, [r7, #4]
 80338e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80338e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80338ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80338f0:	2b01      	cmp	r3, #1
 80338f2:	d301      	bcc.n	80338f8 <find_volume+0x28c>
 80338f4:	230d      	movs	r3, #13
 80338f6:	e249      	b.n	8033d8c <find_volume+0x720>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80338f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80338fa:	3350      	adds	r3, #80	; 0x50
 80338fc:	3354      	adds	r3, #84	; 0x54
 80338fe:	4618      	mov	r0, r3
 8033900:	f7fc fcb4 	bl	803026c <ld_dword>
 8033904:	4602      	mov	r2, r0
 8033906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033908:	639a      	str	r2, [r3, #56]	; 0x38

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 803390a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803390c:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 8033910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033912:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8033914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033916:	789b      	ldrb	r3, [r3, #2]
 8033918:	2b01      	cmp	r3, #1
 803391a:	d003      	beq.n	8033924 <find_volume+0x2b8>
 803391c:	230d      	movs	r3, #13
 803391e:	e235      	b.n	8033d8c <find_volume+0x720>
 8033920:	24002bf8 	.word	0x24002bf8

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8033924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033926:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 803392a:	461a      	mov	r2, r3
 803392c:	2301      	movs	r3, #1
 803392e:	4093      	lsls	r3, r2
 8033930:	b29a      	uxth	r2, r3
 8033932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033934:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8033936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033938:	895b      	ldrh	r3, [r3, #10]
 803393a:	2b00      	cmp	r3, #0
 803393c:	d101      	bne.n	8033942 <find_volume+0x2d6>
 803393e:	230d      	movs	r3, #13
 8033940:	e224      	b.n	8033d8c <find_volume+0x720>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8033942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033944:	3350      	adds	r3, #80	; 0x50
 8033946:	335c      	adds	r3, #92	; 0x5c
 8033948:	4618      	mov	r0, r3
 803394a:	f7fc fc8f 	bl	803026c <ld_dword>
 803394e:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8033950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033952:	4a9a      	ldr	r2, [pc, #616]	; (8033bbc <find_volume+0x550>)
 8033954:	4293      	cmp	r3, r2
 8033956:	d901      	bls.n	803395c <find_volume+0x2f0>
 8033958:	230d      	movs	r3, #13
 803395a:	e217      	b.n	8033d8c <find_volume+0x720>
		fs->n_fatent = nclst + 2;
 803395c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803395e:	1c9a      	adds	r2, r3, #2
 8033960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033962:	635a      	str	r2, [r3, #52]	; 0x34

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8033964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033966:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8033968:	63da      	str	r2, [r3, #60]	; 0x3c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 803396a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803396c:	3350      	adds	r3, #80	; 0x50
 803396e:	3358      	adds	r3, #88	; 0x58
 8033970:	4618      	mov	r0, r3
 8033972:	f7fc fc7b 	bl	803026c <ld_dword>
 8033976:	4602      	mov	r2, r0
 8033978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 803397a:	441a      	add	r2, r3
 803397c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803397e:	649a      	str	r2, [r3, #72]	; 0x48
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8033980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033982:	3350      	adds	r3, #80	; 0x50
 8033984:	3350      	adds	r3, #80	; 0x50
 8033986:	4618      	mov	r0, r3
 8033988:	f7fc fc70 	bl	803026c <ld_dword>
 803398c:	4602      	mov	r2, r0
 803398e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8033990:	441a      	add	r2, r3
 8033992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033994:	641a      	str	r2, [r3, #64]	; 0x40
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8033996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803399a:	2200      	movs	r2, #0
 803399c:	469a      	mov	sl, r3
 803399e:	4693      	mov	fp, r2
 80339a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80339a2:	895b      	ldrh	r3, [r3, #10]
 80339a4:	461a      	mov	r2, r3
 80339a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80339a8:	fb02 f303 	mul.w	r3, r2, r3
 80339ac:	2200      	movs	r2, #0
 80339ae:	4698      	mov	r8, r3
 80339b0:	4691      	mov	r9, r2
 80339b2:	eb1a 0408 	adds.w	r4, sl, r8
 80339b6:	eb4b 0509 	adc.w	r5, fp, r9
 80339ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80339be:	42a2      	cmp	r2, r4
 80339c0:	41ab      	sbcs	r3, r5
 80339c2:	d201      	bcs.n	80339c8 <find_volume+0x35c>
 80339c4:	230d      	movs	r3, #13
 80339c6:	e1e1      	b.n	8033d8c <find_volume+0x720>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 80339c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80339ca:	3350      	adds	r3, #80	; 0x50
 80339cc:	3360      	adds	r3, #96	; 0x60
 80339ce:	4618      	mov	r0, r3
 80339d0:	f7fc fc4c 	bl	803026c <ld_dword>
 80339d4:	4602      	mov	r2, r0
 80339d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80339d8:	645a      	str	r2, [r3, #68]	; 0x44

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80339da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80339dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80339de:	4619      	mov	r1, r3
 80339e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80339e2:	f7fd f90d 	bl	8030c00 <clust2sect>
 80339e6:	4603      	mov	r3, r0
 80339e8:	4619      	mov	r1, r3
 80339ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80339ec:	f7fd f86a 	bl	8030ac4 <move_window>
 80339f0:	4603      	mov	r3, r0
 80339f2:	2b00      	cmp	r3, #0
 80339f4:	d001      	beq.n	80339fa <find_volume+0x38e>
 80339f6:	2301      	movs	r3, #1
 80339f8:	e1c8      	b.n	8033d8c <find_volume+0x720>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80339fa:	2300      	movs	r3, #0
 80339fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80339fe:	e015      	b.n	8033a2c <find_volume+0x3c0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8033a00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033a04:	4413      	add	r3, r2
 8033a06:	3350      	adds	r3, #80	; 0x50
 8033a08:	781b      	ldrb	r3, [r3, #0]
 8033a0a:	2b81      	cmp	r3, #129	; 0x81
 8033a0c:	d10b      	bne.n	8033a26 <find_volume+0x3ba>
 8033a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a10:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8033a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033a16:	3314      	adds	r3, #20
 8033a18:	4413      	add	r3, r2
 8033a1a:	4618      	mov	r0, r3
 8033a1c:	f7fc fc26 	bl	803026c <ld_dword>
 8033a20:	4603      	mov	r3, r0
 8033a22:	2b02      	cmp	r3, #2
 8033a24:	d009      	beq.n	8033a3a <find_volume+0x3ce>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8033a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033a28:	3320      	adds	r3, #32
 8033a2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8033a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a2e:	899b      	ldrh	r3, [r3, #12]
 8033a30:	461a      	mov	r2, r3
 8033a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033a34:	4293      	cmp	r3, r2
 8033a36:	d3e3      	bcc.n	8033a00 <find_volume+0x394>
 8033a38:	e000      	b.n	8033a3c <find_volume+0x3d0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8033a3a:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8033a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a3e:	899b      	ldrh	r3, [r3, #12]
 8033a40:	461a      	mov	r2, r3
 8033a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8033a44:	4293      	cmp	r3, r2
 8033a46:	d101      	bne.n	8033a4c <find_volume+0x3e0>
 8033a48:	230d      	movs	r3, #13
 8033a4a:	e19f      	b.n	8033d8c <find_volume+0x720>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8033a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8033a52:	621a      	str	r2, [r3, #32]
 8033a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a56:	6a1a      	ldr	r2, [r3, #32]
 8033a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a5a:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8033a5c:	2304      	movs	r3, #4
 8033a5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8033a62:	e17e      	b.n	8033d62 <find_volume+0x6f6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8033a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a66:	3350      	adds	r3, #80	; 0x50
 8033a68:	330b      	adds	r3, #11
 8033a6a:	4618      	mov	r0, r3
 8033a6c:	f7fc fbe6 	bl	803023c <ld_word>
 8033a70:	4603      	mov	r3, r0
 8033a72:	461a      	mov	r2, r3
 8033a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a76:	899b      	ldrh	r3, [r3, #12]
 8033a78:	429a      	cmp	r2, r3
 8033a7a:	d001      	beq.n	8033a80 <find_volume+0x414>
 8033a7c:	230d      	movs	r3, #13
 8033a7e:	e185      	b.n	8033d8c <find_volume+0x720>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8033a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a82:	3350      	adds	r3, #80	; 0x50
 8033a84:	3316      	adds	r3, #22
 8033a86:	4618      	mov	r0, r3
 8033a88:	f7fc fbd8 	bl	803023c <ld_word>
 8033a8c:	4603      	mov	r3, r0
 8033a8e:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8033a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033a92:	2b00      	cmp	r3, #0
 8033a94:	d106      	bne.n	8033aa4 <find_volume+0x438>
 8033a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a98:	3350      	adds	r3, #80	; 0x50
 8033a9a:	3324      	adds	r3, #36	; 0x24
 8033a9c:	4618      	mov	r0, r3
 8033a9e:	f7fc fbe5 	bl	803026c <ld_dword>
 8033aa2:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8033aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033aa6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8033aa8:	639a      	str	r2, [r3, #56]	; 0x38

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8033aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033aac:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8033ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033ab2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8033ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033ab6:	789b      	ldrb	r3, [r3, #2]
 8033ab8:	2b01      	cmp	r3, #1
 8033aba:	d005      	beq.n	8033ac8 <find_volume+0x45c>
 8033abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033abe:	789b      	ldrb	r3, [r3, #2]
 8033ac0:	2b02      	cmp	r3, #2
 8033ac2:	d001      	beq.n	8033ac8 <find_volume+0x45c>
 8033ac4:	230d      	movs	r3, #13
 8033ac6:	e161      	b.n	8033d8c <find_volume+0x720>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8033ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033aca:	789b      	ldrb	r3, [r3, #2]
 8033acc:	461a      	mov	r2, r3
 8033ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033ad0:	fb02 f303 	mul.w	r3, r2, r3
 8033ad4:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8033ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8033adc:	b29a      	uxth	r2, r3
 8033ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033ae0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8033ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033ae4:	895b      	ldrh	r3, [r3, #10]
 8033ae6:	2b00      	cmp	r3, #0
 8033ae8:	d008      	beq.n	8033afc <find_volume+0x490>
 8033aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033aec:	895b      	ldrh	r3, [r3, #10]
 8033aee:	461a      	mov	r2, r3
 8033af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033af2:	895b      	ldrh	r3, [r3, #10]
 8033af4:	3b01      	subs	r3, #1
 8033af6:	4013      	ands	r3, r2
 8033af8:	2b00      	cmp	r3, #0
 8033afa:	d001      	beq.n	8033b00 <find_volume+0x494>
 8033afc:	230d      	movs	r3, #13
 8033afe:	e145      	b.n	8033d8c <find_volume+0x720>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8033b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b02:	3350      	adds	r3, #80	; 0x50
 8033b04:	3311      	adds	r3, #17
 8033b06:	4618      	mov	r0, r3
 8033b08:	f7fc fb98 	bl	803023c <ld_word>
 8033b0c:	4603      	mov	r3, r0
 8033b0e:	461a      	mov	r2, r3
 8033b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b12:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8033b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b16:	891b      	ldrh	r3, [r3, #8]
 8033b18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033b1a:	8992      	ldrh	r2, [r2, #12]
 8033b1c:	0952      	lsrs	r2, r2, #5
 8033b1e:	b292      	uxth	r2, r2
 8033b20:	fbb3 f1f2 	udiv	r1, r3, r2
 8033b24:	fb01 f202 	mul.w	r2, r1, r2
 8033b28:	1a9b      	subs	r3, r3, r2
 8033b2a:	b29b      	uxth	r3, r3
 8033b2c:	2b00      	cmp	r3, #0
 8033b2e:	d001      	beq.n	8033b34 <find_volume+0x4c8>
 8033b30:	230d      	movs	r3, #13
 8033b32:	e12b      	b.n	8033d8c <find_volume+0x720>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8033b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b36:	3350      	adds	r3, #80	; 0x50
 8033b38:	3313      	adds	r3, #19
 8033b3a:	4618      	mov	r0, r3
 8033b3c:	f7fc fb7e 	bl	803023c <ld_word>
 8033b40:	4603      	mov	r3, r0
 8033b42:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8033b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033b46:	2b00      	cmp	r3, #0
 8033b48:	d106      	bne.n	8033b58 <find_volume+0x4ec>
 8033b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b4c:	3350      	adds	r3, #80	; 0x50
 8033b4e:	3320      	adds	r3, #32
 8033b50:	4618      	mov	r0, r3
 8033b52:	f7fc fb8b 	bl	803026c <ld_dword>
 8033b56:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8033b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b5a:	3350      	adds	r3, #80	; 0x50
 8033b5c:	330e      	adds	r3, #14
 8033b5e:	4618      	mov	r0, r3
 8033b60:	f7fc fb6c 	bl	803023c <ld_word>
 8033b64:	4603      	mov	r3, r0
 8033b66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8033b6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8033b6e:	2b00      	cmp	r3, #0
 8033b70:	d101      	bne.n	8033b76 <find_volume+0x50a>
 8033b72:	230d      	movs	r3, #13
 8033b74:	e10a      	b.n	8033d8c <find_volume+0x720>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8033b76:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8033b7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033b7c:	4413      	add	r3, r2
 8033b7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033b80:	8911      	ldrh	r1, [r2, #8]
 8033b82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033b84:	8992      	ldrh	r2, [r2, #12]
 8033b86:	0952      	lsrs	r2, r2, #5
 8033b88:	b292      	uxth	r2, r2
 8033b8a:	fbb1 f2f2 	udiv	r2, r1, r2
 8033b8e:	b292      	uxth	r2, r2
 8033b90:	4413      	add	r3, r2
 8033b92:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8033b94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8033b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8033b98:	429a      	cmp	r2, r3
 8033b9a:	d201      	bcs.n	8033ba0 <find_volume+0x534>
 8033b9c:	230d      	movs	r3, #13
 8033b9e:	e0f5      	b.n	8033d8c <find_volume+0x720>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8033ba0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8033ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8033ba4:	1ad3      	subs	r3, r2, r3
 8033ba6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033ba8:	8952      	ldrh	r2, [r2, #10]
 8033baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8033bae:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8033bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033bb2:	2b00      	cmp	r3, #0
 8033bb4:	d104      	bne.n	8033bc0 <find_volume+0x554>
 8033bb6:	230d      	movs	r3, #13
 8033bb8:	e0e8      	b.n	8033d8c <find_volume+0x720>
 8033bba:	bf00      	nop
 8033bbc:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 8033bc0:	2303      	movs	r3, #3
 8033bc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8033bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033bc8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8033bcc:	4293      	cmp	r3, r2
 8033bce:	d802      	bhi.n	8033bd6 <find_volume+0x56a>
 8033bd0:	2302      	movs	r3, #2
 8033bd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8033bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033bd8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8033bdc:	4293      	cmp	r3, r2
 8033bde:	d802      	bhi.n	8033be6 <find_volume+0x57a>
 8033be0:	2301      	movs	r3, #1
 8033be2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8033be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033be8:	1c9a      	adds	r2, r3, #2
 8033bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033bec:	635a      	str	r2, [r3, #52]	; 0x34
		fs->volbase = bsect;							/* Volume start sector */
 8033bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033bf0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8033bf2:	63da      	str	r2, [r3, #60]	; 0x3c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8033bf4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8033bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8033bfa:	441a      	add	r2, r3
 8033bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033bfe:	641a      	str	r2, [r3, #64]	; 0x40
		fs->database = bsect + sysect;					/* Data start sector */
 8033c00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8033c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8033c04:	441a      	add	r2, r3
 8033c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c08:	649a      	str	r2, [r3, #72]	; 0x48
		if (fmt == FS_FAT32) {
 8033c0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8033c0e:	2b03      	cmp	r3, #3
 8033c10:	d11e      	bne.n	8033c50 <find_volume+0x5e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8033c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c14:	3350      	adds	r3, #80	; 0x50
 8033c16:	332a      	adds	r3, #42	; 0x2a
 8033c18:	4618      	mov	r0, r3
 8033c1a:	f7fc fb0f 	bl	803023c <ld_word>
 8033c1e:	4603      	mov	r3, r0
 8033c20:	2b00      	cmp	r3, #0
 8033c22:	d001      	beq.n	8033c28 <find_volume+0x5bc>
 8033c24:	230d      	movs	r3, #13
 8033c26:	e0b1      	b.n	8033d8c <find_volume+0x720>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8033c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c2a:	891b      	ldrh	r3, [r3, #8]
 8033c2c:	2b00      	cmp	r3, #0
 8033c2e:	d001      	beq.n	8033c34 <find_volume+0x5c8>
 8033c30:	230d      	movs	r3, #13
 8033c32:	e0ab      	b.n	8033d8c <find_volume+0x720>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8033c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c36:	3350      	adds	r3, #80	; 0x50
 8033c38:	332c      	adds	r3, #44	; 0x2c
 8033c3a:	4618      	mov	r0, r3
 8033c3c:	f7fc fb16 	bl	803026c <ld_dword>
 8033c40:	4602      	mov	r2, r0
 8033c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c44:	645a      	str	r2, [r3, #68]	; 0x44
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8033c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033c4a:	009b      	lsls	r3, r3, #2
 8033c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8033c4e:	e01f      	b.n	8033c90 <find_volume+0x624>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8033c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c52:	891b      	ldrh	r3, [r3, #8]
 8033c54:	2b00      	cmp	r3, #0
 8033c56:	d101      	bne.n	8033c5c <find_volume+0x5f0>
 8033c58:	230d      	movs	r3, #13
 8033c5a:	e097      	b.n	8033d8c <find_volume+0x720>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8033c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8033c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033c62:	441a      	add	r2, r3
 8033c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c66:	645a      	str	r2, [r3, #68]	; 0x44
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8033c68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8033c6c:	2b02      	cmp	r3, #2
 8033c6e:	d103      	bne.n	8033c78 <find_volume+0x60c>
 8033c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033c74:	005b      	lsls	r3, r3, #1
 8033c76:	e00a      	b.n	8033c8e <find_volume+0x622>
 8033c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8033c7c:	4613      	mov	r3, r2
 8033c7e:	005b      	lsls	r3, r3, #1
 8033c80:	4413      	add	r3, r2
 8033c82:	085a      	lsrs	r2, r3, #1
 8033c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033c88:	f003 0301 	and.w	r3, r3, #1
 8033c8c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8033c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8033c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8033c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033c96:	899b      	ldrh	r3, [r3, #12]
 8033c98:	4619      	mov	r1, r3
 8033c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033c9c:	440b      	add	r3, r1
 8033c9e:	3b01      	subs	r3, #1
 8033ca0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8033ca2:	8989      	ldrh	r1, [r1, #12]
 8033ca4:	fbb3 f3f1 	udiv	r3, r3, r1
 8033ca8:	429a      	cmp	r2, r3
 8033caa:	d201      	bcs.n	8033cb0 <find_volume+0x644>
 8033cac:	230d      	movs	r3, #13
 8033cae:	e06d      	b.n	8033d8c <find_volume+0x720>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8033cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8033cb6:	621a      	str	r2, [r3, #32]
 8033cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cba:	6a1a      	ldr	r2, [r3, #32]
 8033cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cbe:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 8033cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cc2:	2280      	movs	r2, #128	; 0x80
 8033cc4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8033cc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8033cca:	2b03      	cmp	r3, #3
 8033ccc:	d149      	bne.n	8033d62 <find_volume+0x6f6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8033cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cd0:	3350      	adds	r3, #80	; 0x50
 8033cd2:	3330      	adds	r3, #48	; 0x30
 8033cd4:	4618      	mov	r0, r3
 8033cd6:	f7fc fab1 	bl	803023c <ld_word>
 8033cda:	4603      	mov	r3, r0
 8033cdc:	2b01      	cmp	r3, #1
 8033cde:	d140      	bne.n	8033d62 <find_volume+0x6f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8033ce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8033ce2:	3301      	adds	r3, #1
 8033ce4:	4619      	mov	r1, r3
 8033ce6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8033ce8:	f7fc feec 	bl	8030ac4 <move_window>
 8033cec:	4603      	mov	r3, r0
 8033cee:	2b00      	cmp	r3, #0
 8033cf0:	d137      	bne.n	8033d62 <find_volume+0x6f6>
		{
			fs->fsi_flag = 0;
 8033cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cf4:	2200      	movs	r2, #0
 8033cf6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8033cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033cfa:	3350      	adds	r3, #80	; 0x50
 8033cfc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8033d00:	4618      	mov	r0, r3
 8033d02:	f7fc fa9b 	bl	803023c <ld_word>
 8033d06:	4603      	mov	r3, r0
 8033d08:	461a      	mov	r2, r3
 8033d0a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8033d0e:	429a      	cmp	r2, r3
 8033d10:	d127      	bne.n	8033d62 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8033d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d14:	3350      	adds	r3, #80	; 0x50
 8033d16:	4618      	mov	r0, r3
 8033d18:	f7fc faa8 	bl	803026c <ld_dword>
 8033d1c:	4603      	mov	r3, r0
 8033d1e:	4a1e      	ldr	r2, [pc, #120]	; (8033d98 <find_volume+0x72c>)
 8033d20:	4293      	cmp	r3, r2
 8033d22:	d11e      	bne.n	8033d62 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8033d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d26:	3350      	adds	r3, #80	; 0x50
 8033d28:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8033d2c:	4618      	mov	r0, r3
 8033d2e:	f7fc fa9d 	bl	803026c <ld_dword>
 8033d32:	4603      	mov	r3, r0
 8033d34:	4a19      	ldr	r2, [pc, #100]	; (8033d9c <find_volume+0x730>)
 8033d36:	4293      	cmp	r3, r2
 8033d38:	d113      	bne.n	8033d62 <find_volume+0x6f6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8033d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d3c:	3350      	adds	r3, #80	; 0x50
 8033d3e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8033d42:	4618      	mov	r0, r3
 8033d44:	f7fc fa92 	bl	803026c <ld_dword>
 8033d48:	4602      	mov	r2, r0
 8033d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d4c:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8033d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d50:	3350      	adds	r3, #80	; 0x50
 8033d52:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8033d56:	4618      	mov	r0, r3
 8033d58:	f7fc fa88 	bl	803026c <ld_dword>
 8033d5c:	4602      	mov	r2, r0
 8033d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d60:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8033d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d64:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8033d68:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8033d6a:	4b0d      	ldr	r3, [pc, #52]	; (8033da0 <find_volume+0x734>)
 8033d6c:	881b      	ldrh	r3, [r3, #0]
 8033d6e:	3301      	adds	r3, #1
 8033d70:	b29a      	uxth	r2, r3
 8033d72:	4b0b      	ldr	r3, [pc, #44]	; (8033da0 <find_volume+0x734>)
 8033d74:	801a      	strh	r2, [r3, #0]
 8033d76:	4b0a      	ldr	r3, [pc, #40]	; (8033da0 <find_volume+0x734>)
 8033d78:	881a      	ldrh	r2, [r3, #0]
 8033d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d7c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8033d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d80:	2200      	movs	r2, #0
 8033d82:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8033d84:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8033d86:	f7fc fe35 	bl	80309f4 <clear_lock>
#endif
	return FR_OK;
 8033d8a:	2300      	movs	r3, #0
}
 8033d8c:	4618      	mov	r0, r3
 8033d8e:	3770      	adds	r7, #112	; 0x70
 8033d90:	46bd      	mov	sp, r7
 8033d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8033d96:	bf00      	nop
 8033d98:	41615252 	.word	0x41615252
 8033d9c:	61417272 	.word	0x61417272
 8033da0:	24002bfc 	.word	0x24002bfc

08033da4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8033da4:	b580      	push	{r7, lr}
 8033da6:	b084      	sub	sp, #16
 8033da8:	af00      	add	r7, sp, #0
 8033daa:	6078      	str	r0, [r7, #4]
 8033dac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8033dae:	2309      	movs	r3, #9
 8033db0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8033db2:	687b      	ldr	r3, [r7, #4]
 8033db4:	2b00      	cmp	r3, #0
 8033db6:	d02e      	beq.n	8033e16 <validate+0x72>
 8033db8:	687b      	ldr	r3, [r7, #4]
 8033dba:	681b      	ldr	r3, [r3, #0]
 8033dbc:	2b00      	cmp	r3, #0
 8033dbe:	d02a      	beq.n	8033e16 <validate+0x72>
 8033dc0:	687b      	ldr	r3, [r7, #4]
 8033dc2:	681b      	ldr	r3, [r3, #0]
 8033dc4:	781b      	ldrb	r3, [r3, #0]
 8033dc6:	2b00      	cmp	r3, #0
 8033dc8:	d025      	beq.n	8033e16 <validate+0x72>
 8033dca:	687b      	ldr	r3, [r7, #4]
 8033dcc:	889a      	ldrh	r2, [r3, #4]
 8033dce:	687b      	ldr	r3, [r7, #4]
 8033dd0:	681b      	ldr	r3, [r3, #0]
 8033dd2:	88db      	ldrh	r3, [r3, #6]
 8033dd4:	429a      	cmp	r2, r3
 8033dd6:	d11e      	bne.n	8033e16 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8033dd8:	687b      	ldr	r3, [r7, #4]
 8033dda:	681b      	ldr	r3, [r3, #0]
 8033ddc:	4618      	mov	r0, r3
 8033dde:	f7fc fc90 	bl	8030702 <lock_fs>
 8033de2:	4603      	mov	r3, r0
 8033de4:	2b00      	cmp	r3, #0
 8033de6:	d014      	beq.n	8033e12 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8033de8:	687b      	ldr	r3, [r7, #4]
 8033dea:	681b      	ldr	r3, [r3, #0]
 8033dec:	785b      	ldrb	r3, [r3, #1]
 8033dee:	4618      	mov	r0, r3
 8033df0:	f7fc f986 	bl	8030100 <disk_status>
 8033df4:	4603      	mov	r3, r0
 8033df6:	f003 0301 	and.w	r3, r3, #1
 8033dfa:	2b00      	cmp	r3, #0
 8033dfc:	d102      	bne.n	8033e04 <validate+0x60>
				res = FR_OK;
 8033dfe:	2300      	movs	r3, #0
 8033e00:	73fb      	strb	r3, [r7, #15]
 8033e02:	e008      	b.n	8033e16 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8033e04:	687b      	ldr	r3, [r7, #4]
 8033e06:	681b      	ldr	r3, [r3, #0]
 8033e08:	2100      	movs	r1, #0
 8033e0a:	4618      	mov	r0, r3
 8033e0c:	f7fc fc8f 	bl	803072e <unlock_fs>
 8033e10:	e001      	b.n	8033e16 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8033e12:	230f      	movs	r3, #15
 8033e14:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8033e16:	7bfb      	ldrb	r3, [r7, #15]
 8033e18:	2b00      	cmp	r3, #0
 8033e1a:	d102      	bne.n	8033e22 <validate+0x7e>
 8033e1c:	687b      	ldr	r3, [r7, #4]
 8033e1e:	681b      	ldr	r3, [r3, #0]
 8033e20:	e000      	b.n	8033e24 <validate+0x80>
 8033e22:	2300      	movs	r3, #0
 8033e24:	683a      	ldr	r2, [r7, #0]
 8033e26:	6013      	str	r3, [r2, #0]
	return res;
 8033e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8033e2a:	4618      	mov	r0, r3
 8033e2c:	3710      	adds	r7, #16
 8033e2e:	46bd      	mov	sp, r7
 8033e30:	bd80      	pop	{r7, pc}
	...

08033e34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8033e34:	b580      	push	{r7, lr}
 8033e36:	b088      	sub	sp, #32
 8033e38:	af00      	add	r7, sp, #0
 8033e3a:	60f8      	str	r0, [r7, #12]
 8033e3c:	60b9      	str	r1, [r7, #8]
 8033e3e:	4613      	mov	r3, r2
 8033e40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8033e42:	68bb      	ldr	r3, [r7, #8]
 8033e44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8033e46:	f107 0310 	add.w	r3, r7, #16
 8033e4a:	4618      	mov	r0, r3
 8033e4c:	f7ff fb65 	bl	803351a <get_ldnumber>
 8033e50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8033e52:	69fb      	ldr	r3, [r7, #28]
 8033e54:	2b00      	cmp	r3, #0
 8033e56:	da01      	bge.n	8033e5c <f_mount+0x28>
 8033e58:	230b      	movs	r3, #11
 8033e5a:	e048      	b.n	8033eee <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8033e5c:	4a26      	ldr	r2, [pc, #152]	; (8033ef8 <f_mount+0xc4>)
 8033e5e:	69fb      	ldr	r3, [r7, #28]
 8033e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8033e64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8033e66:	69bb      	ldr	r3, [r7, #24]
 8033e68:	2b00      	cmp	r3, #0
 8033e6a:	d00f      	beq.n	8033e8c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8033e6c:	69b8      	ldr	r0, [r7, #24]
 8033e6e:	f7fc fdc1 	bl	80309f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8033e72:	69bb      	ldr	r3, [r7, #24]
 8033e74:	699b      	ldr	r3, [r3, #24]
 8033e76:	4618      	mov	r0, r3
 8033e78:	f001 ff79 	bl	8035d6e <ff_del_syncobj>
 8033e7c:	4603      	mov	r3, r0
 8033e7e:	2b00      	cmp	r3, #0
 8033e80:	d101      	bne.n	8033e86 <f_mount+0x52>
 8033e82:	2302      	movs	r3, #2
 8033e84:	e033      	b.n	8033eee <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8033e86:	69bb      	ldr	r3, [r7, #24]
 8033e88:	2200      	movs	r2, #0
 8033e8a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8033e8c:	68fb      	ldr	r3, [r7, #12]
 8033e8e:	2b00      	cmp	r3, #0
 8033e90:	d00f      	beq.n	8033eb2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8033e92:	68fb      	ldr	r3, [r7, #12]
 8033e94:	2200      	movs	r2, #0
 8033e96:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8033e98:	69fb      	ldr	r3, [r7, #28]
 8033e9a:	b2da      	uxtb	r2, r3
 8033e9c:	68fb      	ldr	r3, [r7, #12]
 8033e9e:	3318      	adds	r3, #24
 8033ea0:	4619      	mov	r1, r3
 8033ea2:	4610      	mov	r0, r2
 8033ea4:	f001 ff44 	bl	8035d30 <ff_cre_syncobj>
 8033ea8:	4603      	mov	r3, r0
 8033eaa:	2b00      	cmp	r3, #0
 8033eac:	d101      	bne.n	8033eb2 <f_mount+0x7e>
 8033eae:	2302      	movs	r3, #2
 8033eb0:	e01d      	b.n	8033eee <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8033eb2:	68fa      	ldr	r2, [r7, #12]
 8033eb4:	4910      	ldr	r1, [pc, #64]	; (8033ef8 <f_mount+0xc4>)
 8033eb6:	69fb      	ldr	r3, [r7, #28]
 8033eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8033ebc:	68fb      	ldr	r3, [r7, #12]
 8033ebe:	2b00      	cmp	r3, #0
 8033ec0:	d002      	beq.n	8033ec8 <f_mount+0x94>
 8033ec2:	79fb      	ldrb	r3, [r7, #7]
 8033ec4:	2b01      	cmp	r3, #1
 8033ec6:	d001      	beq.n	8033ecc <f_mount+0x98>
 8033ec8:	2300      	movs	r3, #0
 8033eca:	e010      	b.n	8033eee <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8033ecc:	f107 010c 	add.w	r1, r7, #12
 8033ed0:	f107 0308 	add.w	r3, r7, #8
 8033ed4:	2200      	movs	r2, #0
 8033ed6:	4618      	mov	r0, r3
 8033ed8:	f7ff fbc8 	bl	803366c <find_volume>
 8033edc:	4603      	mov	r3, r0
 8033ede:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8033ee0:	68fb      	ldr	r3, [r7, #12]
 8033ee2:	7dfa      	ldrb	r2, [r7, #23]
 8033ee4:	4611      	mov	r1, r2
 8033ee6:	4618      	mov	r0, r3
 8033ee8:	f7fc fc21 	bl	803072e <unlock_fs>
 8033eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8033eee:	4618      	mov	r0, r3
 8033ef0:	3720      	adds	r7, #32
 8033ef2:	46bd      	mov	sp, r7
 8033ef4:	bd80      	pop	{r7, pc}
 8033ef6:	bf00      	nop
 8033ef8:	24002bf8 	.word	0x24002bf8

08033efc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8033efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8033f00:	b0aa      	sub	sp, #168	; 0xa8
 8033f02:	af00      	add	r7, sp, #0
 8033f04:	6278      	str	r0, [r7, #36]	; 0x24
 8033f06:	6239      	str	r1, [r7, #32]
 8033f08:	4613      	mov	r3, r2
 8033f0a:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8033f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f0e:	2b00      	cmp	r3, #0
 8033f10:	d101      	bne.n	8033f16 <f_open+0x1a>
 8033f12:	2309      	movs	r3, #9
 8033f14:	e2e6      	b.n	80344e4 <f_open+0x5e8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8033f16:	7ffb      	ldrb	r3, [r7, #31]
 8033f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8033f1c:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 8033f1e:	7ffb      	ldrb	r3, [r7, #31]
 8033f20:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8033f24:	f107 0020 	add.w	r0, r7, #32
 8033f28:	461a      	mov	r2, r3
 8033f2a:	f7ff fb9f 	bl	803366c <find_volume>
 8033f2e:	4603      	mov	r3, r0
 8033f30:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	if (res == FR_OK) {
 8033f34:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8033f38:	2b00      	cmp	r3, #0
 8033f3a:	f040 82c3 	bne.w	80344c4 <f_open+0x5c8>
		dj.obj.fs = fs;
 8033f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033f40:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
 8033f42:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8033f46:	f001 ff3e 	bl	8035dc6 <ff_memalloc>
 8033f4a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8033f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8033f52:	2b00      	cmp	r3, #0
 8033f54:	d106      	bne.n	8033f64 <f_open+0x68>
 8033f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033f58:	2111      	movs	r1, #17
 8033f5a:	4618      	mov	r0, r3
 8033f5c:	f7fc fbe7 	bl	803072e <unlock_fs>
 8033f60:	2311      	movs	r3, #17
 8033f62:	e2bf      	b.n	80344e4 <f_open+0x5e8>
 8033f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8033f6a:	611a      	str	r2, [r3, #16]
 8033f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8033f6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8033f72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8033f76:	6153      	str	r3, [r2, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8033f78:	6a3b      	ldr	r3, [r7, #32]
 8033f7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8033f7e:	4619      	mov	r1, r3
 8033f80:	4610      	mov	r0, r2
 8033f82:	f7ff f9b3 	bl	80332ec <follow_path>
 8033f86:	4603      	mov	r3, r0
 8033f88:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8033f8c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8033f90:	2b00      	cmp	r3, #0
 8033f92:	d11a      	bne.n	8033fca <f_open+0xce>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8033f94:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8033f98:	b25b      	sxtb	r3, r3
 8033f9a:	2b00      	cmp	r3, #0
 8033f9c:	da03      	bge.n	8033fa6 <f_open+0xaa>
				res = FR_INVALID_NAME;
 8033f9e:	2306      	movs	r3, #6
 8033fa0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8033fa4:	e011      	b.n	8033fca <f_open+0xce>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8033fa6:	7ffb      	ldrb	r3, [r7, #31]
 8033fa8:	f023 0301 	bic.w	r3, r3, #1
 8033fac:	2b00      	cmp	r3, #0
 8033fae:	bf14      	ite	ne
 8033fb0:	2301      	movne	r3, #1
 8033fb2:	2300      	moveq	r3, #0
 8033fb4:	b2db      	uxtb	r3, r3
 8033fb6:	461a      	mov	r2, r3
 8033fb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8033fbc:	4611      	mov	r1, r2
 8033fbe:	4618      	mov	r0, r3
 8033fc0:	f7fc fbd0 	bl	8030764 <chk_lock>
 8033fc4:	4603      	mov	r3, r0
 8033fc6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8033fca:	7ffb      	ldrb	r3, [r7, #31]
 8033fcc:	f003 031c 	and.w	r3, r3, #28
 8033fd0:	2b00      	cmp	r3, #0
 8033fd2:	f000 8117 	beq.w	8034204 <f_open+0x308>
			if (res != FR_OK) {					/* No file, create new */
 8033fd6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8033fda:	2b00      	cmp	r3, #0
 8033fdc:	d017      	beq.n	803400e <f_open+0x112>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8033fde:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8033fe2:	2b04      	cmp	r3, #4
 8033fe4:	d10e      	bne.n	8034004 <f_open+0x108>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8033fe6:	f7fc fc19 	bl	803081c <enq_lock>
 8033fea:	4603      	mov	r3, r0
 8033fec:	2b00      	cmp	r3, #0
 8033fee:	d006      	beq.n	8033ffe <f_open+0x102>
 8033ff0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8033ff4:	4618      	mov	r0, r3
 8033ff6:	f7fe fc85 	bl	8032904 <dir_register>
 8033ffa:	4603      	mov	r3, r0
 8033ffc:	e000      	b.n	8034000 <f_open+0x104>
 8033ffe:	2312      	movs	r3, #18
 8034000:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8034004:	7ffb      	ldrb	r3, [r7, #31]
 8034006:	f043 0308 	orr.w	r3, r3, #8
 803400a:	77fb      	strb	r3, [r7, #31]
 803400c:	e011      	b.n	8034032 <f_open+0x136>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 803400e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8034012:	f003 0311 	and.w	r3, r3, #17
 8034016:	2b00      	cmp	r3, #0
 8034018:	d003      	beq.n	8034022 <f_open+0x126>
					res = FR_DENIED;
 803401a:	2307      	movs	r3, #7
 803401c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8034020:	e007      	b.n	8034032 <f_open+0x136>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8034022:	7ffb      	ldrb	r3, [r7, #31]
 8034024:	f003 0304 	and.w	r3, r3, #4
 8034028:	2b00      	cmp	r3, #0
 803402a:	d002      	beq.n	8034032 <f_open+0x136>
 803402c:	2308      	movs	r3, #8
 803402e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8034032:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8034036:	2b00      	cmp	r3, #0
 8034038:	f040 8100 	bne.w	803423c <f_open+0x340>
 803403c:	7ffb      	ldrb	r3, [r7, #31]
 803403e:	f003 0308 	and.w	r3, r3, #8
 8034042:	2b00      	cmp	r3, #0
 8034044:	f000 80fa 	beq.w	803423c <f_open+0x340>
				dw = GET_FATTIME();
 8034048:	f7f8 fc4c 	bl	802c8e4 <get_fattime>
 803404c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8034050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034052:	781b      	ldrb	r3, [r3, #0]
 8034054:	2b04      	cmp	r3, #4
 8034056:	f040 8085 	bne.w	8034164 <f_open+0x268>
					/* Get current allocation info */
					fp->obj.fs = fs;
 803405a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803405e:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8034060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034062:	695b      	ldr	r3, [r3, #20]
 8034064:	3334      	adds	r3, #52	; 0x34
 8034066:	4618      	mov	r0, r3
 8034068:	f7fc f900 	bl	803026c <ld_dword>
 803406c:	4602      	mov	r2, r0
 803406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034070:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8034072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034074:	695b      	ldr	r3, [r3, #20]
 8034076:	3338      	adds	r3, #56	; 0x38
 8034078:	4618      	mov	r0, r3
 803407a:	f7fc f91a 	bl	80302b2 <ld_qword>
 803407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034080:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8034084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034086:	695b      	ldr	r3, [r3, #20]
 8034088:	3321      	adds	r3, #33	; 0x21
 803408a:	781b      	ldrb	r3, [r3, #0]
 803408c:	f003 0302 	and.w	r3, r3, #2
 8034090:	b2db      	uxtb	r3, r3
 8034092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034094:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 8034096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034098:	2200      	movs	r2, #0
 803409a:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 803409c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803409e:	695b      	ldr	r3, [r3, #20]
 80340a0:	3308      	adds	r3, #8
 80340a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80340a6:	4618      	mov	r0, r3
 80340a8:	f7fc f9f9 	bl	803049e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80340ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80340ae:	695b      	ldr	r3, [r3, #20]
 80340b0:	f103 0214 	add.w	r2, r3, #20
 80340b4:	2300      	movs	r3, #0
 80340b6:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80340b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80340ba:	695b      	ldr	r3, [r3, #20]
 80340bc:	330c      	adds	r3, #12
 80340be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80340c2:	4618      	mov	r0, r3
 80340c4:	f7fc f9eb 	bl	803049e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80340c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80340ca:	695b      	ldr	r3, [r3, #20]
 80340cc:	f103 0215 	add.w	r2, r3, #21
 80340d0:	2300      	movs	r3, #0
 80340d2:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80340d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80340d6:	695b      	ldr	r3, [r3, #20]
 80340d8:	1d1a      	adds	r2, r3, #4
 80340da:	2320      	movs	r3, #32
 80340dc:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80340de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80340e0:	695b      	ldr	r3, [r3, #20]
 80340e2:	3334      	adds	r3, #52	; 0x34
 80340e4:	2100      	movs	r1, #0
 80340e6:	4618      	mov	r0, r3
 80340e8:	f7fc f9d9 	bl	803049e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80340ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80340ee:	695b      	ldr	r3, [r3, #20]
 80340f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80340f4:	f04f 0200 	mov.w	r2, #0
 80340f8:	f04f 0300 	mov.w	r3, #0
 80340fc:	4608      	mov	r0, r1
 80340fe:	f7fc f9fa 	bl	80304f6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8034102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034104:	695b      	ldr	r3, [r3, #20]
 8034106:	f103 0128 	add.w	r1, r3, #40	; 0x28
 803410a:	f04f 0200 	mov.w	r2, #0
 803410e:	f04f 0300 	mov.w	r3, #0
 8034112:	4608      	mov	r0, r1
 8034114:	f7fc f9ef 	bl	80304f6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8034118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803411a:	695b      	ldr	r3, [r3, #20]
 803411c:	f103 0221 	add.w	r2, r3, #33	; 0x21
 8034120:	2301      	movs	r3, #1
 8034122:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 8034124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8034128:	4618      	mov	r0, r3
 803412a:	f7fe f939 	bl	80323a0 <store_xdir>
 803412e:	4603      	mov	r3, r0
 8034130:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8034134:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8034138:	2b00      	cmp	r3, #0
 803413a:	d17f      	bne.n	803423c <f_open+0x340>
 803413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803413e:	689b      	ldr	r3, [r3, #8]
 8034140:	2b00      	cmp	r3, #0
 8034142:	d07b      	beq.n	803423c <f_open+0x340>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8034144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8034146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034148:	689b      	ldr	r3, [r3, #8]
 803414a:	2200      	movs	r2, #0
 803414c:	4619      	mov	r1, r3
 803414e:	f7fd f949 	bl	80313e4 <remove_chain>
 8034152:	4603      	mov	r3, r0
 8034154:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8034158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803415a:	689b      	ldr	r3, [r3, #8]
 803415c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803415e:	3b01      	subs	r3, #1
 8034160:	61d3      	str	r3, [r2, #28]
 8034162:	e06b      	b.n	803423c <f_open+0x340>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8034164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8034166:	330e      	adds	r3, #14
 8034168:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 803416c:	4618      	mov	r0, r3
 803416e:	f7fc f996 	bl	803049e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8034172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8034174:	3316      	adds	r3, #22
 8034176:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 803417a:	4618      	mov	r0, r3
 803417c:	f7fc f98f 	bl	803049e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8034180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8034182:	f103 020b 	add.w	r2, r3, #11
 8034186:	2320      	movs	r3, #32
 8034188:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 803418a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803418e:	4619      	mov	r1, r3
 8034190:	4610      	mov	r0, r2
 8034192:	f7fd fcfe 	bl	8031b92 <ld_clust>
 8034196:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 803419a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 803419c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803419e:	2200      	movs	r2, #0
 80341a0:	4619      	mov	r1, r3
 80341a2:	f7fd fd15 	bl	8031bd0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80341a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80341a8:	331c      	adds	r3, #28
 80341aa:	2100      	movs	r1, #0
 80341ac:	4618      	mov	r0, r3
 80341ae:	f7fc f976 	bl	803049e <st_dword>
					fs->wflag = 1;
 80341b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80341b4:	2301      	movs	r3, #1
 80341b6:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80341b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80341bc:	2b00      	cmp	r3, #0
 80341be:	d03d      	beq.n	803423c <f_open+0x340>
						dw = fs->winsect;
 80341c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80341c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80341c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						res = remove_chain(&dj.obj, cl, 0);
 80341c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80341cc:	2200      	movs	r2, #0
 80341ce:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80341d2:	4618      	mov	r0, r3
 80341d4:	f7fd f906 	bl	80313e4 <remove_chain>
 80341d8:	4603      	mov	r3, r0
 80341da:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						if (res == FR_OK) {
 80341de:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80341e2:	2b00      	cmp	r3, #0
 80341e4:	d12a      	bne.n	803423c <f_open+0x340>
							res = move_window(fs, dw);
 80341e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80341e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80341ec:	4618      	mov	r0, r3
 80341ee:	f7fc fc69 	bl	8030ac4 <move_window>
 80341f2:	4603      	mov	r3, r0
 80341f4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80341f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80341fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80341fe:	3b01      	subs	r3, #1
 8034200:	61d3      	str	r3, [r2, #28]
 8034202:	e01b      	b.n	803423c <f_open+0x340>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8034204:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8034208:	2b00      	cmp	r3, #0
 803420a:	d117      	bne.n	803423c <f_open+0x340>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 803420c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8034210:	f003 0310 	and.w	r3, r3, #16
 8034214:	2b00      	cmp	r3, #0
 8034216:	d003      	beq.n	8034220 <f_open+0x324>
					res = FR_NO_FILE;
 8034218:	2304      	movs	r3, #4
 803421a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 803421e:	e00d      	b.n	803423c <f_open+0x340>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8034220:	7ffb      	ldrb	r3, [r7, #31]
 8034222:	f003 0302 	and.w	r3, r3, #2
 8034226:	2b00      	cmp	r3, #0
 8034228:	d008      	beq.n	803423c <f_open+0x340>
 803422a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 803422e:	f003 0301 	and.w	r3, r3, #1
 8034232:	2b00      	cmp	r3, #0
 8034234:	d002      	beq.n	803423c <f_open+0x340>
						res = FR_DENIED;
 8034236:	2307      	movs	r3, #7
 8034238:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					}
				}
			}
		}
		if (res == FR_OK) {
 803423c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8034240:	2b00      	cmp	r3, #0
 8034242:	d128      	bne.n	8034296 <f_open+0x39a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8034244:	7ffb      	ldrb	r3, [r7, #31]
 8034246:	f003 0308 	and.w	r3, r3, #8
 803424a:	2b00      	cmp	r3, #0
 803424c:	d003      	beq.n	8034256 <f_open+0x35a>
				mode |= FA_MODIFIED;
 803424e:	7ffb      	ldrb	r3, [r7, #31]
 8034250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8034254:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8034256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 803425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803425c:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 803425e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8034260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034262:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8034264:	7ffb      	ldrb	r3, [r7, #31]
 8034266:	f023 0301 	bic.w	r3, r3, #1
 803426a:	2b00      	cmp	r3, #0
 803426c:	bf14      	ite	ne
 803426e:	2301      	movne	r3, #1
 8034270:	2300      	moveq	r3, #0
 8034272:	b2db      	uxtb	r3, r3
 8034274:	461a      	mov	r2, r3
 8034276:	f107 0330 	add.w	r3, r7, #48	; 0x30
 803427a:	4611      	mov	r1, r2
 803427c:	4618      	mov	r0, r3
 803427e:	f7fc faef 	bl	8030860 <inc_lock>
 8034282:	4602      	mov	r2, r0
 8034284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034286:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8034288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803428c:	2b00      	cmp	r3, #0
 803428e:	d102      	bne.n	8034296 <f_open+0x39a>
 8034290:	2302      	movs	r3, #2
 8034292:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
		}
#endif

		if (res == FR_OK) {
 8034296:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 803429a:	2b00      	cmp	r3, #0
 803429c:	f040 810e 	bne.w	80344bc <f_open+0x5c0>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80342a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80342a2:	781b      	ldrb	r3, [r3, #0]
 80342a4:	2b04      	cmp	r3, #4
 80342a6:	d12d      	bne.n	8034304 <f_open+0x408>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80342a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80342aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80342ac:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80342ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80342b2:	4613      	mov	r3, r2
 80342b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80342b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80342bc:	431a      	orrs	r2, r3
 80342be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80342c0:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80342c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80342c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80342c6:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80342c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80342ca:	695b      	ldr	r3, [r3, #20]
 80342cc:	3334      	adds	r3, #52	; 0x34
 80342ce:	4618      	mov	r0, r3
 80342d0:	f7fb ffcc 	bl	803026c <ld_dword>
 80342d4:	4602      	mov	r2, r0
 80342d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80342d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80342da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80342dc:	695b      	ldr	r3, [r3, #20]
 80342de:	3338      	adds	r3, #56	; 0x38
 80342e0:	4618      	mov	r0, r3
 80342e2:	f7fb ffe6 	bl	80302b2 <ld_qword>
 80342e6:	4602      	mov	r2, r0
 80342e8:	460b      	mov	r3, r1
 80342ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80342ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80342f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80342f2:	695b      	ldr	r3, [r3, #20]
 80342f4:	3321      	adds	r3, #33	; 0x21
 80342f6:	781b      	ldrb	r3, [r3, #0]
 80342f8:	f003 0302 	and.w	r3, r3, #2
 80342fc:	b2da      	uxtb	r2, r3
 80342fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034300:	71da      	strb	r2, [r3, #7]
 8034302:	e016      	b.n	8034332 <f_open+0x436>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8034304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8034308:	4619      	mov	r1, r3
 803430a:	4610      	mov	r0, r2
 803430c:	f7fd fc41 	bl	8031b92 <ld_clust>
 8034310:	4602      	mov	r2, r0
 8034312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034314:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8034316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8034318:	331c      	adds	r3, #28
 803431a:	4618      	mov	r0, r3
 803431c:	f7fb ffa6 	bl	803026c <ld_dword>
 8034320:	4603      	mov	r3, r0
 8034322:	2200      	movs	r2, #0
 8034324:	613b      	str	r3, [r7, #16]
 8034326:	617a      	str	r2, [r7, #20]
 8034328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803432a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 803432e:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8034332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034334:	2200      	movs	r2, #0
 8034336:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8034338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803433c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 803433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034340:	88da      	ldrh	r2, [r3, #6]
 8034342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034344:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8034346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034348:	7ffa      	ldrb	r2, [r7, #31]
 803434a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 803434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034350:	2200      	movs	r2, #0
 8034352:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8034356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034358:	2200      	movs	r2, #0
 803435a:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 803435c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803435e:	f04f 0200 	mov.w	r2, #0
 8034362:	f04f 0300 	mov.w	r3, #0
 8034366:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 803436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803436c:	3354      	adds	r3, #84	; 0x54
 803436e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8034372:	2100      	movs	r1, #0
 8034374:	4618      	mov	r0, r3
 8034376:	f7fc f967 	bl	8030648 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 803437a:	7ffb      	ldrb	r3, [r7, #31]
 803437c:	f003 0320 	and.w	r3, r3, #32
 8034380:	2b00      	cmp	r3, #0
 8034382:	f000 809b 	beq.w	80344bc <f_open+0x5c0>
 8034386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034388:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 803438c:	4313      	orrs	r3, r2
 803438e:	f000 8095 	beq.w	80344bc <f_open+0x5c0>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8034392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034394:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8034398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803439a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 803439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80343a0:	895b      	ldrh	r3, [r3, #10]
 80343a2:	461a      	mov	r2, r3
 80343a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80343a6:	899b      	ldrh	r3, [r3, #12]
 80343a8:	fb02 f303 	mul.w	r3, r2, r3
 80343ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80343b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80343b2:	689b      	ldr	r3, [r3, #8]
 80343b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80343b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80343ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80343be:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 80343c2:	e023      	b.n	803440c <f_open+0x510>
					clst = get_fat(&fp->obj, clst);
 80343c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80343c6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80343ca:	4618      	mov	r0, r3
 80343cc:	f7fc fc38 	bl	8030c40 <get_fat>
 80343d0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
					if (clst <= 1) res = FR_INT_ERR;
 80343d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80343d8:	2b01      	cmp	r3, #1
 80343da:	d802      	bhi.n	80343e2 <f_open+0x4e6>
 80343dc:	2302      	movs	r3, #2
 80343de:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80343e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80343e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80343ea:	d102      	bne.n	80343f2 <f_open+0x4f6>
 80343ec:	2301      	movs	r3, #1
 80343ee:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80343f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80343f6:	2200      	movs	r2, #0
 80343f8:	4698      	mov	r8, r3
 80343fa:	4691      	mov	r9, r2
 80343fc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8034400:	ebb2 0a08 	subs.w	sl, r2, r8
 8034404:	eb63 0b09 	sbc.w	fp, r3, r9
 8034408:	e9c7 ab26 	strd	sl, fp, [r7, #152]	; 0x98
 803440c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8034410:	2b00      	cmp	r3, #0
 8034412:	d10a      	bne.n	803442a <f_open+0x52e>
 8034414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8034418:	2200      	movs	r2, #0
 803441a:	461c      	mov	r4, r3
 803441c:	4615      	mov	r5, r2
 803441e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8034422:	4294      	cmp	r4, r2
 8034424:	eb75 0303 	sbcs.w	r3, r5, r3
 8034428:	d3cc      	bcc.n	80343c4 <f_open+0x4c8>
				}
				fp->clust = clst;
 803442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803442c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8034430:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8034432:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8034436:	2b00      	cmp	r3, #0
 8034438:	d140      	bne.n	80344bc <f_open+0x5c0>
 803443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803443c:	899b      	ldrh	r3, [r3, #12]
 803443e:	b29b      	uxth	r3, r3
 8034440:	2200      	movs	r2, #0
 8034442:	60bb      	str	r3, [r7, #8]
 8034444:	60fa      	str	r2, [r7, #12]
 8034446:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 803444a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 803444e:	f7eb ffc7 	bl	80203e0 <__aeabi_uldivmod>
 8034452:	4313      	orrs	r3, r2
 8034454:	d032      	beq.n	80344bc <f_open+0x5c0>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8034456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034458:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 803445c:	4618      	mov	r0, r3
 803445e:	f7fc fbcf 	bl	8030c00 <clust2sect>
 8034462:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8034466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 803446a:	2b00      	cmp	r3, #0
 803446c:	d103      	bne.n	8034476 <f_open+0x57a>
						res = FR_INT_ERR;
 803446e:	2302      	movs	r3, #2
 8034470:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8034474:	e022      	b.n	80344bc <f_open+0x5c0>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8034476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034478:	899b      	ldrh	r3, [r3, #12]
 803447a:	b29b      	uxth	r3, r3
 803447c:	2200      	movs	r2, #0
 803447e:	603b      	str	r3, [r7, #0]
 8034480:	607a      	str	r2, [r7, #4]
 8034482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8034486:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 803448a:	f7eb ffa9 	bl	80203e0 <__aeabi_uldivmod>
 803448e:	4602      	mov	r2, r0
 8034490:	460b      	mov	r3, r1
 8034492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8034496:	441a      	add	r2, r3
 8034498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803449a:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 803449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803449e:	7858      	ldrb	r0, [r3, #1]
 80344a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80344a2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80344a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80344a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80344aa:	2301      	movs	r3, #1
 80344ac:	f7fb fe68 	bl	8030180 <disk_read>
 80344b0:	4603      	mov	r3, r0
 80344b2:	2b00      	cmp	r3, #0
 80344b4:	d002      	beq.n	80344bc <f_open+0x5c0>
 80344b6:	2301      	movs	r3, #1
 80344b8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
#endif
		}

		FREE_NAMBUF();
 80344bc:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80344c0:	f001 fc8d 	bl	8035dde <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80344c4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80344c8:	2b00      	cmp	r3, #0
 80344ca:	d002      	beq.n	80344d2 <f_open+0x5d6>
 80344cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80344ce:	2200      	movs	r2, #0
 80344d0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80344d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80344d4:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80344d8:	4611      	mov	r1, r2
 80344da:	4618      	mov	r0, r3
 80344dc:	f7fc f927 	bl	803072e <unlock_fs>
 80344e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 80344e4:	4618      	mov	r0, r3
 80344e6:	37a8      	adds	r7, #168	; 0xa8
 80344e8:	46bd      	mov	sp, r7
 80344ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080344ee <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80344ee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80344f2:	b098      	sub	sp, #96	; 0x60
 80344f4:	af00      	add	r7, sp, #0
 80344f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80344f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80344fa:	627a      	str	r2, [r7, #36]	; 0x24
 80344fc:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80344fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034500:	64fb      	str	r3, [r7, #76]	; 0x4c


	*br = 0;	/* Clear read byte counter */
 8034502:	6a3a      	ldr	r2, [r7, #32]
 8034504:	2300      	movs	r3, #0
 8034506:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8034508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803450a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 803450e:	4619      	mov	r1, r3
 8034510:	4610      	mov	r0, r2
 8034512:	f7ff fc47 	bl	8033da4 <validate>
 8034516:	4603      	mov	r3, r0
 8034518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 803451c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8034520:	2b00      	cmp	r3, #0
 8034522:	d108      	bne.n	8034536 <f_read+0x48>
 8034524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034526:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 803452a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 803452e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8034532:	2b00      	cmp	r3, #0
 8034534:	d009      	beq.n	803454a <f_read+0x5c>
 8034536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034538:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 803453c:	4611      	mov	r1, r2
 803453e:	4618      	mov	r0, r3
 8034540:	f7fc f8f5 	bl	803072e <unlock_fs>
 8034544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8034548:	e193      	b.n	8034872 <f_read+0x384>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 803454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803454c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034550:	f003 0301 	and.w	r3, r3, #1
 8034554:	2b00      	cmp	r3, #0
 8034556:	d106      	bne.n	8034566 <f_read+0x78>
 8034558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803455a:	2107      	movs	r1, #7
 803455c:	4618      	mov	r0, r3
 803455e:	f7fc f8e6 	bl	803072e <unlock_fs>
 8034562:	2307      	movs	r3, #7
 8034564:	e185      	b.n	8034872 <f_read+0x384>
	remain = fp->obj.objsize - fp->fptr;
 8034566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034568:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 803456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803456e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034572:	ebb0 0802 	subs.w	r8, r0, r2
 8034576:	eb61 0903 	sbc.w	r9, r1, r3
 803457a:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 803457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034580:	2200      	movs	r2, #0
 8034582:	461c      	mov	r4, r3
 8034584:	4615      	mov	r5, r2
 8034586:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 803458a:	42a2      	cmp	r2, r4
 803458c:	41ab      	sbcs	r3, r5
 803458e:	f080 8166 	bcs.w	803485e <f_read+0x370>
 8034592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8034594:	627b      	str	r3, [r7, #36]	; 0x24

	for ( ;  btr;								/* Repeat until all data read */
 8034596:	e162      	b.n	803485e <f_read+0x370>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8034598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803459a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 803459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80345a0:	899b      	ldrh	r3, [r3, #12]
 80345a2:	b29b      	uxth	r3, r3
 80345a4:	2200      	movs	r2, #0
 80345a6:	61bb      	str	r3, [r7, #24]
 80345a8:	61fa      	str	r2, [r7, #28]
 80345aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80345ae:	f7eb ff17 	bl	80203e0 <__aeabi_uldivmod>
 80345b2:	4313      	orrs	r3, r2
 80345b4:	f040 8107 	bne.w	80347c6 <f_read+0x2d8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80345b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80345ba:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80345be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80345c0:	899b      	ldrh	r3, [r3, #12]
 80345c2:	b29b      	uxth	r3, r3
 80345c4:	2200      	movs	r2, #0
 80345c6:	613b      	str	r3, [r7, #16]
 80345c8:	617a      	str	r2, [r7, #20]
 80345ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80345ce:	f7eb ff07 	bl	80203e0 <__aeabi_uldivmod>
 80345d2:	4602      	mov	r2, r0
 80345d4:	460b      	mov	r3, r1
 80345d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80345d8:	895b      	ldrh	r3, [r3, #10]
 80345da:	3b01      	subs	r3, #1
 80345dc:	4013      	ands	r3, r2
 80345de:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 80345e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80345e2:	2b00      	cmp	r3, #0
 80345e4:	d13c      	bne.n	8034660 <f_read+0x172>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80345e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80345e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80345ec:	4313      	orrs	r3, r2
 80345ee:	d103      	bne.n	80345f8 <f_read+0x10a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80345f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80345f2:	689b      	ldr	r3, [r3, #8]
 80345f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80345f6:	e013      	b.n	8034620 <f_read+0x132>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80345f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80345fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80345fc:	2b00      	cmp	r3, #0
 80345fe:	d007      	beq.n	8034610 <f_read+0x122>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8034600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034602:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8034608:	f7fd f8a1 	bl	803174e <clmt_clust>
 803460c:	65b8      	str	r0, [r7, #88]	; 0x58
 803460e:	e007      	b.n	8034620 <f_read+0x132>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8034610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034616:	4619      	mov	r1, r3
 8034618:	4610      	mov	r0, r2
 803461a:	f7fc fb11 	bl	8030c40 <get_fat>
 803461e:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8034620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8034622:	2b01      	cmp	r3, #1
 8034624:	d80a      	bhi.n	803463c <f_read+0x14e>
 8034626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034628:	2202      	movs	r2, #2
 803462a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 803462e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034630:	2102      	movs	r1, #2
 8034632:	4618      	mov	r0, r3
 8034634:	f7fc f87b 	bl	803072e <unlock_fs>
 8034638:	2302      	movs	r3, #2
 803463a:	e11a      	b.n	8034872 <f_read+0x384>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 803463c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803463e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8034642:	d10a      	bne.n	803465a <f_read+0x16c>
 8034644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034646:	2201      	movs	r2, #1
 8034648:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 803464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803464e:	2101      	movs	r1, #1
 8034650:	4618      	mov	r0, r3
 8034652:	f7fc f86c 	bl	803072e <unlock_fs>
 8034656:	2301      	movs	r3, #1
 8034658:	e10b      	b.n	8034872 <f_read+0x384>
				fp->clust = clst;				/* Update current cluster */
 803465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803465c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 803465e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8034660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8034662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034666:	4619      	mov	r1, r3
 8034668:	4610      	mov	r0, r2
 803466a:	f7fc fac9 	bl	8030c00 <clust2sect>
 803466e:	63b8      	str	r0, [r7, #56]	; 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 8034670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8034672:	2b00      	cmp	r3, #0
 8034674:	d10a      	bne.n	803468c <f_read+0x19e>
 8034676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034678:	2202      	movs	r2, #2
 803467a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 803467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034680:	2102      	movs	r1, #2
 8034682:	4618      	mov	r0, r3
 8034684:	f7fc f853 	bl	803072e <unlock_fs>
 8034688:	2302      	movs	r3, #2
 803468a:	e0f2      	b.n	8034872 <f_read+0x384>
			sect += csect;
 803468c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803468e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034690:	4413      	add	r3, r2
 8034692:	63bb      	str	r3, [r7, #56]	; 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8034694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034696:	899b      	ldrh	r3, [r3, #12]
 8034698:	461a      	mov	r2, r3
 803469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803469c:	fbb3 f3f2 	udiv	r3, r3, r2
 80346a0:	653b      	str	r3, [r7, #80]	; 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 80346a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80346a4:	2b00      	cmp	r3, #0
 80346a6:	d048      	beq.n	803473a <f_read+0x24c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80346a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80346aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80346ac:	4413      	add	r3, r2
 80346ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80346b0:	8952      	ldrh	r2, [r2, #10]
 80346b2:	4293      	cmp	r3, r2
 80346b4:	d905      	bls.n	80346c2 <f_read+0x1d4>
					cc = fs->csize - csect;
 80346b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80346b8:	895b      	ldrh	r3, [r3, #10]
 80346ba:	461a      	mov	r2, r3
 80346bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80346be:	1ad3      	subs	r3, r2, r3
 80346c0:	653b      	str	r3, [r7, #80]	; 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80346c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80346c4:	7858      	ldrb	r0, [r3, #1]
 80346c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80346c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80346ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80346cc:	f7fb fd58 	bl	8030180 <disk_read>
 80346d0:	4603      	mov	r3, r0
 80346d2:	2b00      	cmp	r3, #0
 80346d4:	d00a      	beq.n	80346ec <f_read+0x1fe>
 80346d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80346d8:	2201      	movs	r2, #1
 80346da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80346de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80346e0:	2101      	movs	r1, #1
 80346e2:	4618      	mov	r0, r3
 80346e4:	f7fc f823 	bl	803072e <unlock_fs>
 80346e8:	2301      	movs	r3, #1
 80346ea:	e0c2      	b.n	8034872 <f_read+0x384>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80346ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80346ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80346f2:	b25b      	sxtb	r3, r3
 80346f4:	2b00      	cmp	r3, #0
 80346f6:	da18      	bge.n	803472a <f_read+0x23c>
 80346f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80346fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80346fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80346fe:	1ad3      	subs	r3, r2, r3
 8034700:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8034702:	429a      	cmp	r2, r3
 8034704:	d911      	bls.n	803472a <f_read+0x23c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8034706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803470a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803470c:	1ad3      	subs	r3, r2, r3
 803470e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8034710:	8992      	ldrh	r2, [r2, #12]
 8034712:	fb02 f303 	mul.w	r3, r2, r3
 8034716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8034718:	18d0      	adds	r0, r2, r3
 803471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803471c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8034720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034722:	899b      	ldrh	r3, [r3, #12]
 8034724:	461a      	mov	r2, r3
 8034726:	f7fb ff6e 	bl	8030606 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 803472a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803472c:	899b      	ldrh	r3, [r3, #12]
 803472e:	461a      	mov	r2, r3
 8034730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8034732:	fb02 f303 	mul.w	r3, r2, r3
 8034736:	657b      	str	r3, [r7, #84]	; 0x54
				continue;
 8034738:	e071      	b.n	803481e <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 803473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803473e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8034740:	429a      	cmp	r2, r3
 8034742:	d03d      	beq.n	80347c0 <f_read+0x2d2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8034744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 803474a:	b25b      	sxtb	r3, r3
 803474c:	2b00      	cmp	r3, #0
 803474e:	da20      	bge.n	8034792 <f_read+0x2a4>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8034750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034752:	7858      	ldrb	r0, [r3, #1]
 8034754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034756:	f103 0154 	add.w	r1, r3, #84	; 0x54
 803475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803475c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803475e:	2301      	movs	r3, #1
 8034760:	f7fb fd2e 	bl	80301c0 <disk_write>
 8034764:	4603      	mov	r3, r0
 8034766:	2b00      	cmp	r3, #0
 8034768:	d00a      	beq.n	8034780 <f_read+0x292>
 803476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803476c:	2201      	movs	r2, #1
 803476e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8034772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034774:	2101      	movs	r1, #1
 8034776:	4618      	mov	r0, r3
 8034778:	f7fb ffd9 	bl	803072e <unlock_fs>
 803477c:	2301      	movs	r3, #1
 803477e:	e078      	b.n	8034872 <f_read+0x384>
					fp->flag &= (BYTE)~FA_DIRTY;
 8034780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803478a:	b2da      	uxtb	r2, r3
 803478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803478e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8034792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034794:	7858      	ldrb	r0, [r3, #1]
 8034796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034798:	f103 0154 	add.w	r1, r3, #84	; 0x54
 803479c:	2301      	movs	r3, #1
 803479e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80347a0:	f7fb fcee 	bl	8030180 <disk_read>
 80347a4:	4603      	mov	r3, r0
 80347a6:	2b00      	cmp	r3, #0
 80347a8:	d00a      	beq.n	80347c0 <f_read+0x2d2>
 80347aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80347ac:	2201      	movs	r2, #1
 80347ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80347b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80347b4:	2101      	movs	r1, #1
 80347b6:	4618      	mov	r0, r3
 80347b8:	f7fb ffb9 	bl	803072e <unlock_fs>
 80347bc:	2301      	movs	r3, #1
 80347be:	e058      	b.n	8034872 <f_read+0x384>
			}
#endif
			fp->sect = sect;
 80347c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80347c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80347c4:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80347c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80347c8:	899b      	ldrh	r3, [r3, #12]
 80347ca:	4618      	mov	r0, r3
 80347cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80347ce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80347d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80347d4:	899b      	ldrh	r3, [r3, #12]
 80347d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80347da:	fb01 f303 	mul.w	r3, r1, r3
 80347de:	1ad3      	subs	r3, r2, r3
 80347e0:	1ac3      	subs	r3, r0, r3
 80347e2:	657b      	str	r3, [r7, #84]	; 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80347e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80347e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80347e8:	429a      	cmp	r2, r3
 80347ea:	d901      	bls.n	80347f0 <f_read+0x302>
 80347ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80347ee:	657b      	str	r3, [r7, #84]	; 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80347f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80347f2:	f103 0454 	add.w	r4, r3, #84	; 0x54
 80347f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80347f8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80347fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80347fe:	899b      	ldrh	r3, [r3, #12]
 8034800:	b29b      	uxth	r3, r3
 8034802:	2200      	movs	r2, #0
 8034804:	60bb      	str	r3, [r7, #8]
 8034806:	60fa      	str	r2, [r7, #12]
 8034808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 803480c:	f7eb fde8 	bl	80203e0 <__aeabi_uldivmod>
 8034810:	4613      	mov	r3, r2
 8034812:	4423      	add	r3, r4
 8034814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8034816:	4619      	mov	r1, r3
 8034818:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 803481a:	f7fb fef4 	bl	8030606 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 803481e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8034820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8034822:	4413      	add	r3, r2
 8034824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8034826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034828:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 803482c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 803482e:	2000      	movs	r0, #0
 8034830:	468a      	mov	sl, r1
 8034832:	4683      	mov	fp, r0
 8034834:	eb12 010a 	adds.w	r1, r2, sl
 8034838:	6039      	str	r1, [r7, #0]
 803483a:	eb43 030b 	adc.w	r3, r3, fp
 803483e:	607b      	str	r3, [r7, #4]
 8034840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034842:	e9d7 1200 	ldrd	r1, r2, [r7]
 8034846:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 803484a:	6a3b      	ldr	r3, [r7, #32]
 803484c:	681a      	ldr	r2, [r3, #0]
 803484e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8034850:	441a      	add	r2, r3
 8034852:	6a3b      	ldr	r3, [r7, #32]
 8034854:	601a      	str	r2, [r3, #0]
 8034856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803485a:	1ad3      	subs	r3, r2, r3
 803485c:	627b      	str	r3, [r7, #36]	; 0x24
	for ( ;  btr;								/* Repeat until all data read */
 803485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034860:	2b00      	cmp	r3, #0
 8034862:	f47f ae99 	bne.w	8034598 <f_read+0xaa>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8034866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034868:	2100      	movs	r1, #0
 803486a:	4618      	mov	r0, r3
 803486c:	f7fb ff5f 	bl	803072e <unlock_fs>
 8034870:	2300      	movs	r3, #0
}
 8034872:	4618      	mov	r0, r3
 8034874:	3760      	adds	r7, #96	; 0x60
 8034876:	46bd      	mov	sp, r7
 8034878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0803487c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 803487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034880:	b091      	sub	sp, #68	; 0x44
 8034882:	af00      	add	r7, sp, #0
 8034884:	61f8      	str	r0, [r7, #28]
 8034886:	61b9      	str	r1, [r7, #24]
 8034888:	617a      	str	r2, [r7, #20]
 803488a:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 803488c:	69bb      	ldr	r3, [r7, #24]
 803488e:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 8034890:	693b      	ldr	r3, [r7, #16]
 8034892:	2200      	movs	r2, #0
 8034894:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8034896:	69fb      	ldr	r3, [r7, #28]
 8034898:	f107 0220 	add.w	r2, r7, #32
 803489c:	4611      	mov	r1, r2
 803489e:	4618      	mov	r0, r3
 80348a0:	f7ff fa80 	bl	8033da4 <validate>
 80348a4:	4603      	mov	r3, r0
 80348a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80348aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80348ae:	2b00      	cmp	r3, #0
 80348b0:	d108      	bne.n	80348c4 <f_write+0x48>
 80348b2:	69fb      	ldr	r3, [r7, #28]
 80348b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80348b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80348bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80348c0:	2b00      	cmp	r3, #0
 80348c2:	d009      	beq.n	80348d8 <f_write+0x5c>
 80348c4:	6a3b      	ldr	r3, [r7, #32]
 80348c6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80348ca:	4611      	mov	r1, r2
 80348cc:	4618      	mov	r0, r3
 80348ce:	f7fb ff2e 	bl	803072e <unlock_fs>
 80348d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80348d6:	e1d2      	b.n	8034c7e <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80348d8:	69fb      	ldr	r3, [r7, #28]
 80348da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80348de:	f003 0302 	and.w	r3, r3, #2
 80348e2:	2b00      	cmp	r3, #0
 80348e4:	d106      	bne.n	80348f4 <f_write+0x78>
 80348e6:	6a3b      	ldr	r3, [r7, #32]
 80348e8:	2107      	movs	r1, #7
 80348ea:	4618      	mov	r0, r3
 80348ec:	f7fb ff1f 	bl	803072e <unlock_fs>
 80348f0:	2307      	movs	r3, #7
 80348f2:	e1c4      	b.n	8034c7e <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80348f4:	6a3b      	ldr	r3, [r7, #32]
 80348f6:	781b      	ldrb	r3, [r3, #0]
 80348f8:	2b04      	cmp	r3, #4
 80348fa:	f000 81ab 	beq.w	8034c54 <f_write+0x3d8>
 80348fe:	69fb      	ldr	r3, [r7, #28]
 8034900:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034904:	697b      	ldr	r3, [r7, #20]
 8034906:	18d1      	adds	r1, r2, r3
 8034908:	69fb      	ldr	r3, [r7, #28]
 803490a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 803490e:	4613      	mov	r3, r2
 8034910:	4299      	cmp	r1, r3
 8034912:	f080 819f 	bcs.w	8034c54 <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8034916:	69fb      	ldr	r3, [r7, #28]
 8034918:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 803491c:	4613      	mov	r3, r2
 803491e:	43db      	mvns	r3, r3
 8034920:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8034922:	e197      	b.n	8034c54 <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8034924:	69fb      	ldr	r3, [r7, #28]
 8034926:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 803492a:	6a3b      	ldr	r3, [r7, #32]
 803492c:	899b      	ldrh	r3, [r3, #12]
 803492e:	b29b      	uxth	r3, r3
 8034930:	2200      	movs	r2, #0
 8034932:	461d      	mov	r5, r3
 8034934:	4616      	mov	r6, r2
 8034936:	462a      	mov	r2, r5
 8034938:	4633      	mov	r3, r6
 803493a:	f7eb fd51 	bl	80203e0 <__aeabi_uldivmod>
 803493e:	4313      	orrs	r3, r2
 8034940:	f040 8128 	bne.w	8034b94 <f_write+0x318>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8034944:	69fb      	ldr	r3, [r7, #28]
 8034946:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 803494a:	6a3b      	ldr	r3, [r7, #32]
 803494c:	899b      	ldrh	r3, [r3, #12]
 803494e:	b29b      	uxth	r3, r3
 8034950:	2200      	movs	r2, #0
 8034952:	60bb      	str	r3, [r7, #8]
 8034954:	60fa      	str	r2, [r7, #12]
 8034956:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 803495a:	f7eb fd41 	bl	80203e0 <__aeabi_uldivmod>
 803495e:	4602      	mov	r2, r0
 8034960:	460b      	mov	r3, r1
 8034962:	6a3b      	ldr	r3, [r7, #32]
 8034964:	895b      	ldrh	r3, [r3, #10]
 8034966:	3b01      	subs	r3, #1
 8034968:	4013      	ands	r3, r2
 803496a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 803496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803496e:	2b00      	cmp	r3, #0
 8034970:	d150      	bne.n	8034a14 <f_write+0x198>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8034972:	69fb      	ldr	r3, [r7, #28]
 8034974:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034978:	4313      	orrs	r3, r2
 803497a:	d10c      	bne.n	8034996 <f_write+0x11a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 803497c:	69fb      	ldr	r3, [r7, #28]
 803497e:	689b      	ldr	r3, [r3, #8]
 8034980:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 8034982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8034984:	2b00      	cmp	r3, #0
 8034986:	d11a      	bne.n	80349be <f_write+0x142>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8034988:	69fb      	ldr	r3, [r7, #28]
 803498a:	2100      	movs	r1, #0
 803498c:	4618      	mov	r0, r3
 803498e:	f7fc fddd 	bl	803154c <create_chain>
 8034992:	63b8      	str	r0, [r7, #56]	; 0x38
 8034994:	e013      	b.n	80349be <f_write+0x142>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8034996:	69fb      	ldr	r3, [r7, #28]
 8034998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803499a:	2b00      	cmp	r3, #0
 803499c:	d007      	beq.n	80349ae <f_write+0x132>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 803499e:	69fb      	ldr	r3, [r7, #28]
 80349a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80349a4:	69f8      	ldr	r0, [r7, #28]
 80349a6:	f7fc fed2 	bl	803174e <clmt_clust>
 80349aa:	63b8      	str	r0, [r7, #56]	; 0x38
 80349ac:	e007      	b.n	80349be <f_write+0x142>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80349ae:	69fa      	ldr	r2, [r7, #28]
 80349b0:	69fb      	ldr	r3, [r7, #28]
 80349b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80349b4:	4619      	mov	r1, r3
 80349b6:	4610      	mov	r0, r2
 80349b8:	f7fc fdc8 	bl	803154c <create_chain>
 80349bc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80349be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80349c0:	2b00      	cmp	r3, #0
 80349c2:	f000 814c 	beq.w	8034c5e <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80349c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80349c8:	2b01      	cmp	r3, #1
 80349ca:	d10a      	bne.n	80349e2 <f_write+0x166>
 80349cc:	69fb      	ldr	r3, [r7, #28]
 80349ce:	2202      	movs	r2, #2
 80349d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80349d4:	6a3b      	ldr	r3, [r7, #32]
 80349d6:	2102      	movs	r1, #2
 80349d8:	4618      	mov	r0, r3
 80349da:	f7fb fea8 	bl	803072e <unlock_fs>
 80349de:	2302      	movs	r3, #2
 80349e0:	e14d      	b.n	8034c7e <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80349e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80349e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80349e8:	d10a      	bne.n	8034a00 <f_write+0x184>
 80349ea:	69fb      	ldr	r3, [r7, #28]
 80349ec:	2201      	movs	r2, #1
 80349ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80349f2:	6a3b      	ldr	r3, [r7, #32]
 80349f4:	2101      	movs	r1, #1
 80349f6:	4618      	mov	r0, r3
 80349f8:	f7fb fe99 	bl	803072e <unlock_fs>
 80349fc:	2301      	movs	r3, #1
 80349fe:	e13e      	b.n	8034c7e <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 8034a00:	69fb      	ldr	r3, [r7, #28]
 8034a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8034a04:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8034a06:	69fb      	ldr	r3, [r7, #28]
 8034a08:	689b      	ldr	r3, [r3, #8]
 8034a0a:	2b00      	cmp	r3, #0
 8034a0c:	d102      	bne.n	8034a14 <f_write+0x198>
 8034a0e:	69fb      	ldr	r3, [r7, #28]
 8034a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8034a12:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8034a14:	69fb      	ldr	r3, [r7, #28]
 8034a16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034a1a:	b25b      	sxtb	r3, r3
 8034a1c:	2b00      	cmp	r3, #0
 8034a1e:	da20      	bge.n	8034a62 <f_write+0x1e6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8034a20:	6a3b      	ldr	r3, [r7, #32]
 8034a22:	7858      	ldrb	r0, [r3, #1]
 8034a24:	69fb      	ldr	r3, [r7, #28]
 8034a26:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8034a2a:	69fb      	ldr	r3, [r7, #28]
 8034a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8034a2e:	2301      	movs	r3, #1
 8034a30:	f7fb fbc6 	bl	80301c0 <disk_write>
 8034a34:	4603      	mov	r3, r0
 8034a36:	2b00      	cmp	r3, #0
 8034a38:	d00a      	beq.n	8034a50 <f_write+0x1d4>
 8034a3a:	69fb      	ldr	r3, [r7, #28]
 8034a3c:	2201      	movs	r2, #1
 8034a3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8034a42:	6a3b      	ldr	r3, [r7, #32]
 8034a44:	2101      	movs	r1, #1
 8034a46:	4618      	mov	r0, r3
 8034a48:	f7fb fe71 	bl	803072e <unlock_fs>
 8034a4c:	2301      	movs	r3, #1
 8034a4e:	e116      	b.n	8034c7e <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 8034a50:	69fb      	ldr	r3, [r7, #28]
 8034a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034a5a:	b2da      	uxtb	r2, r3
 8034a5c:	69fb      	ldr	r3, [r7, #28]
 8034a5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8034a62:	6a3a      	ldr	r2, [r7, #32]
 8034a64:	69fb      	ldr	r3, [r7, #28]
 8034a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034a68:	4619      	mov	r1, r3
 8034a6a:	4610      	mov	r0, r2
 8034a6c:	f7fc f8c8 	bl	8030c00 <clust2sect>
 8034a70:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 8034a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034a74:	2b00      	cmp	r3, #0
 8034a76:	d10a      	bne.n	8034a8e <f_write+0x212>
 8034a78:	69fb      	ldr	r3, [r7, #28]
 8034a7a:	2202      	movs	r2, #2
 8034a7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8034a80:	6a3b      	ldr	r3, [r7, #32]
 8034a82:	2102      	movs	r1, #2
 8034a84:	4618      	mov	r0, r3
 8034a86:	f7fb fe52 	bl	803072e <unlock_fs>
 8034a8a:	2302      	movs	r3, #2
 8034a8c:	e0f7      	b.n	8034c7e <f_write+0x402>
			sect += csect;
 8034a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034a92:	4413      	add	r3, r2
 8034a94:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8034a96:	6a3b      	ldr	r3, [r7, #32]
 8034a98:	899b      	ldrh	r3, [r3, #12]
 8034a9a:	461a      	mov	r2, r3
 8034a9c:	697b      	ldr	r3, [r7, #20]
 8034a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8034aa2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 8034aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034aa6:	2b00      	cmp	r3, #0
 8034aa8:	d04b      	beq.n	8034b42 <f_write+0x2c6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8034aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8034aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034aae:	4413      	add	r3, r2
 8034ab0:	6a3a      	ldr	r2, [r7, #32]
 8034ab2:	8952      	ldrh	r2, [r2, #10]
 8034ab4:	4293      	cmp	r3, r2
 8034ab6:	d905      	bls.n	8034ac4 <f_write+0x248>
					cc = fs->csize - csect;
 8034ab8:	6a3b      	ldr	r3, [r7, #32]
 8034aba:	895b      	ldrh	r3, [r3, #10]
 8034abc:	461a      	mov	r2, r3
 8034abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034ac0:	1ad3      	subs	r3, r2, r3
 8034ac2:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8034ac4:	6a3b      	ldr	r3, [r7, #32]
 8034ac6:	7858      	ldrb	r0, [r3, #1]
 8034ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8034ace:	f7fb fb77 	bl	80301c0 <disk_write>
 8034ad2:	4603      	mov	r3, r0
 8034ad4:	2b00      	cmp	r3, #0
 8034ad6:	d00a      	beq.n	8034aee <f_write+0x272>
 8034ad8:	69fb      	ldr	r3, [r7, #28]
 8034ada:	2201      	movs	r2, #1
 8034adc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8034ae0:	6a3b      	ldr	r3, [r7, #32]
 8034ae2:	2101      	movs	r1, #1
 8034ae4:	4618      	mov	r0, r3
 8034ae6:	f7fb fe22 	bl	803072e <unlock_fs>
 8034aea:	2301      	movs	r3, #1
 8034aec:	e0c7      	b.n	8034c7e <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8034aee:	69fb      	ldr	r3, [r7, #28]
 8034af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8034af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034af4:	1ad3      	subs	r3, r2, r3
 8034af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8034af8:	429a      	cmp	r2, r3
 8034afa:	d91a      	bls.n	8034b32 <f_write+0x2b6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8034afc:	69fb      	ldr	r3, [r7, #28]
 8034afe:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8034b02:	69fb      	ldr	r3, [r7, #28]
 8034b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8034b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b08:	1ad3      	subs	r3, r2, r3
 8034b0a:	6a3a      	ldr	r2, [r7, #32]
 8034b0c:	8992      	ldrh	r2, [r2, #12]
 8034b0e:	fb02 f303 	mul.w	r3, r2, r3
 8034b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034b14:	18d1      	adds	r1, r2, r3
 8034b16:	6a3b      	ldr	r3, [r7, #32]
 8034b18:	899b      	ldrh	r3, [r3, #12]
 8034b1a:	461a      	mov	r2, r3
 8034b1c:	f7fb fd73 	bl	8030606 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8034b20:	69fb      	ldr	r3, [r7, #28]
 8034b22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034b2a:	b2da      	uxtb	r2, r3
 8034b2c:	69fb      	ldr	r3, [r7, #28]
 8034b2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8034b32:	6a3b      	ldr	r3, [r7, #32]
 8034b34:	899b      	ldrh	r3, [r3, #12]
 8034b36:	461a      	mov	r2, r3
 8034b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034b3a:	fb02 f303 	mul.w	r3, r2, r3
 8034b3e:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 8034b40:	e05d      	b.n	8034bfe <f_write+0x382>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8034b42:	69fb      	ldr	r3, [r7, #28]
 8034b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034b48:	429a      	cmp	r2, r3
 8034b4a:	d020      	beq.n	8034b8e <f_write+0x312>
				fp->fptr < fp->obj.objsize &&
 8034b4c:	69fb      	ldr	r3, [r7, #28]
 8034b4e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8034b52:	69fb      	ldr	r3, [r7, #28]
 8034b54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8034b58:	4290      	cmp	r0, r2
 8034b5a:	eb71 0303 	sbcs.w	r3, r1, r3
 8034b5e:	d216      	bcs.n	8034b8e <f_write+0x312>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8034b60:	6a3b      	ldr	r3, [r7, #32]
 8034b62:	7858      	ldrb	r0, [r3, #1]
 8034b64:	69fb      	ldr	r3, [r7, #28]
 8034b66:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8034b6a:	2301      	movs	r3, #1
 8034b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034b6e:	f7fb fb07 	bl	8030180 <disk_read>
 8034b72:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8034b74:	2b00      	cmp	r3, #0
 8034b76:	d00a      	beq.n	8034b8e <f_write+0x312>
					ABORT(fs, FR_DISK_ERR);
 8034b78:	69fb      	ldr	r3, [r7, #28]
 8034b7a:	2201      	movs	r2, #1
 8034b7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8034b80:	6a3b      	ldr	r3, [r7, #32]
 8034b82:	2101      	movs	r1, #1
 8034b84:	4618      	mov	r0, r3
 8034b86:	f7fb fdd2 	bl	803072e <unlock_fs>
 8034b8a:	2301      	movs	r3, #1
 8034b8c:	e077      	b.n	8034c7e <f_write+0x402>
			}
#endif
			fp->sect = sect;
 8034b8e:	69fb      	ldr	r3, [r7, #28]
 8034b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034b92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8034b94:	6a3b      	ldr	r3, [r7, #32]
 8034b96:	899b      	ldrh	r3, [r3, #12]
 8034b98:	4618      	mov	r0, r3
 8034b9a:	69fb      	ldr	r3, [r7, #28]
 8034b9c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034ba0:	6a3b      	ldr	r3, [r7, #32]
 8034ba2:	899b      	ldrh	r3, [r3, #12]
 8034ba4:	fbb2 f1f3 	udiv	r1, r2, r3
 8034ba8:	fb01 f303 	mul.w	r3, r1, r3
 8034bac:	1ad3      	subs	r3, r2, r3
 8034bae:	1ac3      	subs	r3, r0, r3
 8034bb0:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8034bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8034bb4:	697b      	ldr	r3, [r7, #20]
 8034bb6:	429a      	cmp	r2, r3
 8034bb8:	d901      	bls.n	8034bbe <f_write+0x342>
 8034bba:	697b      	ldr	r3, [r7, #20]
 8034bbc:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8034bbe:	69fb      	ldr	r3, [r7, #28]
 8034bc0:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8034bc4:	69fb      	ldr	r3, [r7, #28]
 8034bc6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8034bca:	6a3b      	ldr	r3, [r7, #32]
 8034bcc:	899b      	ldrh	r3, [r3, #12]
 8034bce:	b29b      	uxth	r3, r3
 8034bd0:	2200      	movs	r2, #0
 8034bd2:	603b      	str	r3, [r7, #0]
 8034bd4:	607a      	str	r2, [r7, #4]
 8034bd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8034bda:	f7eb fc01 	bl	80203e0 <__aeabi_uldivmod>
 8034bde:	4613      	mov	r3, r2
 8034be0:	4423      	add	r3, r4
 8034be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8034be4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8034be6:	4618      	mov	r0, r3
 8034be8:	f7fb fd0d 	bl	8030606 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8034bec:	69fb      	ldr	r3, [r7, #28]
 8034bee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034bf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8034bf6:	b2da      	uxtb	r2, r3
 8034bf8:	69fb      	ldr	r3, [r7, #28]
 8034bfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8034bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034c02:	4413      	add	r3, r2
 8034c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8034c06:	69fb      	ldr	r3, [r7, #28]
 8034c08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034c0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8034c0e:	2000      	movs	r0, #0
 8034c10:	4688      	mov	r8, r1
 8034c12:	4681      	mov	r9, r0
 8034c14:	eb12 0a08 	adds.w	sl, r2, r8
 8034c18:	eb43 0b09 	adc.w	fp, r3, r9
 8034c1c:	69fb      	ldr	r3, [r7, #28]
 8034c1e:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8034c22:	69fb      	ldr	r3, [r7, #28]
 8034c24:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8034c28:	69fb      	ldr	r3, [r7, #28]
 8034c2a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8034c2e:	4290      	cmp	r0, r2
 8034c30:	eb71 0403 	sbcs.w	r4, r1, r3
 8034c34:	d201      	bcs.n	8034c3a <f_write+0x3be>
 8034c36:	4610      	mov	r0, r2
 8034c38:	4619      	mov	r1, r3
 8034c3a:	69fb      	ldr	r3, [r7, #28]
 8034c3c:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8034c40:	693b      	ldr	r3, [r7, #16]
 8034c42:	681a      	ldr	r2, [r3, #0]
 8034c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034c46:	441a      	add	r2, r3
 8034c48:	693b      	ldr	r3, [r7, #16]
 8034c4a:	601a      	str	r2, [r3, #0]
 8034c4c:	697a      	ldr	r2, [r7, #20]
 8034c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034c50:	1ad3      	subs	r3, r2, r3
 8034c52:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 8034c54:	697b      	ldr	r3, [r7, #20]
 8034c56:	2b00      	cmp	r3, #0
 8034c58:	f47f ae64 	bne.w	8034924 <f_write+0xa8>
 8034c5c:	e000      	b.n	8034c60 <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8034c5e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8034c60:	69fb      	ldr	r3, [r7, #28]
 8034c62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8034c6a:	b2da      	uxtb	r2, r3
 8034c6c:	69fb      	ldr	r3, [r7, #28]
 8034c6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8034c72:	6a3b      	ldr	r3, [r7, #32]
 8034c74:	2100      	movs	r1, #0
 8034c76:	4618      	mov	r0, r3
 8034c78:	f7fb fd59 	bl	803072e <unlock_fs>
 8034c7c:	2300      	movs	r3, #0
}
 8034c7e:	4618      	mov	r0, r3
 8034c80:	3744      	adds	r7, #68	; 0x44
 8034c82:	46bd      	mov	sp, r7
 8034c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08034c88 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8034c88:	b580      	push	{r7, lr}
 8034c8a:	b09c      	sub	sp, #112	; 0x70
 8034c8c:	af00      	add	r7, sp, #0
 8034c8e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8034c90:	687b      	ldr	r3, [r7, #4]
 8034c92:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8034c96:	4611      	mov	r1, r2
 8034c98:	4618      	mov	r0, r3
 8034c9a:	f7ff f883 	bl	8033da4 <validate>
 8034c9e:	4603      	mov	r3, r0
 8034ca0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 8034ca4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8034ca8:	2b00      	cmp	r3, #0
 8034caa:	f040 8123 	bne.w	8034ef4 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8034cae:	687b      	ldr	r3, [r7, #4]
 8034cb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8034cb8:	2b00      	cmp	r3, #0
 8034cba:	f000 811b 	beq.w	8034ef4 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8034cbe:	687b      	ldr	r3, [r7, #4]
 8034cc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034cc4:	b25b      	sxtb	r3, r3
 8034cc6:	2b00      	cmp	r3, #0
 8034cc8:	da1c      	bge.n	8034d04 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8034cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034ccc:	7858      	ldrb	r0, [r3, #1]
 8034cce:	687b      	ldr	r3, [r7, #4]
 8034cd0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8034cd4:	687b      	ldr	r3, [r7, #4]
 8034cd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8034cd8:	2301      	movs	r3, #1
 8034cda:	f7fb fa71 	bl	80301c0 <disk_write>
 8034cde:	4603      	mov	r3, r0
 8034ce0:	2b00      	cmp	r3, #0
 8034ce2:	d006      	beq.n	8034cf2 <f_sync+0x6a>
 8034ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034ce6:	2101      	movs	r1, #1
 8034ce8:	4618      	mov	r0, r3
 8034cea:	f7fb fd20 	bl	803072e <unlock_fs>
 8034cee:	2301      	movs	r3, #1
 8034cf0:	e109      	b.n	8034f06 <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8034cf2:	687b      	ldr	r3, [r7, #4]
 8034cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034cfc:	b2da      	uxtb	r2, r3
 8034cfe:	687b      	ldr	r3, [r7, #4]
 8034d00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8034d04:	f7f7 fdee 	bl	802c8e4 <get_fattime>
 8034d08:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8034d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034d0c:	781b      	ldrb	r3, [r3, #0]
 8034d0e:	2b04      	cmp	r3, #4
 8034d10:	f040 80a5 	bne.w	8034e5e <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8034d14:	687b      	ldr	r3, [r7, #4]
 8034d16:	4618      	mov	r0, r3
 8034d18:	f7fc fb04 	bl	8031324 <fill_first_frag>
 8034d1c:	4603      	mov	r3, r0
 8034d1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8034d22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8034d26:	2b00      	cmp	r3, #0
 8034d28:	d10a      	bne.n	8034d40 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8034d2a:	6878      	ldr	r0, [r7, #4]
 8034d2c:	687b      	ldr	r3, [r7, #4]
 8034d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8034d34:	4619      	mov	r1, r3
 8034d36:	f7fc fb24 	bl	8031382 <fill_last_frag>
 8034d3a:	4603      	mov	r3, r0
 8034d3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 8034d40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8034d44:	2b00      	cmp	r3, #0
 8034d46:	f040 80d5 	bne.w	8034ef4 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 8034d4a:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8034d4e:	f001 f83a 	bl	8035dc6 <ff_memalloc>
 8034d52:	6638      	str	r0, [r7, #96]	; 0x60
 8034d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8034d56:	2b00      	cmp	r3, #0
 8034d58:	d106      	bne.n	8034d68 <f_sync+0xe0>
 8034d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034d5c:	2111      	movs	r1, #17
 8034d5e:	4618      	mov	r0, r3
 8034d60:	f7fb fce5 	bl	803072e <unlock_fs>
 8034d64:	2311      	movs	r3, #17
 8034d66:	e0ce      	b.n	8034f06 <f_sync+0x27e>
 8034d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034d6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8034d6c:	611a      	str	r2, [r3, #16]
 8034d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034d70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8034d72:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8034d76:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8034d78:	687a      	ldr	r2, [r7, #4]
 8034d7a:	f107 0308 	add.w	r3, r7, #8
 8034d7e:	4611      	mov	r1, r2
 8034d80:	4618      	mov	r0, r3
 8034d82:	f7fd fad7 	bl	8032334 <load_obj_dir>
 8034d86:	4603      	mov	r3, r0
 8034d88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 8034d8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8034d90:	2b00      	cmp	r3, #0
 8034d92:	d160      	bne.n	8034e56 <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8034d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034d96:	695b      	ldr	r3, [r3, #20]
 8034d98:	3304      	adds	r3, #4
 8034d9a:	781a      	ldrb	r2, [r3, #0]
 8034d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034d9e:	695b      	ldr	r3, [r3, #20]
 8034da0:	3304      	adds	r3, #4
 8034da2:	f042 0220 	orr.w	r2, r2, #32
 8034da6:	b2d2      	uxtb	r2, r2
 8034da8:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8034daa:	687b      	ldr	r3, [r7, #4]
 8034dac:	79da      	ldrb	r2, [r3, #7]
 8034dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034db0:	695b      	ldr	r3, [r3, #20]
 8034db2:	3321      	adds	r3, #33	; 0x21
 8034db4:	f042 0201 	orr.w	r2, r2, #1
 8034db8:	b2d2      	uxtb	r2, r2
 8034dba:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8034dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034dbe:	695b      	ldr	r3, [r3, #20]
 8034dc0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8034dc4:	687b      	ldr	r3, [r7, #4]
 8034dc6:	689b      	ldr	r3, [r3, #8]
 8034dc8:	4619      	mov	r1, r3
 8034dca:	4610      	mov	r0, r2
 8034dcc:	f7fb fb67 	bl	803049e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8034dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034dd2:	695b      	ldr	r3, [r3, #20]
 8034dd4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8034dd8:	687b      	ldr	r3, [r7, #4]
 8034dda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8034dde:	4608      	mov	r0, r1
 8034de0:	f7fb fb89 	bl	80304f6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8034de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034de6:	695b      	ldr	r3, [r3, #20]
 8034de8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8034dec:	687b      	ldr	r3, [r7, #4]
 8034dee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8034df2:	4608      	mov	r0, r1
 8034df4:	f7fb fb7f 	bl	80304f6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8034df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034dfa:	695b      	ldr	r3, [r3, #20]
 8034dfc:	330c      	adds	r3, #12
 8034dfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8034e00:	4618      	mov	r0, r3
 8034e02:	f7fb fb4c 	bl	803049e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8034e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034e08:	695b      	ldr	r3, [r3, #20]
 8034e0a:	3315      	adds	r3, #21
 8034e0c:	2200      	movs	r2, #0
 8034e0e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8034e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034e12:	695b      	ldr	r3, [r3, #20]
 8034e14:	3310      	adds	r3, #16
 8034e16:	2100      	movs	r1, #0
 8034e18:	4618      	mov	r0, r3
 8034e1a:	f7fb fb40 	bl	803049e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8034e1e:	f107 0308 	add.w	r3, r7, #8
 8034e22:	4618      	mov	r0, r3
 8034e24:	f7fd fabc 	bl	80323a0 <store_xdir>
 8034e28:	4603      	mov	r3, r0
 8034e2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 8034e2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8034e32:	2b00      	cmp	r3, #0
 8034e34:	d10f      	bne.n	8034e56 <f_sync+0x1ce>
							res = sync_fs(fs);
 8034e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034e38:	4618      	mov	r0, r3
 8034e3a:	f7fb fe71 	bl	8030b20 <sync_fs>
 8034e3e:	4603      	mov	r3, r0
 8034e40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 8034e44:	687b      	ldr	r3, [r7, #4]
 8034e46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8034e4e:	b2da      	uxtb	r2, r3
 8034e50:	687b      	ldr	r3, [r7, #4]
 8034e52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 8034e56:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8034e58:	f000 ffc1 	bl	8035dde <ff_memfree>
 8034e5c:	e04a      	b.n	8034ef4 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8034e5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8034e60:	687b      	ldr	r3, [r7, #4]
 8034e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8034e64:	4619      	mov	r1, r3
 8034e66:	4610      	mov	r0, r2
 8034e68:	f7fb fe2c 	bl	8030ac4 <move_window>
 8034e6c:	4603      	mov	r3, r0
 8034e6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8034e72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8034e76:	2b00      	cmp	r3, #0
 8034e78:	d13c      	bne.n	8034ef4 <f_sync+0x26c>
					dir = fp->dir_ptr;
 8034e7a:	687b      	ldr	r3, [r7, #4]
 8034e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8034e7e:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8034e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8034e82:	330b      	adds	r3, #11
 8034e84:	781a      	ldrb	r2, [r3, #0]
 8034e86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8034e88:	330b      	adds	r3, #11
 8034e8a:	f042 0220 	orr.w	r2, r2, #32
 8034e8e:	b2d2      	uxtb	r2, r2
 8034e90:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8034e92:	687b      	ldr	r3, [r7, #4]
 8034e94:	6818      	ldr	r0, [r3, #0]
 8034e96:	687b      	ldr	r3, [r7, #4]
 8034e98:	689b      	ldr	r3, [r3, #8]
 8034e9a:	461a      	mov	r2, r3
 8034e9c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8034e9e:	f7fc fe97 	bl	8031bd0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8034ea2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8034ea4:	f103 001c 	add.w	r0, r3, #28
 8034ea8:	687b      	ldr	r3, [r7, #4]
 8034eaa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8034eae:	4613      	mov	r3, r2
 8034eb0:	4619      	mov	r1, r3
 8034eb2:	f7fb faf4 	bl	803049e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8034eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8034eb8:	3316      	adds	r3, #22
 8034eba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8034ebc:	4618      	mov	r0, r3
 8034ebe:	f7fb faee 	bl	803049e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8034ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8034ec4:	3312      	adds	r3, #18
 8034ec6:	2100      	movs	r1, #0
 8034ec8:	4618      	mov	r0, r3
 8034eca:	f7fb facd 	bl	8030468 <st_word>
					fs->wflag = 1;
 8034ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034ed0:	2201      	movs	r2, #1
 8034ed2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8034ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034ed6:	4618      	mov	r0, r3
 8034ed8:	f7fb fe22 	bl	8030b20 <sync_fs>
 8034edc:	4603      	mov	r3, r0
 8034ede:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 8034ee2:	687b      	ldr	r3, [r7, #4]
 8034ee4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8034eec:	b2da      	uxtb	r2, r3
 8034eee:	687b      	ldr	r3, [r7, #4]
 8034ef0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8034ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8034ef6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8034efa:	4611      	mov	r1, r2
 8034efc:	4618      	mov	r0, r3
 8034efe:	f7fb fc16 	bl	803072e <unlock_fs>
 8034f02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8034f06:	4618      	mov	r0, r3
 8034f08:	3770      	adds	r7, #112	; 0x70
 8034f0a:	46bd      	mov	sp, r7
 8034f0c:	bd80      	pop	{r7, pc}

08034f0e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8034f0e:	b580      	push	{r7, lr}
 8034f10:	b084      	sub	sp, #16
 8034f12:	af00      	add	r7, sp, #0
 8034f14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8034f16:	6878      	ldr	r0, [r7, #4]
 8034f18:	f7ff feb6 	bl	8034c88 <f_sync>
 8034f1c:	4603      	mov	r3, r0
 8034f1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8034f20:	7bfb      	ldrb	r3, [r7, #15]
 8034f22:	2b00      	cmp	r3, #0
 8034f24:	d11d      	bne.n	8034f62 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8034f26:	687b      	ldr	r3, [r7, #4]
 8034f28:	f107 0208 	add.w	r2, r7, #8
 8034f2c:	4611      	mov	r1, r2
 8034f2e:	4618      	mov	r0, r3
 8034f30:	f7fe ff38 	bl	8033da4 <validate>
 8034f34:	4603      	mov	r3, r0
 8034f36:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8034f38:	7bfb      	ldrb	r3, [r7, #15]
 8034f3a:	2b00      	cmp	r3, #0
 8034f3c:	d111      	bne.n	8034f62 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8034f3e:	687b      	ldr	r3, [r7, #4]
 8034f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034f42:	4618      	mov	r0, r3
 8034f44:	f7fb fd1a 	bl	803097c <dec_lock>
 8034f48:	4603      	mov	r3, r0
 8034f4a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8034f4c:	7bfb      	ldrb	r3, [r7, #15]
 8034f4e:	2b00      	cmp	r3, #0
 8034f50:	d102      	bne.n	8034f58 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8034f52:	687b      	ldr	r3, [r7, #4]
 8034f54:	2200      	movs	r2, #0
 8034f56:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8034f58:	68bb      	ldr	r3, [r7, #8]
 8034f5a:	2100      	movs	r1, #0
 8034f5c:	4618      	mov	r0, r3
 8034f5e:	f7fb fbe6 	bl	803072e <unlock_fs>
#endif
		}
	}
	return res;
 8034f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8034f64:	4618      	mov	r0, r3
 8034f66:	3710      	adds	r7, #16
 8034f68:	46bd      	mov	sp, r7
 8034f6a:	bd80      	pop	{r7, pc}

08034f6c <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of path */
)
{
 8034f6c:	b580      	push	{r7, lr}
 8034f6e:	b0e6      	sub	sp, #408	; 0x198
 8034f70:	af00      	add	r7, sp, #0
 8034f72:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8034f76:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8034f7a:	6018      	str	r0, [r3, #0]
 8034f7c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8034f80:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8034f84:	6019      	str	r1, [r3, #0]
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMBUF


	*buff = 0;
 8034f86:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8034f8a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8034f8e:	681b      	ldr	r3, [r3, #0]
 8034f90:	2200      	movs	r2, #0
 8034f92:	701a      	strb	r2, [r3, #0]
	/* Get logical drive */
	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 8034f94:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8034f98:	1d3b      	adds	r3, r7, #4
 8034f9a:	2200      	movs	r2, #0
 8034f9c:	4618      	mov	r0, r3
 8034f9e:	f7fe fb65 	bl	803366c <find_volume>
 8034fa2:	4603      	mov	r3, r0
 8034fa4:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
	if (res == FR_OK) {
 8034fa8:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8034fac:	2b00      	cmp	r3, #0
 8034fae:	f040 8148 	bne.w	8035242 <f_getcwd+0x2d6>
		dj.obj.fs = fs;
 8034fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8034fb6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		INIT_NAMBUF(fs);
 8034fba:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8034fbe:	f000 ff02 	bl	8035dc6 <ff_memalloc>
 8034fc2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8034fc6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8034fca:	2b00      	cmp	r3, #0
 8034fcc:	d107      	bne.n	8034fde <f_getcwd+0x72>
 8034fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8034fd2:	2111      	movs	r1, #17
 8034fd4:	4618      	mov	r0, r3
 8034fd6:	f7fb fbaa 	bl	803072e <unlock_fs>
 8034fda:	2311      	movs	r3, #17
 8034fdc:	e13b      	b.n	8035256 <f_getcwd+0x2ea>
 8034fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8034fe2:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8034fe6:	611a      	str	r2, [r3, #16]
 8034fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8034fec:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8034ff0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8034ff4:	615a      	str	r2, [r3, #20]
		i = len;			/* Bottom of buffer (directory stack base) */
 8034ff6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8034ffa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8034ffe:	681b      	ldr	r3, [r3, #0]
 8035000:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path) */
 8035004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8035008:	781b      	ldrb	r3, [r3, #0]
 803500a:	2b04      	cmp	r3, #4
 803500c:	f000 80da 	beq.w	80351c4 <f_getcwd+0x258>
			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
 8035010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8035014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035016:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 803501a:	e0c2      	b.n	80351a2 <f_getcwd+0x236>
				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 803501c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8035020:	2120      	movs	r1, #32
 8035022:	4618      	mov	r0, r3
 8035024:	f7fc fbdf 	bl	80317e6 <dir_sdi>
 8035028:	4603      	mov	r3, r0
 803502a:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 803502e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8035032:	2b00      	cmp	r3, #0
 8035034:	f040 80bf 	bne.w	80351b6 <f_getcwd+0x24a>
				res = move_window(fs, dj.sect);
 8035038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 803503c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8035040:	4611      	mov	r1, r2
 8035042:	4618      	mov	r0, r3
 8035044:	f7fb fd3e 	bl	8030ac4 <move_window>
 8035048:	4603      	mov	r3, r0
 803504a:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 803504e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8035052:	2b00      	cmp	r3, #0
 8035054:	f040 80b1 	bne.w	80351ba <f_getcwd+0x24e>
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 8035058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 803505c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8035060:	4611      	mov	r1, r2
 8035062:	4618      	mov	r0, r3
 8035064:	f7fc fd95 	bl	8031b92 <ld_clust>
 8035068:	4603      	mov	r3, r0
 803506a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				res = dir_sdi(&dj, 0);
 803506e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8035072:	2100      	movs	r1, #0
 8035074:	4618      	mov	r0, r3
 8035076:	f7fc fbb6 	bl	80317e6 <dir_sdi>
 803507a:	4603      	mov	r3, r0
 803507c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 8035080:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8035084:	2b00      	cmp	r3, #0
 8035086:	f040 809a 	bne.w	80351be <f_getcwd+0x252>
				do {							/* Find the entry links to the child directory */
					res = dir_read(&dj, 0);
 803508a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 803508e:	2100      	movs	r1, #0
 8035090:	4618      	mov	r0, r3
 8035092:	f7fd fa47 	bl	8032524 <dir_read>
 8035096:	4603      	mov	r3, r0
 8035098:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
					if (res != FR_OK) break;
 803509c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80350a0:	2b00      	cmp	r3, #0
 80350a2:	d11a      	bne.n	80350da <f_getcwd+0x16e>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 80350a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80350a8:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80350ac:	4611      	mov	r1, r2
 80350ae:	4618      	mov	r0, r3
 80350b0:	f7fc fd6f 	bl	8031b92 <ld_clust>
 80350b4:	4602      	mov	r2, r0
 80350b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80350ba:	4293      	cmp	r3, r2
 80350bc:	d00f      	beq.n	80350de <f_getcwd+0x172>
					res = dir_next(&dj, 0);
 80350be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80350c2:	2100      	movs	r1, #0
 80350c4:	4618      	mov	r0, r3
 80350c6:	f7fc fc22 	bl	803190e <dir_next>
 80350ca:	4603      	mov	r3, r0
 80350cc:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				} while (res == FR_OK);
 80350d0:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80350d4:	2b00      	cmp	r3, #0
 80350d6:	d0d8      	beq.n	803508a <f_getcwd+0x11e>
 80350d8:	e002      	b.n	80350e0 <f_getcwd+0x174>
					if (res != FR_OK) break;
 80350da:	bf00      	nop
 80350dc:	e000      	b.n	80350e0 <f_getcwd+0x174>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 80350de:	bf00      	nop
				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 80350e0:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80350e4:	2b04      	cmp	r3, #4
 80350e6:	d102      	bne.n	80350ee <f_getcwd+0x182>
 80350e8:	2302      	movs	r3, #2
 80350ea:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				if (res != FR_OK) break;
 80350ee:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80350f2:	2b00      	cmp	r3, #0
 80350f4:	d165      	bne.n	80351c2 <f_getcwd+0x256>
				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 80350f6:	f107 0208 	add.w	r2, r7, #8
 80350fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80350fe:	4611      	mov	r1, r2
 8035100:	4618      	mov	r0, r3
 8035102:	f7fd fe01 	bl	8032d08 <get_fileinfo>
				for (n = 0; fno.fname[n]; n++) ;
 8035106:	2300      	movs	r3, #0
 8035108:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 803510c:	e004      	b.n	8035118 <f_getcwd+0x1ac>
 803510e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8035112:	3301      	adds	r3, #1
 8035114:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8035118:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 803511c:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8035120:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8035124:	4413      	add	r3, r2
 8035126:	331a      	adds	r3, #26
 8035128:	781b      	ldrb	r3, [r3, #0]
 803512a:	2b00      	cmp	r3, #0
 803512c:	d1ef      	bne.n	803510e <f_getcwd+0x1a2>
				if (i < n + 3) {
 803512e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8035132:	3303      	adds	r3, #3
 8035134:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8035138:	429a      	cmp	r2, r3
 803513a:	d21f      	bcs.n	803517c <f_getcwd+0x210>
					res = FR_NOT_ENOUGH_CORE; break;
 803513c:	2311      	movs	r3, #17
 803513e:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8035142:	e03f      	b.n	80351c4 <f_getcwd+0x258>
				}
				while (n) buff[--i] = fno.fname[--n];
 8035144:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8035148:	3b01      	subs	r3, #1
 803514a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 803514e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8035152:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8035156:	681a      	ldr	r2, [r3, #0]
 8035158:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 803515c:	3b01      	subs	r3, #1
 803515e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8035162:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8035166:	4413      	add	r3, r2
 8035168:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 803516c:	f5a2 71c8 	sub.w	r1, r2, #400	; 0x190
 8035170:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8035174:	440a      	add	r2, r1
 8035176:	321a      	adds	r2, #26
 8035178:	7812      	ldrb	r2, [r2, #0]
 803517a:	701a      	strb	r2, [r3, #0]
 803517c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8035180:	2b00      	cmp	r3, #0
 8035182:	d1df      	bne.n	8035144 <f_getcwd+0x1d8>
				buff[--i] = '/';
 8035184:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8035188:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 803518c:	681a      	ldr	r2, [r3, #0]
 803518e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8035192:	3b01      	subs	r3, #1
 8035194:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8035198:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 803519c:	4413      	add	r3, r2
 803519e:	222f      	movs	r2, #47	; 0x2f
 80351a0:	701a      	strb	r2, [r3, #0]
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 80351a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80351a6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80351aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80351ae:	2b00      	cmp	r3, #0
 80351b0:	f47f af34 	bne.w	803501c <f_getcwd+0xb0>
 80351b4:	e006      	b.n	80351c4 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80351b6:	bf00      	nop
 80351b8:	e004      	b.n	80351c4 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80351ba:	bf00      	nop
 80351bc:	e002      	b.n	80351c4 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80351be:	bf00      	nop
 80351c0:	e000      	b.n	80351c4 <f_getcwd+0x258>
				if (res != FR_OK) break;
 80351c2:	bf00      	nop
			}
		}
		tp = buff;
 80351c4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80351c8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80351cc:	681b      	ldr	r3, [r3, #0]
 80351ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
		if (res == FR_OK) {
 80351d2:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80351d6:	2b00      	cmp	r3, #0
 80351d8:	d12b      	bne.n	8035232 <f_getcwd+0x2c6>
#if _VOLUMES >= 2
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
#endif
			if (i == len) {					/* Root-directory */
 80351da:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80351de:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80351e2:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80351e6:	681b      	ldr	r3, [r3, #0]
 80351e8:	429a      	cmp	r2, r3
 80351ea:	d107      	bne.n	80351fc <f_getcwd+0x290>
				*tp++ = '/';
 80351ec:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80351f0:	1c5a      	adds	r2, r3, #1
 80351f2:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 80351f6:	222f      	movs	r2, #47	; 0x2f
 80351f8:	701a      	strb	r2, [r3, #0]
 80351fa:	e01a      	b.n	8035232 <f_getcwd+0x2c6>
			} else {						/* Sub-directroy */
				do		/* Add stacked path str */
					*tp++ = buff[i++];
 80351fc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8035200:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8035204:	681a      	ldr	r2, [r3, #0]
 8035206:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 803520a:	1c59      	adds	r1, r3, #1
 803520c:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8035210:	441a      	add	r2, r3
 8035212:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8035216:	1c59      	adds	r1, r3, #1
 8035218:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 803521c:	7812      	ldrb	r2, [r2, #0]
 803521e:	701a      	strb	r2, [r3, #0]
				while (i < len);
 8035220:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8035224:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8035228:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 803522c:	681b      	ldr	r3, [r3, #0]
 803522e:	429a      	cmp	r2, r3
 8035230:	d3e4      	bcc.n	80351fc <f_getcwd+0x290>
			}
		}
		*tp = 0;
 8035232:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8035236:	2200      	movs	r2, #0
 8035238:	701a      	strb	r2, [r3, #0]
		FREE_NAMBUF();
 803523a:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 803523e:	f000 fdce 	bl	8035dde <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8035242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8035246:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 803524a:	4611      	mov	r1, r2
 803524c:	4618      	mov	r0, r3
 803524e:	f7fb fa6e 	bl	803072e <unlock_fs>
 8035252:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
}
 8035256:	4618      	mov	r0, r3
 8035258:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 803525c:	46bd      	mov	sp, r7
 803525e:	bd80      	pop	{r7, pc}

08035260 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8035260:	b580      	push	{r7, lr}
 8035262:	b086      	sub	sp, #24
 8035264:	af00      	add	r7, sp, #0
 8035266:	6078      	str	r0, [r7, #4]
 8035268:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 803526a:	687b      	ldr	r3, [r7, #4]
 803526c:	2b00      	cmp	r3, #0
 803526e:	d101      	bne.n	8035274 <f_opendir+0x14>
 8035270:	2309      	movs	r3, #9
 8035272:	e0ba      	b.n	80353ea <f_opendir+0x18a>

	/* Get logical drive */
	obj = &dp->obj;
 8035274:	687b      	ldr	r3, [r7, #4]
 8035276:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8035278:	f107 0108 	add.w	r1, r7, #8
 803527c:	463b      	mov	r3, r7
 803527e:	2200      	movs	r2, #0
 8035280:	4618      	mov	r0, r3
 8035282:	f7fe f9f3 	bl	803366c <find_volume>
 8035286:	4603      	mov	r3, r0
 8035288:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 803528a:	7dfb      	ldrb	r3, [r7, #23]
 803528c:	2b00      	cmp	r3, #0
 803528e:	f040 809f 	bne.w	80353d0 <f_opendir+0x170>
		obj->fs = fs;
 8035292:	68ba      	ldr	r2, [r7, #8]
 8035294:	693b      	ldr	r3, [r7, #16]
 8035296:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8035298:	f44f 608c 	mov.w	r0, #1120	; 0x460
 803529c:	f000 fd93 	bl	8035dc6 <ff_memalloc>
 80352a0:	60f8      	str	r0, [r7, #12]
 80352a2:	68fb      	ldr	r3, [r7, #12]
 80352a4:	2b00      	cmp	r3, #0
 80352a6:	d106      	bne.n	80352b6 <f_opendir+0x56>
 80352a8:	68bb      	ldr	r3, [r7, #8]
 80352aa:	2111      	movs	r1, #17
 80352ac:	4618      	mov	r0, r3
 80352ae:	f7fb fa3e 	bl	803072e <unlock_fs>
 80352b2:	2311      	movs	r3, #17
 80352b4:	e099      	b.n	80353ea <f_opendir+0x18a>
 80352b6:	68bb      	ldr	r3, [r7, #8]
 80352b8:	68fa      	ldr	r2, [r7, #12]
 80352ba:	611a      	str	r2, [r3, #16]
 80352bc:	68bb      	ldr	r3, [r7, #8]
 80352be:	68fa      	ldr	r2, [r7, #12]
 80352c0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80352c4:	615a      	str	r2, [r3, #20]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80352c6:	683b      	ldr	r3, [r7, #0]
 80352c8:	4619      	mov	r1, r3
 80352ca:	6878      	ldr	r0, [r7, #4]
 80352cc:	f7fe f80e 	bl	80332ec <follow_path>
 80352d0:	4603      	mov	r3, r0
 80352d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80352d4:	7dfb      	ldrb	r3, [r7, #23]
 80352d6:	2b00      	cmp	r3, #0
 80352d8:	d172      	bne.n	80353c0 <f_opendir+0x160>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80352da:	687b      	ldr	r3, [r7, #4]
 80352dc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80352e0:	b25b      	sxtb	r3, r3
 80352e2:	2b00      	cmp	r3, #0
 80352e4:	db47      	blt.n	8035376 <f_opendir+0x116>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80352e6:	693b      	ldr	r3, [r7, #16]
 80352e8:	799b      	ldrb	r3, [r3, #6]
 80352ea:	f003 0310 	and.w	r3, r3, #16
 80352ee:	2b00      	cmp	r3, #0
 80352f0:	d03f      	beq.n	8035372 <f_opendir+0x112>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 80352f2:	68bb      	ldr	r3, [r7, #8]
 80352f4:	781b      	ldrb	r3, [r3, #0]
 80352f6:	2b04      	cmp	r3, #4
 80352f8:	d130      	bne.n	803535c <f_opendir+0xfc>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 80352fa:	693b      	ldr	r3, [r7, #16]
 80352fc:	689a      	ldr	r2, [r3, #8]
 80352fe:	693b      	ldr	r3, [r7, #16]
 8035300:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8035302:	693b      	ldr	r3, [r7, #16]
 8035304:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8035308:	4613      	mov	r3, r2
 803530a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 803530e:	693a      	ldr	r2, [r7, #16]
 8035310:	79d2      	ldrb	r2, [r2, #7]
 8035312:	431a      	orrs	r2, r3
 8035314:	693b      	ldr	r3, [r7, #16]
 8035316:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 8035318:	687b      	ldr	r3, [r7, #4]
 803531a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 803531c:	693b      	ldr	r3, [r7, #16]
 803531e:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8035320:	68bb      	ldr	r3, [r7, #8]
 8035322:	695b      	ldr	r3, [r3, #20]
 8035324:	3334      	adds	r3, #52	; 0x34
 8035326:	4618      	mov	r0, r3
 8035328:	f7fa ffa0 	bl	803026c <ld_dword>
 803532c:	4602      	mov	r2, r0
 803532e:	693b      	ldr	r3, [r7, #16]
 8035330:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8035332:	68bb      	ldr	r3, [r7, #8]
 8035334:	695b      	ldr	r3, [r3, #20]
 8035336:	3338      	adds	r3, #56	; 0x38
 8035338:	4618      	mov	r0, r3
 803533a:	f7fa ffba 	bl	80302b2 <ld_qword>
 803533e:	4602      	mov	r2, r0
 8035340:	460b      	mov	r3, r1
 8035342:	6939      	ldr	r1, [r7, #16]
 8035344:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8035348:	68bb      	ldr	r3, [r7, #8]
 803534a:	695b      	ldr	r3, [r3, #20]
 803534c:	3321      	adds	r3, #33	; 0x21
 803534e:	781b      	ldrb	r3, [r3, #0]
 8035350:	f003 0302 	and.w	r3, r3, #2
 8035354:	b2da      	uxtb	r2, r3
 8035356:	693b      	ldr	r3, [r7, #16]
 8035358:	71da      	strb	r2, [r3, #7]
 803535a:	e00c      	b.n	8035376 <f_opendir+0x116>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 803535c:	68ba      	ldr	r2, [r7, #8]
 803535e:	687b      	ldr	r3, [r7, #4]
 8035360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8035362:	4619      	mov	r1, r3
 8035364:	4610      	mov	r0, r2
 8035366:	f7fc fc14 	bl	8031b92 <ld_clust>
 803536a:	4602      	mov	r2, r0
 803536c:	693b      	ldr	r3, [r7, #16]
 803536e:	609a      	str	r2, [r3, #8]
 8035370:	e001      	b.n	8035376 <f_opendir+0x116>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8035372:	2305      	movs	r3, #5
 8035374:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8035376:	7dfb      	ldrb	r3, [r7, #23]
 8035378:	2b00      	cmp	r3, #0
 803537a:	d121      	bne.n	80353c0 <f_opendir+0x160>
				obj->id = fs->id;
 803537c:	68bb      	ldr	r3, [r7, #8]
 803537e:	88da      	ldrh	r2, [r3, #6]
 8035380:	693b      	ldr	r3, [r7, #16]
 8035382:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8035384:	2100      	movs	r1, #0
 8035386:	6878      	ldr	r0, [r7, #4]
 8035388:	f7fc fa2d 	bl	80317e6 <dir_sdi>
 803538c:	4603      	mov	r3, r0
 803538e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8035390:	7dfb      	ldrb	r3, [r7, #23]
 8035392:	2b00      	cmp	r3, #0
 8035394:	d114      	bne.n	80353c0 <f_opendir+0x160>
					if (obj->sclust) {
 8035396:	693b      	ldr	r3, [r7, #16]
 8035398:	689b      	ldr	r3, [r3, #8]
 803539a:	2b00      	cmp	r3, #0
 803539c:	d00d      	beq.n	80353ba <f_opendir+0x15a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 803539e:	2100      	movs	r1, #0
 80353a0:	6878      	ldr	r0, [r7, #4]
 80353a2:	f7fb fa5d 	bl	8030860 <inc_lock>
 80353a6:	4602      	mov	r2, r0
 80353a8:	693b      	ldr	r3, [r7, #16]
 80353aa:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80353ac:	693b      	ldr	r3, [r7, #16]
 80353ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80353b0:	2b00      	cmp	r3, #0
 80353b2:	d105      	bne.n	80353c0 <f_opendir+0x160>
 80353b4:	2312      	movs	r3, #18
 80353b6:	75fb      	strb	r3, [r7, #23]
 80353b8:	e002      	b.n	80353c0 <f_opendir+0x160>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80353ba:	693b      	ldr	r3, [r7, #16]
 80353bc:	2200      	movs	r2, #0
 80353be:	62da      	str	r2, [r3, #44]	; 0x2c
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 80353c0:	68f8      	ldr	r0, [r7, #12]
 80353c2:	f000 fd0c 	bl	8035dde <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80353c6:	7dfb      	ldrb	r3, [r7, #23]
 80353c8:	2b04      	cmp	r3, #4
 80353ca:	d101      	bne.n	80353d0 <f_opendir+0x170>
 80353cc:	2305      	movs	r3, #5
 80353ce:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80353d0:	7dfb      	ldrb	r3, [r7, #23]
 80353d2:	2b00      	cmp	r3, #0
 80353d4:	d002      	beq.n	80353dc <f_opendir+0x17c>
 80353d6:	693b      	ldr	r3, [r7, #16]
 80353d8:	2200      	movs	r2, #0
 80353da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80353dc:	68bb      	ldr	r3, [r7, #8]
 80353de:	7dfa      	ldrb	r2, [r7, #23]
 80353e0:	4611      	mov	r1, r2
 80353e2:	4618      	mov	r0, r3
 80353e4:	f7fb f9a3 	bl	803072e <unlock_fs>
 80353e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80353ea:	4618      	mov	r0, r3
 80353ec:	3718      	adds	r7, #24
 80353ee:	46bd      	mov	sp, r7
 80353f0:	bd80      	pop	{r7, pc}

080353f2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80353f2:	b580      	push	{r7, lr}
 80353f4:	b084      	sub	sp, #16
 80353f6:	af00      	add	r7, sp, #0
 80353f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80353fa:	687b      	ldr	r3, [r7, #4]
 80353fc:	f107 0208 	add.w	r2, r7, #8
 8035400:	4611      	mov	r1, r2
 8035402:	4618      	mov	r0, r3
 8035404:	f7fe fcce 	bl	8033da4 <validate>
 8035408:	4603      	mov	r3, r0
 803540a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 803540c:	7bfb      	ldrb	r3, [r7, #15]
 803540e:	2b00      	cmp	r3, #0
 8035410:	d115      	bne.n	803543e <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8035412:	687b      	ldr	r3, [r7, #4]
 8035414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035416:	2b00      	cmp	r3, #0
 8035418:	d006      	beq.n	8035428 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 803541a:	687b      	ldr	r3, [r7, #4]
 803541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803541e:	4618      	mov	r0, r3
 8035420:	f7fb faac 	bl	803097c <dec_lock>
 8035424:	4603      	mov	r3, r0
 8035426:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8035428:	7bfb      	ldrb	r3, [r7, #15]
 803542a:	2b00      	cmp	r3, #0
 803542c:	d102      	bne.n	8035434 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 803542e:	687b      	ldr	r3, [r7, #4]
 8035430:	2200      	movs	r2, #0
 8035432:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8035434:	68bb      	ldr	r3, [r7, #8]
 8035436:	2100      	movs	r1, #0
 8035438:	4618      	mov	r0, r3
 803543a:	f7fb f978 	bl	803072e <unlock_fs>
#endif
	}
	return res;
 803543e:	7bfb      	ldrb	r3, [r7, #15]
}
 8035440:	4618      	mov	r0, r3
 8035442:	3710      	adds	r7, #16
 8035444:	46bd      	mov	sp, r7
 8035446:	bd80      	pop	{r7, pc}

08035448 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8035448:	b580      	push	{r7, lr}
 803544a:	b086      	sub	sp, #24
 803544c:	af00      	add	r7, sp, #0
 803544e:	6078      	str	r0, [r7, #4]
 8035450:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8035452:	687b      	ldr	r3, [r7, #4]
 8035454:	f107 020c 	add.w	r2, r7, #12
 8035458:	4611      	mov	r1, r2
 803545a:	4618      	mov	r0, r3
 803545c:	f7fe fca2 	bl	8033da4 <validate>
 8035460:	4603      	mov	r3, r0
 8035462:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8035464:	7dfb      	ldrb	r3, [r7, #23]
 8035466:	2b00      	cmp	r3, #0
 8035468:	d140      	bne.n	80354ec <f_readdir+0xa4>
		if (!fno) {
 803546a:	683b      	ldr	r3, [r7, #0]
 803546c:	2b00      	cmp	r3, #0
 803546e:	d106      	bne.n	803547e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8035470:	2100      	movs	r1, #0
 8035472:	6878      	ldr	r0, [r7, #4]
 8035474:	f7fc f9b7 	bl	80317e6 <dir_sdi>
 8035478:	4603      	mov	r3, r0
 803547a:	75fb      	strb	r3, [r7, #23]
 803547c:	e036      	b.n	80354ec <f_readdir+0xa4>
		} else {
			INIT_NAMBUF(fs);
 803547e:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8035482:	f000 fca0 	bl	8035dc6 <ff_memalloc>
 8035486:	6138      	str	r0, [r7, #16]
 8035488:	693b      	ldr	r3, [r7, #16]
 803548a:	2b00      	cmp	r3, #0
 803548c:	d106      	bne.n	803549c <f_readdir+0x54>
 803548e:	68fb      	ldr	r3, [r7, #12]
 8035490:	2111      	movs	r1, #17
 8035492:	4618      	mov	r0, r3
 8035494:	f7fb f94b 	bl	803072e <unlock_fs>
 8035498:	2311      	movs	r3, #17
 803549a:	e02e      	b.n	80354fa <f_readdir+0xb2>
 803549c:	68fb      	ldr	r3, [r7, #12]
 803549e:	693a      	ldr	r2, [r7, #16]
 80354a0:	611a      	str	r2, [r3, #16]
 80354a2:	68fb      	ldr	r3, [r7, #12]
 80354a4:	693a      	ldr	r2, [r7, #16]
 80354a6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80354aa:	615a      	str	r2, [r3, #20]
			res = dir_read(dp, 0);			/* Read an item */
 80354ac:	2100      	movs	r1, #0
 80354ae:	6878      	ldr	r0, [r7, #4]
 80354b0:	f7fd f838 	bl	8032524 <dir_read>
 80354b4:	4603      	mov	r3, r0
 80354b6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80354b8:	7dfb      	ldrb	r3, [r7, #23]
 80354ba:	2b04      	cmp	r3, #4
 80354bc:	d101      	bne.n	80354c2 <f_readdir+0x7a>
 80354be:	2300      	movs	r3, #0
 80354c0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 80354c2:	7dfb      	ldrb	r3, [r7, #23]
 80354c4:	2b00      	cmp	r3, #0
 80354c6:	d10e      	bne.n	80354e6 <f_readdir+0x9e>
				get_fileinfo(dp, fno);		/* Get the object information */
 80354c8:	6839      	ldr	r1, [r7, #0]
 80354ca:	6878      	ldr	r0, [r7, #4]
 80354cc:	f7fd fc1c 	bl	8032d08 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80354d0:	2100      	movs	r1, #0
 80354d2:	6878      	ldr	r0, [r7, #4]
 80354d4:	f7fc fa1b 	bl	803190e <dir_next>
 80354d8:	4603      	mov	r3, r0
 80354da:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80354dc:	7dfb      	ldrb	r3, [r7, #23]
 80354de:	2b04      	cmp	r3, #4
 80354e0:	d101      	bne.n	80354e6 <f_readdir+0x9e>
 80354e2:	2300      	movs	r3, #0
 80354e4:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 80354e6:	6938      	ldr	r0, [r7, #16]
 80354e8:	f000 fc79 	bl	8035dde <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 80354ec:	68fb      	ldr	r3, [r7, #12]
 80354ee:	7dfa      	ldrb	r2, [r7, #23]
 80354f0:	4611      	mov	r1, r2
 80354f2:	4618      	mov	r0, r3
 80354f4:	f7fb f91b 	bl	803072e <unlock_fs>
 80354f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80354fa:	4618      	mov	r0, r3
 80354fc:	3718      	adds	r7, #24
 80354fe:	46bd      	mov	sp, r7
 8035500:	bd80      	pop	{r7, pc}

08035502 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8035502:	b580      	push	{r7, lr}
 8035504:	b098      	sub	sp, #96	; 0x60
 8035506:	af00      	add	r7, sp, #0
 8035508:	6078      	str	r0, [r7, #4]
 803550a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 803550c:	f107 0108 	add.w	r1, r7, #8
 8035510:	1d3b      	adds	r3, r7, #4
 8035512:	2200      	movs	r2, #0
 8035514:	4618      	mov	r0, r3
 8035516:	f7fe f8a9 	bl	803366c <find_volume>
 803551a:	4603      	mov	r3, r0
 803551c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8035520:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8035524:	2b00      	cmp	r3, #0
 8035526:	d139      	bne.n	803559c <f_stat+0x9a>
		INIT_NAMBUF(dj.obj.fs);
 8035528:	f44f 608c 	mov.w	r0, #1120	; 0x460
 803552c:	f000 fc4b 	bl	8035dc6 <ff_memalloc>
 8035530:	65b8      	str	r0, [r7, #88]	; 0x58
 8035532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8035534:	2b00      	cmp	r3, #0
 8035536:	d106      	bne.n	8035546 <f_stat+0x44>
 8035538:	68bb      	ldr	r3, [r7, #8]
 803553a:	2111      	movs	r1, #17
 803553c:	4618      	mov	r0, r3
 803553e:	f7fb f8f6 	bl	803072e <unlock_fs>
 8035542:	2311      	movs	r3, #17
 8035544:	e033      	b.n	80355ae <f_stat+0xac>
 8035546:	68bb      	ldr	r3, [r7, #8]
 8035548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 803554a:	611a      	str	r2, [r3, #16]
 803554c:	68bb      	ldr	r3, [r7, #8]
 803554e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8035550:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8035554:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8035556:	687a      	ldr	r2, [r7, #4]
 8035558:	f107 0308 	add.w	r3, r7, #8
 803555c:	4611      	mov	r1, r2
 803555e:	4618      	mov	r0, r3
 8035560:	f7fd fec4 	bl	80332ec <follow_path>
 8035564:	4603      	mov	r3, r0
 8035566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 803556a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 803556e:	2b00      	cmp	r3, #0
 8035570:	d111      	bne.n	8035596 <f_stat+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8035572:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8035576:	b25b      	sxtb	r3, r3
 8035578:	2b00      	cmp	r3, #0
 803557a:	da03      	bge.n	8035584 <f_stat+0x82>
				res = FR_INVALID_NAME;
 803557c:	2306      	movs	r3, #6
 803557e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8035582:	e008      	b.n	8035596 <f_stat+0x94>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8035584:	683b      	ldr	r3, [r7, #0]
 8035586:	2b00      	cmp	r3, #0
 8035588:	d005      	beq.n	8035596 <f_stat+0x94>
 803558a:	f107 0308 	add.w	r3, r7, #8
 803558e:	6839      	ldr	r1, [r7, #0]
 8035590:	4618      	mov	r0, r3
 8035592:	f7fd fbb9 	bl	8032d08 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 8035596:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8035598:	f000 fc21 	bl	8035dde <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 803559c:	68bb      	ldr	r3, [r7, #8]
 803559e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80355a2:	4611      	mov	r1, r2
 80355a4:	4618      	mov	r0, r3
 80355a6:	f7fb f8c2 	bl	803072e <unlock_fs>
 80355aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80355ae:	4618      	mov	r0, r3
 80355b0:	3760      	adds	r7, #96	; 0x60
 80355b2:	46bd      	mov	sp, r7
 80355b4:	bd80      	pop	{r7, pc}

080355b6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80355b6:	b580      	push	{r7, lr}
 80355b8:	b0bc      	sub	sp, #240	; 0xf0
 80355ba:	af00      	add	r7, sp, #0
 80355bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80355be:	2300      	movs	r3, #0
 80355c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80355c4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80355c8:	1d3b      	adds	r3, r7, #4
 80355ca:	2202      	movs	r2, #2
 80355cc:	4618      	mov	r0, r3
 80355ce:	f7fe f84d 	bl	803366c <find_volume>
 80355d2:	4603      	mov	r3, r0
 80355d4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	dj.obj.fs = fs;
 80355d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80355da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (res == FR_OK) {
 80355de:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80355e2:	2b00      	cmp	r3, #0
 80355e4:	f040 80f9 	bne.w	80357da <f_unlink+0x224>
		INIT_NAMBUF(fs);
 80355e8:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80355ec:	f000 fbeb 	bl	8035dc6 <ff_memalloc>
 80355f0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 80355f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80355f8:	2b00      	cmp	r3, #0
 80355fa:	d106      	bne.n	803560a <f_unlink+0x54>
 80355fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80355fe:	2111      	movs	r1, #17
 8035600:	4618      	mov	r0, r3
 8035602:	f7fb f894 	bl	803072e <unlock_fs>
 8035606:	2311      	movs	r3, #17
 8035608:	e0f0      	b.n	80357ec <f_unlink+0x236>
 803560a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803560c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8035610:	611a      	str	r2, [r3, #16]
 8035612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035614:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8035618:	f502 7200 	add.w	r2, r2, #512	; 0x200
 803561c:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);		/* Follow the file path */
 803561e:	687a      	ldr	r2, [r7, #4]
 8035620:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8035624:	4611      	mov	r1, r2
 8035626:	4618      	mov	r0, r3
 8035628:	f7fd fe60 	bl	80332ec <follow_path>
 803562c:	4603      	mov	r3, r0
 803562e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8035632:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8035636:	2b00      	cmp	r3, #0
 8035638:	d108      	bne.n	803564c <f_unlink+0x96>
 803563a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 803563e:	f003 0320 	and.w	r3, r3, #32
 8035642:	2b00      	cmp	r3, #0
 8035644:	d002      	beq.n	803564c <f_unlink+0x96>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8035646:	2306      	movs	r3, #6
 8035648:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 803564c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8035650:	2b00      	cmp	r3, #0
 8035652:	d108      	bne.n	8035666 <f_unlink+0xb0>
 8035654:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8035658:	2102      	movs	r1, #2
 803565a:	4618      	mov	r0, r3
 803565c:	f7fb f882 	bl	8030764 <chk_lock>
 8035660:	4603      	mov	r3, r0
 8035662:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8035666:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 803566a:	2b00      	cmp	r3, #0
 803566c:	f040 80b1 	bne.w	80357d2 <f_unlink+0x21c>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8035670:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8035674:	b25b      	sxtb	r3, r3
 8035676:	2b00      	cmp	r3, #0
 8035678:	da03      	bge.n	8035682 <f_unlink+0xcc>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 803567a:	2306      	movs	r3, #6
 803567c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8035680:	e008      	b.n	8035694 <f_unlink+0xde>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8035682:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8035686:	f003 0301 	and.w	r3, r3, #1
 803568a:	2b00      	cmp	r3, #0
 803568c:	d002      	beq.n	8035694 <f_unlink+0xde>
					res = FR_DENIED;		/* Cannot remove R/O object */
 803568e:	2307      	movs	r3, #7
 8035690:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				}
			}
			if (res == FR_OK) {
 8035694:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8035698:	2b00      	cmp	r3, #0
 803569a:	d170      	bne.n	803577e <f_unlink+0x1c8>
#if _FS_EXFAT
				obj.fs = fs;
 803569c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803569e:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 80356a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80356a2:	781b      	ldrb	r3, [r3, #0]
 80356a4:	2b04      	cmp	r3, #4
 80356a6:	d11d      	bne.n	80356e4 <f_unlink+0x12e>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 80356a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80356aa:	695b      	ldr	r3, [r3, #20]
 80356ac:	3334      	adds	r3, #52	; 0x34
 80356ae:	4618      	mov	r0, r3
 80356b0:	f7fa fddc 	bl	803026c <ld_dword>
 80356b4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80356b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80356bc:	613b      	str	r3, [r7, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80356be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80356c0:	695b      	ldr	r3, [r3, #20]
 80356c2:	3338      	adds	r3, #56	; 0x38
 80356c4:	4618      	mov	r0, r3
 80356c6:	f7fa fdf4 	bl	80302b2 <ld_qword>
 80356ca:	4602      	mov	r2, r0
 80356cc:	460b      	mov	r3, r1
 80356ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80356d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80356d4:	695b      	ldr	r3, [r3, #20]
 80356d6:	3321      	adds	r3, #33	; 0x21
 80356d8:	781b      	ldrb	r3, [r3, #0]
 80356da:	f003 0302 	and.w	r3, r3, #2
 80356de:	b2db      	uxtb	r3, r3
 80356e0:	73fb      	strb	r3, [r7, #15]
 80356e2:	e008      	b.n	80356f6 <f_unlink+0x140>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80356e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80356e6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80356ea:	4611      	mov	r1, r2
 80356ec:	4618      	mov	r0, r3
 80356ee:	f7fc fa50 	bl	8031b92 <ld_clust>
 80356f2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80356f6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80356fa:	f003 0310 	and.w	r3, r3, #16
 80356fe:	2b00      	cmp	r3, #0
 8035700:	d03d      	beq.n	803577e <f_unlink+0x1c8>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8035702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035706:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 803570a:	429a      	cmp	r2, r3
 803570c:	d103      	bne.n	8035716 <f_unlink+0x160>
						res = FR_DENIED;
 803570e:	2307      	movs	r3, #7
 8035710:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8035714:	e033      	b.n	803577e <f_unlink+0x1c8>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8035716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035718:	643b      	str	r3, [r7, #64]	; 0x40
						sdj.obj.sclust = dclst;
 803571a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 803571e:	64bb      	str	r3, [r7, #72]	; 0x48
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 8035720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035722:	781b      	ldrb	r3, [r3, #0]
 8035724:	2b04      	cmp	r3, #4
 8035726:	d106      	bne.n	8035736 <f_unlink+0x180>
							sdj.obj.objsize = obj.objsize;
 8035728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 803572c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
							sdj.obj.stat = obj.stat;
 8035730:	7bfb      	ldrb	r3, [r7, #15]
 8035732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 8035736:	f107 0340 	add.w	r3, r7, #64	; 0x40
 803573a:	2100      	movs	r1, #0
 803573c:	4618      	mov	r0, r3
 803573e:	f7fc f852 	bl	80317e6 <dir_sdi>
 8035742:	4603      	mov	r3, r0
 8035744:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						if (res == FR_OK) {
 8035748:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 803574c:	2b00      	cmp	r3, #0
 803574e:	d116      	bne.n	803577e <f_unlink+0x1c8>
							res = dir_read(&sdj, 0);			/* Read an item */
 8035750:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8035754:	2100      	movs	r1, #0
 8035756:	4618      	mov	r0, r3
 8035758:	f7fc fee4 	bl	8032524 <dir_read>
 803575c:	4603      	mov	r3, r0
 803575e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8035762:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8035766:	2b00      	cmp	r3, #0
 8035768:	d102      	bne.n	8035770 <f_unlink+0x1ba>
 803576a:	2307      	movs	r3, #7
 803576c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8035770:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8035774:	2b04      	cmp	r3, #4
 8035776:	d102      	bne.n	803577e <f_unlink+0x1c8>
 8035778:	2300      	movs	r3, #0
 803577a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						}
					}
				}
			}
			if (res == FR_OK) {
 803577e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8035782:	2b00      	cmp	r3, #0
 8035784:	d125      	bne.n	80357d2 <f_unlink+0x21c>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8035786:	f107 0390 	add.w	r3, r7, #144	; 0x90
 803578a:	4618      	mov	r0, r3
 803578c:	f7fd fa64 	bl	8032c58 <dir_remove>
 8035790:	4603      	mov	r3, r0
 8035792:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8035796:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 803579a:	2b00      	cmp	r3, #0
 803579c:	d10e      	bne.n	80357bc <f_unlink+0x206>
 803579e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80357a2:	2b00      	cmp	r3, #0
 80357a4:	d00a      	beq.n	80357bc <f_unlink+0x206>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 80357a6:	f107 0308 	add.w	r3, r7, #8
 80357aa:	2200      	movs	r2, #0
 80357ac:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80357b0:	4618      	mov	r0, r3
 80357b2:	f7fb fe17 	bl	80313e4 <remove_chain>
 80357b6:	4603      	mov	r3, r0
 80357b8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80357bc:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80357c0:	2b00      	cmp	r3, #0
 80357c2:	d106      	bne.n	80357d2 <f_unlink+0x21c>
 80357c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80357c6:	4618      	mov	r0, r3
 80357c8:	f7fb f9aa 	bl	8030b20 <sync_fs>
 80357cc:	4603      	mov	r3, r0
 80357ce:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			}
		}
		FREE_NAMBUF();
 80357d2:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80357d6:	f000 fb02 	bl	8035dde <ff_memfree>
	}

	LEAVE_FF(fs, res);
 80357da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80357dc:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 80357e0:	4611      	mov	r1, r2
 80357e2:	4618      	mov	r0, r3
 80357e4:	f7fa ffa3 	bl	803072e <unlock_fs>
 80357e8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 80357ec:	4618      	mov	r0, r3
 80357ee:	37f0      	adds	r7, #240	; 0xf0
 80357f0:	46bd      	mov	sp, r7
 80357f2:	bd80      	pop	{r7, pc}

080357f4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80357f4:	b5b0      	push	{r4, r5, r7, lr}
 80357f6:	b0a0      	sub	sp, #128	; 0x80
 80357f8:	af00      	add	r7, sp, #0
 80357fa:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80357fc:	f107 010c 	add.w	r1, r7, #12
 8035800:	1d3b      	adds	r3, r7, #4
 8035802:	2202      	movs	r2, #2
 8035804:	4618      	mov	r0, r3
 8035806:	f7fd ff31 	bl	803366c <find_volume>
 803580a:	4603      	mov	r3, r0
 803580c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8035810:	68fb      	ldr	r3, [r7, #12]
 8035812:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8035814:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035818:	2b00      	cmp	r3, #0
 803581a:	f040 815a 	bne.w	8035ad2 <f_mkdir+0x2de>
		INIT_NAMBUF(fs);
 803581e:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8035822:	f000 fad0 	bl	8035dc6 <ff_memalloc>
 8035826:	66f8      	str	r0, [r7, #108]	; 0x6c
 8035828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803582a:	2b00      	cmp	r3, #0
 803582c:	d106      	bne.n	803583c <f_mkdir+0x48>
 803582e:	68fb      	ldr	r3, [r7, #12]
 8035830:	2111      	movs	r1, #17
 8035832:	4618      	mov	r0, r3
 8035834:	f7fa ff7b 	bl	803072e <unlock_fs>
 8035838:	2311      	movs	r3, #17
 803583a:	e153      	b.n	8035ae4 <f_mkdir+0x2f0>
 803583c:	68fb      	ldr	r3, [r7, #12]
 803583e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8035840:	611a      	str	r2, [r3, #16]
 8035842:	68fb      	ldr	r3, [r7, #12]
 8035844:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8035846:	f502 7200 	add.w	r2, r2, #512	; 0x200
 803584a:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);			/* Follow the file path */
 803584c:	687a      	ldr	r2, [r7, #4]
 803584e:	f107 0310 	add.w	r3, r7, #16
 8035852:	4611      	mov	r1, r2
 8035854:	4618      	mov	r0, r3
 8035856:	f7fd fd49 	bl	80332ec <follow_path>
 803585a:	4603      	mov	r3, r0
 803585c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8035860:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035864:	2b00      	cmp	r3, #0
 8035866:	d102      	bne.n	803586e <f_mkdir+0x7a>
 8035868:	2308      	movs	r3, #8
 803586a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 803586e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035872:	2b04      	cmp	r3, #4
 8035874:	d108      	bne.n	8035888 <f_mkdir+0x94>
 8035876:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 803587a:	f003 0320 	and.w	r3, r3, #32
 803587e:	2b00      	cmp	r3, #0
 8035880:	d002      	beq.n	8035888 <f_mkdir+0x94>
			res = FR_INVALID_NAME;
 8035882:	2306      	movs	r3, #6
 8035884:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8035888:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 803588c:	2b04      	cmp	r3, #4
 803588e:	f040 811d 	bne.w	8035acc <f_mkdir+0x2d8>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8035892:	f107 0310 	add.w	r3, r7, #16
 8035896:	2100      	movs	r1, #0
 8035898:	4618      	mov	r0, r3
 803589a:	f7fb fe57 	bl	803154c <create_chain>
 803589e:	66b8      	str	r0, [r7, #104]	; 0x68
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80358a0:	68fb      	ldr	r3, [r7, #12]
 80358a2:	895b      	ldrh	r3, [r3, #10]
 80358a4:	461a      	mov	r2, r3
 80358a6:	68fb      	ldr	r3, [r7, #12]
 80358a8:	899b      	ldrh	r3, [r3, #12]
 80358aa:	fb02 f303 	mul.w	r3, r2, r3
 80358ae:	2200      	movs	r2, #0
 80358b0:	461c      	mov	r4, r3
 80358b2:	4615      	mov	r5, r2
 80358b4:	e9c7 4508 	strd	r4, r5, [r7, #32]
			res = FR_OK;
 80358b8:	2300      	movs	r3, #0
 80358ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80358be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80358c0:	2b00      	cmp	r3, #0
 80358c2:	d102      	bne.n	80358ca <f_mkdir+0xd6>
 80358c4:	2307      	movs	r3, #7
 80358c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 80358ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80358cc:	2b01      	cmp	r3, #1
 80358ce:	d102      	bne.n	80358d6 <f_mkdir+0xe2>
 80358d0:	2302      	movs	r3, #2
 80358d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80358d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80358d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80358dc:	d102      	bne.n	80358e4 <f_mkdir+0xf0>
 80358de:	2301      	movs	r3, #1
 80358e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80358e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80358e8:	2b00      	cmp	r3, #0
 80358ea:	d106      	bne.n	80358fa <f_mkdir+0x106>
 80358ec:	68fb      	ldr	r3, [r7, #12]
 80358ee:	4618      	mov	r0, r3
 80358f0:	f7fb f8a4 	bl	8030a3c <sync_window>
 80358f4:	4603      	mov	r3, r0
 80358f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			tm = GET_FATTIME();
 80358fa:	f7f6 fff3 	bl	802c8e4 <get_fattime>
 80358fe:	6678      	str	r0, [r7, #100]	; 0x64
			if (res == FR_OK) {					/* Initialize the new directory table */
 8035900:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035904:	2b00      	cmp	r3, #0
 8035906:	d170      	bne.n	80359ea <f_mkdir+0x1f6>
				dsc = clust2sect(fs, dcl);
 8035908:	68fb      	ldr	r3, [r7, #12]
 803590a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 803590c:	4618      	mov	r0, r3
 803590e:	f7fb f977 	bl	8030c00 <clust2sect>
 8035912:	6778      	str	r0, [r7, #116]	; 0x74
				dir = fs->win;
 8035914:	68fb      	ldr	r3, [r7, #12]
 8035916:	3350      	adds	r3, #80	; 0x50
 8035918:	663b      	str	r3, [r7, #96]	; 0x60
				mem_set(dir, 0, SS(fs));
 803591a:	68fb      	ldr	r3, [r7, #12]
 803591c:	899b      	ldrh	r3, [r3, #12]
 803591e:	461a      	mov	r2, r3
 8035920:	2100      	movs	r1, #0
 8035922:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8035924:	f7fa fe90 	bl	8030648 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8035928:	68fb      	ldr	r3, [r7, #12]
 803592a:	781b      	ldrb	r3, [r3, #0]
 803592c:	2b04      	cmp	r3, #4
 803592e:	d036      	beq.n	803599e <f_mkdir+0x1aa>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8035930:	220b      	movs	r2, #11
 8035932:	2120      	movs	r1, #32
 8035934:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8035936:	f7fa fe87 	bl	8030648 <mem_set>
					dir[DIR_Name] = '.';
 803593a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803593c:	222e      	movs	r2, #46	; 0x2e
 803593e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8035940:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8035942:	330b      	adds	r3, #11
 8035944:	2210      	movs	r2, #16
 8035946:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8035948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803594a:	3316      	adds	r3, #22
 803594c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 803594e:	4618      	mov	r0, r3
 8035950:	f7fa fda5 	bl	803049e <st_dword>
					st_clust(fs, dir, dcl);
 8035954:	68fb      	ldr	r3, [r7, #12]
 8035956:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8035958:	6e39      	ldr	r1, [r7, #96]	; 0x60
 803595a:	4618      	mov	r0, r3
 803595c:	f7fc f938 	bl	8031bd0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8035960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8035962:	3320      	adds	r3, #32
 8035964:	2220      	movs	r2, #32
 8035966:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8035968:	4618      	mov	r0, r3
 803596a:	f7fa fe4c 	bl	8030606 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 803596e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8035970:	3321      	adds	r3, #33	; 0x21
 8035972:	222e      	movs	r2, #46	; 0x2e
 8035974:	701a      	strb	r2, [r3, #0]
 8035976:	69bb      	ldr	r3, [r7, #24]
 8035978:	673b      	str	r3, [r7, #112]	; 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 803597a:	68fb      	ldr	r3, [r7, #12]
 803597c:	781b      	ldrb	r3, [r3, #0]
 803597e:	2b03      	cmp	r3, #3
 8035980:	d106      	bne.n	8035990 <f_mkdir+0x19c>
 8035982:	68fb      	ldr	r3, [r7, #12]
 8035984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8035986:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8035988:	429a      	cmp	r2, r3
 803598a:	d101      	bne.n	8035990 <f_mkdir+0x19c>
 803598c:	2300      	movs	r3, #0
 803598e:	673b      	str	r3, [r7, #112]	; 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 8035990:	68f8      	ldr	r0, [r7, #12]
 8035992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8035994:	3320      	adds	r3, #32
 8035996:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8035998:	4619      	mov	r1, r3
 803599a:	f7fc f919 	bl	8031bd0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 803599e:	68fb      	ldr	r3, [r7, #12]
 80359a0:	895b      	ldrh	r3, [r3, #10]
 80359a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80359a4:	e01c      	b.n	80359e0 <f_mkdir+0x1ec>
					fs->winsect = dsc++;
 80359a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80359a8:	1c5a      	adds	r2, r3, #1
 80359aa:	677a      	str	r2, [r7, #116]	; 0x74
 80359ac:	68fa      	ldr	r2, [r7, #12]
 80359ae:	64d3      	str	r3, [r2, #76]	; 0x4c
					fs->wflag = 1;
 80359b0:	68fb      	ldr	r3, [r7, #12]
 80359b2:	2201      	movs	r2, #1
 80359b4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80359b6:	68fb      	ldr	r3, [r7, #12]
 80359b8:	4618      	mov	r0, r3
 80359ba:	f7fb f83f 	bl	8030a3c <sync_window>
 80359be:	4603      	mov	r3, r0
 80359c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					if (res != FR_OK) break;
 80359c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80359c8:	2b00      	cmp	r3, #0
 80359ca:	d10d      	bne.n	80359e8 <f_mkdir+0x1f4>
					mem_set(dir, 0, SS(fs));
 80359cc:	68fb      	ldr	r3, [r7, #12]
 80359ce:	899b      	ldrh	r3, [r3, #12]
 80359d0:	461a      	mov	r2, r3
 80359d2:	2100      	movs	r1, #0
 80359d4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80359d6:	f7fa fe37 	bl	8030648 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80359da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80359dc:	3b01      	subs	r3, #1
 80359de:	67bb      	str	r3, [r7, #120]	; 0x78
 80359e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80359e2:	2b00      	cmp	r3, #0
 80359e4:	d1df      	bne.n	80359a6 <f_mkdir+0x1b2>
 80359e6:	e000      	b.n	80359ea <f_mkdir+0x1f6>
					if (res != FR_OK) break;
 80359e8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80359ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80359ee:	2b00      	cmp	r3, #0
 80359f0:	d107      	bne.n	8035a02 <f_mkdir+0x20e>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80359f2:	f107 0310 	add.w	r3, r7, #16
 80359f6:	4618      	mov	r0, r3
 80359f8:	f7fc ff84 	bl	8032904 <dir_register>
 80359fc:	4603      	mov	r3, r0
 80359fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			if (res == FR_OK) {
 8035a02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035a06:	2b00      	cmp	r3, #0
 8035a08:	d159      	bne.n	8035abe <f_mkdir+0x2ca>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 8035a0a:	68fb      	ldr	r3, [r7, #12]
 8035a0c:	781b      	ldrb	r3, [r3, #0]
 8035a0e:	2b04      	cmp	r3, #4
 8035a10:	d134      	bne.n	8035a7c <f_mkdir+0x288>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 8035a12:	68fb      	ldr	r3, [r7, #12]
 8035a14:	695b      	ldr	r3, [r3, #20]
 8035a16:	330c      	adds	r3, #12
 8035a18:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8035a1a:	4618      	mov	r0, r3
 8035a1c:	f7fa fd3f 	bl	803049e <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 8035a20:	68fb      	ldr	r3, [r7, #12]
 8035a22:	695b      	ldr	r3, [r3, #20]
 8035a24:	3334      	adds	r3, #52	; 0x34
 8035a26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8035a28:	4618      	mov	r0, r3
 8035a2a:	f7fa fd38 	bl	803049e <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 8035a2e:	68fb      	ldr	r3, [r7, #12]
 8035a30:	695b      	ldr	r3, [r3, #20]
 8035a32:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8035a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8035a3a:	4613      	mov	r3, r2
 8035a3c:	4619      	mov	r1, r3
 8035a3e:	f7fa fd2e 	bl	803049e <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 8035a42:	68fb      	ldr	r3, [r7, #12]
 8035a44:	695b      	ldr	r3, [r3, #20]
 8035a46:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8035a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8035a4e:	4613      	mov	r3, r2
 8035a50:	4619      	mov	r1, r3
 8035a52:	f7fa fd24 	bl	803049e <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 8035a56:	68fb      	ldr	r3, [r7, #12]
 8035a58:	695b      	ldr	r3, [r3, #20]
 8035a5a:	3321      	adds	r3, #33	; 0x21
 8035a5c:	2203      	movs	r2, #3
 8035a5e:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 8035a60:	68fb      	ldr	r3, [r7, #12]
 8035a62:	695b      	ldr	r3, [r3, #20]
 8035a64:	3304      	adds	r3, #4
 8035a66:	2210      	movs	r2, #16
 8035a68:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8035a6a:	f107 0310 	add.w	r3, r7, #16
 8035a6e:	4618      	mov	r0, r3
 8035a70:	f7fc fc96 	bl	80323a0 <store_xdir>
 8035a74:	4603      	mov	r3, r0
 8035a76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8035a7a:	e014      	b.n	8035aa6 <f_mkdir+0x2b2>
				} else
#endif
				{
					dir = dj.dir;
 8035a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8035a7e:	663b      	str	r3, [r7, #96]	; 0x60
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8035a80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8035a82:	3316      	adds	r3, #22
 8035a84:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8035a86:	4618      	mov	r0, r3
 8035a88:	f7fa fd09 	bl	803049e <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8035a8c:	68fb      	ldr	r3, [r7, #12]
 8035a8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8035a90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8035a92:	4618      	mov	r0, r3
 8035a94:	f7fc f89c 	bl	8031bd0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8035a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8035a9a:	330b      	adds	r3, #11
 8035a9c:	2210      	movs	r2, #16
 8035a9e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8035aa0:	68fb      	ldr	r3, [r7, #12]
 8035aa2:	2201      	movs	r2, #1
 8035aa4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8035aa6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8035aaa:	2b00      	cmp	r3, #0
 8035aac:	d10e      	bne.n	8035acc <f_mkdir+0x2d8>
					res = sync_fs(fs);
 8035aae:	68fb      	ldr	r3, [r7, #12]
 8035ab0:	4618      	mov	r0, r3
 8035ab2:	f7fb f835 	bl	8030b20 <sync_fs>
 8035ab6:	4603      	mov	r3, r0
 8035ab8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8035abc:	e006      	b.n	8035acc <f_mkdir+0x2d8>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8035abe:	f107 0310 	add.w	r3, r7, #16
 8035ac2:	2200      	movs	r2, #0
 8035ac4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8035ac6:	4618      	mov	r0, r3
 8035ac8:	f7fb fc8c 	bl	80313e4 <remove_chain>
			}
		}
		FREE_NAMBUF();
 8035acc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8035ace:	f000 f986 	bl	8035dde <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8035ad2:	68fb      	ldr	r3, [r7, #12]
 8035ad4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8035ad8:	4611      	mov	r1, r2
 8035ada:	4618      	mov	r0, r3
 8035adc:	f7fa fe27 	bl	803072e <unlock_fs>
 8035ae0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8035ae4:	4618      	mov	r0, r3
 8035ae6:	3780      	adds	r7, #128	; 0x80
 8035ae8:	46bd      	mov	sp, r7
 8035aea:	bdb0      	pop	{r4, r5, r7, pc}

08035aec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8035aec:	b480      	push	{r7}
 8035aee:	b087      	sub	sp, #28
 8035af0:	af00      	add	r7, sp, #0
 8035af2:	60f8      	str	r0, [r7, #12]
 8035af4:	60b9      	str	r1, [r7, #8]
 8035af6:	4613      	mov	r3, r2
 8035af8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8035afa:	2301      	movs	r3, #1
 8035afc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8035afe:	2300      	movs	r3, #0
 8035b00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8035b02:	4b1f      	ldr	r3, [pc, #124]	; (8035b80 <FATFS_LinkDriverEx+0x94>)
 8035b04:	7a5b      	ldrb	r3, [r3, #9]
 8035b06:	b2db      	uxtb	r3, r3
 8035b08:	2b00      	cmp	r3, #0
 8035b0a:	d131      	bne.n	8035b70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8035b0c:	4b1c      	ldr	r3, [pc, #112]	; (8035b80 <FATFS_LinkDriverEx+0x94>)
 8035b0e:	7a5b      	ldrb	r3, [r3, #9]
 8035b10:	b2db      	uxtb	r3, r3
 8035b12:	461a      	mov	r2, r3
 8035b14:	4b1a      	ldr	r3, [pc, #104]	; (8035b80 <FATFS_LinkDriverEx+0x94>)
 8035b16:	2100      	movs	r1, #0
 8035b18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8035b1a:	4b19      	ldr	r3, [pc, #100]	; (8035b80 <FATFS_LinkDriverEx+0x94>)
 8035b1c:	7a5b      	ldrb	r3, [r3, #9]
 8035b1e:	b2db      	uxtb	r3, r3
 8035b20:	4a17      	ldr	r2, [pc, #92]	; (8035b80 <FATFS_LinkDriverEx+0x94>)
 8035b22:	009b      	lsls	r3, r3, #2
 8035b24:	4413      	add	r3, r2
 8035b26:	68fa      	ldr	r2, [r7, #12]
 8035b28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8035b2a:	4b15      	ldr	r3, [pc, #84]	; (8035b80 <FATFS_LinkDriverEx+0x94>)
 8035b2c:	7a5b      	ldrb	r3, [r3, #9]
 8035b2e:	b2db      	uxtb	r3, r3
 8035b30:	461a      	mov	r2, r3
 8035b32:	4b13      	ldr	r3, [pc, #76]	; (8035b80 <FATFS_LinkDriverEx+0x94>)
 8035b34:	4413      	add	r3, r2
 8035b36:	79fa      	ldrb	r2, [r7, #7]
 8035b38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8035b3a:	4b11      	ldr	r3, [pc, #68]	; (8035b80 <FATFS_LinkDriverEx+0x94>)
 8035b3c:	7a5b      	ldrb	r3, [r3, #9]
 8035b3e:	b2db      	uxtb	r3, r3
 8035b40:	1c5a      	adds	r2, r3, #1
 8035b42:	b2d1      	uxtb	r1, r2
 8035b44:	4a0e      	ldr	r2, [pc, #56]	; (8035b80 <FATFS_LinkDriverEx+0x94>)
 8035b46:	7251      	strb	r1, [r2, #9]
 8035b48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8035b4a:	7dbb      	ldrb	r3, [r7, #22]
 8035b4c:	3330      	adds	r3, #48	; 0x30
 8035b4e:	b2da      	uxtb	r2, r3
 8035b50:	68bb      	ldr	r3, [r7, #8]
 8035b52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8035b54:	68bb      	ldr	r3, [r7, #8]
 8035b56:	3301      	adds	r3, #1
 8035b58:	223a      	movs	r2, #58	; 0x3a
 8035b5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8035b5c:	68bb      	ldr	r3, [r7, #8]
 8035b5e:	3302      	adds	r3, #2
 8035b60:	222f      	movs	r2, #47	; 0x2f
 8035b62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8035b64:	68bb      	ldr	r3, [r7, #8]
 8035b66:	3303      	adds	r3, #3
 8035b68:	2200      	movs	r2, #0
 8035b6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8035b6c:	2300      	movs	r3, #0
 8035b6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8035b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8035b72:	4618      	mov	r0, r3
 8035b74:	371c      	adds	r7, #28
 8035b76:	46bd      	mov	sp, r7
 8035b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035b7c:	4770      	bx	lr
 8035b7e:	bf00      	nop
 8035b80:	24002c20 	.word	0x24002c20

08035b84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8035b84:	b580      	push	{r7, lr}
 8035b86:	b082      	sub	sp, #8
 8035b88:	af00      	add	r7, sp, #0
 8035b8a:	6078      	str	r0, [r7, #4]
 8035b8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8035b8e:	2200      	movs	r2, #0
 8035b90:	6839      	ldr	r1, [r7, #0]
 8035b92:	6878      	ldr	r0, [r7, #4]
 8035b94:	f7ff ffaa 	bl	8035aec <FATFS_LinkDriverEx>
 8035b98:	4603      	mov	r3, r0
}
 8035b9a:	4618      	mov	r0, r3
 8035b9c:	3708      	adds	r7, #8
 8035b9e:	46bd      	mov	sp, r7
 8035ba0:	bd80      	pop	{r7, pc}
	...

08035ba4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8035ba4:	b480      	push	{r7}
 8035ba6:	b085      	sub	sp, #20
 8035ba8:	af00      	add	r7, sp, #0
 8035baa:	4603      	mov	r3, r0
 8035bac:	6039      	str	r1, [r7, #0]
 8035bae:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8035bb0:	88fb      	ldrh	r3, [r7, #6]
 8035bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8035bb4:	d802      	bhi.n	8035bbc <ff_convert+0x18>
		c = chr;
 8035bb6:	88fb      	ldrh	r3, [r7, #6]
 8035bb8:	81fb      	strh	r3, [r7, #14]
 8035bba:	e025      	b.n	8035c08 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8035bbc:	683b      	ldr	r3, [r7, #0]
 8035bbe:	2b00      	cmp	r3, #0
 8035bc0:	d00b      	beq.n	8035bda <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8035bc2:	88fb      	ldrh	r3, [r7, #6]
 8035bc4:	2bff      	cmp	r3, #255	; 0xff
 8035bc6:	d805      	bhi.n	8035bd4 <ff_convert+0x30>
 8035bc8:	88fb      	ldrh	r3, [r7, #6]
 8035bca:	3b80      	subs	r3, #128	; 0x80
 8035bcc:	4a12      	ldr	r2, [pc, #72]	; (8035c18 <ff_convert+0x74>)
 8035bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8035bd2:	e000      	b.n	8035bd6 <ff_convert+0x32>
 8035bd4:	2300      	movs	r3, #0
 8035bd6:	81fb      	strh	r3, [r7, #14]
 8035bd8:	e016      	b.n	8035c08 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8035bda:	2300      	movs	r3, #0
 8035bdc:	81fb      	strh	r3, [r7, #14]
 8035bde:	e009      	b.n	8035bf4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8035be0:	89fb      	ldrh	r3, [r7, #14]
 8035be2:	4a0d      	ldr	r2, [pc, #52]	; (8035c18 <ff_convert+0x74>)
 8035be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8035be8:	88fa      	ldrh	r2, [r7, #6]
 8035bea:	429a      	cmp	r2, r3
 8035bec:	d006      	beq.n	8035bfc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8035bee:	89fb      	ldrh	r3, [r7, #14]
 8035bf0:	3301      	adds	r3, #1
 8035bf2:	81fb      	strh	r3, [r7, #14]
 8035bf4:	89fb      	ldrh	r3, [r7, #14]
 8035bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8035bf8:	d9f2      	bls.n	8035be0 <ff_convert+0x3c>
 8035bfa:	e000      	b.n	8035bfe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8035bfc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8035bfe:	89fb      	ldrh	r3, [r7, #14]
 8035c00:	3380      	adds	r3, #128	; 0x80
 8035c02:	b29b      	uxth	r3, r3
 8035c04:	b2db      	uxtb	r3, r3
 8035c06:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8035c08:	89fb      	ldrh	r3, [r7, #14]
}
 8035c0a:	4618      	mov	r0, r3
 8035c0c:	3714      	adds	r7, #20
 8035c0e:	46bd      	mov	sp, r7
 8035c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035c14:	4770      	bx	lr
 8035c16:	bf00      	nop
 8035c18:	0803b974 	.word	0x0803b974

08035c1c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8035c1c:	b480      	push	{r7}
 8035c1e:	b087      	sub	sp, #28
 8035c20:	af00      	add	r7, sp, #0
 8035c22:	4603      	mov	r3, r0
 8035c24:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8035c26:	88fb      	ldrh	r3, [r7, #6]
 8035c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035c2c:	d201      	bcs.n	8035c32 <ff_wtoupper+0x16>
 8035c2e:	4b3e      	ldr	r3, [pc, #248]	; (8035d28 <ff_wtoupper+0x10c>)
 8035c30:	e000      	b.n	8035c34 <ff_wtoupper+0x18>
 8035c32:	4b3e      	ldr	r3, [pc, #248]	; (8035d2c <ff_wtoupper+0x110>)
 8035c34:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8035c36:	697b      	ldr	r3, [r7, #20]
 8035c38:	1c9a      	adds	r2, r3, #2
 8035c3a:	617a      	str	r2, [r7, #20]
 8035c3c:	881b      	ldrh	r3, [r3, #0]
 8035c3e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8035c40:	8a7b      	ldrh	r3, [r7, #18]
 8035c42:	2b00      	cmp	r3, #0
 8035c44:	d068      	beq.n	8035d18 <ff_wtoupper+0xfc>
 8035c46:	88fa      	ldrh	r2, [r7, #6]
 8035c48:	8a7b      	ldrh	r3, [r7, #18]
 8035c4a:	429a      	cmp	r2, r3
 8035c4c:	d364      	bcc.n	8035d18 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8035c4e:	697b      	ldr	r3, [r7, #20]
 8035c50:	1c9a      	adds	r2, r3, #2
 8035c52:	617a      	str	r2, [r7, #20]
 8035c54:	881b      	ldrh	r3, [r3, #0]
 8035c56:	823b      	strh	r3, [r7, #16]
 8035c58:	8a3b      	ldrh	r3, [r7, #16]
 8035c5a:	0a1b      	lsrs	r3, r3, #8
 8035c5c:	81fb      	strh	r3, [r7, #14]
 8035c5e:	8a3b      	ldrh	r3, [r7, #16]
 8035c60:	b2db      	uxtb	r3, r3
 8035c62:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8035c64:	88fa      	ldrh	r2, [r7, #6]
 8035c66:	8a79      	ldrh	r1, [r7, #18]
 8035c68:	8a3b      	ldrh	r3, [r7, #16]
 8035c6a:	440b      	add	r3, r1
 8035c6c:	429a      	cmp	r2, r3
 8035c6e:	da49      	bge.n	8035d04 <ff_wtoupper+0xe8>
			switch (cmd) {
 8035c70:	89fb      	ldrh	r3, [r7, #14]
 8035c72:	2b08      	cmp	r3, #8
 8035c74:	d84f      	bhi.n	8035d16 <ff_wtoupper+0xfa>
 8035c76:	a201      	add	r2, pc, #4	; (adr r2, 8035c7c <ff_wtoupper+0x60>)
 8035c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035c7c:	08035ca1 	.word	0x08035ca1
 8035c80:	08035cb3 	.word	0x08035cb3
 8035c84:	08035cc9 	.word	0x08035cc9
 8035c88:	08035cd1 	.word	0x08035cd1
 8035c8c:	08035cd9 	.word	0x08035cd9
 8035c90:	08035ce1 	.word	0x08035ce1
 8035c94:	08035ce9 	.word	0x08035ce9
 8035c98:	08035cf1 	.word	0x08035cf1
 8035c9c:	08035cf9 	.word	0x08035cf9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8035ca0:	88fa      	ldrh	r2, [r7, #6]
 8035ca2:	8a7b      	ldrh	r3, [r7, #18]
 8035ca4:	1ad3      	subs	r3, r2, r3
 8035ca6:	005b      	lsls	r3, r3, #1
 8035ca8:	697a      	ldr	r2, [r7, #20]
 8035caa:	4413      	add	r3, r2
 8035cac:	881b      	ldrh	r3, [r3, #0]
 8035cae:	80fb      	strh	r3, [r7, #6]
 8035cb0:	e027      	b.n	8035d02 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8035cb2:	88fa      	ldrh	r2, [r7, #6]
 8035cb4:	8a7b      	ldrh	r3, [r7, #18]
 8035cb6:	1ad3      	subs	r3, r2, r3
 8035cb8:	b29b      	uxth	r3, r3
 8035cba:	f003 0301 	and.w	r3, r3, #1
 8035cbe:	b29b      	uxth	r3, r3
 8035cc0:	88fa      	ldrh	r2, [r7, #6]
 8035cc2:	1ad3      	subs	r3, r2, r3
 8035cc4:	80fb      	strh	r3, [r7, #6]
 8035cc6:	e01c      	b.n	8035d02 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8035cc8:	88fb      	ldrh	r3, [r7, #6]
 8035cca:	3b10      	subs	r3, #16
 8035ccc:	80fb      	strh	r3, [r7, #6]
 8035cce:	e018      	b.n	8035d02 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8035cd0:	88fb      	ldrh	r3, [r7, #6]
 8035cd2:	3b20      	subs	r3, #32
 8035cd4:	80fb      	strh	r3, [r7, #6]
 8035cd6:	e014      	b.n	8035d02 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8035cd8:	88fb      	ldrh	r3, [r7, #6]
 8035cda:	3b30      	subs	r3, #48	; 0x30
 8035cdc:	80fb      	strh	r3, [r7, #6]
 8035cde:	e010      	b.n	8035d02 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8035ce0:	88fb      	ldrh	r3, [r7, #6]
 8035ce2:	3b1a      	subs	r3, #26
 8035ce4:	80fb      	strh	r3, [r7, #6]
 8035ce6:	e00c      	b.n	8035d02 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8035ce8:	88fb      	ldrh	r3, [r7, #6]
 8035cea:	3308      	adds	r3, #8
 8035cec:	80fb      	strh	r3, [r7, #6]
 8035cee:	e008      	b.n	8035d02 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8035cf0:	88fb      	ldrh	r3, [r7, #6]
 8035cf2:	3b50      	subs	r3, #80	; 0x50
 8035cf4:	80fb      	strh	r3, [r7, #6]
 8035cf6:	e004      	b.n	8035d02 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8035cf8:	88fb      	ldrh	r3, [r7, #6]
 8035cfa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8035cfe:	80fb      	strh	r3, [r7, #6]
 8035d00:	bf00      	nop
			}
			break;
 8035d02:	e008      	b.n	8035d16 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8035d04:	89fb      	ldrh	r3, [r7, #14]
 8035d06:	2b00      	cmp	r3, #0
 8035d08:	d195      	bne.n	8035c36 <ff_wtoupper+0x1a>
 8035d0a:	8a3b      	ldrh	r3, [r7, #16]
 8035d0c:	005b      	lsls	r3, r3, #1
 8035d0e:	697a      	ldr	r2, [r7, #20]
 8035d10:	4413      	add	r3, r2
 8035d12:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8035d14:	e78f      	b.n	8035c36 <ff_wtoupper+0x1a>
			break;
 8035d16:	bf00      	nop
	}

	return chr;
 8035d18:	88fb      	ldrh	r3, [r7, #6]
}
 8035d1a:	4618      	mov	r0, r3
 8035d1c:	371c      	adds	r7, #28
 8035d1e:	46bd      	mov	sp, r7
 8035d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035d24:	4770      	bx	lr
 8035d26:	bf00      	nop
 8035d28:	0803ba74 	.word	0x0803ba74
 8035d2c:	0803bc68 	.word	0x0803bc68

08035d30 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8035d30:	b580      	push	{r7, lr}
 8035d32:	b086      	sub	sp, #24
 8035d34:	af00      	add	r7, sp, #0
 8035d36:	4603      	mov	r3, r0
 8035d38:	6039      	str	r1, [r7, #0]
 8035d3a:	71fb      	strb	r3, [r7, #7]

    int ret;
#if _USE_MUTEX

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
 8035d3c:	2300      	movs	r3, #0
 8035d3e:	60fb      	str	r3, [r7, #12]
 8035d40:	2300      	movs	r3, #0
 8035d42:	613b      	str	r3, [r7, #16]
    *sobj = osMutexCreate(osMutex(MTX));
 8035d44:	f107 030c 	add.w	r3, r7, #12
 8035d48:	4618      	mov	r0, r3
 8035d4a:	f000 f919 	bl	8035f80 <osMutexCreate>
 8035d4e:	4602      	mov	r2, r0
 8035d50:	683b      	ldr	r3, [r7, #0]
 8035d52:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8035d54:	683b      	ldr	r3, [r7, #0]
 8035d56:	681b      	ldr	r3, [r3, #0]
 8035d58:	2b00      	cmp	r3, #0
 8035d5a:	bf14      	ite	ne
 8035d5c:	2301      	movne	r3, #1
 8035d5e:	2300      	moveq	r3, #0
 8035d60:	b2db      	uxtb	r3, r3
 8035d62:	617b      	str	r3, [r7, #20]

    return ret;
 8035d64:	697b      	ldr	r3, [r7, #20]
}
 8035d66:	4618      	mov	r0, r3
 8035d68:	3718      	adds	r7, #24
 8035d6a:	46bd      	mov	sp, r7
 8035d6c:	bd80      	pop	{r7, pc}

08035d6e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8035d6e:	b580      	push	{r7, lr}
 8035d70:	b082      	sub	sp, #8
 8035d72:	af00      	add	r7, sp, #0
 8035d74:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 8035d76:	6878      	ldr	r0, [r7, #4]
 8035d78:	f000 f99e 	bl	80360b8 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 8035d7c:	2301      	movs	r3, #1
}
 8035d7e:	4618      	mov	r0, r3
 8035d80:	3708      	adds	r7, #8
 8035d82:	46bd      	mov	sp, r7
 8035d84:	bd80      	pop	{r7, pc}

08035d86 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8035d86:	b580      	push	{r7, lr}
 8035d88:	b084      	sub	sp, #16
 8035d8a:	af00      	add	r7, sp, #0
 8035d8c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8035d8e:	2300      	movs	r3, #0
 8035d90:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
 8035d92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8035d96:	6878      	ldr	r0, [r7, #4]
 8035d98:	f000 f90a 	bl	8035fb0 <osMutexWait>
 8035d9c:	4603      	mov	r3, r0
 8035d9e:	2b00      	cmp	r3, #0
 8035da0:	d101      	bne.n	8035da6 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8035da2:	2301      	movs	r3, #1
 8035da4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8035da6:	68fb      	ldr	r3, [r7, #12]
}
 8035da8:	4618      	mov	r0, r3
 8035daa:	3710      	adds	r7, #16
 8035dac:	46bd      	mov	sp, r7
 8035dae:	bd80      	pop	{r7, pc}

08035db0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8035db0:	b580      	push	{r7, lr}
 8035db2:	b082      	sub	sp, #8
 8035db4:	af00      	add	r7, sp, #0
 8035db6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 8035db8:	6878      	ldr	r0, [r7, #4]
 8035dba:	f000 f947 	bl	803604c <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 8035dbe:	bf00      	nop
 8035dc0:	3708      	adds	r7, #8
 8035dc2:	46bd      	mov	sp, r7
 8035dc4:	bd80      	pop	{r7, pc}

08035dc6 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8035dc6:	b580      	push	{r7, lr}
 8035dc8:	b082      	sub	sp, #8
 8035dca:	af00      	add	r7, sp, #0
 8035dcc:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8035dce:	6878      	ldr	r0, [r7, #4]
 8035dd0:	f003 faf2 	bl	80393b8 <pvPortMalloc>
 8035dd4:	4603      	mov	r3, r0
}
 8035dd6:	4618      	mov	r0, r3
 8035dd8:	3708      	adds	r7, #8
 8035dda:	46bd      	mov	sp, r7
 8035ddc:	bd80      	pop	{r7, pc}

08035dde <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8035dde:	b580      	push	{r7, lr}
 8035de0:	b082      	sub	sp, #8
 8035de2:	af00      	add	r7, sp, #0
 8035de4:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8035de6:	6878      	ldr	r0, [r7, #4]
 8035de8:	f003 fbb2 	bl	8039550 <vPortFree>
}
 8035dec:	bf00      	nop
 8035dee:	3708      	adds	r7, #8
 8035df0:	46bd      	mov	sp, r7
 8035df2:	bd80      	pop	{r7, pc}

08035df4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8035df4:	b480      	push	{r7}
 8035df6:	b085      	sub	sp, #20
 8035df8:	af00      	add	r7, sp, #0
 8035dfa:	4603      	mov	r3, r0
 8035dfc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8035dfe:	2300      	movs	r3, #0
 8035e00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8035e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8035e06:	2b84      	cmp	r3, #132	; 0x84
 8035e08:	d005      	beq.n	8035e16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8035e0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8035e0e:	68fb      	ldr	r3, [r7, #12]
 8035e10:	4413      	add	r3, r2
 8035e12:	3303      	adds	r3, #3
 8035e14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8035e16:	68fb      	ldr	r3, [r7, #12]
}
 8035e18:	4618      	mov	r0, r3
 8035e1a:	3714      	adds	r7, #20
 8035e1c:	46bd      	mov	sp, r7
 8035e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e22:	4770      	bx	lr

08035e24 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8035e24:	b480      	push	{r7}
 8035e26:	b083      	sub	sp, #12
 8035e28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8035e2a:	f3ef 8305 	mrs	r3, IPSR
 8035e2e:	607b      	str	r3, [r7, #4]
  return(result);
 8035e30:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8035e32:	2b00      	cmp	r3, #0
 8035e34:	bf14      	ite	ne
 8035e36:	2301      	movne	r3, #1
 8035e38:	2300      	moveq	r3, #0
 8035e3a:	b2db      	uxtb	r3, r3
}
 8035e3c:	4618      	mov	r0, r3
 8035e3e:	370c      	adds	r7, #12
 8035e40:	46bd      	mov	sp, r7
 8035e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e46:	4770      	bx	lr

08035e48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8035e48:	b580      	push	{r7, lr}
 8035e4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8035e4c:	f001 fd42 	bl	80378d4 <vTaskStartScheduler>
  
  return osOK;
 8035e50:	2300      	movs	r3, #0
}
 8035e52:	4618      	mov	r0, r3
 8035e54:	bd80      	pop	{r7, pc}

08035e56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8035e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8035e58:	b089      	sub	sp, #36	; 0x24
 8035e5a:	af04      	add	r7, sp, #16
 8035e5c:	6078      	str	r0, [r7, #4]
 8035e5e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8035e60:	687b      	ldr	r3, [r7, #4]
 8035e62:	695b      	ldr	r3, [r3, #20]
 8035e64:	2b00      	cmp	r3, #0
 8035e66:	d020      	beq.n	8035eaa <osThreadCreate+0x54>
 8035e68:	687b      	ldr	r3, [r7, #4]
 8035e6a:	699b      	ldr	r3, [r3, #24]
 8035e6c:	2b00      	cmp	r3, #0
 8035e6e:	d01c      	beq.n	8035eaa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8035e70:	687b      	ldr	r3, [r7, #4]
 8035e72:	685c      	ldr	r4, [r3, #4]
 8035e74:	687b      	ldr	r3, [r7, #4]
 8035e76:	681d      	ldr	r5, [r3, #0]
 8035e78:	687b      	ldr	r3, [r7, #4]
 8035e7a:	691e      	ldr	r6, [r3, #16]
 8035e7c:	687b      	ldr	r3, [r7, #4]
 8035e7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8035e82:	4618      	mov	r0, r3
 8035e84:	f7ff ffb6 	bl	8035df4 <makeFreeRtosPriority>
 8035e88:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8035e8a:	687b      	ldr	r3, [r7, #4]
 8035e8c:	695b      	ldr	r3, [r3, #20]
 8035e8e:	687a      	ldr	r2, [r7, #4]
 8035e90:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8035e92:	9202      	str	r2, [sp, #8]
 8035e94:	9301      	str	r3, [sp, #4]
 8035e96:	9100      	str	r1, [sp, #0]
 8035e98:	683b      	ldr	r3, [r7, #0]
 8035e9a:	4632      	mov	r2, r6
 8035e9c:	4629      	mov	r1, r5
 8035e9e:	4620      	mov	r0, r4
 8035ea0:	f001 fb50 	bl	8037544 <xTaskCreateStatic>
 8035ea4:	4603      	mov	r3, r0
 8035ea6:	60fb      	str	r3, [r7, #12]
 8035ea8:	e01c      	b.n	8035ee4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8035eaa:	687b      	ldr	r3, [r7, #4]
 8035eac:	685c      	ldr	r4, [r3, #4]
 8035eae:	687b      	ldr	r3, [r7, #4]
 8035eb0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8035eb2:	687b      	ldr	r3, [r7, #4]
 8035eb4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8035eb6:	b29e      	uxth	r6, r3
 8035eb8:	687b      	ldr	r3, [r7, #4]
 8035eba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8035ebe:	4618      	mov	r0, r3
 8035ec0:	f7ff ff98 	bl	8035df4 <makeFreeRtosPriority>
 8035ec4:	4602      	mov	r2, r0
 8035ec6:	f107 030c 	add.w	r3, r7, #12
 8035eca:	9301      	str	r3, [sp, #4]
 8035ecc:	9200      	str	r2, [sp, #0]
 8035ece:	683b      	ldr	r3, [r7, #0]
 8035ed0:	4632      	mov	r2, r6
 8035ed2:	4629      	mov	r1, r5
 8035ed4:	4620      	mov	r0, r4
 8035ed6:	f001 fb92 	bl	80375fe <xTaskCreate>
 8035eda:	4603      	mov	r3, r0
 8035edc:	2b01      	cmp	r3, #1
 8035ede:	d001      	beq.n	8035ee4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8035ee0:	2300      	movs	r3, #0
 8035ee2:	e000      	b.n	8035ee6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8035ee4:	68fb      	ldr	r3, [r7, #12]
}
 8035ee6:	4618      	mov	r0, r3
 8035ee8:	3714      	adds	r7, #20
 8035eea:	46bd      	mov	sp, r7
 8035eec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08035eee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8035eee:	b580      	push	{r7, lr}
 8035ef0:	b084      	sub	sp, #16
 8035ef2:	af00      	add	r7, sp, #0
 8035ef4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8035ef6:	687b      	ldr	r3, [r7, #4]
 8035ef8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8035efa:	68fb      	ldr	r3, [r7, #12]
 8035efc:	2b00      	cmp	r3, #0
 8035efe:	d001      	beq.n	8035f04 <osDelay+0x16>
 8035f00:	68fb      	ldr	r3, [r7, #12]
 8035f02:	e000      	b.n	8035f06 <osDelay+0x18>
 8035f04:	2301      	movs	r3, #1
 8035f06:	4618      	mov	r0, r3
 8035f08:	f001 fcb0 	bl	803786c <vTaskDelay>
  
  return osOK;
 8035f0c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8035f0e:	4618      	mov	r0, r3
 8035f10:	3710      	adds	r7, #16
 8035f12:	46bd      	mov	sp, r7
 8035f14:	bd80      	pop	{r7, pc}
	...

08035f18 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8035f18:	b580      	push	{r7, lr}
 8035f1a:	b086      	sub	sp, #24
 8035f1c:	af02      	add	r7, sp, #8
 8035f1e:	60f8      	str	r0, [r7, #12]
 8035f20:	460b      	mov	r3, r1
 8035f22:	607a      	str	r2, [r7, #4]
 8035f24:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8035f26:	68fb      	ldr	r3, [r7, #12]
 8035f28:	685b      	ldr	r3, [r3, #4]
 8035f2a:	2b00      	cmp	r3, #0
 8035f2c:	d013      	beq.n	8035f56 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8035f2e:	7afb      	ldrb	r3, [r7, #11]
 8035f30:	2b01      	cmp	r3, #1
 8035f32:	d101      	bne.n	8035f38 <osTimerCreate+0x20>
 8035f34:	2101      	movs	r1, #1
 8035f36:	e000      	b.n	8035f3a <osTimerCreate+0x22>
 8035f38:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8035f3a:	68fb      	ldr	r3, [r7, #12]
 8035f3c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8035f3e:	68fa      	ldr	r2, [r7, #12]
 8035f40:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8035f42:	9201      	str	r2, [sp, #4]
 8035f44:	9300      	str	r3, [sp, #0]
 8035f46:	687b      	ldr	r3, [r7, #4]
 8035f48:	460a      	mov	r2, r1
 8035f4a:	2101      	movs	r1, #1
 8035f4c:	480b      	ldr	r0, [pc, #44]	; (8035f7c <osTimerCreate+0x64>)
 8035f4e:	f002 fc66 	bl	803881e <xTimerCreateStatic>
 8035f52:	4603      	mov	r3, r0
 8035f54:	e00e      	b.n	8035f74 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8035f56:	7afb      	ldrb	r3, [r7, #11]
 8035f58:	2b01      	cmp	r3, #1
 8035f5a:	d101      	bne.n	8035f60 <osTimerCreate+0x48>
 8035f5c:	2201      	movs	r2, #1
 8035f5e:	e000      	b.n	8035f62 <osTimerCreate+0x4a>
 8035f60:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8035f62:	68fb      	ldr	r3, [r7, #12]
 8035f64:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8035f66:	9300      	str	r3, [sp, #0]
 8035f68:	687b      	ldr	r3, [r7, #4]
 8035f6a:	2101      	movs	r1, #1
 8035f6c:	4803      	ldr	r0, [pc, #12]	; (8035f7c <osTimerCreate+0x64>)
 8035f6e:	f002 fc35 	bl	80387dc <xTimerCreate>
 8035f72:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8035f74:	4618      	mov	r0, r3
 8035f76:	3710      	adds	r7, #16
 8035f78:	46bd      	mov	sp, r7
 8035f7a:	bd80      	pop	{r7, pc}
 8035f7c:	0803b830 	.word	0x0803b830

08035f80 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8035f80:	b580      	push	{r7, lr}
 8035f82:	b082      	sub	sp, #8
 8035f84:	af00      	add	r7, sp, #0
 8035f86:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8035f88:	687b      	ldr	r3, [r7, #4]
 8035f8a:	685b      	ldr	r3, [r3, #4]
 8035f8c:	2b00      	cmp	r3, #0
 8035f8e:	d007      	beq.n	8035fa0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8035f90:	687b      	ldr	r3, [r7, #4]
 8035f92:	685b      	ldr	r3, [r3, #4]
 8035f94:	4619      	mov	r1, r3
 8035f96:	2001      	movs	r0, #1
 8035f98:	f000 fc53 	bl	8036842 <xQueueCreateMutexStatic>
 8035f9c:	4603      	mov	r3, r0
 8035f9e:	e003      	b.n	8035fa8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8035fa0:	2001      	movs	r0, #1
 8035fa2:	f000 fc36 	bl	8036812 <xQueueCreateMutex>
 8035fa6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8035fa8:	4618      	mov	r0, r3
 8035faa:	3708      	adds	r7, #8
 8035fac:	46bd      	mov	sp, r7
 8035fae:	bd80      	pop	{r7, pc}

08035fb0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8035fb0:	b580      	push	{r7, lr}
 8035fb2:	b084      	sub	sp, #16
 8035fb4:	af00      	add	r7, sp, #0
 8035fb6:	6078      	str	r0, [r7, #4]
 8035fb8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8035fba:	2300      	movs	r3, #0
 8035fbc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8035fbe:	687b      	ldr	r3, [r7, #4]
 8035fc0:	2b00      	cmp	r3, #0
 8035fc2:	d101      	bne.n	8035fc8 <osMutexWait+0x18>
    return osErrorParameter;
 8035fc4:	2380      	movs	r3, #128	; 0x80
 8035fc6:	e03a      	b.n	803603e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8035fc8:	2300      	movs	r3, #0
 8035fca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8035fcc:	683b      	ldr	r3, [r7, #0]
 8035fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8035fd2:	d103      	bne.n	8035fdc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8035fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8035fd8:	60fb      	str	r3, [r7, #12]
 8035fda:	e009      	b.n	8035ff0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8035fdc:	683b      	ldr	r3, [r7, #0]
 8035fde:	2b00      	cmp	r3, #0
 8035fe0:	d006      	beq.n	8035ff0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8035fe2:	683b      	ldr	r3, [r7, #0]
 8035fe4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8035fe6:	68fb      	ldr	r3, [r7, #12]
 8035fe8:	2b00      	cmp	r3, #0
 8035fea:	d101      	bne.n	8035ff0 <osMutexWait+0x40>
      ticks = 1;
 8035fec:	2301      	movs	r3, #1
 8035fee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8035ff0:	f7ff ff18 	bl	8035e24 <inHandlerMode>
 8035ff4:	4603      	mov	r3, r0
 8035ff6:	2b00      	cmp	r3, #0
 8035ff8:	d017      	beq.n	803602a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8035ffa:	f107 0308 	add.w	r3, r7, #8
 8035ffe:	461a      	mov	r2, r3
 8036000:	2100      	movs	r1, #0
 8036002:	6878      	ldr	r0, [r7, #4]
 8036004:	f001 f84a 	bl	803709c <xQueueReceiveFromISR>
 8036008:	4603      	mov	r3, r0
 803600a:	2b01      	cmp	r3, #1
 803600c:	d001      	beq.n	8036012 <osMutexWait+0x62>
      return osErrorOS;
 803600e:	23ff      	movs	r3, #255	; 0xff
 8036010:	e015      	b.n	803603e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8036012:	68bb      	ldr	r3, [r7, #8]
 8036014:	2b00      	cmp	r3, #0
 8036016:	d011      	beq.n	803603c <osMutexWait+0x8c>
 8036018:	4b0b      	ldr	r3, [pc, #44]	; (8036048 <osMutexWait+0x98>)
 803601a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803601e:	601a      	str	r2, [r3, #0]
 8036020:	f3bf 8f4f 	dsb	sy
 8036024:	f3bf 8f6f 	isb	sy
 8036028:	e008      	b.n	803603c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 803602a:	68f9      	ldr	r1, [r7, #12]
 803602c:	6878      	ldr	r0, [r7, #4]
 803602e:	f000 ff29 	bl	8036e84 <xQueueSemaphoreTake>
 8036032:	4603      	mov	r3, r0
 8036034:	2b01      	cmp	r3, #1
 8036036:	d001      	beq.n	803603c <osMutexWait+0x8c>
    return osErrorOS;
 8036038:	23ff      	movs	r3, #255	; 0xff
 803603a:	e000      	b.n	803603e <osMutexWait+0x8e>
  }
  
  return osOK;
 803603c:	2300      	movs	r3, #0
}
 803603e:	4618      	mov	r0, r3
 8036040:	3710      	adds	r7, #16
 8036042:	46bd      	mov	sp, r7
 8036044:	bd80      	pop	{r7, pc}
 8036046:	bf00      	nop
 8036048:	e000ed04 	.word	0xe000ed04

0803604c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 803604c:	b580      	push	{r7, lr}
 803604e:	b084      	sub	sp, #16
 8036050:	af00      	add	r7, sp, #0
 8036052:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8036054:	2300      	movs	r3, #0
 8036056:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8036058:	2300      	movs	r3, #0
 803605a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 803605c:	f7ff fee2 	bl	8035e24 <inHandlerMode>
 8036060:	4603      	mov	r3, r0
 8036062:	2b00      	cmp	r3, #0
 8036064:	d016      	beq.n	8036094 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8036066:	f107 0308 	add.w	r3, r7, #8
 803606a:	4619      	mov	r1, r3
 803606c:	6878      	ldr	r0, [r7, #4]
 803606e:	f000 fd9c 	bl	8036baa <xQueueGiveFromISR>
 8036072:	4603      	mov	r3, r0
 8036074:	2b01      	cmp	r3, #1
 8036076:	d001      	beq.n	803607c <osMutexRelease+0x30>
      return osErrorOS;
 8036078:	23ff      	movs	r3, #255	; 0xff
 803607a:	e017      	b.n	80360ac <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 803607c:	68bb      	ldr	r3, [r7, #8]
 803607e:	2b00      	cmp	r3, #0
 8036080:	d013      	beq.n	80360aa <osMutexRelease+0x5e>
 8036082:	4b0c      	ldr	r3, [pc, #48]	; (80360b4 <osMutexRelease+0x68>)
 8036084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036088:	601a      	str	r2, [r3, #0]
 803608a:	f3bf 8f4f 	dsb	sy
 803608e:	f3bf 8f6f 	isb	sy
 8036092:	e00a      	b.n	80360aa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8036094:	2300      	movs	r3, #0
 8036096:	2200      	movs	r2, #0
 8036098:	2100      	movs	r1, #0
 803609a:	6878      	ldr	r0, [r7, #4]
 803609c:	f000 fbec 	bl	8036878 <xQueueGenericSend>
 80360a0:	4603      	mov	r3, r0
 80360a2:	2b01      	cmp	r3, #1
 80360a4:	d001      	beq.n	80360aa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80360a6:	23ff      	movs	r3, #255	; 0xff
 80360a8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80360aa:	68fb      	ldr	r3, [r7, #12]
}
 80360ac:	4618      	mov	r0, r3
 80360ae:	3710      	adds	r7, #16
 80360b0:	46bd      	mov	sp, r7
 80360b2:	bd80      	pop	{r7, pc}
 80360b4:	e000ed04 	.word	0xe000ed04

080360b8 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 80360b8:	b580      	push	{r7, lr}
 80360ba:	b082      	sub	sp, #8
 80360bc:	af00      	add	r7, sp, #0
 80360be:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80360c0:	f7ff feb0 	bl	8035e24 <inHandlerMode>
 80360c4:	4603      	mov	r3, r0
 80360c6:	2b00      	cmp	r3, #0
 80360c8:	d001      	beq.n	80360ce <osMutexDelete+0x16>
    return osErrorISR;
 80360ca:	2382      	movs	r3, #130	; 0x82
 80360cc:	e003      	b.n	80360d6 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 80360ce:	6878      	ldr	r0, [r7, #4]
 80360d0:	f001 f864 	bl	803719c <vQueueDelete>

  return osOK;
 80360d4:	2300      	movs	r3, #0
}
 80360d6:	4618      	mov	r0, r3
 80360d8:	3708      	adds	r7, #8
 80360da:	46bd      	mov	sp, r7
 80360dc:	bd80      	pop	{r7, pc}

080360de <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80360de:	b580      	push	{r7, lr}
 80360e0:	b086      	sub	sp, #24
 80360e2:	af02      	add	r7, sp, #8
 80360e4:	6078      	str	r0, [r7, #4]
 80360e6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80360e8:	687b      	ldr	r3, [r7, #4]
 80360ea:	685b      	ldr	r3, [r3, #4]
 80360ec:	2b00      	cmp	r3, #0
 80360ee:	d00f      	beq.n	8036110 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80360f0:	683b      	ldr	r3, [r7, #0]
 80360f2:	2b01      	cmp	r3, #1
 80360f4:	d10a      	bne.n	803610c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80360f6:	687b      	ldr	r3, [r7, #4]
 80360f8:	685b      	ldr	r3, [r3, #4]
 80360fa:	2203      	movs	r2, #3
 80360fc:	9200      	str	r2, [sp, #0]
 80360fe:	2200      	movs	r2, #0
 8036100:	2100      	movs	r1, #0
 8036102:	2001      	movs	r0, #1
 8036104:	f000 fa9a 	bl	803663c <xQueueGenericCreateStatic>
 8036108:	4603      	mov	r3, r0
 803610a:	e016      	b.n	803613a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 803610c:	2300      	movs	r3, #0
 803610e:	e014      	b.n	803613a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8036110:	683b      	ldr	r3, [r7, #0]
 8036112:	2b01      	cmp	r3, #1
 8036114:	d110      	bne.n	8036138 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8036116:	2203      	movs	r2, #3
 8036118:	2100      	movs	r1, #0
 803611a:	2001      	movs	r0, #1
 803611c:	f000 fb06 	bl	803672c <xQueueGenericCreate>
 8036120:	60f8      	str	r0, [r7, #12]
 8036122:	68fb      	ldr	r3, [r7, #12]
 8036124:	2b00      	cmp	r3, #0
 8036126:	d005      	beq.n	8036134 <osSemaphoreCreate+0x56>
 8036128:	2300      	movs	r3, #0
 803612a:	2200      	movs	r2, #0
 803612c:	2100      	movs	r1, #0
 803612e:	68f8      	ldr	r0, [r7, #12]
 8036130:	f000 fba2 	bl	8036878 <xQueueGenericSend>
      return sema;
 8036134:	68fb      	ldr	r3, [r7, #12]
 8036136:	e000      	b.n	803613a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8036138:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 803613a:	4618      	mov	r0, r3
 803613c:	3710      	adds	r7, #16
 803613e:	46bd      	mov	sp, r7
 8036140:	bd80      	pop	{r7, pc}
	...

08036144 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8036144:	b580      	push	{r7, lr}
 8036146:	b084      	sub	sp, #16
 8036148:	af00      	add	r7, sp, #0
 803614a:	6078      	str	r0, [r7, #4]
 803614c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 803614e:	2300      	movs	r3, #0
 8036150:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8036152:	687b      	ldr	r3, [r7, #4]
 8036154:	2b00      	cmp	r3, #0
 8036156:	d101      	bne.n	803615c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8036158:	2380      	movs	r3, #128	; 0x80
 803615a:	e03a      	b.n	80361d2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 803615c:	2300      	movs	r3, #0
 803615e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8036160:	683b      	ldr	r3, [r7, #0]
 8036162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036166:	d103      	bne.n	8036170 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8036168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803616c:	60fb      	str	r3, [r7, #12]
 803616e:	e009      	b.n	8036184 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8036170:	683b      	ldr	r3, [r7, #0]
 8036172:	2b00      	cmp	r3, #0
 8036174:	d006      	beq.n	8036184 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8036176:	683b      	ldr	r3, [r7, #0]
 8036178:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 803617a:	68fb      	ldr	r3, [r7, #12]
 803617c:	2b00      	cmp	r3, #0
 803617e:	d101      	bne.n	8036184 <osSemaphoreWait+0x40>
      ticks = 1;
 8036180:	2301      	movs	r3, #1
 8036182:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8036184:	f7ff fe4e 	bl	8035e24 <inHandlerMode>
 8036188:	4603      	mov	r3, r0
 803618a:	2b00      	cmp	r3, #0
 803618c:	d017      	beq.n	80361be <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 803618e:	f107 0308 	add.w	r3, r7, #8
 8036192:	461a      	mov	r2, r3
 8036194:	2100      	movs	r1, #0
 8036196:	6878      	ldr	r0, [r7, #4]
 8036198:	f000 ff80 	bl	803709c <xQueueReceiveFromISR>
 803619c:	4603      	mov	r3, r0
 803619e:	2b01      	cmp	r3, #1
 80361a0:	d001      	beq.n	80361a6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80361a2:	23ff      	movs	r3, #255	; 0xff
 80361a4:	e015      	b.n	80361d2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80361a6:	68bb      	ldr	r3, [r7, #8]
 80361a8:	2b00      	cmp	r3, #0
 80361aa:	d011      	beq.n	80361d0 <osSemaphoreWait+0x8c>
 80361ac:	4b0b      	ldr	r3, [pc, #44]	; (80361dc <osSemaphoreWait+0x98>)
 80361ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80361b2:	601a      	str	r2, [r3, #0]
 80361b4:	f3bf 8f4f 	dsb	sy
 80361b8:	f3bf 8f6f 	isb	sy
 80361bc:	e008      	b.n	80361d0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80361be:	68f9      	ldr	r1, [r7, #12]
 80361c0:	6878      	ldr	r0, [r7, #4]
 80361c2:	f000 fe5f 	bl	8036e84 <xQueueSemaphoreTake>
 80361c6:	4603      	mov	r3, r0
 80361c8:	2b01      	cmp	r3, #1
 80361ca:	d001      	beq.n	80361d0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80361cc:	23ff      	movs	r3, #255	; 0xff
 80361ce:	e000      	b.n	80361d2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80361d0:	2300      	movs	r3, #0
}
 80361d2:	4618      	mov	r0, r3
 80361d4:	3710      	adds	r7, #16
 80361d6:	46bd      	mov	sp, r7
 80361d8:	bd80      	pop	{r7, pc}
 80361da:	bf00      	nop
 80361dc:	e000ed04 	.word	0xe000ed04

080361e0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80361e0:	b580      	push	{r7, lr}
 80361e2:	b084      	sub	sp, #16
 80361e4:	af00      	add	r7, sp, #0
 80361e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80361e8:	2300      	movs	r3, #0
 80361ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80361ec:	2300      	movs	r3, #0
 80361ee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80361f0:	f7ff fe18 	bl	8035e24 <inHandlerMode>
 80361f4:	4603      	mov	r3, r0
 80361f6:	2b00      	cmp	r3, #0
 80361f8:	d016      	beq.n	8036228 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80361fa:	f107 0308 	add.w	r3, r7, #8
 80361fe:	4619      	mov	r1, r3
 8036200:	6878      	ldr	r0, [r7, #4]
 8036202:	f000 fcd2 	bl	8036baa <xQueueGiveFromISR>
 8036206:	4603      	mov	r3, r0
 8036208:	2b01      	cmp	r3, #1
 803620a:	d001      	beq.n	8036210 <osSemaphoreRelease+0x30>
      return osErrorOS;
 803620c:	23ff      	movs	r3, #255	; 0xff
 803620e:	e017      	b.n	8036240 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8036210:	68bb      	ldr	r3, [r7, #8]
 8036212:	2b00      	cmp	r3, #0
 8036214:	d013      	beq.n	803623e <osSemaphoreRelease+0x5e>
 8036216:	4b0c      	ldr	r3, [pc, #48]	; (8036248 <osSemaphoreRelease+0x68>)
 8036218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803621c:	601a      	str	r2, [r3, #0]
 803621e:	f3bf 8f4f 	dsb	sy
 8036222:	f3bf 8f6f 	isb	sy
 8036226:	e00a      	b.n	803623e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8036228:	2300      	movs	r3, #0
 803622a:	2200      	movs	r2, #0
 803622c:	2100      	movs	r1, #0
 803622e:	6878      	ldr	r0, [r7, #4]
 8036230:	f000 fb22 	bl	8036878 <xQueueGenericSend>
 8036234:	4603      	mov	r3, r0
 8036236:	2b01      	cmp	r3, #1
 8036238:	d001      	beq.n	803623e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 803623a:	23ff      	movs	r3, #255	; 0xff
 803623c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 803623e:	68fb      	ldr	r3, [r7, #12]
}
 8036240:	4618      	mov	r0, r3
 8036242:	3710      	adds	r7, #16
 8036244:	46bd      	mov	sp, r7
 8036246:	bd80      	pop	{r7, pc}
 8036248:	e000ed04 	.word	0xe000ed04

0803624c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 803624c:	b590      	push	{r4, r7, lr}
 803624e:	b085      	sub	sp, #20
 8036250:	af02      	add	r7, sp, #8
 8036252:	6078      	str	r0, [r7, #4]
 8036254:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8036256:	687b      	ldr	r3, [r7, #4]
 8036258:	689b      	ldr	r3, [r3, #8]
 803625a:	2b00      	cmp	r3, #0
 803625c:	d011      	beq.n	8036282 <osMessageCreate+0x36>
 803625e:	687b      	ldr	r3, [r7, #4]
 8036260:	68db      	ldr	r3, [r3, #12]
 8036262:	2b00      	cmp	r3, #0
 8036264:	d00d      	beq.n	8036282 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8036266:	687b      	ldr	r3, [r7, #4]
 8036268:	6818      	ldr	r0, [r3, #0]
 803626a:	687b      	ldr	r3, [r7, #4]
 803626c:	6859      	ldr	r1, [r3, #4]
 803626e:	687b      	ldr	r3, [r7, #4]
 8036270:	689a      	ldr	r2, [r3, #8]
 8036272:	687b      	ldr	r3, [r7, #4]
 8036274:	68db      	ldr	r3, [r3, #12]
 8036276:	2400      	movs	r4, #0
 8036278:	9400      	str	r4, [sp, #0]
 803627a:	f000 f9df 	bl	803663c <xQueueGenericCreateStatic>
 803627e:	4603      	mov	r3, r0
 8036280:	e008      	b.n	8036294 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8036282:	687b      	ldr	r3, [r7, #4]
 8036284:	6818      	ldr	r0, [r3, #0]
 8036286:	687b      	ldr	r3, [r7, #4]
 8036288:	685b      	ldr	r3, [r3, #4]
 803628a:	2200      	movs	r2, #0
 803628c:	4619      	mov	r1, r3
 803628e:	f000 fa4d 	bl	803672c <xQueueGenericCreate>
 8036292:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8036294:	4618      	mov	r0, r3
 8036296:	370c      	adds	r7, #12
 8036298:	46bd      	mov	sp, r7
 803629a:	bd90      	pop	{r4, r7, pc}

0803629c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 803629c:	b580      	push	{r7, lr}
 803629e:	b086      	sub	sp, #24
 80362a0:	af00      	add	r7, sp, #0
 80362a2:	60f8      	str	r0, [r7, #12]
 80362a4:	60b9      	str	r1, [r7, #8]
 80362a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80362a8:	2300      	movs	r3, #0
 80362aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80362ac:	687b      	ldr	r3, [r7, #4]
 80362ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80362b0:	697b      	ldr	r3, [r7, #20]
 80362b2:	2b00      	cmp	r3, #0
 80362b4:	d101      	bne.n	80362ba <osMessagePut+0x1e>
    ticks = 1;
 80362b6:	2301      	movs	r3, #1
 80362b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80362ba:	f7ff fdb3 	bl	8035e24 <inHandlerMode>
 80362be:	4603      	mov	r3, r0
 80362c0:	2b00      	cmp	r3, #0
 80362c2:	d018      	beq.n	80362f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80362c4:	f107 0210 	add.w	r2, r7, #16
 80362c8:	f107 0108 	add.w	r1, r7, #8
 80362cc:	2300      	movs	r3, #0
 80362ce:	68f8      	ldr	r0, [r7, #12]
 80362d0:	f000 fbd0 	bl	8036a74 <xQueueGenericSendFromISR>
 80362d4:	4603      	mov	r3, r0
 80362d6:	2b01      	cmp	r3, #1
 80362d8:	d001      	beq.n	80362de <osMessagePut+0x42>
      return osErrorOS;
 80362da:	23ff      	movs	r3, #255	; 0xff
 80362dc:	e018      	b.n	8036310 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80362de:	693b      	ldr	r3, [r7, #16]
 80362e0:	2b00      	cmp	r3, #0
 80362e2:	d014      	beq.n	803630e <osMessagePut+0x72>
 80362e4:	4b0c      	ldr	r3, [pc, #48]	; (8036318 <osMessagePut+0x7c>)
 80362e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80362ea:	601a      	str	r2, [r3, #0]
 80362ec:	f3bf 8f4f 	dsb	sy
 80362f0:	f3bf 8f6f 	isb	sy
 80362f4:	e00b      	b.n	803630e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80362f6:	f107 0108 	add.w	r1, r7, #8
 80362fa:	2300      	movs	r3, #0
 80362fc:	697a      	ldr	r2, [r7, #20]
 80362fe:	68f8      	ldr	r0, [r7, #12]
 8036300:	f000 faba 	bl	8036878 <xQueueGenericSend>
 8036304:	4603      	mov	r3, r0
 8036306:	2b01      	cmp	r3, #1
 8036308:	d001      	beq.n	803630e <osMessagePut+0x72>
      return osErrorOS;
 803630a:	23ff      	movs	r3, #255	; 0xff
 803630c:	e000      	b.n	8036310 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 803630e:	2300      	movs	r3, #0
}
 8036310:	4618      	mov	r0, r3
 8036312:	3718      	adds	r7, #24
 8036314:	46bd      	mov	sp, r7
 8036316:	bd80      	pop	{r7, pc}
 8036318:	e000ed04 	.word	0xe000ed04

0803631c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 803631c:	b590      	push	{r4, r7, lr}
 803631e:	b08b      	sub	sp, #44	; 0x2c
 8036320:	af00      	add	r7, sp, #0
 8036322:	60f8      	str	r0, [r7, #12]
 8036324:	60b9      	str	r1, [r7, #8]
 8036326:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8036328:	68bb      	ldr	r3, [r7, #8]
 803632a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 803632c:	2300      	movs	r3, #0
 803632e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8036330:	68bb      	ldr	r3, [r7, #8]
 8036332:	2b00      	cmp	r3, #0
 8036334:	d10a      	bne.n	803634c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8036336:	2380      	movs	r3, #128	; 0x80
 8036338:	617b      	str	r3, [r7, #20]
    return event;
 803633a:	68fb      	ldr	r3, [r7, #12]
 803633c:	461c      	mov	r4, r3
 803633e:	f107 0314 	add.w	r3, r7, #20
 8036342:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8036346:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 803634a:	e054      	b.n	80363f6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 803634c:	2300      	movs	r3, #0
 803634e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8036350:	2300      	movs	r3, #0
 8036352:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8036354:	687b      	ldr	r3, [r7, #4]
 8036356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803635a:	d103      	bne.n	8036364 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 803635c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8036360:	627b      	str	r3, [r7, #36]	; 0x24
 8036362:	e009      	b.n	8036378 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8036364:	687b      	ldr	r3, [r7, #4]
 8036366:	2b00      	cmp	r3, #0
 8036368:	d006      	beq.n	8036378 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 803636a:	687b      	ldr	r3, [r7, #4]
 803636c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 803636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036370:	2b00      	cmp	r3, #0
 8036372:	d101      	bne.n	8036378 <osMessageGet+0x5c>
      ticks = 1;
 8036374:	2301      	movs	r3, #1
 8036376:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8036378:	f7ff fd54 	bl	8035e24 <inHandlerMode>
 803637c:	4603      	mov	r3, r0
 803637e:	2b00      	cmp	r3, #0
 8036380:	d01c      	beq.n	80363bc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8036382:	f107 0220 	add.w	r2, r7, #32
 8036386:	f107 0314 	add.w	r3, r7, #20
 803638a:	3304      	adds	r3, #4
 803638c:	4619      	mov	r1, r3
 803638e:	68b8      	ldr	r0, [r7, #8]
 8036390:	f000 fe84 	bl	803709c <xQueueReceiveFromISR>
 8036394:	4603      	mov	r3, r0
 8036396:	2b01      	cmp	r3, #1
 8036398:	d102      	bne.n	80363a0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 803639a:	2310      	movs	r3, #16
 803639c:	617b      	str	r3, [r7, #20]
 803639e:	e001      	b.n	80363a4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80363a0:	2300      	movs	r3, #0
 80363a2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80363a4:	6a3b      	ldr	r3, [r7, #32]
 80363a6:	2b00      	cmp	r3, #0
 80363a8:	d01d      	beq.n	80363e6 <osMessageGet+0xca>
 80363aa:	4b15      	ldr	r3, [pc, #84]	; (8036400 <osMessageGet+0xe4>)
 80363ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80363b0:	601a      	str	r2, [r3, #0]
 80363b2:	f3bf 8f4f 	dsb	sy
 80363b6:	f3bf 8f6f 	isb	sy
 80363ba:	e014      	b.n	80363e6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80363bc:	f107 0314 	add.w	r3, r7, #20
 80363c0:	3304      	adds	r3, #4
 80363c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80363c4:	4619      	mov	r1, r3
 80363c6:	68b8      	ldr	r0, [r7, #8]
 80363c8:	f000 fc7c 	bl	8036cc4 <xQueueReceive>
 80363cc:	4603      	mov	r3, r0
 80363ce:	2b01      	cmp	r3, #1
 80363d0:	d102      	bne.n	80363d8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80363d2:	2310      	movs	r3, #16
 80363d4:	617b      	str	r3, [r7, #20]
 80363d6:	e006      	b.n	80363e6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80363d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80363da:	2b00      	cmp	r3, #0
 80363dc:	d101      	bne.n	80363e2 <osMessageGet+0xc6>
 80363de:	2300      	movs	r3, #0
 80363e0:	e000      	b.n	80363e4 <osMessageGet+0xc8>
 80363e2:	2340      	movs	r3, #64	; 0x40
 80363e4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80363e6:	68fb      	ldr	r3, [r7, #12]
 80363e8:	461c      	mov	r4, r3
 80363ea:	f107 0314 	add.w	r3, r7, #20
 80363ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80363f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80363f6:	68f8      	ldr	r0, [r7, #12]
 80363f8:	372c      	adds	r7, #44	; 0x2c
 80363fa:	46bd      	mov	sp, r7
 80363fc:	bd90      	pop	{r4, r7, pc}
 80363fe:	bf00      	nop
 8036400:	e000ed04 	.word	0xe000ed04

08036404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8036404:	b480      	push	{r7}
 8036406:	b083      	sub	sp, #12
 8036408:	af00      	add	r7, sp, #0
 803640a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 803640c:	687b      	ldr	r3, [r7, #4]
 803640e:	f103 0208 	add.w	r2, r3, #8
 8036412:	687b      	ldr	r3, [r7, #4]
 8036414:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8036416:	687b      	ldr	r3, [r7, #4]
 8036418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803641c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 803641e:	687b      	ldr	r3, [r7, #4]
 8036420:	f103 0208 	add.w	r2, r3, #8
 8036424:	687b      	ldr	r3, [r7, #4]
 8036426:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8036428:	687b      	ldr	r3, [r7, #4]
 803642a:	f103 0208 	add.w	r2, r3, #8
 803642e:	687b      	ldr	r3, [r7, #4]
 8036430:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8036432:	687b      	ldr	r3, [r7, #4]
 8036434:	2200      	movs	r2, #0
 8036436:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8036438:	bf00      	nop
 803643a:	370c      	adds	r7, #12
 803643c:	46bd      	mov	sp, r7
 803643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036442:	4770      	bx	lr

08036444 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8036444:	b480      	push	{r7}
 8036446:	b083      	sub	sp, #12
 8036448:	af00      	add	r7, sp, #0
 803644a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 803644c:	687b      	ldr	r3, [r7, #4]
 803644e:	2200      	movs	r2, #0
 8036450:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8036452:	bf00      	nop
 8036454:	370c      	adds	r7, #12
 8036456:	46bd      	mov	sp, r7
 8036458:	f85d 7b04 	ldr.w	r7, [sp], #4
 803645c:	4770      	bx	lr

0803645e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 803645e:	b480      	push	{r7}
 8036460:	b085      	sub	sp, #20
 8036462:	af00      	add	r7, sp, #0
 8036464:	6078      	str	r0, [r7, #4]
 8036466:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8036468:	687b      	ldr	r3, [r7, #4]
 803646a:	685b      	ldr	r3, [r3, #4]
 803646c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 803646e:	683b      	ldr	r3, [r7, #0]
 8036470:	68fa      	ldr	r2, [r7, #12]
 8036472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8036474:	68fb      	ldr	r3, [r7, #12]
 8036476:	689a      	ldr	r2, [r3, #8]
 8036478:	683b      	ldr	r3, [r7, #0]
 803647a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 803647c:	68fb      	ldr	r3, [r7, #12]
 803647e:	689b      	ldr	r3, [r3, #8]
 8036480:	683a      	ldr	r2, [r7, #0]
 8036482:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8036484:	68fb      	ldr	r3, [r7, #12]
 8036486:	683a      	ldr	r2, [r7, #0]
 8036488:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 803648a:	683b      	ldr	r3, [r7, #0]
 803648c:	687a      	ldr	r2, [r7, #4]
 803648e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8036490:	687b      	ldr	r3, [r7, #4]
 8036492:	681b      	ldr	r3, [r3, #0]
 8036494:	1c5a      	adds	r2, r3, #1
 8036496:	687b      	ldr	r3, [r7, #4]
 8036498:	601a      	str	r2, [r3, #0]
}
 803649a:	bf00      	nop
 803649c:	3714      	adds	r7, #20
 803649e:	46bd      	mov	sp, r7
 80364a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80364a4:	4770      	bx	lr

080364a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80364a6:	b480      	push	{r7}
 80364a8:	b085      	sub	sp, #20
 80364aa:	af00      	add	r7, sp, #0
 80364ac:	6078      	str	r0, [r7, #4]
 80364ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80364b0:	683b      	ldr	r3, [r7, #0]
 80364b2:	681b      	ldr	r3, [r3, #0]
 80364b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80364b6:	68bb      	ldr	r3, [r7, #8]
 80364b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80364bc:	d103      	bne.n	80364c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80364be:	687b      	ldr	r3, [r7, #4]
 80364c0:	691b      	ldr	r3, [r3, #16]
 80364c2:	60fb      	str	r3, [r7, #12]
 80364c4:	e00c      	b.n	80364e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80364c6:	687b      	ldr	r3, [r7, #4]
 80364c8:	3308      	adds	r3, #8
 80364ca:	60fb      	str	r3, [r7, #12]
 80364cc:	e002      	b.n	80364d4 <vListInsert+0x2e>
 80364ce:	68fb      	ldr	r3, [r7, #12]
 80364d0:	685b      	ldr	r3, [r3, #4]
 80364d2:	60fb      	str	r3, [r7, #12]
 80364d4:	68fb      	ldr	r3, [r7, #12]
 80364d6:	685b      	ldr	r3, [r3, #4]
 80364d8:	681b      	ldr	r3, [r3, #0]
 80364da:	68ba      	ldr	r2, [r7, #8]
 80364dc:	429a      	cmp	r2, r3
 80364de:	d2f6      	bcs.n	80364ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80364e0:	68fb      	ldr	r3, [r7, #12]
 80364e2:	685a      	ldr	r2, [r3, #4]
 80364e4:	683b      	ldr	r3, [r7, #0]
 80364e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80364e8:	683b      	ldr	r3, [r7, #0]
 80364ea:	685b      	ldr	r3, [r3, #4]
 80364ec:	683a      	ldr	r2, [r7, #0]
 80364ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80364f0:	683b      	ldr	r3, [r7, #0]
 80364f2:	68fa      	ldr	r2, [r7, #12]
 80364f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80364f6:	68fb      	ldr	r3, [r7, #12]
 80364f8:	683a      	ldr	r2, [r7, #0]
 80364fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80364fc:	683b      	ldr	r3, [r7, #0]
 80364fe:	687a      	ldr	r2, [r7, #4]
 8036500:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8036502:	687b      	ldr	r3, [r7, #4]
 8036504:	681b      	ldr	r3, [r3, #0]
 8036506:	1c5a      	adds	r2, r3, #1
 8036508:	687b      	ldr	r3, [r7, #4]
 803650a:	601a      	str	r2, [r3, #0]
}
 803650c:	bf00      	nop
 803650e:	3714      	adds	r7, #20
 8036510:	46bd      	mov	sp, r7
 8036512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036516:	4770      	bx	lr

08036518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8036518:	b480      	push	{r7}
 803651a:	b085      	sub	sp, #20
 803651c:	af00      	add	r7, sp, #0
 803651e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8036520:	687b      	ldr	r3, [r7, #4]
 8036522:	691b      	ldr	r3, [r3, #16]
 8036524:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8036526:	687b      	ldr	r3, [r7, #4]
 8036528:	685b      	ldr	r3, [r3, #4]
 803652a:	687a      	ldr	r2, [r7, #4]
 803652c:	6892      	ldr	r2, [r2, #8]
 803652e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8036530:	687b      	ldr	r3, [r7, #4]
 8036532:	689b      	ldr	r3, [r3, #8]
 8036534:	687a      	ldr	r2, [r7, #4]
 8036536:	6852      	ldr	r2, [r2, #4]
 8036538:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 803653a:	68fb      	ldr	r3, [r7, #12]
 803653c:	685b      	ldr	r3, [r3, #4]
 803653e:	687a      	ldr	r2, [r7, #4]
 8036540:	429a      	cmp	r2, r3
 8036542:	d103      	bne.n	803654c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8036544:	687b      	ldr	r3, [r7, #4]
 8036546:	689a      	ldr	r2, [r3, #8]
 8036548:	68fb      	ldr	r3, [r7, #12]
 803654a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 803654c:	687b      	ldr	r3, [r7, #4]
 803654e:	2200      	movs	r2, #0
 8036550:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8036552:	68fb      	ldr	r3, [r7, #12]
 8036554:	681b      	ldr	r3, [r3, #0]
 8036556:	1e5a      	subs	r2, r3, #1
 8036558:	68fb      	ldr	r3, [r7, #12]
 803655a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 803655c:	68fb      	ldr	r3, [r7, #12]
 803655e:	681b      	ldr	r3, [r3, #0]
}
 8036560:	4618      	mov	r0, r3
 8036562:	3714      	adds	r7, #20
 8036564:	46bd      	mov	sp, r7
 8036566:	f85d 7b04 	ldr.w	r7, [sp], #4
 803656a:	4770      	bx	lr

0803656c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 803656c:	b580      	push	{r7, lr}
 803656e:	b084      	sub	sp, #16
 8036570:	af00      	add	r7, sp, #0
 8036572:	6078      	str	r0, [r7, #4]
 8036574:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8036576:	687b      	ldr	r3, [r7, #4]
 8036578:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 803657a:	68fb      	ldr	r3, [r7, #12]
 803657c:	2b00      	cmp	r3, #0
 803657e:	d10a      	bne.n	8036596 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8036580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036584:	f383 8811 	msr	BASEPRI, r3
 8036588:	f3bf 8f6f 	isb	sy
 803658c:	f3bf 8f4f 	dsb	sy
 8036590:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8036592:	bf00      	nop
 8036594:	e7fe      	b.n	8036594 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8036596:	f002 fded 	bl	8039174 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 803659a:	68fb      	ldr	r3, [r7, #12]
 803659c:	681a      	ldr	r2, [r3, #0]
 803659e:	68fb      	ldr	r3, [r7, #12]
 80365a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80365a2:	68f9      	ldr	r1, [r7, #12]
 80365a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80365a6:	fb01 f303 	mul.w	r3, r1, r3
 80365aa:	441a      	add	r2, r3
 80365ac:	68fb      	ldr	r3, [r7, #12]
 80365ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80365b0:	68fb      	ldr	r3, [r7, #12]
 80365b2:	2200      	movs	r2, #0
 80365b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80365b6:	68fb      	ldr	r3, [r7, #12]
 80365b8:	681a      	ldr	r2, [r3, #0]
 80365ba:	68fb      	ldr	r3, [r7, #12]
 80365bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80365be:	68fb      	ldr	r3, [r7, #12]
 80365c0:	681a      	ldr	r2, [r3, #0]
 80365c2:	68fb      	ldr	r3, [r7, #12]
 80365c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80365c6:	3b01      	subs	r3, #1
 80365c8:	68f9      	ldr	r1, [r7, #12]
 80365ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80365cc:	fb01 f303 	mul.w	r3, r1, r3
 80365d0:	441a      	add	r2, r3
 80365d2:	68fb      	ldr	r3, [r7, #12]
 80365d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80365d6:	68fb      	ldr	r3, [r7, #12]
 80365d8:	22ff      	movs	r2, #255	; 0xff
 80365da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80365de:	68fb      	ldr	r3, [r7, #12]
 80365e0:	22ff      	movs	r2, #255	; 0xff
 80365e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80365e6:	683b      	ldr	r3, [r7, #0]
 80365e8:	2b00      	cmp	r3, #0
 80365ea:	d114      	bne.n	8036616 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80365ec:	68fb      	ldr	r3, [r7, #12]
 80365ee:	691b      	ldr	r3, [r3, #16]
 80365f0:	2b00      	cmp	r3, #0
 80365f2:	d01a      	beq.n	803662a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80365f4:	68fb      	ldr	r3, [r7, #12]
 80365f6:	3310      	adds	r3, #16
 80365f8:	4618      	mov	r0, r3
 80365fa:	f001 fbef 	bl	8037ddc <xTaskRemoveFromEventList>
 80365fe:	4603      	mov	r3, r0
 8036600:	2b00      	cmp	r3, #0
 8036602:	d012      	beq.n	803662a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8036604:	4b0c      	ldr	r3, [pc, #48]	; (8036638 <xQueueGenericReset+0xcc>)
 8036606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803660a:	601a      	str	r2, [r3, #0]
 803660c:	f3bf 8f4f 	dsb	sy
 8036610:	f3bf 8f6f 	isb	sy
 8036614:	e009      	b.n	803662a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8036616:	68fb      	ldr	r3, [r7, #12]
 8036618:	3310      	adds	r3, #16
 803661a:	4618      	mov	r0, r3
 803661c:	f7ff fef2 	bl	8036404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8036620:	68fb      	ldr	r3, [r7, #12]
 8036622:	3324      	adds	r3, #36	; 0x24
 8036624:	4618      	mov	r0, r3
 8036626:	f7ff feed 	bl	8036404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 803662a:	f002 fdd3 	bl	80391d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 803662e:	2301      	movs	r3, #1
}
 8036630:	4618      	mov	r0, r3
 8036632:	3710      	adds	r7, #16
 8036634:	46bd      	mov	sp, r7
 8036636:	bd80      	pop	{r7, pc}
 8036638:	e000ed04 	.word	0xe000ed04

0803663c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 803663c:	b580      	push	{r7, lr}
 803663e:	b08e      	sub	sp, #56	; 0x38
 8036640:	af02      	add	r7, sp, #8
 8036642:	60f8      	str	r0, [r7, #12]
 8036644:	60b9      	str	r1, [r7, #8]
 8036646:	607a      	str	r2, [r7, #4]
 8036648:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 803664a:	68fb      	ldr	r3, [r7, #12]
 803664c:	2b00      	cmp	r3, #0
 803664e:	d10a      	bne.n	8036666 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8036650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036654:	f383 8811 	msr	BASEPRI, r3
 8036658:	f3bf 8f6f 	isb	sy
 803665c:	f3bf 8f4f 	dsb	sy
 8036660:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8036662:	bf00      	nop
 8036664:	e7fe      	b.n	8036664 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8036666:	683b      	ldr	r3, [r7, #0]
 8036668:	2b00      	cmp	r3, #0
 803666a:	d10a      	bne.n	8036682 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 803666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036670:	f383 8811 	msr	BASEPRI, r3
 8036674:	f3bf 8f6f 	isb	sy
 8036678:	f3bf 8f4f 	dsb	sy
 803667c:	627b      	str	r3, [r7, #36]	; 0x24
}
 803667e:	bf00      	nop
 8036680:	e7fe      	b.n	8036680 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8036682:	687b      	ldr	r3, [r7, #4]
 8036684:	2b00      	cmp	r3, #0
 8036686:	d002      	beq.n	803668e <xQueueGenericCreateStatic+0x52>
 8036688:	68bb      	ldr	r3, [r7, #8]
 803668a:	2b00      	cmp	r3, #0
 803668c:	d001      	beq.n	8036692 <xQueueGenericCreateStatic+0x56>
 803668e:	2301      	movs	r3, #1
 8036690:	e000      	b.n	8036694 <xQueueGenericCreateStatic+0x58>
 8036692:	2300      	movs	r3, #0
 8036694:	2b00      	cmp	r3, #0
 8036696:	d10a      	bne.n	80366ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8036698:	f04f 0350 	mov.w	r3, #80	; 0x50
 803669c:	f383 8811 	msr	BASEPRI, r3
 80366a0:	f3bf 8f6f 	isb	sy
 80366a4:	f3bf 8f4f 	dsb	sy
 80366a8:	623b      	str	r3, [r7, #32]
}
 80366aa:	bf00      	nop
 80366ac:	e7fe      	b.n	80366ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80366ae:	687b      	ldr	r3, [r7, #4]
 80366b0:	2b00      	cmp	r3, #0
 80366b2:	d102      	bne.n	80366ba <xQueueGenericCreateStatic+0x7e>
 80366b4:	68bb      	ldr	r3, [r7, #8]
 80366b6:	2b00      	cmp	r3, #0
 80366b8:	d101      	bne.n	80366be <xQueueGenericCreateStatic+0x82>
 80366ba:	2301      	movs	r3, #1
 80366bc:	e000      	b.n	80366c0 <xQueueGenericCreateStatic+0x84>
 80366be:	2300      	movs	r3, #0
 80366c0:	2b00      	cmp	r3, #0
 80366c2:	d10a      	bne.n	80366da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80366c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80366c8:	f383 8811 	msr	BASEPRI, r3
 80366cc:	f3bf 8f6f 	isb	sy
 80366d0:	f3bf 8f4f 	dsb	sy
 80366d4:	61fb      	str	r3, [r7, #28]
}
 80366d6:	bf00      	nop
 80366d8:	e7fe      	b.n	80366d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80366da:	2348      	movs	r3, #72	; 0x48
 80366dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80366de:	697b      	ldr	r3, [r7, #20]
 80366e0:	2b48      	cmp	r3, #72	; 0x48
 80366e2:	d00a      	beq.n	80366fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80366e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80366e8:	f383 8811 	msr	BASEPRI, r3
 80366ec:	f3bf 8f6f 	isb	sy
 80366f0:	f3bf 8f4f 	dsb	sy
 80366f4:	61bb      	str	r3, [r7, #24]
}
 80366f6:	bf00      	nop
 80366f8:	e7fe      	b.n	80366f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80366fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80366fc:	683b      	ldr	r3, [r7, #0]
 80366fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8036700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036702:	2b00      	cmp	r3, #0
 8036704:	d00d      	beq.n	8036722 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8036706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036708:	2201      	movs	r2, #1
 803670a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 803670e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8036712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036714:	9300      	str	r3, [sp, #0]
 8036716:	4613      	mov	r3, r2
 8036718:	687a      	ldr	r2, [r7, #4]
 803671a:	68b9      	ldr	r1, [r7, #8]
 803671c:	68f8      	ldr	r0, [r7, #12]
 803671e:	f000 f83f 	bl	80367a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8036722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8036724:	4618      	mov	r0, r3
 8036726:	3730      	adds	r7, #48	; 0x30
 8036728:	46bd      	mov	sp, r7
 803672a:	bd80      	pop	{r7, pc}

0803672c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 803672c:	b580      	push	{r7, lr}
 803672e:	b08a      	sub	sp, #40	; 0x28
 8036730:	af02      	add	r7, sp, #8
 8036732:	60f8      	str	r0, [r7, #12]
 8036734:	60b9      	str	r1, [r7, #8]
 8036736:	4613      	mov	r3, r2
 8036738:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 803673a:	68fb      	ldr	r3, [r7, #12]
 803673c:	2b00      	cmp	r3, #0
 803673e:	d10a      	bne.n	8036756 <xQueueGenericCreate+0x2a>
	__asm volatile
 8036740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036744:	f383 8811 	msr	BASEPRI, r3
 8036748:	f3bf 8f6f 	isb	sy
 803674c:	f3bf 8f4f 	dsb	sy
 8036750:	613b      	str	r3, [r7, #16]
}
 8036752:	bf00      	nop
 8036754:	e7fe      	b.n	8036754 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8036756:	68fb      	ldr	r3, [r7, #12]
 8036758:	68ba      	ldr	r2, [r7, #8]
 803675a:	fb02 f303 	mul.w	r3, r2, r3
 803675e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8036760:	69fb      	ldr	r3, [r7, #28]
 8036762:	3348      	adds	r3, #72	; 0x48
 8036764:	4618      	mov	r0, r3
 8036766:	f002 fe27 	bl	80393b8 <pvPortMalloc>
 803676a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 803676c:	69bb      	ldr	r3, [r7, #24]
 803676e:	2b00      	cmp	r3, #0
 8036770:	d011      	beq.n	8036796 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8036772:	69bb      	ldr	r3, [r7, #24]
 8036774:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8036776:	697b      	ldr	r3, [r7, #20]
 8036778:	3348      	adds	r3, #72	; 0x48
 803677a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 803677c:	69bb      	ldr	r3, [r7, #24]
 803677e:	2200      	movs	r2, #0
 8036780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8036784:	79fa      	ldrb	r2, [r7, #7]
 8036786:	69bb      	ldr	r3, [r7, #24]
 8036788:	9300      	str	r3, [sp, #0]
 803678a:	4613      	mov	r3, r2
 803678c:	697a      	ldr	r2, [r7, #20]
 803678e:	68b9      	ldr	r1, [r7, #8]
 8036790:	68f8      	ldr	r0, [r7, #12]
 8036792:	f000 f805 	bl	80367a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8036796:	69bb      	ldr	r3, [r7, #24]
	}
 8036798:	4618      	mov	r0, r3
 803679a:	3720      	adds	r7, #32
 803679c:	46bd      	mov	sp, r7
 803679e:	bd80      	pop	{r7, pc}

080367a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80367a0:	b580      	push	{r7, lr}
 80367a2:	b084      	sub	sp, #16
 80367a4:	af00      	add	r7, sp, #0
 80367a6:	60f8      	str	r0, [r7, #12]
 80367a8:	60b9      	str	r1, [r7, #8]
 80367aa:	607a      	str	r2, [r7, #4]
 80367ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80367ae:	68bb      	ldr	r3, [r7, #8]
 80367b0:	2b00      	cmp	r3, #0
 80367b2:	d103      	bne.n	80367bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80367b4:	69bb      	ldr	r3, [r7, #24]
 80367b6:	69ba      	ldr	r2, [r7, #24]
 80367b8:	601a      	str	r2, [r3, #0]
 80367ba:	e002      	b.n	80367c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80367bc:	69bb      	ldr	r3, [r7, #24]
 80367be:	687a      	ldr	r2, [r7, #4]
 80367c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80367c2:	69bb      	ldr	r3, [r7, #24]
 80367c4:	68fa      	ldr	r2, [r7, #12]
 80367c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80367c8:	69bb      	ldr	r3, [r7, #24]
 80367ca:	68ba      	ldr	r2, [r7, #8]
 80367cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80367ce:	2101      	movs	r1, #1
 80367d0:	69b8      	ldr	r0, [r7, #24]
 80367d2:	f7ff fecb 	bl	803656c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80367d6:	bf00      	nop
 80367d8:	3710      	adds	r7, #16
 80367da:	46bd      	mov	sp, r7
 80367dc:	bd80      	pop	{r7, pc}

080367de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80367de:	b580      	push	{r7, lr}
 80367e0:	b082      	sub	sp, #8
 80367e2:	af00      	add	r7, sp, #0
 80367e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80367e6:	687b      	ldr	r3, [r7, #4]
 80367e8:	2b00      	cmp	r3, #0
 80367ea:	d00e      	beq.n	803680a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80367ec:	687b      	ldr	r3, [r7, #4]
 80367ee:	2200      	movs	r2, #0
 80367f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80367f2:	687b      	ldr	r3, [r7, #4]
 80367f4:	2200      	movs	r2, #0
 80367f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80367f8:	687b      	ldr	r3, [r7, #4]
 80367fa:	2200      	movs	r2, #0
 80367fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80367fe:	2300      	movs	r3, #0
 8036800:	2200      	movs	r2, #0
 8036802:	2100      	movs	r1, #0
 8036804:	6878      	ldr	r0, [r7, #4]
 8036806:	f000 f837 	bl	8036878 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 803680a:	bf00      	nop
 803680c:	3708      	adds	r7, #8
 803680e:	46bd      	mov	sp, r7
 8036810:	bd80      	pop	{r7, pc}

08036812 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8036812:	b580      	push	{r7, lr}
 8036814:	b086      	sub	sp, #24
 8036816:	af00      	add	r7, sp, #0
 8036818:	4603      	mov	r3, r0
 803681a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 803681c:	2301      	movs	r3, #1
 803681e:	617b      	str	r3, [r7, #20]
 8036820:	2300      	movs	r3, #0
 8036822:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8036824:	79fb      	ldrb	r3, [r7, #7]
 8036826:	461a      	mov	r2, r3
 8036828:	6939      	ldr	r1, [r7, #16]
 803682a:	6978      	ldr	r0, [r7, #20]
 803682c:	f7ff ff7e 	bl	803672c <xQueueGenericCreate>
 8036830:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8036832:	68f8      	ldr	r0, [r7, #12]
 8036834:	f7ff ffd3 	bl	80367de <prvInitialiseMutex>

		return xNewQueue;
 8036838:	68fb      	ldr	r3, [r7, #12]
	}
 803683a:	4618      	mov	r0, r3
 803683c:	3718      	adds	r7, #24
 803683e:	46bd      	mov	sp, r7
 8036840:	bd80      	pop	{r7, pc}

08036842 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8036842:	b580      	push	{r7, lr}
 8036844:	b088      	sub	sp, #32
 8036846:	af02      	add	r7, sp, #8
 8036848:	4603      	mov	r3, r0
 803684a:	6039      	str	r1, [r7, #0]
 803684c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 803684e:	2301      	movs	r3, #1
 8036850:	617b      	str	r3, [r7, #20]
 8036852:	2300      	movs	r3, #0
 8036854:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8036856:	79fb      	ldrb	r3, [r7, #7]
 8036858:	9300      	str	r3, [sp, #0]
 803685a:	683b      	ldr	r3, [r7, #0]
 803685c:	2200      	movs	r2, #0
 803685e:	6939      	ldr	r1, [r7, #16]
 8036860:	6978      	ldr	r0, [r7, #20]
 8036862:	f7ff feeb 	bl	803663c <xQueueGenericCreateStatic>
 8036866:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8036868:	68f8      	ldr	r0, [r7, #12]
 803686a:	f7ff ffb8 	bl	80367de <prvInitialiseMutex>

		return xNewQueue;
 803686e:	68fb      	ldr	r3, [r7, #12]
	}
 8036870:	4618      	mov	r0, r3
 8036872:	3718      	adds	r7, #24
 8036874:	46bd      	mov	sp, r7
 8036876:	bd80      	pop	{r7, pc}

08036878 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8036878:	b580      	push	{r7, lr}
 803687a:	b08e      	sub	sp, #56	; 0x38
 803687c:	af00      	add	r7, sp, #0
 803687e:	60f8      	str	r0, [r7, #12]
 8036880:	60b9      	str	r1, [r7, #8]
 8036882:	607a      	str	r2, [r7, #4]
 8036884:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8036886:	2300      	movs	r3, #0
 8036888:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 803688a:	68fb      	ldr	r3, [r7, #12]
 803688c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 803688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036890:	2b00      	cmp	r3, #0
 8036892:	d10a      	bne.n	80368aa <xQueueGenericSend+0x32>
	__asm volatile
 8036894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036898:	f383 8811 	msr	BASEPRI, r3
 803689c:	f3bf 8f6f 	isb	sy
 80368a0:	f3bf 8f4f 	dsb	sy
 80368a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80368a6:	bf00      	nop
 80368a8:	e7fe      	b.n	80368a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80368aa:	68bb      	ldr	r3, [r7, #8]
 80368ac:	2b00      	cmp	r3, #0
 80368ae:	d103      	bne.n	80368b8 <xQueueGenericSend+0x40>
 80368b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80368b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80368b4:	2b00      	cmp	r3, #0
 80368b6:	d101      	bne.n	80368bc <xQueueGenericSend+0x44>
 80368b8:	2301      	movs	r3, #1
 80368ba:	e000      	b.n	80368be <xQueueGenericSend+0x46>
 80368bc:	2300      	movs	r3, #0
 80368be:	2b00      	cmp	r3, #0
 80368c0:	d10a      	bne.n	80368d8 <xQueueGenericSend+0x60>
	__asm volatile
 80368c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80368c6:	f383 8811 	msr	BASEPRI, r3
 80368ca:	f3bf 8f6f 	isb	sy
 80368ce:	f3bf 8f4f 	dsb	sy
 80368d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80368d4:	bf00      	nop
 80368d6:	e7fe      	b.n	80368d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80368d8:	683b      	ldr	r3, [r7, #0]
 80368da:	2b02      	cmp	r3, #2
 80368dc:	d103      	bne.n	80368e6 <xQueueGenericSend+0x6e>
 80368de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80368e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80368e2:	2b01      	cmp	r3, #1
 80368e4:	d101      	bne.n	80368ea <xQueueGenericSend+0x72>
 80368e6:	2301      	movs	r3, #1
 80368e8:	e000      	b.n	80368ec <xQueueGenericSend+0x74>
 80368ea:	2300      	movs	r3, #0
 80368ec:	2b00      	cmp	r3, #0
 80368ee:	d10a      	bne.n	8036906 <xQueueGenericSend+0x8e>
	__asm volatile
 80368f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80368f4:	f383 8811 	msr	BASEPRI, r3
 80368f8:	f3bf 8f6f 	isb	sy
 80368fc:	f3bf 8f4f 	dsb	sy
 8036900:	623b      	str	r3, [r7, #32]
}
 8036902:	bf00      	nop
 8036904:	e7fe      	b.n	8036904 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8036906:	f001 fc25 	bl	8038154 <xTaskGetSchedulerState>
 803690a:	4603      	mov	r3, r0
 803690c:	2b00      	cmp	r3, #0
 803690e:	d102      	bne.n	8036916 <xQueueGenericSend+0x9e>
 8036910:	687b      	ldr	r3, [r7, #4]
 8036912:	2b00      	cmp	r3, #0
 8036914:	d101      	bne.n	803691a <xQueueGenericSend+0xa2>
 8036916:	2301      	movs	r3, #1
 8036918:	e000      	b.n	803691c <xQueueGenericSend+0xa4>
 803691a:	2300      	movs	r3, #0
 803691c:	2b00      	cmp	r3, #0
 803691e:	d10a      	bne.n	8036936 <xQueueGenericSend+0xbe>
	__asm volatile
 8036920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036924:	f383 8811 	msr	BASEPRI, r3
 8036928:	f3bf 8f6f 	isb	sy
 803692c:	f3bf 8f4f 	dsb	sy
 8036930:	61fb      	str	r3, [r7, #28]
}
 8036932:	bf00      	nop
 8036934:	e7fe      	b.n	8036934 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8036936:	f002 fc1d 	bl	8039174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 803693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803693c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 803693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036942:	429a      	cmp	r2, r3
 8036944:	d302      	bcc.n	803694c <xQueueGenericSend+0xd4>
 8036946:	683b      	ldr	r3, [r7, #0]
 8036948:	2b02      	cmp	r3, #2
 803694a:	d129      	bne.n	80369a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 803694c:	683a      	ldr	r2, [r7, #0]
 803694e:	68b9      	ldr	r1, [r7, #8]
 8036950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8036952:	f000 fc5e 	bl	8037212 <prvCopyDataToQueue>
 8036956:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8036958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803695c:	2b00      	cmp	r3, #0
 803695e:	d010      	beq.n	8036982 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8036960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036962:	3324      	adds	r3, #36	; 0x24
 8036964:	4618      	mov	r0, r3
 8036966:	f001 fa39 	bl	8037ddc <xTaskRemoveFromEventList>
 803696a:	4603      	mov	r3, r0
 803696c:	2b00      	cmp	r3, #0
 803696e:	d013      	beq.n	8036998 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8036970:	4b3f      	ldr	r3, [pc, #252]	; (8036a70 <xQueueGenericSend+0x1f8>)
 8036972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036976:	601a      	str	r2, [r3, #0]
 8036978:	f3bf 8f4f 	dsb	sy
 803697c:	f3bf 8f6f 	isb	sy
 8036980:	e00a      	b.n	8036998 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8036982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036984:	2b00      	cmp	r3, #0
 8036986:	d007      	beq.n	8036998 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8036988:	4b39      	ldr	r3, [pc, #228]	; (8036a70 <xQueueGenericSend+0x1f8>)
 803698a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803698e:	601a      	str	r2, [r3, #0]
 8036990:	f3bf 8f4f 	dsb	sy
 8036994:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8036998:	f002 fc1c 	bl	80391d4 <vPortExitCritical>
				return pdPASS;
 803699c:	2301      	movs	r3, #1
 803699e:	e063      	b.n	8036a68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80369a0:	687b      	ldr	r3, [r7, #4]
 80369a2:	2b00      	cmp	r3, #0
 80369a4:	d103      	bne.n	80369ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80369a6:	f002 fc15 	bl	80391d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80369aa:	2300      	movs	r3, #0
 80369ac:	e05c      	b.n	8036a68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80369ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80369b0:	2b00      	cmp	r3, #0
 80369b2:	d106      	bne.n	80369c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80369b4:	f107 0314 	add.w	r3, r7, #20
 80369b8:	4618      	mov	r0, r3
 80369ba:	f001 fa71 	bl	8037ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80369be:	2301      	movs	r3, #1
 80369c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80369c2:	f002 fc07 	bl	80391d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80369c6:	f000 ffeb 	bl	80379a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80369ca:	f002 fbd3 	bl	8039174 <vPortEnterCritical>
 80369ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80369d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80369d4:	b25b      	sxtb	r3, r3
 80369d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80369da:	d103      	bne.n	80369e4 <xQueueGenericSend+0x16c>
 80369dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80369de:	2200      	movs	r2, #0
 80369e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80369e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80369e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80369ea:	b25b      	sxtb	r3, r3
 80369ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80369f0:	d103      	bne.n	80369fa <xQueueGenericSend+0x182>
 80369f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80369f4:	2200      	movs	r2, #0
 80369f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80369fa:	f002 fbeb 	bl	80391d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80369fe:	1d3a      	adds	r2, r7, #4
 8036a00:	f107 0314 	add.w	r3, r7, #20
 8036a04:	4611      	mov	r1, r2
 8036a06:	4618      	mov	r0, r3
 8036a08:	f001 fa60 	bl	8037ecc <xTaskCheckForTimeOut>
 8036a0c:	4603      	mov	r3, r0
 8036a0e:	2b00      	cmp	r3, #0
 8036a10:	d124      	bne.n	8036a5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8036a12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8036a14:	f000 fcf5 	bl	8037402 <prvIsQueueFull>
 8036a18:	4603      	mov	r3, r0
 8036a1a:	2b00      	cmp	r3, #0
 8036a1c:	d018      	beq.n	8036a50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8036a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036a20:	3310      	adds	r3, #16
 8036a22:	687a      	ldr	r2, [r7, #4]
 8036a24:	4611      	mov	r1, r2
 8036a26:	4618      	mov	r0, r3
 8036a28:	f001 f988 	bl	8037d3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8036a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8036a2e:	f000 fc80 	bl	8037332 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8036a32:	f000 ffc3 	bl	80379bc <xTaskResumeAll>
 8036a36:	4603      	mov	r3, r0
 8036a38:	2b00      	cmp	r3, #0
 8036a3a:	f47f af7c 	bne.w	8036936 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8036a3e:	4b0c      	ldr	r3, [pc, #48]	; (8036a70 <xQueueGenericSend+0x1f8>)
 8036a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036a44:	601a      	str	r2, [r3, #0]
 8036a46:	f3bf 8f4f 	dsb	sy
 8036a4a:	f3bf 8f6f 	isb	sy
 8036a4e:	e772      	b.n	8036936 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8036a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8036a52:	f000 fc6e 	bl	8037332 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8036a56:	f000 ffb1 	bl	80379bc <xTaskResumeAll>
 8036a5a:	e76c      	b.n	8036936 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8036a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8036a5e:	f000 fc68 	bl	8037332 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8036a62:	f000 ffab 	bl	80379bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8036a66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8036a68:	4618      	mov	r0, r3
 8036a6a:	3738      	adds	r7, #56	; 0x38
 8036a6c:	46bd      	mov	sp, r7
 8036a6e:	bd80      	pop	{r7, pc}
 8036a70:	e000ed04 	.word	0xe000ed04

08036a74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8036a74:	b580      	push	{r7, lr}
 8036a76:	b090      	sub	sp, #64	; 0x40
 8036a78:	af00      	add	r7, sp, #0
 8036a7a:	60f8      	str	r0, [r7, #12]
 8036a7c:	60b9      	str	r1, [r7, #8]
 8036a7e:	607a      	str	r2, [r7, #4]
 8036a80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8036a82:	68fb      	ldr	r3, [r7, #12]
 8036a84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8036a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036a88:	2b00      	cmp	r3, #0
 8036a8a:	d10a      	bne.n	8036aa2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8036a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036a90:	f383 8811 	msr	BASEPRI, r3
 8036a94:	f3bf 8f6f 	isb	sy
 8036a98:	f3bf 8f4f 	dsb	sy
 8036a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8036a9e:	bf00      	nop
 8036aa0:	e7fe      	b.n	8036aa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8036aa2:	68bb      	ldr	r3, [r7, #8]
 8036aa4:	2b00      	cmp	r3, #0
 8036aa6:	d103      	bne.n	8036ab0 <xQueueGenericSendFromISR+0x3c>
 8036aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036aac:	2b00      	cmp	r3, #0
 8036aae:	d101      	bne.n	8036ab4 <xQueueGenericSendFromISR+0x40>
 8036ab0:	2301      	movs	r3, #1
 8036ab2:	e000      	b.n	8036ab6 <xQueueGenericSendFromISR+0x42>
 8036ab4:	2300      	movs	r3, #0
 8036ab6:	2b00      	cmp	r3, #0
 8036ab8:	d10a      	bne.n	8036ad0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8036aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036abe:	f383 8811 	msr	BASEPRI, r3
 8036ac2:	f3bf 8f6f 	isb	sy
 8036ac6:	f3bf 8f4f 	dsb	sy
 8036aca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8036acc:	bf00      	nop
 8036ace:	e7fe      	b.n	8036ace <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8036ad0:	683b      	ldr	r3, [r7, #0]
 8036ad2:	2b02      	cmp	r3, #2
 8036ad4:	d103      	bne.n	8036ade <xQueueGenericSendFromISR+0x6a>
 8036ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036ada:	2b01      	cmp	r3, #1
 8036adc:	d101      	bne.n	8036ae2 <xQueueGenericSendFromISR+0x6e>
 8036ade:	2301      	movs	r3, #1
 8036ae0:	e000      	b.n	8036ae4 <xQueueGenericSendFromISR+0x70>
 8036ae2:	2300      	movs	r3, #0
 8036ae4:	2b00      	cmp	r3, #0
 8036ae6:	d10a      	bne.n	8036afe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8036ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036aec:	f383 8811 	msr	BASEPRI, r3
 8036af0:	f3bf 8f6f 	isb	sy
 8036af4:	f3bf 8f4f 	dsb	sy
 8036af8:	623b      	str	r3, [r7, #32]
}
 8036afa:	bf00      	nop
 8036afc:	e7fe      	b.n	8036afc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8036afe:	f002 fc1b 	bl	8039338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8036b02:	f3ef 8211 	mrs	r2, BASEPRI
 8036b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036b0a:	f383 8811 	msr	BASEPRI, r3
 8036b0e:	f3bf 8f6f 	isb	sy
 8036b12:	f3bf 8f4f 	dsb	sy
 8036b16:	61fa      	str	r2, [r7, #28]
 8036b18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8036b1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8036b1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8036b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8036b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036b26:	429a      	cmp	r2, r3
 8036b28:	d302      	bcc.n	8036b30 <xQueueGenericSendFromISR+0xbc>
 8036b2a:	683b      	ldr	r3, [r7, #0]
 8036b2c:	2b02      	cmp	r3, #2
 8036b2e:	d12f      	bne.n	8036b90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8036b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8036b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8036b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8036b40:	683a      	ldr	r2, [r7, #0]
 8036b42:	68b9      	ldr	r1, [r7, #8]
 8036b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8036b46:	f000 fb64 	bl	8037212 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8036b4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8036b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036b52:	d112      	bne.n	8036b7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8036b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036b58:	2b00      	cmp	r3, #0
 8036b5a:	d016      	beq.n	8036b8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8036b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b5e:	3324      	adds	r3, #36	; 0x24
 8036b60:	4618      	mov	r0, r3
 8036b62:	f001 f93b 	bl	8037ddc <xTaskRemoveFromEventList>
 8036b66:	4603      	mov	r3, r0
 8036b68:	2b00      	cmp	r3, #0
 8036b6a:	d00e      	beq.n	8036b8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8036b6c:	687b      	ldr	r3, [r7, #4]
 8036b6e:	2b00      	cmp	r3, #0
 8036b70:	d00b      	beq.n	8036b8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8036b72:	687b      	ldr	r3, [r7, #4]
 8036b74:	2201      	movs	r2, #1
 8036b76:	601a      	str	r2, [r3, #0]
 8036b78:	e007      	b.n	8036b8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8036b7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8036b7e:	3301      	adds	r3, #1
 8036b80:	b2db      	uxtb	r3, r3
 8036b82:	b25a      	sxtb	r2, r3
 8036b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8036b8a:	2301      	movs	r3, #1
 8036b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8036b8e:	e001      	b.n	8036b94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8036b90:	2300      	movs	r3, #0
 8036b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8036b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036b96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8036b98:	697b      	ldr	r3, [r7, #20]
 8036b9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8036b9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8036ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8036ba2:	4618      	mov	r0, r3
 8036ba4:	3740      	adds	r7, #64	; 0x40
 8036ba6:	46bd      	mov	sp, r7
 8036ba8:	bd80      	pop	{r7, pc}

08036baa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8036baa:	b580      	push	{r7, lr}
 8036bac:	b08e      	sub	sp, #56	; 0x38
 8036bae:	af00      	add	r7, sp, #0
 8036bb0:	6078      	str	r0, [r7, #4]
 8036bb2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8036bb4:	687b      	ldr	r3, [r7, #4]
 8036bb6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8036bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036bba:	2b00      	cmp	r3, #0
 8036bbc:	d10a      	bne.n	8036bd4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8036bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036bc2:	f383 8811 	msr	BASEPRI, r3
 8036bc6:	f3bf 8f6f 	isb	sy
 8036bca:	f3bf 8f4f 	dsb	sy
 8036bce:	623b      	str	r3, [r7, #32]
}
 8036bd0:	bf00      	nop
 8036bd2:	e7fe      	b.n	8036bd2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8036bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036bd8:	2b00      	cmp	r3, #0
 8036bda:	d00a      	beq.n	8036bf2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8036bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036be0:	f383 8811 	msr	BASEPRI, r3
 8036be4:	f3bf 8f6f 	isb	sy
 8036be8:	f3bf 8f4f 	dsb	sy
 8036bec:	61fb      	str	r3, [r7, #28]
}
 8036bee:	bf00      	nop
 8036bf0:	e7fe      	b.n	8036bf0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8036bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036bf4:	681b      	ldr	r3, [r3, #0]
 8036bf6:	2b00      	cmp	r3, #0
 8036bf8:	d103      	bne.n	8036c02 <xQueueGiveFromISR+0x58>
 8036bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036bfc:	689b      	ldr	r3, [r3, #8]
 8036bfe:	2b00      	cmp	r3, #0
 8036c00:	d101      	bne.n	8036c06 <xQueueGiveFromISR+0x5c>
 8036c02:	2301      	movs	r3, #1
 8036c04:	e000      	b.n	8036c08 <xQueueGiveFromISR+0x5e>
 8036c06:	2300      	movs	r3, #0
 8036c08:	2b00      	cmp	r3, #0
 8036c0a:	d10a      	bne.n	8036c22 <xQueueGiveFromISR+0x78>
	__asm volatile
 8036c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036c10:	f383 8811 	msr	BASEPRI, r3
 8036c14:	f3bf 8f6f 	isb	sy
 8036c18:	f3bf 8f4f 	dsb	sy
 8036c1c:	61bb      	str	r3, [r7, #24]
}
 8036c1e:	bf00      	nop
 8036c20:	e7fe      	b.n	8036c20 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8036c22:	f002 fb89 	bl	8039338 <vPortValidateInterruptPriority>
	__asm volatile
 8036c26:	f3ef 8211 	mrs	r2, BASEPRI
 8036c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036c2e:	f383 8811 	msr	BASEPRI, r3
 8036c32:	f3bf 8f6f 	isb	sy
 8036c36:	f3bf 8f4f 	dsb	sy
 8036c3a:	617a      	str	r2, [r7, #20]
 8036c3c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8036c3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8036c40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8036c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036c46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8036c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8036c4e:	429a      	cmp	r2, r3
 8036c50:	d22b      	bcs.n	8036caa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8036c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8036c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8036c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036c5e:	1c5a      	adds	r2, r3, #1
 8036c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c62:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8036c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8036c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036c6c:	d112      	bne.n	8036c94 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8036c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036c72:	2b00      	cmp	r3, #0
 8036c74:	d016      	beq.n	8036ca4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8036c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c78:	3324      	adds	r3, #36	; 0x24
 8036c7a:	4618      	mov	r0, r3
 8036c7c:	f001 f8ae 	bl	8037ddc <xTaskRemoveFromEventList>
 8036c80:	4603      	mov	r3, r0
 8036c82:	2b00      	cmp	r3, #0
 8036c84:	d00e      	beq.n	8036ca4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8036c86:	683b      	ldr	r3, [r7, #0]
 8036c88:	2b00      	cmp	r3, #0
 8036c8a:	d00b      	beq.n	8036ca4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8036c8c:	683b      	ldr	r3, [r7, #0]
 8036c8e:	2201      	movs	r2, #1
 8036c90:	601a      	str	r2, [r3, #0]
 8036c92:	e007      	b.n	8036ca4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8036c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8036c98:	3301      	adds	r3, #1
 8036c9a:	b2db      	uxtb	r3, r3
 8036c9c:	b25a      	sxtb	r2, r3
 8036c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8036ca4:	2301      	movs	r3, #1
 8036ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8036ca8:	e001      	b.n	8036cae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8036caa:	2300      	movs	r3, #0
 8036cac:	637b      	str	r3, [r7, #52]	; 0x34
 8036cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036cb0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8036cb2:	68fb      	ldr	r3, [r7, #12]
 8036cb4:	f383 8811 	msr	BASEPRI, r3
}
 8036cb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8036cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8036cbc:	4618      	mov	r0, r3
 8036cbe:	3738      	adds	r7, #56	; 0x38
 8036cc0:	46bd      	mov	sp, r7
 8036cc2:	bd80      	pop	{r7, pc}

08036cc4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8036cc4:	b580      	push	{r7, lr}
 8036cc6:	b08c      	sub	sp, #48	; 0x30
 8036cc8:	af00      	add	r7, sp, #0
 8036cca:	60f8      	str	r0, [r7, #12]
 8036ccc:	60b9      	str	r1, [r7, #8]
 8036cce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8036cd0:	2300      	movs	r3, #0
 8036cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8036cd4:	68fb      	ldr	r3, [r7, #12]
 8036cd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8036cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036cda:	2b00      	cmp	r3, #0
 8036cdc:	d10a      	bne.n	8036cf4 <xQueueReceive+0x30>
	__asm volatile
 8036cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036ce2:	f383 8811 	msr	BASEPRI, r3
 8036ce6:	f3bf 8f6f 	isb	sy
 8036cea:	f3bf 8f4f 	dsb	sy
 8036cee:	623b      	str	r3, [r7, #32]
}
 8036cf0:	bf00      	nop
 8036cf2:	e7fe      	b.n	8036cf2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8036cf4:	68bb      	ldr	r3, [r7, #8]
 8036cf6:	2b00      	cmp	r3, #0
 8036cf8:	d103      	bne.n	8036d02 <xQueueReceive+0x3e>
 8036cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036cfe:	2b00      	cmp	r3, #0
 8036d00:	d101      	bne.n	8036d06 <xQueueReceive+0x42>
 8036d02:	2301      	movs	r3, #1
 8036d04:	e000      	b.n	8036d08 <xQueueReceive+0x44>
 8036d06:	2300      	movs	r3, #0
 8036d08:	2b00      	cmp	r3, #0
 8036d0a:	d10a      	bne.n	8036d22 <xQueueReceive+0x5e>
	__asm volatile
 8036d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036d10:	f383 8811 	msr	BASEPRI, r3
 8036d14:	f3bf 8f6f 	isb	sy
 8036d18:	f3bf 8f4f 	dsb	sy
 8036d1c:	61fb      	str	r3, [r7, #28]
}
 8036d1e:	bf00      	nop
 8036d20:	e7fe      	b.n	8036d20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8036d22:	f001 fa17 	bl	8038154 <xTaskGetSchedulerState>
 8036d26:	4603      	mov	r3, r0
 8036d28:	2b00      	cmp	r3, #0
 8036d2a:	d102      	bne.n	8036d32 <xQueueReceive+0x6e>
 8036d2c:	687b      	ldr	r3, [r7, #4]
 8036d2e:	2b00      	cmp	r3, #0
 8036d30:	d101      	bne.n	8036d36 <xQueueReceive+0x72>
 8036d32:	2301      	movs	r3, #1
 8036d34:	e000      	b.n	8036d38 <xQueueReceive+0x74>
 8036d36:	2300      	movs	r3, #0
 8036d38:	2b00      	cmp	r3, #0
 8036d3a:	d10a      	bne.n	8036d52 <xQueueReceive+0x8e>
	__asm volatile
 8036d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036d40:	f383 8811 	msr	BASEPRI, r3
 8036d44:	f3bf 8f6f 	isb	sy
 8036d48:	f3bf 8f4f 	dsb	sy
 8036d4c:	61bb      	str	r3, [r7, #24]
}
 8036d4e:	bf00      	nop
 8036d50:	e7fe      	b.n	8036d50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8036d52:	f002 fa0f 	bl	8039174 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8036d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036d5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8036d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036d5e:	2b00      	cmp	r3, #0
 8036d60:	d01f      	beq.n	8036da2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8036d62:	68b9      	ldr	r1, [r7, #8]
 8036d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8036d66:	f000 fabe 	bl	80372e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8036d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036d6c:	1e5a      	subs	r2, r3, #1
 8036d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036d70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8036d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036d74:	691b      	ldr	r3, [r3, #16]
 8036d76:	2b00      	cmp	r3, #0
 8036d78:	d00f      	beq.n	8036d9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8036d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036d7c:	3310      	adds	r3, #16
 8036d7e:	4618      	mov	r0, r3
 8036d80:	f001 f82c 	bl	8037ddc <xTaskRemoveFromEventList>
 8036d84:	4603      	mov	r3, r0
 8036d86:	2b00      	cmp	r3, #0
 8036d88:	d007      	beq.n	8036d9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8036d8a:	4b3d      	ldr	r3, [pc, #244]	; (8036e80 <xQueueReceive+0x1bc>)
 8036d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036d90:	601a      	str	r2, [r3, #0]
 8036d92:	f3bf 8f4f 	dsb	sy
 8036d96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8036d9a:	f002 fa1b 	bl	80391d4 <vPortExitCritical>
				return pdPASS;
 8036d9e:	2301      	movs	r3, #1
 8036da0:	e069      	b.n	8036e76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8036da2:	687b      	ldr	r3, [r7, #4]
 8036da4:	2b00      	cmp	r3, #0
 8036da6:	d103      	bne.n	8036db0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8036da8:	f002 fa14 	bl	80391d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8036dac:	2300      	movs	r3, #0
 8036dae:	e062      	b.n	8036e76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8036db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036db2:	2b00      	cmp	r3, #0
 8036db4:	d106      	bne.n	8036dc4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8036db6:	f107 0310 	add.w	r3, r7, #16
 8036dba:	4618      	mov	r0, r3
 8036dbc:	f001 f870 	bl	8037ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8036dc0:	2301      	movs	r3, #1
 8036dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8036dc4:	f002 fa06 	bl	80391d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8036dc8:	f000 fdea 	bl	80379a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8036dcc:	f002 f9d2 	bl	8039174 <vPortEnterCritical>
 8036dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036dd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8036dd6:	b25b      	sxtb	r3, r3
 8036dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036ddc:	d103      	bne.n	8036de6 <xQueueReceive+0x122>
 8036dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036de0:	2200      	movs	r2, #0
 8036de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8036de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8036dec:	b25b      	sxtb	r3, r3
 8036dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036df2:	d103      	bne.n	8036dfc <xQueueReceive+0x138>
 8036df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036df6:	2200      	movs	r2, #0
 8036df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8036dfc:	f002 f9ea 	bl	80391d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8036e00:	1d3a      	adds	r2, r7, #4
 8036e02:	f107 0310 	add.w	r3, r7, #16
 8036e06:	4611      	mov	r1, r2
 8036e08:	4618      	mov	r0, r3
 8036e0a:	f001 f85f 	bl	8037ecc <xTaskCheckForTimeOut>
 8036e0e:	4603      	mov	r3, r0
 8036e10:	2b00      	cmp	r3, #0
 8036e12:	d123      	bne.n	8036e5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8036e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8036e16:	f000 fade 	bl	80373d6 <prvIsQueueEmpty>
 8036e1a:	4603      	mov	r3, r0
 8036e1c:	2b00      	cmp	r3, #0
 8036e1e:	d017      	beq.n	8036e50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8036e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036e22:	3324      	adds	r3, #36	; 0x24
 8036e24:	687a      	ldr	r2, [r7, #4]
 8036e26:	4611      	mov	r1, r2
 8036e28:	4618      	mov	r0, r3
 8036e2a:	f000 ff87 	bl	8037d3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8036e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8036e30:	f000 fa7f 	bl	8037332 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8036e34:	f000 fdc2 	bl	80379bc <xTaskResumeAll>
 8036e38:	4603      	mov	r3, r0
 8036e3a:	2b00      	cmp	r3, #0
 8036e3c:	d189      	bne.n	8036d52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8036e3e:	4b10      	ldr	r3, [pc, #64]	; (8036e80 <xQueueReceive+0x1bc>)
 8036e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036e44:	601a      	str	r2, [r3, #0]
 8036e46:	f3bf 8f4f 	dsb	sy
 8036e4a:	f3bf 8f6f 	isb	sy
 8036e4e:	e780      	b.n	8036d52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8036e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8036e52:	f000 fa6e 	bl	8037332 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8036e56:	f000 fdb1 	bl	80379bc <xTaskResumeAll>
 8036e5a:	e77a      	b.n	8036d52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8036e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8036e5e:	f000 fa68 	bl	8037332 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8036e62:	f000 fdab 	bl	80379bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8036e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8036e68:	f000 fab5 	bl	80373d6 <prvIsQueueEmpty>
 8036e6c:	4603      	mov	r3, r0
 8036e6e:	2b00      	cmp	r3, #0
 8036e70:	f43f af6f 	beq.w	8036d52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8036e74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8036e76:	4618      	mov	r0, r3
 8036e78:	3730      	adds	r7, #48	; 0x30
 8036e7a:	46bd      	mov	sp, r7
 8036e7c:	bd80      	pop	{r7, pc}
 8036e7e:	bf00      	nop
 8036e80:	e000ed04 	.word	0xe000ed04

08036e84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8036e84:	b580      	push	{r7, lr}
 8036e86:	b08e      	sub	sp, #56	; 0x38
 8036e88:	af00      	add	r7, sp, #0
 8036e8a:	6078      	str	r0, [r7, #4]
 8036e8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8036e8e:	2300      	movs	r3, #0
 8036e90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8036e92:	687b      	ldr	r3, [r7, #4]
 8036e94:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8036e96:	2300      	movs	r3, #0
 8036e98:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8036e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036e9c:	2b00      	cmp	r3, #0
 8036e9e:	d10a      	bne.n	8036eb6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8036ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036ea4:	f383 8811 	msr	BASEPRI, r3
 8036ea8:	f3bf 8f6f 	isb	sy
 8036eac:	f3bf 8f4f 	dsb	sy
 8036eb0:	623b      	str	r3, [r7, #32]
}
 8036eb2:	bf00      	nop
 8036eb4:	e7fe      	b.n	8036eb4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8036eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036eba:	2b00      	cmp	r3, #0
 8036ebc:	d00a      	beq.n	8036ed4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8036ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036ec2:	f383 8811 	msr	BASEPRI, r3
 8036ec6:	f3bf 8f6f 	isb	sy
 8036eca:	f3bf 8f4f 	dsb	sy
 8036ece:	61fb      	str	r3, [r7, #28]
}
 8036ed0:	bf00      	nop
 8036ed2:	e7fe      	b.n	8036ed2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8036ed4:	f001 f93e 	bl	8038154 <xTaskGetSchedulerState>
 8036ed8:	4603      	mov	r3, r0
 8036eda:	2b00      	cmp	r3, #0
 8036edc:	d102      	bne.n	8036ee4 <xQueueSemaphoreTake+0x60>
 8036ede:	683b      	ldr	r3, [r7, #0]
 8036ee0:	2b00      	cmp	r3, #0
 8036ee2:	d101      	bne.n	8036ee8 <xQueueSemaphoreTake+0x64>
 8036ee4:	2301      	movs	r3, #1
 8036ee6:	e000      	b.n	8036eea <xQueueSemaphoreTake+0x66>
 8036ee8:	2300      	movs	r3, #0
 8036eea:	2b00      	cmp	r3, #0
 8036eec:	d10a      	bne.n	8036f04 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8036eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036ef2:	f383 8811 	msr	BASEPRI, r3
 8036ef6:	f3bf 8f6f 	isb	sy
 8036efa:	f3bf 8f4f 	dsb	sy
 8036efe:	61bb      	str	r3, [r7, #24]
}
 8036f00:	bf00      	nop
 8036f02:	e7fe      	b.n	8036f02 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8036f04:	f002 f936 	bl	8039174 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8036f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036f0c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8036f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036f10:	2b00      	cmp	r3, #0
 8036f12:	d024      	beq.n	8036f5e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8036f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036f16:	1e5a      	subs	r2, r3, #1
 8036f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036f1a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8036f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036f1e:	681b      	ldr	r3, [r3, #0]
 8036f20:	2b00      	cmp	r3, #0
 8036f22:	d104      	bne.n	8036f2e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8036f24:	f001 fabe 	bl	80384a4 <pvTaskIncrementMutexHeldCount>
 8036f28:	4602      	mov	r2, r0
 8036f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036f2c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8036f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036f30:	691b      	ldr	r3, [r3, #16]
 8036f32:	2b00      	cmp	r3, #0
 8036f34:	d00f      	beq.n	8036f56 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8036f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036f38:	3310      	adds	r3, #16
 8036f3a:	4618      	mov	r0, r3
 8036f3c:	f000 ff4e 	bl	8037ddc <xTaskRemoveFromEventList>
 8036f40:	4603      	mov	r3, r0
 8036f42:	2b00      	cmp	r3, #0
 8036f44:	d007      	beq.n	8036f56 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8036f46:	4b54      	ldr	r3, [pc, #336]	; (8037098 <xQueueSemaphoreTake+0x214>)
 8036f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8036f4c:	601a      	str	r2, [r3, #0]
 8036f4e:	f3bf 8f4f 	dsb	sy
 8036f52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8036f56:	f002 f93d 	bl	80391d4 <vPortExitCritical>
				return pdPASS;
 8036f5a:	2301      	movs	r3, #1
 8036f5c:	e097      	b.n	803708e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8036f5e:	683b      	ldr	r3, [r7, #0]
 8036f60:	2b00      	cmp	r3, #0
 8036f62:	d111      	bne.n	8036f88 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8036f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036f66:	2b00      	cmp	r3, #0
 8036f68:	d00a      	beq.n	8036f80 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8036f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8036f6e:	f383 8811 	msr	BASEPRI, r3
 8036f72:	f3bf 8f6f 	isb	sy
 8036f76:	f3bf 8f4f 	dsb	sy
 8036f7a:	617b      	str	r3, [r7, #20]
}
 8036f7c:	bf00      	nop
 8036f7e:	e7fe      	b.n	8036f7e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8036f80:	f002 f928 	bl	80391d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8036f84:	2300      	movs	r3, #0
 8036f86:	e082      	b.n	803708e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8036f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036f8a:	2b00      	cmp	r3, #0
 8036f8c:	d106      	bne.n	8036f9c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8036f8e:	f107 030c 	add.w	r3, r7, #12
 8036f92:	4618      	mov	r0, r3
 8036f94:	f000 ff84 	bl	8037ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8036f98:	2301      	movs	r3, #1
 8036f9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8036f9c:	f002 f91a 	bl	80391d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8036fa0:	f000 fcfe 	bl	80379a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8036fa4:	f002 f8e6 	bl	8039174 <vPortEnterCritical>
 8036fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036faa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8036fae:	b25b      	sxtb	r3, r3
 8036fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036fb4:	d103      	bne.n	8036fbe <xQueueSemaphoreTake+0x13a>
 8036fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036fb8:	2200      	movs	r2, #0
 8036fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8036fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8036fc4:	b25b      	sxtb	r3, r3
 8036fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036fca:	d103      	bne.n	8036fd4 <xQueueSemaphoreTake+0x150>
 8036fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036fce:	2200      	movs	r2, #0
 8036fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8036fd4:	f002 f8fe 	bl	80391d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8036fd8:	463a      	mov	r2, r7
 8036fda:	f107 030c 	add.w	r3, r7, #12
 8036fde:	4611      	mov	r1, r2
 8036fe0:	4618      	mov	r0, r3
 8036fe2:	f000 ff73 	bl	8037ecc <xTaskCheckForTimeOut>
 8036fe6:	4603      	mov	r3, r0
 8036fe8:	2b00      	cmp	r3, #0
 8036fea:	d132      	bne.n	8037052 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8036fec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8036fee:	f000 f9f2 	bl	80373d6 <prvIsQueueEmpty>
 8036ff2:	4603      	mov	r3, r0
 8036ff4:	2b00      	cmp	r3, #0
 8036ff6:	d026      	beq.n	8037046 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8036ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036ffa:	681b      	ldr	r3, [r3, #0]
 8036ffc:	2b00      	cmp	r3, #0
 8036ffe:	d109      	bne.n	8037014 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8037000:	f002 f8b8 	bl	8039174 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8037004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037006:	689b      	ldr	r3, [r3, #8]
 8037008:	4618      	mov	r0, r3
 803700a:	f001 f8c1 	bl	8038190 <xTaskPriorityInherit>
 803700e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8037010:	f002 f8e0 	bl	80391d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8037014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037016:	3324      	adds	r3, #36	; 0x24
 8037018:	683a      	ldr	r2, [r7, #0]
 803701a:	4611      	mov	r1, r2
 803701c:	4618      	mov	r0, r3
 803701e:	f000 fe8d 	bl	8037d3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8037022:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8037024:	f000 f985 	bl	8037332 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8037028:	f000 fcc8 	bl	80379bc <xTaskResumeAll>
 803702c:	4603      	mov	r3, r0
 803702e:	2b00      	cmp	r3, #0
 8037030:	f47f af68 	bne.w	8036f04 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8037034:	4b18      	ldr	r3, [pc, #96]	; (8037098 <xQueueSemaphoreTake+0x214>)
 8037036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803703a:	601a      	str	r2, [r3, #0]
 803703c:	f3bf 8f4f 	dsb	sy
 8037040:	f3bf 8f6f 	isb	sy
 8037044:	e75e      	b.n	8036f04 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8037046:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8037048:	f000 f973 	bl	8037332 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 803704c:	f000 fcb6 	bl	80379bc <xTaskResumeAll>
 8037050:	e758      	b.n	8036f04 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8037052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8037054:	f000 f96d 	bl	8037332 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8037058:	f000 fcb0 	bl	80379bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 803705c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 803705e:	f000 f9ba 	bl	80373d6 <prvIsQueueEmpty>
 8037062:	4603      	mov	r3, r0
 8037064:	2b00      	cmp	r3, #0
 8037066:	f43f af4d 	beq.w	8036f04 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 803706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803706c:	2b00      	cmp	r3, #0
 803706e:	d00d      	beq.n	803708c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8037070:	f002 f880 	bl	8039174 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8037074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8037076:	f000 f8b4 	bl	80371e2 <prvGetDisinheritPriorityAfterTimeout>
 803707a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 803707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803707e:	689b      	ldr	r3, [r3, #8]
 8037080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8037082:	4618      	mov	r0, r3
 8037084:	f001 f980 	bl	8038388 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8037088:	f002 f8a4 	bl	80391d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 803708c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 803708e:	4618      	mov	r0, r3
 8037090:	3738      	adds	r7, #56	; 0x38
 8037092:	46bd      	mov	sp, r7
 8037094:	bd80      	pop	{r7, pc}
 8037096:	bf00      	nop
 8037098:	e000ed04 	.word	0xe000ed04

0803709c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 803709c:	b580      	push	{r7, lr}
 803709e:	b08e      	sub	sp, #56	; 0x38
 80370a0:	af00      	add	r7, sp, #0
 80370a2:	60f8      	str	r0, [r7, #12]
 80370a4:	60b9      	str	r1, [r7, #8]
 80370a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80370a8:	68fb      	ldr	r3, [r7, #12]
 80370aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80370ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80370ae:	2b00      	cmp	r3, #0
 80370b0:	d10a      	bne.n	80370c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80370b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80370b6:	f383 8811 	msr	BASEPRI, r3
 80370ba:	f3bf 8f6f 	isb	sy
 80370be:	f3bf 8f4f 	dsb	sy
 80370c2:	623b      	str	r3, [r7, #32]
}
 80370c4:	bf00      	nop
 80370c6:	e7fe      	b.n	80370c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80370c8:	68bb      	ldr	r3, [r7, #8]
 80370ca:	2b00      	cmp	r3, #0
 80370cc:	d103      	bne.n	80370d6 <xQueueReceiveFromISR+0x3a>
 80370ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80370d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80370d2:	2b00      	cmp	r3, #0
 80370d4:	d101      	bne.n	80370da <xQueueReceiveFromISR+0x3e>
 80370d6:	2301      	movs	r3, #1
 80370d8:	e000      	b.n	80370dc <xQueueReceiveFromISR+0x40>
 80370da:	2300      	movs	r3, #0
 80370dc:	2b00      	cmp	r3, #0
 80370de:	d10a      	bne.n	80370f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80370e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80370e4:	f383 8811 	msr	BASEPRI, r3
 80370e8:	f3bf 8f6f 	isb	sy
 80370ec:	f3bf 8f4f 	dsb	sy
 80370f0:	61fb      	str	r3, [r7, #28]
}
 80370f2:	bf00      	nop
 80370f4:	e7fe      	b.n	80370f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80370f6:	f002 f91f 	bl	8039338 <vPortValidateInterruptPriority>
	__asm volatile
 80370fa:	f3ef 8211 	mrs	r2, BASEPRI
 80370fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037102:	f383 8811 	msr	BASEPRI, r3
 8037106:	f3bf 8f6f 	isb	sy
 803710a:	f3bf 8f4f 	dsb	sy
 803710e:	61ba      	str	r2, [r7, #24]
 8037110:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8037112:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8037114:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8037116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803711a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 803711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803711e:	2b00      	cmp	r3, #0
 8037120:	d02f      	beq.n	8037182 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8037122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8037128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 803712c:	68b9      	ldr	r1, [r7, #8]
 803712e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8037130:	f000 f8d9 	bl	80372e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8037134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037136:	1e5a      	subs	r2, r3, #1
 8037138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803713a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 803713c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8037140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8037144:	d112      	bne.n	803716c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8037146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037148:	691b      	ldr	r3, [r3, #16]
 803714a:	2b00      	cmp	r3, #0
 803714c:	d016      	beq.n	803717c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 803714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037150:	3310      	adds	r3, #16
 8037152:	4618      	mov	r0, r3
 8037154:	f000 fe42 	bl	8037ddc <xTaskRemoveFromEventList>
 8037158:	4603      	mov	r3, r0
 803715a:	2b00      	cmp	r3, #0
 803715c:	d00e      	beq.n	803717c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 803715e:	687b      	ldr	r3, [r7, #4]
 8037160:	2b00      	cmp	r3, #0
 8037162:	d00b      	beq.n	803717c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8037164:	687b      	ldr	r3, [r7, #4]
 8037166:	2201      	movs	r2, #1
 8037168:	601a      	str	r2, [r3, #0]
 803716a:	e007      	b.n	803717c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 803716c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8037170:	3301      	adds	r3, #1
 8037172:	b2db      	uxtb	r3, r3
 8037174:	b25a      	sxtb	r2, r3
 8037176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 803717c:	2301      	movs	r3, #1
 803717e:	637b      	str	r3, [r7, #52]	; 0x34
 8037180:	e001      	b.n	8037186 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8037182:	2300      	movs	r3, #0
 8037184:	637b      	str	r3, [r7, #52]	; 0x34
 8037186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037188:	613b      	str	r3, [r7, #16]
	__asm volatile
 803718a:	693b      	ldr	r3, [r7, #16]
 803718c:	f383 8811 	msr	BASEPRI, r3
}
 8037190:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8037192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8037194:	4618      	mov	r0, r3
 8037196:	3738      	adds	r7, #56	; 0x38
 8037198:	46bd      	mov	sp, r7
 803719a:	bd80      	pop	{r7, pc}

0803719c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 803719c:	b580      	push	{r7, lr}
 803719e:	b084      	sub	sp, #16
 80371a0:	af00      	add	r7, sp, #0
 80371a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80371a4:	687b      	ldr	r3, [r7, #4]
 80371a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80371a8:	68fb      	ldr	r3, [r7, #12]
 80371aa:	2b00      	cmp	r3, #0
 80371ac:	d10a      	bne.n	80371c4 <vQueueDelete+0x28>
	__asm volatile
 80371ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80371b2:	f383 8811 	msr	BASEPRI, r3
 80371b6:	f3bf 8f6f 	isb	sy
 80371ba:	f3bf 8f4f 	dsb	sy
 80371be:	60bb      	str	r3, [r7, #8]
}
 80371c0:	bf00      	nop
 80371c2:	e7fe      	b.n	80371c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80371c4:	68f8      	ldr	r0, [r7, #12]
 80371c6:	f000 f95f 	bl	8037488 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80371ca:	68fb      	ldr	r3, [r7, #12]
 80371cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80371d0:	2b00      	cmp	r3, #0
 80371d2:	d102      	bne.n	80371da <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80371d4:	68f8      	ldr	r0, [r7, #12]
 80371d6:	f002 f9bb 	bl	8039550 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80371da:	bf00      	nop
 80371dc:	3710      	adds	r7, #16
 80371de:	46bd      	mov	sp, r7
 80371e0:	bd80      	pop	{r7, pc}

080371e2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80371e2:	b480      	push	{r7}
 80371e4:	b085      	sub	sp, #20
 80371e6:	af00      	add	r7, sp, #0
 80371e8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80371ea:	687b      	ldr	r3, [r7, #4]
 80371ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80371ee:	2b00      	cmp	r3, #0
 80371f0:	d006      	beq.n	8037200 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80371f2:	687b      	ldr	r3, [r7, #4]
 80371f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80371f6:	681b      	ldr	r3, [r3, #0]
 80371f8:	f1c3 0307 	rsb	r3, r3, #7
 80371fc:	60fb      	str	r3, [r7, #12]
 80371fe:	e001      	b.n	8037204 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8037200:	2300      	movs	r3, #0
 8037202:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8037204:	68fb      	ldr	r3, [r7, #12]
	}
 8037206:	4618      	mov	r0, r3
 8037208:	3714      	adds	r7, #20
 803720a:	46bd      	mov	sp, r7
 803720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037210:	4770      	bx	lr

08037212 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8037212:	b580      	push	{r7, lr}
 8037214:	b086      	sub	sp, #24
 8037216:	af00      	add	r7, sp, #0
 8037218:	60f8      	str	r0, [r7, #12]
 803721a:	60b9      	str	r1, [r7, #8]
 803721c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 803721e:	2300      	movs	r3, #0
 8037220:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8037222:	68fb      	ldr	r3, [r7, #12]
 8037224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037226:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8037228:	68fb      	ldr	r3, [r7, #12]
 803722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803722c:	2b00      	cmp	r3, #0
 803722e:	d10d      	bne.n	803724c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8037230:	68fb      	ldr	r3, [r7, #12]
 8037232:	681b      	ldr	r3, [r3, #0]
 8037234:	2b00      	cmp	r3, #0
 8037236:	d14d      	bne.n	80372d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8037238:	68fb      	ldr	r3, [r7, #12]
 803723a:	689b      	ldr	r3, [r3, #8]
 803723c:	4618      	mov	r0, r3
 803723e:	f001 f81d 	bl	803827c <xTaskPriorityDisinherit>
 8037242:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8037244:	68fb      	ldr	r3, [r7, #12]
 8037246:	2200      	movs	r2, #0
 8037248:	609a      	str	r2, [r3, #8]
 803724a:	e043      	b.n	80372d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 803724c:	687b      	ldr	r3, [r7, #4]
 803724e:	2b00      	cmp	r3, #0
 8037250:	d119      	bne.n	8037286 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8037252:	68fb      	ldr	r3, [r7, #12]
 8037254:	6858      	ldr	r0, [r3, #4]
 8037256:	68fb      	ldr	r3, [r7, #12]
 8037258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803725a:	461a      	mov	r2, r3
 803725c:	68b9      	ldr	r1, [r7, #8]
 803725e:	f002 fe33 	bl	8039ec8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8037262:	68fb      	ldr	r3, [r7, #12]
 8037264:	685a      	ldr	r2, [r3, #4]
 8037266:	68fb      	ldr	r3, [r7, #12]
 8037268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803726a:	441a      	add	r2, r3
 803726c:	68fb      	ldr	r3, [r7, #12]
 803726e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8037270:	68fb      	ldr	r3, [r7, #12]
 8037272:	685a      	ldr	r2, [r3, #4]
 8037274:	68fb      	ldr	r3, [r7, #12]
 8037276:	689b      	ldr	r3, [r3, #8]
 8037278:	429a      	cmp	r2, r3
 803727a:	d32b      	bcc.n	80372d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 803727c:	68fb      	ldr	r3, [r7, #12]
 803727e:	681a      	ldr	r2, [r3, #0]
 8037280:	68fb      	ldr	r3, [r7, #12]
 8037282:	605a      	str	r2, [r3, #4]
 8037284:	e026      	b.n	80372d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8037286:	68fb      	ldr	r3, [r7, #12]
 8037288:	68d8      	ldr	r0, [r3, #12]
 803728a:	68fb      	ldr	r3, [r7, #12]
 803728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803728e:	461a      	mov	r2, r3
 8037290:	68b9      	ldr	r1, [r7, #8]
 8037292:	f002 fe19 	bl	8039ec8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8037296:	68fb      	ldr	r3, [r7, #12]
 8037298:	68da      	ldr	r2, [r3, #12]
 803729a:	68fb      	ldr	r3, [r7, #12]
 803729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803729e:	425b      	negs	r3, r3
 80372a0:	441a      	add	r2, r3
 80372a2:	68fb      	ldr	r3, [r7, #12]
 80372a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80372a6:	68fb      	ldr	r3, [r7, #12]
 80372a8:	68da      	ldr	r2, [r3, #12]
 80372aa:	68fb      	ldr	r3, [r7, #12]
 80372ac:	681b      	ldr	r3, [r3, #0]
 80372ae:	429a      	cmp	r2, r3
 80372b0:	d207      	bcs.n	80372c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80372b2:	68fb      	ldr	r3, [r7, #12]
 80372b4:	689a      	ldr	r2, [r3, #8]
 80372b6:	68fb      	ldr	r3, [r7, #12]
 80372b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80372ba:	425b      	negs	r3, r3
 80372bc:	441a      	add	r2, r3
 80372be:	68fb      	ldr	r3, [r7, #12]
 80372c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80372c2:	687b      	ldr	r3, [r7, #4]
 80372c4:	2b02      	cmp	r3, #2
 80372c6:	d105      	bne.n	80372d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80372c8:	693b      	ldr	r3, [r7, #16]
 80372ca:	2b00      	cmp	r3, #0
 80372cc:	d002      	beq.n	80372d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80372ce:	693b      	ldr	r3, [r7, #16]
 80372d0:	3b01      	subs	r3, #1
 80372d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80372d4:	693b      	ldr	r3, [r7, #16]
 80372d6:	1c5a      	adds	r2, r3, #1
 80372d8:	68fb      	ldr	r3, [r7, #12]
 80372da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80372dc:	697b      	ldr	r3, [r7, #20]
}
 80372de:	4618      	mov	r0, r3
 80372e0:	3718      	adds	r7, #24
 80372e2:	46bd      	mov	sp, r7
 80372e4:	bd80      	pop	{r7, pc}

080372e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80372e6:	b580      	push	{r7, lr}
 80372e8:	b082      	sub	sp, #8
 80372ea:	af00      	add	r7, sp, #0
 80372ec:	6078      	str	r0, [r7, #4]
 80372ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80372f0:	687b      	ldr	r3, [r7, #4]
 80372f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80372f4:	2b00      	cmp	r3, #0
 80372f6:	d018      	beq.n	803732a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80372f8:	687b      	ldr	r3, [r7, #4]
 80372fa:	68da      	ldr	r2, [r3, #12]
 80372fc:	687b      	ldr	r3, [r7, #4]
 80372fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8037300:	441a      	add	r2, r3
 8037302:	687b      	ldr	r3, [r7, #4]
 8037304:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8037306:	687b      	ldr	r3, [r7, #4]
 8037308:	68da      	ldr	r2, [r3, #12]
 803730a:	687b      	ldr	r3, [r7, #4]
 803730c:	689b      	ldr	r3, [r3, #8]
 803730e:	429a      	cmp	r2, r3
 8037310:	d303      	bcc.n	803731a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8037312:	687b      	ldr	r3, [r7, #4]
 8037314:	681a      	ldr	r2, [r3, #0]
 8037316:	687b      	ldr	r3, [r7, #4]
 8037318:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 803731a:	687b      	ldr	r3, [r7, #4]
 803731c:	68d9      	ldr	r1, [r3, #12]
 803731e:	687b      	ldr	r3, [r7, #4]
 8037320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8037322:	461a      	mov	r2, r3
 8037324:	6838      	ldr	r0, [r7, #0]
 8037326:	f002 fdcf 	bl	8039ec8 <memcpy>
	}
}
 803732a:	bf00      	nop
 803732c:	3708      	adds	r7, #8
 803732e:	46bd      	mov	sp, r7
 8037330:	bd80      	pop	{r7, pc}

08037332 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8037332:	b580      	push	{r7, lr}
 8037334:	b084      	sub	sp, #16
 8037336:	af00      	add	r7, sp, #0
 8037338:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 803733a:	f001 ff1b 	bl	8039174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 803733e:	687b      	ldr	r3, [r7, #4]
 8037340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8037344:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8037346:	e011      	b.n	803736c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8037348:	687b      	ldr	r3, [r7, #4]
 803734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803734c:	2b00      	cmp	r3, #0
 803734e:	d012      	beq.n	8037376 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8037350:	687b      	ldr	r3, [r7, #4]
 8037352:	3324      	adds	r3, #36	; 0x24
 8037354:	4618      	mov	r0, r3
 8037356:	f000 fd41 	bl	8037ddc <xTaskRemoveFromEventList>
 803735a:	4603      	mov	r3, r0
 803735c:	2b00      	cmp	r3, #0
 803735e:	d001      	beq.n	8037364 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8037360:	f000 fe16 	bl	8037f90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8037364:	7bfb      	ldrb	r3, [r7, #15]
 8037366:	3b01      	subs	r3, #1
 8037368:	b2db      	uxtb	r3, r3
 803736a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 803736c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8037370:	2b00      	cmp	r3, #0
 8037372:	dce9      	bgt.n	8037348 <prvUnlockQueue+0x16>
 8037374:	e000      	b.n	8037378 <prvUnlockQueue+0x46>
					break;
 8037376:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8037378:	687b      	ldr	r3, [r7, #4]
 803737a:	22ff      	movs	r2, #255	; 0xff
 803737c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8037380:	f001 ff28 	bl	80391d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8037384:	f001 fef6 	bl	8039174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8037388:	687b      	ldr	r3, [r7, #4]
 803738a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 803738e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8037390:	e011      	b.n	80373b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8037392:	687b      	ldr	r3, [r7, #4]
 8037394:	691b      	ldr	r3, [r3, #16]
 8037396:	2b00      	cmp	r3, #0
 8037398:	d012      	beq.n	80373c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 803739a:	687b      	ldr	r3, [r7, #4]
 803739c:	3310      	adds	r3, #16
 803739e:	4618      	mov	r0, r3
 80373a0:	f000 fd1c 	bl	8037ddc <xTaskRemoveFromEventList>
 80373a4:	4603      	mov	r3, r0
 80373a6:	2b00      	cmp	r3, #0
 80373a8:	d001      	beq.n	80373ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80373aa:	f000 fdf1 	bl	8037f90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80373ae:	7bbb      	ldrb	r3, [r7, #14]
 80373b0:	3b01      	subs	r3, #1
 80373b2:	b2db      	uxtb	r3, r3
 80373b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80373b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80373ba:	2b00      	cmp	r3, #0
 80373bc:	dce9      	bgt.n	8037392 <prvUnlockQueue+0x60>
 80373be:	e000      	b.n	80373c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80373c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80373c2:	687b      	ldr	r3, [r7, #4]
 80373c4:	22ff      	movs	r2, #255	; 0xff
 80373c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80373ca:	f001 ff03 	bl	80391d4 <vPortExitCritical>
}
 80373ce:	bf00      	nop
 80373d0:	3710      	adds	r7, #16
 80373d2:	46bd      	mov	sp, r7
 80373d4:	bd80      	pop	{r7, pc}

080373d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80373d6:	b580      	push	{r7, lr}
 80373d8:	b084      	sub	sp, #16
 80373da:	af00      	add	r7, sp, #0
 80373dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80373de:	f001 fec9 	bl	8039174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80373e2:	687b      	ldr	r3, [r7, #4]
 80373e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80373e6:	2b00      	cmp	r3, #0
 80373e8:	d102      	bne.n	80373f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80373ea:	2301      	movs	r3, #1
 80373ec:	60fb      	str	r3, [r7, #12]
 80373ee:	e001      	b.n	80373f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80373f0:	2300      	movs	r3, #0
 80373f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80373f4:	f001 feee 	bl	80391d4 <vPortExitCritical>

	return xReturn;
 80373f8:	68fb      	ldr	r3, [r7, #12]
}
 80373fa:	4618      	mov	r0, r3
 80373fc:	3710      	adds	r7, #16
 80373fe:	46bd      	mov	sp, r7
 8037400:	bd80      	pop	{r7, pc}

08037402 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8037402:	b580      	push	{r7, lr}
 8037404:	b084      	sub	sp, #16
 8037406:	af00      	add	r7, sp, #0
 8037408:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 803740a:	f001 feb3 	bl	8039174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 803740e:	687b      	ldr	r3, [r7, #4]
 8037410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8037412:	687b      	ldr	r3, [r7, #4]
 8037414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8037416:	429a      	cmp	r2, r3
 8037418:	d102      	bne.n	8037420 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 803741a:	2301      	movs	r3, #1
 803741c:	60fb      	str	r3, [r7, #12]
 803741e:	e001      	b.n	8037424 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8037420:	2300      	movs	r3, #0
 8037422:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8037424:	f001 fed6 	bl	80391d4 <vPortExitCritical>

	return xReturn;
 8037428:	68fb      	ldr	r3, [r7, #12]
}
 803742a:	4618      	mov	r0, r3
 803742c:	3710      	adds	r7, #16
 803742e:	46bd      	mov	sp, r7
 8037430:	bd80      	pop	{r7, pc}
	...

08037434 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8037434:	b480      	push	{r7}
 8037436:	b085      	sub	sp, #20
 8037438:	af00      	add	r7, sp, #0
 803743a:	6078      	str	r0, [r7, #4]
 803743c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 803743e:	2300      	movs	r3, #0
 8037440:	60fb      	str	r3, [r7, #12]
 8037442:	e014      	b.n	803746e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8037444:	4a0f      	ldr	r2, [pc, #60]	; (8037484 <vQueueAddToRegistry+0x50>)
 8037446:	68fb      	ldr	r3, [r7, #12]
 8037448:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 803744c:	2b00      	cmp	r3, #0
 803744e:	d10b      	bne.n	8037468 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8037450:	490c      	ldr	r1, [pc, #48]	; (8037484 <vQueueAddToRegistry+0x50>)
 8037452:	68fb      	ldr	r3, [r7, #12]
 8037454:	683a      	ldr	r2, [r7, #0]
 8037456:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 803745a:	4a0a      	ldr	r2, [pc, #40]	; (8037484 <vQueueAddToRegistry+0x50>)
 803745c:	68fb      	ldr	r3, [r7, #12]
 803745e:	00db      	lsls	r3, r3, #3
 8037460:	4413      	add	r3, r2
 8037462:	687a      	ldr	r2, [r7, #4]
 8037464:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8037466:	e006      	b.n	8037476 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8037468:	68fb      	ldr	r3, [r7, #12]
 803746a:	3301      	adds	r3, #1
 803746c:	60fb      	str	r3, [r7, #12]
 803746e:	68fb      	ldr	r3, [r7, #12]
 8037470:	2b07      	cmp	r3, #7
 8037472:	d9e7      	bls.n	8037444 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8037474:	bf00      	nop
 8037476:	bf00      	nop
 8037478:	3714      	adds	r7, #20
 803747a:	46bd      	mov	sp, r7
 803747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037480:	4770      	bx	lr
 8037482:	bf00      	nop
 8037484:	24002c2c 	.word	0x24002c2c

08037488 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8037488:	b480      	push	{r7}
 803748a:	b085      	sub	sp, #20
 803748c:	af00      	add	r7, sp, #0
 803748e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8037490:	2300      	movs	r3, #0
 8037492:	60fb      	str	r3, [r7, #12]
 8037494:	e016      	b.n	80374c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8037496:	4a10      	ldr	r2, [pc, #64]	; (80374d8 <vQueueUnregisterQueue+0x50>)
 8037498:	68fb      	ldr	r3, [r7, #12]
 803749a:	00db      	lsls	r3, r3, #3
 803749c:	4413      	add	r3, r2
 803749e:	685b      	ldr	r3, [r3, #4]
 80374a0:	687a      	ldr	r2, [r7, #4]
 80374a2:	429a      	cmp	r2, r3
 80374a4:	d10b      	bne.n	80374be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80374a6:	4a0c      	ldr	r2, [pc, #48]	; (80374d8 <vQueueUnregisterQueue+0x50>)
 80374a8:	68fb      	ldr	r3, [r7, #12]
 80374aa:	2100      	movs	r1, #0
 80374ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80374b0:	4a09      	ldr	r2, [pc, #36]	; (80374d8 <vQueueUnregisterQueue+0x50>)
 80374b2:	68fb      	ldr	r3, [r7, #12]
 80374b4:	00db      	lsls	r3, r3, #3
 80374b6:	4413      	add	r3, r2
 80374b8:	2200      	movs	r2, #0
 80374ba:	605a      	str	r2, [r3, #4]
				break;
 80374bc:	e006      	b.n	80374cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80374be:	68fb      	ldr	r3, [r7, #12]
 80374c0:	3301      	adds	r3, #1
 80374c2:	60fb      	str	r3, [r7, #12]
 80374c4:	68fb      	ldr	r3, [r7, #12]
 80374c6:	2b07      	cmp	r3, #7
 80374c8:	d9e5      	bls.n	8037496 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80374ca:	bf00      	nop
 80374cc:	bf00      	nop
 80374ce:	3714      	adds	r7, #20
 80374d0:	46bd      	mov	sp, r7
 80374d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80374d6:	4770      	bx	lr
 80374d8:	24002c2c 	.word	0x24002c2c

080374dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80374dc:	b580      	push	{r7, lr}
 80374de:	b086      	sub	sp, #24
 80374e0:	af00      	add	r7, sp, #0
 80374e2:	60f8      	str	r0, [r7, #12]
 80374e4:	60b9      	str	r1, [r7, #8]
 80374e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80374e8:	68fb      	ldr	r3, [r7, #12]
 80374ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80374ec:	f001 fe42 	bl	8039174 <vPortEnterCritical>
 80374f0:	697b      	ldr	r3, [r7, #20]
 80374f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80374f6:	b25b      	sxtb	r3, r3
 80374f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80374fc:	d103      	bne.n	8037506 <vQueueWaitForMessageRestricted+0x2a>
 80374fe:	697b      	ldr	r3, [r7, #20]
 8037500:	2200      	movs	r2, #0
 8037502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8037506:	697b      	ldr	r3, [r7, #20]
 8037508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 803750c:	b25b      	sxtb	r3, r3
 803750e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8037512:	d103      	bne.n	803751c <vQueueWaitForMessageRestricted+0x40>
 8037514:	697b      	ldr	r3, [r7, #20]
 8037516:	2200      	movs	r2, #0
 8037518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 803751c:	f001 fe5a 	bl	80391d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8037520:	697b      	ldr	r3, [r7, #20]
 8037522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037524:	2b00      	cmp	r3, #0
 8037526:	d106      	bne.n	8037536 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8037528:	697b      	ldr	r3, [r7, #20]
 803752a:	3324      	adds	r3, #36	; 0x24
 803752c:	687a      	ldr	r2, [r7, #4]
 803752e:	68b9      	ldr	r1, [r7, #8]
 8037530:	4618      	mov	r0, r3
 8037532:	f000 fc27 	bl	8037d84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8037536:	6978      	ldr	r0, [r7, #20]
 8037538:	f7ff fefb 	bl	8037332 <prvUnlockQueue>
	}
 803753c:	bf00      	nop
 803753e:	3718      	adds	r7, #24
 8037540:	46bd      	mov	sp, r7
 8037542:	bd80      	pop	{r7, pc}

08037544 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8037544:	b580      	push	{r7, lr}
 8037546:	b08e      	sub	sp, #56	; 0x38
 8037548:	af04      	add	r7, sp, #16
 803754a:	60f8      	str	r0, [r7, #12]
 803754c:	60b9      	str	r1, [r7, #8]
 803754e:	607a      	str	r2, [r7, #4]
 8037550:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8037552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037554:	2b00      	cmp	r3, #0
 8037556:	d10a      	bne.n	803756e <xTaskCreateStatic+0x2a>
	__asm volatile
 8037558:	f04f 0350 	mov.w	r3, #80	; 0x50
 803755c:	f383 8811 	msr	BASEPRI, r3
 8037560:	f3bf 8f6f 	isb	sy
 8037564:	f3bf 8f4f 	dsb	sy
 8037568:	623b      	str	r3, [r7, #32]
}
 803756a:	bf00      	nop
 803756c:	e7fe      	b.n	803756c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 803756e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037570:	2b00      	cmp	r3, #0
 8037572:	d10a      	bne.n	803758a <xTaskCreateStatic+0x46>
	__asm volatile
 8037574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037578:	f383 8811 	msr	BASEPRI, r3
 803757c:	f3bf 8f6f 	isb	sy
 8037580:	f3bf 8f4f 	dsb	sy
 8037584:	61fb      	str	r3, [r7, #28]
}
 8037586:	bf00      	nop
 8037588:	e7fe      	b.n	8037588 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 803758a:	2354      	movs	r3, #84	; 0x54
 803758c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 803758e:	693b      	ldr	r3, [r7, #16]
 8037590:	2b54      	cmp	r3, #84	; 0x54
 8037592:	d00a      	beq.n	80375aa <xTaskCreateStatic+0x66>
	__asm volatile
 8037594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037598:	f383 8811 	msr	BASEPRI, r3
 803759c:	f3bf 8f6f 	isb	sy
 80375a0:	f3bf 8f4f 	dsb	sy
 80375a4:	61bb      	str	r3, [r7, #24]
}
 80375a6:	bf00      	nop
 80375a8:	e7fe      	b.n	80375a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80375aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80375ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80375ae:	2b00      	cmp	r3, #0
 80375b0:	d01e      	beq.n	80375f0 <xTaskCreateStatic+0xac>
 80375b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80375b4:	2b00      	cmp	r3, #0
 80375b6:	d01b      	beq.n	80375f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80375b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80375ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80375bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80375be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80375c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80375c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80375c4:	2202      	movs	r2, #2
 80375c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80375ca:	2300      	movs	r3, #0
 80375cc:	9303      	str	r3, [sp, #12]
 80375ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80375d0:	9302      	str	r3, [sp, #8]
 80375d2:	f107 0314 	add.w	r3, r7, #20
 80375d6:	9301      	str	r3, [sp, #4]
 80375d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80375da:	9300      	str	r3, [sp, #0]
 80375dc:	683b      	ldr	r3, [r7, #0]
 80375de:	687a      	ldr	r2, [r7, #4]
 80375e0:	68b9      	ldr	r1, [r7, #8]
 80375e2:	68f8      	ldr	r0, [r7, #12]
 80375e4:	f000 f850 	bl	8037688 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80375e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80375ea:	f000 f8d5 	bl	8037798 <prvAddNewTaskToReadyList>
 80375ee:	e001      	b.n	80375f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80375f0:	2300      	movs	r3, #0
 80375f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80375f4:	697b      	ldr	r3, [r7, #20]
	}
 80375f6:	4618      	mov	r0, r3
 80375f8:	3728      	adds	r7, #40	; 0x28
 80375fa:	46bd      	mov	sp, r7
 80375fc:	bd80      	pop	{r7, pc}

080375fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80375fe:	b580      	push	{r7, lr}
 8037600:	b08c      	sub	sp, #48	; 0x30
 8037602:	af04      	add	r7, sp, #16
 8037604:	60f8      	str	r0, [r7, #12]
 8037606:	60b9      	str	r1, [r7, #8]
 8037608:	603b      	str	r3, [r7, #0]
 803760a:	4613      	mov	r3, r2
 803760c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 803760e:	88fb      	ldrh	r3, [r7, #6]
 8037610:	009b      	lsls	r3, r3, #2
 8037612:	4618      	mov	r0, r3
 8037614:	f001 fed0 	bl	80393b8 <pvPortMalloc>
 8037618:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 803761a:	697b      	ldr	r3, [r7, #20]
 803761c:	2b00      	cmp	r3, #0
 803761e:	d00e      	beq.n	803763e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8037620:	2054      	movs	r0, #84	; 0x54
 8037622:	f001 fec9 	bl	80393b8 <pvPortMalloc>
 8037626:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8037628:	69fb      	ldr	r3, [r7, #28]
 803762a:	2b00      	cmp	r3, #0
 803762c:	d003      	beq.n	8037636 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 803762e:	69fb      	ldr	r3, [r7, #28]
 8037630:	697a      	ldr	r2, [r7, #20]
 8037632:	631a      	str	r2, [r3, #48]	; 0x30
 8037634:	e005      	b.n	8037642 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8037636:	6978      	ldr	r0, [r7, #20]
 8037638:	f001 ff8a 	bl	8039550 <vPortFree>
 803763c:	e001      	b.n	8037642 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 803763e:	2300      	movs	r3, #0
 8037640:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8037642:	69fb      	ldr	r3, [r7, #28]
 8037644:	2b00      	cmp	r3, #0
 8037646:	d017      	beq.n	8037678 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8037648:	69fb      	ldr	r3, [r7, #28]
 803764a:	2200      	movs	r2, #0
 803764c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8037650:	88fa      	ldrh	r2, [r7, #6]
 8037652:	2300      	movs	r3, #0
 8037654:	9303      	str	r3, [sp, #12]
 8037656:	69fb      	ldr	r3, [r7, #28]
 8037658:	9302      	str	r3, [sp, #8]
 803765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803765c:	9301      	str	r3, [sp, #4]
 803765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037660:	9300      	str	r3, [sp, #0]
 8037662:	683b      	ldr	r3, [r7, #0]
 8037664:	68b9      	ldr	r1, [r7, #8]
 8037666:	68f8      	ldr	r0, [r7, #12]
 8037668:	f000 f80e 	bl	8037688 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 803766c:	69f8      	ldr	r0, [r7, #28]
 803766e:	f000 f893 	bl	8037798 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8037672:	2301      	movs	r3, #1
 8037674:	61bb      	str	r3, [r7, #24]
 8037676:	e002      	b.n	803767e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8037678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803767c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 803767e:	69bb      	ldr	r3, [r7, #24]
	}
 8037680:	4618      	mov	r0, r3
 8037682:	3720      	adds	r7, #32
 8037684:	46bd      	mov	sp, r7
 8037686:	bd80      	pop	{r7, pc}

08037688 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8037688:	b580      	push	{r7, lr}
 803768a:	b088      	sub	sp, #32
 803768c:	af00      	add	r7, sp, #0
 803768e:	60f8      	str	r0, [r7, #12]
 8037690:	60b9      	str	r1, [r7, #8]
 8037692:	607a      	str	r2, [r7, #4]
 8037694:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8037696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803769a:	6879      	ldr	r1, [r7, #4]
 803769c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80376a0:	440b      	add	r3, r1
 80376a2:	009b      	lsls	r3, r3, #2
 80376a4:	4413      	add	r3, r2
 80376a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80376a8:	69bb      	ldr	r3, [r7, #24]
 80376aa:	f023 0307 	bic.w	r3, r3, #7
 80376ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80376b0:	69bb      	ldr	r3, [r7, #24]
 80376b2:	f003 0307 	and.w	r3, r3, #7
 80376b6:	2b00      	cmp	r3, #0
 80376b8:	d00a      	beq.n	80376d0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80376ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80376be:	f383 8811 	msr	BASEPRI, r3
 80376c2:	f3bf 8f6f 	isb	sy
 80376c6:	f3bf 8f4f 	dsb	sy
 80376ca:	617b      	str	r3, [r7, #20]
}
 80376cc:	bf00      	nop
 80376ce:	e7fe      	b.n	80376ce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80376d0:	68bb      	ldr	r3, [r7, #8]
 80376d2:	2b00      	cmp	r3, #0
 80376d4:	d01f      	beq.n	8037716 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80376d6:	2300      	movs	r3, #0
 80376d8:	61fb      	str	r3, [r7, #28]
 80376da:	e012      	b.n	8037702 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80376dc:	68ba      	ldr	r2, [r7, #8]
 80376de:	69fb      	ldr	r3, [r7, #28]
 80376e0:	4413      	add	r3, r2
 80376e2:	7819      	ldrb	r1, [r3, #0]
 80376e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80376e6:	69fb      	ldr	r3, [r7, #28]
 80376e8:	4413      	add	r3, r2
 80376ea:	3334      	adds	r3, #52	; 0x34
 80376ec:	460a      	mov	r2, r1
 80376ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80376f0:	68ba      	ldr	r2, [r7, #8]
 80376f2:	69fb      	ldr	r3, [r7, #28]
 80376f4:	4413      	add	r3, r2
 80376f6:	781b      	ldrb	r3, [r3, #0]
 80376f8:	2b00      	cmp	r3, #0
 80376fa:	d006      	beq.n	803770a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80376fc:	69fb      	ldr	r3, [r7, #28]
 80376fe:	3301      	adds	r3, #1
 8037700:	61fb      	str	r3, [r7, #28]
 8037702:	69fb      	ldr	r3, [r7, #28]
 8037704:	2b0f      	cmp	r3, #15
 8037706:	d9e9      	bls.n	80376dc <prvInitialiseNewTask+0x54>
 8037708:	e000      	b.n	803770c <prvInitialiseNewTask+0x84>
			{
				break;
 803770a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 803770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803770e:	2200      	movs	r2, #0
 8037710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8037714:	e003      	b.n	803771e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8037716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037718:	2200      	movs	r2, #0
 803771a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 803771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037720:	2b06      	cmp	r3, #6
 8037722:	d901      	bls.n	8037728 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8037724:	2306      	movs	r3, #6
 8037726:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8037728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803772a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803772c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 803772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8037732:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8037734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037736:	2200      	movs	r2, #0
 8037738:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 803773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803773c:	3304      	adds	r3, #4
 803773e:	4618      	mov	r0, r3
 8037740:	f7fe fe80 	bl	8036444 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8037744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037746:	3318      	adds	r3, #24
 8037748:	4618      	mov	r0, r3
 803774a:	f7fe fe7b 	bl	8036444 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 803774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8037752:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8037754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037756:	f1c3 0207 	rsb	r2, r3, #7
 803775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803775c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 803775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8037762:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8037764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037766:	2200      	movs	r2, #0
 8037768:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 803776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803776c:	2200      	movs	r2, #0
 803776e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8037772:	683a      	ldr	r2, [r7, #0]
 8037774:	68f9      	ldr	r1, [r7, #12]
 8037776:	69b8      	ldr	r0, [r7, #24]
 8037778:	f001 fbd0 	bl	8038f1c <pxPortInitialiseStack>
 803777c:	4602      	mov	r2, r0
 803777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037780:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8037782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037784:	2b00      	cmp	r3, #0
 8037786:	d002      	beq.n	803778e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8037788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803778a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803778c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 803778e:	bf00      	nop
 8037790:	3720      	adds	r7, #32
 8037792:	46bd      	mov	sp, r7
 8037794:	bd80      	pop	{r7, pc}
	...

08037798 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8037798:	b580      	push	{r7, lr}
 803779a:	b082      	sub	sp, #8
 803779c:	af00      	add	r7, sp, #0
 803779e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80377a0:	f001 fce8 	bl	8039174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80377a4:	4b2a      	ldr	r3, [pc, #168]	; (8037850 <prvAddNewTaskToReadyList+0xb8>)
 80377a6:	681b      	ldr	r3, [r3, #0]
 80377a8:	3301      	adds	r3, #1
 80377aa:	4a29      	ldr	r2, [pc, #164]	; (8037850 <prvAddNewTaskToReadyList+0xb8>)
 80377ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80377ae:	4b29      	ldr	r3, [pc, #164]	; (8037854 <prvAddNewTaskToReadyList+0xbc>)
 80377b0:	681b      	ldr	r3, [r3, #0]
 80377b2:	2b00      	cmp	r3, #0
 80377b4:	d109      	bne.n	80377ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80377b6:	4a27      	ldr	r2, [pc, #156]	; (8037854 <prvAddNewTaskToReadyList+0xbc>)
 80377b8:	687b      	ldr	r3, [r7, #4]
 80377ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80377bc:	4b24      	ldr	r3, [pc, #144]	; (8037850 <prvAddNewTaskToReadyList+0xb8>)
 80377be:	681b      	ldr	r3, [r3, #0]
 80377c0:	2b01      	cmp	r3, #1
 80377c2:	d110      	bne.n	80377e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80377c4:	f000 fc08 	bl	8037fd8 <prvInitialiseTaskLists>
 80377c8:	e00d      	b.n	80377e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80377ca:	4b23      	ldr	r3, [pc, #140]	; (8037858 <prvAddNewTaskToReadyList+0xc0>)
 80377cc:	681b      	ldr	r3, [r3, #0]
 80377ce:	2b00      	cmp	r3, #0
 80377d0:	d109      	bne.n	80377e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80377d2:	4b20      	ldr	r3, [pc, #128]	; (8037854 <prvAddNewTaskToReadyList+0xbc>)
 80377d4:	681b      	ldr	r3, [r3, #0]
 80377d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80377d8:	687b      	ldr	r3, [r7, #4]
 80377da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80377dc:	429a      	cmp	r2, r3
 80377de:	d802      	bhi.n	80377e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80377e0:	4a1c      	ldr	r2, [pc, #112]	; (8037854 <prvAddNewTaskToReadyList+0xbc>)
 80377e2:	687b      	ldr	r3, [r7, #4]
 80377e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80377e6:	4b1d      	ldr	r3, [pc, #116]	; (803785c <prvAddNewTaskToReadyList+0xc4>)
 80377e8:	681b      	ldr	r3, [r3, #0]
 80377ea:	3301      	adds	r3, #1
 80377ec:	4a1b      	ldr	r2, [pc, #108]	; (803785c <prvAddNewTaskToReadyList+0xc4>)
 80377ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80377f0:	687b      	ldr	r3, [r7, #4]
 80377f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80377f4:	2201      	movs	r2, #1
 80377f6:	409a      	lsls	r2, r3
 80377f8:	4b19      	ldr	r3, [pc, #100]	; (8037860 <prvAddNewTaskToReadyList+0xc8>)
 80377fa:	681b      	ldr	r3, [r3, #0]
 80377fc:	4313      	orrs	r3, r2
 80377fe:	4a18      	ldr	r2, [pc, #96]	; (8037860 <prvAddNewTaskToReadyList+0xc8>)
 8037800:	6013      	str	r3, [r2, #0]
 8037802:	687b      	ldr	r3, [r7, #4]
 8037804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037806:	4613      	mov	r3, r2
 8037808:	009b      	lsls	r3, r3, #2
 803780a:	4413      	add	r3, r2
 803780c:	009b      	lsls	r3, r3, #2
 803780e:	4a15      	ldr	r2, [pc, #84]	; (8037864 <prvAddNewTaskToReadyList+0xcc>)
 8037810:	441a      	add	r2, r3
 8037812:	687b      	ldr	r3, [r7, #4]
 8037814:	3304      	adds	r3, #4
 8037816:	4619      	mov	r1, r3
 8037818:	4610      	mov	r0, r2
 803781a:	f7fe fe20 	bl	803645e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 803781e:	f001 fcd9 	bl	80391d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8037822:	4b0d      	ldr	r3, [pc, #52]	; (8037858 <prvAddNewTaskToReadyList+0xc0>)
 8037824:	681b      	ldr	r3, [r3, #0]
 8037826:	2b00      	cmp	r3, #0
 8037828:	d00e      	beq.n	8037848 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 803782a:	4b0a      	ldr	r3, [pc, #40]	; (8037854 <prvAddNewTaskToReadyList+0xbc>)
 803782c:	681b      	ldr	r3, [r3, #0]
 803782e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037830:	687b      	ldr	r3, [r7, #4]
 8037832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037834:	429a      	cmp	r2, r3
 8037836:	d207      	bcs.n	8037848 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8037838:	4b0b      	ldr	r3, [pc, #44]	; (8037868 <prvAddNewTaskToReadyList+0xd0>)
 803783a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803783e:	601a      	str	r2, [r3, #0]
 8037840:	f3bf 8f4f 	dsb	sy
 8037844:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8037848:	bf00      	nop
 803784a:	3708      	adds	r7, #8
 803784c:	46bd      	mov	sp, r7
 803784e:	bd80      	pop	{r7, pc}
 8037850:	24002d6c 	.word	0x24002d6c
 8037854:	24002c6c 	.word	0x24002c6c
 8037858:	24002d78 	.word	0x24002d78
 803785c:	24002d88 	.word	0x24002d88
 8037860:	24002d74 	.word	0x24002d74
 8037864:	24002c70 	.word	0x24002c70
 8037868:	e000ed04 	.word	0xe000ed04

0803786c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 803786c:	b580      	push	{r7, lr}
 803786e:	b084      	sub	sp, #16
 8037870:	af00      	add	r7, sp, #0
 8037872:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8037874:	2300      	movs	r3, #0
 8037876:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8037878:	687b      	ldr	r3, [r7, #4]
 803787a:	2b00      	cmp	r3, #0
 803787c:	d017      	beq.n	80378ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 803787e:	4b13      	ldr	r3, [pc, #76]	; (80378cc <vTaskDelay+0x60>)
 8037880:	681b      	ldr	r3, [r3, #0]
 8037882:	2b00      	cmp	r3, #0
 8037884:	d00a      	beq.n	803789c <vTaskDelay+0x30>
	__asm volatile
 8037886:	f04f 0350 	mov.w	r3, #80	; 0x50
 803788a:	f383 8811 	msr	BASEPRI, r3
 803788e:	f3bf 8f6f 	isb	sy
 8037892:	f3bf 8f4f 	dsb	sy
 8037896:	60bb      	str	r3, [r7, #8]
}
 8037898:	bf00      	nop
 803789a:	e7fe      	b.n	803789a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 803789c:	f000 f880 	bl	80379a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80378a0:	2100      	movs	r1, #0
 80378a2:	6878      	ldr	r0, [r7, #4]
 80378a4:	f000 feec 	bl	8038680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80378a8:	f000 f888 	bl	80379bc <xTaskResumeAll>
 80378ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80378ae:	68fb      	ldr	r3, [r7, #12]
 80378b0:	2b00      	cmp	r3, #0
 80378b2:	d107      	bne.n	80378c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80378b4:	4b06      	ldr	r3, [pc, #24]	; (80378d0 <vTaskDelay+0x64>)
 80378b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80378ba:	601a      	str	r2, [r3, #0]
 80378bc:	f3bf 8f4f 	dsb	sy
 80378c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80378c4:	bf00      	nop
 80378c6:	3710      	adds	r7, #16
 80378c8:	46bd      	mov	sp, r7
 80378ca:	bd80      	pop	{r7, pc}
 80378cc:	24002d94 	.word	0x24002d94
 80378d0:	e000ed04 	.word	0xe000ed04

080378d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80378d4:	b580      	push	{r7, lr}
 80378d6:	b08a      	sub	sp, #40	; 0x28
 80378d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80378da:	2300      	movs	r3, #0
 80378dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80378de:	2300      	movs	r3, #0
 80378e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80378e2:	463a      	mov	r2, r7
 80378e4:	1d39      	adds	r1, r7, #4
 80378e6:	f107 0308 	add.w	r3, r7, #8
 80378ea:	4618      	mov	r0, r3
 80378ec:	f7e9 f9d2 	bl	8020c94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80378f0:	6839      	ldr	r1, [r7, #0]
 80378f2:	687b      	ldr	r3, [r7, #4]
 80378f4:	68ba      	ldr	r2, [r7, #8]
 80378f6:	9202      	str	r2, [sp, #8]
 80378f8:	9301      	str	r3, [sp, #4]
 80378fa:	2300      	movs	r3, #0
 80378fc:	9300      	str	r3, [sp, #0]
 80378fe:	2300      	movs	r3, #0
 8037900:	460a      	mov	r2, r1
 8037902:	4921      	ldr	r1, [pc, #132]	; (8037988 <vTaskStartScheduler+0xb4>)
 8037904:	4821      	ldr	r0, [pc, #132]	; (803798c <vTaskStartScheduler+0xb8>)
 8037906:	f7ff fe1d 	bl	8037544 <xTaskCreateStatic>
 803790a:	4603      	mov	r3, r0
 803790c:	4a20      	ldr	r2, [pc, #128]	; (8037990 <vTaskStartScheduler+0xbc>)
 803790e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8037910:	4b1f      	ldr	r3, [pc, #124]	; (8037990 <vTaskStartScheduler+0xbc>)
 8037912:	681b      	ldr	r3, [r3, #0]
 8037914:	2b00      	cmp	r3, #0
 8037916:	d002      	beq.n	803791e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8037918:	2301      	movs	r3, #1
 803791a:	617b      	str	r3, [r7, #20]
 803791c:	e001      	b.n	8037922 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 803791e:	2300      	movs	r3, #0
 8037920:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8037922:	697b      	ldr	r3, [r7, #20]
 8037924:	2b01      	cmp	r3, #1
 8037926:	d102      	bne.n	803792e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8037928:	f000 ff10 	bl	803874c <xTimerCreateTimerTask>
 803792c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 803792e:	697b      	ldr	r3, [r7, #20]
 8037930:	2b01      	cmp	r3, #1
 8037932:	d116      	bne.n	8037962 <vTaskStartScheduler+0x8e>
	__asm volatile
 8037934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037938:	f383 8811 	msr	BASEPRI, r3
 803793c:	f3bf 8f6f 	isb	sy
 8037940:	f3bf 8f4f 	dsb	sy
 8037944:	613b      	str	r3, [r7, #16]
}
 8037946:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8037948:	4b12      	ldr	r3, [pc, #72]	; (8037994 <vTaskStartScheduler+0xc0>)
 803794a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803794e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8037950:	4b11      	ldr	r3, [pc, #68]	; (8037998 <vTaskStartScheduler+0xc4>)
 8037952:	2201      	movs	r2, #1
 8037954:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8037956:	4b11      	ldr	r3, [pc, #68]	; (803799c <vTaskStartScheduler+0xc8>)
 8037958:	2200      	movs	r2, #0
 803795a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 803795c:	f001 fb68 	bl	8039030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8037960:	e00e      	b.n	8037980 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8037962:	697b      	ldr	r3, [r7, #20]
 8037964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8037968:	d10a      	bne.n	8037980 <vTaskStartScheduler+0xac>
	__asm volatile
 803796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803796e:	f383 8811 	msr	BASEPRI, r3
 8037972:	f3bf 8f6f 	isb	sy
 8037976:	f3bf 8f4f 	dsb	sy
 803797a:	60fb      	str	r3, [r7, #12]
}
 803797c:	bf00      	nop
 803797e:	e7fe      	b.n	803797e <vTaskStartScheduler+0xaa>
}
 8037980:	bf00      	nop
 8037982:	3718      	adds	r7, #24
 8037984:	46bd      	mov	sp, r7
 8037986:	bd80      	pop	{r7, pc}
 8037988:	0803b834 	.word	0x0803b834
 803798c:	08037fa9 	.word	0x08037fa9
 8037990:	24002d90 	.word	0x24002d90
 8037994:	24002d8c 	.word	0x24002d8c
 8037998:	24002d78 	.word	0x24002d78
 803799c:	24002d70 	.word	0x24002d70

080379a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80379a0:	b480      	push	{r7}
 80379a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80379a4:	4b04      	ldr	r3, [pc, #16]	; (80379b8 <vTaskSuspendAll+0x18>)
 80379a6:	681b      	ldr	r3, [r3, #0]
 80379a8:	3301      	adds	r3, #1
 80379aa:	4a03      	ldr	r2, [pc, #12]	; (80379b8 <vTaskSuspendAll+0x18>)
 80379ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80379ae:	bf00      	nop
 80379b0:	46bd      	mov	sp, r7
 80379b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80379b6:	4770      	bx	lr
 80379b8:	24002d94 	.word	0x24002d94

080379bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80379bc:	b580      	push	{r7, lr}
 80379be:	b084      	sub	sp, #16
 80379c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80379c2:	2300      	movs	r3, #0
 80379c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80379c6:	2300      	movs	r3, #0
 80379c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80379ca:	4b41      	ldr	r3, [pc, #260]	; (8037ad0 <xTaskResumeAll+0x114>)
 80379cc:	681b      	ldr	r3, [r3, #0]
 80379ce:	2b00      	cmp	r3, #0
 80379d0:	d10a      	bne.n	80379e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80379d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80379d6:	f383 8811 	msr	BASEPRI, r3
 80379da:	f3bf 8f6f 	isb	sy
 80379de:	f3bf 8f4f 	dsb	sy
 80379e2:	603b      	str	r3, [r7, #0]
}
 80379e4:	bf00      	nop
 80379e6:	e7fe      	b.n	80379e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80379e8:	f001 fbc4 	bl	8039174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80379ec:	4b38      	ldr	r3, [pc, #224]	; (8037ad0 <xTaskResumeAll+0x114>)
 80379ee:	681b      	ldr	r3, [r3, #0]
 80379f0:	3b01      	subs	r3, #1
 80379f2:	4a37      	ldr	r2, [pc, #220]	; (8037ad0 <xTaskResumeAll+0x114>)
 80379f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80379f6:	4b36      	ldr	r3, [pc, #216]	; (8037ad0 <xTaskResumeAll+0x114>)
 80379f8:	681b      	ldr	r3, [r3, #0]
 80379fa:	2b00      	cmp	r3, #0
 80379fc:	d161      	bne.n	8037ac2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80379fe:	4b35      	ldr	r3, [pc, #212]	; (8037ad4 <xTaskResumeAll+0x118>)
 8037a00:	681b      	ldr	r3, [r3, #0]
 8037a02:	2b00      	cmp	r3, #0
 8037a04:	d05d      	beq.n	8037ac2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8037a06:	e02e      	b.n	8037a66 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8037a08:	4b33      	ldr	r3, [pc, #204]	; (8037ad8 <xTaskResumeAll+0x11c>)
 8037a0a:	68db      	ldr	r3, [r3, #12]
 8037a0c:	68db      	ldr	r3, [r3, #12]
 8037a0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8037a10:	68fb      	ldr	r3, [r7, #12]
 8037a12:	3318      	adds	r3, #24
 8037a14:	4618      	mov	r0, r3
 8037a16:	f7fe fd7f 	bl	8036518 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8037a1a:	68fb      	ldr	r3, [r7, #12]
 8037a1c:	3304      	adds	r3, #4
 8037a1e:	4618      	mov	r0, r3
 8037a20:	f7fe fd7a 	bl	8036518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8037a24:	68fb      	ldr	r3, [r7, #12]
 8037a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037a28:	2201      	movs	r2, #1
 8037a2a:	409a      	lsls	r2, r3
 8037a2c:	4b2b      	ldr	r3, [pc, #172]	; (8037adc <xTaskResumeAll+0x120>)
 8037a2e:	681b      	ldr	r3, [r3, #0]
 8037a30:	4313      	orrs	r3, r2
 8037a32:	4a2a      	ldr	r2, [pc, #168]	; (8037adc <xTaskResumeAll+0x120>)
 8037a34:	6013      	str	r3, [r2, #0]
 8037a36:	68fb      	ldr	r3, [r7, #12]
 8037a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037a3a:	4613      	mov	r3, r2
 8037a3c:	009b      	lsls	r3, r3, #2
 8037a3e:	4413      	add	r3, r2
 8037a40:	009b      	lsls	r3, r3, #2
 8037a42:	4a27      	ldr	r2, [pc, #156]	; (8037ae0 <xTaskResumeAll+0x124>)
 8037a44:	441a      	add	r2, r3
 8037a46:	68fb      	ldr	r3, [r7, #12]
 8037a48:	3304      	adds	r3, #4
 8037a4a:	4619      	mov	r1, r3
 8037a4c:	4610      	mov	r0, r2
 8037a4e:	f7fe fd06 	bl	803645e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8037a52:	68fb      	ldr	r3, [r7, #12]
 8037a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037a56:	4b23      	ldr	r3, [pc, #140]	; (8037ae4 <xTaskResumeAll+0x128>)
 8037a58:	681b      	ldr	r3, [r3, #0]
 8037a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037a5c:	429a      	cmp	r2, r3
 8037a5e:	d302      	bcc.n	8037a66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8037a60:	4b21      	ldr	r3, [pc, #132]	; (8037ae8 <xTaskResumeAll+0x12c>)
 8037a62:	2201      	movs	r2, #1
 8037a64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8037a66:	4b1c      	ldr	r3, [pc, #112]	; (8037ad8 <xTaskResumeAll+0x11c>)
 8037a68:	681b      	ldr	r3, [r3, #0]
 8037a6a:	2b00      	cmp	r3, #0
 8037a6c:	d1cc      	bne.n	8037a08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8037a6e:	68fb      	ldr	r3, [r7, #12]
 8037a70:	2b00      	cmp	r3, #0
 8037a72:	d001      	beq.n	8037a78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8037a74:	f000 fb4e 	bl	8038114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8037a78:	4b1c      	ldr	r3, [pc, #112]	; (8037aec <xTaskResumeAll+0x130>)
 8037a7a:	681b      	ldr	r3, [r3, #0]
 8037a7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8037a7e:	687b      	ldr	r3, [r7, #4]
 8037a80:	2b00      	cmp	r3, #0
 8037a82:	d010      	beq.n	8037aa6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8037a84:	f000 f846 	bl	8037b14 <xTaskIncrementTick>
 8037a88:	4603      	mov	r3, r0
 8037a8a:	2b00      	cmp	r3, #0
 8037a8c:	d002      	beq.n	8037a94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8037a8e:	4b16      	ldr	r3, [pc, #88]	; (8037ae8 <xTaskResumeAll+0x12c>)
 8037a90:	2201      	movs	r2, #1
 8037a92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8037a94:	687b      	ldr	r3, [r7, #4]
 8037a96:	3b01      	subs	r3, #1
 8037a98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8037a9a:	687b      	ldr	r3, [r7, #4]
 8037a9c:	2b00      	cmp	r3, #0
 8037a9e:	d1f1      	bne.n	8037a84 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8037aa0:	4b12      	ldr	r3, [pc, #72]	; (8037aec <xTaskResumeAll+0x130>)
 8037aa2:	2200      	movs	r2, #0
 8037aa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8037aa6:	4b10      	ldr	r3, [pc, #64]	; (8037ae8 <xTaskResumeAll+0x12c>)
 8037aa8:	681b      	ldr	r3, [r3, #0]
 8037aaa:	2b00      	cmp	r3, #0
 8037aac:	d009      	beq.n	8037ac2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8037aae:	2301      	movs	r3, #1
 8037ab0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8037ab2:	4b0f      	ldr	r3, [pc, #60]	; (8037af0 <xTaskResumeAll+0x134>)
 8037ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8037ab8:	601a      	str	r2, [r3, #0]
 8037aba:	f3bf 8f4f 	dsb	sy
 8037abe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8037ac2:	f001 fb87 	bl	80391d4 <vPortExitCritical>

	return xAlreadyYielded;
 8037ac6:	68bb      	ldr	r3, [r7, #8]
}
 8037ac8:	4618      	mov	r0, r3
 8037aca:	3710      	adds	r7, #16
 8037acc:	46bd      	mov	sp, r7
 8037ace:	bd80      	pop	{r7, pc}
 8037ad0:	24002d94 	.word	0x24002d94
 8037ad4:	24002d6c 	.word	0x24002d6c
 8037ad8:	24002d2c 	.word	0x24002d2c
 8037adc:	24002d74 	.word	0x24002d74
 8037ae0:	24002c70 	.word	0x24002c70
 8037ae4:	24002c6c 	.word	0x24002c6c
 8037ae8:	24002d80 	.word	0x24002d80
 8037aec:	24002d7c 	.word	0x24002d7c
 8037af0:	e000ed04 	.word	0xe000ed04

08037af4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8037af4:	b480      	push	{r7}
 8037af6:	b083      	sub	sp, #12
 8037af8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8037afa:	4b05      	ldr	r3, [pc, #20]	; (8037b10 <xTaskGetTickCount+0x1c>)
 8037afc:	681b      	ldr	r3, [r3, #0]
 8037afe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8037b00:	687b      	ldr	r3, [r7, #4]
}
 8037b02:	4618      	mov	r0, r3
 8037b04:	370c      	adds	r7, #12
 8037b06:	46bd      	mov	sp, r7
 8037b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037b0c:	4770      	bx	lr
 8037b0e:	bf00      	nop
 8037b10:	24002d70 	.word	0x24002d70

08037b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8037b14:	b580      	push	{r7, lr}
 8037b16:	b086      	sub	sp, #24
 8037b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8037b1a:	2300      	movs	r3, #0
 8037b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8037b1e:	4b4e      	ldr	r3, [pc, #312]	; (8037c58 <xTaskIncrementTick+0x144>)
 8037b20:	681b      	ldr	r3, [r3, #0]
 8037b22:	2b00      	cmp	r3, #0
 8037b24:	f040 808e 	bne.w	8037c44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8037b28:	4b4c      	ldr	r3, [pc, #304]	; (8037c5c <xTaskIncrementTick+0x148>)
 8037b2a:	681b      	ldr	r3, [r3, #0]
 8037b2c:	3301      	adds	r3, #1
 8037b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8037b30:	4a4a      	ldr	r2, [pc, #296]	; (8037c5c <xTaskIncrementTick+0x148>)
 8037b32:	693b      	ldr	r3, [r7, #16]
 8037b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8037b36:	693b      	ldr	r3, [r7, #16]
 8037b38:	2b00      	cmp	r3, #0
 8037b3a:	d120      	bne.n	8037b7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8037b3c:	4b48      	ldr	r3, [pc, #288]	; (8037c60 <xTaskIncrementTick+0x14c>)
 8037b3e:	681b      	ldr	r3, [r3, #0]
 8037b40:	681b      	ldr	r3, [r3, #0]
 8037b42:	2b00      	cmp	r3, #0
 8037b44:	d00a      	beq.n	8037b5c <xTaskIncrementTick+0x48>
	__asm volatile
 8037b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037b4a:	f383 8811 	msr	BASEPRI, r3
 8037b4e:	f3bf 8f6f 	isb	sy
 8037b52:	f3bf 8f4f 	dsb	sy
 8037b56:	603b      	str	r3, [r7, #0]
}
 8037b58:	bf00      	nop
 8037b5a:	e7fe      	b.n	8037b5a <xTaskIncrementTick+0x46>
 8037b5c:	4b40      	ldr	r3, [pc, #256]	; (8037c60 <xTaskIncrementTick+0x14c>)
 8037b5e:	681b      	ldr	r3, [r3, #0]
 8037b60:	60fb      	str	r3, [r7, #12]
 8037b62:	4b40      	ldr	r3, [pc, #256]	; (8037c64 <xTaskIncrementTick+0x150>)
 8037b64:	681b      	ldr	r3, [r3, #0]
 8037b66:	4a3e      	ldr	r2, [pc, #248]	; (8037c60 <xTaskIncrementTick+0x14c>)
 8037b68:	6013      	str	r3, [r2, #0]
 8037b6a:	4a3e      	ldr	r2, [pc, #248]	; (8037c64 <xTaskIncrementTick+0x150>)
 8037b6c:	68fb      	ldr	r3, [r7, #12]
 8037b6e:	6013      	str	r3, [r2, #0]
 8037b70:	4b3d      	ldr	r3, [pc, #244]	; (8037c68 <xTaskIncrementTick+0x154>)
 8037b72:	681b      	ldr	r3, [r3, #0]
 8037b74:	3301      	adds	r3, #1
 8037b76:	4a3c      	ldr	r2, [pc, #240]	; (8037c68 <xTaskIncrementTick+0x154>)
 8037b78:	6013      	str	r3, [r2, #0]
 8037b7a:	f000 facb 	bl	8038114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8037b7e:	4b3b      	ldr	r3, [pc, #236]	; (8037c6c <xTaskIncrementTick+0x158>)
 8037b80:	681b      	ldr	r3, [r3, #0]
 8037b82:	693a      	ldr	r2, [r7, #16]
 8037b84:	429a      	cmp	r2, r3
 8037b86:	d348      	bcc.n	8037c1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8037b88:	4b35      	ldr	r3, [pc, #212]	; (8037c60 <xTaskIncrementTick+0x14c>)
 8037b8a:	681b      	ldr	r3, [r3, #0]
 8037b8c:	681b      	ldr	r3, [r3, #0]
 8037b8e:	2b00      	cmp	r3, #0
 8037b90:	d104      	bne.n	8037b9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8037b92:	4b36      	ldr	r3, [pc, #216]	; (8037c6c <xTaskIncrementTick+0x158>)
 8037b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8037b98:	601a      	str	r2, [r3, #0]
					break;
 8037b9a:	e03e      	b.n	8037c1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8037b9c:	4b30      	ldr	r3, [pc, #192]	; (8037c60 <xTaskIncrementTick+0x14c>)
 8037b9e:	681b      	ldr	r3, [r3, #0]
 8037ba0:	68db      	ldr	r3, [r3, #12]
 8037ba2:	68db      	ldr	r3, [r3, #12]
 8037ba4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8037ba6:	68bb      	ldr	r3, [r7, #8]
 8037ba8:	685b      	ldr	r3, [r3, #4]
 8037baa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8037bac:	693a      	ldr	r2, [r7, #16]
 8037bae:	687b      	ldr	r3, [r7, #4]
 8037bb0:	429a      	cmp	r2, r3
 8037bb2:	d203      	bcs.n	8037bbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8037bb4:	4a2d      	ldr	r2, [pc, #180]	; (8037c6c <xTaskIncrementTick+0x158>)
 8037bb6:	687b      	ldr	r3, [r7, #4]
 8037bb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8037bba:	e02e      	b.n	8037c1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8037bbc:	68bb      	ldr	r3, [r7, #8]
 8037bbe:	3304      	adds	r3, #4
 8037bc0:	4618      	mov	r0, r3
 8037bc2:	f7fe fca9 	bl	8036518 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8037bc6:	68bb      	ldr	r3, [r7, #8]
 8037bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037bca:	2b00      	cmp	r3, #0
 8037bcc:	d004      	beq.n	8037bd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8037bce:	68bb      	ldr	r3, [r7, #8]
 8037bd0:	3318      	adds	r3, #24
 8037bd2:	4618      	mov	r0, r3
 8037bd4:	f7fe fca0 	bl	8036518 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8037bd8:	68bb      	ldr	r3, [r7, #8]
 8037bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037bdc:	2201      	movs	r2, #1
 8037bde:	409a      	lsls	r2, r3
 8037be0:	4b23      	ldr	r3, [pc, #140]	; (8037c70 <xTaskIncrementTick+0x15c>)
 8037be2:	681b      	ldr	r3, [r3, #0]
 8037be4:	4313      	orrs	r3, r2
 8037be6:	4a22      	ldr	r2, [pc, #136]	; (8037c70 <xTaskIncrementTick+0x15c>)
 8037be8:	6013      	str	r3, [r2, #0]
 8037bea:	68bb      	ldr	r3, [r7, #8]
 8037bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037bee:	4613      	mov	r3, r2
 8037bf0:	009b      	lsls	r3, r3, #2
 8037bf2:	4413      	add	r3, r2
 8037bf4:	009b      	lsls	r3, r3, #2
 8037bf6:	4a1f      	ldr	r2, [pc, #124]	; (8037c74 <xTaskIncrementTick+0x160>)
 8037bf8:	441a      	add	r2, r3
 8037bfa:	68bb      	ldr	r3, [r7, #8]
 8037bfc:	3304      	adds	r3, #4
 8037bfe:	4619      	mov	r1, r3
 8037c00:	4610      	mov	r0, r2
 8037c02:	f7fe fc2c 	bl	803645e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8037c06:	68bb      	ldr	r3, [r7, #8]
 8037c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037c0a:	4b1b      	ldr	r3, [pc, #108]	; (8037c78 <xTaskIncrementTick+0x164>)
 8037c0c:	681b      	ldr	r3, [r3, #0]
 8037c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037c10:	429a      	cmp	r2, r3
 8037c12:	d3b9      	bcc.n	8037b88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8037c14:	2301      	movs	r3, #1
 8037c16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8037c18:	e7b6      	b.n	8037b88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8037c1a:	4b17      	ldr	r3, [pc, #92]	; (8037c78 <xTaskIncrementTick+0x164>)
 8037c1c:	681b      	ldr	r3, [r3, #0]
 8037c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037c20:	4914      	ldr	r1, [pc, #80]	; (8037c74 <xTaskIncrementTick+0x160>)
 8037c22:	4613      	mov	r3, r2
 8037c24:	009b      	lsls	r3, r3, #2
 8037c26:	4413      	add	r3, r2
 8037c28:	009b      	lsls	r3, r3, #2
 8037c2a:	440b      	add	r3, r1
 8037c2c:	681b      	ldr	r3, [r3, #0]
 8037c2e:	2b01      	cmp	r3, #1
 8037c30:	d901      	bls.n	8037c36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8037c32:	2301      	movs	r3, #1
 8037c34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8037c36:	4b11      	ldr	r3, [pc, #68]	; (8037c7c <xTaskIncrementTick+0x168>)
 8037c38:	681b      	ldr	r3, [r3, #0]
 8037c3a:	2b00      	cmp	r3, #0
 8037c3c:	d007      	beq.n	8037c4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8037c3e:	2301      	movs	r3, #1
 8037c40:	617b      	str	r3, [r7, #20]
 8037c42:	e004      	b.n	8037c4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8037c44:	4b0e      	ldr	r3, [pc, #56]	; (8037c80 <xTaskIncrementTick+0x16c>)
 8037c46:	681b      	ldr	r3, [r3, #0]
 8037c48:	3301      	adds	r3, #1
 8037c4a:	4a0d      	ldr	r2, [pc, #52]	; (8037c80 <xTaskIncrementTick+0x16c>)
 8037c4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8037c4e:	697b      	ldr	r3, [r7, #20]
}
 8037c50:	4618      	mov	r0, r3
 8037c52:	3718      	adds	r7, #24
 8037c54:	46bd      	mov	sp, r7
 8037c56:	bd80      	pop	{r7, pc}
 8037c58:	24002d94 	.word	0x24002d94
 8037c5c:	24002d70 	.word	0x24002d70
 8037c60:	24002d24 	.word	0x24002d24
 8037c64:	24002d28 	.word	0x24002d28
 8037c68:	24002d84 	.word	0x24002d84
 8037c6c:	24002d8c 	.word	0x24002d8c
 8037c70:	24002d74 	.word	0x24002d74
 8037c74:	24002c70 	.word	0x24002c70
 8037c78:	24002c6c 	.word	0x24002c6c
 8037c7c:	24002d80 	.word	0x24002d80
 8037c80:	24002d7c 	.word	0x24002d7c

08037c84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8037c84:	b480      	push	{r7}
 8037c86:	b087      	sub	sp, #28
 8037c88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8037c8a:	4b27      	ldr	r3, [pc, #156]	; (8037d28 <vTaskSwitchContext+0xa4>)
 8037c8c:	681b      	ldr	r3, [r3, #0]
 8037c8e:	2b00      	cmp	r3, #0
 8037c90:	d003      	beq.n	8037c9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8037c92:	4b26      	ldr	r3, [pc, #152]	; (8037d2c <vTaskSwitchContext+0xa8>)
 8037c94:	2201      	movs	r2, #1
 8037c96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8037c98:	e03f      	b.n	8037d1a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8037c9a:	4b24      	ldr	r3, [pc, #144]	; (8037d2c <vTaskSwitchContext+0xa8>)
 8037c9c:	2200      	movs	r2, #0
 8037c9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8037ca0:	4b23      	ldr	r3, [pc, #140]	; (8037d30 <vTaskSwitchContext+0xac>)
 8037ca2:	681b      	ldr	r3, [r3, #0]
 8037ca4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8037ca6:	68fb      	ldr	r3, [r7, #12]
 8037ca8:	fab3 f383 	clz	r3, r3
 8037cac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8037cae:	7afb      	ldrb	r3, [r7, #11]
 8037cb0:	f1c3 031f 	rsb	r3, r3, #31
 8037cb4:	617b      	str	r3, [r7, #20]
 8037cb6:	491f      	ldr	r1, [pc, #124]	; (8037d34 <vTaskSwitchContext+0xb0>)
 8037cb8:	697a      	ldr	r2, [r7, #20]
 8037cba:	4613      	mov	r3, r2
 8037cbc:	009b      	lsls	r3, r3, #2
 8037cbe:	4413      	add	r3, r2
 8037cc0:	009b      	lsls	r3, r3, #2
 8037cc2:	440b      	add	r3, r1
 8037cc4:	681b      	ldr	r3, [r3, #0]
 8037cc6:	2b00      	cmp	r3, #0
 8037cc8:	d10a      	bne.n	8037ce0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8037cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037cce:	f383 8811 	msr	BASEPRI, r3
 8037cd2:	f3bf 8f6f 	isb	sy
 8037cd6:	f3bf 8f4f 	dsb	sy
 8037cda:	607b      	str	r3, [r7, #4]
}
 8037cdc:	bf00      	nop
 8037cde:	e7fe      	b.n	8037cde <vTaskSwitchContext+0x5a>
 8037ce0:	697a      	ldr	r2, [r7, #20]
 8037ce2:	4613      	mov	r3, r2
 8037ce4:	009b      	lsls	r3, r3, #2
 8037ce6:	4413      	add	r3, r2
 8037ce8:	009b      	lsls	r3, r3, #2
 8037cea:	4a12      	ldr	r2, [pc, #72]	; (8037d34 <vTaskSwitchContext+0xb0>)
 8037cec:	4413      	add	r3, r2
 8037cee:	613b      	str	r3, [r7, #16]
 8037cf0:	693b      	ldr	r3, [r7, #16]
 8037cf2:	685b      	ldr	r3, [r3, #4]
 8037cf4:	685a      	ldr	r2, [r3, #4]
 8037cf6:	693b      	ldr	r3, [r7, #16]
 8037cf8:	605a      	str	r2, [r3, #4]
 8037cfa:	693b      	ldr	r3, [r7, #16]
 8037cfc:	685a      	ldr	r2, [r3, #4]
 8037cfe:	693b      	ldr	r3, [r7, #16]
 8037d00:	3308      	adds	r3, #8
 8037d02:	429a      	cmp	r2, r3
 8037d04:	d104      	bne.n	8037d10 <vTaskSwitchContext+0x8c>
 8037d06:	693b      	ldr	r3, [r7, #16]
 8037d08:	685b      	ldr	r3, [r3, #4]
 8037d0a:	685a      	ldr	r2, [r3, #4]
 8037d0c:	693b      	ldr	r3, [r7, #16]
 8037d0e:	605a      	str	r2, [r3, #4]
 8037d10:	693b      	ldr	r3, [r7, #16]
 8037d12:	685b      	ldr	r3, [r3, #4]
 8037d14:	68db      	ldr	r3, [r3, #12]
 8037d16:	4a08      	ldr	r2, [pc, #32]	; (8037d38 <vTaskSwitchContext+0xb4>)
 8037d18:	6013      	str	r3, [r2, #0]
}
 8037d1a:	bf00      	nop
 8037d1c:	371c      	adds	r7, #28
 8037d1e:	46bd      	mov	sp, r7
 8037d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037d24:	4770      	bx	lr
 8037d26:	bf00      	nop
 8037d28:	24002d94 	.word	0x24002d94
 8037d2c:	24002d80 	.word	0x24002d80
 8037d30:	24002d74 	.word	0x24002d74
 8037d34:	24002c70 	.word	0x24002c70
 8037d38:	24002c6c 	.word	0x24002c6c

08037d3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8037d3c:	b580      	push	{r7, lr}
 8037d3e:	b084      	sub	sp, #16
 8037d40:	af00      	add	r7, sp, #0
 8037d42:	6078      	str	r0, [r7, #4]
 8037d44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8037d46:	687b      	ldr	r3, [r7, #4]
 8037d48:	2b00      	cmp	r3, #0
 8037d4a:	d10a      	bne.n	8037d62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8037d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037d50:	f383 8811 	msr	BASEPRI, r3
 8037d54:	f3bf 8f6f 	isb	sy
 8037d58:	f3bf 8f4f 	dsb	sy
 8037d5c:	60fb      	str	r3, [r7, #12]
}
 8037d5e:	bf00      	nop
 8037d60:	e7fe      	b.n	8037d60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8037d62:	4b07      	ldr	r3, [pc, #28]	; (8037d80 <vTaskPlaceOnEventList+0x44>)
 8037d64:	681b      	ldr	r3, [r3, #0]
 8037d66:	3318      	adds	r3, #24
 8037d68:	4619      	mov	r1, r3
 8037d6a:	6878      	ldr	r0, [r7, #4]
 8037d6c:	f7fe fb9b 	bl	80364a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8037d70:	2101      	movs	r1, #1
 8037d72:	6838      	ldr	r0, [r7, #0]
 8037d74:	f000 fc84 	bl	8038680 <prvAddCurrentTaskToDelayedList>
}
 8037d78:	bf00      	nop
 8037d7a:	3710      	adds	r7, #16
 8037d7c:	46bd      	mov	sp, r7
 8037d7e:	bd80      	pop	{r7, pc}
 8037d80:	24002c6c 	.word	0x24002c6c

08037d84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8037d84:	b580      	push	{r7, lr}
 8037d86:	b086      	sub	sp, #24
 8037d88:	af00      	add	r7, sp, #0
 8037d8a:	60f8      	str	r0, [r7, #12]
 8037d8c:	60b9      	str	r1, [r7, #8]
 8037d8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8037d90:	68fb      	ldr	r3, [r7, #12]
 8037d92:	2b00      	cmp	r3, #0
 8037d94:	d10a      	bne.n	8037dac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8037d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037d9a:	f383 8811 	msr	BASEPRI, r3
 8037d9e:	f3bf 8f6f 	isb	sy
 8037da2:	f3bf 8f4f 	dsb	sy
 8037da6:	617b      	str	r3, [r7, #20]
}
 8037da8:	bf00      	nop
 8037daa:	e7fe      	b.n	8037daa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8037dac:	4b0a      	ldr	r3, [pc, #40]	; (8037dd8 <vTaskPlaceOnEventListRestricted+0x54>)
 8037dae:	681b      	ldr	r3, [r3, #0]
 8037db0:	3318      	adds	r3, #24
 8037db2:	4619      	mov	r1, r3
 8037db4:	68f8      	ldr	r0, [r7, #12]
 8037db6:	f7fe fb52 	bl	803645e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8037dba:	687b      	ldr	r3, [r7, #4]
 8037dbc:	2b00      	cmp	r3, #0
 8037dbe:	d002      	beq.n	8037dc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8037dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8037dc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8037dc6:	6879      	ldr	r1, [r7, #4]
 8037dc8:	68b8      	ldr	r0, [r7, #8]
 8037dca:	f000 fc59 	bl	8038680 <prvAddCurrentTaskToDelayedList>
	}
 8037dce:	bf00      	nop
 8037dd0:	3718      	adds	r7, #24
 8037dd2:	46bd      	mov	sp, r7
 8037dd4:	bd80      	pop	{r7, pc}
 8037dd6:	bf00      	nop
 8037dd8:	24002c6c 	.word	0x24002c6c

08037ddc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8037ddc:	b580      	push	{r7, lr}
 8037dde:	b086      	sub	sp, #24
 8037de0:	af00      	add	r7, sp, #0
 8037de2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8037de4:	687b      	ldr	r3, [r7, #4]
 8037de6:	68db      	ldr	r3, [r3, #12]
 8037de8:	68db      	ldr	r3, [r3, #12]
 8037dea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8037dec:	693b      	ldr	r3, [r7, #16]
 8037dee:	2b00      	cmp	r3, #0
 8037df0:	d10a      	bne.n	8037e08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8037df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037df6:	f383 8811 	msr	BASEPRI, r3
 8037dfa:	f3bf 8f6f 	isb	sy
 8037dfe:	f3bf 8f4f 	dsb	sy
 8037e02:	60fb      	str	r3, [r7, #12]
}
 8037e04:	bf00      	nop
 8037e06:	e7fe      	b.n	8037e06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8037e08:	693b      	ldr	r3, [r7, #16]
 8037e0a:	3318      	adds	r3, #24
 8037e0c:	4618      	mov	r0, r3
 8037e0e:	f7fe fb83 	bl	8036518 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8037e12:	4b1d      	ldr	r3, [pc, #116]	; (8037e88 <xTaskRemoveFromEventList+0xac>)
 8037e14:	681b      	ldr	r3, [r3, #0]
 8037e16:	2b00      	cmp	r3, #0
 8037e18:	d11c      	bne.n	8037e54 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8037e1a:	693b      	ldr	r3, [r7, #16]
 8037e1c:	3304      	adds	r3, #4
 8037e1e:	4618      	mov	r0, r3
 8037e20:	f7fe fb7a 	bl	8036518 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8037e24:	693b      	ldr	r3, [r7, #16]
 8037e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037e28:	2201      	movs	r2, #1
 8037e2a:	409a      	lsls	r2, r3
 8037e2c:	4b17      	ldr	r3, [pc, #92]	; (8037e8c <xTaskRemoveFromEventList+0xb0>)
 8037e2e:	681b      	ldr	r3, [r3, #0]
 8037e30:	4313      	orrs	r3, r2
 8037e32:	4a16      	ldr	r2, [pc, #88]	; (8037e8c <xTaskRemoveFromEventList+0xb0>)
 8037e34:	6013      	str	r3, [r2, #0]
 8037e36:	693b      	ldr	r3, [r7, #16]
 8037e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037e3a:	4613      	mov	r3, r2
 8037e3c:	009b      	lsls	r3, r3, #2
 8037e3e:	4413      	add	r3, r2
 8037e40:	009b      	lsls	r3, r3, #2
 8037e42:	4a13      	ldr	r2, [pc, #76]	; (8037e90 <xTaskRemoveFromEventList+0xb4>)
 8037e44:	441a      	add	r2, r3
 8037e46:	693b      	ldr	r3, [r7, #16]
 8037e48:	3304      	adds	r3, #4
 8037e4a:	4619      	mov	r1, r3
 8037e4c:	4610      	mov	r0, r2
 8037e4e:	f7fe fb06 	bl	803645e <vListInsertEnd>
 8037e52:	e005      	b.n	8037e60 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8037e54:	693b      	ldr	r3, [r7, #16]
 8037e56:	3318      	adds	r3, #24
 8037e58:	4619      	mov	r1, r3
 8037e5a:	480e      	ldr	r0, [pc, #56]	; (8037e94 <xTaskRemoveFromEventList+0xb8>)
 8037e5c:	f7fe faff 	bl	803645e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8037e60:	693b      	ldr	r3, [r7, #16]
 8037e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037e64:	4b0c      	ldr	r3, [pc, #48]	; (8037e98 <xTaskRemoveFromEventList+0xbc>)
 8037e66:	681b      	ldr	r3, [r3, #0]
 8037e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037e6a:	429a      	cmp	r2, r3
 8037e6c:	d905      	bls.n	8037e7a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8037e6e:	2301      	movs	r3, #1
 8037e70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8037e72:	4b0a      	ldr	r3, [pc, #40]	; (8037e9c <xTaskRemoveFromEventList+0xc0>)
 8037e74:	2201      	movs	r2, #1
 8037e76:	601a      	str	r2, [r3, #0]
 8037e78:	e001      	b.n	8037e7e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8037e7a:	2300      	movs	r3, #0
 8037e7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8037e7e:	697b      	ldr	r3, [r7, #20]
}
 8037e80:	4618      	mov	r0, r3
 8037e82:	3718      	adds	r7, #24
 8037e84:	46bd      	mov	sp, r7
 8037e86:	bd80      	pop	{r7, pc}
 8037e88:	24002d94 	.word	0x24002d94
 8037e8c:	24002d74 	.word	0x24002d74
 8037e90:	24002c70 	.word	0x24002c70
 8037e94:	24002d2c 	.word	0x24002d2c
 8037e98:	24002c6c 	.word	0x24002c6c
 8037e9c:	24002d80 	.word	0x24002d80

08037ea0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8037ea0:	b480      	push	{r7}
 8037ea2:	b083      	sub	sp, #12
 8037ea4:	af00      	add	r7, sp, #0
 8037ea6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8037ea8:	4b06      	ldr	r3, [pc, #24]	; (8037ec4 <vTaskInternalSetTimeOutState+0x24>)
 8037eaa:	681a      	ldr	r2, [r3, #0]
 8037eac:	687b      	ldr	r3, [r7, #4]
 8037eae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8037eb0:	4b05      	ldr	r3, [pc, #20]	; (8037ec8 <vTaskInternalSetTimeOutState+0x28>)
 8037eb2:	681a      	ldr	r2, [r3, #0]
 8037eb4:	687b      	ldr	r3, [r7, #4]
 8037eb6:	605a      	str	r2, [r3, #4]
}
 8037eb8:	bf00      	nop
 8037eba:	370c      	adds	r7, #12
 8037ebc:	46bd      	mov	sp, r7
 8037ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037ec2:	4770      	bx	lr
 8037ec4:	24002d84 	.word	0x24002d84
 8037ec8:	24002d70 	.word	0x24002d70

08037ecc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8037ecc:	b580      	push	{r7, lr}
 8037ece:	b088      	sub	sp, #32
 8037ed0:	af00      	add	r7, sp, #0
 8037ed2:	6078      	str	r0, [r7, #4]
 8037ed4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8037ed6:	687b      	ldr	r3, [r7, #4]
 8037ed8:	2b00      	cmp	r3, #0
 8037eda:	d10a      	bne.n	8037ef2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8037edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037ee0:	f383 8811 	msr	BASEPRI, r3
 8037ee4:	f3bf 8f6f 	isb	sy
 8037ee8:	f3bf 8f4f 	dsb	sy
 8037eec:	613b      	str	r3, [r7, #16]
}
 8037eee:	bf00      	nop
 8037ef0:	e7fe      	b.n	8037ef0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8037ef2:	683b      	ldr	r3, [r7, #0]
 8037ef4:	2b00      	cmp	r3, #0
 8037ef6:	d10a      	bne.n	8037f0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8037ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8037efc:	f383 8811 	msr	BASEPRI, r3
 8037f00:	f3bf 8f6f 	isb	sy
 8037f04:	f3bf 8f4f 	dsb	sy
 8037f08:	60fb      	str	r3, [r7, #12]
}
 8037f0a:	bf00      	nop
 8037f0c:	e7fe      	b.n	8037f0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8037f0e:	f001 f931 	bl	8039174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8037f12:	4b1d      	ldr	r3, [pc, #116]	; (8037f88 <xTaskCheckForTimeOut+0xbc>)
 8037f14:	681b      	ldr	r3, [r3, #0]
 8037f16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8037f18:	687b      	ldr	r3, [r7, #4]
 8037f1a:	685b      	ldr	r3, [r3, #4]
 8037f1c:	69ba      	ldr	r2, [r7, #24]
 8037f1e:	1ad3      	subs	r3, r2, r3
 8037f20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8037f22:	683b      	ldr	r3, [r7, #0]
 8037f24:	681b      	ldr	r3, [r3, #0]
 8037f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8037f2a:	d102      	bne.n	8037f32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8037f2c:	2300      	movs	r3, #0
 8037f2e:	61fb      	str	r3, [r7, #28]
 8037f30:	e023      	b.n	8037f7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8037f32:	687b      	ldr	r3, [r7, #4]
 8037f34:	681a      	ldr	r2, [r3, #0]
 8037f36:	4b15      	ldr	r3, [pc, #84]	; (8037f8c <xTaskCheckForTimeOut+0xc0>)
 8037f38:	681b      	ldr	r3, [r3, #0]
 8037f3a:	429a      	cmp	r2, r3
 8037f3c:	d007      	beq.n	8037f4e <xTaskCheckForTimeOut+0x82>
 8037f3e:	687b      	ldr	r3, [r7, #4]
 8037f40:	685b      	ldr	r3, [r3, #4]
 8037f42:	69ba      	ldr	r2, [r7, #24]
 8037f44:	429a      	cmp	r2, r3
 8037f46:	d302      	bcc.n	8037f4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8037f48:	2301      	movs	r3, #1
 8037f4a:	61fb      	str	r3, [r7, #28]
 8037f4c:	e015      	b.n	8037f7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8037f4e:	683b      	ldr	r3, [r7, #0]
 8037f50:	681b      	ldr	r3, [r3, #0]
 8037f52:	697a      	ldr	r2, [r7, #20]
 8037f54:	429a      	cmp	r2, r3
 8037f56:	d20b      	bcs.n	8037f70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8037f58:	683b      	ldr	r3, [r7, #0]
 8037f5a:	681a      	ldr	r2, [r3, #0]
 8037f5c:	697b      	ldr	r3, [r7, #20]
 8037f5e:	1ad2      	subs	r2, r2, r3
 8037f60:	683b      	ldr	r3, [r7, #0]
 8037f62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8037f64:	6878      	ldr	r0, [r7, #4]
 8037f66:	f7ff ff9b 	bl	8037ea0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8037f6a:	2300      	movs	r3, #0
 8037f6c:	61fb      	str	r3, [r7, #28]
 8037f6e:	e004      	b.n	8037f7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8037f70:	683b      	ldr	r3, [r7, #0]
 8037f72:	2200      	movs	r2, #0
 8037f74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8037f76:	2301      	movs	r3, #1
 8037f78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8037f7a:	f001 f92b 	bl	80391d4 <vPortExitCritical>

	return xReturn;
 8037f7e:	69fb      	ldr	r3, [r7, #28]
}
 8037f80:	4618      	mov	r0, r3
 8037f82:	3720      	adds	r7, #32
 8037f84:	46bd      	mov	sp, r7
 8037f86:	bd80      	pop	{r7, pc}
 8037f88:	24002d70 	.word	0x24002d70
 8037f8c:	24002d84 	.word	0x24002d84

08037f90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8037f90:	b480      	push	{r7}
 8037f92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8037f94:	4b03      	ldr	r3, [pc, #12]	; (8037fa4 <vTaskMissedYield+0x14>)
 8037f96:	2201      	movs	r2, #1
 8037f98:	601a      	str	r2, [r3, #0]
}
 8037f9a:	bf00      	nop
 8037f9c:	46bd      	mov	sp, r7
 8037f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037fa2:	4770      	bx	lr
 8037fa4:	24002d80 	.word	0x24002d80

08037fa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8037fa8:	b580      	push	{r7, lr}
 8037faa:	b082      	sub	sp, #8
 8037fac:	af00      	add	r7, sp, #0
 8037fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8037fb0:	f000 f852 	bl	8038058 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8037fb4:	4b06      	ldr	r3, [pc, #24]	; (8037fd0 <prvIdleTask+0x28>)
 8037fb6:	681b      	ldr	r3, [r3, #0]
 8037fb8:	2b01      	cmp	r3, #1
 8037fba:	d9f9      	bls.n	8037fb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8037fbc:	4b05      	ldr	r3, [pc, #20]	; (8037fd4 <prvIdleTask+0x2c>)
 8037fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8037fc2:	601a      	str	r2, [r3, #0]
 8037fc4:	f3bf 8f4f 	dsb	sy
 8037fc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8037fcc:	e7f0      	b.n	8037fb0 <prvIdleTask+0x8>
 8037fce:	bf00      	nop
 8037fd0:	24002c70 	.word	0x24002c70
 8037fd4:	e000ed04 	.word	0xe000ed04

08037fd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8037fd8:	b580      	push	{r7, lr}
 8037fda:	b082      	sub	sp, #8
 8037fdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8037fde:	2300      	movs	r3, #0
 8037fe0:	607b      	str	r3, [r7, #4]
 8037fe2:	e00c      	b.n	8037ffe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8037fe4:	687a      	ldr	r2, [r7, #4]
 8037fe6:	4613      	mov	r3, r2
 8037fe8:	009b      	lsls	r3, r3, #2
 8037fea:	4413      	add	r3, r2
 8037fec:	009b      	lsls	r3, r3, #2
 8037fee:	4a12      	ldr	r2, [pc, #72]	; (8038038 <prvInitialiseTaskLists+0x60>)
 8037ff0:	4413      	add	r3, r2
 8037ff2:	4618      	mov	r0, r3
 8037ff4:	f7fe fa06 	bl	8036404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8037ff8:	687b      	ldr	r3, [r7, #4]
 8037ffa:	3301      	adds	r3, #1
 8037ffc:	607b      	str	r3, [r7, #4]
 8037ffe:	687b      	ldr	r3, [r7, #4]
 8038000:	2b06      	cmp	r3, #6
 8038002:	d9ef      	bls.n	8037fe4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8038004:	480d      	ldr	r0, [pc, #52]	; (803803c <prvInitialiseTaskLists+0x64>)
 8038006:	f7fe f9fd 	bl	8036404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 803800a:	480d      	ldr	r0, [pc, #52]	; (8038040 <prvInitialiseTaskLists+0x68>)
 803800c:	f7fe f9fa 	bl	8036404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8038010:	480c      	ldr	r0, [pc, #48]	; (8038044 <prvInitialiseTaskLists+0x6c>)
 8038012:	f7fe f9f7 	bl	8036404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8038016:	480c      	ldr	r0, [pc, #48]	; (8038048 <prvInitialiseTaskLists+0x70>)
 8038018:	f7fe f9f4 	bl	8036404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 803801c:	480b      	ldr	r0, [pc, #44]	; (803804c <prvInitialiseTaskLists+0x74>)
 803801e:	f7fe f9f1 	bl	8036404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8038022:	4b0b      	ldr	r3, [pc, #44]	; (8038050 <prvInitialiseTaskLists+0x78>)
 8038024:	4a05      	ldr	r2, [pc, #20]	; (803803c <prvInitialiseTaskLists+0x64>)
 8038026:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8038028:	4b0a      	ldr	r3, [pc, #40]	; (8038054 <prvInitialiseTaskLists+0x7c>)
 803802a:	4a05      	ldr	r2, [pc, #20]	; (8038040 <prvInitialiseTaskLists+0x68>)
 803802c:	601a      	str	r2, [r3, #0]
}
 803802e:	bf00      	nop
 8038030:	3708      	adds	r7, #8
 8038032:	46bd      	mov	sp, r7
 8038034:	bd80      	pop	{r7, pc}
 8038036:	bf00      	nop
 8038038:	24002c70 	.word	0x24002c70
 803803c:	24002cfc 	.word	0x24002cfc
 8038040:	24002d10 	.word	0x24002d10
 8038044:	24002d2c 	.word	0x24002d2c
 8038048:	24002d40 	.word	0x24002d40
 803804c:	24002d58 	.word	0x24002d58
 8038050:	24002d24 	.word	0x24002d24
 8038054:	24002d28 	.word	0x24002d28

08038058 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8038058:	b580      	push	{r7, lr}
 803805a:	b082      	sub	sp, #8
 803805c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 803805e:	e019      	b.n	8038094 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8038060:	f001 f888 	bl	8039174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8038064:	4b10      	ldr	r3, [pc, #64]	; (80380a8 <prvCheckTasksWaitingTermination+0x50>)
 8038066:	68db      	ldr	r3, [r3, #12]
 8038068:	68db      	ldr	r3, [r3, #12]
 803806a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 803806c:	687b      	ldr	r3, [r7, #4]
 803806e:	3304      	adds	r3, #4
 8038070:	4618      	mov	r0, r3
 8038072:	f7fe fa51 	bl	8036518 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8038076:	4b0d      	ldr	r3, [pc, #52]	; (80380ac <prvCheckTasksWaitingTermination+0x54>)
 8038078:	681b      	ldr	r3, [r3, #0]
 803807a:	3b01      	subs	r3, #1
 803807c:	4a0b      	ldr	r2, [pc, #44]	; (80380ac <prvCheckTasksWaitingTermination+0x54>)
 803807e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8038080:	4b0b      	ldr	r3, [pc, #44]	; (80380b0 <prvCheckTasksWaitingTermination+0x58>)
 8038082:	681b      	ldr	r3, [r3, #0]
 8038084:	3b01      	subs	r3, #1
 8038086:	4a0a      	ldr	r2, [pc, #40]	; (80380b0 <prvCheckTasksWaitingTermination+0x58>)
 8038088:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 803808a:	f001 f8a3 	bl	80391d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 803808e:	6878      	ldr	r0, [r7, #4]
 8038090:	f000 f810 	bl	80380b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8038094:	4b06      	ldr	r3, [pc, #24]	; (80380b0 <prvCheckTasksWaitingTermination+0x58>)
 8038096:	681b      	ldr	r3, [r3, #0]
 8038098:	2b00      	cmp	r3, #0
 803809a:	d1e1      	bne.n	8038060 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 803809c:	bf00      	nop
 803809e:	bf00      	nop
 80380a0:	3708      	adds	r7, #8
 80380a2:	46bd      	mov	sp, r7
 80380a4:	bd80      	pop	{r7, pc}
 80380a6:	bf00      	nop
 80380a8:	24002d40 	.word	0x24002d40
 80380ac:	24002d6c 	.word	0x24002d6c
 80380b0:	24002d54 	.word	0x24002d54

080380b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80380b4:	b580      	push	{r7, lr}
 80380b6:	b084      	sub	sp, #16
 80380b8:	af00      	add	r7, sp, #0
 80380ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80380bc:	687b      	ldr	r3, [r7, #4]
 80380be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80380c2:	2b00      	cmp	r3, #0
 80380c4:	d108      	bne.n	80380d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80380c6:	687b      	ldr	r3, [r7, #4]
 80380c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80380ca:	4618      	mov	r0, r3
 80380cc:	f001 fa40 	bl	8039550 <vPortFree>
				vPortFree( pxTCB );
 80380d0:	6878      	ldr	r0, [r7, #4]
 80380d2:	f001 fa3d 	bl	8039550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80380d6:	e018      	b.n	803810a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80380d8:	687b      	ldr	r3, [r7, #4]
 80380da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80380de:	2b01      	cmp	r3, #1
 80380e0:	d103      	bne.n	80380ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80380e2:	6878      	ldr	r0, [r7, #4]
 80380e4:	f001 fa34 	bl	8039550 <vPortFree>
	}
 80380e8:	e00f      	b.n	803810a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80380ea:	687b      	ldr	r3, [r7, #4]
 80380ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80380f0:	2b02      	cmp	r3, #2
 80380f2:	d00a      	beq.n	803810a <prvDeleteTCB+0x56>
	__asm volatile
 80380f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80380f8:	f383 8811 	msr	BASEPRI, r3
 80380fc:	f3bf 8f6f 	isb	sy
 8038100:	f3bf 8f4f 	dsb	sy
 8038104:	60fb      	str	r3, [r7, #12]
}
 8038106:	bf00      	nop
 8038108:	e7fe      	b.n	8038108 <prvDeleteTCB+0x54>
	}
 803810a:	bf00      	nop
 803810c:	3710      	adds	r7, #16
 803810e:	46bd      	mov	sp, r7
 8038110:	bd80      	pop	{r7, pc}
	...

08038114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8038114:	b480      	push	{r7}
 8038116:	b083      	sub	sp, #12
 8038118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 803811a:	4b0c      	ldr	r3, [pc, #48]	; (803814c <prvResetNextTaskUnblockTime+0x38>)
 803811c:	681b      	ldr	r3, [r3, #0]
 803811e:	681b      	ldr	r3, [r3, #0]
 8038120:	2b00      	cmp	r3, #0
 8038122:	d104      	bne.n	803812e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8038124:	4b0a      	ldr	r3, [pc, #40]	; (8038150 <prvResetNextTaskUnblockTime+0x3c>)
 8038126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803812a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 803812c:	e008      	b.n	8038140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803812e:	4b07      	ldr	r3, [pc, #28]	; (803814c <prvResetNextTaskUnblockTime+0x38>)
 8038130:	681b      	ldr	r3, [r3, #0]
 8038132:	68db      	ldr	r3, [r3, #12]
 8038134:	68db      	ldr	r3, [r3, #12]
 8038136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8038138:	687b      	ldr	r3, [r7, #4]
 803813a:	685b      	ldr	r3, [r3, #4]
 803813c:	4a04      	ldr	r2, [pc, #16]	; (8038150 <prvResetNextTaskUnblockTime+0x3c>)
 803813e:	6013      	str	r3, [r2, #0]
}
 8038140:	bf00      	nop
 8038142:	370c      	adds	r7, #12
 8038144:	46bd      	mov	sp, r7
 8038146:	f85d 7b04 	ldr.w	r7, [sp], #4
 803814a:	4770      	bx	lr
 803814c:	24002d24 	.word	0x24002d24
 8038150:	24002d8c 	.word	0x24002d8c

08038154 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8038154:	b480      	push	{r7}
 8038156:	b083      	sub	sp, #12
 8038158:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 803815a:	4b0b      	ldr	r3, [pc, #44]	; (8038188 <xTaskGetSchedulerState+0x34>)
 803815c:	681b      	ldr	r3, [r3, #0]
 803815e:	2b00      	cmp	r3, #0
 8038160:	d102      	bne.n	8038168 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8038162:	2301      	movs	r3, #1
 8038164:	607b      	str	r3, [r7, #4]
 8038166:	e008      	b.n	803817a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8038168:	4b08      	ldr	r3, [pc, #32]	; (803818c <xTaskGetSchedulerState+0x38>)
 803816a:	681b      	ldr	r3, [r3, #0]
 803816c:	2b00      	cmp	r3, #0
 803816e:	d102      	bne.n	8038176 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8038170:	2302      	movs	r3, #2
 8038172:	607b      	str	r3, [r7, #4]
 8038174:	e001      	b.n	803817a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8038176:	2300      	movs	r3, #0
 8038178:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 803817a:	687b      	ldr	r3, [r7, #4]
	}
 803817c:	4618      	mov	r0, r3
 803817e:	370c      	adds	r7, #12
 8038180:	46bd      	mov	sp, r7
 8038182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038186:	4770      	bx	lr
 8038188:	24002d78 	.word	0x24002d78
 803818c:	24002d94 	.word	0x24002d94

08038190 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8038190:	b580      	push	{r7, lr}
 8038192:	b084      	sub	sp, #16
 8038194:	af00      	add	r7, sp, #0
 8038196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8038198:	687b      	ldr	r3, [r7, #4]
 803819a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 803819c:	2300      	movs	r3, #0
 803819e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80381a0:	687b      	ldr	r3, [r7, #4]
 80381a2:	2b00      	cmp	r3, #0
 80381a4:	d05e      	beq.n	8038264 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80381a6:	68bb      	ldr	r3, [r7, #8]
 80381a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80381aa:	4b31      	ldr	r3, [pc, #196]	; (8038270 <xTaskPriorityInherit+0xe0>)
 80381ac:	681b      	ldr	r3, [r3, #0]
 80381ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80381b0:	429a      	cmp	r2, r3
 80381b2:	d24e      	bcs.n	8038252 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80381b4:	68bb      	ldr	r3, [r7, #8]
 80381b6:	699b      	ldr	r3, [r3, #24]
 80381b8:	2b00      	cmp	r3, #0
 80381ba:	db06      	blt.n	80381ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80381bc:	4b2c      	ldr	r3, [pc, #176]	; (8038270 <xTaskPriorityInherit+0xe0>)
 80381be:	681b      	ldr	r3, [r3, #0]
 80381c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80381c2:	f1c3 0207 	rsb	r2, r3, #7
 80381c6:	68bb      	ldr	r3, [r7, #8]
 80381c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80381ca:	68bb      	ldr	r3, [r7, #8]
 80381cc:	6959      	ldr	r1, [r3, #20]
 80381ce:	68bb      	ldr	r3, [r7, #8]
 80381d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80381d2:	4613      	mov	r3, r2
 80381d4:	009b      	lsls	r3, r3, #2
 80381d6:	4413      	add	r3, r2
 80381d8:	009b      	lsls	r3, r3, #2
 80381da:	4a26      	ldr	r2, [pc, #152]	; (8038274 <xTaskPriorityInherit+0xe4>)
 80381dc:	4413      	add	r3, r2
 80381de:	4299      	cmp	r1, r3
 80381e0:	d12f      	bne.n	8038242 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80381e2:	68bb      	ldr	r3, [r7, #8]
 80381e4:	3304      	adds	r3, #4
 80381e6:	4618      	mov	r0, r3
 80381e8:	f7fe f996 	bl	8036518 <uxListRemove>
 80381ec:	4603      	mov	r3, r0
 80381ee:	2b00      	cmp	r3, #0
 80381f0:	d10a      	bne.n	8038208 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80381f2:	68bb      	ldr	r3, [r7, #8]
 80381f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80381f6:	2201      	movs	r2, #1
 80381f8:	fa02 f303 	lsl.w	r3, r2, r3
 80381fc:	43da      	mvns	r2, r3
 80381fe:	4b1e      	ldr	r3, [pc, #120]	; (8038278 <xTaskPriorityInherit+0xe8>)
 8038200:	681b      	ldr	r3, [r3, #0]
 8038202:	4013      	ands	r3, r2
 8038204:	4a1c      	ldr	r2, [pc, #112]	; (8038278 <xTaskPriorityInherit+0xe8>)
 8038206:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8038208:	4b19      	ldr	r3, [pc, #100]	; (8038270 <xTaskPriorityInherit+0xe0>)
 803820a:	681b      	ldr	r3, [r3, #0]
 803820c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803820e:	68bb      	ldr	r3, [r7, #8]
 8038210:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8038212:	68bb      	ldr	r3, [r7, #8]
 8038214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038216:	2201      	movs	r2, #1
 8038218:	409a      	lsls	r2, r3
 803821a:	4b17      	ldr	r3, [pc, #92]	; (8038278 <xTaskPriorityInherit+0xe8>)
 803821c:	681b      	ldr	r3, [r3, #0]
 803821e:	4313      	orrs	r3, r2
 8038220:	4a15      	ldr	r2, [pc, #84]	; (8038278 <xTaskPriorityInherit+0xe8>)
 8038222:	6013      	str	r3, [r2, #0]
 8038224:	68bb      	ldr	r3, [r7, #8]
 8038226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8038228:	4613      	mov	r3, r2
 803822a:	009b      	lsls	r3, r3, #2
 803822c:	4413      	add	r3, r2
 803822e:	009b      	lsls	r3, r3, #2
 8038230:	4a10      	ldr	r2, [pc, #64]	; (8038274 <xTaskPriorityInherit+0xe4>)
 8038232:	441a      	add	r2, r3
 8038234:	68bb      	ldr	r3, [r7, #8]
 8038236:	3304      	adds	r3, #4
 8038238:	4619      	mov	r1, r3
 803823a:	4610      	mov	r0, r2
 803823c:	f7fe f90f 	bl	803645e <vListInsertEnd>
 8038240:	e004      	b.n	803824c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8038242:	4b0b      	ldr	r3, [pc, #44]	; (8038270 <xTaskPriorityInherit+0xe0>)
 8038244:	681b      	ldr	r3, [r3, #0]
 8038246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8038248:	68bb      	ldr	r3, [r7, #8]
 803824a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 803824c:	2301      	movs	r3, #1
 803824e:	60fb      	str	r3, [r7, #12]
 8038250:	e008      	b.n	8038264 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8038252:	68bb      	ldr	r3, [r7, #8]
 8038254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8038256:	4b06      	ldr	r3, [pc, #24]	; (8038270 <xTaskPriorityInherit+0xe0>)
 8038258:	681b      	ldr	r3, [r3, #0]
 803825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803825c:	429a      	cmp	r2, r3
 803825e:	d201      	bcs.n	8038264 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8038260:	2301      	movs	r3, #1
 8038262:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8038264:	68fb      	ldr	r3, [r7, #12]
	}
 8038266:	4618      	mov	r0, r3
 8038268:	3710      	adds	r7, #16
 803826a:	46bd      	mov	sp, r7
 803826c:	bd80      	pop	{r7, pc}
 803826e:	bf00      	nop
 8038270:	24002c6c 	.word	0x24002c6c
 8038274:	24002c70 	.word	0x24002c70
 8038278:	24002d74 	.word	0x24002d74

0803827c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 803827c:	b580      	push	{r7, lr}
 803827e:	b086      	sub	sp, #24
 8038280:	af00      	add	r7, sp, #0
 8038282:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8038284:	687b      	ldr	r3, [r7, #4]
 8038286:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8038288:	2300      	movs	r3, #0
 803828a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 803828c:	687b      	ldr	r3, [r7, #4]
 803828e:	2b00      	cmp	r3, #0
 8038290:	d06e      	beq.n	8038370 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8038292:	4b3a      	ldr	r3, [pc, #232]	; (803837c <xTaskPriorityDisinherit+0x100>)
 8038294:	681b      	ldr	r3, [r3, #0]
 8038296:	693a      	ldr	r2, [r7, #16]
 8038298:	429a      	cmp	r2, r3
 803829a:	d00a      	beq.n	80382b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 803829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80382a0:	f383 8811 	msr	BASEPRI, r3
 80382a4:	f3bf 8f6f 	isb	sy
 80382a8:	f3bf 8f4f 	dsb	sy
 80382ac:	60fb      	str	r3, [r7, #12]
}
 80382ae:	bf00      	nop
 80382b0:	e7fe      	b.n	80382b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80382b2:	693b      	ldr	r3, [r7, #16]
 80382b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80382b6:	2b00      	cmp	r3, #0
 80382b8:	d10a      	bne.n	80382d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80382ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80382be:	f383 8811 	msr	BASEPRI, r3
 80382c2:	f3bf 8f6f 	isb	sy
 80382c6:	f3bf 8f4f 	dsb	sy
 80382ca:	60bb      	str	r3, [r7, #8]
}
 80382cc:	bf00      	nop
 80382ce:	e7fe      	b.n	80382ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80382d0:	693b      	ldr	r3, [r7, #16]
 80382d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80382d4:	1e5a      	subs	r2, r3, #1
 80382d6:	693b      	ldr	r3, [r7, #16]
 80382d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80382da:	693b      	ldr	r3, [r7, #16]
 80382dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80382de:	693b      	ldr	r3, [r7, #16]
 80382e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80382e2:	429a      	cmp	r2, r3
 80382e4:	d044      	beq.n	8038370 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80382e6:	693b      	ldr	r3, [r7, #16]
 80382e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80382ea:	2b00      	cmp	r3, #0
 80382ec:	d140      	bne.n	8038370 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80382ee:	693b      	ldr	r3, [r7, #16]
 80382f0:	3304      	adds	r3, #4
 80382f2:	4618      	mov	r0, r3
 80382f4:	f7fe f910 	bl	8036518 <uxListRemove>
 80382f8:	4603      	mov	r3, r0
 80382fa:	2b00      	cmp	r3, #0
 80382fc:	d115      	bne.n	803832a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80382fe:	693b      	ldr	r3, [r7, #16]
 8038300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8038302:	491f      	ldr	r1, [pc, #124]	; (8038380 <xTaskPriorityDisinherit+0x104>)
 8038304:	4613      	mov	r3, r2
 8038306:	009b      	lsls	r3, r3, #2
 8038308:	4413      	add	r3, r2
 803830a:	009b      	lsls	r3, r3, #2
 803830c:	440b      	add	r3, r1
 803830e:	681b      	ldr	r3, [r3, #0]
 8038310:	2b00      	cmp	r3, #0
 8038312:	d10a      	bne.n	803832a <xTaskPriorityDisinherit+0xae>
 8038314:	693b      	ldr	r3, [r7, #16]
 8038316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038318:	2201      	movs	r2, #1
 803831a:	fa02 f303 	lsl.w	r3, r2, r3
 803831e:	43da      	mvns	r2, r3
 8038320:	4b18      	ldr	r3, [pc, #96]	; (8038384 <xTaskPriorityDisinherit+0x108>)
 8038322:	681b      	ldr	r3, [r3, #0]
 8038324:	4013      	ands	r3, r2
 8038326:	4a17      	ldr	r2, [pc, #92]	; (8038384 <xTaskPriorityDisinherit+0x108>)
 8038328:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 803832a:	693b      	ldr	r3, [r7, #16]
 803832c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803832e:	693b      	ldr	r3, [r7, #16]
 8038330:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8038332:	693b      	ldr	r3, [r7, #16]
 8038334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038336:	f1c3 0207 	rsb	r2, r3, #7
 803833a:	693b      	ldr	r3, [r7, #16]
 803833c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 803833e:	693b      	ldr	r3, [r7, #16]
 8038340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038342:	2201      	movs	r2, #1
 8038344:	409a      	lsls	r2, r3
 8038346:	4b0f      	ldr	r3, [pc, #60]	; (8038384 <xTaskPriorityDisinherit+0x108>)
 8038348:	681b      	ldr	r3, [r3, #0]
 803834a:	4313      	orrs	r3, r2
 803834c:	4a0d      	ldr	r2, [pc, #52]	; (8038384 <xTaskPriorityDisinherit+0x108>)
 803834e:	6013      	str	r3, [r2, #0]
 8038350:	693b      	ldr	r3, [r7, #16]
 8038352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8038354:	4613      	mov	r3, r2
 8038356:	009b      	lsls	r3, r3, #2
 8038358:	4413      	add	r3, r2
 803835a:	009b      	lsls	r3, r3, #2
 803835c:	4a08      	ldr	r2, [pc, #32]	; (8038380 <xTaskPriorityDisinherit+0x104>)
 803835e:	441a      	add	r2, r3
 8038360:	693b      	ldr	r3, [r7, #16]
 8038362:	3304      	adds	r3, #4
 8038364:	4619      	mov	r1, r3
 8038366:	4610      	mov	r0, r2
 8038368:	f7fe f879 	bl	803645e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 803836c:	2301      	movs	r3, #1
 803836e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8038370:	697b      	ldr	r3, [r7, #20]
	}
 8038372:	4618      	mov	r0, r3
 8038374:	3718      	adds	r7, #24
 8038376:	46bd      	mov	sp, r7
 8038378:	bd80      	pop	{r7, pc}
 803837a:	bf00      	nop
 803837c:	24002c6c 	.word	0x24002c6c
 8038380:	24002c70 	.word	0x24002c70
 8038384:	24002d74 	.word	0x24002d74

08038388 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8038388:	b580      	push	{r7, lr}
 803838a:	b088      	sub	sp, #32
 803838c:	af00      	add	r7, sp, #0
 803838e:	6078      	str	r0, [r7, #4]
 8038390:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8038392:	687b      	ldr	r3, [r7, #4]
 8038394:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8038396:	2301      	movs	r3, #1
 8038398:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 803839a:	687b      	ldr	r3, [r7, #4]
 803839c:	2b00      	cmp	r3, #0
 803839e:	d077      	beq.n	8038490 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80383a0:	69bb      	ldr	r3, [r7, #24]
 80383a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80383a4:	2b00      	cmp	r3, #0
 80383a6:	d10a      	bne.n	80383be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80383a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80383ac:	f383 8811 	msr	BASEPRI, r3
 80383b0:	f3bf 8f6f 	isb	sy
 80383b4:	f3bf 8f4f 	dsb	sy
 80383b8:	60fb      	str	r3, [r7, #12]
}
 80383ba:	bf00      	nop
 80383bc:	e7fe      	b.n	80383bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80383be:	69bb      	ldr	r3, [r7, #24]
 80383c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80383c2:	683a      	ldr	r2, [r7, #0]
 80383c4:	429a      	cmp	r2, r3
 80383c6:	d902      	bls.n	80383ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80383c8:	683b      	ldr	r3, [r7, #0]
 80383ca:	61fb      	str	r3, [r7, #28]
 80383cc:	e002      	b.n	80383d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80383ce:	69bb      	ldr	r3, [r7, #24]
 80383d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80383d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80383d4:	69bb      	ldr	r3, [r7, #24]
 80383d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80383d8:	69fa      	ldr	r2, [r7, #28]
 80383da:	429a      	cmp	r2, r3
 80383dc:	d058      	beq.n	8038490 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80383de:	69bb      	ldr	r3, [r7, #24]
 80383e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80383e2:	697a      	ldr	r2, [r7, #20]
 80383e4:	429a      	cmp	r2, r3
 80383e6:	d153      	bne.n	8038490 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80383e8:	4b2b      	ldr	r3, [pc, #172]	; (8038498 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80383ea:	681b      	ldr	r3, [r3, #0]
 80383ec:	69ba      	ldr	r2, [r7, #24]
 80383ee:	429a      	cmp	r2, r3
 80383f0:	d10a      	bne.n	8038408 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80383f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80383f6:	f383 8811 	msr	BASEPRI, r3
 80383fa:	f3bf 8f6f 	isb	sy
 80383fe:	f3bf 8f4f 	dsb	sy
 8038402:	60bb      	str	r3, [r7, #8]
}
 8038404:	bf00      	nop
 8038406:	e7fe      	b.n	8038406 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8038408:	69bb      	ldr	r3, [r7, #24]
 803840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803840c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 803840e:	69bb      	ldr	r3, [r7, #24]
 8038410:	69fa      	ldr	r2, [r7, #28]
 8038412:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8038414:	69bb      	ldr	r3, [r7, #24]
 8038416:	699b      	ldr	r3, [r3, #24]
 8038418:	2b00      	cmp	r3, #0
 803841a:	db04      	blt.n	8038426 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803841c:	69fb      	ldr	r3, [r7, #28]
 803841e:	f1c3 0207 	rsb	r2, r3, #7
 8038422:	69bb      	ldr	r3, [r7, #24]
 8038424:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8038426:	69bb      	ldr	r3, [r7, #24]
 8038428:	6959      	ldr	r1, [r3, #20]
 803842a:	693a      	ldr	r2, [r7, #16]
 803842c:	4613      	mov	r3, r2
 803842e:	009b      	lsls	r3, r3, #2
 8038430:	4413      	add	r3, r2
 8038432:	009b      	lsls	r3, r3, #2
 8038434:	4a19      	ldr	r2, [pc, #100]	; (803849c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8038436:	4413      	add	r3, r2
 8038438:	4299      	cmp	r1, r3
 803843a:	d129      	bne.n	8038490 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 803843c:	69bb      	ldr	r3, [r7, #24]
 803843e:	3304      	adds	r3, #4
 8038440:	4618      	mov	r0, r3
 8038442:	f7fe f869 	bl	8036518 <uxListRemove>
 8038446:	4603      	mov	r3, r0
 8038448:	2b00      	cmp	r3, #0
 803844a:	d10a      	bne.n	8038462 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 803844c:	69bb      	ldr	r3, [r7, #24]
 803844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038450:	2201      	movs	r2, #1
 8038452:	fa02 f303 	lsl.w	r3, r2, r3
 8038456:	43da      	mvns	r2, r3
 8038458:	4b11      	ldr	r3, [pc, #68]	; (80384a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 803845a:	681b      	ldr	r3, [r3, #0]
 803845c:	4013      	ands	r3, r2
 803845e:	4a10      	ldr	r2, [pc, #64]	; (80384a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8038460:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8038462:	69bb      	ldr	r3, [r7, #24]
 8038464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038466:	2201      	movs	r2, #1
 8038468:	409a      	lsls	r2, r3
 803846a:	4b0d      	ldr	r3, [pc, #52]	; (80384a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 803846c:	681b      	ldr	r3, [r3, #0]
 803846e:	4313      	orrs	r3, r2
 8038470:	4a0b      	ldr	r2, [pc, #44]	; (80384a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8038472:	6013      	str	r3, [r2, #0]
 8038474:	69bb      	ldr	r3, [r7, #24]
 8038476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8038478:	4613      	mov	r3, r2
 803847a:	009b      	lsls	r3, r3, #2
 803847c:	4413      	add	r3, r2
 803847e:	009b      	lsls	r3, r3, #2
 8038480:	4a06      	ldr	r2, [pc, #24]	; (803849c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8038482:	441a      	add	r2, r3
 8038484:	69bb      	ldr	r3, [r7, #24]
 8038486:	3304      	adds	r3, #4
 8038488:	4619      	mov	r1, r3
 803848a:	4610      	mov	r0, r2
 803848c:	f7fd ffe7 	bl	803645e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8038490:	bf00      	nop
 8038492:	3720      	adds	r7, #32
 8038494:	46bd      	mov	sp, r7
 8038496:	bd80      	pop	{r7, pc}
 8038498:	24002c6c 	.word	0x24002c6c
 803849c:	24002c70 	.word	0x24002c70
 80384a0:	24002d74 	.word	0x24002d74

080384a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80384a4:	b480      	push	{r7}
 80384a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80384a8:	4b07      	ldr	r3, [pc, #28]	; (80384c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80384aa:	681b      	ldr	r3, [r3, #0]
 80384ac:	2b00      	cmp	r3, #0
 80384ae:	d004      	beq.n	80384ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80384b0:	4b05      	ldr	r3, [pc, #20]	; (80384c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80384b2:	681b      	ldr	r3, [r3, #0]
 80384b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80384b6:	3201      	adds	r2, #1
 80384b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80384ba:	4b03      	ldr	r3, [pc, #12]	; (80384c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80384bc:	681b      	ldr	r3, [r3, #0]
	}
 80384be:	4618      	mov	r0, r3
 80384c0:	46bd      	mov	sp, r7
 80384c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80384c6:	4770      	bx	lr
 80384c8:	24002c6c 	.word	0x24002c6c

080384cc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80384cc:	b580      	push	{r7, lr}
 80384ce:	b084      	sub	sp, #16
 80384d0:	af00      	add	r7, sp, #0
 80384d2:	6078      	str	r0, [r7, #4]
 80384d4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80384d6:	f000 fe4d 	bl	8039174 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80384da:	4b1e      	ldr	r3, [pc, #120]	; (8038554 <ulTaskNotifyTake+0x88>)
 80384dc:	681b      	ldr	r3, [r3, #0]
 80384de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80384e0:	2b00      	cmp	r3, #0
 80384e2:	d113      	bne.n	803850c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80384e4:	4b1b      	ldr	r3, [pc, #108]	; (8038554 <ulTaskNotifyTake+0x88>)
 80384e6:	681b      	ldr	r3, [r3, #0]
 80384e8:	2201      	movs	r2, #1
 80384ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80384ee:	683b      	ldr	r3, [r7, #0]
 80384f0:	2b00      	cmp	r3, #0
 80384f2:	d00b      	beq.n	803850c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80384f4:	2101      	movs	r1, #1
 80384f6:	6838      	ldr	r0, [r7, #0]
 80384f8:	f000 f8c2 	bl	8038680 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80384fc:	4b16      	ldr	r3, [pc, #88]	; (8038558 <ulTaskNotifyTake+0x8c>)
 80384fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038502:	601a      	str	r2, [r3, #0]
 8038504:	f3bf 8f4f 	dsb	sy
 8038508:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 803850c:	f000 fe62 	bl	80391d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8038510:	f000 fe30 	bl	8039174 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8038514:	4b0f      	ldr	r3, [pc, #60]	; (8038554 <ulTaskNotifyTake+0x88>)
 8038516:	681b      	ldr	r3, [r3, #0]
 8038518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803851a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 803851c:	68fb      	ldr	r3, [r7, #12]
 803851e:	2b00      	cmp	r3, #0
 8038520:	d00c      	beq.n	803853c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8038522:	687b      	ldr	r3, [r7, #4]
 8038524:	2b00      	cmp	r3, #0
 8038526:	d004      	beq.n	8038532 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8038528:	4b0a      	ldr	r3, [pc, #40]	; (8038554 <ulTaskNotifyTake+0x88>)
 803852a:	681b      	ldr	r3, [r3, #0]
 803852c:	2200      	movs	r2, #0
 803852e:	64da      	str	r2, [r3, #76]	; 0x4c
 8038530:	e004      	b.n	803853c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8038532:	4b08      	ldr	r3, [pc, #32]	; (8038554 <ulTaskNotifyTake+0x88>)
 8038534:	681b      	ldr	r3, [r3, #0]
 8038536:	68fa      	ldr	r2, [r7, #12]
 8038538:	3a01      	subs	r2, #1
 803853a:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 803853c:	4b05      	ldr	r3, [pc, #20]	; (8038554 <ulTaskNotifyTake+0x88>)
 803853e:	681b      	ldr	r3, [r3, #0]
 8038540:	2200      	movs	r2, #0
 8038542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8038546:	f000 fe45 	bl	80391d4 <vPortExitCritical>

		return ulReturn;
 803854a:	68fb      	ldr	r3, [r7, #12]
	}
 803854c:	4618      	mov	r0, r3
 803854e:	3710      	adds	r7, #16
 8038550:	46bd      	mov	sp, r7
 8038552:	bd80      	pop	{r7, pc}
 8038554:	24002c6c 	.word	0x24002c6c
 8038558:	e000ed04 	.word	0xe000ed04

0803855c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 803855c:	b580      	push	{r7, lr}
 803855e:	b08a      	sub	sp, #40	; 0x28
 8038560:	af00      	add	r7, sp, #0
 8038562:	6078      	str	r0, [r7, #4]
 8038564:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8038566:	687b      	ldr	r3, [r7, #4]
 8038568:	2b00      	cmp	r3, #0
 803856a:	d10a      	bne.n	8038582 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 803856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038570:	f383 8811 	msr	BASEPRI, r3
 8038574:	f3bf 8f6f 	isb	sy
 8038578:	f3bf 8f4f 	dsb	sy
 803857c:	61bb      	str	r3, [r7, #24]
}
 803857e:	bf00      	nop
 8038580:	e7fe      	b.n	8038580 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8038582:	f000 fed9 	bl	8039338 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8038586:	687b      	ldr	r3, [r7, #4]
 8038588:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 803858a:	f3ef 8211 	mrs	r2, BASEPRI
 803858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038592:	f383 8811 	msr	BASEPRI, r3
 8038596:	f3bf 8f6f 	isb	sy
 803859a:	f3bf 8f4f 	dsb	sy
 803859e:	617a      	str	r2, [r7, #20]
 80385a0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80385a2:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80385a4:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80385a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80385a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80385ac:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80385ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80385b0:	2202      	movs	r2, #2
 80385b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80385b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80385b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80385ba:	1c5a      	adds	r2, r3, #1
 80385bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80385be:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80385c0:	7ffb      	ldrb	r3, [r7, #31]
 80385c2:	2b01      	cmp	r3, #1
 80385c4:	d145      	bne.n	8038652 <vTaskNotifyGiveFromISR+0xf6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80385c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80385c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80385ca:	2b00      	cmp	r3, #0
 80385cc:	d00a      	beq.n	80385e4 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 80385ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80385d2:	f383 8811 	msr	BASEPRI, r3
 80385d6:	f3bf 8f6f 	isb	sy
 80385da:	f3bf 8f4f 	dsb	sy
 80385de:	60fb      	str	r3, [r7, #12]
}
 80385e0:	bf00      	nop
 80385e2:	e7fe      	b.n	80385e2 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80385e4:	4b20      	ldr	r3, [pc, #128]	; (8038668 <vTaskNotifyGiveFromISR+0x10c>)
 80385e6:	681b      	ldr	r3, [r3, #0]
 80385e8:	2b00      	cmp	r3, #0
 80385ea:	d11c      	bne.n	8038626 <vTaskNotifyGiveFromISR+0xca>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80385ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80385ee:	3304      	adds	r3, #4
 80385f0:	4618      	mov	r0, r3
 80385f2:	f7fd ff91 	bl	8036518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80385f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80385f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80385fa:	2201      	movs	r2, #1
 80385fc:	409a      	lsls	r2, r3
 80385fe:	4b1b      	ldr	r3, [pc, #108]	; (803866c <vTaskNotifyGiveFromISR+0x110>)
 8038600:	681b      	ldr	r3, [r3, #0]
 8038602:	4313      	orrs	r3, r2
 8038604:	4a19      	ldr	r2, [pc, #100]	; (803866c <vTaskNotifyGiveFromISR+0x110>)
 8038606:	6013      	str	r3, [r2, #0]
 8038608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803860a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803860c:	4613      	mov	r3, r2
 803860e:	009b      	lsls	r3, r3, #2
 8038610:	4413      	add	r3, r2
 8038612:	009b      	lsls	r3, r3, #2
 8038614:	4a16      	ldr	r2, [pc, #88]	; (8038670 <vTaskNotifyGiveFromISR+0x114>)
 8038616:	441a      	add	r2, r3
 8038618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803861a:	3304      	adds	r3, #4
 803861c:	4619      	mov	r1, r3
 803861e:	4610      	mov	r0, r2
 8038620:	f7fd ff1d 	bl	803645e <vListInsertEnd>
 8038624:	e005      	b.n	8038632 <vTaskNotifyGiveFromISR+0xd6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8038626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038628:	3318      	adds	r3, #24
 803862a:	4619      	mov	r1, r3
 803862c:	4811      	ldr	r0, [pc, #68]	; (8038674 <vTaskNotifyGiveFromISR+0x118>)
 803862e:	f7fd ff16 	bl	803645e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8038632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8038636:	4b10      	ldr	r3, [pc, #64]	; (8038678 <vTaskNotifyGiveFromISR+0x11c>)
 8038638:	681b      	ldr	r3, [r3, #0]
 803863a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803863c:	429a      	cmp	r2, r3
 803863e:	d908      	bls.n	8038652 <vTaskNotifyGiveFromISR+0xf6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8038640:	683b      	ldr	r3, [r7, #0]
 8038642:	2b00      	cmp	r3, #0
 8038644:	d002      	beq.n	803864c <vTaskNotifyGiveFromISR+0xf0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8038646:	683b      	ldr	r3, [r7, #0]
 8038648:	2201      	movs	r2, #1
 803864a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 803864c:	4b0b      	ldr	r3, [pc, #44]	; (803867c <vTaskNotifyGiveFromISR+0x120>)
 803864e:	2201      	movs	r2, #1
 8038650:	601a      	str	r2, [r3, #0]
 8038652:	6a3b      	ldr	r3, [r7, #32]
 8038654:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8038656:	68bb      	ldr	r3, [r7, #8]
 8038658:	f383 8811 	msr	BASEPRI, r3
}
 803865c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 803865e:	bf00      	nop
 8038660:	3728      	adds	r7, #40	; 0x28
 8038662:	46bd      	mov	sp, r7
 8038664:	bd80      	pop	{r7, pc}
 8038666:	bf00      	nop
 8038668:	24002d94 	.word	0x24002d94
 803866c:	24002d74 	.word	0x24002d74
 8038670:	24002c70 	.word	0x24002c70
 8038674:	24002d2c 	.word	0x24002d2c
 8038678:	24002c6c 	.word	0x24002c6c
 803867c:	24002d80 	.word	0x24002d80

08038680 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8038680:	b580      	push	{r7, lr}
 8038682:	b084      	sub	sp, #16
 8038684:	af00      	add	r7, sp, #0
 8038686:	6078      	str	r0, [r7, #4]
 8038688:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 803868a:	4b29      	ldr	r3, [pc, #164]	; (8038730 <prvAddCurrentTaskToDelayedList+0xb0>)
 803868c:	681b      	ldr	r3, [r3, #0]
 803868e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8038690:	4b28      	ldr	r3, [pc, #160]	; (8038734 <prvAddCurrentTaskToDelayedList+0xb4>)
 8038692:	681b      	ldr	r3, [r3, #0]
 8038694:	3304      	adds	r3, #4
 8038696:	4618      	mov	r0, r3
 8038698:	f7fd ff3e 	bl	8036518 <uxListRemove>
 803869c:	4603      	mov	r3, r0
 803869e:	2b00      	cmp	r3, #0
 80386a0:	d10b      	bne.n	80386ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80386a2:	4b24      	ldr	r3, [pc, #144]	; (8038734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80386a4:	681b      	ldr	r3, [r3, #0]
 80386a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80386a8:	2201      	movs	r2, #1
 80386aa:	fa02 f303 	lsl.w	r3, r2, r3
 80386ae:	43da      	mvns	r2, r3
 80386b0:	4b21      	ldr	r3, [pc, #132]	; (8038738 <prvAddCurrentTaskToDelayedList+0xb8>)
 80386b2:	681b      	ldr	r3, [r3, #0]
 80386b4:	4013      	ands	r3, r2
 80386b6:	4a20      	ldr	r2, [pc, #128]	; (8038738 <prvAddCurrentTaskToDelayedList+0xb8>)
 80386b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80386ba:	687b      	ldr	r3, [r7, #4]
 80386bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80386c0:	d10a      	bne.n	80386d8 <prvAddCurrentTaskToDelayedList+0x58>
 80386c2:	683b      	ldr	r3, [r7, #0]
 80386c4:	2b00      	cmp	r3, #0
 80386c6:	d007      	beq.n	80386d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80386c8:	4b1a      	ldr	r3, [pc, #104]	; (8038734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80386ca:	681b      	ldr	r3, [r3, #0]
 80386cc:	3304      	adds	r3, #4
 80386ce:	4619      	mov	r1, r3
 80386d0:	481a      	ldr	r0, [pc, #104]	; (803873c <prvAddCurrentTaskToDelayedList+0xbc>)
 80386d2:	f7fd fec4 	bl	803645e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80386d6:	e026      	b.n	8038726 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80386d8:	68fa      	ldr	r2, [r7, #12]
 80386da:	687b      	ldr	r3, [r7, #4]
 80386dc:	4413      	add	r3, r2
 80386de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80386e0:	4b14      	ldr	r3, [pc, #80]	; (8038734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80386e2:	681b      	ldr	r3, [r3, #0]
 80386e4:	68ba      	ldr	r2, [r7, #8]
 80386e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80386e8:	68ba      	ldr	r2, [r7, #8]
 80386ea:	68fb      	ldr	r3, [r7, #12]
 80386ec:	429a      	cmp	r2, r3
 80386ee:	d209      	bcs.n	8038704 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80386f0:	4b13      	ldr	r3, [pc, #76]	; (8038740 <prvAddCurrentTaskToDelayedList+0xc0>)
 80386f2:	681a      	ldr	r2, [r3, #0]
 80386f4:	4b0f      	ldr	r3, [pc, #60]	; (8038734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80386f6:	681b      	ldr	r3, [r3, #0]
 80386f8:	3304      	adds	r3, #4
 80386fa:	4619      	mov	r1, r3
 80386fc:	4610      	mov	r0, r2
 80386fe:	f7fd fed2 	bl	80364a6 <vListInsert>
}
 8038702:	e010      	b.n	8038726 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8038704:	4b0f      	ldr	r3, [pc, #60]	; (8038744 <prvAddCurrentTaskToDelayedList+0xc4>)
 8038706:	681a      	ldr	r2, [r3, #0]
 8038708:	4b0a      	ldr	r3, [pc, #40]	; (8038734 <prvAddCurrentTaskToDelayedList+0xb4>)
 803870a:	681b      	ldr	r3, [r3, #0]
 803870c:	3304      	adds	r3, #4
 803870e:	4619      	mov	r1, r3
 8038710:	4610      	mov	r0, r2
 8038712:	f7fd fec8 	bl	80364a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8038716:	4b0c      	ldr	r3, [pc, #48]	; (8038748 <prvAddCurrentTaskToDelayedList+0xc8>)
 8038718:	681b      	ldr	r3, [r3, #0]
 803871a:	68ba      	ldr	r2, [r7, #8]
 803871c:	429a      	cmp	r2, r3
 803871e:	d202      	bcs.n	8038726 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8038720:	4a09      	ldr	r2, [pc, #36]	; (8038748 <prvAddCurrentTaskToDelayedList+0xc8>)
 8038722:	68bb      	ldr	r3, [r7, #8]
 8038724:	6013      	str	r3, [r2, #0]
}
 8038726:	bf00      	nop
 8038728:	3710      	adds	r7, #16
 803872a:	46bd      	mov	sp, r7
 803872c:	bd80      	pop	{r7, pc}
 803872e:	bf00      	nop
 8038730:	24002d70 	.word	0x24002d70
 8038734:	24002c6c 	.word	0x24002c6c
 8038738:	24002d74 	.word	0x24002d74
 803873c:	24002d58 	.word	0x24002d58
 8038740:	24002d28 	.word	0x24002d28
 8038744:	24002d24 	.word	0x24002d24
 8038748:	24002d8c 	.word	0x24002d8c

0803874c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 803874c:	b580      	push	{r7, lr}
 803874e:	b08a      	sub	sp, #40	; 0x28
 8038750:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8038752:	2300      	movs	r3, #0
 8038754:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8038756:	f000 fba1 	bl	8038e9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 803875a:	4b1c      	ldr	r3, [pc, #112]	; (80387cc <xTimerCreateTimerTask+0x80>)
 803875c:	681b      	ldr	r3, [r3, #0]
 803875e:	2b00      	cmp	r3, #0
 8038760:	d021      	beq.n	80387a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8038762:	2300      	movs	r3, #0
 8038764:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8038766:	2300      	movs	r3, #0
 8038768:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 803876a:	1d3a      	adds	r2, r7, #4
 803876c:	f107 0108 	add.w	r1, r7, #8
 8038770:	f107 030c 	add.w	r3, r7, #12
 8038774:	4618      	mov	r0, r3
 8038776:	f7e8 faa7 	bl	8020cc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 803877a:	6879      	ldr	r1, [r7, #4]
 803877c:	68bb      	ldr	r3, [r7, #8]
 803877e:	68fa      	ldr	r2, [r7, #12]
 8038780:	9202      	str	r2, [sp, #8]
 8038782:	9301      	str	r3, [sp, #4]
 8038784:	2302      	movs	r3, #2
 8038786:	9300      	str	r3, [sp, #0]
 8038788:	2300      	movs	r3, #0
 803878a:	460a      	mov	r2, r1
 803878c:	4910      	ldr	r1, [pc, #64]	; (80387d0 <xTimerCreateTimerTask+0x84>)
 803878e:	4811      	ldr	r0, [pc, #68]	; (80387d4 <xTimerCreateTimerTask+0x88>)
 8038790:	f7fe fed8 	bl	8037544 <xTaskCreateStatic>
 8038794:	4603      	mov	r3, r0
 8038796:	4a10      	ldr	r2, [pc, #64]	; (80387d8 <xTimerCreateTimerTask+0x8c>)
 8038798:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 803879a:	4b0f      	ldr	r3, [pc, #60]	; (80387d8 <xTimerCreateTimerTask+0x8c>)
 803879c:	681b      	ldr	r3, [r3, #0]
 803879e:	2b00      	cmp	r3, #0
 80387a0:	d001      	beq.n	80387a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80387a2:	2301      	movs	r3, #1
 80387a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80387a6:	697b      	ldr	r3, [r7, #20]
 80387a8:	2b00      	cmp	r3, #0
 80387aa:	d10a      	bne.n	80387c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80387ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80387b0:	f383 8811 	msr	BASEPRI, r3
 80387b4:	f3bf 8f6f 	isb	sy
 80387b8:	f3bf 8f4f 	dsb	sy
 80387bc:	613b      	str	r3, [r7, #16]
}
 80387be:	bf00      	nop
 80387c0:	e7fe      	b.n	80387c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80387c2:	697b      	ldr	r3, [r7, #20]
}
 80387c4:	4618      	mov	r0, r3
 80387c6:	3718      	adds	r7, #24
 80387c8:	46bd      	mov	sp, r7
 80387ca:	bd80      	pop	{r7, pc}
 80387cc:	24002dc8 	.word	0x24002dc8
 80387d0:	0803b83c 	.word	0x0803b83c
 80387d4:	08038a45 	.word	0x08038a45
 80387d8:	24002dcc 	.word	0x24002dcc

080387dc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80387dc:	b580      	push	{r7, lr}
 80387de:	b088      	sub	sp, #32
 80387e0:	af02      	add	r7, sp, #8
 80387e2:	60f8      	str	r0, [r7, #12]
 80387e4:	60b9      	str	r1, [r7, #8]
 80387e6:	607a      	str	r2, [r7, #4]
 80387e8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80387ea:	2028      	movs	r0, #40	; 0x28
 80387ec:	f000 fde4 	bl	80393b8 <pvPortMalloc>
 80387f0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80387f2:	697b      	ldr	r3, [r7, #20]
 80387f4:	2b00      	cmp	r3, #0
 80387f6:	d00d      	beq.n	8038814 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80387f8:	697b      	ldr	r3, [r7, #20]
 80387fa:	2200      	movs	r2, #0
 80387fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8038800:	697b      	ldr	r3, [r7, #20]
 8038802:	9301      	str	r3, [sp, #4]
 8038804:	6a3b      	ldr	r3, [r7, #32]
 8038806:	9300      	str	r3, [sp, #0]
 8038808:	683b      	ldr	r3, [r7, #0]
 803880a:	687a      	ldr	r2, [r7, #4]
 803880c:	68b9      	ldr	r1, [r7, #8]
 803880e:	68f8      	ldr	r0, [r7, #12]
 8038810:	f000 f843 	bl	803889a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8038814:	697b      	ldr	r3, [r7, #20]
	}
 8038816:	4618      	mov	r0, r3
 8038818:	3718      	adds	r7, #24
 803881a:	46bd      	mov	sp, r7
 803881c:	bd80      	pop	{r7, pc}

0803881e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 803881e:	b580      	push	{r7, lr}
 8038820:	b08a      	sub	sp, #40	; 0x28
 8038822:	af02      	add	r7, sp, #8
 8038824:	60f8      	str	r0, [r7, #12]
 8038826:	60b9      	str	r1, [r7, #8]
 8038828:	607a      	str	r2, [r7, #4]
 803882a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 803882c:	2328      	movs	r3, #40	; 0x28
 803882e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8038830:	693b      	ldr	r3, [r7, #16]
 8038832:	2b28      	cmp	r3, #40	; 0x28
 8038834:	d00a      	beq.n	803884c <xTimerCreateStatic+0x2e>
	__asm volatile
 8038836:	f04f 0350 	mov.w	r3, #80	; 0x50
 803883a:	f383 8811 	msr	BASEPRI, r3
 803883e:	f3bf 8f6f 	isb	sy
 8038842:	f3bf 8f4f 	dsb	sy
 8038846:	61bb      	str	r3, [r7, #24]
}
 8038848:	bf00      	nop
 803884a:	e7fe      	b.n	803884a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 803884c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 803884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038850:	2b00      	cmp	r3, #0
 8038852:	d10a      	bne.n	803886a <xTimerCreateStatic+0x4c>
	__asm volatile
 8038854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038858:	f383 8811 	msr	BASEPRI, r3
 803885c:	f3bf 8f6f 	isb	sy
 8038860:	f3bf 8f4f 	dsb	sy
 8038864:	617b      	str	r3, [r7, #20]
}
 8038866:	bf00      	nop
 8038868:	e7fe      	b.n	8038868 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 803886a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803886c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 803886e:	69fb      	ldr	r3, [r7, #28]
 8038870:	2b00      	cmp	r3, #0
 8038872:	d00d      	beq.n	8038890 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8038874:	69fb      	ldr	r3, [r7, #28]
 8038876:	2202      	movs	r2, #2
 8038878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 803887c:	69fb      	ldr	r3, [r7, #28]
 803887e:	9301      	str	r3, [sp, #4]
 8038880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038882:	9300      	str	r3, [sp, #0]
 8038884:	683b      	ldr	r3, [r7, #0]
 8038886:	687a      	ldr	r2, [r7, #4]
 8038888:	68b9      	ldr	r1, [r7, #8]
 803888a:	68f8      	ldr	r0, [r7, #12]
 803888c:	f000 f805 	bl	803889a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8038890:	69fb      	ldr	r3, [r7, #28]
	}
 8038892:	4618      	mov	r0, r3
 8038894:	3720      	adds	r7, #32
 8038896:	46bd      	mov	sp, r7
 8038898:	bd80      	pop	{r7, pc}

0803889a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 803889a:	b580      	push	{r7, lr}
 803889c:	b086      	sub	sp, #24
 803889e:	af00      	add	r7, sp, #0
 80388a0:	60f8      	str	r0, [r7, #12]
 80388a2:	60b9      	str	r1, [r7, #8]
 80388a4:	607a      	str	r2, [r7, #4]
 80388a6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80388a8:	68bb      	ldr	r3, [r7, #8]
 80388aa:	2b00      	cmp	r3, #0
 80388ac:	d10a      	bne.n	80388c4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80388ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80388b2:	f383 8811 	msr	BASEPRI, r3
 80388b6:	f3bf 8f6f 	isb	sy
 80388ba:	f3bf 8f4f 	dsb	sy
 80388be:	617b      	str	r3, [r7, #20]
}
 80388c0:	bf00      	nop
 80388c2:	e7fe      	b.n	80388c2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80388c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80388c6:	2b00      	cmp	r3, #0
 80388c8:	d01e      	beq.n	8038908 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80388ca:	f000 fae7 	bl	8038e9c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80388ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80388d0:	68fa      	ldr	r2, [r7, #12]
 80388d2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80388d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80388d6:	68ba      	ldr	r2, [r7, #8]
 80388d8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80388da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80388dc:	683a      	ldr	r2, [r7, #0]
 80388de:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80388e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80388e2:	6a3a      	ldr	r2, [r7, #32]
 80388e4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80388e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80388e8:	3304      	adds	r3, #4
 80388ea:	4618      	mov	r0, r3
 80388ec:	f7fd fdaa 	bl	8036444 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80388f0:	687b      	ldr	r3, [r7, #4]
 80388f2:	2b00      	cmp	r3, #0
 80388f4:	d008      	beq.n	8038908 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80388f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80388f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80388fc:	f043 0304 	orr.w	r3, r3, #4
 8038900:	b2da      	uxtb	r2, r3
 8038902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8038908:	bf00      	nop
 803890a:	3718      	adds	r7, #24
 803890c:	46bd      	mov	sp, r7
 803890e:	bd80      	pop	{r7, pc}

08038910 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8038910:	b580      	push	{r7, lr}
 8038912:	b08a      	sub	sp, #40	; 0x28
 8038914:	af00      	add	r7, sp, #0
 8038916:	60f8      	str	r0, [r7, #12]
 8038918:	60b9      	str	r1, [r7, #8]
 803891a:	607a      	str	r2, [r7, #4]
 803891c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 803891e:	2300      	movs	r3, #0
 8038920:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8038922:	68fb      	ldr	r3, [r7, #12]
 8038924:	2b00      	cmp	r3, #0
 8038926:	d10a      	bne.n	803893e <xTimerGenericCommand+0x2e>
	__asm volatile
 8038928:	f04f 0350 	mov.w	r3, #80	; 0x50
 803892c:	f383 8811 	msr	BASEPRI, r3
 8038930:	f3bf 8f6f 	isb	sy
 8038934:	f3bf 8f4f 	dsb	sy
 8038938:	623b      	str	r3, [r7, #32]
}
 803893a:	bf00      	nop
 803893c:	e7fe      	b.n	803893c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 803893e:	4b1a      	ldr	r3, [pc, #104]	; (80389a8 <xTimerGenericCommand+0x98>)
 8038940:	681b      	ldr	r3, [r3, #0]
 8038942:	2b00      	cmp	r3, #0
 8038944:	d02a      	beq.n	803899c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8038946:	68bb      	ldr	r3, [r7, #8]
 8038948:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 803894a:	687b      	ldr	r3, [r7, #4]
 803894c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 803894e:	68fb      	ldr	r3, [r7, #12]
 8038950:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8038952:	68bb      	ldr	r3, [r7, #8]
 8038954:	2b05      	cmp	r3, #5
 8038956:	dc18      	bgt.n	803898a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8038958:	f7ff fbfc 	bl	8038154 <xTaskGetSchedulerState>
 803895c:	4603      	mov	r3, r0
 803895e:	2b02      	cmp	r3, #2
 8038960:	d109      	bne.n	8038976 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8038962:	4b11      	ldr	r3, [pc, #68]	; (80389a8 <xTimerGenericCommand+0x98>)
 8038964:	6818      	ldr	r0, [r3, #0]
 8038966:	f107 0110 	add.w	r1, r7, #16
 803896a:	2300      	movs	r3, #0
 803896c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803896e:	f7fd ff83 	bl	8036878 <xQueueGenericSend>
 8038972:	6278      	str	r0, [r7, #36]	; 0x24
 8038974:	e012      	b.n	803899c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8038976:	4b0c      	ldr	r3, [pc, #48]	; (80389a8 <xTimerGenericCommand+0x98>)
 8038978:	6818      	ldr	r0, [r3, #0]
 803897a:	f107 0110 	add.w	r1, r7, #16
 803897e:	2300      	movs	r3, #0
 8038980:	2200      	movs	r2, #0
 8038982:	f7fd ff79 	bl	8036878 <xQueueGenericSend>
 8038986:	6278      	str	r0, [r7, #36]	; 0x24
 8038988:	e008      	b.n	803899c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 803898a:	4b07      	ldr	r3, [pc, #28]	; (80389a8 <xTimerGenericCommand+0x98>)
 803898c:	6818      	ldr	r0, [r3, #0]
 803898e:	f107 0110 	add.w	r1, r7, #16
 8038992:	2300      	movs	r3, #0
 8038994:	683a      	ldr	r2, [r7, #0]
 8038996:	f7fe f86d 	bl	8036a74 <xQueueGenericSendFromISR>
 803899a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 803899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 803899e:	4618      	mov	r0, r3
 80389a0:	3728      	adds	r7, #40	; 0x28
 80389a2:	46bd      	mov	sp, r7
 80389a4:	bd80      	pop	{r7, pc}
 80389a6:	bf00      	nop
 80389a8:	24002dc8 	.word	0x24002dc8

080389ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80389ac:	b580      	push	{r7, lr}
 80389ae:	b088      	sub	sp, #32
 80389b0:	af02      	add	r7, sp, #8
 80389b2:	6078      	str	r0, [r7, #4]
 80389b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80389b6:	4b22      	ldr	r3, [pc, #136]	; (8038a40 <prvProcessExpiredTimer+0x94>)
 80389b8:	681b      	ldr	r3, [r3, #0]
 80389ba:	68db      	ldr	r3, [r3, #12]
 80389bc:	68db      	ldr	r3, [r3, #12]
 80389be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80389c0:	697b      	ldr	r3, [r7, #20]
 80389c2:	3304      	adds	r3, #4
 80389c4:	4618      	mov	r0, r3
 80389c6:	f7fd fda7 	bl	8036518 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80389ca:	697b      	ldr	r3, [r7, #20]
 80389cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80389d0:	f003 0304 	and.w	r3, r3, #4
 80389d4:	2b00      	cmp	r3, #0
 80389d6:	d022      	beq.n	8038a1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80389d8:	697b      	ldr	r3, [r7, #20]
 80389da:	699a      	ldr	r2, [r3, #24]
 80389dc:	687b      	ldr	r3, [r7, #4]
 80389de:	18d1      	adds	r1, r2, r3
 80389e0:	687b      	ldr	r3, [r7, #4]
 80389e2:	683a      	ldr	r2, [r7, #0]
 80389e4:	6978      	ldr	r0, [r7, #20]
 80389e6:	f000 f8d1 	bl	8038b8c <prvInsertTimerInActiveList>
 80389ea:	4603      	mov	r3, r0
 80389ec:	2b00      	cmp	r3, #0
 80389ee:	d01f      	beq.n	8038a30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80389f0:	2300      	movs	r3, #0
 80389f2:	9300      	str	r3, [sp, #0]
 80389f4:	2300      	movs	r3, #0
 80389f6:	687a      	ldr	r2, [r7, #4]
 80389f8:	2100      	movs	r1, #0
 80389fa:	6978      	ldr	r0, [r7, #20]
 80389fc:	f7ff ff88 	bl	8038910 <xTimerGenericCommand>
 8038a00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8038a02:	693b      	ldr	r3, [r7, #16]
 8038a04:	2b00      	cmp	r3, #0
 8038a06:	d113      	bne.n	8038a30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8038a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038a0c:	f383 8811 	msr	BASEPRI, r3
 8038a10:	f3bf 8f6f 	isb	sy
 8038a14:	f3bf 8f4f 	dsb	sy
 8038a18:	60fb      	str	r3, [r7, #12]
}
 8038a1a:	bf00      	nop
 8038a1c:	e7fe      	b.n	8038a1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8038a1e:	697b      	ldr	r3, [r7, #20]
 8038a20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038a24:	f023 0301 	bic.w	r3, r3, #1
 8038a28:	b2da      	uxtb	r2, r3
 8038a2a:	697b      	ldr	r3, [r7, #20]
 8038a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8038a30:	697b      	ldr	r3, [r7, #20]
 8038a32:	6a1b      	ldr	r3, [r3, #32]
 8038a34:	6978      	ldr	r0, [r7, #20]
 8038a36:	4798      	blx	r3
}
 8038a38:	bf00      	nop
 8038a3a:	3718      	adds	r7, #24
 8038a3c:	46bd      	mov	sp, r7
 8038a3e:	bd80      	pop	{r7, pc}
 8038a40:	24002dc0 	.word	0x24002dc0

08038a44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8038a44:	b580      	push	{r7, lr}
 8038a46:	b084      	sub	sp, #16
 8038a48:	af00      	add	r7, sp, #0
 8038a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8038a4c:	f107 0308 	add.w	r3, r7, #8
 8038a50:	4618      	mov	r0, r3
 8038a52:	f000 f857 	bl	8038b04 <prvGetNextExpireTime>
 8038a56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8038a58:	68bb      	ldr	r3, [r7, #8]
 8038a5a:	4619      	mov	r1, r3
 8038a5c:	68f8      	ldr	r0, [r7, #12]
 8038a5e:	f000 f803 	bl	8038a68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8038a62:	f000 f8d5 	bl	8038c10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8038a66:	e7f1      	b.n	8038a4c <prvTimerTask+0x8>

08038a68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8038a68:	b580      	push	{r7, lr}
 8038a6a:	b084      	sub	sp, #16
 8038a6c:	af00      	add	r7, sp, #0
 8038a6e:	6078      	str	r0, [r7, #4]
 8038a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8038a72:	f7fe ff95 	bl	80379a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8038a76:	f107 0308 	add.w	r3, r7, #8
 8038a7a:	4618      	mov	r0, r3
 8038a7c:	f000 f866 	bl	8038b4c <prvSampleTimeNow>
 8038a80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8038a82:	68bb      	ldr	r3, [r7, #8]
 8038a84:	2b00      	cmp	r3, #0
 8038a86:	d130      	bne.n	8038aea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8038a88:	683b      	ldr	r3, [r7, #0]
 8038a8a:	2b00      	cmp	r3, #0
 8038a8c:	d10a      	bne.n	8038aa4 <prvProcessTimerOrBlockTask+0x3c>
 8038a8e:	687a      	ldr	r2, [r7, #4]
 8038a90:	68fb      	ldr	r3, [r7, #12]
 8038a92:	429a      	cmp	r2, r3
 8038a94:	d806      	bhi.n	8038aa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8038a96:	f7fe ff91 	bl	80379bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8038a9a:	68f9      	ldr	r1, [r7, #12]
 8038a9c:	6878      	ldr	r0, [r7, #4]
 8038a9e:	f7ff ff85 	bl	80389ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8038aa2:	e024      	b.n	8038aee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8038aa4:	683b      	ldr	r3, [r7, #0]
 8038aa6:	2b00      	cmp	r3, #0
 8038aa8:	d008      	beq.n	8038abc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8038aaa:	4b13      	ldr	r3, [pc, #76]	; (8038af8 <prvProcessTimerOrBlockTask+0x90>)
 8038aac:	681b      	ldr	r3, [r3, #0]
 8038aae:	681b      	ldr	r3, [r3, #0]
 8038ab0:	2b00      	cmp	r3, #0
 8038ab2:	d101      	bne.n	8038ab8 <prvProcessTimerOrBlockTask+0x50>
 8038ab4:	2301      	movs	r3, #1
 8038ab6:	e000      	b.n	8038aba <prvProcessTimerOrBlockTask+0x52>
 8038ab8:	2300      	movs	r3, #0
 8038aba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8038abc:	4b0f      	ldr	r3, [pc, #60]	; (8038afc <prvProcessTimerOrBlockTask+0x94>)
 8038abe:	6818      	ldr	r0, [r3, #0]
 8038ac0:	687a      	ldr	r2, [r7, #4]
 8038ac2:	68fb      	ldr	r3, [r7, #12]
 8038ac4:	1ad3      	subs	r3, r2, r3
 8038ac6:	683a      	ldr	r2, [r7, #0]
 8038ac8:	4619      	mov	r1, r3
 8038aca:	f7fe fd07 	bl	80374dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8038ace:	f7fe ff75 	bl	80379bc <xTaskResumeAll>
 8038ad2:	4603      	mov	r3, r0
 8038ad4:	2b00      	cmp	r3, #0
 8038ad6:	d10a      	bne.n	8038aee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8038ad8:	4b09      	ldr	r3, [pc, #36]	; (8038b00 <prvProcessTimerOrBlockTask+0x98>)
 8038ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038ade:	601a      	str	r2, [r3, #0]
 8038ae0:	f3bf 8f4f 	dsb	sy
 8038ae4:	f3bf 8f6f 	isb	sy
}
 8038ae8:	e001      	b.n	8038aee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8038aea:	f7fe ff67 	bl	80379bc <xTaskResumeAll>
}
 8038aee:	bf00      	nop
 8038af0:	3710      	adds	r7, #16
 8038af2:	46bd      	mov	sp, r7
 8038af4:	bd80      	pop	{r7, pc}
 8038af6:	bf00      	nop
 8038af8:	24002dc4 	.word	0x24002dc4
 8038afc:	24002dc8 	.word	0x24002dc8
 8038b00:	e000ed04 	.word	0xe000ed04

08038b04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8038b04:	b480      	push	{r7}
 8038b06:	b085      	sub	sp, #20
 8038b08:	af00      	add	r7, sp, #0
 8038b0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8038b0c:	4b0e      	ldr	r3, [pc, #56]	; (8038b48 <prvGetNextExpireTime+0x44>)
 8038b0e:	681b      	ldr	r3, [r3, #0]
 8038b10:	681b      	ldr	r3, [r3, #0]
 8038b12:	2b00      	cmp	r3, #0
 8038b14:	d101      	bne.n	8038b1a <prvGetNextExpireTime+0x16>
 8038b16:	2201      	movs	r2, #1
 8038b18:	e000      	b.n	8038b1c <prvGetNextExpireTime+0x18>
 8038b1a:	2200      	movs	r2, #0
 8038b1c:	687b      	ldr	r3, [r7, #4]
 8038b1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8038b20:	687b      	ldr	r3, [r7, #4]
 8038b22:	681b      	ldr	r3, [r3, #0]
 8038b24:	2b00      	cmp	r3, #0
 8038b26:	d105      	bne.n	8038b34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8038b28:	4b07      	ldr	r3, [pc, #28]	; (8038b48 <prvGetNextExpireTime+0x44>)
 8038b2a:	681b      	ldr	r3, [r3, #0]
 8038b2c:	68db      	ldr	r3, [r3, #12]
 8038b2e:	681b      	ldr	r3, [r3, #0]
 8038b30:	60fb      	str	r3, [r7, #12]
 8038b32:	e001      	b.n	8038b38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8038b34:	2300      	movs	r3, #0
 8038b36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8038b38:	68fb      	ldr	r3, [r7, #12]
}
 8038b3a:	4618      	mov	r0, r3
 8038b3c:	3714      	adds	r7, #20
 8038b3e:	46bd      	mov	sp, r7
 8038b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038b44:	4770      	bx	lr
 8038b46:	bf00      	nop
 8038b48:	24002dc0 	.word	0x24002dc0

08038b4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8038b4c:	b580      	push	{r7, lr}
 8038b4e:	b084      	sub	sp, #16
 8038b50:	af00      	add	r7, sp, #0
 8038b52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8038b54:	f7fe ffce 	bl	8037af4 <xTaskGetTickCount>
 8038b58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8038b5a:	4b0b      	ldr	r3, [pc, #44]	; (8038b88 <prvSampleTimeNow+0x3c>)
 8038b5c:	681b      	ldr	r3, [r3, #0]
 8038b5e:	68fa      	ldr	r2, [r7, #12]
 8038b60:	429a      	cmp	r2, r3
 8038b62:	d205      	bcs.n	8038b70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8038b64:	f000 f936 	bl	8038dd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8038b68:	687b      	ldr	r3, [r7, #4]
 8038b6a:	2201      	movs	r2, #1
 8038b6c:	601a      	str	r2, [r3, #0]
 8038b6e:	e002      	b.n	8038b76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8038b70:	687b      	ldr	r3, [r7, #4]
 8038b72:	2200      	movs	r2, #0
 8038b74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8038b76:	4a04      	ldr	r2, [pc, #16]	; (8038b88 <prvSampleTimeNow+0x3c>)
 8038b78:	68fb      	ldr	r3, [r7, #12]
 8038b7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8038b7c:	68fb      	ldr	r3, [r7, #12]
}
 8038b7e:	4618      	mov	r0, r3
 8038b80:	3710      	adds	r7, #16
 8038b82:	46bd      	mov	sp, r7
 8038b84:	bd80      	pop	{r7, pc}
 8038b86:	bf00      	nop
 8038b88:	24002dd0 	.word	0x24002dd0

08038b8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8038b8c:	b580      	push	{r7, lr}
 8038b8e:	b086      	sub	sp, #24
 8038b90:	af00      	add	r7, sp, #0
 8038b92:	60f8      	str	r0, [r7, #12]
 8038b94:	60b9      	str	r1, [r7, #8]
 8038b96:	607a      	str	r2, [r7, #4]
 8038b98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8038b9a:	2300      	movs	r3, #0
 8038b9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8038b9e:	68fb      	ldr	r3, [r7, #12]
 8038ba0:	68ba      	ldr	r2, [r7, #8]
 8038ba2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8038ba4:	68fb      	ldr	r3, [r7, #12]
 8038ba6:	68fa      	ldr	r2, [r7, #12]
 8038ba8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8038baa:	68ba      	ldr	r2, [r7, #8]
 8038bac:	687b      	ldr	r3, [r7, #4]
 8038bae:	429a      	cmp	r2, r3
 8038bb0:	d812      	bhi.n	8038bd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8038bb2:	687a      	ldr	r2, [r7, #4]
 8038bb4:	683b      	ldr	r3, [r7, #0]
 8038bb6:	1ad2      	subs	r2, r2, r3
 8038bb8:	68fb      	ldr	r3, [r7, #12]
 8038bba:	699b      	ldr	r3, [r3, #24]
 8038bbc:	429a      	cmp	r2, r3
 8038bbe:	d302      	bcc.n	8038bc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8038bc0:	2301      	movs	r3, #1
 8038bc2:	617b      	str	r3, [r7, #20]
 8038bc4:	e01b      	b.n	8038bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8038bc6:	4b10      	ldr	r3, [pc, #64]	; (8038c08 <prvInsertTimerInActiveList+0x7c>)
 8038bc8:	681a      	ldr	r2, [r3, #0]
 8038bca:	68fb      	ldr	r3, [r7, #12]
 8038bcc:	3304      	adds	r3, #4
 8038bce:	4619      	mov	r1, r3
 8038bd0:	4610      	mov	r0, r2
 8038bd2:	f7fd fc68 	bl	80364a6 <vListInsert>
 8038bd6:	e012      	b.n	8038bfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8038bd8:	687a      	ldr	r2, [r7, #4]
 8038bda:	683b      	ldr	r3, [r7, #0]
 8038bdc:	429a      	cmp	r2, r3
 8038bde:	d206      	bcs.n	8038bee <prvInsertTimerInActiveList+0x62>
 8038be0:	68ba      	ldr	r2, [r7, #8]
 8038be2:	683b      	ldr	r3, [r7, #0]
 8038be4:	429a      	cmp	r2, r3
 8038be6:	d302      	bcc.n	8038bee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8038be8:	2301      	movs	r3, #1
 8038bea:	617b      	str	r3, [r7, #20]
 8038bec:	e007      	b.n	8038bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8038bee:	4b07      	ldr	r3, [pc, #28]	; (8038c0c <prvInsertTimerInActiveList+0x80>)
 8038bf0:	681a      	ldr	r2, [r3, #0]
 8038bf2:	68fb      	ldr	r3, [r7, #12]
 8038bf4:	3304      	adds	r3, #4
 8038bf6:	4619      	mov	r1, r3
 8038bf8:	4610      	mov	r0, r2
 8038bfa:	f7fd fc54 	bl	80364a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8038bfe:	697b      	ldr	r3, [r7, #20]
}
 8038c00:	4618      	mov	r0, r3
 8038c02:	3718      	adds	r7, #24
 8038c04:	46bd      	mov	sp, r7
 8038c06:	bd80      	pop	{r7, pc}
 8038c08:	24002dc4 	.word	0x24002dc4
 8038c0c:	24002dc0 	.word	0x24002dc0

08038c10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8038c10:	b580      	push	{r7, lr}
 8038c12:	b08e      	sub	sp, #56	; 0x38
 8038c14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8038c16:	e0ca      	b.n	8038dae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8038c18:	687b      	ldr	r3, [r7, #4]
 8038c1a:	2b00      	cmp	r3, #0
 8038c1c:	da18      	bge.n	8038c50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8038c1e:	1d3b      	adds	r3, r7, #4
 8038c20:	3304      	adds	r3, #4
 8038c22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8038c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038c26:	2b00      	cmp	r3, #0
 8038c28:	d10a      	bne.n	8038c40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8038c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038c2e:	f383 8811 	msr	BASEPRI, r3
 8038c32:	f3bf 8f6f 	isb	sy
 8038c36:	f3bf 8f4f 	dsb	sy
 8038c3a:	61fb      	str	r3, [r7, #28]
}
 8038c3c:	bf00      	nop
 8038c3e:	e7fe      	b.n	8038c3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8038c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038c42:	681b      	ldr	r3, [r3, #0]
 8038c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8038c46:	6850      	ldr	r0, [r2, #4]
 8038c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8038c4a:	6892      	ldr	r2, [r2, #8]
 8038c4c:	4611      	mov	r1, r2
 8038c4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8038c50:	687b      	ldr	r3, [r7, #4]
 8038c52:	2b00      	cmp	r3, #0
 8038c54:	f2c0 80aa 	blt.w	8038dac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8038c58:	68fb      	ldr	r3, [r7, #12]
 8038c5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8038c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038c5e:	695b      	ldr	r3, [r3, #20]
 8038c60:	2b00      	cmp	r3, #0
 8038c62:	d004      	beq.n	8038c6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8038c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038c66:	3304      	adds	r3, #4
 8038c68:	4618      	mov	r0, r3
 8038c6a:	f7fd fc55 	bl	8036518 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8038c6e:	463b      	mov	r3, r7
 8038c70:	4618      	mov	r0, r3
 8038c72:	f7ff ff6b 	bl	8038b4c <prvSampleTimeNow>
 8038c76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8038c78:	687b      	ldr	r3, [r7, #4]
 8038c7a:	2b09      	cmp	r3, #9
 8038c7c:	f200 8097 	bhi.w	8038dae <prvProcessReceivedCommands+0x19e>
 8038c80:	a201      	add	r2, pc, #4	; (adr r2, 8038c88 <prvProcessReceivedCommands+0x78>)
 8038c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8038c86:	bf00      	nop
 8038c88:	08038cb1 	.word	0x08038cb1
 8038c8c:	08038cb1 	.word	0x08038cb1
 8038c90:	08038cb1 	.word	0x08038cb1
 8038c94:	08038d25 	.word	0x08038d25
 8038c98:	08038d39 	.word	0x08038d39
 8038c9c:	08038d83 	.word	0x08038d83
 8038ca0:	08038cb1 	.word	0x08038cb1
 8038ca4:	08038cb1 	.word	0x08038cb1
 8038ca8:	08038d25 	.word	0x08038d25
 8038cac:	08038d39 	.word	0x08038d39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8038cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038cb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038cb6:	f043 0301 	orr.w	r3, r3, #1
 8038cba:	b2da      	uxtb	r2, r3
 8038cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8038cc2:	68ba      	ldr	r2, [r7, #8]
 8038cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038cc6:	699b      	ldr	r3, [r3, #24]
 8038cc8:	18d1      	adds	r1, r2, r3
 8038cca:	68bb      	ldr	r3, [r7, #8]
 8038ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8038cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038cd0:	f7ff ff5c 	bl	8038b8c <prvInsertTimerInActiveList>
 8038cd4:	4603      	mov	r3, r0
 8038cd6:	2b00      	cmp	r3, #0
 8038cd8:	d069      	beq.n	8038dae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8038cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038cdc:	6a1b      	ldr	r3, [r3, #32]
 8038cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038ce0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8038ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038ce8:	f003 0304 	and.w	r3, r3, #4
 8038cec:	2b00      	cmp	r3, #0
 8038cee:	d05e      	beq.n	8038dae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8038cf0:	68ba      	ldr	r2, [r7, #8]
 8038cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038cf4:	699b      	ldr	r3, [r3, #24]
 8038cf6:	441a      	add	r2, r3
 8038cf8:	2300      	movs	r3, #0
 8038cfa:	9300      	str	r3, [sp, #0]
 8038cfc:	2300      	movs	r3, #0
 8038cfe:	2100      	movs	r1, #0
 8038d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038d02:	f7ff fe05 	bl	8038910 <xTimerGenericCommand>
 8038d06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8038d08:	6a3b      	ldr	r3, [r7, #32]
 8038d0a:	2b00      	cmp	r3, #0
 8038d0c:	d14f      	bne.n	8038dae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8038d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038d12:	f383 8811 	msr	BASEPRI, r3
 8038d16:	f3bf 8f6f 	isb	sy
 8038d1a:	f3bf 8f4f 	dsb	sy
 8038d1e:	61bb      	str	r3, [r7, #24]
}
 8038d20:	bf00      	nop
 8038d22:	e7fe      	b.n	8038d22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8038d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038d2a:	f023 0301 	bic.w	r3, r3, #1
 8038d2e:	b2da      	uxtb	r2, r3
 8038d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8038d36:	e03a      	b.n	8038dae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8038d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038d3e:	f043 0301 	orr.w	r3, r3, #1
 8038d42:	b2da      	uxtb	r2, r3
 8038d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8038d4a:	68ba      	ldr	r2, [r7, #8]
 8038d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8038d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d52:	699b      	ldr	r3, [r3, #24]
 8038d54:	2b00      	cmp	r3, #0
 8038d56:	d10a      	bne.n	8038d6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8038d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038d5c:	f383 8811 	msr	BASEPRI, r3
 8038d60:	f3bf 8f6f 	isb	sy
 8038d64:	f3bf 8f4f 	dsb	sy
 8038d68:	617b      	str	r3, [r7, #20]
}
 8038d6a:	bf00      	nop
 8038d6c:	e7fe      	b.n	8038d6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8038d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d70:	699a      	ldr	r2, [r3, #24]
 8038d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038d74:	18d1      	adds	r1, r2, r3
 8038d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8038d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038d7c:	f7ff ff06 	bl	8038b8c <prvInsertTimerInActiveList>
					break;
 8038d80:	e015      	b.n	8038dae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8038d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038d88:	f003 0302 	and.w	r3, r3, #2
 8038d8c:	2b00      	cmp	r3, #0
 8038d8e:	d103      	bne.n	8038d98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8038d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038d92:	f000 fbdd 	bl	8039550 <vPortFree>
 8038d96:	e00a      	b.n	8038dae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8038d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038d9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038d9e:	f023 0301 	bic.w	r3, r3, #1
 8038da2:	b2da      	uxtb	r2, r3
 8038da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8038daa:	e000      	b.n	8038dae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8038dac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8038dae:	4b08      	ldr	r3, [pc, #32]	; (8038dd0 <prvProcessReceivedCommands+0x1c0>)
 8038db0:	681b      	ldr	r3, [r3, #0]
 8038db2:	1d39      	adds	r1, r7, #4
 8038db4:	2200      	movs	r2, #0
 8038db6:	4618      	mov	r0, r3
 8038db8:	f7fd ff84 	bl	8036cc4 <xQueueReceive>
 8038dbc:	4603      	mov	r3, r0
 8038dbe:	2b00      	cmp	r3, #0
 8038dc0:	f47f af2a 	bne.w	8038c18 <prvProcessReceivedCommands+0x8>
	}
}
 8038dc4:	bf00      	nop
 8038dc6:	bf00      	nop
 8038dc8:	3730      	adds	r7, #48	; 0x30
 8038dca:	46bd      	mov	sp, r7
 8038dcc:	bd80      	pop	{r7, pc}
 8038dce:	bf00      	nop
 8038dd0:	24002dc8 	.word	0x24002dc8

08038dd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8038dd4:	b580      	push	{r7, lr}
 8038dd6:	b088      	sub	sp, #32
 8038dd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8038dda:	e048      	b.n	8038e6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8038ddc:	4b2d      	ldr	r3, [pc, #180]	; (8038e94 <prvSwitchTimerLists+0xc0>)
 8038dde:	681b      	ldr	r3, [r3, #0]
 8038de0:	68db      	ldr	r3, [r3, #12]
 8038de2:	681b      	ldr	r3, [r3, #0]
 8038de4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8038de6:	4b2b      	ldr	r3, [pc, #172]	; (8038e94 <prvSwitchTimerLists+0xc0>)
 8038de8:	681b      	ldr	r3, [r3, #0]
 8038dea:	68db      	ldr	r3, [r3, #12]
 8038dec:	68db      	ldr	r3, [r3, #12]
 8038dee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8038df0:	68fb      	ldr	r3, [r7, #12]
 8038df2:	3304      	adds	r3, #4
 8038df4:	4618      	mov	r0, r3
 8038df6:	f7fd fb8f 	bl	8036518 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8038dfa:	68fb      	ldr	r3, [r7, #12]
 8038dfc:	6a1b      	ldr	r3, [r3, #32]
 8038dfe:	68f8      	ldr	r0, [r7, #12]
 8038e00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8038e02:	68fb      	ldr	r3, [r7, #12]
 8038e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8038e08:	f003 0304 	and.w	r3, r3, #4
 8038e0c:	2b00      	cmp	r3, #0
 8038e0e:	d02e      	beq.n	8038e6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8038e10:	68fb      	ldr	r3, [r7, #12]
 8038e12:	699b      	ldr	r3, [r3, #24]
 8038e14:	693a      	ldr	r2, [r7, #16]
 8038e16:	4413      	add	r3, r2
 8038e18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8038e1a:	68ba      	ldr	r2, [r7, #8]
 8038e1c:	693b      	ldr	r3, [r7, #16]
 8038e1e:	429a      	cmp	r2, r3
 8038e20:	d90e      	bls.n	8038e40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8038e22:	68fb      	ldr	r3, [r7, #12]
 8038e24:	68ba      	ldr	r2, [r7, #8]
 8038e26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8038e28:	68fb      	ldr	r3, [r7, #12]
 8038e2a:	68fa      	ldr	r2, [r7, #12]
 8038e2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8038e2e:	4b19      	ldr	r3, [pc, #100]	; (8038e94 <prvSwitchTimerLists+0xc0>)
 8038e30:	681a      	ldr	r2, [r3, #0]
 8038e32:	68fb      	ldr	r3, [r7, #12]
 8038e34:	3304      	adds	r3, #4
 8038e36:	4619      	mov	r1, r3
 8038e38:	4610      	mov	r0, r2
 8038e3a:	f7fd fb34 	bl	80364a6 <vListInsert>
 8038e3e:	e016      	b.n	8038e6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8038e40:	2300      	movs	r3, #0
 8038e42:	9300      	str	r3, [sp, #0]
 8038e44:	2300      	movs	r3, #0
 8038e46:	693a      	ldr	r2, [r7, #16]
 8038e48:	2100      	movs	r1, #0
 8038e4a:	68f8      	ldr	r0, [r7, #12]
 8038e4c:	f7ff fd60 	bl	8038910 <xTimerGenericCommand>
 8038e50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8038e52:	687b      	ldr	r3, [r7, #4]
 8038e54:	2b00      	cmp	r3, #0
 8038e56:	d10a      	bne.n	8038e6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8038e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038e5c:	f383 8811 	msr	BASEPRI, r3
 8038e60:	f3bf 8f6f 	isb	sy
 8038e64:	f3bf 8f4f 	dsb	sy
 8038e68:	603b      	str	r3, [r7, #0]
}
 8038e6a:	bf00      	nop
 8038e6c:	e7fe      	b.n	8038e6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8038e6e:	4b09      	ldr	r3, [pc, #36]	; (8038e94 <prvSwitchTimerLists+0xc0>)
 8038e70:	681b      	ldr	r3, [r3, #0]
 8038e72:	681b      	ldr	r3, [r3, #0]
 8038e74:	2b00      	cmp	r3, #0
 8038e76:	d1b1      	bne.n	8038ddc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8038e78:	4b06      	ldr	r3, [pc, #24]	; (8038e94 <prvSwitchTimerLists+0xc0>)
 8038e7a:	681b      	ldr	r3, [r3, #0]
 8038e7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8038e7e:	4b06      	ldr	r3, [pc, #24]	; (8038e98 <prvSwitchTimerLists+0xc4>)
 8038e80:	681b      	ldr	r3, [r3, #0]
 8038e82:	4a04      	ldr	r2, [pc, #16]	; (8038e94 <prvSwitchTimerLists+0xc0>)
 8038e84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8038e86:	4a04      	ldr	r2, [pc, #16]	; (8038e98 <prvSwitchTimerLists+0xc4>)
 8038e88:	697b      	ldr	r3, [r7, #20]
 8038e8a:	6013      	str	r3, [r2, #0]
}
 8038e8c:	bf00      	nop
 8038e8e:	3718      	adds	r7, #24
 8038e90:	46bd      	mov	sp, r7
 8038e92:	bd80      	pop	{r7, pc}
 8038e94:	24002dc0 	.word	0x24002dc0
 8038e98:	24002dc4 	.word	0x24002dc4

08038e9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8038e9c:	b580      	push	{r7, lr}
 8038e9e:	b082      	sub	sp, #8
 8038ea0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8038ea2:	f000 f967 	bl	8039174 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8038ea6:	4b15      	ldr	r3, [pc, #84]	; (8038efc <prvCheckForValidListAndQueue+0x60>)
 8038ea8:	681b      	ldr	r3, [r3, #0]
 8038eaa:	2b00      	cmp	r3, #0
 8038eac:	d120      	bne.n	8038ef0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8038eae:	4814      	ldr	r0, [pc, #80]	; (8038f00 <prvCheckForValidListAndQueue+0x64>)
 8038eb0:	f7fd faa8 	bl	8036404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8038eb4:	4813      	ldr	r0, [pc, #76]	; (8038f04 <prvCheckForValidListAndQueue+0x68>)
 8038eb6:	f7fd faa5 	bl	8036404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8038eba:	4b13      	ldr	r3, [pc, #76]	; (8038f08 <prvCheckForValidListAndQueue+0x6c>)
 8038ebc:	4a10      	ldr	r2, [pc, #64]	; (8038f00 <prvCheckForValidListAndQueue+0x64>)
 8038ebe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8038ec0:	4b12      	ldr	r3, [pc, #72]	; (8038f0c <prvCheckForValidListAndQueue+0x70>)
 8038ec2:	4a10      	ldr	r2, [pc, #64]	; (8038f04 <prvCheckForValidListAndQueue+0x68>)
 8038ec4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8038ec6:	2300      	movs	r3, #0
 8038ec8:	9300      	str	r3, [sp, #0]
 8038eca:	4b11      	ldr	r3, [pc, #68]	; (8038f10 <prvCheckForValidListAndQueue+0x74>)
 8038ecc:	4a11      	ldr	r2, [pc, #68]	; (8038f14 <prvCheckForValidListAndQueue+0x78>)
 8038ece:	2110      	movs	r1, #16
 8038ed0:	200a      	movs	r0, #10
 8038ed2:	f7fd fbb3 	bl	803663c <xQueueGenericCreateStatic>
 8038ed6:	4603      	mov	r3, r0
 8038ed8:	4a08      	ldr	r2, [pc, #32]	; (8038efc <prvCheckForValidListAndQueue+0x60>)
 8038eda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8038edc:	4b07      	ldr	r3, [pc, #28]	; (8038efc <prvCheckForValidListAndQueue+0x60>)
 8038ede:	681b      	ldr	r3, [r3, #0]
 8038ee0:	2b00      	cmp	r3, #0
 8038ee2:	d005      	beq.n	8038ef0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8038ee4:	4b05      	ldr	r3, [pc, #20]	; (8038efc <prvCheckForValidListAndQueue+0x60>)
 8038ee6:	681b      	ldr	r3, [r3, #0]
 8038ee8:	490b      	ldr	r1, [pc, #44]	; (8038f18 <prvCheckForValidListAndQueue+0x7c>)
 8038eea:	4618      	mov	r0, r3
 8038eec:	f7fe faa2 	bl	8037434 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8038ef0:	f000 f970 	bl	80391d4 <vPortExitCritical>
}
 8038ef4:	bf00      	nop
 8038ef6:	46bd      	mov	sp, r7
 8038ef8:	bd80      	pop	{r7, pc}
 8038efa:	bf00      	nop
 8038efc:	24002dc8 	.word	0x24002dc8
 8038f00:	24002d98 	.word	0x24002d98
 8038f04:	24002dac 	.word	0x24002dac
 8038f08:	24002dc0 	.word	0x24002dc0
 8038f0c:	24002dc4 	.word	0x24002dc4
 8038f10:	24002e74 	.word	0x24002e74
 8038f14:	24002dd4 	.word	0x24002dd4
 8038f18:	0803b844 	.word	0x0803b844

08038f1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8038f1c:	b480      	push	{r7}
 8038f1e:	b085      	sub	sp, #20
 8038f20:	af00      	add	r7, sp, #0
 8038f22:	60f8      	str	r0, [r7, #12]
 8038f24:	60b9      	str	r1, [r7, #8]
 8038f26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8038f28:	68fb      	ldr	r3, [r7, #12]
 8038f2a:	3b04      	subs	r3, #4
 8038f2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8038f2e:	68fb      	ldr	r3, [r7, #12]
 8038f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8038f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8038f36:	68fb      	ldr	r3, [r7, #12]
 8038f38:	3b04      	subs	r3, #4
 8038f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8038f3c:	68bb      	ldr	r3, [r7, #8]
 8038f3e:	f023 0201 	bic.w	r2, r3, #1
 8038f42:	68fb      	ldr	r3, [r7, #12]
 8038f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8038f46:	68fb      	ldr	r3, [r7, #12]
 8038f48:	3b04      	subs	r3, #4
 8038f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8038f4c:	4a0c      	ldr	r2, [pc, #48]	; (8038f80 <pxPortInitialiseStack+0x64>)
 8038f4e:	68fb      	ldr	r3, [r7, #12]
 8038f50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8038f52:	68fb      	ldr	r3, [r7, #12]
 8038f54:	3b14      	subs	r3, #20
 8038f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8038f58:	687a      	ldr	r2, [r7, #4]
 8038f5a:	68fb      	ldr	r3, [r7, #12]
 8038f5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8038f5e:	68fb      	ldr	r3, [r7, #12]
 8038f60:	3b04      	subs	r3, #4
 8038f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8038f64:	68fb      	ldr	r3, [r7, #12]
 8038f66:	f06f 0202 	mvn.w	r2, #2
 8038f6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8038f6c:	68fb      	ldr	r3, [r7, #12]
 8038f6e:	3b20      	subs	r3, #32
 8038f70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8038f72:	68fb      	ldr	r3, [r7, #12]
}
 8038f74:	4618      	mov	r0, r3
 8038f76:	3714      	adds	r7, #20
 8038f78:	46bd      	mov	sp, r7
 8038f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f7e:	4770      	bx	lr
 8038f80:	08038f85 	.word	0x08038f85

08038f84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8038f84:	b480      	push	{r7}
 8038f86:	b085      	sub	sp, #20
 8038f88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8038f8a:	2300      	movs	r3, #0
 8038f8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8038f8e:	4b12      	ldr	r3, [pc, #72]	; (8038fd8 <prvTaskExitError+0x54>)
 8038f90:	681b      	ldr	r3, [r3, #0]
 8038f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8038f96:	d00a      	beq.n	8038fae <prvTaskExitError+0x2a>
	__asm volatile
 8038f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038f9c:	f383 8811 	msr	BASEPRI, r3
 8038fa0:	f3bf 8f6f 	isb	sy
 8038fa4:	f3bf 8f4f 	dsb	sy
 8038fa8:	60fb      	str	r3, [r7, #12]
}
 8038faa:	bf00      	nop
 8038fac:	e7fe      	b.n	8038fac <prvTaskExitError+0x28>
	__asm volatile
 8038fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038fb2:	f383 8811 	msr	BASEPRI, r3
 8038fb6:	f3bf 8f6f 	isb	sy
 8038fba:	f3bf 8f4f 	dsb	sy
 8038fbe:	60bb      	str	r3, [r7, #8]
}
 8038fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8038fc2:	bf00      	nop
 8038fc4:	687b      	ldr	r3, [r7, #4]
 8038fc6:	2b00      	cmp	r3, #0
 8038fc8:	d0fc      	beq.n	8038fc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8038fca:	bf00      	nop
 8038fcc:	bf00      	nop
 8038fce:	3714      	adds	r7, #20
 8038fd0:	46bd      	mov	sp, r7
 8038fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038fd6:	4770      	bx	lr
 8038fd8:	24000030 	.word	0x24000030
 8038fdc:	00000000 	.word	0x00000000

08038fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8038fe0:	4b07      	ldr	r3, [pc, #28]	; (8039000 <pxCurrentTCBConst2>)
 8038fe2:	6819      	ldr	r1, [r3, #0]
 8038fe4:	6808      	ldr	r0, [r1, #0]
 8038fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8038fea:	f380 8809 	msr	PSP, r0
 8038fee:	f3bf 8f6f 	isb	sy
 8038ff2:	f04f 0000 	mov.w	r0, #0
 8038ff6:	f380 8811 	msr	BASEPRI, r0
 8038ffa:	4770      	bx	lr
 8038ffc:	f3af 8000 	nop.w

08039000 <pxCurrentTCBConst2>:
 8039000:	24002c6c 	.word	0x24002c6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8039004:	bf00      	nop
 8039006:	bf00      	nop

08039008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8039008:	4808      	ldr	r0, [pc, #32]	; (803902c <prvPortStartFirstTask+0x24>)
 803900a:	6800      	ldr	r0, [r0, #0]
 803900c:	6800      	ldr	r0, [r0, #0]
 803900e:	f380 8808 	msr	MSP, r0
 8039012:	f04f 0000 	mov.w	r0, #0
 8039016:	f380 8814 	msr	CONTROL, r0
 803901a:	b662      	cpsie	i
 803901c:	b661      	cpsie	f
 803901e:	f3bf 8f4f 	dsb	sy
 8039022:	f3bf 8f6f 	isb	sy
 8039026:	df00      	svc	0
 8039028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 803902a:	bf00      	nop
 803902c:	e000ed08 	.word	0xe000ed08

08039030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8039030:	b580      	push	{r7, lr}
 8039032:	b086      	sub	sp, #24
 8039034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8039036:	4b46      	ldr	r3, [pc, #280]	; (8039150 <xPortStartScheduler+0x120>)
 8039038:	681b      	ldr	r3, [r3, #0]
 803903a:	4a46      	ldr	r2, [pc, #280]	; (8039154 <xPortStartScheduler+0x124>)
 803903c:	4293      	cmp	r3, r2
 803903e:	d10a      	bne.n	8039056 <xPortStartScheduler+0x26>
	__asm volatile
 8039040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039044:	f383 8811 	msr	BASEPRI, r3
 8039048:	f3bf 8f6f 	isb	sy
 803904c:	f3bf 8f4f 	dsb	sy
 8039050:	613b      	str	r3, [r7, #16]
}
 8039052:	bf00      	nop
 8039054:	e7fe      	b.n	8039054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8039056:	4b3e      	ldr	r3, [pc, #248]	; (8039150 <xPortStartScheduler+0x120>)
 8039058:	681b      	ldr	r3, [r3, #0]
 803905a:	4a3f      	ldr	r2, [pc, #252]	; (8039158 <xPortStartScheduler+0x128>)
 803905c:	4293      	cmp	r3, r2
 803905e:	d10a      	bne.n	8039076 <xPortStartScheduler+0x46>
	__asm volatile
 8039060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039064:	f383 8811 	msr	BASEPRI, r3
 8039068:	f3bf 8f6f 	isb	sy
 803906c:	f3bf 8f4f 	dsb	sy
 8039070:	60fb      	str	r3, [r7, #12]
}
 8039072:	bf00      	nop
 8039074:	e7fe      	b.n	8039074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8039076:	4b39      	ldr	r3, [pc, #228]	; (803915c <xPortStartScheduler+0x12c>)
 8039078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 803907a:	697b      	ldr	r3, [r7, #20]
 803907c:	781b      	ldrb	r3, [r3, #0]
 803907e:	b2db      	uxtb	r3, r3
 8039080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8039082:	697b      	ldr	r3, [r7, #20]
 8039084:	22ff      	movs	r2, #255	; 0xff
 8039086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8039088:	697b      	ldr	r3, [r7, #20]
 803908a:	781b      	ldrb	r3, [r3, #0]
 803908c:	b2db      	uxtb	r3, r3
 803908e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8039090:	78fb      	ldrb	r3, [r7, #3]
 8039092:	b2db      	uxtb	r3, r3
 8039094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8039098:	b2da      	uxtb	r2, r3
 803909a:	4b31      	ldr	r3, [pc, #196]	; (8039160 <xPortStartScheduler+0x130>)
 803909c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 803909e:	4b31      	ldr	r3, [pc, #196]	; (8039164 <xPortStartScheduler+0x134>)
 80390a0:	2207      	movs	r2, #7
 80390a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80390a4:	e009      	b.n	80390ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80390a6:	4b2f      	ldr	r3, [pc, #188]	; (8039164 <xPortStartScheduler+0x134>)
 80390a8:	681b      	ldr	r3, [r3, #0]
 80390aa:	3b01      	subs	r3, #1
 80390ac:	4a2d      	ldr	r2, [pc, #180]	; (8039164 <xPortStartScheduler+0x134>)
 80390ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80390b0:	78fb      	ldrb	r3, [r7, #3]
 80390b2:	b2db      	uxtb	r3, r3
 80390b4:	005b      	lsls	r3, r3, #1
 80390b6:	b2db      	uxtb	r3, r3
 80390b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80390ba:	78fb      	ldrb	r3, [r7, #3]
 80390bc:	b2db      	uxtb	r3, r3
 80390be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80390c2:	2b80      	cmp	r3, #128	; 0x80
 80390c4:	d0ef      	beq.n	80390a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80390c6:	4b27      	ldr	r3, [pc, #156]	; (8039164 <xPortStartScheduler+0x134>)
 80390c8:	681b      	ldr	r3, [r3, #0]
 80390ca:	f1c3 0307 	rsb	r3, r3, #7
 80390ce:	2b04      	cmp	r3, #4
 80390d0:	d00a      	beq.n	80390e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80390d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80390d6:	f383 8811 	msr	BASEPRI, r3
 80390da:	f3bf 8f6f 	isb	sy
 80390de:	f3bf 8f4f 	dsb	sy
 80390e2:	60bb      	str	r3, [r7, #8]
}
 80390e4:	bf00      	nop
 80390e6:	e7fe      	b.n	80390e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80390e8:	4b1e      	ldr	r3, [pc, #120]	; (8039164 <xPortStartScheduler+0x134>)
 80390ea:	681b      	ldr	r3, [r3, #0]
 80390ec:	021b      	lsls	r3, r3, #8
 80390ee:	4a1d      	ldr	r2, [pc, #116]	; (8039164 <xPortStartScheduler+0x134>)
 80390f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80390f2:	4b1c      	ldr	r3, [pc, #112]	; (8039164 <xPortStartScheduler+0x134>)
 80390f4:	681b      	ldr	r3, [r3, #0]
 80390f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80390fa:	4a1a      	ldr	r2, [pc, #104]	; (8039164 <xPortStartScheduler+0x134>)
 80390fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80390fe:	687b      	ldr	r3, [r7, #4]
 8039100:	b2da      	uxtb	r2, r3
 8039102:	697b      	ldr	r3, [r7, #20]
 8039104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8039106:	4b18      	ldr	r3, [pc, #96]	; (8039168 <xPortStartScheduler+0x138>)
 8039108:	681b      	ldr	r3, [r3, #0]
 803910a:	4a17      	ldr	r2, [pc, #92]	; (8039168 <xPortStartScheduler+0x138>)
 803910c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8039110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8039112:	4b15      	ldr	r3, [pc, #84]	; (8039168 <xPortStartScheduler+0x138>)
 8039114:	681b      	ldr	r3, [r3, #0]
 8039116:	4a14      	ldr	r2, [pc, #80]	; (8039168 <xPortStartScheduler+0x138>)
 8039118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 803911c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 803911e:	f000 f8dd 	bl	80392dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8039122:	4b12      	ldr	r3, [pc, #72]	; (803916c <xPortStartScheduler+0x13c>)
 8039124:	2200      	movs	r2, #0
 8039126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8039128:	f000 f8fc 	bl	8039324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 803912c:	4b10      	ldr	r3, [pc, #64]	; (8039170 <xPortStartScheduler+0x140>)
 803912e:	681b      	ldr	r3, [r3, #0]
 8039130:	4a0f      	ldr	r2, [pc, #60]	; (8039170 <xPortStartScheduler+0x140>)
 8039132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8039136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8039138:	f7ff ff66 	bl	8039008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 803913c:	f7fe fda2 	bl	8037c84 <vTaskSwitchContext>
	prvTaskExitError();
 8039140:	f7ff ff20 	bl	8038f84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8039144:	2300      	movs	r3, #0
}
 8039146:	4618      	mov	r0, r3
 8039148:	3718      	adds	r7, #24
 803914a:	46bd      	mov	sp, r7
 803914c:	bd80      	pop	{r7, pc}
 803914e:	bf00      	nop
 8039150:	e000ed00 	.word	0xe000ed00
 8039154:	410fc271 	.word	0x410fc271
 8039158:	410fc270 	.word	0x410fc270
 803915c:	e000e400 	.word	0xe000e400
 8039160:	24002ebc 	.word	0x24002ebc
 8039164:	24002ec0 	.word	0x24002ec0
 8039168:	e000ed20 	.word	0xe000ed20
 803916c:	24000030 	.word	0x24000030
 8039170:	e000ef34 	.word	0xe000ef34

08039174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8039174:	b480      	push	{r7}
 8039176:	b083      	sub	sp, #12
 8039178:	af00      	add	r7, sp, #0
	__asm volatile
 803917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803917e:	f383 8811 	msr	BASEPRI, r3
 8039182:	f3bf 8f6f 	isb	sy
 8039186:	f3bf 8f4f 	dsb	sy
 803918a:	607b      	str	r3, [r7, #4]
}
 803918c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 803918e:	4b0f      	ldr	r3, [pc, #60]	; (80391cc <vPortEnterCritical+0x58>)
 8039190:	681b      	ldr	r3, [r3, #0]
 8039192:	3301      	adds	r3, #1
 8039194:	4a0d      	ldr	r2, [pc, #52]	; (80391cc <vPortEnterCritical+0x58>)
 8039196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8039198:	4b0c      	ldr	r3, [pc, #48]	; (80391cc <vPortEnterCritical+0x58>)
 803919a:	681b      	ldr	r3, [r3, #0]
 803919c:	2b01      	cmp	r3, #1
 803919e:	d10f      	bne.n	80391c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80391a0:	4b0b      	ldr	r3, [pc, #44]	; (80391d0 <vPortEnterCritical+0x5c>)
 80391a2:	681b      	ldr	r3, [r3, #0]
 80391a4:	b2db      	uxtb	r3, r3
 80391a6:	2b00      	cmp	r3, #0
 80391a8:	d00a      	beq.n	80391c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80391aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80391ae:	f383 8811 	msr	BASEPRI, r3
 80391b2:	f3bf 8f6f 	isb	sy
 80391b6:	f3bf 8f4f 	dsb	sy
 80391ba:	603b      	str	r3, [r7, #0]
}
 80391bc:	bf00      	nop
 80391be:	e7fe      	b.n	80391be <vPortEnterCritical+0x4a>
	}
}
 80391c0:	bf00      	nop
 80391c2:	370c      	adds	r7, #12
 80391c4:	46bd      	mov	sp, r7
 80391c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80391ca:	4770      	bx	lr
 80391cc:	24000030 	.word	0x24000030
 80391d0:	e000ed04 	.word	0xe000ed04

080391d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80391d4:	b480      	push	{r7}
 80391d6:	b083      	sub	sp, #12
 80391d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80391da:	4b12      	ldr	r3, [pc, #72]	; (8039224 <vPortExitCritical+0x50>)
 80391dc:	681b      	ldr	r3, [r3, #0]
 80391de:	2b00      	cmp	r3, #0
 80391e0:	d10a      	bne.n	80391f8 <vPortExitCritical+0x24>
	__asm volatile
 80391e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80391e6:	f383 8811 	msr	BASEPRI, r3
 80391ea:	f3bf 8f6f 	isb	sy
 80391ee:	f3bf 8f4f 	dsb	sy
 80391f2:	607b      	str	r3, [r7, #4]
}
 80391f4:	bf00      	nop
 80391f6:	e7fe      	b.n	80391f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80391f8:	4b0a      	ldr	r3, [pc, #40]	; (8039224 <vPortExitCritical+0x50>)
 80391fa:	681b      	ldr	r3, [r3, #0]
 80391fc:	3b01      	subs	r3, #1
 80391fe:	4a09      	ldr	r2, [pc, #36]	; (8039224 <vPortExitCritical+0x50>)
 8039200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8039202:	4b08      	ldr	r3, [pc, #32]	; (8039224 <vPortExitCritical+0x50>)
 8039204:	681b      	ldr	r3, [r3, #0]
 8039206:	2b00      	cmp	r3, #0
 8039208:	d105      	bne.n	8039216 <vPortExitCritical+0x42>
 803920a:	2300      	movs	r3, #0
 803920c:	603b      	str	r3, [r7, #0]
	__asm volatile
 803920e:	683b      	ldr	r3, [r7, #0]
 8039210:	f383 8811 	msr	BASEPRI, r3
}
 8039214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8039216:	bf00      	nop
 8039218:	370c      	adds	r7, #12
 803921a:	46bd      	mov	sp, r7
 803921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039220:	4770      	bx	lr
 8039222:	bf00      	nop
 8039224:	24000030 	.word	0x24000030
	...

08039230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8039230:	f3ef 8009 	mrs	r0, PSP
 8039234:	f3bf 8f6f 	isb	sy
 8039238:	4b15      	ldr	r3, [pc, #84]	; (8039290 <pxCurrentTCBConst>)
 803923a:	681a      	ldr	r2, [r3, #0]
 803923c:	f01e 0f10 	tst.w	lr, #16
 8039240:	bf08      	it	eq
 8039242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8039246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803924a:	6010      	str	r0, [r2, #0]
 803924c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8039250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8039254:	f380 8811 	msr	BASEPRI, r0
 8039258:	f3bf 8f4f 	dsb	sy
 803925c:	f3bf 8f6f 	isb	sy
 8039260:	f7fe fd10 	bl	8037c84 <vTaskSwitchContext>
 8039264:	f04f 0000 	mov.w	r0, #0
 8039268:	f380 8811 	msr	BASEPRI, r0
 803926c:	bc09      	pop	{r0, r3}
 803926e:	6819      	ldr	r1, [r3, #0]
 8039270:	6808      	ldr	r0, [r1, #0]
 8039272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8039276:	f01e 0f10 	tst.w	lr, #16
 803927a:	bf08      	it	eq
 803927c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8039280:	f380 8809 	msr	PSP, r0
 8039284:	f3bf 8f6f 	isb	sy
 8039288:	4770      	bx	lr
 803928a:	bf00      	nop
 803928c:	f3af 8000 	nop.w

08039290 <pxCurrentTCBConst>:
 8039290:	24002c6c 	.word	0x24002c6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8039294:	bf00      	nop
 8039296:	bf00      	nop

08039298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8039298:	b580      	push	{r7, lr}
 803929a:	b082      	sub	sp, #8
 803929c:	af00      	add	r7, sp, #0
	__asm volatile
 803929e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80392a2:	f383 8811 	msr	BASEPRI, r3
 80392a6:	f3bf 8f6f 	isb	sy
 80392aa:	f3bf 8f4f 	dsb	sy
 80392ae:	607b      	str	r3, [r7, #4]
}
 80392b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80392b2:	f7fe fc2f 	bl	8037b14 <xTaskIncrementTick>
 80392b6:	4603      	mov	r3, r0
 80392b8:	2b00      	cmp	r3, #0
 80392ba:	d003      	beq.n	80392c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80392bc:	4b06      	ldr	r3, [pc, #24]	; (80392d8 <SysTick_Handler+0x40>)
 80392be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80392c2:	601a      	str	r2, [r3, #0]
 80392c4:	2300      	movs	r3, #0
 80392c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80392c8:	683b      	ldr	r3, [r7, #0]
 80392ca:	f383 8811 	msr	BASEPRI, r3
}
 80392ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80392d0:	bf00      	nop
 80392d2:	3708      	adds	r7, #8
 80392d4:	46bd      	mov	sp, r7
 80392d6:	bd80      	pop	{r7, pc}
 80392d8:	e000ed04 	.word	0xe000ed04

080392dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80392dc:	b480      	push	{r7}
 80392de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80392e0:	4b0b      	ldr	r3, [pc, #44]	; (8039310 <vPortSetupTimerInterrupt+0x34>)
 80392e2:	2200      	movs	r2, #0
 80392e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80392e6:	4b0b      	ldr	r3, [pc, #44]	; (8039314 <vPortSetupTimerInterrupt+0x38>)
 80392e8:	2200      	movs	r2, #0
 80392ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80392ec:	4b0a      	ldr	r3, [pc, #40]	; (8039318 <vPortSetupTimerInterrupt+0x3c>)
 80392ee:	681b      	ldr	r3, [r3, #0]
 80392f0:	4a0a      	ldr	r2, [pc, #40]	; (803931c <vPortSetupTimerInterrupt+0x40>)
 80392f2:	fba2 2303 	umull	r2, r3, r2, r3
 80392f6:	099b      	lsrs	r3, r3, #6
 80392f8:	4a09      	ldr	r2, [pc, #36]	; (8039320 <vPortSetupTimerInterrupt+0x44>)
 80392fa:	3b01      	subs	r3, #1
 80392fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80392fe:	4b04      	ldr	r3, [pc, #16]	; (8039310 <vPortSetupTimerInterrupt+0x34>)
 8039300:	2207      	movs	r2, #7
 8039302:	601a      	str	r2, [r3, #0]
}
 8039304:	bf00      	nop
 8039306:	46bd      	mov	sp, r7
 8039308:	f85d 7b04 	ldr.w	r7, [sp], #4
 803930c:	4770      	bx	lr
 803930e:	bf00      	nop
 8039310:	e000e010 	.word	0xe000e010
 8039314:	e000e018 	.word	0xe000e018
 8039318:	24000000 	.word	0x24000000
 803931c:	10624dd3 	.word	0x10624dd3
 8039320:	e000e014 	.word	0xe000e014

08039324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8039324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8039334 <vPortEnableVFP+0x10>
 8039328:	6801      	ldr	r1, [r0, #0]
 803932a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 803932e:	6001      	str	r1, [r0, #0]
 8039330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8039332:	bf00      	nop
 8039334:	e000ed88 	.word	0xe000ed88

08039338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8039338:	b480      	push	{r7}
 803933a:	b085      	sub	sp, #20
 803933c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 803933e:	f3ef 8305 	mrs	r3, IPSR
 8039342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8039344:	68fb      	ldr	r3, [r7, #12]
 8039346:	2b0f      	cmp	r3, #15
 8039348:	d914      	bls.n	8039374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 803934a:	4a17      	ldr	r2, [pc, #92]	; (80393a8 <vPortValidateInterruptPriority+0x70>)
 803934c:	68fb      	ldr	r3, [r7, #12]
 803934e:	4413      	add	r3, r2
 8039350:	781b      	ldrb	r3, [r3, #0]
 8039352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8039354:	4b15      	ldr	r3, [pc, #84]	; (80393ac <vPortValidateInterruptPriority+0x74>)
 8039356:	781b      	ldrb	r3, [r3, #0]
 8039358:	7afa      	ldrb	r2, [r7, #11]
 803935a:	429a      	cmp	r2, r3
 803935c:	d20a      	bcs.n	8039374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 803935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039362:	f383 8811 	msr	BASEPRI, r3
 8039366:	f3bf 8f6f 	isb	sy
 803936a:	f3bf 8f4f 	dsb	sy
 803936e:	607b      	str	r3, [r7, #4]
}
 8039370:	bf00      	nop
 8039372:	e7fe      	b.n	8039372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8039374:	4b0e      	ldr	r3, [pc, #56]	; (80393b0 <vPortValidateInterruptPriority+0x78>)
 8039376:	681b      	ldr	r3, [r3, #0]
 8039378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 803937c:	4b0d      	ldr	r3, [pc, #52]	; (80393b4 <vPortValidateInterruptPriority+0x7c>)
 803937e:	681b      	ldr	r3, [r3, #0]
 8039380:	429a      	cmp	r2, r3
 8039382:	d90a      	bls.n	803939a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8039384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039388:	f383 8811 	msr	BASEPRI, r3
 803938c:	f3bf 8f6f 	isb	sy
 8039390:	f3bf 8f4f 	dsb	sy
 8039394:	603b      	str	r3, [r7, #0]
}
 8039396:	bf00      	nop
 8039398:	e7fe      	b.n	8039398 <vPortValidateInterruptPriority+0x60>
	}
 803939a:	bf00      	nop
 803939c:	3714      	adds	r7, #20
 803939e:	46bd      	mov	sp, r7
 80393a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80393a4:	4770      	bx	lr
 80393a6:	bf00      	nop
 80393a8:	e000e3f0 	.word	0xe000e3f0
 80393ac:	24002ebc 	.word	0x24002ebc
 80393b0:	e000ed0c 	.word	0xe000ed0c
 80393b4:	24002ec0 	.word	0x24002ec0

080393b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80393b8:	b580      	push	{r7, lr}
 80393ba:	b08a      	sub	sp, #40	; 0x28
 80393bc:	af00      	add	r7, sp, #0
 80393be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80393c0:	2300      	movs	r3, #0
 80393c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80393c4:	f7fe faec 	bl	80379a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80393c8:	4b5b      	ldr	r3, [pc, #364]	; (8039538 <pvPortMalloc+0x180>)
 80393ca:	681b      	ldr	r3, [r3, #0]
 80393cc:	2b00      	cmp	r3, #0
 80393ce:	d101      	bne.n	80393d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80393d0:	f000 f920 	bl	8039614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80393d4:	4b59      	ldr	r3, [pc, #356]	; (803953c <pvPortMalloc+0x184>)
 80393d6:	681a      	ldr	r2, [r3, #0]
 80393d8:	687b      	ldr	r3, [r7, #4]
 80393da:	4013      	ands	r3, r2
 80393dc:	2b00      	cmp	r3, #0
 80393de:	f040 8093 	bne.w	8039508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80393e2:	687b      	ldr	r3, [r7, #4]
 80393e4:	2b00      	cmp	r3, #0
 80393e6:	d01d      	beq.n	8039424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80393e8:	2208      	movs	r2, #8
 80393ea:	687b      	ldr	r3, [r7, #4]
 80393ec:	4413      	add	r3, r2
 80393ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80393f0:	687b      	ldr	r3, [r7, #4]
 80393f2:	f003 0307 	and.w	r3, r3, #7
 80393f6:	2b00      	cmp	r3, #0
 80393f8:	d014      	beq.n	8039424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80393fa:	687b      	ldr	r3, [r7, #4]
 80393fc:	f023 0307 	bic.w	r3, r3, #7
 8039400:	3308      	adds	r3, #8
 8039402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8039404:	687b      	ldr	r3, [r7, #4]
 8039406:	f003 0307 	and.w	r3, r3, #7
 803940a:	2b00      	cmp	r3, #0
 803940c:	d00a      	beq.n	8039424 <pvPortMalloc+0x6c>
	__asm volatile
 803940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039412:	f383 8811 	msr	BASEPRI, r3
 8039416:	f3bf 8f6f 	isb	sy
 803941a:	f3bf 8f4f 	dsb	sy
 803941e:	617b      	str	r3, [r7, #20]
}
 8039420:	bf00      	nop
 8039422:	e7fe      	b.n	8039422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8039424:	687b      	ldr	r3, [r7, #4]
 8039426:	2b00      	cmp	r3, #0
 8039428:	d06e      	beq.n	8039508 <pvPortMalloc+0x150>
 803942a:	4b45      	ldr	r3, [pc, #276]	; (8039540 <pvPortMalloc+0x188>)
 803942c:	681b      	ldr	r3, [r3, #0]
 803942e:	687a      	ldr	r2, [r7, #4]
 8039430:	429a      	cmp	r2, r3
 8039432:	d869      	bhi.n	8039508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8039434:	4b43      	ldr	r3, [pc, #268]	; (8039544 <pvPortMalloc+0x18c>)
 8039436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8039438:	4b42      	ldr	r3, [pc, #264]	; (8039544 <pvPortMalloc+0x18c>)
 803943a:	681b      	ldr	r3, [r3, #0]
 803943c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 803943e:	e004      	b.n	803944a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8039440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8039444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039446:	681b      	ldr	r3, [r3, #0]
 8039448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 803944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803944c:	685b      	ldr	r3, [r3, #4]
 803944e:	687a      	ldr	r2, [r7, #4]
 8039450:	429a      	cmp	r2, r3
 8039452:	d903      	bls.n	803945c <pvPortMalloc+0xa4>
 8039454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039456:	681b      	ldr	r3, [r3, #0]
 8039458:	2b00      	cmp	r3, #0
 803945a:	d1f1      	bne.n	8039440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 803945c:	4b36      	ldr	r3, [pc, #216]	; (8039538 <pvPortMalloc+0x180>)
 803945e:	681b      	ldr	r3, [r3, #0]
 8039460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8039462:	429a      	cmp	r2, r3
 8039464:	d050      	beq.n	8039508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8039466:	6a3b      	ldr	r3, [r7, #32]
 8039468:	681b      	ldr	r3, [r3, #0]
 803946a:	2208      	movs	r2, #8
 803946c:	4413      	add	r3, r2
 803946e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8039470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039472:	681a      	ldr	r2, [r3, #0]
 8039474:	6a3b      	ldr	r3, [r7, #32]
 8039476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8039478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803947a:	685a      	ldr	r2, [r3, #4]
 803947c:	687b      	ldr	r3, [r7, #4]
 803947e:	1ad2      	subs	r2, r2, r3
 8039480:	2308      	movs	r3, #8
 8039482:	005b      	lsls	r3, r3, #1
 8039484:	429a      	cmp	r2, r3
 8039486:	d91f      	bls.n	80394c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8039488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803948a:	687b      	ldr	r3, [r7, #4]
 803948c:	4413      	add	r3, r2
 803948e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8039490:	69bb      	ldr	r3, [r7, #24]
 8039492:	f003 0307 	and.w	r3, r3, #7
 8039496:	2b00      	cmp	r3, #0
 8039498:	d00a      	beq.n	80394b0 <pvPortMalloc+0xf8>
	__asm volatile
 803949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803949e:	f383 8811 	msr	BASEPRI, r3
 80394a2:	f3bf 8f6f 	isb	sy
 80394a6:	f3bf 8f4f 	dsb	sy
 80394aa:	613b      	str	r3, [r7, #16]
}
 80394ac:	bf00      	nop
 80394ae:	e7fe      	b.n	80394ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80394b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80394b2:	685a      	ldr	r2, [r3, #4]
 80394b4:	687b      	ldr	r3, [r7, #4]
 80394b6:	1ad2      	subs	r2, r2, r3
 80394b8:	69bb      	ldr	r3, [r7, #24]
 80394ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80394bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80394be:	687a      	ldr	r2, [r7, #4]
 80394c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80394c2:	69b8      	ldr	r0, [r7, #24]
 80394c4:	f000 f908 	bl	80396d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80394c8:	4b1d      	ldr	r3, [pc, #116]	; (8039540 <pvPortMalloc+0x188>)
 80394ca:	681a      	ldr	r2, [r3, #0]
 80394cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80394ce:	685b      	ldr	r3, [r3, #4]
 80394d0:	1ad3      	subs	r3, r2, r3
 80394d2:	4a1b      	ldr	r2, [pc, #108]	; (8039540 <pvPortMalloc+0x188>)
 80394d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80394d6:	4b1a      	ldr	r3, [pc, #104]	; (8039540 <pvPortMalloc+0x188>)
 80394d8:	681a      	ldr	r2, [r3, #0]
 80394da:	4b1b      	ldr	r3, [pc, #108]	; (8039548 <pvPortMalloc+0x190>)
 80394dc:	681b      	ldr	r3, [r3, #0]
 80394de:	429a      	cmp	r2, r3
 80394e0:	d203      	bcs.n	80394ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80394e2:	4b17      	ldr	r3, [pc, #92]	; (8039540 <pvPortMalloc+0x188>)
 80394e4:	681b      	ldr	r3, [r3, #0]
 80394e6:	4a18      	ldr	r2, [pc, #96]	; (8039548 <pvPortMalloc+0x190>)
 80394e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80394ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80394ec:	685a      	ldr	r2, [r3, #4]
 80394ee:	4b13      	ldr	r3, [pc, #76]	; (803953c <pvPortMalloc+0x184>)
 80394f0:	681b      	ldr	r3, [r3, #0]
 80394f2:	431a      	orrs	r2, r3
 80394f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80394f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80394f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80394fa:	2200      	movs	r2, #0
 80394fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80394fe:	4b13      	ldr	r3, [pc, #76]	; (803954c <pvPortMalloc+0x194>)
 8039500:	681b      	ldr	r3, [r3, #0]
 8039502:	3301      	adds	r3, #1
 8039504:	4a11      	ldr	r2, [pc, #68]	; (803954c <pvPortMalloc+0x194>)
 8039506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8039508:	f7fe fa58 	bl	80379bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 803950c:	69fb      	ldr	r3, [r7, #28]
 803950e:	f003 0307 	and.w	r3, r3, #7
 8039512:	2b00      	cmp	r3, #0
 8039514:	d00a      	beq.n	803952c <pvPortMalloc+0x174>
	__asm volatile
 8039516:	f04f 0350 	mov.w	r3, #80	; 0x50
 803951a:	f383 8811 	msr	BASEPRI, r3
 803951e:	f3bf 8f6f 	isb	sy
 8039522:	f3bf 8f4f 	dsb	sy
 8039526:	60fb      	str	r3, [r7, #12]
}
 8039528:	bf00      	nop
 803952a:	e7fe      	b.n	803952a <pvPortMalloc+0x172>
	return pvReturn;
 803952c:	69fb      	ldr	r3, [r7, #28]
}
 803952e:	4618      	mov	r0, r3
 8039530:	3728      	adds	r7, #40	; 0x28
 8039532:	46bd      	mov	sp, r7
 8039534:	bd80      	pop	{r7, pc}
 8039536:	bf00      	nop
 8039538:	24006acc 	.word	0x24006acc
 803953c:	24006ae0 	.word	0x24006ae0
 8039540:	24006ad0 	.word	0x24006ad0
 8039544:	24006ac4 	.word	0x24006ac4
 8039548:	24006ad4 	.word	0x24006ad4
 803954c:	24006ad8 	.word	0x24006ad8

08039550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8039550:	b580      	push	{r7, lr}
 8039552:	b086      	sub	sp, #24
 8039554:	af00      	add	r7, sp, #0
 8039556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8039558:	687b      	ldr	r3, [r7, #4]
 803955a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 803955c:	687b      	ldr	r3, [r7, #4]
 803955e:	2b00      	cmp	r3, #0
 8039560:	d04d      	beq.n	80395fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8039562:	2308      	movs	r3, #8
 8039564:	425b      	negs	r3, r3
 8039566:	697a      	ldr	r2, [r7, #20]
 8039568:	4413      	add	r3, r2
 803956a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 803956c:	697b      	ldr	r3, [r7, #20]
 803956e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8039570:	693b      	ldr	r3, [r7, #16]
 8039572:	685a      	ldr	r2, [r3, #4]
 8039574:	4b24      	ldr	r3, [pc, #144]	; (8039608 <vPortFree+0xb8>)
 8039576:	681b      	ldr	r3, [r3, #0]
 8039578:	4013      	ands	r3, r2
 803957a:	2b00      	cmp	r3, #0
 803957c:	d10a      	bne.n	8039594 <vPortFree+0x44>
	__asm volatile
 803957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039582:	f383 8811 	msr	BASEPRI, r3
 8039586:	f3bf 8f6f 	isb	sy
 803958a:	f3bf 8f4f 	dsb	sy
 803958e:	60fb      	str	r3, [r7, #12]
}
 8039590:	bf00      	nop
 8039592:	e7fe      	b.n	8039592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8039594:	693b      	ldr	r3, [r7, #16]
 8039596:	681b      	ldr	r3, [r3, #0]
 8039598:	2b00      	cmp	r3, #0
 803959a:	d00a      	beq.n	80395b2 <vPortFree+0x62>
	__asm volatile
 803959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80395a0:	f383 8811 	msr	BASEPRI, r3
 80395a4:	f3bf 8f6f 	isb	sy
 80395a8:	f3bf 8f4f 	dsb	sy
 80395ac:	60bb      	str	r3, [r7, #8]
}
 80395ae:	bf00      	nop
 80395b0:	e7fe      	b.n	80395b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80395b2:	693b      	ldr	r3, [r7, #16]
 80395b4:	685a      	ldr	r2, [r3, #4]
 80395b6:	4b14      	ldr	r3, [pc, #80]	; (8039608 <vPortFree+0xb8>)
 80395b8:	681b      	ldr	r3, [r3, #0]
 80395ba:	4013      	ands	r3, r2
 80395bc:	2b00      	cmp	r3, #0
 80395be:	d01e      	beq.n	80395fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80395c0:	693b      	ldr	r3, [r7, #16]
 80395c2:	681b      	ldr	r3, [r3, #0]
 80395c4:	2b00      	cmp	r3, #0
 80395c6:	d11a      	bne.n	80395fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80395c8:	693b      	ldr	r3, [r7, #16]
 80395ca:	685a      	ldr	r2, [r3, #4]
 80395cc:	4b0e      	ldr	r3, [pc, #56]	; (8039608 <vPortFree+0xb8>)
 80395ce:	681b      	ldr	r3, [r3, #0]
 80395d0:	43db      	mvns	r3, r3
 80395d2:	401a      	ands	r2, r3
 80395d4:	693b      	ldr	r3, [r7, #16]
 80395d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80395d8:	f7fe f9e2 	bl	80379a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80395dc:	693b      	ldr	r3, [r7, #16]
 80395de:	685a      	ldr	r2, [r3, #4]
 80395e0:	4b0a      	ldr	r3, [pc, #40]	; (803960c <vPortFree+0xbc>)
 80395e2:	681b      	ldr	r3, [r3, #0]
 80395e4:	4413      	add	r3, r2
 80395e6:	4a09      	ldr	r2, [pc, #36]	; (803960c <vPortFree+0xbc>)
 80395e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80395ea:	6938      	ldr	r0, [r7, #16]
 80395ec:	f000 f874 	bl	80396d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80395f0:	4b07      	ldr	r3, [pc, #28]	; (8039610 <vPortFree+0xc0>)
 80395f2:	681b      	ldr	r3, [r3, #0]
 80395f4:	3301      	adds	r3, #1
 80395f6:	4a06      	ldr	r2, [pc, #24]	; (8039610 <vPortFree+0xc0>)
 80395f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80395fa:	f7fe f9df 	bl	80379bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80395fe:	bf00      	nop
 8039600:	3718      	adds	r7, #24
 8039602:	46bd      	mov	sp, r7
 8039604:	bd80      	pop	{r7, pc}
 8039606:	bf00      	nop
 8039608:	24006ae0 	.word	0x24006ae0
 803960c:	24006ad0 	.word	0x24006ad0
 8039610:	24006adc 	.word	0x24006adc

08039614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8039614:	b480      	push	{r7}
 8039616:	b085      	sub	sp, #20
 8039618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 803961a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 803961e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8039620:	4b27      	ldr	r3, [pc, #156]	; (80396c0 <prvHeapInit+0xac>)
 8039622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8039624:	68fb      	ldr	r3, [r7, #12]
 8039626:	f003 0307 	and.w	r3, r3, #7
 803962a:	2b00      	cmp	r3, #0
 803962c:	d00c      	beq.n	8039648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 803962e:	68fb      	ldr	r3, [r7, #12]
 8039630:	3307      	adds	r3, #7
 8039632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8039634:	68fb      	ldr	r3, [r7, #12]
 8039636:	f023 0307 	bic.w	r3, r3, #7
 803963a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 803963c:	68ba      	ldr	r2, [r7, #8]
 803963e:	68fb      	ldr	r3, [r7, #12]
 8039640:	1ad3      	subs	r3, r2, r3
 8039642:	4a1f      	ldr	r2, [pc, #124]	; (80396c0 <prvHeapInit+0xac>)
 8039644:	4413      	add	r3, r2
 8039646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8039648:	68fb      	ldr	r3, [r7, #12]
 803964a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 803964c:	4a1d      	ldr	r2, [pc, #116]	; (80396c4 <prvHeapInit+0xb0>)
 803964e:	687b      	ldr	r3, [r7, #4]
 8039650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8039652:	4b1c      	ldr	r3, [pc, #112]	; (80396c4 <prvHeapInit+0xb0>)
 8039654:	2200      	movs	r2, #0
 8039656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8039658:	687b      	ldr	r3, [r7, #4]
 803965a:	68ba      	ldr	r2, [r7, #8]
 803965c:	4413      	add	r3, r2
 803965e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8039660:	2208      	movs	r2, #8
 8039662:	68fb      	ldr	r3, [r7, #12]
 8039664:	1a9b      	subs	r3, r3, r2
 8039666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8039668:	68fb      	ldr	r3, [r7, #12]
 803966a:	f023 0307 	bic.w	r3, r3, #7
 803966e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8039670:	68fb      	ldr	r3, [r7, #12]
 8039672:	4a15      	ldr	r2, [pc, #84]	; (80396c8 <prvHeapInit+0xb4>)
 8039674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8039676:	4b14      	ldr	r3, [pc, #80]	; (80396c8 <prvHeapInit+0xb4>)
 8039678:	681b      	ldr	r3, [r3, #0]
 803967a:	2200      	movs	r2, #0
 803967c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 803967e:	4b12      	ldr	r3, [pc, #72]	; (80396c8 <prvHeapInit+0xb4>)
 8039680:	681b      	ldr	r3, [r3, #0]
 8039682:	2200      	movs	r2, #0
 8039684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8039686:	687b      	ldr	r3, [r7, #4]
 8039688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 803968a:	683b      	ldr	r3, [r7, #0]
 803968c:	68fa      	ldr	r2, [r7, #12]
 803968e:	1ad2      	subs	r2, r2, r3
 8039690:	683b      	ldr	r3, [r7, #0]
 8039692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8039694:	4b0c      	ldr	r3, [pc, #48]	; (80396c8 <prvHeapInit+0xb4>)
 8039696:	681a      	ldr	r2, [r3, #0]
 8039698:	683b      	ldr	r3, [r7, #0]
 803969a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 803969c:	683b      	ldr	r3, [r7, #0]
 803969e:	685b      	ldr	r3, [r3, #4]
 80396a0:	4a0a      	ldr	r2, [pc, #40]	; (80396cc <prvHeapInit+0xb8>)
 80396a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80396a4:	683b      	ldr	r3, [r7, #0]
 80396a6:	685b      	ldr	r3, [r3, #4]
 80396a8:	4a09      	ldr	r2, [pc, #36]	; (80396d0 <prvHeapInit+0xbc>)
 80396aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80396ac:	4b09      	ldr	r3, [pc, #36]	; (80396d4 <prvHeapInit+0xc0>)
 80396ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80396b2:	601a      	str	r2, [r3, #0]
}
 80396b4:	bf00      	nop
 80396b6:	3714      	adds	r7, #20
 80396b8:	46bd      	mov	sp, r7
 80396ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80396be:	4770      	bx	lr
 80396c0:	24002ec4 	.word	0x24002ec4
 80396c4:	24006ac4 	.word	0x24006ac4
 80396c8:	24006acc 	.word	0x24006acc
 80396cc:	24006ad4 	.word	0x24006ad4
 80396d0:	24006ad0 	.word	0x24006ad0
 80396d4:	24006ae0 	.word	0x24006ae0

080396d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80396d8:	b480      	push	{r7}
 80396da:	b085      	sub	sp, #20
 80396dc:	af00      	add	r7, sp, #0
 80396de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80396e0:	4b28      	ldr	r3, [pc, #160]	; (8039784 <prvInsertBlockIntoFreeList+0xac>)
 80396e2:	60fb      	str	r3, [r7, #12]
 80396e4:	e002      	b.n	80396ec <prvInsertBlockIntoFreeList+0x14>
 80396e6:	68fb      	ldr	r3, [r7, #12]
 80396e8:	681b      	ldr	r3, [r3, #0]
 80396ea:	60fb      	str	r3, [r7, #12]
 80396ec:	68fb      	ldr	r3, [r7, #12]
 80396ee:	681b      	ldr	r3, [r3, #0]
 80396f0:	687a      	ldr	r2, [r7, #4]
 80396f2:	429a      	cmp	r2, r3
 80396f4:	d8f7      	bhi.n	80396e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80396f6:	68fb      	ldr	r3, [r7, #12]
 80396f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80396fa:	68fb      	ldr	r3, [r7, #12]
 80396fc:	685b      	ldr	r3, [r3, #4]
 80396fe:	68ba      	ldr	r2, [r7, #8]
 8039700:	4413      	add	r3, r2
 8039702:	687a      	ldr	r2, [r7, #4]
 8039704:	429a      	cmp	r2, r3
 8039706:	d108      	bne.n	803971a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8039708:	68fb      	ldr	r3, [r7, #12]
 803970a:	685a      	ldr	r2, [r3, #4]
 803970c:	687b      	ldr	r3, [r7, #4]
 803970e:	685b      	ldr	r3, [r3, #4]
 8039710:	441a      	add	r2, r3
 8039712:	68fb      	ldr	r3, [r7, #12]
 8039714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8039716:	68fb      	ldr	r3, [r7, #12]
 8039718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 803971a:	687b      	ldr	r3, [r7, #4]
 803971c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 803971e:	687b      	ldr	r3, [r7, #4]
 8039720:	685b      	ldr	r3, [r3, #4]
 8039722:	68ba      	ldr	r2, [r7, #8]
 8039724:	441a      	add	r2, r3
 8039726:	68fb      	ldr	r3, [r7, #12]
 8039728:	681b      	ldr	r3, [r3, #0]
 803972a:	429a      	cmp	r2, r3
 803972c:	d118      	bne.n	8039760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 803972e:	68fb      	ldr	r3, [r7, #12]
 8039730:	681a      	ldr	r2, [r3, #0]
 8039732:	4b15      	ldr	r3, [pc, #84]	; (8039788 <prvInsertBlockIntoFreeList+0xb0>)
 8039734:	681b      	ldr	r3, [r3, #0]
 8039736:	429a      	cmp	r2, r3
 8039738:	d00d      	beq.n	8039756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 803973a:	687b      	ldr	r3, [r7, #4]
 803973c:	685a      	ldr	r2, [r3, #4]
 803973e:	68fb      	ldr	r3, [r7, #12]
 8039740:	681b      	ldr	r3, [r3, #0]
 8039742:	685b      	ldr	r3, [r3, #4]
 8039744:	441a      	add	r2, r3
 8039746:	687b      	ldr	r3, [r7, #4]
 8039748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 803974a:	68fb      	ldr	r3, [r7, #12]
 803974c:	681b      	ldr	r3, [r3, #0]
 803974e:	681a      	ldr	r2, [r3, #0]
 8039750:	687b      	ldr	r3, [r7, #4]
 8039752:	601a      	str	r2, [r3, #0]
 8039754:	e008      	b.n	8039768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8039756:	4b0c      	ldr	r3, [pc, #48]	; (8039788 <prvInsertBlockIntoFreeList+0xb0>)
 8039758:	681a      	ldr	r2, [r3, #0]
 803975a:	687b      	ldr	r3, [r7, #4]
 803975c:	601a      	str	r2, [r3, #0]
 803975e:	e003      	b.n	8039768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8039760:	68fb      	ldr	r3, [r7, #12]
 8039762:	681a      	ldr	r2, [r3, #0]
 8039764:	687b      	ldr	r3, [r7, #4]
 8039766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8039768:	68fa      	ldr	r2, [r7, #12]
 803976a:	687b      	ldr	r3, [r7, #4]
 803976c:	429a      	cmp	r2, r3
 803976e:	d002      	beq.n	8039776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8039770:	68fb      	ldr	r3, [r7, #12]
 8039772:	687a      	ldr	r2, [r7, #4]
 8039774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8039776:	bf00      	nop
 8039778:	3714      	adds	r7, #20
 803977a:	46bd      	mov	sp, r7
 803977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039780:	4770      	bx	lr
 8039782:	bf00      	nop
 8039784:	24006ac4 	.word	0x24006ac4
 8039788:	24006acc 	.word	0x24006acc

0803978c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 803978c:	b580      	push	{r7, lr}
 803978e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8039790:	2200      	movs	r2, #0
 8039792:	490e      	ldr	r1, [pc, #56]	; (80397cc <MX_USB_HOST_Init+0x40>)
 8039794:	480e      	ldr	r0, [pc, #56]	; (80397d0 <MX_USB_HOST_Init+0x44>)
 8039796:	f7f4 fe2d 	bl	802e3f4 <USBH_Init>
 803979a:	4603      	mov	r3, r0
 803979c:	2b00      	cmp	r3, #0
 803979e:	d001      	beq.n	80397a4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80397a0:	f7e8 f95e 	bl	8021a60 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 80397a4:	490b      	ldr	r1, [pc, #44]	; (80397d4 <MX_USB_HOST_Init+0x48>)
 80397a6:	480a      	ldr	r0, [pc, #40]	; (80397d0 <MX_USB_HOST_Init+0x44>)
 80397a8:	f7f4 feda 	bl	802e560 <USBH_RegisterClass>
 80397ac:	4603      	mov	r3, r0
 80397ae:	2b00      	cmp	r3, #0
 80397b0:	d001      	beq.n	80397b6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80397b2:	f7e8 f955 	bl	8021a60 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80397b6:	4806      	ldr	r0, [pc, #24]	; (80397d0 <MX_USB_HOST_Init+0x44>)
 80397b8:	f7f4 ff5e 	bl	802e678 <USBH_Start>
 80397bc:	4603      	mov	r3, r0
 80397be:	2b00      	cmp	r3, #0
 80397c0:	d001      	beq.n	80397c6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80397c2:	f7e8 f94d 	bl	8021a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80397c6:	bf00      	nop
 80397c8:	bd80      	pop	{r7, pc}
 80397ca:	bf00      	nop
 80397cc:	080397d9 	.word	0x080397d9
 80397d0:	24006ae4 	.word	0x24006ae4
 80397d4:	24000010 	.word	0x24000010

080397d8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80397d8:	b580      	push	{r7, lr}
 80397da:	b082      	sub	sp, #8
 80397dc:	af00      	add	r7, sp, #0
 80397de:	6078      	str	r0, [r7, #4]
 80397e0:	460b      	mov	r3, r1
 80397e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80397e4:	78fb      	ldrb	r3, [r7, #3]
 80397e6:	3b01      	subs	r3, #1
 80397e8:	2b04      	cmp	r3, #4
 80397ea:	d822      	bhi.n	8039832 <USBH_UserProcess+0x5a>
 80397ec:	a201      	add	r2, pc, #4	; (adr r2, 80397f4 <USBH_UserProcess+0x1c>)
 80397ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80397f2:	bf00      	nop
 80397f4:	08039833 	.word	0x08039833
 80397f8:	08039817 	.word	0x08039817
 80397fc:	08039833 	.word	0x08039833
 8039800:	08039825 	.word	0x08039825
 8039804:	08039809 	.word	0x08039809
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8039808:	4b0c      	ldr	r3, [pc, #48]	; (803983c <USBH_UserProcess+0x64>)
 803980a:	2203      	movs	r2, #3
 803980c:	701a      	strb	r2, [r3, #0]
  printf("USB is disconnected!\r\n");
 803980e:	480c      	ldr	r0, [pc, #48]	; (8039840 <USBH_UserProcess+0x68>)
 8039810:	f000 fcd6 	bl	803a1c0 <puts>
  break;
 8039814:	e00e      	b.n	8039834 <USBH_UserProcess+0x5c>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8039816:	4b09      	ldr	r3, [pc, #36]	; (803983c <USBH_UserProcess+0x64>)
 8039818:	2202      	movs	r2, #2
 803981a:	701a      	strb	r2, [r3, #0]
  printf("USB is ready to use!\r\n");
 803981c:	4809      	ldr	r0, [pc, #36]	; (8039844 <USBH_UserProcess+0x6c>)
 803981e:	f000 fccf 	bl	803a1c0 <puts>
  break;
 8039822:	e007      	b.n	8039834 <USBH_UserProcess+0x5c>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8039824:	4b05      	ldr	r3, [pc, #20]	; (803983c <USBH_UserProcess+0x64>)
 8039826:	2201      	movs	r2, #1
 8039828:	701a      	strb	r2, [r3, #0]
  printf("USB is connected!\r\n");
 803982a:	4807      	ldr	r0, [pc, #28]	; (8039848 <USBH_UserProcess+0x70>)
 803982c:	f000 fcc8 	bl	803a1c0 <puts>
  break;
 8039830:	e000      	b.n	8039834 <USBH_UserProcess+0x5c>

  default:
  break;
 8039832:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8039834:	bf00      	nop
 8039836:	3708      	adds	r7, #8
 8039838:	46bd      	mov	sp, r7
 803983a:	bd80      	pop	{r7, pc}
 803983c:	24006ec8 	.word	0x24006ec8
 8039840:	0803b84c 	.word	0x0803b84c
 8039844:	0803b864 	.word	0x0803b864
 8039848:	0803b87c 	.word	0x0803b87c

0803984c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 803984c:	b580      	push	{r7, lr}
 803984e:	b0b6      	sub	sp, #216	; 0xd8
 8039850:	af00      	add	r7, sp, #0
 8039852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8039854:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8039858:	2200      	movs	r2, #0
 803985a:	601a      	str	r2, [r3, #0]
 803985c:	605a      	str	r2, [r3, #4]
 803985e:	609a      	str	r2, [r3, #8]
 8039860:	60da      	str	r2, [r3, #12]
 8039862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8039864:	f107 0310 	add.w	r3, r7, #16
 8039868:	22b4      	movs	r2, #180	; 0xb4
 803986a:	2100      	movs	r1, #0
 803986c:	4618      	mov	r0, r3
 803986e:	f000 fb39 	bl	8039ee4 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 8039872:	687b      	ldr	r3, [r7, #4]
 8039874:	681b      	ldr	r3, [r3, #0]
 8039876:	4a33      	ldr	r2, [pc, #204]	; (8039944 <HAL_HCD_MspInit+0xf8>)
 8039878:	4293      	cmp	r3, r2
 803987a:	d15e      	bne.n	803993a <HAL_HCD_MspInit+0xee>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 803987c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8039880:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8039882:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8039886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 803988a:	f107 0310 	add.w	r3, r7, #16
 803988e:	4618      	mov	r0, r3
 8039890:	f7ee f8fc 	bl	8027a8c <HAL_RCCEx_PeriphCLKConfig>
 8039894:	4603      	mov	r3, r0
 8039896:	2b00      	cmp	r3, #0
 8039898:	d001      	beq.n	803989e <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 803989a:	f7e8 f8e1 	bl	8021a60 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 803989e:	f7ed f969 	bl	8026b74 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80398a2:	4b29      	ldr	r3, [pc, #164]	; (8039948 <HAL_HCD_MspInit+0xfc>)
 80398a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80398a8:	4a27      	ldr	r2, [pc, #156]	; (8039948 <HAL_HCD_MspInit+0xfc>)
 80398aa:	f043 0301 	orr.w	r3, r3, #1
 80398ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80398b2:	4b25      	ldr	r3, [pc, #148]	; (8039948 <HAL_HCD_MspInit+0xfc>)
 80398b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80398b8:	f003 0301 	and.w	r3, r3, #1
 80398bc:	60fb      	str	r3, [r7, #12]
 80398be:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80398c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80398c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80398c8:	2300      	movs	r3, #0
 80398ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80398ce:	2300      	movs	r3, #0
 80398d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80398d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80398d8:	4619      	mov	r1, r3
 80398da:	481c      	ldr	r0, [pc, #112]	; (803994c <HAL_HCD_MspInit+0x100>)
 80398dc:	f7eb fb2a 	bl	8024f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80398e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80398e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80398e8:	2302      	movs	r3, #2
 80398ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80398ee:	2300      	movs	r3, #0
 80398f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80398f4:	2300      	movs	r3, #0
 80398f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80398fa:	230a      	movs	r3, #10
 80398fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8039900:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8039904:	4619      	mov	r1, r3
 8039906:	4811      	ldr	r0, [pc, #68]	; (803994c <HAL_HCD_MspInit+0x100>)
 8039908:	f7eb fb14 	bl	8024f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 803990c:	4b0e      	ldr	r3, [pc, #56]	; (8039948 <HAL_HCD_MspInit+0xfc>)
 803990e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8039912:	4a0d      	ldr	r2, [pc, #52]	; (8039948 <HAL_HCD_MspInit+0xfc>)
 8039914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8039918:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 803991c:	4b0a      	ldr	r3, [pc, #40]	; (8039948 <HAL_HCD_MspInit+0xfc>)
 803991e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8039922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8039926:	60bb      	str	r3, [r7, #8]
 8039928:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 803992a:	2200      	movs	r2, #0
 803992c:	2105      	movs	r1, #5
 803992e:	204d      	movs	r0, #77	; 0x4d
 8039930:	f7e8 fc9e 	bl	8022270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8039934:	204d      	movs	r0, #77	; 0x4d
 8039936:	f7e8 fcb5 	bl	80222a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 803993a:	bf00      	nop
 803993c:	37d8      	adds	r7, #216	; 0xd8
 803993e:	46bd      	mov	sp, r7
 8039940:	bd80      	pop	{r7, pc}
 8039942:	bf00      	nop
 8039944:	40040000 	.word	0x40040000
 8039948:	58024400 	.word	0x58024400
 803994c:	58020000 	.word	0x58020000

08039950 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8039950:	b580      	push	{r7, lr}
 8039952:	b082      	sub	sp, #8
 8039954:	af00      	add	r7, sp, #0
 8039956:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8039958:	687b      	ldr	r3, [r7, #4]
 803995a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 803995e:	4618      	mov	r0, r3
 8039960:	f7f5 fb41 	bl	802efe6 <USBH_LL_IncTimer>
}
 8039964:	bf00      	nop
 8039966:	3708      	adds	r7, #8
 8039968:	46bd      	mov	sp, r7
 803996a:	bd80      	pop	{r7, pc}

0803996c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 803996c:	b580      	push	{r7, lr}
 803996e:	b082      	sub	sp, #8
 8039970:	af00      	add	r7, sp, #0
 8039972:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8039974:	687b      	ldr	r3, [r7, #4]
 8039976:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 803997a:	4618      	mov	r0, r3
 803997c:	f7f5 fb85 	bl	802f08a <USBH_LL_Connect>
}
 8039980:	bf00      	nop
 8039982:	3708      	adds	r7, #8
 8039984:	46bd      	mov	sp, r7
 8039986:	bd80      	pop	{r7, pc}

08039988 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8039988:	b580      	push	{r7, lr}
 803998a:	b082      	sub	sp, #8
 803998c:	af00      	add	r7, sp, #0
 803998e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8039990:	687b      	ldr	r3, [r7, #4]
 8039992:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8039996:	4618      	mov	r0, r3
 8039998:	f7f5 fb9a 	bl	802f0d0 <USBH_LL_Disconnect>
}
 803999c:	bf00      	nop
 803999e:	3708      	adds	r7, #8
 80399a0:	46bd      	mov	sp, r7
 80399a2:	bd80      	pop	{r7, pc}

080399a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80399a4:	b580      	push	{r7, lr}
 80399a6:	b082      	sub	sp, #8
 80399a8:	af00      	add	r7, sp, #0
 80399aa:	6078      	str	r0, [r7, #4]
 80399ac:	460b      	mov	r3, r1
 80399ae:	70fb      	strb	r3, [r7, #3]
 80399b0:	4613      	mov	r3, r2
 80399b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80399b4:	687b      	ldr	r3, [r7, #4]
 80399b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80399ba:	4618      	mov	r0, r3
 80399bc:	f7f5 fbcf 	bl	802f15e <USBH_LL_NotifyURBChange>
#endif
}
 80399c0:	bf00      	nop
 80399c2:	3708      	adds	r7, #8
 80399c4:	46bd      	mov	sp, r7
 80399c6:	bd80      	pop	{r7, pc}

080399c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80399c8:	b580      	push	{r7, lr}
 80399ca:	b082      	sub	sp, #8
 80399cc:	af00      	add	r7, sp, #0
 80399ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80399d0:	687b      	ldr	r3, [r7, #4]
 80399d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80399d6:	4618      	mov	r0, r3
 80399d8:	f7f5 fb2f 	bl	802f03a <USBH_LL_PortEnabled>
}
 80399dc:	bf00      	nop
 80399de:	3708      	adds	r7, #8
 80399e0:	46bd      	mov	sp, r7
 80399e2:	bd80      	pop	{r7, pc}

080399e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80399e4:	b580      	push	{r7, lr}
 80399e6:	b082      	sub	sp, #8
 80399e8:	af00      	add	r7, sp, #0
 80399ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80399ec:	687b      	ldr	r3, [r7, #4]
 80399ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80399f2:	4618      	mov	r0, r3
 80399f4:	f7f5 fb3b 	bl	802f06e <USBH_LL_PortDisabled>
}
 80399f8:	bf00      	nop
 80399fa:	3708      	adds	r7, #8
 80399fc:	46bd      	mov	sp, r7
 80399fe:	bd80      	pop	{r7, pc}

08039a00 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8039a00:	b580      	push	{r7, lr}
 8039a02:	b082      	sub	sp, #8
 8039a04:	af00      	add	r7, sp, #0
 8039a06:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8039a08:	687b      	ldr	r3, [r7, #4]
 8039a0a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8039a0e:	2b00      	cmp	r3, #0
 8039a10:	d12f      	bne.n	8039a72 <USBH_LL_Init+0x72>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8039a12:	4a1a      	ldr	r2, [pc, #104]	; (8039a7c <USBH_LL_Init+0x7c>)
 8039a14:	687b      	ldr	r3, [r7, #4]
 8039a16:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8039a1a:	687b      	ldr	r3, [r7, #4]
 8039a1c:	4a17      	ldr	r2, [pc, #92]	; (8039a7c <USBH_LL_Init+0x7c>)
 8039a1e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8039a22:	4b16      	ldr	r3, [pc, #88]	; (8039a7c <USBH_LL_Init+0x7c>)
 8039a24:	4a16      	ldr	r2, [pc, #88]	; (8039a80 <USBH_LL_Init+0x80>)
 8039a26:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8039a28:	4b14      	ldr	r3, [pc, #80]	; (8039a7c <USBH_LL_Init+0x7c>)
 8039a2a:	2210      	movs	r2, #16
 8039a2c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8039a2e:	4b13      	ldr	r3, [pc, #76]	; (8039a7c <USBH_LL_Init+0x7c>)
 8039a30:	2201      	movs	r2, #1
 8039a32:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8039a34:	4b11      	ldr	r3, [pc, #68]	; (8039a7c <USBH_LL_Init+0x7c>)
 8039a36:	2200      	movs	r2, #0
 8039a38:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8039a3a:	4b10      	ldr	r3, [pc, #64]	; (8039a7c <USBH_LL_Init+0x7c>)
 8039a3c:	2202      	movs	r2, #2
 8039a3e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8039a40:	4b0e      	ldr	r3, [pc, #56]	; (8039a7c <USBH_LL_Init+0x7c>)
 8039a42:	2200      	movs	r2, #0
 8039a44:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8039a46:	4b0d      	ldr	r3, [pc, #52]	; (8039a7c <USBH_LL_Init+0x7c>)
 8039a48:	2200      	movs	r2, #0
 8039a4a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8039a4c:	4b0b      	ldr	r3, [pc, #44]	; (8039a7c <USBH_LL_Init+0x7c>)
 8039a4e:	2200      	movs	r2, #0
 8039a50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8039a52:	480a      	ldr	r0, [pc, #40]	; (8039a7c <USBH_LL_Init+0x7c>)
 8039a54:	f7eb fc49 	bl	80252ea <HAL_HCD_Init>
 8039a58:	4603      	mov	r3, r0
 8039a5a:	2b00      	cmp	r3, #0
 8039a5c:	d001      	beq.n	8039a62 <USBH_LL_Init+0x62>
  {
    Error_Handler( );
 8039a5e:	f7e7 ffff 	bl	8021a60 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8039a62:	4806      	ldr	r0, [pc, #24]	; (8039a7c <USBH_LL_Init+0x7c>)
 8039a64:	f7ec f82d 	bl	8025ac2 <HAL_HCD_GetCurrentFrame>
 8039a68:	4603      	mov	r3, r0
 8039a6a:	4619      	mov	r1, r3
 8039a6c:	6878      	ldr	r0, [r7, #4]
 8039a6e:	f7f5 faab 	bl	802efc8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8039a72:	2300      	movs	r3, #0
}
 8039a74:	4618      	mov	r0, r3
 8039a76:	3708      	adds	r7, #8
 8039a78:	46bd      	mov	sp, r7
 8039a7a:	bd80      	pop	{r7, pc}
 8039a7c:	24006ecc 	.word	0x24006ecc
 8039a80:	40040000 	.word	0x40040000

08039a84 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8039a84:	b580      	push	{r7, lr}
 8039a86:	b084      	sub	sp, #16
 8039a88:	af00      	add	r7, sp, #0
 8039a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8039a8c:	2300      	movs	r3, #0
 8039a8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039a90:	2300      	movs	r3, #0
 8039a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8039a94:	687b      	ldr	r3, [r7, #4]
 8039a96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039a9a:	4618      	mov	r0, r3
 8039a9c:	f7eb ff9b 	bl	80259d6 <HAL_HCD_Start>
 8039aa0:	4603      	mov	r3, r0
 8039aa2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8039aa4:	7bfb      	ldrb	r3, [r7, #15]
 8039aa6:	4618      	mov	r0, r3
 8039aa8:	f000 f98c 	bl	8039dc4 <USBH_Get_USB_Status>
 8039aac:	4603      	mov	r3, r0
 8039aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8039ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8039ab2:	4618      	mov	r0, r3
 8039ab4:	3710      	adds	r7, #16
 8039ab6:	46bd      	mov	sp, r7
 8039ab8:	bd80      	pop	{r7, pc}

08039aba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8039aba:	b580      	push	{r7, lr}
 8039abc:	b084      	sub	sp, #16
 8039abe:	af00      	add	r7, sp, #0
 8039ac0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8039ac2:	2300      	movs	r3, #0
 8039ac4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039ac6:	2300      	movs	r3, #0
 8039ac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8039aca:	687b      	ldr	r3, [r7, #4]
 8039acc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039ad0:	4618      	mov	r0, r3
 8039ad2:	f7eb ffa3 	bl	8025a1c <HAL_HCD_Stop>
 8039ad6:	4603      	mov	r3, r0
 8039ad8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8039ada:	7bfb      	ldrb	r3, [r7, #15]
 8039adc:	4618      	mov	r0, r3
 8039ade:	f000 f971 	bl	8039dc4 <USBH_Get_USB_Status>
 8039ae2:	4603      	mov	r3, r0
 8039ae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8039ae6:	7bbb      	ldrb	r3, [r7, #14]
}
 8039ae8:	4618      	mov	r0, r3
 8039aea:	3710      	adds	r7, #16
 8039aec:	46bd      	mov	sp, r7
 8039aee:	bd80      	pop	{r7, pc}

08039af0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8039af0:	b580      	push	{r7, lr}
 8039af2:	b084      	sub	sp, #16
 8039af4:	af00      	add	r7, sp, #0
 8039af6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8039af8:	2301      	movs	r3, #1
 8039afa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8039afc:	687b      	ldr	r3, [r7, #4]
 8039afe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039b02:	4618      	mov	r0, r3
 8039b04:	f7eb ffeb 	bl	8025ade <HAL_HCD_GetCurrentSpeed>
 8039b08:	4603      	mov	r3, r0
 8039b0a:	2b02      	cmp	r3, #2
 8039b0c:	d00c      	beq.n	8039b28 <USBH_LL_GetSpeed+0x38>
 8039b0e:	2b02      	cmp	r3, #2
 8039b10:	d80d      	bhi.n	8039b2e <USBH_LL_GetSpeed+0x3e>
 8039b12:	2b00      	cmp	r3, #0
 8039b14:	d002      	beq.n	8039b1c <USBH_LL_GetSpeed+0x2c>
 8039b16:	2b01      	cmp	r3, #1
 8039b18:	d003      	beq.n	8039b22 <USBH_LL_GetSpeed+0x32>
 8039b1a:	e008      	b.n	8039b2e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8039b1c:	2300      	movs	r3, #0
 8039b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8039b20:	e008      	b.n	8039b34 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8039b22:	2301      	movs	r3, #1
 8039b24:	73fb      	strb	r3, [r7, #15]
    break;
 8039b26:	e005      	b.n	8039b34 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8039b28:	2302      	movs	r3, #2
 8039b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8039b2c:	e002      	b.n	8039b34 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8039b2e:	2301      	movs	r3, #1
 8039b30:	73fb      	strb	r3, [r7, #15]
    break;
 8039b32:	bf00      	nop
  }
  return  speed;
 8039b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8039b36:	4618      	mov	r0, r3
 8039b38:	3710      	adds	r7, #16
 8039b3a:	46bd      	mov	sp, r7
 8039b3c:	bd80      	pop	{r7, pc}

08039b3e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8039b3e:	b580      	push	{r7, lr}
 8039b40:	b084      	sub	sp, #16
 8039b42:	af00      	add	r7, sp, #0
 8039b44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8039b46:	2300      	movs	r3, #0
 8039b48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039b4a:	2300      	movs	r3, #0
 8039b4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8039b4e:	687b      	ldr	r3, [r7, #4]
 8039b50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039b54:	4618      	mov	r0, r3
 8039b56:	f7eb ff7e 	bl	8025a56 <HAL_HCD_ResetPort>
 8039b5a:	4603      	mov	r3, r0
 8039b5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8039b5e:	7bfb      	ldrb	r3, [r7, #15]
 8039b60:	4618      	mov	r0, r3
 8039b62:	f000 f92f 	bl	8039dc4 <USBH_Get_USB_Status>
 8039b66:	4603      	mov	r3, r0
 8039b68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8039b6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8039b6c:	4618      	mov	r0, r3
 8039b6e:	3710      	adds	r7, #16
 8039b70:	46bd      	mov	sp, r7
 8039b72:	bd80      	pop	{r7, pc}

08039b74 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8039b74:	b580      	push	{r7, lr}
 8039b76:	b082      	sub	sp, #8
 8039b78:	af00      	add	r7, sp, #0
 8039b7a:	6078      	str	r0, [r7, #4]
 8039b7c:	460b      	mov	r3, r1
 8039b7e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8039b80:	687b      	ldr	r3, [r7, #4]
 8039b82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039b86:	78fa      	ldrb	r2, [r7, #3]
 8039b88:	4611      	mov	r1, r2
 8039b8a:	4618      	mov	r0, r3
 8039b8c:	f7eb ff85 	bl	8025a9a <HAL_HCD_HC_GetXferCount>
 8039b90:	4603      	mov	r3, r0
}
 8039b92:	4618      	mov	r0, r3
 8039b94:	3708      	adds	r7, #8
 8039b96:	46bd      	mov	sp, r7
 8039b98:	bd80      	pop	{r7, pc}

08039b9a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8039b9a:	b590      	push	{r4, r7, lr}
 8039b9c:	b089      	sub	sp, #36	; 0x24
 8039b9e:	af04      	add	r7, sp, #16
 8039ba0:	6078      	str	r0, [r7, #4]
 8039ba2:	4608      	mov	r0, r1
 8039ba4:	4611      	mov	r1, r2
 8039ba6:	461a      	mov	r2, r3
 8039ba8:	4603      	mov	r3, r0
 8039baa:	70fb      	strb	r3, [r7, #3]
 8039bac:	460b      	mov	r3, r1
 8039bae:	70bb      	strb	r3, [r7, #2]
 8039bb0:	4613      	mov	r3, r2
 8039bb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8039bb4:	2300      	movs	r3, #0
 8039bb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039bb8:	2300      	movs	r3, #0
 8039bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8039bbc:	687b      	ldr	r3, [r7, #4]
 8039bbe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8039bc2:	787c      	ldrb	r4, [r7, #1]
 8039bc4:	78ba      	ldrb	r2, [r7, #2]
 8039bc6:	78f9      	ldrb	r1, [r7, #3]
 8039bc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8039bca:	9302      	str	r3, [sp, #8]
 8039bcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8039bd0:	9301      	str	r3, [sp, #4]
 8039bd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8039bd6:	9300      	str	r3, [sp, #0]
 8039bd8:	4623      	mov	r3, r4
 8039bda:	f7eb fbe8 	bl	80253ae <HAL_HCD_HC_Init>
 8039bde:	4603      	mov	r3, r0
 8039be0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8039be2:	7bfb      	ldrb	r3, [r7, #15]
 8039be4:	4618      	mov	r0, r3
 8039be6:	f000 f8ed 	bl	8039dc4 <USBH_Get_USB_Status>
 8039bea:	4603      	mov	r3, r0
 8039bec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8039bee:	7bbb      	ldrb	r3, [r7, #14]
}
 8039bf0:	4618      	mov	r0, r3
 8039bf2:	3714      	adds	r7, #20
 8039bf4:	46bd      	mov	sp, r7
 8039bf6:	bd90      	pop	{r4, r7, pc}

08039bf8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8039bf8:	b580      	push	{r7, lr}
 8039bfa:	b084      	sub	sp, #16
 8039bfc:	af00      	add	r7, sp, #0
 8039bfe:	6078      	str	r0, [r7, #4]
 8039c00:	460b      	mov	r3, r1
 8039c02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8039c04:	2300      	movs	r3, #0
 8039c06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039c08:	2300      	movs	r3, #0
 8039c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8039c0c:	687b      	ldr	r3, [r7, #4]
 8039c0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039c12:	78fa      	ldrb	r2, [r7, #3]
 8039c14:	4611      	mov	r1, r2
 8039c16:	4618      	mov	r0, r3
 8039c18:	f7eb fc58 	bl	80254cc <HAL_HCD_HC_Halt>
 8039c1c:	4603      	mov	r3, r0
 8039c1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8039c20:	7bfb      	ldrb	r3, [r7, #15]
 8039c22:	4618      	mov	r0, r3
 8039c24:	f000 f8ce 	bl	8039dc4 <USBH_Get_USB_Status>
 8039c28:	4603      	mov	r3, r0
 8039c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8039c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8039c2e:	4618      	mov	r0, r3
 8039c30:	3710      	adds	r7, #16
 8039c32:	46bd      	mov	sp, r7
 8039c34:	bd80      	pop	{r7, pc}

08039c36 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8039c36:	b590      	push	{r4, r7, lr}
 8039c38:	b089      	sub	sp, #36	; 0x24
 8039c3a:	af04      	add	r7, sp, #16
 8039c3c:	6078      	str	r0, [r7, #4]
 8039c3e:	4608      	mov	r0, r1
 8039c40:	4611      	mov	r1, r2
 8039c42:	461a      	mov	r2, r3
 8039c44:	4603      	mov	r3, r0
 8039c46:	70fb      	strb	r3, [r7, #3]
 8039c48:	460b      	mov	r3, r1
 8039c4a:	70bb      	strb	r3, [r7, #2]
 8039c4c:	4613      	mov	r3, r2
 8039c4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8039c50:	2300      	movs	r3, #0
 8039c52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039c54:	2300      	movs	r3, #0
 8039c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8039c58:	687b      	ldr	r3, [r7, #4]
 8039c5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8039c5e:	787c      	ldrb	r4, [r7, #1]
 8039c60:	78ba      	ldrb	r2, [r7, #2]
 8039c62:	78f9      	ldrb	r1, [r7, #3]
 8039c64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8039c68:	9303      	str	r3, [sp, #12]
 8039c6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8039c6c:	9302      	str	r3, [sp, #8]
 8039c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039c70:	9301      	str	r3, [sp, #4]
 8039c72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8039c76:	9300      	str	r3, [sp, #0]
 8039c78:	4623      	mov	r3, r4
 8039c7a:	f7eb fc4b 	bl	8025514 <HAL_HCD_HC_SubmitRequest>
 8039c7e:	4603      	mov	r3, r0
 8039c80:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8039c82:	7bfb      	ldrb	r3, [r7, #15]
 8039c84:	4618      	mov	r0, r3
 8039c86:	f000 f89d 	bl	8039dc4 <USBH_Get_USB_Status>
 8039c8a:	4603      	mov	r3, r0
 8039c8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8039c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8039c90:	4618      	mov	r0, r3
 8039c92:	3714      	adds	r7, #20
 8039c94:	46bd      	mov	sp, r7
 8039c96:	bd90      	pop	{r4, r7, pc}

08039c98 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8039c98:	b580      	push	{r7, lr}
 8039c9a:	b082      	sub	sp, #8
 8039c9c:	af00      	add	r7, sp, #0
 8039c9e:	6078      	str	r0, [r7, #4]
 8039ca0:	460b      	mov	r3, r1
 8039ca2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8039ca4:	687b      	ldr	r3, [r7, #4]
 8039ca6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039caa:	78fa      	ldrb	r2, [r7, #3]
 8039cac:	4611      	mov	r1, r2
 8039cae:	4618      	mov	r0, r3
 8039cb0:	f7eb fedf 	bl	8025a72 <HAL_HCD_HC_GetURBState>
 8039cb4:	4603      	mov	r3, r0
}
 8039cb6:	4618      	mov	r0, r3
 8039cb8:	3708      	adds	r7, #8
 8039cba:	46bd      	mov	sp, r7
 8039cbc:	bd80      	pop	{r7, pc}

08039cbe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8039cbe:	b580      	push	{r7, lr}
 8039cc0:	b082      	sub	sp, #8
 8039cc2:	af00      	add	r7, sp, #0
 8039cc4:	6078      	str	r0, [r7, #4]
 8039cc6:	460b      	mov	r3, r1
 8039cc8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8039cca:	687b      	ldr	r3, [r7, #4]
 8039ccc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8039cd0:	2b00      	cmp	r3, #0
 8039cd2:	d103      	bne.n	8039cdc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8039cd4:	78fb      	ldrb	r3, [r7, #3]
 8039cd6:	4618      	mov	r0, r3
 8039cd8:	f000 f8a0 	bl	8039e1c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8039cdc:	20c8      	movs	r0, #200	; 0xc8
 8039cde:	f7e8 f9eb 	bl	80220b8 <HAL_Delay>
  return USBH_OK;
 8039ce2:	2300      	movs	r3, #0
}
 8039ce4:	4618      	mov	r0, r3
 8039ce6:	3708      	adds	r7, #8
 8039ce8:	46bd      	mov	sp, r7
 8039cea:	bd80      	pop	{r7, pc}

08039cec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8039cec:	b480      	push	{r7}
 8039cee:	b085      	sub	sp, #20
 8039cf0:	af00      	add	r7, sp, #0
 8039cf2:	6078      	str	r0, [r7, #4]
 8039cf4:	460b      	mov	r3, r1
 8039cf6:	70fb      	strb	r3, [r7, #3]
 8039cf8:	4613      	mov	r3, r2
 8039cfa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8039cfc:	687b      	ldr	r3, [r7, #4]
 8039cfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039d02:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8039d04:	78fb      	ldrb	r3, [r7, #3]
 8039d06:	68fa      	ldr	r2, [r7, #12]
 8039d08:	212c      	movs	r1, #44	; 0x2c
 8039d0a:	fb01 f303 	mul.w	r3, r1, r3
 8039d0e:	4413      	add	r3, r2
 8039d10:	333b      	adds	r3, #59	; 0x3b
 8039d12:	781b      	ldrb	r3, [r3, #0]
 8039d14:	2b00      	cmp	r3, #0
 8039d16:	d009      	beq.n	8039d2c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8039d18:	78fb      	ldrb	r3, [r7, #3]
 8039d1a:	68fa      	ldr	r2, [r7, #12]
 8039d1c:	212c      	movs	r1, #44	; 0x2c
 8039d1e:	fb01 f303 	mul.w	r3, r1, r3
 8039d22:	4413      	add	r3, r2
 8039d24:	3354      	adds	r3, #84	; 0x54
 8039d26:	78ba      	ldrb	r2, [r7, #2]
 8039d28:	701a      	strb	r2, [r3, #0]
 8039d2a:	e008      	b.n	8039d3e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8039d2c:	78fb      	ldrb	r3, [r7, #3]
 8039d2e:	68fa      	ldr	r2, [r7, #12]
 8039d30:	212c      	movs	r1, #44	; 0x2c
 8039d32:	fb01 f303 	mul.w	r3, r1, r3
 8039d36:	4413      	add	r3, r2
 8039d38:	3355      	adds	r3, #85	; 0x55
 8039d3a:	78ba      	ldrb	r2, [r7, #2]
 8039d3c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8039d3e:	2300      	movs	r3, #0
}
 8039d40:	4618      	mov	r0, r3
 8039d42:	3714      	adds	r7, #20
 8039d44:	46bd      	mov	sp, r7
 8039d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039d4a:	4770      	bx	lr

08039d4c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8039d4c:	b480      	push	{r7}
 8039d4e:	b085      	sub	sp, #20
 8039d50:	af00      	add	r7, sp, #0
 8039d52:	6078      	str	r0, [r7, #4]
 8039d54:	460b      	mov	r3, r1
 8039d56:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8039d58:	2300      	movs	r3, #0
 8039d5a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8039d5c:	687b      	ldr	r3, [r7, #4]
 8039d5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8039d62:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8039d64:	78fb      	ldrb	r3, [r7, #3]
 8039d66:	68ba      	ldr	r2, [r7, #8]
 8039d68:	212c      	movs	r1, #44	; 0x2c
 8039d6a:	fb01 f303 	mul.w	r3, r1, r3
 8039d6e:	4413      	add	r3, r2
 8039d70:	333b      	adds	r3, #59	; 0x3b
 8039d72:	781b      	ldrb	r3, [r3, #0]
 8039d74:	2b00      	cmp	r3, #0
 8039d76:	d009      	beq.n	8039d8c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8039d78:	78fb      	ldrb	r3, [r7, #3]
 8039d7a:	68ba      	ldr	r2, [r7, #8]
 8039d7c:	212c      	movs	r1, #44	; 0x2c
 8039d7e:	fb01 f303 	mul.w	r3, r1, r3
 8039d82:	4413      	add	r3, r2
 8039d84:	3354      	adds	r3, #84	; 0x54
 8039d86:	781b      	ldrb	r3, [r3, #0]
 8039d88:	73fb      	strb	r3, [r7, #15]
 8039d8a:	e008      	b.n	8039d9e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8039d8c:	78fb      	ldrb	r3, [r7, #3]
 8039d8e:	68ba      	ldr	r2, [r7, #8]
 8039d90:	212c      	movs	r1, #44	; 0x2c
 8039d92:	fb01 f303 	mul.w	r3, r1, r3
 8039d96:	4413      	add	r3, r2
 8039d98:	3355      	adds	r3, #85	; 0x55
 8039d9a:	781b      	ldrb	r3, [r3, #0]
 8039d9c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8039d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8039da0:	4618      	mov	r0, r3
 8039da2:	3714      	adds	r7, #20
 8039da4:	46bd      	mov	sp, r7
 8039da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039daa:	4770      	bx	lr

08039dac <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8039dac:	b580      	push	{r7, lr}
 8039dae:	b082      	sub	sp, #8
 8039db0:	af00      	add	r7, sp, #0
 8039db2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8039db4:	6878      	ldr	r0, [r7, #4]
 8039db6:	f7e8 f97f 	bl	80220b8 <HAL_Delay>
}
 8039dba:	bf00      	nop
 8039dbc:	3708      	adds	r7, #8
 8039dbe:	46bd      	mov	sp, r7
 8039dc0:	bd80      	pop	{r7, pc}
	...

08039dc4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8039dc4:	b480      	push	{r7}
 8039dc6:	b085      	sub	sp, #20
 8039dc8:	af00      	add	r7, sp, #0
 8039dca:	4603      	mov	r3, r0
 8039dcc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8039dce:	2300      	movs	r3, #0
 8039dd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8039dd2:	79fb      	ldrb	r3, [r7, #7]
 8039dd4:	2b03      	cmp	r3, #3
 8039dd6:	d817      	bhi.n	8039e08 <USBH_Get_USB_Status+0x44>
 8039dd8:	a201      	add	r2, pc, #4	; (adr r2, 8039de0 <USBH_Get_USB_Status+0x1c>)
 8039dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039dde:	bf00      	nop
 8039de0:	08039df1 	.word	0x08039df1
 8039de4:	08039df7 	.word	0x08039df7
 8039de8:	08039dfd 	.word	0x08039dfd
 8039dec:	08039e03 	.word	0x08039e03
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8039df0:	2300      	movs	r3, #0
 8039df2:	73fb      	strb	r3, [r7, #15]
    break;
 8039df4:	e00b      	b.n	8039e0e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8039df6:	2302      	movs	r3, #2
 8039df8:	73fb      	strb	r3, [r7, #15]
    break;
 8039dfa:	e008      	b.n	8039e0e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8039dfc:	2301      	movs	r3, #1
 8039dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8039e00:	e005      	b.n	8039e0e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8039e02:	2302      	movs	r3, #2
 8039e04:	73fb      	strb	r3, [r7, #15]
    break;
 8039e06:	e002      	b.n	8039e0e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8039e08:	2302      	movs	r3, #2
 8039e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8039e0c:	bf00      	nop
  }
  return usb_status;
 8039e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8039e10:	4618      	mov	r0, r3
 8039e12:	3714      	adds	r7, #20
 8039e14:	46bd      	mov	sp, r7
 8039e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039e1a:	4770      	bx	lr

08039e1c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8039e1c:	b580      	push	{r7, lr}
 8039e1e:	b084      	sub	sp, #16
 8039e20:	af00      	add	r7, sp, #0
 8039e22:	4603      	mov	r3, r0
 8039e24:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8039e26:	79fb      	ldrb	r3, [r7, #7]
 8039e28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8039e2a:	79fb      	ldrb	r3, [r7, #7]
 8039e2c:	2b00      	cmp	r3, #0
 8039e2e:	d102      	bne.n	8039e36 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8039e30:	2301      	movs	r3, #1
 8039e32:	73fb      	strb	r3, [r7, #15]
 8039e34:	e001      	b.n	8039e3a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8039e36:	2300      	movs	r3, #0
 8039e38:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,(GPIO_PinState)data);
 8039e3a:	7bfb      	ldrb	r3, [r7, #15]
 8039e3c:	461a      	mov	r2, r3
 8039e3e:	2101      	movs	r1, #1
 8039e40:	4803      	ldr	r0, [pc, #12]	; (8039e50 <MX_DriverVbusHS+0x34>)
 8039e42:	f7eb fa1f 	bl	8025284 <HAL_GPIO_WritePin>
}
 8039e46:	bf00      	nop
 8039e48:	3710      	adds	r7, #16
 8039e4a:	46bd      	mov	sp, r7
 8039e4c:	bd80      	pop	{r7, pc}
 8039e4e:	bf00      	nop
 8039e50:	58021000 	.word	0x58021000

08039e54 <__errno>:
 8039e54:	4b01      	ldr	r3, [pc, #4]	; (8039e5c <__errno+0x8>)
 8039e56:	6818      	ldr	r0, [r3, #0]
 8039e58:	4770      	bx	lr
 8039e5a:	bf00      	nop
 8039e5c:	24000034 	.word	0x24000034

08039e60 <__libc_init_array>:
 8039e60:	b570      	push	{r4, r5, r6, lr}
 8039e62:	4d0d      	ldr	r5, [pc, #52]	; (8039e98 <__libc_init_array+0x38>)
 8039e64:	4c0d      	ldr	r4, [pc, #52]	; (8039e9c <__libc_init_array+0x3c>)
 8039e66:	1b64      	subs	r4, r4, r5
 8039e68:	10a4      	asrs	r4, r4, #2
 8039e6a:	2600      	movs	r6, #0
 8039e6c:	42a6      	cmp	r6, r4
 8039e6e:	d109      	bne.n	8039e84 <__libc_init_array+0x24>
 8039e70:	4d0b      	ldr	r5, [pc, #44]	; (8039ea0 <__libc_init_array+0x40>)
 8039e72:	4c0c      	ldr	r4, [pc, #48]	; (8039ea4 <__libc_init_array+0x44>)
 8039e74:	f001 fa48 	bl	803b308 <_init>
 8039e78:	1b64      	subs	r4, r4, r5
 8039e7a:	10a4      	asrs	r4, r4, #2
 8039e7c:	2600      	movs	r6, #0
 8039e7e:	42a6      	cmp	r6, r4
 8039e80:	d105      	bne.n	8039e8e <__libc_init_array+0x2e>
 8039e82:	bd70      	pop	{r4, r5, r6, pc}
 8039e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8039e88:	4798      	blx	r3
 8039e8a:	3601      	adds	r6, #1
 8039e8c:	e7ee      	b.n	8039e6c <__libc_init_array+0xc>
 8039e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8039e92:	4798      	blx	r3
 8039e94:	3601      	adds	r6, #1
 8039e96:	e7f2      	b.n	8039e7e <__libc_init_array+0x1e>
 8039e98:	0803bdc4 	.word	0x0803bdc4
 8039e9c:	0803bdc4 	.word	0x0803bdc4
 8039ea0:	0803bdc4 	.word	0x0803bdc4
 8039ea4:	0803bdc8 	.word	0x0803bdc8

08039ea8 <malloc>:
 8039ea8:	4b02      	ldr	r3, [pc, #8]	; (8039eb4 <malloc+0xc>)
 8039eaa:	4601      	mov	r1, r0
 8039eac:	6818      	ldr	r0, [r3, #0]
 8039eae:	f000 b88d 	b.w	8039fcc <_malloc_r>
 8039eb2:	bf00      	nop
 8039eb4:	24000034 	.word	0x24000034

08039eb8 <free>:
 8039eb8:	4b02      	ldr	r3, [pc, #8]	; (8039ec4 <free+0xc>)
 8039eba:	4601      	mov	r1, r0
 8039ebc:	6818      	ldr	r0, [r3, #0]
 8039ebe:	f000 b819 	b.w	8039ef4 <_free_r>
 8039ec2:	bf00      	nop
 8039ec4:	24000034 	.word	0x24000034

08039ec8 <memcpy>:
 8039ec8:	440a      	add	r2, r1
 8039eca:	4291      	cmp	r1, r2
 8039ecc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8039ed0:	d100      	bne.n	8039ed4 <memcpy+0xc>
 8039ed2:	4770      	bx	lr
 8039ed4:	b510      	push	{r4, lr}
 8039ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8039eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8039ede:	4291      	cmp	r1, r2
 8039ee0:	d1f9      	bne.n	8039ed6 <memcpy+0xe>
 8039ee2:	bd10      	pop	{r4, pc}

08039ee4 <memset>:
 8039ee4:	4402      	add	r2, r0
 8039ee6:	4603      	mov	r3, r0
 8039ee8:	4293      	cmp	r3, r2
 8039eea:	d100      	bne.n	8039eee <memset+0xa>
 8039eec:	4770      	bx	lr
 8039eee:	f803 1b01 	strb.w	r1, [r3], #1
 8039ef2:	e7f9      	b.n	8039ee8 <memset+0x4>

08039ef4 <_free_r>:
 8039ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8039ef6:	2900      	cmp	r1, #0
 8039ef8:	d044      	beq.n	8039f84 <_free_r+0x90>
 8039efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8039efe:	9001      	str	r0, [sp, #4]
 8039f00:	2b00      	cmp	r3, #0
 8039f02:	f1a1 0404 	sub.w	r4, r1, #4
 8039f06:	bfb8      	it	lt
 8039f08:	18e4      	addlt	r4, r4, r3
 8039f0a:	f000 fca9 	bl	803a860 <__malloc_lock>
 8039f0e:	4a1e      	ldr	r2, [pc, #120]	; (8039f88 <_free_r+0x94>)
 8039f10:	9801      	ldr	r0, [sp, #4]
 8039f12:	6813      	ldr	r3, [r2, #0]
 8039f14:	b933      	cbnz	r3, 8039f24 <_free_r+0x30>
 8039f16:	6063      	str	r3, [r4, #4]
 8039f18:	6014      	str	r4, [r2, #0]
 8039f1a:	b003      	add	sp, #12
 8039f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8039f20:	f000 bca4 	b.w	803a86c <__malloc_unlock>
 8039f24:	42a3      	cmp	r3, r4
 8039f26:	d908      	bls.n	8039f3a <_free_r+0x46>
 8039f28:	6825      	ldr	r5, [r4, #0]
 8039f2a:	1961      	adds	r1, r4, r5
 8039f2c:	428b      	cmp	r3, r1
 8039f2e:	bf01      	itttt	eq
 8039f30:	6819      	ldreq	r1, [r3, #0]
 8039f32:	685b      	ldreq	r3, [r3, #4]
 8039f34:	1949      	addeq	r1, r1, r5
 8039f36:	6021      	streq	r1, [r4, #0]
 8039f38:	e7ed      	b.n	8039f16 <_free_r+0x22>
 8039f3a:	461a      	mov	r2, r3
 8039f3c:	685b      	ldr	r3, [r3, #4]
 8039f3e:	b10b      	cbz	r3, 8039f44 <_free_r+0x50>
 8039f40:	42a3      	cmp	r3, r4
 8039f42:	d9fa      	bls.n	8039f3a <_free_r+0x46>
 8039f44:	6811      	ldr	r1, [r2, #0]
 8039f46:	1855      	adds	r5, r2, r1
 8039f48:	42a5      	cmp	r5, r4
 8039f4a:	d10b      	bne.n	8039f64 <_free_r+0x70>
 8039f4c:	6824      	ldr	r4, [r4, #0]
 8039f4e:	4421      	add	r1, r4
 8039f50:	1854      	adds	r4, r2, r1
 8039f52:	42a3      	cmp	r3, r4
 8039f54:	6011      	str	r1, [r2, #0]
 8039f56:	d1e0      	bne.n	8039f1a <_free_r+0x26>
 8039f58:	681c      	ldr	r4, [r3, #0]
 8039f5a:	685b      	ldr	r3, [r3, #4]
 8039f5c:	6053      	str	r3, [r2, #4]
 8039f5e:	4421      	add	r1, r4
 8039f60:	6011      	str	r1, [r2, #0]
 8039f62:	e7da      	b.n	8039f1a <_free_r+0x26>
 8039f64:	d902      	bls.n	8039f6c <_free_r+0x78>
 8039f66:	230c      	movs	r3, #12
 8039f68:	6003      	str	r3, [r0, #0]
 8039f6a:	e7d6      	b.n	8039f1a <_free_r+0x26>
 8039f6c:	6825      	ldr	r5, [r4, #0]
 8039f6e:	1961      	adds	r1, r4, r5
 8039f70:	428b      	cmp	r3, r1
 8039f72:	bf04      	itt	eq
 8039f74:	6819      	ldreq	r1, [r3, #0]
 8039f76:	685b      	ldreq	r3, [r3, #4]
 8039f78:	6063      	str	r3, [r4, #4]
 8039f7a:	bf04      	itt	eq
 8039f7c:	1949      	addeq	r1, r1, r5
 8039f7e:	6021      	streq	r1, [r4, #0]
 8039f80:	6054      	str	r4, [r2, #4]
 8039f82:	e7ca      	b.n	8039f1a <_free_r+0x26>
 8039f84:	b003      	add	sp, #12
 8039f86:	bd30      	pop	{r4, r5, pc}
 8039f88:	240071d0 	.word	0x240071d0

08039f8c <sbrk_aligned>:
 8039f8c:	b570      	push	{r4, r5, r6, lr}
 8039f8e:	4e0e      	ldr	r6, [pc, #56]	; (8039fc8 <sbrk_aligned+0x3c>)
 8039f90:	460c      	mov	r4, r1
 8039f92:	6831      	ldr	r1, [r6, #0]
 8039f94:	4605      	mov	r5, r0
 8039f96:	b911      	cbnz	r1, 8039f9e <sbrk_aligned+0x12>
 8039f98:	f000 f91a 	bl	803a1d0 <_sbrk_r>
 8039f9c:	6030      	str	r0, [r6, #0]
 8039f9e:	4621      	mov	r1, r4
 8039fa0:	4628      	mov	r0, r5
 8039fa2:	f000 f915 	bl	803a1d0 <_sbrk_r>
 8039fa6:	1c43      	adds	r3, r0, #1
 8039fa8:	d00a      	beq.n	8039fc0 <sbrk_aligned+0x34>
 8039faa:	1cc4      	adds	r4, r0, #3
 8039fac:	f024 0403 	bic.w	r4, r4, #3
 8039fb0:	42a0      	cmp	r0, r4
 8039fb2:	d007      	beq.n	8039fc4 <sbrk_aligned+0x38>
 8039fb4:	1a21      	subs	r1, r4, r0
 8039fb6:	4628      	mov	r0, r5
 8039fb8:	f000 f90a 	bl	803a1d0 <_sbrk_r>
 8039fbc:	3001      	adds	r0, #1
 8039fbe:	d101      	bne.n	8039fc4 <sbrk_aligned+0x38>
 8039fc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8039fc4:	4620      	mov	r0, r4
 8039fc6:	bd70      	pop	{r4, r5, r6, pc}
 8039fc8:	240071d4 	.word	0x240071d4

08039fcc <_malloc_r>:
 8039fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8039fd0:	1ccd      	adds	r5, r1, #3
 8039fd2:	f025 0503 	bic.w	r5, r5, #3
 8039fd6:	3508      	adds	r5, #8
 8039fd8:	2d0c      	cmp	r5, #12
 8039fda:	bf38      	it	cc
 8039fdc:	250c      	movcc	r5, #12
 8039fde:	2d00      	cmp	r5, #0
 8039fe0:	4607      	mov	r7, r0
 8039fe2:	db01      	blt.n	8039fe8 <_malloc_r+0x1c>
 8039fe4:	42a9      	cmp	r1, r5
 8039fe6:	d905      	bls.n	8039ff4 <_malloc_r+0x28>
 8039fe8:	230c      	movs	r3, #12
 8039fea:	603b      	str	r3, [r7, #0]
 8039fec:	2600      	movs	r6, #0
 8039fee:	4630      	mov	r0, r6
 8039ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8039ff4:	4e2e      	ldr	r6, [pc, #184]	; (803a0b0 <_malloc_r+0xe4>)
 8039ff6:	f000 fc33 	bl	803a860 <__malloc_lock>
 8039ffa:	6833      	ldr	r3, [r6, #0]
 8039ffc:	461c      	mov	r4, r3
 8039ffe:	bb34      	cbnz	r4, 803a04e <_malloc_r+0x82>
 803a000:	4629      	mov	r1, r5
 803a002:	4638      	mov	r0, r7
 803a004:	f7ff ffc2 	bl	8039f8c <sbrk_aligned>
 803a008:	1c43      	adds	r3, r0, #1
 803a00a:	4604      	mov	r4, r0
 803a00c:	d14d      	bne.n	803a0aa <_malloc_r+0xde>
 803a00e:	6834      	ldr	r4, [r6, #0]
 803a010:	4626      	mov	r6, r4
 803a012:	2e00      	cmp	r6, #0
 803a014:	d140      	bne.n	803a098 <_malloc_r+0xcc>
 803a016:	6823      	ldr	r3, [r4, #0]
 803a018:	4631      	mov	r1, r6
 803a01a:	4638      	mov	r0, r7
 803a01c:	eb04 0803 	add.w	r8, r4, r3
 803a020:	f000 f8d6 	bl	803a1d0 <_sbrk_r>
 803a024:	4580      	cmp	r8, r0
 803a026:	d13a      	bne.n	803a09e <_malloc_r+0xd2>
 803a028:	6821      	ldr	r1, [r4, #0]
 803a02a:	3503      	adds	r5, #3
 803a02c:	1a6d      	subs	r5, r5, r1
 803a02e:	f025 0503 	bic.w	r5, r5, #3
 803a032:	3508      	adds	r5, #8
 803a034:	2d0c      	cmp	r5, #12
 803a036:	bf38      	it	cc
 803a038:	250c      	movcc	r5, #12
 803a03a:	4629      	mov	r1, r5
 803a03c:	4638      	mov	r0, r7
 803a03e:	f7ff ffa5 	bl	8039f8c <sbrk_aligned>
 803a042:	3001      	adds	r0, #1
 803a044:	d02b      	beq.n	803a09e <_malloc_r+0xd2>
 803a046:	6823      	ldr	r3, [r4, #0]
 803a048:	442b      	add	r3, r5
 803a04a:	6023      	str	r3, [r4, #0]
 803a04c:	e00e      	b.n	803a06c <_malloc_r+0xa0>
 803a04e:	6822      	ldr	r2, [r4, #0]
 803a050:	1b52      	subs	r2, r2, r5
 803a052:	d41e      	bmi.n	803a092 <_malloc_r+0xc6>
 803a054:	2a0b      	cmp	r2, #11
 803a056:	d916      	bls.n	803a086 <_malloc_r+0xba>
 803a058:	1961      	adds	r1, r4, r5
 803a05a:	42a3      	cmp	r3, r4
 803a05c:	6025      	str	r5, [r4, #0]
 803a05e:	bf18      	it	ne
 803a060:	6059      	strne	r1, [r3, #4]
 803a062:	6863      	ldr	r3, [r4, #4]
 803a064:	bf08      	it	eq
 803a066:	6031      	streq	r1, [r6, #0]
 803a068:	5162      	str	r2, [r4, r5]
 803a06a:	604b      	str	r3, [r1, #4]
 803a06c:	4638      	mov	r0, r7
 803a06e:	f104 060b 	add.w	r6, r4, #11
 803a072:	f000 fbfb 	bl	803a86c <__malloc_unlock>
 803a076:	f026 0607 	bic.w	r6, r6, #7
 803a07a:	1d23      	adds	r3, r4, #4
 803a07c:	1af2      	subs	r2, r6, r3
 803a07e:	d0b6      	beq.n	8039fee <_malloc_r+0x22>
 803a080:	1b9b      	subs	r3, r3, r6
 803a082:	50a3      	str	r3, [r4, r2]
 803a084:	e7b3      	b.n	8039fee <_malloc_r+0x22>
 803a086:	6862      	ldr	r2, [r4, #4]
 803a088:	42a3      	cmp	r3, r4
 803a08a:	bf0c      	ite	eq
 803a08c:	6032      	streq	r2, [r6, #0]
 803a08e:	605a      	strne	r2, [r3, #4]
 803a090:	e7ec      	b.n	803a06c <_malloc_r+0xa0>
 803a092:	4623      	mov	r3, r4
 803a094:	6864      	ldr	r4, [r4, #4]
 803a096:	e7b2      	b.n	8039ffe <_malloc_r+0x32>
 803a098:	4634      	mov	r4, r6
 803a09a:	6876      	ldr	r6, [r6, #4]
 803a09c:	e7b9      	b.n	803a012 <_malloc_r+0x46>
 803a09e:	230c      	movs	r3, #12
 803a0a0:	603b      	str	r3, [r7, #0]
 803a0a2:	4638      	mov	r0, r7
 803a0a4:	f000 fbe2 	bl	803a86c <__malloc_unlock>
 803a0a8:	e7a1      	b.n	8039fee <_malloc_r+0x22>
 803a0aa:	6025      	str	r5, [r4, #0]
 803a0ac:	e7de      	b.n	803a06c <_malloc_r+0xa0>
 803a0ae:	bf00      	nop
 803a0b0:	240071d0 	.word	0x240071d0

0803a0b4 <iprintf>:
 803a0b4:	b40f      	push	{r0, r1, r2, r3}
 803a0b6:	4b0a      	ldr	r3, [pc, #40]	; (803a0e0 <iprintf+0x2c>)
 803a0b8:	b513      	push	{r0, r1, r4, lr}
 803a0ba:	681c      	ldr	r4, [r3, #0]
 803a0bc:	b124      	cbz	r4, 803a0c8 <iprintf+0x14>
 803a0be:	69a3      	ldr	r3, [r4, #24]
 803a0c0:	b913      	cbnz	r3, 803a0c8 <iprintf+0x14>
 803a0c2:	4620      	mov	r0, r4
 803a0c4:	f000 fac6 	bl	803a654 <__sinit>
 803a0c8:	ab05      	add	r3, sp, #20
 803a0ca:	9a04      	ldr	r2, [sp, #16]
 803a0cc:	68a1      	ldr	r1, [r4, #8]
 803a0ce:	9301      	str	r3, [sp, #4]
 803a0d0:	4620      	mov	r0, r4
 803a0d2:	f000 fd57 	bl	803ab84 <_vfiprintf_r>
 803a0d6:	b002      	add	sp, #8
 803a0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803a0dc:	b004      	add	sp, #16
 803a0de:	4770      	bx	lr
 803a0e0:	24000034 	.word	0x24000034

0803a0e4 <_puts_r>:
 803a0e4:	b570      	push	{r4, r5, r6, lr}
 803a0e6:	460e      	mov	r6, r1
 803a0e8:	4605      	mov	r5, r0
 803a0ea:	b118      	cbz	r0, 803a0f4 <_puts_r+0x10>
 803a0ec:	6983      	ldr	r3, [r0, #24]
 803a0ee:	b90b      	cbnz	r3, 803a0f4 <_puts_r+0x10>
 803a0f0:	f000 fab0 	bl	803a654 <__sinit>
 803a0f4:	69ab      	ldr	r3, [r5, #24]
 803a0f6:	68ac      	ldr	r4, [r5, #8]
 803a0f8:	b913      	cbnz	r3, 803a100 <_puts_r+0x1c>
 803a0fa:	4628      	mov	r0, r5
 803a0fc:	f000 faaa 	bl	803a654 <__sinit>
 803a100:	4b2c      	ldr	r3, [pc, #176]	; (803a1b4 <_puts_r+0xd0>)
 803a102:	429c      	cmp	r4, r3
 803a104:	d120      	bne.n	803a148 <_puts_r+0x64>
 803a106:	686c      	ldr	r4, [r5, #4]
 803a108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803a10a:	07db      	lsls	r3, r3, #31
 803a10c:	d405      	bmi.n	803a11a <_puts_r+0x36>
 803a10e:	89a3      	ldrh	r3, [r4, #12]
 803a110:	0598      	lsls	r0, r3, #22
 803a112:	d402      	bmi.n	803a11a <_puts_r+0x36>
 803a114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803a116:	f000 fb3b 	bl	803a790 <__retarget_lock_acquire_recursive>
 803a11a:	89a3      	ldrh	r3, [r4, #12]
 803a11c:	0719      	lsls	r1, r3, #28
 803a11e:	d51d      	bpl.n	803a15c <_puts_r+0x78>
 803a120:	6923      	ldr	r3, [r4, #16]
 803a122:	b1db      	cbz	r3, 803a15c <_puts_r+0x78>
 803a124:	3e01      	subs	r6, #1
 803a126:	68a3      	ldr	r3, [r4, #8]
 803a128:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 803a12c:	3b01      	subs	r3, #1
 803a12e:	60a3      	str	r3, [r4, #8]
 803a130:	bb39      	cbnz	r1, 803a182 <_puts_r+0x9e>
 803a132:	2b00      	cmp	r3, #0
 803a134:	da38      	bge.n	803a1a8 <_puts_r+0xc4>
 803a136:	4622      	mov	r2, r4
 803a138:	210a      	movs	r1, #10
 803a13a:	4628      	mov	r0, r5
 803a13c:	f000 f8b0 	bl	803a2a0 <__swbuf_r>
 803a140:	3001      	adds	r0, #1
 803a142:	d011      	beq.n	803a168 <_puts_r+0x84>
 803a144:	250a      	movs	r5, #10
 803a146:	e011      	b.n	803a16c <_puts_r+0x88>
 803a148:	4b1b      	ldr	r3, [pc, #108]	; (803a1b8 <_puts_r+0xd4>)
 803a14a:	429c      	cmp	r4, r3
 803a14c:	d101      	bne.n	803a152 <_puts_r+0x6e>
 803a14e:	68ac      	ldr	r4, [r5, #8]
 803a150:	e7da      	b.n	803a108 <_puts_r+0x24>
 803a152:	4b1a      	ldr	r3, [pc, #104]	; (803a1bc <_puts_r+0xd8>)
 803a154:	429c      	cmp	r4, r3
 803a156:	bf08      	it	eq
 803a158:	68ec      	ldreq	r4, [r5, #12]
 803a15a:	e7d5      	b.n	803a108 <_puts_r+0x24>
 803a15c:	4621      	mov	r1, r4
 803a15e:	4628      	mov	r0, r5
 803a160:	f000 f8f0 	bl	803a344 <__swsetup_r>
 803a164:	2800      	cmp	r0, #0
 803a166:	d0dd      	beq.n	803a124 <_puts_r+0x40>
 803a168:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 803a16c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803a16e:	07da      	lsls	r2, r3, #31
 803a170:	d405      	bmi.n	803a17e <_puts_r+0x9a>
 803a172:	89a3      	ldrh	r3, [r4, #12]
 803a174:	059b      	lsls	r3, r3, #22
 803a176:	d402      	bmi.n	803a17e <_puts_r+0x9a>
 803a178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803a17a:	f000 fb0a 	bl	803a792 <__retarget_lock_release_recursive>
 803a17e:	4628      	mov	r0, r5
 803a180:	bd70      	pop	{r4, r5, r6, pc}
 803a182:	2b00      	cmp	r3, #0
 803a184:	da04      	bge.n	803a190 <_puts_r+0xac>
 803a186:	69a2      	ldr	r2, [r4, #24]
 803a188:	429a      	cmp	r2, r3
 803a18a:	dc06      	bgt.n	803a19a <_puts_r+0xb6>
 803a18c:	290a      	cmp	r1, #10
 803a18e:	d004      	beq.n	803a19a <_puts_r+0xb6>
 803a190:	6823      	ldr	r3, [r4, #0]
 803a192:	1c5a      	adds	r2, r3, #1
 803a194:	6022      	str	r2, [r4, #0]
 803a196:	7019      	strb	r1, [r3, #0]
 803a198:	e7c5      	b.n	803a126 <_puts_r+0x42>
 803a19a:	4622      	mov	r2, r4
 803a19c:	4628      	mov	r0, r5
 803a19e:	f000 f87f 	bl	803a2a0 <__swbuf_r>
 803a1a2:	3001      	adds	r0, #1
 803a1a4:	d1bf      	bne.n	803a126 <_puts_r+0x42>
 803a1a6:	e7df      	b.n	803a168 <_puts_r+0x84>
 803a1a8:	6823      	ldr	r3, [r4, #0]
 803a1aa:	250a      	movs	r5, #10
 803a1ac:	1c5a      	adds	r2, r3, #1
 803a1ae:	6022      	str	r2, [r4, #0]
 803a1b0:	701d      	strb	r5, [r3, #0]
 803a1b2:	e7db      	b.n	803a16c <_puts_r+0x88>
 803a1b4:	0803bd48 	.word	0x0803bd48
 803a1b8:	0803bd68 	.word	0x0803bd68
 803a1bc:	0803bd28 	.word	0x0803bd28

0803a1c0 <puts>:
 803a1c0:	4b02      	ldr	r3, [pc, #8]	; (803a1cc <puts+0xc>)
 803a1c2:	4601      	mov	r1, r0
 803a1c4:	6818      	ldr	r0, [r3, #0]
 803a1c6:	f7ff bf8d 	b.w	803a0e4 <_puts_r>
 803a1ca:	bf00      	nop
 803a1cc:	24000034 	.word	0x24000034

0803a1d0 <_sbrk_r>:
 803a1d0:	b538      	push	{r3, r4, r5, lr}
 803a1d2:	4d06      	ldr	r5, [pc, #24]	; (803a1ec <_sbrk_r+0x1c>)
 803a1d4:	2300      	movs	r3, #0
 803a1d6:	4604      	mov	r4, r0
 803a1d8:	4608      	mov	r0, r1
 803a1da:	602b      	str	r3, [r5, #0]
 803a1dc:	f7e7 fe32 	bl	8021e44 <_sbrk>
 803a1e0:	1c43      	adds	r3, r0, #1
 803a1e2:	d102      	bne.n	803a1ea <_sbrk_r+0x1a>
 803a1e4:	682b      	ldr	r3, [r5, #0]
 803a1e6:	b103      	cbz	r3, 803a1ea <_sbrk_r+0x1a>
 803a1e8:	6023      	str	r3, [r4, #0]
 803a1ea:	bd38      	pop	{r3, r4, r5, pc}
 803a1ec:	240071dc 	.word	0x240071dc

0803a1f0 <siprintf>:
 803a1f0:	b40e      	push	{r1, r2, r3}
 803a1f2:	b500      	push	{lr}
 803a1f4:	b09c      	sub	sp, #112	; 0x70
 803a1f6:	ab1d      	add	r3, sp, #116	; 0x74
 803a1f8:	9002      	str	r0, [sp, #8]
 803a1fa:	9006      	str	r0, [sp, #24]
 803a1fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 803a200:	4809      	ldr	r0, [pc, #36]	; (803a228 <siprintf+0x38>)
 803a202:	9107      	str	r1, [sp, #28]
 803a204:	9104      	str	r1, [sp, #16]
 803a206:	4909      	ldr	r1, [pc, #36]	; (803a22c <siprintf+0x3c>)
 803a208:	f853 2b04 	ldr.w	r2, [r3], #4
 803a20c:	9105      	str	r1, [sp, #20]
 803a20e:	6800      	ldr	r0, [r0, #0]
 803a210:	9301      	str	r3, [sp, #4]
 803a212:	a902      	add	r1, sp, #8
 803a214:	f000 fb8c 	bl	803a930 <_svfiprintf_r>
 803a218:	9b02      	ldr	r3, [sp, #8]
 803a21a:	2200      	movs	r2, #0
 803a21c:	701a      	strb	r2, [r3, #0]
 803a21e:	b01c      	add	sp, #112	; 0x70
 803a220:	f85d eb04 	ldr.w	lr, [sp], #4
 803a224:	b003      	add	sp, #12
 803a226:	4770      	bx	lr
 803a228:	24000034 	.word	0x24000034
 803a22c:	ffff0208 	.word	0xffff0208

0803a230 <strchr>:
 803a230:	b2c9      	uxtb	r1, r1
 803a232:	4603      	mov	r3, r0
 803a234:	f810 2b01 	ldrb.w	r2, [r0], #1
 803a238:	b11a      	cbz	r2, 803a242 <strchr+0x12>
 803a23a:	428a      	cmp	r2, r1
 803a23c:	d1f9      	bne.n	803a232 <strchr+0x2>
 803a23e:	4618      	mov	r0, r3
 803a240:	4770      	bx	lr
 803a242:	2900      	cmp	r1, #0
 803a244:	bf18      	it	ne
 803a246:	2300      	movne	r3, #0
 803a248:	e7f9      	b.n	803a23e <strchr+0xe>

0803a24a <strncmp>:
 803a24a:	b510      	push	{r4, lr}
 803a24c:	b17a      	cbz	r2, 803a26e <strncmp+0x24>
 803a24e:	4603      	mov	r3, r0
 803a250:	3901      	subs	r1, #1
 803a252:	1884      	adds	r4, r0, r2
 803a254:	f813 0b01 	ldrb.w	r0, [r3], #1
 803a258:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 803a25c:	4290      	cmp	r0, r2
 803a25e:	d101      	bne.n	803a264 <strncmp+0x1a>
 803a260:	42a3      	cmp	r3, r4
 803a262:	d101      	bne.n	803a268 <strncmp+0x1e>
 803a264:	1a80      	subs	r0, r0, r2
 803a266:	bd10      	pop	{r4, pc}
 803a268:	2800      	cmp	r0, #0
 803a26a:	d1f3      	bne.n	803a254 <strncmp+0xa>
 803a26c:	e7fa      	b.n	803a264 <strncmp+0x1a>
 803a26e:	4610      	mov	r0, r2
 803a270:	e7f9      	b.n	803a266 <strncmp+0x1c>

0803a272 <strstr>:
 803a272:	780a      	ldrb	r2, [r1, #0]
 803a274:	b570      	push	{r4, r5, r6, lr}
 803a276:	b96a      	cbnz	r2, 803a294 <strstr+0x22>
 803a278:	bd70      	pop	{r4, r5, r6, pc}
 803a27a:	429a      	cmp	r2, r3
 803a27c:	d109      	bne.n	803a292 <strstr+0x20>
 803a27e:	460c      	mov	r4, r1
 803a280:	4605      	mov	r5, r0
 803a282:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 803a286:	2b00      	cmp	r3, #0
 803a288:	d0f6      	beq.n	803a278 <strstr+0x6>
 803a28a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 803a28e:	429e      	cmp	r6, r3
 803a290:	d0f7      	beq.n	803a282 <strstr+0x10>
 803a292:	3001      	adds	r0, #1
 803a294:	7803      	ldrb	r3, [r0, #0]
 803a296:	2b00      	cmp	r3, #0
 803a298:	d1ef      	bne.n	803a27a <strstr+0x8>
 803a29a:	4618      	mov	r0, r3
 803a29c:	e7ec      	b.n	803a278 <strstr+0x6>
	...

0803a2a0 <__swbuf_r>:
 803a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803a2a2:	460e      	mov	r6, r1
 803a2a4:	4614      	mov	r4, r2
 803a2a6:	4605      	mov	r5, r0
 803a2a8:	b118      	cbz	r0, 803a2b2 <__swbuf_r+0x12>
 803a2aa:	6983      	ldr	r3, [r0, #24]
 803a2ac:	b90b      	cbnz	r3, 803a2b2 <__swbuf_r+0x12>
 803a2ae:	f000 f9d1 	bl	803a654 <__sinit>
 803a2b2:	4b21      	ldr	r3, [pc, #132]	; (803a338 <__swbuf_r+0x98>)
 803a2b4:	429c      	cmp	r4, r3
 803a2b6:	d12b      	bne.n	803a310 <__swbuf_r+0x70>
 803a2b8:	686c      	ldr	r4, [r5, #4]
 803a2ba:	69a3      	ldr	r3, [r4, #24]
 803a2bc:	60a3      	str	r3, [r4, #8]
 803a2be:	89a3      	ldrh	r3, [r4, #12]
 803a2c0:	071a      	lsls	r2, r3, #28
 803a2c2:	d52f      	bpl.n	803a324 <__swbuf_r+0x84>
 803a2c4:	6923      	ldr	r3, [r4, #16]
 803a2c6:	b36b      	cbz	r3, 803a324 <__swbuf_r+0x84>
 803a2c8:	6923      	ldr	r3, [r4, #16]
 803a2ca:	6820      	ldr	r0, [r4, #0]
 803a2cc:	1ac0      	subs	r0, r0, r3
 803a2ce:	6963      	ldr	r3, [r4, #20]
 803a2d0:	b2f6      	uxtb	r6, r6
 803a2d2:	4283      	cmp	r3, r0
 803a2d4:	4637      	mov	r7, r6
 803a2d6:	dc04      	bgt.n	803a2e2 <__swbuf_r+0x42>
 803a2d8:	4621      	mov	r1, r4
 803a2da:	4628      	mov	r0, r5
 803a2dc:	f000 f926 	bl	803a52c <_fflush_r>
 803a2e0:	bb30      	cbnz	r0, 803a330 <__swbuf_r+0x90>
 803a2e2:	68a3      	ldr	r3, [r4, #8]
 803a2e4:	3b01      	subs	r3, #1
 803a2e6:	60a3      	str	r3, [r4, #8]
 803a2e8:	6823      	ldr	r3, [r4, #0]
 803a2ea:	1c5a      	adds	r2, r3, #1
 803a2ec:	6022      	str	r2, [r4, #0]
 803a2ee:	701e      	strb	r6, [r3, #0]
 803a2f0:	6963      	ldr	r3, [r4, #20]
 803a2f2:	3001      	adds	r0, #1
 803a2f4:	4283      	cmp	r3, r0
 803a2f6:	d004      	beq.n	803a302 <__swbuf_r+0x62>
 803a2f8:	89a3      	ldrh	r3, [r4, #12]
 803a2fa:	07db      	lsls	r3, r3, #31
 803a2fc:	d506      	bpl.n	803a30c <__swbuf_r+0x6c>
 803a2fe:	2e0a      	cmp	r6, #10
 803a300:	d104      	bne.n	803a30c <__swbuf_r+0x6c>
 803a302:	4621      	mov	r1, r4
 803a304:	4628      	mov	r0, r5
 803a306:	f000 f911 	bl	803a52c <_fflush_r>
 803a30a:	b988      	cbnz	r0, 803a330 <__swbuf_r+0x90>
 803a30c:	4638      	mov	r0, r7
 803a30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803a310:	4b0a      	ldr	r3, [pc, #40]	; (803a33c <__swbuf_r+0x9c>)
 803a312:	429c      	cmp	r4, r3
 803a314:	d101      	bne.n	803a31a <__swbuf_r+0x7a>
 803a316:	68ac      	ldr	r4, [r5, #8]
 803a318:	e7cf      	b.n	803a2ba <__swbuf_r+0x1a>
 803a31a:	4b09      	ldr	r3, [pc, #36]	; (803a340 <__swbuf_r+0xa0>)
 803a31c:	429c      	cmp	r4, r3
 803a31e:	bf08      	it	eq
 803a320:	68ec      	ldreq	r4, [r5, #12]
 803a322:	e7ca      	b.n	803a2ba <__swbuf_r+0x1a>
 803a324:	4621      	mov	r1, r4
 803a326:	4628      	mov	r0, r5
 803a328:	f000 f80c 	bl	803a344 <__swsetup_r>
 803a32c:	2800      	cmp	r0, #0
 803a32e:	d0cb      	beq.n	803a2c8 <__swbuf_r+0x28>
 803a330:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 803a334:	e7ea      	b.n	803a30c <__swbuf_r+0x6c>
 803a336:	bf00      	nop
 803a338:	0803bd48 	.word	0x0803bd48
 803a33c:	0803bd68 	.word	0x0803bd68
 803a340:	0803bd28 	.word	0x0803bd28

0803a344 <__swsetup_r>:
 803a344:	4b32      	ldr	r3, [pc, #200]	; (803a410 <__swsetup_r+0xcc>)
 803a346:	b570      	push	{r4, r5, r6, lr}
 803a348:	681d      	ldr	r5, [r3, #0]
 803a34a:	4606      	mov	r6, r0
 803a34c:	460c      	mov	r4, r1
 803a34e:	b125      	cbz	r5, 803a35a <__swsetup_r+0x16>
 803a350:	69ab      	ldr	r3, [r5, #24]
 803a352:	b913      	cbnz	r3, 803a35a <__swsetup_r+0x16>
 803a354:	4628      	mov	r0, r5
 803a356:	f000 f97d 	bl	803a654 <__sinit>
 803a35a:	4b2e      	ldr	r3, [pc, #184]	; (803a414 <__swsetup_r+0xd0>)
 803a35c:	429c      	cmp	r4, r3
 803a35e:	d10f      	bne.n	803a380 <__swsetup_r+0x3c>
 803a360:	686c      	ldr	r4, [r5, #4]
 803a362:	89a3      	ldrh	r3, [r4, #12]
 803a364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803a368:	0719      	lsls	r1, r3, #28
 803a36a:	d42c      	bmi.n	803a3c6 <__swsetup_r+0x82>
 803a36c:	06dd      	lsls	r5, r3, #27
 803a36e:	d411      	bmi.n	803a394 <__swsetup_r+0x50>
 803a370:	2309      	movs	r3, #9
 803a372:	6033      	str	r3, [r6, #0]
 803a374:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803a378:	81a3      	strh	r3, [r4, #12]
 803a37a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803a37e:	e03e      	b.n	803a3fe <__swsetup_r+0xba>
 803a380:	4b25      	ldr	r3, [pc, #148]	; (803a418 <__swsetup_r+0xd4>)
 803a382:	429c      	cmp	r4, r3
 803a384:	d101      	bne.n	803a38a <__swsetup_r+0x46>
 803a386:	68ac      	ldr	r4, [r5, #8]
 803a388:	e7eb      	b.n	803a362 <__swsetup_r+0x1e>
 803a38a:	4b24      	ldr	r3, [pc, #144]	; (803a41c <__swsetup_r+0xd8>)
 803a38c:	429c      	cmp	r4, r3
 803a38e:	bf08      	it	eq
 803a390:	68ec      	ldreq	r4, [r5, #12]
 803a392:	e7e6      	b.n	803a362 <__swsetup_r+0x1e>
 803a394:	0758      	lsls	r0, r3, #29
 803a396:	d512      	bpl.n	803a3be <__swsetup_r+0x7a>
 803a398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803a39a:	b141      	cbz	r1, 803a3ae <__swsetup_r+0x6a>
 803a39c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803a3a0:	4299      	cmp	r1, r3
 803a3a2:	d002      	beq.n	803a3aa <__swsetup_r+0x66>
 803a3a4:	4630      	mov	r0, r6
 803a3a6:	f7ff fda5 	bl	8039ef4 <_free_r>
 803a3aa:	2300      	movs	r3, #0
 803a3ac:	6363      	str	r3, [r4, #52]	; 0x34
 803a3ae:	89a3      	ldrh	r3, [r4, #12]
 803a3b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803a3b4:	81a3      	strh	r3, [r4, #12]
 803a3b6:	2300      	movs	r3, #0
 803a3b8:	6063      	str	r3, [r4, #4]
 803a3ba:	6923      	ldr	r3, [r4, #16]
 803a3bc:	6023      	str	r3, [r4, #0]
 803a3be:	89a3      	ldrh	r3, [r4, #12]
 803a3c0:	f043 0308 	orr.w	r3, r3, #8
 803a3c4:	81a3      	strh	r3, [r4, #12]
 803a3c6:	6923      	ldr	r3, [r4, #16]
 803a3c8:	b94b      	cbnz	r3, 803a3de <__swsetup_r+0x9a>
 803a3ca:	89a3      	ldrh	r3, [r4, #12]
 803a3cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803a3d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803a3d4:	d003      	beq.n	803a3de <__swsetup_r+0x9a>
 803a3d6:	4621      	mov	r1, r4
 803a3d8:	4630      	mov	r0, r6
 803a3da:	f000 fa01 	bl	803a7e0 <__smakebuf_r>
 803a3de:	89a0      	ldrh	r0, [r4, #12]
 803a3e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803a3e4:	f010 0301 	ands.w	r3, r0, #1
 803a3e8:	d00a      	beq.n	803a400 <__swsetup_r+0xbc>
 803a3ea:	2300      	movs	r3, #0
 803a3ec:	60a3      	str	r3, [r4, #8]
 803a3ee:	6963      	ldr	r3, [r4, #20]
 803a3f0:	425b      	negs	r3, r3
 803a3f2:	61a3      	str	r3, [r4, #24]
 803a3f4:	6923      	ldr	r3, [r4, #16]
 803a3f6:	b943      	cbnz	r3, 803a40a <__swsetup_r+0xc6>
 803a3f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803a3fc:	d1ba      	bne.n	803a374 <__swsetup_r+0x30>
 803a3fe:	bd70      	pop	{r4, r5, r6, pc}
 803a400:	0781      	lsls	r1, r0, #30
 803a402:	bf58      	it	pl
 803a404:	6963      	ldrpl	r3, [r4, #20]
 803a406:	60a3      	str	r3, [r4, #8]
 803a408:	e7f4      	b.n	803a3f4 <__swsetup_r+0xb0>
 803a40a:	2000      	movs	r0, #0
 803a40c:	e7f7      	b.n	803a3fe <__swsetup_r+0xba>
 803a40e:	bf00      	nop
 803a410:	24000034 	.word	0x24000034
 803a414:	0803bd48 	.word	0x0803bd48
 803a418:	0803bd68 	.word	0x0803bd68
 803a41c:	0803bd28 	.word	0x0803bd28

0803a420 <__sflush_r>:
 803a420:	898a      	ldrh	r2, [r1, #12]
 803a422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803a426:	4605      	mov	r5, r0
 803a428:	0710      	lsls	r0, r2, #28
 803a42a:	460c      	mov	r4, r1
 803a42c:	d458      	bmi.n	803a4e0 <__sflush_r+0xc0>
 803a42e:	684b      	ldr	r3, [r1, #4]
 803a430:	2b00      	cmp	r3, #0
 803a432:	dc05      	bgt.n	803a440 <__sflush_r+0x20>
 803a434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803a436:	2b00      	cmp	r3, #0
 803a438:	dc02      	bgt.n	803a440 <__sflush_r+0x20>
 803a43a:	2000      	movs	r0, #0
 803a43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803a440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803a442:	2e00      	cmp	r6, #0
 803a444:	d0f9      	beq.n	803a43a <__sflush_r+0x1a>
 803a446:	2300      	movs	r3, #0
 803a448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803a44c:	682f      	ldr	r7, [r5, #0]
 803a44e:	602b      	str	r3, [r5, #0]
 803a450:	d032      	beq.n	803a4b8 <__sflush_r+0x98>
 803a452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803a454:	89a3      	ldrh	r3, [r4, #12]
 803a456:	075a      	lsls	r2, r3, #29
 803a458:	d505      	bpl.n	803a466 <__sflush_r+0x46>
 803a45a:	6863      	ldr	r3, [r4, #4]
 803a45c:	1ac0      	subs	r0, r0, r3
 803a45e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803a460:	b10b      	cbz	r3, 803a466 <__sflush_r+0x46>
 803a462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803a464:	1ac0      	subs	r0, r0, r3
 803a466:	2300      	movs	r3, #0
 803a468:	4602      	mov	r2, r0
 803a46a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803a46c:	6a21      	ldr	r1, [r4, #32]
 803a46e:	4628      	mov	r0, r5
 803a470:	47b0      	blx	r6
 803a472:	1c43      	adds	r3, r0, #1
 803a474:	89a3      	ldrh	r3, [r4, #12]
 803a476:	d106      	bne.n	803a486 <__sflush_r+0x66>
 803a478:	6829      	ldr	r1, [r5, #0]
 803a47a:	291d      	cmp	r1, #29
 803a47c:	d82c      	bhi.n	803a4d8 <__sflush_r+0xb8>
 803a47e:	4a2a      	ldr	r2, [pc, #168]	; (803a528 <__sflush_r+0x108>)
 803a480:	40ca      	lsrs	r2, r1
 803a482:	07d6      	lsls	r6, r2, #31
 803a484:	d528      	bpl.n	803a4d8 <__sflush_r+0xb8>
 803a486:	2200      	movs	r2, #0
 803a488:	6062      	str	r2, [r4, #4]
 803a48a:	04d9      	lsls	r1, r3, #19
 803a48c:	6922      	ldr	r2, [r4, #16]
 803a48e:	6022      	str	r2, [r4, #0]
 803a490:	d504      	bpl.n	803a49c <__sflush_r+0x7c>
 803a492:	1c42      	adds	r2, r0, #1
 803a494:	d101      	bne.n	803a49a <__sflush_r+0x7a>
 803a496:	682b      	ldr	r3, [r5, #0]
 803a498:	b903      	cbnz	r3, 803a49c <__sflush_r+0x7c>
 803a49a:	6560      	str	r0, [r4, #84]	; 0x54
 803a49c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803a49e:	602f      	str	r7, [r5, #0]
 803a4a0:	2900      	cmp	r1, #0
 803a4a2:	d0ca      	beq.n	803a43a <__sflush_r+0x1a>
 803a4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803a4a8:	4299      	cmp	r1, r3
 803a4aa:	d002      	beq.n	803a4b2 <__sflush_r+0x92>
 803a4ac:	4628      	mov	r0, r5
 803a4ae:	f7ff fd21 	bl	8039ef4 <_free_r>
 803a4b2:	2000      	movs	r0, #0
 803a4b4:	6360      	str	r0, [r4, #52]	; 0x34
 803a4b6:	e7c1      	b.n	803a43c <__sflush_r+0x1c>
 803a4b8:	6a21      	ldr	r1, [r4, #32]
 803a4ba:	2301      	movs	r3, #1
 803a4bc:	4628      	mov	r0, r5
 803a4be:	47b0      	blx	r6
 803a4c0:	1c41      	adds	r1, r0, #1
 803a4c2:	d1c7      	bne.n	803a454 <__sflush_r+0x34>
 803a4c4:	682b      	ldr	r3, [r5, #0]
 803a4c6:	2b00      	cmp	r3, #0
 803a4c8:	d0c4      	beq.n	803a454 <__sflush_r+0x34>
 803a4ca:	2b1d      	cmp	r3, #29
 803a4cc:	d001      	beq.n	803a4d2 <__sflush_r+0xb2>
 803a4ce:	2b16      	cmp	r3, #22
 803a4d0:	d101      	bne.n	803a4d6 <__sflush_r+0xb6>
 803a4d2:	602f      	str	r7, [r5, #0]
 803a4d4:	e7b1      	b.n	803a43a <__sflush_r+0x1a>
 803a4d6:	89a3      	ldrh	r3, [r4, #12]
 803a4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a4dc:	81a3      	strh	r3, [r4, #12]
 803a4de:	e7ad      	b.n	803a43c <__sflush_r+0x1c>
 803a4e0:	690f      	ldr	r7, [r1, #16]
 803a4e2:	2f00      	cmp	r7, #0
 803a4e4:	d0a9      	beq.n	803a43a <__sflush_r+0x1a>
 803a4e6:	0793      	lsls	r3, r2, #30
 803a4e8:	680e      	ldr	r6, [r1, #0]
 803a4ea:	bf08      	it	eq
 803a4ec:	694b      	ldreq	r3, [r1, #20]
 803a4ee:	600f      	str	r7, [r1, #0]
 803a4f0:	bf18      	it	ne
 803a4f2:	2300      	movne	r3, #0
 803a4f4:	eba6 0807 	sub.w	r8, r6, r7
 803a4f8:	608b      	str	r3, [r1, #8]
 803a4fa:	f1b8 0f00 	cmp.w	r8, #0
 803a4fe:	dd9c      	ble.n	803a43a <__sflush_r+0x1a>
 803a500:	6a21      	ldr	r1, [r4, #32]
 803a502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803a504:	4643      	mov	r3, r8
 803a506:	463a      	mov	r2, r7
 803a508:	4628      	mov	r0, r5
 803a50a:	47b0      	blx	r6
 803a50c:	2800      	cmp	r0, #0
 803a50e:	dc06      	bgt.n	803a51e <__sflush_r+0xfe>
 803a510:	89a3      	ldrh	r3, [r4, #12]
 803a512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a516:	81a3      	strh	r3, [r4, #12]
 803a518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803a51c:	e78e      	b.n	803a43c <__sflush_r+0x1c>
 803a51e:	4407      	add	r7, r0
 803a520:	eba8 0800 	sub.w	r8, r8, r0
 803a524:	e7e9      	b.n	803a4fa <__sflush_r+0xda>
 803a526:	bf00      	nop
 803a528:	20400001 	.word	0x20400001

0803a52c <_fflush_r>:
 803a52c:	b538      	push	{r3, r4, r5, lr}
 803a52e:	690b      	ldr	r3, [r1, #16]
 803a530:	4605      	mov	r5, r0
 803a532:	460c      	mov	r4, r1
 803a534:	b913      	cbnz	r3, 803a53c <_fflush_r+0x10>
 803a536:	2500      	movs	r5, #0
 803a538:	4628      	mov	r0, r5
 803a53a:	bd38      	pop	{r3, r4, r5, pc}
 803a53c:	b118      	cbz	r0, 803a546 <_fflush_r+0x1a>
 803a53e:	6983      	ldr	r3, [r0, #24]
 803a540:	b90b      	cbnz	r3, 803a546 <_fflush_r+0x1a>
 803a542:	f000 f887 	bl	803a654 <__sinit>
 803a546:	4b14      	ldr	r3, [pc, #80]	; (803a598 <_fflush_r+0x6c>)
 803a548:	429c      	cmp	r4, r3
 803a54a:	d11b      	bne.n	803a584 <_fflush_r+0x58>
 803a54c:	686c      	ldr	r4, [r5, #4]
 803a54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803a552:	2b00      	cmp	r3, #0
 803a554:	d0ef      	beq.n	803a536 <_fflush_r+0xa>
 803a556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803a558:	07d0      	lsls	r0, r2, #31
 803a55a:	d404      	bmi.n	803a566 <_fflush_r+0x3a>
 803a55c:	0599      	lsls	r1, r3, #22
 803a55e:	d402      	bmi.n	803a566 <_fflush_r+0x3a>
 803a560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803a562:	f000 f915 	bl	803a790 <__retarget_lock_acquire_recursive>
 803a566:	4628      	mov	r0, r5
 803a568:	4621      	mov	r1, r4
 803a56a:	f7ff ff59 	bl	803a420 <__sflush_r>
 803a56e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803a570:	07da      	lsls	r2, r3, #31
 803a572:	4605      	mov	r5, r0
 803a574:	d4e0      	bmi.n	803a538 <_fflush_r+0xc>
 803a576:	89a3      	ldrh	r3, [r4, #12]
 803a578:	059b      	lsls	r3, r3, #22
 803a57a:	d4dd      	bmi.n	803a538 <_fflush_r+0xc>
 803a57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803a57e:	f000 f908 	bl	803a792 <__retarget_lock_release_recursive>
 803a582:	e7d9      	b.n	803a538 <_fflush_r+0xc>
 803a584:	4b05      	ldr	r3, [pc, #20]	; (803a59c <_fflush_r+0x70>)
 803a586:	429c      	cmp	r4, r3
 803a588:	d101      	bne.n	803a58e <_fflush_r+0x62>
 803a58a:	68ac      	ldr	r4, [r5, #8]
 803a58c:	e7df      	b.n	803a54e <_fflush_r+0x22>
 803a58e:	4b04      	ldr	r3, [pc, #16]	; (803a5a0 <_fflush_r+0x74>)
 803a590:	429c      	cmp	r4, r3
 803a592:	bf08      	it	eq
 803a594:	68ec      	ldreq	r4, [r5, #12]
 803a596:	e7da      	b.n	803a54e <_fflush_r+0x22>
 803a598:	0803bd48 	.word	0x0803bd48
 803a59c:	0803bd68 	.word	0x0803bd68
 803a5a0:	0803bd28 	.word	0x0803bd28

0803a5a4 <std>:
 803a5a4:	2300      	movs	r3, #0
 803a5a6:	b510      	push	{r4, lr}
 803a5a8:	4604      	mov	r4, r0
 803a5aa:	e9c0 3300 	strd	r3, r3, [r0]
 803a5ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803a5b2:	6083      	str	r3, [r0, #8]
 803a5b4:	8181      	strh	r1, [r0, #12]
 803a5b6:	6643      	str	r3, [r0, #100]	; 0x64
 803a5b8:	81c2      	strh	r2, [r0, #14]
 803a5ba:	6183      	str	r3, [r0, #24]
 803a5bc:	4619      	mov	r1, r3
 803a5be:	2208      	movs	r2, #8
 803a5c0:	305c      	adds	r0, #92	; 0x5c
 803a5c2:	f7ff fc8f 	bl	8039ee4 <memset>
 803a5c6:	4b05      	ldr	r3, [pc, #20]	; (803a5dc <std+0x38>)
 803a5c8:	6263      	str	r3, [r4, #36]	; 0x24
 803a5ca:	4b05      	ldr	r3, [pc, #20]	; (803a5e0 <std+0x3c>)
 803a5cc:	62a3      	str	r3, [r4, #40]	; 0x28
 803a5ce:	4b05      	ldr	r3, [pc, #20]	; (803a5e4 <std+0x40>)
 803a5d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 803a5d2:	4b05      	ldr	r3, [pc, #20]	; (803a5e8 <std+0x44>)
 803a5d4:	6224      	str	r4, [r4, #32]
 803a5d6:	6323      	str	r3, [r4, #48]	; 0x30
 803a5d8:	bd10      	pop	{r4, pc}
 803a5da:	bf00      	nop
 803a5dc:	0803b10d 	.word	0x0803b10d
 803a5e0:	0803b12f 	.word	0x0803b12f
 803a5e4:	0803b167 	.word	0x0803b167
 803a5e8:	0803b18b 	.word	0x0803b18b

0803a5ec <_cleanup_r>:
 803a5ec:	4901      	ldr	r1, [pc, #4]	; (803a5f4 <_cleanup_r+0x8>)
 803a5ee:	f000 b8af 	b.w	803a750 <_fwalk_reent>
 803a5f2:	bf00      	nop
 803a5f4:	0803a52d 	.word	0x0803a52d

0803a5f8 <__sfmoreglue>:
 803a5f8:	b570      	push	{r4, r5, r6, lr}
 803a5fa:	2268      	movs	r2, #104	; 0x68
 803a5fc:	1e4d      	subs	r5, r1, #1
 803a5fe:	4355      	muls	r5, r2
 803a600:	460e      	mov	r6, r1
 803a602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803a606:	f7ff fce1 	bl	8039fcc <_malloc_r>
 803a60a:	4604      	mov	r4, r0
 803a60c:	b140      	cbz	r0, 803a620 <__sfmoreglue+0x28>
 803a60e:	2100      	movs	r1, #0
 803a610:	e9c0 1600 	strd	r1, r6, [r0]
 803a614:	300c      	adds	r0, #12
 803a616:	60a0      	str	r0, [r4, #8]
 803a618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803a61c:	f7ff fc62 	bl	8039ee4 <memset>
 803a620:	4620      	mov	r0, r4
 803a622:	bd70      	pop	{r4, r5, r6, pc}

0803a624 <__sfp_lock_acquire>:
 803a624:	4801      	ldr	r0, [pc, #4]	; (803a62c <__sfp_lock_acquire+0x8>)
 803a626:	f000 b8b3 	b.w	803a790 <__retarget_lock_acquire_recursive>
 803a62a:	bf00      	nop
 803a62c:	240071d9 	.word	0x240071d9

0803a630 <__sfp_lock_release>:
 803a630:	4801      	ldr	r0, [pc, #4]	; (803a638 <__sfp_lock_release+0x8>)
 803a632:	f000 b8ae 	b.w	803a792 <__retarget_lock_release_recursive>
 803a636:	bf00      	nop
 803a638:	240071d9 	.word	0x240071d9

0803a63c <__sinit_lock_acquire>:
 803a63c:	4801      	ldr	r0, [pc, #4]	; (803a644 <__sinit_lock_acquire+0x8>)
 803a63e:	f000 b8a7 	b.w	803a790 <__retarget_lock_acquire_recursive>
 803a642:	bf00      	nop
 803a644:	240071da 	.word	0x240071da

0803a648 <__sinit_lock_release>:
 803a648:	4801      	ldr	r0, [pc, #4]	; (803a650 <__sinit_lock_release+0x8>)
 803a64a:	f000 b8a2 	b.w	803a792 <__retarget_lock_release_recursive>
 803a64e:	bf00      	nop
 803a650:	240071da 	.word	0x240071da

0803a654 <__sinit>:
 803a654:	b510      	push	{r4, lr}
 803a656:	4604      	mov	r4, r0
 803a658:	f7ff fff0 	bl	803a63c <__sinit_lock_acquire>
 803a65c:	69a3      	ldr	r3, [r4, #24]
 803a65e:	b11b      	cbz	r3, 803a668 <__sinit+0x14>
 803a660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803a664:	f7ff bff0 	b.w	803a648 <__sinit_lock_release>
 803a668:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803a66c:	6523      	str	r3, [r4, #80]	; 0x50
 803a66e:	4b13      	ldr	r3, [pc, #76]	; (803a6bc <__sinit+0x68>)
 803a670:	4a13      	ldr	r2, [pc, #76]	; (803a6c0 <__sinit+0x6c>)
 803a672:	681b      	ldr	r3, [r3, #0]
 803a674:	62a2      	str	r2, [r4, #40]	; 0x28
 803a676:	42a3      	cmp	r3, r4
 803a678:	bf04      	itt	eq
 803a67a:	2301      	moveq	r3, #1
 803a67c:	61a3      	streq	r3, [r4, #24]
 803a67e:	4620      	mov	r0, r4
 803a680:	f000 f820 	bl	803a6c4 <__sfp>
 803a684:	6060      	str	r0, [r4, #4]
 803a686:	4620      	mov	r0, r4
 803a688:	f000 f81c 	bl	803a6c4 <__sfp>
 803a68c:	60a0      	str	r0, [r4, #8]
 803a68e:	4620      	mov	r0, r4
 803a690:	f000 f818 	bl	803a6c4 <__sfp>
 803a694:	2200      	movs	r2, #0
 803a696:	60e0      	str	r0, [r4, #12]
 803a698:	2104      	movs	r1, #4
 803a69a:	6860      	ldr	r0, [r4, #4]
 803a69c:	f7ff ff82 	bl	803a5a4 <std>
 803a6a0:	68a0      	ldr	r0, [r4, #8]
 803a6a2:	2201      	movs	r2, #1
 803a6a4:	2109      	movs	r1, #9
 803a6a6:	f7ff ff7d 	bl	803a5a4 <std>
 803a6aa:	68e0      	ldr	r0, [r4, #12]
 803a6ac:	2202      	movs	r2, #2
 803a6ae:	2112      	movs	r1, #18
 803a6b0:	f7ff ff78 	bl	803a5a4 <std>
 803a6b4:	2301      	movs	r3, #1
 803a6b6:	61a3      	str	r3, [r4, #24]
 803a6b8:	e7d2      	b.n	803a660 <__sinit+0xc>
 803a6ba:	bf00      	nop
 803a6bc:	0803bd24 	.word	0x0803bd24
 803a6c0:	0803a5ed 	.word	0x0803a5ed

0803a6c4 <__sfp>:
 803a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803a6c6:	4607      	mov	r7, r0
 803a6c8:	f7ff ffac 	bl	803a624 <__sfp_lock_acquire>
 803a6cc:	4b1e      	ldr	r3, [pc, #120]	; (803a748 <__sfp+0x84>)
 803a6ce:	681e      	ldr	r6, [r3, #0]
 803a6d0:	69b3      	ldr	r3, [r6, #24]
 803a6d2:	b913      	cbnz	r3, 803a6da <__sfp+0x16>
 803a6d4:	4630      	mov	r0, r6
 803a6d6:	f7ff ffbd 	bl	803a654 <__sinit>
 803a6da:	3648      	adds	r6, #72	; 0x48
 803a6dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803a6e0:	3b01      	subs	r3, #1
 803a6e2:	d503      	bpl.n	803a6ec <__sfp+0x28>
 803a6e4:	6833      	ldr	r3, [r6, #0]
 803a6e6:	b30b      	cbz	r3, 803a72c <__sfp+0x68>
 803a6e8:	6836      	ldr	r6, [r6, #0]
 803a6ea:	e7f7      	b.n	803a6dc <__sfp+0x18>
 803a6ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803a6f0:	b9d5      	cbnz	r5, 803a728 <__sfp+0x64>
 803a6f2:	4b16      	ldr	r3, [pc, #88]	; (803a74c <__sfp+0x88>)
 803a6f4:	60e3      	str	r3, [r4, #12]
 803a6f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803a6fa:	6665      	str	r5, [r4, #100]	; 0x64
 803a6fc:	f000 f847 	bl	803a78e <__retarget_lock_init_recursive>
 803a700:	f7ff ff96 	bl	803a630 <__sfp_lock_release>
 803a704:	e9c4 5501 	strd	r5, r5, [r4, #4]
 803a708:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803a70c:	6025      	str	r5, [r4, #0]
 803a70e:	61a5      	str	r5, [r4, #24]
 803a710:	2208      	movs	r2, #8
 803a712:	4629      	mov	r1, r5
 803a714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 803a718:	f7ff fbe4 	bl	8039ee4 <memset>
 803a71c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803a720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 803a724:	4620      	mov	r0, r4
 803a726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803a728:	3468      	adds	r4, #104	; 0x68
 803a72a:	e7d9      	b.n	803a6e0 <__sfp+0x1c>
 803a72c:	2104      	movs	r1, #4
 803a72e:	4638      	mov	r0, r7
 803a730:	f7ff ff62 	bl	803a5f8 <__sfmoreglue>
 803a734:	4604      	mov	r4, r0
 803a736:	6030      	str	r0, [r6, #0]
 803a738:	2800      	cmp	r0, #0
 803a73a:	d1d5      	bne.n	803a6e8 <__sfp+0x24>
 803a73c:	f7ff ff78 	bl	803a630 <__sfp_lock_release>
 803a740:	230c      	movs	r3, #12
 803a742:	603b      	str	r3, [r7, #0]
 803a744:	e7ee      	b.n	803a724 <__sfp+0x60>
 803a746:	bf00      	nop
 803a748:	0803bd24 	.word	0x0803bd24
 803a74c:	ffff0001 	.word	0xffff0001

0803a750 <_fwalk_reent>:
 803a750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803a754:	4606      	mov	r6, r0
 803a756:	4688      	mov	r8, r1
 803a758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803a75c:	2700      	movs	r7, #0
 803a75e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803a762:	f1b9 0901 	subs.w	r9, r9, #1
 803a766:	d505      	bpl.n	803a774 <_fwalk_reent+0x24>
 803a768:	6824      	ldr	r4, [r4, #0]
 803a76a:	2c00      	cmp	r4, #0
 803a76c:	d1f7      	bne.n	803a75e <_fwalk_reent+0xe>
 803a76e:	4638      	mov	r0, r7
 803a770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803a774:	89ab      	ldrh	r3, [r5, #12]
 803a776:	2b01      	cmp	r3, #1
 803a778:	d907      	bls.n	803a78a <_fwalk_reent+0x3a>
 803a77a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803a77e:	3301      	adds	r3, #1
 803a780:	d003      	beq.n	803a78a <_fwalk_reent+0x3a>
 803a782:	4629      	mov	r1, r5
 803a784:	4630      	mov	r0, r6
 803a786:	47c0      	blx	r8
 803a788:	4307      	orrs	r7, r0
 803a78a:	3568      	adds	r5, #104	; 0x68
 803a78c:	e7e9      	b.n	803a762 <_fwalk_reent+0x12>

0803a78e <__retarget_lock_init_recursive>:
 803a78e:	4770      	bx	lr

0803a790 <__retarget_lock_acquire_recursive>:
 803a790:	4770      	bx	lr

0803a792 <__retarget_lock_release_recursive>:
 803a792:	4770      	bx	lr

0803a794 <__swhatbuf_r>:
 803a794:	b570      	push	{r4, r5, r6, lr}
 803a796:	460e      	mov	r6, r1
 803a798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803a79c:	2900      	cmp	r1, #0
 803a79e:	b096      	sub	sp, #88	; 0x58
 803a7a0:	4614      	mov	r4, r2
 803a7a2:	461d      	mov	r5, r3
 803a7a4:	da08      	bge.n	803a7b8 <__swhatbuf_r+0x24>
 803a7a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803a7aa:	2200      	movs	r2, #0
 803a7ac:	602a      	str	r2, [r5, #0]
 803a7ae:	061a      	lsls	r2, r3, #24
 803a7b0:	d410      	bmi.n	803a7d4 <__swhatbuf_r+0x40>
 803a7b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803a7b6:	e00e      	b.n	803a7d6 <__swhatbuf_r+0x42>
 803a7b8:	466a      	mov	r2, sp
 803a7ba:	f000 fd0d 	bl	803b1d8 <_fstat_r>
 803a7be:	2800      	cmp	r0, #0
 803a7c0:	dbf1      	blt.n	803a7a6 <__swhatbuf_r+0x12>
 803a7c2:	9a01      	ldr	r2, [sp, #4]
 803a7c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803a7c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803a7cc:	425a      	negs	r2, r3
 803a7ce:	415a      	adcs	r2, r3
 803a7d0:	602a      	str	r2, [r5, #0]
 803a7d2:	e7ee      	b.n	803a7b2 <__swhatbuf_r+0x1e>
 803a7d4:	2340      	movs	r3, #64	; 0x40
 803a7d6:	2000      	movs	r0, #0
 803a7d8:	6023      	str	r3, [r4, #0]
 803a7da:	b016      	add	sp, #88	; 0x58
 803a7dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0803a7e0 <__smakebuf_r>:
 803a7e0:	898b      	ldrh	r3, [r1, #12]
 803a7e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803a7e4:	079d      	lsls	r5, r3, #30
 803a7e6:	4606      	mov	r6, r0
 803a7e8:	460c      	mov	r4, r1
 803a7ea:	d507      	bpl.n	803a7fc <__smakebuf_r+0x1c>
 803a7ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803a7f0:	6023      	str	r3, [r4, #0]
 803a7f2:	6123      	str	r3, [r4, #16]
 803a7f4:	2301      	movs	r3, #1
 803a7f6:	6163      	str	r3, [r4, #20]
 803a7f8:	b002      	add	sp, #8
 803a7fa:	bd70      	pop	{r4, r5, r6, pc}
 803a7fc:	ab01      	add	r3, sp, #4
 803a7fe:	466a      	mov	r2, sp
 803a800:	f7ff ffc8 	bl	803a794 <__swhatbuf_r>
 803a804:	9900      	ldr	r1, [sp, #0]
 803a806:	4605      	mov	r5, r0
 803a808:	4630      	mov	r0, r6
 803a80a:	f7ff fbdf 	bl	8039fcc <_malloc_r>
 803a80e:	b948      	cbnz	r0, 803a824 <__smakebuf_r+0x44>
 803a810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803a814:	059a      	lsls	r2, r3, #22
 803a816:	d4ef      	bmi.n	803a7f8 <__smakebuf_r+0x18>
 803a818:	f023 0303 	bic.w	r3, r3, #3
 803a81c:	f043 0302 	orr.w	r3, r3, #2
 803a820:	81a3      	strh	r3, [r4, #12]
 803a822:	e7e3      	b.n	803a7ec <__smakebuf_r+0xc>
 803a824:	4b0d      	ldr	r3, [pc, #52]	; (803a85c <__smakebuf_r+0x7c>)
 803a826:	62b3      	str	r3, [r6, #40]	; 0x28
 803a828:	89a3      	ldrh	r3, [r4, #12]
 803a82a:	6020      	str	r0, [r4, #0]
 803a82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803a830:	81a3      	strh	r3, [r4, #12]
 803a832:	9b00      	ldr	r3, [sp, #0]
 803a834:	6163      	str	r3, [r4, #20]
 803a836:	9b01      	ldr	r3, [sp, #4]
 803a838:	6120      	str	r0, [r4, #16]
 803a83a:	b15b      	cbz	r3, 803a854 <__smakebuf_r+0x74>
 803a83c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803a840:	4630      	mov	r0, r6
 803a842:	f000 fcdb 	bl	803b1fc <_isatty_r>
 803a846:	b128      	cbz	r0, 803a854 <__smakebuf_r+0x74>
 803a848:	89a3      	ldrh	r3, [r4, #12]
 803a84a:	f023 0303 	bic.w	r3, r3, #3
 803a84e:	f043 0301 	orr.w	r3, r3, #1
 803a852:	81a3      	strh	r3, [r4, #12]
 803a854:	89a0      	ldrh	r0, [r4, #12]
 803a856:	4305      	orrs	r5, r0
 803a858:	81a5      	strh	r5, [r4, #12]
 803a85a:	e7cd      	b.n	803a7f8 <__smakebuf_r+0x18>
 803a85c:	0803a5ed 	.word	0x0803a5ed

0803a860 <__malloc_lock>:
 803a860:	4801      	ldr	r0, [pc, #4]	; (803a868 <__malloc_lock+0x8>)
 803a862:	f7ff bf95 	b.w	803a790 <__retarget_lock_acquire_recursive>
 803a866:	bf00      	nop
 803a868:	240071d8 	.word	0x240071d8

0803a86c <__malloc_unlock>:
 803a86c:	4801      	ldr	r0, [pc, #4]	; (803a874 <__malloc_unlock+0x8>)
 803a86e:	f7ff bf90 	b.w	803a792 <__retarget_lock_release_recursive>
 803a872:	bf00      	nop
 803a874:	240071d8 	.word	0x240071d8

0803a878 <__ssputs_r>:
 803a878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803a87c:	688e      	ldr	r6, [r1, #8]
 803a87e:	429e      	cmp	r6, r3
 803a880:	4682      	mov	sl, r0
 803a882:	460c      	mov	r4, r1
 803a884:	4690      	mov	r8, r2
 803a886:	461f      	mov	r7, r3
 803a888:	d838      	bhi.n	803a8fc <__ssputs_r+0x84>
 803a88a:	898a      	ldrh	r2, [r1, #12]
 803a88c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 803a890:	d032      	beq.n	803a8f8 <__ssputs_r+0x80>
 803a892:	6825      	ldr	r5, [r4, #0]
 803a894:	6909      	ldr	r1, [r1, #16]
 803a896:	eba5 0901 	sub.w	r9, r5, r1
 803a89a:	6965      	ldr	r5, [r4, #20]
 803a89c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 803a8a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 803a8a4:	3301      	adds	r3, #1
 803a8a6:	444b      	add	r3, r9
 803a8a8:	106d      	asrs	r5, r5, #1
 803a8aa:	429d      	cmp	r5, r3
 803a8ac:	bf38      	it	cc
 803a8ae:	461d      	movcc	r5, r3
 803a8b0:	0553      	lsls	r3, r2, #21
 803a8b2:	d531      	bpl.n	803a918 <__ssputs_r+0xa0>
 803a8b4:	4629      	mov	r1, r5
 803a8b6:	f7ff fb89 	bl	8039fcc <_malloc_r>
 803a8ba:	4606      	mov	r6, r0
 803a8bc:	b950      	cbnz	r0, 803a8d4 <__ssputs_r+0x5c>
 803a8be:	230c      	movs	r3, #12
 803a8c0:	f8ca 3000 	str.w	r3, [sl]
 803a8c4:	89a3      	ldrh	r3, [r4, #12]
 803a8c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a8ca:	81a3      	strh	r3, [r4, #12]
 803a8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803a8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803a8d4:	6921      	ldr	r1, [r4, #16]
 803a8d6:	464a      	mov	r2, r9
 803a8d8:	f7ff faf6 	bl	8039ec8 <memcpy>
 803a8dc:	89a3      	ldrh	r3, [r4, #12]
 803a8de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 803a8e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803a8e6:	81a3      	strh	r3, [r4, #12]
 803a8e8:	6126      	str	r6, [r4, #16]
 803a8ea:	6165      	str	r5, [r4, #20]
 803a8ec:	444e      	add	r6, r9
 803a8ee:	eba5 0509 	sub.w	r5, r5, r9
 803a8f2:	6026      	str	r6, [r4, #0]
 803a8f4:	60a5      	str	r5, [r4, #8]
 803a8f6:	463e      	mov	r6, r7
 803a8f8:	42be      	cmp	r6, r7
 803a8fa:	d900      	bls.n	803a8fe <__ssputs_r+0x86>
 803a8fc:	463e      	mov	r6, r7
 803a8fe:	6820      	ldr	r0, [r4, #0]
 803a900:	4632      	mov	r2, r6
 803a902:	4641      	mov	r1, r8
 803a904:	f000 fc9c 	bl	803b240 <memmove>
 803a908:	68a3      	ldr	r3, [r4, #8]
 803a90a:	1b9b      	subs	r3, r3, r6
 803a90c:	60a3      	str	r3, [r4, #8]
 803a90e:	6823      	ldr	r3, [r4, #0]
 803a910:	4433      	add	r3, r6
 803a912:	6023      	str	r3, [r4, #0]
 803a914:	2000      	movs	r0, #0
 803a916:	e7db      	b.n	803a8d0 <__ssputs_r+0x58>
 803a918:	462a      	mov	r2, r5
 803a91a:	f000 fcab 	bl	803b274 <_realloc_r>
 803a91e:	4606      	mov	r6, r0
 803a920:	2800      	cmp	r0, #0
 803a922:	d1e1      	bne.n	803a8e8 <__ssputs_r+0x70>
 803a924:	6921      	ldr	r1, [r4, #16]
 803a926:	4650      	mov	r0, sl
 803a928:	f7ff fae4 	bl	8039ef4 <_free_r>
 803a92c:	e7c7      	b.n	803a8be <__ssputs_r+0x46>
	...

0803a930 <_svfiprintf_r>:
 803a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803a934:	4698      	mov	r8, r3
 803a936:	898b      	ldrh	r3, [r1, #12]
 803a938:	061b      	lsls	r3, r3, #24
 803a93a:	b09d      	sub	sp, #116	; 0x74
 803a93c:	4607      	mov	r7, r0
 803a93e:	460d      	mov	r5, r1
 803a940:	4614      	mov	r4, r2
 803a942:	d50e      	bpl.n	803a962 <_svfiprintf_r+0x32>
 803a944:	690b      	ldr	r3, [r1, #16]
 803a946:	b963      	cbnz	r3, 803a962 <_svfiprintf_r+0x32>
 803a948:	2140      	movs	r1, #64	; 0x40
 803a94a:	f7ff fb3f 	bl	8039fcc <_malloc_r>
 803a94e:	6028      	str	r0, [r5, #0]
 803a950:	6128      	str	r0, [r5, #16]
 803a952:	b920      	cbnz	r0, 803a95e <_svfiprintf_r+0x2e>
 803a954:	230c      	movs	r3, #12
 803a956:	603b      	str	r3, [r7, #0]
 803a958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803a95c:	e0d1      	b.n	803ab02 <_svfiprintf_r+0x1d2>
 803a95e:	2340      	movs	r3, #64	; 0x40
 803a960:	616b      	str	r3, [r5, #20]
 803a962:	2300      	movs	r3, #0
 803a964:	9309      	str	r3, [sp, #36]	; 0x24
 803a966:	2320      	movs	r3, #32
 803a968:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803a96c:	f8cd 800c 	str.w	r8, [sp, #12]
 803a970:	2330      	movs	r3, #48	; 0x30
 803a972:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 803ab1c <_svfiprintf_r+0x1ec>
 803a976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803a97a:	f04f 0901 	mov.w	r9, #1
 803a97e:	4623      	mov	r3, r4
 803a980:	469a      	mov	sl, r3
 803a982:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a986:	b10a      	cbz	r2, 803a98c <_svfiprintf_r+0x5c>
 803a988:	2a25      	cmp	r2, #37	; 0x25
 803a98a:	d1f9      	bne.n	803a980 <_svfiprintf_r+0x50>
 803a98c:	ebba 0b04 	subs.w	fp, sl, r4
 803a990:	d00b      	beq.n	803a9aa <_svfiprintf_r+0x7a>
 803a992:	465b      	mov	r3, fp
 803a994:	4622      	mov	r2, r4
 803a996:	4629      	mov	r1, r5
 803a998:	4638      	mov	r0, r7
 803a99a:	f7ff ff6d 	bl	803a878 <__ssputs_r>
 803a99e:	3001      	adds	r0, #1
 803a9a0:	f000 80aa 	beq.w	803aaf8 <_svfiprintf_r+0x1c8>
 803a9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803a9a6:	445a      	add	r2, fp
 803a9a8:	9209      	str	r2, [sp, #36]	; 0x24
 803a9aa:	f89a 3000 	ldrb.w	r3, [sl]
 803a9ae:	2b00      	cmp	r3, #0
 803a9b0:	f000 80a2 	beq.w	803aaf8 <_svfiprintf_r+0x1c8>
 803a9b4:	2300      	movs	r3, #0
 803a9b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803a9ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803a9be:	f10a 0a01 	add.w	sl, sl, #1
 803a9c2:	9304      	str	r3, [sp, #16]
 803a9c4:	9307      	str	r3, [sp, #28]
 803a9c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803a9ca:	931a      	str	r3, [sp, #104]	; 0x68
 803a9cc:	4654      	mov	r4, sl
 803a9ce:	2205      	movs	r2, #5
 803a9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 803a9d4:	4851      	ldr	r0, [pc, #324]	; (803ab1c <_svfiprintf_r+0x1ec>)
 803a9d6:	f7e5 fcb3 	bl	8020340 <memchr>
 803a9da:	9a04      	ldr	r2, [sp, #16]
 803a9dc:	b9d8      	cbnz	r0, 803aa16 <_svfiprintf_r+0xe6>
 803a9de:	06d0      	lsls	r0, r2, #27
 803a9e0:	bf44      	itt	mi
 803a9e2:	2320      	movmi	r3, #32
 803a9e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803a9e8:	0711      	lsls	r1, r2, #28
 803a9ea:	bf44      	itt	mi
 803a9ec:	232b      	movmi	r3, #43	; 0x2b
 803a9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803a9f2:	f89a 3000 	ldrb.w	r3, [sl]
 803a9f6:	2b2a      	cmp	r3, #42	; 0x2a
 803a9f8:	d015      	beq.n	803aa26 <_svfiprintf_r+0xf6>
 803a9fa:	9a07      	ldr	r2, [sp, #28]
 803a9fc:	4654      	mov	r4, sl
 803a9fe:	2000      	movs	r0, #0
 803aa00:	f04f 0c0a 	mov.w	ip, #10
 803aa04:	4621      	mov	r1, r4
 803aa06:	f811 3b01 	ldrb.w	r3, [r1], #1
 803aa0a:	3b30      	subs	r3, #48	; 0x30
 803aa0c:	2b09      	cmp	r3, #9
 803aa0e:	d94e      	bls.n	803aaae <_svfiprintf_r+0x17e>
 803aa10:	b1b0      	cbz	r0, 803aa40 <_svfiprintf_r+0x110>
 803aa12:	9207      	str	r2, [sp, #28]
 803aa14:	e014      	b.n	803aa40 <_svfiprintf_r+0x110>
 803aa16:	eba0 0308 	sub.w	r3, r0, r8
 803aa1a:	fa09 f303 	lsl.w	r3, r9, r3
 803aa1e:	4313      	orrs	r3, r2
 803aa20:	9304      	str	r3, [sp, #16]
 803aa22:	46a2      	mov	sl, r4
 803aa24:	e7d2      	b.n	803a9cc <_svfiprintf_r+0x9c>
 803aa26:	9b03      	ldr	r3, [sp, #12]
 803aa28:	1d19      	adds	r1, r3, #4
 803aa2a:	681b      	ldr	r3, [r3, #0]
 803aa2c:	9103      	str	r1, [sp, #12]
 803aa2e:	2b00      	cmp	r3, #0
 803aa30:	bfbb      	ittet	lt
 803aa32:	425b      	neglt	r3, r3
 803aa34:	f042 0202 	orrlt.w	r2, r2, #2
 803aa38:	9307      	strge	r3, [sp, #28]
 803aa3a:	9307      	strlt	r3, [sp, #28]
 803aa3c:	bfb8      	it	lt
 803aa3e:	9204      	strlt	r2, [sp, #16]
 803aa40:	7823      	ldrb	r3, [r4, #0]
 803aa42:	2b2e      	cmp	r3, #46	; 0x2e
 803aa44:	d10c      	bne.n	803aa60 <_svfiprintf_r+0x130>
 803aa46:	7863      	ldrb	r3, [r4, #1]
 803aa48:	2b2a      	cmp	r3, #42	; 0x2a
 803aa4a:	d135      	bne.n	803aab8 <_svfiprintf_r+0x188>
 803aa4c:	9b03      	ldr	r3, [sp, #12]
 803aa4e:	1d1a      	adds	r2, r3, #4
 803aa50:	681b      	ldr	r3, [r3, #0]
 803aa52:	9203      	str	r2, [sp, #12]
 803aa54:	2b00      	cmp	r3, #0
 803aa56:	bfb8      	it	lt
 803aa58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803aa5c:	3402      	adds	r4, #2
 803aa5e:	9305      	str	r3, [sp, #20]
 803aa60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 803ab2c <_svfiprintf_r+0x1fc>
 803aa64:	7821      	ldrb	r1, [r4, #0]
 803aa66:	2203      	movs	r2, #3
 803aa68:	4650      	mov	r0, sl
 803aa6a:	f7e5 fc69 	bl	8020340 <memchr>
 803aa6e:	b140      	cbz	r0, 803aa82 <_svfiprintf_r+0x152>
 803aa70:	2340      	movs	r3, #64	; 0x40
 803aa72:	eba0 000a 	sub.w	r0, r0, sl
 803aa76:	fa03 f000 	lsl.w	r0, r3, r0
 803aa7a:	9b04      	ldr	r3, [sp, #16]
 803aa7c:	4303      	orrs	r3, r0
 803aa7e:	3401      	adds	r4, #1
 803aa80:	9304      	str	r3, [sp, #16]
 803aa82:	f814 1b01 	ldrb.w	r1, [r4], #1
 803aa86:	4826      	ldr	r0, [pc, #152]	; (803ab20 <_svfiprintf_r+0x1f0>)
 803aa88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803aa8c:	2206      	movs	r2, #6
 803aa8e:	f7e5 fc57 	bl	8020340 <memchr>
 803aa92:	2800      	cmp	r0, #0
 803aa94:	d038      	beq.n	803ab08 <_svfiprintf_r+0x1d8>
 803aa96:	4b23      	ldr	r3, [pc, #140]	; (803ab24 <_svfiprintf_r+0x1f4>)
 803aa98:	bb1b      	cbnz	r3, 803aae2 <_svfiprintf_r+0x1b2>
 803aa9a:	9b03      	ldr	r3, [sp, #12]
 803aa9c:	3307      	adds	r3, #7
 803aa9e:	f023 0307 	bic.w	r3, r3, #7
 803aaa2:	3308      	adds	r3, #8
 803aaa4:	9303      	str	r3, [sp, #12]
 803aaa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803aaa8:	4433      	add	r3, r6
 803aaaa:	9309      	str	r3, [sp, #36]	; 0x24
 803aaac:	e767      	b.n	803a97e <_svfiprintf_r+0x4e>
 803aaae:	fb0c 3202 	mla	r2, ip, r2, r3
 803aab2:	460c      	mov	r4, r1
 803aab4:	2001      	movs	r0, #1
 803aab6:	e7a5      	b.n	803aa04 <_svfiprintf_r+0xd4>
 803aab8:	2300      	movs	r3, #0
 803aaba:	3401      	adds	r4, #1
 803aabc:	9305      	str	r3, [sp, #20]
 803aabe:	4619      	mov	r1, r3
 803aac0:	f04f 0c0a 	mov.w	ip, #10
 803aac4:	4620      	mov	r0, r4
 803aac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 803aaca:	3a30      	subs	r2, #48	; 0x30
 803aacc:	2a09      	cmp	r2, #9
 803aace:	d903      	bls.n	803aad8 <_svfiprintf_r+0x1a8>
 803aad0:	2b00      	cmp	r3, #0
 803aad2:	d0c5      	beq.n	803aa60 <_svfiprintf_r+0x130>
 803aad4:	9105      	str	r1, [sp, #20]
 803aad6:	e7c3      	b.n	803aa60 <_svfiprintf_r+0x130>
 803aad8:	fb0c 2101 	mla	r1, ip, r1, r2
 803aadc:	4604      	mov	r4, r0
 803aade:	2301      	movs	r3, #1
 803aae0:	e7f0      	b.n	803aac4 <_svfiprintf_r+0x194>
 803aae2:	ab03      	add	r3, sp, #12
 803aae4:	9300      	str	r3, [sp, #0]
 803aae6:	462a      	mov	r2, r5
 803aae8:	4b0f      	ldr	r3, [pc, #60]	; (803ab28 <_svfiprintf_r+0x1f8>)
 803aaea:	a904      	add	r1, sp, #16
 803aaec:	4638      	mov	r0, r7
 803aaee:	f3af 8000 	nop.w
 803aaf2:	1c42      	adds	r2, r0, #1
 803aaf4:	4606      	mov	r6, r0
 803aaf6:	d1d6      	bne.n	803aaa6 <_svfiprintf_r+0x176>
 803aaf8:	89ab      	ldrh	r3, [r5, #12]
 803aafa:	065b      	lsls	r3, r3, #25
 803aafc:	f53f af2c 	bmi.w	803a958 <_svfiprintf_r+0x28>
 803ab00:	9809      	ldr	r0, [sp, #36]	; 0x24
 803ab02:	b01d      	add	sp, #116	; 0x74
 803ab04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ab08:	ab03      	add	r3, sp, #12
 803ab0a:	9300      	str	r3, [sp, #0]
 803ab0c:	462a      	mov	r2, r5
 803ab0e:	4b06      	ldr	r3, [pc, #24]	; (803ab28 <_svfiprintf_r+0x1f8>)
 803ab10:	a904      	add	r1, sp, #16
 803ab12:	4638      	mov	r0, r7
 803ab14:	f000 f9d4 	bl	803aec0 <_printf_i>
 803ab18:	e7eb      	b.n	803aaf2 <_svfiprintf_r+0x1c2>
 803ab1a:	bf00      	nop
 803ab1c:	0803bd88 	.word	0x0803bd88
 803ab20:	0803bd92 	.word	0x0803bd92
 803ab24:	00000000 	.word	0x00000000
 803ab28:	0803a879 	.word	0x0803a879
 803ab2c:	0803bd8e 	.word	0x0803bd8e

0803ab30 <__sfputc_r>:
 803ab30:	6893      	ldr	r3, [r2, #8]
 803ab32:	3b01      	subs	r3, #1
 803ab34:	2b00      	cmp	r3, #0
 803ab36:	b410      	push	{r4}
 803ab38:	6093      	str	r3, [r2, #8]
 803ab3a:	da08      	bge.n	803ab4e <__sfputc_r+0x1e>
 803ab3c:	6994      	ldr	r4, [r2, #24]
 803ab3e:	42a3      	cmp	r3, r4
 803ab40:	db01      	blt.n	803ab46 <__sfputc_r+0x16>
 803ab42:	290a      	cmp	r1, #10
 803ab44:	d103      	bne.n	803ab4e <__sfputc_r+0x1e>
 803ab46:	f85d 4b04 	ldr.w	r4, [sp], #4
 803ab4a:	f7ff bba9 	b.w	803a2a0 <__swbuf_r>
 803ab4e:	6813      	ldr	r3, [r2, #0]
 803ab50:	1c58      	adds	r0, r3, #1
 803ab52:	6010      	str	r0, [r2, #0]
 803ab54:	7019      	strb	r1, [r3, #0]
 803ab56:	4608      	mov	r0, r1
 803ab58:	f85d 4b04 	ldr.w	r4, [sp], #4
 803ab5c:	4770      	bx	lr

0803ab5e <__sfputs_r>:
 803ab5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803ab60:	4606      	mov	r6, r0
 803ab62:	460f      	mov	r7, r1
 803ab64:	4614      	mov	r4, r2
 803ab66:	18d5      	adds	r5, r2, r3
 803ab68:	42ac      	cmp	r4, r5
 803ab6a:	d101      	bne.n	803ab70 <__sfputs_r+0x12>
 803ab6c:	2000      	movs	r0, #0
 803ab6e:	e007      	b.n	803ab80 <__sfputs_r+0x22>
 803ab70:	f814 1b01 	ldrb.w	r1, [r4], #1
 803ab74:	463a      	mov	r2, r7
 803ab76:	4630      	mov	r0, r6
 803ab78:	f7ff ffda 	bl	803ab30 <__sfputc_r>
 803ab7c:	1c43      	adds	r3, r0, #1
 803ab7e:	d1f3      	bne.n	803ab68 <__sfputs_r+0xa>
 803ab80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803ab84 <_vfiprintf_r>:
 803ab84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803ab88:	460d      	mov	r5, r1
 803ab8a:	b09d      	sub	sp, #116	; 0x74
 803ab8c:	4614      	mov	r4, r2
 803ab8e:	4698      	mov	r8, r3
 803ab90:	4606      	mov	r6, r0
 803ab92:	b118      	cbz	r0, 803ab9c <_vfiprintf_r+0x18>
 803ab94:	6983      	ldr	r3, [r0, #24]
 803ab96:	b90b      	cbnz	r3, 803ab9c <_vfiprintf_r+0x18>
 803ab98:	f7ff fd5c 	bl	803a654 <__sinit>
 803ab9c:	4b89      	ldr	r3, [pc, #548]	; (803adc4 <_vfiprintf_r+0x240>)
 803ab9e:	429d      	cmp	r5, r3
 803aba0:	d11b      	bne.n	803abda <_vfiprintf_r+0x56>
 803aba2:	6875      	ldr	r5, [r6, #4]
 803aba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803aba6:	07d9      	lsls	r1, r3, #31
 803aba8:	d405      	bmi.n	803abb6 <_vfiprintf_r+0x32>
 803abaa:	89ab      	ldrh	r3, [r5, #12]
 803abac:	059a      	lsls	r2, r3, #22
 803abae:	d402      	bmi.n	803abb6 <_vfiprintf_r+0x32>
 803abb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803abb2:	f7ff fded 	bl	803a790 <__retarget_lock_acquire_recursive>
 803abb6:	89ab      	ldrh	r3, [r5, #12]
 803abb8:	071b      	lsls	r3, r3, #28
 803abba:	d501      	bpl.n	803abc0 <_vfiprintf_r+0x3c>
 803abbc:	692b      	ldr	r3, [r5, #16]
 803abbe:	b9eb      	cbnz	r3, 803abfc <_vfiprintf_r+0x78>
 803abc0:	4629      	mov	r1, r5
 803abc2:	4630      	mov	r0, r6
 803abc4:	f7ff fbbe 	bl	803a344 <__swsetup_r>
 803abc8:	b1c0      	cbz	r0, 803abfc <_vfiprintf_r+0x78>
 803abca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803abcc:	07dc      	lsls	r4, r3, #31
 803abce:	d50e      	bpl.n	803abee <_vfiprintf_r+0x6a>
 803abd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803abd4:	b01d      	add	sp, #116	; 0x74
 803abd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803abda:	4b7b      	ldr	r3, [pc, #492]	; (803adc8 <_vfiprintf_r+0x244>)
 803abdc:	429d      	cmp	r5, r3
 803abde:	d101      	bne.n	803abe4 <_vfiprintf_r+0x60>
 803abe0:	68b5      	ldr	r5, [r6, #8]
 803abe2:	e7df      	b.n	803aba4 <_vfiprintf_r+0x20>
 803abe4:	4b79      	ldr	r3, [pc, #484]	; (803adcc <_vfiprintf_r+0x248>)
 803abe6:	429d      	cmp	r5, r3
 803abe8:	bf08      	it	eq
 803abea:	68f5      	ldreq	r5, [r6, #12]
 803abec:	e7da      	b.n	803aba4 <_vfiprintf_r+0x20>
 803abee:	89ab      	ldrh	r3, [r5, #12]
 803abf0:	0598      	lsls	r0, r3, #22
 803abf2:	d4ed      	bmi.n	803abd0 <_vfiprintf_r+0x4c>
 803abf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803abf6:	f7ff fdcc 	bl	803a792 <__retarget_lock_release_recursive>
 803abfa:	e7e9      	b.n	803abd0 <_vfiprintf_r+0x4c>
 803abfc:	2300      	movs	r3, #0
 803abfe:	9309      	str	r3, [sp, #36]	; 0x24
 803ac00:	2320      	movs	r3, #32
 803ac02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803ac06:	f8cd 800c 	str.w	r8, [sp, #12]
 803ac0a:	2330      	movs	r3, #48	; 0x30
 803ac0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803add0 <_vfiprintf_r+0x24c>
 803ac10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803ac14:	f04f 0901 	mov.w	r9, #1
 803ac18:	4623      	mov	r3, r4
 803ac1a:	469a      	mov	sl, r3
 803ac1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 803ac20:	b10a      	cbz	r2, 803ac26 <_vfiprintf_r+0xa2>
 803ac22:	2a25      	cmp	r2, #37	; 0x25
 803ac24:	d1f9      	bne.n	803ac1a <_vfiprintf_r+0x96>
 803ac26:	ebba 0b04 	subs.w	fp, sl, r4
 803ac2a:	d00b      	beq.n	803ac44 <_vfiprintf_r+0xc0>
 803ac2c:	465b      	mov	r3, fp
 803ac2e:	4622      	mov	r2, r4
 803ac30:	4629      	mov	r1, r5
 803ac32:	4630      	mov	r0, r6
 803ac34:	f7ff ff93 	bl	803ab5e <__sfputs_r>
 803ac38:	3001      	adds	r0, #1
 803ac3a:	f000 80aa 	beq.w	803ad92 <_vfiprintf_r+0x20e>
 803ac3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803ac40:	445a      	add	r2, fp
 803ac42:	9209      	str	r2, [sp, #36]	; 0x24
 803ac44:	f89a 3000 	ldrb.w	r3, [sl]
 803ac48:	2b00      	cmp	r3, #0
 803ac4a:	f000 80a2 	beq.w	803ad92 <_vfiprintf_r+0x20e>
 803ac4e:	2300      	movs	r3, #0
 803ac50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803ac54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803ac58:	f10a 0a01 	add.w	sl, sl, #1
 803ac5c:	9304      	str	r3, [sp, #16]
 803ac5e:	9307      	str	r3, [sp, #28]
 803ac60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803ac64:	931a      	str	r3, [sp, #104]	; 0x68
 803ac66:	4654      	mov	r4, sl
 803ac68:	2205      	movs	r2, #5
 803ac6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 803ac6e:	4858      	ldr	r0, [pc, #352]	; (803add0 <_vfiprintf_r+0x24c>)
 803ac70:	f7e5 fb66 	bl	8020340 <memchr>
 803ac74:	9a04      	ldr	r2, [sp, #16]
 803ac76:	b9d8      	cbnz	r0, 803acb0 <_vfiprintf_r+0x12c>
 803ac78:	06d1      	lsls	r1, r2, #27
 803ac7a:	bf44      	itt	mi
 803ac7c:	2320      	movmi	r3, #32
 803ac7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803ac82:	0713      	lsls	r3, r2, #28
 803ac84:	bf44      	itt	mi
 803ac86:	232b      	movmi	r3, #43	; 0x2b
 803ac88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803ac8c:	f89a 3000 	ldrb.w	r3, [sl]
 803ac90:	2b2a      	cmp	r3, #42	; 0x2a
 803ac92:	d015      	beq.n	803acc0 <_vfiprintf_r+0x13c>
 803ac94:	9a07      	ldr	r2, [sp, #28]
 803ac96:	4654      	mov	r4, sl
 803ac98:	2000      	movs	r0, #0
 803ac9a:	f04f 0c0a 	mov.w	ip, #10
 803ac9e:	4621      	mov	r1, r4
 803aca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 803aca4:	3b30      	subs	r3, #48	; 0x30
 803aca6:	2b09      	cmp	r3, #9
 803aca8:	d94e      	bls.n	803ad48 <_vfiprintf_r+0x1c4>
 803acaa:	b1b0      	cbz	r0, 803acda <_vfiprintf_r+0x156>
 803acac:	9207      	str	r2, [sp, #28]
 803acae:	e014      	b.n	803acda <_vfiprintf_r+0x156>
 803acb0:	eba0 0308 	sub.w	r3, r0, r8
 803acb4:	fa09 f303 	lsl.w	r3, r9, r3
 803acb8:	4313      	orrs	r3, r2
 803acba:	9304      	str	r3, [sp, #16]
 803acbc:	46a2      	mov	sl, r4
 803acbe:	e7d2      	b.n	803ac66 <_vfiprintf_r+0xe2>
 803acc0:	9b03      	ldr	r3, [sp, #12]
 803acc2:	1d19      	adds	r1, r3, #4
 803acc4:	681b      	ldr	r3, [r3, #0]
 803acc6:	9103      	str	r1, [sp, #12]
 803acc8:	2b00      	cmp	r3, #0
 803acca:	bfbb      	ittet	lt
 803accc:	425b      	neglt	r3, r3
 803acce:	f042 0202 	orrlt.w	r2, r2, #2
 803acd2:	9307      	strge	r3, [sp, #28]
 803acd4:	9307      	strlt	r3, [sp, #28]
 803acd6:	bfb8      	it	lt
 803acd8:	9204      	strlt	r2, [sp, #16]
 803acda:	7823      	ldrb	r3, [r4, #0]
 803acdc:	2b2e      	cmp	r3, #46	; 0x2e
 803acde:	d10c      	bne.n	803acfa <_vfiprintf_r+0x176>
 803ace0:	7863      	ldrb	r3, [r4, #1]
 803ace2:	2b2a      	cmp	r3, #42	; 0x2a
 803ace4:	d135      	bne.n	803ad52 <_vfiprintf_r+0x1ce>
 803ace6:	9b03      	ldr	r3, [sp, #12]
 803ace8:	1d1a      	adds	r2, r3, #4
 803acea:	681b      	ldr	r3, [r3, #0]
 803acec:	9203      	str	r2, [sp, #12]
 803acee:	2b00      	cmp	r3, #0
 803acf0:	bfb8      	it	lt
 803acf2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803acf6:	3402      	adds	r4, #2
 803acf8:	9305      	str	r3, [sp, #20]
 803acfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803ade0 <_vfiprintf_r+0x25c>
 803acfe:	7821      	ldrb	r1, [r4, #0]
 803ad00:	2203      	movs	r2, #3
 803ad02:	4650      	mov	r0, sl
 803ad04:	f7e5 fb1c 	bl	8020340 <memchr>
 803ad08:	b140      	cbz	r0, 803ad1c <_vfiprintf_r+0x198>
 803ad0a:	2340      	movs	r3, #64	; 0x40
 803ad0c:	eba0 000a 	sub.w	r0, r0, sl
 803ad10:	fa03 f000 	lsl.w	r0, r3, r0
 803ad14:	9b04      	ldr	r3, [sp, #16]
 803ad16:	4303      	orrs	r3, r0
 803ad18:	3401      	adds	r4, #1
 803ad1a:	9304      	str	r3, [sp, #16]
 803ad1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 803ad20:	482c      	ldr	r0, [pc, #176]	; (803add4 <_vfiprintf_r+0x250>)
 803ad22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803ad26:	2206      	movs	r2, #6
 803ad28:	f7e5 fb0a 	bl	8020340 <memchr>
 803ad2c:	2800      	cmp	r0, #0
 803ad2e:	d03f      	beq.n	803adb0 <_vfiprintf_r+0x22c>
 803ad30:	4b29      	ldr	r3, [pc, #164]	; (803add8 <_vfiprintf_r+0x254>)
 803ad32:	bb1b      	cbnz	r3, 803ad7c <_vfiprintf_r+0x1f8>
 803ad34:	9b03      	ldr	r3, [sp, #12]
 803ad36:	3307      	adds	r3, #7
 803ad38:	f023 0307 	bic.w	r3, r3, #7
 803ad3c:	3308      	adds	r3, #8
 803ad3e:	9303      	str	r3, [sp, #12]
 803ad40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803ad42:	443b      	add	r3, r7
 803ad44:	9309      	str	r3, [sp, #36]	; 0x24
 803ad46:	e767      	b.n	803ac18 <_vfiprintf_r+0x94>
 803ad48:	fb0c 3202 	mla	r2, ip, r2, r3
 803ad4c:	460c      	mov	r4, r1
 803ad4e:	2001      	movs	r0, #1
 803ad50:	e7a5      	b.n	803ac9e <_vfiprintf_r+0x11a>
 803ad52:	2300      	movs	r3, #0
 803ad54:	3401      	adds	r4, #1
 803ad56:	9305      	str	r3, [sp, #20]
 803ad58:	4619      	mov	r1, r3
 803ad5a:	f04f 0c0a 	mov.w	ip, #10
 803ad5e:	4620      	mov	r0, r4
 803ad60:	f810 2b01 	ldrb.w	r2, [r0], #1
 803ad64:	3a30      	subs	r2, #48	; 0x30
 803ad66:	2a09      	cmp	r2, #9
 803ad68:	d903      	bls.n	803ad72 <_vfiprintf_r+0x1ee>
 803ad6a:	2b00      	cmp	r3, #0
 803ad6c:	d0c5      	beq.n	803acfa <_vfiprintf_r+0x176>
 803ad6e:	9105      	str	r1, [sp, #20]
 803ad70:	e7c3      	b.n	803acfa <_vfiprintf_r+0x176>
 803ad72:	fb0c 2101 	mla	r1, ip, r1, r2
 803ad76:	4604      	mov	r4, r0
 803ad78:	2301      	movs	r3, #1
 803ad7a:	e7f0      	b.n	803ad5e <_vfiprintf_r+0x1da>
 803ad7c:	ab03      	add	r3, sp, #12
 803ad7e:	9300      	str	r3, [sp, #0]
 803ad80:	462a      	mov	r2, r5
 803ad82:	4b16      	ldr	r3, [pc, #88]	; (803addc <_vfiprintf_r+0x258>)
 803ad84:	a904      	add	r1, sp, #16
 803ad86:	4630      	mov	r0, r6
 803ad88:	f3af 8000 	nop.w
 803ad8c:	4607      	mov	r7, r0
 803ad8e:	1c78      	adds	r0, r7, #1
 803ad90:	d1d6      	bne.n	803ad40 <_vfiprintf_r+0x1bc>
 803ad92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803ad94:	07d9      	lsls	r1, r3, #31
 803ad96:	d405      	bmi.n	803ada4 <_vfiprintf_r+0x220>
 803ad98:	89ab      	ldrh	r3, [r5, #12]
 803ad9a:	059a      	lsls	r2, r3, #22
 803ad9c:	d402      	bmi.n	803ada4 <_vfiprintf_r+0x220>
 803ad9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803ada0:	f7ff fcf7 	bl	803a792 <__retarget_lock_release_recursive>
 803ada4:	89ab      	ldrh	r3, [r5, #12]
 803ada6:	065b      	lsls	r3, r3, #25
 803ada8:	f53f af12 	bmi.w	803abd0 <_vfiprintf_r+0x4c>
 803adac:	9809      	ldr	r0, [sp, #36]	; 0x24
 803adae:	e711      	b.n	803abd4 <_vfiprintf_r+0x50>
 803adb0:	ab03      	add	r3, sp, #12
 803adb2:	9300      	str	r3, [sp, #0]
 803adb4:	462a      	mov	r2, r5
 803adb6:	4b09      	ldr	r3, [pc, #36]	; (803addc <_vfiprintf_r+0x258>)
 803adb8:	a904      	add	r1, sp, #16
 803adba:	4630      	mov	r0, r6
 803adbc:	f000 f880 	bl	803aec0 <_printf_i>
 803adc0:	e7e4      	b.n	803ad8c <_vfiprintf_r+0x208>
 803adc2:	bf00      	nop
 803adc4:	0803bd48 	.word	0x0803bd48
 803adc8:	0803bd68 	.word	0x0803bd68
 803adcc:	0803bd28 	.word	0x0803bd28
 803add0:	0803bd88 	.word	0x0803bd88
 803add4:	0803bd92 	.word	0x0803bd92
 803add8:	00000000 	.word	0x00000000
 803addc:	0803ab5f 	.word	0x0803ab5f
 803ade0:	0803bd8e 	.word	0x0803bd8e

0803ade4 <_printf_common>:
 803ade4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803ade8:	4616      	mov	r6, r2
 803adea:	4699      	mov	r9, r3
 803adec:	688a      	ldr	r2, [r1, #8]
 803adee:	690b      	ldr	r3, [r1, #16]
 803adf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803adf4:	4293      	cmp	r3, r2
 803adf6:	bfb8      	it	lt
 803adf8:	4613      	movlt	r3, r2
 803adfa:	6033      	str	r3, [r6, #0]
 803adfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803ae00:	4607      	mov	r7, r0
 803ae02:	460c      	mov	r4, r1
 803ae04:	b10a      	cbz	r2, 803ae0a <_printf_common+0x26>
 803ae06:	3301      	adds	r3, #1
 803ae08:	6033      	str	r3, [r6, #0]
 803ae0a:	6823      	ldr	r3, [r4, #0]
 803ae0c:	0699      	lsls	r1, r3, #26
 803ae0e:	bf42      	ittt	mi
 803ae10:	6833      	ldrmi	r3, [r6, #0]
 803ae12:	3302      	addmi	r3, #2
 803ae14:	6033      	strmi	r3, [r6, #0]
 803ae16:	6825      	ldr	r5, [r4, #0]
 803ae18:	f015 0506 	ands.w	r5, r5, #6
 803ae1c:	d106      	bne.n	803ae2c <_printf_common+0x48>
 803ae1e:	f104 0a19 	add.w	sl, r4, #25
 803ae22:	68e3      	ldr	r3, [r4, #12]
 803ae24:	6832      	ldr	r2, [r6, #0]
 803ae26:	1a9b      	subs	r3, r3, r2
 803ae28:	42ab      	cmp	r3, r5
 803ae2a:	dc26      	bgt.n	803ae7a <_printf_common+0x96>
 803ae2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803ae30:	1e13      	subs	r3, r2, #0
 803ae32:	6822      	ldr	r2, [r4, #0]
 803ae34:	bf18      	it	ne
 803ae36:	2301      	movne	r3, #1
 803ae38:	0692      	lsls	r2, r2, #26
 803ae3a:	d42b      	bmi.n	803ae94 <_printf_common+0xb0>
 803ae3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803ae40:	4649      	mov	r1, r9
 803ae42:	4638      	mov	r0, r7
 803ae44:	47c0      	blx	r8
 803ae46:	3001      	adds	r0, #1
 803ae48:	d01e      	beq.n	803ae88 <_printf_common+0xa4>
 803ae4a:	6823      	ldr	r3, [r4, #0]
 803ae4c:	68e5      	ldr	r5, [r4, #12]
 803ae4e:	6832      	ldr	r2, [r6, #0]
 803ae50:	f003 0306 	and.w	r3, r3, #6
 803ae54:	2b04      	cmp	r3, #4
 803ae56:	bf08      	it	eq
 803ae58:	1aad      	subeq	r5, r5, r2
 803ae5a:	68a3      	ldr	r3, [r4, #8]
 803ae5c:	6922      	ldr	r2, [r4, #16]
 803ae5e:	bf0c      	ite	eq
 803ae60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803ae64:	2500      	movne	r5, #0
 803ae66:	4293      	cmp	r3, r2
 803ae68:	bfc4      	itt	gt
 803ae6a:	1a9b      	subgt	r3, r3, r2
 803ae6c:	18ed      	addgt	r5, r5, r3
 803ae6e:	2600      	movs	r6, #0
 803ae70:	341a      	adds	r4, #26
 803ae72:	42b5      	cmp	r5, r6
 803ae74:	d11a      	bne.n	803aeac <_printf_common+0xc8>
 803ae76:	2000      	movs	r0, #0
 803ae78:	e008      	b.n	803ae8c <_printf_common+0xa8>
 803ae7a:	2301      	movs	r3, #1
 803ae7c:	4652      	mov	r2, sl
 803ae7e:	4649      	mov	r1, r9
 803ae80:	4638      	mov	r0, r7
 803ae82:	47c0      	blx	r8
 803ae84:	3001      	adds	r0, #1
 803ae86:	d103      	bne.n	803ae90 <_printf_common+0xac>
 803ae88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803ae8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803ae90:	3501      	adds	r5, #1
 803ae92:	e7c6      	b.n	803ae22 <_printf_common+0x3e>
 803ae94:	18e1      	adds	r1, r4, r3
 803ae96:	1c5a      	adds	r2, r3, #1
 803ae98:	2030      	movs	r0, #48	; 0x30
 803ae9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803ae9e:	4422      	add	r2, r4
 803aea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803aea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803aea8:	3302      	adds	r3, #2
 803aeaa:	e7c7      	b.n	803ae3c <_printf_common+0x58>
 803aeac:	2301      	movs	r3, #1
 803aeae:	4622      	mov	r2, r4
 803aeb0:	4649      	mov	r1, r9
 803aeb2:	4638      	mov	r0, r7
 803aeb4:	47c0      	blx	r8
 803aeb6:	3001      	adds	r0, #1
 803aeb8:	d0e6      	beq.n	803ae88 <_printf_common+0xa4>
 803aeba:	3601      	adds	r6, #1
 803aebc:	e7d9      	b.n	803ae72 <_printf_common+0x8e>
	...

0803aec0 <_printf_i>:
 803aec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803aec4:	7e0f      	ldrb	r7, [r1, #24]
 803aec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803aec8:	2f78      	cmp	r7, #120	; 0x78
 803aeca:	4691      	mov	r9, r2
 803aecc:	4680      	mov	r8, r0
 803aece:	460c      	mov	r4, r1
 803aed0:	469a      	mov	sl, r3
 803aed2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803aed6:	d807      	bhi.n	803aee8 <_printf_i+0x28>
 803aed8:	2f62      	cmp	r7, #98	; 0x62
 803aeda:	d80a      	bhi.n	803aef2 <_printf_i+0x32>
 803aedc:	2f00      	cmp	r7, #0
 803aede:	f000 80d8 	beq.w	803b092 <_printf_i+0x1d2>
 803aee2:	2f58      	cmp	r7, #88	; 0x58
 803aee4:	f000 80a3 	beq.w	803b02e <_printf_i+0x16e>
 803aee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803aeec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803aef0:	e03a      	b.n	803af68 <_printf_i+0xa8>
 803aef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803aef6:	2b15      	cmp	r3, #21
 803aef8:	d8f6      	bhi.n	803aee8 <_printf_i+0x28>
 803aefa:	a101      	add	r1, pc, #4	; (adr r1, 803af00 <_printf_i+0x40>)
 803aefc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803af00:	0803af59 	.word	0x0803af59
 803af04:	0803af6d 	.word	0x0803af6d
 803af08:	0803aee9 	.word	0x0803aee9
 803af0c:	0803aee9 	.word	0x0803aee9
 803af10:	0803aee9 	.word	0x0803aee9
 803af14:	0803aee9 	.word	0x0803aee9
 803af18:	0803af6d 	.word	0x0803af6d
 803af1c:	0803aee9 	.word	0x0803aee9
 803af20:	0803aee9 	.word	0x0803aee9
 803af24:	0803aee9 	.word	0x0803aee9
 803af28:	0803aee9 	.word	0x0803aee9
 803af2c:	0803b079 	.word	0x0803b079
 803af30:	0803af9d 	.word	0x0803af9d
 803af34:	0803b05b 	.word	0x0803b05b
 803af38:	0803aee9 	.word	0x0803aee9
 803af3c:	0803aee9 	.word	0x0803aee9
 803af40:	0803b09b 	.word	0x0803b09b
 803af44:	0803aee9 	.word	0x0803aee9
 803af48:	0803af9d 	.word	0x0803af9d
 803af4c:	0803aee9 	.word	0x0803aee9
 803af50:	0803aee9 	.word	0x0803aee9
 803af54:	0803b063 	.word	0x0803b063
 803af58:	682b      	ldr	r3, [r5, #0]
 803af5a:	1d1a      	adds	r2, r3, #4
 803af5c:	681b      	ldr	r3, [r3, #0]
 803af5e:	602a      	str	r2, [r5, #0]
 803af60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803af64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803af68:	2301      	movs	r3, #1
 803af6a:	e0a3      	b.n	803b0b4 <_printf_i+0x1f4>
 803af6c:	6820      	ldr	r0, [r4, #0]
 803af6e:	6829      	ldr	r1, [r5, #0]
 803af70:	0606      	lsls	r6, r0, #24
 803af72:	f101 0304 	add.w	r3, r1, #4
 803af76:	d50a      	bpl.n	803af8e <_printf_i+0xce>
 803af78:	680e      	ldr	r6, [r1, #0]
 803af7a:	602b      	str	r3, [r5, #0]
 803af7c:	2e00      	cmp	r6, #0
 803af7e:	da03      	bge.n	803af88 <_printf_i+0xc8>
 803af80:	232d      	movs	r3, #45	; 0x2d
 803af82:	4276      	negs	r6, r6
 803af84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803af88:	485e      	ldr	r0, [pc, #376]	; (803b104 <_printf_i+0x244>)
 803af8a:	230a      	movs	r3, #10
 803af8c:	e019      	b.n	803afc2 <_printf_i+0x102>
 803af8e:	680e      	ldr	r6, [r1, #0]
 803af90:	602b      	str	r3, [r5, #0]
 803af92:	f010 0f40 	tst.w	r0, #64	; 0x40
 803af96:	bf18      	it	ne
 803af98:	b236      	sxthne	r6, r6
 803af9a:	e7ef      	b.n	803af7c <_printf_i+0xbc>
 803af9c:	682b      	ldr	r3, [r5, #0]
 803af9e:	6820      	ldr	r0, [r4, #0]
 803afa0:	1d19      	adds	r1, r3, #4
 803afa2:	6029      	str	r1, [r5, #0]
 803afa4:	0601      	lsls	r1, r0, #24
 803afa6:	d501      	bpl.n	803afac <_printf_i+0xec>
 803afa8:	681e      	ldr	r6, [r3, #0]
 803afaa:	e002      	b.n	803afb2 <_printf_i+0xf2>
 803afac:	0646      	lsls	r6, r0, #25
 803afae:	d5fb      	bpl.n	803afa8 <_printf_i+0xe8>
 803afb0:	881e      	ldrh	r6, [r3, #0]
 803afb2:	4854      	ldr	r0, [pc, #336]	; (803b104 <_printf_i+0x244>)
 803afb4:	2f6f      	cmp	r7, #111	; 0x6f
 803afb6:	bf0c      	ite	eq
 803afb8:	2308      	moveq	r3, #8
 803afba:	230a      	movne	r3, #10
 803afbc:	2100      	movs	r1, #0
 803afbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803afc2:	6865      	ldr	r5, [r4, #4]
 803afc4:	60a5      	str	r5, [r4, #8]
 803afc6:	2d00      	cmp	r5, #0
 803afc8:	bfa2      	ittt	ge
 803afca:	6821      	ldrge	r1, [r4, #0]
 803afcc:	f021 0104 	bicge.w	r1, r1, #4
 803afd0:	6021      	strge	r1, [r4, #0]
 803afd2:	b90e      	cbnz	r6, 803afd8 <_printf_i+0x118>
 803afd4:	2d00      	cmp	r5, #0
 803afd6:	d04d      	beq.n	803b074 <_printf_i+0x1b4>
 803afd8:	4615      	mov	r5, r2
 803afda:	fbb6 f1f3 	udiv	r1, r6, r3
 803afde:	fb03 6711 	mls	r7, r3, r1, r6
 803afe2:	5dc7      	ldrb	r7, [r0, r7]
 803afe4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803afe8:	4637      	mov	r7, r6
 803afea:	42bb      	cmp	r3, r7
 803afec:	460e      	mov	r6, r1
 803afee:	d9f4      	bls.n	803afda <_printf_i+0x11a>
 803aff0:	2b08      	cmp	r3, #8
 803aff2:	d10b      	bne.n	803b00c <_printf_i+0x14c>
 803aff4:	6823      	ldr	r3, [r4, #0]
 803aff6:	07de      	lsls	r6, r3, #31
 803aff8:	d508      	bpl.n	803b00c <_printf_i+0x14c>
 803affa:	6923      	ldr	r3, [r4, #16]
 803affc:	6861      	ldr	r1, [r4, #4]
 803affe:	4299      	cmp	r1, r3
 803b000:	bfde      	ittt	le
 803b002:	2330      	movle	r3, #48	; 0x30
 803b004:	f805 3c01 	strble.w	r3, [r5, #-1]
 803b008:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 803b00c:	1b52      	subs	r2, r2, r5
 803b00e:	6122      	str	r2, [r4, #16]
 803b010:	f8cd a000 	str.w	sl, [sp]
 803b014:	464b      	mov	r3, r9
 803b016:	aa03      	add	r2, sp, #12
 803b018:	4621      	mov	r1, r4
 803b01a:	4640      	mov	r0, r8
 803b01c:	f7ff fee2 	bl	803ade4 <_printf_common>
 803b020:	3001      	adds	r0, #1
 803b022:	d14c      	bne.n	803b0be <_printf_i+0x1fe>
 803b024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803b028:	b004      	add	sp, #16
 803b02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803b02e:	4835      	ldr	r0, [pc, #212]	; (803b104 <_printf_i+0x244>)
 803b030:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 803b034:	6829      	ldr	r1, [r5, #0]
 803b036:	6823      	ldr	r3, [r4, #0]
 803b038:	f851 6b04 	ldr.w	r6, [r1], #4
 803b03c:	6029      	str	r1, [r5, #0]
 803b03e:	061d      	lsls	r5, r3, #24
 803b040:	d514      	bpl.n	803b06c <_printf_i+0x1ac>
 803b042:	07df      	lsls	r7, r3, #31
 803b044:	bf44      	itt	mi
 803b046:	f043 0320 	orrmi.w	r3, r3, #32
 803b04a:	6023      	strmi	r3, [r4, #0]
 803b04c:	b91e      	cbnz	r6, 803b056 <_printf_i+0x196>
 803b04e:	6823      	ldr	r3, [r4, #0]
 803b050:	f023 0320 	bic.w	r3, r3, #32
 803b054:	6023      	str	r3, [r4, #0]
 803b056:	2310      	movs	r3, #16
 803b058:	e7b0      	b.n	803afbc <_printf_i+0xfc>
 803b05a:	6823      	ldr	r3, [r4, #0]
 803b05c:	f043 0320 	orr.w	r3, r3, #32
 803b060:	6023      	str	r3, [r4, #0]
 803b062:	2378      	movs	r3, #120	; 0x78
 803b064:	4828      	ldr	r0, [pc, #160]	; (803b108 <_printf_i+0x248>)
 803b066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803b06a:	e7e3      	b.n	803b034 <_printf_i+0x174>
 803b06c:	0659      	lsls	r1, r3, #25
 803b06e:	bf48      	it	mi
 803b070:	b2b6      	uxthmi	r6, r6
 803b072:	e7e6      	b.n	803b042 <_printf_i+0x182>
 803b074:	4615      	mov	r5, r2
 803b076:	e7bb      	b.n	803aff0 <_printf_i+0x130>
 803b078:	682b      	ldr	r3, [r5, #0]
 803b07a:	6826      	ldr	r6, [r4, #0]
 803b07c:	6961      	ldr	r1, [r4, #20]
 803b07e:	1d18      	adds	r0, r3, #4
 803b080:	6028      	str	r0, [r5, #0]
 803b082:	0635      	lsls	r5, r6, #24
 803b084:	681b      	ldr	r3, [r3, #0]
 803b086:	d501      	bpl.n	803b08c <_printf_i+0x1cc>
 803b088:	6019      	str	r1, [r3, #0]
 803b08a:	e002      	b.n	803b092 <_printf_i+0x1d2>
 803b08c:	0670      	lsls	r0, r6, #25
 803b08e:	d5fb      	bpl.n	803b088 <_printf_i+0x1c8>
 803b090:	8019      	strh	r1, [r3, #0]
 803b092:	2300      	movs	r3, #0
 803b094:	6123      	str	r3, [r4, #16]
 803b096:	4615      	mov	r5, r2
 803b098:	e7ba      	b.n	803b010 <_printf_i+0x150>
 803b09a:	682b      	ldr	r3, [r5, #0]
 803b09c:	1d1a      	adds	r2, r3, #4
 803b09e:	602a      	str	r2, [r5, #0]
 803b0a0:	681d      	ldr	r5, [r3, #0]
 803b0a2:	6862      	ldr	r2, [r4, #4]
 803b0a4:	2100      	movs	r1, #0
 803b0a6:	4628      	mov	r0, r5
 803b0a8:	f7e5 f94a 	bl	8020340 <memchr>
 803b0ac:	b108      	cbz	r0, 803b0b2 <_printf_i+0x1f2>
 803b0ae:	1b40      	subs	r0, r0, r5
 803b0b0:	6060      	str	r0, [r4, #4]
 803b0b2:	6863      	ldr	r3, [r4, #4]
 803b0b4:	6123      	str	r3, [r4, #16]
 803b0b6:	2300      	movs	r3, #0
 803b0b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803b0bc:	e7a8      	b.n	803b010 <_printf_i+0x150>
 803b0be:	6923      	ldr	r3, [r4, #16]
 803b0c0:	462a      	mov	r2, r5
 803b0c2:	4649      	mov	r1, r9
 803b0c4:	4640      	mov	r0, r8
 803b0c6:	47d0      	blx	sl
 803b0c8:	3001      	adds	r0, #1
 803b0ca:	d0ab      	beq.n	803b024 <_printf_i+0x164>
 803b0cc:	6823      	ldr	r3, [r4, #0]
 803b0ce:	079b      	lsls	r3, r3, #30
 803b0d0:	d413      	bmi.n	803b0fa <_printf_i+0x23a>
 803b0d2:	68e0      	ldr	r0, [r4, #12]
 803b0d4:	9b03      	ldr	r3, [sp, #12]
 803b0d6:	4298      	cmp	r0, r3
 803b0d8:	bfb8      	it	lt
 803b0da:	4618      	movlt	r0, r3
 803b0dc:	e7a4      	b.n	803b028 <_printf_i+0x168>
 803b0de:	2301      	movs	r3, #1
 803b0e0:	4632      	mov	r2, r6
 803b0e2:	4649      	mov	r1, r9
 803b0e4:	4640      	mov	r0, r8
 803b0e6:	47d0      	blx	sl
 803b0e8:	3001      	adds	r0, #1
 803b0ea:	d09b      	beq.n	803b024 <_printf_i+0x164>
 803b0ec:	3501      	adds	r5, #1
 803b0ee:	68e3      	ldr	r3, [r4, #12]
 803b0f0:	9903      	ldr	r1, [sp, #12]
 803b0f2:	1a5b      	subs	r3, r3, r1
 803b0f4:	42ab      	cmp	r3, r5
 803b0f6:	dcf2      	bgt.n	803b0de <_printf_i+0x21e>
 803b0f8:	e7eb      	b.n	803b0d2 <_printf_i+0x212>
 803b0fa:	2500      	movs	r5, #0
 803b0fc:	f104 0619 	add.w	r6, r4, #25
 803b100:	e7f5      	b.n	803b0ee <_printf_i+0x22e>
 803b102:	bf00      	nop
 803b104:	0803bd99 	.word	0x0803bd99
 803b108:	0803bdaa 	.word	0x0803bdaa

0803b10c <__sread>:
 803b10c:	b510      	push	{r4, lr}
 803b10e:	460c      	mov	r4, r1
 803b110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803b114:	f000 f8de 	bl	803b2d4 <_read_r>
 803b118:	2800      	cmp	r0, #0
 803b11a:	bfab      	itete	ge
 803b11c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803b11e:	89a3      	ldrhlt	r3, [r4, #12]
 803b120:	181b      	addge	r3, r3, r0
 803b122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803b126:	bfac      	ite	ge
 803b128:	6563      	strge	r3, [r4, #84]	; 0x54
 803b12a:	81a3      	strhlt	r3, [r4, #12]
 803b12c:	bd10      	pop	{r4, pc}

0803b12e <__swrite>:
 803b12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803b132:	461f      	mov	r7, r3
 803b134:	898b      	ldrh	r3, [r1, #12]
 803b136:	05db      	lsls	r3, r3, #23
 803b138:	4605      	mov	r5, r0
 803b13a:	460c      	mov	r4, r1
 803b13c:	4616      	mov	r6, r2
 803b13e:	d505      	bpl.n	803b14c <__swrite+0x1e>
 803b140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803b144:	2302      	movs	r3, #2
 803b146:	2200      	movs	r2, #0
 803b148:	f000 f868 	bl	803b21c <_lseek_r>
 803b14c:	89a3      	ldrh	r3, [r4, #12]
 803b14e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803b152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803b156:	81a3      	strh	r3, [r4, #12]
 803b158:	4632      	mov	r2, r6
 803b15a:	463b      	mov	r3, r7
 803b15c:	4628      	mov	r0, r5
 803b15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803b162:	f000 b817 	b.w	803b194 <_write_r>

0803b166 <__sseek>:
 803b166:	b510      	push	{r4, lr}
 803b168:	460c      	mov	r4, r1
 803b16a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803b16e:	f000 f855 	bl	803b21c <_lseek_r>
 803b172:	1c43      	adds	r3, r0, #1
 803b174:	89a3      	ldrh	r3, [r4, #12]
 803b176:	bf15      	itete	ne
 803b178:	6560      	strne	r0, [r4, #84]	; 0x54
 803b17a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803b17e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803b182:	81a3      	strheq	r3, [r4, #12]
 803b184:	bf18      	it	ne
 803b186:	81a3      	strhne	r3, [r4, #12]
 803b188:	bd10      	pop	{r4, pc}

0803b18a <__sclose>:
 803b18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803b18e:	f000 b813 	b.w	803b1b8 <_close_r>
	...

0803b194 <_write_r>:
 803b194:	b538      	push	{r3, r4, r5, lr}
 803b196:	4d07      	ldr	r5, [pc, #28]	; (803b1b4 <_write_r+0x20>)
 803b198:	4604      	mov	r4, r0
 803b19a:	4608      	mov	r0, r1
 803b19c:	4611      	mov	r1, r2
 803b19e:	2200      	movs	r2, #0
 803b1a0:	602a      	str	r2, [r5, #0]
 803b1a2:	461a      	mov	r2, r3
 803b1a4:	f7e5 fdaa 	bl	8020cfc <_write>
 803b1a8:	1c43      	adds	r3, r0, #1
 803b1aa:	d102      	bne.n	803b1b2 <_write_r+0x1e>
 803b1ac:	682b      	ldr	r3, [r5, #0]
 803b1ae:	b103      	cbz	r3, 803b1b2 <_write_r+0x1e>
 803b1b0:	6023      	str	r3, [r4, #0]
 803b1b2:	bd38      	pop	{r3, r4, r5, pc}
 803b1b4:	240071dc 	.word	0x240071dc

0803b1b8 <_close_r>:
 803b1b8:	b538      	push	{r3, r4, r5, lr}
 803b1ba:	4d06      	ldr	r5, [pc, #24]	; (803b1d4 <_close_r+0x1c>)
 803b1bc:	2300      	movs	r3, #0
 803b1be:	4604      	mov	r4, r0
 803b1c0:	4608      	mov	r0, r1
 803b1c2:	602b      	str	r3, [r5, #0]
 803b1c4:	f7e6 fe09 	bl	8021dda <_close>
 803b1c8:	1c43      	adds	r3, r0, #1
 803b1ca:	d102      	bne.n	803b1d2 <_close_r+0x1a>
 803b1cc:	682b      	ldr	r3, [r5, #0]
 803b1ce:	b103      	cbz	r3, 803b1d2 <_close_r+0x1a>
 803b1d0:	6023      	str	r3, [r4, #0]
 803b1d2:	bd38      	pop	{r3, r4, r5, pc}
 803b1d4:	240071dc 	.word	0x240071dc

0803b1d8 <_fstat_r>:
 803b1d8:	b538      	push	{r3, r4, r5, lr}
 803b1da:	4d07      	ldr	r5, [pc, #28]	; (803b1f8 <_fstat_r+0x20>)
 803b1dc:	2300      	movs	r3, #0
 803b1de:	4604      	mov	r4, r0
 803b1e0:	4608      	mov	r0, r1
 803b1e2:	4611      	mov	r1, r2
 803b1e4:	602b      	str	r3, [r5, #0]
 803b1e6:	f7e6 fe04 	bl	8021df2 <_fstat>
 803b1ea:	1c43      	adds	r3, r0, #1
 803b1ec:	d102      	bne.n	803b1f4 <_fstat_r+0x1c>
 803b1ee:	682b      	ldr	r3, [r5, #0]
 803b1f0:	b103      	cbz	r3, 803b1f4 <_fstat_r+0x1c>
 803b1f2:	6023      	str	r3, [r4, #0]
 803b1f4:	bd38      	pop	{r3, r4, r5, pc}
 803b1f6:	bf00      	nop
 803b1f8:	240071dc 	.word	0x240071dc

0803b1fc <_isatty_r>:
 803b1fc:	b538      	push	{r3, r4, r5, lr}
 803b1fe:	4d06      	ldr	r5, [pc, #24]	; (803b218 <_isatty_r+0x1c>)
 803b200:	2300      	movs	r3, #0
 803b202:	4604      	mov	r4, r0
 803b204:	4608      	mov	r0, r1
 803b206:	602b      	str	r3, [r5, #0]
 803b208:	f7e6 fe03 	bl	8021e12 <_isatty>
 803b20c:	1c43      	adds	r3, r0, #1
 803b20e:	d102      	bne.n	803b216 <_isatty_r+0x1a>
 803b210:	682b      	ldr	r3, [r5, #0]
 803b212:	b103      	cbz	r3, 803b216 <_isatty_r+0x1a>
 803b214:	6023      	str	r3, [r4, #0]
 803b216:	bd38      	pop	{r3, r4, r5, pc}
 803b218:	240071dc 	.word	0x240071dc

0803b21c <_lseek_r>:
 803b21c:	b538      	push	{r3, r4, r5, lr}
 803b21e:	4d07      	ldr	r5, [pc, #28]	; (803b23c <_lseek_r+0x20>)
 803b220:	4604      	mov	r4, r0
 803b222:	4608      	mov	r0, r1
 803b224:	4611      	mov	r1, r2
 803b226:	2200      	movs	r2, #0
 803b228:	602a      	str	r2, [r5, #0]
 803b22a:	461a      	mov	r2, r3
 803b22c:	f7e6 fdfc 	bl	8021e28 <_lseek>
 803b230:	1c43      	adds	r3, r0, #1
 803b232:	d102      	bne.n	803b23a <_lseek_r+0x1e>
 803b234:	682b      	ldr	r3, [r5, #0]
 803b236:	b103      	cbz	r3, 803b23a <_lseek_r+0x1e>
 803b238:	6023      	str	r3, [r4, #0]
 803b23a:	bd38      	pop	{r3, r4, r5, pc}
 803b23c:	240071dc 	.word	0x240071dc

0803b240 <memmove>:
 803b240:	4288      	cmp	r0, r1
 803b242:	b510      	push	{r4, lr}
 803b244:	eb01 0402 	add.w	r4, r1, r2
 803b248:	d902      	bls.n	803b250 <memmove+0x10>
 803b24a:	4284      	cmp	r4, r0
 803b24c:	4623      	mov	r3, r4
 803b24e:	d807      	bhi.n	803b260 <memmove+0x20>
 803b250:	1e43      	subs	r3, r0, #1
 803b252:	42a1      	cmp	r1, r4
 803b254:	d008      	beq.n	803b268 <memmove+0x28>
 803b256:	f811 2b01 	ldrb.w	r2, [r1], #1
 803b25a:	f803 2f01 	strb.w	r2, [r3, #1]!
 803b25e:	e7f8      	b.n	803b252 <memmove+0x12>
 803b260:	4402      	add	r2, r0
 803b262:	4601      	mov	r1, r0
 803b264:	428a      	cmp	r2, r1
 803b266:	d100      	bne.n	803b26a <memmove+0x2a>
 803b268:	bd10      	pop	{r4, pc}
 803b26a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803b26e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803b272:	e7f7      	b.n	803b264 <memmove+0x24>

0803b274 <_realloc_r>:
 803b274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803b278:	4680      	mov	r8, r0
 803b27a:	4614      	mov	r4, r2
 803b27c:	460e      	mov	r6, r1
 803b27e:	b921      	cbnz	r1, 803b28a <_realloc_r+0x16>
 803b280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803b284:	4611      	mov	r1, r2
 803b286:	f7fe bea1 	b.w	8039fcc <_malloc_r>
 803b28a:	b92a      	cbnz	r2, 803b298 <_realloc_r+0x24>
 803b28c:	f7fe fe32 	bl	8039ef4 <_free_r>
 803b290:	4625      	mov	r5, r4
 803b292:	4628      	mov	r0, r5
 803b294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803b298:	f000 f82e 	bl	803b2f8 <_malloc_usable_size_r>
 803b29c:	4284      	cmp	r4, r0
 803b29e:	4607      	mov	r7, r0
 803b2a0:	d802      	bhi.n	803b2a8 <_realloc_r+0x34>
 803b2a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 803b2a6:	d812      	bhi.n	803b2ce <_realloc_r+0x5a>
 803b2a8:	4621      	mov	r1, r4
 803b2aa:	4640      	mov	r0, r8
 803b2ac:	f7fe fe8e 	bl	8039fcc <_malloc_r>
 803b2b0:	4605      	mov	r5, r0
 803b2b2:	2800      	cmp	r0, #0
 803b2b4:	d0ed      	beq.n	803b292 <_realloc_r+0x1e>
 803b2b6:	42bc      	cmp	r4, r7
 803b2b8:	4622      	mov	r2, r4
 803b2ba:	4631      	mov	r1, r6
 803b2bc:	bf28      	it	cs
 803b2be:	463a      	movcs	r2, r7
 803b2c0:	f7fe fe02 	bl	8039ec8 <memcpy>
 803b2c4:	4631      	mov	r1, r6
 803b2c6:	4640      	mov	r0, r8
 803b2c8:	f7fe fe14 	bl	8039ef4 <_free_r>
 803b2cc:	e7e1      	b.n	803b292 <_realloc_r+0x1e>
 803b2ce:	4635      	mov	r5, r6
 803b2d0:	e7df      	b.n	803b292 <_realloc_r+0x1e>
	...

0803b2d4 <_read_r>:
 803b2d4:	b538      	push	{r3, r4, r5, lr}
 803b2d6:	4d07      	ldr	r5, [pc, #28]	; (803b2f4 <_read_r+0x20>)
 803b2d8:	4604      	mov	r4, r0
 803b2da:	4608      	mov	r0, r1
 803b2dc:	4611      	mov	r1, r2
 803b2de:	2200      	movs	r2, #0
 803b2e0:	602a      	str	r2, [r5, #0]
 803b2e2:	461a      	mov	r2, r3
 803b2e4:	f7e6 fd5c 	bl	8021da0 <_read>
 803b2e8:	1c43      	adds	r3, r0, #1
 803b2ea:	d102      	bne.n	803b2f2 <_read_r+0x1e>
 803b2ec:	682b      	ldr	r3, [r5, #0]
 803b2ee:	b103      	cbz	r3, 803b2f2 <_read_r+0x1e>
 803b2f0:	6023      	str	r3, [r4, #0]
 803b2f2:	bd38      	pop	{r3, r4, r5, pc}
 803b2f4:	240071dc 	.word	0x240071dc

0803b2f8 <_malloc_usable_size_r>:
 803b2f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803b2fc:	1f18      	subs	r0, r3, #4
 803b2fe:	2b00      	cmp	r3, #0
 803b300:	bfbc      	itt	lt
 803b302:	580b      	ldrlt	r3, [r1, r0]
 803b304:	18c0      	addlt	r0, r0, r3
 803b306:	4770      	bx	lr

0803b308 <_init>:
 803b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803b30a:	bf00      	nop
 803b30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803b30e:	bc08      	pop	{r3}
 803b310:	469e      	mov	lr, r3
 803b312:	4770      	bx	lr

0803b314 <_fini>:
 803b314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803b316:	bf00      	nop
 803b318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803b31a:	bc08      	pop	{r3}
 803b31c:	469e      	mov	lr, r3
 803b31e:	4770      	bx	lr
