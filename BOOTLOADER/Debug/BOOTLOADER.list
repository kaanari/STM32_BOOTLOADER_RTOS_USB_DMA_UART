
BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009948  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08009c18  08009c18  00019c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009d8c  08009d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009d94  08009d94  00019d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009d98  08009d98  00019d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08009d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a4  24000078  08009e14  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400021c  08009e14  0002021c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000124b8  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002603  00000000  00000000  0003255e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c80  00000000  00000000  00034b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b88  00000000  00000000  000357e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032eea  00000000  00000000  00036370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013130  00000000  00000000  0006925a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00142956  00000000  00000000  0007c38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001bece0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003a74  00000000  00000000  001bed30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009c00 	.word	0x08009c00

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	08009c00 	.word	0x08009c00

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <bootloader>:
 */
#include "bootloader.h"


void bootloader(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

	printf("Bootloader is running...\r\n");
 80006ba:	4816      	ldr	r0, [pc, #88]	; (8000714 <bootloader+0x60>)
 80006bc:	f008 fb22 	bl	8008d04 <puts>

	boot_information_t boot_information = check_applications();
 80006c0:	f000 f87c 	bl	80007bc <check_applications>
 80006c4:	4603      	mov	r3, r0
 80006c6:	80bb      	strh	r3, [r7, #4]



	printf("%X\r\n",boot_information.existance);
 80006c8:	793b      	ldrb	r3, [r7, #4]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4812      	ldr	r0, [pc, #72]	; (8000718 <bootloader+0x64>)
 80006ce:	f008 fa93 	bl	8008bf8 <iprintf>
	printf("%X\r\n",boot_information.validation);
 80006d2:	797b      	ldrb	r3, [r7, #5]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4810      	ldr	r0, [pc, #64]	; (8000718 <bootloader+0x64>)
 80006d8:	f008 fa8e 	bl	8008bf8 <iprintf>

	int8_t result = select_application_to_boot(boot_information);
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f843 	bl	8000768 <select_application_to_boot>
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]

	if(result > 0){
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	dd0b      	ble.n	8000706 <bootloader+0x52>
		printf("APP%d is being loaded...\r\n", result);
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4809      	ldr	r0, [pc, #36]	; (800071c <bootloader+0x68>)
 80006f6:	f008 fa7f 	bl	8008bf8 <iprintf>
		load_app(result);
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f810 	bl	8000724 <load_app>
	}else
	{
		printf("No available application to load!\r\n");
	}

}
 8000704:	e002      	b.n	800070c <bootloader+0x58>
		printf("No available application to load!\r\n");
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <bootloader+0x6c>)
 8000708:	f008 fafc 	bl	8008d04 <puts>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	08009c18 	.word	0x08009c18
 8000718:	08009c34 	.word	0x08009c34
 800071c:	08009c3c 	.word	0x08009c3c
 8000720:	08009c58 	.word	0x08009c58

08000724 <load_app>:

void load_app(int8_t app_num)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	uint32_t jump_PC_ptr;
	application_info_t selected_application;

	/* Retrieving PC */
	jump_PC_ptr = *(uint32_t*)(BOOTLOADER_ADDRESS + FLASH_SECTOR_SIZE * app_num + 4);
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000736:	045b      	lsls	r3, r3, #17
 8000738:	3304      	adds	r3, #4
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	617b      	str	r3, [r7, #20]
	selected_application.func_p = (application_t*)jump_PC_ptr;
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	60fb      	str	r3, [r7, #12]

	/* Retrieving SP */
	selected_application.stack_addr = *(uint32_t*)(BOOTLOADER_ADDRESS + FLASH_SECTOR_SIZE * app_num);
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800074a:	045b      	lsls	r3, r3, #17
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	60bb      	str	r3, [r7, #8]
	__set_MSP(selected_application.stack_addr);
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	f383 8808 	msr	MSP, r3
}
 800075a:	bf00      	nop
	selected_application.func_p();
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4798      	blx	r3
}
 8000760:	bf00      	nop
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <select_application_to_boot>:


int8_t select_application_to_boot(boot_information_t boot_information)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	80b8      	strh	r0, [r7, #4]
	uint8_t app_num = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
	uint8_t available_apps = boot_information.existance && boot_information.validation;
 8000774:	793b      	ldrb	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d004      	beq.n	8000784 <select_application_to_boot+0x1c>
 800077a:	797b      	ldrb	r3, [r7, #5]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <select_application_to_boot+0x1c>
 8000780:	2301      	movs	r3, #1
 8000782:	e000      	b.n	8000786 <select_application_to_boot+0x1e>
 8000784:	2300      	movs	r3, #0
 8000786:	73bb      	strb	r3, [r7, #14]

	if(available_apps == 0)
 8000788:	7bbb      	ldrb	r3, [r7, #14]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d105      	bne.n	800079a <select_application_to_boot+0x32>
	{
		return NO_AVAILABLE_APP;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000792:	e00d      	b.n	80007b0 <select_application_to_boot+0x48>
	}

	while(available_apps >>= 1){
		app_num++;
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	3301      	adds	r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]
	while(available_apps >>= 1){
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	73bb      	strb	r3, [r7, #14]
 80007a0:	7bbb      	ldrb	r3, [r7, #14]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f6      	bne.n	8000794 <select_application_to_boot+0x2c>
	}
	app_num++;
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	3301      	adds	r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]

	return app_num;
 80007ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <check_applications>:

/* This function is used for checking if applications
 * that resides in each sector of the memory exists */
boot_information_t check_applications()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
	boot_information_t boot_information;
	uint8_t status = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]
	uint8_t app_num = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	73bb      	strb	r3, [r7, #14]
	uint32_t* app_start_address = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
	for(; app_num < NUMBER_OF_APP; app_num++)
 80007ce:	e029      	b.n	8000824 <check_applications+0x68>
	{
		app_start_address = BOOTLOADER_ADDRESS + FLASH_SECTOR_SIZE*(app_num+1);
 80007d0:	7bbb      	ldrb	r3, [r7, #14]
 80007d2:	f203 4301 	addw	r3, r3, #1025	; 0x401
 80007d6:	045b      	lsls	r3, r3, #17
 80007d8:	60bb      	str	r3, [r7, #8]
		if(*app_start_address >= APP_ADDRESS_SPACE_LOW && *app_start_address <= APP_ADDRESS_SPACE_MAX){
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a1b      	ldr	r2, [pc, #108]	; (800084c <check_applications+0x90>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d916      	bls.n	8000812 <check_applications+0x56>
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80007ec:	d211      	bcs.n	8000812 <check_applications+0x56>
			printf("APP%d is presented.\r\n", app_num+1);
 80007ee:	7bbb      	ldrb	r3, [r7, #14]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	4816      	ldr	r0, [pc, #88]	; (8000850 <check_applications+0x94>)
 80007f6:	f008 f9ff 	bl	8008bf8 <iprintf>
			status = status ^ (1 << (app_num+1));
 80007fa:	7bbb      	ldrb	r3, [r7, #14]
 80007fc:	3301      	adds	r3, #1
 80007fe:	2201      	movs	r2, #1
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	b25a      	sxtb	r2, r3
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	4053      	eors	r3, r2
 800080c:	b25b      	sxtb	r3, r3
 800080e:	73fb      	strb	r3, [r7, #15]
 8000810:	e005      	b.n	800081e <check_applications+0x62>
		}else{
			printf("APP%d is NOT presented.\r\n", app_num+1);
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	3301      	adds	r3, #1
 8000816:	4619      	mov	r1, r3
 8000818:	480e      	ldr	r0, [pc, #56]	; (8000854 <check_applications+0x98>)
 800081a:	f008 f9ed 	bl	8008bf8 <iprintf>
	for(; app_num < NUMBER_OF_APP; app_num++)
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	3301      	adds	r3, #1
 8000822:	73bb      	strb	r3, [r7, #14]
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	2b06      	cmp	r3, #6
 8000828:	d9d2      	bls.n	80007d0 <check_applications+0x14>
		}
	}
	boot_information.existance = status;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	703b      	strb	r3, [r7, #0]

	/* ToDo: Append CRC check here! */
	boot_information.validation = 0xFE;
 800082e:	23fe      	movs	r3, #254	; 0xfe
 8000830:	707b      	strb	r3, [r7, #1]

	return boot_information;
 8000832:	883b      	ldrh	r3, [r7, #0]
 8000834:	80bb      	strh	r3, [r7, #4]
 8000836:	2300      	movs	r3, #0
 8000838:	793a      	ldrb	r2, [r7, #4]
 800083a:	f362 0307 	bfi	r3, r2, #0, #8
 800083e:	797a      	ldrb	r2, [r7, #5]
 8000840:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	0801ffff 	.word	0x0801ffff
 8000850:	08009c7c 	.word	0x08009c7c
 8000854:	08009c94 	.word	0x08009c94

08000858 <_write>:
volatile uint8_t UART_TX_finished = 1;
uint8_t UART_TX_BUFFER[UART_TX_BUFFER_LENGTH];
uint8_t UART_RX_BUFFER[UART_RX_BUFFER_LENGTH];

int _write(int file, uint8_t *data, int len)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
   while(!UART_TX_finished);
 8000864:	bf00      	nop
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <_write+0x50>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0fa      	beq.n	8000866 <_write+0xe>
   UART_TX_finished = 0;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <_write+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
   memcpy(UART_TX_BUFFER, data, len);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	461a      	mov	r2, r3
 800087a:	68b9      	ldr	r1, [r7, #8]
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <_write+0x54>)
 800087e:	f008 f9a5 	bl	8008bcc <memcpy>

   HAL_StatusTypeDef status =
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)UART_TX_BUFFER, len);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	b29b      	uxth	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	4908      	ldr	r1, [pc, #32]	; (80008ac <_write+0x54>)
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <_write+0x58>)
 800088c:	f006 fa60 	bl	8006d50 <HAL_UART_Transmit_DMA>
 8000890:	4603      	mov	r3, r0
 8000892:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d101      	bne.n	800089e <_write+0x46>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	e000      	b.n	80008a0 <_write+0x48>
 800089e:	2300      	movs	r3, #0

}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	24000000 	.word	0x24000000
 80008ac:	240001c0 	.word	0x240001c0
 80008b0:	240000b8 	.word	0x240000b8

080008b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	UART_TX_finished = 1;
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_UART_TxCpltCallback+0x20>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOB,LED_GREEN_Pin);
 80008c2:	2101      	movs	r1, #1
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <HAL_UART_TxCpltCallback+0x24>)
 80008c6:	f003 ff48 	bl	800475a <HAL_GPIO_TogglePin>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	24000000 	.word	0x24000000
 80008d8:	58020400 	.word	0x58020400

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e0:	f000 fc90 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e4:	f000 f818 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e8:	f000 f912 	bl	8000b10 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ec:	f000 f8f0 	bl	8000ad0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80008f0:	f000 f8a2 	bl	8000a38 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80008f4:	f000 f87e 	bl	80009f4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80008f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fc:	f000 fd14 	bl	8001328 <HAL_Delay>
  bootloader();
 8000900:	f7ff fed8 	bl	80006b4 <bootloader>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("A\r\n");
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <main+0x38>)
 8000906:	f008 f9fd 	bl	8008d04 <puts>
	HAL_Delay(2000);
 800090a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800090e:	f000 fd0b 	bl	8001328 <HAL_Delay>
	printf("A\r\n");
 8000912:	e7f7      	b.n	8000904 <main+0x28>
 8000914:	08009cb0 	.word	0x08009cb0

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09c      	sub	sp, #112	; 0x70
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	224c      	movs	r2, #76	; 0x4c
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f008 f95e 	bl	8008be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2220      	movs	r2, #32
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f008 f958 	bl	8008be8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000938:	2002      	movs	r0, #2
 800093a:	f003 ff29 	bl	8004790 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <SystemClock_Config+0xd8>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <SystemClock_Config+0xd8>)
 8000948:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <SystemClock_Config+0xd8>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800095a:	bf00      	nop
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <SystemClock_Config+0xd8>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000968:	d1f8      	bne.n	800095c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800096a:	2301      	movs	r3, #1
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800096e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000974:	2302      	movs	r3, #2
 8000976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000978:	2302      	movs	r3, #2
 800097a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800097c:	2304      	movs	r3, #4
 800097e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000980:	f240 1313 	movw	r3, #275	; 0x113
 8000984:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000986:	2301      	movs	r3, #1
 8000988:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800098a:	2304      	movs	r3, #4
 800098c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098e:	2302      	movs	r3, #2
 8000990:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000992:	2304      	movs	r3, #4
 8000994:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000996:	2300      	movs	r3, #0
 8000998:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 ff2e 	bl	8004804 <HAL_RCC_OscConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009ae:	f000 f9df 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b2:	233f      	movs	r3, #63	; 0x3f
 80009b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b6:	2303      	movs	r3, #3
 80009b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009be:	2308      	movs	r3, #8
 80009c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009c2:	2340      	movs	r3, #64	; 0x40
 80009c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c6:	2340      	movs	r3, #64	; 0x40
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009d0:	2340      	movs	r3, #64	; 0x40
 80009d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2103      	movs	r1, #3
 80009d8:	4618      	mov	r0, r3
 80009da:	f004 fac1 	bl	8004f60 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009e4:	f000 f9c4 	bl	8000d70 <Error_Handler>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3770      	adds	r7, #112	; 0x70
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	58024800 	.word	0x58024800

080009f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <MX_CRC_Init+0x3c>)
 80009fa:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <MX_CRC_Init+0x40>)
 80009fc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_CRC_Init+0x3c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_CRC_Init+0x3c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_CRC_Init+0x3c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_CRC_Init+0x3c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_CRC_Init+0x3c>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_CRC_Init+0x3c>)
 8000a1e:	f000 fdb7 	bl	8001590 <HAL_CRC_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a28:	f000 f9a2 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	24000094 	.word	0x24000094
 8000a34:	58024c00 	.word	0x58024c00

08000a38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a3e:	4a23      	ldr	r2, [pc, #140]	; (8000acc <MX_USART3_UART_Init+0x94>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a80:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a82:	f006 f915 	bl	8006cb0 <HAL_UART_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a8c:	f000 f970 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a94:	f007 ffa5 	bl	80089e2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a9e:	f000 f967 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000aa6:	f007 ffda 	bl	8008a5e <HAL_UARTEx_SetRxFifoThreshold>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ab0:	f000 f95e 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000ab6:	f007 ff5b 	bl	8008970 <HAL_UARTEx_DisableFifoMode>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ac0:	f000 f956 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	240000b8 	.word	0x240000b8
 8000acc:	40004800 	.word	0x40004800

08000ad0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <MX_DMA_Init+0x3c>)
 8000ad8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000adc:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <MX_DMA_Init+0x3c>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_DMA_Init+0x3c>)
 8000ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	200b      	movs	r0, #11
 8000afa:	f000 fd14 	bl	8001526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000afe:	200b      	movs	r0, #11
 8000b00:	f000 fd2b 	bl	800155a <HAL_NVIC_EnableIRQ>

}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58024400 	.word	0x58024400

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	4b8b      	ldr	r3, [pc, #556]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a89      	ldr	r2, [pc, #548]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b87      	ldr	r3, [pc, #540]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b44:	4b83      	ldr	r3, [pc, #524]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a82      	ldr	r2, [pc, #520]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b7f      	ldr	r3, [pc, #508]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b7c      	ldr	r3, [pc, #496]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a7a      	ldr	r2, [pc, #488]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b78      	ldr	r3, [pc, #480]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b74      	ldr	r3, [pc, #464]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	4a73      	ldr	r2, [pc, #460]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b90:	4b70      	ldr	r3, [pc, #448]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	4b6d      	ldr	r3, [pc, #436]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	4a6b      	ldr	r2, [pc, #428]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bae:	4b69      	ldr	r3, [pc, #420]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bbc:	4b65      	ldr	r3, [pc, #404]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	4a64      	ldr	r2, [pc, #400]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bcc:	4b61      	ldr	r3, [pc, #388]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bda:	4b5e      	ldr	r3, [pc, #376]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a5c      	ldr	r2, [pc, #368]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b5a      	ldr	r3, [pc, #360]	; (8000d54 <MX_GPIO_Init+0x244>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bfe:	4856      	ldr	r0, [pc, #344]	; (8000d58 <MX_GPIO_Init+0x248>)
 8000c00:	f003 fd92 	bl	8004728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0a:	4854      	ldr	r0, [pc, #336]	; (8000d5c <MX_GPIO_Init+0x24c>)
 8000c0c:	f003 fd8c 	bl	8004728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2102      	movs	r1, #2
 8000c14:	4852      	ldr	r0, [pc, #328]	; (8000d60 <MX_GPIO_Init+0x250>)
 8000c16:	f003 fd87 	bl	8004728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	484d      	ldr	r0, [pc, #308]	; (8000d64 <MX_GPIO_Init+0x254>)
 8000c30:	f003 fbd2 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c34:	2332      	movs	r3, #50	; 0x32
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c44:	230b      	movs	r3, #11
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4845      	ldr	r0, [pc, #276]	; (8000d64 <MX_GPIO_Init+0x254>)
 8000c50:	f003 fbc2 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c54:	2386      	movs	r3, #134	; 0x86
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c64:	230b      	movs	r3, #11
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	483e      	ldr	r0, [pc, #248]	; (8000d68 <MX_GPIO_Init+0x258>)
 8000c70:	f003 fbb2 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c74:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4832      	ldr	r0, [pc, #200]	; (8000d58 <MX_GPIO_Init+0x248>)
 8000c8e:	f003 fba3 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca4:	230b      	movs	r3, #11
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	482a      	ldr	r0, [pc, #168]	; (8000d58 <MX_GPIO_Init+0x248>)
 8000cb0:	f003 fb92 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4823      	ldr	r0, [pc, #140]	; (8000d5c <MX_GPIO_Init+0x24c>)
 8000cce:	f003 fb83 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4821      	ldr	r0, [pc, #132]	; (8000d6c <MX_GPIO_Init+0x25c>)
 8000ce8:	f003 fb76 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000cfe:	230a      	movs	r3, #10
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4817      	ldr	r0, [pc, #92]	; (8000d68 <MX_GPIO_Init+0x258>)
 8000d0a:	f003 fb65 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d20:	230b      	movs	r3, #11
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4810      	ldr	r0, [pc, #64]	; (8000d6c <MX_GPIO_Init+0x25c>)
 8000d2c:	f003 fb54 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_GPIO_Init+0x250>)
 8000d48:	f003 fb46 	bl	80043d8 <HAL_GPIO_Init>

}
 8000d4c:	bf00      	nop
 8000d4e:	3730      	adds	r7, #48	; 0x30
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	58020c00 	.word	0x58020c00
 8000d60:	58021000 	.word	0x58021000
 8000d64:	58020800 	.word	0x58020800
 8000d68:	58020000 	.word	0x58020000
 8000d6c:	58021800 	.word	0x58021800

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <Error_Handler+0x8>
	...

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_MspInit+0x30>)
 8000d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d88:	4a08      	ldr	r2, [pc, #32]	; (8000dac <HAL_MspInit+0x30>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_MspInit+0x30>)
 8000d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	58024400 	.word	0x58024400

08000db0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <HAL_CRC_MspInit+0x3c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10e      	bne.n	8000de0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_CRC_MspInit+0x40>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <HAL_CRC_MspInit+0x40>)
 8000dca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <HAL_CRC_MspInit+0x40>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	58024c00 	.word	0x58024c00
 8000df0:	58024400 	.word	0x58024400

08000df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0b6      	sub	sp, #216	; 0xd8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	22b4      	movs	r2, #180	; 0xb4
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f007 fee7 	bl	8008be8 <memset>
  if(huart->Instance==USART3)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a40      	ldr	r2, [pc, #256]	; (8000f20 <HAL_UART_MspInit+0x12c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d178      	bne.n	8000f16 <HAL_UART_MspInit+0x122>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e24:	2302      	movs	r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4618      	mov	r0, r3
 8000e34:	f004 fc20 	bl	8005678 <HAL_RCCEx_PeriphCLKConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e3e:	f7ff ff97 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <HAL_UART_MspInit+0x130>)
 8000e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e48:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <HAL_UART_MspInit+0x130>)
 8000e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e52:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <HAL_UART_MspInit+0x130>)
 8000e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e60:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_UART_MspInit+0x130>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <HAL_UART_MspInit+0x130>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e70:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <HAL_UART_MspInit+0x130>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000e7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4820      	ldr	r0, [pc, #128]	; (8000f28 <HAL_UART_MspInit+0x134>)
 8000ea6:	f003 fa97 	bl	80043d8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000eac:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <HAL_UART_MspInit+0x13c>)
 8000eae:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000eb2:	222e      	movs	r2, #46	; 0x2e
 8000eb4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000eb8:	2240      	movs	r2, #64	; 0x40
 8000eba:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000ede:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ee2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000eea:	4810      	ldr	r0, [pc, #64]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000eec:	f000 fc3a 	bl	8001764 <HAL_DMA_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8000ef6:	f7ff ff3b 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000efe:	679a      	str	r2, [r3, #120]	; 0x78
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_UART_MspInit+0x138>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2027      	movs	r0, #39	; 0x27
 8000f0c:	f000 fb0b 	bl	8001526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f10:	2027      	movs	r0, #39	; 0x27
 8000f12:	f000 fb22 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	37d8      	adds	r7, #216	; 0xd8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40004800 	.word	0x40004800
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58020c00 	.word	0x58020c00
 8000f2c:	24000148 	.word	0x24000148
 8000f30:	40020010 	.word	0x40020010

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <NMI_Handler+0x4>

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f80:	f000 f9b2 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <DMA1_Stream0_IRQHandler+0x10>)
 8000f8e:	f001 ff11 	bl	8002db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	24000148 	.word	0x24000148

08000f9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <USART3_IRQHandler+0x10>)
 8000fa2:	f005 ff67 	bl	8006e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	240000b8 	.word	0x240000b8

08000fb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	e00a      	b.n	8000fd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fc2:	f3af 8000 	nop.w
 8000fc6:	4601      	mov	r1, r0
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	b2ca      	uxtb	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf0      	blt.n	8000fc2 <_read+0x12>
	}

return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001012:	605a      	str	r2, [r3, #4]
	return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_isatty>:

int _isatty(int file)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	return 1;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
	return 0;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <_sbrk+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <_sbrk+0x60>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <_sbrk+0x64>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <_sbrk+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	429a      	cmp	r2, r3
 8001082:	d207      	bcs.n	8001094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001084:	f007 fd78 	bl	8008b78 <__errno>
 8001088:	4603      	mov	r3, r0
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001092:	e009      	b.n	80010a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <_sbrk+0x64>)
 80010a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	24050000 	.word	0x24050000
 80010b4:	00000400 	.word	0x00000400
 80010b8:	24000204 	.word	0x24000204
 80010bc:	24000220 	.word	0x24000220

080010c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <SystemInit+0xd0>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ca:	4a31      	ldr	r2, [pc, #196]	; (8001190 <SystemInit+0xd0>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <SystemInit+0xd4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	2b06      	cmp	r3, #6
 80010de:	d807      	bhi.n	80010f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <SystemInit+0xd4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 030f 	bic.w	r3, r3, #15
 80010e8:	4a2a      	ldr	r2, [pc, #168]	; (8001194 <SystemInit+0xd4>)
 80010ea:	f043 0307 	orr.w	r3, r3, #7
 80010ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <SystemInit+0xd8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <SystemInit+0xd8>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <SystemInit+0xd8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <SystemInit+0xd8>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4924      	ldr	r1, [pc, #144]	; (8001198 <SystemInit+0xd8>)
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <SystemInit+0xdc>)
 800110a:	4013      	ands	r3, r2
 800110c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <SystemInit+0xd4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <SystemInit+0xd4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 030f 	bic.w	r3, r3, #15
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <SystemInit+0xd4>)
 8001124:	f043 0307 	orr.w	r3, r3, #7
 8001128:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <SystemInit+0xd8>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <SystemInit+0xd8>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <SystemInit+0xd8>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <SystemInit+0xd8>)
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <SystemInit+0xe0>)
 8001140:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <SystemInit+0xd8>)
 8001144:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <SystemInit+0xe4>)
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <SystemInit+0xd8>)
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <SystemInit+0xe8>)
 800114c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <SystemInit+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <SystemInit+0xd8>)
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <SystemInit+0xe8>)
 8001158:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <SystemInit+0xd8>)
 800115c:	2200      	movs	r2, #0
 800115e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <SystemInit+0xd8>)
 8001162:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <SystemInit+0xe8>)
 8001164:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <SystemInit+0xd8>)
 8001168:	2200      	movs	r2, #0
 800116a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <SystemInit+0xd8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a09      	ldr	r2, [pc, #36]	; (8001198 <SystemInit+0xd8>)
 8001172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001176:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <SystemInit+0xd8>)
 800117a:	2200      	movs	r2, #0
 800117c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <SystemInit+0xec>)
 8001180:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001184:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	52002000 	.word	0x52002000
 8001198:	58024400 	.word	0x58024400
 800119c:	eaf6ed7f 	.word	0xeaf6ed7f
 80011a0:	02020200 	.word	0x02020200
 80011a4:	01ff0000 	.word	0x01ff0000
 80011a8:	01010280 	.word	0x01010280
 80011ac:	52004000 	.word	0x52004000

080011b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011b4:	f7ff ff84 	bl	80010c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ba:	490d      	ldr	r1, [pc, #52]	; (80011f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d0:	4c0a      	ldr	r4, [pc, #40]	; (80011fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011de:	f007 fcd1 	bl	8008b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e2:	f7ff fb7b 	bl	80008dc <main>
  bx  lr
 80011e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80011ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011f0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80011f4:	08009d9c 	.word	0x08009d9c
  ldr r2, =_sbss
 80011f8:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80011fc:	2400021c 	.word	0x2400021c

08001200 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC3_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120a:	2003      	movs	r0, #3
 800120c:	f000 f980 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001210:	f004 f85c 	bl	80052cc <HAL_RCC_GetSysClockFreq>
 8001214:	4602      	mov	r2, r0
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_Init+0x68>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	4913      	ldr	r1, [pc, #76]	; (8001270 <HAL_Init+0x6c>)
 8001222:	5ccb      	ldrb	r3, [r1, r3]
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	fa22 f303 	lsr.w	r3, r2, r3
 800122c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_Init+0x68>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_Init+0x6c>)
 8001238:	5cd3      	ldrb	r3, [r2, r3]
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	fa22 f303 	lsr.w	r3, r2, r3
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_Init+0x70>)
 8001246:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001248:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <HAL_Init+0x74>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f814 	bl	800127c <HAL_InitTick>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e002      	b.n	8001264 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800125e:	f7ff fd8d 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	58024400 	.word	0x58024400
 8001270:	08009cb4 	.word	0x08009cb4
 8001274:	24000008 	.word	0x24000008
 8001278:	24000004 	.word	0x24000004

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_InitTick+0x60>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e021      	b.n	80012d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_InitTick+0x64>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_InitTick+0x60>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f965 	bl	8001576 <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00e      	b.n	80012d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d80a      	bhi.n	80012d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c4:	f000 f92f 	bl	8001526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_InitTick+0x68>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	24000010 	.word	0x24000010
 80012e0:	24000004 	.word	0x24000004
 80012e4:	2400000c 	.word	0x2400000c

080012e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x20>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x24>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_IncTick+0x24>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	24000010 	.word	0x24000010
 800130c:	24000208 	.word	0x24000208

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	24000208 	.word	0x24000208

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff ffee 	bl	8001310 <HAL_GetTick>
 8001334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_Delay+0x44>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800134e:	bf00      	nop
 8001350:	f7ff ffde 	bl	8001310 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	24000010 	.word	0x24000010

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	4313      	orrs	r3, r2
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <__NVIC_SetPriorityGrouping+0x40>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00
 80013b4:	05fa0000 	.word	0x05fa0000

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <__NVIC_EnableIRQ+0x38>)
 80013ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	; (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	; (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014dc:	d301      	bcc.n	80014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <SysTick_Config+0x40>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ea:	210f      	movs	r1, #15
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f0:	f7ff ff8e 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <SysTick_Config+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <SysTick_Config+0x40>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff29 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff40 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff90 	bl	8001464 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5f 	bl	8001410 <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff33 	bl	80013d4 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa4 	bl	80014cc <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e054      	b.n	800164c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7f5b      	ldrb	r3, [r3, #29]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d105      	bne.n	80015b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fbfc 	bl	8000db0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2202      	movs	r2, #2
 80015bc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	791b      	ldrb	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10c      	bne.n	80015e0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a22      	ldr	r2, [pc, #136]	; (8001654 <HAL_CRC_Init+0xc4>)
 80015cc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0218 	bic.w	r2, r2, #24
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	e00c      	b.n	80015fa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6899      	ldr	r1, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	461a      	mov	r2, r3
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f834 	bl	8001658 <HAL_CRCEx_Polynomial_Set>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e028      	b.n	800164c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	795b      	ldrb	r3, [r3, #5]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d105      	bne.n	800160e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	e004      	b.n	8001618 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6912      	ldr	r2, [r2, #16]
 8001616:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699a      	ldr	r2, [r3, #24]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	04c11db7 	.word	0x04c11db7

08001658 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001668:	231f      	movs	r3, #31
 800166a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800166c:	bf00      	nop
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1e5a      	subs	r2, r3, #1
 8001672:	613a      	str	r2, [r7, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <HAL_CRCEx_Polynomial_Set+0x34>
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b18      	cmp	r3, #24
 8001690:	d846      	bhi.n	8001720 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001692:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001698:	08001727 	.word	0x08001727
 800169c:	08001721 	.word	0x08001721
 80016a0:	08001721 	.word	0x08001721
 80016a4:	08001721 	.word	0x08001721
 80016a8:	08001721 	.word	0x08001721
 80016ac:	08001721 	.word	0x08001721
 80016b0:	08001721 	.word	0x08001721
 80016b4:	08001721 	.word	0x08001721
 80016b8:	08001715 	.word	0x08001715
 80016bc:	08001721 	.word	0x08001721
 80016c0:	08001721 	.word	0x08001721
 80016c4:	08001721 	.word	0x08001721
 80016c8:	08001721 	.word	0x08001721
 80016cc:	08001721 	.word	0x08001721
 80016d0:	08001721 	.word	0x08001721
 80016d4:	08001721 	.word	0x08001721
 80016d8:	08001709 	.word	0x08001709
 80016dc:	08001721 	.word	0x08001721
 80016e0:	08001721 	.word	0x08001721
 80016e4:	08001721 	.word	0x08001721
 80016e8:	08001721 	.word	0x08001721
 80016ec:	08001721 	.word	0x08001721
 80016f0:	08001721 	.word	0x08001721
 80016f4:	08001721 	.word	0x08001721
 80016f8:	080016fd 	.word	0x080016fd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d913      	bls.n	800172a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001706:	e010      	b.n	800172a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b07      	cmp	r3, #7
 800170c:	d90f      	bls.n	800172e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001712:	e00c      	b.n	800172e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	d90b      	bls.n	8001732 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800171e:	e008      	b.n	8001732 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	75fb      	strb	r3, [r7, #23]
      break;
 8001724:	e006      	b.n	8001734 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001726:	bf00      	nop
 8001728:	e004      	b.n	8001734 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001732:	bf00      	nop
  }
  if (status == HAL_OK)
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10d      	bne.n	8001756 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 0118 	bic.w	r1, r3, #24
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	430a      	orrs	r2, r1
 8001754:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001756:	7dfb      	ldrb	r3, [r7, #23]
}
 8001758:	4618      	mov	r0, r3
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff fdd0 	bl	8001310 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e314      	b.n	8001da6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a66      	ldr	r2, [pc, #408]	; (800191c <HAL_DMA_Init+0x1b8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d04a      	beq.n	800181c <HAL_DMA_Init+0xb8>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a65      	ldr	r2, [pc, #404]	; (8001920 <HAL_DMA_Init+0x1bc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d045      	beq.n	800181c <HAL_DMA_Init+0xb8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a63      	ldr	r2, [pc, #396]	; (8001924 <HAL_DMA_Init+0x1c0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d040      	beq.n	800181c <HAL_DMA_Init+0xb8>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a62      	ldr	r2, [pc, #392]	; (8001928 <HAL_DMA_Init+0x1c4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d03b      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a60      	ldr	r2, [pc, #384]	; (800192c <HAL_DMA_Init+0x1c8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d036      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a5f      	ldr	r2, [pc, #380]	; (8001930 <HAL_DMA_Init+0x1cc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d031      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5d      	ldr	r2, [pc, #372]	; (8001934 <HAL_DMA_Init+0x1d0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d02c      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	; (8001938 <HAL_DMA_Init+0x1d4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d027      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a5a      	ldr	r2, [pc, #360]	; (800193c <HAL_DMA_Init+0x1d8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d022      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a59      	ldr	r2, [pc, #356]	; (8001940 <HAL_DMA_Init+0x1dc>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d01d      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a57      	ldr	r2, [pc, #348]	; (8001944 <HAL_DMA_Init+0x1e0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d018      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a56      	ldr	r2, [pc, #344]	; (8001948 <HAL_DMA_Init+0x1e4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d013      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a54      	ldr	r2, [pc, #336]	; (800194c <HAL_DMA_Init+0x1e8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00e      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a53      	ldr	r2, [pc, #332]	; (8001950 <HAL_DMA_Init+0x1ec>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d009      	beq.n	800181c <HAL_DMA_Init+0xb8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a51      	ldr	r2, [pc, #324]	; (8001954 <HAL_DMA_Init+0x1f0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d004      	beq.n	800181c <HAL_DMA_Init+0xb8>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a50      	ldr	r2, [pc, #320]	; (8001958 <HAL_DMA_Init+0x1f4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_DMA_Init+0xbc>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <HAL_DMA_Init+0xbe>
 8001820:	2300      	movs	r3, #0
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 813c 	beq.w	8001aa0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a37      	ldr	r2, [pc, #220]	; (800191c <HAL_DMA_Init+0x1b8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d04a      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a36      	ldr	r2, [pc, #216]	; (8001920 <HAL_DMA_Init+0x1bc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d045      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a34      	ldr	r2, [pc, #208]	; (8001924 <HAL_DMA_Init+0x1c0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d040      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a33      	ldr	r2, [pc, #204]	; (8001928 <HAL_DMA_Init+0x1c4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d03b      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a31      	ldr	r2, [pc, #196]	; (800192c <HAL_DMA_Init+0x1c8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d036      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a30      	ldr	r2, [pc, #192]	; (8001930 <HAL_DMA_Init+0x1cc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d031      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <HAL_DMA_Init+0x1d0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d02c      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a2d      	ldr	r2, [pc, #180]	; (8001938 <HAL_DMA_Init+0x1d4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d027      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a2b      	ldr	r2, [pc, #172]	; (800193c <HAL_DMA_Init+0x1d8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d022      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <HAL_DMA_Init+0x1dc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d01d      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a28      	ldr	r2, [pc, #160]	; (8001944 <HAL_DMA_Init+0x1e0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d018      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a27      	ldr	r2, [pc, #156]	; (8001948 <HAL_DMA_Init+0x1e4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a25      	ldr	r2, [pc, #148]	; (800194c <HAL_DMA_Init+0x1e8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00e      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a24      	ldr	r2, [pc, #144]	; (8001950 <HAL_DMA_Init+0x1ec>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d009      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a22      	ldr	r2, [pc, #136]	; (8001954 <HAL_DMA_Init+0x1f0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d004      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a21      	ldr	r2, [pc, #132]	; (8001958 <HAL_DMA_Init+0x1f4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d108      	bne.n	80018ea <HAL_DMA_Init+0x186>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	e007      	b.n	80018fa <HAL_DMA_Init+0x196>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0201 	bic.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018fa:	e02f      	b.n	800195c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fc:	f7ff fd08 	bl	8001310 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b05      	cmp	r3, #5
 8001908:	d928      	bls.n	800195c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2220      	movs	r2, #32
 800190e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2203      	movs	r2, #3
 8001914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e244      	b.n	8001da6 <HAL_DMA_Init+0x642>
 800191c:	40020010 	.word	0x40020010
 8001920:	40020028 	.word	0x40020028
 8001924:	40020040 	.word	0x40020040
 8001928:	40020058 	.word	0x40020058
 800192c:	40020070 	.word	0x40020070
 8001930:	40020088 	.word	0x40020088
 8001934:	400200a0 	.word	0x400200a0
 8001938:	400200b8 	.word	0x400200b8
 800193c:	40020410 	.word	0x40020410
 8001940:	40020428 	.word	0x40020428
 8001944:	40020440 	.word	0x40020440
 8001948:	40020458 	.word	0x40020458
 800194c:	40020470 	.word	0x40020470
 8001950:	40020488 	.word	0x40020488
 8001954:	400204a0 	.word	0x400204a0
 8001958:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1c8      	bne.n	80018fc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4b84      	ldr	r3, [pc, #528]	; (8001b88 <HAL_DMA_Init+0x424>)
 8001976:	4013      	ands	r3, r2
 8001978:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001982:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d107      	bne.n	80019c0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	4313      	orrs	r3, r2
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4313      	orrs	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b28      	cmp	r3, #40	; 0x28
 80019c6:	d903      	bls.n	80019d0 <HAL_DMA_Init+0x26c>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b2e      	cmp	r3, #46	; 0x2e
 80019ce:	d91f      	bls.n	8001a10 <HAL_DMA_Init+0x2ac>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b3e      	cmp	r3, #62	; 0x3e
 80019d6:	d903      	bls.n	80019e0 <HAL_DMA_Init+0x27c>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b42      	cmp	r3, #66	; 0x42
 80019de:	d917      	bls.n	8001a10 <HAL_DMA_Init+0x2ac>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b46      	cmp	r3, #70	; 0x46
 80019e6:	d903      	bls.n	80019f0 <HAL_DMA_Init+0x28c>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b48      	cmp	r3, #72	; 0x48
 80019ee:	d90f      	bls.n	8001a10 <HAL_DMA_Init+0x2ac>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b4e      	cmp	r3, #78	; 0x4e
 80019f6:	d903      	bls.n	8001a00 <HAL_DMA_Init+0x29c>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b52      	cmp	r3, #82	; 0x52
 80019fe:	d907      	bls.n	8001a10 <HAL_DMA_Init+0x2ac>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b73      	cmp	r3, #115	; 0x73
 8001a06:	d905      	bls.n	8001a14 <HAL_DMA_Init+0x2b0>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b77      	cmp	r3, #119	; 0x77
 8001a0e:	d801      	bhi.n	8001a14 <HAL_DMA_Init+0x2b0>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_DMA_Init+0x2b2>
 8001a14:	2300      	movs	r3, #0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a20:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f023 0307 	bic.w	r3, r3, #7
 8001a38:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d117      	bne.n	8001a7c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00e      	beq.n	8001a7c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f002 fb30 	bl	80040c4 <DMA_CheckFifoParam>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2240      	movs	r2, #64	; 0x40
 8001a6e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e194      	b.n	8001da6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f002 fa6b 	bl	8003f60 <DMA_CalcBaseAndBitshift>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	223f      	movs	r2, #63	; 0x3f
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	e0ca      	b.n	8001c36 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a39      	ldr	r2, [pc, #228]	; (8001b8c <HAL_DMA_Init+0x428>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d022      	beq.n	8001af0 <HAL_DMA_Init+0x38c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a38      	ldr	r2, [pc, #224]	; (8001b90 <HAL_DMA_Init+0x42c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d01d      	beq.n	8001af0 <HAL_DMA_Init+0x38c>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a36      	ldr	r2, [pc, #216]	; (8001b94 <HAL_DMA_Init+0x430>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d018      	beq.n	8001af0 <HAL_DMA_Init+0x38c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a35      	ldr	r2, [pc, #212]	; (8001b98 <HAL_DMA_Init+0x434>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d013      	beq.n	8001af0 <HAL_DMA_Init+0x38c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a33      	ldr	r2, [pc, #204]	; (8001b9c <HAL_DMA_Init+0x438>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00e      	beq.n	8001af0 <HAL_DMA_Init+0x38c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a32      	ldr	r2, [pc, #200]	; (8001ba0 <HAL_DMA_Init+0x43c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d009      	beq.n	8001af0 <HAL_DMA_Init+0x38c>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a30      	ldr	r2, [pc, #192]	; (8001ba4 <HAL_DMA_Init+0x440>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d004      	beq.n	8001af0 <HAL_DMA_Init+0x38c>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a2f      	ldr	r2, [pc, #188]	; (8001ba8 <HAL_DMA_Init+0x444>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d101      	bne.n	8001af4 <HAL_DMA_Init+0x390>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_DMA_Init+0x392>
 8001af4:	2300      	movs	r3, #0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8094 	beq.w	8001c24 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a22      	ldr	r2, [pc, #136]	; (8001b8c <HAL_DMA_Init+0x428>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d021      	beq.n	8001b4a <HAL_DMA_Init+0x3e6>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a21      	ldr	r2, [pc, #132]	; (8001b90 <HAL_DMA_Init+0x42c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d01c      	beq.n	8001b4a <HAL_DMA_Init+0x3e6>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <HAL_DMA_Init+0x430>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d017      	beq.n	8001b4a <HAL_DMA_Init+0x3e6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_DMA_Init+0x434>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d012      	beq.n	8001b4a <HAL_DMA_Init+0x3e6>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <HAL_DMA_Init+0x438>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00d      	beq.n	8001b4a <HAL_DMA_Init+0x3e6>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_DMA_Init+0x43c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d008      	beq.n	8001b4a <HAL_DMA_Init+0x3e6>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_DMA_Init+0x440>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d003      	beq.n	8001b4a <HAL_DMA_Init+0x3e6>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <HAL_DMA_Init+0x444>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_DMA_Init+0x448>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b40      	cmp	r3, #64	; 0x40
 8001b72:	d01d      	beq.n	8001bb0 <HAL_DMA_Init+0x44c>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b80      	cmp	r3, #128	; 0x80
 8001b7a:	d102      	bne.n	8001b82 <HAL_DMA_Init+0x41e>
 8001b7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b80:	e017      	b.n	8001bb2 <HAL_DMA_Init+0x44e>
 8001b82:	2300      	movs	r3, #0
 8001b84:	e015      	b.n	8001bb2 <HAL_DMA_Init+0x44e>
 8001b86:	bf00      	nop
 8001b88:	fe10803f 	.word	0xfe10803f
 8001b8c:	58025408 	.word	0x58025408
 8001b90:	5802541c 	.word	0x5802541c
 8001b94:	58025430 	.word	0x58025430
 8001b98:	58025444 	.word	0x58025444
 8001b9c:	58025458 	.word	0x58025458
 8001ba0:	5802546c 	.word	0x5802546c
 8001ba4:	58025480 	.word	0x58025480
 8001ba8:	58025494 	.word	0x58025494
 8001bac:	fffe000f 	.word	0xfffe000f
 8001bb0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68d2      	ldr	r2, [r2, #12]
 8001bb6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001be0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b6e      	ldr	r3, [pc, #440]	; (8001db0 <HAL_DMA_Init+0x64c>)
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a6e      	ldr	r2, [pc, #440]	; (8001db4 <HAL_DMA_Init+0x650>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	009a      	lsls	r2, r3, #2
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f002 f9a9 	bl	8003f60 <DMA_CalcBaseAndBitshift>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	e008      	b.n	8001c36 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2240      	movs	r2, #64	; 0x40
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0b7      	b.n	8001da6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a5f      	ldr	r2, [pc, #380]	; (8001db8 <HAL_DMA_Init+0x654>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d072      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a5d      	ldr	r2, [pc, #372]	; (8001dbc <HAL_DMA_Init+0x658>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d06d      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a5c      	ldr	r2, [pc, #368]	; (8001dc0 <HAL_DMA_Init+0x65c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d068      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a5a      	ldr	r2, [pc, #360]	; (8001dc4 <HAL_DMA_Init+0x660>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d063      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a59      	ldr	r2, [pc, #356]	; (8001dc8 <HAL_DMA_Init+0x664>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d05e      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a57      	ldr	r2, [pc, #348]	; (8001dcc <HAL_DMA_Init+0x668>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d059      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a56      	ldr	r2, [pc, #344]	; (8001dd0 <HAL_DMA_Init+0x66c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d054      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a54      	ldr	r2, [pc, #336]	; (8001dd4 <HAL_DMA_Init+0x670>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d04f      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a53      	ldr	r2, [pc, #332]	; (8001dd8 <HAL_DMA_Init+0x674>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d04a      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a51      	ldr	r2, [pc, #324]	; (8001ddc <HAL_DMA_Init+0x678>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d045      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a50      	ldr	r2, [pc, #320]	; (8001de0 <HAL_DMA_Init+0x67c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d040      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a4e      	ldr	r2, [pc, #312]	; (8001de4 <HAL_DMA_Init+0x680>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d03b      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a4d      	ldr	r2, [pc, #308]	; (8001de8 <HAL_DMA_Init+0x684>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d036      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a4b      	ldr	r2, [pc, #300]	; (8001dec <HAL_DMA_Init+0x688>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d031      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a4a      	ldr	r2, [pc, #296]	; (8001df0 <HAL_DMA_Init+0x68c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d02c      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a48      	ldr	r2, [pc, #288]	; (8001df4 <HAL_DMA_Init+0x690>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d027      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a47      	ldr	r2, [pc, #284]	; (8001df8 <HAL_DMA_Init+0x694>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d022      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a45      	ldr	r2, [pc, #276]	; (8001dfc <HAL_DMA_Init+0x698>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01d      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a44      	ldr	r2, [pc, #272]	; (8001e00 <HAL_DMA_Init+0x69c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d018      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a42      	ldr	r2, [pc, #264]	; (8001e04 <HAL_DMA_Init+0x6a0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a41      	ldr	r2, [pc, #260]	; (8001e08 <HAL_DMA_Init+0x6a4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00e      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a3f      	ldr	r2, [pc, #252]	; (8001e0c <HAL_DMA_Init+0x6a8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d009      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a3e      	ldr	r2, [pc, #248]	; (8001e10 <HAL_DMA_Init+0x6ac>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d004      	beq.n	8001d26 <HAL_DMA_Init+0x5c2>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a3c      	ldr	r2, [pc, #240]	; (8001e14 <HAL_DMA_Init+0x6b0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d101      	bne.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_DMA_Init+0x5c8>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d032      	beq.n	8001d96 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f002 fa43 	bl	80041bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b80      	cmp	r3, #128	; 0x80
 8001d3c:	d102      	bne.n	8001d44 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d010      	beq.n	8001d84 <HAL_DMA_Init+0x620>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d80c      	bhi.n	8001d84 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f002 fac0 	bl	80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	e008      	b.n	8001d96 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	a7fdabf8 	.word	0xa7fdabf8
 8001db4:	cccccccd 	.word	0xcccccccd
 8001db8:	40020010 	.word	0x40020010
 8001dbc:	40020028 	.word	0x40020028
 8001dc0:	40020040 	.word	0x40020040
 8001dc4:	40020058 	.word	0x40020058
 8001dc8:	40020070 	.word	0x40020070
 8001dcc:	40020088 	.word	0x40020088
 8001dd0:	400200a0 	.word	0x400200a0
 8001dd4:	400200b8 	.word	0x400200b8
 8001dd8:	40020410 	.word	0x40020410
 8001ddc:	40020428 	.word	0x40020428
 8001de0:	40020440 	.word	0x40020440
 8001de4:	40020458 	.word	0x40020458
 8001de8:	40020470 	.word	0x40020470
 8001dec:	40020488 	.word	0x40020488
 8001df0:	400204a0 	.word	0x400204a0
 8001df4:	400204b8 	.word	0x400204b8
 8001df8:	58025408 	.word	0x58025408
 8001dfc:	5802541c 	.word	0x5802541c
 8001e00:	58025430 	.word	0x58025430
 8001e04:	58025444 	.word	0x58025444
 8001e08:	58025458 	.word	0x58025458
 8001e0c:	5802546c 	.word	0x5802546c
 8001e10:	58025480 	.word	0x58025480
 8001e14:	58025494 	.word	0x58025494

08001e18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e226      	b.n	8002282 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_DMA_Start_IT+0x2a>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e21f      	b.n	8002282 <HAL_DMA_Start_IT+0x46a>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	f040 820a 	bne.w	800226c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a68      	ldr	r2, [pc, #416]	; (800200c <HAL_DMA_Start_IT+0x1f4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d04a      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a66      	ldr	r2, [pc, #408]	; (8002010 <HAL_DMA_Start_IT+0x1f8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d045      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a65      	ldr	r2, [pc, #404]	; (8002014 <HAL_DMA_Start_IT+0x1fc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d040      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a63      	ldr	r2, [pc, #396]	; (8002018 <HAL_DMA_Start_IT+0x200>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d03b      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a62      	ldr	r2, [pc, #392]	; (800201c <HAL_DMA_Start_IT+0x204>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d036      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a60      	ldr	r2, [pc, #384]	; (8002020 <HAL_DMA_Start_IT+0x208>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d031      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a5f      	ldr	r2, [pc, #380]	; (8002024 <HAL_DMA_Start_IT+0x20c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d02c      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <HAL_DMA_Start_IT+0x210>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d027      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5c      	ldr	r2, [pc, #368]	; (800202c <HAL_DMA_Start_IT+0x214>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d022      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a5a      	ldr	r2, [pc, #360]	; (8002030 <HAL_DMA_Start_IT+0x218>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d01d      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a59      	ldr	r2, [pc, #356]	; (8002034 <HAL_DMA_Start_IT+0x21c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d018      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a57      	ldr	r2, [pc, #348]	; (8002038 <HAL_DMA_Start_IT+0x220>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a56      	ldr	r2, [pc, #344]	; (800203c <HAL_DMA_Start_IT+0x224>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00e      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a54      	ldr	r2, [pc, #336]	; (8002040 <HAL_DMA_Start_IT+0x228>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a53      	ldr	r2, [pc, #332]	; (8002044 <HAL_DMA_Start_IT+0x22c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d004      	beq.n	8001f06 <HAL_DMA_Start_IT+0xee>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a51      	ldr	r2, [pc, #324]	; (8002048 <HAL_DMA_Start_IT+0x230>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d108      	bne.n	8001f18 <HAL_DMA_Start_IT+0x100>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e007      	b.n	8001f28 <HAL_DMA_Start_IT+0x110>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f001 fe6a 	bl	8003c08 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a34      	ldr	r2, [pc, #208]	; (800200c <HAL_DMA_Start_IT+0x1f4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d04a      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a33      	ldr	r2, [pc, #204]	; (8002010 <HAL_DMA_Start_IT+0x1f8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d045      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a31      	ldr	r2, [pc, #196]	; (8002014 <HAL_DMA_Start_IT+0x1fc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d040      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a30      	ldr	r2, [pc, #192]	; (8002018 <HAL_DMA_Start_IT+0x200>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d03b      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a2e      	ldr	r2, [pc, #184]	; (800201c <HAL_DMA_Start_IT+0x204>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d036      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a2d      	ldr	r2, [pc, #180]	; (8002020 <HAL_DMA_Start_IT+0x208>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d031      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2b      	ldr	r2, [pc, #172]	; (8002024 <HAL_DMA_Start_IT+0x20c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d02c      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a2a      	ldr	r2, [pc, #168]	; (8002028 <HAL_DMA_Start_IT+0x210>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d027      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a28      	ldr	r2, [pc, #160]	; (800202c <HAL_DMA_Start_IT+0x214>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d022      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a27      	ldr	r2, [pc, #156]	; (8002030 <HAL_DMA_Start_IT+0x218>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d01d      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a25      	ldr	r2, [pc, #148]	; (8002034 <HAL_DMA_Start_IT+0x21c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d018      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a24      	ldr	r2, [pc, #144]	; (8002038 <HAL_DMA_Start_IT+0x220>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d013      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a22      	ldr	r2, [pc, #136]	; (800203c <HAL_DMA_Start_IT+0x224>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00e      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a21      	ldr	r2, [pc, #132]	; (8002040 <HAL_DMA_Start_IT+0x228>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d009      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <HAL_DMA_Start_IT+0x22c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d004      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x1bc>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1e      	ldr	r2, [pc, #120]	; (8002048 <HAL_DMA_Start_IT+0x230>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d101      	bne.n	8001fd8 <HAL_DMA_Start_IT+0x1c0>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_DMA_Start_IT+0x1c2>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d036      	beq.n	800204c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 021e 	bic.w	r2, r3, #30
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0216 	orr.w	r2, r2, #22
 8001ff0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d03e      	beq.n	8002078 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0208 	orr.w	r2, r2, #8
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e035      	b.n	8002078 <HAL_DMA_Start_IT+0x260>
 800200c:	40020010 	.word	0x40020010
 8002010:	40020028 	.word	0x40020028
 8002014:	40020040 	.word	0x40020040
 8002018:	40020058 	.word	0x40020058
 800201c:	40020070 	.word	0x40020070
 8002020:	40020088 	.word	0x40020088
 8002024:	400200a0 	.word	0x400200a0
 8002028:	400200b8 	.word	0x400200b8
 800202c:	40020410 	.word	0x40020410
 8002030:	40020428 	.word	0x40020428
 8002034:	40020440 	.word	0x40020440
 8002038:	40020458 	.word	0x40020458
 800203c:	40020470 	.word	0x40020470
 8002040:	40020488 	.word	0x40020488
 8002044:	400204a0 	.word	0x400204a0
 8002048:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 020e 	bic.w	r2, r3, #14
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 020a 	orr.w	r2, r2, #10
 800205e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	2b00      	cmp	r3, #0
 8002066:	d007      	beq.n	8002078 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0204 	orr.w	r2, r2, #4
 8002076:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a83      	ldr	r2, [pc, #524]	; (800228c <HAL_DMA_Start_IT+0x474>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d072      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a82      	ldr	r2, [pc, #520]	; (8002290 <HAL_DMA_Start_IT+0x478>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d06d      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a80      	ldr	r2, [pc, #512]	; (8002294 <HAL_DMA_Start_IT+0x47c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d068      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a7f      	ldr	r2, [pc, #508]	; (8002298 <HAL_DMA_Start_IT+0x480>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d063      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a7d      	ldr	r2, [pc, #500]	; (800229c <HAL_DMA_Start_IT+0x484>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d05e      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7c      	ldr	r2, [pc, #496]	; (80022a0 <HAL_DMA_Start_IT+0x488>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d059      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a7a      	ldr	r2, [pc, #488]	; (80022a4 <HAL_DMA_Start_IT+0x48c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d054      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a79      	ldr	r2, [pc, #484]	; (80022a8 <HAL_DMA_Start_IT+0x490>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d04f      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a77      	ldr	r2, [pc, #476]	; (80022ac <HAL_DMA_Start_IT+0x494>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d04a      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a76      	ldr	r2, [pc, #472]	; (80022b0 <HAL_DMA_Start_IT+0x498>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d045      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a74      	ldr	r2, [pc, #464]	; (80022b4 <HAL_DMA_Start_IT+0x49c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d040      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a73      	ldr	r2, [pc, #460]	; (80022b8 <HAL_DMA_Start_IT+0x4a0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d03b      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a71      	ldr	r2, [pc, #452]	; (80022bc <HAL_DMA_Start_IT+0x4a4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d036      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a70      	ldr	r2, [pc, #448]	; (80022c0 <HAL_DMA_Start_IT+0x4a8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d031      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a6e      	ldr	r2, [pc, #440]	; (80022c4 <HAL_DMA_Start_IT+0x4ac>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d02c      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a6d      	ldr	r2, [pc, #436]	; (80022c8 <HAL_DMA_Start_IT+0x4b0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d027      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6b      	ldr	r2, [pc, #428]	; (80022cc <HAL_DMA_Start_IT+0x4b4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d022      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a6a      	ldr	r2, [pc, #424]	; (80022d0 <HAL_DMA_Start_IT+0x4b8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d01d      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a68      	ldr	r2, [pc, #416]	; (80022d4 <HAL_DMA_Start_IT+0x4bc>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d018      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a67      	ldr	r2, [pc, #412]	; (80022d8 <HAL_DMA_Start_IT+0x4c0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d013      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a65      	ldr	r2, [pc, #404]	; (80022dc <HAL_DMA_Start_IT+0x4c4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00e      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a64      	ldr	r2, [pc, #400]	; (80022e0 <HAL_DMA_Start_IT+0x4c8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d009      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a62      	ldr	r2, [pc, #392]	; (80022e4 <HAL_DMA_Start_IT+0x4cc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d004      	beq.n	8002168 <HAL_DMA_Start_IT+0x350>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a61      	ldr	r2, [pc, #388]	; (80022e8 <HAL_DMA_Start_IT+0x4d0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_DMA_Start_IT+0x354>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_DMA_Start_IT+0x356>
 800216c:	2300      	movs	r3, #0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d01a      	beq.n	80021a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800218e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a37      	ldr	r2, [pc, #220]	; (800228c <HAL_DMA_Start_IT+0x474>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d04a      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a36      	ldr	r2, [pc, #216]	; (8002290 <HAL_DMA_Start_IT+0x478>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d045      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a34      	ldr	r2, [pc, #208]	; (8002294 <HAL_DMA_Start_IT+0x47c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d040      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a33      	ldr	r2, [pc, #204]	; (8002298 <HAL_DMA_Start_IT+0x480>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d03b      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a31      	ldr	r2, [pc, #196]	; (800229c <HAL_DMA_Start_IT+0x484>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d036      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a30      	ldr	r2, [pc, #192]	; (80022a0 <HAL_DMA_Start_IT+0x488>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d031      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a2e      	ldr	r2, [pc, #184]	; (80022a4 <HAL_DMA_Start_IT+0x48c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d02c      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2d      	ldr	r2, [pc, #180]	; (80022a8 <HAL_DMA_Start_IT+0x490>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d027      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2b      	ldr	r2, [pc, #172]	; (80022ac <HAL_DMA_Start_IT+0x494>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d022      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a2a      	ldr	r2, [pc, #168]	; (80022b0 <HAL_DMA_Start_IT+0x498>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d01d      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a28      	ldr	r2, [pc, #160]	; (80022b4 <HAL_DMA_Start_IT+0x49c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d018      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a27      	ldr	r2, [pc, #156]	; (80022b8 <HAL_DMA_Start_IT+0x4a0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d013      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a25      	ldr	r2, [pc, #148]	; (80022bc <HAL_DMA_Start_IT+0x4a4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00e      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_DMA_Start_IT+0x4a8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d009      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <HAL_DMA_Start_IT+0x4ac>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_DMA_Start_IT+0x430>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <HAL_DMA_Start_IT+0x4b0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <HAL_DMA_Start_IT+0x442>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e012      	b.n	8002280 <HAL_DMA_Start_IT+0x468>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	e009      	b.n	8002280 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002272:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002280:	7dfb      	ldrb	r3, [r7, #23]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40020010 	.word	0x40020010
 8002290:	40020028 	.word	0x40020028
 8002294:	40020040 	.word	0x40020040
 8002298:	40020058 	.word	0x40020058
 800229c:	40020070 	.word	0x40020070
 80022a0:	40020088 	.word	0x40020088
 80022a4:	400200a0 	.word	0x400200a0
 80022a8:	400200b8 	.word	0x400200b8
 80022ac:	40020410 	.word	0x40020410
 80022b0:	40020428 	.word	0x40020428
 80022b4:	40020440 	.word	0x40020440
 80022b8:	40020458 	.word	0x40020458
 80022bc:	40020470 	.word	0x40020470
 80022c0:	40020488 	.word	0x40020488
 80022c4:	400204a0 	.word	0x400204a0
 80022c8:	400204b8 	.word	0x400204b8
 80022cc:	58025408 	.word	0x58025408
 80022d0:	5802541c 	.word	0x5802541c
 80022d4:	58025430 	.word	0x58025430
 80022d8:	58025444 	.word	0x58025444
 80022dc:	58025458 	.word	0x58025458
 80022e0:	5802546c 	.word	0x5802546c
 80022e4:	58025480 	.word	0x58025480
 80022e8:	58025494 	.word	0x58025494

080022ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff f80c 	bl	8001310 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e2dc      	b.n	80028be <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d008      	beq.n	8002322 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e2cd      	b.n	80028be <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a76      	ldr	r2, [pc, #472]	; (8002500 <HAL_DMA_Abort+0x214>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d04a      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a74      	ldr	r2, [pc, #464]	; (8002504 <HAL_DMA_Abort+0x218>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d045      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a73      	ldr	r2, [pc, #460]	; (8002508 <HAL_DMA_Abort+0x21c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d040      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a71      	ldr	r2, [pc, #452]	; (800250c <HAL_DMA_Abort+0x220>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d03b      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a70      	ldr	r2, [pc, #448]	; (8002510 <HAL_DMA_Abort+0x224>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d036      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a6e      	ldr	r2, [pc, #440]	; (8002514 <HAL_DMA_Abort+0x228>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d031      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6d      	ldr	r2, [pc, #436]	; (8002518 <HAL_DMA_Abort+0x22c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d02c      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a6b      	ldr	r2, [pc, #428]	; (800251c <HAL_DMA_Abort+0x230>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d027      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6a      	ldr	r2, [pc, #424]	; (8002520 <HAL_DMA_Abort+0x234>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d022      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a68      	ldr	r2, [pc, #416]	; (8002524 <HAL_DMA_Abort+0x238>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01d      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a67      	ldr	r2, [pc, #412]	; (8002528 <HAL_DMA_Abort+0x23c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d018      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a65      	ldr	r2, [pc, #404]	; (800252c <HAL_DMA_Abort+0x240>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a64      	ldr	r2, [pc, #400]	; (8002530 <HAL_DMA_Abort+0x244>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00e      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a62      	ldr	r2, [pc, #392]	; (8002534 <HAL_DMA_Abort+0x248>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d009      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a61      	ldr	r2, [pc, #388]	; (8002538 <HAL_DMA_Abort+0x24c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d004      	beq.n	80023c2 <HAL_DMA_Abort+0xd6>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5f      	ldr	r2, [pc, #380]	; (800253c <HAL_DMA_Abort+0x250>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d101      	bne.n	80023c6 <HAL_DMA_Abort+0xda>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_DMA_Abort+0xdc>
 80023c6:	2300      	movs	r3, #0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 021e 	bic.w	r2, r2, #30
 80023da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e00a      	b.n	800240a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 020e 	bic.w	r2, r2, #14
 8002402:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a3c      	ldr	r2, [pc, #240]	; (8002500 <HAL_DMA_Abort+0x214>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d072      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a3a      	ldr	r2, [pc, #232]	; (8002504 <HAL_DMA_Abort+0x218>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d06d      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a39      	ldr	r2, [pc, #228]	; (8002508 <HAL_DMA_Abort+0x21c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d068      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a37      	ldr	r2, [pc, #220]	; (800250c <HAL_DMA_Abort+0x220>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d063      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a36      	ldr	r2, [pc, #216]	; (8002510 <HAL_DMA_Abort+0x224>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d05e      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a34      	ldr	r2, [pc, #208]	; (8002514 <HAL_DMA_Abort+0x228>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d059      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a33      	ldr	r2, [pc, #204]	; (8002518 <HAL_DMA_Abort+0x22c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d054      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a31      	ldr	r2, [pc, #196]	; (800251c <HAL_DMA_Abort+0x230>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d04f      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a30      	ldr	r2, [pc, #192]	; (8002520 <HAL_DMA_Abort+0x234>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d04a      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2e      	ldr	r2, [pc, #184]	; (8002524 <HAL_DMA_Abort+0x238>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d045      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a2d      	ldr	r2, [pc, #180]	; (8002528 <HAL_DMA_Abort+0x23c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d040      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2b      	ldr	r2, [pc, #172]	; (800252c <HAL_DMA_Abort+0x240>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d03b      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a2a      	ldr	r2, [pc, #168]	; (8002530 <HAL_DMA_Abort+0x244>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d036      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a28      	ldr	r2, [pc, #160]	; (8002534 <HAL_DMA_Abort+0x248>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d031      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a27      	ldr	r2, [pc, #156]	; (8002538 <HAL_DMA_Abort+0x24c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d02c      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a25      	ldr	r2, [pc, #148]	; (800253c <HAL_DMA_Abort+0x250>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d027      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a24      	ldr	r2, [pc, #144]	; (8002540 <HAL_DMA_Abort+0x254>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d022      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a22      	ldr	r2, [pc, #136]	; (8002544 <HAL_DMA_Abort+0x258>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01d      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a21      	ldr	r2, [pc, #132]	; (8002548 <HAL_DMA_Abort+0x25c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d018      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1f      	ldr	r2, [pc, #124]	; (800254c <HAL_DMA_Abort+0x260>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1e      	ldr	r2, [pc, #120]	; (8002550 <HAL_DMA_Abort+0x264>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00e      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <HAL_DMA_Abort+0x268>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d009      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <HAL_DMA_Abort+0x26c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d004      	beq.n	80024fa <HAL_DMA_Abort+0x20e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a19      	ldr	r2, [pc, #100]	; (800255c <HAL_DMA_Abort+0x270>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d132      	bne.n	8002560 <HAL_DMA_Abort+0x274>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e031      	b.n	8002562 <HAL_DMA_Abort+0x276>
 80024fe:	bf00      	nop
 8002500:	40020010 	.word	0x40020010
 8002504:	40020028 	.word	0x40020028
 8002508:	40020040 	.word	0x40020040
 800250c:	40020058 	.word	0x40020058
 8002510:	40020070 	.word	0x40020070
 8002514:	40020088 	.word	0x40020088
 8002518:	400200a0 	.word	0x400200a0
 800251c:	400200b8 	.word	0x400200b8
 8002520:	40020410 	.word	0x40020410
 8002524:	40020428 	.word	0x40020428
 8002528:	40020440 	.word	0x40020440
 800252c:	40020458 	.word	0x40020458
 8002530:	40020470 	.word	0x40020470
 8002534:	40020488 	.word	0x40020488
 8002538:	400204a0 	.word	0x400204a0
 800253c:	400204b8 	.word	0x400204b8
 8002540:	58025408 	.word	0x58025408
 8002544:	5802541c 	.word	0x5802541c
 8002548:	58025430 	.word	0x58025430
 800254c:	58025444 	.word	0x58025444
 8002550:	58025458 	.word	0x58025458
 8002554:	5802546c 	.word	0x5802546c
 8002558:	58025480 	.word	0x58025480
 800255c:	58025494 	.word	0x58025494
 8002560:	2300      	movs	r3, #0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002574:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a6d      	ldr	r2, [pc, #436]	; (8002730 <HAL_DMA_Abort+0x444>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d04a      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a6b      	ldr	r2, [pc, #428]	; (8002734 <HAL_DMA_Abort+0x448>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d045      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6a      	ldr	r2, [pc, #424]	; (8002738 <HAL_DMA_Abort+0x44c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d040      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a68      	ldr	r2, [pc, #416]	; (800273c <HAL_DMA_Abort+0x450>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d03b      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a67      	ldr	r2, [pc, #412]	; (8002740 <HAL_DMA_Abort+0x454>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d036      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a65      	ldr	r2, [pc, #404]	; (8002744 <HAL_DMA_Abort+0x458>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d031      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a64      	ldr	r2, [pc, #400]	; (8002748 <HAL_DMA_Abort+0x45c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d02c      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a62      	ldr	r2, [pc, #392]	; (800274c <HAL_DMA_Abort+0x460>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d027      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a61      	ldr	r2, [pc, #388]	; (8002750 <HAL_DMA_Abort+0x464>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d022      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a5f      	ldr	r2, [pc, #380]	; (8002754 <HAL_DMA_Abort+0x468>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01d      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a5e      	ldr	r2, [pc, #376]	; (8002758 <HAL_DMA_Abort+0x46c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d018      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a5c      	ldr	r2, [pc, #368]	; (800275c <HAL_DMA_Abort+0x470>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a5b      	ldr	r2, [pc, #364]	; (8002760 <HAL_DMA_Abort+0x474>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a59      	ldr	r2, [pc, #356]	; (8002764 <HAL_DMA_Abort+0x478>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_DMA_Abort+0x47c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_DMA_Abort+0x32a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a56      	ldr	r2, [pc, #344]	; (800276c <HAL_DMA_Abort+0x480>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d108      	bne.n	8002628 <HAL_DMA_Abort+0x33c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e007      	b.n	8002638 <HAL_DMA_Abort+0x34c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002638:	e013      	b.n	8002662 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800263a:	f7fe fe69 	bl	8001310 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b05      	cmp	r3, #5
 8002646:	d90c      	bls.n	8002662 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2203      	movs	r2, #3
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e12d      	b.n	80028be <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e5      	bne.n	800263a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a2f      	ldr	r2, [pc, #188]	; (8002730 <HAL_DMA_Abort+0x444>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d04a      	beq.n	800270e <HAL_DMA_Abort+0x422>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a2d      	ldr	r2, [pc, #180]	; (8002734 <HAL_DMA_Abort+0x448>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d045      	beq.n	800270e <HAL_DMA_Abort+0x422>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a2c      	ldr	r2, [pc, #176]	; (8002738 <HAL_DMA_Abort+0x44c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d040      	beq.n	800270e <HAL_DMA_Abort+0x422>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2a      	ldr	r2, [pc, #168]	; (800273c <HAL_DMA_Abort+0x450>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d03b      	beq.n	800270e <HAL_DMA_Abort+0x422>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a29      	ldr	r2, [pc, #164]	; (8002740 <HAL_DMA_Abort+0x454>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d036      	beq.n	800270e <HAL_DMA_Abort+0x422>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a27      	ldr	r2, [pc, #156]	; (8002744 <HAL_DMA_Abort+0x458>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d031      	beq.n	800270e <HAL_DMA_Abort+0x422>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a26      	ldr	r2, [pc, #152]	; (8002748 <HAL_DMA_Abort+0x45c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d02c      	beq.n	800270e <HAL_DMA_Abort+0x422>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a24      	ldr	r2, [pc, #144]	; (800274c <HAL_DMA_Abort+0x460>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d027      	beq.n	800270e <HAL_DMA_Abort+0x422>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a23      	ldr	r2, [pc, #140]	; (8002750 <HAL_DMA_Abort+0x464>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d022      	beq.n	800270e <HAL_DMA_Abort+0x422>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a21      	ldr	r2, [pc, #132]	; (8002754 <HAL_DMA_Abort+0x468>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01d      	beq.n	800270e <HAL_DMA_Abort+0x422>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a20      	ldr	r2, [pc, #128]	; (8002758 <HAL_DMA_Abort+0x46c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d018      	beq.n	800270e <HAL_DMA_Abort+0x422>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1e      	ldr	r2, [pc, #120]	; (800275c <HAL_DMA_Abort+0x470>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_DMA_Abort+0x422>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <HAL_DMA_Abort+0x474>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00e      	beq.n	800270e <HAL_DMA_Abort+0x422>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <HAL_DMA_Abort+0x478>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d009      	beq.n	800270e <HAL_DMA_Abort+0x422>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <HAL_DMA_Abort+0x47c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d004      	beq.n	800270e <HAL_DMA_Abort+0x422>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a18      	ldr	r2, [pc, #96]	; (800276c <HAL_DMA_Abort+0x480>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_DMA_Abort+0x426>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_DMA_Abort+0x428>
 8002712:	2300      	movs	r3, #0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d02b      	beq.n	8002770 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	223f      	movs	r2, #63	; 0x3f
 8002728:	409a      	lsls	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	e02a      	b.n	8002786 <HAL_DMA_Abort+0x49a>
 8002730:	40020010 	.word	0x40020010
 8002734:	40020028 	.word	0x40020028
 8002738:	40020040 	.word	0x40020040
 800273c:	40020058 	.word	0x40020058
 8002740:	40020070 	.word	0x40020070
 8002744:	40020088 	.word	0x40020088
 8002748:	400200a0 	.word	0x400200a0
 800274c:	400200b8 	.word	0x400200b8
 8002750:	40020410 	.word	0x40020410
 8002754:	40020428 	.word	0x40020428
 8002758:	40020440 	.word	0x40020440
 800275c:	40020458 	.word	0x40020458
 8002760:	40020470 	.word	0x40020470
 8002764:	40020488 	.word	0x40020488
 8002768:	400204a0 	.word	0x400204a0
 800276c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002774:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2201      	movs	r2, #1
 8002780:	409a      	lsls	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a4f      	ldr	r2, [pc, #316]	; (80028c8 <HAL_DMA_Abort+0x5dc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d072      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a4d      	ldr	r2, [pc, #308]	; (80028cc <HAL_DMA_Abort+0x5e0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d06d      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a4c      	ldr	r2, [pc, #304]	; (80028d0 <HAL_DMA_Abort+0x5e4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d068      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a4a      	ldr	r2, [pc, #296]	; (80028d4 <HAL_DMA_Abort+0x5e8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d063      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a49      	ldr	r2, [pc, #292]	; (80028d8 <HAL_DMA_Abort+0x5ec>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d05e      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a47      	ldr	r2, [pc, #284]	; (80028dc <HAL_DMA_Abort+0x5f0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d059      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a46      	ldr	r2, [pc, #280]	; (80028e0 <HAL_DMA_Abort+0x5f4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d054      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a44      	ldr	r2, [pc, #272]	; (80028e4 <HAL_DMA_Abort+0x5f8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d04f      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a43      	ldr	r2, [pc, #268]	; (80028e8 <HAL_DMA_Abort+0x5fc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d04a      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a41      	ldr	r2, [pc, #260]	; (80028ec <HAL_DMA_Abort+0x600>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d045      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a40      	ldr	r2, [pc, #256]	; (80028f0 <HAL_DMA_Abort+0x604>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d040      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a3e      	ldr	r2, [pc, #248]	; (80028f4 <HAL_DMA_Abort+0x608>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d03b      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a3d      	ldr	r2, [pc, #244]	; (80028f8 <HAL_DMA_Abort+0x60c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d036      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <HAL_DMA_Abort+0x610>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d031      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <HAL_DMA_Abort+0x614>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d02c      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a38      	ldr	r2, [pc, #224]	; (8002904 <HAL_DMA_Abort+0x618>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d027      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a37      	ldr	r2, [pc, #220]	; (8002908 <HAL_DMA_Abort+0x61c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d022      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a35      	ldr	r2, [pc, #212]	; (800290c <HAL_DMA_Abort+0x620>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01d      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a34      	ldr	r2, [pc, #208]	; (8002910 <HAL_DMA_Abort+0x624>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d018      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a32      	ldr	r2, [pc, #200]	; (8002914 <HAL_DMA_Abort+0x628>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a31      	ldr	r2, [pc, #196]	; (8002918 <HAL_DMA_Abort+0x62c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00e      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2f      	ldr	r2, [pc, #188]	; (800291c <HAL_DMA_Abort+0x630>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d009      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2e      	ldr	r2, [pc, #184]	; (8002920 <HAL_DMA_Abort+0x634>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d004      	beq.n	8002876 <HAL_DMA_Abort+0x58a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <HAL_DMA_Abort+0x638>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_DMA_Abort+0x58e>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_DMA_Abort+0x590>
 800287a:	2300      	movs	r3, #0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002888:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00c      	beq.n	80028ac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800289c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028a0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028aa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40020010 	.word	0x40020010
 80028cc:	40020028 	.word	0x40020028
 80028d0:	40020040 	.word	0x40020040
 80028d4:	40020058 	.word	0x40020058
 80028d8:	40020070 	.word	0x40020070
 80028dc:	40020088 	.word	0x40020088
 80028e0:	400200a0 	.word	0x400200a0
 80028e4:	400200b8 	.word	0x400200b8
 80028e8:	40020410 	.word	0x40020410
 80028ec:	40020428 	.word	0x40020428
 80028f0:	40020440 	.word	0x40020440
 80028f4:	40020458 	.word	0x40020458
 80028f8:	40020470 	.word	0x40020470
 80028fc:	40020488 	.word	0x40020488
 8002900:	400204a0 	.word	0x400204a0
 8002904:	400204b8 	.word	0x400204b8
 8002908:	58025408 	.word	0x58025408
 800290c:	5802541c 	.word	0x5802541c
 8002910:	58025430 	.word	0x58025430
 8002914:	58025444 	.word	0x58025444
 8002918:	58025458 	.word	0x58025458
 800291c:	5802546c 	.word	0x5802546c
 8002920:	58025480 	.word	0x58025480
 8002924:	58025494 	.word	0x58025494

08002928 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e237      	b.n	8002daa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d004      	beq.n	8002950 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e22c      	b.n	8002daa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a5c      	ldr	r2, [pc, #368]	; (8002ac8 <HAL_DMA_Abort_IT+0x1a0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d04a      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a5b      	ldr	r2, [pc, #364]	; (8002acc <HAL_DMA_Abort_IT+0x1a4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d045      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a59      	ldr	r2, [pc, #356]	; (8002ad0 <HAL_DMA_Abort_IT+0x1a8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d040      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_DMA_Abort_IT+0x1ac>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d03b      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a56      	ldr	r2, [pc, #344]	; (8002ad8 <HAL_DMA_Abort_IT+0x1b0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d036      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a55      	ldr	r2, [pc, #340]	; (8002adc <HAL_DMA_Abort_IT+0x1b4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d031      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a53      	ldr	r2, [pc, #332]	; (8002ae0 <HAL_DMA_Abort_IT+0x1b8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02c      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a52      	ldr	r2, [pc, #328]	; (8002ae4 <HAL_DMA_Abort_IT+0x1bc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d027      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a50      	ldr	r2, [pc, #320]	; (8002ae8 <HAL_DMA_Abort_IT+0x1c0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d022      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a4f      	ldr	r2, [pc, #316]	; (8002aec <HAL_DMA_Abort_IT+0x1c4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d01d      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a4d      	ldr	r2, [pc, #308]	; (8002af0 <HAL_DMA_Abort_IT+0x1c8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d018      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a4c      	ldr	r2, [pc, #304]	; (8002af4 <HAL_DMA_Abort_IT+0x1cc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d013      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a4a      	ldr	r2, [pc, #296]	; (8002af8 <HAL_DMA_Abort_IT+0x1d0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00e      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a49      	ldr	r2, [pc, #292]	; (8002afc <HAL_DMA_Abort_IT+0x1d4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d009      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a47      	ldr	r2, [pc, #284]	; (8002b00 <HAL_DMA_Abort_IT+0x1d8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d004      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a46      	ldr	r2, [pc, #280]	; (8002b04 <HAL_DMA_Abort_IT+0x1dc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d101      	bne.n	80029f4 <HAL_DMA_Abort_IT+0xcc>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_DMA_Abort_IT+0xce>
 80029f4:	2300      	movs	r3, #0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8086 	beq.w	8002b08 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2204      	movs	r2, #4
 8002a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a2f      	ldr	r2, [pc, #188]	; (8002ac8 <HAL_DMA_Abort_IT+0x1a0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d04a      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a2e      	ldr	r2, [pc, #184]	; (8002acc <HAL_DMA_Abort_IT+0x1a4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d045      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a2c      	ldr	r2, [pc, #176]	; (8002ad0 <HAL_DMA_Abort_IT+0x1a8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d040      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a2b      	ldr	r2, [pc, #172]	; (8002ad4 <HAL_DMA_Abort_IT+0x1ac>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d03b      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a29      	ldr	r2, [pc, #164]	; (8002ad8 <HAL_DMA_Abort_IT+0x1b0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d036      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a28      	ldr	r2, [pc, #160]	; (8002adc <HAL_DMA_Abort_IT+0x1b4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d031      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a26      	ldr	r2, [pc, #152]	; (8002ae0 <HAL_DMA_Abort_IT+0x1b8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d02c      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a25      	ldr	r2, [pc, #148]	; (8002ae4 <HAL_DMA_Abort_IT+0x1bc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d027      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a23      	ldr	r2, [pc, #140]	; (8002ae8 <HAL_DMA_Abort_IT+0x1c0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d022      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a22      	ldr	r2, [pc, #136]	; (8002aec <HAL_DMA_Abort_IT+0x1c4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d01d      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a20      	ldr	r2, [pc, #128]	; (8002af0 <HAL_DMA_Abort_IT+0x1c8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d018      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <HAL_DMA_Abort_IT+0x1cc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d013      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <HAL_DMA_Abort_IT+0x1d0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00e      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <HAL_DMA_Abort_IT+0x1d4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d009      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <HAL_DMA_Abort_IT+0x1d8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x17c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a19      	ldr	r2, [pc, #100]	; (8002b04 <HAL_DMA_Abort_IT+0x1dc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d108      	bne.n	8002ab6 <HAL_DMA_Abort_IT+0x18e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	e178      	b.n	8002da8 <HAL_DMA_Abort_IT+0x480>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0201 	bic.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e16f      	b.n	8002da8 <HAL_DMA_Abort_IT+0x480>
 8002ac8:	40020010 	.word	0x40020010
 8002acc:	40020028 	.word	0x40020028
 8002ad0:	40020040 	.word	0x40020040
 8002ad4:	40020058 	.word	0x40020058
 8002ad8:	40020070 	.word	0x40020070
 8002adc:	40020088 	.word	0x40020088
 8002ae0:	400200a0 	.word	0x400200a0
 8002ae4:	400200b8 	.word	0x400200b8
 8002ae8:	40020410 	.word	0x40020410
 8002aec:	40020428 	.word	0x40020428
 8002af0:	40020440 	.word	0x40020440
 8002af4:	40020458 	.word	0x40020458
 8002af8:	40020470 	.word	0x40020470
 8002afc:	40020488 	.word	0x40020488
 8002b00:	400204a0 	.word	0x400204a0
 8002b04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 020e 	bic.w	r2, r2, #14
 8002b16:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a6c      	ldr	r2, [pc, #432]	; (8002cd0 <HAL_DMA_Abort_IT+0x3a8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d04a      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a6b      	ldr	r2, [pc, #428]	; (8002cd4 <HAL_DMA_Abort_IT+0x3ac>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d045      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a69      	ldr	r2, [pc, #420]	; (8002cd8 <HAL_DMA_Abort_IT+0x3b0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d040      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a68      	ldr	r2, [pc, #416]	; (8002cdc <HAL_DMA_Abort_IT+0x3b4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d03b      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a66      	ldr	r2, [pc, #408]	; (8002ce0 <HAL_DMA_Abort_IT+0x3b8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d036      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a65      	ldr	r2, [pc, #404]	; (8002ce4 <HAL_DMA_Abort_IT+0x3bc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d031      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a63      	ldr	r2, [pc, #396]	; (8002ce8 <HAL_DMA_Abort_IT+0x3c0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d02c      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a62      	ldr	r2, [pc, #392]	; (8002cec <HAL_DMA_Abort_IT+0x3c4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d027      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a60      	ldr	r2, [pc, #384]	; (8002cf0 <HAL_DMA_Abort_IT+0x3c8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d022      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a5f      	ldr	r2, [pc, #380]	; (8002cf4 <HAL_DMA_Abort_IT+0x3cc>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d01d      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a5d      	ldr	r2, [pc, #372]	; (8002cf8 <HAL_DMA_Abort_IT+0x3d0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d018      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a5c      	ldr	r2, [pc, #368]	; (8002cfc <HAL_DMA_Abort_IT+0x3d4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a5a      	ldr	r2, [pc, #360]	; (8002d00 <HAL_DMA_Abort_IT+0x3d8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00e      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a59      	ldr	r2, [pc, #356]	; (8002d04 <HAL_DMA_Abort_IT+0x3dc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a57      	ldr	r2, [pc, #348]	; (8002d08 <HAL_DMA_Abort_IT+0x3e0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x290>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a56      	ldr	r2, [pc, #344]	; (8002d0c <HAL_DMA_Abort_IT+0x3e4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d108      	bne.n	8002bca <HAL_DMA_Abort_IT+0x2a2>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e007      	b.n	8002bda <HAL_DMA_Abort_IT+0x2b2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a3c      	ldr	r2, [pc, #240]	; (8002cd0 <HAL_DMA_Abort_IT+0x3a8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d072      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a3a      	ldr	r2, [pc, #232]	; (8002cd4 <HAL_DMA_Abort_IT+0x3ac>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d06d      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a39      	ldr	r2, [pc, #228]	; (8002cd8 <HAL_DMA_Abort_IT+0x3b0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d068      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a37      	ldr	r2, [pc, #220]	; (8002cdc <HAL_DMA_Abort_IT+0x3b4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d063      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a36      	ldr	r2, [pc, #216]	; (8002ce0 <HAL_DMA_Abort_IT+0x3b8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d05e      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a34      	ldr	r2, [pc, #208]	; (8002ce4 <HAL_DMA_Abort_IT+0x3bc>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d059      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a33      	ldr	r2, [pc, #204]	; (8002ce8 <HAL_DMA_Abort_IT+0x3c0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d054      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a31      	ldr	r2, [pc, #196]	; (8002cec <HAL_DMA_Abort_IT+0x3c4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d04f      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a30      	ldr	r2, [pc, #192]	; (8002cf0 <HAL_DMA_Abort_IT+0x3c8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d04a      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2e      	ldr	r2, [pc, #184]	; (8002cf4 <HAL_DMA_Abort_IT+0x3cc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d045      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2d      	ldr	r2, [pc, #180]	; (8002cf8 <HAL_DMA_Abort_IT+0x3d0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d040      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2b      	ldr	r2, [pc, #172]	; (8002cfc <HAL_DMA_Abort_IT+0x3d4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d03b      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2a      	ldr	r2, [pc, #168]	; (8002d00 <HAL_DMA_Abort_IT+0x3d8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d036      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a28      	ldr	r2, [pc, #160]	; (8002d04 <HAL_DMA_Abort_IT+0x3dc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d031      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <HAL_DMA_Abort_IT+0x3e0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d02c      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <HAL_DMA_Abort_IT+0x3e4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d027      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a24      	ldr	r2, [pc, #144]	; (8002d10 <HAL_DMA_Abort_IT+0x3e8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_DMA_Abort_IT+0x3ec>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01d      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <HAL_DMA_Abort_IT+0x3f0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d018      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <HAL_DMA_Abort_IT+0x3f4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <HAL_DMA_Abort_IT+0x3f8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <HAL_DMA_Abort_IT+0x3fc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1b      	ldr	r2, [pc, #108]	; (8002d28 <HAL_DMA_Abort_IT+0x400>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_DMA_Abort_IT+0x3a2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <HAL_DMA_Abort_IT+0x404>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d132      	bne.n	8002d30 <HAL_DMA_Abort_IT+0x408>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e031      	b.n	8002d32 <HAL_DMA_Abort_IT+0x40a>
 8002cce:	bf00      	nop
 8002cd0:	40020010 	.word	0x40020010
 8002cd4:	40020028 	.word	0x40020028
 8002cd8:	40020040 	.word	0x40020040
 8002cdc:	40020058 	.word	0x40020058
 8002ce0:	40020070 	.word	0x40020070
 8002ce4:	40020088 	.word	0x40020088
 8002ce8:	400200a0 	.word	0x400200a0
 8002cec:	400200b8 	.word	0x400200b8
 8002cf0:	40020410 	.word	0x40020410
 8002cf4:	40020428 	.word	0x40020428
 8002cf8:	40020440 	.word	0x40020440
 8002cfc:	40020458 	.word	0x40020458
 8002d00:	40020470 	.word	0x40020470
 8002d04:	40020488 	.word	0x40020488
 8002d08:	400204a0 	.word	0x400204a0
 8002d0c:	400204b8 	.word	0x400204b8
 8002d10:	58025408 	.word	0x58025408
 8002d14:	5802541c 	.word	0x5802541c
 8002d18:	58025430 	.word	0x58025430
 8002d1c:	58025444 	.word	0x58025444
 8002d20:	58025458 	.word	0x58025458
 8002d24:	5802546c 	.word	0x5802546c
 8002d28:	58025480 	.word	0x58025480
 8002d2c:	58025494 	.word	0x58025494
 8002d30:	2300      	movs	r3, #0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d028      	beq.n	8002d88 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d44:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2201      	movs	r2, #1
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d64:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00c      	beq.n	8002d88 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d7c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d86:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop

08002db4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dc0:	4b67      	ldr	r3, [pc, #412]	; (8002f60 <HAL_DMA_IRQHandler+0x1ac>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a67      	ldr	r2, [pc, #412]	; (8002f64 <HAL_DMA_IRQHandler+0x1b0>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	0a9b      	lsrs	r3, r3, #10
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a5f      	ldr	r2, [pc, #380]	; (8002f68 <HAL_DMA_IRQHandler+0x1b4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d04a      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a5d      	ldr	r2, [pc, #372]	; (8002f6c <HAL_DMA_IRQHandler+0x1b8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d045      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a5c      	ldr	r2, [pc, #368]	; (8002f70 <HAL_DMA_IRQHandler+0x1bc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d040      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a5a      	ldr	r2, [pc, #360]	; (8002f74 <HAL_DMA_IRQHandler+0x1c0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d03b      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a59      	ldr	r2, [pc, #356]	; (8002f78 <HAL_DMA_IRQHandler+0x1c4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d036      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a57      	ldr	r2, [pc, #348]	; (8002f7c <HAL_DMA_IRQHandler+0x1c8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d031      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a56      	ldr	r2, [pc, #344]	; (8002f80 <HAL_DMA_IRQHandler+0x1cc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d02c      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a54      	ldr	r2, [pc, #336]	; (8002f84 <HAL_DMA_IRQHandler+0x1d0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d027      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a53      	ldr	r2, [pc, #332]	; (8002f88 <HAL_DMA_IRQHandler+0x1d4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d022      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a51      	ldr	r2, [pc, #324]	; (8002f8c <HAL_DMA_IRQHandler+0x1d8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01d      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a50      	ldr	r2, [pc, #320]	; (8002f90 <HAL_DMA_IRQHandler+0x1dc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d018      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a4e      	ldr	r2, [pc, #312]	; (8002f94 <HAL_DMA_IRQHandler+0x1e0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a4d      	ldr	r2, [pc, #308]	; (8002f98 <HAL_DMA_IRQHandler+0x1e4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00e      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a4b      	ldr	r2, [pc, #300]	; (8002f9c <HAL_DMA_IRQHandler+0x1e8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d009      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a4a      	ldr	r2, [pc, #296]	; (8002fa0 <HAL_DMA_IRQHandler+0x1ec>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d004      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xd2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a48      	ldr	r2, [pc, #288]	; (8002fa4 <HAL_DMA_IRQHandler+0x1f0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d101      	bne.n	8002e8a <HAL_DMA_IRQHandler+0xd6>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_DMA_IRQHandler+0xd8>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 842b 	beq.w	80036e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2208      	movs	r2, #8
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80a2 	beq.w	8002fec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2e      	ldr	r2, [pc, #184]	; (8002f68 <HAL_DMA_IRQHandler+0x1b4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d04a      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a2d      	ldr	r2, [pc, #180]	; (8002f6c <HAL_DMA_IRQHandler+0x1b8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d045      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <HAL_DMA_IRQHandler+0x1bc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d040      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <HAL_DMA_IRQHandler+0x1c0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d03b      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a28      	ldr	r2, [pc, #160]	; (8002f78 <HAL_DMA_IRQHandler+0x1c4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d036      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a27      	ldr	r2, [pc, #156]	; (8002f7c <HAL_DMA_IRQHandler+0x1c8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d031      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a25      	ldr	r2, [pc, #148]	; (8002f80 <HAL_DMA_IRQHandler+0x1cc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02c      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a24      	ldr	r2, [pc, #144]	; (8002f84 <HAL_DMA_IRQHandler+0x1d0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d027      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <HAL_DMA_IRQHandler+0x1d4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d022      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a21      	ldr	r2, [pc, #132]	; (8002f8c <HAL_DMA_IRQHandler+0x1d8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d01d      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <HAL_DMA_IRQHandler+0x1dc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d018      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <HAL_DMA_IRQHandler+0x1e0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d013      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_DMA_IRQHandler+0x1e4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00e      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1b      	ldr	r2, [pc, #108]	; (8002f9c <HAL_DMA_IRQHandler+0x1e8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_DMA_IRQHandler+0x1ec>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x194>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <HAL_DMA_IRQHandler+0x1f0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d12f      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0x1f4>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bf14      	ite	ne
 8002f56:	2301      	movne	r3, #1
 8002f58:	2300      	moveq	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	e02e      	b.n	8002fbc <HAL_DMA_IRQHandler+0x208>
 8002f5e:	bf00      	nop
 8002f60:	24000004 	.word	0x24000004
 8002f64:	1b4e81b5 	.word	0x1b4e81b5
 8002f68:	40020010 	.word	0x40020010
 8002f6c:	40020028 	.word	0x40020028
 8002f70:	40020040 	.word	0x40020040
 8002f74:	40020058 	.word	0x40020058
 8002f78:	40020070 	.word	0x40020070
 8002f7c:	40020088 	.word	0x40020088
 8002f80:	400200a0 	.word	0x400200a0
 8002f84:	400200b8 	.word	0x400200b8
 8002f88:	40020410 	.word	0x40020410
 8002f8c:	40020428 	.word	0x40020428
 8002f90:	40020440 	.word	0x40020440
 8002f94:	40020458 	.word	0x40020458
 8002f98:	40020470 	.word	0x40020470
 8002f9c:	40020488 	.word	0x40020488
 8002fa0:	400204a0 	.word	0x400204a0
 8002fa4:	400204b8 	.word	0x400204b8
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bf14      	ite	ne
 8002fb6:	2301      	movne	r3, #1
 8002fb8:	2300      	moveq	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d015      	beq.n	8002fec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2208      	movs	r2, #8
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d06e      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a69      	ldr	r2, [pc, #420]	; (80031ac <HAL_DMA_IRQHandler+0x3f8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d04a      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a67      	ldr	r2, [pc, #412]	; (80031b0 <HAL_DMA_IRQHandler+0x3fc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d045      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a66      	ldr	r2, [pc, #408]	; (80031b4 <HAL_DMA_IRQHandler+0x400>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d040      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a64      	ldr	r2, [pc, #400]	; (80031b8 <HAL_DMA_IRQHandler+0x404>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d03b      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a63      	ldr	r2, [pc, #396]	; (80031bc <HAL_DMA_IRQHandler+0x408>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d036      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a61      	ldr	r2, [pc, #388]	; (80031c0 <HAL_DMA_IRQHandler+0x40c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d031      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a60      	ldr	r2, [pc, #384]	; (80031c4 <HAL_DMA_IRQHandler+0x410>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d02c      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a5e      	ldr	r2, [pc, #376]	; (80031c8 <HAL_DMA_IRQHandler+0x414>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d027      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a5d      	ldr	r2, [pc, #372]	; (80031cc <HAL_DMA_IRQHandler+0x418>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d022      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a5b      	ldr	r2, [pc, #364]	; (80031d0 <HAL_DMA_IRQHandler+0x41c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01d      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5a      	ldr	r2, [pc, #360]	; (80031d4 <HAL_DMA_IRQHandler+0x420>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d018      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a58      	ldr	r2, [pc, #352]	; (80031d8 <HAL_DMA_IRQHandler+0x424>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a57      	ldr	r2, [pc, #348]	; (80031dc <HAL_DMA_IRQHandler+0x428>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00e      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a55      	ldr	r2, [pc, #340]	; (80031e0 <HAL_DMA_IRQHandler+0x42c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d009      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a54      	ldr	r2, [pc, #336]	; (80031e4 <HAL_DMA_IRQHandler+0x430>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2ee>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_DMA_IRQHandler+0x434>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d10a      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x304>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	e003      	b.n	80030c0 <HAL_DMA_IRQHandler+0x30c>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	2201      	movs	r2, #1
 80030ce:	409a      	lsls	r2, r3
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	f043 0202 	orr.w	r2, r3, #2
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	2204      	movs	r2, #4
 80030ea:	409a      	lsls	r2, r3
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 808f 	beq.w	8003214 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <HAL_DMA_IRQHandler+0x3f8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d04a      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2a      	ldr	r2, [pc, #168]	; (80031b0 <HAL_DMA_IRQHandler+0x3fc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d045      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <HAL_DMA_IRQHandler+0x400>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d040      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <HAL_DMA_IRQHandler+0x404>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d03b      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a26      	ldr	r2, [pc, #152]	; (80031bc <HAL_DMA_IRQHandler+0x408>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d036      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <HAL_DMA_IRQHandler+0x40c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d031      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a23      	ldr	r2, [pc, #140]	; (80031c4 <HAL_DMA_IRQHandler+0x410>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d02c      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a21      	ldr	r2, [pc, #132]	; (80031c8 <HAL_DMA_IRQHandler+0x414>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d027      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a20      	ldr	r2, [pc, #128]	; (80031cc <HAL_DMA_IRQHandler+0x418>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d022      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_DMA_IRQHandler+0x41c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01d      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_DMA_IRQHandler+0x420>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d018      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <HAL_DMA_IRQHandler+0x424>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <HAL_DMA_IRQHandler+0x428>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00e      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <HAL_DMA_IRQHandler+0x42c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d009      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <HAL_DMA_IRQHandler+0x430>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d004      	beq.n	8003196 <HAL_DMA_IRQHandler+0x3e2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <HAL_DMA_IRQHandler+0x434>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d12a      	bne.n	80031ec <HAL_DMA_IRQHandler+0x438>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e023      	b.n	80031f4 <HAL_DMA_IRQHandler+0x440>
 80031ac:	40020010 	.word	0x40020010
 80031b0:	40020028 	.word	0x40020028
 80031b4:	40020040 	.word	0x40020040
 80031b8:	40020058 	.word	0x40020058
 80031bc:	40020070 	.word	0x40020070
 80031c0:	40020088 	.word	0x40020088
 80031c4:	400200a0 	.word	0x400200a0
 80031c8:	400200b8 	.word	0x400200b8
 80031cc:	40020410 	.word	0x40020410
 80031d0:	40020428 	.word	0x40020428
 80031d4:	40020440 	.word	0x40020440
 80031d8:	40020458 	.word	0x40020458
 80031dc:	40020470 	.word	0x40020470
 80031e0:	40020488 	.word	0x40020488
 80031e4:	400204a0 	.word	0x400204a0
 80031e8:	400204b8 	.word	0x400204b8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2300      	movs	r3, #0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00d      	beq.n	8003214 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	2204      	movs	r2, #4
 8003202:	409a      	lsls	r2, r3
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	f043 0204 	orr.w	r2, r3, #4
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2210      	movs	r2, #16
 800321e:	409a      	lsls	r2, r3
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80a6 	beq.w	8003376 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a85      	ldr	r2, [pc, #532]	; (8003444 <HAL_DMA_IRQHandler+0x690>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d04a      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a83      	ldr	r2, [pc, #524]	; (8003448 <HAL_DMA_IRQHandler+0x694>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d045      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a82      	ldr	r2, [pc, #520]	; (800344c <HAL_DMA_IRQHandler+0x698>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d040      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a80      	ldr	r2, [pc, #512]	; (8003450 <HAL_DMA_IRQHandler+0x69c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d03b      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7f      	ldr	r2, [pc, #508]	; (8003454 <HAL_DMA_IRQHandler+0x6a0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d036      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a7d      	ldr	r2, [pc, #500]	; (8003458 <HAL_DMA_IRQHandler+0x6a4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d031      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7c      	ldr	r2, [pc, #496]	; (800345c <HAL_DMA_IRQHandler+0x6a8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d02c      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7a      	ldr	r2, [pc, #488]	; (8003460 <HAL_DMA_IRQHandler+0x6ac>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d027      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a79      	ldr	r2, [pc, #484]	; (8003464 <HAL_DMA_IRQHandler+0x6b0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a77      	ldr	r2, [pc, #476]	; (8003468 <HAL_DMA_IRQHandler+0x6b4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01d      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a76      	ldr	r2, [pc, #472]	; (800346c <HAL_DMA_IRQHandler+0x6b8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d018      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a74      	ldr	r2, [pc, #464]	; (8003470 <HAL_DMA_IRQHandler+0x6bc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a73      	ldr	r2, [pc, #460]	; (8003474 <HAL_DMA_IRQHandler+0x6c0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a71      	ldr	r2, [pc, #452]	; (8003478 <HAL_DMA_IRQHandler+0x6c4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a70      	ldr	r2, [pc, #448]	; (800347c <HAL_DMA_IRQHandler+0x6c8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_DMA_IRQHandler+0x516>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a6e      	ldr	r2, [pc, #440]	; (8003480 <HAL_DMA_IRQHandler+0x6cc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10a      	bne.n	80032e0 <HAL_DMA_IRQHandler+0x52c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e009      	b.n	80032f4 <HAL_DMA_IRQHandler+0x540>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bf14      	ite	ne
 80032ee:	2301      	movne	r3, #1
 80032f0:	2300      	moveq	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d03e      	beq.n	8003376 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	2210      	movs	r2, #16
 8003302:	409a      	lsls	r2, r3
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d018      	beq.n	8003348 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d108      	bne.n	8003336 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d024      	beq.n	8003376 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
 8003334:	e01f      	b.n	8003376 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01b      	beq.n	8003376 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
 8003346:	e016      	b.n	8003376 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d107      	bne.n	8003366 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0208 	bic.w	r2, r2, #8
 8003364:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2220      	movs	r2, #32
 8003380:	409a      	lsls	r2, r3
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8110 	beq.w	80035ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2c      	ldr	r2, [pc, #176]	; (8003444 <HAL_DMA_IRQHandler+0x690>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d04a      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_DMA_IRQHandler+0x694>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d045      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a29      	ldr	r2, [pc, #164]	; (800344c <HAL_DMA_IRQHandler+0x698>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d040      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a28      	ldr	r2, [pc, #160]	; (8003450 <HAL_DMA_IRQHandler+0x69c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d03b      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a26      	ldr	r2, [pc, #152]	; (8003454 <HAL_DMA_IRQHandler+0x6a0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d036      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a25      	ldr	r2, [pc, #148]	; (8003458 <HAL_DMA_IRQHandler+0x6a4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d031      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a23      	ldr	r2, [pc, #140]	; (800345c <HAL_DMA_IRQHandler+0x6a8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d02c      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a22      	ldr	r2, [pc, #136]	; (8003460 <HAL_DMA_IRQHandler+0x6ac>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d027      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a20      	ldr	r2, [pc, #128]	; (8003464 <HAL_DMA_IRQHandler+0x6b0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d022      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1f      	ldr	r2, [pc, #124]	; (8003468 <HAL_DMA_IRQHandler+0x6b4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d01d      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1d      	ldr	r2, [pc, #116]	; (800346c <HAL_DMA_IRQHandler+0x6b8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d018      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <HAL_DMA_IRQHandler+0x6bc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d013      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <HAL_DMA_IRQHandler+0x6c0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00e      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a19      	ldr	r2, [pc, #100]	; (8003478 <HAL_DMA_IRQHandler+0x6c4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d009      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a17      	ldr	r2, [pc, #92]	; (800347c <HAL_DMA_IRQHandler+0x6c8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_DMA_IRQHandler+0x678>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a16      	ldr	r2, [pc, #88]	; (8003480 <HAL_DMA_IRQHandler+0x6cc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d12b      	bne.n	8003484 <HAL_DMA_IRQHandler+0x6d0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	e02a      	b.n	8003498 <HAL_DMA_IRQHandler+0x6e4>
 8003442:	bf00      	nop
 8003444:	40020010 	.word	0x40020010
 8003448:	40020028 	.word	0x40020028
 800344c:	40020040 	.word	0x40020040
 8003450:	40020058 	.word	0x40020058
 8003454:	40020070 	.word	0x40020070
 8003458:	40020088 	.word	0x40020088
 800345c:	400200a0 	.word	0x400200a0
 8003460:	400200b8 	.word	0x400200b8
 8003464:	40020410 	.word	0x40020410
 8003468:	40020428 	.word	0x40020428
 800346c:	40020440 	.word	0x40020440
 8003470:	40020458 	.word	0x40020458
 8003474:	40020470 	.word	0x40020470
 8003478:	40020488 	.word	0x40020488
 800347c:	400204a0 	.word	0x400204a0
 8003480:	400204b8 	.word	0x400204b8
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	bf14      	ite	ne
 8003492:	2301      	movne	r3, #1
 8003494:	2300      	moveq	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8087 	beq.w	80035ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	2220      	movs	r2, #32
 80034a8:	409a      	lsls	r2, r3
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d139      	bne.n	800352e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0216 	bic.w	r2, r2, #22
 80034c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <HAL_DMA_IRQHandler+0x736>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0208 	bic.w	r2, r2, #8
 80034f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	223f      	movs	r2, #63	; 0x3f
 8003504:	409a      	lsls	r2, r3
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 834a 	beq.w	8003bb8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	4798      	blx	r3
          }
          return;
 800352c:	e344      	b.n	8003bb8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d018      	beq.n	800356e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d108      	bne.n	800355c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	2b00      	cmp	r3, #0
 8003550:	d02c      	beq.n	80035ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4798      	blx	r3
 800355a:	e027      	b.n	80035ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d023      	beq.n	80035ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
 800356c:	e01e      	b.n	80035ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10f      	bne.n	800359c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0210 	bic.w	r2, r2, #16
 800358a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8306 	beq.w	8003bc2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8088 	beq.w	80036d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2204      	movs	r2, #4
 80035c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a7a      	ldr	r2, [pc, #488]	; (80037bc <HAL_DMA_IRQHandler+0xa08>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d04a      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a79      	ldr	r2, [pc, #484]	; (80037c0 <HAL_DMA_IRQHandler+0xa0c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d045      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a77      	ldr	r2, [pc, #476]	; (80037c4 <HAL_DMA_IRQHandler+0xa10>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d040      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a76      	ldr	r2, [pc, #472]	; (80037c8 <HAL_DMA_IRQHandler+0xa14>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d03b      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a74      	ldr	r2, [pc, #464]	; (80037cc <HAL_DMA_IRQHandler+0xa18>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d036      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a73      	ldr	r2, [pc, #460]	; (80037d0 <HAL_DMA_IRQHandler+0xa1c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d031      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a71      	ldr	r2, [pc, #452]	; (80037d4 <HAL_DMA_IRQHandler+0xa20>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d02c      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a70      	ldr	r2, [pc, #448]	; (80037d8 <HAL_DMA_IRQHandler+0xa24>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d027      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6e      	ldr	r2, [pc, #440]	; (80037dc <HAL_DMA_IRQHandler+0xa28>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d022      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a6d      	ldr	r2, [pc, #436]	; (80037e0 <HAL_DMA_IRQHandler+0xa2c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d01d      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a6b      	ldr	r2, [pc, #428]	; (80037e4 <HAL_DMA_IRQHandler+0xa30>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d018      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6a      	ldr	r2, [pc, #424]	; (80037e8 <HAL_DMA_IRQHandler+0xa34>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d013      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a68      	ldr	r2, [pc, #416]	; (80037ec <HAL_DMA_IRQHandler+0xa38>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00e      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a67      	ldr	r2, [pc, #412]	; (80037f0 <HAL_DMA_IRQHandler+0xa3c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d009      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a65      	ldr	r2, [pc, #404]	; (80037f4 <HAL_DMA_IRQHandler+0xa40>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d004      	beq.n	800366c <HAL_DMA_IRQHandler+0x8b8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a64      	ldr	r2, [pc, #400]	; (80037f8 <HAL_DMA_IRQHandler+0xa44>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d108      	bne.n	800367e <HAL_DMA_IRQHandler+0x8ca>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e007      	b.n	800368e <HAL_DMA_IRQHandler+0x8da>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3301      	adds	r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003696:	429a      	cmp	r2, r3
 8003698:	d307      	bcc.n	80036aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f2      	bne.n	800368e <HAL_DMA_IRQHandler+0x8da>
 80036a8:	e000      	b.n	80036ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d004      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2203      	movs	r2, #3
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80036c2:	e003      	b.n	80036cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8272 	beq.w	8003bc2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
 80036e6:	e26c      	b.n	8003bc2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a43      	ldr	r2, [pc, #268]	; (80037fc <HAL_DMA_IRQHandler+0xa48>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d022      	beq.n	8003738 <HAL_DMA_IRQHandler+0x984>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a42      	ldr	r2, [pc, #264]	; (8003800 <HAL_DMA_IRQHandler+0xa4c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d01d      	beq.n	8003738 <HAL_DMA_IRQHandler+0x984>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a40      	ldr	r2, [pc, #256]	; (8003804 <HAL_DMA_IRQHandler+0xa50>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <HAL_DMA_IRQHandler+0x984>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a3f      	ldr	r2, [pc, #252]	; (8003808 <HAL_DMA_IRQHandler+0xa54>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <HAL_DMA_IRQHandler+0x984>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3d      	ldr	r2, [pc, #244]	; (800380c <HAL_DMA_IRQHandler+0xa58>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_DMA_IRQHandler+0x984>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3c      	ldr	r2, [pc, #240]	; (8003810 <HAL_DMA_IRQHandler+0xa5c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_DMA_IRQHandler+0x984>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3a      	ldr	r2, [pc, #232]	; (8003814 <HAL_DMA_IRQHandler+0xa60>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_DMA_IRQHandler+0x984>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a39      	ldr	r2, [pc, #228]	; (8003818 <HAL_DMA_IRQHandler+0xa64>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d101      	bne.n	800373c <HAL_DMA_IRQHandler+0x988>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_DMA_IRQHandler+0x98a>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 823f 	beq.w	8003bc2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2204      	movs	r2, #4
 8003756:	409a      	lsls	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80cd 	beq.w	80038fc <HAL_DMA_IRQHandler+0xb48>
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80c7 	beq.w	80038fc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2204      	movs	r2, #4
 8003778:	409a      	lsls	r2, r3
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d049      	beq.n	800381c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8210 	beq.w	8003bbc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037a4:	e20a      	b.n	8003bbc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8206 	beq.w	8003bbc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037b8:	e200      	b.n	8003bbc <HAL_DMA_IRQHandler+0xe08>
 80037ba:	bf00      	nop
 80037bc:	40020010 	.word	0x40020010
 80037c0:	40020028 	.word	0x40020028
 80037c4:	40020040 	.word	0x40020040
 80037c8:	40020058 	.word	0x40020058
 80037cc:	40020070 	.word	0x40020070
 80037d0:	40020088 	.word	0x40020088
 80037d4:	400200a0 	.word	0x400200a0
 80037d8:	400200b8 	.word	0x400200b8
 80037dc:	40020410 	.word	0x40020410
 80037e0:	40020428 	.word	0x40020428
 80037e4:	40020440 	.word	0x40020440
 80037e8:	40020458 	.word	0x40020458
 80037ec:	40020470 	.word	0x40020470
 80037f0:	40020488 	.word	0x40020488
 80037f4:	400204a0 	.word	0x400204a0
 80037f8:	400204b8 	.word	0x400204b8
 80037fc:	58025408 	.word	0x58025408
 8003800:	5802541c 	.word	0x5802541c
 8003804:	58025430 	.word	0x58025430
 8003808:	58025444 	.word	0x58025444
 800380c:	58025458 	.word	0x58025458
 8003810:	5802546c 	.word	0x5802546c
 8003814:	58025480 	.word	0x58025480
 8003818:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d160      	bne.n	80038e8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a7f      	ldr	r2, [pc, #508]	; (8003a28 <HAL_DMA_IRQHandler+0xc74>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d04a      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a7d      	ldr	r2, [pc, #500]	; (8003a2c <HAL_DMA_IRQHandler+0xc78>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d045      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a7c      	ldr	r2, [pc, #496]	; (8003a30 <HAL_DMA_IRQHandler+0xc7c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d040      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a7a      	ldr	r2, [pc, #488]	; (8003a34 <HAL_DMA_IRQHandler+0xc80>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d03b      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a79      	ldr	r2, [pc, #484]	; (8003a38 <HAL_DMA_IRQHandler+0xc84>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d036      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a77      	ldr	r2, [pc, #476]	; (8003a3c <HAL_DMA_IRQHandler+0xc88>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d031      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a76      	ldr	r2, [pc, #472]	; (8003a40 <HAL_DMA_IRQHandler+0xc8c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d02c      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a74      	ldr	r2, [pc, #464]	; (8003a44 <HAL_DMA_IRQHandler+0xc90>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d027      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a73      	ldr	r2, [pc, #460]	; (8003a48 <HAL_DMA_IRQHandler+0xc94>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d022      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a71      	ldr	r2, [pc, #452]	; (8003a4c <HAL_DMA_IRQHandler+0xc98>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01d      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a70      	ldr	r2, [pc, #448]	; (8003a50 <HAL_DMA_IRQHandler+0xc9c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d018      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a6e      	ldr	r2, [pc, #440]	; (8003a54 <HAL_DMA_IRQHandler+0xca0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a6d      	ldr	r2, [pc, #436]	; (8003a58 <HAL_DMA_IRQHandler+0xca4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a6b      	ldr	r2, [pc, #428]	; (8003a5c <HAL_DMA_IRQHandler+0xca8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d009      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6a      	ldr	r2, [pc, #424]	; (8003a60 <HAL_DMA_IRQHandler+0xcac>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xb12>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a68      	ldr	r2, [pc, #416]	; (8003a64 <HAL_DMA_IRQHandler+0xcb0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d108      	bne.n	80038d8 <HAL_DMA_IRQHandler+0xb24>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0208 	bic.w	r2, r2, #8
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e007      	b.n	80038e8 <HAL_DMA_IRQHandler+0xb34>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0204 	bic.w	r2, r2, #4
 80038e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8165 	beq.w	8003bbc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038fa:	e15f      	b.n	8003bbc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2202      	movs	r2, #2
 8003906:	409a      	lsls	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	4013      	ands	r3, r2
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80c5 	beq.w	8003a9c <HAL_DMA_IRQHandler+0xce8>
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80bf 	beq.w	8003a9c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2202      	movs	r2, #2
 8003928:	409a      	lsls	r2, r3
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d018      	beq.n	800396a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 813a 	beq.w	8003bc0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003954:	e134      	b.n	8003bc0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8130 	beq.w	8003bc0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003968:	e12a      	b.n	8003bc0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 8089 	bne.w	8003a88 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a2b      	ldr	r2, [pc, #172]	; (8003a28 <HAL_DMA_IRQHandler+0xc74>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d04a      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a29      	ldr	r2, [pc, #164]	; (8003a2c <HAL_DMA_IRQHandler+0xc78>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d045      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a28      	ldr	r2, [pc, #160]	; (8003a30 <HAL_DMA_IRQHandler+0xc7c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d040      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a26      	ldr	r2, [pc, #152]	; (8003a34 <HAL_DMA_IRQHandler+0xc80>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d03b      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a25      	ldr	r2, [pc, #148]	; (8003a38 <HAL_DMA_IRQHandler+0xc84>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d036      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a23      	ldr	r2, [pc, #140]	; (8003a3c <HAL_DMA_IRQHandler+0xc88>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d031      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <HAL_DMA_IRQHandler+0xc8c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d02c      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <HAL_DMA_IRQHandler+0xc90>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d027      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <HAL_DMA_IRQHandler+0xc94>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d022      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <HAL_DMA_IRQHandler+0xc98>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01d      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <HAL_DMA_IRQHandler+0xc9c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d018      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <HAL_DMA_IRQHandler+0xca0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <HAL_DMA_IRQHandler+0xca4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00e      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <HAL_DMA_IRQHandler+0xca8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d009      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a16      	ldr	r2, [pc, #88]	; (8003a60 <HAL_DMA_IRQHandler+0xcac>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d004      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xc62>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <HAL_DMA_IRQHandler+0xcb0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d128      	bne.n	8003a68 <HAL_DMA_IRQHandler+0xcb4>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0214 	bic.w	r2, r2, #20
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e027      	b.n	8003a78 <HAL_DMA_IRQHandler+0xcc4>
 8003a28:	40020010 	.word	0x40020010
 8003a2c:	40020028 	.word	0x40020028
 8003a30:	40020040 	.word	0x40020040
 8003a34:	40020058 	.word	0x40020058
 8003a38:	40020070 	.word	0x40020070
 8003a3c:	40020088 	.word	0x40020088
 8003a40:	400200a0 	.word	0x400200a0
 8003a44:	400200b8 	.word	0x400200b8
 8003a48:	40020410 	.word	0x40020410
 8003a4c:	40020428 	.word	0x40020428
 8003a50:	40020440 	.word	0x40020440
 8003a54:	40020458 	.word	0x40020458
 8003a58:	40020470 	.word	0x40020470
 8003a5c:	40020488 	.word	0x40020488
 8003a60:	400204a0 	.word	0x400204a0
 8003a64:	400204b8 	.word	0x400204b8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 020a 	bic.w	r2, r2, #10
 8003a76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8097 	beq.w	8003bc0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a9a:	e091      	b.n	8003bc0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8088 	beq.w	8003bc2 <HAL_DMA_IRQHandler+0xe0e>
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8082 	beq.w	8003bc2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a41      	ldr	r2, [pc, #260]	; (8003bc8 <HAL_DMA_IRQHandler+0xe14>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d04a      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a3f      	ldr	r2, [pc, #252]	; (8003bcc <HAL_DMA_IRQHandler+0xe18>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d045      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a3e      	ldr	r2, [pc, #248]	; (8003bd0 <HAL_DMA_IRQHandler+0xe1c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d040      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a3c      	ldr	r2, [pc, #240]	; (8003bd4 <HAL_DMA_IRQHandler+0xe20>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d03b      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a3b      	ldr	r2, [pc, #236]	; (8003bd8 <HAL_DMA_IRQHandler+0xe24>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d036      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a39      	ldr	r2, [pc, #228]	; (8003bdc <HAL_DMA_IRQHandler+0xe28>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d031      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a38      	ldr	r2, [pc, #224]	; (8003be0 <HAL_DMA_IRQHandler+0xe2c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d02c      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a36      	ldr	r2, [pc, #216]	; (8003be4 <HAL_DMA_IRQHandler+0xe30>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d027      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a35      	ldr	r2, [pc, #212]	; (8003be8 <HAL_DMA_IRQHandler+0xe34>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a33      	ldr	r2, [pc, #204]	; (8003bec <HAL_DMA_IRQHandler+0xe38>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a32      	ldr	r2, [pc, #200]	; (8003bf0 <HAL_DMA_IRQHandler+0xe3c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a30      	ldr	r2, [pc, #192]	; (8003bf4 <HAL_DMA_IRQHandler+0xe40>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2f      	ldr	r2, [pc, #188]	; (8003bf8 <HAL_DMA_IRQHandler+0xe44>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2d      	ldr	r2, [pc, #180]	; (8003bfc <HAL_DMA_IRQHandler+0xe48>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2c      	ldr	r2, [pc, #176]	; (8003c00 <HAL_DMA_IRQHandler+0xe4c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xdaa>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2a      	ldr	r2, [pc, #168]	; (8003c04 <HAL_DMA_IRQHandler+0xe50>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d108      	bne.n	8003b70 <HAL_DMA_IRQHandler+0xdbc>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 021c 	bic.w	r2, r2, #28
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e007      	b.n	8003b80 <HAL_DMA_IRQHandler+0xdcc>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 020e 	bic.w	r2, r2, #14
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	2201      	movs	r2, #1
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
 8003bb6:	e004      	b.n	8003bc2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003bb8:	bf00      	nop
 8003bba:	e002      	b.n	8003bc2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bc0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003bc2:	3728      	adds	r7, #40	; 0x28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40020010 	.word	0x40020010
 8003bcc:	40020028 	.word	0x40020028
 8003bd0:	40020040 	.word	0x40020040
 8003bd4:	40020058 	.word	0x40020058
 8003bd8:	40020070 	.word	0x40020070
 8003bdc:	40020088 	.word	0x40020088
 8003be0:	400200a0 	.word	0x400200a0
 8003be4:	400200b8 	.word	0x400200b8
 8003be8:	40020410 	.word	0x40020410
 8003bec:	40020428 	.word	0x40020428
 8003bf0:	40020440 	.word	0x40020440
 8003bf4:	40020458 	.word	0x40020458
 8003bf8:	40020470 	.word	0x40020470
 8003bfc:	40020488 	.word	0x40020488
 8003c00:	400204a0 	.word	0x400204a0
 8003c04:	400204b8 	.word	0x400204b8

08003c08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7f      	ldr	r2, [pc, #508]	; (8003e24 <DMA_SetConfig+0x21c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d072      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a7d      	ldr	r2, [pc, #500]	; (8003e28 <DMA_SetConfig+0x220>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d06d      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a7c      	ldr	r2, [pc, #496]	; (8003e2c <DMA_SetConfig+0x224>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d068      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a7a      	ldr	r2, [pc, #488]	; (8003e30 <DMA_SetConfig+0x228>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d063      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a79      	ldr	r2, [pc, #484]	; (8003e34 <DMA_SetConfig+0x22c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d05e      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a77      	ldr	r2, [pc, #476]	; (8003e38 <DMA_SetConfig+0x230>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d059      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a76      	ldr	r2, [pc, #472]	; (8003e3c <DMA_SetConfig+0x234>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d054      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a74      	ldr	r2, [pc, #464]	; (8003e40 <DMA_SetConfig+0x238>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d04f      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a73      	ldr	r2, [pc, #460]	; (8003e44 <DMA_SetConfig+0x23c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d04a      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a71      	ldr	r2, [pc, #452]	; (8003e48 <DMA_SetConfig+0x240>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d045      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a70      	ldr	r2, [pc, #448]	; (8003e4c <DMA_SetConfig+0x244>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d040      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a6e      	ldr	r2, [pc, #440]	; (8003e50 <DMA_SetConfig+0x248>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d03b      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6d      	ldr	r2, [pc, #436]	; (8003e54 <DMA_SetConfig+0x24c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d036      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a6b      	ldr	r2, [pc, #428]	; (8003e58 <DMA_SetConfig+0x250>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d031      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a6a      	ldr	r2, [pc, #424]	; (8003e5c <DMA_SetConfig+0x254>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d02c      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a68      	ldr	r2, [pc, #416]	; (8003e60 <DMA_SetConfig+0x258>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d027      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a67      	ldr	r2, [pc, #412]	; (8003e64 <DMA_SetConfig+0x25c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d022      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a65      	ldr	r2, [pc, #404]	; (8003e68 <DMA_SetConfig+0x260>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d01d      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a64      	ldr	r2, [pc, #400]	; (8003e6c <DMA_SetConfig+0x264>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d018      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a62      	ldr	r2, [pc, #392]	; (8003e70 <DMA_SetConfig+0x268>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a61      	ldr	r2, [pc, #388]	; (8003e74 <DMA_SetConfig+0x26c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00e      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a5f      	ldr	r2, [pc, #380]	; (8003e78 <DMA_SetConfig+0x270>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d009      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a5e      	ldr	r2, [pc, #376]	; (8003e7c <DMA_SetConfig+0x274>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d004      	beq.n	8003d12 <DMA_SetConfig+0x10a>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a5c      	ldr	r2, [pc, #368]	; (8003e80 <DMA_SetConfig+0x278>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d101      	bne.n	8003d16 <DMA_SetConfig+0x10e>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <DMA_SetConfig+0x110>
 8003d16:	2300      	movs	r3, #0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d24:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d36:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a39      	ldr	r2, [pc, #228]	; (8003e24 <DMA_SetConfig+0x21c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d04a      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a38      	ldr	r2, [pc, #224]	; (8003e28 <DMA_SetConfig+0x220>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d045      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a36      	ldr	r2, [pc, #216]	; (8003e2c <DMA_SetConfig+0x224>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d040      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a35      	ldr	r2, [pc, #212]	; (8003e30 <DMA_SetConfig+0x228>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d03b      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a33      	ldr	r2, [pc, #204]	; (8003e34 <DMA_SetConfig+0x22c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d036      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a32      	ldr	r2, [pc, #200]	; (8003e38 <DMA_SetConfig+0x230>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d031      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a30      	ldr	r2, [pc, #192]	; (8003e3c <DMA_SetConfig+0x234>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d02c      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2f      	ldr	r2, [pc, #188]	; (8003e40 <DMA_SetConfig+0x238>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d027      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <DMA_SetConfig+0x23c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d022      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2c      	ldr	r2, [pc, #176]	; (8003e48 <DMA_SetConfig+0x240>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d01d      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2a      	ldr	r2, [pc, #168]	; (8003e4c <DMA_SetConfig+0x244>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d018      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <DMA_SetConfig+0x248>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d013      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a27      	ldr	r2, [pc, #156]	; (8003e54 <DMA_SetConfig+0x24c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00e      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <DMA_SetConfig+0x250>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d009      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a24      	ldr	r2, [pc, #144]	; (8003e5c <DMA_SetConfig+0x254>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <DMA_SetConfig+0x1d0>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a23      	ldr	r2, [pc, #140]	; (8003e60 <DMA_SetConfig+0x258>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d101      	bne.n	8003ddc <DMA_SetConfig+0x1d4>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <DMA_SetConfig+0x1d6>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d059      	beq.n	8003e96 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	223f      	movs	r2, #63	; 0x3f
 8003dec:	409a      	lsls	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e00:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d138      	bne.n	8003e84 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e22:	e086      	b.n	8003f32 <DMA_SetConfig+0x32a>
 8003e24:	40020010 	.word	0x40020010
 8003e28:	40020028 	.word	0x40020028
 8003e2c:	40020040 	.word	0x40020040
 8003e30:	40020058 	.word	0x40020058
 8003e34:	40020070 	.word	0x40020070
 8003e38:	40020088 	.word	0x40020088
 8003e3c:	400200a0 	.word	0x400200a0
 8003e40:	400200b8 	.word	0x400200b8
 8003e44:	40020410 	.word	0x40020410
 8003e48:	40020428 	.word	0x40020428
 8003e4c:	40020440 	.word	0x40020440
 8003e50:	40020458 	.word	0x40020458
 8003e54:	40020470 	.word	0x40020470
 8003e58:	40020488 	.word	0x40020488
 8003e5c:	400204a0 	.word	0x400204a0
 8003e60:	400204b8 	.word	0x400204b8
 8003e64:	58025408 	.word	0x58025408
 8003e68:	5802541c 	.word	0x5802541c
 8003e6c:	58025430 	.word	0x58025430
 8003e70:	58025444 	.word	0x58025444
 8003e74:	58025458 	.word	0x58025458
 8003e78:	5802546c 	.word	0x5802546c
 8003e7c:	58025480 	.word	0x58025480
 8003e80:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]
}
 8003e94:	e04d      	b.n	8003f32 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a29      	ldr	r2, [pc, #164]	; (8003f40 <DMA_SetConfig+0x338>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d022      	beq.n	8003ee6 <DMA_SetConfig+0x2de>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <DMA_SetConfig+0x33c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01d      	beq.n	8003ee6 <DMA_SetConfig+0x2de>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <DMA_SetConfig+0x340>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d018      	beq.n	8003ee6 <DMA_SetConfig+0x2de>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a24      	ldr	r2, [pc, #144]	; (8003f4c <DMA_SetConfig+0x344>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <DMA_SetConfig+0x2de>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a23      	ldr	r2, [pc, #140]	; (8003f50 <DMA_SetConfig+0x348>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <DMA_SetConfig+0x2de>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <DMA_SetConfig+0x34c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <DMA_SetConfig+0x2de>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a20      	ldr	r2, [pc, #128]	; (8003f58 <DMA_SetConfig+0x350>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <DMA_SetConfig+0x2de>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1e      	ldr	r2, [pc, #120]	; (8003f5c <DMA_SetConfig+0x354>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d101      	bne.n	8003eea <DMA_SetConfig+0x2e2>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <DMA_SetConfig+0x2e4>
 8003eea:	2300      	movs	r3, #0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d020      	beq.n	8003f32 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	2201      	movs	r2, #1
 8003efa:	409a      	lsls	r2, r3
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d108      	bne.n	8003f22 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	60da      	str	r2, [r3, #12]
}
 8003f20:	e007      	b.n	8003f32 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	60da      	str	r2, [r3, #12]
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	58025408 	.word	0x58025408
 8003f44:	5802541c 	.word	0x5802541c
 8003f48:	58025430 	.word	0x58025430
 8003f4c:	58025444 	.word	0x58025444
 8003f50:	58025458 	.word	0x58025458
 8003f54:	5802546c 	.word	0x5802546c
 8003f58:	58025480 	.word	0x58025480
 8003f5c:	58025494 	.word	0x58025494

08003f60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a42      	ldr	r2, [pc, #264]	; (8004078 <DMA_CalcBaseAndBitshift+0x118>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d04a      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a41      	ldr	r2, [pc, #260]	; (800407c <DMA_CalcBaseAndBitshift+0x11c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d045      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a3f      	ldr	r2, [pc, #252]	; (8004080 <DMA_CalcBaseAndBitshift+0x120>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d040      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a3e      	ldr	r2, [pc, #248]	; (8004084 <DMA_CalcBaseAndBitshift+0x124>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d03b      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a3c      	ldr	r2, [pc, #240]	; (8004088 <DMA_CalcBaseAndBitshift+0x128>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d036      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a3b      	ldr	r2, [pc, #236]	; (800408c <DMA_CalcBaseAndBitshift+0x12c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d031      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a39      	ldr	r2, [pc, #228]	; (8004090 <DMA_CalcBaseAndBitshift+0x130>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d02c      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a38      	ldr	r2, [pc, #224]	; (8004094 <DMA_CalcBaseAndBitshift+0x134>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d027      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a36      	ldr	r2, [pc, #216]	; (8004098 <DMA_CalcBaseAndBitshift+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d022      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a35      	ldr	r2, [pc, #212]	; (800409c <DMA_CalcBaseAndBitshift+0x13c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d01d      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a33      	ldr	r2, [pc, #204]	; (80040a0 <DMA_CalcBaseAndBitshift+0x140>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d018      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a32      	ldr	r2, [pc, #200]	; (80040a4 <DMA_CalcBaseAndBitshift+0x144>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a30      	ldr	r2, [pc, #192]	; (80040a8 <DMA_CalcBaseAndBitshift+0x148>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a2f      	ldr	r2, [pc, #188]	; (80040ac <DMA_CalcBaseAndBitshift+0x14c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d009      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a2d      	ldr	r2, [pc, #180]	; (80040b0 <DMA_CalcBaseAndBitshift+0x150>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xa8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a2c      	ldr	r2, [pc, #176]	; (80040b4 <DMA_CalcBaseAndBitshift+0x154>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <DMA_CalcBaseAndBitshift+0xac>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <DMA_CalcBaseAndBitshift+0xae>
 800400c:	2300      	movs	r3, #0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d024      	beq.n	800405c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	3b10      	subs	r3, #16
 800401a:	4a27      	ldr	r2, [pc, #156]	; (80040b8 <DMA_CalcBaseAndBitshift+0x158>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	4a24      	ldr	r2, [pc, #144]	; (80040bc <DMA_CalcBaseAndBitshift+0x15c>)
 800402c:	5cd3      	ldrb	r3, [r2, r3]
 800402e:	461a      	mov	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d908      	bls.n	800404c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <DMA_CalcBaseAndBitshift+0x160>)
 8004042:	4013      	ands	r3, r2
 8004044:	1d1a      	adds	r2, r3, #4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	659a      	str	r2, [r3, #88]	; 0x58
 800404a:	e00d      	b.n	8004068 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <DMA_CalcBaseAndBitshift+0x160>)
 8004054:	4013      	ands	r3, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6593      	str	r3, [r2, #88]	; 0x58
 800405a:	e005      	b.n	8004068 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40020010 	.word	0x40020010
 800407c:	40020028 	.word	0x40020028
 8004080:	40020040 	.word	0x40020040
 8004084:	40020058 	.word	0x40020058
 8004088:	40020070 	.word	0x40020070
 800408c:	40020088 	.word	0x40020088
 8004090:	400200a0 	.word	0x400200a0
 8004094:	400200b8 	.word	0x400200b8
 8004098:	40020410 	.word	0x40020410
 800409c:	40020428 	.word	0x40020428
 80040a0:	40020440 	.word	0x40020440
 80040a4:	40020458 	.word	0x40020458
 80040a8:	40020470 	.word	0x40020470
 80040ac:	40020488 	.word	0x40020488
 80040b0:	400204a0 	.word	0x400204a0
 80040b4:	400204b8 	.word	0x400204b8
 80040b8:	aaaaaaab 	.word	0xaaaaaaab
 80040bc:	08009cc4 	.word	0x08009cc4
 80040c0:	fffffc00 	.word	0xfffffc00

080040c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d120      	bne.n	800411a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d858      	bhi.n	8004192 <DMA_CheckFifoParam+0xce>
 80040e0:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <DMA_CheckFifoParam+0x24>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	0800410b 	.word	0x0800410b
 80040f0:	080040f9 	.word	0x080040f9
 80040f4:	08004193 	.word	0x08004193
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d048      	beq.n	8004196 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004108:	e045      	b.n	8004196 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004112:	d142      	bne.n	800419a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004118:	e03f      	b.n	800419a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004122:	d123      	bne.n	800416c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	2b03      	cmp	r3, #3
 800412a:	d838      	bhi.n	800419e <DMA_CheckFifoParam+0xda>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <DMA_CheckFifoParam+0x70>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004145 	.word	0x08004145
 8004138:	0800414b 	.word	0x0800414b
 800413c:	08004145 	.word	0x08004145
 8004140:	0800415d 	.word	0x0800415d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
        break;
 8004148:	e030      	b.n	80041ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d025      	beq.n	80041a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800415a:	e022      	b.n	80041a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004164:	d11f      	bne.n	80041a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800416a:	e01c      	b.n	80041a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	2b02      	cmp	r3, #2
 8004172:	d902      	bls.n	800417a <DMA_CheckFifoParam+0xb6>
 8004174:	2b03      	cmp	r3, #3
 8004176:	d003      	beq.n	8004180 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004178:	e018      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	73fb      	strb	r3, [r7, #15]
        break;
 800417e:	e015      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
    break;
 8004190:	e00b      	b.n	80041aa <DMA_CheckFifoParam+0xe6>
        break;
 8004192:	bf00      	nop
 8004194:	e00a      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
        break;
 8004196:	bf00      	nop
 8004198:	e008      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
        break;
 800419a:	bf00      	nop
 800419c:	e006      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
        break;
 800419e:	bf00      	nop
 80041a0:	e004      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
        break;
 80041a2:	bf00      	nop
 80041a4:	e002      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
        break;
 80041a6:	bf00      	nop
 80041a8:	e000      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
    break;
 80041aa:	bf00      	nop
    }
  }

  return status;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop

080041bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a38      	ldr	r2, [pc, #224]	; (80042b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d022      	beq.n	800421a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a36      	ldr	r2, [pc, #216]	; (80042b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d01d      	beq.n	800421a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a35      	ldr	r2, [pc, #212]	; (80042b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d018      	beq.n	800421a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a33      	ldr	r2, [pc, #204]	; (80042bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a32      	ldr	r2, [pc, #200]	; (80042c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a30      	ldr	r2, [pc, #192]	; (80042c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d009      	beq.n	800421a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2f      	ldr	r2, [pc, #188]	; (80042c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a2d      	ldr	r2, [pc, #180]	; (80042cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d101      	bne.n	800421e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800421e:	2300      	movs	r3, #0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01a      	beq.n	800425a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	3b08      	subs	r3, #8
 800422c:	4a28      	ldr	r2, [pc, #160]	; (80042d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	091b      	lsrs	r3, r3, #4
 8004234:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	461a      	mov	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a24      	ldr	r2, [pc, #144]	; (80042d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004248:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2201      	movs	r2, #1
 8004252:	409a      	lsls	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004258:	e024      	b.n	80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	3b10      	subs	r3, #16
 8004262:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d806      	bhi.n	8004282 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a1b      	ldr	r2, [pc, #108]	; (80042e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d902      	bls.n	8004282 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3308      	adds	r3, #8
 8004280:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	461a      	mov	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a16      	ldr	r2, [pc, #88]	; (80042ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004294:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	2201      	movs	r2, #1
 800429e:	409a      	lsls	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	58025408 	.word	0x58025408
 80042b4:	5802541c 	.word	0x5802541c
 80042b8:	58025430 	.word	0x58025430
 80042bc:	58025444 	.word	0x58025444
 80042c0:	58025458 	.word	0x58025458
 80042c4:	5802546c 	.word	0x5802546c
 80042c8:	58025480 	.word	0x58025480
 80042cc:	58025494 	.word	0x58025494
 80042d0:	cccccccd 	.word	0xcccccccd
 80042d4:	16009600 	.word	0x16009600
 80042d8:	58025880 	.word	0x58025880
 80042dc:	aaaaaaab 	.word	0xaaaaaaab
 80042e0:	400204b8 	.word	0x400204b8
 80042e4:	4002040f 	.word	0x4002040f
 80042e8:	10008200 	.word	0x10008200
 80042ec:	40020880 	.word	0x40020880

080042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04a      	beq.n	800439c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d847      	bhi.n	800439c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a25      	ldr	r2, [pc, #148]	; (80043a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d022      	beq.n	800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a24      	ldr	r2, [pc, #144]	; (80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d01d      	beq.n	800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a22      	ldr	r2, [pc, #136]	; (80043b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d018      	beq.n	800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1f      	ldr	r2, [pc, #124]	; (80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00e      	beq.n	800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1e      	ldr	r2, [pc, #120]	; (80043bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d009      	beq.n	800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1c      	ldr	r2, [pc, #112]	; (80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1b      	ldr	r2, [pc, #108]	; (80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d101      	bne.n	8004360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004360:	2300      	movs	r3, #0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a15      	ldr	r2, [pc, #84]	; (80043cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004378:	671a      	str	r2, [r3, #112]	; 0x70
 800437a:	e009      	b.n	8004390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	461a      	mov	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a11      	ldr	r2, [pc, #68]	; (80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800438e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3b01      	subs	r3, #1
 8004394:	2201      	movs	r2, #1
 8004396:	409a      	lsls	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	58025408 	.word	0x58025408
 80043ac:	5802541c 	.word	0x5802541c
 80043b0:	58025430 	.word	0x58025430
 80043b4:	58025444 	.word	0x58025444
 80043b8:	58025458 	.word	0x58025458
 80043bc:	5802546c 	.word	0x5802546c
 80043c0:	58025480 	.word	0x58025480
 80043c4:	58025494 	.word	0x58025494
 80043c8:	1600963f 	.word	0x1600963f
 80043cc:	58025940 	.word	0x58025940
 80043d0:	1000823f 	.word	0x1000823f
 80043d4:	40020940 	.word	0x40020940

080043d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80043e6:	4b86      	ldr	r3, [pc, #536]	; (8004600 <HAL_GPIO_Init+0x228>)
 80043e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043ea:	e18c      	b.n	8004706 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	2101      	movs	r1, #1
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	fa01 f303 	lsl.w	r3, r1, r3
 80043f8:	4013      	ands	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 817e 	beq.w	8004700 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d005      	beq.n	800441c <HAL_GPIO_Init+0x44>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d130      	bne.n	800447e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	2203      	movs	r2, #3
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004452:	2201      	movs	r2, #1
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	f003 0201 	and.w	r2, r3, #1
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b03      	cmp	r3, #3
 8004488:	d017      	beq.n	80044ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	2203      	movs	r2, #3
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	43db      	mvns	r3, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4013      	ands	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d123      	bne.n	800450e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	08da      	lsrs	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3208      	adds	r2, #8
 80044ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	220f      	movs	r2, #15
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	08da      	lsrs	r2, r3, #3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3208      	adds	r2, #8
 8004508:	69b9      	ldr	r1, [r7, #24]
 800450a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	2203      	movs	r2, #3
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4013      	ands	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 0203 	and.w	r2, r3, #3
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80d8 	beq.w	8004700 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004550:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <HAL_GPIO_Init+0x22c>)
 8004552:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004556:	4a2b      	ldr	r2, [pc, #172]	; (8004604 <HAL_GPIO_Init+0x22c>)
 8004558:	f043 0302 	orr.w	r3, r3, #2
 800455c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004560:	4b28      	ldr	r3, [pc, #160]	; (8004604 <HAL_GPIO_Init+0x22c>)
 8004562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800456e:	4a26      	ldr	r2, [pc, #152]	; (8004608 <HAL_GPIO_Init+0x230>)
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	3302      	adds	r3, #2
 8004576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800457a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	220f      	movs	r2, #15
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a1d      	ldr	r2, [pc, #116]	; (800460c <HAL_GPIO_Init+0x234>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d04a      	beq.n	8004630 <HAL_GPIO_Init+0x258>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <HAL_GPIO_Init+0x238>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d02b      	beq.n	80045fa <HAL_GPIO_Init+0x222>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <HAL_GPIO_Init+0x23c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d025      	beq.n	80045f6 <HAL_GPIO_Init+0x21e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1a      	ldr	r2, [pc, #104]	; (8004618 <HAL_GPIO_Init+0x240>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01f      	beq.n	80045f2 <HAL_GPIO_Init+0x21a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a19      	ldr	r2, [pc, #100]	; (800461c <HAL_GPIO_Init+0x244>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d019      	beq.n	80045ee <HAL_GPIO_Init+0x216>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_GPIO_Init+0x248>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_GPIO_Init+0x212>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a17      	ldr	r2, [pc, #92]	; (8004624 <HAL_GPIO_Init+0x24c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00d      	beq.n	80045e6 <HAL_GPIO_Init+0x20e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a16      	ldr	r2, [pc, #88]	; (8004628 <HAL_GPIO_Init+0x250>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d007      	beq.n	80045e2 <HAL_GPIO_Init+0x20a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a15      	ldr	r2, [pc, #84]	; (800462c <HAL_GPIO_Init+0x254>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d101      	bne.n	80045de <HAL_GPIO_Init+0x206>
 80045da:	2309      	movs	r3, #9
 80045dc:	e029      	b.n	8004632 <HAL_GPIO_Init+0x25a>
 80045de:	230a      	movs	r3, #10
 80045e0:	e027      	b.n	8004632 <HAL_GPIO_Init+0x25a>
 80045e2:	2307      	movs	r3, #7
 80045e4:	e025      	b.n	8004632 <HAL_GPIO_Init+0x25a>
 80045e6:	2306      	movs	r3, #6
 80045e8:	e023      	b.n	8004632 <HAL_GPIO_Init+0x25a>
 80045ea:	2305      	movs	r3, #5
 80045ec:	e021      	b.n	8004632 <HAL_GPIO_Init+0x25a>
 80045ee:	2304      	movs	r3, #4
 80045f0:	e01f      	b.n	8004632 <HAL_GPIO_Init+0x25a>
 80045f2:	2303      	movs	r3, #3
 80045f4:	e01d      	b.n	8004632 <HAL_GPIO_Init+0x25a>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e01b      	b.n	8004632 <HAL_GPIO_Init+0x25a>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e019      	b.n	8004632 <HAL_GPIO_Init+0x25a>
 80045fe:	bf00      	nop
 8004600:	58000080 	.word	0x58000080
 8004604:	58024400 	.word	0x58024400
 8004608:	58000400 	.word	0x58000400
 800460c:	58020000 	.word	0x58020000
 8004610:	58020400 	.word	0x58020400
 8004614:	58020800 	.word	0x58020800
 8004618:	58020c00 	.word	0x58020c00
 800461c:	58021000 	.word	0x58021000
 8004620:	58021400 	.word	0x58021400
 8004624:	58021800 	.word	0x58021800
 8004628:	58021c00 	.word	0x58021c00
 800462c:	58022400 	.word	0x58022400
 8004630:	2300      	movs	r3, #0
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	f002 0203 	and.w	r2, r2, #3
 8004638:	0092      	lsls	r2, r2, #2
 800463a:	4093      	lsls	r3, r2
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004642:	4938      	ldr	r1, [pc, #224]	; (8004724 <HAL_GPIO_Init+0x34c>)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	089b      	lsrs	r3, r3, #2
 8004648:	3302      	adds	r3, #2
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800467e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	43db      	mvns	r3, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4013      	ands	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80046a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	3301      	adds	r3, #1
 8004704:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	f47f ae6b 	bne.w	80043ec <HAL_GPIO_Init+0x14>
  }
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	3724      	adds	r7, #36	; 0x24
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	58000400 	.word	0x58000400

08004728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	807b      	strh	r3, [r7, #2]
 8004734:	4613      	mov	r3, r2
 8004736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004738:	787b      	ldrb	r3, [r7, #1]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800473e:	887a      	ldrh	r2, [r7, #2]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004744:	e003      	b.n	800474e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004746:	887b      	ldrh	r3, [r7, #2]
 8004748:	041a      	lsls	r2, r3, #16
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	619a      	str	r2, [r3, #24]
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800475a:	b480      	push	{r7}
 800475c:	b085      	sub	sp, #20
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	460b      	mov	r3, r1
 8004764:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800476c:	887a      	ldrh	r2, [r7, #2]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4013      	ands	r3, r2
 8004772:	041a      	lsls	r2, r3, #16
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	43d9      	mvns	r1, r3
 8004778:	887b      	ldrh	r3, [r7, #2]
 800477a:	400b      	ands	r3, r1
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	619a      	str	r2, [r3, #24]
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004798:	4b19      	ldr	r3, [pc, #100]	; (8004800 <HAL_PWREx_ConfigSupply+0x70>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d00a      	beq.n	80047ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80047a4:	4b16      	ldr	r3, [pc, #88]	; (8004800 <HAL_PWREx_ConfigSupply+0x70>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d001      	beq.n	80047b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e01f      	b.n	80047f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e01d      	b.n	80047f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <HAL_PWREx_ConfigSupply+0x70>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f023 0207 	bic.w	r2, r3, #7
 80047c2:	490f      	ldr	r1, [pc, #60]	; (8004800 <HAL_PWREx_ConfigSupply+0x70>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80047ca:	f7fc fda1 	bl	8001310 <HAL_GetTick>
 80047ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047d0:	e009      	b.n	80047e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80047d2:	f7fc fd9d 	bl	8001310 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047e0:	d901      	bls.n	80047e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e007      	b.n	80047f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_PWREx_ConfigSupply+0x70>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f2:	d1ee      	bne.n	80047d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	58024800 	.word	0x58024800

08004804 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08c      	sub	sp, #48	; 0x30
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e39d      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 8087 	beq.w	8004932 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004824:	4b88      	ldr	r3, [pc, #544]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800482e:	4b86      	ldr	r3, [pc, #536]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004836:	2b10      	cmp	r3, #16
 8004838:	d007      	beq.n	800484a <HAL_RCC_OscConfig+0x46>
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	2b18      	cmp	r3, #24
 800483e:	d110      	bne.n	8004862 <HAL_RCC_OscConfig+0x5e>
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d10b      	bne.n	8004862 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484a:	4b7f      	ldr	r3, [pc, #508]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d06c      	beq.n	8004930 <HAL_RCC_OscConfig+0x12c>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d168      	bne.n	8004930 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e377      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486a:	d106      	bne.n	800487a <HAL_RCC_OscConfig+0x76>
 800486c:	4b76      	ldr	r3, [pc, #472]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a75      	ldr	r2, [pc, #468]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	e02e      	b.n	80048d8 <HAL_RCC_OscConfig+0xd4>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0x98>
 8004882:	4b71      	ldr	r3, [pc, #452]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a70      	ldr	r2, [pc, #448]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b6e      	ldr	r3, [pc, #440]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6d      	ldr	r2, [pc, #436]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e01d      	b.n	80048d8 <HAL_RCC_OscConfig+0xd4>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCC_OscConfig+0xbc>
 80048a6:	4b68      	ldr	r3, [pc, #416]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a67      	ldr	r2, [pc, #412]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80048ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	4b65      	ldr	r3, [pc, #404]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a64      	ldr	r2, [pc, #400]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e00b      	b.n	80048d8 <HAL_RCC_OscConfig+0xd4>
 80048c0:	4b61      	ldr	r3, [pc, #388]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a60      	ldr	r2, [pc, #384]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80048c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	4b5e      	ldr	r3, [pc, #376]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a5d      	ldr	r2, [pc, #372]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80048d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d013      	beq.n	8004908 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fc fd16 	bl	8001310 <HAL_GetTick>
 80048e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e8:	f7fc fd12 	bl	8001310 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b64      	cmp	r3, #100	; 0x64
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e32b      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048fa:	4b53      	ldr	r3, [pc, #332]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0xe4>
 8004906:	e014      	b.n	8004932 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fc fd02 	bl	8001310 <HAL_GetTick>
 800490c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004910:	f7fc fcfe 	bl	8001310 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b64      	cmp	r3, #100	; 0x64
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e317      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004922:	4b49      	ldr	r3, [pc, #292]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x10c>
 800492e:	e000      	b.n	8004932 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 808c 	beq.w	8004a58 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004940:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004948:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800494a:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <HAL_RCC_OscConfig+0x162>
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	2b18      	cmp	r3, #24
 800495a:	d137      	bne.n	80049cc <HAL_RCC_OscConfig+0x1c8>
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d132      	bne.n	80049cc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004966:	4b38      	ldr	r3, [pc, #224]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_RCC_OscConfig+0x17a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e2e9      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800497e:	4b32      	ldr	r3, [pc, #200]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 0219 	bic.w	r2, r3, #25
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	492f      	ldr	r1, [pc, #188]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 800498c:	4313      	orrs	r3, r2
 800498e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004990:	f7fc fcbe 	bl	8001310 <HAL_GetTick>
 8004994:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004998:	f7fc fcba 	bl	8001310 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e2d3      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049aa:	4b27      	ldr	r3, [pc, #156]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b6:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	061b      	lsls	r3, r3, #24
 80049c4:	4920      	ldr	r1, [pc, #128]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ca:	e045      	b.n	8004a58 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d026      	beq.n	8004a22 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049d4:	4b1c      	ldr	r3, [pc, #112]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f023 0219 	bic.w	r2, r3, #25
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4919      	ldr	r1, [pc, #100]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e6:	f7fc fc93 	bl	8001310 <HAL_GetTick>
 80049ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ee:	f7fc fc8f 	bl	8001310 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e2a8      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0c:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	061b      	lsls	r3, r3, #24
 8004a1a:	490b      	ldr	r1, [pc, #44]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]
 8004a20:	e01a      	b.n	8004a58 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <HAL_RCC_OscConfig+0x244>)
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2e:	f7fc fc6f 	bl	8001310 <HAL_GetTick>
 8004a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a34:	e00a      	b.n	8004a4c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a36:	f7fc fc6b 	bl	8001310 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d903      	bls.n	8004a4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e284      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
 8004a48:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a4c:	4b96      	ldr	r3, [pc, #600]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1ee      	bne.n	8004a36 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d06a      	beq.n	8004b3a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a64:	4b90      	ldr	r3, [pc, #576]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a6c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a6e:	4b8e      	ldr	r3, [pc, #568]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d007      	beq.n	8004a8a <HAL_RCC_OscConfig+0x286>
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b18      	cmp	r3, #24
 8004a7e:	d11b      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x2b4>
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d116      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a8a:	4b87      	ldr	r3, [pc, #540]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x29e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	2b80      	cmp	r3, #128	; 0x80
 8004a9c:	d001      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e257      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004aa2:	4b81      	ldr	r3, [pc, #516]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	061b      	lsls	r3, r3, #24
 8004ab0:	497d      	ldr	r1, [pc, #500]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ab6:	e040      	b.n	8004b3a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d023      	beq.n	8004b08 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ac0:	4b79      	ldr	r3, [pc, #484]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a78      	ldr	r2, [pc, #480]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fc fc20 	bl	8001310 <HAL_GetTick>
 8004ad0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004ad4:	f7fc fc1c 	bl	8001310 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e235      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ae6:	4b70      	ldr	r3, [pc, #448]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004af2:	4b6d      	ldr	r3, [pc, #436]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	061b      	lsls	r3, r3, #24
 8004b00:	4969      	ldr	r1, [pc, #420]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60cb      	str	r3, [r1, #12]
 8004b06:	e018      	b.n	8004b3a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b08:	4b67      	ldr	r3, [pc, #412]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a66      	ldr	r2, [pc, #408]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fc fbfc 	bl	8001310 <HAL_GetTick>
 8004b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004b1c:	f7fc fbf8 	bl	8001310 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e211      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b2e:	4b5e      	ldr	r3, [pc, #376]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d036      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d019      	beq.n	8004b82 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b4e:	4b56      	ldr	r3, [pc, #344]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b52:	4a55      	ldr	r2, [pc, #340]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5a:	f7fc fbd9 	bl	8001310 <HAL_GetTick>
 8004b5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b62:	f7fc fbd5 	bl	8001310 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e1ee      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b74:	4b4c      	ldr	r3, [pc, #304]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCC_OscConfig+0x35e>
 8004b80:	e018      	b.n	8004bb4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b82:	4b49      	ldr	r3, [pc, #292]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b86:	4a48      	ldr	r2, [pc, #288]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8e:	f7fc fbbf 	bl	8001310 <HAL_GetTick>
 8004b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b96:	f7fc fbbb 	bl	8001310 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e1d4      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ba8:	4b3f      	ldr	r3, [pc, #252]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d036      	beq.n	8004c2e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d019      	beq.n	8004bfc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bc8:	4b37      	ldr	r3, [pc, #220]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a36      	ldr	r2, [pc, #216]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004bce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bd4:	f7fc fb9c 	bl	8001310 <HAL_GetTick>
 8004bd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004bdc:	f7fc fb98 	bl	8001310 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e1b1      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004bee:	4b2e      	ldr	r3, [pc, #184]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0x3d8>
 8004bfa:	e018      	b.n	8004c2e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bfc:	4b2a      	ldr	r3, [pc, #168]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a29      	ldr	r2, [pc, #164]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c08:	f7fc fb82 	bl	8001310 <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004c10:	f7fc fb7e 	bl	8001310 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e197      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c22:	4b21      	ldr	r3, [pc, #132]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8086 	beq.w	8004d48 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c3c:	4b1b      	ldr	r3, [pc, #108]	; (8004cac <HAL_RCC_OscConfig+0x4a8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1a      	ldr	r2, [pc, #104]	; (8004cac <HAL_RCC_OscConfig+0x4a8>)
 8004c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c48:	f7fc fb62 	bl	8001310 <HAL_GetTick>
 8004c4c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c50:	f7fc fb5e 	bl	8001310 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e177      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c62:	4b12      	ldr	r3, [pc, #72]	; (8004cac <HAL_RCC_OscConfig+0x4a8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d106      	bne.n	8004c84 <HAL_RCC_OscConfig+0x480>
 8004c76:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	6713      	str	r3, [r2, #112]	; 0x70
 8004c82:	e032      	b.n	8004cea <HAL_RCC_OscConfig+0x4e6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d111      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4ac>
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	4a05      	ldr	r2, [pc, #20]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004c92:	f023 0301 	bic.w	r3, r3, #1
 8004c96:	6713      	str	r3, [r2, #112]	; 0x70
 8004c98:	4b03      	ldr	r3, [pc, #12]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	4a02      	ldr	r2, [pc, #8]	; (8004ca8 <HAL_RCC_OscConfig+0x4a4>)
 8004c9e:	f023 0304 	bic.w	r3, r3, #4
 8004ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca4:	e021      	b.n	8004cea <HAL_RCC_OscConfig+0x4e6>
 8004ca6:	bf00      	nop
 8004ca8:	58024400 	.word	0x58024400
 8004cac:	58024800 	.word	0x58024800
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	d10c      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x4ce>
 8004cb8:	4b83      	ldr	r3, [pc, #524]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	4a82      	ldr	r2, [pc, #520]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004cbe:	f043 0304 	orr.w	r3, r3, #4
 8004cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc4:	4b80      	ldr	r3, [pc, #512]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	4a7f      	ldr	r2, [pc, #508]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd0:	e00b      	b.n	8004cea <HAL_RCC_OscConfig+0x4e6>
 8004cd2:	4b7d      	ldr	r3, [pc, #500]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	4a7c      	ldr	r2, [pc, #496]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
 8004cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cde:	4b7a      	ldr	r3, [pc, #488]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	4a79      	ldr	r2, [pc, #484]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004ce4:	f023 0304 	bic.w	r3, r3, #4
 8004ce8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d015      	beq.n	8004d1e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf2:	f7fc fb0d 	bl	8001310 <HAL_GetTick>
 8004cf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cf8:	e00a      	b.n	8004d10 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cfa:	f7fc fb09 	bl	8001310 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e120      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d10:	4b6d      	ldr	r3, [pc, #436]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0ee      	beq.n	8004cfa <HAL_RCC_OscConfig+0x4f6>
 8004d1c:	e014      	b.n	8004d48 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1e:	f7fc faf7 	bl	8001310 <HAL_GetTick>
 8004d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d24:	e00a      	b.n	8004d3c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d26:	f7fc faf3 	bl	8001310 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e10a      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d3c:	4b62      	ldr	r3, [pc, #392]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1ee      	bne.n	8004d26 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80ff 	beq.w	8004f50 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d52:	4b5d      	ldr	r3, [pc, #372]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d5a:	2b18      	cmp	r3, #24
 8004d5c:	f000 80ba 	beq.w	8004ed4 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	f040 8095 	bne.w	8004e94 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6a:	4b57      	ldr	r3, [pc, #348]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a56      	ldr	r2, [pc, #344]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d76:	f7fc facb 	bl	8001310 <HAL_GetTick>
 8004d7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7e:	f7fc fac7 	bl	8001310 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0e0      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d90:	4b4d      	ldr	r3, [pc, #308]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1f0      	bne.n	8004d7e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d9c:	4b4a      	ldr	r3, [pc, #296]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004da0:	4b4a      	ldr	r3, [pc, #296]	; (8004ecc <HAL_RCC_OscConfig+0x6c8>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004dac:	0112      	lsls	r2, r2, #4
 8004dae:	430a      	orrs	r2, r1
 8004db0:	4945      	ldr	r1, [pc, #276]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	628b      	str	r3, [r1, #40]	; 0x28
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	025b      	lsls	r3, r3, #9
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	041b      	lsls	r3, r3, #16
 8004dd4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	3b01      	subs	r3, #1
 8004de0:	061b      	lsls	r3, r3, #24
 8004de2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004de6:	4938      	ldr	r1, [pc, #224]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004dec:	4b36      	ldr	r3, [pc, #216]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	4a35      	ldr	r2, [pc, #212]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004df8:	4b33      	ldr	r3, [pc, #204]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfc:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <HAL_RCC_OscConfig+0x6cc>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e04:	00d2      	lsls	r2, r2, #3
 8004e06:	4930      	ldr	r1, [pc, #192]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e0c:	4b2e      	ldr	r3, [pc, #184]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	f023 020c 	bic.w	r2, r3, #12
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	492b      	ldr	r1, [pc, #172]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	f023 0202 	bic.w	r2, r3, #2
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	4927      	ldr	r1, [pc, #156]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e30:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e3c:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	4a21      	ldr	r2, [pc, #132]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e48:	4b1f      	ldr	r3, [pc, #124]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	4a1e      	ldr	r2, [pc, #120]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004e54:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e60:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a18      	ldr	r2, [pc, #96]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6c:	f7fc fa50 	bl	8001310 <HAL_GetTick>
 8004e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e74:	f7fc fa4c 	bl	8001310 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e065      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f0      	beq.n	8004e74 <HAL_RCC_OscConfig+0x670>
 8004e92:	e05d      	b.n	8004f50 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e94:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a0b      	ldr	r2, [pc, #44]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea0:	f7fc fa36 	bl	8001310 <HAL_GetTick>
 8004ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea8:	f7fc fa32 	bl	8001310 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e04b      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eba:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <HAL_RCC_OscConfig+0x6c4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x6a4>
 8004ec6:	e043      	b.n	8004f50 <HAL_RCC_OscConfig+0x74c>
 8004ec8:	58024400 	.word	0x58024400
 8004ecc:	fffffc0c 	.word	0xfffffc0c
 8004ed0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ed4:	4b21      	ldr	r3, [pc, #132]	; (8004f5c <HAL_RCC_OscConfig+0x758>)
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004eda:	4b20      	ldr	r3, [pc, #128]	; (8004f5c <HAL_RCC_OscConfig+0x758>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d031      	beq.n	8004f4c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f003 0203 	and.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d12a      	bne.n	8004f4c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d122      	bne.n	8004f4c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d11a      	bne.n	8004f4c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	0a5b      	lsrs	r3, r3, #9
 8004f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d111      	bne.n	8004f4c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	0c1b      	lsrs	r3, r3, #16
 8004f2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d108      	bne.n	8004f4c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	0e1b      	lsrs	r3, r3, #24
 8004f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3730      	adds	r7, #48	; 0x30
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	58024400 	.word	0x58024400

08004f60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e19c      	b.n	80052ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f74:	4b8a      	ldr	r3, [pc, #552]	; (80051a0 <HAL_RCC_ClockConfig+0x240>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d910      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f82:	4b87      	ldr	r3, [pc, #540]	; (80051a0 <HAL_RCC_ClockConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 020f 	bic.w	r2, r3, #15
 8004f8a:	4985      	ldr	r1, [pc, #532]	; (80051a0 <HAL_RCC_ClockConfig+0x240>)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	4b83      	ldr	r3, [pc, #524]	; (80051a0 <HAL_RCC_ClockConfig+0x240>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e184      	b.n	80052ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d010      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	4b7b      	ldr	r3, [pc, #492]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d908      	bls.n	8004fd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fc0:	4b78      	ldr	r3, [pc, #480]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	4975      	ldr	r1, [pc, #468]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d010      	beq.n	8005000 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695a      	ldr	r2, [r3, #20]
 8004fe2:	4b70      	ldr	r3, [pc, #448]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d908      	bls.n	8005000 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fee:	4b6d      	ldr	r3, [pc, #436]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	496a      	ldr	r1, [pc, #424]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	d010      	beq.n	800502e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699a      	ldr	r2, [r3, #24]
 8005010:	4b64      	ldr	r3, [pc, #400]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005018:	429a      	cmp	r2, r3
 800501a:	d908      	bls.n	800502e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800501c:	4b61      	ldr	r3, [pc, #388]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	495e      	ldr	r1, [pc, #376]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 800502a:	4313      	orrs	r3, r2
 800502c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d010      	beq.n	800505c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	4b59      	ldr	r3, [pc, #356]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005046:	429a      	cmp	r2, r3
 8005048:	d908      	bls.n	800505c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800504a:	4b56      	ldr	r3, [pc, #344]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	4953      	ldr	r1, [pc, #332]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8005058:	4313      	orrs	r3, r2
 800505a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d010      	beq.n	800508a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	4b4d      	ldr	r3, [pc, #308]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	429a      	cmp	r2, r3
 8005076:	d908      	bls.n	800508a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005078:	4b4a      	ldr	r3, [pc, #296]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	f023 020f 	bic.w	r2, r3, #15
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	4947      	ldr	r1, [pc, #284]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8005086:	4313      	orrs	r3, r2
 8005088:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d055      	beq.n	8005142 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005096:	4b43      	ldr	r3, [pc, #268]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4940      	ldr	r1, [pc, #256]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d107      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050b0:	4b3c      	ldr	r3, [pc, #240]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d121      	bne.n	8005100 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0f6      	b.n	80052ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050c8:	4b36      	ldr	r3, [pc, #216]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d115      	bne.n	8005100 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0ea      	b.n	80052ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d107      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050e0:	4b30      	ldr	r3, [pc, #192]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0de      	b.n	80052ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050f0:	4b2c      	ldr	r3, [pc, #176]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0d6      	b.n	80052ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005100:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f023 0207 	bic.w	r2, r3, #7
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	4925      	ldr	r1, [pc, #148]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 800510e:	4313      	orrs	r3, r2
 8005110:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005112:	f7fc f8fd 	bl	8001310 <HAL_GetTick>
 8005116:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005118:	e00a      	b.n	8005130 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800511a:	f7fc f8f9 	bl	8001310 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	; 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e0be      	b.n	80052ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005130:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	429a      	cmp	r2, r3
 8005140:	d1eb      	bne.n	800511a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d010      	beq.n	8005170 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	429a      	cmp	r2, r3
 800515c:	d208      	bcs.n	8005170 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f023 020f 	bic.w	r2, r3, #15
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	490e      	ldr	r1, [pc, #56]	; (80051a4 <HAL_RCC_ClockConfig+0x244>)
 800516c:	4313      	orrs	r3, r2
 800516e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <HAL_RCC_ClockConfig+0x240>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d214      	bcs.n	80051a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <HAL_RCC_ClockConfig+0x240>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 020f 	bic.w	r2, r3, #15
 8005186:	4906      	ldr	r1, [pc, #24]	; (80051a0 <HAL_RCC_ClockConfig+0x240>)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	4313      	orrs	r3, r2
 800518c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800518e:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <HAL_RCC_ClockConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d005      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e086      	b.n	80052ae <HAL_RCC_ClockConfig+0x34e>
 80051a0:	52002000 	.word	0x52002000
 80051a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d010      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	4b3f      	ldr	r3, [pc, #252]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d208      	bcs.n	80051d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051c4:	4b3c      	ldr	r3, [pc, #240]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	4939      	ldr	r1, [pc, #228]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d010      	beq.n	8005204 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	4b34      	ldr	r3, [pc, #208]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d208      	bcs.n	8005204 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051f2:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	492e      	ldr	r1, [pc, #184]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 8005200:	4313      	orrs	r3, r2
 8005202:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d010      	beq.n	8005232 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	4b28      	ldr	r3, [pc, #160]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800521c:	429a      	cmp	r2, r3
 800521e:	d208      	bcs.n	8005232 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005220:	4b25      	ldr	r3, [pc, #148]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	4922      	ldr	r1, [pc, #136]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 800522e:	4313      	orrs	r3, r2
 8005230:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	d010      	beq.n	8005260 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69da      	ldr	r2, [r3, #28]
 8005242:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800524a:	429a      	cmp	r2, r3
 800524c:	d208      	bcs.n	8005260 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800524e:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	4917      	ldr	r1, [pc, #92]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 800525c:	4313      	orrs	r3, r2
 800525e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005260:	f000 f834 	bl	80052cc <HAL_RCC_GetSysClockFreq>
 8005264:	4602      	mov	r2, r0
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	0a1b      	lsrs	r3, r3, #8
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	4912      	ldr	r1, [pc, #72]	; (80052bc <HAL_RCC_ClockConfig+0x35c>)
 8005272:	5ccb      	ldrb	r3, [r1, r3]
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
 800527c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800527e:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <HAL_RCC_ClockConfig+0x358>)
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	4a0d      	ldr	r2, [pc, #52]	; (80052bc <HAL_RCC_ClockConfig+0x35c>)
 8005288:	5cd3      	ldrb	r3, [r2, r3]
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	fa22 f303 	lsr.w	r3, r2, r3
 8005294:	4a0a      	ldr	r2, [pc, #40]	; (80052c0 <HAL_RCC_ClockConfig+0x360>)
 8005296:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005298:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <HAL_RCC_ClockConfig+0x364>)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800529e:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <HAL_RCC_ClockConfig+0x368>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fb ffea 	bl	800127c <HAL_InitTick>
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	58024400 	.word	0x58024400
 80052bc:	08009cb4 	.word	0x08009cb4
 80052c0:	24000008 	.word	0x24000008
 80052c4:	24000004 	.word	0x24000004
 80052c8:	2400000c 	.word	0x2400000c

080052cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b089      	sub	sp, #36	; 0x24
 80052d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052d2:	4bb3      	ldr	r3, [pc, #716]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052da:	2b18      	cmp	r3, #24
 80052dc:	f200 8155 	bhi.w	800558a <HAL_RCC_GetSysClockFreq+0x2be>
 80052e0:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	0800534d 	.word	0x0800534d
 80052ec:	0800558b 	.word	0x0800558b
 80052f0:	0800558b 	.word	0x0800558b
 80052f4:	0800558b 	.word	0x0800558b
 80052f8:	0800558b 	.word	0x0800558b
 80052fc:	0800558b 	.word	0x0800558b
 8005300:	0800558b 	.word	0x0800558b
 8005304:	0800558b 	.word	0x0800558b
 8005308:	08005373 	.word	0x08005373
 800530c:	0800558b 	.word	0x0800558b
 8005310:	0800558b 	.word	0x0800558b
 8005314:	0800558b 	.word	0x0800558b
 8005318:	0800558b 	.word	0x0800558b
 800531c:	0800558b 	.word	0x0800558b
 8005320:	0800558b 	.word	0x0800558b
 8005324:	0800558b 	.word	0x0800558b
 8005328:	08005379 	.word	0x08005379
 800532c:	0800558b 	.word	0x0800558b
 8005330:	0800558b 	.word	0x0800558b
 8005334:	0800558b 	.word	0x0800558b
 8005338:	0800558b 	.word	0x0800558b
 800533c:	0800558b 	.word	0x0800558b
 8005340:	0800558b 	.word	0x0800558b
 8005344:	0800558b 	.word	0x0800558b
 8005348:	0800537f 	.word	0x0800537f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800534c:	4b94      	ldr	r3, [pc, #592]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d009      	beq.n	800536c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005358:	4b91      	ldr	r3, [pc, #580]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	08db      	lsrs	r3, r3, #3
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	4a90      	ldr	r2, [pc, #576]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800536a:	e111      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800536c:	4b8d      	ldr	r3, [pc, #564]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800536e:	61bb      	str	r3, [r7, #24]
    break;
 8005370:	e10e      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005372:	4b8d      	ldr	r3, [pc, #564]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005374:	61bb      	str	r3, [r7, #24]
    break;
 8005376:	e10b      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005378:	4b8c      	ldr	r3, [pc, #560]	; (80055ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800537a:	61bb      	str	r3, [r7, #24]
    break;
 800537c:	e108      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800537e:	4b88      	ldr	r3, [pc, #544]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005388:	4b85      	ldr	r3, [pc, #532]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005392:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005394:	4b82      	ldr	r3, [pc, #520]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800539e:	4b80      	ldr	r3, [pc, #512]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a2:	08db      	lsrs	r3, r3, #3
 80053a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	fb02 f303 	mul.w	r3, r2, r3
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 80e1 	beq.w	8005584 <HAL_RCC_GetSysClockFreq+0x2b8>
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	f000 8083 	beq.w	80054d0 <HAL_RCC_GetSysClockFreq+0x204>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	f200 80a1 	bhi.w	8005514 <HAL_RCC_GetSysClockFreq+0x248>
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_RCC_GetSysClockFreq+0x114>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d056      	beq.n	800548c <HAL_RCC_GetSysClockFreq+0x1c0>
 80053de:	e099      	b.n	8005514 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053e0:	4b6f      	ldr	r3, [pc, #444]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d02d      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053ec:	4b6c      	ldr	r3, [pc, #432]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	08db      	lsrs	r3, r3, #3
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	4a6b      	ldr	r2, [pc, #428]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
 80053fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005416:	4b62      	ldr	r3, [pc, #392]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005426:	ed97 6a02 	vldr	s12, [r7, #8]
 800542a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80055b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800542e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005446:	e087      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	eddf 6a58 	vldr	s13, [pc, #352]	; 80055b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545a:	4b51      	ldr	r3, [pc, #324]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546a:	ed97 6a02 	vldr	s12, [r7, #8]
 800546e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80055b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800547e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800548a:	e065      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	eddf 6a48 	vldr	s13, [pc, #288]	; 80055b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800549a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549e:	4b40      	ldr	r3, [pc, #256]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80054b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80055b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ce:	e043      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80055bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80054de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e2:	4b2f      	ldr	r3, [pc, #188]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80054f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80055b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005512:	e021      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	ee07 3a90 	vmov	s15, r3
 800551a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80055b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005526:	4b1e      	ldr	r3, [pc, #120]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005536:	ed97 6a02 	vldr	s12, [r7, #8]
 800553a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80055b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800553e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800554a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005556:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	0a5b      	lsrs	r3, r3, #9
 800555e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005562:	3301      	adds	r3, #1
 8005564:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	ee07 3a90 	vmov	s15, r3
 800556c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005570:	edd7 6a07 	vldr	s13, [r7, #28]
 8005574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800557c:	ee17 3a90 	vmov	r3, s15
 8005580:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005582:	e005      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	61bb      	str	r3, [r7, #24]
    break;
 8005588:	e002      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800558a:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800558c:	61bb      	str	r3, [r7, #24]
    break;
 800558e:	bf00      	nop
  }

  return sysclockfreq;
 8005590:	69bb      	ldr	r3, [r7, #24]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3724      	adds	r7, #36	; 0x24
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	58024400 	.word	0x58024400
 80055a4:	03d09000 	.word	0x03d09000
 80055a8:	003d0900 	.word	0x003d0900
 80055ac:	007a1200 	.word	0x007a1200
 80055b0:	46000000 	.word	0x46000000
 80055b4:	4c742400 	.word	0x4c742400
 80055b8:	4a742400 	.word	0x4a742400
 80055bc:	4af42400 	.word	0x4af42400

080055c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80055c6:	f7ff fe81 	bl	80052cc <HAL_RCC_GetSysClockFreq>
 80055ca:	4602      	mov	r2, r0
 80055cc:	4b10      	ldr	r3, [pc, #64]	; (8005610 <HAL_RCC_GetHCLKFreq+0x50>)
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	0a1b      	lsrs	r3, r3, #8
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	490f      	ldr	r1, [pc, #60]	; (8005614 <HAL_RCC_GetHCLKFreq+0x54>)
 80055d8:	5ccb      	ldrb	r3, [r1, r3]
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	fa22 f303 	lsr.w	r3, r2, r3
 80055e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055e4:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <HAL_RCC_GetHCLKFreq+0x50>)
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	4a09      	ldr	r2, [pc, #36]	; (8005614 <HAL_RCC_GetHCLKFreq+0x54>)
 80055ee:	5cd3      	ldrb	r3, [r2, r3]
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	fa22 f303 	lsr.w	r3, r2, r3
 80055fa:	4a07      	ldr	r2, [pc, #28]	; (8005618 <HAL_RCC_GetHCLKFreq+0x58>)
 80055fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055fe:	4a07      	ldr	r2, [pc, #28]	; (800561c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005604:	4b04      	ldr	r3, [pc, #16]	; (8005618 <HAL_RCC_GetHCLKFreq+0x58>)
 8005606:	681b      	ldr	r3, [r3, #0]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	58024400 	.word	0x58024400
 8005614:	08009cb4 	.word	0x08009cb4
 8005618:	24000008 	.word	0x24000008
 800561c:	24000004 	.word	0x24000004

08005620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005624:	f7ff ffcc 	bl	80055c0 <HAL_RCC_GetHCLKFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <HAL_RCC_GetPCLK1Freq+0x24>)
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	091b      	lsrs	r3, r3, #4
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4904      	ldr	r1, [pc, #16]	; (8005648 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005640:	4618      	mov	r0, r3
 8005642:	bd80      	pop	{r7, pc}
 8005644:	58024400 	.word	0x58024400
 8005648:	08009cb4 	.word	0x08009cb4

0800564c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005650:	f7ff ffb6 	bl	80055c0 <HAL_RCC_GetHCLKFreq>
 8005654:	4602      	mov	r2, r0
 8005656:	4b06      	ldr	r3, [pc, #24]	; (8005670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	0a1b      	lsrs	r3, r3, #8
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	4904      	ldr	r1, [pc, #16]	; (8005674 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005662:	5ccb      	ldrb	r3, [r1, r3]
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800566c:	4618      	mov	r0, r3
 800566e:	bd80      	pop	{r7, pc}
 8005670:	58024400 	.word	0x58024400
 8005674:	08009cb4 	.word	0x08009cb4

08005678 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005680:	2300      	movs	r3, #0
 8005682:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005684:	2300      	movs	r3, #0
 8005686:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d03f      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005698:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800569c:	d02a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800569e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056a2:	d824      	bhi.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056a8:	d018      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ae:	d81e      	bhi.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b8:	d007      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056ba:	e018      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056bc:	4ba4      	ldr	r3, [pc, #656]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	4aa3      	ldr	r2, [pc, #652]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80056c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056c8:	e015      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3304      	adds	r3, #4
 80056ce:	2102      	movs	r1, #2
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 f989 	bl	80069e8 <RCCEx_PLL2_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056da:	e00c      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3324      	adds	r3, #36	; 0x24
 80056e0:	2102      	movs	r1, #2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 fa32 	bl	8006b4c <RCCEx_PLL3_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	75fb      	strb	r3, [r7, #23]
      break;
 80056f2:	e000      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80056f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056fc:	4b94      	ldr	r3, [pc, #592]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005708:	4991      	ldr	r1, [pc, #580]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800570a:	4313      	orrs	r3, r2
 800570c:	650b      	str	r3, [r1, #80]	; 0x50
 800570e:	e001      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	7dfb      	ldrb	r3, [r7, #23]
 8005712:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571c:	2b00      	cmp	r3, #0
 800571e:	d03d      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	2b04      	cmp	r3, #4
 8005726:	d826      	bhi.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005728:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	08005745 	.word	0x08005745
 8005734:	08005753 	.word	0x08005753
 8005738:	08005765 	.word	0x08005765
 800573c:	0800577d 	.word	0x0800577d
 8005740:	0800577d 	.word	0x0800577d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005744:	4b82      	ldr	r3, [pc, #520]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	4a81      	ldr	r2, [pc, #516]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800574a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800574e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005750:	e015      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3304      	adds	r3, #4
 8005756:	2100      	movs	r1, #0
 8005758:	4618      	mov	r0, r3
 800575a:	f001 f945 	bl	80069e8 <RCCEx_PLL2_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005762:	e00c      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3324      	adds	r3, #36	; 0x24
 8005768:	2100      	movs	r1, #0
 800576a:	4618      	mov	r0, r3
 800576c:	f001 f9ee 	bl	8006b4c <RCCEx_PLL3_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005774:	e003      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	75fb      	strb	r3, [r7, #23]
      break;
 800577a:	e000      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800577c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d109      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005784:	4b72      	ldr	r3, [pc, #456]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005788:	f023 0207 	bic.w	r2, r3, #7
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005790:	496f      	ldr	r1, [pc, #444]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005792:	4313      	orrs	r3, r2
 8005794:	650b      	str	r3, [r1, #80]	; 0x50
 8005796:	e001      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d051      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057ae:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80057b2:	d036      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80057b4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80057b8:	d830      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80057ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057be:	d032      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80057c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057c4:	d82a      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80057c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057ca:	d02e      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80057cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057d0:	d824      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80057d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d6:	d018      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80057d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057dc:	d81e      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x172>
 80057e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057e6:	d007      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80057e8:	e018      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ea:	4b59      	ldr	r3, [pc, #356]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	4a58      	ldr	r2, [pc, #352]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80057f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057f6:	e019      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 f8f2 	bl	80069e8 <RCCEx_PLL2_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005808:	e010      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	3324      	adds	r3, #36	; 0x24
 800580e:	2100      	movs	r1, #0
 8005810:	4618      	mov	r0, r3
 8005812:	f001 f99b 	bl	8006b4c <RCCEx_PLL3_Config>
 8005816:	4603      	mov	r3, r0
 8005818:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800581a:	e007      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	75fb      	strb	r3, [r7, #23]
      break;
 8005820:	e004      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005822:	bf00      	nop
 8005824:	e002      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005826:	bf00      	nop
 8005828:	e000      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800582a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800582c:	7dfb      	ldrb	r3, [r7, #23]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005832:	4b47      	ldr	r3, [pc, #284]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005836:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005840:	4943      	ldr	r1, [pc, #268]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005842:	4313      	orrs	r3, r2
 8005844:	658b      	str	r3, [r1, #88]	; 0x58
 8005846:	e001      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005854:	2b00      	cmp	r3, #0
 8005856:	d051      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800585e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005862:	d036      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005864:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005868:	d830      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800586a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800586e:	d032      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005870:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005874:	d82a      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005876:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800587a:	d02e      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x262>
 800587c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005880:	d824      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005882:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005886:	d018      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800588c:	d81e      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005892:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005896:	d007      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005898:	e018      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800589a:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	4a2c      	ldr	r2, [pc, #176]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80058a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058a6:	e019      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3304      	adds	r3, #4
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 f89a 	bl	80069e8 <RCCEx_PLL2_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80058b8:	e010      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3324      	adds	r3, #36	; 0x24
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 f943 	bl	8006b4c <RCCEx_PLL3_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058ca:	e007      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	75fb      	strb	r3, [r7, #23]
      break;
 80058d0:	e004      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80058d2:	bf00      	nop
 80058d4:	e002      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80058d6:	bf00      	nop
 80058d8:	e000      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80058da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10a      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80058e2:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058f0:	4917      	ldr	r1, [pc, #92]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	658b      	str	r3, [r1, #88]	; 0x58
 80058f6:	e001      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f8:	7dfb      	ldrb	r3, [r7, #23]
 80058fa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d035      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590c:	2b30      	cmp	r3, #48	; 0x30
 800590e:	d01c      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005910:	2b30      	cmp	r3, #48	; 0x30
 8005912:	d817      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005914:	2b20      	cmp	r3, #32
 8005916:	d00c      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d813      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d019      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005920:	2b10      	cmp	r3, #16
 8005922:	d10f      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	4a09      	ldr	r2, [pc, #36]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800592a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800592e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005930:	e011      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3304      	adds	r3, #4
 8005936:	2102      	movs	r1, #2
 8005938:	4618      	mov	r0, r3
 800593a:	f001 f855 	bl	80069e8 <RCCEx_PLL2_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005942:	e008      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	75fb      	strb	r3, [r7, #23]
      break;
 8005948:	e005      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800594a:	bf00      	nop
 800594c:	e003      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800594e:	bf00      	nop
 8005950:	58024400 	.word	0x58024400
      break;
 8005954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005956:	7dfb      	ldrb	r3, [r7, #23]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d109      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800595c:	4ba3      	ldr	r3, [pc, #652]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800595e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005960:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005968:	49a0      	ldr	r1, [pc, #640]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800596a:	4313      	orrs	r3, r2
 800596c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800596e:	e001      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005970:	7dfb      	ldrb	r3, [r7, #23]
 8005972:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d047      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005988:	d030      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x374>
 800598a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800598e:	d82a      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005994:	d02c      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005996:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800599a:	d824      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800599c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a0:	d018      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80059a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a6:	d81e      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b0:	d007      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80059b2:	e018      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b4:	4b8d      	ldr	r3, [pc, #564]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4a8c      	ldr	r2, [pc, #560]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80059ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80059c0:	e017      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3304      	adds	r3, #4
 80059c6:	2100      	movs	r1, #0
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 f80d 	bl	80069e8 <RCCEx_PLL2_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80059d2:	e00e      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3324      	adds	r3, #36	; 0x24
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 f8b6 	bl	8006b4c <RCCEx_PLL3_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80059e4:	e005      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	75fb      	strb	r3, [r7, #23]
      break;
 80059ea:	e002      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80059ec:	bf00      	nop
 80059ee:	e000      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80059f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d109      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059f8:	4b7c      	ldr	r3, [pc, #496]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80059fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a04:	4979      	ldr	r1, [pc, #484]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	650b      	str	r3, [r1, #80]	; 0x50
 8005a0a:	e001      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d049      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a24:	d02e      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005a26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a2a:	d828      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005a2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a30:	d02a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005a32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a36:	d822      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005a38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a3c:	d026      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005a3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a42:	d81c      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a48:	d010      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a4e:	d816      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01d      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a58:	d111      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	2101      	movs	r1, #1
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 ffc1 	bl	80069e8 <RCCEx_PLL2_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005a6a:	e012      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3324      	adds	r3, #36	; 0x24
 8005a70:	2101      	movs	r1, #1
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 f86a 	bl	8006b4c <RCCEx_PLL3_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005a7c:	e009      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	75fb      	strb	r3, [r7, #23]
      break;
 8005a82:	e006      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005a84:	bf00      	nop
 8005a86:	e004      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005a88:	bf00      	nop
 8005a8a:	e002      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005a8c:	bf00      	nop
 8005a8e:	e000      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d109      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a98:	4b54      	ldr	r3, [pc, #336]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa4:	4951      	ldr	r1, [pc, #324]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	650b      	str	r3, [r1, #80]	; 0x50
 8005aaa:	e001      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d04b      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ac6:	d02e      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005acc:	d828      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad2:	d02a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad8:	d822      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005ada:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ade:	d026      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005ae0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ae4:	d81c      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aea:	d010      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005af0:	d816      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01d      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005afa:	d111      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	2101      	movs	r1, #1
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 ff70 	bl	80069e8 <RCCEx_PLL2_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005b0c:	e012      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3324      	adds	r3, #36	; 0x24
 8005b12:	2101      	movs	r1, #1
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 f819 	bl	8006b4c <RCCEx_PLL3_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005b1e:	e009      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	75fb      	strb	r3, [r7, #23]
      break;
 8005b24:	e006      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005b26:	bf00      	nop
 8005b28:	e004      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005b2a:	bf00      	nop
 8005b2c:	e002      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005b2e:	bf00      	nop
 8005b30:	e000      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b3a:	4b2c      	ldr	r3, [pc, #176]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b48:	4928      	ldr	r1, [pc, #160]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	658b      	str	r3, [r1, #88]	; 0x58
 8005b4e:	e001      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d02f      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b68:	d00e      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b6e:	d814      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d015      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b78:	d10f      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7a:	4b1c      	ldr	r3, [pc, #112]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	4a1b      	ldr	r2, [pc, #108]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005b86:	e00c      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 ff2a 	bl	80069e8 <RCCEx_PLL2_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005b98:	e003      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ba8:	4b10      	ldr	r3, [pc, #64]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb4:	490d      	ldr	r1, [pc, #52]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	650b      	str	r3, [r1, #80]	; 0x50
 8005bba:	e001      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d034      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d81d      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005bd4:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005c17 	.word	0x08005c17
 8005be0:	08005bf1 	.word	0x08005bf1
 8005be4:	08005bff 	.word	0x08005bff
 8005be8:	08005c17 	.word	0x08005c17
 8005bec:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf0:	4bb1      	ldr	r3, [pc, #708]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	4ab0      	ldr	r2, [pc, #704]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005bfc:	e00c      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3304      	adds	r3, #4
 8005c02:	2102      	movs	r1, #2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 feef 	bl	80069e8 <RCCEx_PLL2_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005c0e:	e003      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	75fb      	strb	r3, [r7, #23]
      break;
 8005c14:	e000      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8005c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c1e:	4ba6      	ldr	r3, [pc, #664]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c22:	f023 0203 	bic.w	r2, r3, #3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2a:	49a3      	ldr	r1, [pc, #652]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c30:	e001      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 8086 	beq.w	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c44:	4b9d      	ldr	r3, [pc, #628]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a9c      	ldr	r2, [pc, #624]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c50:	f7fb fb5e 	bl	8001310 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c56:	e009      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c58:	f7fb fb5a 	bl	8001310 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b64      	cmp	r3, #100	; 0x64
 8005c64:	d902      	bls.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	75fb      	strb	r3, [r7, #23]
        break;
 8005c6a:	e005      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c6c:	4b93      	ldr	r3, [pc, #588]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0ef      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d166      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c7e:	4b8e      	ldr	r3, [pc, #568]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c88:	4053      	eors	r3, r2
 8005c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d013      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c92:	4b89      	ldr	r3, [pc, #548]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c9c:	4b86      	ldr	r3, [pc, #536]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca0:	4a85      	ldr	r2, [pc, #532]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ca8:	4b83      	ldr	r3, [pc, #524]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cac:	4a82      	ldr	r2, [pc, #520]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005cb4:	4a80      	ldr	r2, [pc, #512]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc4:	d115      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc6:	f7fb fb23 	bl	8001310 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ccc:	e00b      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cce:	f7fb fb1f 	bl	8001310 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d902      	bls.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ce4:	e005      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ce6:	4b74      	ldr	r3, [pc, #464]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0ed      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d126      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d06:	d10d      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8005d08:	4b6b      	ldr	r3, [pc, #428]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d16:	0919      	lsrs	r1, r3, #4
 8005d18:	4b69      	ldr	r3, [pc, #420]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d1a:	400b      	ands	r3, r1
 8005d1c:	4966      	ldr	r1, [pc, #408]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	610b      	str	r3, [r1, #16]
 8005d22:	e005      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005d24:	4b64      	ldr	r3, [pc, #400]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	4a63      	ldr	r2, [pc, #396]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d2e:	6113      	str	r3, [r2, #16]
 8005d30:	4b61      	ldr	r3, [pc, #388]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d3e:	495e      	ldr	r1, [pc, #376]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	670b      	str	r3, [r1, #112]	; 0x70
 8005d44:	e004      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
 8005d48:	75bb      	strb	r3, [r7, #22]
 8005d4a:	e001      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
 8005d4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d07e      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d60:	2b28      	cmp	r3, #40	; 0x28
 8005d62:	d867      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005d64:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005e3b 	.word	0x08005e3b
 8005d70:	08005e35 	.word	0x08005e35
 8005d74:	08005e35 	.word	0x08005e35
 8005d78:	08005e35 	.word	0x08005e35
 8005d7c:	08005e35 	.word	0x08005e35
 8005d80:	08005e35 	.word	0x08005e35
 8005d84:	08005e35 	.word	0x08005e35
 8005d88:	08005e35 	.word	0x08005e35
 8005d8c:	08005e11 	.word	0x08005e11
 8005d90:	08005e35 	.word	0x08005e35
 8005d94:	08005e35 	.word	0x08005e35
 8005d98:	08005e35 	.word	0x08005e35
 8005d9c:	08005e35 	.word	0x08005e35
 8005da0:	08005e35 	.word	0x08005e35
 8005da4:	08005e35 	.word	0x08005e35
 8005da8:	08005e35 	.word	0x08005e35
 8005dac:	08005e23 	.word	0x08005e23
 8005db0:	08005e35 	.word	0x08005e35
 8005db4:	08005e35 	.word	0x08005e35
 8005db8:	08005e35 	.word	0x08005e35
 8005dbc:	08005e35 	.word	0x08005e35
 8005dc0:	08005e35 	.word	0x08005e35
 8005dc4:	08005e35 	.word	0x08005e35
 8005dc8:	08005e35 	.word	0x08005e35
 8005dcc:	08005e3b 	.word	0x08005e3b
 8005dd0:	08005e35 	.word	0x08005e35
 8005dd4:	08005e35 	.word	0x08005e35
 8005dd8:	08005e35 	.word	0x08005e35
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e35 	.word	0x08005e35
 8005de4:	08005e35 	.word	0x08005e35
 8005de8:	08005e35 	.word	0x08005e35
 8005dec:	08005e3b 	.word	0x08005e3b
 8005df0:	08005e35 	.word	0x08005e35
 8005df4:	08005e35 	.word	0x08005e35
 8005df8:	08005e35 	.word	0x08005e35
 8005dfc:	08005e35 	.word	0x08005e35
 8005e00:	08005e35 	.word	0x08005e35
 8005e04:	08005e35 	.word	0x08005e35
 8005e08:	08005e35 	.word	0x08005e35
 8005e0c:	08005e3b 	.word	0x08005e3b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	2101      	movs	r1, #1
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fde6 	bl	80069e8 <RCCEx_PLL2_Config>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005e20:	e00c      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3324      	adds	r3, #36	; 0x24
 8005e26:	2101      	movs	r1, #1
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fe8f 	bl	8006b4c <RCCEx_PLL3_Config>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005e32:	e003      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
      break;
 8005e38:	e000      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8005e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d109      	bne.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e42:	4b1d      	ldr	r3, [pc, #116]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4e:	491a      	ldr	r1, [pc, #104]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	654b      	str	r3, [r1, #84]	; 0x54
 8005e54:	e001      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d03e      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d820      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005e6e:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005ec5 	.word	0x08005ec5
 8005e78:	08005e8d 	.word	0x08005e8d
 8005e7c:	08005e9f 	.word	0x08005e9f
 8005e80:	08005ec5 	.word	0x08005ec5
 8005e84:	08005ec5 	.word	0x08005ec5
 8005e88:	08005ec5 	.word	0x08005ec5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	2101      	movs	r1, #1
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fda8 	bl	80069e8 <RCCEx_PLL2_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005e9c:	e013      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3324      	adds	r3, #36	; 0x24
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fe51 	bl	8006b4c <RCCEx_PLL3_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005eae:	e00a      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb4:	e007      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8005eb6:	bf00      	nop
 8005eb8:	58024400 	.word	0x58024400
 8005ebc:	58024800 	.word	0x58024800
 8005ec0:	00ffffcf 	.word	0x00ffffcf
      break;
 8005ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d109      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ecc:	4b9f      	ldr	r3, [pc, #636]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed0:	f023 0207 	bic.w	r2, r3, #7
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed8:	499c      	ldr	r1, [pc, #624]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	654b      	str	r3, [r1, #84]	; 0x54
 8005ede:	e001      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
 8005ee2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d039      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef6:	2b05      	cmp	r3, #5
 8005ef8:	d820      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8005efa:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f43 	.word	0x08005f43
 8005f04:	08005f19 	.word	0x08005f19
 8005f08:	08005f2b 	.word	0x08005f2b
 8005f0c:	08005f43 	.word	0x08005f43
 8005f10:	08005f43 	.word	0x08005f43
 8005f14:	08005f43 	.word	0x08005f43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fd62 	bl	80069e8 <RCCEx_PLL2_Config>
 8005f24:	4603      	mov	r3, r0
 8005f26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005f28:	e00c      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3324      	adds	r3, #36	; 0x24
 8005f2e:	2101      	movs	r1, #1
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fe0b 	bl	8006b4c <RCCEx_PLL3_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005f3a:	e003      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f40:	e000      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8005f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10a      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f4a:	4b80      	ldr	r3, [pc, #512]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4e:	f023 0207 	bic.w	r2, r3, #7
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f58:	497c      	ldr	r1, [pc, #496]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	658b      	str	r3, [r1, #88]	; 0x58
 8005f5e:	e001      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0320 	and.w	r3, r3, #32
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d04b      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f7a:	d02e      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x962>
 8005f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f80:	d828      	bhi.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f86:	d02a      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8c:	d822      	bhi.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005f8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f92:	d026      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005f94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f98:	d81c      	bhi.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f9e:	d010      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8005fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fa4:	d816      	bhi.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01d      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fae:	d111      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fd16 	bl	80069e8 <RCCEx_PLL2_Config>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005fc0:	e012      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3324      	adds	r3, #36	; 0x24
 8005fc6:	2102      	movs	r1, #2
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fdbf 	bl	8006b4c <RCCEx_PLL3_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005fd2:	e009      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd8:	e006      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005fda:	bf00      	nop
 8005fdc:	e004      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005fde:	bf00      	nop
 8005fe0:	e002      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fee:	4b57      	ldr	r3, [pc, #348]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffc:	4953      	ldr	r1, [pc, #332]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	654b      	str	r3, [r1, #84]	; 0x54
 8006002:	e001      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006004:	7dfb      	ldrb	r3, [r7, #23]
 8006006:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d04b      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800601a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800601e:	d02e      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8006020:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006024:	d828      	bhi.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602a:	d02a      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800602c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006030:	d822      	bhi.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006032:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006036:	d026      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006038:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800603c:	d81c      	bhi.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800603e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006042:	d010      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8006044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006048:	d816      	bhi.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01d      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800604e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006052:	d111      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3304      	adds	r3, #4
 8006058:	2100      	movs	r1, #0
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fcc4 	bl	80069e8 <RCCEx_PLL2_Config>
 8006060:	4603      	mov	r3, r0
 8006062:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006064:	e012      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3324      	adds	r3, #36	; 0x24
 800606a:	2102      	movs	r1, #2
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fd6d 	bl	8006b4c <RCCEx_PLL3_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006076:	e009      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	75fb      	strb	r3, [r7, #23]
      break;
 800607c:	e006      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800607e:	bf00      	nop
 8006080:	e004      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006082:	bf00      	nop
 8006084:	e002      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006086:	bf00      	nop
 8006088:	e000      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800608a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006092:	4b2e      	ldr	r3, [pc, #184]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006096:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060a0:	492a      	ldr	r1, [pc, #168]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	658b      	str	r3, [r1, #88]	; 0x58
 80060a6:	e001      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d04d      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060c2:	d02e      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80060c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060c8:	d828      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80060ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ce:	d02a      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80060d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d4:	d822      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80060d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060da:	d026      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80060dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060e0:	d81c      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80060e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060e6:	d010      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80060e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060ec:	d816      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01d      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80060f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f6:	d111      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fc72 	bl	80069e8 <RCCEx_PLL2_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006108:	e012      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3324      	adds	r3, #36	; 0x24
 800610e:	2102      	movs	r1, #2
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fd1b 	bl	8006b4c <RCCEx_PLL3_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800611a:	e009      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	75fb      	strb	r3, [r7, #23]
      break;
 8006120:	e006      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006122:	bf00      	nop
 8006124:	e004      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006126:	bf00      	nop
 8006128:	e002      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800612a:	bf00      	nop
 800612c:	e000      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800612e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006130:	7dfb      	ldrb	r3, [r7, #23]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10c      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006136:	4b05      	ldr	r3, [pc, #20]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006144:	4901      	ldr	r1, [pc, #4]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006146:	4313      	orrs	r3, r2
 8006148:	658b      	str	r3, [r1, #88]	; 0x58
 800614a:	e003      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800614c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d018      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006168:	d10a      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3324      	adds	r3, #36	; 0x24
 800616e:	2102      	movs	r1, #2
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fceb 	bl	8006b4c <RCCEx_PLL3_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006180:	4b8a      	ldr	r3, [pc, #552]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006184:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800618c:	4987      	ldr	r1, [pc, #540]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800618e:	4313      	orrs	r3, r2
 8006190:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01a      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a8:	d10a      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3324      	adds	r3, #36	; 0x24
 80061ae:	2102      	movs	r1, #2
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fccb 	bl	8006b4c <RCCEx_PLL3_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061c0:	4b7a      	ldr	r3, [pc, #488]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80061c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ce:	4977      	ldr	r1, [pc, #476]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d034      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061ea:	d01d      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80061ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061f0:	d817      	bhi.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80061f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fa:	d009      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80061fc:	e011      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3304      	adds	r3, #4
 8006202:	2100      	movs	r1, #0
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fbef 	bl	80069e8 <RCCEx_PLL2_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800620e:	e00c      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3324      	adds	r3, #36	; 0x24
 8006214:	2102      	movs	r1, #2
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fc98 	bl	8006b4c <RCCEx_PLL3_Config>
 800621c:	4603      	mov	r3, r0
 800621e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006220:	e003      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	75fb      	strb	r3, [r7, #23]
      break;
 8006226:	e000      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006230:	4b5e      	ldr	r3, [pc, #376]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800623e:	495b      	ldr	r1, [pc, #364]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006240:	4313      	orrs	r3, r2
 8006242:	658b      	str	r3, [r1, #88]	; 0x58
 8006244:	e001      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d033      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800625c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006260:	d01c      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006262:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006266:	d816      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800626c:	d003      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800626e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006272:	d007      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006274:	e00f      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006276:	4b4d      	ldr	r3, [pc, #308]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	4a4c      	ldr	r2, [pc, #304]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800627c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006282:	e00c      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3324      	adds	r3, #36	; 0x24
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fc5e 	bl	8006b4c <RCCEx_PLL3_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006294:	e003      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	75fb      	strb	r3, [r7, #23]
      break;
 800629a:	e000      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800629c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10a      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062a4:	4b41      	ldr	r3, [pc, #260]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80062a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b2:	493e      	ldr	r1, [pc, #248]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	654b      	str	r3, [r1, #84]	; 0x54
 80062b8:	e001      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
 80062bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d029      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80062d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d6:	d007      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80062d8:	e00f      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062da:	4b34      	ldr	r3, [pc, #208]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	4a33      	ldr	r2, [pc, #204]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80062e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80062e6:	e00b      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	2102      	movs	r1, #2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fb7a 	bl	80069e8 <RCCEx_PLL2_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80062f8:	e002      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	75fb      	strb	r3, [r7, #23]
      break;
 80062fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d109      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006306:	4b29      	ldr	r3, [pc, #164]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006312:	4926      	ldr	r1, [pc, #152]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006314:	4313      	orrs	r3, r2
 8006316:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006318:	e001      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3324      	adds	r3, #36	; 0x24
 800632e:	2102      	movs	r1, #2
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fc0b 	bl	8006b4c <RCCEx_PLL3_Config>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d033      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006354:	d017      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800635a:	d811      	bhi.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800635c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006360:	d013      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8006362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006366:	d80b      	bhi.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006368:	2b00      	cmp	r3, #0
 800636a:	d010      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800636c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006370:	d106      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006372:	4b0e      	ldr	r3, [pc, #56]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	4a0d      	ldr	r2, [pc, #52]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800637c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800637e:	e007      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	75fb      	strb	r3, [r7, #23]
      break;
 8006384:	e004      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006386:	bf00      	nop
 8006388:	e002      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800638a:	bf00      	nop
 800638c:	e000      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800638e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10c      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a2:	4902      	ldr	r1, [pc, #8]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	654b      	str	r3, [r1, #84]	; 0x54
 80063a8:	e004      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80063aa:	bf00      	nop
 80063ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d008      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063c0:	4b29      	ldr	r3, [pc, #164]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063cc:	4926      	ldr	r1, [pc, #152]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d008      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063de:	4b22      	ldr	r3, [pc, #136]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80063e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ea:	491f      	ldr	r1, [pc, #124]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00d      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063fc:	4b1a      	ldr	r3, [pc, #104]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	4a19      	ldr	r2, [pc, #100]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006402:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006406:	6113      	str	r3, [r2, #16]
 8006408:	4b17      	ldr	r3, [pc, #92]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006412:	4915      	ldr	r1, [pc, #84]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006414:	4313      	orrs	r3, r2
 8006416:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	da08      	bge.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006420:	4b11      	ldr	r3, [pc, #68]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006424:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642c:	490e      	ldr	r1, [pc, #56]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800642e:	4313      	orrs	r3, r2
 8006430:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800643e:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800644c:	4906      	ldr	r1, [pc, #24]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800644e:	4313      	orrs	r3, r2
 8006450:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006452:	7dbb      	ldrb	r3, [r7, #22]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	e000      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	58024400 	.word	0x58024400

0800646c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006470:	f7ff f8a6 	bl	80055c0 <HAL_RCC_GetHCLKFreq>
 8006474:	4602      	mov	r2, r0
 8006476:	4b06      	ldr	r3, [pc, #24]	; (8006490 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	4904      	ldr	r1, [pc, #16]	; (8006494 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006482:	5ccb      	ldrb	r3, [r1, r3]
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800648c:	4618      	mov	r0, r3
 800648e:	bd80      	pop	{r7, pc}
 8006490:	58024400 	.word	0x58024400
 8006494:	08009cb4 	.word	0x08009cb4

08006498 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006498:	b480      	push	{r7}
 800649a:	b089      	sub	sp, #36	; 0x24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064a0:	4ba1      	ldr	r3, [pc, #644]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80064aa:	4b9f      	ldr	r3, [pc, #636]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	0b1b      	lsrs	r3, r3, #12
 80064b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80064b6:	4b9c      	ldr	r3, [pc, #624]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	091b      	lsrs	r3, r3, #4
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80064c2:	4b99      	ldr	r3, [pc, #612]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	08db      	lsrs	r3, r3, #3
 80064c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8111 	beq.w	8006708 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	f000 8083 	beq.w	80065f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	f200 80a1 	bhi.w	8006638 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d056      	beq.n	80065b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006502:	e099      	b.n	8006638 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006504:	4b88      	ldr	r3, [pc, #544]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d02d      	beq.n	800656c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006510:	4b85      	ldr	r3, [pc, #532]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	08db      	lsrs	r3, r3, #3
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	4a84      	ldr	r2, [pc, #528]	; (800672c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800651c:	fa22 f303 	lsr.w	r3, r2, r3
 8006520:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	ee07 3a90 	vmov	s15, r3
 8006528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800653a:	4b7b      	ldr	r3, [pc, #492]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800654a:	ed97 6a03 	vldr	s12, [r7, #12]
 800654e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006730 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800655a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800655e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006566:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800656a:	e087      	b.n	800667c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006576:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800657a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657e:	4b6a      	ldr	r3, [pc, #424]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006592:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006730 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800659a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065ae:	e065      	b.n	800667c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006738 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80065be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065c2:	4b59      	ldr	r3, [pc, #356]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006730 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065f2:	e043      	b.n	800667c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800673c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006606:	4b48      	ldr	r3, [pc, #288]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006616:	ed97 6a03 	vldr	s12, [r7, #12]
 800661a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006730 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800661e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800662a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006632:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006636:	e021      	b.n	800667c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006642:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006738 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800664a:	4b37      	ldr	r3, [pc, #220]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800665a:	ed97 6a03 	vldr	s12, [r7, #12]
 800665e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006730 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800666a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800666e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006676:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800667a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800667c:	4b2a      	ldr	r3, [pc, #168]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006680:	0a5b      	lsrs	r3, r3, #9
 8006682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006692:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006696:	edd7 6a07 	vldr	s13, [r7, #28]
 800669a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800669e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a2:	ee17 2a90 	vmov	r2, s15
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80066aa:	4b1f      	ldr	r3, [pc, #124]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	0c1b      	lsrs	r3, r3, #16
 80066b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b4:	ee07 3a90 	vmov	s15, r3
 80066b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80066c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066d0:	ee17 2a90 	vmov	r2, s15
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80066d8:	4b13      	ldr	r3, [pc, #76]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	0e1b      	lsrs	r3, r3, #24
 80066de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80066f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066fe:	ee17 2a90 	vmov	r2, s15
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006706:	e008      	b.n	800671a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	609a      	str	r2, [r3, #8]
}
 800671a:	bf00      	nop
 800671c:	3724      	adds	r7, #36	; 0x24
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	58024400 	.word	0x58024400
 800672c:	03d09000 	.word	0x03d09000
 8006730:	46000000 	.word	0x46000000
 8006734:	4c742400 	.word	0x4c742400
 8006738:	4a742400 	.word	0x4a742400
 800673c:	4af42400 	.word	0x4af42400

08006740 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006740:	b480      	push	{r7}
 8006742:	b089      	sub	sp, #36	; 0x24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006748:	4ba1      	ldr	r3, [pc, #644]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006752:	4b9f      	ldr	r3, [pc, #636]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006756:	0d1b      	lsrs	r3, r3, #20
 8006758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800675c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800675e:	4b9c      	ldr	r3, [pc, #624]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	0a1b      	lsrs	r3, r3, #8
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800676a:	4b99      	ldr	r3, [pc, #612]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	08db      	lsrs	r3, r3, #3
 8006770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	fb02 f303 	mul.w	r3, r2, r3
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006782:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 8111 	beq.w	80069b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b02      	cmp	r3, #2
 8006792:	f000 8083 	beq.w	800689c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b02      	cmp	r3, #2
 800679a:	f200 80a1 	bhi.w	80068e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d056      	beq.n	8006858 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80067aa:	e099      	b.n	80068e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ac:	4b88      	ldr	r3, [pc, #544]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d02d      	beq.n	8006814 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067b8:	4b85      	ldr	r3, [pc, #532]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	08db      	lsrs	r3, r3, #3
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	4a84      	ldr	r2, [pc, #528]	; (80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
 80067c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	ee07 3a90 	vmov	s15, r3
 80067d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e2:	4b7b      	ldr	r3, [pc, #492]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ea:	ee07 3a90 	vmov	s15, r3
 80067ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80069d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800680a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006812:	e087      	b.n	8006924 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80069dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006826:	4b6a      	ldr	r3, [pc, #424]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006836:	ed97 6a03 	vldr	s12, [r7, #12]
 800683a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80069d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800683e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800684a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006852:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006856:	e065      	b.n	8006924 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006862:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800686a:	4b59      	ldr	r3, [pc, #356]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800687a:	ed97 6a03 	vldr	s12, [r7, #12]
 800687e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80069d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800688a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800688e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006896:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800689a:	e043      	b.n	8006924 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80069e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80068aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ae:	4b48      	ldr	r3, [pc, #288]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068be:	ed97 6a03 	vldr	s12, [r7, #12]
 80068c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80069d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068de:	e021      	b.n	8006924 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80069e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80068ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f2:	4b37      	ldr	r3, [pc, #220]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006902:	ed97 6a03 	vldr	s12, [r7, #12]
 8006906:	eddf 5a34 	vldr	s11, [pc, #208]	; 80069d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800690a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800691a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006922:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006924:	4b2a      	ldr	r3, [pc, #168]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	0a5b      	lsrs	r3, r3, #9
 800692a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800693a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800693e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800694a:	ee17 2a90 	vmov	r2, s15
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006952:	4b1f      	ldr	r3, [pc, #124]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	0c1b      	lsrs	r3, r3, #16
 8006958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800695c:	ee07 3a90 	vmov	s15, r3
 8006960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006968:	ee37 7a87 	vadd.f32	s14, s15, s14
 800696c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006978:	ee17 2a90 	vmov	r2, s15
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006980:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	0e1b      	lsrs	r3, r3, #24
 8006986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006996:	ee37 7a87 	vadd.f32	s14, s15, s14
 800699a:	edd7 6a07 	vldr	s13, [r7, #28]
 800699e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069a6:	ee17 2a90 	vmov	r2, s15
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80069ae:	e008      	b.n	80069c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	609a      	str	r2, [r3, #8]
}
 80069c2:	bf00      	nop
 80069c4:	3724      	adds	r7, #36	; 0x24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	58024400 	.word	0x58024400
 80069d4:	03d09000 	.word	0x03d09000
 80069d8:	46000000 	.word	0x46000000
 80069dc:	4c742400 	.word	0x4c742400
 80069e0:	4a742400 	.word	0x4a742400
 80069e4:	4af42400 	.word	0x4af42400

080069e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069f6:	4b53      	ldr	r3, [pc, #332]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d101      	bne.n	8006a06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e099      	b.n	8006b3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006a06:	4b4f      	ldr	r3, [pc, #316]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a4e      	ldr	r2, [pc, #312]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006a0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a12:	f7fa fc7d 	bl	8001310 <HAL_GetTick>
 8006a16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a18:	e008      	b.n	8006a2c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a1a:	f7fa fc79 	bl	8001310 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d901      	bls.n	8006a2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e086      	b.n	8006b3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a2c:	4b45      	ldr	r3, [pc, #276]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f0      	bne.n	8006a1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006a38:	4b42      	ldr	r3, [pc, #264]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	031b      	lsls	r3, r3, #12
 8006a46:	493f      	ldr	r1, [pc, #252]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	628b      	str	r3, [r1, #40]	; 0x28
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	3b01      	subs	r3, #1
 8006a52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	025b      	lsls	r3, r3, #9
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	061b      	lsls	r3, r3, #24
 8006a78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a7c:	4931      	ldr	r1, [pc, #196]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a82:	4b30      	ldr	r3, [pc, #192]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	492d      	ldr	r1, [pc, #180]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a94:	4b2b      	ldr	r3, [pc, #172]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	f023 0220 	bic.w	r2, r3, #32
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	4928      	ldr	r1, [pc, #160]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006aa6:	4b27      	ldr	r3, [pc, #156]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aaa:	4a26      	ldr	r2, [pc, #152]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006aac:	f023 0310 	bic.w	r3, r3, #16
 8006ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006ab2:	4b24      	ldr	r3, [pc, #144]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ab6:	4b24      	ldr	r3, [pc, #144]	; (8006b48 <RCCEx_PLL2_Config+0x160>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	69d2      	ldr	r2, [r2, #28]
 8006abe:	00d2      	lsls	r2, r2, #3
 8006ac0:	4920      	ldr	r1, [pc, #128]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006ac6:	4b1f      	ldr	r3, [pc, #124]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	4a1e      	ldr	r2, [pc, #120]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006acc:	f043 0310 	orr.w	r3, r3, #16
 8006ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d106      	bne.n	8006ae6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ad8:	4b1a      	ldr	r3, [pc, #104]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	4a19      	ldr	r2, [pc, #100]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006ade:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ae2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ae4:	e00f      	b.n	8006b06 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d106      	bne.n	8006afa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006aec:	4b15      	ldr	r3, [pc, #84]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af0:	4a14      	ldr	r2, [pc, #80]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006af6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006af8:	e005      	b.n	8006b06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006afa:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afe:	4a11      	ldr	r2, [pc, #68]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006b06:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a0e      	ldr	r2, [pc, #56]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006b0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b12:	f7fa fbfd 	bl	8001310 <HAL_GetTick>
 8006b16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b18:	e008      	b.n	8006b2c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006b1a:	f7fa fbf9 	bl	8001310 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d901      	bls.n	8006b2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e006      	b.n	8006b3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <RCCEx_PLL2_Config+0x15c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0f0      	beq.n	8006b1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	58024400 	.word	0x58024400
 8006b48:	ffff0007 	.word	0xffff0007

08006b4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b5a:	4b53      	ldr	r3, [pc, #332]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d101      	bne.n	8006b6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e099      	b.n	8006c9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006b6a:	4b4f      	ldr	r3, [pc, #316]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a4e      	ldr	r2, [pc, #312]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b76:	f7fa fbcb 	bl	8001310 <HAL_GetTick>
 8006b7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b7c:	e008      	b.n	8006b90 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b7e:	f7fa fbc7 	bl	8001310 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d901      	bls.n	8006b90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e086      	b.n	8006c9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b90:	4b45      	ldr	r3, [pc, #276]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f0      	bne.n	8006b7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b9c:	4b42      	ldr	r3, [pc, #264]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	051b      	lsls	r3, r3, #20
 8006baa:	493f      	ldr	r1, [pc, #252]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	628b      	str	r3, [r1, #40]	; 0x28
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	025b      	lsls	r3, r3, #9
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	041b      	lsls	r3, r3, #16
 8006bce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	061b      	lsls	r3, r3, #24
 8006bdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006be0:	4931      	ldr	r1, [pc, #196]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006be6:	4b30      	ldr	r3, [pc, #192]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	492d      	ldr	r1, [pc, #180]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006bf8:	4b2b      	ldr	r3, [pc, #172]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	4928      	ldr	r1, [pc, #160]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006c0a:	4b27      	ldr	r3, [pc, #156]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0e:	4a26      	ldr	r2, [pc, #152]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006c16:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c1a:	4b24      	ldr	r3, [pc, #144]	; (8006cac <RCCEx_PLL3_Config+0x160>)
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	69d2      	ldr	r2, [r2, #28]
 8006c22:	00d2      	lsls	r2, r2, #3
 8006c24:	4920      	ldr	r1, [pc, #128]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006c2a:	4b1f      	ldr	r3, [pc, #124]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d106      	bne.n	8006c4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	4a19      	ldr	r2, [pc, #100]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c48:	e00f      	b.n	8006c6a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d106      	bne.n	8006c5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c50:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	4a14      	ldr	r2, [pc, #80]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c5c:	e005      	b.n	8006c6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c5e:	4b12      	ldr	r3, [pc, #72]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c62:	4a11      	ldr	r2, [pc, #68]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a0e      	ldr	r2, [pc, #56]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c76:	f7fa fb4b 	bl	8001310 <HAL_GetTick>
 8006c7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c7c:	e008      	b.n	8006c90 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c7e:	f7fa fb47 	bl	8001310 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d901      	bls.n	8006c90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e006      	b.n	8006c9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c90:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <RCCEx_PLL3_Config+0x15c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f0      	beq.n	8006c7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	58024400 	.word	0x58024400
 8006cac:	ffff0007 	.word	0xffff0007

08006cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e042      	b.n	8006d48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d106      	bne.n	8006cda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fa f88d 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2224      	movs	r2, #36	; 0x24
 8006cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0201 	bic.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fc7c 	bl	80075f0 <UART_SetConfig>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e022      	b.n	8006d48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fadc 	bl	80082c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 fb63 	bl	800840c <UART_CheckIdleState>
 8006d46:	4603      	mov	r3, r0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	; 0x28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d17a      	bne.n	8006e5e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <HAL_UART_Transmit_DMA+0x24>
 8006d6e:	88fb      	ldrh	r3, [r7, #6]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e073      	b.n	8006e60 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <HAL_UART_Transmit_DMA+0x36>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e06c      	b.n	8006e60 <HAL_UART_Transmit_DMA+0x110>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	88fa      	ldrh	r2, [r7, #6]
 8006d98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	88fa      	ldrh	r2, [r7, #6]
 8006da0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2221      	movs	r2, #33	; 0x21
 8006db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d02c      	beq.n	8006e16 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc0:	4a29      	ldr	r2, [pc, #164]	; (8006e68 <HAL_UART_Transmit_DMA+0x118>)
 8006dc2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc8:	4a28      	ldr	r2, [pc, #160]	; (8006e6c <HAL_UART_Transmit_DMA+0x11c>)
 8006dca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dd0:	4a27      	ldr	r2, [pc, #156]	; (8006e70 <HAL_UART_Transmit_DMA+0x120>)
 8006dd2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dd8:	2200      	movs	r2, #0
 8006dda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de4:	4619      	mov	r1, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3328      	adds	r3, #40	; 0x28
 8006dec:	461a      	mov	r2, r3
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	f7fb f812 	bl	8001e18 <HAL_DMA_Start_IT>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2210      	movs	r2, #16
 8006dfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e024      	b.n	8006e60 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2240      	movs	r2, #64	; 0x40
 8006e1c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	613b      	str	r3, [r7, #16]
   return(result);
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3308      	adds	r3, #8
 8006e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e46:	623a      	str	r2, [r7, #32]
 8006e48:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	69f9      	ldr	r1, [r7, #28]
 8006e4c:	6a3a      	ldr	r2, [r7, #32]
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e000      	b.n	8006e60 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006e5e:	2302      	movs	r3, #2
  }
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3728      	adds	r7, #40	; 0x28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	08008781 	.word	0x08008781
 8006e6c:	08008817 	.word	0x08008817
 8006e70:	08008833 	.word	0x08008833

08006e74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b0ba      	sub	sp, #232	; 0xe8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d11b      	bne.n	8006ee8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d015      	beq.n	8006ee8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d105      	bne.n	8006ed4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d009      	beq.n	8006ee8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 835a 	beq.w	8007592 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4798      	blx	r3
      }
      return;
 8006ee6:	e354      	b.n	8007592 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ee8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 811f 	beq.w	8007130 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ef2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006ef6:	4b8b      	ldr	r3, [pc, #556]	; (8007124 <HAL_UART_IRQHandler+0x2b0>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006efe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f02:	4b89      	ldr	r3, [pc, #548]	; (8007128 <HAL_UART_IRQHandler+0x2b4>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 8112 	beq.w	8007130 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d011      	beq.n	8006f3c <HAL_UART_IRQHandler+0xc8>
 8006f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f32:	f043 0201 	orr.w	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d011      	beq.n	8006f6c <HAL_UART_IRQHandler+0xf8>
 8006f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2202      	movs	r2, #2
 8006f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f62:	f043 0204 	orr.w	r2, r3, #4
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d011      	beq.n	8006f9c <HAL_UART_IRQHandler+0x128>
 8006f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2204      	movs	r2, #4
 8006f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f92:	f043 0202 	orr.w	r2, r3, #2
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d017      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006fb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006fb8:	4b5a      	ldr	r3, [pc, #360]	; (8007124 <HAL_UART_IRQHandler+0x2b0>)
 8006fba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fce:	f043 0208 	orr.w	r2, r3, #8
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d012      	beq.n	800700a <HAL_UART_IRQHandler+0x196>
 8006fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00c      	beq.n	800700a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 82c0 	beq.w	8007596 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d013      	beq.n	800704a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d105      	bne.n	800703a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800702e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d007      	beq.n	800704a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007050:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b40      	cmp	r3, #64	; 0x40
 8007060:	d005      	beq.n	800706e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007066:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800706a:	2b00      	cmp	r3, #0
 800706c:	d04f      	beq.n	800710e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 fb20 	bl	80086b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d141      	bne.n	8007106 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3308      	adds	r3, #8
 8007088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800709c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3308      	adds	r3, #8
 80070aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1d9      	bne.n	8007082 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d013      	beq.n	80070fe <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070da:	4a14      	ldr	r2, [pc, #80]	; (800712c <HAL_UART_IRQHandler+0x2b8>)
 80070dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fb fc20 	bl	8002928 <HAL_DMA_Abort_IT>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d017      	beq.n	800711e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80070f8:	4610      	mov	r0, r2
 80070fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070fc:	e00f      	b.n	800711e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa60 	bl	80075c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007104:	e00b      	b.n	800711e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fa5c 	bl	80075c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800710c:	e007      	b.n	800711e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa58 	bl	80075c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800711c:	e23b      	b.n	8007596 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800711e:	bf00      	nop
    return;
 8007120:	e239      	b.n	8007596 <HAL_UART_IRQHandler+0x722>
 8007122:	bf00      	nop
 8007124:	10000001 	.word	0x10000001
 8007128:	04000120 	.word	0x04000120
 800712c:	080088b3 	.word	0x080088b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007134:	2b01      	cmp	r3, #1
 8007136:	f040 81ce 	bne.w	80074d6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800713a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713e:	f003 0310 	and.w	r3, r3, #16
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 81c7 	beq.w	80074d6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 81c0 	beq.w	80074d6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2210      	movs	r2, #16
 800715c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007168:	2b40      	cmp	r3, #64	; 0x40
 800716a:	f040 813b 	bne.w	80073e4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a8b      	ldr	r2, [pc, #556]	; (80073a4 <HAL_UART_IRQHandler+0x530>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d059      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a89      	ldr	r2, [pc, #548]	; (80073a8 <HAL_UART_IRQHandler+0x534>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d053      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a87      	ldr	r2, [pc, #540]	; (80073ac <HAL_UART_IRQHandler+0x538>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d04d      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a85      	ldr	r2, [pc, #532]	; (80073b0 <HAL_UART_IRQHandler+0x53c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d047      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a83      	ldr	r2, [pc, #524]	; (80073b4 <HAL_UART_IRQHandler+0x540>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d041      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a81      	ldr	r2, [pc, #516]	; (80073b8 <HAL_UART_IRQHandler+0x544>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d03b      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a7f      	ldr	r2, [pc, #508]	; (80073bc <HAL_UART_IRQHandler+0x548>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d035      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a7d      	ldr	r2, [pc, #500]	; (80073c0 <HAL_UART_IRQHandler+0x54c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d02f      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a7b      	ldr	r2, [pc, #492]	; (80073c4 <HAL_UART_IRQHandler+0x550>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d029      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a79      	ldr	r2, [pc, #484]	; (80073c8 <HAL_UART_IRQHandler+0x554>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d023      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a77      	ldr	r2, [pc, #476]	; (80073cc <HAL_UART_IRQHandler+0x558>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d01d      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a75      	ldr	r2, [pc, #468]	; (80073d0 <HAL_UART_IRQHandler+0x55c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d017      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a73      	ldr	r2, [pc, #460]	; (80073d4 <HAL_UART_IRQHandler+0x560>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d011      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a71      	ldr	r2, [pc, #452]	; (80073d8 <HAL_UART_IRQHandler+0x564>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00b      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a6f      	ldr	r2, [pc, #444]	; (80073dc <HAL_UART_IRQHandler+0x568>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d005      	beq.n	800722e <HAL_UART_IRQHandler+0x3ba>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a6d      	ldr	r2, [pc, #436]	; (80073e0 <HAL_UART_IRQHandler+0x56c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d105      	bne.n	800723a <HAL_UART_IRQHandler+0x3c6>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	b29b      	uxth	r3, r3
 8007238:	e004      	b.n	8007244 <HAL_UART_IRQHandler+0x3d0>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007248:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 81a4 	beq.w	800759a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007258:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800725c:	429a      	cmp	r2, r3
 800725e:	f080 819c 	bcs.w	800759a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007268:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007276:	f000 8086 	beq.w	8007386 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007286:	e853 3f00 	ldrex	r3, [r3]
 800728a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800728e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007296:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1da      	bne.n	800727a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3308      	adds	r3, #8
 80072ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072d6:	f023 0301 	bic.w	r3, r3, #1
 80072da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e1      	bne.n	80072c4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3308      	adds	r3, #8
 8007306:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007324:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007326:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800732a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e3      	bne.n	8007300 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007356:	f023 0310 	bic.w	r3, r3, #16
 800735a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007368:	65bb      	str	r3, [r7, #88]	; 0x58
 800736a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800736e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e4      	bne.n	8007346 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007380:	4618      	mov	r0, r3
 8007382:	f7fa ffb3 	bl	80022ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007392:	b29b      	uxth	r3, r3
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	b29b      	uxth	r3, r3
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f91c 	bl	80075d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073a0:	e0fb      	b.n	800759a <HAL_UART_IRQHandler+0x726>
 80073a2:	bf00      	nop
 80073a4:	40020010 	.word	0x40020010
 80073a8:	40020028 	.word	0x40020028
 80073ac:	40020040 	.word	0x40020040
 80073b0:	40020058 	.word	0x40020058
 80073b4:	40020070 	.word	0x40020070
 80073b8:	40020088 	.word	0x40020088
 80073bc:	400200a0 	.word	0x400200a0
 80073c0:	400200b8 	.word	0x400200b8
 80073c4:	40020410 	.word	0x40020410
 80073c8:	40020428 	.word	0x40020428
 80073cc:	40020440 	.word	0x40020440
 80073d0:	40020458 	.word	0x40020458
 80073d4:	40020470 	.word	0x40020470
 80073d8:	40020488 	.word	0x40020488
 80073dc:	400204a0 	.word	0x400204a0
 80073e0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 80cc 	beq.w	800759e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007406:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 80c7 	beq.w	800759e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007424:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007432:	647b      	str	r3, [r7, #68]	; 0x44
 8007434:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e4      	bne.n	8007410 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3308      	adds	r3, #8
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	623b      	str	r3, [r7, #32]
   return(result);
 8007456:	6a3a      	ldr	r2, [r7, #32]
 8007458:	4b54      	ldr	r3, [pc, #336]	; (80075ac <HAL_UART_IRQHandler+0x738>)
 800745a:	4013      	ands	r3, r2
 800745c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800746a:	633a      	str	r2, [r7, #48]	; 0x30
 800746c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e3      	bne.n	8007446 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	60fb      	str	r3, [r7, #12]
   return(result);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0310 	bic.w	r3, r3, #16
 80074a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074b4:	61fb      	str	r3, [r7, #28]
 80074b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	69b9      	ldr	r1, [r7, #24]
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	617b      	str	r3, [r7, #20]
   return(result);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e4      	bne.n	8007492 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f882 	bl	80075d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074d4:	e063      	b.n	800759e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00e      	beq.n	8007500 <HAL_UART_IRQHandler+0x68c>
 80074e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d008      	beq.n	8007500 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80074f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 fa1b 	bl	8008934 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074fe:	e051      	b.n	80075a4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007508:	2b00      	cmp	r3, #0
 800750a:	d014      	beq.n	8007536 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800750c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007514:	2b00      	cmp	r3, #0
 8007516:	d105      	bne.n	8007524 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800751c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d008      	beq.n	8007536 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007528:	2b00      	cmp	r3, #0
 800752a:	d03a      	beq.n	80075a2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	4798      	blx	r3
    }
    return;
 8007534:	e035      	b.n	80075a2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753e:	2b00      	cmp	r3, #0
 8007540:	d009      	beq.n	8007556 <HAL_UART_IRQHandler+0x6e2>
 8007542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 f9c5 	bl	80088de <UART_EndTransmit_IT>
    return;
 8007554:	e026      	b.n	80075a4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d009      	beq.n	8007576 <HAL_UART_IRQHandler+0x702>
 8007562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007566:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 f9f4 	bl	800895c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007574:	e016      	b.n	80075a4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d010      	beq.n	80075a4 <HAL_UART_IRQHandler+0x730>
 8007582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007586:	2b00      	cmp	r3, #0
 8007588:	da0c      	bge.n	80075a4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 f9dc 	bl	8008948 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007590:	e008      	b.n	80075a4 <HAL_UART_IRQHandler+0x730>
      return;
 8007592:	bf00      	nop
 8007594:	e006      	b.n	80075a4 <HAL_UART_IRQHandler+0x730>
    return;
 8007596:	bf00      	nop
 8007598:	e004      	b.n	80075a4 <HAL_UART_IRQHandler+0x730>
      return;
 800759a:	bf00      	nop
 800759c:	e002      	b.n	80075a4 <HAL_UART_IRQHandler+0x730>
      return;
 800759e:	bf00      	nop
 80075a0:	e000      	b.n	80075a4 <HAL_UART_IRQHandler+0x730>
    return;
 80075a2:	bf00      	nop
  }
}
 80075a4:	37e8      	adds	r7, #232	; 0xe8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	effffffe 	.word	0xeffffffe

080075b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075f4:	b092      	sub	sp, #72	; 0x48
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	431a      	orrs	r2, r3
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	431a      	orrs	r2, r3
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	4313      	orrs	r3, r2
 8007616:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4bbe      	ldr	r3, [pc, #760]	; (8007918 <UART_SetConfig+0x328>)
 8007620:	4013      	ands	r3, r2
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	6812      	ldr	r2, [r2, #0]
 8007626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007628:	430b      	orrs	r3, r1
 800762a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4ab3      	ldr	r2, [pc, #716]	; (800791c <UART_SetConfig+0x32c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007658:	4313      	orrs	r3, r2
 800765a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	4baf      	ldr	r3, [pc, #700]	; (8007920 <UART_SetConfig+0x330>)
 8007664:	4013      	ands	r3, r2
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800766c:	430b      	orrs	r3, r1
 800766e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007676:	f023 010f 	bic.w	r1, r3, #15
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4aa6      	ldr	r2, [pc, #664]	; (8007924 <UART_SetConfig+0x334>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d177      	bne.n	8007780 <UART_SetConfig+0x190>
 8007690:	4ba5      	ldr	r3, [pc, #660]	; (8007928 <UART_SetConfig+0x338>)
 8007692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007698:	2b28      	cmp	r3, #40	; 0x28
 800769a:	d86d      	bhi.n	8007778 <UART_SetConfig+0x188>
 800769c:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <UART_SetConfig+0xb4>)
 800769e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a2:	bf00      	nop
 80076a4:	08007749 	.word	0x08007749
 80076a8:	08007779 	.word	0x08007779
 80076ac:	08007779 	.word	0x08007779
 80076b0:	08007779 	.word	0x08007779
 80076b4:	08007779 	.word	0x08007779
 80076b8:	08007779 	.word	0x08007779
 80076bc:	08007779 	.word	0x08007779
 80076c0:	08007779 	.word	0x08007779
 80076c4:	08007751 	.word	0x08007751
 80076c8:	08007779 	.word	0x08007779
 80076cc:	08007779 	.word	0x08007779
 80076d0:	08007779 	.word	0x08007779
 80076d4:	08007779 	.word	0x08007779
 80076d8:	08007779 	.word	0x08007779
 80076dc:	08007779 	.word	0x08007779
 80076e0:	08007779 	.word	0x08007779
 80076e4:	08007759 	.word	0x08007759
 80076e8:	08007779 	.word	0x08007779
 80076ec:	08007779 	.word	0x08007779
 80076f0:	08007779 	.word	0x08007779
 80076f4:	08007779 	.word	0x08007779
 80076f8:	08007779 	.word	0x08007779
 80076fc:	08007779 	.word	0x08007779
 8007700:	08007779 	.word	0x08007779
 8007704:	08007761 	.word	0x08007761
 8007708:	08007779 	.word	0x08007779
 800770c:	08007779 	.word	0x08007779
 8007710:	08007779 	.word	0x08007779
 8007714:	08007779 	.word	0x08007779
 8007718:	08007779 	.word	0x08007779
 800771c:	08007779 	.word	0x08007779
 8007720:	08007779 	.word	0x08007779
 8007724:	08007769 	.word	0x08007769
 8007728:	08007779 	.word	0x08007779
 800772c:	08007779 	.word	0x08007779
 8007730:	08007779 	.word	0x08007779
 8007734:	08007779 	.word	0x08007779
 8007738:	08007779 	.word	0x08007779
 800773c:	08007779 	.word	0x08007779
 8007740:	08007779 	.word	0x08007779
 8007744:	08007771 	.word	0x08007771
 8007748:	2301      	movs	r3, #1
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774e:	e326      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007750:	2304      	movs	r3, #4
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007756:	e322      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007758:	2308      	movs	r3, #8
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775e:	e31e      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007760:	2310      	movs	r3, #16
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007766:	e31a      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007768:	2320      	movs	r3, #32
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776e:	e316      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007770:	2340      	movs	r3, #64	; 0x40
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007776:	e312      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007778:	2380      	movs	r3, #128	; 0x80
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777e:	e30e      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a69      	ldr	r2, [pc, #420]	; (800792c <UART_SetConfig+0x33c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d130      	bne.n	80077ec <UART_SetConfig+0x1fc>
 800778a:	4b67      	ldr	r3, [pc, #412]	; (8007928 <UART_SetConfig+0x338>)
 800778c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	2b05      	cmp	r3, #5
 8007794:	d826      	bhi.n	80077e4 <UART_SetConfig+0x1f4>
 8007796:	a201      	add	r2, pc, #4	; (adr r2, 800779c <UART_SetConfig+0x1ac>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077b5 	.word	0x080077b5
 80077a0:	080077bd 	.word	0x080077bd
 80077a4:	080077c5 	.word	0x080077c5
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077d5 	.word	0x080077d5
 80077b0:	080077dd 	.word	0x080077dd
 80077b4:	2300      	movs	r3, #0
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ba:	e2f0      	b.n	8007d9e <UART_SetConfig+0x7ae>
 80077bc:	2304      	movs	r3, #4
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c2:	e2ec      	b.n	8007d9e <UART_SetConfig+0x7ae>
 80077c4:	2308      	movs	r3, #8
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ca:	e2e8      	b.n	8007d9e <UART_SetConfig+0x7ae>
 80077cc:	2310      	movs	r3, #16
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d2:	e2e4      	b.n	8007d9e <UART_SetConfig+0x7ae>
 80077d4:	2320      	movs	r3, #32
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077da:	e2e0      	b.n	8007d9e <UART_SetConfig+0x7ae>
 80077dc:	2340      	movs	r3, #64	; 0x40
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e2dc      	b.n	8007d9e <UART_SetConfig+0x7ae>
 80077e4:	2380      	movs	r3, #128	; 0x80
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ea:	e2d8      	b.n	8007d9e <UART_SetConfig+0x7ae>
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a4f      	ldr	r2, [pc, #316]	; (8007930 <UART_SetConfig+0x340>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d130      	bne.n	8007858 <UART_SetConfig+0x268>
 80077f6:	4b4c      	ldr	r3, [pc, #304]	; (8007928 <UART_SetConfig+0x338>)
 80077f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d826      	bhi.n	8007850 <UART_SetConfig+0x260>
 8007802:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <UART_SetConfig+0x218>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	08007821 	.word	0x08007821
 800780c:	08007829 	.word	0x08007829
 8007810:	08007831 	.word	0x08007831
 8007814:	08007839 	.word	0x08007839
 8007818:	08007841 	.word	0x08007841
 800781c:	08007849 	.word	0x08007849
 8007820:	2300      	movs	r3, #0
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007826:	e2ba      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007828:	2304      	movs	r3, #4
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800782e:	e2b6      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007830:	2308      	movs	r3, #8
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007836:	e2b2      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007838:	2310      	movs	r3, #16
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783e:	e2ae      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007840:	2320      	movs	r3, #32
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007846:	e2aa      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007848:	2340      	movs	r3, #64	; 0x40
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784e:	e2a6      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007850:	2380      	movs	r3, #128	; 0x80
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007856:	e2a2      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a35      	ldr	r2, [pc, #212]	; (8007934 <UART_SetConfig+0x344>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d130      	bne.n	80078c4 <UART_SetConfig+0x2d4>
 8007862:	4b31      	ldr	r3, [pc, #196]	; (8007928 <UART_SetConfig+0x338>)
 8007864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	2b05      	cmp	r3, #5
 800786c:	d826      	bhi.n	80078bc <UART_SetConfig+0x2cc>
 800786e:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <UART_SetConfig+0x284>)
 8007870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007874:	0800788d 	.word	0x0800788d
 8007878:	08007895 	.word	0x08007895
 800787c:	0800789d 	.word	0x0800789d
 8007880:	080078a5 	.word	0x080078a5
 8007884:	080078ad 	.word	0x080078ad
 8007888:	080078b5 	.word	0x080078b5
 800788c:	2300      	movs	r3, #0
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007892:	e284      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007894:	2304      	movs	r3, #4
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800789a:	e280      	b.n	8007d9e <UART_SetConfig+0x7ae>
 800789c:	2308      	movs	r3, #8
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a2:	e27c      	b.n	8007d9e <UART_SetConfig+0x7ae>
 80078a4:	2310      	movs	r3, #16
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078aa:	e278      	b.n	8007d9e <UART_SetConfig+0x7ae>
 80078ac:	2320      	movs	r3, #32
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b2:	e274      	b.n	8007d9e <UART_SetConfig+0x7ae>
 80078b4:	2340      	movs	r3, #64	; 0x40
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ba:	e270      	b.n	8007d9e <UART_SetConfig+0x7ae>
 80078bc:	2380      	movs	r3, #128	; 0x80
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c2:	e26c      	b.n	8007d9e <UART_SetConfig+0x7ae>
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a1b      	ldr	r2, [pc, #108]	; (8007938 <UART_SetConfig+0x348>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d142      	bne.n	8007954 <UART_SetConfig+0x364>
 80078ce:	4b16      	ldr	r3, [pc, #88]	; (8007928 <UART_SetConfig+0x338>)
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	2b05      	cmp	r3, #5
 80078d8:	d838      	bhi.n	800794c <UART_SetConfig+0x35c>
 80078da:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <UART_SetConfig+0x2f0>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	080078f9 	.word	0x080078f9
 80078e4:	08007901 	.word	0x08007901
 80078e8:	08007909 	.word	0x08007909
 80078ec:	08007911 	.word	0x08007911
 80078f0:	0800793d 	.word	0x0800793d
 80078f4:	08007945 	.word	0x08007945
 80078f8:	2300      	movs	r3, #0
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fe:	e24e      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007900:	2304      	movs	r3, #4
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007906:	e24a      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007908:	2308      	movs	r3, #8
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790e:	e246      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007910:	2310      	movs	r3, #16
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007916:	e242      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007918:	cfff69f3 	.word	0xcfff69f3
 800791c:	58000c00 	.word	0x58000c00
 8007920:	11fff4ff 	.word	0x11fff4ff
 8007924:	40011000 	.word	0x40011000
 8007928:	58024400 	.word	0x58024400
 800792c:	40004400 	.word	0x40004400
 8007930:	40004800 	.word	0x40004800
 8007934:	40004c00 	.word	0x40004c00
 8007938:	40005000 	.word	0x40005000
 800793c:	2320      	movs	r3, #32
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007942:	e22c      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007944:	2340      	movs	r3, #64	; 0x40
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794a:	e228      	b.n	8007d9e <UART_SetConfig+0x7ae>
 800794c:	2380      	movs	r3, #128	; 0x80
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007952:	e224      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4ab1      	ldr	r2, [pc, #708]	; (8007c20 <UART_SetConfig+0x630>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d176      	bne.n	8007a4c <UART_SetConfig+0x45c>
 800795e:	4bb1      	ldr	r3, [pc, #708]	; (8007c24 <UART_SetConfig+0x634>)
 8007960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007962:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007966:	2b28      	cmp	r3, #40	; 0x28
 8007968:	d86c      	bhi.n	8007a44 <UART_SetConfig+0x454>
 800796a:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <UART_SetConfig+0x380>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	08007a15 	.word	0x08007a15
 8007974:	08007a45 	.word	0x08007a45
 8007978:	08007a45 	.word	0x08007a45
 800797c:	08007a45 	.word	0x08007a45
 8007980:	08007a45 	.word	0x08007a45
 8007984:	08007a45 	.word	0x08007a45
 8007988:	08007a45 	.word	0x08007a45
 800798c:	08007a45 	.word	0x08007a45
 8007990:	08007a1d 	.word	0x08007a1d
 8007994:	08007a45 	.word	0x08007a45
 8007998:	08007a45 	.word	0x08007a45
 800799c:	08007a45 	.word	0x08007a45
 80079a0:	08007a45 	.word	0x08007a45
 80079a4:	08007a45 	.word	0x08007a45
 80079a8:	08007a45 	.word	0x08007a45
 80079ac:	08007a45 	.word	0x08007a45
 80079b0:	08007a25 	.word	0x08007a25
 80079b4:	08007a45 	.word	0x08007a45
 80079b8:	08007a45 	.word	0x08007a45
 80079bc:	08007a45 	.word	0x08007a45
 80079c0:	08007a45 	.word	0x08007a45
 80079c4:	08007a45 	.word	0x08007a45
 80079c8:	08007a45 	.word	0x08007a45
 80079cc:	08007a45 	.word	0x08007a45
 80079d0:	08007a2d 	.word	0x08007a2d
 80079d4:	08007a45 	.word	0x08007a45
 80079d8:	08007a45 	.word	0x08007a45
 80079dc:	08007a45 	.word	0x08007a45
 80079e0:	08007a45 	.word	0x08007a45
 80079e4:	08007a45 	.word	0x08007a45
 80079e8:	08007a45 	.word	0x08007a45
 80079ec:	08007a45 	.word	0x08007a45
 80079f0:	08007a35 	.word	0x08007a35
 80079f4:	08007a45 	.word	0x08007a45
 80079f8:	08007a45 	.word	0x08007a45
 80079fc:	08007a45 	.word	0x08007a45
 8007a00:	08007a45 	.word	0x08007a45
 8007a04:	08007a45 	.word	0x08007a45
 8007a08:	08007a45 	.word	0x08007a45
 8007a0c:	08007a45 	.word	0x08007a45
 8007a10:	08007a3d 	.word	0x08007a3d
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a1a:	e1c0      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a22:	e1bc      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007a24:	2308      	movs	r3, #8
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2a:	e1b8      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007a2c:	2310      	movs	r3, #16
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a32:	e1b4      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007a34:	2320      	movs	r3, #32
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3a:	e1b0      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007a3c:	2340      	movs	r3, #64	; 0x40
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a42:	e1ac      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007a44:	2380      	movs	r3, #128	; 0x80
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4a:	e1a8      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a75      	ldr	r2, [pc, #468]	; (8007c28 <UART_SetConfig+0x638>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d130      	bne.n	8007ab8 <UART_SetConfig+0x4c8>
 8007a56:	4b73      	ldr	r3, [pc, #460]	; (8007c24 <UART_SetConfig+0x634>)
 8007a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	2b05      	cmp	r3, #5
 8007a60:	d826      	bhi.n	8007ab0 <UART_SetConfig+0x4c0>
 8007a62:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <UART_SetConfig+0x478>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007a81 	.word	0x08007a81
 8007a6c:	08007a89 	.word	0x08007a89
 8007a70:	08007a91 	.word	0x08007a91
 8007a74:	08007a99 	.word	0x08007a99
 8007a78:	08007aa1 	.word	0x08007aa1
 8007a7c:	08007aa9 	.word	0x08007aa9
 8007a80:	2300      	movs	r3, #0
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a86:	e18a      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007a88:	2304      	movs	r3, #4
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a8e:	e186      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007a90:	2308      	movs	r3, #8
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a96:	e182      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007a98:	2310      	movs	r3, #16
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9e:	e17e      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007aa0:	2320      	movs	r3, #32
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa6:	e17a      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007aa8:	2340      	movs	r3, #64	; 0x40
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aae:	e176      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007ab0:	2380      	movs	r3, #128	; 0x80
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab6:	e172      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a5b      	ldr	r2, [pc, #364]	; (8007c2c <UART_SetConfig+0x63c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d130      	bne.n	8007b24 <UART_SetConfig+0x534>
 8007ac2:	4b58      	ldr	r3, [pc, #352]	; (8007c24 <UART_SetConfig+0x634>)
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b05      	cmp	r3, #5
 8007acc:	d826      	bhi.n	8007b1c <UART_SetConfig+0x52c>
 8007ace:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <UART_SetConfig+0x4e4>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007aed 	.word	0x08007aed
 8007ad8:	08007af5 	.word	0x08007af5
 8007adc:	08007afd 	.word	0x08007afd
 8007ae0:	08007b05 	.word	0x08007b05
 8007ae4:	08007b0d 	.word	0x08007b0d
 8007ae8:	08007b15 	.word	0x08007b15
 8007aec:	2300      	movs	r3, #0
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af2:	e154      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007af4:	2304      	movs	r3, #4
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afa:	e150      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007afc:	2308      	movs	r3, #8
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b02:	e14c      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007b04:	2310      	movs	r3, #16
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0a:	e148      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007b0c:	2320      	movs	r3, #32
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b12:	e144      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007b14:	2340      	movs	r3, #64	; 0x40
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1a:	e140      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007b1c:	2380      	movs	r3, #128	; 0x80
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b22:	e13c      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a41      	ldr	r2, [pc, #260]	; (8007c30 <UART_SetConfig+0x640>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	f040 8082 	bne.w	8007c34 <UART_SetConfig+0x644>
 8007b30:	4b3c      	ldr	r3, [pc, #240]	; (8007c24 <UART_SetConfig+0x634>)
 8007b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b38:	2b28      	cmp	r3, #40	; 0x28
 8007b3a:	d86d      	bhi.n	8007c18 <UART_SetConfig+0x628>
 8007b3c:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <UART_SetConfig+0x554>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007be9 	.word	0x08007be9
 8007b48:	08007c19 	.word	0x08007c19
 8007b4c:	08007c19 	.word	0x08007c19
 8007b50:	08007c19 	.word	0x08007c19
 8007b54:	08007c19 	.word	0x08007c19
 8007b58:	08007c19 	.word	0x08007c19
 8007b5c:	08007c19 	.word	0x08007c19
 8007b60:	08007c19 	.word	0x08007c19
 8007b64:	08007bf1 	.word	0x08007bf1
 8007b68:	08007c19 	.word	0x08007c19
 8007b6c:	08007c19 	.word	0x08007c19
 8007b70:	08007c19 	.word	0x08007c19
 8007b74:	08007c19 	.word	0x08007c19
 8007b78:	08007c19 	.word	0x08007c19
 8007b7c:	08007c19 	.word	0x08007c19
 8007b80:	08007c19 	.word	0x08007c19
 8007b84:	08007bf9 	.word	0x08007bf9
 8007b88:	08007c19 	.word	0x08007c19
 8007b8c:	08007c19 	.word	0x08007c19
 8007b90:	08007c19 	.word	0x08007c19
 8007b94:	08007c19 	.word	0x08007c19
 8007b98:	08007c19 	.word	0x08007c19
 8007b9c:	08007c19 	.word	0x08007c19
 8007ba0:	08007c19 	.word	0x08007c19
 8007ba4:	08007c01 	.word	0x08007c01
 8007ba8:	08007c19 	.word	0x08007c19
 8007bac:	08007c19 	.word	0x08007c19
 8007bb0:	08007c19 	.word	0x08007c19
 8007bb4:	08007c19 	.word	0x08007c19
 8007bb8:	08007c19 	.word	0x08007c19
 8007bbc:	08007c19 	.word	0x08007c19
 8007bc0:	08007c19 	.word	0x08007c19
 8007bc4:	08007c09 	.word	0x08007c09
 8007bc8:	08007c19 	.word	0x08007c19
 8007bcc:	08007c19 	.word	0x08007c19
 8007bd0:	08007c19 	.word	0x08007c19
 8007bd4:	08007c19 	.word	0x08007c19
 8007bd8:	08007c19 	.word	0x08007c19
 8007bdc:	08007c19 	.word	0x08007c19
 8007be0:	08007c19 	.word	0x08007c19
 8007be4:	08007c11 	.word	0x08007c11
 8007be8:	2301      	movs	r3, #1
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bee:	e0d6      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf6:	e0d2      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007bf8:	2308      	movs	r3, #8
 8007bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfe:	e0ce      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007c00:	2310      	movs	r3, #16
 8007c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c06:	e0ca      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007c08:	2320      	movs	r3, #32
 8007c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0e:	e0c6      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007c10:	2340      	movs	r3, #64	; 0x40
 8007c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c16:	e0c2      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007c18:	2380      	movs	r3, #128	; 0x80
 8007c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1e:	e0be      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007c20:	40011400 	.word	0x40011400
 8007c24:	58024400 	.word	0x58024400
 8007c28:	40007800 	.word	0x40007800
 8007c2c:	40007c00 	.word	0x40007c00
 8007c30:	40011800 	.word	0x40011800
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4aad      	ldr	r2, [pc, #692]	; (8007ef0 <UART_SetConfig+0x900>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d176      	bne.n	8007d2c <UART_SetConfig+0x73c>
 8007c3e:	4bad      	ldr	r3, [pc, #692]	; (8007ef4 <UART_SetConfig+0x904>)
 8007c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c46:	2b28      	cmp	r3, #40	; 0x28
 8007c48:	d86c      	bhi.n	8007d24 <UART_SetConfig+0x734>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0x660>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007cf5 	.word	0x08007cf5
 8007c54:	08007d25 	.word	0x08007d25
 8007c58:	08007d25 	.word	0x08007d25
 8007c5c:	08007d25 	.word	0x08007d25
 8007c60:	08007d25 	.word	0x08007d25
 8007c64:	08007d25 	.word	0x08007d25
 8007c68:	08007d25 	.word	0x08007d25
 8007c6c:	08007d25 	.word	0x08007d25
 8007c70:	08007cfd 	.word	0x08007cfd
 8007c74:	08007d25 	.word	0x08007d25
 8007c78:	08007d25 	.word	0x08007d25
 8007c7c:	08007d25 	.word	0x08007d25
 8007c80:	08007d25 	.word	0x08007d25
 8007c84:	08007d25 	.word	0x08007d25
 8007c88:	08007d25 	.word	0x08007d25
 8007c8c:	08007d25 	.word	0x08007d25
 8007c90:	08007d05 	.word	0x08007d05
 8007c94:	08007d25 	.word	0x08007d25
 8007c98:	08007d25 	.word	0x08007d25
 8007c9c:	08007d25 	.word	0x08007d25
 8007ca0:	08007d25 	.word	0x08007d25
 8007ca4:	08007d25 	.word	0x08007d25
 8007ca8:	08007d25 	.word	0x08007d25
 8007cac:	08007d25 	.word	0x08007d25
 8007cb0:	08007d0d 	.word	0x08007d0d
 8007cb4:	08007d25 	.word	0x08007d25
 8007cb8:	08007d25 	.word	0x08007d25
 8007cbc:	08007d25 	.word	0x08007d25
 8007cc0:	08007d25 	.word	0x08007d25
 8007cc4:	08007d25 	.word	0x08007d25
 8007cc8:	08007d25 	.word	0x08007d25
 8007ccc:	08007d25 	.word	0x08007d25
 8007cd0:	08007d15 	.word	0x08007d15
 8007cd4:	08007d25 	.word	0x08007d25
 8007cd8:	08007d25 	.word	0x08007d25
 8007cdc:	08007d25 	.word	0x08007d25
 8007ce0:	08007d25 	.word	0x08007d25
 8007ce4:	08007d25 	.word	0x08007d25
 8007ce8:	08007d25 	.word	0x08007d25
 8007cec:	08007d25 	.word	0x08007d25
 8007cf0:	08007d1d 	.word	0x08007d1d
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cfa:	e050      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d02:	e04c      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d04:	2308      	movs	r3, #8
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0a:	e048      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d12:	e044      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d14:	2320      	movs	r3, #32
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1a:	e040      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d1c:	2340      	movs	r3, #64	; 0x40
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d22:	e03c      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d24:	2380      	movs	r3, #128	; 0x80
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2a:	e038      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a71      	ldr	r2, [pc, #452]	; (8007ef8 <UART_SetConfig+0x908>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d130      	bne.n	8007d98 <UART_SetConfig+0x7a8>
 8007d36:	4b6f      	ldr	r3, [pc, #444]	; (8007ef4 <UART_SetConfig+0x904>)
 8007d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	2b05      	cmp	r3, #5
 8007d40:	d826      	bhi.n	8007d90 <UART_SetConfig+0x7a0>
 8007d42:	a201      	add	r2, pc, #4	; (adr r2, 8007d48 <UART_SetConfig+0x758>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007d61 	.word	0x08007d61
 8007d4c:	08007d69 	.word	0x08007d69
 8007d50:	08007d71 	.word	0x08007d71
 8007d54:	08007d79 	.word	0x08007d79
 8007d58:	08007d81 	.word	0x08007d81
 8007d5c:	08007d89 	.word	0x08007d89
 8007d60:	2302      	movs	r3, #2
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d66:	e01a      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6e:	e016      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d70:	2308      	movs	r3, #8
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d76:	e012      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d78:	2310      	movs	r3, #16
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7e:	e00e      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d80:	2320      	movs	r3, #32
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d86:	e00a      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d88:	2340      	movs	r3, #64	; 0x40
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8e:	e006      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d90:	2380      	movs	r3, #128	; 0x80
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d96:	e002      	b.n	8007d9e <UART_SetConfig+0x7ae>
 8007d98:	2380      	movs	r3, #128	; 0x80
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a55      	ldr	r2, [pc, #340]	; (8007ef8 <UART_SetConfig+0x908>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	f040 80f8 	bne.w	8007f9a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007daa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	dc46      	bgt.n	8007e40 <UART_SetConfig+0x850>
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	db75      	blt.n	8007ea2 <UART_SetConfig+0x8b2>
 8007db6:	3b02      	subs	r3, #2
 8007db8:	2b1e      	cmp	r3, #30
 8007dba:	d872      	bhi.n	8007ea2 <UART_SetConfig+0x8b2>
 8007dbc:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <UART_SetConfig+0x7d4>)
 8007dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc2:	bf00      	nop
 8007dc4:	08007e47 	.word	0x08007e47
 8007dc8:	08007ea3 	.word	0x08007ea3
 8007dcc:	08007e4f 	.word	0x08007e4f
 8007dd0:	08007ea3 	.word	0x08007ea3
 8007dd4:	08007ea3 	.word	0x08007ea3
 8007dd8:	08007ea3 	.word	0x08007ea3
 8007ddc:	08007e5f 	.word	0x08007e5f
 8007de0:	08007ea3 	.word	0x08007ea3
 8007de4:	08007ea3 	.word	0x08007ea3
 8007de8:	08007ea3 	.word	0x08007ea3
 8007dec:	08007ea3 	.word	0x08007ea3
 8007df0:	08007ea3 	.word	0x08007ea3
 8007df4:	08007ea3 	.word	0x08007ea3
 8007df8:	08007ea3 	.word	0x08007ea3
 8007dfc:	08007e6f 	.word	0x08007e6f
 8007e00:	08007ea3 	.word	0x08007ea3
 8007e04:	08007ea3 	.word	0x08007ea3
 8007e08:	08007ea3 	.word	0x08007ea3
 8007e0c:	08007ea3 	.word	0x08007ea3
 8007e10:	08007ea3 	.word	0x08007ea3
 8007e14:	08007ea3 	.word	0x08007ea3
 8007e18:	08007ea3 	.word	0x08007ea3
 8007e1c:	08007ea3 	.word	0x08007ea3
 8007e20:	08007ea3 	.word	0x08007ea3
 8007e24:	08007ea3 	.word	0x08007ea3
 8007e28:	08007ea3 	.word	0x08007ea3
 8007e2c:	08007ea3 	.word	0x08007ea3
 8007e30:	08007ea3 	.word	0x08007ea3
 8007e34:	08007ea3 	.word	0x08007ea3
 8007e38:	08007ea3 	.word	0x08007ea3
 8007e3c:	08007e95 	.word	0x08007e95
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	d02a      	beq.n	8007e9a <UART_SetConfig+0x8aa>
 8007e44:	e02d      	b.n	8007ea2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007e46:	f7fe fb11 	bl	800646c <HAL_RCCEx_GetD3PCLK1Freq>
 8007e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e4c:	e02f      	b.n	8007eae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fe fb20 	bl	8006498 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e5c:	e027      	b.n	8007eae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e5e:	f107 0318 	add.w	r3, r7, #24
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe fc6c 	bl	8006740 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e6c:	e01f      	b.n	8007eae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e6e:	4b21      	ldr	r3, [pc, #132]	; (8007ef4 <UART_SetConfig+0x904>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e7a:	4b1e      	ldr	r3, [pc, #120]	; (8007ef4 <UART_SetConfig+0x904>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	08db      	lsrs	r3, r3, #3
 8007e80:	f003 0303 	and.w	r3, r3, #3
 8007e84:	4a1d      	ldr	r2, [pc, #116]	; (8007efc <UART_SetConfig+0x90c>)
 8007e86:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e8c:	e00f      	b.n	8007eae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007e8e:	4b1b      	ldr	r3, [pc, #108]	; (8007efc <UART_SetConfig+0x90c>)
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e92:	e00c      	b.n	8007eae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e94:	4b1a      	ldr	r3, [pc, #104]	; (8007f00 <UART_SetConfig+0x910>)
 8007e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e98:	e009      	b.n	8007eae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ea0:	e005      	b.n	8007eae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007eac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 81ee 	beq.w	8008292 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	4a12      	ldr	r2, [pc, #72]	; (8007f04 <UART_SetConfig+0x914>)
 8007ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ec8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	4413      	add	r3, r2
 8007ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d305      	bcc.n	8007ee6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d910      	bls.n	8007f08 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007eec:	e1d1      	b.n	8008292 <UART_SetConfig+0xca2>
 8007eee:	bf00      	nop
 8007ef0:	40011c00 	.word	0x40011c00
 8007ef4:	58024400 	.word	0x58024400
 8007ef8:	58000c00 	.word	0x58000c00
 8007efc:	03d09000 	.word	0x03d09000
 8007f00:	003d0900 	.word	0x003d0900
 8007f04:	08009ccc 	.word	0x08009ccc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	60bb      	str	r3, [r7, #8]
 8007f0e:	60fa      	str	r2, [r7, #12]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	4ac0      	ldr	r2, [pc, #768]	; (8008218 <UART_SetConfig+0xc28>)
 8007f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	607a      	str	r2, [r7, #4]
 8007f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f2a:	f7f8 fa41 	bl	80003b0 <__aeabi_uldivmod>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4610      	mov	r0, r2
 8007f34:	4619      	mov	r1, r3
 8007f36:	f04f 0200 	mov.w	r2, #0
 8007f3a:	f04f 0300 	mov.w	r3, #0
 8007f3e:	020b      	lsls	r3, r1, #8
 8007f40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f44:	0202      	lsls	r2, r0, #8
 8007f46:	6979      	ldr	r1, [r7, #20]
 8007f48:	6849      	ldr	r1, [r1, #4]
 8007f4a:	0849      	lsrs	r1, r1, #1
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	4605      	mov	r5, r0
 8007f52:	eb12 0804 	adds.w	r8, r2, r4
 8007f56:	eb43 0905 	adc.w	r9, r3, r5
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	469a      	mov	sl, r3
 8007f62:	4693      	mov	fp, r2
 8007f64:	4652      	mov	r2, sl
 8007f66:	465b      	mov	r3, fp
 8007f68:	4640      	mov	r0, r8
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	f7f8 fa20 	bl	80003b0 <__aeabi_uldivmod>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4613      	mov	r3, r2
 8007f76:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f7e:	d308      	bcc.n	8007f92 <UART_SetConfig+0x9a2>
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f86:	d204      	bcs.n	8007f92 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f8e:	60da      	str	r2, [r3, #12]
 8007f90:	e17f      	b.n	8008292 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f98:	e17b      	b.n	8008292 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fa2:	f040 80bd 	bne.w	8008120 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007fa6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007faa:	2b20      	cmp	r3, #32
 8007fac:	dc48      	bgt.n	8008040 <UART_SetConfig+0xa50>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	db7b      	blt.n	80080aa <UART_SetConfig+0xaba>
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d879      	bhi.n	80080aa <UART_SetConfig+0xaba>
 8007fb6:	a201      	add	r2, pc, #4	; (adr r2, 8007fbc <UART_SetConfig+0x9cc>)
 8007fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbc:	08008047 	.word	0x08008047
 8007fc0:	0800804f 	.word	0x0800804f
 8007fc4:	080080ab 	.word	0x080080ab
 8007fc8:	080080ab 	.word	0x080080ab
 8007fcc:	08008057 	.word	0x08008057
 8007fd0:	080080ab 	.word	0x080080ab
 8007fd4:	080080ab 	.word	0x080080ab
 8007fd8:	080080ab 	.word	0x080080ab
 8007fdc:	08008067 	.word	0x08008067
 8007fe0:	080080ab 	.word	0x080080ab
 8007fe4:	080080ab 	.word	0x080080ab
 8007fe8:	080080ab 	.word	0x080080ab
 8007fec:	080080ab 	.word	0x080080ab
 8007ff0:	080080ab 	.word	0x080080ab
 8007ff4:	080080ab 	.word	0x080080ab
 8007ff8:	080080ab 	.word	0x080080ab
 8007ffc:	08008077 	.word	0x08008077
 8008000:	080080ab 	.word	0x080080ab
 8008004:	080080ab 	.word	0x080080ab
 8008008:	080080ab 	.word	0x080080ab
 800800c:	080080ab 	.word	0x080080ab
 8008010:	080080ab 	.word	0x080080ab
 8008014:	080080ab 	.word	0x080080ab
 8008018:	080080ab 	.word	0x080080ab
 800801c:	080080ab 	.word	0x080080ab
 8008020:	080080ab 	.word	0x080080ab
 8008024:	080080ab 	.word	0x080080ab
 8008028:	080080ab 	.word	0x080080ab
 800802c:	080080ab 	.word	0x080080ab
 8008030:	080080ab 	.word	0x080080ab
 8008034:	080080ab 	.word	0x080080ab
 8008038:	080080ab 	.word	0x080080ab
 800803c:	0800809d 	.word	0x0800809d
 8008040:	2b40      	cmp	r3, #64	; 0x40
 8008042:	d02e      	beq.n	80080a2 <UART_SetConfig+0xab2>
 8008044:	e031      	b.n	80080aa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008046:	f7fd faeb 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 800804a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800804c:	e033      	b.n	80080b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800804e:	f7fd fafd 	bl	800564c <HAL_RCC_GetPCLK2Freq>
 8008052:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008054:	e02f      	b.n	80080b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fa1c 	bl	8006498 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008064:	e027      	b.n	80080b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008066:	f107 0318 	add.w	r3, r7, #24
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe fb68 	bl	8006740 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008074:	e01f      	b.n	80080b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008076:	4b69      	ldr	r3, [pc, #420]	; (800821c <UART_SetConfig+0xc2c>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0320 	and.w	r3, r3, #32
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008082:	4b66      	ldr	r3, [pc, #408]	; (800821c <UART_SetConfig+0xc2c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	08db      	lsrs	r3, r3, #3
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	4a64      	ldr	r2, [pc, #400]	; (8008220 <UART_SetConfig+0xc30>)
 800808e:	fa22 f303 	lsr.w	r3, r2, r3
 8008092:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008094:	e00f      	b.n	80080b6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008096:	4b62      	ldr	r3, [pc, #392]	; (8008220 <UART_SetConfig+0xc30>)
 8008098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800809a:	e00c      	b.n	80080b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800809c:	4b61      	ldr	r3, [pc, #388]	; (8008224 <UART_SetConfig+0xc34>)
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a0:	e009      	b.n	80080b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a8:	e005      	b.n	80080b6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80080b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 80ea 	beq.w	8008292 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	4a55      	ldr	r2, [pc, #340]	; (8008218 <UART_SetConfig+0xc28>)
 80080c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080c8:	461a      	mov	r2, r3
 80080ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80080d0:	005a      	lsls	r2, r3, #1
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	085b      	lsrs	r3, r3, #1
 80080d8:	441a      	add	r2, r3
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e6:	2b0f      	cmp	r3, #15
 80080e8:	d916      	bls.n	8008118 <UART_SetConfig+0xb28>
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f0:	d212      	bcs.n	8008118 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f023 030f 	bic.w	r3, r3, #15
 80080fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fe:	085b      	lsrs	r3, r3, #1
 8008100:	b29b      	uxth	r3, r3
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	b29a      	uxth	r2, r3
 8008108:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800810a:	4313      	orrs	r3, r2
 800810c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008114:	60da      	str	r2, [r3, #12]
 8008116:	e0bc      	b.n	8008292 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800811e:	e0b8      	b.n	8008292 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008120:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008124:	2b20      	cmp	r3, #32
 8008126:	dc4b      	bgt.n	80081c0 <UART_SetConfig+0xbd0>
 8008128:	2b00      	cmp	r3, #0
 800812a:	f2c0 8087 	blt.w	800823c <UART_SetConfig+0xc4c>
 800812e:	2b20      	cmp	r3, #32
 8008130:	f200 8084 	bhi.w	800823c <UART_SetConfig+0xc4c>
 8008134:	a201      	add	r2, pc, #4	; (adr r2, 800813c <UART_SetConfig+0xb4c>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	080081c7 	.word	0x080081c7
 8008140:	080081cf 	.word	0x080081cf
 8008144:	0800823d 	.word	0x0800823d
 8008148:	0800823d 	.word	0x0800823d
 800814c:	080081d7 	.word	0x080081d7
 8008150:	0800823d 	.word	0x0800823d
 8008154:	0800823d 	.word	0x0800823d
 8008158:	0800823d 	.word	0x0800823d
 800815c:	080081e7 	.word	0x080081e7
 8008160:	0800823d 	.word	0x0800823d
 8008164:	0800823d 	.word	0x0800823d
 8008168:	0800823d 	.word	0x0800823d
 800816c:	0800823d 	.word	0x0800823d
 8008170:	0800823d 	.word	0x0800823d
 8008174:	0800823d 	.word	0x0800823d
 8008178:	0800823d 	.word	0x0800823d
 800817c:	080081f7 	.word	0x080081f7
 8008180:	0800823d 	.word	0x0800823d
 8008184:	0800823d 	.word	0x0800823d
 8008188:	0800823d 	.word	0x0800823d
 800818c:	0800823d 	.word	0x0800823d
 8008190:	0800823d 	.word	0x0800823d
 8008194:	0800823d 	.word	0x0800823d
 8008198:	0800823d 	.word	0x0800823d
 800819c:	0800823d 	.word	0x0800823d
 80081a0:	0800823d 	.word	0x0800823d
 80081a4:	0800823d 	.word	0x0800823d
 80081a8:	0800823d 	.word	0x0800823d
 80081ac:	0800823d 	.word	0x0800823d
 80081b0:	0800823d 	.word	0x0800823d
 80081b4:	0800823d 	.word	0x0800823d
 80081b8:	0800823d 	.word	0x0800823d
 80081bc:	0800822f 	.word	0x0800822f
 80081c0:	2b40      	cmp	r3, #64	; 0x40
 80081c2:	d037      	beq.n	8008234 <UART_SetConfig+0xc44>
 80081c4:	e03a      	b.n	800823c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081c6:	f7fd fa2b 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 80081ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80081cc:	e03c      	b.n	8008248 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081ce:	f7fd fa3d 	bl	800564c <HAL_RCC_GetPCLK2Freq>
 80081d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80081d4:	e038      	b.n	8008248 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe f95c 	bl	8006498 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e4:	e030      	b.n	8008248 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081e6:	f107 0318 	add.w	r3, r7, #24
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fe faa8 	bl	8006740 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f4:	e028      	b.n	8008248 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081f6:	4b09      	ldr	r3, [pc, #36]	; (800821c <UART_SetConfig+0xc2c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d012      	beq.n	8008228 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008202:	4b06      	ldr	r3, [pc, #24]	; (800821c <UART_SetConfig+0xc2c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	08db      	lsrs	r3, r3, #3
 8008208:	f003 0303 	and.w	r3, r3, #3
 800820c:	4a04      	ldr	r2, [pc, #16]	; (8008220 <UART_SetConfig+0xc30>)
 800820e:	fa22 f303 	lsr.w	r3, r2, r3
 8008212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008214:	e018      	b.n	8008248 <UART_SetConfig+0xc58>
 8008216:	bf00      	nop
 8008218:	08009ccc 	.word	0x08009ccc
 800821c:	58024400 	.word	0x58024400
 8008220:	03d09000 	.word	0x03d09000
 8008224:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008228:	4b24      	ldr	r3, [pc, #144]	; (80082bc <UART_SetConfig+0xccc>)
 800822a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800822c:	e00c      	b.n	8008248 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800822e:	4b24      	ldr	r3, [pc, #144]	; (80082c0 <UART_SetConfig+0xcd0>)
 8008230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008232:	e009      	b.n	8008248 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008238:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800823a:	e005      	b.n	8008248 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800823c:	2300      	movs	r3, #0
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008246:	bf00      	nop
    }

    if (pclk != 0U)
 8008248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d021      	beq.n	8008292 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	4a1c      	ldr	r2, [pc, #112]	; (80082c4 <UART_SetConfig+0xcd4>)
 8008254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008258:	461a      	mov	r2, r3
 800825a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	085b      	lsrs	r3, r3, #1
 8008266:	441a      	add	r2, r3
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008270:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	2b0f      	cmp	r3, #15
 8008276:	d909      	bls.n	800828c <UART_SetConfig+0xc9c>
 8008278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800827e:	d205      	bcs.n	800828c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	b29a      	uxth	r2, r3
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60da      	str	r2, [r3, #12]
 800828a:	e002      	b.n	8008292 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2201      	movs	r2, #1
 8008296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2201      	movs	r2, #1
 800829e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2200      	movs	r2, #0
 80082a6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2200      	movs	r2, #0
 80082ac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80082ae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3748      	adds	r7, #72	; 0x48
 80082b6:	46bd      	mov	sp, r7
 80082b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082bc:	03d09000 	.word	0x03d09000
 80082c0:	003d0900 	.word	0x003d0900
 80082c4:	08009ccc 	.word	0x08009ccc

080082c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f6:	f003 0302 	and.w	r3, r3, #2
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00a      	beq.n	8008314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	f003 0308 	and.w	r3, r3, #8
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00a      	beq.n	800837a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01a      	beq.n	80083de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083c6:	d10a      	bne.n	80083de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	605a      	str	r2, [r3, #4]
  }
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af02      	add	r7, sp, #8
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800841c:	f7f8 ff78 	bl	8001310 <HAL_GetTick>
 8008420:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0308 	and.w	r3, r3, #8
 800842c:	2b08      	cmp	r3, #8
 800842e:	d10e      	bne.n	800844e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f82f 	bl	80084a2 <UART_WaitOnFlagUntilTimeout>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e025      	b.n	800849a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0304 	and.w	r3, r3, #4
 8008458:	2b04      	cmp	r3, #4
 800845a:	d10e      	bne.n	800847a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800845c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f819 	bl	80084a2 <UART_WaitOnFlagUntilTimeout>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e00f      	b.n	800849a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2220      	movs	r2, #32
 8008486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b09c      	sub	sp, #112	; 0x70
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	603b      	str	r3, [r7, #0]
 80084ae:	4613      	mov	r3, r2
 80084b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b2:	e0a9      	b.n	8008608 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084ba:	f000 80a5 	beq.w	8008608 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084be:	f7f8 ff27 	bl	8001310 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d302      	bcc.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80084ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d140      	bne.n	8008556 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084e8:	667b      	str	r3, [r7, #100]	; 0x64
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	461a      	mov	r2, r3
 80084f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e6      	bne.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3308      	adds	r3, #8
 800850c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	f023 0301 	bic.w	r3, r3, #1
 800851c:	663b      	str	r3, [r7, #96]	; 0x60
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3308      	adds	r3, #8
 8008524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008526:	64ba      	str	r2, [r7, #72]	; 0x48
 8008528:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800852c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e5      	bne.n	8008506 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2220      	movs	r2, #32
 800853e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2220      	movs	r2, #32
 8008546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e069      	b.n	800862a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0304 	and.w	r3, r3, #4
 8008560:	2b00      	cmp	r3, #0
 8008562:	d051      	beq.n	8008608 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800856e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008572:	d149      	bne.n	8008608 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800857c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	e853 3f00 	ldrex	r3, [r3]
 800858a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008592:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	461a      	mov	r2, r3
 800859a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800859c:	637b      	str	r3, [r7, #52]	; 0x34
 800859e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085a4:	e841 2300 	strex	r3, r2, [r1]
 80085a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e6      	bne.n	800857e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3308      	adds	r3, #8
 80085b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	e853 3f00 	ldrex	r3, [r3]
 80085be:	613b      	str	r3, [r7, #16]
   return(result);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f023 0301 	bic.w	r3, r3, #1
 80085c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3308      	adds	r3, #8
 80085ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085d0:	623a      	str	r2, [r7, #32]
 80085d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	69f9      	ldr	r1, [r7, #28]
 80085d6:	6a3a      	ldr	r2, [r7, #32]
 80085d8:	e841 2300 	strex	r3, r2, [r1]
 80085dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e5      	bne.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2220      	movs	r2, #32
 80085f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2220      	movs	r2, #32
 80085f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e010      	b.n	800862a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	69da      	ldr	r2, [r3, #28]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	4013      	ands	r3, r2
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	429a      	cmp	r2, r3
 8008616:	bf0c      	ite	eq
 8008618:	2301      	moveq	r3, #1
 800861a:	2300      	movne	r3, #0
 800861c:	b2db      	uxtb	r3, r3
 800861e:	461a      	mov	r2, r3
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	429a      	cmp	r2, r3
 8008624:	f43f af46 	beq.w	80084b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3770      	adds	r7, #112	; 0x70
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008632:	b480      	push	{r7}
 8008634:	b08f      	sub	sp, #60	; 0x3c
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	e853 3f00 	ldrex	r3, [r3]
 8008646:	61fb      	str	r3, [r7, #28]
   return(result);
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800864e:	637b      	str	r3, [r7, #52]	; 0x34
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	461a      	mov	r2, r3
 8008656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800865a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800865e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008660:	e841 2300 	strex	r3, r2, [r1]
 8008664:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e6      	bne.n	800863a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3308      	adds	r3, #8
 8008672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	e853 3f00 	ldrex	r3, [r3]
 800867a:	60bb      	str	r3, [r7, #8]
   return(result);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008682:	633b      	str	r3, [r7, #48]	; 0x30
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3308      	adds	r3, #8
 800868a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800868c:	61ba      	str	r2, [r7, #24]
 800868e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	6979      	ldr	r1, [r7, #20]
 8008692:	69ba      	ldr	r2, [r7, #24]
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	613b      	str	r3, [r7, #16]
   return(result);
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e5      	bne.n	800866c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80086a8:	bf00      	nop
 80086aa:	373c      	adds	r7, #60	; 0x3c
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b095      	sub	sp, #84	; 0x54
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086da:	643b      	str	r3, [r7, #64]	; 0x40
 80086dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e6      	bne.n	80086bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3308      	adds	r3, #8
 80086f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	e853 3f00 	ldrex	r3, [r3]
 80086fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80086fe:	69fa      	ldr	r2, [r7, #28]
 8008700:	4b1e      	ldr	r3, [pc, #120]	; (800877c <UART_EndRxTransfer+0xc8>)
 8008702:	4013      	ands	r3, r2
 8008704:	64bb      	str	r3, [r7, #72]	; 0x48
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3308      	adds	r3, #8
 800870c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800870e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008716:	e841 2300 	strex	r3, r2, [r1]
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1e5      	bne.n	80086ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008726:	2b01      	cmp	r3, #1
 8008728:	d118      	bne.n	800875c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	60bb      	str	r3, [r7, #8]
   return(result);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f023 0310 	bic.w	r3, r3, #16
 800873e:	647b      	str	r3, [r7, #68]	; 0x44
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	6979      	ldr	r1, [r7, #20]
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	613b      	str	r3, [r7, #16]
   return(result);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e6      	bne.n	800872a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2220      	movs	r2, #32
 8008760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008770:	bf00      	nop
 8008772:	3754      	adds	r7, #84	; 0x54
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	effffffe 	.word	0xeffffffe

08008780 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b090      	sub	sp, #64	; 0x40
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008796:	d037      	beq.n	8008808 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800879a:	2200      	movs	r2, #0
 800879c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80087a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3308      	adds	r3, #8
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	623b      	str	r3, [r7, #32]
   return(result);
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80087b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3308      	adds	r3, #8
 80087be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087c0:	633a      	str	r2, [r7, #48]	; 0x30
 80087c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e5      	bne.n	80087a0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e8:	637b      	str	r3, [r7, #52]	; 0x34
 80087ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f2:	61fb      	str	r3, [r7, #28]
 80087f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	69b9      	ldr	r1, [r7, #24]
 80087f8:	69fa      	ldr	r2, [r7, #28]
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e6      	bne.n	80087d4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008806:	e002      	b.n	800880e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008808:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800880a:	f7f8 f853 	bl	80008b4 <HAL_UART_TxCpltCallback>
}
 800880e:	bf00      	nop
 8008810:	3740      	adds	r7, #64	; 0x40
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f7fe fec3 	bl	80075b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b086      	sub	sp, #24
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008846:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800884e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885a:	2b80      	cmp	r3, #128	; 0x80
 800885c:	d109      	bne.n	8008872 <UART_DMAError+0x40>
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2b21      	cmp	r3, #33	; 0x21
 8008862:	d106      	bne.n	8008872 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2200      	movs	r2, #0
 8008868:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800886c:	6978      	ldr	r0, [r7, #20]
 800886e:	f7ff fee0 	bl	8008632 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887c:	2b40      	cmp	r3, #64	; 0x40
 800887e:	d109      	bne.n	8008894 <UART_DMAError+0x62>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b22      	cmp	r3, #34	; 0x22
 8008884:	d106      	bne.n	8008894 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2200      	movs	r2, #0
 800888a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800888e:	6978      	ldr	r0, [r7, #20]
 8008890:	f7ff ff10 	bl	80086b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800889a:	f043 0210 	orr.w	r2, r3, #16
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088a4:	6978      	ldr	r0, [r7, #20]
 80088a6:	f7fe fe8d 	bl	80075c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088aa:	bf00      	nop
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7fe fe77 	bl	80075c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088d6:	bf00      	nop
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b088      	sub	sp, #32
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088fa:	61fb      	str	r3, [r7, #28]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6979      	ldr	r1, [r7, #20]
 800890a:	69ba      	ldr	r2, [r7, #24]
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	613b      	str	r3, [r7, #16]
   return(result);
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e6      	bne.n	80088e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7f7 ffc4 	bl	80008b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800892c:	bf00      	nop
 800892e:	3720      	adds	r7, #32
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800897e:	2b01      	cmp	r3, #1
 8008980:	d101      	bne.n	8008986 <HAL_UARTEx_DisableFifoMode+0x16>
 8008982:	2302      	movs	r3, #2
 8008984:	e027      	b.n	80089d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2224      	movs	r2, #36	; 0x24
 8008992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0201 	bic.w	r2, r2, #1
 80089ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e02d      	b.n	8008a56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2224      	movs	r2, #36	; 0x24
 8008a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0201 	bic.w	r2, r2, #1
 8008a20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f850 	bl	8008adc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d101      	bne.n	8008a76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a72:	2302      	movs	r3, #2
 8008a74:	e02d      	b.n	8008ad2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2224      	movs	r2, #36	; 0x24
 8008a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0201 	bic.w	r2, r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f812 	bl	8008adc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d108      	bne.n	8008afe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008afc:	e031      	b.n	8008b62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008afe:	2310      	movs	r3, #16
 8008b00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b02:	2310      	movs	r3, #16
 8008b04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	0e5b      	lsrs	r3, r3, #25
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	0f5b      	lsrs	r3, r3, #29
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	f003 0307 	and.w	r3, r3, #7
 8008b24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	7b3a      	ldrb	r2, [r7, #12]
 8008b2a:	4911      	ldr	r1, [pc, #68]	; (8008b70 <UARTEx_SetNbDataToProcess+0x94>)
 8008b2c:	5c8a      	ldrb	r2, [r1, r2]
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b32:	7b3a      	ldrb	r2, [r7, #12]
 8008b34:	490f      	ldr	r1, [pc, #60]	; (8008b74 <UARTEx_SetNbDataToProcess+0x98>)
 8008b36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b38:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	7b7a      	ldrb	r2, [r7, #13]
 8008b48:	4909      	ldr	r1, [pc, #36]	; (8008b70 <UARTEx_SetNbDataToProcess+0x94>)
 8008b4a:	5c8a      	ldrb	r2, [r1, r2]
 8008b4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b50:	7b7a      	ldrb	r2, [r7, #13]
 8008b52:	4908      	ldr	r1, [pc, #32]	; (8008b74 <UARTEx_SetNbDataToProcess+0x98>)
 8008b54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b56:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b62:	bf00      	nop
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	08009ce4 	.word	0x08009ce4
 8008b74:	08009cec 	.word	0x08009cec

08008b78 <__errno>:
 8008b78:	4b01      	ldr	r3, [pc, #4]	; (8008b80 <__errno+0x8>)
 8008b7a:	6818      	ldr	r0, [r3, #0]
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	24000014 	.word	0x24000014

08008b84 <__libc_init_array>:
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	4d0d      	ldr	r5, [pc, #52]	; (8008bbc <__libc_init_array+0x38>)
 8008b88:	4c0d      	ldr	r4, [pc, #52]	; (8008bc0 <__libc_init_array+0x3c>)
 8008b8a:	1b64      	subs	r4, r4, r5
 8008b8c:	10a4      	asrs	r4, r4, #2
 8008b8e:	2600      	movs	r6, #0
 8008b90:	42a6      	cmp	r6, r4
 8008b92:	d109      	bne.n	8008ba8 <__libc_init_array+0x24>
 8008b94:	4d0b      	ldr	r5, [pc, #44]	; (8008bc4 <__libc_init_array+0x40>)
 8008b96:	4c0c      	ldr	r4, [pc, #48]	; (8008bc8 <__libc_init_array+0x44>)
 8008b98:	f001 f832 	bl	8009c00 <_init>
 8008b9c:	1b64      	subs	r4, r4, r5
 8008b9e:	10a4      	asrs	r4, r4, #2
 8008ba0:	2600      	movs	r6, #0
 8008ba2:	42a6      	cmp	r6, r4
 8008ba4:	d105      	bne.n	8008bb2 <__libc_init_array+0x2e>
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
 8008ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bac:	4798      	blx	r3
 8008bae:	3601      	adds	r6, #1
 8008bb0:	e7ee      	b.n	8008b90 <__libc_init_array+0xc>
 8008bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bb6:	4798      	blx	r3
 8008bb8:	3601      	adds	r6, #1
 8008bba:	e7f2      	b.n	8008ba2 <__libc_init_array+0x1e>
 8008bbc:	08009d94 	.word	0x08009d94
 8008bc0:	08009d94 	.word	0x08009d94
 8008bc4:	08009d94 	.word	0x08009d94
 8008bc8:	08009d98 	.word	0x08009d98

08008bcc <memcpy>:
 8008bcc:	440a      	add	r2, r1
 8008bce:	4291      	cmp	r1, r2
 8008bd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008bd4:	d100      	bne.n	8008bd8 <memcpy+0xc>
 8008bd6:	4770      	bx	lr
 8008bd8:	b510      	push	{r4, lr}
 8008bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008be2:	4291      	cmp	r1, r2
 8008be4:	d1f9      	bne.n	8008bda <memcpy+0xe>
 8008be6:	bd10      	pop	{r4, pc}

08008be8 <memset>:
 8008be8:	4402      	add	r2, r0
 8008bea:	4603      	mov	r3, r0
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d100      	bne.n	8008bf2 <memset+0xa>
 8008bf0:	4770      	bx	lr
 8008bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bf6:	e7f9      	b.n	8008bec <memset+0x4>

08008bf8 <iprintf>:
 8008bf8:	b40f      	push	{r0, r1, r2, r3}
 8008bfa:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <iprintf+0x2c>)
 8008bfc:	b513      	push	{r0, r1, r4, lr}
 8008bfe:	681c      	ldr	r4, [r3, #0]
 8008c00:	b124      	cbz	r4, 8008c0c <iprintf+0x14>
 8008c02:	69a3      	ldr	r3, [r4, #24]
 8008c04:	b913      	cbnz	r3, 8008c0c <iprintf+0x14>
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 fa5e 	bl	80090c8 <__sinit>
 8008c0c:	ab05      	add	r3, sp, #20
 8008c0e:	9a04      	ldr	r2, [sp, #16]
 8008c10:	68a1      	ldr	r1, [r4, #8]
 8008c12:	9301      	str	r3, [sp, #4]
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 fc67 	bl	80094e8 <_vfiprintf_r>
 8008c1a:	b002      	add	sp, #8
 8008c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c20:	b004      	add	sp, #16
 8008c22:	4770      	bx	lr
 8008c24:	24000014 	.word	0x24000014

08008c28 <_puts_r>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	460e      	mov	r6, r1
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	b118      	cbz	r0, 8008c38 <_puts_r+0x10>
 8008c30:	6983      	ldr	r3, [r0, #24]
 8008c32:	b90b      	cbnz	r3, 8008c38 <_puts_r+0x10>
 8008c34:	f000 fa48 	bl	80090c8 <__sinit>
 8008c38:	69ab      	ldr	r3, [r5, #24]
 8008c3a:	68ac      	ldr	r4, [r5, #8]
 8008c3c:	b913      	cbnz	r3, 8008c44 <_puts_r+0x1c>
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 fa42 	bl	80090c8 <__sinit>
 8008c44:	4b2c      	ldr	r3, [pc, #176]	; (8008cf8 <_puts_r+0xd0>)
 8008c46:	429c      	cmp	r4, r3
 8008c48:	d120      	bne.n	8008c8c <_puts_r+0x64>
 8008c4a:	686c      	ldr	r4, [r5, #4]
 8008c4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c4e:	07db      	lsls	r3, r3, #31
 8008c50:	d405      	bmi.n	8008c5e <_puts_r+0x36>
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	0598      	lsls	r0, r3, #22
 8008c56:	d402      	bmi.n	8008c5e <_puts_r+0x36>
 8008c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c5a:	f000 fad3 	bl	8009204 <__retarget_lock_acquire_recursive>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	0719      	lsls	r1, r3, #28
 8008c62:	d51d      	bpl.n	8008ca0 <_puts_r+0x78>
 8008c64:	6923      	ldr	r3, [r4, #16]
 8008c66:	b1db      	cbz	r3, 8008ca0 <_puts_r+0x78>
 8008c68:	3e01      	subs	r6, #1
 8008c6a:	68a3      	ldr	r3, [r4, #8]
 8008c6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c70:	3b01      	subs	r3, #1
 8008c72:	60a3      	str	r3, [r4, #8]
 8008c74:	bb39      	cbnz	r1, 8008cc6 <_puts_r+0x9e>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	da38      	bge.n	8008cec <_puts_r+0xc4>
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	210a      	movs	r1, #10
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f000 f848 	bl	8008d14 <__swbuf_r>
 8008c84:	3001      	adds	r0, #1
 8008c86:	d011      	beq.n	8008cac <_puts_r+0x84>
 8008c88:	250a      	movs	r5, #10
 8008c8a:	e011      	b.n	8008cb0 <_puts_r+0x88>
 8008c8c:	4b1b      	ldr	r3, [pc, #108]	; (8008cfc <_puts_r+0xd4>)
 8008c8e:	429c      	cmp	r4, r3
 8008c90:	d101      	bne.n	8008c96 <_puts_r+0x6e>
 8008c92:	68ac      	ldr	r4, [r5, #8]
 8008c94:	e7da      	b.n	8008c4c <_puts_r+0x24>
 8008c96:	4b1a      	ldr	r3, [pc, #104]	; (8008d00 <_puts_r+0xd8>)
 8008c98:	429c      	cmp	r4, r3
 8008c9a:	bf08      	it	eq
 8008c9c:	68ec      	ldreq	r4, [r5, #12]
 8008c9e:	e7d5      	b.n	8008c4c <_puts_r+0x24>
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f000 f888 	bl	8008db8 <__swsetup_r>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d0dd      	beq.n	8008c68 <_puts_r+0x40>
 8008cac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008cb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cb2:	07da      	lsls	r2, r3, #31
 8008cb4:	d405      	bmi.n	8008cc2 <_puts_r+0x9a>
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	059b      	lsls	r3, r3, #22
 8008cba:	d402      	bmi.n	8008cc2 <_puts_r+0x9a>
 8008cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cbe:	f000 faa2 	bl	8009206 <__retarget_lock_release_recursive>
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	bd70      	pop	{r4, r5, r6, pc}
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	da04      	bge.n	8008cd4 <_puts_r+0xac>
 8008cca:	69a2      	ldr	r2, [r4, #24]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	dc06      	bgt.n	8008cde <_puts_r+0xb6>
 8008cd0:	290a      	cmp	r1, #10
 8008cd2:	d004      	beq.n	8008cde <_puts_r+0xb6>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	6022      	str	r2, [r4, #0]
 8008cda:	7019      	strb	r1, [r3, #0]
 8008cdc:	e7c5      	b.n	8008c6a <_puts_r+0x42>
 8008cde:	4622      	mov	r2, r4
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f000 f817 	bl	8008d14 <__swbuf_r>
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	d1bf      	bne.n	8008c6a <_puts_r+0x42>
 8008cea:	e7df      	b.n	8008cac <_puts_r+0x84>
 8008cec:	6823      	ldr	r3, [r4, #0]
 8008cee:	250a      	movs	r5, #10
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	6022      	str	r2, [r4, #0]
 8008cf4:	701d      	strb	r5, [r3, #0]
 8008cf6:	e7db      	b.n	8008cb0 <_puts_r+0x88>
 8008cf8:	08009d18 	.word	0x08009d18
 8008cfc:	08009d38 	.word	0x08009d38
 8008d00:	08009cf8 	.word	0x08009cf8

08008d04 <puts>:
 8008d04:	4b02      	ldr	r3, [pc, #8]	; (8008d10 <puts+0xc>)
 8008d06:	4601      	mov	r1, r0
 8008d08:	6818      	ldr	r0, [r3, #0]
 8008d0a:	f7ff bf8d 	b.w	8008c28 <_puts_r>
 8008d0e:	bf00      	nop
 8008d10:	24000014 	.word	0x24000014

08008d14 <__swbuf_r>:
 8008d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d16:	460e      	mov	r6, r1
 8008d18:	4614      	mov	r4, r2
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	b118      	cbz	r0, 8008d26 <__swbuf_r+0x12>
 8008d1e:	6983      	ldr	r3, [r0, #24]
 8008d20:	b90b      	cbnz	r3, 8008d26 <__swbuf_r+0x12>
 8008d22:	f000 f9d1 	bl	80090c8 <__sinit>
 8008d26:	4b21      	ldr	r3, [pc, #132]	; (8008dac <__swbuf_r+0x98>)
 8008d28:	429c      	cmp	r4, r3
 8008d2a:	d12b      	bne.n	8008d84 <__swbuf_r+0x70>
 8008d2c:	686c      	ldr	r4, [r5, #4]
 8008d2e:	69a3      	ldr	r3, [r4, #24]
 8008d30:	60a3      	str	r3, [r4, #8]
 8008d32:	89a3      	ldrh	r3, [r4, #12]
 8008d34:	071a      	lsls	r2, r3, #28
 8008d36:	d52f      	bpl.n	8008d98 <__swbuf_r+0x84>
 8008d38:	6923      	ldr	r3, [r4, #16]
 8008d3a:	b36b      	cbz	r3, 8008d98 <__swbuf_r+0x84>
 8008d3c:	6923      	ldr	r3, [r4, #16]
 8008d3e:	6820      	ldr	r0, [r4, #0]
 8008d40:	1ac0      	subs	r0, r0, r3
 8008d42:	6963      	ldr	r3, [r4, #20]
 8008d44:	b2f6      	uxtb	r6, r6
 8008d46:	4283      	cmp	r3, r0
 8008d48:	4637      	mov	r7, r6
 8008d4a:	dc04      	bgt.n	8008d56 <__swbuf_r+0x42>
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f000 f926 	bl	8008fa0 <_fflush_r>
 8008d54:	bb30      	cbnz	r0, 8008da4 <__swbuf_r+0x90>
 8008d56:	68a3      	ldr	r3, [r4, #8]
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	60a3      	str	r3, [r4, #8]
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	1c5a      	adds	r2, r3, #1
 8008d60:	6022      	str	r2, [r4, #0]
 8008d62:	701e      	strb	r6, [r3, #0]
 8008d64:	6963      	ldr	r3, [r4, #20]
 8008d66:	3001      	adds	r0, #1
 8008d68:	4283      	cmp	r3, r0
 8008d6a:	d004      	beq.n	8008d76 <__swbuf_r+0x62>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	07db      	lsls	r3, r3, #31
 8008d70:	d506      	bpl.n	8008d80 <__swbuf_r+0x6c>
 8008d72:	2e0a      	cmp	r6, #10
 8008d74:	d104      	bne.n	8008d80 <__swbuf_r+0x6c>
 8008d76:	4621      	mov	r1, r4
 8008d78:	4628      	mov	r0, r5
 8008d7a:	f000 f911 	bl	8008fa0 <_fflush_r>
 8008d7e:	b988      	cbnz	r0, 8008da4 <__swbuf_r+0x90>
 8008d80:	4638      	mov	r0, r7
 8008d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d84:	4b0a      	ldr	r3, [pc, #40]	; (8008db0 <__swbuf_r+0x9c>)
 8008d86:	429c      	cmp	r4, r3
 8008d88:	d101      	bne.n	8008d8e <__swbuf_r+0x7a>
 8008d8a:	68ac      	ldr	r4, [r5, #8]
 8008d8c:	e7cf      	b.n	8008d2e <__swbuf_r+0x1a>
 8008d8e:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <__swbuf_r+0xa0>)
 8008d90:	429c      	cmp	r4, r3
 8008d92:	bf08      	it	eq
 8008d94:	68ec      	ldreq	r4, [r5, #12]
 8008d96:	e7ca      	b.n	8008d2e <__swbuf_r+0x1a>
 8008d98:	4621      	mov	r1, r4
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f000 f80c 	bl	8008db8 <__swsetup_r>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d0cb      	beq.n	8008d3c <__swbuf_r+0x28>
 8008da4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008da8:	e7ea      	b.n	8008d80 <__swbuf_r+0x6c>
 8008daa:	bf00      	nop
 8008dac:	08009d18 	.word	0x08009d18
 8008db0:	08009d38 	.word	0x08009d38
 8008db4:	08009cf8 	.word	0x08009cf8

08008db8 <__swsetup_r>:
 8008db8:	4b32      	ldr	r3, [pc, #200]	; (8008e84 <__swsetup_r+0xcc>)
 8008dba:	b570      	push	{r4, r5, r6, lr}
 8008dbc:	681d      	ldr	r5, [r3, #0]
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	b125      	cbz	r5, 8008dce <__swsetup_r+0x16>
 8008dc4:	69ab      	ldr	r3, [r5, #24]
 8008dc6:	b913      	cbnz	r3, 8008dce <__swsetup_r+0x16>
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f000 f97d 	bl	80090c8 <__sinit>
 8008dce:	4b2e      	ldr	r3, [pc, #184]	; (8008e88 <__swsetup_r+0xd0>)
 8008dd0:	429c      	cmp	r4, r3
 8008dd2:	d10f      	bne.n	8008df4 <__swsetup_r+0x3c>
 8008dd4:	686c      	ldr	r4, [r5, #4]
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ddc:	0719      	lsls	r1, r3, #28
 8008dde:	d42c      	bmi.n	8008e3a <__swsetup_r+0x82>
 8008de0:	06dd      	lsls	r5, r3, #27
 8008de2:	d411      	bmi.n	8008e08 <__swsetup_r+0x50>
 8008de4:	2309      	movs	r3, #9
 8008de6:	6033      	str	r3, [r6, #0]
 8008de8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dec:	81a3      	strh	r3, [r4, #12]
 8008dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008df2:	e03e      	b.n	8008e72 <__swsetup_r+0xba>
 8008df4:	4b25      	ldr	r3, [pc, #148]	; (8008e8c <__swsetup_r+0xd4>)
 8008df6:	429c      	cmp	r4, r3
 8008df8:	d101      	bne.n	8008dfe <__swsetup_r+0x46>
 8008dfa:	68ac      	ldr	r4, [r5, #8]
 8008dfc:	e7eb      	b.n	8008dd6 <__swsetup_r+0x1e>
 8008dfe:	4b24      	ldr	r3, [pc, #144]	; (8008e90 <__swsetup_r+0xd8>)
 8008e00:	429c      	cmp	r4, r3
 8008e02:	bf08      	it	eq
 8008e04:	68ec      	ldreq	r4, [r5, #12]
 8008e06:	e7e6      	b.n	8008dd6 <__swsetup_r+0x1e>
 8008e08:	0758      	lsls	r0, r3, #29
 8008e0a:	d512      	bpl.n	8008e32 <__swsetup_r+0x7a>
 8008e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e0e:	b141      	cbz	r1, 8008e22 <__swsetup_r+0x6a>
 8008e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e14:	4299      	cmp	r1, r3
 8008e16:	d002      	beq.n	8008e1e <__swsetup_r+0x66>
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f000 fa5b 	bl	80092d4 <_free_r>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	6363      	str	r3, [r4, #52]	; 0x34
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e28:	81a3      	strh	r3, [r4, #12]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	6063      	str	r3, [r4, #4]
 8008e2e:	6923      	ldr	r3, [r4, #16]
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	f043 0308 	orr.w	r3, r3, #8
 8008e38:	81a3      	strh	r3, [r4, #12]
 8008e3a:	6923      	ldr	r3, [r4, #16]
 8008e3c:	b94b      	cbnz	r3, 8008e52 <__swsetup_r+0x9a>
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e48:	d003      	beq.n	8008e52 <__swsetup_r+0x9a>
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	f000 fa01 	bl	8009254 <__smakebuf_r>
 8008e52:	89a0      	ldrh	r0, [r4, #12]
 8008e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e58:	f010 0301 	ands.w	r3, r0, #1
 8008e5c:	d00a      	beq.n	8008e74 <__swsetup_r+0xbc>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60a3      	str	r3, [r4, #8]
 8008e62:	6963      	ldr	r3, [r4, #20]
 8008e64:	425b      	negs	r3, r3
 8008e66:	61a3      	str	r3, [r4, #24]
 8008e68:	6923      	ldr	r3, [r4, #16]
 8008e6a:	b943      	cbnz	r3, 8008e7e <__swsetup_r+0xc6>
 8008e6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e70:	d1ba      	bne.n	8008de8 <__swsetup_r+0x30>
 8008e72:	bd70      	pop	{r4, r5, r6, pc}
 8008e74:	0781      	lsls	r1, r0, #30
 8008e76:	bf58      	it	pl
 8008e78:	6963      	ldrpl	r3, [r4, #20]
 8008e7a:	60a3      	str	r3, [r4, #8]
 8008e7c:	e7f4      	b.n	8008e68 <__swsetup_r+0xb0>
 8008e7e:	2000      	movs	r0, #0
 8008e80:	e7f7      	b.n	8008e72 <__swsetup_r+0xba>
 8008e82:	bf00      	nop
 8008e84:	24000014 	.word	0x24000014
 8008e88:	08009d18 	.word	0x08009d18
 8008e8c:	08009d38 	.word	0x08009d38
 8008e90:	08009cf8 	.word	0x08009cf8

08008e94 <__sflush_r>:
 8008e94:	898a      	ldrh	r2, [r1, #12]
 8008e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9a:	4605      	mov	r5, r0
 8008e9c:	0710      	lsls	r0, r2, #28
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	d458      	bmi.n	8008f54 <__sflush_r+0xc0>
 8008ea2:	684b      	ldr	r3, [r1, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	dc05      	bgt.n	8008eb4 <__sflush_r+0x20>
 8008ea8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	dc02      	bgt.n	8008eb4 <__sflush_r+0x20>
 8008eae:	2000      	movs	r0, #0
 8008eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eb6:	2e00      	cmp	r6, #0
 8008eb8:	d0f9      	beq.n	8008eae <__sflush_r+0x1a>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ec0:	682f      	ldr	r7, [r5, #0]
 8008ec2:	602b      	str	r3, [r5, #0]
 8008ec4:	d032      	beq.n	8008f2c <__sflush_r+0x98>
 8008ec6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	075a      	lsls	r2, r3, #29
 8008ecc:	d505      	bpl.n	8008eda <__sflush_r+0x46>
 8008ece:	6863      	ldr	r3, [r4, #4]
 8008ed0:	1ac0      	subs	r0, r0, r3
 8008ed2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ed4:	b10b      	cbz	r3, 8008eda <__sflush_r+0x46>
 8008ed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ed8:	1ac0      	subs	r0, r0, r3
 8008eda:	2300      	movs	r3, #0
 8008edc:	4602      	mov	r2, r0
 8008ede:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ee0:	6a21      	ldr	r1, [r4, #32]
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	47b0      	blx	r6
 8008ee6:	1c43      	adds	r3, r0, #1
 8008ee8:	89a3      	ldrh	r3, [r4, #12]
 8008eea:	d106      	bne.n	8008efa <__sflush_r+0x66>
 8008eec:	6829      	ldr	r1, [r5, #0]
 8008eee:	291d      	cmp	r1, #29
 8008ef0:	d82c      	bhi.n	8008f4c <__sflush_r+0xb8>
 8008ef2:	4a2a      	ldr	r2, [pc, #168]	; (8008f9c <__sflush_r+0x108>)
 8008ef4:	40ca      	lsrs	r2, r1
 8008ef6:	07d6      	lsls	r6, r2, #31
 8008ef8:	d528      	bpl.n	8008f4c <__sflush_r+0xb8>
 8008efa:	2200      	movs	r2, #0
 8008efc:	6062      	str	r2, [r4, #4]
 8008efe:	04d9      	lsls	r1, r3, #19
 8008f00:	6922      	ldr	r2, [r4, #16]
 8008f02:	6022      	str	r2, [r4, #0]
 8008f04:	d504      	bpl.n	8008f10 <__sflush_r+0x7c>
 8008f06:	1c42      	adds	r2, r0, #1
 8008f08:	d101      	bne.n	8008f0e <__sflush_r+0x7a>
 8008f0a:	682b      	ldr	r3, [r5, #0]
 8008f0c:	b903      	cbnz	r3, 8008f10 <__sflush_r+0x7c>
 8008f0e:	6560      	str	r0, [r4, #84]	; 0x54
 8008f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f12:	602f      	str	r7, [r5, #0]
 8008f14:	2900      	cmp	r1, #0
 8008f16:	d0ca      	beq.n	8008eae <__sflush_r+0x1a>
 8008f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f1c:	4299      	cmp	r1, r3
 8008f1e:	d002      	beq.n	8008f26 <__sflush_r+0x92>
 8008f20:	4628      	mov	r0, r5
 8008f22:	f000 f9d7 	bl	80092d4 <_free_r>
 8008f26:	2000      	movs	r0, #0
 8008f28:	6360      	str	r0, [r4, #52]	; 0x34
 8008f2a:	e7c1      	b.n	8008eb0 <__sflush_r+0x1c>
 8008f2c:	6a21      	ldr	r1, [r4, #32]
 8008f2e:	2301      	movs	r3, #1
 8008f30:	4628      	mov	r0, r5
 8008f32:	47b0      	blx	r6
 8008f34:	1c41      	adds	r1, r0, #1
 8008f36:	d1c7      	bne.n	8008ec8 <__sflush_r+0x34>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0c4      	beq.n	8008ec8 <__sflush_r+0x34>
 8008f3e:	2b1d      	cmp	r3, #29
 8008f40:	d001      	beq.n	8008f46 <__sflush_r+0xb2>
 8008f42:	2b16      	cmp	r3, #22
 8008f44:	d101      	bne.n	8008f4a <__sflush_r+0xb6>
 8008f46:	602f      	str	r7, [r5, #0]
 8008f48:	e7b1      	b.n	8008eae <__sflush_r+0x1a>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f50:	81a3      	strh	r3, [r4, #12]
 8008f52:	e7ad      	b.n	8008eb0 <__sflush_r+0x1c>
 8008f54:	690f      	ldr	r7, [r1, #16]
 8008f56:	2f00      	cmp	r7, #0
 8008f58:	d0a9      	beq.n	8008eae <__sflush_r+0x1a>
 8008f5a:	0793      	lsls	r3, r2, #30
 8008f5c:	680e      	ldr	r6, [r1, #0]
 8008f5e:	bf08      	it	eq
 8008f60:	694b      	ldreq	r3, [r1, #20]
 8008f62:	600f      	str	r7, [r1, #0]
 8008f64:	bf18      	it	ne
 8008f66:	2300      	movne	r3, #0
 8008f68:	eba6 0807 	sub.w	r8, r6, r7
 8008f6c:	608b      	str	r3, [r1, #8]
 8008f6e:	f1b8 0f00 	cmp.w	r8, #0
 8008f72:	dd9c      	ble.n	8008eae <__sflush_r+0x1a>
 8008f74:	6a21      	ldr	r1, [r4, #32]
 8008f76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f78:	4643      	mov	r3, r8
 8008f7a:	463a      	mov	r2, r7
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	47b0      	blx	r6
 8008f80:	2800      	cmp	r0, #0
 8008f82:	dc06      	bgt.n	8008f92 <__sflush_r+0xfe>
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f8a:	81a3      	strh	r3, [r4, #12]
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f90:	e78e      	b.n	8008eb0 <__sflush_r+0x1c>
 8008f92:	4407      	add	r7, r0
 8008f94:	eba8 0800 	sub.w	r8, r8, r0
 8008f98:	e7e9      	b.n	8008f6e <__sflush_r+0xda>
 8008f9a:	bf00      	nop
 8008f9c:	20400001 	.word	0x20400001

08008fa0 <_fflush_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	690b      	ldr	r3, [r1, #16]
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	b913      	cbnz	r3, 8008fb0 <_fflush_r+0x10>
 8008faa:	2500      	movs	r5, #0
 8008fac:	4628      	mov	r0, r5
 8008fae:	bd38      	pop	{r3, r4, r5, pc}
 8008fb0:	b118      	cbz	r0, 8008fba <_fflush_r+0x1a>
 8008fb2:	6983      	ldr	r3, [r0, #24]
 8008fb4:	b90b      	cbnz	r3, 8008fba <_fflush_r+0x1a>
 8008fb6:	f000 f887 	bl	80090c8 <__sinit>
 8008fba:	4b14      	ldr	r3, [pc, #80]	; (800900c <_fflush_r+0x6c>)
 8008fbc:	429c      	cmp	r4, r3
 8008fbe:	d11b      	bne.n	8008ff8 <_fflush_r+0x58>
 8008fc0:	686c      	ldr	r4, [r5, #4]
 8008fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d0ef      	beq.n	8008faa <_fflush_r+0xa>
 8008fca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fcc:	07d0      	lsls	r0, r2, #31
 8008fce:	d404      	bmi.n	8008fda <_fflush_r+0x3a>
 8008fd0:	0599      	lsls	r1, r3, #22
 8008fd2:	d402      	bmi.n	8008fda <_fflush_r+0x3a>
 8008fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fd6:	f000 f915 	bl	8009204 <__retarget_lock_acquire_recursive>
 8008fda:	4628      	mov	r0, r5
 8008fdc:	4621      	mov	r1, r4
 8008fde:	f7ff ff59 	bl	8008e94 <__sflush_r>
 8008fe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fe4:	07da      	lsls	r2, r3, #31
 8008fe6:	4605      	mov	r5, r0
 8008fe8:	d4e0      	bmi.n	8008fac <_fflush_r+0xc>
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	059b      	lsls	r3, r3, #22
 8008fee:	d4dd      	bmi.n	8008fac <_fflush_r+0xc>
 8008ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ff2:	f000 f908 	bl	8009206 <__retarget_lock_release_recursive>
 8008ff6:	e7d9      	b.n	8008fac <_fflush_r+0xc>
 8008ff8:	4b05      	ldr	r3, [pc, #20]	; (8009010 <_fflush_r+0x70>)
 8008ffa:	429c      	cmp	r4, r3
 8008ffc:	d101      	bne.n	8009002 <_fflush_r+0x62>
 8008ffe:	68ac      	ldr	r4, [r5, #8]
 8009000:	e7df      	b.n	8008fc2 <_fflush_r+0x22>
 8009002:	4b04      	ldr	r3, [pc, #16]	; (8009014 <_fflush_r+0x74>)
 8009004:	429c      	cmp	r4, r3
 8009006:	bf08      	it	eq
 8009008:	68ec      	ldreq	r4, [r5, #12]
 800900a:	e7da      	b.n	8008fc2 <_fflush_r+0x22>
 800900c:	08009d18 	.word	0x08009d18
 8009010:	08009d38 	.word	0x08009d38
 8009014:	08009cf8 	.word	0x08009cf8

08009018 <std>:
 8009018:	2300      	movs	r3, #0
 800901a:	b510      	push	{r4, lr}
 800901c:	4604      	mov	r4, r0
 800901e:	e9c0 3300 	strd	r3, r3, [r0]
 8009022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009026:	6083      	str	r3, [r0, #8]
 8009028:	8181      	strh	r1, [r0, #12]
 800902a:	6643      	str	r3, [r0, #100]	; 0x64
 800902c:	81c2      	strh	r2, [r0, #14]
 800902e:	6183      	str	r3, [r0, #24]
 8009030:	4619      	mov	r1, r3
 8009032:	2208      	movs	r2, #8
 8009034:	305c      	adds	r0, #92	; 0x5c
 8009036:	f7ff fdd7 	bl	8008be8 <memset>
 800903a:	4b05      	ldr	r3, [pc, #20]	; (8009050 <std+0x38>)
 800903c:	6263      	str	r3, [r4, #36]	; 0x24
 800903e:	4b05      	ldr	r3, [pc, #20]	; (8009054 <std+0x3c>)
 8009040:	62a3      	str	r3, [r4, #40]	; 0x28
 8009042:	4b05      	ldr	r3, [pc, #20]	; (8009058 <std+0x40>)
 8009044:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009046:	4b05      	ldr	r3, [pc, #20]	; (800905c <std+0x44>)
 8009048:	6224      	str	r4, [r4, #32]
 800904a:	6323      	str	r3, [r4, #48]	; 0x30
 800904c:	bd10      	pop	{r4, pc}
 800904e:	bf00      	nop
 8009050:	08009a91 	.word	0x08009a91
 8009054:	08009ab3 	.word	0x08009ab3
 8009058:	08009aeb 	.word	0x08009aeb
 800905c:	08009b0f 	.word	0x08009b0f

08009060 <_cleanup_r>:
 8009060:	4901      	ldr	r1, [pc, #4]	; (8009068 <_cleanup_r+0x8>)
 8009062:	f000 b8af 	b.w	80091c4 <_fwalk_reent>
 8009066:	bf00      	nop
 8009068:	08008fa1 	.word	0x08008fa1

0800906c <__sfmoreglue>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	2268      	movs	r2, #104	; 0x68
 8009070:	1e4d      	subs	r5, r1, #1
 8009072:	4355      	muls	r5, r2
 8009074:	460e      	mov	r6, r1
 8009076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800907a:	f000 f997 	bl	80093ac <_malloc_r>
 800907e:	4604      	mov	r4, r0
 8009080:	b140      	cbz	r0, 8009094 <__sfmoreglue+0x28>
 8009082:	2100      	movs	r1, #0
 8009084:	e9c0 1600 	strd	r1, r6, [r0]
 8009088:	300c      	adds	r0, #12
 800908a:	60a0      	str	r0, [r4, #8]
 800908c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009090:	f7ff fdaa 	bl	8008be8 <memset>
 8009094:	4620      	mov	r0, r4
 8009096:	bd70      	pop	{r4, r5, r6, pc}

08009098 <__sfp_lock_acquire>:
 8009098:	4801      	ldr	r0, [pc, #4]	; (80090a0 <__sfp_lock_acquire+0x8>)
 800909a:	f000 b8b3 	b.w	8009204 <__retarget_lock_acquire_recursive>
 800909e:	bf00      	nop
 80090a0:	2400020d 	.word	0x2400020d

080090a4 <__sfp_lock_release>:
 80090a4:	4801      	ldr	r0, [pc, #4]	; (80090ac <__sfp_lock_release+0x8>)
 80090a6:	f000 b8ae 	b.w	8009206 <__retarget_lock_release_recursive>
 80090aa:	bf00      	nop
 80090ac:	2400020d 	.word	0x2400020d

080090b0 <__sinit_lock_acquire>:
 80090b0:	4801      	ldr	r0, [pc, #4]	; (80090b8 <__sinit_lock_acquire+0x8>)
 80090b2:	f000 b8a7 	b.w	8009204 <__retarget_lock_acquire_recursive>
 80090b6:	bf00      	nop
 80090b8:	2400020e 	.word	0x2400020e

080090bc <__sinit_lock_release>:
 80090bc:	4801      	ldr	r0, [pc, #4]	; (80090c4 <__sinit_lock_release+0x8>)
 80090be:	f000 b8a2 	b.w	8009206 <__retarget_lock_release_recursive>
 80090c2:	bf00      	nop
 80090c4:	2400020e 	.word	0x2400020e

080090c8 <__sinit>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	4604      	mov	r4, r0
 80090cc:	f7ff fff0 	bl	80090b0 <__sinit_lock_acquire>
 80090d0:	69a3      	ldr	r3, [r4, #24]
 80090d2:	b11b      	cbz	r3, 80090dc <__sinit+0x14>
 80090d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d8:	f7ff bff0 	b.w	80090bc <__sinit_lock_release>
 80090dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090e0:	6523      	str	r3, [r4, #80]	; 0x50
 80090e2:	4b13      	ldr	r3, [pc, #76]	; (8009130 <__sinit+0x68>)
 80090e4:	4a13      	ldr	r2, [pc, #76]	; (8009134 <__sinit+0x6c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80090ea:	42a3      	cmp	r3, r4
 80090ec:	bf04      	itt	eq
 80090ee:	2301      	moveq	r3, #1
 80090f0:	61a3      	streq	r3, [r4, #24]
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 f820 	bl	8009138 <__sfp>
 80090f8:	6060      	str	r0, [r4, #4]
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 f81c 	bl	8009138 <__sfp>
 8009100:	60a0      	str	r0, [r4, #8]
 8009102:	4620      	mov	r0, r4
 8009104:	f000 f818 	bl	8009138 <__sfp>
 8009108:	2200      	movs	r2, #0
 800910a:	60e0      	str	r0, [r4, #12]
 800910c:	2104      	movs	r1, #4
 800910e:	6860      	ldr	r0, [r4, #4]
 8009110:	f7ff ff82 	bl	8009018 <std>
 8009114:	68a0      	ldr	r0, [r4, #8]
 8009116:	2201      	movs	r2, #1
 8009118:	2109      	movs	r1, #9
 800911a:	f7ff ff7d 	bl	8009018 <std>
 800911e:	68e0      	ldr	r0, [r4, #12]
 8009120:	2202      	movs	r2, #2
 8009122:	2112      	movs	r1, #18
 8009124:	f7ff ff78 	bl	8009018 <std>
 8009128:	2301      	movs	r3, #1
 800912a:	61a3      	str	r3, [r4, #24]
 800912c:	e7d2      	b.n	80090d4 <__sinit+0xc>
 800912e:	bf00      	nop
 8009130:	08009cf4 	.word	0x08009cf4
 8009134:	08009061 	.word	0x08009061

08009138 <__sfp>:
 8009138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913a:	4607      	mov	r7, r0
 800913c:	f7ff ffac 	bl	8009098 <__sfp_lock_acquire>
 8009140:	4b1e      	ldr	r3, [pc, #120]	; (80091bc <__sfp+0x84>)
 8009142:	681e      	ldr	r6, [r3, #0]
 8009144:	69b3      	ldr	r3, [r6, #24]
 8009146:	b913      	cbnz	r3, 800914e <__sfp+0x16>
 8009148:	4630      	mov	r0, r6
 800914a:	f7ff ffbd 	bl	80090c8 <__sinit>
 800914e:	3648      	adds	r6, #72	; 0x48
 8009150:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009154:	3b01      	subs	r3, #1
 8009156:	d503      	bpl.n	8009160 <__sfp+0x28>
 8009158:	6833      	ldr	r3, [r6, #0]
 800915a:	b30b      	cbz	r3, 80091a0 <__sfp+0x68>
 800915c:	6836      	ldr	r6, [r6, #0]
 800915e:	e7f7      	b.n	8009150 <__sfp+0x18>
 8009160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009164:	b9d5      	cbnz	r5, 800919c <__sfp+0x64>
 8009166:	4b16      	ldr	r3, [pc, #88]	; (80091c0 <__sfp+0x88>)
 8009168:	60e3      	str	r3, [r4, #12]
 800916a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800916e:	6665      	str	r5, [r4, #100]	; 0x64
 8009170:	f000 f847 	bl	8009202 <__retarget_lock_init_recursive>
 8009174:	f7ff ff96 	bl	80090a4 <__sfp_lock_release>
 8009178:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800917c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009180:	6025      	str	r5, [r4, #0]
 8009182:	61a5      	str	r5, [r4, #24]
 8009184:	2208      	movs	r2, #8
 8009186:	4629      	mov	r1, r5
 8009188:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800918c:	f7ff fd2c 	bl	8008be8 <memset>
 8009190:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009194:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009198:	4620      	mov	r0, r4
 800919a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800919c:	3468      	adds	r4, #104	; 0x68
 800919e:	e7d9      	b.n	8009154 <__sfp+0x1c>
 80091a0:	2104      	movs	r1, #4
 80091a2:	4638      	mov	r0, r7
 80091a4:	f7ff ff62 	bl	800906c <__sfmoreglue>
 80091a8:	4604      	mov	r4, r0
 80091aa:	6030      	str	r0, [r6, #0]
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d1d5      	bne.n	800915c <__sfp+0x24>
 80091b0:	f7ff ff78 	bl	80090a4 <__sfp_lock_release>
 80091b4:	230c      	movs	r3, #12
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	e7ee      	b.n	8009198 <__sfp+0x60>
 80091ba:	bf00      	nop
 80091bc:	08009cf4 	.word	0x08009cf4
 80091c0:	ffff0001 	.word	0xffff0001

080091c4 <_fwalk_reent>:
 80091c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c8:	4606      	mov	r6, r0
 80091ca:	4688      	mov	r8, r1
 80091cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091d0:	2700      	movs	r7, #0
 80091d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091d6:	f1b9 0901 	subs.w	r9, r9, #1
 80091da:	d505      	bpl.n	80091e8 <_fwalk_reent+0x24>
 80091dc:	6824      	ldr	r4, [r4, #0]
 80091de:	2c00      	cmp	r4, #0
 80091e0:	d1f7      	bne.n	80091d2 <_fwalk_reent+0xe>
 80091e2:	4638      	mov	r0, r7
 80091e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e8:	89ab      	ldrh	r3, [r5, #12]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d907      	bls.n	80091fe <_fwalk_reent+0x3a>
 80091ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091f2:	3301      	adds	r3, #1
 80091f4:	d003      	beq.n	80091fe <_fwalk_reent+0x3a>
 80091f6:	4629      	mov	r1, r5
 80091f8:	4630      	mov	r0, r6
 80091fa:	47c0      	blx	r8
 80091fc:	4307      	orrs	r7, r0
 80091fe:	3568      	adds	r5, #104	; 0x68
 8009200:	e7e9      	b.n	80091d6 <_fwalk_reent+0x12>

08009202 <__retarget_lock_init_recursive>:
 8009202:	4770      	bx	lr

08009204 <__retarget_lock_acquire_recursive>:
 8009204:	4770      	bx	lr

08009206 <__retarget_lock_release_recursive>:
 8009206:	4770      	bx	lr

08009208 <__swhatbuf_r>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	460e      	mov	r6, r1
 800920c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009210:	2900      	cmp	r1, #0
 8009212:	b096      	sub	sp, #88	; 0x58
 8009214:	4614      	mov	r4, r2
 8009216:	461d      	mov	r5, r3
 8009218:	da08      	bge.n	800922c <__swhatbuf_r+0x24>
 800921a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	602a      	str	r2, [r5, #0]
 8009222:	061a      	lsls	r2, r3, #24
 8009224:	d410      	bmi.n	8009248 <__swhatbuf_r+0x40>
 8009226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800922a:	e00e      	b.n	800924a <__swhatbuf_r+0x42>
 800922c:	466a      	mov	r2, sp
 800922e:	f000 fc95 	bl	8009b5c <_fstat_r>
 8009232:	2800      	cmp	r0, #0
 8009234:	dbf1      	blt.n	800921a <__swhatbuf_r+0x12>
 8009236:	9a01      	ldr	r2, [sp, #4]
 8009238:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800923c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009240:	425a      	negs	r2, r3
 8009242:	415a      	adcs	r2, r3
 8009244:	602a      	str	r2, [r5, #0]
 8009246:	e7ee      	b.n	8009226 <__swhatbuf_r+0x1e>
 8009248:	2340      	movs	r3, #64	; 0x40
 800924a:	2000      	movs	r0, #0
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	b016      	add	sp, #88	; 0x58
 8009250:	bd70      	pop	{r4, r5, r6, pc}
	...

08009254 <__smakebuf_r>:
 8009254:	898b      	ldrh	r3, [r1, #12]
 8009256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009258:	079d      	lsls	r5, r3, #30
 800925a:	4606      	mov	r6, r0
 800925c:	460c      	mov	r4, r1
 800925e:	d507      	bpl.n	8009270 <__smakebuf_r+0x1c>
 8009260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	6123      	str	r3, [r4, #16]
 8009268:	2301      	movs	r3, #1
 800926a:	6163      	str	r3, [r4, #20]
 800926c:	b002      	add	sp, #8
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	ab01      	add	r3, sp, #4
 8009272:	466a      	mov	r2, sp
 8009274:	f7ff ffc8 	bl	8009208 <__swhatbuf_r>
 8009278:	9900      	ldr	r1, [sp, #0]
 800927a:	4605      	mov	r5, r0
 800927c:	4630      	mov	r0, r6
 800927e:	f000 f895 	bl	80093ac <_malloc_r>
 8009282:	b948      	cbnz	r0, 8009298 <__smakebuf_r+0x44>
 8009284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009288:	059a      	lsls	r2, r3, #22
 800928a:	d4ef      	bmi.n	800926c <__smakebuf_r+0x18>
 800928c:	f023 0303 	bic.w	r3, r3, #3
 8009290:	f043 0302 	orr.w	r3, r3, #2
 8009294:	81a3      	strh	r3, [r4, #12]
 8009296:	e7e3      	b.n	8009260 <__smakebuf_r+0xc>
 8009298:	4b0d      	ldr	r3, [pc, #52]	; (80092d0 <__smakebuf_r+0x7c>)
 800929a:	62b3      	str	r3, [r6, #40]	; 0x28
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	6020      	str	r0, [r4, #0]
 80092a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	9b00      	ldr	r3, [sp, #0]
 80092a8:	6163      	str	r3, [r4, #20]
 80092aa:	9b01      	ldr	r3, [sp, #4]
 80092ac:	6120      	str	r0, [r4, #16]
 80092ae:	b15b      	cbz	r3, 80092c8 <__smakebuf_r+0x74>
 80092b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b4:	4630      	mov	r0, r6
 80092b6:	f000 fc63 	bl	8009b80 <_isatty_r>
 80092ba:	b128      	cbz	r0, 80092c8 <__smakebuf_r+0x74>
 80092bc:	89a3      	ldrh	r3, [r4, #12]
 80092be:	f023 0303 	bic.w	r3, r3, #3
 80092c2:	f043 0301 	orr.w	r3, r3, #1
 80092c6:	81a3      	strh	r3, [r4, #12]
 80092c8:	89a0      	ldrh	r0, [r4, #12]
 80092ca:	4305      	orrs	r5, r0
 80092cc:	81a5      	strh	r5, [r4, #12]
 80092ce:	e7cd      	b.n	800926c <__smakebuf_r+0x18>
 80092d0:	08009061 	.word	0x08009061

080092d4 <_free_r>:
 80092d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092d6:	2900      	cmp	r1, #0
 80092d8:	d044      	beq.n	8009364 <_free_r+0x90>
 80092da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092de:	9001      	str	r0, [sp, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f1a1 0404 	sub.w	r4, r1, #4
 80092e6:	bfb8      	it	lt
 80092e8:	18e4      	addlt	r4, r4, r3
 80092ea:	f000 fc6b 	bl	8009bc4 <__malloc_lock>
 80092ee:	4a1e      	ldr	r2, [pc, #120]	; (8009368 <_free_r+0x94>)
 80092f0:	9801      	ldr	r0, [sp, #4]
 80092f2:	6813      	ldr	r3, [r2, #0]
 80092f4:	b933      	cbnz	r3, 8009304 <_free_r+0x30>
 80092f6:	6063      	str	r3, [r4, #4]
 80092f8:	6014      	str	r4, [r2, #0]
 80092fa:	b003      	add	sp, #12
 80092fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009300:	f000 bc66 	b.w	8009bd0 <__malloc_unlock>
 8009304:	42a3      	cmp	r3, r4
 8009306:	d908      	bls.n	800931a <_free_r+0x46>
 8009308:	6825      	ldr	r5, [r4, #0]
 800930a:	1961      	adds	r1, r4, r5
 800930c:	428b      	cmp	r3, r1
 800930e:	bf01      	itttt	eq
 8009310:	6819      	ldreq	r1, [r3, #0]
 8009312:	685b      	ldreq	r3, [r3, #4]
 8009314:	1949      	addeq	r1, r1, r5
 8009316:	6021      	streq	r1, [r4, #0]
 8009318:	e7ed      	b.n	80092f6 <_free_r+0x22>
 800931a:	461a      	mov	r2, r3
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	b10b      	cbz	r3, 8009324 <_free_r+0x50>
 8009320:	42a3      	cmp	r3, r4
 8009322:	d9fa      	bls.n	800931a <_free_r+0x46>
 8009324:	6811      	ldr	r1, [r2, #0]
 8009326:	1855      	adds	r5, r2, r1
 8009328:	42a5      	cmp	r5, r4
 800932a:	d10b      	bne.n	8009344 <_free_r+0x70>
 800932c:	6824      	ldr	r4, [r4, #0]
 800932e:	4421      	add	r1, r4
 8009330:	1854      	adds	r4, r2, r1
 8009332:	42a3      	cmp	r3, r4
 8009334:	6011      	str	r1, [r2, #0]
 8009336:	d1e0      	bne.n	80092fa <_free_r+0x26>
 8009338:	681c      	ldr	r4, [r3, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	6053      	str	r3, [r2, #4]
 800933e:	4421      	add	r1, r4
 8009340:	6011      	str	r1, [r2, #0]
 8009342:	e7da      	b.n	80092fa <_free_r+0x26>
 8009344:	d902      	bls.n	800934c <_free_r+0x78>
 8009346:	230c      	movs	r3, #12
 8009348:	6003      	str	r3, [r0, #0]
 800934a:	e7d6      	b.n	80092fa <_free_r+0x26>
 800934c:	6825      	ldr	r5, [r4, #0]
 800934e:	1961      	adds	r1, r4, r5
 8009350:	428b      	cmp	r3, r1
 8009352:	bf04      	itt	eq
 8009354:	6819      	ldreq	r1, [r3, #0]
 8009356:	685b      	ldreq	r3, [r3, #4]
 8009358:	6063      	str	r3, [r4, #4]
 800935a:	bf04      	itt	eq
 800935c:	1949      	addeq	r1, r1, r5
 800935e:	6021      	streq	r1, [r4, #0]
 8009360:	6054      	str	r4, [r2, #4]
 8009362:	e7ca      	b.n	80092fa <_free_r+0x26>
 8009364:	b003      	add	sp, #12
 8009366:	bd30      	pop	{r4, r5, pc}
 8009368:	24000210 	.word	0x24000210

0800936c <sbrk_aligned>:
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	4e0e      	ldr	r6, [pc, #56]	; (80093a8 <sbrk_aligned+0x3c>)
 8009370:	460c      	mov	r4, r1
 8009372:	6831      	ldr	r1, [r6, #0]
 8009374:	4605      	mov	r5, r0
 8009376:	b911      	cbnz	r1, 800937e <sbrk_aligned+0x12>
 8009378:	f000 fb7a 	bl	8009a70 <_sbrk_r>
 800937c:	6030      	str	r0, [r6, #0]
 800937e:	4621      	mov	r1, r4
 8009380:	4628      	mov	r0, r5
 8009382:	f000 fb75 	bl	8009a70 <_sbrk_r>
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	d00a      	beq.n	80093a0 <sbrk_aligned+0x34>
 800938a:	1cc4      	adds	r4, r0, #3
 800938c:	f024 0403 	bic.w	r4, r4, #3
 8009390:	42a0      	cmp	r0, r4
 8009392:	d007      	beq.n	80093a4 <sbrk_aligned+0x38>
 8009394:	1a21      	subs	r1, r4, r0
 8009396:	4628      	mov	r0, r5
 8009398:	f000 fb6a 	bl	8009a70 <_sbrk_r>
 800939c:	3001      	adds	r0, #1
 800939e:	d101      	bne.n	80093a4 <sbrk_aligned+0x38>
 80093a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80093a4:	4620      	mov	r0, r4
 80093a6:	bd70      	pop	{r4, r5, r6, pc}
 80093a8:	24000214 	.word	0x24000214

080093ac <_malloc_r>:
 80093ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b0:	1ccd      	adds	r5, r1, #3
 80093b2:	f025 0503 	bic.w	r5, r5, #3
 80093b6:	3508      	adds	r5, #8
 80093b8:	2d0c      	cmp	r5, #12
 80093ba:	bf38      	it	cc
 80093bc:	250c      	movcc	r5, #12
 80093be:	2d00      	cmp	r5, #0
 80093c0:	4607      	mov	r7, r0
 80093c2:	db01      	blt.n	80093c8 <_malloc_r+0x1c>
 80093c4:	42a9      	cmp	r1, r5
 80093c6:	d905      	bls.n	80093d4 <_malloc_r+0x28>
 80093c8:	230c      	movs	r3, #12
 80093ca:	603b      	str	r3, [r7, #0]
 80093cc:	2600      	movs	r6, #0
 80093ce:	4630      	mov	r0, r6
 80093d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d4:	4e2e      	ldr	r6, [pc, #184]	; (8009490 <_malloc_r+0xe4>)
 80093d6:	f000 fbf5 	bl	8009bc4 <__malloc_lock>
 80093da:	6833      	ldr	r3, [r6, #0]
 80093dc:	461c      	mov	r4, r3
 80093de:	bb34      	cbnz	r4, 800942e <_malloc_r+0x82>
 80093e0:	4629      	mov	r1, r5
 80093e2:	4638      	mov	r0, r7
 80093e4:	f7ff ffc2 	bl	800936c <sbrk_aligned>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	4604      	mov	r4, r0
 80093ec:	d14d      	bne.n	800948a <_malloc_r+0xde>
 80093ee:	6834      	ldr	r4, [r6, #0]
 80093f0:	4626      	mov	r6, r4
 80093f2:	2e00      	cmp	r6, #0
 80093f4:	d140      	bne.n	8009478 <_malloc_r+0xcc>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	4631      	mov	r1, r6
 80093fa:	4638      	mov	r0, r7
 80093fc:	eb04 0803 	add.w	r8, r4, r3
 8009400:	f000 fb36 	bl	8009a70 <_sbrk_r>
 8009404:	4580      	cmp	r8, r0
 8009406:	d13a      	bne.n	800947e <_malloc_r+0xd2>
 8009408:	6821      	ldr	r1, [r4, #0]
 800940a:	3503      	adds	r5, #3
 800940c:	1a6d      	subs	r5, r5, r1
 800940e:	f025 0503 	bic.w	r5, r5, #3
 8009412:	3508      	adds	r5, #8
 8009414:	2d0c      	cmp	r5, #12
 8009416:	bf38      	it	cc
 8009418:	250c      	movcc	r5, #12
 800941a:	4629      	mov	r1, r5
 800941c:	4638      	mov	r0, r7
 800941e:	f7ff ffa5 	bl	800936c <sbrk_aligned>
 8009422:	3001      	adds	r0, #1
 8009424:	d02b      	beq.n	800947e <_malloc_r+0xd2>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	442b      	add	r3, r5
 800942a:	6023      	str	r3, [r4, #0]
 800942c:	e00e      	b.n	800944c <_malloc_r+0xa0>
 800942e:	6822      	ldr	r2, [r4, #0]
 8009430:	1b52      	subs	r2, r2, r5
 8009432:	d41e      	bmi.n	8009472 <_malloc_r+0xc6>
 8009434:	2a0b      	cmp	r2, #11
 8009436:	d916      	bls.n	8009466 <_malloc_r+0xba>
 8009438:	1961      	adds	r1, r4, r5
 800943a:	42a3      	cmp	r3, r4
 800943c:	6025      	str	r5, [r4, #0]
 800943e:	bf18      	it	ne
 8009440:	6059      	strne	r1, [r3, #4]
 8009442:	6863      	ldr	r3, [r4, #4]
 8009444:	bf08      	it	eq
 8009446:	6031      	streq	r1, [r6, #0]
 8009448:	5162      	str	r2, [r4, r5]
 800944a:	604b      	str	r3, [r1, #4]
 800944c:	4638      	mov	r0, r7
 800944e:	f104 060b 	add.w	r6, r4, #11
 8009452:	f000 fbbd 	bl	8009bd0 <__malloc_unlock>
 8009456:	f026 0607 	bic.w	r6, r6, #7
 800945a:	1d23      	adds	r3, r4, #4
 800945c:	1af2      	subs	r2, r6, r3
 800945e:	d0b6      	beq.n	80093ce <_malloc_r+0x22>
 8009460:	1b9b      	subs	r3, r3, r6
 8009462:	50a3      	str	r3, [r4, r2]
 8009464:	e7b3      	b.n	80093ce <_malloc_r+0x22>
 8009466:	6862      	ldr	r2, [r4, #4]
 8009468:	42a3      	cmp	r3, r4
 800946a:	bf0c      	ite	eq
 800946c:	6032      	streq	r2, [r6, #0]
 800946e:	605a      	strne	r2, [r3, #4]
 8009470:	e7ec      	b.n	800944c <_malloc_r+0xa0>
 8009472:	4623      	mov	r3, r4
 8009474:	6864      	ldr	r4, [r4, #4]
 8009476:	e7b2      	b.n	80093de <_malloc_r+0x32>
 8009478:	4634      	mov	r4, r6
 800947a:	6876      	ldr	r6, [r6, #4]
 800947c:	e7b9      	b.n	80093f2 <_malloc_r+0x46>
 800947e:	230c      	movs	r3, #12
 8009480:	603b      	str	r3, [r7, #0]
 8009482:	4638      	mov	r0, r7
 8009484:	f000 fba4 	bl	8009bd0 <__malloc_unlock>
 8009488:	e7a1      	b.n	80093ce <_malloc_r+0x22>
 800948a:	6025      	str	r5, [r4, #0]
 800948c:	e7de      	b.n	800944c <_malloc_r+0xa0>
 800948e:	bf00      	nop
 8009490:	24000210 	.word	0x24000210

08009494 <__sfputc_r>:
 8009494:	6893      	ldr	r3, [r2, #8]
 8009496:	3b01      	subs	r3, #1
 8009498:	2b00      	cmp	r3, #0
 800949a:	b410      	push	{r4}
 800949c:	6093      	str	r3, [r2, #8]
 800949e:	da08      	bge.n	80094b2 <__sfputc_r+0x1e>
 80094a0:	6994      	ldr	r4, [r2, #24]
 80094a2:	42a3      	cmp	r3, r4
 80094a4:	db01      	blt.n	80094aa <__sfputc_r+0x16>
 80094a6:	290a      	cmp	r1, #10
 80094a8:	d103      	bne.n	80094b2 <__sfputc_r+0x1e>
 80094aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ae:	f7ff bc31 	b.w	8008d14 <__swbuf_r>
 80094b2:	6813      	ldr	r3, [r2, #0]
 80094b4:	1c58      	adds	r0, r3, #1
 80094b6:	6010      	str	r0, [r2, #0]
 80094b8:	7019      	strb	r1, [r3, #0]
 80094ba:	4608      	mov	r0, r1
 80094bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <__sfputs_r>:
 80094c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c4:	4606      	mov	r6, r0
 80094c6:	460f      	mov	r7, r1
 80094c8:	4614      	mov	r4, r2
 80094ca:	18d5      	adds	r5, r2, r3
 80094cc:	42ac      	cmp	r4, r5
 80094ce:	d101      	bne.n	80094d4 <__sfputs_r+0x12>
 80094d0:	2000      	movs	r0, #0
 80094d2:	e007      	b.n	80094e4 <__sfputs_r+0x22>
 80094d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d8:	463a      	mov	r2, r7
 80094da:	4630      	mov	r0, r6
 80094dc:	f7ff ffda 	bl	8009494 <__sfputc_r>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d1f3      	bne.n	80094cc <__sfputs_r+0xa>
 80094e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094e8 <_vfiprintf_r>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	460d      	mov	r5, r1
 80094ee:	b09d      	sub	sp, #116	; 0x74
 80094f0:	4614      	mov	r4, r2
 80094f2:	4698      	mov	r8, r3
 80094f4:	4606      	mov	r6, r0
 80094f6:	b118      	cbz	r0, 8009500 <_vfiprintf_r+0x18>
 80094f8:	6983      	ldr	r3, [r0, #24]
 80094fa:	b90b      	cbnz	r3, 8009500 <_vfiprintf_r+0x18>
 80094fc:	f7ff fde4 	bl	80090c8 <__sinit>
 8009500:	4b89      	ldr	r3, [pc, #548]	; (8009728 <_vfiprintf_r+0x240>)
 8009502:	429d      	cmp	r5, r3
 8009504:	d11b      	bne.n	800953e <_vfiprintf_r+0x56>
 8009506:	6875      	ldr	r5, [r6, #4]
 8009508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800950a:	07d9      	lsls	r1, r3, #31
 800950c:	d405      	bmi.n	800951a <_vfiprintf_r+0x32>
 800950e:	89ab      	ldrh	r3, [r5, #12]
 8009510:	059a      	lsls	r2, r3, #22
 8009512:	d402      	bmi.n	800951a <_vfiprintf_r+0x32>
 8009514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009516:	f7ff fe75 	bl	8009204 <__retarget_lock_acquire_recursive>
 800951a:	89ab      	ldrh	r3, [r5, #12]
 800951c:	071b      	lsls	r3, r3, #28
 800951e:	d501      	bpl.n	8009524 <_vfiprintf_r+0x3c>
 8009520:	692b      	ldr	r3, [r5, #16]
 8009522:	b9eb      	cbnz	r3, 8009560 <_vfiprintf_r+0x78>
 8009524:	4629      	mov	r1, r5
 8009526:	4630      	mov	r0, r6
 8009528:	f7ff fc46 	bl	8008db8 <__swsetup_r>
 800952c:	b1c0      	cbz	r0, 8009560 <_vfiprintf_r+0x78>
 800952e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009530:	07dc      	lsls	r4, r3, #31
 8009532:	d50e      	bpl.n	8009552 <_vfiprintf_r+0x6a>
 8009534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009538:	b01d      	add	sp, #116	; 0x74
 800953a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953e:	4b7b      	ldr	r3, [pc, #492]	; (800972c <_vfiprintf_r+0x244>)
 8009540:	429d      	cmp	r5, r3
 8009542:	d101      	bne.n	8009548 <_vfiprintf_r+0x60>
 8009544:	68b5      	ldr	r5, [r6, #8]
 8009546:	e7df      	b.n	8009508 <_vfiprintf_r+0x20>
 8009548:	4b79      	ldr	r3, [pc, #484]	; (8009730 <_vfiprintf_r+0x248>)
 800954a:	429d      	cmp	r5, r3
 800954c:	bf08      	it	eq
 800954e:	68f5      	ldreq	r5, [r6, #12]
 8009550:	e7da      	b.n	8009508 <_vfiprintf_r+0x20>
 8009552:	89ab      	ldrh	r3, [r5, #12]
 8009554:	0598      	lsls	r0, r3, #22
 8009556:	d4ed      	bmi.n	8009534 <_vfiprintf_r+0x4c>
 8009558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800955a:	f7ff fe54 	bl	8009206 <__retarget_lock_release_recursive>
 800955e:	e7e9      	b.n	8009534 <_vfiprintf_r+0x4c>
 8009560:	2300      	movs	r3, #0
 8009562:	9309      	str	r3, [sp, #36]	; 0x24
 8009564:	2320      	movs	r3, #32
 8009566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800956a:	f8cd 800c 	str.w	r8, [sp, #12]
 800956e:	2330      	movs	r3, #48	; 0x30
 8009570:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009734 <_vfiprintf_r+0x24c>
 8009574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009578:	f04f 0901 	mov.w	r9, #1
 800957c:	4623      	mov	r3, r4
 800957e:	469a      	mov	sl, r3
 8009580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009584:	b10a      	cbz	r2, 800958a <_vfiprintf_r+0xa2>
 8009586:	2a25      	cmp	r2, #37	; 0x25
 8009588:	d1f9      	bne.n	800957e <_vfiprintf_r+0x96>
 800958a:	ebba 0b04 	subs.w	fp, sl, r4
 800958e:	d00b      	beq.n	80095a8 <_vfiprintf_r+0xc0>
 8009590:	465b      	mov	r3, fp
 8009592:	4622      	mov	r2, r4
 8009594:	4629      	mov	r1, r5
 8009596:	4630      	mov	r0, r6
 8009598:	f7ff ff93 	bl	80094c2 <__sfputs_r>
 800959c:	3001      	adds	r0, #1
 800959e:	f000 80aa 	beq.w	80096f6 <_vfiprintf_r+0x20e>
 80095a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095a4:	445a      	add	r2, fp
 80095a6:	9209      	str	r2, [sp, #36]	; 0x24
 80095a8:	f89a 3000 	ldrb.w	r3, [sl]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 80a2 	beq.w	80096f6 <_vfiprintf_r+0x20e>
 80095b2:	2300      	movs	r3, #0
 80095b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095bc:	f10a 0a01 	add.w	sl, sl, #1
 80095c0:	9304      	str	r3, [sp, #16]
 80095c2:	9307      	str	r3, [sp, #28]
 80095c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095c8:	931a      	str	r3, [sp, #104]	; 0x68
 80095ca:	4654      	mov	r4, sl
 80095cc:	2205      	movs	r2, #5
 80095ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d2:	4858      	ldr	r0, [pc, #352]	; (8009734 <_vfiprintf_r+0x24c>)
 80095d4:	f7f6 fe9c 	bl	8000310 <memchr>
 80095d8:	9a04      	ldr	r2, [sp, #16]
 80095da:	b9d8      	cbnz	r0, 8009614 <_vfiprintf_r+0x12c>
 80095dc:	06d1      	lsls	r1, r2, #27
 80095de:	bf44      	itt	mi
 80095e0:	2320      	movmi	r3, #32
 80095e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095e6:	0713      	lsls	r3, r2, #28
 80095e8:	bf44      	itt	mi
 80095ea:	232b      	movmi	r3, #43	; 0x2b
 80095ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095f0:	f89a 3000 	ldrb.w	r3, [sl]
 80095f4:	2b2a      	cmp	r3, #42	; 0x2a
 80095f6:	d015      	beq.n	8009624 <_vfiprintf_r+0x13c>
 80095f8:	9a07      	ldr	r2, [sp, #28]
 80095fa:	4654      	mov	r4, sl
 80095fc:	2000      	movs	r0, #0
 80095fe:	f04f 0c0a 	mov.w	ip, #10
 8009602:	4621      	mov	r1, r4
 8009604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009608:	3b30      	subs	r3, #48	; 0x30
 800960a:	2b09      	cmp	r3, #9
 800960c:	d94e      	bls.n	80096ac <_vfiprintf_r+0x1c4>
 800960e:	b1b0      	cbz	r0, 800963e <_vfiprintf_r+0x156>
 8009610:	9207      	str	r2, [sp, #28]
 8009612:	e014      	b.n	800963e <_vfiprintf_r+0x156>
 8009614:	eba0 0308 	sub.w	r3, r0, r8
 8009618:	fa09 f303 	lsl.w	r3, r9, r3
 800961c:	4313      	orrs	r3, r2
 800961e:	9304      	str	r3, [sp, #16]
 8009620:	46a2      	mov	sl, r4
 8009622:	e7d2      	b.n	80095ca <_vfiprintf_r+0xe2>
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	1d19      	adds	r1, r3, #4
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	9103      	str	r1, [sp, #12]
 800962c:	2b00      	cmp	r3, #0
 800962e:	bfbb      	ittet	lt
 8009630:	425b      	neglt	r3, r3
 8009632:	f042 0202 	orrlt.w	r2, r2, #2
 8009636:	9307      	strge	r3, [sp, #28]
 8009638:	9307      	strlt	r3, [sp, #28]
 800963a:	bfb8      	it	lt
 800963c:	9204      	strlt	r2, [sp, #16]
 800963e:	7823      	ldrb	r3, [r4, #0]
 8009640:	2b2e      	cmp	r3, #46	; 0x2e
 8009642:	d10c      	bne.n	800965e <_vfiprintf_r+0x176>
 8009644:	7863      	ldrb	r3, [r4, #1]
 8009646:	2b2a      	cmp	r3, #42	; 0x2a
 8009648:	d135      	bne.n	80096b6 <_vfiprintf_r+0x1ce>
 800964a:	9b03      	ldr	r3, [sp, #12]
 800964c:	1d1a      	adds	r2, r3, #4
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	9203      	str	r2, [sp, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	bfb8      	it	lt
 8009656:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800965a:	3402      	adds	r4, #2
 800965c:	9305      	str	r3, [sp, #20]
 800965e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009744 <_vfiprintf_r+0x25c>
 8009662:	7821      	ldrb	r1, [r4, #0]
 8009664:	2203      	movs	r2, #3
 8009666:	4650      	mov	r0, sl
 8009668:	f7f6 fe52 	bl	8000310 <memchr>
 800966c:	b140      	cbz	r0, 8009680 <_vfiprintf_r+0x198>
 800966e:	2340      	movs	r3, #64	; 0x40
 8009670:	eba0 000a 	sub.w	r0, r0, sl
 8009674:	fa03 f000 	lsl.w	r0, r3, r0
 8009678:	9b04      	ldr	r3, [sp, #16]
 800967a:	4303      	orrs	r3, r0
 800967c:	3401      	adds	r4, #1
 800967e:	9304      	str	r3, [sp, #16]
 8009680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009684:	482c      	ldr	r0, [pc, #176]	; (8009738 <_vfiprintf_r+0x250>)
 8009686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800968a:	2206      	movs	r2, #6
 800968c:	f7f6 fe40 	bl	8000310 <memchr>
 8009690:	2800      	cmp	r0, #0
 8009692:	d03f      	beq.n	8009714 <_vfiprintf_r+0x22c>
 8009694:	4b29      	ldr	r3, [pc, #164]	; (800973c <_vfiprintf_r+0x254>)
 8009696:	bb1b      	cbnz	r3, 80096e0 <_vfiprintf_r+0x1f8>
 8009698:	9b03      	ldr	r3, [sp, #12]
 800969a:	3307      	adds	r3, #7
 800969c:	f023 0307 	bic.w	r3, r3, #7
 80096a0:	3308      	adds	r3, #8
 80096a2:	9303      	str	r3, [sp, #12]
 80096a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a6:	443b      	add	r3, r7
 80096a8:	9309      	str	r3, [sp, #36]	; 0x24
 80096aa:	e767      	b.n	800957c <_vfiprintf_r+0x94>
 80096ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80096b0:	460c      	mov	r4, r1
 80096b2:	2001      	movs	r0, #1
 80096b4:	e7a5      	b.n	8009602 <_vfiprintf_r+0x11a>
 80096b6:	2300      	movs	r3, #0
 80096b8:	3401      	adds	r4, #1
 80096ba:	9305      	str	r3, [sp, #20]
 80096bc:	4619      	mov	r1, r3
 80096be:	f04f 0c0a 	mov.w	ip, #10
 80096c2:	4620      	mov	r0, r4
 80096c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096c8:	3a30      	subs	r2, #48	; 0x30
 80096ca:	2a09      	cmp	r2, #9
 80096cc:	d903      	bls.n	80096d6 <_vfiprintf_r+0x1ee>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d0c5      	beq.n	800965e <_vfiprintf_r+0x176>
 80096d2:	9105      	str	r1, [sp, #20]
 80096d4:	e7c3      	b.n	800965e <_vfiprintf_r+0x176>
 80096d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80096da:	4604      	mov	r4, r0
 80096dc:	2301      	movs	r3, #1
 80096de:	e7f0      	b.n	80096c2 <_vfiprintf_r+0x1da>
 80096e0:	ab03      	add	r3, sp, #12
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	462a      	mov	r2, r5
 80096e6:	4b16      	ldr	r3, [pc, #88]	; (8009740 <_vfiprintf_r+0x258>)
 80096e8:	a904      	add	r1, sp, #16
 80096ea:	4630      	mov	r0, r6
 80096ec:	f3af 8000 	nop.w
 80096f0:	4607      	mov	r7, r0
 80096f2:	1c78      	adds	r0, r7, #1
 80096f4:	d1d6      	bne.n	80096a4 <_vfiprintf_r+0x1bc>
 80096f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096f8:	07d9      	lsls	r1, r3, #31
 80096fa:	d405      	bmi.n	8009708 <_vfiprintf_r+0x220>
 80096fc:	89ab      	ldrh	r3, [r5, #12]
 80096fe:	059a      	lsls	r2, r3, #22
 8009700:	d402      	bmi.n	8009708 <_vfiprintf_r+0x220>
 8009702:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009704:	f7ff fd7f 	bl	8009206 <__retarget_lock_release_recursive>
 8009708:	89ab      	ldrh	r3, [r5, #12]
 800970a:	065b      	lsls	r3, r3, #25
 800970c:	f53f af12 	bmi.w	8009534 <_vfiprintf_r+0x4c>
 8009710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009712:	e711      	b.n	8009538 <_vfiprintf_r+0x50>
 8009714:	ab03      	add	r3, sp, #12
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	462a      	mov	r2, r5
 800971a:	4b09      	ldr	r3, [pc, #36]	; (8009740 <_vfiprintf_r+0x258>)
 800971c:	a904      	add	r1, sp, #16
 800971e:	4630      	mov	r0, r6
 8009720:	f000 f880 	bl	8009824 <_printf_i>
 8009724:	e7e4      	b.n	80096f0 <_vfiprintf_r+0x208>
 8009726:	bf00      	nop
 8009728:	08009d18 	.word	0x08009d18
 800972c:	08009d38 	.word	0x08009d38
 8009730:	08009cf8 	.word	0x08009cf8
 8009734:	08009d58 	.word	0x08009d58
 8009738:	08009d62 	.word	0x08009d62
 800973c:	00000000 	.word	0x00000000
 8009740:	080094c3 	.word	0x080094c3
 8009744:	08009d5e 	.word	0x08009d5e

08009748 <_printf_common>:
 8009748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800974c:	4616      	mov	r6, r2
 800974e:	4699      	mov	r9, r3
 8009750:	688a      	ldr	r2, [r1, #8]
 8009752:	690b      	ldr	r3, [r1, #16]
 8009754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009758:	4293      	cmp	r3, r2
 800975a:	bfb8      	it	lt
 800975c:	4613      	movlt	r3, r2
 800975e:	6033      	str	r3, [r6, #0]
 8009760:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009764:	4607      	mov	r7, r0
 8009766:	460c      	mov	r4, r1
 8009768:	b10a      	cbz	r2, 800976e <_printf_common+0x26>
 800976a:	3301      	adds	r3, #1
 800976c:	6033      	str	r3, [r6, #0]
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	0699      	lsls	r1, r3, #26
 8009772:	bf42      	ittt	mi
 8009774:	6833      	ldrmi	r3, [r6, #0]
 8009776:	3302      	addmi	r3, #2
 8009778:	6033      	strmi	r3, [r6, #0]
 800977a:	6825      	ldr	r5, [r4, #0]
 800977c:	f015 0506 	ands.w	r5, r5, #6
 8009780:	d106      	bne.n	8009790 <_printf_common+0x48>
 8009782:	f104 0a19 	add.w	sl, r4, #25
 8009786:	68e3      	ldr	r3, [r4, #12]
 8009788:	6832      	ldr	r2, [r6, #0]
 800978a:	1a9b      	subs	r3, r3, r2
 800978c:	42ab      	cmp	r3, r5
 800978e:	dc26      	bgt.n	80097de <_printf_common+0x96>
 8009790:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009794:	1e13      	subs	r3, r2, #0
 8009796:	6822      	ldr	r2, [r4, #0]
 8009798:	bf18      	it	ne
 800979a:	2301      	movne	r3, #1
 800979c:	0692      	lsls	r2, r2, #26
 800979e:	d42b      	bmi.n	80097f8 <_printf_common+0xb0>
 80097a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097a4:	4649      	mov	r1, r9
 80097a6:	4638      	mov	r0, r7
 80097a8:	47c0      	blx	r8
 80097aa:	3001      	adds	r0, #1
 80097ac:	d01e      	beq.n	80097ec <_printf_common+0xa4>
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	68e5      	ldr	r5, [r4, #12]
 80097b2:	6832      	ldr	r2, [r6, #0]
 80097b4:	f003 0306 	and.w	r3, r3, #6
 80097b8:	2b04      	cmp	r3, #4
 80097ba:	bf08      	it	eq
 80097bc:	1aad      	subeq	r5, r5, r2
 80097be:	68a3      	ldr	r3, [r4, #8]
 80097c0:	6922      	ldr	r2, [r4, #16]
 80097c2:	bf0c      	ite	eq
 80097c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097c8:	2500      	movne	r5, #0
 80097ca:	4293      	cmp	r3, r2
 80097cc:	bfc4      	itt	gt
 80097ce:	1a9b      	subgt	r3, r3, r2
 80097d0:	18ed      	addgt	r5, r5, r3
 80097d2:	2600      	movs	r6, #0
 80097d4:	341a      	adds	r4, #26
 80097d6:	42b5      	cmp	r5, r6
 80097d8:	d11a      	bne.n	8009810 <_printf_common+0xc8>
 80097da:	2000      	movs	r0, #0
 80097dc:	e008      	b.n	80097f0 <_printf_common+0xa8>
 80097de:	2301      	movs	r3, #1
 80097e0:	4652      	mov	r2, sl
 80097e2:	4649      	mov	r1, r9
 80097e4:	4638      	mov	r0, r7
 80097e6:	47c0      	blx	r8
 80097e8:	3001      	adds	r0, #1
 80097ea:	d103      	bne.n	80097f4 <_printf_common+0xac>
 80097ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f4:	3501      	adds	r5, #1
 80097f6:	e7c6      	b.n	8009786 <_printf_common+0x3e>
 80097f8:	18e1      	adds	r1, r4, r3
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	2030      	movs	r0, #48	; 0x30
 80097fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009802:	4422      	add	r2, r4
 8009804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009808:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800980c:	3302      	adds	r3, #2
 800980e:	e7c7      	b.n	80097a0 <_printf_common+0x58>
 8009810:	2301      	movs	r3, #1
 8009812:	4622      	mov	r2, r4
 8009814:	4649      	mov	r1, r9
 8009816:	4638      	mov	r0, r7
 8009818:	47c0      	blx	r8
 800981a:	3001      	adds	r0, #1
 800981c:	d0e6      	beq.n	80097ec <_printf_common+0xa4>
 800981e:	3601      	adds	r6, #1
 8009820:	e7d9      	b.n	80097d6 <_printf_common+0x8e>
	...

08009824 <_printf_i>:
 8009824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009828:	7e0f      	ldrb	r7, [r1, #24]
 800982a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800982c:	2f78      	cmp	r7, #120	; 0x78
 800982e:	4691      	mov	r9, r2
 8009830:	4680      	mov	r8, r0
 8009832:	460c      	mov	r4, r1
 8009834:	469a      	mov	sl, r3
 8009836:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800983a:	d807      	bhi.n	800984c <_printf_i+0x28>
 800983c:	2f62      	cmp	r7, #98	; 0x62
 800983e:	d80a      	bhi.n	8009856 <_printf_i+0x32>
 8009840:	2f00      	cmp	r7, #0
 8009842:	f000 80d8 	beq.w	80099f6 <_printf_i+0x1d2>
 8009846:	2f58      	cmp	r7, #88	; 0x58
 8009848:	f000 80a3 	beq.w	8009992 <_printf_i+0x16e>
 800984c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009854:	e03a      	b.n	80098cc <_printf_i+0xa8>
 8009856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800985a:	2b15      	cmp	r3, #21
 800985c:	d8f6      	bhi.n	800984c <_printf_i+0x28>
 800985e:	a101      	add	r1, pc, #4	; (adr r1, 8009864 <_printf_i+0x40>)
 8009860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009864:	080098bd 	.word	0x080098bd
 8009868:	080098d1 	.word	0x080098d1
 800986c:	0800984d 	.word	0x0800984d
 8009870:	0800984d 	.word	0x0800984d
 8009874:	0800984d 	.word	0x0800984d
 8009878:	0800984d 	.word	0x0800984d
 800987c:	080098d1 	.word	0x080098d1
 8009880:	0800984d 	.word	0x0800984d
 8009884:	0800984d 	.word	0x0800984d
 8009888:	0800984d 	.word	0x0800984d
 800988c:	0800984d 	.word	0x0800984d
 8009890:	080099dd 	.word	0x080099dd
 8009894:	08009901 	.word	0x08009901
 8009898:	080099bf 	.word	0x080099bf
 800989c:	0800984d 	.word	0x0800984d
 80098a0:	0800984d 	.word	0x0800984d
 80098a4:	080099ff 	.word	0x080099ff
 80098a8:	0800984d 	.word	0x0800984d
 80098ac:	08009901 	.word	0x08009901
 80098b0:	0800984d 	.word	0x0800984d
 80098b4:	0800984d 	.word	0x0800984d
 80098b8:	080099c7 	.word	0x080099c7
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	1d1a      	adds	r2, r3, #4
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	602a      	str	r2, [r5, #0]
 80098c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098cc:	2301      	movs	r3, #1
 80098ce:	e0a3      	b.n	8009a18 <_printf_i+0x1f4>
 80098d0:	6820      	ldr	r0, [r4, #0]
 80098d2:	6829      	ldr	r1, [r5, #0]
 80098d4:	0606      	lsls	r6, r0, #24
 80098d6:	f101 0304 	add.w	r3, r1, #4
 80098da:	d50a      	bpl.n	80098f2 <_printf_i+0xce>
 80098dc:	680e      	ldr	r6, [r1, #0]
 80098de:	602b      	str	r3, [r5, #0]
 80098e0:	2e00      	cmp	r6, #0
 80098e2:	da03      	bge.n	80098ec <_printf_i+0xc8>
 80098e4:	232d      	movs	r3, #45	; 0x2d
 80098e6:	4276      	negs	r6, r6
 80098e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ec:	485e      	ldr	r0, [pc, #376]	; (8009a68 <_printf_i+0x244>)
 80098ee:	230a      	movs	r3, #10
 80098f0:	e019      	b.n	8009926 <_printf_i+0x102>
 80098f2:	680e      	ldr	r6, [r1, #0]
 80098f4:	602b      	str	r3, [r5, #0]
 80098f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098fa:	bf18      	it	ne
 80098fc:	b236      	sxthne	r6, r6
 80098fe:	e7ef      	b.n	80098e0 <_printf_i+0xbc>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	6820      	ldr	r0, [r4, #0]
 8009904:	1d19      	adds	r1, r3, #4
 8009906:	6029      	str	r1, [r5, #0]
 8009908:	0601      	lsls	r1, r0, #24
 800990a:	d501      	bpl.n	8009910 <_printf_i+0xec>
 800990c:	681e      	ldr	r6, [r3, #0]
 800990e:	e002      	b.n	8009916 <_printf_i+0xf2>
 8009910:	0646      	lsls	r6, r0, #25
 8009912:	d5fb      	bpl.n	800990c <_printf_i+0xe8>
 8009914:	881e      	ldrh	r6, [r3, #0]
 8009916:	4854      	ldr	r0, [pc, #336]	; (8009a68 <_printf_i+0x244>)
 8009918:	2f6f      	cmp	r7, #111	; 0x6f
 800991a:	bf0c      	ite	eq
 800991c:	2308      	moveq	r3, #8
 800991e:	230a      	movne	r3, #10
 8009920:	2100      	movs	r1, #0
 8009922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009926:	6865      	ldr	r5, [r4, #4]
 8009928:	60a5      	str	r5, [r4, #8]
 800992a:	2d00      	cmp	r5, #0
 800992c:	bfa2      	ittt	ge
 800992e:	6821      	ldrge	r1, [r4, #0]
 8009930:	f021 0104 	bicge.w	r1, r1, #4
 8009934:	6021      	strge	r1, [r4, #0]
 8009936:	b90e      	cbnz	r6, 800993c <_printf_i+0x118>
 8009938:	2d00      	cmp	r5, #0
 800993a:	d04d      	beq.n	80099d8 <_printf_i+0x1b4>
 800993c:	4615      	mov	r5, r2
 800993e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009942:	fb03 6711 	mls	r7, r3, r1, r6
 8009946:	5dc7      	ldrb	r7, [r0, r7]
 8009948:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800994c:	4637      	mov	r7, r6
 800994e:	42bb      	cmp	r3, r7
 8009950:	460e      	mov	r6, r1
 8009952:	d9f4      	bls.n	800993e <_printf_i+0x11a>
 8009954:	2b08      	cmp	r3, #8
 8009956:	d10b      	bne.n	8009970 <_printf_i+0x14c>
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	07de      	lsls	r6, r3, #31
 800995c:	d508      	bpl.n	8009970 <_printf_i+0x14c>
 800995e:	6923      	ldr	r3, [r4, #16]
 8009960:	6861      	ldr	r1, [r4, #4]
 8009962:	4299      	cmp	r1, r3
 8009964:	bfde      	ittt	le
 8009966:	2330      	movle	r3, #48	; 0x30
 8009968:	f805 3c01 	strble.w	r3, [r5, #-1]
 800996c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009970:	1b52      	subs	r2, r2, r5
 8009972:	6122      	str	r2, [r4, #16]
 8009974:	f8cd a000 	str.w	sl, [sp]
 8009978:	464b      	mov	r3, r9
 800997a:	aa03      	add	r2, sp, #12
 800997c:	4621      	mov	r1, r4
 800997e:	4640      	mov	r0, r8
 8009980:	f7ff fee2 	bl	8009748 <_printf_common>
 8009984:	3001      	adds	r0, #1
 8009986:	d14c      	bne.n	8009a22 <_printf_i+0x1fe>
 8009988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800998c:	b004      	add	sp, #16
 800998e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009992:	4835      	ldr	r0, [pc, #212]	; (8009a68 <_printf_i+0x244>)
 8009994:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009998:	6829      	ldr	r1, [r5, #0]
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	f851 6b04 	ldr.w	r6, [r1], #4
 80099a0:	6029      	str	r1, [r5, #0]
 80099a2:	061d      	lsls	r5, r3, #24
 80099a4:	d514      	bpl.n	80099d0 <_printf_i+0x1ac>
 80099a6:	07df      	lsls	r7, r3, #31
 80099a8:	bf44      	itt	mi
 80099aa:	f043 0320 	orrmi.w	r3, r3, #32
 80099ae:	6023      	strmi	r3, [r4, #0]
 80099b0:	b91e      	cbnz	r6, 80099ba <_printf_i+0x196>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	f023 0320 	bic.w	r3, r3, #32
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	2310      	movs	r3, #16
 80099bc:	e7b0      	b.n	8009920 <_printf_i+0xfc>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	f043 0320 	orr.w	r3, r3, #32
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	2378      	movs	r3, #120	; 0x78
 80099c8:	4828      	ldr	r0, [pc, #160]	; (8009a6c <_printf_i+0x248>)
 80099ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099ce:	e7e3      	b.n	8009998 <_printf_i+0x174>
 80099d0:	0659      	lsls	r1, r3, #25
 80099d2:	bf48      	it	mi
 80099d4:	b2b6      	uxthmi	r6, r6
 80099d6:	e7e6      	b.n	80099a6 <_printf_i+0x182>
 80099d8:	4615      	mov	r5, r2
 80099da:	e7bb      	b.n	8009954 <_printf_i+0x130>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	6826      	ldr	r6, [r4, #0]
 80099e0:	6961      	ldr	r1, [r4, #20]
 80099e2:	1d18      	adds	r0, r3, #4
 80099e4:	6028      	str	r0, [r5, #0]
 80099e6:	0635      	lsls	r5, r6, #24
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	d501      	bpl.n	80099f0 <_printf_i+0x1cc>
 80099ec:	6019      	str	r1, [r3, #0]
 80099ee:	e002      	b.n	80099f6 <_printf_i+0x1d2>
 80099f0:	0670      	lsls	r0, r6, #25
 80099f2:	d5fb      	bpl.n	80099ec <_printf_i+0x1c8>
 80099f4:	8019      	strh	r1, [r3, #0]
 80099f6:	2300      	movs	r3, #0
 80099f8:	6123      	str	r3, [r4, #16]
 80099fa:	4615      	mov	r5, r2
 80099fc:	e7ba      	b.n	8009974 <_printf_i+0x150>
 80099fe:	682b      	ldr	r3, [r5, #0]
 8009a00:	1d1a      	adds	r2, r3, #4
 8009a02:	602a      	str	r2, [r5, #0]
 8009a04:	681d      	ldr	r5, [r3, #0]
 8009a06:	6862      	ldr	r2, [r4, #4]
 8009a08:	2100      	movs	r1, #0
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f7f6 fc80 	bl	8000310 <memchr>
 8009a10:	b108      	cbz	r0, 8009a16 <_printf_i+0x1f2>
 8009a12:	1b40      	subs	r0, r0, r5
 8009a14:	6060      	str	r0, [r4, #4]
 8009a16:	6863      	ldr	r3, [r4, #4]
 8009a18:	6123      	str	r3, [r4, #16]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a20:	e7a8      	b.n	8009974 <_printf_i+0x150>
 8009a22:	6923      	ldr	r3, [r4, #16]
 8009a24:	462a      	mov	r2, r5
 8009a26:	4649      	mov	r1, r9
 8009a28:	4640      	mov	r0, r8
 8009a2a:	47d0      	blx	sl
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	d0ab      	beq.n	8009988 <_printf_i+0x164>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	079b      	lsls	r3, r3, #30
 8009a34:	d413      	bmi.n	8009a5e <_printf_i+0x23a>
 8009a36:	68e0      	ldr	r0, [r4, #12]
 8009a38:	9b03      	ldr	r3, [sp, #12]
 8009a3a:	4298      	cmp	r0, r3
 8009a3c:	bfb8      	it	lt
 8009a3e:	4618      	movlt	r0, r3
 8009a40:	e7a4      	b.n	800998c <_printf_i+0x168>
 8009a42:	2301      	movs	r3, #1
 8009a44:	4632      	mov	r2, r6
 8009a46:	4649      	mov	r1, r9
 8009a48:	4640      	mov	r0, r8
 8009a4a:	47d0      	blx	sl
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d09b      	beq.n	8009988 <_printf_i+0x164>
 8009a50:	3501      	adds	r5, #1
 8009a52:	68e3      	ldr	r3, [r4, #12]
 8009a54:	9903      	ldr	r1, [sp, #12]
 8009a56:	1a5b      	subs	r3, r3, r1
 8009a58:	42ab      	cmp	r3, r5
 8009a5a:	dcf2      	bgt.n	8009a42 <_printf_i+0x21e>
 8009a5c:	e7eb      	b.n	8009a36 <_printf_i+0x212>
 8009a5e:	2500      	movs	r5, #0
 8009a60:	f104 0619 	add.w	r6, r4, #25
 8009a64:	e7f5      	b.n	8009a52 <_printf_i+0x22e>
 8009a66:	bf00      	nop
 8009a68:	08009d69 	.word	0x08009d69
 8009a6c:	08009d7a 	.word	0x08009d7a

08009a70 <_sbrk_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d06      	ldr	r5, [pc, #24]	; (8009a8c <_sbrk_r+0x1c>)
 8009a74:	2300      	movs	r3, #0
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	602b      	str	r3, [r5, #0]
 8009a7c:	f7f7 faea 	bl	8001054 <_sbrk>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_sbrk_r+0x1a>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_sbrk_r+0x1a>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	24000218 	.word	0x24000218

08009a90 <__sread>:
 8009a90:	b510      	push	{r4, lr}
 8009a92:	460c      	mov	r4, r1
 8009a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a98:	f000 f8a0 	bl	8009bdc <_read_r>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	bfab      	itete	ge
 8009aa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8009aa4:	181b      	addge	r3, r3, r0
 8009aa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009aaa:	bfac      	ite	ge
 8009aac:	6563      	strge	r3, [r4, #84]	; 0x54
 8009aae:	81a3      	strhlt	r3, [r4, #12]
 8009ab0:	bd10      	pop	{r4, pc}

08009ab2 <__swrite>:
 8009ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab6:	461f      	mov	r7, r3
 8009ab8:	898b      	ldrh	r3, [r1, #12]
 8009aba:	05db      	lsls	r3, r3, #23
 8009abc:	4605      	mov	r5, r0
 8009abe:	460c      	mov	r4, r1
 8009ac0:	4616      	mov	r6, r2
 8009ac2:	d505      	bpl.n	8009ad0 <__swrite+0x1e>
 8009ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac8:	2302      	movs	r3, #2
 8009aca:	2200      	movs	r2, #0
 8009acc:	f000 f868 	bl	8009ba0 <_lseek_r>
 8009ad0:	89a3      	ldrh	r3, [r4, #12]
 8009ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ada:	81a3      	strh	r3, [r4, #12]
 8009adc:	4632      	mov	r2, r6
 8009ade:	463b      	mov	r3, r7
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae6:	f000 b817 	b.w	8009b18 <_write_r>

08009aea <__sseek>:
 8009aea:	b510      	push	{r4, lr}
 8009aec:	460c      	mov	r4, r1
 8009aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af2:	f000 f855 	bl	8009ba0 <_lseek_r>
 8009af6:	1c43      	adds	r3, r0, #1
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	bf15      	itete	ne
 8009afc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009afe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b06:	81a3      	strheq	r3, [r4, #12]
 8009b08:	bf18      	it	ne
 8009b0a:	81a3      	strhne	r3, [r4, #12]
 8009b0c:	bd10      	pop	{r4, pc}

08009b0e <__sclose>:
 8009b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b12:	f000 b813 	b.w	8009b3c <_close_r>
	...

08009b18 <_write_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d07      	ldr	r5, [pc, #28]	; (8009b38 <_write_r+0x20>)
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	4608      	mov	r0, r1
 8009b20:	4611      	mov	r1, r2
 8009b22:	2200      	movs	r2, #0
 8009b24:	602a      	str	r2, [r5, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	f7f6 fe96 	bl	8000858 <_write>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d102      	bne.n	8009b36 <_write_r+0x1e>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	b103      	cbz	r3, 8009b36 <_write_r+0x1e>
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	24000218 	.word	0x24000218

08009b3c <_close_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	4d06      	ldr	r5, [pc, #24]	; (8009b58 <_close_r+0x1c>)
 8009b40:	2300      	movs	r3, #0
 8009b42:	4604      	mov	r4, r0
 8009b44:	4608      	mov	r0, r1
 8009b46:	602b      	str	r3, [r5, #0]
 8009b48:	f7f7 fa4f 	bl	8000fea <_close>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	d102      	bne.n	8009b56 <_close_r+0x1a>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	b103      	cbz	r3, 8009b56 <_close_r+0x1a>
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	bd38      	pop	{r3, r4, r5, pc}
 8009b58:	24000218 	.word	0x24000218

08009b5c <_fstat_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	4d07      	ldr	r5, [pc, #28]	; (8009b7c <_fstat_r+0x20>)
 8009b60:	2300      	movs	r3, #0
 8009b62:	4604      	mov	r4, r0
 8009b64:	4608      	mov	r0, r1
 8009b66:	4611      	mov	r1, r2
 8009b68:	602b      	str	r3, [r5, #0]
 8009b6a:	f7f7 fa4a 	bl	8001002 <_fstat>
 8009b6e:	1c43      	adds	r3, r0, #1
 8009b70:	d102      	bne.n	8009b78 <_fstat_r+0x1c>
 8009b72:	682b      	ldr	r3, [r5, #0]
 8009b74:	b103      	cbz	r3, 8009b78 <_fstat_r+0x1c>
 8009b76:	6023      	str	r3, [r4, #0]
 8009b78:	bd38      	pop	{r3, r4, r5, pc}
 8009b7a:	bf00      	nop
 8009b7c:	24000218 	.word	0x24000218

08009b80 <_isatty_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4d06      	ldr	r5, [pc, #24]	; (8009b9c <_isatty_r+0x1c>)
 8009b84:	2300      	movs	r3, #0
 8009b86:	4604      	mov	r4, r0
 8009b88:	4608      	mov	r0, r1
 8009b8a:	602b      	str	r3, [r5, #0]
 8009b8c:	f7f7 fa49 	bl	8001022 <_isatty>
 8009b90:	1c43      	adds	r3, r0, #1
 8009b92:	d102      	bne.n	8009b9a <_isatty_r+0x1a>
 8009b94:	682b      	ldr	r3, [r5, #0]
 8009b96:	b103      	cbz	r3, 8009b9a <_isatty_r+0x1a>
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}
 8009b9c:	24000218 	.word	0x24000218

08009ba0 <_lseek_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4d07      	ldr	r5, [pc, #28]	; (8009bc0 <_lseek_r+0x20>)
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	4608      	mov	r0, r1
 8009ba8:	4611      	mov	r1, r2
 8009baa:	2200      	movs	r2, #0
 8009bac:	602a      	str	r2, [r5, #0]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f7f7 fa42 	bl	8001038 <_lseek>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d102      	bne.n	8009bbe <_lseek_r+0x1e>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	b103      	cbz	r3, 8009bbe <_lseek_r+0x1e>
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	24000218 	.word	0x24000218

08009bc4 <__malloc_lock>:
 8009bc4:	4801      	ldr	r0, [pc, #4]	; (8009bcc <__malloc_lock+0x8>)
 8009bc6:	f7ff bb1d 	b.w	8009204 <__retarget_lock_acquire_recursive>
 8009bca:	bf00      	nop
 8009bcc:	2400020c 	.word	0x2400020c

08009bd0 <__malloc_unlock>:
 8009bd0:	4801      	ldr	r0, [pc, #4]	; (8009bd8 <__malloc_unlock+0x8>)
 8009bd2:	f7ff bb18 	b.w	8009206 <__retarget_lock_release_recursive>
 8009bd6:	bf00      	nop
 8009bd8:	2400020c 	.word	0x2400020c

08009bdc <_read_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	4d07      	ldr	r5, [pc, #28]	; (8009bfc <_read_r+0x20>)
 8009be0:	4604      	mov	r4, r0
 8009be2:	4608      	mov	r0, r1
 8009be4:	4611      	mov	r1, r2
 8009be6:	2200      	movs	r2, #0
 8009be8:	602a      	str	r2, [r5, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	f7f7 f9e0 	bl	8000fb0 <_read>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d102      	bne.n	8009bfa <_read_r+0x1e>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	b103      	cbz	r3, 8009bfa <_read_r+0x1e>
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
 8009bfc:	24000218 	.word	0x24000218

08009c00 <_init>:
 8009c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c02:	bf00      	nop
 8009c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c06:	bc08      	pop	{r3}
 8009c08:	469e      	mov	lr, r3
 8009c0a:	4770      	bx	lr

08009c0c <_fini>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	bf00      	nop
 8009c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c12:	bc08      	pop	{r3}
 8009c14:	469e      	mov	lr, r3
 8009c16:	4770      	bx	lr
