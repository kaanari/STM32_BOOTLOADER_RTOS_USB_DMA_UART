
BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c74  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08009f44  08009f44  00019f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1a0  0800a1a0  0001a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1a8  0800a1a8  0001a1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a1ac  0800a1ac  0001a1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800a1b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a4  24000078  0800a228  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400021c  0800a228  0002021c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012948  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002764  00000000  00000000  000329ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c80  00000000  00000000  00035158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b88  00000000  00000000  00035dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032fda  00000000  00000000  00036960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001324b  00000000  00000000  0006993a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001429fa  00000000  00000000  0007cb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001bf57f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003a78  00000000  00000000  001bf5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009f2c 	.word	0x08009f2c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	08009f2c 	.word	0x08009f2c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <bootloader>:
#include "bootloader.h"

const uint32_t CRC_VALUES[7] = {APP1_CRC_VALUE,APP2_CRC_VALUE,0,0,0,0,0};

void bootloader(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

	printf("\r\n===============================\r\n");
 80006ba:	481c      	ldr	r0, [pc, #112]	; (800072c <bootloader+0x78>)
 80006bc:	f008 fcb8 	bl	8009030 <puts>
	printf(" Bootloader is running...\r\n");
 80006c0:	481b      	ldr	r0, [pc, #108]	; (8000730 <bootloader+0x7c>)
 80006c2:	f008 fcb5 	bl	8009030 <puts>
	printf("===============================\r\n\r\n");
 80006c6:	481b      	ldr	r0, [pc, #108]	; (8000734 <bootloader+0x80>)
 80006c8:	f008 fcb2 	bl	8009030 <puts>

	/* Check which applications reside in the memory. */
	boot_information_t boot_information = check_applications();
 80006cc:	f000 f8a4 	bl	8000818 <check_applications>
 80006d0:	4603      	mov	r3, r0
 80006d2:	80bb      	strh	r3, [r7, #4]

	/* Deside which application to run. */
	int8_t result = select_application_to_boot(boot_information);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f87b 	bl	80007d0 <select_application_to_boot>
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]

	printf("===============================\r\n\r\n");
 80006de:	4815      	ldr	r0, [pc, #84]	; (8000734 <bootloader+0x80>)
 80006e0:	f008 fca6 	bl	8009030 <puts>

	if(result > 0){
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	dd0f      	ble.n	800070c <bootloader+0x58>
		/* Switch to APP */
		printf("APP%d is being loaded...\r\n", result);
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	4619      	mov	r1, r3
 80006f2:	4811      	ldr	r0, [pc, #68]	; (8000738 <bootloader+0x84>)
 80006f4:	f008 fc16 	bl	8008f24 <iprintf>
		HAL_Delay(500);
 80006f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fc:	f000 fe96 	bl	800142c <HAL_Delay>
		load_app(result);
 8000700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f81d 	bl	8000744 <load_app>
			HAL_GPIO_TogglePin(GPIOB,LED_RED_Pin);
			HAL_Delay(500);
		}
	}

}
 800070a:	e00c      	b.n	8000726 <bootloader+0x72>
		printf("No available application to load!\r\n");
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <bootloader+0x88>)
 800070e:	f008 fc8f 	bl	8009030 <puts>
			HAL_GPIO_TogglePin(GPIOB,LED_RED_Pin);
 8000712:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000716:	480a      	ldr	r0, [pc, #40]	; (8000740 <bootloader+0x8c>)
 8000718:	f004 f9b5 	bl	8004a86 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 800071c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000720:	f000 fe84 	bl	800142c <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOB,LED_RED_Pin);
 8000724:	e7f5      	b.n	8000712 <bootloader+0x5e>
}
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	08009f44 	.word	0x08009f44
 8000730:	08009f68 	.word	0x08009f68
 8000734:	08009f84 	.word	0x08009f84
 8000738:	08009fa8 	.word	0x08009fa8
 800073c:	08009fc4 	.word	0x08009fc4
 8000740:	58020400 	.word	0x58020400

08000744 <load_app>:

/* This function gives the control of execution to user application. */
void load_app(int8_t app_num)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	uint32_t jump_PC_ptr;
	application_info_t selected_application;

	/* Retrieving PC */
	jump_PC_ptr = *(uint32_t*)(BOOTLOADER_ADDRESS + FLASH_SECTOR_SIZE * app_num + 4);
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000756:	045b      	lsls	r3, r3, #17
 8000758:	3304      	adds	r3, #4
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	61bb      	str	r3, [r7, #24]
	selected_application.func_p = (application_t)jump_PC_ptr;
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	613b      	str	r3, [r7, #16]

	/* Retrieving SP */
	selected_application.stack_addr = *(uint32_t*)(BOOTLOADER_ADDRESS + FLASH_SECTOR_SIZE * app_num);
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800076a:	045b      	lsls	r3, r3, #17
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
	__disable_irq();

    int i;
	// Disable IRQs
    for (i = 0; i < 8; i ++) NVIC->ICER[i] = 0xFFFFFFFF;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
 8000778:	e009      	b.n	800078e <load_app+0x4a>
 800077a:	4a14      	ldr	r2, [pc, #80]	; (80007cc <load_app+0x88>)
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	3320      	adds	r3, #32
 8000780:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000784:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	3301      	adds	r3, #1
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	2b07      	cmp	r3, #7
 8000792:	ddf2      	ble.n	800077a <load_app+0x36>
    // Clear pending IRQs
    for (i = 0; i < 8; i ++) NVIC->ICPR[i] = 0xFFFFFFFF;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	e009      	b.n	80007ae <load_app+0x6a>
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <load_app+0x88>)
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	3360      	adds	r3, #96	; 0x60
 80007a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	3301      	adds	r3, #1
 80007ac:	61fb      	str	r3, [r7, #28]
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2b07      	cmp	r3, #7
 80007b2:	ddf2      	ble.n	800079a <load_app+0x56>

    /* Jump to the Application */
	__set_MSP(selected_application.stack_addr);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	f383 8808 	msr	MSP, r3
}
 80007be:	bf00      	nop
	selected_application.func_p();
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	4798      	blx	r3
}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <select_application_to_boot>:

/* This function basically selects the first valid
 * application in the memory to load. */
int8_t select_application_to_boot(boot_information_t boot_information)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	80b8      	strh	r0, [r7, #4]
	uint8_t app_num = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
	uint8_t available_apps = boot_information.existance & boot_information.validation;
 80007dc:	793a      	ldrb	r2, [r7, #4]
 80007de:	797b      	ldrb	r3, [r7, #5]
 80007e0:	4013      	ands	r3, r2
 80007e2:	73bb      	strb	r3, [r7, #14]

	if(available_apps == 0)
 80007e4:	7bbb      	ldrb	r3, [r7, #14]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d108      	bne.n	80007fc <select_application_to_boot+0x2c>
	{
		return NO_AVAILABLE_APP;
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ee:	e00d      	b.n	800080c <select_application_to_boot+0x3c>
	}

	while(!(available_apps % 2)){
		available_apps >>= 1;
 80007f0:	7bbb      	ldrb	r3, [r7, #14]
 80007f2:	085b      	lsrs	r3, r3, #1
 80007f4:	73bb      	strb	r3, [r7, #14]
		app_num++;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	3301      	adds	r3, #1
 80007fa:	73fb      	strb	r3, [r7, #15]
	while(!(available_apps % 2)){
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0f3      	beq.n	80007f0 <select_application_to_boot+0x20>
	}

	return app_num;
 8000808:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <check_applications>:

/* This function is used for checking if applications
 * that resides in each sector of the memory exists */
boot_information_t check_applications()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
	uint32_t memory_content = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
	boot_information_t boot_information;

	uint8_t status = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t crc_status = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint8_t app_num = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint32_t* app_start_address = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]

	/* This size is found by looking the output of compiler. */
	/* ToDo: Application Size and valid CRC values can be
	 * placed in a dedicated memory.*/
	uint32_t app_size_in_byte = 131072-4;
 8000838:	4b41      	ldr	r3, [pc, #260]	; (8000940 <check_applications+0x128>)
 800083a:	61bb      	str	r3, [r7, #24]
	uint32_t crc_len_in_32 = (uint32_t)(app_size_in_byte/32);
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	095b      	lsrs	r3, r3, #5
 8000840:	617b      	str	r3, [r7, #20]
	//uint8_t crc_len_in_byte = (uint8_t)(app_size_in_byte%32);

	uint32_t crc_result = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
	uint32_t crc_expected = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]

	/* Searching all Application locations */
	for(; app_num < NUMBER_OF_APP; app_num++)
 800084a:	e061      	b.n	8000910 <check_applications+0xf8>
	{
		app_start_address = (uint32_t*)(BOOTLOADER_ADDRESS + FLASH_SECTOR_SIZE*(app_num+1));
 800084c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000850:	f203 4301 	addw	r3, r3, #1025	; 0x401
 8000854:	045b      	lsls	r3, r3, #17
 8000856:	61fb      	str	r3, [r7, #28]
		memory_content = (uint32_t)*(app_start_address);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	623b      	str	r3, [r7, #32]

		/* Check if the location is empty or not */
		if(memory_content != 0xffffffff)
 800085e:	6a3b      	ldr	r3, [r7, #32]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000864:	d048      	beq.n	80008f8 <check_applications+0xe0>
		{
			/* App is found in location. */
			printf("APP%d is presented.\r\n", app_num+1);
 8000866:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800086a:	3301      	adds	r3, #1
 800086c:	4619      	mov	r1, r3
 800086e:	4835      	ldr	r0, [pc, #212]	; (8000944 <check_applications+0x12c>)
 8000870:	f008 fb58 	bl	8008f24 <iprintf>
			status = status ^ (1 << (app_num+1));
 8000874:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000878:	3301      	adds	r3, #1
 800087a:	2201      	movs	r2, #1
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	b25a      	sxtb	r2, r3
 8000882:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000886:	4053      	eors	r3, r2
 8000888:	b25b      	sxtb	r3, r3
 800088a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			/* Calculate the CRC of application flash area. */
			crc_result = HAL_CRC_Calculate(&hcrc, app_start_address, crc_len_in_32);
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	69f9      	ldr	r1, [r7, #28]
 8000892:	482d      	ldr	r0, [pc, #180]	; (8000948 <check_applications+0x130>)
 8000894:	f000 ff62 	bl	800175c <HAL_CRC_Calculate>
 8000898:	6138      	str	r0, [r7, #16]
			//uint8_t remaining_content = app_start_address+app_size_in_byte-crc_len_in_byte;
			printf(" - Resulting CRC is '0x%X'\r\n", (unsigned int)crc_result);
 800089a:	6939      	ldr	r1, [r7, #16]
 800089c:	482b      	ldr	r0, [pc, #172]	; (800094c <check_applications+0x134>)
 800089e:	f008 fb41 	bl	8008f24 <iprintf>

			/* Retrieve valid CRC from lookup table. */
			crc_expected = CRC_VALUES[app_num];
 80008a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008a6:	4a2a      	ldr	r2, [pc, #168]	; (8000950 <check_applications+0x138>)
 80008a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ac:	60fb      	str	r3, [r7, #12]
			//crc_expected = (uint32_t)(*app_start_address);
			printf(" - Expected CRC is '0x%X'\r\n", (unsigned int)crc_expected);
 80008ae:	68f9      	ldr	r1, [r7, #12]
 80008b0:	4828      	ldr	r0, [pc, #160]	; (8000954 <check_applications+0x13c>)
 80008b2:	f008 fb37 	bl	8008f24 <iprintf>

			/* Checking CRC match */
			if(crc_result == crc_expected){
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d114      	bne.n	80008e8 <check_applications+0xd0>
				crc_status = crc_status ^ (1 << (app_num+1));
 80008be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008c2:	3301      	adds	r3, #1
 80008c4:	2201      	movs	r2, #1
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	b25a      	sxtb	r2, r3
 80008cc:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80008d0:	4053      	eors	r3, r2
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				printf(" - *** CRC check PASSED for APP%d \r\n",app_num+1);
 80008d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008dc:	3301      	adds	r3, #1
 80008de:	4619      	mov	r1, r3
 80008e0:	481d      	ldr	r0, [pc, #116]	; (8000958 <check_applications+0x140>)
 80008e2:	f008 fb1f 	bl	8008f24 <iprintf>
 80008e6:	e00e      	b.n	8000906 <check_applications+0xee>

			}else{
				printf(" - *** CRC check FAILED for APP%d \r\n",app_num+1);
 80008e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008ec:	3301      	adds	r3, #1
 80008ee:	4619      	mov	r1, r3
 80008f0:	481a      	ldr	r0, [pc, #104]	; (800095c <check_applications+0x144>)
 80008f2:	f008 fb17 	bl	8008f24 <iprintf>
 80008f6:	e006      	b.n	8000906 <check_applications+0xee>
			}

		}else{
			printf("APP%d is NOT presented.\r\n", app_num+1);
 80008f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008fc:	3301      	adds	r3, #1
 80008fe:	4619      	mov	r1, r3
 8000900:	4817      	ldr	r0, [pc, #92]	; (8000960 <check_applications+0x148>)
 8000902:	f008 fb0f 	bl	8008f24 <iprintf>
	for(; app_num < NUMBER_OF_APP; app_num++)
 8000906:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800090a:	3301      	adds	r3, #1
 800090c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000910:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000914:	2b06      	cmp	r3, #6
 8000916:	d999      	bls.n	800084c <check_applications+0x34>
		}
	}
	boot_information.existance = status;
 8000918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800091c:	713b      	strb	r3, [r7, #4]

	boot_information.validation = crc_status;
 800091e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000922:	717b      	strb	r3, [r7, #5]

	return boot_information;
 8000924:	88bb      	ldrh	r3, [r7, #4]
 8000926:	813b      	strh	r3, [r7, #8]
 8000928:	2300      	movs	r3, #0
 800092a:	7a3a      	ldrb	r2, [r7, #8]
 800092c:	f362 0307 	bfi	r3, r2, #0, #8
 8000930:	7a7a      	ldrb	r2, [r7, #9]
 8000932:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000936:	4618      	mov	r0, r3
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	0001fffc 	.word	0x0001fffc
 8000944:	08009fe8 	.word	0x08009fe8
 8000948:	24000094 	.word	0x24000094
 800094c:	0800a000 	.word	0x0800a000
 8000950:	0800a0ac 	.word	0x0800a0ac
 8000954:	0800a020 	.word	0x0800a020
 8000958:	0800a03c 	.word	0x0800a03c
 800095c:	0800a064 	.word	0x0800a064
 8000960:	0800a08c 	.word	0x0800a08c

08000964 <_write>:
volatile uint8_t UART_TX_finished = 1;
uint8_t UART_TX_BUFFER[UART_TX_BUFFER_LENGTH];
uint8_t UART_RX_BUFFER[UART_RX_BUFFER_LENGTH];

int _write(int file, uint8_t *data, int len)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
   while(!UART_TX_finished);
 8000970:	bf00      	nop
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_write+0x50>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0fa      	beq.n	8000972 <_write+0xe>
   UART_TX_finished = 0;
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <_write+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
   memcpy(UART_TX_BUFFER, data, len);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	461a      	mov	r2, r3
 8000986:	68b9      	ldr	r1, [r7, #8]
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <_write+0x54>)
 800098a:	f008 fab5 	bl	8008ef8 <memcpy>

   HAL_StatusTypeDef status =
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)UART_TX_BUFFER, len);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	b29b      	uxth	r3, r3
 8000992:	461a      	mov	r2, r3
 8000994:	4908      	ldr	r1, [pc, #32]	; (80009b8 <_write+0x54>)
 8000996:	4809      	ldr	r0, [pc, #36]	; (80009bc <_write+0x58>)
 8000998:	f006 fb70 	bl	800707c <HAL_UART_Transmit_DMA>
 800099c:	4603      	mov	r3, r0
 800099e:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 80009a0:	7dfb      	ldrb	r3, [r7, #23]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d101      	bne.n	80009aa <_write+0x46>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	e000      	b.n	80009ac <_write+0x48>
 80009aa:	2300      	movs	r3, #0

}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	24000000 	.word	0x24000000
 80009b8:	240001c0 	.word	0x240001c0
 80009bc:	240000b8 	.word	0x240000b8

080009c0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	UART_TX_finished = 1;
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <HAL_UART_TxCpltCallback+0x1c>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	24000000 	.word	0x24000000

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e4:	f000 fc90 	bl	8001308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e8:	f000 f818 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ec:	f000 f912 	bl	8000c14 <MX_GPIO_Init>
  MX_DMA_Init();
 80009f0:	f000 f8f0 	bl	8000bd4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80009f4:	f000 f8a2 	bl	8000b3c <MX_USART3_UART_Init>
  MX_CRC_Init();
 80009f8:	f000 f87e 	bl	8000af8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80009fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a00:	f000 fd14 	bl	800142c <HAL_Delay>
  bootloader();
 8000a04:	f7ff fe56 	bl	80006b4 <bootloader>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("A\r\n");
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <main+0x38>)
 8000a0a:	f008 fb11 	bl	8009030 <puts>
	HAL_Delay(2000);
 8000a0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a12:	f000 fd0b 	bl	800142c <HAL_Delay>
	printf("A\r\n");
 8000a16:	e7f7      	b.n	8000a08 <main+0x28>
 8000a18:	0800a0a8 	.word	0x0800a0a8

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b09c      	sub	sp, #112	; 0x70
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	224c      	movs	r2, #76	; 0x4c
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f008 fa72 	bl	8008f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2220      	movs	r2, #32
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f008 fa6c 	bl	8008f14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f004 f83d 	bl	8004abc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <SystemClock_Config+0xd8>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <SystemClock_Config+0xd8>)
 8000a4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a50:	6193      	str	r3, [r2, #24]
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <SystemClock_Config+0xd8>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a5e:	bf00      	nop
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <SystemClock_Config+0xd8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a6c:	d1f8      	bne.n	8000a60 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a72:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a80:	2304      	movs	r3, #4
 8000a82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000a84:	f240 1313 	movw	r3, #275	; 0x113
 8000a88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a96:	2304      	movs	r3, #4
 8000a98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 f842 	bl	8004b30 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ab2:	f000 f9df 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	233f      	movs	r3, #63	; 0x3f
 8000ab8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aba:	2303      	movs	r3, #3
 8000abc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac6:	2340      	movs	r3, #64	; 0x40
 8000ac8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad4:	2340      	movs	r3, #64	; 0x40
 8000ad6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2103      	movs	r1, #3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fbd5 	bl	800528c <HAL_RCC_ClockConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ae8:	f000 f9c4 	bl	8000e74 <Error_Handler>
  }
}
 8000aec:	bf00      	nop
 8000aee:	3770      	adds	r7, #112	; 0x70
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	58024800 	.word	0x58024800

08000af8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <MX_CRC_Init+0x3c>)
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <MX_CRC_Init+0x40>)
 8000b00:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_CRC_Init+0x3c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_CRC_Init+0x3c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_CRC_Init+0x3c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_CRC_Init+0x3c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_CRC_Init+0x3c>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_CRC_Init+0x3c>)
 8000b22:	f000 fdb7 	bl	8001694 <HAL_CRC_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000b2c:	f000 f9a2 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	24000094 	.word	0x24000094
 8000b38:	58024c00 	.word	0x58024c00

08000b3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b42:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <MX_USART3_UART_Init+0x94>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b84:	4811      	ldr	r0, [pc, #68]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b86:	f006 fa29 	bl	8006fdc <HAL_UART_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b90:	f000 f970 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b94:	2100      	movs	r1, #0
 8000b96:	480d      	ldr	r0, [pc, #52]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b98:	f008 f8b9 	bl	8008d0e <HAL_UARTEx_SetTxFifoThreshold>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ba2:	f000 f967 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4808      	ldr	r0, [pc, #32]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000baa:	f008 f8ee 	bl	8008d8a <HAL_UARTEx_SetRxFifoThreshold>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bb4:	f000 f95e 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_USART3_UART_Init+0x90>)
 8000bba:	f008 f86f 	bl	8008c9c <HAL_UARTEx_DisableFifoMode>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f000 f956 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	240000b8 	.word	0x240000b8
 8000bd0:	40004800 	.word	0x40004800

08000bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_DMA_Init+0x3c>)
 8000bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000be0:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <MX_DMA_Init+0x3c>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_DMA_Init+0x3c>)
 8000bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	200b      	movs	r0, #11
 8000bfe:	f000 fd14 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c02:	200b      	movs	r0, #11
 8000c04:	f000 fd2b 	bl	800165e <HAL_NVIC_EnableIRQ>

}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	58024400 	.word	0x58024400

08000c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	4b8b      	ldr	r3, [pc, #556]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	4a89      	ldr	r2, [pc, #548]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3a:	4b87      	ldr	r3, [pc, #540]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c48:	4b83      	ldr	r3, [pc, #524]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	4a82      	ldr	r2, [pc, #520]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c58:	4b7f      	ldr	r3, [pc, #508]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b7c      	ldr	r3, [pc, #496]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	4a7a      	ldr	r2, [pc, #488]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c76:	4b78      	ldr	r3, [pc, #480]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b74      	ldr	r3, [pc, #464]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	4a73      	ldr	r2, [pc, #460]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c94:	4b70      	ldr	r3, [pc, #448]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	4b6d      	ldr	r3, [pc, #436]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	4a6b      	ldr	r2, [pc, #428]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000caa:	f043 0308 	orr.w	r3, r3, #8
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb2:	4b69      	ldr	r3, [pc, #420]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	f003 0308 	and.w	r3, r3, #8
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cc0:	4b65      	ldr	r3, [pc, #404]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	4a64      	ldr	r2, [pc, #400]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd0:	4b61      	ldr	r3, [pc, #388]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cde:	4b5e      	ldr	r3, [pc, #376]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	4a5c      	ldr	r2, [pc, #368]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000ce6:	f043 0310 	orr.w	r3, r3, #16
 8000cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cee:	4b5a      	ldr	r3, [pc, #360]	; (8000e58 <MX_GPIO_Init+0x244>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d02:	4856      	ldr	r0, [pc, #344]	; (8000e5c <MX_GPIO_Init+0x248>)
 8000d04:	f003 fea6 	bl	8004a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0e:	4854      	ldr	r0, [pc, #336]	; (8000e60 <MX_GPIO_Init+0x24c>)
 8000d10:	f003 fea0 	bl	8004a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2102      	movs	r1, #2
 8000d18:	4852      	ldr	r0, [pc, #328]	; (8000e64 <MX_GPIO_Init+0x250>)
 8000d1a:	f003 fe9b 	bl	8004a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	484d      	ldr	r0, [pc, #308]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000d34:	f003 fce6 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d38:	2332      	movs	r3, #50	; 0x32
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d48:	230b      	movs	r3, #11
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4845      	ldr	r0, [pc, #276]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000d54:	f003 fcd6 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d58:	2386      	movs	r3, #134	; 0x86
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d68:	230b      	movs	r3, #11
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	483e      	ldr	r0, [pc, #248]	; (8000e6c <MX_GPIO_Init+0x258>)
 8000d74:	f003 fcc6 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000d78:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4832      	ldr	r0, [pc, #200]	; (8000e5c <MX_GPIO_Init+0x248>)
 8000d92:	f003 fcb7 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da8:	230b      	movs	r3, #11
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	482a      	ldr	r0, [pc, #168]	; (8000e5c <MX_GPIO_Init+0x248>)
 8000db4:	f003 fca6 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4823      	ldr	r0, [pc, #140]	; (8000e60 <MX_GPIO_Init+0x24c>)
 8000dd2:	f003 fc97 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	4821      	ldr	r0, [pc, #132]	; (8000e70 <MX_GPIO_Init+0x25c>)
 8000dec:	f003 fc8a 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e02:	230a      	movs	r3, #10
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4817      	ldr	r0, [pc, #92]	; (8000e6c <MX_GPIO_Init+0x258>)
 8000e0e:	f003 fc79 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e24:	230b      	movs	r3, #11
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4810      	ldr	r0, [pc, #64]	; (8000e70 <MX_GPIO_Init+0x25c>)
 8000e30:	f003 fc68 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <MX_GPIO_Init+0x250>)
 8000e4c:	f003 fc5a 	bl	8004704 <HAL_GPIO_Init>

}
 8000e50:	bf00      	nop
 8000e52:	3730      	adds	r7, #48	; 0x30
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	58024400 	.word	0x58024400
 8000e5c:	58020400 	.word	0x58020400
 8000e60:	58020c00 	.word	0x58020c00
 8000e64:	58021000 	.word	0x58021000
 8000e68:	58020800 	.word	0x58020800
 8000e6c:	58020000 	.word	0x58020000
 8000e70:	58021800 	.word	0x58021800

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_MspInit+0x30>)
 8000e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_MspInit+0x30>)
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_MspInit+0x30>)
 8000e98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	58024400 	.word	0x58024400

08000eb4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <HAL_CRC_MspInit+0x3c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d10e      	bne.n	8000ee4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_CRC_MspInit+0x40>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <HAL_CRC_MspInit+0x40>)
 8000ece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <HAL_CRC_MspInit+0x40>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	58024c00 	.word	0x58024c00
 8000ef4:	58024400 	.word	0x58024400

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0b6      	sub	sp, #216	; 0xd8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	22b4      	movs	r2, #180	; 0xb4
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f007 fffb 	bl	8008f14 <memset>
  if(huart->Instance==USART3)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a40      	ldr	r2, [pc, #256]	; (8001024 <HAL_UART_MspInit+0x12c>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d178      	bne.n	800101a <HAL_UART_MspInit+0x122>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4618      	mov	r0, r3
 8000f38:	f004 fd34 	bl	80059a4 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f42:	f7ff ff97 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <HAL_UART_MspInit+0x130>)
 8000f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f4c:	4a36      	ldr	r2, [pc, #216]	; (8001028 <HAL_UART_MspInit+0x130>)
 8000f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f56:	4b34      	ldr	r3, [pc, #208]	; (8001028 <HAL_UART_MspInit+0x130>)
 8000f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	4b30      	ldr	r3, [pc, #192]	; (8001028 <HAL_UART_MspInit+0x130>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <HAL_UART_MspInit+0x130>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <HAL_UART_MspInit+0x130>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4820      	ldr	r0, [pc, #128]	; (800102c <HAL_UART_MspInit+0x134>)
 8000faa:	f003 fbab 	bl	8004704 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_UART_MspInit+0x138>)
 8000fb0:	4a20      	ldr	r2, [pc, #128]	; (8001034 <HAL_UART_MspInit+0x13c>)
 8000fb2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <HAL_UART_MspInit+0x138>)
 8000fb6:	222e      	movs	r2, #46	; 0x2e
 8000fb8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_UART_MspInit+0x138>)
 8000fbc:	2240      	movs	r2, #64	; 0x40
 8000fbe:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_UART_MspInit+0x138>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_UART_MspInit+0x138>)
 8000fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fcc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_UART_MspInit+0x138>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_UART_MspInit+0x138>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_UART_MspInit+0x138>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_UART_MspInit+0x138>)
 8000fe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fe6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_UART_MspInit+0x138>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000fee:	4810      	ldr	r0, [pc, #64]	; (8001030 <HAL_UART_MspInit+0x138>)
 8000ff0:	f000 fd4e 	bl	8001a90 <HAL_DMA_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8000ffa:	f7ff ff3b 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <HAL_UART_MspInit+0x138>)
 8001002:	679a      	str	r2, [r3, #120]	; 0x78
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_UART_MspInit+0x138>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2027      	movs	r0, #39	; 0x27
 8001010:	f000 fb0b 	bl	800162a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001014:	2027      	movs	r0, #39	; 0x27
 8001016:	f000 fb22 	bl	800165e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	37d8      	adds	r7, #216	; 0xd8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40004800 	.word	0x40004800
 8001028:	58024400 	.word	0x58024400
 800102c:	58020c00 	.word	0x58020c00
 8001030:	24000148 	.word	0x24000148
 8001034:	40020010 	.word	0x40020010

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800103c:	e7fe      	b.n	800103c <NMI_Handler+0x4>

0800103e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <MemManage_Handler+0x4>

0800104a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <UsageFault_Handler+0x4>

08001056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f9b2 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <DMA1_Stream0_IRQHandler+0x10>)
 8001092:	f002 f825 	bl	80030e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	24000148 	.word	0x24000148

080010a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <USART3_IRQHandler+0x10>)
 80010a6:	f006 f87b 	bl	80071a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	240000b8 	.word	0x240000b8

080010b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e00a      	b.n	80010dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010c6:	f3af 8000 	nop.w
 80010ca:	4601      	mov	r1, r0
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	b2ca      	uxtb	r2, r1
 80010d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbf0      	blt.n	80010c6 <_read+0x12>
	}

return len;
 80010e4:	687b      	ldr	r3, [r7, #4]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	return -1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001116:	605a      	str	r2, [r3, #4]
	return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_isatty>:

int _isatty(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
	return 1;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
	return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <_sbrk+0x5c>)
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <_sbrk+0x60>)
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d102      	bne.n	800117a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <_sbrk+0x64>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <_sbrk+0x68>)
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	429a      	cmp	r2, r3
 8001186:	d207      	bcs.n	8001198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001188:	f007 fe8c 	bl	8008ea4 <__errno>
 800118c:	4603      	mov	r3, r0
 800118e:	220c      	movs	r2, #12
 8001190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001196:	e009      	b.n	80011ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <_sbrk+0x64>)
 80011a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	24050000 	.word	0x24050000
 80011b8:	00000400 	.word	0x00000400
 80011bc:	24000204 	.word	0x24000204
 80011c0:	24000220 	.word	0x24000220

080011c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011c8:	4b32      	ldr	r3, [pc, #200]	; (8001294 <SystemInit+0xd0>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ce:	4a31      	ldr	r2, [pc, #196]	; (8001294 <SystemInit+0xd0>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <SystemInit+0xd4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	2b06      	cmp	r3, #6
 80011e2:	d807      	bhi.n	80011f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011e4:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <SystemInit+0xd4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f023 030f 	bic.w	r3, r3, #15
 80011ec:	4a2a      	ldr	r2, [pc, #168]	; (8001298 <SystemInit+0xd4>)
 80011ee:	f043 0307 	orr.w	r3, r3, #7
 80011f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011f4:	4b29      	ldr	r3, [pc, #164]	; (800129c <SystemInit+0xd8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <SystemInit+0xd8>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <SystemInit+0xd8>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <SystemInit+0xd8>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4924      	ldr	r1, [pc, #144]	; (800129c <SystemInit+0xd8>)
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <SystemInit+0xdc>)
 800120e:	4013      	ands	r3, r2
 8001210:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <SystemInit+0xd4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <SystemInit+0xd4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 030f 	bic.w	r3, r3, #15
 8001226:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <SystemInit+0xd4>)
 8001228:	f043 0307 	orr.w	r3, r3, #7
 800122c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <SystemInit+0xd8>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <SystemInit+0xd8>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <SystemInit+0xd8>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <SystemInit+0xd8>)
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <SystemInit+0xe0>)
 8001244:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <SystemInit+0xd8>)
 8001248:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <SystemInit+0xe4>)
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <SystemInit+0xd8>)
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <SystemInit+0xe8>)
 8001250:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <SystemInit+0xd8>)
 8001254:	2200      	movs	r2, #0
 8001256:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <SystemInit+0xd8>)
 800125a:	4a14      	ldr	r2, [pc, #80]	; (80012ac <SystemInit+0xe8>)
 800125c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <SystemInit+0xd8>)
 8001260:	2200      	movs	r2, #0
 8001262:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <SystemInit+0xd8>)
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <SystemInit+0xe8>)
 8001268:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <SystemInit+0xd8>)
 800126c:	2200      	movs	r2, #0
 800126e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <SystemInit+0xd8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a09      	ldr	r2, [pc, #36]	; (800129c <SystemInit+0xd8>)
 8001276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <SystemInit+0xd8>)
 800127e:	2200      	movs	r2, #0
 8001280:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <SystemInit+0xec>)
 8001284:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001288:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	52002000 	.word	0x52002000
 800129c:	58024400 	.word	0x58024400
 80012a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80012a4:	02020200 	.word	0x02020200
 80012a8:	01ff0000 	.word	0x01ff0000
 80012ac:	01010280 	.word	0x01010280
 80012b0:	52004000 	.word	0x52004000

080012b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012b8:	f7ff ff84 	bl	80011c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	; (80012f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	; (8001300 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e2:	f007 fde5 	bl	8008eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e6:	f7ff fb7b 	bl	80009e0 <main>
  bx  lr
 80012ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80012f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012f4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80012f8:	0800a1b0 	.word	0x0800a1b0
  ldr r2, =_sbss
 80012fc:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001300:	2400021c 	.word	0x2400021c

08001304 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC3_IRQHandler>
	...

08001308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130e:	2003      	movs	r0, #3
 8001310:	f000 f980 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001314:	f004 f970 	bl	80055f8 <HAL_RCC_GetSysClockFreq>
 8001318:	4602      	mov	r2, r0
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_Init+0x68>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	4913      	ldr	r1, [pc, #76]	; (8001374 <HAL_Init+0x6c>)
 8001326:	5ccb      	ldrb	r3, [r1, r3]
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_Init+0x68>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_Init+0x6c>)
 800133c:	5cd3      	ldrb	r3, [r2, r3]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
 8001348:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <HAL_Init+0x70>)
 800134a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <HAL_Init+0x74>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f814 	bl	8001380 <HAL_InitTick>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e002      	b.n	8001368 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001362:	f7ff fd8d 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	58024400 	.word	0x58024400
 8001374:	0800a0c8 	.word	0x0800a0c8
 8001378:	24000008 	.word	0x24000008
 800137c:	24000004 	.word	0x24000004

08001380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_InitTick+0x60>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e021      	b.n	80013d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_InitTick+0x64>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_InitTick+0x60>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f965 	bl	800167a <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d80a      	bhi.n	80013d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c8:	f000 f92f 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013cc:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <HAL_InitTick+0x68>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	24000010 	.word	0x24000010
 80013e4:	24000004 	.word	0x24000004
 80013e8:	2400000c 	.word	0x2400000c

080013ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x20>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x24>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_IncTick+0x24>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	24000010 	.word	0x24000010
 8001410:	24000208 	.word	0x24000208

08001414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_GetTick+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	24000208 	.word	0x24000208

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff ffee 	bl	8001414 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001452:	bf00      	nop
 8001454:	f7ff ffde 	bl	8001414 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24000010 	.word	0x24000010

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <__NVIC_SetPriorityGrouping+0x40>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00
 80014b8:	05fa0000 	.word	0x05fa0000

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4907      	ldr	r1, [pc, #28]	; (8001510 <__NVIC_EnableIRQ+0x38>)
 80014f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff29 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff40 	bl	80014bc <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff90 	bl	8001568 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5f 	bl	8001514 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff33 	bl	80014d8 <__NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffa4 	bl	80015d0 <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e054      	b.n	8001750 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7f5b      	ldrb	r3, [r3, #29]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d105      	bne.n	80016bc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fbfc 	bl	8000eb4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2202      	movs	r2, #2
 80016c0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	791b      	ldrb	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10c      	bne.n	80016e4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a22      	ldr	r2, [pc, #136]	; (8001758 <HAL_CRC_Init+0xc4>)
 80016d0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0218 	bic.w	r2, r2, #24
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	e00c      	b.n	80016fe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6899      	ldr	r1, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	461a      	mov	r2, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f948 	bl	8001984 <HAL_CRCEx_Polynomial_Set>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e028      	b.n	8001750 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	795b      	ldrb	r3, [r3, #5]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d105      	bne.n	8001712 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800170e:	611a      	str	r2, [r3, #16]
 8001710:	e004      	b.n	800171c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6912      	ldr	r2, [r2, #16]
 800171a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699a      	ldr	r2, [r3, #24]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	04c11db7 	.word	0x04c11db7

0800175c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2202      	movs	r2, #2
 8001770:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0201 	orr.w	r2, r2, #1
 8001780:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d006      	beq.n	8001798 <HAL_CRC_Calculate+0x3c>
 800178a:	2b03      	cmp	r3, #3
 800178c:	d829      	bhi.n	80017e2 <HAL_CRC_Calculate+0x86>
 800178e:	2b01      	cmp	r3, #1
 8001790:	d019      	beq.n	80017c6 <HAL_CRC_Calculate+0x6a>
 8001792:	2b02      	cmp	r3, #2
 8001794:	d01e      	beq.n	80017d4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001796:	e024      	b.n	80017e2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e00a      	b.n	80017b4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	441a      	add	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d3f0      	bcc.n	800179e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	613b      	str	r3, [r7, #16]
      break;
 80017c4:	e00e      	b.n	80017e4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f812 	bl	80017f4 <CRC_Handle_8>
 80017d0:	6138      	str	r0, [r7, #16]
      break;
 80017d2:	e007      	b.n	80017e4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	68b9      	ldr	r1, [r7, #8]
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 f899 	bl	8001910 <CRC_Handle_16>
 80017de:	6138      	str	r0, [r7, #16]
      break;
 80017e0:	e000      	b.n	80017e4 <HAL_CRC_Calculate+0x88>
      break;
 80017e2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2201      	movs	r2, #1
 80017e8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80017ea:	693b      	ldr	r3, [r7, #16]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	e023      	b.n	800184e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	4413      	add	r3, r2
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	3301      	adds	r3, #1
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	440b      	add	r3, r1
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001820:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	3302      	adds	r3, #2
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	440b      	add	r3, r1
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001830:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	3303      	adds	r3, #3
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	440b      	add	r3, r1
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001844:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001846:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	3301      	adds	r3, #1
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	429a      	cmp	r2, r3
 8001856:	d3d6      	bcc.n	8001806 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d04d      	beq.n	80018fe <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b01      	cmp	r3, #1
 800186a:	d107      	bne.n	800187c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	4413      	add	r3, r2
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d116      	bne.n	80018b4 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	4413      	add	r3, r2
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b21a      	sxth	r2, r3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	3301      	adds	r3, #1
 800189a:	68b9      	ldr	r1, [r7, #8]
 800189c:	440b      	add	r3, r1
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	8b7a      	ldrh	r2, [r7, #26]
 80018b2:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d11f      	bne.n	80018fe <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	3301      	adds	r3, #1
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	440b      	add	r3, r1
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21b      	sxth	r3, r3
 80018de:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	8b7a      	ldrh	r2, [r7, #26]
 80018ea:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	4413      	add	r3, r2
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3724      	adds	r7, #36	; 0x24
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e013      	b.n	800194a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	4413      	add	r3, r2
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	041a      	lsls	r2, r3, #16
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	3302      	adds	r3, #2
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	440b      	add	r3, r1
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	4619      	mov	r1, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3301      	adds	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	085b      	lsrs	r3, r3, #1
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	429a      	cmp	r2, r3
 8001952:	d3e6      	bcc.n	8001922 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	4413      	add	r3, r2
 800196c:	881a      	ldrh	r2, [r3, #0]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001994:	231f      	movs	r3, #31
 8001996:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001998:	bf00      	nop
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1e5a      	subs	r2, r3, #1
 800199e:	613a      	str	r2, [r7, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d009      	beq.n	80019b8 <HAL_CRCEx_Polynomial_Set+0x34>
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b18      	cmp	r3, #24
 80019bc:	d846      	bhi.n	8001a4c <HAL_CRCEx_Polynomial_Set+0xc8>
 80019be:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	08001a53 	.word	0x08001a53
 80019c8:	08001a4d 	.word	0x08001a4d
 80019cc:	08001a4d 	.word	0x08001a4d
 80019d0:	08001a4d 	.word	0x08001a4d
 80019d4:	08001a4d 	.word	0x08001a4d
 80019d8:	08001a4d 	.word	0x08001a4d
 80019dc:	08001a4d 	.word	0x08001a4d
 80019e0:	08001a4d 	.word	0x08001a4d
 80019e4:	08001a41 	.word	0x08001a41
 80019e8:	08001a4d 	.word	0x08001a4d
 80019ec:	08001a4d 	.word	0x08001a4d
 80019f0:	08001a4d 	.word	0x08001a4d
 80019f4:	08001a4d 	.word	0x08001a4d
 80019f8:	08001a4d 	.word	0x08001a4d
 80019fc:	08001a4d 	.word	0x08001a4d
 8001a00:	08001a4d 	.word	0x08001a4d
 8001a04:	08001a35 	.word	0x08001a35
 8001a08:	08001a4d 	.word	0x08001a4d
 8001a0c:	08001a4d 	.word	0x08001a4d
 8001a10:	08001a4d 	.word	0x08001a4d
 8001a14:	08001a4d 	.word	0x08001a4d
 8001a18:	08001a4d 	.word	0x08001a4d
 8001a1c:	08001a4d 	.word	0x08001a4d
 8001a20:	08001a4d 	.word	0x08001a4d
 8001a24:	08001a29 	.word	0x08001a29
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d913      	bls.n	8001a56 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a32:	e010      	b.n	8001a56 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2b07      	cmp	r3, #7
 8001a38:	d90f      	bls.n	8001a5a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a3e:	e00c      	b.n	8001a5a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	d90b      	bls.n	8001a5e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a4a:	e008      	b.n	8001a5e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8001a50:	e006      	b.n	8001a60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a52:	bf00      	nop
 8001a54:	e004      	b.n	8001a60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a56:	bf00      	nop
 8001a58:	e002      	b.n	8001a60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a5a:	bf00      	nop
 8001a5c:	e000      	b.n	8001a60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a5e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10d      	bne.n	8001a82 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 0118 	bic.w	r1, r3, #24
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff fcbc 	bl	8001414 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e314      	b.n	80020d2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a66      	ldr	r2, [pc, #408]	; (8001c48 <HAL_DMA_Init+0x1b8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d04a      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a65      	ldr	r2, [pc, #404]	; (8001c4c <HAL_DMA_Init+0x1bc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d045      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a63      	ldr	r2, [pc, #396]	; (8001c50 <HAL_DMA_Init+0x1c0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d040      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a62      	ldr	r2, [pc, #392]	; (8001c54 <HAL_DMA_Init+0x1c4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d03b      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a60      	ldr	r2, [pc, #384]	; (8001c58 <HAL_DMA_Init+0x1c8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d036      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5f      	ldr	r2, [pc, #380]	; (8001c5c <HAL_DMA_Init+0x1cc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d031      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5d      	ldr	r2, [pc, #372]	; (8001c60 <HAL_DMA_Init+0x1d0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d02c      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5c      	ldr	r2, [pc, #368]	; (8001c64 <HAL_DMA_Init+0x1d4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d027      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a5a      	ldr	r2, [pc, #360]	; (8001c68 <HAL_DMA_Init+0x1d8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d022      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a59      	ldr	r2, [pc, #356]	; (8001c6c <HAL_DMA_Init+0x1dc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d01d      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a57      	ldr	r2, [pc, #348]	; (8001c70 <HAL_DMA_Init+0x1e0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d018      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a56      	ldr	r2, [pc, #344]	; (8001c74 <HAL_DMA_Init+0x1e4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d013      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a54      	ldr	r2, [pc, #336]	; (8001c78 <HAL_DMA_Init+0x1e8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00e      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a53      	ldr	r2, [pc, #332]	; (8001c7c <HAL_DMA_Init+0x1ec>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d009      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a51      	ldr	r2, [pc, #324]	; (8001c80 <HAL_DMA_Init+0x1f0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d004      	beq.n	8001b48 <HAL_DMA_Init+0xb8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a50      	ldr	r2, [pc, #320]	; (8001c84 <HAL_DMA_Init+0x1f4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_DMA_Init+0xbc>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_DMA_Init+0xbe>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 813c 	beq.w	8001dcc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a37      	ldr	r2, [pc, #220]	; (8001c48 <HAL_DMA_Init+0x1b8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d04a      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a36      	ldr	r2, [pc, #216]	; (8001c4c <HAL_DMA_Init+0x1bc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d045      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a34      	ldr	r2, [pc, #208]	; (8001c50 <HAL_DMA_Init+0x1c0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d040      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a33      	ldr	r2, [pc, #204]	; (8001c54 <HAL_DMA_Init+0x1c4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d03b      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a31      	ldr	r2, [pc, #196]	; (8001c58 <HAL_DMA_Init+0x1c8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d036      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a30      	ldr	r2, [pc, #192]	; (8001c5c <HAL_DMA_Init+0x1cc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d031      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a2e      	ldr	r2, [pc, #184]	; (8001c60 <HAL_DMA_Init+0x1d0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d02c      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <HAL_DMA_Init+0x1d4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d027      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <HAL_DMA_Init+0x1d8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d022      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <HAL_DMA_Init+0x1dc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d01d      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a28      	ldr	r2, [pc, #160]	; (8001c70 <HAL_DMA_Init+0x1e0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d018      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <HAL_DMA_Init+0x1e4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d013      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a25      	ldr	r2, [pc, #148]	; (8001c78 <HAL_DMA_Init+0x1e8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00e      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a24      	ldr	r2, [pc, #144]	; (8001c7c <HAL_DMA_Init+0x1ec>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d009      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <HAL_DMA_Init+0x1f0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d004      	beq.n	8001c04 <HAL_DMA_Init+0x174>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_DMA_Init+0x1f4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d108      	bne.n	8001c16 <HAL_DMA_Init+0x186>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e007      	b.n	8001c26 <HAL_DMA_Init+0x196>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c26:	e02f      	b.n	8001c88 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c28:	f7ff fbf4 	bl	8001414 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d928      	bls.n	8001c88 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2203      	movs	r2, #3
 8001c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e244      	b.n	80020d2 <HAL_DMA_Init+0x642>
 8001c48:	40020010 	.word	0x40020010
 8001c4c:	40020028 	.word	0x40020028
 8001c50:	40020040 	.word	0x40020040
 8001c54:	40020058 	.word	0x40020058
 8001c58:	40020070 	.word	0x40020070
 8001c5c:	40020088 	.word	0x40020088
 8001c60:	400200a0 	.word	0x400200a0
 8001c64:	400200b8 	.word	0x400200b8
 8001c68:	40020410 	.word	0x40020410
 8001c6c:	40020428 	.word	0x40020428
 8001c70:	40020440 	.word	0x40020440
 8001c74:	40020458 	.word	0x40020458
 8001c78:	40020470 	.word	0x40020470
 8001c7c:	40020488 	.word	0x40020488
 8001c80:	400204a0 	.word	0x400204a0
 8001c84:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1c8      	bne.n	8001c28 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4b84      	ldr	r3, [pc, #528]	; (8001eb4 <HAL_DMA_Init+0x424>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d107      	bne.n	8001cec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b28      	cmp	r3, #40	; 0x28
 8001cf2:	d903      	bls.n	8001cfc <HAL_DMA_Init+0x26c>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8001cfa:	d91f      	bls.n	8001d3c <HAL_DMA_Init+0x2ac>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b3e      	cmp	r3, #62	; 0x3e
 8001d02:	d903      	bls.n	8001d0c <HAL_DMA_Init+0x27c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b42      	cmp	r3, #66	; 0x42
 8001d0a:	d917      	bls.n	8001d3c <HAL_DMA_Init+0x2ac>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b46      	cmp	r3, #70	; 0x46
 8001d12:	d903      	bls.n	8001d1c <HAL_DMA_Init+0x28c>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b48      	cmp	r3, #72	; 0x48
 8001d1a:	d90f      	bls.n	8001d3c <HAL_DMA_Init+0x2ac>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b4e      	cmp	r3, #78	; 0x4e
 8001d22:	d903      	bls.n	8001d2c <HAL_DMA_Init+0x29c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b52      	cmp	r3, #82	; 0x52
 8001d2a:	d907      	bls.n	8001d3c <HAL_DMA_Init+0x2ac>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b73      	cmp	r3, #115	; 0x73
 8001d32:	d905      	bls.n	8001d40 <HAL_DMA_Init+0x2b0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b77      	cmp	r3, #119	; 0x77
 8001d3a:	d801      	bhi.n	8001d40 <HAL_DMA_Init+0x2b0>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_DMA_Init+0x2b2>
 8001d40:	2300      	movs	r3, #0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d4c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f023 0307 	bic.w	r3, r3, #7
 8001d64:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d117      	bne.n	8001da8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00e      	beq.n	8001da8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f002 fb30 	bl	80043f0 <DMA_CheckFifoParam>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d008      	beq.n	8001da8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2240      	movs	r2, #64	; 0x40
 8001d9a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e194      	b.n	80020d2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f002 fa6b 	bl	800428c <DMA_CalcBaseAndBitshift>
 8001db6:	4603      	mov	r3, r0
 8001db8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	223f      	movs	r2, #63	; 0x3f
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	e0ca      	b.n	8001f62 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a39      	ldr	r2, [pc, #228]	; (8001eb8 <HAL_DMA_Init+0x428>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d022      	beq.n	8001e1c <HAL_DMA_Init+0x38c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a38      	ldr	r2, [pc, #224]	; (8001ebc <HAL_DMA_Init+0x42c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d01d      	beq.n	8001e1c <HAL_DMA_Init+0x38c>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a36      	ldr	r2, [pc, #216]	; (8001ec0 <HAL_DMA_Init+0x430>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d018      	beq.n	8001e1c <HAL_DMA_Init+0x38c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a35      	ldr	r2, [pc, #212]	; (8001ec4 <HAL_DMA_Init+0x434>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d013      	beq.n	8001e1c <HAL_DMA_Init+0x38c>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a33      	ldr	r2, [pc, #204]	; (8001ec8 <HAL_DMA_Init+0x438>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00e      	beq.n	8001e1c <HAL_DMA_Init+0x38c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a32      	ldr	r2, [pc, #200]	; (8001ecc <HAL_DMA_Init+0x43c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d009      	beq.n	8001e1c <HAL_DMA_Init+0x38c>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a30      	ldr	r2, [pc, #192]	; (8001ed0 <HAL_DMA_Init+0x440>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d004      	beq.n	8001e1c <HAL_DMA_Init+0x38c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a2f      	ldr	r2, [pc, #188]	; (8001ed4 <HAL_DMA_Init+0x444>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d101      	bne.n	8001e20 <HAL_DMA_Init+0x390>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_DMA_Init+0x392>
 8001e20:	2300      	movs	r3, #0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8094 	beq.w	8001f50 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <HAL_DMA_Init+0x428>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d021      	beq.n	8001e76 <HAL_DMA_Init+0x3e6>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a21      	ldr	r2, [pc, #132]	; (8001ebc <HAL_DMA_Init+0x42c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d01c      	beq.n	8001e76 <HAL_DMA_Init+0x3e6>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <HAL_DMA_Init+0x430>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d017      	beq.n	8001e76 <HAL_DMA_Init+0x3e6>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <HAL_DMA_Init+0x434>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d012      	beq.n	8001e76 <HAL_DMA_Init+0x3e6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <HAL_DMA_Init+0x438>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00d      	beq.n	8001e76 <HAL_DMA_Init+0x3e6>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <HAL_DMA_Init+0x43c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d008      	beq.n	8001e76 <HAL_DMA_Init+0x3e6>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <HAL_DMA_Init+0x440>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d003      	beq.n	8001e76 <HAL_DMA_Init+0x3e6>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <HAL_DMA_Init+0x444>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_DMA_Init+0x448>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b40      	cmp	r3, #64	; 0x40
 8001e9e:	d01d      	beq.n	8001edc <HAL_DMA_Init+0x44c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b80      	cmp	r3, #128	; 0x80
 8001ea6:	d102      	bne.n	8001eae <HAL_DMA_Init+0x41e>
 8001ea8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eac:	e017      	b.n	8001ede <HAL_DMA_Init+0x44e>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e015      	b.n	8001ede <HAL_DMA_Init+0x44e>
 8001eb2:	bf00      	nop
 8001eb4:	fe10803f 	.word	0xfe10803f
 8001eb8:	58025408 	.word	0x58025408
 8001ebc:	5802541c 	.word	0x5802541c
 8001ec0:	58025430 	.word	0x58025430
 8001ec4:	58025444 	.word	0x58025444
 8001ec8:	58025458 	.word	0x58025458
 8001ecc:	5802546c 	.word	0x5802546c
 8001ed0:	58025480 	.word	0x58025480
 8001ed4:	58025494 	.word	0x58025494
 8001ed8:	fffe000f 	.word	0xfffe000f
 8001edc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68d2      	ldr	r2, [r2, #12]
 8001ee2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ee4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001eec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ef4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001efc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f0c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b6e      	ldr	r3, [pc, #440]	; (80020dc <HAL_DMA_Init+0x64c>)
 8001f24:	4413      	add	r3, r2
 8001f26:	4a6e      	ldr	r2, [pc, #440]	; (80020e0 <HAL_DMA_Init+0x650>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	009a      	lsls	r2, r3, #2
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f002 f9a9 	bl	800428c <DMA_CalcBaseAndBitshift>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2201      	movs	r2, #1
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	e008      	b.n	8001f62 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2240      	movs	r2, #64	; 0x40
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0b7      	b.n	80020d2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a5f      	ldr	r2, [pc, #380]	; (80020e4 <HAL_DMA_Init+0x654>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d072      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a5d      	ldr	r2, [pc, #372]	; (80020e8 <HAL_DMA_Init+0x658>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d06d      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a5c      	ldr	r2, [pc, #368]	; (80020ec <HAL_DMA_Init+0x65c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d068      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a5a      	ldr	r2, [pc, #360]	; (80020f0 <HAL_DMA_Init+0x660>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d063      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a59      	ldr	r2, [pc, #356]	; (80020f4 <HAL_DMA_Init+0x664>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d05e      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a57      	ldr	r2, [pc, #348]	; (80020f8 <HAL_DMA_Init+0x668>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d059      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a56      	ldr	r2, [pc, #344]	; (80020fc <HAL_DMA_Init+0x66c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d054      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a54      	ldr	r2, [pc, #336]	; (8002100 <HAL_DMA_Init+0x670>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d04f      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a53      	ldr	r2, [pc, #332]	; (8002104 <HAL_DMA_Init+0x674>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d04a      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a51      	ldr	r2, [pc, #324]	; (8002108 <HAL_DMA_Init+0x678>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d045      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a50      	ldr	r2, [pc, #320]	; (800210c <HAL_DMA_Init+0x67c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d040      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a4e      	ldr	r2, [pc, #312]	; (8002110 <HAL_DMA_Init+0x680>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d03b      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a4d      	ldr	r2, [pc, #308]	; (8002114 <HAL_DMA_Init+0x684>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d036      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <HAL_DMA_Init+0x688>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d031      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a4a      	ldr	r2, [pc, #296]	; (800211c <HAL_DMA_Init+0x68c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d02c      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a48      	ldr	r2, [pc, #288]	; (8002120 <HAL_DMA_Init+0x690>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d027      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a47      	ldr	r2, [pc, #284]	; (8002124 <HAL_DMA_Init+0x694>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d022      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a45      	ldr	r2, [pc, #276]	; (8002128 <HAL_DMA_Init+0x698>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01d      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a44      	ldr	r2, [pc, #272]	; (800212c <HAL_DMA_Init+0x69c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d018      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a42      	ldr	r2, [pc, #264]	; (8002130 <HAL_DMA_Init+0x6a0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a41      	ldr	r2, [pc, #260]	; (8002134 <HAL_DMA_Init+0x6a4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00e      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a3f      	ldr	r2, [pc, #252]	; (8002138 <HAL_DMA_Init+0x6a8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d009      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a3e      	ldr	r2, [pc, #248]	; (800213c <HAL_DMA_Init+0x6ac>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d004      	beq.n	8002052 <HAL_DMA_Init+0x5c2>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3c      	ldr	r2, [pc, #240]	; (8002140 <HAL_DMA_Init+0x6b0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_DMA_Init+0x5c6>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_DMA_Init+0x5c8>
 8002056:	2300      	movs	r3, #0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d032      	beq.n	80020c2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f002 fa43 	bl	80044e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b80      	cmp	r3, #128	; 0x80
 8002068:	d102      	bne.n	8002070 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002084:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d010      	beq.n	80020b0 <HAL_DMA_Init+0x620>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b08      	cmp	r3, #8
 8002094:	d80c      	bhi.n	80020b0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f002 fac0 	bl	800461c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	e008      	b.n	80020c2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	a7fdabf8 	.word	0xa7fdabf8
 80020e0:	cccccccd 	.word	0xcccccccd
 80020e4:	40020010 	.word	0x40020010
 80020e8:	40020028 	.word	0x40020028
 80020ec:	40020040 	.word	0x40020040
 80020f0:	40020058 	.word	0x40020058
 80020f4:	40020070 	.word	0x40020070
 80020f8:	40020088 	.word	0x40020088
 80020fc:	400200a0 	.word	0x400200a0
 8002100:	400200b8 	.word	0x400200b8
 8002104:	40020410 	.word	0x40020410
 8002108:	40020428 	.word	0x40020428
 800210c:	40020440 	.word	0x40020440
 8002110:	40020458 	.word	0x40020458
 8002114:	40020470 	.word	0x40020470
 8002118:	40020488 	.word	0x40020488
 800211c:	400204a0 	.word	0x400204a0
 8002120:	400204b8 	.word	0x400204b8
 8002124:	58025408 	.word	0x58025408
 8002128:	5802541c 	.word	0x5802541c
 800212c:	58025430 	.word	0x58025430
 8002130:	58025444 	.word	0x58025444
 8002134:	58025458 	.word	0x58025458
 8002138:	5802546c 	.word	0x5802546c
 800213c:	58025480 	.word	0x58025480
 8002140:	58025494 	.word	0x58025494

08002144 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e226      	b.n	80025ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_DMA_Start_IT+0x2a>
 800216a:	2302      	movs	r3, #2
 800216c:	e21f      	b.n	80025ae <HAL_DMA_Start_IT+0x46a>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	f040 820a 	bne.w	8002598 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a68      	ldr	r2, [pc, #416]	; (8002338 <HAL_DMA_Start_IT+0x1f4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d04a      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a66      	ldr	r2, [pc, #408]	; (800233c <HAL_DMA_Start_IT+0x1f8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d045      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a65      	ldr	r2, [pc, #404]	; (8002340 <HAL_DMA_Start_IT+0x1fc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d040      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a63      	ldr	r2, [pc, #396]	; (8002344 <HAL_DMA_Start_IT+0x200>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d03b      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a62      	ldr	r2, [pc, #392]	; (8002348 <HAL_DMA_Start_IT+0x204>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d036      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a60      	ldr	r2, [pc, #384]	; (800234c <HAL_DMA_Start_IT+0x208>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d031      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a5f      	ldr	r2, [pc, #380]	; (8002350 <HAL_DMA_Start_IT+0x20c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d02c      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a5d      	ldr	r2, [pc, #372]	; (8002354 <HAL_DMA_Start_IT+0x210>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d027      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a5c      	ldr	r2, [pc, #368]	; (8002358 <HAL_DMA_Start_IT+0x214>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d022      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a5a      	ldr	r2, [pc, #360]	; (800235c <HAL_DMA_Start_IT+0x218>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01d      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a59      	ldr	r2, [pc, #356]	; (8002360 <HAL_DMA_Start_IT+0x21c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d018      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a57      	ldr	r2, [pc, #348]	; (8002364 <HAL_DMA_Start_IT+0x220>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a56      	ldr	r2, [pc, #344]	; (8002368 <HAL_DMA_Start_IT+0x224>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00e      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a54      	ldr	r2, [pc, #336]	; (800236c <HAL_DMA_Start_IT+0x228>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d009      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a53      	ldr	r2, [pc, #332]	; (8002370 <HAL_DMA_Start_IT+0x22c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d004      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a51      	ldr	r2, [pc, #324]	; (8002374 <HAL_DMA_Start_IT+0x230>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d108      	bne.n	8002244 <HAL_DMA_Start_IT+0x100>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e007      	b.n	8002254 <HAL_DMA_Start_IT+0x110>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f001 fe6a 	bl	8003f34 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a34      	ldr	r2, [pc, #208]	; (8002338 <HAL_DMA_Start_IT+0x1f4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d04a      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a33      	ldr	r2, [pc, #204]	; (800233c <HAL_DMA_Start_IT+0x1f8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d045      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_DMA_Start_IT+0x1fc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d040      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a30      	ldr	r2, [pc, #192]	; (8002344 <HAL_DMA_Start_IT+0x200>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d03b      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2e      	ldr	r2, [pc, #184]	; (8002348 <HAL_DMA_Start_IT+0x204>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d036      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2d      	ldr	r2, [pc, #180]	; (800234c <HAL_DMA_Start_IT+0x208>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d031      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2b      	ldr	r2, [pc, #172]	; (8002350 <HAL_DMA_Start_IT+0x20c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d02c      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <HAL_DMA_Start_IT+0x210>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d027      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a28      	ldr	r2, [pc, #160]	; (8002358 <HAL_DMA_Start_IT+0x214>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d022      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a27      	ldr	r2, [pc, #156]	; (800235c <HAL_DMA_Start_IT+0x218>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d01d      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a25      	ldr	r2, [pc, #148]	; (8002360 <HAL_DMA_Start_IT+0x21c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d018      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_DMA_Start_IT+0x220>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d013      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a22      	ldr	r2, [pc, #136]	; (8002368 <HAL_DMA_Start_IT+0x224>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00e      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a21      	ldr	r2, [pc, #132]	; (800236c <HAL_DMA_Start_IT+0x228>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d009      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <HAL_DMA_Start_IT+0x22c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d004      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1e      	ldr	r2, [pc, #120]	; (8002374 <HAL_DMA_Start_IT+0x230>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d101      	bne.n	8002304 <HAL_DMA_Start_IT+0x1c0>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_DMA_Start_IT+0x1c2>
 8002304:	2300      	movs	r3, #0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d036      	beq.n	8002378 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 021e 	bic.w	r2, r3, #30
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0216 	orr.w	r2, r2, #22
 800231c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d03e      	beq.n	80023a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0208 	orr.w	r2, r2, #8
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e035      	b.n	80023a4 <HAL_DMA_Start_IT+0x260>
 8002338:	40020010 	.word	0x40020010
 800233c:	40020028 	.word	0x40020028
 8002340:	40020040 	.word	0x40020040
 8002344:	40020058 	.word	0x40020058
 8002348:	40020070 	.word	0x40020070
 800234c:	40020088 	.word	0x40020088
 8002350:	400200a0 	.word	0x400200a0
 8002354:	400200b8 	.word	0x400200b8
 8002358:	40020410 	.word	0x40020410
 800235c:	40020428 	.word	0x40020428
 8002360:	40020440 	.word	0x40020440
 8002364:	40020458 	.word	0x40020458
 8002368:	40020470 	.word	0x40020470
 800236c:	40020488 	.word	0x40020488
 8002370:	400204a0 	.word	0x400204a0
 8002374:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 020e 	bic.w	r2, r3, #14
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 020a 	orr.w	r2, r2, #10
 800238a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0204 	orr.w	r2, r2, #4
 80023a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a83      	ldr	r2, [pc, #524]	; (80025b8 <HAL_DMA_Start_IT+0x474>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d072      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a82      	ldr	r2, [pc, #520]	; (80025bc <HAL_DMA_Start_IT+0x478>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d06d      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a80      	ldr	r2, [pc, #512]	; (80025c0 <HAL_DMA_Start_IT+0x47c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d068      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7f      	ldr	r2, [pc, #508]	; (80025c4 <HAL_DMA_Start_IT+0x480>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d063      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a7d      	ldr	r2, [pc, #500]	; (80025c8 <HAL_DMA_Start_IT+0x484>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d05e      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7c      	ldr	r2, [pc, #496]	; (80025cc <HAL_DMA_Start_IT+0x488>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d059      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a7a      	ldr	r2, [pc, #488]	; (80025d0 <HAL_DMA_Start_IT+0x48c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d054      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a79      	ldr	r2, [pc, #484]	; (80025d4 <HAL_DMA_Start_IT+0x490>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d04f      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a77      	ldr	r2, [pc, #476]	; (80025d8 <HAL_DMA_Start_IT+0x494>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d04a      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a76      	ldr	r2, [pc, #472]	; (80025dc <HAL_DMA_Start_IT+0x498>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d045      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a74      	ldr	r2, [pc, #464]	; (80025e0 <HAL_DMA_Start_IT+0x49c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d040      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a73      	ldr	r2, [pc, #460]	; (80025e4 <HAL_DMA_Start_IT+0x4a0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d03b      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a71      	ldr	r2, [pc, #452]	; (80025e8 <HAL_DMA_Start_IT+0x4a4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d036      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a70      	ldr	r2, [pc, #448]	; (80025ec <HAL_DMA_Start_IT+0x4a8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d031      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6e      	ldr	r2, [pc, #440]	; (80025f0 <HAL_DMA_Start_IT+0x4ac>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d02c      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6d      	ldr	r2, [pc, #436]	; (80025f4 <HAL_DMA_Start_IT+0x4b0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d027      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a6b      	ldr	r2, [pc, #428]	; (80025f8 <HAL_DMA_Start_IT+0x4b4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d022      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6a      	ldr	r2, [pc, #424]	; (80025fc <HAL_DMA_Start_IT+0x4b8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d01d      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a68      	ldr	r2, [pc, #416]	; (8002600 <HAL_DMA_Start_IT+0x4bc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d018      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a67      	ldr	r2, [pc, #412]	; (8002604 <HAL_DMA_Start_IT+0x4c0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d013      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a65      	ldr	r2, [pc, #404]	; (8002608 <HAL_DMA_Start_IT+0x4c4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00e      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a64      	ldr	r2, [pc, #400]	; (800260c <HAL_DMA_Start_IT+0x4c8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d009      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a62      	ldr	r2, [pc, #392]	; (8002610 <HAL_DMA_Start_IT+0x4cc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d004      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a61      	ldr	r2, [pc, #388]	; (8002614 <HAL_DMA_Start_IT+0x4d0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d101      	bne.n	8002498 <HAL_DMA_Start_IT+0x354>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_DMA_Start_IT+0x356>
 8002498:	2300      	movs	r3, #0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d01a      	beq.n	80024d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a37      	ldr	r2, [pc, #220]	; (80025b8 <HAL_DMA_Start_IT+0x474>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d04a      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a36      	ldr	r2, [pc, #216]	; (80025bc <HAL_DMA_Start_IT+0x478>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d045      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a34      	ldr	r2, [pc, #208]	; (80025c0 <HAL_DMA_Start_IT+0x47c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d040      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a33      	ldr	r2, [pc, #204]	; (80025c4 <HAL_DMA_Start_IT+0x480>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d03b      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a31      	ldr	r2, [pc, #196]	; (80025c8 <HAL_DMA_Start_IT+0x484>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d036      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a30      	ldr	r2, [pc, #192]	; (80025cc <HAL_DMA_Start_IT+0x488>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d031      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a2e      	ldr	r2, [pc, #184]	; (80025d0 <HAL_DMA_Start_IT+0x48c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d02c      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a2d      	ldr	r2, [pc, #180]	; (80025d4 <HAL_DMA_Start_IT+0x490>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d027      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a2b      	ldr	r2, [pc, #172]	; (80025d8 <HAL_DMA_Start_IT+0x494>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d022      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <HAL_DMA_Start_IT+0x498>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d01d      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_DMA_Start_IT+0x49c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d018      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <HAL_DMA_Start_IT+0x4a0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d013      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <HAL_DMA_Start_IT+0x4a4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00e      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a24      	ldr	r2, [pc, #144]	; (80025ec <HAL_DMA_Start_IT+0x4a8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d009      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <HAL_DMA_Start_IT+0x4ac>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <HAL_DMA_Start_IT+0x4b0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d108      	bne.n	8002586 <HAL_DMA_Start_IT+0x442>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e012      	b.n	80025ac <HAL_DMA_Start_IT+0x468>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e009      	b.n	80025ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800259e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40020010 	.word	0x40020010
 80025bc:	40020028 	.word	0x40020028
 80025c0:	40020040 	.word	0x40020040
 80025c4:	40020058 	.word	0x40020058
 80025c8:	40020070 	.word	0x40020070
 80025cc:	40020088 	.word	0x40020088
 80025d0:	400200a0 	.word	0x400200a0
 80025d4:	400200b8 	.word	0x400200b8
 80025d8:	40020410 	.word	0x40020410
 80025dc:	40020428 	.word	0x40020428
 80025e0:	40020440 	.word	0x40020440
 80025e4:	40020458 	.word	0x40020458
 80025e8:	40020470 	.word	0x40020470
 80025ec:	40020488 	.word	0x40020488
 80025f0:	400204a0 	.word	0x400204a0
 80025f4:	400204b8 	.word	0x400204b8
 80025f8:	58025408 	.word	0x58025408
 80025fc:	5802541c 	.word	0x5802541c
 8002600:	58025430 	.word	0x58025430
 8002604:	58025444 	.word	0x58025444
 8002608:	58025458 	.word	0x58025458
 800260c:	5802546c 	.word	0x5802546c
 8002610:	58025480 	.word	0x58025480
 8002614:	58025494 	.word	0x58025494

08002618 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002620:	f7fe fef8 	bl	8001414 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e2dc      	b.n	8002bea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d008      	beq.n	800264e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e2cd      	b.n	8002bea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a76      	ldr	r2, [pc, #472]	; (800282c <HAL_DMA_Abort+0x214>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d04a      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a74      	ldr	r2, [pc, #464]	; (8002830 <HAL_DMA_Abort+0x218>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d045      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a73      	ldr	r2, [pc, #460]	; (8002834 <HAL_DMA_Abort+0x21c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d040      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a71      	ldr	r2, [pc, #452]	; (8002838 <HAL_DMA_Abort+0x220>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d03b      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a70      	ldr	r2, [pc, #448]	; (800283c <HAL_DMA_Abort+0x224>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d036      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6e      	ldr	r2, [pc, #440]	; (8002840 <HAL_DMA_Abort+0x228>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d031      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6d      	ldr	r2, [pc, #436]	; (8002844 <HAL_DMA_Abort+0x22c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d02c      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a6b      	ldr	r2, [pc, #428]	; (8002848 <HAL_DMA_Abort+0x230>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d027      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6a      	ldr	r2, [pc, #424]	; (800284c <HAL_DMA_Abort+0x234>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d022      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a68      	ldr	r2, [pc, #416]	; (8002850 <HAL_DMA_Abort+0x238>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01d      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a67      	ldr	r2, [pc, #412]	; (8002854 <HAL_DMA_Abort+0x23c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d018      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a65      	ldr	r2, [pc, #404]	; (8002858 <HAL_DMA_Abort+0x240>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a64      	ldr	r2, [pc, #400]	; (800285c <HAL_DMA_Abort+0x244>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a62      	ldr	r2, [pc, #392]	; (8002860 <HAL_DMA_Abort+0x248>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d009      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a61      	ldr	r2, [pc, #388]	; (8002864 <HAL_DMA_Abort+0x24c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d004      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a5f      	ldr	r2, [pc, #380]	; (8002868 <HAL_DMA_Abort+0x250>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_DMA_Abort+0xda>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_DMA_Abort+0xdc>
 80026f2:	2300      	movs	r3, #0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 021e 	bic.w	r2, r2, #30
 8002706:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002716:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e00a      	b.n	8002736 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 020e 	bic.w	r2, r2, #14
 800272e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a3c      	ldr	r2, [pc, #240]	; (800282c <HAL_DMA_Abort+0x214>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d072      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <HAL_DMA_Abort+0x218>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d06d      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a39      	ldr	r2, [pc, #228]	; (8002834 <HAL_DMA_Abort+0x21c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d068      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a37      	ldr	r2, [pc, #220]	; (8002838 <HAL_DMA_Abort+0x220>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d063      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a36      	ldr	r2, [pc, #216]	; (800283c <HAL_DMA_Abort+0x224>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d05e      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a34      	ldr	r2, [pc, #208]	; (8002840 <HAL_DMA_Abort+0x228>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d059      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a33      	ldr	r2, [pc, #204]	; (8002844 <HAL_DMA_Abort+0x22c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d054      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a31      	ldr	r2, [pc, #196]	; (8002848 <HAL_DMA_Abort+0x230>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d04f      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a30      	ldr	r2, [pc, #192]	; (800284c <HAL_DMA_Abort+0x234>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04a      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2e      	ldr	r2, [pc, #184]	; (8002850 <HAL_DMA_Abort+0x238>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d045      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2d      	ldr	r2, [pc, #180]	; (8002854 <HAL_DMA_Abort+0x23c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d040      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <HAL_DMA_Abort+0x240>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d03b      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a2a      	ldr	r2, [pc, #168]	; (800285c <HAL_DMA_Abort+0x244>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d036      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a28      	ldr	r2, [pc, #160]	; (8002860 <HAL_DMA_Abort+0x248>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d031      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a27      	ldr	r2, [pc, #156]	; (8002864 <HAL_DMA_Abort+0x24c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02c      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <HAL_DMA_Abort+0x250>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a24      	ldr	r2, [pc, #144]	; (800286c <HAL_DMA_Abort+0x254>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a22      	ldr	r2, [pc, #136]	; (8002870 <HAL_DMA_Abort+0x258>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a21      	ldr	r2, [pc, #132]	; (8002874 <HAL_DMA_Abort+0x25c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <HAL_DMA_Abort+0x260>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1e      	ldr	r2, [pc, #120]	; (800287c <HAL_DMA_Abort+0x264>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <HAL_DMA_Abort+0x268>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <HAL_DMA_Abort+0x26c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <HAL_DMA_Abort+0x270>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d132      	bne.n	800288c <HAL_DMA_Abort+0x274>
 8002826:	2301      	movs	r3, #1
 8002828:	e031      	b.n	800288e <HAL_DMA_Abort+0x276>
 800282a:	bf00      	nop
 800282c:	40020010 	.word	0x40020010
 8002830:	40020028 	.word	0x40020028
 8002834:	40020040 	.word	0x40020040
 8002838:	40020058 	.word	0x40020058
 800283c:	40020070 	.word	0x40020070
 8002840:	40020088 	.word	0x40020088
 8002844:	400200a0 	.word	0x400200a0
 8002848:	400200b8 	.word	0x400200b8
 800284c:	40020410 	.word	0x40020410
 8002850:	40020428 	.word	0x40020428
 8002854:	40020440 	.word	0x40020440
 8002858:	40020458 	.word	0x40020458
 800285c:	40020470 	.word	0x40020470
 8002860:	40020488 	.word	0x40020488
 8002864:	400204a0 	.word	0x400204a0
 8002868:	400204b8 	.word	0x400204b8
 800286c:	58025408 	.word	0x58025408
 8002870:	5802541c 	.word	0x5802541c
 8002874:	58025430 	.word	0x58025430
 8002878:	58025444 	.word	0x58025444
 800287c:	58025458 	.word	0x58025458
 8002880:	5802546c 	.word	0x5802546c
 8002884:	58025480 	.word	0x58025480
 8002888:	58025494 	.word	0x58025494
 800288c:	2300      	movs	r3, #0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6d      	ldr	r2, [pc, #436]	; (8002a5c <HAL_DMA_Abort+0x444>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d04a      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a6b      	ldr	r2, [pc, #428]	; (8002a60 <HAL_DMA_Abort+0x448>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d045      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a6a      	ldr	r2, [pc, #424]	; (8002a64 <HAL_DMA_Abort+0x44c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d040      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a68      	ldr	r2, [pc, #416]	; (8002a68 <HAL_DMA_Abort+0x450>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d03b      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a67      	ldr	r2, [pc, #412]	; (8002a6c <HAL_DMA_Abort+0x454>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d036      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a65      	ldr	r2, [pc, #404]	; (8002a70 <HAL_DMA_Abort+0x458>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d031      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a64      	ldr	r2, [pc, #400]	; (8002a74 <HAL_DMA_Abort+0x45c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d02c      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a62      	ldr	r2, [pc, #392]	; (8002a78 <HAL_DMA_Abort+0x460>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d027      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a61      	ldr	r2, [pc, #388]	; (8002a7c <HAL_DMA_Abort+0x464>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d022      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5f      	ldr	r2, [pc, #380]	; (8002a80 <HAL_DMA_Abort+0x468>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01d      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5e      	ldr	r2, [pc, #376]	; (8002a84 <HAL_DMA_Abort+0x46c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d018      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5c      	ldr	r2, [pc, #368]	; (8002a88 <HAL_DMA_Abort+0x470>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a5b      	ldr	r2, [pc, #364]	; (8002a8c <HAL_DMA_Abort+0x474>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00e      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a59      	ldr	r2, [pc, #356]	; (8002a90 <HAL_DMA_Abort+0x478>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d009      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <HAL_DMA_Abort+0x47c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d004      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a56      	ldr	r2, [pc, #344]	; (8002a98 <HAL_DMA_Abort+0x480>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d108      	bne.n	8002954 <HAL_DMA_Abort+0x33c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	e007      	b.n	8002964 <HAL_DMA_Abort+0x34c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002964:	e013      	b.n	800298e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002966:	f7fe fd55 	bl	8001414 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b05      	cmp	r3, #5
 8002972:	d90c      	bls.n	800298e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2203      	movs	r2, #3
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e12d      	b.n	8002bea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e5      	bne.n	8002966 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2f      	ldr	r2, [pc, #188]	; (8002a5c <HAL_DMA_Abort+0x444>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d04a      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a2d      	ldr	r2, [pc, #180]	; (8002a60 <HAL_DMA_Abort+0x448>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d045      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a2c      	ldr	r2, [pc, #176]	; (8002a64 <HAL_DMA_Abort+0x44c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d040      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a2a      	ldr	r2, [pc, #168]	; (8002a68 <HAL_DMA_Abort+0x450>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d03b      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a29      	ldr	r2, [pc, #164]	; (8002a6c <HAL_DMA_Abort+0x454>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d036      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <HAL_DMA_Abort+0x458>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d031      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a26      	ldr	r2, [pc, #152]	; (8002a74 <HAL_DMA_Abort+0x45c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d02c      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <HAL_DMA_Abort+0x460>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d027      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a23      	ldr	r2, [pc, #140]	; (8002a7c <HAL_DMA_Abort+0x464>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d022      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a21      	ldr	r2, [pc, #132]	; (8002a80 <HAL_DMA_Abort+0x468>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01d      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a20      	ldr	r2, [pc, #128]	; (8002a84 <HAL_DMA_Abort+0x46c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d018      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <HAL_DMA_Abort+0x470>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <HAL_DMA_Abort+0x474>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00e      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_DMA_Abort+0x478>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <HAL_DMA_Abort+0x47c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_DMA_Abort+0x480>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <HAL_DMA_Abort+0x426>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_DMA_Abort+0x428>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d02b      	beq.n	8002a9c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	223f      	movs	r2, #63	; 0x3f
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	e02a      	b.n	8002ab2 <HAL_DMA_Abort+0x49a>
 8002a5c:	40020010 	.word	0x40020010
 8002a60:	40020028 	.word	0x40020028
 8002a64:	40020040 	.word	0x40020040
 8002a68:	40020058 	.word	0x40020058
 8002a6c:	40020070 	.word	0x40020070
 8002a70:	40020088 	.word	0x40020088
 8002a74:	400200a0 	.word	0x400200a0
 8002a78:	400200b8 	.word	0x400200b8
 8002a7c:	40020410 	.word	0x40020410
 8002a80:	40020428 	.word	0x40020428
 8002a84:	40020440 	.word	0x40020440
 8002a88:	40020458 	.word	0x40020458
 8002a8c:	40020470 	.word	0x40020470
 8002a90:	40020488 	.word	0x40020488
 8002a94:	400204a0 	.word	0x400204a0
 8002a98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2201      	movs	r2, #1
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a4f      	ldr	r2, [pc, #316]	; (8002bf4 <HAL_DMA_Abort+0x5dc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d072      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a4d      	ldr	r2, [pc, #308]	; (8002bf8 <HAL_DMA_Abort+0x5e0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d06d      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a4c      	ldr	r2, [pc, #304]	; (8002bfc <HAL_DMA_Abort+0x5e4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d068      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	; (8002c00 <HAL_DMA_Abort+0x5e8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d063      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a49      	ldr	r2, [pc, #292]	; (8002c04 <HAL_DMA_Abort+0x5ec>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d05e      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a47      	ldr	r2, [pc, #284]	; (8002c08 <HAL_DMA_Abort+0x5f0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d059      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a46      	ldr	r2, [pc, #280]	; (8002c0c <HAL_DMA_Abort+0x5f4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d054      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a44      	ldr	r2, [pc, #272]	; (8002c10 <HAL_DMA_Abort+0x5f8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d04f      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a43      	ldr	r2, [pc, #268]	; (8002c14 <HAL_DMA_Abort+0x5fc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d04a      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a41      	ldr	r2, [pc, #260]	; (8002c18 <HAL_DMA_Abort+0x600>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d045      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a40      	ldr	r2, [pc, #256]	; (8002c1c <HAL_DMA_Abort+0x604>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d040      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a3e      	ldr	r2, [pc, #248]	; (8002c20 <HAL_DMA_Abort+0x608>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d03b      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a3d      	ldr	r2, [pc, #244]	; (8002c24 <HAL_DMA_Abort+0x60c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d036      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a3b      	ldr	r2, [pc, #236]	; (8002c28 <HAL_DMA_Abort+0x610>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d031      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a3a      	ldr	r2, [pc, #232]	; (8002c2c <HAL_DMA_Abort+0x614>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d02c      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a38      	ldr	r2, [pc, #224]	; (8002c30 <HAL_DMA_Abort+0x618>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d027      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a37      	ldr	r2, [pc, #220]	; (8002c34 <HAL_DMA_Abort+0x61c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d022      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a35      	ldr	r2, [pc, #212]	; (8002c38 <HAL_DMA_Abort+0x620>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01d      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a34      	ldr	r2, [pc, #208]	; (8002c3c <HAL_DMA_Abort+0x624>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d018      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a32      	ldr	r2, [pc, #200]	; (8002c40 <HAL_DMA_Abort+0x628>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a31      	ldr	r2, [pc, #196]	; (8002c44 <HAL_DMA_Abort+0x62c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00e      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2f      	ldr	r2, [pc, #188]	; (8002c48 <HAL_DMA_Abort+0x630>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d009      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2e      	ldr	r2, [pc, #184]	; (8002c4c <HAL_DMA_Abort+0x634>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2c      	ldr	r2, [pc, #176]	; (8002c50 <HAL_DMA_Abort+0x638>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_DMA_Abort+0x58e>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_DMA_Abort+0x590>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002bb4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bd6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40020010 	.word	0x40020010
 8002bf8:	40020028 	.word	0x40020028
 8002bfc:	40020040 	.word	0x40020040
 8002c00:	40020058 	.word	0x40020058
 8002c04:	40020070 	.word	0x40020070
 8002c08:	40020088 	.word	0x40020088
 8002c0c:	400200a0 	.word	0x400200a0
 8002c10:	400200b8 	.word	0x400200b8
 8002c14:	40020410 	.word	0x40020410
 8002c18:	40020428 	.word	0x40020428
 8002c1c:	40020440 	.word	0x40020440
 8002c20:	40020458 	.word	0x40020458
 8002c24:	40020470 	.word	0x40020470
 8002c28:	40020488 	.word	0x40020488
 8002c2c:	400204a0 	.word	0x400204a0
 8002c30:	400204b8 	.word	0x400204b8
 8002c34:	58025408 	.word	0x58025408
 8002c38:	5802541c 	.word	0x5802541c
 8002c3c:	58025430 	.word	0x58025430
 8002c40:	58025444 	.word	0x58025444
 8002c44:	58025458 	.word	0x58025458
 8002c48:	5802546c 	.word	0x5802546c
 8002c4c:	58025480 	.word	0x58025480
 8002c50:	58025494 	.word	0x58025494

08002c54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e237      	b.n	80030d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d004      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2280      	movs	r2, #128	; 0x80
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e22c      	b.n	80030d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a5c      	ldr	r2, [pc, #368]	; (8002df4 <HAL_DMA_Abort_IT+0x1a0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d04a      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a5b      	ldr	r2, [pc, #364]	; (8002df8 <HAL_DMA_Abort_IT+0x1a4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d045      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a59      	ldr	r2, [pc, #356]	; (8002dfc <HAL_DMA_Abort_IT+0x1a8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d040      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_DMA_Abort_IT+0x1ac>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d03b      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a56      	ldr	r2, [pc, #344]	; (8002e04 <HAL_DMA_Abort_IT+0x1b0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d036      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a55      	ldr	r2, [pc, #340]	; (8002e08 <HAL_DMA_Abort_IT+0x1b4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d031      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a53      	ldr	r2, [pc, #332]	; (8002e0c <HAL_DMA_Abort_IT+0x1b8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02c      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_DMA_Abort_IT+0x1bc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d027      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a50      	ldr	r2, [pc, #320]	; (8002e14 <HAL_DMA_Abort_IT+0x1c0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d022      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a4f      	ldr	r2, [pc, #316]	; (8002e18 <HAL_DMA_Abort_IT+0x1c4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d01d      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a4d      	ldr	r2, [pc, #308]	; (8002e1c <HAL_DMA_Abort_IT+0x1c8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d018      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a4c      	ldr	r2, [pc, #304]	; (8002e20 <HAL_DMA_Abort_IT+0x1cc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a4a      	ldr	r2, [pc, #296]	; (8002e24 <HAL_DMA_Abort_IT+0x1d0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00e      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a49      	ldr	r2, [pc, #292]	; (8002e28 <HAL_DMA_Abort_IT+0x1d4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a47      	ldr	r2, [pc, #284]	; (8002e2c <HAL_DMA_Abort_IT+0x1d8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a46      	ldr	r2, [pc, #280]	; (8002e30 <HAL_DMA_Abort_IT+0x1dc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_DMA_Abort_IT+0xcc>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_DMA_Abort_IT+0xce>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 8086 	beq.w	8002e34 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2f      	ldr	r2, [pc, #188]	; (8002df4 <HAL_DMA_Abort_IT+0x1a0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d04a      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2e      	ldr	r2, [pc, #184]	; (8002df8 <HAL_DMA_Abort_IT+0x1a4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d045      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2c      	ldr	r2, [pc, #176]	; (8002dfc <HAL_DMA_Abort_IT+0x1a8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d040      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2b      	ldr	r2, [pc, #172]	; (8002e00 <HAL_DMA_Abort_IT+0x1ac>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d03b      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a29      	ldr	r2, [pc, #164]	; (8002e04 <HAL_DMA_Abort_IT+0x1b0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d036      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a28      	ldr	r2, [pc, #160]	; (8002e08 <HAL_DMA_Abort_IT+0x1b4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d031      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a26      	ldr	r2, [pc, #152]	; (8002e0c <HAL_DMA_Abort_IT+0x1b8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d02c      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a25      	ldr	r2, [pc, #148]	; (8002e10 <HAL_DMA_Abort_IT+0x1bc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d027      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a23      	ldr	r2, [pc, #140]	; (8002e14 <HAL_DMA_Abort_IT+0x1c0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d022      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <HAL_DMA_Abort_IT+0x1c4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d01d      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <HAL_DMA_Abort_IT+0x1c8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d018      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <HAL_DMA_Abort_IT+0x1cc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d013      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <HAL_DMA_Abort_IT+0x1d0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00e      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1c      	ldr	r2, [pc, #112]	; (8002e28 <HAL_DMA_Abort_IT+0x1d4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1a      	ldr	r2, [pc, #104]	; (8002e2c <HAL_DMA_Abort_IT+0x1d8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_DMA_Abort_IT+0x1dc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d108      	bne.n	8002de2 <HAL_DMA_Abort_IT+0x18e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e178      	b.n	80030d4 <HAL_DMA_Abort_IT+0x480>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e16f      	b.n	80030d4 <HAL_DMA_Abort_IT+0x480>
 8002df4:	40020010 	.word	0x40020010
 8002df8:	40020028 	.word	0x40020028
 8002dfc:	40020040 	.word	0x40020040
 8002e00:	40020058 	.word	0x40020058
 8002e04:	40020070 	.word	0x40020070
 8002e08:	40020088 	.word	0x40020088
 8002e0c:	400200a0 	.word	0x400200a0
 8002e10:	400200b8 	.word	0x400200b8
 8002e14:	40020410 	.word	0x40020410
 8002e18:	40020428 	.word	0x40020428
 8002e1c:	40020440 	.word	0x40020440
 8002e20:	40020458 	.word	0x40020458
 8002e24:	40020470 	.word	0x40020470
 8002e28:	40020488 	.word	0x40020488
 8002e2c:	400204a0 	.word	0x400204a0
 8002e30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 020e 	bic.w	r2, r2, #14
 8002e42:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6c      	ldr	r2, [pc, #432]	; (8002ffc <HAL_DMA_Abort_IT+0x3a8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d04a      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6b      	ldr	r2, [pc, #428]	; (8003000 <HAL_DMA_Abort_IT+0x3ac>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d045      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a69      	ldr	r2, [pc, #420]	; (8003004 <HAL_DMA_Abort_IT+0x3b0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d040      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a68      	ldr	r2, [pc, #416]	; (8003008 <HAL_DMA_Abort_IT+0x3b4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d03b      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a66      	ldr	r2, [pc, #408]	; (800300c <HAL_DMA_Abort_IT+0x3b8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d036      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a65      	ldr	r2, [pc, #404]	; (8003010 <HAL_DMA_Abort_IT+0x3bc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d031      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a63      	ldr	r2, [pc, #396]	; (8003014 <HAL_DMA_Abort_IT+0x3c0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02c      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a62      	ldr	r2, [pc, #392]	; (8003018 <HAL_DMA_Abort_IT+0x3c4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d027      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a60      	ldr	r2, [pc, #384]	; (800301c <HAL_DMA_Abort_IT+0x3c8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d022      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a5f      	ldr	r2, [pc, #380]	; (8003020 <HAL_DMA_Abort_IT+0x3cc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01d      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a5d      	ldr	r2, [pc, #372]	; (8003024 <HAL_DMA_Abort_IT+0x3d0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d018      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a5c      	ldr	r2, [pc, #368]	; (8003028 <HAL_DMA_Abort_IT+0x3d4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a5a      	ldr	r2, [pc, #360]	; (800302c <HAL_DMA_Abort_IT+0x3d8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a59      	ldr	r2, [pc, #356]	; (8003030 <HAL_DMA_Abort_IT+0x3dc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a57      	ldr	r2, [pc, #348]	; (8003034 <HAL_DMA_Abort_IT+0x3e0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a56      	ldr	r2, [pc, #344]	; (8003038 <HAL_DMA_Abort_IT+0x3e4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <HAL_DMA_Abort_IT+0x2a2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e007      	b.n	8002f06 <HAL_DMA_Abort_IT+0x2b2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a3c      	ldr	r2, [pc, #240]	; (8002ffc <HAL_DMA_Abort_IT+0x3a8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d072      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a3a      	ldr	r2, [pc, #232]	; (8003000 <HAL_DMA_Abort_IT+0x3ac>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d06d      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a39      	ldr	r2, [pc, #228]	; (8003004 <HAL_DMA_Abort_IT+0x3b0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d068      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a37      	ldr	r2, [pc, #220]	; (8003008 <HAL_DMA_Abort_IT+0x3b4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d063      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a36      	ldr	r2, [pc, #216]	; (800300c <HAL_DMA_Abort_IT+0x3b8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d05e      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a34      	ldr	r2, [pc, #208]	; (8003010 <HAL_DMA_Abort_IT+0x3bc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d059      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a33      	ldr	r2, [pc, #204]	; (8003014 <HAL_DMA_Abort_IT+0x3c0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d054      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a31      	ldr	r2, [pc, #196]	; (8003018 <HAL_DMA_Abort_IT+0x3c4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d04f      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a30      	ldr	r2, [pc, #192]	; (800301c <HAL_DMA_Abort_IT+0x3c8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d04a      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2e      	ldr	r2, [pc, #184]	; (8003020 <HAL_DMA_Abort_IT+0x3cc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d045      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2d      	ldr	r2, [pc, #180]	; (8003024 <HAL_DMA_Abort_IT+0x3d0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d040      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2b      	ldr	r2, [pc, #172]	; (8003028 <HAL_DMA_Abort_IT+0x3d4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d03b      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2a      	ldr	r2, [pc, #168]	; (800302c <HAL_DMA_Abort_IT+0x3d8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d036      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a28      	ldr	r2, [pc, #160]	; (8003030 <HAL_DMA_Abort_IT+0x3dc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d031      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a27      	ldr	r2, [pc, #156]	; (8003034 <HAL_DMA_Abort_IT+0x3e0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d02c      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a25      	ldr	r2, [pc, #148]	; (8003038 <HAL_DMA_Abort_IT+0x3e4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d027      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a24      	ldr	r2, [pc, #144]	; (800303c <HAL_DMA_Abort_IT+0x3e8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d022      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a22      	ldr	r2, [pc, #136]	; (8003040 <HAL_DMA_Abort_IT+0x3ec>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01d      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a21      	ldr	r2, [pc, #132]	; (8003044 <HAL_DMA_Abort_IT+0x3f0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d018      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <HAL_DMA_Abort_IT+0x3f4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	; (800304c <HAL_DMA_Abort_IT+0x3f8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <HAL_DMA_Abort_IT+0x3fc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d009      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1b      	ldr	r2, [pc, #108]	; (8003054 <HAL_DMA_Abort_IT+0x400>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d004      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <HAL_DMA_Abort_IT+0x404>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d132      	bne.n	800305c <HAL_DMA_Abort_IT+0x408>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e031      	b.n	800305e <HAL_DMA_Abort_IT+0x40a>
 8002ffa:	bf00      	nop
 8002ffc:	40020010 	.word	0x40020010
 8003000:	40020028 	.word	0x40020028
 8003004:	40020040 	.word	0x40020040
 8003008:	40020058 	.word	0x40020058
 800300c:	40020070 	.word	0x40020070
 8003010:	40020088 	.word	0x40020088
 8003014:	400200a0 	.word	0x400200a0
 8003018:	400200b8 	.word	0x400200b8
 800301c:	40020410 	.word	0x40020410
 8003020:	40020428 	.word	0x40020428
 8003024:	40020440 	.word	0x40020440
 8003028:	40020458 	.word	0x40020458
 800302c:	40020470 	.word	0x40020470
 8003030:	40020488 	.word	0x40020488
 8003034:	400204a0 	.word	0x400204a0
 8003038:	400204b8 	.word	0x400204b8
 800303c:	58025408 	.word	0x58025408
 8003040:	5802541c 	.word	0x5802541c
 8003044:	58025430 	.word	0x58025430
 8003048:	58025444 	.word	0x58025444
 800304c:	58025458 	.word	0x58025458
 8003050:	5802546c 	.word	0x5802546c
 8003054:	58025480 	.word	0x58025480
 8003058:	58025494 	.word	0x58025494
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d028      	beq.n	80030b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003070:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2201      	movs	r2, #1
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003090:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop

080030e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030ec:	4b67      	ldr	r3, [pc, #412]	; (800328c <HAL_DMA_IRQHandler+0x1ac>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a67      	ldr	r2, [pc, #412]	; (8003290 <HAL_DMA_IRQHandler+0x1b0>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	0a9b      	lsrs	r3, r3, #10
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a5f      	ldr	r2, [pc, #380]	; (8003294 <HAL_DMA_IRQHandler+0x1b4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04a      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a5d      	ldr	r2, [pc, #372]	; (8003298 <HAL_DMA_IRQHandler+0x1b8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d045      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a5c      	ldr	r2, [pc, #368]	; (800329c <HAL_DMA_IRQHandler+0x1bc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d040      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a5a      	ldr	r2, [pc, #360]	; (80032a0 <HAL_DMA_IRQHandler+0x1c0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03b      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a59      	ldr	r2, [pc, #356]	; (80032a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d036      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a57      	ldr	r2, [pc, #348]	; (80032a8 <HAL_DMA_IRQHandler+0x1c8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a56      	ldr	r2, [pc, #344]	; (80032ac <HAL_DMA_IRQHandler+0x1cc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a54      	ldr	r2, [pc, #336]	; (80032b0 <HAL_DMA_IRQHandler+0x1d0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a53      	ldr	r2, [pc, #332]	; (80032b4 <HAL_DMA_IRQHandler+0x1d4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a51      	ldr	r2, [pc, #324]	; (80032b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a50      	ldr	r2, [pc, #320]	; (80032bc <HAL_DMA_IRQHandler+0x1dc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a4e      	ldr	r2, [pc, #312]	; (80032c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a4d      	ldr	r2, [pc, #308]	; (80032c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a4b      	ldr	r2, [pc, #300]	; (80032c8 <HAL_DMA_IRQHandler+0x1e8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a4a      	ldr	r2, [pc, #296]	; (80032cc <HAL_DMA_IRQHandler+0x1ec>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a48      	ldr	r2, [pc, #288]	; (80032d0 <HAL_DMA_IRQHandler+0x1f0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_DMA_IRQHandler+0xd6>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_DMA_IRQHandler+0xd8>
 80031b6:	2300      	movs	r3, #0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 842b 	beq.w	8003a14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2208      	movs	r2, #8
 80031c8:	409a      	lsls	r2, r3
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80a2 	beq.w	8003318 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2e      	ldr	r2, [pc, #184]	; (8003294 <HAL_DMA_IRQHandler+0x1b4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d04a      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2d      	ldr	r2, [pc, #180]	; (8003298 <HAL_DMA_IRQHandler+0x1b8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d045      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	; (800329c <HAL_DMA_IRQHandler+0x1bc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d040      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2a      	ldr	r2, [pc, #168]	; (80032a0 <HAL_DMA_IRQHandler+0x1c0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d03b      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a28      	ldr	r2, [pc, #160]	; (80032a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d036      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <HAL_DMA_IRQHandler+0x1c8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d031      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a25      	ldr	r2, [pc, #148]	; (80032ac <HAL_DMA_IRQHandler+0x1cc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d02c      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <HAL_DMA_IRQHandler+0x1d0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d027      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a22      	ldr	r2, [pc, #136]	; (80032b4 <HAL_DMA_IRQHandler+0x1d4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d022      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a21      	ldr	r2, [pc, #132]	; (80032b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d01d      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <HAL_DMA_IRQHandler+0x1dc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d018      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d013      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00e      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_DMA_IRQHandler+0x1e8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d009      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a19      	ldr	r2, [pc, #100]	; (80032cc <HAL_DMA_IRQHandler+0x1ec>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d004      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d12f      	bne.n	80032d4 <HAL_DMA_IRQHandler+0x1f4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	bf14      	ite	ne
 8003282:	2301      	movne	r3, #1
 8003284:	2300      	moveq	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e02e      	b.n	80032e8 <HAL_DMA_IRQHandler+0x208>
 800328a:	bf00      	nop
 800328c:	24000004 	.word	0x24000004
 8003290:	1b4e81b5 	.word	0x1b4e81b5
 8003294:	40020010 	.word	0x40020010
 8003298:	40020028 	.word	0x40020028
 800329c:	40020040 	.word	0x40020040
 80032a0:	40020058 	.word	0x40020058
 80032a4:	40020070 	.word	0x40020070
 80032a8:	40020088 	.word	0x40020088
 80032ac:	400200a0 	.word	0x400200a0
 80032b0:	400200b8 	.word	0x400200b8
 80032b4:	40020410 	.word	0x40020410
 80032b8:	40020428 	.word	0x40020428
 80032bc:	40020440 	.word	0x40020440
 80032c0:	40020458 	.word	0x40020458
 80032c4:	40020470 	.word	0x40020470
 80032c8:	40020488 	.word	0x40020488
 80032cc:	400204a0 	.word	0x400204a0
 80032d0:	400204b8 	.word	0x400204b8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d015      	beq.n	8003318 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0204 	bic.w	r2, r2, #4
 80032fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2208      	movs	r2, #8
 8003306:	409a      	lsls	r2, r3
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f043 0201 	orr.w	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d06e      	beq.n	800340c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a69      	ldr	r2, [pc, #420]	; (80034d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d04a      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a67      	ldr	r2, [pc, #412]	; (80034dc <HAL_DMA_IRQHandler+0x3fc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d045      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a66      	ldr	r2, [pc, #408]	; (80034e0 <HAL_DMA_IRQHandler+0x400>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d040      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a64      	ldr	r2, [pc, #400]	; (80034e4 <HAL_DMA_IRQHandler+0x404>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d03b      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a63      	ldr	r2, [pc, #396]	; (80034e8 <HAL_DMA_IRQHandler+0x408>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d036      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a61      	ldr	r2, [pc, #388]	; (80034ec <HAL_DMA_IRQHandler+0x40c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d031      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a60      	ldr	r2, [pc, #384]	; (80034f0 <HAL_DMA_IRQHandler+0x410>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d02c      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a5e      	ldr	r2, [pc, #376]	; (80034f4 <HAL_DMA_IRQHandler+0x414>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d027      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a5d      	ldr	r2, [pc, #372]	; (80034f8 <HAL_DMA_IRQHandler+0x418>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d022      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5b      	ldr	r2, [pc, #364]	; (80034fc <HAL_DMA_IRQHandler+0x41c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01d      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5a      	ldr	r2, [pc, #360]	; (8003500 <HAL_DMA_IRQHandler+0x420>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a58      	ldr	r2, [pc, #352]	; (8003504 <HAL_DMA_IRQHandler+0x424>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_DMA_IRQHandler+0x428>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a55      	ldr	r2, [pc, #340]	; (800350c <HAL_DMA_IRQHandler+0x42c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a54      	ldr	r2, [pc, #336]	; (8003510 <HAL_DMA_IRQHandler+0x430>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a52      	ldr	r2, [pc, #328]	; (8003514 <HAL_DMA_IRQHandler+0x434>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d10a      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x304>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf14      	ite	ne
 80033dc:	2301      	movne	r3, #1
 80033de:	2300      	moveq	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	e003      	b.n	80033ec <HAL_DMA_IRQHandler+0x30c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2201      	movs	r2, #1
 80033fa:	409a      	lsls	r2, r3
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f043 0202 	orr.w	r2, r3, #2
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2204      	movs	r2, #4
 8003416:	409a      	lsls	r2, r3
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 808f 	beq.w	8003540 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2c      	ldr	r2, [pc, #176]	; (80034d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d04a      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a2a      	ldr	r2, [pc, #168]	; (80034dc <HAL_DMA_IRQHandler+0x3fc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d045      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a29      	ldr	r2, [pc, #164]	; (80034e0 <HAL_DMA_IRQHandler+0x400>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d040      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a27      	ldr	r2, [pc, #156]	; (80034e4 <HAL_DMA_IRQHandler+0x404>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d03b      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a26      	ldr	r2, [pc, #152]	; (80034e8 <HAL_DMA_IRQHandler+0x408>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d036      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a24      	ldr	r2, [pc, #144]	; (80034ec <HAL_DMA_IRQHandler+0x40c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d031      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <HAL_DMA_IRQHandler+0x410>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d02c      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a21      	ldr	r2, [pc, #132]	; (80034f4 <HAL_DMA_IRQHandler+0x414>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d027      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <HAL_DMA_IRQHandler+0x418>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d022      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1e      	ldr	r2, [pc, #120]	; (80034fc <HAL_DMA_IRQHandler+0x41c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01d      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <HAL_DMA_IRQHandler+0x420>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d018      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <HAL_DMA_IRQHandler+0x424>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1a      	ldr	r2, [pc, #104]	; (8003508 <HAL_DMA_IRQHandler+0x428>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a18      	ldr	r2, [pc, #96]	; (800350c <HAL_DMA_IRQHandler+0x42c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a17      	ldr	r2, [pc, #92]	; (8003510 <HAL_DMA_IRQHandler+0x430>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a15      	ldr	r2, [pc, #84]	; (8003514 <HAL_DMA_IRQHandler+0x434>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d12a      	bne.n	8003518 <HAL_DMA_IRQHandler+0x438>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e023      	b.n	8003520 <HAL_DMA_IRQHandler+0x440>
 80034d8:	40020010 	.word	0x40020010
 80034dc:	40020028 	.word	0x40020028
 80034e0:	40020040 	.word	0x40020040
 80034e4:	40020058 	.word	0x40020058
 80034e8:	40020070 	.word	0x40020070
 80034ec:	40020088 	.word	0x40020088
 80034f0:	400200a0 	.word	0x400200a0
 80034f4:	400200b8 	.word	0x400200b8
 80034f8:	40020410 	.word	0x40020410
 80034fc:	40020428 	.word	0x40020428
 8003500:	40020440 	.word	0x40020440
 8003504:	40020458 	.word	0x40020458
 8003508:	40020470 	.word	0x40020470
 800350c:	40020488 	.word	0x40020488
 8003510:	400204a0 	.word	0x400204a0
 8003514:	400204b8 	.word	0x400204b8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2204      	movs	r2, #4
 800352e:	409a      	lsls	r2, r3
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	f043 0204 	orr.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2210      	movs	r2, #16
 800354a:	409a      	lsls	r2, r3
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80a6 	beq.w	80036a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a85      	ldr	r2, [pc, #532]	; (8003770 <HAL_DMA_IRQHandler+0x690>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d04a      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a83      	ldr	r2, [pc, #524]	; (8003774 <HAL_DMA_IRQHandler+0x694>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d045      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a82      	ldr	r2, [pc, #520]	; (8003778 <HAL_DMA_IRQHandler+0x698>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d040      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a80      	ldr	r2, [pc, #512]	; (800377c <HAL_DMA_IRQHandler+0x69c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d03b      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a7f      	ldr	r2, [pc, #508]	; (8003780 <HAL_DMA_IRQHandler+0x6a0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d036      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a7d      	ldr	r2, [pc, #500]	; (8003784 <HAL_DMA_IRQHandler+0x6a4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d031      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7c      	ldr	r2, [pc, #496]	; (8003788 <HAL_DMA_IRQHandler+0x6a8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d02c      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a7a      	ldr	r2, [pc, #488]	; (800378c <HAL_DMA_IRQHandler+0x6ac>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d027      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a79      	ldr	r2, [pc, #484]	; (8003790 <HAL_DMA_IRQHandler+0x6b0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d022      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a77      	ldr	r2, [pc, #476]	; (8003794 <HAL_DMA_IRQHandler+0x6b4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01d      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a76      	ldr	r2, [pc, #472]	; (8003798 <HAL_DMA_IRQHandler+0x6b8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d018      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a74      	ldr	r2, [pc, #464]	; (800379c <HAL_DMA_IRQHandler+0x6bc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a73      	ldr	r2, [pc, #460]	; (80037a0 <HAL_DMA_IRQHandler+0x6c0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a71      	ldr	r2, [pc, #452]	; (80037a4 <HAL_DMA_IRQHandler+0x6c4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d009      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a70      	ldr	r2, [pc, #448]	; (80037a8 <HAL_DMA_IRQHandler+0x6c8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d004      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6e      	ldr	r2, [pc, #440]	; (80037ac <HAL_DMA_IRQHandler+0x6cc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10a      	bne.n	800360c <HAL_DMA_IRQHandler+0x52c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e009      	b.n	8003620 <HAL_DMA_IRQHandler+0x540>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d03e      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	2210      	movs	r2, #16
 800362e:	409a      	lsls	r2, r3
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d018      	beq.n	8003674 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d108      	bne.n	8003662 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d024      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
 8003660:	e01f      	b.n	80036a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003666:	2b00      	cmp	r3, #0
 8003668:	d01b      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
 8003672:	e016      	b.n	80036a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0208 	bic.w	r2, r2, #8
 8003690:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	2220      	movs	r2, #32
 80036ac:	409a      	lsls	r2, r3
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8110 	beq.w	80038d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2c      	ldr	r2, [pc, #176]	; (8003770 <HAL_DMA_IRQHandler+0x690>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d04a      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <HAL_DMA_IRQHandler+0x694>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d045      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a29      	ldr	r2, [pc, #164]	; (8003778 <HAL_DMA_IRQHandler+0x698>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d040      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a28      	ldr	r2, [pc, #160]	; (800377c <HAL_DMA_IRQHandler+0x69c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d03b      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a26      	ldr	r2, [pc, #152]	; (8003780 <HAL_DMA_IRQHandler+0x6a0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d036      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a25      	ldr	r2, [pc, #148]	; (8003784 <HAL_DMA_IRQHandler+0x6a4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d031      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a23      	ldr	r2, [pc, #140]	; (8003788 <HAL_DMA_IRQHandler+0x6a8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d02c      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a22      	ldr	r2, [pc, #136]	; (800378c <HAL_DMA_IRQHandler+0x6ac>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d027      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a20      	ldr	r2, [pc, #128]	; (8003790 <HAL_DMA_IRQHandler+0x6b0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d022      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_DMA_IRQHandler+0x6b4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d01d      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <HAL_DMA_IRQHandler+0x6b8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d018      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_DMA_IRQHandler+0x6bc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1a      	ldr	r2, [pc, #104]	; (80037a0 <HAL_DMA_IRQHandler+0x6c0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00e      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_DMA_IRQHandler+0x6c4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d009      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <HAL_DMA_IRQHandler+0x6c8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a16      	ldr	r2, [pc, #88]	; (80037ac <HAL_DMA_IRQHandler+0x6cc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d12b      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x6d0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	bf14      	ite	ne
 8003766:	2301      	movne	r3, #1
 8003768:	2300      	moveq	r3, #0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	e02a      	b.n	80037c4 <HAL_DMA_IRQHandler+0x6e4>
 800376e:	bf00      	nop
 8003770:	40020010 	.word	0x40020010
 8003774:	40020028 	.word	0x40020028
 8003778:	40020040 	.word	0x40020040
 800377c:	40020058 	.word	0x40020058
 8003780:	40020070 	.word	0x40020070
 8003784:	40020088 	.word	0x40020088
 8003788:	400200a0 	.word	0x400200a0
 800378c:	400200b8 	.word	0x400200b8
 8003790:	40020410 	.word	0x40020410
 8003794:	40020428 	.word	0x40020428
 8003798:	40020440 	.word	0x40020440
 800379c:	40020458 	.word	0x40020458
 80037a0:	40020470 	.word	0x40020470
 80037a4:	40020488 	.word	0x40020488
 80037a8:	400204a0 	.word	0x400204a0
 80037ac:	400204b8 	.word	0x400204b8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8087 	beq.w	80038d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2220      	movs	r2, #32
 80037d4:	409a      	lsls	r2, r3
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d139      	bne.n	800385a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0216 	bic.w	r2, r2, #22
 80037f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003804:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <HAL_DMA_IRQHandler+0x736>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0208 	bic.w	r2, r2, #8
 8003824:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	223f      	movs	r2, #63	; 0x3f
 8003830:	409a      	lsls	r2, r3
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 834a 	beq.w	8003ee4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
          }
          return;
 8003858:	e344      	b.n	8003ee4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d018      	beq.n	800389a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	2b00      	cmp	r3, #0
 800387c:	d02c      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
 8003886:	e027      	b.n	80038d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d023      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4798      	blx	r3
 8003898:	e01e      	b.n	80038d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10f      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0210 	bic.w	r2, r2, #16
 80038b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8306 	beq.w	8003eee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 8088 	beq.w	8003a00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2204      	movs	r2, #4
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7a      	ldr	r2, [pc, #488]	; (8003ae8 <HAL_DMA_IRQHandler+0xa08>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d04a      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a79      	ldr	r2, [pc, #484]	; (8003aec <HAL_DMA_IRQHandler+0xa0c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d045      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a77      	ldr	r2, [pc, #476]	; (8003af0 <HAL_DMA_IRQHandler+0xa10>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d040      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a76      	ldr	r2, [pc, #472]	; (8003af4 <HAL_DMA_IRQHandler+0xa14>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d03b      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a74      	ldr	r2, [pc, #464]	; (8003af8 <HAL_DMA_IRQHandler+0xa18>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d036      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a73      	ldr	r2, [pc, #460]	; (8003afc <HAL_DMA_IRQHandler+0xa1c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d031      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a71      	ldr	r2, [pc, #452]	; (8003b00 <HAL_DMA_IRQHandler+0xa20>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d02c      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a70      	ldr	r2, [pc, #448]	; (8003b04 <HAL_DMA_IRQHandler+0xa24>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d027      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a6e      	ldr	r2, [pc, #440]	; (8003b08 <HAL_DMA_IRQHandler+0xa28>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d022      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a6d      	ldr	r2, [pc, #436]	; (8003b0c <HAL_DMA_IRQHandler+0xa2c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d01d      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a6b      	ldr	r2, [pc, #428]	; (8003b10 <HAL_DMA_IRQHandler+0xa30>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d018      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6a      	ldr	r2, [pc, #424]	; (8003b14 <HAL_DMA_IRQHandler+0xa34>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d013      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a68      	ldr	r2, [pc, #416]	; (8003b18 <HAL_DMA_IRQHandler+0xa38>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00e      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a67      	ldr	r2, [pc, #412]	; (8003b1c <HAL_DMA_IRQHandler+0xa3c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a65      	ldr	r2, [pc, #404]	; (8003b20 <HAL_DMA_IRQHandler+0xa40>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d004      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a64      	ldr	r2, [pc, #400]	; (8003b24 <HAL_DMA_IRQHandler+0xa44>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d108      	bne.n	80039aa <HAL_DMA_IRQHandler+0x8ca>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e007      	b.n	80039ba <HAL_DMA_IRQHandler+0x8da>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3301      	adds	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d307      	bcc.n	80039d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f2      	bne.n	80039ba <HAL_DMA_IRQHandler+0x8da>
 80039d4:	e000      	b.n	80039d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80039d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2203      	movs	r2, #3
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80039ee:	e003      	b.n	80039f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8272 	beq.w	8003eee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
 8003a12:	e26c      	b.n	8003eee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a43      	ldr	r2, [pc, #268]	; (8003b28 <HAL_DMA_IRQHandler+0xa48>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a42      	ldr	r2, [pc, #264]	; (8003b2c <HAL_DMA_IRQHandler+0xa4c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d01d      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a40      	ldr	r2, [pc, #256]	; (8003b30 <HAL_DMA_IRQHandler+0xa50>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a3f      	ldr	r2, [pc, #252]	; (8003b34 <HAL_DMA_IRQHandler+0xa54>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a3d      	ldr	r2, [pc, #244]	; (8003b38 <HAL_DMA_IRQHandler+0xa58>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a3c      	ldr	r2, [pc, #240]	; (8003b3c <HAL_DMA_IRQHandler+0xa5c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3a      	ldr	r2, [pc, #232]	; (8003b40 <HAL_DMA_IRQHandler+0xa60>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a39      	ldr	r2, [pc, #228]	; (8003b44 <HAL_DMA_IRQHandler+0xa64>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d101      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x988>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_DMA_IRQHandler+0x98a>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 823f 	beq.w	8003eee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	2204      	movs	r2, #4
 8003a82:	409a      	lsls	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80cd 	beq.w	8003c28 <HAL_DMA_IRQHandler+0xb48>
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80c7 	beq.w	8003c28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d049      	beq.n	8003b48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8210 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ad0:	e20a      	b.n	8003ee8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8206 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ae4:	e200      	b.n	8003ee8 <HAL_DMA_IRQHandler+0xe08>
 8003ae6:	bf00      	nop
 8003ae8:	40020010 	.word	0x40020010
 8003aec:	40020028 	.word	0x40020028
 8003af0:	40020040 	.word	0x40020040
 8003af4:	40020058 	.word	0x40020058
 8003af8:	40020070 	.word	0x40020070
 8003afc:	40020088 	.word	0x40020088
 8003b00:	400200a0 	.word	0x400200a0
 8003b04:	400200b8 	.word	0x400200b8
 8003b08:	40020410 	.word	0x40020410
 8003b0c:	40020428 	.word	0x40020428
 8003b10:	40020440 	.word	0x40020440
 8003b14:	40020458 	.word	0x40020458
 8003b18:	40020470 	.word	0x40020470
 8003b1c:	40020488 	.word	0x40020488
 8003b20:	400204a0 	.word	0x400204a0
 8003b24:	400204b8 	.word	0x400204b8
 8003b28:	58025408 	.word	0x58025408
 8003b2c:	5802541c 	.word	0x5802541c
 8003b30:	58025430 	.word	0x58025430
 8003b34:	58025444 	.word	0x58025444
 8003b38:	58025458 	.word	0x58025458
 8003b3c:	5802546c 	.word	0x5802546c
 8003b40:	58025480 	.word	0x58025480
 8003b44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d160      	bne.n	8003c14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a7f      	ldr	r2, [pc, #508]	; (8003d54 <HAL_DMA_IRQHandler+0xc74>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d04a      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a7d      	ldr	r2, [pc, #500]	; (8003d58 <HAL_DMA_IRQHandler+0xc78>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d045      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a7c      	ldr	r2, [pc, #496]	; (8003d5c <HAL_DMA_IRQHandler+0xc7c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d040      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a7a      	ldr	r2, [pc, #488]	; (8003d60 <HAL_DMA_IRQHandler+0xc80>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d03b      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a79      	ldr	r2, [pc, #484]	; (8003d64 <HAL_DMA_IRQHandler+0xc84>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d036      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a77      	ldr	r2, [pc, #476]	; (8003d68 <HAL_DMA_IRQHandler+0xc88>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d031      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a76      	ldr	r2, [pc, #472]	; (8003d6c <HAL_DMA_IRQHandler+0xc8c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d02c      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a74      	ldr	r2, [pc, #464]	; (8003d70 <HAL_DMA_IRQHandler+0xc90>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d027      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a73      	ldr	r2, [pc, #460]	; (8003d74 <HAL_DMA_IRQHandler+0xc94>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a71      	ldr	r2, [pc, #452]	; (8003d78 <HAL_DMA_IRQHandler+0xc98>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a70      	ldr	r2, [pc, #448]	; (8003d7c <HAL_DMA_IRQHandler+0xc9c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a6e      	ldr	r2, [pc, #440]	; (8003d80 <HAL_DMA_IRQHandler+0xca0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6d      	ldr	r2, [pc, #436]	; (8003d84 <HAL_DMA_IRQHandler+0xca4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a6b      	ldr	r2, [pc, #428]	; (8003d88 <HAL_DMA_IRQHandler+0xca8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a6a      	ldr	r2, [pc, #424]	; (8003d8c <HAL_DMA_IRQHandler+0xcac>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a68      	ldr	r2, [pc, #416]	; (8003d90 <HAL_DMA_IRQHandler+0xcb0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d108      	bne.n	8003c04 <HAL_DMA_IRQHandler+0xb24>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0208 	bic.w	r2, r2, #8
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e007      	b.n	8003c14 <HAL_DMA_IRQHandler+0xb34>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8165 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c26:	e15f      	b.n	8003ee8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	2202      	movs	r2, #2
 8003c32:	409a      	lsls	r2, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80c5 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0xce8>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80bf 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4e:	f003 031f 	and.w	r3, r3, #31
 8003c52:	2202      	movs	r2, #2
 8003c54:	409a      	lsls	r2, r3
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d018      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 813a 	beq.w	8003eec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c80:	e134      	b.n	8003eec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8130 	beq.w	8003eec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c94:	e12a      	b.n	8003eec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f040 8089 	bne.w	8003db4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a2b      	ldr	r2, [pc, #172]	; (8003d54 <HAL_DMA_IRQHandler+0xc74>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d04a      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a29      	ldr	r2, [pc, #164]	; (8003d58 <HAL_DMA_IRQHandler+0xc78>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d045      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a28      	ldr	r2, [pc, #160]	; (8003d5c <HAL_DMA_IRQHandler+0xc7c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d040      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a26      	ldr	r2, [pc, #152]	; (8003d60 <HAL_DMA_IRQHandler+0xc80>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d03b      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a25      	ldr	r2, [pc, #148]	; (8003d64 <HAL_DMA_IRQHandler+0xc84>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d036      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <HAL_DMA_IRQHandler+0xc88>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d031      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <HAL_DMA_IRQHandler+0xc8c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d02c      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a20      	ldr	r2, [pc, #128]	; (8003d70 <HAL_DMA_IRQHandler+0xc90>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d027      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1f      	ldr	r2, [pc, #124]	; (8003d74 <HAL_DMA_IRQHandler+0xc94>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d022      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_DMA_IRQHandler+0xc98>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01d      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1c      	ldr	r2, [pc, #112]	; (8003d7c <HAL_DMA_IRQHandler+0xc9c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d018      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <HAL_DMA_IRQHandler+0xca0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a19      	ldr	r2, [pc, #100]	; (8003d84 <HAL_DMA_IRQHandler+0xca4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <HAL_DMA_IRQHandler+0xca8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <HAL_DMA_IRQHandler+0xcac>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a14      	ldr	r2, [pc, #80]	; (8003d90 <HAL_DMA_IRQHandler+0xcb0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d128      	bne.n	8003d94 <HAL_DMA_IRQHandler+0xcb4>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0214 	bic.w	r2, r2, #20
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e027      	b.n	8003da4 <HAL_DMA_IRQHandler+0xcc4>
 8003d54:	40020010 	.word	0x40020010
 8003d58:	40020028 	.word	0x40020028
 8003d5c:	40020040 	.word	0x40020040
 8003d60:	40020058 	.word	0x40020058
 8003d64:	40020070 	.word	0x40020070
 8003d68:	40020088 	.word	0x40020088
 8003d6c:	400200a0 	.word	0x400200a0
 8003d70:	400200b8 	.word	0x400200b8
 8003d74:	40020410 	.word	0x40020410
 8003d78:	40020428 	.word	0x40020428
 8003d7c:	40020440 	.word	0x40020440
 8003d80:	40020458 	.word	0x40020458
 8003d84:	40020470 	.word	0x40020470
 8003d88:	40020488 	.word	0x40020488
 8003d8c:	400204a0 	.word	0x400204a0
 8003d90:	400204b8 	.word	0x400204b8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 020a 	bic.w	r2, r2, #10
 8003da2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8097 	beq.w	8003eec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc6:	e091      	b.n	8003eec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8088 	beq.w	8003eee <HAL_DMA_IRQHandler+0xe0e>
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8082 	beq.w	8003eee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a41      	ldr	r2, [pc, #260]	; (8003ef4 <HAL_DMA_IRQHandler+0xe14>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d04a      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a3f      	ldr	r2, [pc, #252]	; (8003ef8 <HAL_DMA_IRQHandler+0xe18>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d045      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a3e      	ldr	r2, [pc, #248]	; (8003efc <HAL_DMA_IRQHandler+0xe1c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d040      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3c      	ldr	r2, [pc, #240]	; (8003f00 <HAL_DMA_IRQHandler+0xe20>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d03b      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a3b      	ldr	r2, [pc, #236]	; (8003f04 <HAL_DMA_IRQHandler+0xe24>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d036      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a39      	ldr	r2, [pc, #228]	; (8003f08 <HAL_DMA_IRQHandler+0xe28>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d031      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a38      	ldr	r2, [pc, #224]	; (8003f0c <HAL_DMA_IRQHandler+0xe2c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d02c      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a36      	ldr	r2, [pc, #216]	; (8003f10 <HAL_DMA_IRQHandler+0xe30>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d027      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a35      	ldr	r2, [pc, #212]	; (8003f14 <HAL_DMA_IRQHandler+0xe34>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d022      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a33      	ldr	r2, [pc, #204]	; (8003f18 <HAL_DMA_IRQHandler+0xe38>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01d      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a32      	ldr	r2, [pc, #200]	; (8003f1c <HAL_DMA_IRQHandler+0xe3c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d018      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a30      	ldr	r2, [pc, #192]	; (8003f20 <HAL_DMA_IRQHandler+0xe40>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2f      	ldr	r2, [pc, #188]	; (8003f24 <HAL_DMA_IRQHandler+0xe44>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00e      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a2d      	ldr	r2, [pc, #180]	; (8003f28 <HAL_DMA_IRQHandler+0xe48>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <HAL_DMA_IRQHandler+0xe4c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a2a      	ldr	r2, [pc, #168]	; (8003f30 <HAL_DMA_IRQHandler+0xe50>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d108      	bne.n	8003e9c <HAL_DMA_IRQHandler+0xdbc>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 021c 	bic.w	r2, r2, #28
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e007      	b.n	8003eac <HAL_DMA_IRQHandler+0xdcc>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 020e 	bic.w	r2, r2, #14
 8003eaa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
 8003ee2:	e004      	b.n	8003eee <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ee4:	bf00      	nop
 8003ee6:	e002      	b.n	8003eee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee8:	bf00      	nop
 8003eea:	e000      	b.n	8003eee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003eee:	3728      	adds	r7, #40	; 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40020010 	.word	0x40020010
 8003ef8:	40020028 	.word	0x40020028
 8003efc:	40020040 	.word	0x40020040
 8003f00:	40020058 	.word	0x40020058
 8003f04:	40020070 	.word	0x40020070
 8003f08:	40020088 	.word	0x40020088
 8003f0c:	400200a0 	.word	0x400200a0
 8003f10:	400200b8 	.word	0x400200b8
 8003f14:	40020410 	.word	0x40020410
 8003f18:	40020428 	.word	0x40020428
 8003f1c:	40020440 	.word	0x40020440
 8003f20:	40020458 	.word	0x40020458
 8003f24:	40020470 	.word	0x40020470
 8003f28:	40020488 	.word	0x40020488
 8003f2c:	400204a0 	.word	0x400204a0
 8003f30:	400204b8 	.word	0x400204b8

08003f34 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a7f      	ldr	r2, [pc, #508]	; (8004150 <DMA_SetConfig+0x21c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d072      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a7d      	ldr	r2, [pc, #500]	; (8004154 <DMA_SetConfig+0x220>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d06d      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a7c      	ldr	r2, [pc, #496]	; (8004158 <DMA_SetConfig+0x224>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d068      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a7a      	ldr	r2, [pc, #488]	; (800415c <DMA_SetConfig+0x228>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d063      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a79      	ldr	r2, [pc, #484]	; (8004160 <DMA_SetConfig+0x22c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d05e      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a77      	ldr	r2, [pc, #476]	; (8004164 <DMA_SetConfig+0x230>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d059      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a76      	ldr	r2, [pc, #472]	; (8004168 <DMA_SetConfig+0x234>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d054      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a74      	ldr	r2, [pc, #464]	; (800416c <DMA_SetConfig+0x238>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d04f      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a73      	ldr	r2, [pc, #460]	; (8004170 <DMA_SetConfig+0x23c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d04a      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a71      	ldr	r2, [pc, #452]	; (8004174 <DMA_SetConfig+0x240>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d045      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a70      	ldr	r2, [pc, #448]	; (8004178 <DMA_SetConfig+0x244>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d040      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a6e      	ldr	r2, [pc, #440]	; (800417c <DMA_SetConfig+0x248>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d03b      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a6d      	ldr	r2, [pc, #436]	; (8004180 <DMA_SetConfig+0x24c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d036      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a6b      	ldr	r2, [pc, #428]	; (8004184 <DMA_SetConfig+0x250>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d031      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6a      	ldr	r2, [pc, #424]	; (8004188 <DMA_SetConfig+0x254>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d02c      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a68      	ldr	r2, [pc, #416]	; (800418c <DMA_SetConfig+0x258>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d027      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a67      	ldr	r2, [pc, #412]	; (8004190 <DMA_SetConfig+0x25c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d022      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a65      	ldr	r2, [pc, #404]	; (8004194 <DMA_SetConfig+0x260>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01d      	beq.n	800403e <DMA_SetConfig+0x10a>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a64      	ldr	r2, [pc, #400]	; (8004198 <DMA_SetConfig+0x264>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d018      	beq.n	800403e <DMA_SetConfig+0x10a>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a62      	ldr	r2, [pc, #392]	; (800419c <DMA_SetConfig+0x268>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <DMA_SetConfig+0x10a>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a61      	ldr	r2, [pc, #388]	; (80041a0 <DMA_SetConfig+0x26c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00e      	beq.n	800403e <DMA_SetConfig+0x10a>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a5f      	ldr	r2, [pc, #380]	; (80041a4 <DMA_SetConfig+0x270>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <DMA_SetConfig+0x10a>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a5e      	ldr	r2, [pc, #376]	; (80041a8 <DMA_SetConfig+0x274>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <DMA_SetConfig+0x10a>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a5c      	ldr	r2, [pc, #368]	; (80041ac <DMA_SetConfig+0x278>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d101      	bne.n	8004042 <DMA_SetConfig+0x10e>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <DMA_SetConfig+0x110>
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004050:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004062:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a39      	ldr	r2, [pc, #228]	; (8004150 <DMA_SetConfig+0x21c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d04a      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a38      	ldr	r2, [pc, #224]	; (8004154 <DMA_SetConfig+0x220>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d045      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a36      	ldr	r2, [pc, #216]	; (8004158 <DMA_SetConfig+0x224>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d040      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a35      	ldr	r2, [pc, #212]	; (800415c <DMA_SetConfig+0x228>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d03b      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a33      	ldr	r2, [pc, #204]	; (8004160 <DMA_SetConfig+0x22c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d036      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a32      	ldr	r2, [pc, #200]	; (8004164 <DMA_SetConfig+0x230>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d031      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a30      	ldr	r2, [pc, #192]	; (8004168 <DMA_SetConfig+0x234>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d02c      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2f      	ldr	r2, [pc, #188]	; (800416c <DMA_SetConfig+0x238>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d027      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2d      	ldr	r2, [pc, #180]	; (8004170 <DMA_SetConfig+0x23c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d022      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2c      	ldr	r2, [pc, #176]	; (8004174 <DMA_SetConfig+0x240>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d01d      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2a      	ldr	r2, [pc, #168]	; (8004178 <DMA_SetConfig+0x244>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d018      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a29      	ldr	r2, [pc, #164]	; (800417c <DMA_SetConfig+0x248>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a27      	ldr	r2, [pc, #156]	; (8004180 <DMA_SetConfig+0x24c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00e      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a26      	ldr	r2, [pc, #152]	; (8004184 <DMA_SetConfig+0x250>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d009      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a24      	ldr	r2, [pc, #144]	; (8004188 <DMA_SetConfig+0x254>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a23      	ldr	r2, [pc, #140]	; (800418c <DMA_SetConfig+0x258>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <DMA_SetConfig+0x1d4>
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <DMA_SetConfig+0x1d6>
 8004108:	2300      	movs	r3, #0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d059      	beq.n	80041c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	223f      	movs	r2, #63	; 0x3f
 8004118:	409a      	lsls	r2, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800412c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d138      	bne.n	80041b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800414e:	e086      	b.n	800425e <DMA_SetConfig+0x32a>
 8004150:	40020010 	.word	0x40020010
 8004154:	40020028 	.word	0x40020028
 8004158:	40020040 	.word	0x40020040
 800415c:	40020058 	.word	0x40020058
 8004160:	40020070 	.word	0x40020070
 8004164:	40020088 	.word	0x40020088
 8004168:	400200a0 	.word	0x400200a0
 800416c:	400200b8 	.word	0x400200b8
 8004170:	40020410 	.word	0x40020410
 8004174:	40020428 	.word	0x40020428
 8004178:	40020440 	.word	0x40020440
 800417c:	40020458 	.word	0x40020458
 8004180:	40020470 	.word	0x40020470
 8004184:	40020488 	.word	0x40020488
 8004188:	400204a0 	.word	0x400204a0
 800418c:	400204b8 	.word	0x400204b8
 8004190:	58025408 	.word	0x58025408
 8004194:	5802541c 	.word	0x5802541c
 8004198:	58025430 	.word	0x58025430
 800419c:	58025444 	.word	0x58025444
 80041a0:	58025458 	.word	0x58025458
 80041a4:	5802546c 	.word	0x5802546c
 80041a8:	58025480 	.word	0x58025480
 80041ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	60da      	str	r2, [r3, #12]
}
 80041c0:	e04d      	b.n	800425e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a29      	ldr	r2, [pc, #164]	; (800426c <DMA_SetConfig+0x338>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d022      	beq.n	8004212 <DMA_SetConfig+0x2de>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a27      	ldr	r2, [pc, #156]	; (8004270 <DMA_SetConfig+0x33c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d01d      	beq.n	8004212 <DMA_SetConfig+0x2de>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a26      	ldr	r2, [pc, #152]	; (8004274 <DMA_SetConfig+0x340>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d018      	beq.n	8004212 <DMA_SetConfig+0x2de>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a24      	ldr	r2, [pc, #144]	; (8004278 <DMA_SetConfig+0x344>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <DMA_SetConfig+0x2de>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a23      	ldr	r2, [pc, #140]	; (800427c <DMA_SetConfig+0x348>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <DMA_SetConfig+0x2de>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a21      	ldr	r2, [pc, #132]	; (8004280 <DMA_SetConfig+0x34c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <DMA_SetConfig+0x2de>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a20      	ldr	r2, [pc, #128]	; (8004284 <DMA_SetConfig+0x350>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <DMA_SetConfig+0x2de>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <DMA_SetConfig+0x354>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <DMA_SetConfig+0x2e2>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <DMA_SetConfig+0x2e4>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d020      	beq.n	800425e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2201      	movs	r2, #1
 8004226:	409a      	lsls	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d108      	bne.n	800424e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	60da      	str	r2, [r3, #12]
}
 800424c:	e007      	b.n	800425e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	60da      	str	r2, [r3, #12]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	58025408 	.word	0x58025408
 8004270:	5802541c 	.word	0x5802541c
 8004274:	58025430 	.word	0x58025430
 8004278:	58025444 	.word	0x58025444
 800427c:	58025458 	.word	0x58025458
 8004280:	5802546c 	.word	0x5802546c
 8004284:	58025480 	.word	0x58025480
 8004288:	58025494 	.word	0x58025494

0800428c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a42      	ldr	r2, [pc, #264]	; (80043a4 <DMA_CalcBaseAndBitshift+0x118>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d04a      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a41      	ldr	r2, [pc, #260]	; (80043a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d045      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a3f      	ldr	r2, [pc, #252]	; (80043ac <DMA_CalcBaseAndBitshift+0x120>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d040      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a3e      	ldr	r2, [pc, #248]	; (80043b0 <DMA_CalcBaseAndBitshift+0x124>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d03b      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a3c      	ldr	r2, [pc, #240]	; (80043b4 <DMA_CalcBaseAndBitshift+0x128>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d036      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a3b      	ldr	r2, [pc, #236]	; (80043b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d031      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a39      	ldr	r2, [pc, #228]	; (80043bc <DMA_CalcBaseAndBitshift+0x130>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d02c      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a38      	ldr	r2, [pc, #224]	; (80043c0 <DMA_CalcBaseAndBitshift+0x134>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d027      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a36      	ldr	r2, [pc, #216]	; (80043c4 <DMA_CalcBaseAndBitshift+0x138>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d022      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a35      	ldr	r2, [pc, #212]	; (80043c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d01d      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a33      	ldr	r2, [pc, #204]	; (80043cc <DMA_CalcBaseAndBitshift+0x140>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a32      	ldr	r2, [pc, #200]	; (80043d0 <DMA_CalcBaseAndBitshift+0x144>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a30      	ldr	r2, [pc, #192]	; (80043d4 <DMA_CalcBaseAndBitshift+0x148>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2f      	ldr	r2, [pc, #188]	; (80043d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a2d      	ldr	r2, [pc, #180]	; (80043dc <DMA_CalcBaseAndBitshift+0x150>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2c      	ldr	r2, [pc, #176]	; (80043e0 <DMA_CalcBaseAndBitshift+0x154>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d101      	bne.n	8004338 <DMA_CalcBaseAndBitshift+0xac>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <DMA_CalcBaseAndBitshift+0xae>
 8004338:	2300      	movs	r3, #0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d024      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	3b10      	subs	r3, #16
 8004346:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <DMA_CalcBaseAndBitshift+0x158>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004358:	5cd3      	ldrb	r3, [r2, r3]
 800435a:	461a      	mov	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d908      	bls.n	8004378 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	4b1f      	ldr	r3, [pc, #124]	; (80043ec <DMA_CalcBaseAndBitshift+0x160>)
 800436e:	4013      	ands	r3, r2
 8004370:	1d1a      	adds	r2, r3, #4
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	659a      	str	r2, [r3, #88]	; 0x58
 8004376:	e00d      	b.n	8004394 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <DMA_CalcBaseAndBitshift+0x160>)
 8004380:	4013      	ands	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6593      	str	r3, [r2, #88]	; 0x58
 8004386:	e005      	b.n	8004394 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40020010 	.word	0x40020010
 80043a8:	40020028 	.word	0x40020028
 80043ac:	40020040 	.word	0x40020040
 80043b0:	40020058 	.word	0x40020058
 80043b4:	40020070 	.word	0x40020070
 80043b8:	40020088 	.word	0x40020088
 80043bc:	400200a0 	.word	0x400200a0
 80043c0:	400200b8 	.word	0x400200b8
 80043c4:	40020410 	.word	0x40020410
 80043c8:	40020428 	.word	0x40020428
 80043cc:	40020440 	.word	0x40020440
 80043d0:	40020458 	.word	0x40020458
 80043d4:	40020470 	.word	0x40020470
 80043d8:	40020488 	.word	0x40020488
 80043dc:	400204a0 	.word	0x400204a0
 80043e0:	400204b8 	.word	0x400204b8
 80043e4:	aaaaaaab 	.word	0xaaaaaaab
 80043e8:	0800a0d8 	.word	0x0800a0d8
 80043ec:	fffffc00 	.word	0xfffffc00

080043f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d120      	bne.n	8004446 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	2b03      	cmp	r3, #3
 800440a:	d858      	bhi.n	80044be <DMA_CheckFifoParam+0xce>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <DMA_CheckFifoParam+0x24>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004425 	.word	0x08004425
 8004418:	08004437 	.word	0x08004437
 800441c:	08004425 	.word	0x08004425
 8004420:	080044bf 	.word	0x080044bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d048      	beq.n	80044c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004434:	e045      	b.n	80044c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800443e:	d142      	bne.n	80044c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004444:	e03f      	b.n	80044c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800444e:	d123      	bne.n	8004498 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	2b03      	cmp	r3, #3
 8004456:	d838      	bhi.n	80044ca <DMA_CheckFifoParam+0xda>
 8004458:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <DMA_CheckFifoParam+0x70>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004471 	.word	0x08004471
 8004464:	08004477 	.word	0x08004477
 8004468:	08004471 	.word	0x08004471
 800446c:	08004489 	.word	0x08004489
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
        break;
 8004474:	e030      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d025      	beq.n	80044ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004486:	e022      	b.n	80044ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004490:	d11f      	bne.n	80044d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004496:	e01c      	b.n	80044d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	2b02      	cmp	r3, #2
 800449e:	d902      	bls.n	80044a6 <DMA_CheckFifoParam+0xb6>
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d003      	beq.n	80044ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80044a4:	e018      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
        break;
 80044aa:	e015      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00e      	beq.n	80044d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
    break;
 80044bc:	e00b      	b.n	80044d6 <DMA_CheckFifoParam+0xe6>
        break;
 80044be:	bf00      	nop
 80044c0:	e00a      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044c2:	bf00      	nop
 80044c4:	e008      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044c6:	bf00      	nop
 80044c8:	e006      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044ca:	bf00      	nop
 80044cc:	e004      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
    break;
 80044d6:	bf00      	nop
    }
  }

  return status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop

080044e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a38      	ldr	r2, [pc, #224]	; (80045dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d022      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a36      	ldr	r2, [pc, #216]	; (80045e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01d      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a35      	ldr	r2, [pc, #212]	; (80045e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a33      	ldr	r2, [pc, #204]	; (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a32      	ldr	r2, [pc, #200]	; (80045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a30      	ldr	r2, [pc, #192]	; (80045f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a2d      	ldr	r2, [pc, #180]	; (80045f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d101      	bne.n	800454a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800454a:	2300      	movs	r3, #0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01a      	beq.n	8004586 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	3b08      	subs	r3, #8
 8004558:	4a28      	ldr	r2, [pc, #160]	; (80045fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4b26      	ldr	r3, [pc, #152]	; (8004600 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	461a      	mov	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a24      	ldr	r2, [pc, #144]	; (8004604 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004574:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2201      	movs	r2, #1
 800457e:	409a      	lsls	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004584:	e024      	b.n	80045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	3b10      	subs	r3, #16
 800458e:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4a1c      	ldr	r2, [pc, #112]	; (800460c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d806      	bhi.n	80045ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d902      	bls.n	80045ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3308      	adds	r3, #8
 80045ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4b18      	ldr	r3, [pc, #96]	; (8004614 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	461a      	mov	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a16      	ldr	r2, [pc, #88]	; (8004618 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80045c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2201      	movs	r2, #1
 80045ca:	409a      	lsls	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	58025408 	.word	0x58025408
 80045e0:	5802541c 	.word	0x5802541c
 80045e4:	58025430 	.word	0x58025430
 80045e8:	58025444 	.word	0x58025444
 80045ec:	58025458 	.word	0x58025458
 80045f0:	5802546c 	.word	0x5802546c
 80045f4:	58025480 	.word	0x58025480
 80045f8:	58025494 	.word	0x58025494
 80045fc:	cccccccd 	.word	0xcccccccd
 8004600:	16009600 	.word	0x16009600
 8004604:	58025880 	.word	0x58025880
 8004608:	aaaaaaab 	.word	0xaaaaaaab
 800460c:	400204b8 	.word	0x400204b8
 8004610:	4002040f 	.word	0x4002040f
 8004614:	10008200 	.word	0x10008200
 8004618:	40020880 	.word	0x40020880

0800461c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d04a      	beq.n	80046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d847      	bhi.n	80046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a25      	ldr	r2, [pc, #148]	; (80046d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a24      	ldr	r2, [pc, #144]	; (80046d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d01d      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a21      	ldr	r2, [pc, #132]	; (80046e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1f      	ldr	r2, [pc, #124]	; (80046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800468c:	2300      	movs	r3, #0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4b17      	ldr	r3, [pc, #92]	; (80046f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	461a      	mov	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80046a4:	671a      	str	r2, [r3, #112]	; 0x70
 80046a6:	e009      	b.n	80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	461a      	mov	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a11      	ldr	r2, [pc, #68]	; (8004700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80046ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3b01      	subs	r3, #1
 80046c0:	2201      	movs	r2, #1
 80046c2:	409a      	lsls	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	58025408 	.word	0x58025408
 80046d8:	5802541c 	.word	0x5802541c
 80046dc:	58025430 	.word	0x58025430
 80046e0:	58025444 	.word	0x58025444
 80046e4:	58025458 	.word	0x58025458
 80046e8:	5802546c 	.word	0x5802546c
 80046ec:	58025480 	.word	0x58025480
 80046f0:	58025494 	.word	0x58025494
 80046f4:	1600963f 	.word	0x1600963f
 80046f8:	58025940 	.word	0x58025940
 80046fc:	1000823f 	.word	0x1000823f
 8004700:	40020940 	.word	0x40020940

08004704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	; 0x24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004712:	4b86      	ldr	r3, [pc, #536]	; (800492c <HAL_GPIO_Init+0x228>)
 8004714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004716:	e18c      	b.n	8004a32 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	2101      	movs	r1, #1
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	fa01 f303 	lsl.w	r3, r1, r3
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 817e 	beq.w	8004a2c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	2b01      	cmp	r3, #1
 800473a:	d005      	beq.n	8004748 <HAL_GPIO_Init+0x44>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d130      	bne.n	80047aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	2203      	movs	r2, #3
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800477e:	2201      	movs	r2, #1
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4013      	ands	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	f003 0201 	and.w	r2, r3, #1
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d017      	beq.n	80047e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	2203      	movs	r2, #3
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d123      	bne.n	800483a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	08da      	lsrs	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3208      	adds	r2, #8
 80047fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	220f      	movs	r2, #15
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4313      	orrs	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	08da      	lsrs	r2, r3, #3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3208      	adds	r2, #8
 8004834:	69b9      	ldr	r1, [r7, #24]
 8004836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	2203      	movs	r2, #3
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4013      	ands	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f003 0203 	and.w	r2, r3, #3
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80d8 	beq.w	8004a2c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800487c:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <HAL_GPIO_Init+0x22c>)
 800487e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004882:	4a2b      	ldr	r2, [pc, #172]	; (8004930 <HAL_GPIO_Init+0x22c>)
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800488c:	4b28      	ldr	r3, [pc, #160]	; (8004930 <HAL_GPIO_Init+0x22c>)
 800488e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800489a:	4a26      	ldr	r2, [pc, #152]	; (8004934 <HAL_GPIO_Init+0x230>)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	3302      	adds	r3, #2
 80048a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	220f      	movs	r2, #15
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_GPIO_Init+0x234>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d04a      	beq.n	800495c <HAL_GPIO_Init+0x258>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1c      	ldr	r2, [pc, #112]	; (800493c <HAL_GPIO_Init+0x238>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d02b      	beq.n	8004926 <HAL_GPIO_Init+0x222>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <HAL_GPIO_Init+0x23c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d025      	beq.n	8004922 <HAL_GPIO_Init+0x21e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <HAL_GPIO_Init+0x240>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01f      	beq.n	800491e <HAL_GPIO_Init+0x21a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a19      	ldr	r2, [pc, #100]	; (8004948 <HAL_GPIO_Init+0x244>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d019      	beq.n	800491a <HAL_GPIO_Init+0x216>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <HAL_GPIO_Init+0x248>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_GPIO_Init+0x212>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a17      	ldr	r2, [pc, #92]	; (8004950 <HAL_GPIO_Init+0x24c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00d      	beq.n	8004912 <HAL_GPIO_Init+0x20e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a16      	ldr	r2, [pc, #88]	; (8004954 <HAL_GPIO_Init+0x250>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <HAL_GPIO_Init+0x20a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a15      	ldr	r2, [pc, #84]	; (8004958 <HAL_GPIO_Init+0x254>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d101      	bne.n	800490a <HAL_GPIO_Init+0x206>
 8004906:	2309      	movs	r3, #9
 8004908:	e029      	b.n	800495e <HAL_GPIO_Init+0x25a>
 800490a:	230a      	movs	r3, #10
 800490c:	e027      	b.n	800495e <HAL_GPIO_Init+0x25a>
 800490e:	2307      	movs	r3, #7
 8004910:	e025      	b.n	800495e <HAL_GPIO_Init+0x25a>
 8004912:	2306      	movs	r3, #6
 8004914:	e023      	b.n	800495e <HAL_GPIO_Init+0x25a>
 8004916:	2305      	movs	r3, #5
 8004918:	e021      	b.n	800495e <HAL_GPIO_Init+0x25a>
 800491a:	2304      	movs	r3, #4
 800491c:	e01f      	b.n	800495e <HAL_GPIO_Init+0x25a>
 800491e:	2303      	movs	r3, #3
 8004920:	e01d      	b.n	800495e <HAL_GPIO_Init+0x25a>
 8004922:	2302      	movs	r3, #2
 8004924:	e01b      	b.n	800495e <HAL_GPIO_Init+0x25a>
 8004926:	2301      	movs	r3, #1
 8004928:	e019      	b.n	800495e <HAL_GPIO_Init+0x25a>
 800492a:	bf00      	nop
 800492c:	58000080 	.word	0x58000080
 8004930:	58024400 	.word	0x58024400
 8004934:	58000400 	.word	0x58000400
 8004938:	58020000 	.word	0x58020000
 800493c:	58020400 	.word	0x58020400
 8004940:	58020800 	.word	0x58020800
 8004944:	58020c00 	.word	0x58020c00
 8004948:	58021000 	.word	0x58021000
 800494c:	58021400 	.word	0x58021400
 8004950:	58021800 	.word	0x58021800
 8004954:	58021c00 	.word	0x58021c00
 8004958:	58022400 	.word	0x58022400
 800495c:	2300      	movs	r3, #0
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	f002 0203 	and.w	r2, r2, #3
 8004964:	0092      	lsls	r2, r2, #2
 8004966:	4093      	lsls	r3, r2
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800496e:	4938      	ldr	r1, [pc, #224]	; (8004a50 <HAL_GPIO_Init+0x34c>)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	089b      	lsrs	r3, r3, #2
 8004974:	3302      	adds	r3, #2
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800497c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	43db      	mvns	r3, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4013      	ands	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4013      	ands	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4013      	ands	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f47f ae6b 	bne.w	8004718 <HAL_GPIO_Init+0x14>
  }
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	3724      	adds	r7, #36	; 0x24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	58000400 	.word	0x58000400

08004a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	807b      	strh	r3, [r7, #2]
 8004a60:	4613      	mov	r3, r2
 8004a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a64:	787b      	ldrb	r3, [r7, #1]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a6a:	887a      	ldrh	r2, [r7, #2]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a70:	e003      	b.n	8004a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a72:	887b      	ldrh	r3, [r7, #2]
 8004a74:	041a      	lsls	r2, r3, #16
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	619a      	str	r2, [r3, #24]
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a98:	887a      	ldrh	r2, [r7, #2]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	041a      	lsls	r2, r3, #16
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	43d9      	mvns	r1, r3
 8004aa4:	887b      	ldrh	r3, [r7, #2]
 8004aa6:	400b      	ands	r3, r1
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	619a      	str	r2, [r3, #24]
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004ac4:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_PWREx_ConfigSupply+0x70>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d00a      	beq.n	8004ae6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ad0:	4b16      	ldr	r3, [pc, #88]	; (8004b2c <HAL_PWREx_ConfigSupply+0x70>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d001      	beq.n	8004ae2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e01f      	b.n	8004b22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e01d      	b.n	8004b22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ae6:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <HAL_PWREx_ConfigSupply+0x70>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f023 0207 	bic.w	r2, r3, #7
 8004aee:	490f      	ldr	r1, [pc, #60]	; (8004b2c <HAL_PWREx_ConfigSupply+0x70>)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004af6:	f7fc fc8d 	bl	8001414 <HAL_GetTick>
 8004afa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004afc:	e009      	b.n	8004b12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004afe:	f7fc fc89 	bl	8001414 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b0c:	d901      	bls.n	8004b12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e007      	b.n	8004b22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_PWREx_ConfigSupply+0x70>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b1e:	d1ee      	bne.n	8004afe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	58024800 	.word	0x58024800

08004b30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08c      	sub	sp, #48	; 0x30
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e39d      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 8087 	beq.w	8004c5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b50:	4b88      	ldr	r3, [pc, #544]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b5a:	4b86      	ldr	r3, [pc, #536]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	2b10      	cmp	r3, #16
 8004b64:	d007      	beq.n	8004b76 <HAL_RCC_OscConfig+0x46>
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	2b18      	cmp	r3, #24
 8004b6a:	d110      	bne.n	8004b8e <HAL_RCC_OscConfig+0x5e>
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d10b      	bne.n	8004b8e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b76:	4b7f      	ldr	r3, [pc, #508]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d06c      	beq.n	8004c5c <HAL_RCC_OscConfig+0x12c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d168      	bne.n	8004c5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e377      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b96:	d106      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x76>
 8004b98:	4b76      	ldr	r3, [pc, #472]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a75      	ldr	r2, [pc, #468]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	e02e      	b.n	8004c04 <HAL_RCC_OscConfig+0xd4>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x98>
 8004bae:	4b71      	ldr	r3, [pc, #452]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a70      	ldr	r2, [pc, #448]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	4b6e      	ldr	r3, [pc, #440]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a6d      	ldr	r2, [pc, #436]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	e01d      	b.n	8004c04 <HAL_RCC_OscConfig+0xd4>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd0:	d10c      	bne.n	8004bec <HAL_RCC_OscConfig+0xbc>
 8004bd2:	4b68      	ldr	r3, [pc, #416]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a67      	ldr	r2, [pc, #412]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a64      	ldr	r2, [pc, #400]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	e00b      	b.n	8004c04 <HAL_RCC_OscConfig+0xd4>
 8004bec:	4b61      	ldr	r3, [pc, #388]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a60      	ldr	r2, [pc, #384]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	4b5e      	ldr	r3, [pc, #376]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a5d      	ldr	r2, [pc, #372]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d013      	beq.n	8004c34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fc fc02 	bl	8001414 <HAL_GetTick>
 8004c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c14:	f7fc fbfe 	bl	8001414 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	; 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e32b      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c26:	4b53      	ldr	r3, [pc, #332]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0xe4>
 8004c32:	e014      	b.n	8004c5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fc fbee 	bl	8001414 <HAL_GetTick>
 8004c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c3c:	f7fc fbea 	bl	8001414 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	; 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e317      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c4e:	4b49      	ldr	r3, [pc, #292]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x10c>
 8004c5a:	e000      	b.n	8004c5e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 808c 	beq.w	8004d84 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c6c:	4b41      	ldr	r3, [pc, #260]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c76:	4b3f      	ldr	r3, [pc, #252]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_RCC_OscConfig+0x162>
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	2b18      	cmp	r3, #24
 8004c86:	d137      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x1c8>
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d132      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c92:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_RCC_OscConfig+0x17a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e2e9      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004caa:	4b32      	ldr	r3, [pc, #200]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 0219 	bic.w	r2, r3, #25
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	492f      	ldr	r1, [pc, #188]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cbc:	f7fc fbaa 	bl	8001414 <HAL_GetTick>
 8004cc0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cc4:	f7fc fba6 	bl	8001414 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e2d3      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cd6:	4b27      	ldr	r3, [pc, #156]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce2:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	061b      	lsls	r3, r3, #24
 8004cf0:	4920      	ldr	r1, [pc, #128]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cf6:	e045      	b.n	8004d84 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d026      	beq.n	8004d4e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d00:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f023 0219 	bic.w	r2, r3, #25
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4919      	ldr	r1, [pc, #100]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7fc fb7f 	bl	8001414 <HAL_GetTick>
 8004d16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1a:	f7fc fb7b 	bl	8001414 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e2a8      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d2c:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d38:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	490b      	ldr	r1, [pc, #44]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
 8004d4c:	e01a      	b.n	8004d84 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a08      	ldr	r2, [pc, #32]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004d54:	f023 0301 	bic.w	r3, r3, #1
 8004d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fc fb5b 	bl	8001414 <HAL_GetTick>
 8004d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d60:	e00a      	b.n	8004d78 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d62:	f7fc fb57 	bl	8001414 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d903      	bls.n	8004d78 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e284      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
 8004d74:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d78:	4b96      	ldr	r3, [pc, #600]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1ee      	bne.n	8004d62 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d06a      	beq.n	8004e66 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d90:	4b90      	ldr	r3, [pc, #576]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d98:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d9a:	4b8e      	ldr	r3, [pc, #568]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d007      	beq.n	8004db6 <HAL_RCC_OscConfig+0x286>
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b18      	cmp	r3, #24
 8004daa:	d11b      	bne.n	8004de4 <HAL_RCC_OscConfig+0x2b4>
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d116      	bne.n	8004de4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004db6:	4b87      	ldr	r3, [pc, #540]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_RCC_OscConfig+0x29e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d001      	beq.n	8004dce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e257      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dce:	4b81      	ldr	r3, [pc, #516]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	061b      	lsls	r3, r3, #24
 8004ddc:	497d      	ldr	r1, [pc, #500]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004de2:	e040      	b.n	8004e66 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d023      	beq.n	8004e34 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004dec:	4b79      	ldr	r3, [pc, #484]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a78      	ldr	r2, [pc, #480]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fc fb0c 	bl	8001414 <HAL_GetTick>
 8004dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e00:	f7fc fb08 	bl	8001414 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e235      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e12:	4b70      	ldr	r3, [pc, #448]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e1e:	4b6d      	ldr	r3, [pc, #436]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	061b      	lsls	r3, r3, #24
 8004e2c:	4969      	ldr	r1, [pc, #420]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60cb      	str	r3, [r1, #12]
 8004e32:	e018      	b.n	8004e66 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e34:	4b67      	ldr	r3, [pc, #412]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a66      	ldr	r2, [pc, #408]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fc fae8 	bl	8001414 <HAL_GetTick>
 8004e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e48:	f7fc fae4 	bl	8001414 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e211      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e5a:	4b5e      	ldr	r3, [pc, #376]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d036      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d019      	beq.n	8004eae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7a:	4b56      	ldr	r3, [pc, #344]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7e:	4a55      	ldr	r2, [pc, #340]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e86:	f7fc fac5 	bl	8001414 <HAL_GetTick>
 8004e8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8e:	f7fc fac1 	bl	8001414 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e1ee      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ea0:	4b4c      	ldr	r3, [pc, #304]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x35e>
 8004eac:	e018      	b.n	8004ee0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eae:	4b49      	ldr	r3, [pc, #292]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb2:	4a48      	ldr	r2, [pc, #288]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eba:	f7fc faab 	bl	8001414 <HAL_GetTick>
 8004ebe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec2:	f7fc faa7 	bl	8001414 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e1d4      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ed4:	4b3f      	ldr	r3, [pc, #252]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f0      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d036      	beq.n	8004f5a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d019      	beq.n	8004f28 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ef4:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a36      	ldr	r2, [pc, #216]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004efa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004efe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f00:	f7fc fa88 	bl	8001414 <HAL_GetTick>
 8004f04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f08:	f7fc fa84 	bl	8001414 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e1b1      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f1a:	4b2e      	ldr	r3, [pc, #184]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0x3d8>
 8004f26:	e018      	b.n	8004f5a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f28:	4b2a      	ldr	r3, [pc, #168]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a29      	ldr	r2, [pc, #164]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f34:	f7fc fa6e 	bl	8001414 <HAL_GetTick>
 8004f38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f3c:	f7fc fa6a 	bl	8001414 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e197      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f4e:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8086 	beq.w	8005074 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f68:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <HAL_RCC_OscConfig+0x4a8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1a      	ldr	r2, [pc, #104]	; (8004fd8 <HAL_RCC_OscConfig+0x4a8>)
 8004f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f74:	f7fc fa4e 	bl	8001414 <HAL_GetTick>
 8004f78:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f7c:	f7fc fa4a 	bl	8001414 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b64      	cmp	r3, #100	; 0x64
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e177      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f8e:	4b12      	ldr	r3, [pc, #72]	; (8004fd8 <HAL_RCC_OscConfig+0x4a8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d106      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x480>
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	4a0b      	ldr	r2, [pc, #44]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	6713      	str	r3, [r2, #112]	; 0x70
 8004fae:	e032      	b.n	8005016 <HAL_RCC_OscConfig+0x4e6>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d111      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4ac>
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	4a05      	ldr	r2, [pc, #20]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc8:	4a02      	ldr	r2, [pc, #8]	; (8004fd4 <HAL_RCC_OscConfig+0x4a4>)
 8004fca:	f023 0304 	bic.w	r3, r3, #4
 8004fce:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd0:	e021      	b.n	8005016 <HAL_RCC_OscConfig+0x4e6>
 8004fd2:	bf00      	nop
 8004fd4:	58024400 	.word	0x58024400
 8004fd8:	58024800 	.word	0x58024800
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b05      	cmp	r3, #5
 8004fe2:	d10c      	bne.n	8004ffe <HAL_RCC_OscConfig+0x4ce>
 8004fe4:	4b83      	ldr	r3, [pc, #524]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	4a82      	ldr	r2, [pc, #520]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8004fea:	f043 0304 	orr.w	r3, r3, #4
 8004fee:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff0:	4b80      	ldr	r3, [pc, #512]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	4a7f      	ldr	r2, [pc, #508]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8004ffc:	e00b      	b.n	8005016 <HAL_RCC_OscConfig+0x4e6>
 8004ffe:	4b7d      	ldr	r3, [pc, #500]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	4a7c      	ldr	r2, [pc, #496]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005004:	f023 0301 	bic.w	r3, r3, #1
 8005008:	6713      	str	r3, [r2, #112]	; 0x70
 800500a:	4b7a      	ldr	r3, [pc, #488]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	4a79      	ldr	r2, [pc, #484]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005010:	f023 0304 	bic.w	r3, r3, #4
 8005014:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d015      	beq.n	800504a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501e:	f7fc f9f9 	bl	8001414 <HAL_GetTick>
 8005022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005024:	e00a      	b.n	800503c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005026:	f7fc f9f5 	bl	8001414 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	f241 3288 	movw	r2, #5000	; 0x1388
 8005034:	4293      	cmp	r3, r2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e120      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800503c:	4b6d      	ldr	r3, [pc, #436]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0ee      	beq.n	8005026 <HAL_RCC_OscConfig+0x4f6>
 8005048:	e014      	b.n	8005074 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504a:	f7fc f9e3 	bl	8001414 <HAL_GetTick>
 800504e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005050:	e00a      	b.n	8005068 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005052:	f7fc f9df 	bl	8001414 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005060:	4293      	cmp	r3, r2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e10a      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005068:	4b62      	ldr	r3, [pc, #392]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1ee      	bne.n	8005052 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80ff 	beq.w	800527c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800507e:	4b5d      	ldr	r3, [pc, #372]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005086:	2b18      	cmp	r3, #24
 8005088:	f000 80ba 	beq.w	8005200 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2b02      	cmp	r3, #2
 8005092:	f040 8095 	bne.w	80051c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005096:	4b57      	ldr	r3, [pc, #348]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a56      	ldr	r2, [pc, #344]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800509c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fc f9b7 	bl	8001414 <HAL_GetTick>
 80050a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050aa:	f7fc f9b3 	bl	8001414 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0e0      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050bc:	4b4d      	ldr	r3, [pc, #308]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f0      	bne.n	80050aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c8:	4b4a      	ldr	r3, [pc, #296]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 80050ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050cc:	4b4a      	ldr	r3, [pc, #296]	; (80051f8 <HAL_RCC_OscConfig+0x6c8>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80050d8:	0112      	lsls	r2, r2, #4
 80050da:	430a      	orrs	r2, r1
 80050dc:	4945      	ldr	r1, [pc, #276]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	628b      	str	r3, [r1, #40]	; 0x28
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	3b01      	subs	r3, #1
 80050e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f0:	3b01      	subs	r3, #1
 80050f2:	025b      	lsls	r3, r3, #9
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	3b01      	subs	r3, #1
 80050fe:	041b      	lsls	r3, r3, #16
 8005100:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510a:	3b01      	subs	r3, #1
 800510c:	061b      	lsls	r3, r3, #24
 800510e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005112:	4938      	ldr	r1, [pc, #224]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005114:	4313      	orrs	r3, r2
 8005116:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005118:	4b36      	ldr	r3, [pc, #216]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	4a35      	ldr	r2, [pc, #212]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005124:	4b33      	ldr	r3, [pc, #204]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005128:	4b34      	ldr	r3, [pc, #208]	; (80051fc <HAL_RCC_OscConfig+0x6cc>)
 800512a:	4013      	ands	r3, r2
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005130:	00d2      	lsls	r2, r2, #3
 8005132:	4930      	ldr	r1, [pc, #192]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005134:	4313      	orrs	r3, r2
 8005136:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005138:	4b2e      	ldr	r3, [pc, #184]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	f023 020c 	bic.w	r2, r3, #12
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	492b      	ldr	r1, [pc, #172]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005146:	4313      	orrs	r3, r2
 8005148:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800514a:	4b2a      	ldr	r3, [pc, #168]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514e:	f023 0202 	bic.w	r2, r3, #2
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	4927      	ldr	r1, [pc, #156]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005158:	4313      	orrs	r3, r2
 800515a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800515c:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4a24      	ldr	r2, [pc, #144]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005168:	4b22      	ldr	r3, [pc, #136]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	4a21      	ldr	r2, [pc, #132]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800516e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005174:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800517a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800517e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005180:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	4a1b      	ldr	r2, [pc, #108]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800518c:	4b19      	ldr	r3, [pc, #100]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 8005192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fc f93c 	bl	8001414 <HAL_GetTick>
 800519c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fc f938 	bl	8001414 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e065      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0x670>
 80051be:	e05d      	b.n	800527c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c0:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a0b      	ldr	r2, [pc, #44]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 80051c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fc f922 	bl	8001414 <HAL_GetTick>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fc f91e 	bl	8001414 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e04b      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051e6:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <HAL_RCC_OscConfig+0x6c4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x6a4>
 80051f2:	e043      	b.n	800527c <HAL_RCC_OscConfig+0x74c>
 80051f4:	58024400 	.word	0x58024400
 80051f8:	fffffc0c 	.word	0xfffffc0c
 80051fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005200:	4b21      	ldr	r3, [pc, #132]	; (8005288 <HAL_RCC_OscConfig+0x758>)
 8005202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005204:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005206:	4b20      	ldr	r3, [pc, #128]	; (8005288 <HAL_RCC_OscConfig+0x758>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	2b01      	cmp	r3, #1
 8005212:	d031      	beq.n	8005278 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f003 0203 	and.w	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521e:	429a      	cmp	r2, r3
 8005220:	d12a      	bne.n	8005278 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522e:	429a      	cmp	r2, r3
 8005230:	d122      	bne.n	8005278 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800523e:	429a      	cmp	r2, r3
 8005240:	d11a      	bne.n	8005278 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	0a5b      	lsrs	r3, r3, #9
 8005246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005250:	429a      	cmp	r2, r3
 8005252:	d111      	bne.n	8005278 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	0c1b      	lsrs	r3, r3, #16
 8005258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005262:	429a      	cmp	r2, r3
 8005264:	d108      	bne.n	8005278 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	0e1b      	lsrs	r3, r3, #24
 800526a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d001      	beq.n	800527c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3730      	adds	r7, #48	; 0x30
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	58024400 	.word	0x58024400

0800528c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e19c      	b.n	80055da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052a0:	4b8a      	ldr	r3, [pc, #552]	; (80054cc <HAL_RCC_ClockConfig+0x240>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d910      	bls.n	80052d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ae:	4b87      	ldr	r3, [pc, #540]	; (80054cc <HAL_RCC_ClockConfig+0x240>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f023 020f 	bic.w	r2, r3, #15
 80052b6:	4985      	ldr	r1, [pc, #532]	; (80054cc <HAL_RCC_ClockConfig+0x240>)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052be:	4b83      	ldr	r3, [pc, #524]	; (80054cc <HAL_RCC_ClockConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e184      	b.n	80055da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d010      	beq.n	80052fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	4b7b      	ldr	r3, [pc, #492]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d908      	bls.n	80052fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052ec:	4b78      	ldr	r3, [pc, #480]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	4975      	ldr	r1, [pc, #468]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d010      	beq.n	800532c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	4b70      	ldr	r3, [pc, #448]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005316:	429a      	cmp	r2, r3
 8005318:	d908      	bls.n	800532c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800531a:	4b6d      	ldr	r3, [pc, #436]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	496a      	ldr	r1, [pc, #424]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 8005328:	4313      	orrs	r3, r2
 800532a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	d010      	beq.n	800535a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699a      	ldr	r2, [r3, #24]
 800533c:	4b64      	ldr	r3, [pc, #400]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005344:	429a      	cmp	r2, r3
 8005346:	d908      	bls.n	800535a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005348:	4b61      	ldr	r3, [pc, #388]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	495e      	ldr	r1, [pc, #376]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 8005356:	4313      	orrs	r3, r2
 8005358:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	4b59      	ldr	r3, [pc, #356]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005372:	429a      	cmp	r2, r3
 8005374:	d908      	bls.n	8005388 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005376:	4b56      	ldr	r3, [pc, #344]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	4953      	ldr	r1, [pc, #332]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 8005384:	4313      	orrs	r3, r2
 8005386:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d010      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	4b4d      	ldr	r3, [pc, #308]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d908      	bls.n	80053b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a4:	4b4a      	ldr	r3, [pc, #296]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f023 020f 	bic.w	r2, r3, #15
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4947      	ldr	r1, [pc, #284]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d055      	beq.n	800546e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053c2:	4b43      	ldr	r3, [pc, #268]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	4940      	ldr	r1, [pc, #256]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d107      	bne.n	80053ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053dc:	4b3c      	ldr	r3, [pc, #240]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d121      	bne.n	800542c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e0f6      	b.n	80055da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d107      	bne.n	8005404 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053f4:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d115      	bne.n	800542c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0ea      	b.n	80055da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d107      	bne.n	800541c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800540c:	4b30      	ldr	r3, [pc, #192]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0de      	b.n	80055da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800541c:	4b2c      	ldr	r3, [pc, #176]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0d6      	b.n	80055da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800542c:	4b28      	ldr	r3, [pc, #160]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f023 0207 	bic.w	r2, r3, #7
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	4925      	ldr	r1, [pc, #148]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 800543a:	4313      	orrs	r3, r2
 800543c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543e:	f7fb ffe9 	bl	8001414 <HAL_GetTick>
 8005442:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005444:	e00a      	b.n	800545c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005446:	f7fb ffe5 	bl	8001414 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	f241 3288 	movw	r2, #5000	; 0x1388
 8005454:	4293      	cmp	r3, r2
 8005456:	d901      	bls.n	800545c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e0be      	b.n	80055da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545c:	4b1c      	ldr	r3, [pc, #112]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	429a      	cmp	r2, r3
 800546c:	d1eb      	bne.n	8005446 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d010      	beq.n	800549c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	429a      	cmp	r2, r3
 8005488:	d208      	bcs.n	800549c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800548a:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f023 020f 	bic.w	r2, r3, #15
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	490e      	ldr	r1, [pc, #56]	; (80054d0 <HAL_RCC_ClockConfig+0x244>)
 8005498:	4313      	orrs	r3, r2
 800549a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_RCC_ClockConfig+0x240>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d214      	bcs.n	80054d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054aa:	4b08      	ldr	r3, [pc, #32]	; (80054cc <HAL_RCC_ClockConfig+0x240>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f023 020f 	bic.w	r2, r3, #15
 80054b2:	4906      	ldr	r1, [pc, #24]	; (80054cc <HAL_RCC_ClockConfig+0x240>)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ba:	4b04      	ldr	r3, [pc, #16]	; (80054cc <HAL_RCC_ClockConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d005      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e086      	b.n	80055da <HAL_RCC_ClockConfig+0x34e>
 80054cc:	52002000 	.word	0x52002000
 80054d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d010      	beq.n	8005502 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	4b3f      	ldr	r3, [pc, #252]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d208      	bcs.n	8005502 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054f0:	4b3c      	ldr	r3, [pc, #240]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	4939      	ldr	r1, [pc, #228]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d010      	beq.n	8005530 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695a      	ldr	r2, [r3, #20]
 8005512:	4b34      	ldr	r3, [pc, #208]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800551a:	429a      	cmp	r2, r3
 800551c:	d208      	bcs.n	8005530 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800551e:	4b31      	ldr	r3, [pc, #196]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	492e      	ldr	r1, [pc, #184]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 800552c:	4313      	orrs	r3, r2
 800552e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	d010      	beq.n	800555e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005548:	429a      	cmp	r2, r3
 800554a:	d208      	bcs.n	800555e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800554c:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	4922      	ldr	r1, [pc, #136]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 800555a:	4313      	orrs	r3, r2
 800555c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d010      	beq.n	800558c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69da      	ldr	r2, [r3, #28]
 800556e:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005576:	429a      	cmp	r2, r3
 8005578:	d208      	bcs.n	800558c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800557a:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	4917      	ldr	r1, [pc, #92]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 8005588:	4313      	orrs	r3, r2
 800558a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800558c:	f000 f834 	bl	80055f8 <HAL_RCC_GetSysClockFreq>
 8005590:	4602      	mov	r2, r0
 8005592:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	0a1b      	lsrs	r3, r3, #8
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	4912      	ldr	r1, [pc, #72]	; (80055e8 <HAL_RCC_ClockConfig+0x35c>)
 800559e:	5ccb      	ldrb	r3, [r1, r3]
 80055a0:	f003 031f 	and.w	r3, r3, #31
 80055a4:	fa22 f303 	lsr.w	r3, r2, r3
 80055a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055aa:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <HAL_RCC_ClockConfig+0x358>)
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	4a0d      	ldr	r2, [pc, #52]	; (80055e8 <HAL_RCC_ClockConfig+0x35c>)
 80055b4:	5cd3      	ldrb	r3, [r2, r3]
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
 80055c0:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <HAL_RCC_ClockConfig+0x360>)
 80055c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055c4:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <HAL_RCC_ClockConfig+0x364>)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80055ca:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <HAL_RCC_ClockConfig+0x368>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fb fed6 	bl	8001380 <HAL_InitTick>
 80055d4:	4603      	mov	r3, r0
 80055d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	58024400 	.word	0x58024400
 80055e8:	0800a0c8 	.word	0x0800a0c8
 80055ec:	24000008 	.word	0x24000008
 80055f0:	24000004 	.word	0x24000004
 80055f4:	2400000c 	.word	0x2400000c

080055f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b089      	sub	sp, #36	; 0x24
 80055fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055fe:	4bb3      	ldr	r3, [pc, #716]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005606:	2b18      	cmp	r3, #24
 8005608:	f200 8155 	bhi.w	80058b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800560c:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <HAL_RCC_GetSysClockFreq+0x1c>)
 800560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005612:	bf00      	nop
 8005614:	08005679 	.word	0x08005679
 8005618:	080058b7 	.word	0x080058b7
 800561c:	080058b7 	.word	0x080058b7
 8005620:	080058b7 	.word	0x080058b7
 8005624:	080058b7 	.word	0x080058b7
 8005628:	080058b7 	.word	0x080058b7
 800562c:	080058b7 	.word	0x080058b7
 8005630:	080058b7 	.word	0x080058b7
 8005634:	0800569f 	.word	0x0800569f
 8005638:	080058b7 	.word	0x080058b7
 800563c:	080058b7 	.word	0x080058b7
 8005640:	080058b7 	.word	0x080058b7
 8005644:	080058b7 	.word	0x080058b7
 8005648:	080058b7 	.word	0x080058b7
 800564c:	080058b7 	.word	0x080058b7
 8005650:	080058b7 	.word	0x080058b7
 8005654:	080056a5 	.word	0x080056a5
 8005658:	080058b7 	.word	0x080058b7
 800565c:	080058b7 	.word	0x080058b7
 8005660:	080058b7 	.word	0x080058b7
 8005664:	080058b7 	.word	0x080058b7
 8005668:	080058b7 	.word	0x080058b7
 800566c:	080058b7 	.word	0x080058b7
 8005670:	080058b7 	.word	0x080058b7
 8005674:	080056ab 	.word	0x080056ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005678:	4b94      	ldr	r3, [pc, #592]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005684:	4b91      	ldr	r3, [pc, #580]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	08db      	lsrs	r3, r3, #3
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	4a90      	ldr	r2, [pc, #576]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005696:	e111      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005698:	4b8d      	ldr	r3, [pc, #564]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800569a:	61bb      	str	r3, [r7, #24]
    break;
 800569c:	e10e      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800569e:	4b8d      	ldr	r3, [pc, #564]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056a0:	61bb      	str	r3, [r7, #24]
    break;
 80056a2:	e10b      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80056a4:	4b8c      	ldr	r3, [pc, #560]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80056a6:	61bb      	str	r3, [r7, #24]
    break;
 80056a8:	e108      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056aa:	4b88      	ldr	r3, [pc, #544]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80056b4:	4b85      	ldr	r3, [pc, #532]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	091b      	lsrs	r3, r3, #4
 80056ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80056c0:	4b82      	ldr	r3, [pc, #520]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80056ca:	4b80      	ldr	r3, [pc, #512]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ce:	08db      	lsrs	r3, r3, #3
 80056d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80e1 	beq.w	80058b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	f000 8083 	beq.w	80057fc <HAL_RCC_GetSysClockFreq+0x204>
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	f200 80a1 	bhi.w	8005840 <HAL_RCC_GetSysClockFreq+0x248>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x114>
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d056      	beq.n	80057b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800570a:	e099      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800570c:	4b6f      	ldr	r3, [pc, #444]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d02d      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005718:	4b6c      	ldr	r3, [pc, #432]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	08db      	lsrs	r3, r3, #3
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	4a6b      	ldr	r2, [pc, #428]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
 8005728:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005742:	4b62      	ldr	r3, [pc, #392]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005752:	ed97 6a02 	vldr	s12, [r7, #8]
 8005756:	eddf 5a61 	vldr	s11, [pc, #388]	; 80058dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800575a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005772:	e087      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80058e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005786:	4b51      	ldr	r3, [pc, #324]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005796:	ed97 6a02 	vldr	s12, [r7, #8]
 800579a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80058dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800579e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057b6:	e065      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80058e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ca:	4b40      	ldr	r3, [pc, #256]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057da:	ed97 6a02 	vldr	s12, [r7, #8]
 80057de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80058dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80057e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057fa:	e043      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eddf 6a38 	vldr	s13, [pc, #224]	; 80058e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580e:	4b2f      	ldr	r3, [pc, #188]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005822:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80058dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800583e:	e021      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80058e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005852:	4b1e      	ldr	r3, [pc, #120]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005862:	ed97 6a02 	vldr	s12, [r7, #8]
 8005866:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80058dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005882:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005884:	4b11      	ldr	r3, [pc, #68]	; (80058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	0a5b      	lsrs	r3, r3, #9
 800588a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800588e:	3301      	adds	r3, #1
 8005890:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	ee07 3a90 	vmov	s15, r3
 8005898:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800589c:	edd7 6a07 	vldr	s13, [r7, #28]
 80058a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a8:	ee17 3a90 	vmov	r3, s15
 80058ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80058ae:	e005      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61bb      	str	r3, [r7, #24]
    break;
 80058b4:	e002      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80058b6:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058b8:	61bb      	str	r3, [r7, #24]
    break;
 80058ba:	bf00      	nop
  }

  return sysclockfreq;
 80058bc:	69bb      	ldr	r3, [r7, #24]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3724      	adds	r7, #36	; 0x24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	58024400 	.word	0x58024400
 80058d0:	03d09000 	.word	0x03d09000
 80058d4:	003d0900 	.word	0x003d0900
 80058d8:	007a1200 	.word	0x007a1200
 80058dc:	46000000 	.word	0x46000000
 80058e0:	4c742400 	.word	0x4c742400
 80058e4:	4a742400 	.word	0x4a742400
 80058e8:	4af42400 	.word	0x4af42400

080058ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058f2:	f7ff fe81 	bl	80055f8 <HAL_RCC_GetSysClockFreq>
 80058f6:	4602      	mov	r2, r0
 80058f8:	4b10      	ldr	r3, [pc, #64]	; (800593c <HAL_RCC_GetHCLKFreq+0x50>)
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	0a1b      	lsrs	r3, r3, #8
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	490f      	ldr	r1, [pc, #60]	; (8005940 <HAL_RCC_GetHCLKFreq+0x54>)
 8005904:	5ccb      	ldrb	r3, [r1, r3]
 8005906:	f003 031f 	and.w	r3, r3, #31
 800590a:	fa22 f303 	lsr.w	r3, r2, r3
 800590e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005910:	4b0a      	ldr	r3, [pc, #40]	; (800593c <HAL_RCC_GetHCLKFreq+0x50>)
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f003 030f 	and.w	r3, r3, #15
 8005918:	4a09      	ldr	r2, [pc, #36]	; (8005940 <HAL_RCC_GetHCLKFreq+0x54>)
 800591a:	5cd3      	ldrb	r3, [r2, r3]
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	fa22 f303 	lsr.w	r3, r2, r3
 8005926:	4a07      	ldr	r2, [pc, #28]	; (8005944 <HAL_RCC_GetHCLKFreq+0x58>)
 8005928:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800592a:	4a07      	ldr	r2, [pc, #28]	; (8005948 <HAL_RCC_GetHCLKFreq+0x5c>)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <HAL_RCC_GetHCLKFreq+0x58>)
 8005932:	681b      	ldr	r3, [r3, #0]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	58024400 	.word	0x58024400
 8005940:	0800a0c8 	.word	0x0800a0c8
 8005944:	24000008 	.word	0x24000008
 8005948:	24000004 	.word	0x24000004

0800594c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005950:	f7ff ffcc 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b06      	ldr	r3, [pc, #24]	; (8005970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	091b      	lsrs	r3, r3, #4
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	4904      	ldr	r1, [pc, #16]	; (8005974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800596c:	4618      	mov	r0, r3
 800596e:	bd80      	pop	{r7, pc}
 8005970:	58024400 	.word	0x58024400
 8005974:	0800a0c8 	.word	0x0800a0c8

08005978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800597c:	f7ff ffb6 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 8005980:	4602      	mov	r2, r0
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	4904      	ldr	r1, [pc, #16]	; (80059a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800598e:	5ccb      	ldrb	r3, [r1, r3]
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005998:	4618      	mov	r0, r3
 800599a:	bd80      	pop	{r7, pc}
 800599c:	58024400 	.word	0x58024400
 80059a0:	0800a0c8 	.word	0x0800a0c8

080059a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059ac:	2300      	movs	r3, #0
 80059ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059b0:	2300      	movs	r3, #0
 80059b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d03f      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059c8:	d02a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80059ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059ce:	d824      	bhi.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059d4:	d018      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059da:	d81e      	bhi.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80059e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e4:	d007      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80059e6:	e018      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e8:	4ba4      	ldr	r3, [pc, #656]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	4aa3      	ldr	r2, [pc, #652]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059f4:	e015      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3304      	adds	r3, #4
 80059fa:	2102      	movs	r1, #2
 80059fc:	4618      	mov	r0, r3
 80059fe:	f001 f989 	bl	8006d14 <RCCEx_PLL2_Config>
 8005a02:	4603      	mov	r3, r0
 8005a04:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a06:	e00c      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3324      	adds	r3, #36	; 0x24
 8005a0c:	2102      	movs	r1, #2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fa32 	bl	8006e78 <RCCEx_PLL3_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a18:	e003      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a1e:	e000      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d109      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a28:	4b94      	ldr	r3, [pc, #592]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a34:	4991      	ldr	r1, [pc, #580]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	650b      	str	r3, [r1, #80]	; 0x50
 8005a3a:	e001      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3c:	7dfb      	ldrb	r3, [r7, #23]
 8005a3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d03d      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d826      	bhi.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a54:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5a:	bf00      	nop
 8005a5c:	08005a71 	.word	0x08005a71
 8005a60:	08005a7f 	.word	0x08005a7f
 8005a64:	08005a91 	.word	0x08005a91
 8005a68:	08005aa9 	.word	0x08005aa9
 8005a6c:	08005aa9 	.word	0x08005aa9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a70:	4b82      	ldr	r3, [pc, #520]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	4a81      	ldr	r2, [pc, #516]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a7c:	e015      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3304      	adds	r3, #4
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 f945 	bl	8006d14 <RCCEx_PLL2_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a8e:	e00c      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3324      	adds	r3, #36	; 0x24
 8005a94:	2100      	movs	r1, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f9ee 	bl	8006e78 <RCCEx_PLL3_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005aa0:	e003      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa6:	e000      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ab0:	4b72      	ldr	r3, [pc, #456]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab4:	f023 0207 	bic.w	r2, r3, #7
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abc:	496f      	ldr	r1, [pc, #444]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	650b      	str	r3, [r1, #80]	; 0x50
 8005ac2:	e001      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d051      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ada:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ade:	d036      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005ae0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ae4:	d830      	bhi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005aea:	d032      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005aec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005af0:	d82a      	bhi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005af2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005af6:	d02e      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005af8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005afc:	d824      	bhi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b02:	d018      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b08:	d81e      	bhi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b12:	d007      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005b14:	e018      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b16:	4b59      	ldr	r3, [pc, #356]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	4a58      	ldr	r2, [pc, #352]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b22:	e019      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3304      	adds	r3, #4
 8005b28:	2100      	movs	r1, #0
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f001 f8f2 	bl	8006d14 <RCCEx_PLL2_Config>
 8005b30:	4603      	mov	r3, r0
 8005b32:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b34:	e010      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3324      	adds	r3, #36	; 0x24
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f001 f99b 	bl	8006e78 <RCCEx_PLL3_Config>
 8005b42:	4603      	mov	r3, r0
 8005b44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b46:	e007      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b4c:	e004      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005b4e:	bf00      	nop
 8005b50:	e002      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005b52:	bf00      	nop
 8005b54:	e000      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005b56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b5e:	4b47      	ldr	r3, [pc, #284]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b6c:	4943      	ldr	r1, [pc, #268]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	658b      	str	r3, [r1, #88]	; 0x58
 8005b72:	e001      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d051      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b8a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005b8e:	d036      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005b90:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005b94:	d830      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b9a:	d032      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ba0:	d82a      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005ba2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ba6:	d02e      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005ba8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bac:	d824      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bb2:	d018      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bb8:	d81e      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005bbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bc2:	d007      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005bc4:	e018      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc6:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	4a2c      	ldr	r2, [pc, #176]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bd2:	e019      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	2100      	movs	r1, #0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 f89a 	bl	8006d14 <RCCEx_PLL2_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005be4:	e010      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3324      	adds	r3, #36	; 0x24
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 f943 	bl	8006e78 <RCCEx_PLL3_Config>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bf6:	e007      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8005bfc:	e004      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e002      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005c02:	bf00      	nop
 8005c04:	e000      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c0e:	4b1b      	ldr	r3, [pc, #108]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c12:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c1c:	4917      	ldr	r1, [pc, #92]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	658b      	str	r3, [r1, #88]	; 0x58
 8005c22:	e001      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d035      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c38:	2b30      	cmp	r3, #48	; 0x30
 8005c3a:	d01c      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005c3c:	2b30      	cmp	r3, #48	; 0x30
 8005c3e:	d817      	bhi.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d00c      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d813      	bhi.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d019      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	d10f      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005c5c:	e011      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3304      	adds	r3, #4
 8005c62:	2102      	movs	r1, #2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 f855 	bl	8006d14 <RCCEx_PLL2_Config>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005c6e:	e008      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	75fb      	strb	r3, [r7, #23]
      break;
 8005c74:	e005      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8005c76:	bf00      	nop
 8005c78:	e003      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005c7a:	bf00      	nop
 8005c7c:	58024400 	.word	0x58024400
      break;
 8005c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005c88:	4ba3      	ldr	r3, [pc, #652]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c94:	49a0      	ldr	r1, [pc, #640]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c9a:	e001      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d047      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cb4:	d030      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cba:	d82a      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005cbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cc0:	d02c      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005cc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cc6:	d824      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ccc:	d018      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd2:	d81e      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cdc:	d007      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005cde:	e018      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce0:	4b8d      	ldr	r3, [pc, #564]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	4a8c      	ldr	r2, [pc, #560]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005cec:	e017      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 f80d 	bl	8006d14 <RCCEx_PLL2_Config>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005cfe:	e00e      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3324      	adds	r3, #36	; 0x24
 8005d04:	2100      	movs	r1, #0
 8005d06:	4618      	mov	r0, r3
 8005d08:	f001 f8b6 	bl	8006e78 <RCCEx_PLL3_Config>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d10:	e005      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	75fb      	strb	r3, [r7, #23]
      break;
 8005d16:	e002      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005d18:	bf00      	nop
 8005d1a:	e000      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d109      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d24:	4b7c      	ldr	r3, [pc, #496]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d28:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d30:	4979      	ldr	r1, [pc, #484]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	650b      	str	r3, [r1, #80]	; 0x50
 8005d36:	e001      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d049      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d50:	d02e      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005d52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d56:	d828      	bhi.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005d58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d5c:	d02a      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005d5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d62:	d822      	bhi.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005d64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d68:	d026      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005d6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d6e:	d81c      	bhi.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d74:	d010      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d7a:	d816      	bhi.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01d      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d84:	d111      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 ffc1 	bl	8006d14 <RCCEx_PLL2_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d96:	e012      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3324      	adds	r3, #36	; 0x24
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 f86a 	bl	8006e78 <RCCEx_PLL3_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005da8:	e009      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	75fb      	strb	r3, [r7, #23]
      break;
 8005dae:	e006      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005db0:	bf00      	nop
 8005db2:	e004      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005db4:	bf00      	nop
 8005db6:	e002      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005db8:	bf00      	nop
 8005dba:	e000      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005dc4:	4b54      	ldr	r3, [pc, #336]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd0:	4951      	ldr	r1, [pc, #324]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	650b      	str	r3, [r1, #80]	; 0x50
 8005dd6:	e001      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
 8005dda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d04b      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005df2:	d02e      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005df8:	d828      	bhi.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfe:	d02a      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d822      	bhi.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005e06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e0a:	d026      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005e0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e10:	d81c      	bhi.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e16:	d010      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e1c:	d816      	bhi.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01d      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e26:	d111      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 ff70 	bl	8006d14 <RCCEx_PLL2_Config>
 8005e34:	4603      	mov	r3, r0
 8005e36:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e38:	e012      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3324      	adds	r3, #36	; 0x24
 8005e3e:	2101      	movs	r1, #1
 8005e40:	4618      	mov	r0, r3
 8005e42:	f001 f819 	bl	8006e78 <RCCEx_PLL3_Config>
 8005e46:	4603      	mov	r3, r0
 8005e48:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e4a:	e009      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e50:	e006      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005e52:	bf00      	nop
 8005e54:	e004      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005e56:	bf00      	nop
 8005e58:	e002      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005e5a:	bf00      	nop
 8005e5c:	e000      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10a      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e66:	4b2c      	ldr	r3, [pc, #176]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e74:	4928      	ldr	r1, [pc, #160]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	658b      	str	r3, [r1, #88]	; 0x58
 8005e7a:	e001      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7c:	7dfb      	ldrb	r3, [r7, #23]
 8005e7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d02f      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e94:	d00e      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e9a:	d814      	bhi.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d015      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005ea0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ea4:	d10f      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea6:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	4a1b      	ldr	r2, [pc, #108]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005eb2:	e00c      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	2101      	movs	r1, #1
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 ff2a 	bl	8006d14 <RCCEx_PLL2_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ec4:	e003      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eca:	e000      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d109      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ed4:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ee0:	490d      	ldr	r1, [pc, #52]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	650b      	str	r3, [r1, #80]	; 0x50
 8005ee6:	e001      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d034      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d81d      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005f00:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f43 	.word	0x08005f43
 8005f0c:	08005f1d 	.word	0x08005f1d
 8005f10:	08005f2b 	.word	0x08005f2b
 8005f14:	08005f43 	.word	0x08005f43
 8005f18:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f1c:	4bb1      	ldr	r3, [pc, #708]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	4ab0      	ldr	r2, [pc, #704]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f28:	e00c      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	2102      	movs	r1, #2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 feef 	bl	8006d14 <RCCEx_PLL2_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f3a:	e003      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f40:	e000      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8005f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f4a:	4ba6      	ldr	r3, [pc, #664]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4e:	f023 0203 	bic.w	r2, r3, #3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f56:	49a3      	ldr	r1, [pc, #652]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f5c:	e001      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 8086 	beq.w	800607c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f70:	4b9d      	ldr	r3, [pc, #628]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a9c      	ldr	r2, [pc, #624]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f7c:	f7fb fa4a 	bl	8001414 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f82:	e009      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f84:	f7fb fa46 	bl	8001414 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b64      	cmp	r3, #100	; 0x64
 8005f90:	d902      	bls.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	75fb      	strb	r3, [r7, #23]
        break;
 8005f96:	e005      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f98:	4b93      	ldr	r3, [pc, #588]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0ef      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d166      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005faa:	4b8e      	ldr	r3, [pc, #568]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fb4:	4053      	eors	r3, r2
 8005fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d013      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fbe:	4b89      	ldr	r3, [pc, #548]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fc8:	4b86      	ldr	r3, [pc, #536]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fcc:	4a85      	ldr	r2, [pc, #532]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fd4:	4b83      	ldr	r3, [pc, #524]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd8:	4a82      	ldr	r2, [pc, #520]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005fe0:	4a80      	ldr	r2, [pc, #512]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff0:	d115      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff2:	f7fb fa0f 	bl	8001414 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ff8:	e00b      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffa:	f7fb fa0b 	bl	8001414 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f241 3288 	movw	r2, #5000	; 0x1388
 8006008:	4293      	cmp	r3, r2
 800600a:	d902      	bls.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	75fb      	strb	r3, [r7, #23]
            break;
 8006010:	e005      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006012:	4b74      	ldr	r3, [pc, #464]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0ed      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800601e:	7dfb      	ldrb	r3, [r7, #23]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d126      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800602a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006032:	d10d      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8006034:	4b6b      	ldr	r3, [pc, #428]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006042:	0919      	lsrs	r1, r3, #4
 8006044:	4b69      	ldr	r3, [pc, #420]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006046:	400b      	ands	r3, r1
 8006048:	4966      	ldr	r1, [pc, #408]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800604a:	4313      	orrs	r3, r2
 800604c:	610b      	str	r3, [r1, #16]
 800604e:	e005      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8006050:	4b64      	ldr	r3, [pc, #400]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	4a63      	ldr	r2, [pc, #396]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006056:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800605a:	6113      	str	r3, [r2, #16]
 800605c:	4b61      	ldr	r3, [pc, #388]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800605e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800606a:	495e      	ldr	r1, [pc, #376]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800606c:	4313      	orrs	r3, r2
 800606e:	670b      	str	r3, [r1, #112]	; 0x70
 8006070:	e004      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	75bb      	strb	r3, [r7, #22]
 8006076:	e001      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d07e      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800608c:	2b28      	cmp	r3, #40	; 0x28
 800608e:	d867      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8006090:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	08006167 	.word	0x08006167
 800609c:	08006161 	.word	0x08006161
 80060a0:	08006161 	.word	0x08006161
 80060a4:	08006161 	.word	0x08006161
 80060a8:	08006161 	.word	0x08006161
 80060ac:	08006161 	.word	0x08006161
 80060b0:	08006161 	.word	0x08006161
 80060b4:	08006161 	.word	0x08006161
 80060b8:	0800613d 	.word	0x0800613d
 80060bc:	08006161 	.word	0x08006161
 80060c0:	08006161 	.word	0x08006161
 80060c4:	08006161 	.word	0x08006161
 80060c8:	08006161 	.word	0x08006161
 80060cc:	08006161 	.word	0x08006161
 80060d0:	08006161 	.word	0x08006161
 80060d4:	08006161 	.word	0x08006161
 80060d8:	0800614f 	.word	0x0800614f
 80060dc:	08006161 	.word	0x08006161
 80060e0:	08006161 	.word	0x08006161
 80060e4:	08006161 	.word	0x08006161
 80060e8:	08006161 	.word	0x08006161
 80060ec:	08006161 	.word	0x08006161
 80060f0:	08006161 	.word	0x08006161
 80060f4:	08006161 	.word	0x08006161
 80060f8:	08006167 	.word	0x08006167
 80060fc:	08006161 	.word	0x08006161
 8006100:	08006161 	.word	0x08006161
 8006104:	08006161 	.word	0x08006161
 8006108:	08006161 	.word	0x08006161
 800610c:	08006161 	.word	0x08006161
 8006110:	08006161 	.word	0x08006161
 8006114:	08006161 	.word	0x08006161
 8006118:	08006167 	.word	0x08006167
 800611c:	08006161 	.word	0x08006161
 8006120:	08006161 	.word	0x08006161
 8006124:	08006161 	.word	0x08006161
 8006128:	08006161 	.word	0x08006161
 800612c:	08006161 	.word	0x08006161
 8006130:	08006161 	.word	0x08006161
 8006134:	08006161 	.word	0x08006161
 8006138:	08006167 	.word	0x08006167
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3304      	adds	r3, #4
 8006140:	2101      	movs	r1, #1
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fde6 	bl	8006d14 <RCCEx_PLL2_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800614c:	e00c      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3324      	adds	r3, #36	; 0x24
 8006152:	2101      	movs	r1, #1
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fe8f 	bl	8006e78 <RCCEx_PLL3_Config>
 800615a:	4603      	mov	r3, r0
 800615c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800615e:	e003      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	75fb      	strb	r3, [r7, #23]
      break;
 8006164:	e000      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8006166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d109      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800616e:	4b1d      	ldr	r3, [pc, #116]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006172:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617a:	491a      	ldr	r1, [pc, #104]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800617c:	4313      	orrs	r3, r2
 800617e:	654b      	str	r3, [r1, #84]	; 0x54
 8006180:	e001      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d03e      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	2b05      	cmp	r3, #5
 8006198:	d820      	bhi.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x838>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061f1 	.word	0x080061f1
 80061a4:	080061b9 	.word	0x080061b9
 80061a8:	080061cb 	.word	0x080061cb
 80061ac:	080061f1 	.word	0x080061f1
 80061b0:	080061f1 	.word	0x080061f1
 80061b4:	080061f1 	.word	0x080061f1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3304      	adds	r3, #4
 80061bc:	2101      	movs	r1, #1
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fda8 	bl	8006d14 <RCCEx_PLL2_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80061c8:	e013      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3324      	adds	r3, #36	; 0x24
 80061ce:	2101      	movs	r1, #1
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fe51 	bl	8006e78 <RCCEx_PLL3_Config>
 80061d6:	4603      	mov	r3, r0
 80061d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80061da:	e00a      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	75fb      	strb	r3, [r7, #23]
      break;
 80061e0:	e007      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80061e2:	bf00      	nop
 80061e4:	58024400 	.word	0x58024400
 80061e8:	58024800 	.word	0x58024800
 80061ec:	00ffffcf 	.word	0x00ffffcf
      break;
 80061f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d109      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80061f8:	4b9f      	ldr	r3, [pc, #636]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	f023 0207 	bic.w	r2, r3, #7
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006204:	499c      	ldr	r1, [pc, #624]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006206:	4313      	orrs	r3, r2
 8006208:	654b      	str	r3, [r1, #84]	; 0x54
 800620a:	e001      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d039      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006222:	2b05      	cmp	r3, #5
 8006224:	d820      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	0800626f 	.word	0x0800626f
 8006230:	08006245 	.word	0x08006245
 8006234:	08006257 	.word	0x08006257
 8006238:	0800626f 	.word	0x0800626f
 800623c:	0800626f 	.word	0x0800626f
 8006240:	0800626f 	.word	0x0800626f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3304      	adds	r3, #4
 8006248:	2101      	movs	r1, #1
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fd62 	bl	8006d14 <RCCEx_PLL2_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006254:	e00c      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	3324      	adds	r3, #36	; 0x24
 800625a:	2101      	movs	r1, #1
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fe0b 	bl	8006e78 <RCCEx_PLL3_Config>
 8006262:	4603      	mov	r3, r0
 8006264:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006266:	e003      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	75fb      	strb	r3, [r7, #23]
      break;
 800626c:	e000      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800626e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006270:	7dfb      	ldrb	r3, [r7, #23]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10a      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006276:	4b80      	ldr	r3, [pc, #512]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627a:	f023 0207 	bic.w	r2, r3, #7
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006284:	497c      	ldr	r1, [pc, #496]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006286:	4313      	orrs	r3, r2
 8006288:	658b      	str	r3, [r1, #88]	; 0x58
 800628a:	e001      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0320 	and.w	r3, r3, #32
 8006298:	2b00      	cmp	r3, #0
 800629a:	d04b      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062a6:	d02e      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80062a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062ac:	d828      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80062ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b2:	d02a      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80062b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b8:	d822      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80062ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062be:	d026      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80062c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062c4:	d81c      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80062c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ca:	d010      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80062cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d0:	d816      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01d      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80062d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062da:	d111      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3304      	adds	r3, #4
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fd16 	bl	8006d14 <RCCEx_PLL2_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80062ec:	e012      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3324      	adds	r3, #36	; 0x24
 80062f2:	2102      	movs	r1, #2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 fdbf 	bl	8006e78 <RCCEx_PLL3_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80062fe:	e009      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	75fb      	strb	r3, [r7, #23]
      break;
 8006304:	e006      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006306:	bf00      	nop
 8006308:	e004      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800630a:	bf00      	nop
 800630c:	e002      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006314:	7dfb      	ldrb	r3, [r7, #23]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800631a:	4b57      	ldr	r3, [pc, #348]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800631c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006328:	4953      	ldr	r1, [pc, #332]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800632a:	4313      	orrs	r3, r2
 800632c:	654b      	str	r3, [r1, #84]	; 0x54
 800632e:	e001      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d04b      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006346:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800634a:	d02e      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800634c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006350:	d828      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006356:	d02a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635c:	d822      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800635e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006362:	d026      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006368:	d81c      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800636a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636e:	d010      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8006370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006374:	d816      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d01d      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800637a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637e:	d111      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	2100      	movs	r1, #0
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fcc4 	bl	8006d14 <RCCEx_PLL2_Config>
 800638c:	4603      	mov	r3, r0
 800638e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006390:	e012      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3324      	adds	r3, #36	; 0x24
 8006396:	2102      	movs	r1, #2
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fd6d 	bl	8006e78 <RCCEx_PLL3_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063a2:	e009      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	75fb      	strb	r3, [r7, #23]
      break;
 80063a8:	e006      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80063aa:	bf00      	nop
 80063ac:	e004      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80063ae:	bf00      	nop
 80063b0:	e002      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80063b2:	bf00      	nop
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80063b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063be:	4b2e      	ldr	r3, [pc, #184]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80063c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063cc:	492a      	ldr	r1, [pc, #168]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	658b      	str	r3, [r1, #88]	; 0x58
 80063d2:	e001      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
 80063d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d04d      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80063ee:	d02e      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80063f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80063f4:	d828      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80063f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063fa:	d02a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80063fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006400:	d822      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006402:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006406:	d026      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006408:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800640c:	d81c      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800640e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006412:	d010      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8006414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006418:	d816      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01d      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800641e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006422:	d111      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3304      	adds	r3, #4
 8006428:	2100      	movs	r1, #0
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fc72 	bl	8006d14 <RCCEx_PLL2_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006434:	e012      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3324      	adds	r3, #36	; 0x24
 800643a:	2102      	movs	r1, #2
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fd1b 	bl	8006e78 <RCCEx_PLL3_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006446:	e009      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
      break;
 800644c:	e006      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800644e:	bf00      	nop
 8006450:	e004      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006452:	bf00      	nop
 8006454:	e002      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006456:	bf00      	nop
 8006458:	e000      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800645a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800645c:	7dfb      	ldrb	r3, [r7, #23]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10c      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006470:	4901      	ldr	r1, [pc, #4]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006472:	4313      	orrs	r3, r2
 8006474:	658b      	str	r3, [r1, #88]	; 0x58
 8006476:	e003      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006478:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b00      	cmp	r3, #0
 800648a:	d018      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006494:	d10a      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3324      	adds	r3, #36	; 0x24
 800649a:	2102      	movs	r1, #2
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fceb 	bl	8006e78 <RCCEx_PLL3_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80064ac:	4b8a      	ldr	r3, [pc, #552]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b8:	4987      	ldr	r1, [pc, #540]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0310 	and.w	r3, r3, #16
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d01a      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d4:	d10a      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3324      	adds	r3, #36	; 0x24
 80064da:	2102      	movs	r1, #2
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fccb 	bl	8006e78 <RCCEx_PLL3_Config>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064ec:	4b7a      	ldr	r3, [pc, #488]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fa:	4977      	ldr	r1, [pc, #476]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d034      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006516:	d01d      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800651c:	d817      	bhi.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006526:	d009      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006528:	e011      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3304      	adds	r3, #4
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fbef 	bl	8006d14 <RCCEx_PLL2_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800653a:	e00c      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3324      	adds	r3, #36	; 0x24
 8006540:	2102      	movs	r1, #2
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fc98 	bl	8006e78 <RCCEx_PLL3_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800654c:	e003      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	75fb      	strb	r3, [r7, #23]
      break;
 8006552:	e000      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800655c:	4b5e      	ldr	r3, [pc, #376]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800655e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800656a:	495b      	ldr	r1, [pc, #364]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800656c:	4313      	orrs	r3, r2
 800656e:	658b      	str	r3, [r1, #88]	; 0x58
 8006570:	e001      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d033      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006588:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800658c:	d01c      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800658e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006592:	d816      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006598:	d003      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800659a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800659e:	d007      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80065a0:	e00f      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a2:	4b4d      	ldr	r3, [pc, #308]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a6:	4a4c      	ldr	r2, [pc, #304]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80065ae:	e00c      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3324      	adds	r3, #36	; 0x24
 80065b4:	2101      	movs	r1, #1
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fc5e 	bl	8006e78 <RCCEx_PLL3_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80065c0:	e003      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	75fb      	strb	r3, [r7, #23]
      break;
 80065c6:	e000      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80065c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065d0:	4b41      	ldr	r3, [pc, #260]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065de:	493e      	ldr	r1, [pc, #248]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	654b      	str	r3, [r1, #84]	; 0x54
 80065e4:	e001      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d029      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80065fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006602:	d007      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006604:	e00f      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006606:	4b34      	ldr	r3, [pc, #208]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	4a33      	ldr	r2, [pc, #204]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800660c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006610:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006612:	e00b      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3304      	adds	r3, #4
 8006618:	2102      	movs	r1, #2
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fb7a 	bl	8006d14 <RCCEx_PLL2_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006624:	e002      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	75fb      	strb	r3, [r7, #23]
      break;
 800662a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d109      	bne.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006632:	4b29      	ldr	r3, [pc, #164]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006636:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663e:	4926      	ldr	r1, [pc, #152]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006640:	4313      	orrs	r3, r2
 8006642:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006644:	e001      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3324      	adds	r3, #36	; 0x24
 800665a:	2102      	movs	r1, #2
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fc0b 	bl	8006e78 <RCCEx_PLL3_Config>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d033      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800667c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006680:	d017      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006686:	d811      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800668c:	d013      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800668e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006692:	d80b      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d010      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8006698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669c:	d106      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800669e:	4b0e      	ldr	r3, [pc, #56]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	4a0d      	ldr	r2, [pc, #52]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80066a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80066aa:	e007      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	75fb      	strb	r3, [r7, #23]
      break;
 80066b0:	e004      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80066b2:	bf00      	nop
 80066b4:	e002      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80066b6:	bf00      	nop
 80066b8:	e000      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80066ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10c      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066c2:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80066c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ce:	4902      	ldr	r1, [pc, #8]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	654b      	str	r3, [r1, #84]	; 0x54
 80066d4:	e004      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80066d6:	bf00      	nop
 80066d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066ec:	4b29      	ldr	r3, [pc, #164]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066f8:	4926      	ldr	r1, [pc, #152]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d008      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800670a:	4b22      	ldr	r3, [pc, #136]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800670c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006716:	491f      	ldr	r1, [pc, #124]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006718:	4313      	orrs	r3, r2
 800671a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00d      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006728:	4b1a      	ldr	r3, [pc, #104]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	4a19      	ldr	r2, [pc, #100]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800672e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006732:	6113      	str	r3, [r2, #16]
 8006734:	4b17      	ldr	r3, [pc, #92]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800673e:	4915      	ldr	r1, [pc, #84]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006740:	4313      	orrs	r3, r2
 8006742:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	da08      	bge.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800674c:	4b11      	ldr	r3, [pc, #68]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800674e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006750:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006758:	490e      	ldr	r1, [pc, #56]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800675a:	4313      	orrs	r3, r2
 800675c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d009      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800676a:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006778:	4906      	ldr	r1, [pc, #24]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800677a:	4313      	orrs	r3, r2
 800677c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800677e:	7dbb      	ldrb	r3, [r7, #22]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	e000      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	58024400 	.word	0x58024400

08006798 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800679c:	f7ff f8a6 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 80067a0:	4602      	mov	r2, r0
 80067a2:	4b06      	ldr	r3, [pc, #24]	; (80067bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	091b      	lsrs	r3, r3, #4
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	4904      	ldr	r1, [pc, #16]	; (80067c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80067ae:	5ccb      	ldrb	r3, [r1, r3]
 80067b0:	f003 031f 	and.w	r3, r3, #31
 80067b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	58024400 	.word	0x58024400
 80067c0:	0800a0c8 	.word	0x0800a0c8

080067c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b089      	sub	sp, #36	; 0x24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067cc:	4ba1      	ldr	r3, [pc, #644]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80067d6:	4b9f      	ldr	r3, [pc, #636]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	0b1b      	lsrs	r3, r3, #12
 80067dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80067e2:	4b9c      	ldr	r3, [pc, #624]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	091b      	lsrs	r3, r3, #4
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80067ee:	4b99      	ldr	r3, [pc, #612]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f2:	08db      	lsrs	r3, r3, #3
 80067f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	fb02 f303 	mul.w	r3, r2, r3
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006806:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8111 	beq.w	8006a34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b02      	cmp	r3, #2
 8006816:	f000 8083 	beq.w	8006920 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b02      	cmp	r3, #2
 800681e:	f200 80a1 	bhi.w	8006964 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d056      	beq.n	80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800682e:	e099      	b.n	8006964 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006830:	4b88      	ldr	r3, [pc, #544]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d02d      	beq.n	8006898 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800683c:	4b85      	ldr	r3, [pc, #532]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	08db      	lsrs	r3, r3, #3
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	4a84      	ldr	r2, [pc, #528]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006848:	fa22 f303 	lsr.w	r3, r2, r3
 800684c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	ee07 3a90 	vmov	s15, r3
 8006854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006866:	4b7b      	ldr	r3, [pc, #492]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006876:	ed97 6a03 	vldr	s12, [r7, #12]
 800687a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800687e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800688a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006892:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006896:	e087      	b.n	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80068a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068aa:	4b6a      	ldr	r3, [pc, #424]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80068be:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068da:	e065      	b.n	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ee:	4b59      	ldr	r3, [pc, #356]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006902:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800691e:	e043      	b.n	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800692e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006932:	4b48      	ldr	r3, [pc, #288]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006942:	ed97 6a03 	vldr	s12, [r7, #12]
 8006946:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800694a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800694e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800695e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006962:	e021      	b.n	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006976:	4b37      	ldr	r3, [pc, #220]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006986:	ed97 6a03 	vldr	s12, [r7, #12]
 800698a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800698e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800699a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800699e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80069a8:	4b2a      	ldr	r3, [pc, #168]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	0a5b      	lsrs	r3, r3, #9
 80069ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80069c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ce:	ee17 2a90 	vmov	r2, s15
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80069d6:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	0c1b      	lsrs	r3, r3, #16
 80069dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e0:	ee07 3a90 	vmov	s15, r3
 80069e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80069f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069fc:	ee17 2a90 	vmov	r2, s15
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006a04:	4b13      	ldr	r3, [pc, #76]	; (8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	0e1b      	lsrs	r3, r3, #24
 8006a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a2a:	ee17 2a90 	vmov	r2, s15
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a32:	e008      	b.n	8006a46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	609a      	str	r2, [r3, #8]
}
 8006a46:	bf00      	nop
 8006a48:	3724      	adds	r7, #36	; 0x24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	58024400 	.word	0x58024400
 8006a58:	03d09000 	.word	0x03d09000
 8006a5c:	46000000 	.word	0x46000000
 8006a60:	4c742400 	.word	0x4c742400
 8006a64:	4a742400 	.word	0x4a742400
 8006a68:	4af42400 	.word	0x4af42400

08006a6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b089      	sub	sp, #36	; 0x24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a74:	4ba1      	ldr	r3, [pc, #644]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a78:	f003 0303 	and.w	r3, r3, #3
 8006a7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006a7e:	4b9f      	ldr	r3, [pc, #636]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a82:	0d1b      	lsrs	r3, r3, #20
 8006a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a8a:	4b9c      	ldr	r3, [pc, #624]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8e:	0a1b      	lsrs	r3, r3, #8
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a96:	4b99      	ldr	r3, [pc, #612]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9a:	08db      	lsrs	r3, r3, #3
 8006a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	fb02 f303 	mul.w	r3, r2, r3
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 8111 	beq.w	8006cdc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	f000 8083 	beq.w	8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	f200 80a1 	bhi.w	8006c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d056      	beq.n	8006b84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ad6:	e099      	b.n	8006c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ad8:	4b88      	ldr	r3, [pc, #544]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d02d      	beq.n	8006b40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ae4:	4b85      	ldr	r3, [pc, #532]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	08db      	lsrs	r3, r3, #3
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	4a84      	ldr	r2, [pc, #528]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006af0:	fa22 f303 	lsr.w	r3, r2, r3
 8006af4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	ee07 3a90 	vmov	s15, r3
 8006afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b0e:	4b7b      	ldr	r3, [pc, #492]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b3e:	e087      	b.n	8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b52:	4b6a      	ldr	r3, [pc, #424]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b82:	e065      	b.n	8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b96:	4b59      	ldr	r3, [pc, #356]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006baa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bc6:	e043      	b.n	8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bda:	4b48      	ldr	r3, [pc, #288]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c0a:	e021      	b.n	8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1e:	4b37      	ldr	r3, [pc, #220]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006c50:	4b2a      	ldr	r3, [pc, #168]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c54:	0a5b      	lsrs	r3, r3, #9
 8006c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c76:	ee17 2a90 	vmov	r2, s15
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006c7e:	4b1f      	ldr	r3, [pc, #124]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	0c1b      	lsrs	r3, r3, #16
 8006c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c88:	ee07 3a90 	vmov	s15, r3
 8006c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ca4:	ee17 2a90 	vmov	r2, s15
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006cac:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	0e1b      	lsrs	r3, r3, #24
 8006cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd2:	ee17 2a90 	vmov	r2, s15
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006cda:	e008      	b.n	8006cee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	609a      	str	r2, [r3, #8]
}
 8006cee:	bf00      	nop
 8006cf0:	3724      	adds	r7, #36	; 0x24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	58024400 	.word	0x58024400
 8006d00:	03d09000 	.word	0x03d09000
 8006d04:	46000000 	.word	0x46000000
 8006d08:	4c742400 	.word	0x4c742400
 8006d0c:	4a742400 	.word	0x4a742400
 8006d10:	4af42400 	.word	0x4af42400

08006d14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d22:	4b53      	ldr	r3, [pc, #332]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d101      	bne.n	8006d32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e099      	b.n	8006e66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d32:	4b4f      	ldr	r3, [pc, #316]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a4e      	ldr	r2, [pc, #312]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006d38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d3e:	f7fa fb69 	bl	8001414 <HAL_GetTick>
 8006d42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d44:	e008      	b.n	8006d58 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d46:	f7fa fb65 	bl	8001414 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e086      	b.n	8006e66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d58:	4b45      	ldr	r3, [pc, #276]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1f0      	bne.n	8006d46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d64:	4b42      	ldr	r3, [pc, #264]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	031b      	lsls	r3, r3, #12
 8006d72:	493f      	ldr	r1, [pc, #252]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	628b      	str	r3, [r1, #40]	; 0x28
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	025b      	lsls	r3, r3, #9
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	041b      	lsls	r3, r3, #16
 8006d96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	061b      	lsls	r3, r3, #24
 8006da4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006da8:	4931      	ldr	r1, [pc, #196]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006dae:	4b30      	ldr	r3, [pc, #192]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	492d      	ldr	r1, [pc, #180]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006dc0:	4b2b      	ldr	r3, [pc, #172]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	f023 0220 	bic.w	r2, r3, #32
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	4928      	ldr	r1, [pc, #160]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006dd2:	4b27      	ldr	r3, [pc, #156]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd6:	4a26      	ldr	r2, [pc, #152]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006dd8:	f023 0310 	bic.w	r3, r3, #16
 8006ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006dde:	4b24      	ldr	r3, [pc, #144]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006de2:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <RCCEx_PLL2_Config+0x160>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	69d2      	ldr	r2, [r2, #28]
 8006dea:	00d2      	lsls	r2, r2, #3
 8006dec:	4920      	ldr	r1, [pc, #128]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006df2:	4b1f      	ldr	r3, [pc, #124]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	4a1e      	ldr	r2, [pc, #120]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006df8:	f043 0310 	orr.w	r3, r3, #16
 8006dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d106      	bne.n	8006e12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e04:	4b1a      	ldr	r3, [pc, #104]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4a19      	ldr	r2, [pc, #100]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e10:	e00f      	b.n	8006e32 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d106      	bne.n	8006e26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e18:	4b15      	ldr	r3, [pc, #84]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	4a14      	ldr	r2, [pc, #80]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e24:	e005      	b.n	8006e32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e26:	4b12      	ldr	r3, [pc, #72]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	4a11      	ldr	r2, [pc, #68]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006e2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e32:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a0e      	ldr	r2, [pc, #56]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006e38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e3e:	f7fa fae9 	bl	8001414 <HAL_GetTick>
 8006e42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e44:	e008      	b.n	8006e58 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e46:	f7fa fae5 	bl	8001414 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d901      	bls.n	8006e58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e006      	b.n	8006e66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e58:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <RCCEx_PLL2_Config+0x15c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0f0      	beq.n	8006e46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	58024400 	.word	0x58024400
 8006e74:	ffff0007 	.word	0xffff0007

08006e78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e86:	4b53      	ldr	r3, [pc, #332]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d101      	bne.n	8006e96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e099      	b.n	8006fca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e96:	4b4f      	ldr	r3, [pc, #316]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a4e      	ldr	r2, [pc, #312]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ea2:	f7fa fab7 	bl	8001414 <HAL_GetTick>
 8006ea6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ea8:	e008      	b.n	8006ebc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006eaa:	f7fa fab3 	bl	8001414 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e086      	b.n	8006fca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ebc:	4b45      	ldr	r3, [pc, #276]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f0      	bne.n	8006eaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ec8:	4b42      	ldr	r3, [pc, #264]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ecc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	051b      	lsls	r3, r3, #20
 8006ed6:	493f      	ldr	r1, [pc, #252]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	628b      	str	r3, [r1, #40]	; 0x28
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	025b      	lsls	r3, r3, #9
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	041b      	lsls	r3, r3, #16
 8006efa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	061b      	lsls	r3, r3, #24
 8006f08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f0c:	4931      	ldr	r1, [pc, #196]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f12:	4b30      	ldr	r3, [pc, #192]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	492d      	ldr	r1, [pc, #180]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f24:	4b2b      	ldr	r3, [pc, #172]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	4928      	ldr	r1, [pc, #160]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f36:	4b27      	ldr	r3, [pc, #156]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3a:	4a26      	ldr	r2, [pc, #152]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f42:	4b24      	ldr	r3, [pc, #144]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f46:	4b24      	ldr	r3, [pc, #144]	; (8006fd8 <RCCEx_PLL3_Config+0x160>)
 8006f48:	4013      	ands	r3, r2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	69d2      	ldr	r2, [r2, #28]
 8006f4e:	00d2      	lsls	r2, r2, #3
 8006f50:	4920      	ldr	r1, [pc, #128]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f56:	4b1f      	ldr	r3, [pc, #124]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	4a1e      	ldr	r2, [pc, #120]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d106      	bne.n	8006f76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f68:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f74:	e00f      	b.n	8006f96 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d106      	bne.n	8006f8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f7c:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	4a14      	ldr	r2, [pc, #80]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f88:	e005      	b.n	8006f96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f8a:	4b12      	ldr	r3, [pc, #72]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	4a11      	ldr	r2, [pc, #68]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f96:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a0e      	ldr	r2, [pc, #56]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fa2:	f7fa fa37 	bl	8001414 <HAL_GetTick>
 8006fa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fa8:	e008      	b.n	8006fbc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006faa:	f7fa fa33 	bl	8001414 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d901      	bls.n	8006fbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e006      	b.n	8006fca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fbc:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <RCCEx_PLL3_Config+0x15c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f0      	beq.n	8006faa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	58024400 	.word	0x58024400
 8006fd8:	ffff0007 	.word	0xffff0007

08006fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e042      	b.n	8007074 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d106      	bne.n	8007006 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7f9 ff79 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2224      	movs	r2, #36	; 0x24
 800700a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0201 	bic.w	r2, r2, #1
 800701c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fc7c 	bl	800791c <UART_SetConfig>
 8007024:	4603      	mov	r3, r0
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e022      	b.n	8007074 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 fadc 	bl	80085f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800704a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800705a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f042 0201 	orr.w	r2, r2, #1
 800706a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 fb63 	bl	8008738 <UART_CheckIdleState>
 8007072:	4603      	mov	r3, r0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08a      	sub	sp, #40	; 0x28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007090:	2b20      	cmp	r3, #32
 8007092:	d17a      	bne.n	800718a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <HAL_UART_Transmit_DMA+0x24>
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e073      	b.n	800718c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d101      	bne.n	80070b2 <HAL_UART_Transmit_DMA+0x36>
 80070ae:	2302      	movs	r3, #2
 80070b0:	e06c      	b.n	800718c <HAL_UART_Transmit_DMA+0x110>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	88fa      	ldrh	r2, [r7, #6]
 80070c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	88fa      	ldrh	r2, [r7, #6]
 80070cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2221      	movs	r2, #33	; 0x21
 80070dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d02c      	beq.n	8007142 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070ec:	4a29      	ldr	r2, [pc, #164]	; (8007194 <HAL_UART_Transmit_DMA+0x118>)
 80070ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070f4:	4a28      	ldr	r2, [pc, #160]	; (8007198 <HAL_UART_Transmit_DMA+0x11c>)
 80070f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070fc:	4a27      	ldr	r2, [pc, #156]	; (800719c <HAL_UART_Transmit_DMA+0x120>)
 80070fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007104:	2200      	movs	r2, #0
 8007106:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007110:	4619      	mov	r1, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3328      	adds	r3, #40	; 0x28
 8007118:	461a      	mov	r2, r3
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	f7fb f812 	bl	8002144 <HAL_DMA_Start_IT>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00d      	beq.n	8007142 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2210      	movs	r2, #16
 800712a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2220      	movs	r2, #32
 800713a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e024      	b.n	800718c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2240      	movs	r2, #64	; 0x40
 8007148:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3308      	adds	r3, #8
 8007158:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	613b      	str	r3, [r7, #16]
   return(result);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3308      	adds	r3, #8
 8007170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007172:	623a      	str	r2, [r7, #32]
 8007174:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	69f9      	ldr	r1, [r7, #28]
 8007178:	6a3a      	ldr	r2, [r7, #32]
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e5      	bne.n	8007152 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	e000      	b.n	800718c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800718a:	2302      	movs	r3, #2
  }
}
 800718c:	4618      	mov	r0, r3
 800718e:	3728      	adds	r7, #40	; 0x28
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	08008aad 	.word	0x08008aad
 8007198:	08008b43 	.word	0x08008b43
 800719c:	08008b5f 	.word	0x08008b5f

080071a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b0ba      	sub	sp, #232	; 0xe8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80071ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80071ce:	4013      	ands	r3, r2
 80071d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80071d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d11b      	bne.n	8007214 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d015      	beq.n	8007214 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ec:	f003 0320 	and.w	r3, r3, #32
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d105      	bne.n	8007200 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d009      	beq.n	8007214 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 835a 	beq.w	80078be <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
      }
      return;
 8007212:	e354      	b.n	80078be <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 811f 	beq.w	800745c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800721e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007222:	4b8b      	ldr	r3, [pc, #556]	; (8007450 <HAL_UART_IRQHandler+0x2b0>)
 8007224:	4013      	ands	r3, r2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d106      	bne.n	8007238 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800722a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800722e:	4b89      	ldr	r3, [pc, #548]	; (8007454 <HAL_UART_IRQHandler+0x2b4>)
 8007230:	4013      	ands	r3, r2
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 8112 	beq.w	800745c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d011      	beq.n	8007268 <HAL_UART_IRQHandler+0xc8>
 8007244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2201      	movs	r2, #1
 8007256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800725e:	f043 0201 	orr.w	r2, r3, #1
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d011      	beq.n	8007298 <HAL_UART_IRQHandler+0xf8>
 8007274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2202      	movs	r2, #2
 8007286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800728e:	f043 0204 	orr.w	r2, r3, #4
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d011      	beq.n	80072c8 <HAL_UART_IRQHandler+0x128>
 80072a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2204      	movs	r2, #4
 80072b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072be:	f043 0202 	orr.w	r2, r3, #2
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d017      	beq.n	8007304 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d8:	f003 0320 	and.w	r3, r3, #32
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d105      	bne.n	80072ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80072e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80072e4:	4b5a      	ldr	r3, [pc, #360]	; (8007450 <HAL_UART_IRQHandler+0x2b0>)
 80072e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00b      	beq.n	8007304 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2208      	movs	r2, #8
 80072f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072fa:	f043 0208 	orr.w	r2, r3, #8
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800730c:	2b00      	cmp	r3, #0
 800730e:	d012      	beq.n	8007336 <HAL_UART_IRQHandler+0x196>
 8007310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00c      	beq.n	8007336 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007324:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800732c:	f043 0220 	orr.w	r2, r3, #32
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 82c0 	beq.w	80078c2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b00      	cmp	r3, #0
 800734c:	d013      	beq.n	8007376 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800734e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b00      	cmp	r3, #0
 8007358:	d105      	bne.n	8007366 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800735a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800735e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d007      	beq.n	8007376 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800737c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b40      	cmp	r3, #64	; 0x40
 800738c:	d005      	beq.n	800739a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800738e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007392:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007396:	2b00      	cmp	r3, #0
 8007398:	d04f      	beq.n	800743a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 fb20 	bl	80089e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073aa:	2b40      	cmp	r3, #64	; 0x40
 80073ac:	d141      	bne.n	8007432 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3308      	adds	r3, #8
 80073b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3308      	adds	r3, #8
 80073d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1d9      	bne.n	80073ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d013      	beq.n	800742a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007406:	4a14      	ldr	r2, [pc, #80]	; (8007458 <HAL_UART_IRQHandler+0x2b8>)
 8007408:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740e:	4618      	mov	r0, r3
 8007410:	f7fb fc20 	bl	8002c54 <HAL_DMA_Abort_IT>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d017      	beq.n	800744a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800741e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007424:	4610      	mov	r0, r2
 8007426:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007428:	e00f      	b.n	800744a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fa60 	bl	80078f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007430:	e00b      	b.n	800744a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fa5c 	bl	80078f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007438:	e007      	b.n	800744a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa58 	bl	80078f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007448:	e23b      	b.n	80078c2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800744a:	bf00      	nop
    return;
 800744c:	e239      	b.n	80078c2 <HAL_UART_IRQHandler+0x722>
 800744e:	bf00      	nop
 8007450:	10000001 	.word	0x10000001
 8007454:	04000120 	.word	0x04000120
 8007458:	08008bdf 	.word	0x08008bdf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007460:	2b01      	cmp	r3, #1
 8007462:	f040 81ce 	bne.w	8007802 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746a:	f003 0310 	and.w	r3, r3, #16
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 81c7 	beq.w	8007802 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007478:	f003 0310 	and.w	r3, r3, #16
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 81c0 	beq.w	8007802 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2210      	movs	r2, #16
 8007488:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007494:	2b40      	cmp	r3, #64	; 0x40
 8007496:	f040 813b 	bne.w	8007710 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a8b      	ldr	r2, [pc, #556]	; (80076d0 <HAL_UART_IRQHandler+0x530>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d059      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a89      	ldr	r2, [pc, #548]	; (80076d4 <HAL_UART_IRQHandler+0x534>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d053      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a87      	ldr	r2, [pc, #540]	; (80076d8 <HAL_UART_IRQHandler+0x538>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d04d      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a85      	ldr	r2, [pc, #532]	; (80076dc <HAL_UART_IRQHandler+0x53c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d047      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a83      	ldr	r2, [pc, #524]	; (80076e0 <HAL_UART_IRQHandler+0x540>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d041      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a81      	ldr	r2, [pc, #516]	; (80076e4 <HAL_UART_IRQHandler+0x544>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d03b      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a7f      	ldr	r2, [pc, #508]	; (80076e8 <HAL_UART_IRQHandler+0x548>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d035      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a7d      	ldr	r2, [pc, #500]	; (80076ec <HAL_UART_IRQHandler+0x54c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d02f      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a7b      	ldr	r2, [pc, #492]	; (80076f0 <HAL_UART_IRQHandler+0x550>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d029      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a79      	ldr	r2, [pc, #484]	; (80076f4 <HAL_UART_IRQHandler+0x554>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d023      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a77      	ldr	r2, [pc, #476]	; (80076f8 <HAL_UART_IRQHandler+0x558>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d01d      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a75      	ldr	r2, [pc, #468]	; (80076fc <HAL_UART_IRQHandler+0x55c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d017      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a73      	ldr	r2, [pc, #460]	; (8007700 <HAL_UART_IRQHandler+0x560>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d011      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a71      	ldr	r2, [pc, #452]	; (8007704 <HAL_UART_IRQHandler+0x564>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00b      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a6f      	ldr	r2, [pc, #444]	; (8007708 <HAL_UART_IRQHandler+0x568>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d005      	beq.n	800755a <HAL_UART_IRQHandler+0x3ba>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a6d      	ldr	r2, [pc, #436]	; (800770c <HAL_UART_IRQHandler+0x56c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d105      	bne.n	8007566 <HAL_UART_IRQHandler+0x3c6>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	b29b      	uxth	r3, r3
 8007564:	e004      	b.n	8007570 <HAL_UART_IRQHandler+0x3d0>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	b29b      	uxth	r3, r3
 8007570:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 81a4 	beq.w	80078c6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007584:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007588:	429a      	cmp	r2, r3
 800758a:	f080 819c 	bcs.w	80078c6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075a2:	f000 8086 	beq.w	80076b2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075d4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1da      	bne.n	80075a6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3308      	adds	r3, #8
 80075f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007602:	f023 0301 	bic.w	r3, r3, #1
 8007606:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3308      	adds	r3, #8
 8007610:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007614:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007618:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800761c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e1      	bne.n	80075f0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800763c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800763e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3308      	adds	r3, #8
 800764c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007650:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007652:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007656:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800765e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e3      	bne.n	800762c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2220      	movs	r2, #32
 8007668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007682:	f023 0310 	bic.w	r3, r3, #16
 8007686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007694:	65bb      	str	r3, [r7, #88]	; 0x58
 8007696:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800769a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e4      	bne.n	8007672 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fa ffb3 	bl	8002618 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076be:	b29b      	uxth	r3, r3
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f91c 	bl	8007904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076cc:	e0fb      	b.n	80078c6 <HAL_UART_IRQHandler+0x726>
 80076ce:	bf00      	nop
 80076d0:	40020010 	.word	0x40020010
 80076d4:	40020028 	.word	0x40020028
 80076d8:	40020040 	.word	0x40020040
 80076dc:	40020058 	.word	0x40020058
 80076e0:	40020070 	.word	0x40020070
 80076e4:	40020088 	.word	0x40020088
 80076e8:	400200a0 	.word	0x400200a0
 80076ec:	400200b8 	.word	0x400200b8
 80076f0:	40020410 	.word	0x40020410
 80076f4:	40020428 	.word	0x40020428
 80076f8:	40020440 	.word	0x40020440
 80076fc:	40020458 	.word	0x40020458
 8007700:	40020470 	.word	0x40020470
 8007704:	40020488 	.word	0x40020488
 8007708:	400204a0 	.word	0x400204a0
 800770c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800771c:	b29b      	uxth	r3, r3
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80cc 	beq.w	80078ca <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007732:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 80c7 	beq.w	80078ca <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800774a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007750:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800775e:	647b      	str	r3, [r7, #68]	; 0x44
 8007760:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800776c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e4      	bne.n	800773c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3308      	adds	r3, #8
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	623b      	str	r3, [r7, #32]
   return(result);
 8007782:	6a3a      	ldr	r2, [r7, #32]
 8007784:	4b54      	ldr	r3, [pc, #336]	; (80078d8 <HAL_UART_IRQHandler+0x738>)
 8007786:	4013      	ands	r3, r2
 8007788:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3308      	adds	r3, #8
 8007792:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007796:	633a      	str	r2, [r7, #48]	; 0x30
 8007798:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800779c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e3      	bne.n	8007772 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 0310 	bic.w	r3, r3, #16
 80077d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077e0:	61fb      	str	r3, [r7, #28]
 80077e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	69b9      	ldr	r1, [r7, #24]
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	617b      	str	r3, [r7, #20]
   return(result);
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e4      	bne.n	80077be <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f882 	bl	8007904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007800:	e063      	b.n	80078ca <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00e      	beq.n	800782c <HAL_UART_IRQHandler+0x68c>
 800780e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d008      	beq.n	800782c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007822:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 fa1b 	bl	8008c60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800782a:	e051      	b.n	80078d0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800782c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007834:	2b00      	cmp	r3, #0
 8007836:	d014      	beq.n	8007862 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800783c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007840:	2b00      	cmp	r3, #0
 8007842:	d105      	bne.n	8007850 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007854:	2b00      	cmp	r3, #0
 8007856:	d03a      	beq.n	80078ce <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	4798      	blx	r3
    }
    return;
 8007860:	e035      	b.n	80078ce <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <HAL_UART_IRQHandler+0x6e2>
 800786e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 f9c5 	bl	8008c0a <UART_EndTransmit_IT>
    return;
 8007880:	e026      	b.n	80078d0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d009      	beq.n	80078a2 <HAL_UART_IRQHandler+0x702>
 800788e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007892:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 f9f4 	bl	8008c88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078a0:	e016      	b.n	80078d0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80078a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d010      	beq.n	80078d0 <HAL_UART_IRQHandler+0x730>
 80078ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	da0c      	bge.n	80078d0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 f9dc 	bl	8008c74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078bc:	e008      	b.n	80078d0 <HAL_UART_IRQHandler+0x730>
      return;
 80078be:	bf00      	nop
 80078c0:	e006      	b.n	80078d0 <HAL_UART_IRQHandler+0x730>
    return;
 80078c2:	bf00      	nop
 80078c4:	e004      	b.n	80078d0 <HAL_UART_IRQHandler+0x730>
      return;
 80078c6:	bf00      	nop
 80078c8:	e002      	b.n	80078d0 <HAL_UART_IRQHandler+0x730>
      return;
 80078ca:	bf00      	nop
 80078cc:	e000      	b.n	80078d0 <HAL_UART_IRQHandler+0x730>
    return;
 80078ce:	bf00      	nop
  }
}
 80078d0:	37e8      	adds	r7, #232	; 0xe8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	effffffe 	.word	0xeffffffe

080078dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800791c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007920:	b092      	sub	sp, #72	; 0x48
 8007922:	af00      	add	r7, sp, #0
 8007924:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	431a      	orrs	r2, r3
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	431a      	orrs	r2, r3
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	4313      	orrs	r3, r2
 8007942:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	4bbe      	ldr	r3, [pc, #760]	; (8007c44 <UART_SetConfig+0x328>)
 800794c:	4013      	ands	r3, r2
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	6812      	ldr	r2, [r2, #0]
 8007952:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007954:	430b      	orrs	r3, r1
 8007956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4ab3      	ldr	r2, [pc, #716]	; (8007c48 <UART_SetConfig+0x32c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d004      	beq.n	8007988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007984:	4313      	orrs	r3, r2
 8007986:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	4baf      	ldr	r3, [pc, #700]	; (8007c4c <UART_SetConfig+0x330>)
 8007990:	4013      	ands	r3, r2
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	6812      	ldr	r2, [r2, #0]
 8007996:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007998:	430b      	orrs	r3, r1
 800799a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a2:	f023 010f 	bic.w	r1, r3, #15
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4aa6      	ldr	r2, [pc, #664]	; (8007c50 <UART_SetConfig+0x334>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d177      	bne.n	8007aac <UART_SetConfig+0x190>
 80079bc:	4ba5      	ldr	r3, [pc, #660]	; (8007c54 <UART_SetConfig+0x338>)
 80079be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079c4:	2b28      	cmp	r3, #40	; 0x28
 80079c6:	d86d      	bhi.n	8007aa4 <UART_SetConfig+0x188>
 80079c8:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <UART_SetConfig+0xb4>)
 80079ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ce:	bf00      	nop
 80079d0:	08007a75 	.word	0x08007a75
 80079d4:	08007aa5 	.word	0x08007aa5
 80079d8:	08007aa5 	.word	0x08007aa5
 80079dc:	08007aa5 	.word	0x08007aa5
 80079e0:	08007aa5 	.word	0x08007aa5
 80079e4:	08007aa5 	.word	0x08007aa5
 80079e8:	08007aa5 	.word	0x08007aa5
 80079ec:	08007aa5 	.word	0x08007aa5
 80079f0:	08007a7d 	.word	0x08007a7d
 80079f4:	08007aa5 	.word	0x08007aa5
 80079f8:	08007aa5 	.word	0x08007aa5
 80079fc:	08007aa5 	.word	0x08007aa5
 8007a00:	08007aa5 	.word	0x08007aa5
 8007a04:	08007aa5 	.word	0x08007aa5
 8007a08:	08007aa5 	.word	0x08007aa5
 8007a0c:	08007aa5 	.word	0x08007aa5
 8007a10:	08007a85 	.word	0x08007a85
 8007a14:	08007aa5 	.word	0x08007aa5
 8007a18:	08007aa5 	.word	0x08007aa5
 8007a1c:	08007aa5 	.word	0x08007aa5
 8007a20:	08007aa5 	.word	0x08007aa5
 8007a24:	08007aa5 	.word	0x08007aa5
 8007a28:	08007aa5 	.word	0x08007aa5
 8007a2c:	08007aa5 	.word	0x08007aa5
 8007a30:	08007a8d 	.word	0x08007a8d
 8007a34:	08007aa5 	.word	0x08007aa5
 8007a38:	08007aa5 	.word	0x08007aa5
 8007a3c:	08007aa5 	.word	0x08007aa5
 8007a40:	08007aa5 	.word	0x08007aa5
 8007a44:	08007aa5 	.word	0x08007aa5
 8007a48:	08007aa5 	.word	0x08007aa5
 8007a4c:	08007aa5 	.word	0x08007aa5
 8007a50:	08007a95 	.word	0x08007a95
 8007a54:	08007aa5 	.word	0x08007aa5
 8007a58:	08007aa5 	.word	0x08007aa5
 8007a5c:	08007aa5 	.word	0x08007aa5
 8007a60:	08007aa5 	.word	0x08007aa5
 8007a64:	08007aa5 	.word	0x08007aa5
 8007a68:	08007aa5 	.word	0x08007aa5
 8007a6c:	08007aa5 	.word	0x08007aa5
 8007a70:	08007a9d 	.word	0x08007a9d
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7a:	e326      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a82:	e322      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007a84:	2308      	movs	r3, #8
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a8a:	e31e      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007a8c:	2310      	movs	r3, #16
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a92:	e31a      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007a94:	2320      	movs	r3, #32
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9a:	e316      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007a9c:	2340      	movs	r3, #64	; 0x40
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa2:	e312      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007aa4:	2380      	movs	r3, #128	; 0x80
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aaa:	e30e      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a69      	ldr	r2, [pc, #420]	; (8007c58 <UART_SetConfig+0x33c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d130      	bne.n	8007b18 <UART_SetConfig+0x1fc>
 8007ab6:	4b67      	ldr	r3, [pc, #412]	; (8007c54 <UART_SetConfig+0x338>)
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	2b05      	cmp	r3, #5
 8007ac0:	d826      	bhi.n	8007b10 <UART_SetConfig+0x1f4>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <UART_SetConfig+0x1ac>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007ae1 	.word	0x08007ae1
 8007acc:	08007ae9 	.word	0x08007ae9
 8007ad0:	08007af1 	.word	0x08007af1
 8007ad4:	08007af9 	.word	0x08007af9
 8007ad8:	08007b01 	.word	0x08007b01
 8007adc:	08007b09 	.word	0x08007b09
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ae6:	e2f0      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007ae8:	2304      	movs	r3, #4
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aee:	e2ec      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007af0:	2308      	movs	r3, #8
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af6:	e2e8      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007af8:	2310      	movs	r3, #16
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afe:	e2e4      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007b00:	2320      	movs	r3, #32
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b06:	e2e0      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007b08:	2340      	movs	r3, #64	; 0x40
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0e:	e2dc      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007b10:	2380      	movs	r3, #128	; 0x80
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b16:	e2d8      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a4f      	ldr	r2, [pc, #316]	; (8007c5c <UART_SetConfig+0x340>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d130      	bne.n	8007b84 <UART_SetConfig+0x268>
 8007b22:	4b4c      	ldr	r3, [pc, #304]	; (8007c54 <UART_SetConfig+0x338>)
 8007b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	2b05      	cmp	r3, #5
 8007b2c:	d826      	bhi.n	8007b7c <UART_SetConfig+0x260>
 8007b2e:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <UART_SetConfig+0x218>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007b4d 	.word	0x08007b4d
 8007b38:	08007b55 	.word	0x08007b55
 8007b3c:	08007b5d 	.word	0x08007b5d
 8007b40:	08007b65 	.word	0x08007b65
 8007b44:	08007b6d 	.word	0x08007b6d
 8007b48:	08007b75 	.word	0x08007b75
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b52:	e2ba      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007b54:	2304      	movs	r3, #4
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b5a:	e2b6      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007b5c:	2308      	movs	r3, #8
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b62:	e2b2      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007b64:	2310      	movs	r3, #16
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b6a:	e2ae      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007b6c:	2320      	movs	r3, #32
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b72:	e2aa      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007b74:	2340      	movs	r3, #64	; 0x40
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7a:	e2a6      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007b7c:	2380      	movs	r3, #128	; 0x80
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b82:	e2a2      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a35      	ldr	r2, [pc, #212]	; (8007c60 <UART_SetConfig+0x344>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d130      	bne.n	8007bf0 <UART_SetConfig+0x2d4>
 8007b8e:	4b31      	ldr	r3, [pc, #196]	; (8007c54 <UART_SetConfig+0x338>)
 8007b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	2b05      	cmp	r3, #5
 8007b98:	d826      	bhi.n	8007be8 <UART_SetConfig+0x2cc>
 8007b9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <UART_SetConfig+0x284>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007bb9 	.word	0x08007bb9
 8007ba4:	08007bc1 	.word	0x08007bc1
 8007ba8:	08007bc9 	.word	0x08007bc9
 8007bac:	08007bd1 	.word	0x08007bd1
 8007bb0:	08007bd9 	.word	0x08007bd9
 8007bb4:	08007be1 	.word	0x08007be1
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bbe:	e284      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc6:	e280      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007bc8:	2308      	movs	r3, #8
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bce:	e27c      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bd6:	e278      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007bd8:	2320      	movs	r3, #32
 8007bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bde:	e274      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007be0:	2340      	movs	r3, #64	; 0x40
 8007be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be6:	e270      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007be8:	2380      	movs	r3, #128	; 0x80
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bee:	e26c      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a1b      	ldr	r2, [pc, #108]	; (8007c64 <UART_SetConfig+0x348>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d142      	bne.n	8007c80 <UART_SetConfig+0x364>
 8007bfa:	4b16      	ldr	r3, [pc, #88]	; (8007c54 <UART_SetConfig+0x338>)
 8007bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	2b05      	cmp	r3, #5
 8007c04:	d838      	bhi.n	8007c78 <UART_SetConfig+0x35c>
 8007c06:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <UART_SetConfig+0x2f0>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c25 	.word	0x08007c25
 8007c10:	08007c2d 	.word	0x08007c2d
 8007c14:	08007c35 	.word	0x08007c35
 8007c18:	08007c3d 	.word	0x08007c3d
 8007c1c:	08007c69 	.word	0x08007c69
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	2300      	movs	r3, #0
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2a:	e24e      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007c2c:	2304      	movs	r3, #4
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c32:	e24a      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007c34:	2308      	movs	r3, #8
 8007c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c3a:	e246      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007c3c:	2310      	movs	r3, #16
 8007c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c42:	e242      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007c44:	cfff69f3 	.word	0xcfff69f3
 8007c48:	58000c00 	.word	0x58000c00
 8007c4c:	11fff4ff 	.word	0x11fff4ff
 8007c50:	40011000 	.word	0x40011000
 8007c54:	58024400 	.word	0x58024400
 8007c58:	40004400 	.word	0x40004400
 8007c5c:	40004800 	.word	0x40004800
 8007c60:	40004c00 	.word	0x40004c00
 8007c64:	40005000 	.word	0x40005000
 8007c68:	2320      	movs	r3, #32
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e22c      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007c70:	2340      	movs	r3, #64	; 0x40
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e228      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007c78:	2380      	movs	r3, #128	; 0x80
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e224      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4ab1      	ldr	r2, [pc, #708]	; (8007f4c <UART_SetConfig+0x630>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d176      	bne.n	8007d78 <UART_SetConfig+0x45c>
 8007c8a:	4bb1      	ldr	r3, [pc, #708]	; (8007f50 <UART_SetConfig+0x634>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c92:	2b28      	cmp	r3, #40	; 0x28
 8007c94:	d86c      	bhi.n	8007d70 <UART_SetConfig+0x454>
 8007c96:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <UART_SetConfig+0x380>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007d41 	.word	0x08007d41
 8007ca0:	08007d71 	.word	0x08007d71
 8007ca4:	08007d71 	.word	0x08007d71
 8007ca8:	08007d71 	.word	0x08007d71
 8007cac:	08007d71 	.word	0x08007d71
 8007cb0:	08007d71 	.word	0x08007d71
 8007cb4:	08007d71 	.word	0x08007d71
 8007cb8:	08007d71 	.word	0x08007d71
 8007cbc:	08007d49 	.word	0x08007d49
 8007cc0:	08007d71 	.word	0x08007d71
 8007cc4:	08007d71 	.word	0x08007d71
 8007cc8:	08007d71 	.word	0x08007d71
 8007ccc:	08007d71 	.word	0x08007d71
 8007cd0:	08007d71 	.word	0x08007d71
 8007cd4:	08007d71 	.word	0x08007d71
 8007cd8:	08007d71 	.word	0x08007d71
 8007cdc:	08007d51 	.word	0x08007d51
 8007ce0:	08007d71 	.word	0x08007d71
 8007ce4:	08007d71 	.word	0x08007d71
 8007ce8:	08007d71 	.word	0x08007d71
 8007cec:	08007d71 	.word	0x08007d71
 8007cf0:	08007d71 	.word	0x08007d71
 8007cf4:	08007d71 	.word	0x08007d71
 8007cf8:	08007d71 	.word	0x08007d71
 8007cfc:	08007d59 	.word	0x08007d59
 8007d00:	08007d71 	.word	0x08007d71
 8007d04:	08007d71 	.word	0x08007d71
 8007d08:	08007d71 	.word	0x08007d71
 8007d0c:	08007d71 	.word	0x08007d71
 8007d10:	08007d71 	.word	0x08007d71
 8007d14:	08007d71 	.word	0x08007d71
 8007d18:	08007d71 	.word	0x08007d71
 8007d1c:	08007d61 	.word	0x08007d61
 8007d20:	08007d71 	.word	0x08007d71
 8007d24:	08007d71 	.word	0x08007d71
 8007d28:	08007d71 	.word	0x08007d71
 8007d2c:	08007d71 	.word	0x08007d71
 8007d30:	08007d71 	.word	0x08007d71
 8007d34:	08007d71 	.word	0x08007d71
 8007d38:	08007d71 	.word	0x08007d71
 8007d3c:	08007d69 	.word	0x08007d69
 8007d40:	2301      	movs	r3, #1
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d46:	e1c0      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4e:	e1bc      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d56:	e1b8      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d5e:	e1b4      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007d60:	2320      	movs	r3, #32
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d66:	e1b0      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007d68:	2340      	movs	r3, #64	; 0x40
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6e:	e1ac      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007d70:	2380      	movs	r3, #128	; 0x80
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d76:	e1a8      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a75      	ldr	r2, [pc, #468]	; (8007f54 <UART_SetConfig+0x638>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d130      	bne.n	8007de4 <UART_SetConfig+0x4c8>
 8007d82:	4b73      	ldr	r3, [pc, #460]	; (8007f50 <UART_SetConfig+0x634>)
 8007d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	2b05      	cmp	r3, #5
 8007d8c:	d826      	bhi.n	8007ddc <UART_SetConfig+0x4c0>
 8007d8e:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <UART_SetConfig+0x478>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007dad 	.word	0x08007dad
 8007d98:	08007db5 	.word	0x08007db5
 8007d9c:	08007dbd 	.word	0x08007dbd
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08007dcd 	.word	0x08007dcd
 8007da8:	08007dd5 	.word	0x08007dd5
 8007dac:	2300      	movs	r3, #0
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db2:	e18a      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007db4:	2304      	movs	r3, #4
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dba:	e186      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dc2:	e182      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007dc4:	2310      	movs	r3, #16
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dca:	e17e      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007dcc:	2320      	movs	r3, #32
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd2:	e17a      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007dd4:	2340      	movs	r3, #64	; 0x40
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dda:	e176      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007ddc:	2380      	movs	r3, #128	; 0x80
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de2:	e172      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a5b      	ldr	r2, [pc, #364]	; (8007f58 <UART_SetConfig+0x63c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d130      	bne.n	8007e50 <UART_SetConfig+0x534>
 8007dee:	4b58      	ldr	r3, [pc, #352]	; (8007f50 <UART_SetConfig+0x634>)
 8007df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	2b05      	cmp	r3, #5
 8007df8:	d826      	bhi.n	8007e48 <UART_SetConfig+0x52c>
 8007dfa:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <UART_SetConfig+0x4e4>)
 8007dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e00:	08007e19 	.word	0x08007e19
 8007e04:	08007e21 	.word	0x08007e21
 8007e08:	08007e29 	.word	0x08007e29
 8007e0c:	08007e31 	.word	0x08007e31
 8007e10:	08007e39 	.word	0x08007e39
 8007e14:	08007e41 	.word	0x08007e41
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1e:	e154      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007e20:	2304      	movs	r3, #4
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e26:	e150      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007e28:	2308      	movs	r3, #8
 8007e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2e:	e14c      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007e30:	2310      	movs	r3, #16
 8007e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e36:	e148      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007e38:	2320      	movs	r3, #32
 8007e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e3e:	e144      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007e40:	2340      	movs	r3, #64	; 0x40
 8007e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e46:	e140      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007e48:	2380      	movs	r3, #128	; 0x80
 8007e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4e:	e13c      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a41      	ldr	r2, [pc, #260]	; (8007f5c <UART_SetConfig+0x640>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	f040 8082 	bne.w	8007f60 <UART_SetConfig+0x644>
 8007e5c:	4b3c      	ldr	r3, [pc, #240]	; (8007f50 <UART_SetConfig+0x634>)
 8007e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e64:	2b28      	cmp	r3, #40	; 0x28
 8007e66:	d86d      	bhi.n	8007f44 <UART_SetConfig+0x628>
 8007e68:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <UART_SetConfig+0x554>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007f15 	.word	0x08007f15
 8007e74:	08007f45 	.word	0x08007f45
 8007e78:	08007f45 	.word	0x08007f45
 8007e7c:	08007f45 	.word	0x08007f45
 8007e80:	08007f45 	.word	0x08007f45
 8007e84:	08007f45 	.word	0x08007f45
 8007e88:	08007f45 	.word	0x08007f45
 8007e8c:	08007f45 	.word	0x08007f45
 8007e90:	08007f1d 	.word	0x08007f1d
 8007e94:	08007f45 	.word	0x08007f45
 8007e98:	08007f45 	.word	0x08007f45
 8007e9c:	08007f45 	.word	0x08007f45
 8007ea0:	08007f45 	.word	0x08007f45
 8007ea4:	08007f45 	.word	0x08007f45
 8007ea8:	08007f45 	.word	0x08007f45
 8007eac:	08007f45 	.word	0x08007f45
 8007eb0:	08007f25 	.word	0x08007f25
 8007eb4:	08007f45 	.word	0x08007f45
 8007eb8:	08007f45 	.word	0x08007f45
 8007ebc:	08007f45 	.word	0x08007f45
 8007ec0:	08007f45 	.word	0x08007f45
 8007ec4:	08007f45 	.word	0x08007f45
 8007ec8:	08007f45 	.word	0x08007f45
 8007ecc:	08007f45 	.word	0x08007f45
 8007ed0:	08007f2d 	.word	0x08007f2d
 8007ed4:	08007f45 	.word	0x08007f45
 8007ed8:	08007f45 	.word	0x08007f45
 8007edc:	08007f45 	.word	0x08007f45
 8007ee0:	08007f45 	.word	0x08007f45
 8007ee4:	08007f45 	.word	0x08007f45
 8007ee8:	08007f45 	.word	0x08007f45
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f35 	.word	0x08007f35
 8007ef4:	08007f45 	.word	0x08007f45
 8007ef8:	08007f45 	.word	0x08007f45
 8007efc:	08007f45 	.word	0x08007f45
 8007f00:	08007f45 	.word	0x08007f45
 8007f04:	08007f45 	.word	0x08007f45
 8007f08:	08007f45 	.word	0x08007f45
 8007f0c:	08007f45 	.word	0x08007f45
 8007f10:	08007f3d 	.word	0x08007f3d
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1a:	e0d6      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f22:	e0d2      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007f24:	2308      	movs	r3, #8
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2a:	e0ce      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f32:	e0ca      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007f34:	2320      	movs	r3, #32
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3a:	e0c6      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007f3c:	2340      	movs	r3, #64	; 0x40
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f42:	e0c2      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007f44:	2380      	movs	r3, #128	; 0x80
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4a:	e0be      	b.n	80080ca <UART_SetConfig+0x7ae>
 8007f4c:	40011400 	.word	0x40011400
 8007f50:	58024400 	.word	0x58024400
 8007f54:	40007800 	.word	0x40007800
 8007f58:	40007c00 	.word	0x40007c00
 8007f5c:	40011800 	.word	0x40011800
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4aad      	ldr	r2, [pc, #692]	; (800821c <UART_SetConfig+0x900>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d176      	bne.n	8008058 <UART_SetConfig+0x73c>
 8007f6a:	4bad      	ldr	r3, [pc, #692]	; (8008220 <UART_SetConfig+0x904>)
 8007f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f72:	2b28      	cmp	r3, #40	; 0x28
 8007f74:	d86c      	bhi.n	8008050 <UART_SetConfig+0x734>
 8007f76:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <UART_SetConfig+0x660>)
 8007f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7c:	08008021 	.word	0x08008021
 8007f80:	08008051 	.word	0x08008051
 8007f84:	08008051 	.word	0x08008051
 8007f88:	08008051 	.word	0x08008051
 8007f8c:	08008051 	.word	0x08008051
 8007f90:	08008051 	.word	0x08008051
 8007f94:	08008051 	.word	0x08008051
 8007f98:	08008051 	.word	0x08008051
 8007f9c:	08008029 	.word	0x08008029
 8007fa0:	08008051 	.word	0x08008051
 8007fa4:	08008051 	.word	0x08008051
 8007fa8:	08008051 	.word	0x08008051
 8007fac:	08008051 	.word	0x08008051
 8007fb0:	08008051 	.word	0x08008051
 8007fb4:	08008051 	.word	0x08008051
 8007fb8:	08008051 	.word	0x08008051
 8007fbc:	08008031 	.word	0x08008031
 8007fc0:	08008051 	.word	0x08008051
 8007fc4:	08008051 	.word	0x08008051
 8007fc8:	08008051 	.word	0x08008051
 8007fcc:	08008051 	.word	0x08008051
 8007fd0:	08008051 	.word	0x08008051
 8007fd4:	08008051 	.word	0x08008051
 8007fd8:	08008051 	.word	0x08008051
 8007fdc:	08008039 	.word	0x08008039
 8007fe0:	08008051 	.word	0x08008051
 8007fe4:	08008051 	.word	0x08008051
 8007fe8:	08008051 	.word	0x08008051
 8007fec:	08008051 	.word	0x08008051
 8007ff0:	08008051 	.word	0x08008051
 8007ff4:	08008051 	.word	0x08008051
 8007ff8:	08008051 	.word	0x08008051
 8007ffc:	08008041 	.word	0x08008041
 8008000:	08008051 	.word	0x08008051
 8008004:	08008051 	.word	0x08008051
 8008008:	08008051 	.word	0x08008051
 800800c:	08008051 	.word	0x08008051
 8008010:	08008051 	.word	0x08008051
 8008014:	08008051 	.word	0x08008051
 8008018:	08008051 	.word	0x08008051
 800801c:	08008049 	.word	0x08008049
 8008020:	2301      	movs	r3, #1
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008026:	e050      	b.n	80080ca <UART_SetConfig+0x7ae>
 8008028:	2304      	movs	r3, #4
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802e:	e04c      	b.n	80080ca <UART_SetConfig+0x7ae>
 8008030:	2308      	movs	r3, #8
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008036:	e048      	b.n	80080ca <UART_SetConfig+0x7ae>
 8008038:	2310      	movs	r3, #16
 800803a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803e:	e044      	b.n	80080ca <UART_SetConfig+0x7ae>
 8008040:	2320      	movs	r3, #32
 8008042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008046:	e040      	b.n	80080ca <UART_SetConfig+0x7ae>
 8008048:	2340      	movs	r3, #64	; 0x40
 800804a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804e:	e03c      	b.n	80080ca <UART_SetConfig+0x7ae>
 8008050:	2380      	movs	r3, #128	; 0x80
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008056:	e038      	b.n	80080ca <UART_SetConfig+0x7ae>
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a71      	ldr	r2, [pc, #452]	; (8008224 <UART_SetConfig+0x908>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d130      	bne.n	80080c4 <UART_SetConfig+0x7a8>
 8008062:	4b6f      	ldr	r3, [pc, #444]	; (8008220 <UART_SetConfig+0x904>)
 8008064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	2b05      	cmp	r3, #5
 800806c:	d826      	bhi.n	80080bc <UART_SetConfig+0x7a0>
 800806e:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <UART_SetConfig+0x758>)
 8008070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008074:	0800808d 	.word	0x0800808d
 8008078:	08008095 	.word	0x08008095
 800807c:	0800809d 	.word	0x0800809d
 8008080:	080080a5 	.word	0x080080a5
 8008084:	080080ad 	.word	0x080080ad
 8008088:	080080b5 	.word	0x080080b5
 800808c:	2302      	movs	r3, #2
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008092:	e01a      	b.n	80080ca <UART_SetConfig+0x7ae>
 8008094:	2304      	movs	r3, #4
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809a:	e016      	b.n	80080ca <UART_SetConfig+0x7ae>
 800809c:	2308      	movs	r3, #8
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a2:	e012      	b.n	80080ca <UART_SetConfig+0x7ae>
 80080a4:	2310      	movs	r3, #16
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080aa:	e00e      	b.n	80080ca <UART_SetConfig+0x7ae>
 80080ac:	2320      	movs	r3, #32
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b2:	e00a      	b.n	80080ca <UART_SetConfig+0x7ae>
 80080b4:	2340      	movs	r3, #64	; 0x40
 80080b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ba:	e006      	b.n	80080ca <UART_SetConfig+0x7ae>
 80080bc:	2380      	movs	r3, #128	; 0x80
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c2:	e002      	b.n	80080ca <UART_SetConfig+0x7ae>
 80080c4:	2380      	movs	r3, #128	; 0x80
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a55      	ldr	r2, [pc, #340]	; (8008224 <UART_SetConfig+0x908>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	f040 80f8 	bne.w	80082c6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080da:	2b20      	cmp	r3, #32
 80080dc:	dc46      	bgt.n	800816c <UART_SetConfig+0x850>
 80080de:	2b02      	cmp	r3, #2
 80080e0:	db75      	blt.n	80081ce <UART_SetConfig+0x8b2>
 80080e2:	3b02      	subs	r3, #2
 80080e4:	2b1e      	cmp	r3, #30
 80080e6:	d872      	bhi.n	80081ce <UART_SetConfig+0x8b2>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <UART_SetConfig+0x7d4>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008173 	.word	0x08008173
 80080f4:	080081cf 	.word	0x080081cf
 80080f8:	0800817b 	.word	0x0800817b
 80080fc:	080081cf 	.word	0x080081cf
 8008100:	080081cf 	.word	0x080081cf
 8008104:	080081cf 	.word	0x080081cf
 8008108:	0800818b 	.word	0x0800818b
 800810c:	080081cf 	.word	0x080081cf
 8008110:	080081cf 	.word	0x080081cf
 8008114:	080081cf 	.word	0x080081cf
 8008118:	080081cf 	.word	0x080081cf
 800811c:	080081cf 	.word	0x080081cf
 8008120:	080081cf 	.word	0x080081cf
 8008124:	080081cf 	.word	0x080081cf
 8008128:	0800819b 	.word	0x0800819b
 800812c:	080081cf 	.word	0x080081cf
 8008130:	080081cf 	.word	0x080081cf
 8008134:	080081cf 	.word	0x080081cf
 8008138:	080081cf 	.word	0x080081cf
 800813c:	080081cf 	.word	0x080081cf
 8008140:	080081cf 	.word	0x080081cf
 8008144:	080081cf 	.word	0x080081cf
 8008148:	080081cf 	.word	0x080081cf
 800814c:	080081cf 	.word	0x080081cf
 8008150:	080081cf 	.word	0x080081cf
 8008154:	080081cf 	.word	0x080081cf
 8008158:	080081cf 	.word	0x080081cf
 800815c:	080081cf 	.word	0x080081cf
 8008160:	080081cf 	.word	0x080081cf
 8008164:	080081cf 	.word	0x080081cf
 8008168:	080081c1 	.word	0x080081c1
 800816c:	2b40      	cmp	r3, #64	; 0x40
 800816e:	d02a      	beq.n	80081c6 <UART_SetConfig+0x8aa>
 8008170:	e02d      	b.n	80081ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008172:	f7fe fb11 	bl	8006798 <HAL_RCCEx_GetD3PCLK1Freq>
 8008176:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008178:	e02f      	b.n	80081da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800817a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe fb20 	bl	80067c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008188:	e027      	b.n	80081da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800818a:	f107 0318 	add.w	r3, r7, #24
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe fc6c 	bl	8006a6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008198:	e01f      	b.n	80081da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800819a:	4b21      	ldr	r3, [pc, #132]	; (8008220 <UART_SetConfig+0x904>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d009      	beq.n	80081ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081a6:	4b1e      	ldr	r3, [pc, #120]	; (8008220 <UART_SetConfig+0x904>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	08db      	lsrs	r3, r3, #3
 80081ac:	f003 0303 	and.w	r3, r3, #3
 80081b0:	4a1d      	ldr	r2, [pc, #116]	; (8008228 <UART_SetConfig+0x90c>)
 80081b2:	fa22 f303 	lsr.w	r3, r2, r3
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081b8:	e00f      	b.n	80081da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80081ba:	4b1b      	ldr	r3, [pc, #108]	; (8008228 <UART_SetConfig+0x90c>)
 80081bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081be:	e00c      	b.n	80081da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081c0:	4b1a      	ldr	r3, [pc, #104]	; (800822c <UART_SetConfig+0x910>)
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c4:	e009      	b.n	80081da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081cc:	e005      	b.n	80081da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80081d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 81ee 	beq.w	80085be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	4a12      	ldr	r2, [pc, #72]	; (8008230 <UART_SetConfig+0x914>)
 80081e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081ec:	461a      	mov	r2, r3
 80081ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80081f4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	4613      	mov	r3, r2
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	4413      	add	r3, r2
 8008200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008202:	429a      	cmp	r2, r3
 8008204:	d305      	bcc.n	8008212 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800820c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800820e:	429a      	cmp	r2, r3
 8008210:	d910      	bls.n	8008234 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008218:	e1d1      	b.n	80085be <UART_SetConfig+0xca2>
 800821a:	bf00      	nop
 800821c:	40011c00 	.word	0x40011c00
 8008220:	58024400 	.word	0x58024400
 8008224:	58000c00 	.word	0x58000c00
 8008228:	03d09000 	.word	0x03d09000
 800822c:	003d0900 	.word	0x003d0900
 8008230:	0800a0e0 	.word	0x0800a0e0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008236:	2200      	movs	r2, #0
 8008238:	60bb      	str	r3, [r7, #8]
 800823a:	60fa      	str	r2, [r7, #12]
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	4ac0      	ldr	r2, [pc, #768]	; (8008544 <UART_SetConfig+0xc28>)
 8008242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008246:	b29b      	uxth	r3, r3
 8008248:	2200      	movs	r2, #0
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	607a      	str	r2, [r7, #4]
 800824e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008256:	f7f8 f8ab 	bl	80003b0 <__aeabi_uldivmod>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4610      	mov	r0, r2
 8008260:	4619      	mov	r1, r3
 8008262:	f04f 0200 	mov.w	r2, #0
 8008266:	f04f 0300 	mov.w	r3, #0
 800826a:	020b      	lsls	r3, r1, #8
 800826c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008270:	0202      	lsls	r2, r0, #8
 8008272:	6979      	ldr	r1, [r7, #20]
 8008274:	6849      	ldr	r1, [r1, #4]
 8008276:	0849      	lsrs	r1, r1, #1
 8008278:	2000      	movs	r0, #0
 800827a:	460c      	mov	r4, r1
 800827c:	4605      	mov	r5, r0
 800827e:	eb12 0804 	adds.w	r8, r2, r4
 8008282:	eb43 0905 	adc.w	r9, r3, r5
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	469a      	mov	sl, r3
 800828e:	4693      	mov	fp, r2
 8008290:	4652      	mov	r2, sl
 8008292:	465b      	mov	r3, fp
 8008294:	4640      	mov	r0, r8
 8008296:	4649      	mov	r1, r9
 8008298:	f7f8 f88a 	bl	80003b0 <__aeabi_uldivmod>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4613      	mov	r3, r2
 80082a2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082aa:	d308      	bcc.n	80082be <UART_SetConfig+0x9a2>
 80082ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082b2:	d204      	bcs.n	80082be <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082ba:	60da      	str	r2, [r3, #12]
 80082bc:	e17f      	b.n	80085be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80082c4:	e17b      	b.n	80085be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ce:	f040 80bd 	bne.w	800844c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80082d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	dc48      	bgt.n	800836c <UART_SetConfig+0xa50>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	db7b      	blt.n	80083d6 <UART_SetConfig+0xaba>
 80082de:	2b20      	cmp	r3, #32
 80082e0:	d879      	bhi.n	80083d6 <UART_SetConfig+0xaba>
 80082e2:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <UART_SetConfig+0x9cc>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	08008373 	.word	0x08008373
 80082ec:	0800837b 	.word	0x0800837b
 80082f0:	080083d7 	.word	0x080083d7
 80082f4:	080083d7 	.word	0x080083d7
 80082f8:	08008383 	.word	0x08008383
 80082fc:	080083d7 	.word	0x080083d7
 8008300:	080083d7 	.word	0x080083d7
 8008304:	080083d7 	.word	0x080083d7
 8008308:	08008393 	.word	0x08008393
 800830c:	080083d7 	.word	0x080083d7
 8008310:	080083d7 	.word	0x080083d7
 8008314:	080083d7 	.word	0x080083d7
 8008318:	080083d7 	.word	0x080083d7
 800831c:	080083d7 	.word	0x080083d7
 8008320:	080083d7 	.word	0x080083d7
 8008324:	080083d7 	.word	0x080083d7
 8008328:	080083a3 	.word	0x080083a3
 800832c:	080083d7 	.word	0x080083d7
 8008330:	080083d7 	.word	0x080083d7
 8008334:	080083d7 	.word	0x080083d7
 8008338:	080083d7 	.word	0x080083d7
 800833c:	080083d7 	.word	0x080083d7
 8008340:	080083d7 	.word	0x080083d7
 8008344:	080083d7 	.word	0x080083d7
 8008348:	080083d7 	.word	0x080083d7
 800834c:	080083d7 	.word	0x080083d7
 8008350:	080083d7 	.word	0x080083d7
 8008354:	080083d7 	.word	0x080083d7
 8008358:	080083d7 	.word	0x080083d7
 800835c:	080083d7 	.word	0x080083d7
 8008360:	080083d7 	.word	0x080083d7
 8008364:	080083d7 	.word	0x080083d7
 8008368:	080083c9 	.word	0x080083c9
 800836c:	2b40      	cmp	r3, #64	; 0x40
 800836e:	d02e      	beq.n	80083ce <UART_SetConfig+0xab2>
 8008370:	e031      	b.n	80083d6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008372:	f7fd faeb 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 8008376:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008378:	e033      	b.n	80083e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800837a:	f7fd fafd 	bl	8005978 <HAL_RCC_GetPCLK2Freq>
 800837e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008380:	e02f      	b.n	80083e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008386:	4618      	mov	r0, r3
 8008388:	f7fe fa1c 	bl	80067c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008390:	e027      	b.n	80083e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008392:	f107 0318 	add.w	r3, r7, #24
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe fb68 	bl	8006a6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083a0:	e01f      	b.n	80083e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083a2:	4b69      	ldr	r3, [pc, #420]	; (8008548 <UART_SetConfig+0xc2c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d009      	beq.n	80083c2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083ae:	4b66      	ldr	r3, [pc, #408]	; (8008548 <UART_SetConfig+0xc2c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	08db      	lsrs	r3, r3, #3
 80083b4:	f003 0303 	and.w	r3, r3, #3
 80083b8:	4a64      	ldr	r2, [pc, #400]	; (800854c <UART_SetConfig+0xc30>)
 80083ba:	fa22 f303 	lsr.w	r3, r2, r3
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083c0:	e00f      	b.n	80083e2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80083c2:	4b62      	ldr	r3, [pc, #392]	; (800854c <UART_SetConfig+0xc30>)
 80083c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c6:	e00c      	b.n	80083e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083c8:	4b61      	ldr	r3, [pc, #388]	; (8008550 <UART_SetConfig+0xc34>)
 80083ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083cc:	e009      	b.n	80083e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d4:	e005      	b.n	80083e2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80083e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 80ea 	beq.w	80085be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	4a55      	ldr	r2, [pc, #340]	; (8008544 <UART_SetConfig+0xc28>)
 80083f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f4:	461a      	mov	r2, r3
 80083f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083fc:	005a      	lsls	r2, r3, #1
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	085b      	lsrs	r3, r3, #1
 8008404:	441a      	add	r2, r3
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	fbb2 f3f3 	udiv	r3, r2, r3
 800840e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008412:	2b0f      	cmp	r3, #15
 8008414:	d916      	bls.n	8008444 <UART_SetConfig+0xb28>
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800841c:	d212      	bcs.n	8008444 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	b29b      	uxth	r3, r3
 8008422:	f023 030f 	bic.w	r3, r3, #15
 8008426:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	085b      	lsrs	r3, r3, #1
 800842c:	b29b      	uxth	r3, r3
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	b29a      	uxth	r2, r3
 8008434:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008436:	4313      	orrs	r3, r2
 8008438:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008440:	60da      	str	r2, [r3, #12]
 8008442:	e0bc      	b.n	80085be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800844a:	e0b8      	b.n	80085be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800844c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008450:	2b20      	cmp	r3, #32
 8008452:	dc4b      	bgt.n	80084ec <UART_SetConfig+0xbd0>
 8008454:	2b00      	cmp	r3, #0
 8008456:	f2c0 8087 	blt.w	8008568 <UART_SetConfig+0xc4c>
 800845a:	2b20      	cmp	r3, #32
 800845c:	f200 8084 	bhi.w	8008568 <UART_SetConfig+0xc4c>
 8008460:	a201      	add	r2, pc, #4	; (adr r2, 8008468 <UART_SetConfig+0xb4c>)
 8008462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008466:	bf00      	nop
 8008468:	080084f3 	.word	0x080084f3
 800846c:	080084fb 	.word	0x080084fb
 8008470:	08008569 	.word	0x08008569
 8008474:	08008569 	.word	0x08008569
 8008478:	08008503 	.word	0x08008503
 800847c:	08008569 	.word	0x08008569
 8008480:	08008569 	.word	0x08008569
 8008484:	08008569 	.word	0x08008569
 8008488:	08008513 	.word	0x08008513
 800848c:	08008569 	.word	0x08008569
 8008490:	08008569 	.word	0x08008569
 8008494:	08008569 	.word	0x08008569
 8008498:	08008569 	.word	0x08008569
 800849c:	08008569 	.word	0x08008569
 80084a0:	08008569 	.word	0x08008569
 80084a4:	08008569 	.word	0x08008569
 80084a8:	08008523 	.word	0x08008523
 80084ac:	08008569 	.word	0x08008569
 80084b0:	08008569 	.word	0x08008569
 80084b4:	08008569 	.word	0x08008569
 80084b8:	08008569 	.word	0x08008569
 80084bc:	08008569 	.word	0x08008569
 80084c0:	08008569 	.word	0x08008569
 80084c4:	08008569 	.word	0x08008569
 80084c8:	08008569 	.word	0x08008569
 80084cc:	08008569 	.word	0x08008569
 80084d0:	08008569 	.word	0x08008569
 80084d4:	08008569 	.word	0x08008569
 80084d8:	08008569 	.word	0x08008569
 80084dc:	08008569 	.word	0x08008569
 80084e0:	08008569 	.word	0x08008569
 80084e4:	08008569 	.word	0x08008569
 80084e8:	0800855b 	.word	0x0800855b
 80084ec:	2b40      	cmp	r3, #64	; 0x40
 80084ee:	d037      	beq.n	8008560 <UART_SetConfig+0xc44>
 80084f0:	e03a      	b.n	8008568 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084f2:	f7fd fa2b 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 80084f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084f8:	e03c      	b.n	8008574 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084fa:	f7fd fa3d 	bl	8005978 <HAL_RCC_GetPCLK2Freq>
 80084fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008500:	e038      	b.n	8008574 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe f95c 	bl	80067c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008510:	e030      	b.n	8008574 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008512:	f107 0318 	add.w	r3, r7, #24
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe faa8 	bl	8006a6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008520:	e028      	b.n	8008574 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008522:	4b09      	ldr	r3, [pc, #36]	; (8008548 <UART_SetConfig+0xc2c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0320 	and.w	r3, r3, #32
 800852a:	2b00      	cmp	r3, #0
 800852c:	d012      	beq.n	8008554 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800852e:	4b06      	ldr	r3, [pc, #24]	; (8008548 <UART_SetConfig+0xc2c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	08db      	lsrs	r3, r3, #3
 8008534:	f003 0303 	and.w	r3, r3, #3
 8008538:	4a04      	ldr	r2, [pc, #16]	; (800854c <UART_SetConfig+0xc30>)
 800853a:	fa22 f303 	lsr.w	r3, r2, r3
 800853e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008540:	e018      	b.n	8008574 <UART_SetConfig+0xc58>
 8008542:	bf00      	nop
 8008544:	0800a0e0 	.word	0x0800a0e0
 8008548:	58024400 	.word	0x58024400
 800854c:	03d09000 	.word	0x03d09000
 8008550:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008554:	4b24      	ldr	r3, [pc, #144]	; (80085e8 <UART_SetConfig+0xccc>)
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008558:	e00c      	b.n	8008574 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800855a:	4b24      	ldr	r3, [pc, #144]	; (80085ec <UART_SetConfig+0xcd0>)
 800855c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800855e:	e009      	b.n	8008574 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008566:	e005      	b.n	8008574 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008572:	bf00      	nop
    }

    if (pclk != 0U)
 8008574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d021      	beq.n	80085be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	4a1c      	ldr	r2, [pc, #112]	; (80085f0 <UART_SetConfig+0xcd4>)
 8008580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008584:	461a      	mov	r2, r3
 8008586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008588:	fbb3 f2f2 	udiv	r2, r3, r2
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	085b      	lsrs	r3, r3, #1
 8008592:	441a      	add	r2, r3
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	fbb2 f3f3 	udiv	r3, r2, r3
 800859c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	2b0f      	cmp	r3, #15
 80085a2:	d909      	bls.n	80085b8 <UART_SetConfig+0xc9c>
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085aa:	d205      	bcs.n	80085b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	60da      	str	r2, [r3, #12]
 80085b6:	e002      	b.n	80085be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2200      	movs	r2, #0
 80085d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2200      	movs	r2, #0
 80085d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80085da:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3748      	adds	r7, #72	; 0x48
 80085e2:	46bd      	mov	sp, r7
 80085e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085e8:	03d09000 	.word	0x03d09000
 80085ec:	003d0900 	.word	0x003d0900
 80085f0:	0800a0e0 	.word	0x0800a0e0

080085f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00a      	beq.n	800861e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	430a      	orrs	r2, r1
 800863e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008644:	f003 0304 	and.w	r3, r3, #4
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00a      	beq.n	8008684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	f003 0310 	and.w	r3, r3, #16
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00a      	beq.n	80086a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	f003 0320 	and.w	r3, r3, #32
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00a      	beq.n	80086c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	430a      	orrs	r2, r1
 80086c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01a      	beq.n	800870a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086f2:	d10a      	bne.n	800870a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00a      	beq.n	800872c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	430a      	orrs	r2, r1
 800872a:	605a      	str	r2, [r3, #4]
  }
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af02      	add	r7, sp, #8
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008748:	f7f8 fe64 	bl	8001414 <HAL_GetTick>
 800874c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0308 	and.w	r3, r3, #8
 8008758:	2b08      	cmp	r3, #8
 800875a:	d10e      	bne.n	800877a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800875c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f82f 	bl	80087ce <UART_WaitOnFlagUntilTimeout>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e025      	b.n	80087c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b04      	cmp	r3, #4
 8008786:	d10e      	bne.n	80087a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f819 	bl	80087ce <UART_WaitOnFlagUntilTimeout>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e00f      	b.n	80087c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b09c      	sub	sp, #112	; 0x70
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	603b      	str	r3, [r7, #0]
 80087da:	4613      	mov	r3, r2
 80087dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087de:	e0a9      	b.n	8008934 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087e6:	f000 80a5 	beq.w	8008934 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ea:	f7f8 fe13 	bl	8001414 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d302      	bcc.n	8008800 <UART_WaitOnFlagUntilTimeout+0x32>
 80087fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d140      	bne.n	8008882 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800880e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008810:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008814:	667b      	str	r3, [r7, #100]	; 0x64
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800881e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008820:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800882c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e6      	bne.n	8008800 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3308      	adds	r3, #8
 8008838:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883c:	e853 3f00 	ldrex	r3, [r3]
 8008840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	f023 0301 	bic.w	r3, r3, #1
 8008848:	663b      	str	r3, [r7, #96]	; 0x60
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3308      	adds	r3, #8
 8008850:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008852:	64ba      	str	r2, [r7, #72]	; 0x48
 8008854:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008856:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e5      	bne.n	8008832 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2220      	movs	r2, #32
 800886a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2220      	movs	r2, #32
 8008872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e069      	b.n	8008956 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0304 	and.w	r3, r3, #4
 800888c:	2b00      	cmp	r3, #0
 800888e:	d051      	beq.n	8008934 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800889a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800889e:	d149      	bne.n	8008934 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	e853 3f00 	ldrex	r3, [r3]
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	461a      	mov	r2, r3
 80088c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
 80088ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088d0:	e841 2300 	strex	r3, r2, [r1]
 80088d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1e6      	bne.n	80088aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3308      	adds	r3, #8
 80088e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	e853 3f00 	ldrex	r3, [r3]
 80088ea:	613b      	str	r3, [r7, #16]
   return(result);
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3308      	adds	r3, #8
 80088fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088fc:	623a      	str	r2, [r7, #32]
 80088fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008900:	69f9      	ldr	r1, [r7, #28]
 8008902:	6a3a      	ldr	r2, [r7, #32]
 8008904:	e841 2300 	strex	r3, r2, [r1]
 8008908:	61bb      	str	r3, [r7, #24]
   return(result);
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e5      	bne.n	80088dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2220      	movs	r2, #32
 8008914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2220      	movs	r2, #32
 800891c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2220      	movs	r2, #32
 8008924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e010      	b.n	8008956 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	69da      	ldr	r2, [r3, #28]
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	4013      	ands	r3, r2
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	429a      	cmp	r2, r3
 8008942:	bf0c      	ite	eq
 8008944:	2301      	moveq	r3, #1
 8008946:	2300      	movne	r3, #0
 8008948:	b2db      	uxtb	r3, r3
 800894a:	461a      	mov	r2, r3
 800894c:	79fb      	ldrb	r3, [r7, #7]
 800894e:	429a      	cmp	r2, r3
 8008950:	f43f af46 	beq.w	80087e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3770      	adds	r7, #112	; 0x70
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800895e:	b480      	push	{r7}
 8008960:	b08f      	sub	sp, #60	; 0x3c
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	e853 3f00 	ldrex	r3, [r3]
 8008972:	61fb      	str	r3, [r7, #28]
   return(result);
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800897a:	637b      	str	r3, [r7, #52]	; 0x34
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	461a      	mov	r2, r3
 8008982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008986:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800898a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e6      	bne.n	8008966 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3308      	adds	r3, #8
 800899e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80089ae:	633b      	str	r3, [r7, #48]	; 0x30
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3308      	adds	r3, #8
 80089b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089b8:	61ba      	str	r2, [r7, #24]
 80089ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089bc:	6979      	ldr	r1, [r7, #20]
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	e841 2300 	strex	r3, r2, [r1]
 80089c4:	613b      	str	r3, [r7, #16]
   return(result);
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e5      	bne.n	8008998 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80089d4:	bf00      	nop
 80089d6:	373c      	adds	r7, #60	; 0x3c
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b095      	sub	sp, #84	; 0x54
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f0:	e853 3f00 	ldrex	r3, [r3]
 80089f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a06:	643b      	str	r3, [r7, #64]	; 0x40
 8008a08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a0e:	e841 2300 	strex	r3, r2, [r1]
 8008a12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1e6      	bne.n	80089e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a2a:	69fa      	ldr	r2, [r7, #28]
 8008a2c:	4b1e      	ldr	r3, [pc, #120]	; (8008aa8 <UART_EndRxTransfer+0xc8>)
 8008a2e:	4013      	ands	r3, r2
 8008a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3308      	adds	r3, #8
 8008a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e5      	bne.n	8008a1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d118      	bne.n	8008a88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f023 0310 	bic.w	r3, r3, #16
 8008a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	461a      	mov	r2, r3
 8008a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a74:	61bb      	str	r3, [r7, #24]
 8008a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	6979      	ldr	r1, [r7, #20]
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	e841 2300 	strex	r3, r2, [r1]
 8008a80:	613b      	str	r3, [r7, #16]
   return(result);
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e6      	bne.n	8008a56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008a9c:	bf00      	nop
 8008a9e:	3754      	adds	r7, #84	; 0x54
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	effffffe 	.word	0xeffffffe

08008aac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b090      	sub	sp, #64	; 0x40
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ac2:	d037      	beq.n	8008b34 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	e853 3f00 	ldrex	r3, [r3]
 8008ada:	623b      	str	r3, [r7, #32]
   return(result);
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3308      	adds	r3, #8
 8008aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aec:	633a      	str	r2, [r7, #48]	; 0x30
 8008aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008af4:	e841 2300 	strex	r3, r2, [r1]
 8008af8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1e5      	bne.n	8008acc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	e853 3f00 	ldrex	r3, [r3]
 8008b0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b14:	637b      	str	r3, [r7, #52]	; 0x34
 8008b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1e:	61fb      	str	r3, [r7, #28]
 8008b20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b22:	69b9      	ldr	r1, [r7, #24]
 8008b24:	69fa      	ldr	r2, [r7, #28]
 8008b26:	e841 2300 	strex	r3, r2, [r1]
 8008b2a:	617b      	str	r3, [r7, #20]
   return(result);
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1e6      	bne.n	8008b00 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b32:	e002      	b.n	8008b3a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008b34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008b36:	f7f7 ff43 	bl	80009c0 <HAL_UART_TxCpltCallback>
}
 8008b3a:	bf00      	nop
 8008b3c:	3740      	adds	r7, #64	; 0x40
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7fe fec3 	bl	80078dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b56:	bf00      	nop
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b72:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b86:	2b80      	cmp	r3, #128	; 0x80
 8008b88:	d109      	bne.n	8008b9e <UART_DMAError+0x40>
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b21      	cmp	r3, #33	; 0x21
 8008b8e:	d106      	bne.n	8008b9e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008b98:	6978      	ldr	r0, [r7, #20]
 8008b9a:	f7ff fee0 	bl	800895e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba8:	2b40      	cmp	r3, #64	; 0x40
 8008baa:	d109      	bne.n	8008bc0 <UART_DMAError+0x62>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b22      	cmp	r3, #34	; 0x22
 8008bb0:	d106      	bne.n	8008bc0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008bba:	6978      	ldr	r0, [r7, #20]
 8008bbc:	f7ff ff10 	bl	80089e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bc6:	f043 0210 	orr.w	r2, r3, #16
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bd0:	6978      	ldr	r0, [r7, #20]
 8008bd2:	f7fe fe8d 	bl	80078f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bd6:	bf00      	nop
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f7fe fe77 	bl	80078f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b088      	sub	sp, #32
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	e853 3f00 	ldrex	r3, [r3]
 8008c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c26:	61fb      	str	r3, [r7, #28]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	61bb      	str	r3, [r7, #24]
 8008c32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	6979      	ldr	r1, [r7, #20]
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e6      	bne.n	8008c12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7f7 feb4 	bl	80009c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c58:	bf00      	nop
 8008c5a:	3720      	adds	r7, #32
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d101      	bne.n	8008cb2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008cae:	2302      	movs	r3, #2
 8008cb0:	e027      	b.n	8008d02 <HAL_UARTEx_DisableFifoMode+0x66>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2224      	movs	r2, #36	; 0x24
 8008cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f022 0201 	bic.w	r2, r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ce0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d101      	bne.n	8008d26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d22:	2302      	movs	r3, #2
 8008d24:	e02d      	b.n	8008d82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2224      	movs	r2, #36	; 0x24
 8008d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 0201 	bic.w	r2, r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f850 	bl	8008e08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d101      	bne.n	8008da2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e02d      	b.n	8008dfe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2224      	movs	r2, #36	; 0x24
 8008dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0201 	bic.w	r2, r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f812 	bl	8008e08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2220      	movs	r2, #32
 8008df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d108      	bne.n	8008e2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e28:	e031      	b.n	8008e8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e2a:	2310      	movs	r3, #16
 8008e2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e2e:	2310      	movs	r3, #16
 8008e30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	0e5b      	lsrs	r3, r3, #25
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	f003 0307 	and.w	r3, r3, #7
 8008e40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	0f5b      	lsrs	r3, r3, #29
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	f003 0307 	and.w	r3, r3, #7
 8008e50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	7b3a      	ldrb	r2, [r7, #12]
 8008e56:	4911      	ldr	r1, [pc, #68]	; (8008e9c <UARTEx_SetNbDataToProcess+0x94>)
 8008e58:	5c8a      	ldrb	r2, [r1, r2]
 8008e5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e5e:	7b3a      	ldrb	r2, [r7, #12]
 8008e60:	490f      	ldr	r1, [pc, #60]	; (8008ea0 <UARTEx_SetNbDataToProcess+0x98>)
 8008e62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e64:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	7b7a      	ldrb	r2, [r7, #13]
 8008e74:	4909      	ldr	r1, [pc, #36]	; (8008e9c <UARTEx_SetNbDataToProcess+0x94>)
 8008e76:	5c8a      	ldrb	r2, [r1, r2]
 8008e78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e7c:	7b7a      	ldrb	r2, [r7, #13]
 8008e7e:	4908      	ldr	r1, [pc, #32]	; (8008ea0 <UARTEx_SetNbDataToProcess+0x98>)
 8008e80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e82:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e8e:	bf00      	nop
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	0800a0f8 	.word	0x0800a0f8
 8008ea0:	0800a100 	.word	0x0800a100

08008ea4 <__errno>:
 8008ea4:	4b01      	ldr	r3, [pc, #4]	; (8008eac <__errno+0x8>)
 8008ea6:	6818      	ldr	r0, [r3, #0]
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	24000014 	.word	0x24000014

08008eb0 <__libc_init_array>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	4d0d      	ldr	r5, [pc, #52]	; (8008ee8 <__libc_init_array+0x38>)
 8008eb4:	4c0d      	ldr	r4, [pc, #52]	; (8008eec <__libc_init_array+0x3c>)
 8008eb6:	1b64      	subs	r4, r4, r5
 8008eb8:	10a4      	asrs	r4, r4, #2
 8008eba:	2600      	movs	r6, #0
 8008ebc:	42a6      	cmp	r6, r4
 8008ebe:	d109      	bne.n	8008ed4 <__libc_init_array+0x24>
 8008ec0:	4d0b      	ldr	r5, [pc, #44]	; (8008ef0 <__libc_init_array+0x40>)
 8008ec2:	4c0c      	ldr	r4, [pc, #48]	; (8008ef4 <__libc_init_array+0x44>)
 8008ec4:	f001 f832 	bl	8009f2c <_init>
 8008ec8:	1b64      	subs	r4, r4, r5
 8008eca:	10a4      	asrs	r4, r4, #2
 8008ecc:	2600      	movs	r6, #0
 8008ece:	42a6      	cmp	r6, r4
 8008ed0:	d105      	bne.n	8008ede <__libc_init_array+0x2e>
 8008ed2:	bd70      	pop	{r4, r5, r6, pc}
 8008ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed8:	4798      	blx	r3
 8008eda:	3601      	adds	r6, #1
 8008edc:	e7ee      	b.n	8008ebc <__libc_init_array+0xc>
 8008ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee2:	4798      	blx	r3
 8008ee4:	3601      	adds	r6, #1
 8008ee6:	e7f2      	b.n	8008ece <__libc_init_array+0x1e>
 8008ee8:	0800a1a8 	.word	0x0800a1a8
 8008eec:	0800a1a8 	.word	0x0800a1a8
 8008ef0:	0800a1a8 	.word	0x0800a1a8
 8008ef4:	0800a1ac 	.word	0x0800a1ac

08008ef8 <memcpy>:
 8008ef8:	440a      	add	r2, r1
 8008efa:	4291      	cmp	r1, r2
 8008efc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f00:	d100      	bne.n	8008f04 <memcpy+0xc>
 8008f02:	4770      	bx	lr
 8008f04:	b510      	push	{r4, lr}
 8008f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f0e:	4291      	cmp	r1, r2
 8008f10:	d1f9      	bne.n	8008f06 <memcpy+0xe>
 8008f12:	bd10      	pop	{r4, pc}

08008f14 <memset>:
 8008f14:	4402      	add	r2, r0
 8008f16:	4603      	mov	r3, r0
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d100      	bne.n	8008f1e <memset+0xa>
 8008f1c:	4770      	bx	lr
 8008f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f22:	e7f9      	b.n	8008f18 <memset+0x4>

08008f24 <iprintf>:
 8008f24:	b40f      	push	{r0, r1, r2, r3}
 8008f26:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <iprintf+0x2c>)
 8008f28:	b513      	push	{r0, r1, r4, lr}
 8008f2a:	681c      	ldr	r4, [r3, #0]
 8008f2c:	b124      	cbz	r4, 8008f38 <iprintf+0x14>
 8008f2e:	69a3      	ldr	r3, [r4, #24]
 8008f30:	b913      	cbnz	r3, 8008f38 <iprintf+0x14>
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 fa5e 	bl	80093f4 <__sinit>
 8008f38:	ab05      	add	r3, sp, #20
 8008f3a:	9a04      	ldr	r2, [sp, #16]
 8008f3c:	68a1      	ldr	r1, [r4, #8]
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 fc67 	bl	8009814 <_vfiprintf_r>
 8008f46:	b002      	add	sp, #8
 8008f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f4c:	b004      	add	sp, #16
 8008f4e:	4770      	bx	lr
 8008f50:	24000014 	.word	0x24000014

08008f54 <_puts_r>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	460e      	mov	r6, r1
 8008f58:	4605      	mov	r5, r0
 8008f5a:	b118      	cbz	r0, 8008f64 <_puts_r+0x10>
 8008f5c:	6983      	ldr	r3, [r0, #24]
 8008f5e:	b90b      	cbnz	r3, 8008f64 <_puts_r+0x10>
 8008f60:	f000 fa48 	bl	80093f4 <__sinit>
 8008f64:	69ab      	ldr	r3, [r5, #24]
 8008f66:	68ac      	ldr	r4, [r5, #8]
 8008f68:	b913      	cbnz	r3, 8008f70 <_puts_r+0x1c>
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 fa42 	bl	80093f4 <__sinit>
 8008f70:	4b2c      	ldr	r3, [pc, #176]	; (8009024 <_puts_r+0xd0>)
 8008f72:	429c      	cmp	r4, r3
 8008f74:	d120      	bne.n	8008fb8 <_puts_r+0x64>
 8008f76:	686c      	ldr	r4, [r5, #4]
 8008f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f7a:	07db      	lsls	r3, r3, #31
 8008f7c:	d405      	bmi.n	8008f8a <_puts_r+0x36>
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	0598      	lsls	r0, r3, #22
 8008f82:	d402      	bmi.n	8008f8a <_puts_r+0x36>
 8008f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f86:	f000 fad3 	bl	8009530 <__retarget_lock_acquire_recursive>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	0719      	lsls	r1, r3, #28
 8008f8e:	d51d      	bpl.n	8008fcc <_puts_r+0x78>
 8008f90:	6923      	ldr	r3, [r4, #16]
 8008f92:	b1db      	cbz	r3, 8008fcc <_puts_r+0x78>
 8008f94:	3e01      	subs	r6, #1
 8008f96:	68a3      	ldr	r3, [r4, #8]
 8008f98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	60a3      	str	r3, [r4, #8]
 8008fa0:	bb39      	cbnz	r1, 8008ff2 <_puts_r+0x9e>
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da38      	bge.n	8009018 <_puts_r+0xc4>
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	210a      	movs	r1, #10
 8008faa:	4628      	mov	r0, r5
 8008fac:	f000 f848 	bl	8009040 <__swbuf_r>
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d011      	beq.n	8008fd8 <_puts_r+0x84>
 8008fb4:	250a      	movs	r5, #10
 8008fb6:	e011      	b.n	8008fdc <_puts_r+0x88>
 8008fb8:	4b1b      	ldr	r3, [pc, #108]	; (8009028 <_puts_r+0xd4>)
 8008fba:	429c      	cmp	r4, r3
 8008fbc:	d101      	bne.n	8008fc2 <_puts_r+0x6e>
 8008fbe:	68ac      	ldr	r4, [r5, #8]
 8008fc0:	e7da      	b.n	8008f78 <_puts_r+0x24>
 8008fc2:	4b1a      	ldr	r3, [pc, #104]	; (800902c <_puts_r+0xd8>)
 8008fc4:	429c      	cmp	r4, r3
 8008fc6:	bf08      	it	eq
 8008fc8:	68ec      	ldreq	r4, [r5, #12]
 8008fca:	e7d5      	b.n	8008f78 <_puts_r+0x24>
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f000 f888 	bl	80090e4 <__swsetup_r>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d0dd      	beq.n	8008f94 <_puts_r+0x40>
 8008fd8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008fdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fde:	07da      	lsls	r2, r3, #31
 8008fe0:	d405      	bmi.n	8008fee <_puts_r+0x9a>
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	059b      	lsls	r3, r3, #22
 8008fe6:	d402      	bmi.n	8008fee <_puts_r+0x9a>
 8008fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fea:	f000 faa2 	bl	8009532 <__retarget_lock_release_recursive>
 8008fee:	4628      	mov	r0, r5
 8008ff0:	bd70      	pop	{r4, r5, r6, pc}
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	da04      	bge.n	8009000 <_puts_r+0xac>
 8008ff6:	69a2      	ldr	r2, [r4, #24]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	dc06      	bgt.n	800900a <_puts_r+0xb6>
 8008ffc:	290a      	cmp	r1, #10
 8008ffe:	d004      	beq.n	800900a <_puts_r+0xb6>
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	6022      	str	r2, [r4, #0]
 8009006:	7019      	strb	r1, [r3, #0]
 8009008:	e7c5      	b.n	8008f96 <_puts_r+0x42>
 800900a:	4622      	mov	r2, r4
 800900c:	4628      	mov	r0, r5
 800900e:	f000 f817 	bl	8009040 <__swbuf_r>
 8009012:	3001      	adds	r0, #1
 8009014:	d1bf      	bne.n	8008f96 <_puts_r+0x42>
 8009016:	e7df      	b.n	8008fd8 <_puts_r+0x84>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	250a      	movs	r5, #10
 800901c:	1c5a      	adds	r2, r3, #1
 800901e:	6022      	str	r2, [r4, #0]
 8009020:	701d      	strb	r5, [r3, #0]
 8009022:	e7db      	b.n	8008fdc <_puts_r+0x88>
 8009024:	0800a12c 	.word	0x0800a12c
 8009028:	0800a14c 	.word	0x0800a14c
 800902c:	0800a10c 	.word	0x0800a10c

08009030 <puts>:
 8009030:	4b02      	ldr	r3, [pc, #8]	; (800903c <puts+0xc>)
 8009032:	4601      	mov	r1, r0
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	f7ff bf8d 	b.w	8008f54 <_puts_r>
 800903a:	bf00      	nop
 800903c:	24000014 	.word	0x24000014

08009040 <__swbuf_r>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	460e      	mov	r6, r1
 8009044:	4614      	mov	r4, r2
 8009046:	4605      	mov	r5, r0
 8009048:	b118      	cbz	r0, 8009052 <__swbuf_r+0x12>
 800904a:	6983      	ldr	r3, [r0, #24]
 800904c:	b90b      	cbnz	r3, 8009052 <__swbuf_r+0x12>
 800904e:	f000 f9d1 	bl	80093f4 <__sinit>
 8009052:	4b21      	ldr	r3, [pc, #132]	; (80090d8 <__swbuf_r+0x98>)
 8009054:	429c      	cmp	r4, r3
 8009056:	d12b      	bne.n	80090b0 <__swbuf_r+0x70>
 8009058:	686c      	ldr	r4, [r5, #4]
 800905a:	69a3      	ldr	r3, [r4, #24]
 800905c:	60a3      	str	r3, [r4, #8]
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	071a      	lsls	r2, r3, #28
 8009062:	d52f      	bpl.n	80090c4 <__swbuf_r+0x84>
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	b36b      	cbz	r3, 80090c4 <__swbuf_r+0x84>
 8009068:	6923      	ldr	r3, [r4, #16]
 800906a:	6820      	ldr	r0, [r4, #0]
 800906c:	1ac0      	subs	r0, r0, r3
 800906e:	6963      	ldr	r3, [r4, #20]
 8009070:	b2f6      	uxtb	r6, r6
 8009072:	4283      	cmp	r3, r0
 8009074:	4637      	mov	r7, r6
 8009076:	dc04      	bgt.n	8009082 <__swbuf_r+0x42>
 8009078:	4621      	mov	r1, r4
 800907a:	4628      	mov	r0, r5
 800907c:	f000 f926 	bl	80092cc <_fflush_r>
 8009080:	bb30      	cbnz	r0, 80090d0 <__swbuf_r+0x90>
 8009082:	68a3      	ldr	r3, [r4, #8]
 8009084:	3b01      	subs	r3, #1
 8009086:	60a3      	str	r3, [r4, #8]
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	6022      	str	r2, [r4, #0]
 800908e:	701e      	strb	r6, [r3, #0]
 8009090:	6963      	ldr	r3, [r4, #20]
 8009092:	3001      	adds	r0, #1
 8009094:	4283      	cmp	r3, r0
 8009096:	d004      	beq.n	80090a2 <__swbuf_r+0x62>
 8009098:	89a3      	ldrh	r3, [r4, #12]
 800909a:	07db      	lsls	r3, r3, #31
 800909c:	d506      	bpl.n	80090ac <__swbuf_r+0x6c>
 800909e:	2e0a      	cmp	r6, #10
 80090a0:	d104      	bne.n	80090ac <__swbuf_r+0x6c>
 80090a2:	4621      	mov	r1, r4
 80090a4:	4628      	mov	r0, r5
 80090a6:	f000 f911 	bl	80092cc <_fflush_r>
 80090aa:	b988      	cbnz	r0, 80090d0 <__swbuf_r+0x90>
 80090ac:	4638      	mov	r0, r7
 80090ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090b0:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <__swbuf_r+0x9c>)
 80090b2:	429c      	cmp	r4, r3
 80090b4:	d101      	bne.n	80090ba <__swbuf_r+0x7a>
 80090b6:	68ac      	ldr	r4, [r5, #8]
 80090b8:	e7cf      	b.n	800905a <__swbuf_r+0x1a>
 80090ba:	4b09      	ldr	r3, [pc, #36]	; (80090e0 <__swbuf_r+0xa0>)
 80090bc:	429c      	cmp	r4, r3
 80090be:	bf08      	it	eq
 80090c0:	68ec      	ldreq	r4, [r5, #12]
 80090c2:	e7ca      	b.n	800905a <__swbuf_r+0x1a>
 80090c4:	4621      	mov	r1, r4
 80090c6:	4628      	mov	r0, r5
 80090c8:	f000 f80c 	bl	80090e4 <__swsetup_r>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d0cb      	beq.n	8009068 <__swbuf_r+0x28>
 80090d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80090d4:	e7ea      	b.n	80090ac <__swbuf_r+0x6c>
 80090d6:	bf00      	nop
 80090d8:	0800a12c 	.word	0x0800a12c
 80090dc:	0800a14c 	.word	0x0800a14c
 80090e0:	0800a10c 	.word	0x0800a10c

080090e4 <__swsetup_r>:
 80090e4:	4b32      	ldr	r3, [pc, #200]	; (80091b0 <__swsetup_r+0xcc>)
 80090e6:	b570      	push	{r4, r5, r6, lr}
 80090e8:	681d      	ldr	r5, [r3, #0]
 80090ea:	4606      	mov	r6, r0
 80090ec:	460c      	mov	r4, r1
 80090ee:	b125      	cbz	r5, 80090fa <__swsetup_r+0x16>
 80090f0:	69ab      	ldr	r3, [r5, #24]
 80090f2:	b913      	cbnz	r3, 80090fa <__swsetup_r+0x16>
 80090f4:	4628      	mov	r0, r5
 80090f6:	f000 f97d 	bl	80093f4 <__sinit>
 80090fa:	4b2e      	ldr	r3, [pc, #184]	; (80091b4 <__swsetup_r+0xd0>)
 80090fc:	429c      	cmp	r4, r3
 80090fe:	d10f      	bne.n	8009120 <__swsetup_r+0x3c>
 8009100:	686c      	ldr	r4, [r5, #4]
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009108:	0719      	lsls	r1, r3, #28
 800910a:	d42c      	bmi.n	8009166 <__swsetup_r+0x82>
 800910c:	06dd      	lsls	r5, r3, #27
 800910e:	d411      	bmi.n	8009134 <__swsetup_r+0x50>
 8009110:	2309      	movs	r3, #9
 8009112:	6033      	str	r3, [r6, #0]
 8009114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009118:	81a3      	strh	r3, [r4, #12]
 800911a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800911e:	e03e      	b.n	800919e <__swsetup_r+0xba>
 8009120:	4b25      	ldr	r3, [pc, #148]	; (80091b8 <__swsetup_r+0xd4>)
 8009122:	429c      	cmp	r4, r3
 8009124:	d101      	bne.n	800912a <__swsetup_r+0x46>
 8009126:	68ac      	ldr	r4, [r5, #8]
 8009128:	e7eb      	b.n	8009102 <__swsetup_r+0x1e>
 800912a:	4b24      	ldr	r3, [pc, #144]	; (80091bc <__swsetup_r+0xd8>)
 800912c:	429c      	cmp	r4, r3
 800912e:	bf08      	it	eq
 8009130:	68ec      	ldreq	r4, [r5, #12]
 8009132:	e7e6      	b.n	8009102 <__swsetup_r+0x1e>
 8009134:	0758      	lsls	r0, r3, #29
 8009136:	d512      	bpl.n	800915e <__swsetup_r+0x7a>
 8009138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800913a:	b141      	cbz	r1, 800914e <__swsetup_r+0x6a>
 800913c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009140:	4299      	cmp	r1, r3
 8009142:	d002      	beq.n	800914a <__swsetup_r+0x66>
 8009144:	4630      	mov	r0, r6
 8009146:	f000 fa5b 	bl	8009600 <_free_r>
 800914a:	2300      	movs	r3, #0
 800914c:	6363      	str	r3, [r4, #52]	; 0x34
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	2300      	movs	r3, #0
 8009158:	6063      	str	r3, [r4, #4]
 800915a:	6923      	ldr	r3, [r4, #16]
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	f043 0308 	orr.w	r3, r3, #8
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	b94b      	cbnz	r3, 800917e <__swsetup_r+0x9a>
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009174:	d003      	beq.n	800917e <__swsetup_r+0x9a>
 8009176:	4621      	mov	r1, r4
 8009178:	4630      	mov	r0, r6
 800917a:	f000 fa01 	bl	8009580 <__smakebuf_r>
 800917e:	89a0      	ldrh	r0, [r4, #12]
 8009180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009184:	f010 0301 	ands.w	r3, r0, #1
 8009188:	d00a      	beq.n	80091a0 <__swsetup_r+0xbc>
 800918a:	2300      	movs	r3, #0
 800918c:	60a3      	str	r3, [r4, #8]
 800918e:	6963      	ldr	r3, [r4, #20]
 8009190:	425b      	negs	r3, r3
 8009192:	61a3      	str	r3, [r4, #24]
 8009194:	6923      	ldr	r3, [r4, #16]
 8009196:	b943      	cbnz	r3, 80091aa <__swsetup_r+0xc6>
 8009198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800919c:	d1ba      	bne.n	8009114 <__swsetup_r+0x30>
 800919e:	bd70      	pop	{r4, r5, r6, pc}
 80091a0:	0781      	lsls	r1, r0, #30
 80091a2:	bf58      	it	pl
 80091a4:	6963      	ldrpl	r3, [r4, #20]
 80091a6:	60a3      	str	r3, [r4, #8]
 80091a8:	e7f4      	b.n	8009194 <__swsetup_r+0xb0>
 80091aa:	2000      	movs	r0, #0
 80091ac:	e7f7      	b.n	800919e <__swsetup_r+0xba>
 80091ae:	bf00      	nop
 80091b0:	24000014 	.word	0x24000014
 80091b4:	0800a12c 	.word	0x0800a12c
 80091b8:	0800a14c 	.word	0x0800a14c
 80091bc:	0800a10c 	.word	0x0800a10c

080091c0 <__sflush_r>:
 80091c0:	898a      	ldrh	r2, [r1, #12]
 80091c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c6:	4605      	mov	r5, r0
 80091c8:	0710      	lsls	r0, r2, #28
 80091ca:	460c      	mov	r4, r1
 80091cc:	d458      	bmi.n	8009280 <__sflush_r+0xc0>
 80091ce:	684b      	ldr	r3, [r1, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	dc05      	bgt.n	80091e0 <__sflush_r+0x20>
 80091d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	dc02      	bgt.n	80091e0 <__sflush_r+0x20>
 80091da:	2000      	movs	r0, #0
 80091dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091e2:	2e00      	cmp	r6, #0
 80091e4:	d0f9      	beq.n	80091da <__sflush_r+0x1a>
 80091e6:	2300      	movs	r3, #0
 80091e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091ec:	682f      	ldr	r7, [r5, #0]
 80091ee:	602b      	str	r3, [r5, #0]
 80091f0:	d032      	beq.n	8009258 <__sflush_r+0x98>
 80091f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	075a      	lsls	r2, r3, #29
 80091f8:	d505      	bpl.n	8009206 <__sflush_r+0x46>
 80091fa:	6863      	ldr	r3, [r4, #4]
 80091fc:	1ac0      	subs	r0, r0, r3
 80091fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009200:	b10b      	cbz	r3, 8009206 <__sflush_r+0x46>
 8009202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009204:	1ac0      	subs	r0, r0, r3
 8009206:	2300      	movs	r3, #0
 8009208:	4602      	mov	r2, r0
 800920a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800920c:	6a21      	ldr	r1, [r4, #32]
 800920e:	4628      	mov	r0, r5
 8009210:	47b0      	blx	r6
 8009212:	1c43      	adds	r3, r0, #1
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	d106      	bne.n	8009226 <__sflush_r+0x66>
 8009218:	6829      	ldr	r1, [r5, #0]
 800921a:	291d      	cmp	r1, #29
 800921c:	d82c      	bhi.n	8009278 <__sflush_r+0xb8>
 800921e:	4a2a      	ldr	r2, [pc, #168]	; (80092c8 <__sflush_r+0x108>)
 8009220:	40ca      	lsrs	r2, r1
 8009222:	07d6      	lsls	r6, r2, #31
 8009224:	d528      	bpl.n	8009278 <__sflush_r+0xb8>
 8009226:	2200      	movs	r2, #0
 8009228:	6062      	str	r2, [r4, #4]
 800922a:	04d9      	lsls	r1, r3, #19
 800922c:	6922      	ldr	r2, [r4, #16]
 800922e:	6022      	str	r2, [r4, #0]
 8009230:	d504      	bpl.n	800923c <__sflush_r+0x7c>
 8009232:	1c42      	adds	r2, r0, #1
 8009234:	d101      	bne.n	800923a <__sflush_r+0x7a>
 8009236:	682b      	ldr	r3, [r5, #0]
 8009238:	b903      	cbnz	r3, 800923c <__sflush_r+0x7c>
 800923a:	6560      	str	r0, [r4, #84]	; 0x54
 800923c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800923e:	602f      	str	r7, [r5, #0]
 8009240:	2900      	cmp	r1, #0
 8009242:	d0ca      	beq.n	80091da <__sflush_r+0x1a>
 8009244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009248:	4299      	cmp	r1, r3
 800924a:	d002      	beq.n	8009252 <__sflush_r+0x92>
 800924c:	4628      	mov	r0, r5
 800924e:	f000 f9d7 	bl	8009600 <_free_r>
 8009252:	2000      	movs	r0, #0
 8009254:	6360      	str	r0, [r4, #52]	; 0x34
 8009256:	e7c1      	b.n	80091dc <__sflush_r+0x1c>
 8009258:	6a21      	ldr	r1, [r4, #32]
 800925a:	2301      	movs	r3, #1
 800925c:	4628      	mov	r0, r5
 800925e:	47b0      	blx	r6
 8009260:	1c41      	adds	r1, r0, #1
 8009262:	d1c7      	bne.n	80091f4 <__sflush_r+0x34>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0c4      	beq.n	80091f4 <__sflush_r+0x34>
 800926a:	2b1d      	cmp	r3, #29
 800926c:	d001      	beq.n	8009272 <__sflush_r+0xb2>
 800926e:	2b16      	cmp	r3, #22
 8009270:	d101      	bne.n	8009276 <__sflush_r+0xb6>
 8009272:	602f      	str	r7, [r5, #0]
 8009274:	e7b1      	b.n	80091da <__sflush_r+0x1a>
 8009276:	89a3      	ldrh	r3, [r4, #12]
 8009278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800927c:	81a3      	strh	r3, [r4, #12]
 800927e:	e7ad      	b.n	80091dc <__sflush_r+0x1c>
 8009280:	690f      	ldr	r7, [r1, #16]
 8009282:	2f00      	cmp	r7, #0
 8009284:	d0a9      	beq.n	80091da <__sflush_r+0x1a>
 8009286:	0793      	lsls	r3, r2, #30
 8009288:	680e      	ldr	r6, [r1, #0]
 800928a:	bf08      	it	eq
 800928c:	694b      	ldreq	r3, [r1, #20]
 800928e:	600f      	str	r7, [r1, #0]
 8009290:	bf18      	it	ne
 8009292:	2300      	movne	r3, #0
 8009294:	eba6 0807 	sub.w	r8, r6, r7
 8009298:	608b      	str	r3, [r1, #8]
 800929a:	f1b8 0f00 	cmp.w	r8, #0
 800929e:	dd9c      	ble.n	80091da <__sflush_r+0x1a>
 80092a0:	6a21      	ldr	r1, [r4, #32]
 80092a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092a4:	4643      	mov	r3, r8
 80092a6:	463a      	mov	r2, r7
 80092a8:	4628      	mov	r0, r5
 80092aa:	47b0      	blx	r6
 80092ac:	2800      	cmp	r0, #0
 80092ae:	dc06      	bgt.n	80092be <__sflush_r+0xfe>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092b6:	81a3      	strh	r3, [r4, #12]
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092bc:	e78e      	b.n	80091dc <__sflush_r+0x1c>
 80092be:	4407      	add	r7, r0
 80092c0:	eba8 0800 	sub.w	r8, r8, r0
 80092c4:	e7e9      	b.n	800929a <__sflush_r+0xda>
 80092c6:	bf00      	nop
 80092c8:	20400001 	.word	0x20400001

080092cc <_fflush_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	690b      	ldr	r3, [r1, #16]
 80092d0:	4605      	mov	r5, r0
 80092d2:	460c      	mov	r4, r1
 80092d4:	b913      	cbnz	r3, 80092dc <_fflush_r+0x10>
 80092d6:	2500      	movs	r5, #0
 80092d8:	4628      	mov	r0, r5
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	b118      	cbz	r0, 80092e6 <_fflush_r+0x1a>
 80092de:	6983      	ldr	r3, [r0, #24]
 80092e0:	b90b      	cbnz	r3, 80092e6 <_fflush_r+0x1a>
 80092e2:	f000 f887 	bl	80093f4 <__sinit>
 80092e6:	4b14      	ldr	r3, [pc, #80]	; (8009338 <_fflush_r+0x6c>)
 80092e8:	429c      	cmp	r4, r3
 80092ea:	d11b      	bne.n	8009324 <_fflush_r+0x58>
 80092ec:	686c      	ldr	r4, [r5, #4]
 80092ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0ef      	beq.n	80092d6 <_fflush_r+0xa>
 80092f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092f8:	07d0      	lsls	r0, r2, #31
 80092fa:	d404      	bmi.n	8009306 <_fflush_r+0x3a>
 80092fc:	0599      	lsls	r1, r3, #22
 80092fe:	d402      	bmi.n	8009306 <_fflush_r+0x3a>
 8009300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009302:	f000 f915 	bl	8009530 <__retarget_lock_acquire_recursive>
 8009306:	4628      	mov	r0, r5
 8009308:	4621      	mov	r1, r4
 800930a:	f7ff ff59 	bl	80091c0 <__sflush_r>
 800930e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009310:	07da      	lsls	r2, r3, #31
 8009312:	4605      	mov	r5, r0
 8009314:	d4e0      	bmi.n	80092d8 <_fflush_r+0xc>
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	059b      	lsls	r3, r3, #22
 800931a:	d4dd      	bmi.n	80092d8 <_fflush_r+0xc>
 800931c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800931e:	f000 f908 	bl	8009532 <__retarget_lock_release_recursive>
 8009322:	e7d9      	b.n	80092d8 <_fflush_r+0xc>
 8009324:	4b05      	ldr	r3, [pc, #20]	; (800933c <_fflush_r+0x70>)
 8009326:	429c      	cmp	r4, r3
 8009328:	d101      	bne.n	800932e <_fflush_r+0x62>
 800932a:	68ac      	ldr	r4, [r5, #8]
 800932c:	e7df      	b.n	80092ee <_fflush_r+0x22>
 800932e:	4b04      	ldr	r3, [pc, #16]	; (8009340 <_fflush_r+0x74>)
 8009330:	429c      	cmp	r4, r3
 8009332:	bf08      	it	eq
 8009334:	68ec      	ldreq	r4, [r5, #12]
 8009336:	e7da      	b.n	80092ee <_fflush_r+0x22>
 8009338:	0800a12c 	.word	0x0800a12c
 800933c:	0800a14c 	.word	0x0800a14c
 8009340:	0800a10c 	.word	0x0800a10c

08009344 <std>:
 8009344:	2300      	movs	r3, #0
 8009346:	b510      	push	{r4, lr}
 8009348:	4604      	mov	r4, r0
 800934a:	e9c0 3300 	strd	r3, r3, [r0]
 800934e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009352:	6083      	str	r3, [r0, #8]
 8009354:	8181      	strh	r1, [r0, #12]
 8009356:	6643      	str	r3, [r0, #100]	; 0x64
 8009358:	81c2      	strh	r2, [r0, #14]
 800935a:	6183      	str	r3, [r0, #24]
 800935c:	4619      	mov	r1, r3
 800935e:	2208      	movs	r2, #8
 8009360:	305c      	adds	r0, #92	; 0x5c
 8009362:	f7ff fdd7 	bl	8008f14 <memset>
 8009366:	4b05      	ldr	r3, [pc, #20]	; (800937c <std+0x38>)
 8009368:	6263      	str	r3, [r4, #36]	; 0x24
 800936a:	4b05      	ldr	r3, [pc, #20]	; (8009380 <std+0x3c>)
 800936c:	62a3      	str	r3, [r4, #40]	; 0x28
 800936e:	4b05      	ldr	r3, [pc, #20]	; (8009384 <std+0x40>)
 8009370:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009372:	4b05      	ldr	r3, [pc, #20]	; (8009388 <std+0x44>)
 8009374:	6224      	str	r4, [r4, #32]
 8009376:	6323      	str	r3, [r4, #48]	; 0x30
 8009378:	bd10      	pop	{r4, pc}
 800937a:	bf00      	nop
 800937c:	08009dbd 	.word	0x08009dbd
 8009380:	08009ddf 	.word	0x08009ddf
 8009384:	08009e17 	.word	0x08009e17
 8009388:	08009e3b 	.word	0x08009e3b

0800938c <_cleanup_r>:
 800938c:	4901      	ldr	r1, [pc, #4]	; (8009394 <_cleanup_r+0x8>)
 800938e:	f000 b8af 	b.w	80094f0 <_fwalk_reent>
 8009392:	bf00      	nop
 8009394:	080092cd 	.word	0x080092cd

08009398 <__sfmoreglue>:
 8009398:	b570      	push	{r4, r5, r6, lr}
 800939a:	2268      	movs	r2, #104	; 0x68
 800939c:	1e4d      	subs	r5, r1, #1
 800939e:	4355      	muls	r5, r2
 80093a0:	460e      	mov	r6, r1
 80093a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093a6:	f000 f997 	bl	80096d8 <_malloc_r>
 80093aa:	4604      	mov	r4, r0
 80093ac:	b140      	cbz	r0, 80093c0 <__sfmoreglue+0x28>
 80093ae:	2100      	movs	r1, #0
 80093b0:	e9c0 1600 	strd	r1, r6, [r0]
 80093b4:	300c      	adds	r0, #12
 80093b6:	60a0      	str	r0, [r4, #8]
 80093b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093bc:	f7ff fdaa 	bl	8008f14 <memset>
 80093c0:	4620      	mov	r0, r4
 80093c2:	bd70      	pop	{r4, r5, r6, pc}

080093c4 <__sfp_lock_acquire>:
 80093c4:	4801      	ldr	r0, [pc, #4]	; (80093cc <__sfp_lock_acquire+0x8>)
 80093c6:	f000 b8b3 	b.w	8009530 <__retarget_lock_acquire_recursive>
 80093ca:	bf00      	nop
 80093cc:	2400020d 	.word	0x2400020d

080093d0 <__sfp_lock_release>:
 80093d0:	4801      	ldr	r0, [pc, #4]	; (80093d8 <__sfp_lock_release+0x8>)
 80093d2:	f000 b8ae 	b.w	8009532 <__retarget_lock_release_recursive>
 80093d6:	bf00      	nop
 80093d8:	2400020d 	.word	0x2400020d

080093dc <__sinit_lock_acquire>:
 80093dc:	4801      	ldr	r0, [pc, #4]	; (80093e4 <__sinit_lock_acquire+0x8>)
 80093de:	f000 b8a7 	b.w	8009530 <__retarget_lock_acquire_recursive>
 80093e2:	bf00      	nop
 80093e4:	2400020e 	.word	0x2400020e

080093e8 <__sinit_lock_release>:
 80093e8:	4801      	ldr	r0, [pc, #4]	; (80093f0 <__sinit_lock_release+0x8>)
 80093ea:	f000 b8a2 	b.w	8009532 <__retarget_lock_release_recursive>
 80093ee:	bf00      	nop
 80093f0:	2400020e 	.word	0x2400020e

080093f4 <__sinit>:
 80093f4:	b510      	push	{r4, lr}
 80093f6:	4604      	mov	r4, r0
 80093f8:	f7ff fff0 	bl	80093dc <__sinit_lock_acquire>
 80093fc:	69a3      	ldr	r3, [r4, #24]
 80093fe:	b11b      	cbz	r3, 8009408 <__sinit+0x14>
 8009400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009404:	f7ff bff0 	b.w	80093e8 <__sinit_lock_release>
 8009408:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800940c:	6523      	str	r3, [r4, #80]	; 0x50
 800940e:	4b13      	ldr	r3, [pc, #76]	; (800945c <__sinit+0x68>)
 8009410:	4a13      	ldr	r2, [pc, #76]	; (8009460 <__sinit+0x6c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	62a2      	str	r2, [r4, #40]	; 0x28
 8009416:	42a3      	cmp	r3, r4
 8009418:	bf04      	itt	eq
 800941a:	2301      	moveq	r3, #1
 800941c:	61a3      	streq	r3, [r4, #24]
 800941e:	4620      	mov	r0, r4
 8009420:	f000 f820 	bl	8009464 <__sfp>
 8009424:	6060      	str	r0, [r4, #4]
 8009426:	4620      	mov	r0, r4
 8009428:	f000 f81c 	bl	8009464 <__sfp>
 800942c:	60a0      	str	r0, [r4, #8]
 800942e:	4620      	mov	r0, r4
 8009430:	f000 f818 	bl	8009464 <__sfp>
 8009434:	2200      	movs	r2, #0
 8009436:	60e0      	str	r0, [r4, #12]
 8009438:	2104      	movs	r1, #4
 800943a:	6860      	ldr	r0, [r4, #4]
 800943c:	f7ff ff82 	bl	8009344 <std>
 8009440:	68a0      	ldr	r0, [r4, #8]
 8009442:	2201      	movs	r2, #1
 8009444:	2109      	movs	r1, #9
 8009446:	f7ff ff7d 	bl	8009344 <std>
 800944a:	68e0      	ldr	r0, [r4, #12]
 800944c:	2202      	movs	r2, #2
 800944e:	2112      	movs	r1, #18
 8009450:	f7ff ff78 	bl	8009344 <std>
 8009454:	2301      	movs	r3, #1
 8009456:	61a3      	str	r3, [r4, #24]
 8009458:	e7d2      	b.n	8009400 <__sinit+0xc>
 800945a:	bf00      	nop
 800945c:	0800a108 	.word	0x0800a108
 8009460:	0800938d 	.word	0x0800938d

08009464 <__sfp>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	4607      	mov	r7, r0
 8009468:	f7ff ffac 	bl	80093c4 <__sfp_lock_acquire>
 800946c:	4b1e      	ldr	r3, [pc, #120]	; (80094e8 <__sfp+0x84>)
 800946e:	681e      	ldr	r6, [r3, #0]
 8009470:	69b3      	ldr	r3, [r6, #24]
 8009472:	b913      	cbnz	r3, 800947a <__sfp+0x16>
 8009474:	4630      	mov	r0, r6
 8009476:	f7ff ffbd 	bl	80093f4 <__sinit>
 800947a:	3648      	adds	r6, #72	; 0x48
 800947c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009480:	3b01      	subs	r3, #1
 8009482:	d503      	bpl.n	800948c <__sfp+0x28>
 8009484:	6833      	ldr	r3, [r6, #0]
 8009486:	b30b      	cbz	r3, 80094cc <__sfp+0x68>
 8009488:	6836      	ldr	r6, [r6, #0]
 800948a:	e7f7      	b.n	800947c <__sfp+0x18>
 800948c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009490:	b9d5      	cbnz	r5, 80094c8 <__sfp+0x64>
 8009492:	4b16      	ldr	r3, [pc, #88]	; (80094ec <__sfp+0x88>)
 8009494:	60e3      	str	r3, [r4, #12]
 8009496:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800949a:	6665      	str	r5, [r4, #100]	; 0x64
 800949c:	f000 f847 	bl	800952e <__retarget_lock_init_recursive>
 80094a0:	f7ff ff96 	bl	80093d0 <__sfp_lock_release>
 80094a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094ac:	6025      	str	r5, [r4, #0]
 80094ae:	61a5      	str	r5, [r4, #24]
 80094b0:	2208      	movs	r2, #8
 80094b2:	4629      	mov	r1, r5
 80094b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094b8:	f7ff fd2c 	bl	8008f14 <memset>
 80094bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094c4:	4620      	mov	r0, r4
 80094c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c8:	3468      	adds	r4, #104	; 0x68
 80094ca:	e7d9      	b.n	8009480 <__sfp+0x1c>
 80094cc:	2104      	movs	r1, #4
 80094ce:	4638      	mov	r0, r7
 80094d0:	f7ff ff62 	bl	8009398 <__sfmoreglue>
 80094d4:	4604      	mov	r4, r0
 80094d6:	6030      	str	r0, [r6, #0]
 80094d8:	2800      	cmp	r0, #0
 80094da:	d1d5      	bne.n	8009488 <__sfp+0x24>
 80094dc:	f7ff ff78 	bl	80093d0 <__sfp_lock_release>
 80094e0:	230c      	movs	r3, #12
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	e7ee      	b.n	80094c4 <__sfp+0x60>
 80094e6:	bf00      	nop
 80094e8:	0800a108 	.word	0x0800a108
 80094ec:	ffff0001 	.word	0xffff0001

080094f0 <_fwalk_reent>:
 80094f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f4:	4606      	mov	r6, r0
 80094f6:	4688      	mov	r8, r1
 80094f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094fc:	2700      	movs	r7, #0
 80094fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009502:	f1b9 0901 	subs.w	r9, r9, #1
 8009506:	d505      	bpl.n	8009514 <_fwalk_reent+0x24>
 8009508:	6824      	ldr	r4, [r4, #0]
 800950a:	2c00      	cmp	r4, #0
 800950c:	d1f7      	bne.n	80094fe <_fwalk_reent+0xe>
 800950e:	4638      	mov	r0, r7
 8009510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009514:	89ab      	ldrh	r3, [r5, #12]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d907      	bls.n	800952a <_fwalk_reent+0x3a>
 800951a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800951e:	3301      	adds	r3, #1
 8009520:	d003      	beq.n	800952a <_fwalk_reent+0x3a>
 8009522:	4629      	mov	r1, r5
 8009524:	4630      	mov	r0, r6
 8009526:	47c0      	blx	r8
 8009528:	4307      	orrs	r7, r0
 800952a:	3568      	adds	r5, #104	; 0x68
 800952c:	e7e9      	b.n	8009502 <_fwalk_reent+0x12>

0800952e <__retarget_lock_init_recursive>:
 800952e:	4770      	bx	lr

08009530 <__retarget_lock_acquire_recursive>:
 8009530:	4770      	bx	lr

08009532 <__retarget_lock_release_recursive>:
 8009532:	4770      	bx	lr

08009534 <__swhatbuf_r>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	460e      	mov	r6, r1
 8009538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800953c:	2900      	cmp	r1, #0
 800953e:	b096      	sub	sp, #88	; 0x58
 8009540:	4614      	mov	r4, r2
 8009542:	461d      	mov	r5, r3
 8009544:	da08      	bge.n	8009558 <__swhatbuf_r+0x24>
 8009546:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	602a      	str	r2, [r5, #0]
 800954e:	061a      	lsls	r2, r3, #24
 8009550:	d410      	bmi.n	8009574 <__swhatbuf_r+0x40>
 8009552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009556:	e00e      	b.n	8009576 <__swhatbuf_r+0x42>
 8009558:	466a      	mov	r2, sp
 800955a:	f000 fc95 	bl	8009e88 <_fstat_r>
 800955e:	2800      	cmp	r0, #0
 8009560:	dbf1      	blt.n	8009546 <__swhatbuf_r+0x12>
 8009562:	9a01      	ldr	r2, [sp, #4]
 8009564:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009568:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800956c:	425a      	negs	r2, r3
 800956e:	415a      	adcs	r2, r3
 8009570:	602a      	str	r2, [r5, #0]
 8009572:	e7ee      	b.n	8009552 <__swhatbuf_r+0x1e>
 8009574:	2340      	movs	r3, #64	; 0x40
 8009576:	2000      	movs	r0, #0
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	b016      	add	sp, #88	; 0x58
 800957c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009580 <__smakebuf_r>:
 8009580:	898b      	ldrh	r3, [r1, #12]
 8009582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009584:	079d      	lsls	r5, r3, #30
 8009586:	4606      	mov	r6, r0
 8009588:	460c      	mov	r4, r1
 800958a:	d507      	bpl.n	800959c <__smakebuf_r+0x1c>
 800958c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	6123      	str	r3, [r4, #16]
 8009594:	2301      	movs	r3, #1
 8009596:	6163      	str	r3, [r4, #20]
 8009598:	b002      	add	sp, #8
 800959a:	bd70      	pop	{r4, r5, r6, pc}
 800959c:	ab01      	add	r3, sp, #4
 800959e:	466a      	mov	r2, sp
 80095a0:	f7ff ffc8 	bl	8009534 <__swhatbuf_r>
 80095a4:	9900      	ldr	r1, [sp, #0]
 80095a6:	4605      	mov	r5, r0
 80095a8:	4630      	mov	r0, r6
 80095aa:	f000 f895 	bl	80096d8 <_malloc_r>
 80095ae:	b948      	cbnz	r0, 80095c4 <__smakebuf_r+0x44>
 80095b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b4:	059a      	lsls	r2, r3, #22
 80095b6:	d4ef      	bmi.n	8009598 <__smakebuf_r+0x18>
 80095b8:	f023 0303 	bic.w	r3, r3, #3
 80095bc:	f043 0302 	orr.w	r3, r3, #2
 80095c0:	81a3      	strh	r3, [r4, #12]
 80095c2:	e7e3      	b.n	800958c <__smakebuf_r+0xc>
 80095c4:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <__smakebuf_r+0x7c>)
 80095c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80095c8:	89a3      	ldrh	r3, [r4, #12]
 80095ca:	6020      	str	r0, [r4, #0]
 80095cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d0:	81a3      	strh	r3, [r4, #12]
 80095d2:	9b00      	ldr	r3, [sp, #0]
 80095d4:	6163      	str	r3, [r4, #20]
 80095d6:	9b01      	ldr	r3, [sp, #4]
 80095d8:	6120      	str	r0, [r4, #16]
 80095da:	b15b      	cbz	r3, 80095f4 <__smakebuf_r+0x74>
 80095dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095e0:	4630      	mov	r0, r6
 80095e2:	f000 fc63 	bl	8009eac <_isatty_r>
 80095e6:	b128      	cbz	r0, 80095f4 <__smakebuf_r+0x74>
 80095e8:	89a3      	ldrh	r3, [r4, #12]
 80095ea:	f023 0303 	bic.w	r3, r3, #3
 80095ee:	f043 0301 	orr.w	r3, r3, #1
 80095f2:	81a3      	strh	r3, [r4, #12]
 80095f4:	89a0      	ldrh	r0, [r4, #12]
 80095f6:	4305      	orrs	r5, r0
 80095f8:	81a5      	strh	r5, [r4, #12]
 80095fa:	e7cd      	b.n	8009598 <__smakebuf_r+0x18>
 80095fc:	0800938d 	.word	0x0800938d

08009600 <_free_r>:
 8009600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009602:	2900      	cmp	r1, #0
 8009604:	d044      	beq.n	8009690 <_free_r+0x90>
 8009606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800960a:	9001      	str	r0, [sp, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	f1a1 0404 	sub.w	r4, r1, #4
 8009612:	bfb8      	it	lt
 8009614:	18e4      	addlt	r4, r4, r3
 8009616:	f000 fc6b 	bl	8009ef0 <__malloc_lock>
 800961a:	4a1e      	ldr	r2, [pc, #120]	; (8009694 <_free_r+0x94>)
 800961c:	9801      	ldr	r0, [sp, #4]
 800961e:	6813      	ldr	r3, [r2, #0]
 8009620:	b933      	cbnz	r3, 8009630 <_free_r+0x30>
 8009622:	6063      	str	r3, [r4, #4]
 8009624:	6014      	str	r4, [r2, #0]
 8009626:	b003      	add	sp, #12
 8009628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800962c:	f000 bc66 	b.w	8009efc <__malloc_unlock>
 8009630:	42a3      	cmp	r3, r4
 8009632:	d908      	bls.n	8009646 <_free_r+0x46>
 8009634:	6825      	ldr	r5, [r4, #0]
 8009636:	1961      	adds	r1, r4, r5
 8009638:	428b      	cmp	r3, r1
 800963a:	bf01      	itttt	eq
 800963c:	6819      	ldreq	r1, [r3, #0]
 800963e:	685b      	ldreq	r3, [r3, #4]
 8009640:	1949      	addeq	r1, r1, r5
 8009642:	6021      	streq	r1, [r4, #0]
 8009644:	e7ed      	b.n	8009622 <_free_r+0x22>
 8009646:	461a      	mov	r2, r3
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	b10b      	cbz	r3, 8009650 <_free_r+0x50>
 800964c:	42a3      	cmp	r3, r4
 800964e:	d9fa      	bls.n	8009646 <_free_r+0x46>
 8009650:	6811      	ldr	r1, [r2, #0]
 8009652:	1855      	adds	r5, r2, r1
 8009654:	42a5      	cmp	r5, r4
 8009656:	d10b      	bne.n	8009670 <_free_r+0x70>
 8009658:	6824      	ldr	r4, [r4, #0]
 800965a:	4421      	add	r1, r4
 800965c:	1854      	adds	r4, r2, r1
 800965e:	42a3      	cmp	r3, r4
 8009660:	6011      	str	r1, [r2, #0]
 8009662:	d1e0      	bne.n	8009626 <_free_r+0x26>
 8009664:	681c      	ldr	r4, [r3, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	6053      	str	r3, [r2, #4]
 800966a:	4421      	add	r1, r4
 800966c:	6011      	str	r1, [r2, #0]
 800966e:	e7da      	b.n	8009626 <_free_r+0x26>
 8009670:	d902      	bls.n	8009678 <_free_r+0x78>
 8009672:	230c      	movs	r3, #12
 8009674:	6003      	str	r3, [r0, #0]
 8009676:	e7d6      	b.n	8009626 <_free_r+0x26>
 8009678:	6825      	ldr	r5, [r4, #0]
 800967a:	1961      	adds	r1, r4, r5
 800967c:	428b      	cmp	r3, r1
 800967e:	bf04      	itt	eq
 8009680:	6819      	ldreq	r1, [r3, #0]
 8009682:	685b      	ldreq	r3, [r3, #4]
 8009684:	6063      	str	r3, [r4, #4]
 8009686:	bf04      	itt	eq
 8009688:	1949      	addeq	r1, r1, r5
 800968a:	6021      	streq	r1, [r4, #0]
 800968c:	6054      	str	r4, [r2, #4]
 800968e:	e7ca      	b.n	8009626 <_free_r+0x26>
 8009690:	b003      	add	sp, #12
 8009692:	bd30      	pop	{r4, r5, pc}
 8009694:	24000210 	.word	0x24000210

08009698 <sbrk_aligned>:
 8009698:	b570      	push	{r4, r5, r6, lr}
 800969a:	4e0e      	ldr	r6, [pc, #56]	; (80096d4 <sbrk_aligned+0x3c>)
 800969c:	460c      	mov	r4, r1
 800969e:	6831      	ldr	r1, [r6, #0]
 80096a0:	4605      	mov	r5, r0
 80096a2:	b911      	cbnz	r1, 80096aa <sbrk_aligned+0x12>
 80096a4:	f000 fb7a 	bl	8009d9c <_sbrk_r>
 80096a8:	6030      	str	r0, [r6, #0]
 80096aa:	4621      	mov	r1, r4
 80096ac:	4628      	mov	r0, r5
 80096ae:	f000 fb75 	bl	8009d9c <_sbrk_r>
 80096b2:	1c43      	adds	r3, r0, #1
 80096b4:	d00a      	beq.n	80096cc <sbrk_aligned+0x34>
 80096b6:	1cc4      	adds	r4, r0, #3
 80096b8:	f024 0403 	bic.w	r4, r4, #3
 80096bc:	42a0      	cmp	r0, r4
 80096be:	d007      	beq.n	80096d0 <sbrk_aligned+0x38>
 80096c0:	1a21      	subs	r1, r4, r0
 80096c2:	4628      	mov	r0, r5
 80096c4:	f000 fb6a 	bl	8009d9c <_sbrk_r>
 80096c8:	3001      	adds	r0, #1
 80096ca:	d101      	bne.n	80096d0 <sbrk_aligned+0x38>
 80096cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80096d0:	4620      	mov	r0, r4
 80096d2:	bd70      	pop	{r4, r5, r6, pc}
 80096d4:	24000214 	.word	0x24000214

080096d8 <_malloc_r>:
 80096d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096dc:	1ccd      	adds	r5, r1, #3
 80096de:	f025 0503 	bic.w	r5, r5, #3
 80096e2:	3508      	adds	r5, #8
 80096e4:	2d0c      	cmp	r5, #12
 80096e6:	bf38      	it	cc
 80096e8:	250c      	movcc	r5, #12
 80096ea:	2d00      	cmp	r5, #0
 80096ec:	4607      	mov	r7, r0
 80096ee:	db01      	blt.n	80096f4 <_malloc_r+0x1c>
 80096f0:	42a9      	cmp	r1, r5
 80096f2:	d905      	bls.n	8009700 <_malloc_r+0x28>
 80096f4:	230c      	movs	r3, #12
 80096f6:	603b      	str	r3, [r7, #0]
 80096f8:	2600      	movs	r6, #0
 80096fa:	4630      	mov	r0, r6
 80096fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009700:	4e2e      	ldr	r6, [pc, #184]	; (80097bc <_malloc_r+0xe4>)
 8009702:	f000 fbf5 	bl	8009ef0 <__malloc_lock>
 8009706:	6833      	ldr	r3, [r6, #0]
 8009708:	461c      	mov	r4, r3
 800970a:	bb34      	cbnz	r4, 800975a <_malloc_r+0x82>
 800970c:	4629      	mov	r1, r5
 800970e:	4638      	mov	r0, r7
 8009710:	f7ff ffc2 	bl	8009698 <sbrk_aligned>
 8009714:	1c43      	adds	r3, r0, #1
 8009716:	4604      	mov	r4, r0
 8009718:	d14d      	bne.n	80097b6 <_malloc_r+0xde>
 800971a:	6834      	ldr	r4, [r6, #0]
 800971c:	4626      	mov	r6, r4
 800971e:	2e00      	cmp	r6, #0
 8009720:	d140      	bne.n	80097a4 <_malloc_r+0xcc>
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	4631      	mov	r1, r6
 8009726:	4638      	mov	r0, r7
 8009728:	eb04 0803 	add.w	r8, r4, r3
 800972c:	f000 fb36 	bl	8009d9c <_sbrk_r>
 8009730:	4580      	cmp	r8, r0
 8009732:	d13a      	bne.n	80097aa <_malloc_r+0xd2>
 8009734:	6821      	ldr	r1, [r4, #0]
 8009736:	3503      	adds	r5, #3
 8009738:	1a6d      	subs	r5, r5, r1
 800973a:	f025 0503 	bic.w	r5, r5, #3
 800973e:	3508      	adds	r5, #8
 8009740:	2d0c      	cmp	r5, #12
 8009742:	bf38      	it	cc
 8009744:	250c      	movcc	r5, #12
 8009746:	4629      	mov	r1, r5
 8009748:	4638      	mov	r0, r7
 800974a:	f7ff ffa5 	bl	8009698 <sbrk_aligned>
 800974e:	3001      	adds	r0, #1
 8009750:	d02b      	beq.n	80097aa <_malloc_r+0xd2>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	442b      	add	r3, r5
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	e00e      	b.n	8009778 <_malloc_r+0xa0>
 800975a:	6822      	ldr	r2, [r4, #0]
 800975c:	1b52      	subs	r2, r2, r5
 800975e:	d41e      	bmi.n	800979e <_malloc_r+0xc6>
 8009760:	2a0b      	cmp	r2, #11
 8009762:	d916      	bls.n	8009792 <_malloc_r+0xba>
 8009764:	1961      	adds	r1, r4, r5
 8009766:	42a3      	cmp	r3, r4
 8009768:	6025      	str	r5, [r4, #0]
 800976a:	bf18      	it	ne
 800976c:	6059      	strne	r1, [r3, #4]
 800976e:	6863      	ldr	r3, [r4, #4]
 8009770:	bf08      	it	eq
 8009772:	6031      	streq	r1, [r6, #0]
 8009774:	5162      	str	r2, [r4, r5]
 8009776:	604b      	str	r3, [r1, #4]
 8009778:	4638      	mov	r0, r7
 800977a:	f104 060b 	add.w	r6, r4, #11
 800977e:	f000 fbbd 	bl	8009efc <__malloc_unlock>
 8009782:	f026 0607 	bic.w	r6, r6, #7
 8009786:	1d23      	adds	r3, r4, #4
 8009788:	1af2      	subs	r2, r6, r3
 800978a:	d0b6      	beq.n	80096fa <_malloc_r+0x22>
 800978c:	1b9b      	subs	r3, r3, r6
 800978e:	50a3      	str	r3, [r4, r2]
 8009790:	e7b3      	b.n	80096fa <_malloc_r+0x22>
 8009792:	6862      	ldr	r2, [r4, #4]
 8009794:	42a3      	cmp	r3, r4
 8009796:	bf0c      	ite	eq
 8009798:	6032      	streq	r2, [r6, #0]
 800979a:	605a      	strne	r2, [r3, #4]
 800979c:	e7ec      	b.n	8009778 <_malloc_r+0xa0>
 800979e:	4623      	mov	r3, r4
 80097a0:	6864      	ldr	r4, [r4, #4]
 80097a2:	e7b2      	b.n	800970a <_malloc_r+0x32>
 80097a4:	4634      	mov	r4, r6
 80097a6:	6876      	ldr	r6, [r6, #4]
 80097a8:	e7b9      	b.n	800971e <_malloc_r+0x46>
 80097aa:	230c      	movs	r3, #12
 80097ac:	603b      	str	r3, [r7, #0]
 80097ae:	4638      	mov	r0, r7
 80097b0:	f000 fba4 	bl	8009efc <__malloc_unlock>
 80097b4:	e7a1      	b.n	80096fa <_malloc_r+0x22>
 80097b6:	6025      	str	r5, [r4, #0]
 80097b8:	e7de      	b.n	8009778 <_malloc_r+0xa0>
 80097ba:	bf00      	nop
 80097bc:	24000210 	.word	0x24000210

080097c0 <__sfputc_r>:
 80097c0:	6893      	ldr	r3, [r2, #8]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	b410      	push	{r4}
 80097c8:	6093      	str	r3, [r2, #8]
 80097ca:	da08      	bge.n	80097de <__sfputc_r+0x1e>
 80097cc:	6994      	ldr	r4, [r2, #24]
 80097ce:	42a3      	cmp	r3, r4
 80097d0:	db01      	blt.n	80097d6 <__sfputc_r+0x16>
 80097d2:	290a      	cmp	r1, #10
 80097d4:	d103      	bne.n	80097de <__sfputc_r+0x1e>
 80097d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097da:	f7ff bc31 	b.w	8009040 <__swbuf_r>
 80097de:	6813      	ldr	r3, [r2, #0]
 80097e0:	1c58      	adds	r0, r3, #1
 80097e2:	6010      	str	r0, [r2, #0]
 80097e4:	7019      	strb	r1, [r3, #0]
 80097e6:	4608      	mov	r0, r1
 80097e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <__sfputs_r>:
 80097ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f0:	4606      	mov	r6, r0
 80097f2:	460f      	mov	r7, r1
 80097f4:	4614      	mov	r4, r2
 80097f6:	18d5      	adds	r5, r2, r3
 80097f8:	42ac      	cmp	r4, r5
 80097fa:	d101      	bne.n	8009800 <__sfputs_r+0x12>
 80097fc:	2000      	movs	r0, #0
 80097fe:	e007      	b.n	8009810 <__sfputs_r+0x22>
 8009800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009804:	463a      	mov	r2, r7
 8009806:	4630      	mov	r0, r6
 8009808:	f7ff ffda 	bl	80097c0 <__sfputc_r>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d1f3      	bne.n	80097f8 <__sfputs_r+0xa>
 8009810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009814 <_vfiprintf_r>:
 8009814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	460d      	mov	r5, r1
 800981a:	b09d      	sub	sp, #116	; 0x74
 800981c:	4614      	mov	r4, r2
 800981e:	4698      	mov	r8, r3
 8009820:	4606      	mov	r6, r0
 8009822:	b118      	cbz	r0, 800982c <_vfiprintf_r+0x18>
 8009824:	6983      	ldr	r3, [r0, #24]
 8009826:	b90b      	cbnz	r3, 800982c <_vfiprintf_r+0x18>
 8009828:	f7ff fde4 	bl	80093f4 <__sinit>
 800982c:	4b89      	ldr	r3, [pc, #548]	; (8009a54 <_vfiprintf_r+0x240>)
 800982e:	429d      	cmp	r5, r3
 8009830:	d11b      	bne.n	800986a <_vfiprintf_r+0x56>
 8009832:	6875      	ldr	r5, [r6, #4]
 8009834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009836:	07d9      	lsls	r1, r3, #31
 8009838:	d405      	bmi.n	8009846 <_vfiprintf_r+0x32>
 800983a:	89ab      	ldrh	r3, [r5, #12]
 800983c:	059a      	lsls	r2, r3, #22
 800983e:	d402      	bmi.n	8009846 <_vfiprintf_r+0x32>
 8009840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009842:	f7ff fe75 	bl	8009530 <__retarget_lock_acquire_recursive>
 8009846:	89ab      	ldrh	r3, [r5, #12]
 8009848:	071b      	lsls	r3, r3, #28
 800984a:	d501      	bpl.n	8009850 <_vfiprintf_r+0x3c>
 800984c:	692b      	ldr	r3, [r5, #16]
 800984e:	b9eb      	cbnz	r3, 800988c <_vfiprintf_r+0x78>
 8009850:	4629      	mov	r1, r5
 8009852:	4630      	mov	r0, r6
 8009854:	f7ff fc46 	bl	80090e4 <__swsetup_r>
 8009858:	b1c0      	cbz	r0, 800988c <_vfiprintf_r+0x78>
 800985a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800985c:	07dc      	lsls	r4, r3, #31
 800985e:	d50e      	bpl.n	800987e <_vfiprintf_r+0x6a>
 8009860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009864:	b01d      	add	sp, #116	; 0x74
 8009866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986a:	4b7b      	ldr	r3, [pc, #492]	; (8009a58 <_vfiprintf_r+0x244>)
 800986c:	429d      	cmp	r5, r3
 800986e:	d101      	bne.n	8009874 <_vfiprintf_r+0x60>
 8009870:	68b5      	ldr	r5, [r6, #8]
 8009872:	e7df      	b.n	8009834 <_vfiprintf_r+0x20>
 8009874:	4b79      	ldr	r3, [pc, #484]	; (8009a5c <_vfiprintf_r+0x248>)
 8009876:	429d      	cmp	r5, r3
 8009878:	bf08      	it	eq
 800987a:	68f5      	ldreq	r5, [r6, #12]
 800987c:	e7da      	b.n	8009834 <_vfiprintf_r+0x20>
 800987e:	89ab      	ldrh	r3, [r5, #12]
 8009880:	0598      	lsls	r0, r3, #22
 8009882:	d4ed      	bmi.n	8009860 <_vfiprintf_r+0x4c>
 8009884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009886:	f7ff fe54 	bl	8009532 <__retarget_lock_release_recursive>
 800988a:	e7e9      	b.n	8009860 <_vfiprintf_r+0x4c>
 800988c:	2300      	movs	r3, #0
 800988e:	9309      	str	r3, [sp, #36]	; 0x24
 8009890:	2320      	movs	r3, #32
 8009892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009896:	f8cd 800c 	str.w	r8, [sp, #12]
 800989a:	2330      	movs	r3, #48	; 0x30
 800989c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a60 <_vfiprintf_r+0x24c>
 80098a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098a4:	f04f 0901 	mov.w	r9, #1
 80098a8:	4623      	mov	r3, r4
 80098aa:	469a      	mov	sl, r3
 80098ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098b0:	b10a      	cbz	r2, 80098b6 <_vfiprintf_r+0xa2>
 80098b2:	2a25      	cmp	r2, #37	; 0x25
 80098b4:	d1f9      	bne.n	80098aa <_vfiprintf_r+0x96>
 80098b6:	ebba 0b04 	subs.w	fp, sl, r4
 80098ba:	d00b      	beq.n	80098d4 <_vfiprintf_r+0xc0>
 80098bc:	465b      	mov	r3, fp
 80098be:	4622      	mov	r2, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	4630      	mov	r0, r6
 80098c4:	f7ff ff93 	bl	80097ee <__sfputs_r>
 80098c8:	3001      	adds	r0, #1
 80098ca:	f000 80aa 	beq.w	8009a22 <_vfiprintf_r+0x20e>
 80098ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098d0:	445a      	add	r2, fp
 80098d2:	9209      	str	r2, [sp, #36]	; 0x24
 80098d4:	f89a 3000 	ldrb.w	r3, [sl]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 80a2 	beq.w	8009a22 <_vfiprintf_r+0x20e>
 80098de:	2300      	movs	r3, #0
 80098e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098e8:	f10a 0a01 	add.w	sl, sl, #1
 80098ec:	9304      	str	r3, [sp, #16]
 80098ee:	9307      	str	r3, [sp, #28]
 80098f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098f4:	931a      	str	r3, [sp, #104]	; 0x68
 80098f6:	4654      	mov	r4, sl
 80098f8:	2205      	movs	r2, #5
 80098fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fe:	4858      	ldr	r0, [pc, #352]	; (8009a60 <_vfiprintf_r+0x24c>)
 8009900:	f7f6 fd06 	bl	8000310 <memchr>
 8009904:	9a04      	ldr	r2, [sp, #16]
 8009906:	b9d8      	cbnz	r0, 8009940 <_vfiprintf_r+0x12c>
 8009908:	06d1      	lsls	r1, r2, #27
 800990a:	bf44      	itt	mi
 800990c:	2320      	movmi	r3, #32
 800990e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009912:	0713      	lsls	r3, r2, #28
 8009914:	bf44      	itt	mi
 8009916:	232b      	movmi	r3, #43	; 0x2b
 8009918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800991c:	f89a 3000 	ldrb.w	r3, [sl]
 8009920:	2b2a      	cmp	r3, #42	; 0x2a
 8009922:	d015      	beq.n	8009950 <_vfiprintf_r+0x13c>
 8009924:	9a07      	ldr	r2, [sp, #28]
 8009926:	4654      	mov	r4, sl
 8009928:	2000      	movs	r0, #0
 800992a:	f04f 0c0a 	mov.w	ip, #10
 800992e:	4621      	mov	r1, r4
 8009930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009934:	3b30      	subs	r3, #48	; 0x30
 8009936:	2b09      	cmp	r3, #9
 8009938:	d94e      	bls.n	80099d8 <_vfiprintf_r+0x1c4>
 800993a:	b1b0      	cbz	r0, 800996a <_vfiprintf_r+0x156>
 800993c:	9207      	str	r2, [sp, #28]
 800993e:	e014      	b.n	800996a <_vfiprintf_r+0x156>
 8009940:	eba0 0308 	sub.w	r3, r0, r8
 8009944:	fa09 f303 	lsl.w	r3, r9, r3
 8009948:	4313      	orrs	r3, r2
 800994a:	9304      	str	r3, [sp, #16]
 800994c:	46a2      	mov	sl, r4
 800994e:	e7d2      	b.n	80098f6 <_vfiprintf_r+0xe2>
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	1d19      	adds	r1, r3, #4
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	9103      	str	r1, [sp, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	bfbb      	ittet	lt
 800995c:	425b      	neglt	r3, r3
 800995e:	f042 0202 	orrlt.w	r2, r2, #2
 8009962:	9307      	strge	r3, [sp, #28]
 8009964:	9307      	strlt	r3, [sp, #28]
 8009966:	bfb8      	it	lt
 8009968:	9204      	strlt	r2, [sp, #16]
 800996a:	7823      	ldrb	r3, [r4, #0]
 800996c:	2b2e      	cmp	r3, #46	; 0x2e
 800996e:	d10c      	bne.n	800998a <_vfiprintf_r+0x176>
 8009970:	7863      	ldrb	r3, [r4, #1]
 8009972:	2b2a      	cmp	r3, #42	; 0x2a
 8009974:	d135      	bne.n	80099e2 <_vfiprintf_r+0x1ce>
 8009976:	9b03      	ldr	r3, [sp, #12]
 8009978:	1d1a      	adds	r2, r3, #4
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	9203      	str	r2, [sp, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	bfb8      	it	lt
 8009982:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009986:	3402      	adds	r4, #2
 8009988:	9305      	str	r3, [sp, #20]
 800998a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a70 <_vfiprintf_r+0x25c>
 800998e:	7821      	ldrb	r1, [r4, #0]
 8009990:	2203      	movs	r2, #3
 8009992:	4650      	mov	r0, sl
 8009994:	f7f6 fcbc 	bl	8000310 <memchr>
 8009998:	b140      	cbz	r0, 80099ac <_vfiprintf_r+0x198>
 800999a:	2340      	movs	r3, #64	; 0x40
 800999c:	eba0 000a 	sub.w	r0, r0, sl
 80099a0:	fa03 f000 	lsl.w	r0, r3, r0
 80099a4:	9b04      	ldr	r3, [sp, #16]
 80099a6:	4303      	orrs	r3, r0
 80099a8:	3401      	adds	r4, #1
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099b0:	482c      	ldr	r0, [pc, #176]	; (8009a64 <_vfiprintf_r+0x250>)
 80099b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099b6:	2206      	movs	r2, #6
 80099b8:	f7f6 fcaa 	bl	8000310 <memchr>
 80099bc:	2800      	cmp	r0, #0
 80099be:	d03f      	beq.n	8009a40 <_vfiprintf_r+0x22c>
 80099c0:	4b29      	ldr	r3, [pc, #164]	; (8009a68 <_vfiprintf_r+0x254>)
 80099c2:	bb1b      	cbnz	r3, 8009a0c <_vfiprintf_r+0x1f8>
 80099c4:	9b03      	ldr	r3, [sp, #12]
 80099c6:	3307      	adds	r3, #7
 80099c8:	f023 0307 	bic.w	r3, r3, #7
 80099cc:	3308      	adds	r3, #8
 80099ce:	9303      	str	r3, [sp, #12]
 80099d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d2:	443b      	add	r3, r7
 80099d4:	9309      	str	r3, [sp, #36]	; 0x24
 80099d6:	e767      	b.n	80098a8 <_vfiprintf_r+0x94>
 80099d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80099dc:	460c      	mov	r4, r1
 80099de:	2001      	movs	r0, #1
 80099e0:	e7a5      	b.n	800992e <_vfiprintf_r+0x11a>
 80099e2:	2300      	movs	r3, #0
 80099e4:	3401      	adds	r4, #1
 80099e6:	9305      	str	r3, [sp, #20]
 80099e8:	4619      	mov	r1, r3
 80099ea:	f04f 0c0a 	mov.w	ip, #10
 80099ee:	4620      	mov	r0, r4
 80099f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099f4:	3a30      	subs	r2, #48	; 0x30
 80099f6:	2a09      	cmp	r2, #9
 80099f8:	d903      	bls.n	8009a02 <_vfiprintf_r+0x1ee>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0c5      	beq.n	800998a <_vfiprintf_r+0x176>
 80099fe:	9105      	str	r1, [sp, #20]
 8009a00:	e7c3      	b.n	800998a <_vfiprintf_r+0x176>
 8009a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a06:	4604      	mov	r4, r0
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e7f0      	b.n	80099ee <_vfiprintf_r+0x1da>
 8009a0c:	ab03      	add	r3, sp, #12
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	462a      	mov	r2, r5
 8009a12:	4b16      	ldr	r3, [pc, #88]	; (8009a6c <_vfiprintf_r+0x258>)
 8009a14:	a904      	add	r1, sp, #16
 8009a16:	4630      	mov	r0, r6
 8009a18:	f3af 8000 	nop.w
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	1c78      	adds	r0, r7, #1
 8009a20:	d1d6      	bne.n	80099d0 <_vfiprintf_r+0x1bc>
 8009a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a24:	07d9      	lsls	r1, r3, #31
 8009a26:	d405      	bmi.n	8009a34 <_vfiprintf_r+0x220>
 8009a28:	89ab      	ldrh	r3, [r5, #12]
 8009a2a:	059a      	lsls	r2, r3, #22
 8009a2c:	d402      	bmi.n	8009a34 <_vfiprintf_r+0x220>
 8009a2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a30:	f7ff fd7f 	bl	8009532 <__retarget_lock_release_recursive>
 8009a34:	89ab      	ldrh	r3, [r5, #12]
 8009a36:	065b      	lsls	r3, r3, #25
 8009a38:	f53f af12 	bmi.w	8009860 <_vfiprintf_r+0x4c>
 8009a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a3e:	e711      	b.n	8009864 <_vfiprintf_r+0x50>
 8009a40:	ab03      	add	r3, sp, #12
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	462a      	mov	r2, r5
 8009a46:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <_vfiprintf_r+0x258>)
 8009a48:	a904      	add	r1, sp, #16
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f000 f880 	bl	8009b50 <_printf_i>
 8009a50:	e7e4      	b.n	8009a1c <_vfiprintf_r+0x208>
 8009a52:	bf00      	nop
 8009a54:	0800a12c 	.word	0x0800a12c
 8009a58:	0800a14c 	.word	0x0800a14c
 8009a5c:	0800a10c 	.word	0x0800a10c
 8009a60:	0800a16c 	.word	0x0800a16c
 8009a64:	0800a176 	.word	0x0800a176
 8009a68:	00000000 	.word	0x00000000
 8009a6c:	080097ef 	.word	0x080097ef
 8009a70:	0800a172 	.word	0x0800a172

08009a74 <_printf_common>:
 8009a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	4616      	mov	r6, r2
 8009a7a:	4699      	mov	r9, r3
 8009a7c:	688a      	ldr	r2, [r1, #8]
 8009a7e:	690b      	ldr	r3, [r1, #16]
 8009a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a84:	4293      	cmp	r3, r2
 8009a86:	bfb8      	it	lt
 8009a88:	4613      	movlt	r3, r2
 8009a8a:	6033      	str	r3, [r6, #0]
 8009a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a90:	4607      	mov	r7, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	b10a      	cbz	r2, 8009a9a <_printf_common+0x26>
 8009a96:	3301      	adds	r3, #1
 8009a98:	6033      	str	r3, [r6, #0]
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	0699      	lsls	r1, r3, #26
 8009a9e:	bf42      	ittt	mi
 8009aa0:	6833      	ldrmi	r3, [r6, #0]
 8009aa2:	3302      	addmi	r3, #2
 8009aa4:	6033      	strmi	r3, [r6, #0]
 8009aa6:	6825      	ldr	r5, [r4, #0]
 8009aa8:	f015 0506 	ands.w	r5, r5, #6
 8009aac:	d106      	bne.n	8009abc <_printf_common+0x48>
 8009aae:	f104 0a19 	add.w	sl, r4, #25
 8009ab2:	68e3      	ldr	r3, [r4, #12]
 8009ab4:	6832      	ldr	r2, [r6, #0]
 8009ab6:	1a9b      	subs	r3, r3, r2
 8009ab8:	42ab      	cmp	r3, r5
 8009aba:	dc26      	bgt.n	8009b0a <_printf_common+0x96>
 8009abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ac0:	1e13      	subs	r3, r2, #0
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	bf18      	it	ne
 8009ac6:	2301      	movne	r3, #1
 8009ac8:	0692      	lsls	r2, r2, #26
 8009aca:	d42b      	bmi.n	8009b24 <_printf_common+0xb0>
 8009acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	47c0      	blx	r8
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	d01e      	beq.n	8009b18 <_printf_common+0xa4>
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	68e5      	ldr	r5, [r4, #12]
 8009ade:	6832      	ldr	r2, [r6, #0]
 8009ae0:	f003 0306 	and.w	r3, r3, #6
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	bf08      	it	eq
 8009ae8:	1aad      	subeq	r5, r5, r2
 8009aea:	68a3      	ldr	r3, [r4, #8]
 8009aec:	6922      	ldr	r2, [r4, #16]
 8009aee:	bf0c      	ite	eq
 8009af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009af4:	2500      	movne	r5, #0
 8009af6:	4293      	cmp	r3, r2
 8009af8:	bfc4      	itt	gt
 8009afa:	1a9b      	subgt	r3, r3, r2
 8009afc:	18ed      	addgt	r5, r5, r3
 8009afe:	2600      	movs	r6, #0
 8009b00:	341a      	adds	r4, #26
 8009b02:	42b5      	cmp	r5, r6
 8009b04:	d11a      	bne.n	8009b3c <_printf_common+0xc8>
 8009b06:	2000      	movs	r0, #0
 8009b08:	e008      	b.n	8009b1c <_printf_common+0xa8>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	4649      	mov	r1, r9
 8009b10:	4638      	mov	r0, r7
 8009b12:	47c0      	blx	r8
 8009b14:	3001      	adds	r0, #1
 8009b16:	d103      	bne.n	8009b20 <_printf_common+0xac>
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b20:	3501      	adds	r5, #1
 8009b22:	e7c6      	b.n	8009ab2 <_printf_common+0x3e>
 8009b24:	18e1      	adds	r1, r4, r3
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	2030      	movs	r0, #48	; 0x30
 8009b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b2e:	4422      	add	r2, r4
 8009b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b38:	3302      	adds	r3, #2
 8009b3a:	e7c7      	b.n	8009acc <_printf_common+0x58>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	4622      	mov	r2, r4
 8009b40:	4649      	mov	r1, r9
 8009b42:	4638      	mov	r0, r7
 8009b44:	47c0      	blx	r8
 8009b46:	3001      	adds	r0, #1
 8009b48:	d0e6      	beq.n	8009b18 <_printf_common+0xa4>
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	e7d9      	b.n	8009b02 <_printf_common+0x8e>
	...

08009b50 <_printf_i>:
 8009b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	7e0f      	ldrb	r7, [r1, #24]
 8009b56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b58:	2f78      	cmp	r7, #120	; 0x78
 8009b5a:	4691      	mov	r9, r2
 8009b5c:	4680      	mov	r8, r0
 8009b5e:	460c      	mov	r4, r1
 8009b60:	469a      	mov	sl, r3
 8009b62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b66:	d807      	bhi.n	8009b78 <_printf_i+0x28>
 8009b68:	2f62      	cmp	r7, #98	; 0x62
 8009b6a:	d80a      	bhi.n	8009b82 <_printf_i+0x32>
 8009b6c:	2f00      	cmp	r7, #0
 8009b6e:	f000 80d8 	beq.w	8009d22 <_printf_i+0x1d2>
 8009b72:	2f58      	cmp	r7, #88	; 0x58
 8009b74:	f000 80a3 	beq.w	8009cbe <_printf_i+0x16e>
 8009b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b80:	e03a      	b.n	8009bf8 <_printf_i+0xa8>
 8009b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b86:	2b15      	cmp	r3, #21
 8009b88:	d8f6      	bhi.n	8009b78 <_printf_i+0x28>
 8009b8a:	a101      	add	r1, pc, #4	; (adr r1, 8009b90 <_printf_i+0x40>)
 8009b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b90:	08009be9 	.word	0x08009be9
 8009b94:	08009bfd 	.word	0x08009bfd
 8009b98:	08009b79 	.word	0x08009b79
 8009b9c:	08009b79 	.word	0x08009b79
 8009ba0:	08009b79 	.word	0x08009b79
 8009ba4:	08009b79 	.word	0x08009b79
 8009ba8:	08009bfd 	.word	0x08009bfd
 8009bac:	08009b79 	.word	0x08009b79
 8009bb0:	08009b79 	.word	0x08009b79
 8009bb4:	08009b79 	.word	0x08009b79
 8009bb8:	08009b79 	.word	0x08009b79
 8009bbc:	08009d09 	.word	0x08009d09
 8009bc0:	08009c2d 	.word	0x08009c2d
 8009bc4:	08009ceb 	.word	0x08009ceb
 8009bc8:	08009b79 	.word	0x08009b79
 8009bcc:	08009b79 	.word	0x08009b79
 8009bd0:	08009d2b 	.word	0x08009d2b
 8009bd4:	08009b79 	.word	0x08009b79
 8009bd8:	08009c2d 	.word	0x08009c2d
 8009bdc:	08009b79 	.word	0x08009b79
 8009be0:	08009b79 	.word	0x08009b79
 8009be4:	08009cf3 	.word	0x08009cf3
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	1d1a      	adds	r2, r3, #4
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	602a      	str	r2, [r5, #0]
 8009bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e0a3      	b.n	8009d44 <_printf_i+0x1f4>
 8009bfc:	6820      	ldr	r0, [r4, #0]
 8009bfe:	6829      	ldr	r1, [r5, #0]
 8009c00:	0606      	lsls	r6, r0, #24
 8009c02:	f101 0304 	add.w	r3, r1, #4
 8009c06:	d50a      	bpl.n	8009c1e <_printf_i+0xce>
 8009c08:	680e      	ldr	r6, [r1, #0]
 8009c0a:	602b      	str	r3, [r5, #0]
 8009c0c:	2e00      	cmp	r6, #0
 8009c0e:	da03      	bge.n	8009c18 <_printf_i+0xc8>
 8009c10:	232d      	movs	r3, #45	; 0x2d
 8009c12:	4276      	negs	r6, r6
 8009c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c18:	485e      	ldr	r0, [pc, #376]	; (8009d94 <_printf_i+0x244>)
 8009c1a:	230a      	movs	r3, #10
 8009c1c:	e019      	b.n	8009c52 <_printf_i+0x102>
 8009c1e:	680e      	ldr	r6, [r1, #0]
 8009c20:	602b      	str	r3, [r5, #0]
 8009c22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c26:	bf18      	it	ne
 8009c28:	b236      	sxthne	r6, r6
 8009c2a:	e7ef      	b.n	8009c0c <_printf_i+0xbc>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	6820      	ldr	r0, [r4, #0]
 8009c30:	1d19      	adds	r1, r3, #4
 8009c32:	6029      	str	r1, [r5, #0]
 8009c34:	0601      	lsls	r1, r0, #24
 8009c36:	d501      	bpl.n	8009c3c <_printf_i+0xec>
 8009c38:	681e      	ldr	r6, [r3, #0]
 8009c3a:	e002      	b.n	8009c42 <_printf_i+0xf2>
 8009c3c:	0646      	lsls	r6, r0, #25
 8009c3e:	d5fb      	bpl.n	8009c38 <_printf_i+0xe8>
 8009c40:	881e      	ldrh	r6, [r3, #0]
 8009c42:	4854      	ldr	r0, [pc, #336]	; (8009d94 <_printf_i+0x244>)
 8009c44:	2f6f      	cmp	r7, #111	; 0x6f
 8009c46:	bf0c      	ite	eq
 8009c48:	2308      	moveq	r3, #8
 8009c4a:	230a      	movne	r3, #10
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c52:	6865      	ldr	r5, [r4, #4]
 8009c54:	60a5      	str	r5, [r4, #8]
 8009c56:	2d00      	cmp	r5, #0
 8009c58:	bfa2      	ittt	ge
 8009c5a:	6821      	ldrge	r1, [r4, #0]
 8009c5c:	f021 0104 	bicge.w	r1, r1, #4
 8009c60:	6021      	strge	r1, [r4, #0]
 8009c62:	b90e      	cbnz	r6, 8009c68 <_printf_i+0x118>
 8009c64:	2d00      	cmp	r5, #0
 8009c66:	d04d      	beq.n	8009d04 <_printf_i+0x1b4>
 8009c68:	4615      	mov	r5, r2
 8009c6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c6e:	fb03 6711 	mls	r7, r3, r1, r6
 8009c72:	5dc7      	ldrb	r7, [r0, r7]
 8009c74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c78:	4637      	mov	r7, r6
 8009c7a:	42bb      	cmp	r3, r7
 8009c7c:	460e      	mov	r6, r1
 8009c7e:	d9f4      	bls.n	8009c6a <_printf_i+0x11a>
 8009c80:	2b08      	cmp	r3, #8
 8009c82:	d10b      	bne.n	8009c9c <_printf_i+0x14c>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	07de      	lsls	r6, r3, #31
 8009c88:	d508      	bpl.n	8009c9c <_printf_i+0x14c>
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	6861      	ldr	r1, [r4, #4]
 8009c8e:	4299      	cmp	r1, r3
 8009c90:	bfde      	ittt	le
 8009c92:	2330      	movle	r3, #48	; 0x30
 8009c94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009c9c:	1b52      	subs	r2, r2, r5
 8009c9e:	6122      	str	r2, [r4, #16]
 8009ca0:	f8cd a000 	str.w	sl, [sp]
 8009ca4:	464b      	mov	r3, r9
 8009ca6:	aa03      	add	r2, sp, #12
 8009ca8:	4621      	mov	r1, r4
 8009caa:	4640      	mov	r0, r8
 8009cac:	f7ff fee2 	bl	8009a74 <_printf_common>
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d14c      	bne.n	8009d4e <_printf_i+0x1fe>
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cb8:	b004      	add	sp, #16
 8009cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbe:	4835      	ldr	r0, [pc, #212]	; (8009d94 <_printf_i+0x244>)
 8009cc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009cc4:	6829      	ldr	r1, [r5, #0]
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ccc:	6029      	str	r1, [r5, #0]
 8009cce:	061d      	lsls	r5, r3, #24
 8009cd0:	d514      	bpl.n	8009cfc <_printf_i+0x1ac>
 8009cd2:	07df      	lsls	r7, r3, #31
 8009cd4:	bf44      	itt	mi
 8009cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8009cda:	6023      	strmi	r3, [r4, #0]
 8009cdc:	b91e      	cbnz	r6, 8009ce6 <_printf_i+0x196>
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	f023 0320 	bic.w	r3, r3, #32
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	2310      	movs	r3, #16
 8009ce8:	e7b0      	b.n	8009c4c <_printf_i+0xfc>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	f043 0320 	orr.w	r3, r3, #32
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	2378      	movs	r3, #120	; 0x78
 8009cf4:	4828      	ldr	r0, [pc, #160]	; (8009d98 <_printf_i+0x248>)
 8009cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cfa:	e7e3      	b.n	8009cc4 <_printf_i+0x174>
 8009cfc:	0659      	lsls	r1, r3, #25
 8009cfe:	bf48      	it	mi
 8009d00:	b2b6      	uxthmi	r6, r6
 8009d02:	e7e6      	b.n	8009cd2 <_printf_i+0x182>
 8009d04:	4615      	mov	r5, r2
 8009d06:	e7bb      	b.n	8009c80 <_printf_i+0x130>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	6826      	ldr	r6, [r4, #0]
 8009d0c:	6961      	ldr	r1, [r4, #20]
 8009d0e:	1d18      	adds	r0, r3, #4
 8009d10:	6028      	str	r0, [r5, #0]
 8009d12:	0635      	lsls	r5, r6, #24
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	d501      	bpl.n	8009d1c <_printf_i+0x1cc>
 8009d18:	6019      	str	r1, [r3, #0]
 8009d1a:	e002      	b.n	8009d22 <_printf_i+0x1d2>
 8009d1c:	0670      	lsls	r0, r6, #25
 8009d1e:	d5fb      	bpl.n	8009d18 <_printf_i+0x1c8>
 8009d20:	8019      	strh	r1, [r3, #0]
 8009d22:	2300      	movs	r3, #0
 8009d24:	6123      	str	r3, [r4, #16]
 8009d26:	4615      	mov	r5, r2
 8009d28:	e7ba      	b.n	8009ca0 <_printf_i+0x150>
 8009d2a:	682b      	ldr	r3, [r5, #0]
 8009d2c:	1d1a      	adds	r2, r3, #4
 8009d2e:	602a      	str	r2, [r5, #0]
 8009d30:	681d      	ldr	r5, [r3, #0]
 8009d32:	6862      	ldr	r2, [r4, #4]
 8009d34:	2100      	movs	r1, #0
 8009d36:	4628      	mov	r0, r5
 8009d38:	f7f6 faea 	bl	8000310 <memchr>
 8009d3c:	b108      	cbz	r0, 8009d42 <_printf_i+0x1f2>
 8009d3e:	1b40      	subs	r0, r0, r5
 8009d40:	6060      	str	r0, [r4, #4]
 8009d42:	6863      	ldr	r3, [r4, #4]
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	2300      	movs	r3, #0
 8009d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d4c:	e7a8      	b.n	8009ca0 <_printf_i+0x150>
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	462a      	mov	r2, r5
 8009d52:	4649      	mov	r1, r9
 8009d54:	4640      	mov	r0, r8
 8009d56:	47d0      	blx	sl
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d0ab      	beq.n	8009cb4 <_printf_i+0x164>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	079b      	lsls	r3, r3, #30
 8009d60:	d413      	bmi.n	8009d8a <_printf_i+0x23a>
 8009d62:	68e0      	ldr	r0, [r4, #12]
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	4298      	cmp	r0, r3
 8009d68:	bfb8      	it	lt
 8009d6a:	4618      	movlt	r0, r3
 8009d6c:	e7a4      	b.n	8009cb8 <_printf_i+0x168>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	4632      	mov	r2, r6
 8009d72:	4649      	mov	r1, r9
 8009d74:	4640      	mov	r0, r8
 8009d76:	47d0      	blx	sl
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d09b      	beq.n	8009cb4 <_printf_i+0x164>
 8009d7c:	3501      	adds	r5, #1
 8009d7e:	68e3      	ldr	r3, [r4, #12]
 8009d80:	9903      	ldr	r1, [sp, #12]
 8009d82:	1a5b      	subs	r3, r3, r1
 8009d84:	42ab      	cmp	r3, r5
 8009d86:	dcf2      	bgt.n	8009d6e <_printf_i+0x21e>
 8009d88:	e7eb      	b.n	8009d62 <_printf_i+0x212>
 8009d8a:	2500      	movs	r5, #0
 8009d8c:	f104 0619 	add.w	r6, r4, #25
 8009d90:	e7f5      	b.n	8009d7e <_printf_i+0x22e>
 8009d92:	bf00      	nop
 8009d94:	0800a17d 	.word	0x0800a17d
 8009d98:	0800a18e 	.word	0x0800a18e

08009d9c <_sbrk_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4d06      	ldr	r5, [pc, #24]	; (8009db8 <_sbrk_r+0x1c>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	4604      	mov	r4, r0
 8009da4:	4608      	mov	r0, r1
 8009da6:	602b      	str	r3, [r5, #0]
 8009da8:	f7f7 f9d6 	bl	8001158 <_sbrk>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d102      	bne.n	8009db6 <_sbrk_r+0x1a>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	b103      	cbz	r3, 8009db6 <_sbrk_r+0x1a>
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	24000218 	.word	0x24000218

08009dbc <__sread>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc4:	f000 f8a0 	bl	8009f08 <_read_r>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	bfab      	itete	ge
 8009dcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dce:	89a3      	ldrhlt	r3, [r4, #12]
 8009dd0:	181b      	addge	r3, r3, r0
 8009dd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dd6:	bfac      	ite	ge
 8009dd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dda:	81a3      	strhlt	r3, [r4, #12]
 8009ddc:	bd10      	pop	{r4, pc}

08009dde <__swrite>:
 8009dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de2:	461f      	mov	r7, r3
 8009de4:	898b      	ldrh	r3, [r1, #12]
 8009de6:	05db      	lsls	r3, r3, #23
 8009de8:	4605      	mov	r5, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	4616      	mov	r6, r2
 8009dee:	d505      	bpl.n	8009dfc <__swrite+0x1e>
 8009df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df4:	2302      	movs	r3, #2
 8009df6:	2200      	movs	r2, #0
 8009df8:	f000 f868 	bl	8009ecc <_lseek_r>
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e06:	81a3      	strh	r3, [r4, #12]
 8009e08:	4632      	mov	r2, r6
 8009e0a:	463b      	mov	r3, r7
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e12:	f000 b817 	b.w	8009e44 <_write_r>

08009e16 <__sseek>:
 8009e16:	b510      	push	{r4, lr}
 8009e18:	460c      	mov	r4, r1
 8009e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1e:	f000 f855 	bl	8009ecc <_lseek_r>
 8009e22:	1c43      	adds	r3, r0, #1
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	bf15      	itete	ne
 8009e28:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e32:	81a3      	strheq	r3, [r4, #12]
 8009e34:	bf18      	it	ne
 8009e36:	81a3      	strhne	r3, [r4, #12]
 8009e38:	bd10      	pop	{r4, pc}

08009e3a <__sclose>:
 8009e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e3e:	f000 b813 	b.w	8009e68 <_close_r>
	...

08009e44 <_write_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4d07      	ldr	r5, [pc, #28]	; (8009e64 <_write_r+0x20>)
 8009e48:	4604      	mov	r4, r0
 8009e4a:	4608      	mov	r0, r1
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	602a      	str	r2, [r5, #0]
 8009e52:	461a      	mov	r2, r3
 8009e54:	f7f6 fd86 	bl	8000964 <_write>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_write_r+0x1e>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_write_r+0x1e>
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	24000218 	.word	0x24000218

08009e68 <_close_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	4d06      	ldr	r5, [pc, #24]	; (8009e84 <_close_r+0x1c>)
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	4604      	mov	r4, r0
 8009e70:	4608      	mov	r0, r1
 8009e72:	602b      	str	r3, [r5, #0]
 8009e74:	f7f7 f93b 	bl	80010ee <_close>
 8009e78:	1c43      	adds	r3, r0, #1
 8009e7a:	d102      	bne.n	8009e82 <_close_r+0x1a>
 8009e7c:	682b      	ldr	r3, [r5, #0]
 8009e7e:	b103      	cbz	r3, 8009e82 <_close_r+0x1a>
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	bd38      	pop	{r3, r4, r5, pc}
 8009e84:	24000218 	.word	0x24000218

08009e88 <_fstat_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	4d07      	ldr	r5, [pc, #28]	; (8009ea8 <_fstat_r+0x20>)
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	4604      	mov	r4, r0
 8009e90:	4608      	mov	r0, r1
 8009e92:	4611      	mov	r1, r2
 8009e94:	602b      	str	r3, [r5, #0]
 8009e96:	f7f7 f936 	bl	8001106 <_fstat>
 8009e9a:	1c43      	adds	r3, r0, #1
 8009e9c:	d102      	bne.n	8009ea4 <_fstat_r+0x1c>
 8009e9e:	682b      	ldr	r3, [r5, #0]
 8009ea0:	b103      	cbz	r3, 8009ea4 <_fstat_r+0x1c>
 8009ea2:	6023      	str	r3, [r4, #0]
 8009ea4:	bd38      	pop	{r3, r4, r5, pc}
 8009ea6:	bf00      	nop
 8009ea8:	24000218 	.word	0x24000218

08009eac <_isatty_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4d06      	ldr	r5, [pc, #24]	; (8009ec8 <_isatty_r+0x1c>)
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4608      	mov	r0, r1
 8009eb6:	602b      	str	r3, [r5, #0]
 8009eb8:	f7f7 f935 	bl	8001126 <_isatty>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_isatty_r+0x1a>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_isatty_r+0x1a>
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	24000218 	.word	0x24000218

08009ecc <_lseek_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4d07      	ldr	r5, [pc, #28]	; (8009eec <_lseek_r+0x20>)
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	4608      	mov	r0, r1
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	602a      	str	r2, [r5, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	f7f7 f92e 	bl	800113c <_lseek>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d102      	bne.n	8009eea <_lseek_r+0x1e>
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	b103      	cbz	r3, 8009eea <_lseek_r+0x1e>
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	24000218 	.word	0x24000218

08009ef0 <__malloc_lock>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	; (8009ef8 <__malloc_lock+0x8>)
 8009ef2:	f7ff bb1d 	b.w	8009530 <__retarget_lock_acquire_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	2400020c 	.word	0x2400020c

08009efc <__malloc_unlock>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__malloc_unlock+0x8>)
 8009efe:	f7ff bb18 	b.w	8009532 <__retarget_lock_release_recursive>
 8009f02:	bf00      	nop
 8009f04:	2400020c 	.word	0x2400020c

08009f08 <_read_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d07      	ldr	r5, [pc, #28]	; (8009f28 <_read_r+0x20>)
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	4608      	mov	r0, r1
 8009f10:	4611      	mov	r1, r2
 8009f12:	2200      	movs	r2, #0
 8009f14:	602a      	str	r2, [r5, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	f7f7 f8cc 	bl	80010b4 <_read>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d102      	bne.n	8009f26 <_read_r+0x1e>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	b103      	cbz	r3, 8009f26 <_read_r+0x1e>
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	bd38      	pop	{r3, r4, r5, pc}
 8009f28:	24000218 	.word	0x24000218

08009f2c <_init>:
 8009f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2e:	bf00      	nop
 8009f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f32:	bc08      	pop	{r3}
 8009f34:	469e      	mov	lr, r3
 8009f36:	4770      	bx	lr

08009f38 <_fini>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	bf00      	nop
 8009f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3e:	bc08      	pop	{r3}
 8009f40:	469e      	mov	lr, r3
 8009f42:	4770      	bx	lr
